{"file_name": "/home/qj213/afp-2021-10-22/thys/Smooth_Manifolds/Cotangent_Space.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Smooth_Manifolds", "problem_names": ["lemma dual_space_eq:\n  \"dual_space S = {E. linear_fun_on S E} \\<inter> {E. extensional0 S E}\"", "lemma mem_dual_space:\n  \"E \\<in> dual_space S \\<longleftrightarrow> linear_fun_on S E \\<and> extensional0 S E\"", "lemma dual_spaceI:\n  \"E \\<in> dual_space S\"\n  if \"extensional0 S E\" \"linear_fun_on S E\"", "lemma dual_spaceD:\n  assumes \"E \\<in> dual_space S\"\n  shows dual_space_linear_on: \"linear_fun_on S E\"\n    and dual_space_restrict[simp]: \"extensional0 S E\"", "lemma linear_fun_on_zero:\n  \"linear_fun_on S 0\"\n  if \"subspace S\"", "lemma \"linear_fun_on S x \\<Longrightarrow> a \\<in> S \\<Longrightarrow> b \\<in> S \\<Longrightarrow> x (a + b) = x a + x b\"", "lemma linear_fun_on_add:\n  \"linear_fun_on S (x + y)\"\n  if x: \"linear_fun_on S x\" and y: \"linear_fun_on S y\" and S: \"subspace S\"", "lemma linear_fun_on_scaleR:\n  \"linear_fun_on S (c *\\<^sub>R x)\"\n  if x: \"linear_fun_on S x\" and S: \"subspace S\"", "lemma subspace_linear_fun_on:\n  \"subspace {E. linear_fun_on S E}\"\n  if \"subspace S\"", "lemma subspace_dual_space:\n  \"subspace (dual_space S)\"\n  if \"subspace S\"", "lemma inner_Basis_add:\n  \"b1 \\<in> S \\<Longrightarrow> b2 \\<in> S \\<Longrightarrow> inner_Basis (b1 + b2) v = inner_Basis b1 v + inner_Basis b2 v\"", "lemma inner_Basis_add2:\n  \"b1 \\<in> S \\<Longrightarrow> b2 \\<in> S \\<Longrightarrow> inner_Basis v (b1 + b2) = inner_Basis v b1 + inner_Basis v b2\"", "lemma inner_Basis_scale:\n  \"b1 \\<in> S \\<Longrightarrow> inner_Basis (c *\\<^sub>R b1) v = c * inner_Basis b1 v\"", "lemma inner_Basis_scale2:\n  \"b1 \\<in> S \\<Longrightarrow> inner_Basis v (c *\\<^sub>R b1) = c * inner_Basis v b1\"", "lemma inner_Basis_minus:\n  \"b1 \\<in> S \\<Longrightarrow> b2 \\<in> S \\<Longrightarrow> inner_Basis (b1 - b2) v = inner_Basis b1 v - inner_Basis b2 v\"\n  and inner_Basis_minus2:\n  \"b1 \\<in> S \\<Longrightarrow> b2 \\<in> S \\<Longrightarrow> inner_Basis v (b1 - b2) = inner_Basis v b1 - inner_Basis v b2\"", "lemma sum_zero_representation:\n  \"v = 0\"\n  if \"\\<And>b. b \\<in> B \\<Longrightarrow> representation B v b = 0\" and v: \"v \\<in> S\"", "lemma inner_Basis_0[simp]: \"inner_Basis 0 a = 0\" \"inner_Basis a 0 = 0\"", "lemma inner_Basis_eq_zeroI: \"a = 0\" if \"inner_Basis a a = 0\"\n  and \"finite B\" \"a \\<in> S\"", "lemma inner_Basis_zero: \"inner_Basis a a = 0 \\<longleftrightarrow> a = 0\"\n  if \"finite B\" \"a \\<in> S\"", "lemma subspace_S: \"subspace S\"", "lemma std_dual_linear:\n  \"linear_on S (dual_space S) scaleR scaleR std_dual\"", "lemma image_std_dual:\n  \"std_dual ` S \\<subseteq> dual_space S\"\n  if \"subspace S\"", "lemma inj_std_dual:\n  \"inj_on std_dual S\"\n  if \"subspace S\" \"finite B\"", "lemma inner_Basis_sum:\n  \"(\\<And>i. i \\<in> I \\<Longrightarrow> x i \\<in> S) \\<Longrightarrow> inner_Basis (\\<Sum>i\\<in>I. x i) v = (\\<Sum>i\\<in>I. inner_Basis (x i) v)\"", "lemma inner_Basis_sum2:\n  \"(\\<And>i. i \\<in> I \\<Longrightarrow> x i \\<in> S) \\<Longrightarrow> inner_Basis v (\\<Sum>i\\<in>I. x i) = (\\<Sum>i\\<in>I. inner_Basis v (x i))\"", "lemma B_sub_S: \"B \\<subseteq> S\"", "lemma inner_Basis_eq_representation:\n  \"inner_Basis i x = representation B x i\"\n  if \"i \\<in> B\" \"finite B\"", "lemma surj_std_dual:\n  \"std_dual ` S \\<supseteq> dual_space S\" if \"subspace S\" \"finite B\"", "lemma std_dual_bij_betw:\n  \"bij_betw (std_dual) S (dual_space S)\"\n  if \"finite B\"", "lemma std_dual_eq_dual_space: \"finite B \\<Longrightarrow> std_dual ` S = dual_space S\"", "lemma dim_dual_space:\n  assumes \"finite B\"\n  shows \"dim (dual_space S) = dim S\"", "lemma subspace_dual_S: \"subspace (dual_space S)\"", "lemma subspace_dual_T: \"subspace (dual_space T)\"", "lemma dual_map_linear:\n  \"linear_on (dual_space T) (dual_space S) scaleR scaleR (dual_map f)\"", "lemma image_dual_map:\n  \"dual_map f ` (dual_space T) \\<subseteq> dual_space S\"\n  if f: \"linear_on S T scaleR scaleR f\" and\n  defined: \"f ` S \\<subseteq> T\"", "lemma dual_map_id:\n  \"real_vector_space_pair_on.dual_map S f y = y\"\n  if f: \"\\<And>x. x \\<in> S \\<Longrightarrow> f x = x\" and y: \"y \\<in> dual_space S\"", "lemmas dual_map_def = real_vector_space_pair_on.dual_map_def", "lemma dual_map_compose:\n  \"dual_map S f (dual_map T g x) = dual_map S (g \\<circ> f) x\"\n  if \"x \\<in> dual_space U\" and \"linear_on T U scaleR scaleR g\"\n  and f: \"linear_on S T scaleR scaleR f\"\n  and defined: \"f ` S \\<subseteq> T\"\n  and ST: \"real_vector_space_pair_on S T\"\n  and TU: \"real_vector_space_pair_on T U\"", "lemma subspace_cotangent_space:\n  \"subspace (cotangent_space p)\"", "lemma cotangent_space_dim_eq: \"cotangent_space.dim p X = dim X\"\n  if \"X \\<subseteq> cotangent_space p\"", "lemma dim_cotangent_space:\n  \"dim (cotangent_space p) = DIM('b)\" if \"p \\<in> carrier\" and \"k = \\<infinity>\"", "lemma\n  linear_pullback: \"linear_on (dest.cotangent_space (f p)) (src.cotangent_space p) scaleR scaleR (pull_back p)\" and\n  image_pullback: \"pull_back p ` (dest.cotangent_space (f p)) \\<subseteq> src.cotangent_space p\"\n  if \"p \\<in> src.carrier\"", "lemma cotangent_field_is_cotangent:\n  \"cotangent_field f p \\<in> cotangent_space p\"", "lemma tangent_field_is_tangent:\n  \"tangent_field c x \\<in> tangent_space (c x)\"\n  if c_smooth: \"diff k charts_eucl charts c\" and smooth: \"k > 0\"", "lemma fundamental_theorem_of_path_integral:\n  \"((\\<lambda>x. (cotangent_field f (c x)) (tangent_field c x)) has_integral f (c b) - f (c a)) {a..b}\"\n  if ab: \"a \\<le> b\" and f: \"f \\<in> diff_fun_space\" and c: \"diff k charts_eucl charts c\" and k: \"k \\<noteq> 0\""], "translations": [["", "lemma dual_space_eq:\n  \"dual_space S = {E. linear_fun_on S E} \\<inter> {E. extensional0 S E}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual_space S = {E. linear_fun_on S E} \\<inter> {E. extensional0 S E}", "by (auto simp: dual_space_def)"], ["", "lemma mem_dual_space:\n  \"E \\<in> dual_space S \\<longleftrightarrow> linear_fun_on S E \\<and> extensional0 S E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (E \\<in> dual_space S) = (linear_fun_on S E \\<and> extensional0 S E)", "by (auto simp: dual_space_def)"], ["", "lemma dual_spaceI:\n  \"E \\<in> dual_space S\"\n  if \"extensional0 S E\" \"linear_fun_on S E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E \\<in> dual_space S", "using that"], ["proof (prove)\nusing this:\n  extensional0 S E\n  linear_fun_on S E\n\ngoal (1 subgoal):\n 1. E \\<in> dual_space S", "by (auto simp: dual_space_def)"], ["", "lemma dual_spaceD:\n  assumes \"E \\<in> dual_space S\"\n  shows dual_space_linear_on: \"linear_fun_on S E\"\n    and dual_space_restrict[simp]: \"extensional0 S E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_fun_on S E &&& extensional0 S E", "using assms"], ["proof (prove)\nusing this:\n  E \\<in> dual_space S\n\ngoal (1 subgoal):\n 1. linear_fun_on S E &&& extensional0 S E", "by (auto simp: dual_space_def)"], ["", "lemma linear_fun_on_zero:\n  \"linear_fun_on S 0\"\n  if \"subspace S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_fun_on S 0", "by (unfold_locales, auto simp add: algebra_simps that[unfolded subspace_def])"], ["", "lemma \"linear_fun_on S x \\<Longrightarrow> a \\<in> S \\<Longrightarrow> b \\<in> S \\<Longrightarrow> x (a + b) = x a + x b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>linear_fun_on S x; a \\<in> S; b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> x (a + b) = x a + x b", "using linear_on.axioms module_hom_on.add"], ["proof (prove)\nusing this:\n  linear_on ?S1.0 ?S2.0 ?s1.0 ?s2.0 ?f \\<Longrightarrow>\n  module_hom_on ?S1.0 ?S2.0 ?s1.0 ?s2.0 ?f\n  \\<lbrakk>module_hom_on ?S1.0 ?S2.0 ?s1.0 ?s2.0 ?f; ?b1.0 \\<in> ?S1.0;\n   ?b2.0 \\<in> ?S1.0\\<rbrakk>\n  \\<Longrightarrow> ?f (?b1.0 + ?b2.0) = ?f ?b1.0 + ?f ?b2.0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>linear_fun_on S x; a \\<in> S; b \\<in> S\\<rbrakk>\n    \\<Longrightarrow> x (a + b) = x a + x b", "by blast"], ["", "lemma linear_fun_on_add:\n  \"linear_fun_on S (x + y)\"\n  if x: \"linear_fun_on S x\" and y: \"linear_fun_on S y\" and S: \"subspace S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_fun_on S (x + y)", "using x that"], ["proof (prove)\nusing this:\n  linear_fun_on S x\n  linear_fun_on S x\n  linear_fun_on S y\n  subspace S\n\ngoal (1 subgoal):\n 1. linear_fun_on S (x + y)", "by (unfold_locales, auto dest!: linear_on.axioms\n      simp add: algebra_simps module_hom_on.add module_hom_on.scale subspace_def)"], ["", "lemma linear_fun_on_scaleR:\n  \"linear_fun_on S (c *\\<^sub>R x)\"\n  if x: \"linear_fun_on S x\" and S: \"subspace S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_fun_on S (c *\\<^sub>R x)", "using x that"], ["proof (prove)\nusing this:\n  linear_fun_on S x\n  linear_fun_on S x\n  subspace S\n\ngoal (1 subgoal):\n 1. linear_fun_on S (c *\\<^sub>R x)", "by (unfold_locales, auto dest!: linear_on.axioms\n      simp add: module_hom_on.add module_hom_on.scale algebra_simps subspace_def)"], ["", "lemma subspace_linear_fun_on:\n  \"subspace {E. linear_fun_on S E}\"\n  if \"subspace S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace {E. linear_fun_on S E}", "by (auto simp: subspace_def linear_fun_on_zero[OF that]\n      linear_fun_on_add[OF _ _ that] linear_fun_on_scaleR[OF _ that])"], ["", "lemma subspace_dual_space:\n  \"subspace (dual_space S)\"\n  if \"subspace S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace (dual_space S)", "unfolding dual_space_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace (Collect (linear_fun_on S) \\<inter> Collect (extensional0 S))", "apply (rule subspace_inter)"], ["proof (prove)\ngoal (2 subgoals):\n 1. subspace (Collect (linear_fun_on S))\n 2. subspace (Collect (extensional0 S))", "apply (rule subspace_linear_fun_on[OF that])"], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace (Collect (extensional0 S))", "apply (rule subspace_extensional0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Dimension of dual space\\<close>"], ["", "text \\<open>Mapping from S to the dual of S\\<close>"], ["", "context fixes B S assumes B: \"independent B\" \"span B = S\"\nbegin"], ["", "definition \"inner_Basis a b = (\\<Sum>i\\<in>B. representation B a i * representation B b i)\"\n  \\<comment> \\<open>TODO: move to library\\<close>"], ["", "definition std_dual :: \"'a::real_vector \\<Rightarrow> ('a \\<Rightarrow> real)\" where\n  \"std_dual a = restrict0 S (restrict0 S (\\<lambda>b. inner_Basis a b))\""], ["", "lemma inner_Basis_add:\n  \"b1 \\<in> S \\<Longrightarrow> b2 \\<in> S \\<Longrightarrow> inner_Basis (b1 + b2) v = inner_Basis b1 v + inner_Basis b2 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b1 \\<in> S; b2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> local.inner_Basis (b1 + b2) v =\n                      local.inner_Basis b1 v + local.inner_Basis b2 v", "by (auto simp: std_dual_def restrict0_def algebra_simps representation_add representation_scale\n      B inner_Basis_def\n      sum.distrib sum_distrib_left)"], ["", "lemma inner_Basis_add2:\n  \"b1 \\<in> S \\<Longrightarrow> b2 \\<in> S \\<Longrightarrow> inner_Basis v (b1 + b2) = inner_Basis v b1 + inner_Basis v b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b1 \\<in> S; b2 \\<in> S\\<rbrakk>\n    \\<Longrightarrow> local.inner_Basis v (b1 + b2) =\n                      local.inner_Basis v b1 + local.inner_Basis v b2", "by (auto simp: std_dual_def restrict0_def algebra_simps representation_add representation_scale\n      B inner_Basis_def\n      sum.distrib sum_distrib_left)"], ["", "lemma inner_Basis_scale:\n  \"b1 \\<in> S \\<Longrightarrow> inner_Basis (c *\\<^sub>R b1) v = c * inner_Basis b1 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 \\<in> S \\<Longrightarrow>\n    local.inner_Basis (c *\\<^sub>R b1) v = c * local.inner_Basis b1 v", "by (auto simp: std_dual_def restrict0_def algebra_simps representation_add representation_scale\n      B inner_Basis_def sum.distrib sum_distrib_left)"], ["", "lemma inner_Basis_scale2:\n  \"b1 \\<in> S \\<Longrightarrow> inner_Basis v (c *\\<^sub>R b1) = c * inner_Basis v b1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 \\<in> S \\<Longrightarrow>\n    local.inner_Basis v (c *\\<^sub>R b1) = c * local.inner_Basis v b1", "by (auto simp: std_dual_def restrict0_def algebra_simps representation_add representation_scale\n      B inner_Basis_def sum.distrib sum_distrib_left)"], ["", "lemma inner_Basis_minus:\n  \"b1 \\<in> S \\<Longrightarrow> b2 \\<in> S \\<Longrightarrow> inner_Basis (b1 - b2) v = inner_Basis b1 v - inner_Basis b2 v\"\n  and inner_Basis_minus2:\n  \"b1 \\<in> S \\<Longrightarrow> b2 \\<in> S \\<Longrightarrow> inner_Basis v (b1 - b2) = inner_Basis v b1 - inner_Basis v b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>b1 \\<in> S; b2 \\<in> S\\<rbrakk>\n     \\<Longrightarrow> local.inner_Basis (b1 - b2) v =\n                       local.inner_Basis b1 v - local.inner_Basis b2 v) &&&\n    (\\<lbrakk>b1 \\<in> S; b2 \\<in> S\\<rbrakk>\n     \\<Longrightarrow> local.inner_Basis v (b1 - b2) =\n                       local.inner_Basis v b1 - local.inner_Basis v b2)", "by (auto simp: std_dual_def restrict0_def algebra_simps representation_diff representation_scale\n      B inner_Basis_def\n      sum_subtractf sum_distrib_left)"], ["", "lemma sum_zero_representation:\n  \"v = 0\"\n  if \"\\<And>b. b \\<in> B \\<Longrightarrow> representation B v b = 0\" and v: \"v \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v = (0::'a)", "have empty: \"{b. representation B v b \\<noteq> 0} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {b. representation B v b \\<noteq> 0} = {}", "using that(1) representation_ne_zero"], ["proof (prove)\nusing this:\n  ?b \\<in> B \\<Longrightarrow> representation B v ?b = 0\n  representation ?basis ?v ?b \\<noteq> 0 \\<Longrightarrow> ?b \\<in> ?basis\n\ngoal (1 subgoal):\n 1. {b. representation B v b \\<noteq> 0} = {}", "by auto"], ["proof (state)\nthis:\n  {b. representation B v b \\<noteq> 0} = {}\n\ngoal (1 subgoal):\n 1. v = (0::'a)", "have \"v \\<in> span B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> span B", "using B v"], ["proof (prove)\nusing this:\n  independent B\n  span B = S\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. v \\<in> span B", "by simp"], ["proof (state)\nthis:\n  v \\<in> span B\n\ngoal (1 subgoal):\n 1. v = (0::'a)", "from sum_nonzero_representation_eq[OF B(1) this]"], ["proof (chain)\npicking this:\n  (\\<Sum>b | representation B v b \\<noteq> 0.\n     representation B v b *\\<^sub>R b) =\n  v", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>b | representation B v b \\<noteq> 0.\n     representation B v b *\\<^sub>R b) =\n  v\n\ngoal (1 subgoal):\n 1. v = (0::'a)", "by (simp add: empty)"], ["proof (state)\nthis:\n  v = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inner_Basis_0[simp]: \"inner_Basis 0 a = 0\" \"inner_Basis a 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inner_Basis (0::'a) a = 0 &&& local.inner_Basis a (0::'a) = 0", "by (auto simp: inner_Basis_def representation_zero)"], ["", "lemma inner_Basis_eq_zeroI: \"a = 0\" if \"inner_Basis a a = 0\"\n  and \"finite B\" \"a \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = (0::'a)", "by (rule sum_zero_representation)\n    (use that in \\<open>auto simp: inner_Basis_def that sum_nonneg_eq_0_iff\\<close>)"], ["", "lemma inner_Basis_zero: \"inner_Basis a a = 0 \\<longleftrightarrow> a = 0\"\n  if \"finite B\" \"a \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (local.inner_Basis a a = 0) = (a = (0::'a))", "by (auto simp: inner_Basis_eq_zeroI that)"], ["", "lemma subspace_S: \"subspace S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace S", "using B"], ["proof (prove)\nusing this:\n  independent B\n  span B = S\n\ngoal (1 subgoal):\n 1. subspace S", "by auto"], ["", "interpretation S: real_vector_space_on S"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_vector_space_on S", "using subspace_S"], ["proof (prove)\nusing this:\n  subspace S\n\ngoal (1 subgoal):\n 1. real_vector_space_on S", "by unfold_locales"], ["", "interpretation dual: real_vector_space_on \"dual_space S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_vector_space_on (dual_space S)", "using subspace_dual_space[OF subspace_S]"], ["proof (prove)\nusing this:\n  subspace (dual_space S)\n\ngoal (1 subgoal):\n 1. real_vector_space_on (dual_space S)", "by unfold_locales"], ["", "lemma std_dual_linear:\n  \"linear_on S (dual_space S) scaleR scaleR std_dual\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_on S (dual_space S) (*\\<^sub>R) (*\\<^sub>R) local.std_dual", "by unfold_locales\n    (auto simp add: subspace_S[unfolded subspace_def] subspace_dual_space[unfolded subspace_def] algebra_simps\n      std_dual_def inner_Basis_scale inner_Basis_add restrict0_def)"], ["", "lemma image_std_dual:\n  \"std_dual ` S \\<subseteq> dual_space S\"\n  if \"subspace S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.std_dual ` S \\<subseteq> dual_space S", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> S \\<Longrightarrow> local.std_dual xa \\<in> dual_space S", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> S \\<Longrightarrow> local.std_dual xa \\<in> dual_space S", "assume \"y \\<in> S\""], ["proof (state)\nthis:\n  y \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> S \\<Longrightarrow> local.std_dual xa \\<in> dual_space S", "show \"std_dual y \\<in> dual_space S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.std_dual y \\<in> dual_space S", "proof (rule dual_spaceI)"], ["proof (state)\ngoal (2 subgoals):\n 1. extensional0 S (local.std_dual y)\n 2. linear_fun_on S (local.std_dual y)", "show \"extensional0 S (std_dual y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensional0 S (local.std_dual y)", "by (auto simp: std_dual_def)"], ["proof (state)\nthis:\n  extensional0 S (local.std_dual y)\n\ngoal (1 subgoal):\n 1. linear_fun_on S (local.std_dual y)", "show \"linear_fun_on S (std_dual y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_fun_on S (local.std_dual y)", "by (unfold_locales, auto simp: std_dual_def algebra_simps that[unfolded subspace_def]\n        inner_Basis_add2 inner_Basis_scale2 B)"], ["proof (state)\nthis:\n  linear_fun_on S (local.std_dual y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.std_dual y \\<in> dual_space S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inj_std_dual:\n  \"inj_on std_dual S\"\n  if \"subspace S\" \"finite B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on local.std_dual S", "proof (intro inj_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> S;\n        local.std_dual x = local.std_dual y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> S;\n        local.std_dual x = local.std_dual y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume x: \"x \\<in> S\" and y: \"y \\<in> S\" and eq: \"std_dual x = std_dual y\""], ["proof (state)\nthis:\n  x \\<in> S\n  y \\<in> S\n  local.std_dual x = local.std_dual y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> S;\n        local.std_dual x = local.std_dual y\\<rbrakk>\n       \\<Longrightarrow> x = y", "have 1: \"inner_Basis x b = inner_Basis y b\" if b: \"b \\<in> S\" for b"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inner_Basis x b = local.inner_Basis y b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.inner_Basis x b = local.inner_Basis y b", "have \"std_dual x b = inner_Basis x b\" \"std_dual y b = inner_Basis y b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.std_dual x b = local.inner_Basis x b &&&\n    local.std_dual y b = local.inner_Basis y b", "unfolding std_dual_def restrict0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if b \\<in> S then if b \\<in> S then local.inner_Basis x b else 0\n     else 0) =\n    local.inner_Basis x b &&&\n    (if b \\<in> S then if b \\<in> S then local.inner_Basis y b else 0\n     else 0) =\n    local.inner_Basis y b", "using b"], ["proof (prove)\nusing this:\n  b \\<in> S\n\ngoal (1 subgoal):\n 1. (if b \\<in> S then if b \\<in> S then local.inner_Basis x b else 0\n     else 0) =\n    local.inner_Basis x b &&&\n    (if b \\<in> S then if b \\<in> S then local.inner_Basis y b else 0\n     else 0) =\n    local.inner_Basis y b", "by auto"], ["proof (state)\nthis:\n  local.std_dual x b = local.inner_Basis x b\n  local.std_dual y b = local.inner_Basis y b\n\ngoal (1 subgoal):\n 1. local.inner_Basis x b = local.inner_Basis y b", "then"], ["proof (chain)\npicking this:\n  local.std_dual x b = local.inner_Basis x b\n  local.std_dual y b = local.inner_Basis y b", "show ?thesis"], ["proof (prove)\nusing this:\n  local.std_dual x b = local.inner_Basis x b\n  local.std_dual y b = local.inner_Basis y b\n\ngoal (1 subgoal):\n 1. local.inner_Basis x b = local.inner_Basis y b", "using eq"], ["proof (prove)\nusing this:\n  local.std_dual x b = local.inner_Basis x b\n  local.std_dual y b = local.inner_Basis y b\n  local.std_dual x = local.std_dual y\n\ngoal (1 subgoal):\n 1. local.inner_Basis x b = local.inner_Basis y b", "by auto"], ["proof (state)\nthis:\n  local.inner_Basis x b = local.inner_Basis y b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?b \\<in> S \\<Longrightarrow>\n  local.inner_Basis x ?b = local.inner_Basis y ?b\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> S;\n        local.std_dual x = local.std_dual y\\<rbrakk>\n       \\<Longrightarrow> x = y", "have 2: \"x - y \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x - y \\<in> S", "using that(1) x y"], ["proof (prove)\nusing this:\n  subspace S\n  x \\<in> S\n  y \\<in> S\n\ngoal (1 subgoal):\n 1. x - y \\<in> S", "by (rule subspace_diff)"], ["proof (state)\nthis:\n  x - y \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> S;\n        local.std_dual x = local.std_dual y\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"inner_Basis x (x - y) - inner_Basis y (x - y) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inner_Basis x (x - y) - local.inner_Basis y (x - y) = 0", "using 1 2"], ["proof (prove)\nusing this:\n  ?b \\<in> S \\<Longrightarrow>\n  local.inner_Basis x ?b = local.inner_Basis y ?b\n  x - y \\<in> S\n\ngoal (1 subgoal):\n 1. local.inner_Basis x (x - y) - local.inner_Basis y (x - y) = 0", "by auto"], ["proof (state)\nthis:\n  local.inner_Basis x (x - y) - local.inner_Basis y (x - y) = 0\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> S;\n        local.std_dual x = local.std_dual y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  local.inner_Basis x (x - y) - local.inner_Basis y (x - y) = 0", "have \"inner_Basis (x - y) (x - y) = 0\""], ["proof (prove)\nusing this:\n  local.inner_Basis x (x - y) - local.inner_Basis y (x - y) = 0\n\ngoal (1 subgoal):\n 1. local.inner_Basis (x - y) (x - y) = 0", "by (auto simp: inner_Basis_minus inner_Basis_minus2 2 B x y algebra_simps)"], ["proof (state)\nthis:\n  local.inner_Basis (x - y) (x - y) = 0\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> S; y \\<in> S;\n        local.std_dual x = local.std_dual y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  local.inner_Basis (x - y) (x - y) = 0", "show \"x = y\""], ["proof (prove)\nusing this:\n  local.inner_Basis (x - y) (x - y) = 0\n\ngoal (1 subgoal):\n 1. x = y", "by (auto simp: inner_Basis_zero B that 2)"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inner_Basis_sum:\n  \"(\\<And>i. i \\<in> I \\<Longrightarrow> x i \\<in> S) \\<Longrightarrow> inner_Basis (\\<Sum>i\\<in>I. x i) v = (\\<Sum>i\\<in>I. inner_Basis (x i) v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i. i \\<in> I \\<Longrightarrow> x i \\<in> S) \\<Longrightarrow>\n    local.inner_Basis (sum x I) v =\n    (\\<Sum>i\\<in>I. local.inner_Basis (x i) v)", "apply (induction I rule: infinite_finite_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>infinite A;\n        \\<And>i. i \\<in> A \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> local.inner_Basis (sum x A) v =\n                         (\\<Sum>i\\<in>A. local.inner_Basis (x i) v)\n 2. (\\<And>i. i \\<in> {} \\<Longrightarrow> x i \\<in> S) \\<Longrightarrow>\n    local.inner_Basis (sum x {}) v =\n    (\\<Sum>i\\<in>{}. local.inner_Basis (x i) v)\n 3. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        (\\<And>i. i \\<in> F \\<Longrightarrow> x i \\<in> S) \\<Longrightarrow>\n        local.inner_Basis (sum x F) v =\n        (\\<Sum>i\\<in>F. local.inner_Basis (x i) v);\n        \\<And>i. i \\<in> insert xa F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> local.inner_Basis (sum x (insert xa F)) v =\n                         (\\<Sum>i\\<in>insert xa F.\n                            local.inner_Basis (x i) v)", "apply (auto simp: )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        local.inner_Basis (sum x F) v =\n        (\\<Sum>i\\<in>F. local.inner_Basis (x i) v);\n        \\<And>i.\n           i = xa \\<or> i \\<in> F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> local.inner_Basis (x xa + sum x F) v =\n                         local.inner_Basis (x xa) v +\n                         (\\<Sum>i\\<in>F. local.inner_Basis (x i) v)", "apply (subst inner_Basis_add)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        local.inner_Basis (sum x F) v =\n        (\\<Sum>i\\<in>F. local.inner_Basis (x i) v);\n        \\<And>i.\n           i = xa \\<or> i \\<in> F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> x xa \\<in> S\n 2. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        local.inner_Basis (sum x F) v =\n        (\\<Sum>i\\<in>F. local.inner_Basis (x i) v);\n        \\<And>i.\n           i = xa \\<or> i \\<in> F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum x F \\<in> S\n 3. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        local.inner_Basis (sum x F) v =\n        (\\<Sum>i\\<in>F. local.inner_Basis (x i) v);\n        \\<And>i.\n           i = xa \\<or> i \\<in> F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> local.inner_Basis (x xa) v +\n                         local.inner_Basis (sum x F) v =\n                         local.inner_Basis (x xa) v +\n                         (\\<Sum>i\\<in>F. local.inner_Basis (x i) v)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        local.inner_Basis (sum x F) v =\n        (\\<Sum>i\\<in>F. local.inner_Basis (x i) v);\n        \\<And>i.\n           i = xa \\<or> i \\<in> F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum x F \\<in> S", "by (metis B(2) subspace_span subspace_sum)"], ["", "lemma inner_Basis_sum2:\n  \"(\\<And>i. i \\<in> I \\<Longrightarrow> x i \\<in> S) \\<Longrightarrow> inner_Basis v (\\<Sum>i\\<in>I. x i) = (\\<Sum>i\\<in>I. inner_Basis v (x i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i. i \\<in> I \\<Longrightarrow> x i \\<in> S) \\<Longrightarrow>\n    local.inner_Basis v (sum x I) =\n    (\\<Sum>i\\<in>I. local.inner_Basis v (x i))", "apply (induction I rule: infinite_finite_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>infinite A;\n        \\<And>i. i \\<in> A \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> local.inner_Basis v (sum x A) =\n                         (\\<Sum>i\\<in>A. local.inner_Basis v (x i))\n 2. (\\<And>i. i \\<in> {} \\<Longrightarrow> x i \\<in> S) \\<Longrightarrow>\n    local.inner_Basis v (sum x {}) =\n    (\\<Sum>i\\<in>{}. local.inner_Basis v (x i))\n 3. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        (\\<And>i. i \\<in> F \\<Longrightarrow> x i \\<in> S) \\<Longrightarrow>\n        local.inner_Basis v (sum x F) =\n        (\\<Sum>i\\<in>F. local.inner_Basis v (x i));\n        \\<And>i. i \\<in> insert xa F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> local.inner_Basis v (sum x (insert xa F)) =\n                         (\\<Sum>i\\<in>insert xa F.\n                            local.inner_Basis v (x i))", "apply (auto simp: )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        local.inner_Basis v (sum x F) =\n        (\\<Sum>i\\<in>F. local.inner_Basis v (x i));\n        \\<And>i.\n           i = xa \\<or> i \\<in> F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> local.inner_Basis v (x xa + sum x F) =\n                         local.inner_Basis v (x xa) +\n                         (\\<Sum>i\\<in>F. local.inner_Basis v (x i))", "apply (subst inner_Basis_add2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        local.inner_Basis v (sum x F) =\n        (\\<Sum>i\\<in>F. local.inner_Basis v (x i));\n        \\<And>i.\n           i = xa \\<or> i \\<in> F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> x xa \\<in> S\n 2. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        local.inner_Basis v (sum x F) =\n        (\\<Sum>i\\<in>F. local.inner_Basis v (x i));\n        \\<And>i.\n           i = xa \\<or> i \\<in> F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum x F \\<in> S\n 3. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        local.inner_Basis v (sum x F) =\n        (\\<Sum>i\\<in>F. local.inner_Basis v (x i));\n        \\<And>i.\n           i = xa \\<or> i \\<in> F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> local.inner_Basis v (x xa) +\n                         local.inner_Basis v (sum x F) =\n                         local.inner_Basis v (x xa) +\n                         (\\<Sum>i\\<in>F. local.inner_Basis v (x i))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa F.\n       \\<lbrakk>finite F; xa \\<notin> F;\n        local.inner_Basis v (sum x F) =\n        (\\<Sum>i\\<in>F. local.inner_Basis v (x i));\n        \\<And>i.\n           i = xa \\<or> i \\<in> F \\<Longrightarrow> x i \\<in> S\\<rbrakk>\n       \\<Longrightarrow> sum x F \\<in> S", "by (metis B(2) subspace_span subspace_sum)"], ["", "lemma B_sub_S: \"B \\<subseteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<subseteq> S", "using B(2) span_eq"], ["proof (prove)\nusing this:\n  span B = S\n  (span ?S = span ?T) =\n  (?S \\<subseteq> span ?T \\<and> ?T \\<subseteq> span ?S)\n\ngoal (1 subgoal):\n 1. B \\<subseteq> S", "by auto"], ["", "lemma inner_Basis_eq_representation:\n  \"inner_Basis i x = representation B x i\"\n  if \"i \\<in> B\" \"finite B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inner_Basis i x = representation B x i", "unfolding inner_Basis_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia\\<in>B. representation B i ia * representation B x ia) =\n    representation B x i", "by (simp add: B that representation_basis if_distrib if_distribR cong: if_cong)"], ["", "lemma surj_std_dual:\n  \"std_dual ` S \\<supseteq> dual_space S\" if \"subspace S\" \"finite B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual_space S \\<subseteq> local.std_dual ` S", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> dual_space S \\<Longrightarrow> x \\<in> local.std_dual ` S", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> dual_space S \\<Longrightarrow> x \\<in> local.std_dual ` S", "assume y: \"y \\<in> dual_space S\""], ["proof (state)\nthis:\n  y \\<in> dual_space S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> dual_space S \\<Longrightarrow> x \\<in> local.std_dual ` S", "show \"y \\<in> std_dual ` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> local.std_dual ` S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> local.std_dual ` S", "(* Basic idea: let v_i be a basis of S. Let x be the sum of (y v_i) * v_i.\n       Then y should be equal to std_dual S ` x. *)"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> local.std_dual ` S", "let ?x = \"\\<Sum>i\\<in>B. (y i) *\\<^sub>R i\""], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> local.std_dual ` S", "have x: \"?x \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>B. y i *\\<^sub>R i) \\<in> S", "using that(1)"], ["proof (prove)\nusing this:\n  subspace S\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>B. y i *\\<^sub>R i) \\<in> S", "apply (rule subspace_sum)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B \\<Longrightarrow> y x *\\<^sub>R x \\<in> S", "using that(1)"], ["proof (prove)\nusing this:\n  subspace S\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B \\<Longrightarrow> y x *\\<^sub>R x \\<in> S", "apply (rule subspace_scale)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B \\<Longrightarrow> x \\<in> S", "using B span_superset"], ["proof (prove)\nusing this:\n  independent B\n  span B = S\n  ?S \\<subseteq> span ?S\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> B \\<Longrightarrow> x \\<in> S", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>B. y i *\\<^sub>R i) \\<in> S\n\ngoal (1 subgoal):\n 1. y \\<in> local.std_dual ` S", "from dual_space_linear_on[OF y]"], ["proof (chain)\npicking this:\n  linear_fun_on S y", "have linear_y: \"linear_fun_on S y\""], ["proof (prove)\nusing this:\n  linear_fun_on S y\n\ngoal (1 subgoal):\n 1. linear_fun_on S y", "."], ["proof (state)\nthis:\n  linear_fun_on S y\n\ngoal (1 subgoal):\n 1. y \\<in> local.std_dual ` S", "then"], ["proof (chain)\npicking this:\n  linear_fun_on S y", "interpret linear_on S UNIV scaleR scaleR y"], ["proof (prove)\nusing this:\n  linear_fun_on S y\n\ngoal (1 subgoal):\n 1. linear_fun_on S y", "."], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> local.std_dual ` S", "interpret vector_space_pair_on S \"UNIV::real set\" scaleR scaleR"], ["proof (prove)\ngoal (1 subgoal):\n 1. vector_space_pair_on S UNIV (*\\<^sub>R) (*\\<^sub>R)", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> local.std_dual ` S", "have \"y = std_dual ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = local.std_dual (\\<Sum>i\\<in>B. y i *\\<^sub>R i)", "apply (rule ext_extensional0[of S])"], ["proof (prove)\ngoal (3 subgoals):\n 1. extensional0 S y\n 2. extensional0 S (local.std_dual (\\<Sum>i\\<in>B. y i *\\<^sub>R i))\n 3. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       y x = local.std_dual (\\<Sum>i\\<in>B. y i *\\<^sub>R i) x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. extensional0 S y", "using y dual_space_def"], ["proof (prove)\nusing this:\n  y \\<in> dual_space S\n  dual_space ?S = {E. linear_fun_on ?S E \\<and> extensional0 ?S E}\n\ngoal (1 subgoal):\n 1. extensional0 S y", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. extensional0 S (local.std_dual (\\<Sum>i\\<in>B. y i *\\<^sub>R i))\n 2. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       y x = local.std_dual (\\<Sum>i\\<in>B. y i *\\<^sub>R i) x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. extensional0 S (local.std_dual (\\<Sum>i\\<in>B. y i *\\<^sub>R i))", "by (auto simp: std_dual_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       y x = local.std_dual (\\<Sum>i\\<in>B. y i *\\<^sub>R i) x", "unfolding std_dual_def restrict0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       y x =\n       (if x \\<in> S\n        then if x \\<in> S\n             then local.inner_Basis (\\<Sum>i\\<in>B. y i *\\<^sub>R i) x\n             else 0\n        else 0)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       y x = local.inner_Basis (\\<Sum>i\\<in>B. y i *\\<^sub>R i) x", "apply (subst inner_Basis_sum)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x i.\n       \\<lbrakk>x \\<in> S; i \\<in> B\\<rbrakk>\n       \\<Longrightarrow> y i *\\<^sub>R i \\<in> S\n 2. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x_ \\<in> S; i_ \\<in> B\\<rbrakk>\n    \\<Longrightarrow> y i_ *\\<^sub>R i_ \\<in> S", "using B(2) span_base subspace_scale"], ["proof (prove)\nusing this:\n  span B = S\n  ?a \\<in> ?S \\<Longrightarrow> ?a \\<in> span ?S\n  \\<lbrakk>subspace ?S; ?x \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?c *\\<^sub>R ?x \\<in> ?S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x_ \\<in> S; i_ \\<in> B\\<rbrakk>\n    \\<Longrightarrow> y i_ *\\<^sub>R i_ \\<in> S", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow>\n    y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)", "proof goal_cases"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow>\n    y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)", "case 1"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow>\n    y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)", "have \"(\\<Sum>i\\<in>B. inner_Basis (y i *\\<^sub>R i) x) = (\\<Sum>i\\<in>B. y (inner_Basis i x *\\<^sub>R i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x) =\n    (\\<Sum>i\\<in>B. y (local.inner_Basis i x *\\<^sub>R i))", "proof (rule sum.cong[OF refl])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis (y xa *\\<^sub>R xa) x =\n       y (local.inner_Basis xa x *\\<^sub>R xa)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis (y xa *\\<^sub>R xa) x =\n       y (local.inner_Basis xa x *\\<^sub>R xa)", "assume i: \"i \\<in> B\""], ["proof (state)\nthis:\n  i \\<in> B\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis (y xa *\\<^sub>R xa) x =\n       y (local.inner_Basis xa x *\\<^sub>R xa)", "then"], ["proof (chain)\npicking this:\n  i \\<in> B", "have \"i : S\""], ["proof (prove)\nusing this:\n  i \\<in> B\n\ngoal (1 subgoal):\n 1. i \\<in> S", "using B_sub_S"], ["proof (prove)\nusing this:\n  i \\<in> B\n  B \\<subseteq> S\n\ngoal (1 subgoal):\n 1. i \\<in> S", "by auto"], ["proof (state)\nthis:\n  i \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis (y xa *\\<^sub>R xa) x =\n       y (local.inner_Basis xa x *\\<^sub>R xa)", "have \"inner_Basis (y i *\\<^sub>R i) x = y i * inner_Basis i x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inner_Basis (y i *\\<^sub>R i) x = y i * local.inner_Basis i x", "apply (subst inner_Basis_scale)"], ["proof (prove)\ngoal (2 subgoals):\n 1. i \\<in> S\n 2. y i * local.inner_Basis i x = y i * local.inner_Basis i x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> S", "using B_sub_S i"], ["proof (prove)\nusing this:\n  B \\<subseteq> S\n  i \\<in> B\n\ngoal (1 subgoal):\n 1. i \\<in> S", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. y i * local.inner_Basis i x = y i * local.inner_Basis i x", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  local.inner_Basis (y i *\\<^sub>R i) x = y i * local.inner_Basis i x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis (y xa *\\<^sub>R xa) x =\n       y (local.inner_Basis xa x *\\<^sub>R xa)", "also"], ["proof (state)\nthis:\n  local.inner_Basis (y i *\\<^sub>R i) x = y i * local.inner_Basis i x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis (y xa *\\<^sub>R xa) x =\n       y (local.inner_Basis xa x *\\<^sub>R xa)", "have \"\\<dots> = y i *\\<^sub>R inner_Basis i x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y i * local.inner_Basis i x = y i *\\<^sub>R local.inner_Basis i x", "by simp"], ["proof (state)\nthis:\n  y i * local.inner_Basis i x = y i *\\<^sub>R local.inner_Basis i x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis (y xa *\\<^sub>R xa) x =\n       y (local.inner_Basis xa x *\\<^sub>R xa)", "also"], ["proof (state)\nthis:\n  y i * local.inner_Basis i x = y i *\\<^sub>R local.inner_Basis i x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis (y xa *\\<^sub>R xa) x =\n       y (local.inner_Basis xa x *\\<^sub>R xa)", "have \"\\<dots> = y (inner_Basis i x *\\<^sub>R i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y i *\\<^sub>R local.inner_Basis i x =\n    y (local.inner_Basis i x *\\<^sub>R i)", "by (auto simp: \\<open>i \\<in> S\\<close> scale)"], ["proof (state)\nthis:\n  y i *\\<^sub>R local.inner_Basis i x =\n  y (local.inner_Basis i x *\\<^sub>R i)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis (y xa *\\<^sub>R xa) x =\n       y (local.inner_Basis xa x *\\<^sub>R xa)", "finally"], ["proof (chain)\npicking this:\n  local.inner_Basis (y i *\\<^sub>R i) x =\n  y (local.inner_Basis i x *\\<^sub>R i)", "show \"inner_Basis (y i *\\<^sub>R i) x = y (inner_Basis i x *\\<^sub>R i)\""], ["proof (prove)\nusing this:\n  local.inner_Basis (y i *\\<^sub>R i) x =\n  y (local.inner_Basis i x *\\<^sub>R i)\n\ngoal (1 subgoal):\n 1. local.inner_Basis (y i *\\<^sub>R i) x =\n    y (local.inner_Basis i x *\\<^sub>R i)", "."], ["proof (state)\nthis:\n  local.inner_Basis (y i *\\<^sub>R i) x =\n  y (local.inner_Basis i x *\\<^sub>R i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x) =\n  (\\<Sum>i\\<in>B. y (local.inner_Basis i x *\\<^sub>R i))\n\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow>\n    y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x) =\n  (\\<Sum>i\\<in>B. y (local.inner_Basis i x *\\<^sub>R i))\n\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow>\n    y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)", "have \"\\<dots> = y (\\<Sum>i\\<in>B. (inner_Basis i x *\\<^sub>R i))\" (is \"_ = y ?sum\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>B. y (local.inner_Basis i x *\\<^sub>R i)) =\n    y (\\<Sum>i\\<in>B. local.inner_Basis i x *\\<^sub>R i)", "apply (subst linear_sum'[OF _ _ linear_y])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x. x \\<in> S \\<longrightarrow> y x \\<in> UNIV\n 2. \\<forall>xa.\n       xa \\<in> B \\<longrightarrow>\n       local.inner_Basis xa x *\\<^sub>R xa \\<in> S\n 3. (\\<Sum>i\\<in>B. y (local.inner_Basis i x *\\<^sub>R i)) =\n    (\\<Sum>a\\<in>B. y (local.inner_Basis a x *\\<^sub>R a))", "apply (auto simp: inner_Basis_eq_representation)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis xa x *\\<^sub>R xa \\<in> S", "using B(2) S.mem_scale span_base"], ["proof (prove)\nusing this:\n  span B = S\n  ?x \\<in> S \\<Longrightarrow> ?a *\\<^sub>R ?x \\<in> S\n  ?a \\<in> ?S \\<Longrightarrow> ?a \\<in> span ?S\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis xa x *\\<^sub>R xa \\<in> S", "by blast"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>B. y (local.inner_Basis i x *\\<^sub>R i)) =\n  y (\\<Sum>i\\<in>B. local.inner_Basis i x *\\<^sub>R i)\n\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow>\n    y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>B. y (local.inner_Basis i x *\\<^sub>R i)) =\n  y (\\<Sum>i\\<in>B. local.inner_Basis i x *\\<^sub>R i)\n\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow>\n    y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)", "have \"?sum = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>B. local.inner_Basis i x *\\<^sub>R i) = x", "apply (subst sum.cong[OF refl])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> B \\<Longrightarrow>\n       local.inner_Basis xa x *\\<^sub>R xa = ?h xa\n 2. sum ?h B = x", "apply (subst inner_Basis_eq_representation, assumption, rule that, rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>xa\\<in>B. representation B x xa *\\<^sub>R xa) = x", "apply (subst sum_representation_eq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. independent B\n 2. x \\<in> span B\n 3. finite B\n 4. B \\<subseteq> B\n 5. x = x", "by (auto simp: that B \\<open>x : S\\<close>)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>B. local.inner_Basis i x *\\<^sub>R i) = x\n\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow>\n    y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x) = y x", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x) = y x\n\ngoal (1 subgoal):\n 1. y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)", "by simp"], ["proof (state)\nthis:\n  y x = (\\<Sum>i\\<in>B. local.inner_Basis (y i *\\<^sub>R i) x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  y = local.std_dual (\\<Sum>i\\<in>B. y i *\\<^sub>R i)\n\ngoal (1 subgoal):\n 1. y \\<in> local.std_dual ` S", "then"], ["proof (chain)\npicking this:\n  y = local.std_dual (\\<Sum>i\\<in>B. y i *\\<^sub>R i)", "show ?thesis"], ["proof (prove)\nusing this:\n  y = local.std_dual (\\<Sum>i\\<in>B. y i *\\<^sub>R i)\n\ngoal (1 subgoal):\n 1. y \\<in> local.std_dual ` S", "using x"], ["proof (prove)\nusing this:\n  y = local.std_dual (\\<Sum>i\\<in>B. y i *\\<^sub>R i)\n  (\\<Sum>i\\<in>B. y i *\\<^sub>R i) \\<in> S\n\ngoal (1 subgoal):\n 1. y \\<in> local.std_dual ` S", "by auto"], ["proof (state)\nthis:\n  y \\<in> local.std_dual ` S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<in> local.std_dual ` S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma std_dual_bij_betw:\n  \"bij_betw (std_dual) S (dual_space S)\"\n  if \"finite B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw local.std_dual S (dual_space S)", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on local.std_dual S \\<and> local.std_dual ` S = dual_space S", "using subspace_S inj_std_dual image_std_dual surj_std_dual that"], ["proof (prove)\nusing this:\n  subspace S\n  \\<lbrakk>subspace S; finite B\\<rbrakk>\n  \\<Longrightarrow> inj_on local.std_dual S\n  subspace S \\<Longrightarrow> local.std_dual ` S \\<subseteq> dual_space S\n  \\<lbrakk>subspace S; finite B\\<rbrakk>\n  \\<Longrightarrow> dual_space S \\<subseteq> local.std_dual ` S\n  finite B\n\ngoal (1 subgoal):\n 1. inj_on local.std_dual S \\<and> local.std_dual ` S = dual_space S", "by blast"], ["", "lemma std_dual_eq_dual_space: \"finite B \\<Longrightarrow> std_dual ` S = dual_space S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite B \\<Longrightarrow> local.std_dual ` S = dual_space S", "using image_std_dual surj_std_dual subspace_S"], ["proof (prove)\nusing this:\n  subspace S \\<Longrightarrow> local.std_dual ` S \\<subseteq> dual_space S\n  \\<lbrakk>subspace S; finite B\\<rbrakk>\n  \\<Longrightarrow> dual_space S \\<subseteq> local.std_dual ` S\n  subspace S\n\ngoal (1 subgoal):\n 1. finite B \\<Longrightarrow> local.std_dual ` S = dual_space S", "by auto"], ["", "lemma dim_dual_space:\n  assumes \"finite B\"\n  shows \"dim (dual_space S) = dim S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "interpret finite_dimensional_real_vector_space_pair_1_on S \"dual_space S\" B"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_dimensional_real_vector_space_pair_1_on S (dual_space S) B", "using B assms span_superset"], ["proof (prove)\nusing this:\n  independent B\n  span B = S\n  finite B\n  ?S \\<subseteq> span ?S\n\ngoal (1 subgoal):\n 1. finite_dimensional_real_vector_space_pair_1_on S (dual_space S) B", "by unfold_locales auto"], ["proof (state)\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "have *: \"span S = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. span S = S", "using subspace_S"], ["proof (prove)\nusing this:\n  subspace S\n\ngoal (1 subgoal):\n 1. span S = S", "by auto"], ["proof (state)\nthis:\n  span S = S\n\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "then"], ["proof (chain)\npicking this:\n  span S = S", "have \"dual.dim (std_dual ` S) = S.dim S\""], ["proof (prove)\nusing this:\n  span S = S\n\ngoal (1 subgoal):\n 1. dual.dim (local.std_dual ` S) = S.dim S", "apply (intro dim_image_eq[OF _ order_refl std_dual_linear])"], ["proof (prove)\ngoal (2 subgoals):\n 1. span S = S \\<Longrightarrow>\n    \\<forall>x.\n       x \\<in> S \\<longrightarrow> local.std_dual x \\<in> dual_space S\n 2. span S = S \\<Longrightarrow> inj_on local.std_dual (span S)", "using std_dual_bij_betw[OF assms]"], ["proof (prove)\nusing this:\n  bij_betw local.std_dual S (dual_space S)\n\ngoal (2 subgoals):\n 1. span S = S \\<Longrightarrow>\n    \\<forall>x.\n       x \\<in> S \\<longrightarrow> local.std_dual x \\<in> dual_space S\n 2. span S = S \\<Longrightarrow> inj_on local.std_dual (span S)", "by (auto simp: bij_betw_def *)"], ["proof (state)\nthis:\n  dual.dim (local.std_dual ` S) = S.dim S\n\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "also"], ["proof (state)\nthis:\n  dual.dim (local.std_dual ` S) = S.dim S\n\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "have \"S.dim S = dim S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S.dim S = dim S", "unfolding S.dim_eq[OF order_refl]"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim S = dim S", ".."], ["proof (state)\nthis:\n  S.dim S = dim S\n\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "also"], ["proof (state)\nthis:\n  S.dim S = dim S\n\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "have \"dual.dim (std_dual ` S) = dim (std_dual ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual.dim (local.std_dual ` S) = dim (local.std_dual ` S)", "using image_std_dual[OF subspace_S]"], ["proof (prove)\nusing this:\n  local.std_dual ` S \\<subseteq> dual_space S\n\ngoal (1 subgoal):\n 1. dual.dim (local.std_dual ` S) = dim (local.std_dual ` S)", "by (rule dual.dim_eq)"], ["proof (state)\nthis:\n  dual.dim (local.std_dual ` S) = dim (local.std_dual ` S)\n\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "also"], ["proof (state)\nthis:\n  dual.dim (local.std_dual ` S) = dim (local.std_dual ` S)\n\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "have \"std_dual ` S = dual_space S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.std_dual ` S = dual_space S", "using assms"], ["proof (prove)\nusing this:\n  finite B\n\ngoal (1 subgoal):\n 1. local.std_dual ` S = dual_space S", "by (rule std_dual_eq_dual_space)"], ["proof (state)\nthis:\n  local.std_dual ` S = dual_space S\n\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "finally"], ["proof (chain)\npicking this:\n  dim (dual_space S) = dim S", "show ?thesis"], ["proof (prove)\nusing this:\n  dim (dual_space S) = dim S\n\ngoal (1 subgoal):\n 1. dim (dual_space S) = dim S", "."], ["proof (state)\nthis:\n  dim (dual_space S) = dim S\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Dual map\\<close>"], ["", "context real_vector_space_pair_on begin"], ["", "definition dual_map :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> ('b \\<Rightarrow> real) \\<Rightarrow> ('a \\<Rightarrow> real)\" where\n  \"dual_map f y = restrict0 S (\\<lambda>x. y (f x))\""], ["", "lemma subspace_dual_S: \"subspace (dual_space S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace (dual_space S)", "apply (rule subspace_dual_space)"], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace S", "apply (rule local.vs1.subspace)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subspace_dual_T: \"subspace (dual_space T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace (dual_space T)", "apply (rule subspace_dual_space)"], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace T", "apply (rule local.vs2.subspace)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dual_map_linear:\n  \"linear_on (dual_space T) (dual_space S) scaleR scaleR (dual_map f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_on (dual_space T) (dual_space S) (*\\<^sub>R) (*\\<^sub>R)\n     (dual_map f)", "apply unfold_locales"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>x y a.\n       \\<lbrakk>x \\<in> dual_space T; y \\<in> dual_space T\\<rbrakk>\n       \\<Longrightarrow> a *\\<^sub>R (x + y) = a *\\<^sub>R x + a *\\<^sub>R y\n 2. \\<And>x a b.\n       x \\<in> dual_space T \\<Longrightarrow>\n       (a + b) *\\<^sub>R x = a *\\<^sub>R x + b *\\<^sub>R x\n 3. \\<And>x a b.\n       x \\<in> dual_space T \\<Longrightarrow>\n       a *\\<^sub>R b *\\<^sub>R x = (a * b) *\\<^sub>R x\n 4. \\<And>x. x \\<in> dual_space T \\<Longrightarrow> 1 *\\<^sub>R x = x\n 5. \\<And>x y.\n       \\<lbrakk>x \\<in> dual_space T; y \\<in> dual_space T\\<rbrakk>\n       \\<Longrightarrow> x + y \\<in> dual_space T\n 6. 0 \\<in> dual_space T\n 7. \\<And>x a.\n       x \\<in> dual_space T \\<Longrightarrow>\n       a *\\<^sub>R x \\<in> dual_space T\n 8. \\<And>x y a.\n       \\<lbrakk>x \\<in> dual_space S; y \\<in> dual_space S\\<rbrakk>\n       \\<Longrightarrow> a *\\<^sub>R (x + y) = a *\\<^sub>R x + a *\\<^sub>R y\n 9. \\<And>x a b.\n       x \\<in> dual_space S \\<Longrightarrow>\n       (a + b) *\\<^sub>R x = a *\\<^sub>R x + b *\\<^sub>R x\n 10. \\<And>x a b.\n        x \\<in> dual_space S \\<Longrightarrow>\n        a *\\<^sub>R b *\\<^sub>R x = (a * b) *\\<^sub>R x\nA total of 16 subgoals...", "by (auto simp add: dual_map_def restrict0_def subspace_dual_S[unfolded subspace_def]\n                     subspace_dual_T[unfolded subspace_def] algebra_simps)"], ["", "lemma image_dual_map:\n  \"dual_map f ` (dual_space T) \\<subseteq> dual_space S\"\n  if f: \"linear_on S T scaleR scaleR f\" and\n  defined: \"f ` S \\<subseteq> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual_map f ` dual_space T \\<subseteq> dual_space S", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> dual_space T \\<Longrightarrow>\n       dual_map f xa \\<in> dual_space S", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> dual_space T \\<Longrightarrow>\n       dual_map f xa \\<in> dual_space S", "assume x: \"x \\<in> dual_space T\""], ["proof (state)\nthis:\n  x \\<in> dual_space T\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> dual_space T \\<Longrightarrow>\n       dual_map f xa \\<in> dual_space S", "show \"dual_map f x \\<in> dual_space S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual_map f x \\<in> dual_space S", "proof (rule dual_spaceI)"], ["proof (state)\ngoal (2 subgoals):\n 1. extensional0 S (dual_map f x)\n 2. linear_fun_on S (dual_map f x)", "have 1: \"linear_fun_on T x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_fun_on T x", "using x"], ["proof (prove)\nusing this:\n  x \\<in> dual_space T\n\ngoal (1 subgoal):\n 1. linear_fun_on T x", "by (rule dual_space_linear_on)"], ["proof (state)\nthis:\n  linear_fun_on T x\n\ngoal (2 subgoals):\n 1. extensional0 S (dual_map f x)\n 2. linear_fun_on S (dual_map f x)", "show \"extensional0 S (dual_map f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensional0 S (dual_map f x)", "by (auto simp: dual_map_def)"], ["proof (state)\nthis:\n  extensional0 S (dual_map f x)\n\ngoal (1 subgoal):\n 1. linear_fun_on S (dual_map f x)", "show \"linear_fun_on S (dual_map f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_fun_on S (dual_map f x)", "apply (unfold_locales, auto simp: dual_map_def restrict0_def linear_on_def algebra_simps \n             local.vs1.subspace[unfolded subspace_def])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> S; b2 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> x (f (b1 + b2)) = x (f b1) + x (f b2)\n 2. \\<And>r b.\n       b \\<in> S \\<Longrightarrow> x (f (r *\\<^sub>R b)) = r * x (f b)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> S; b2 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> x (f (b1 + b2)) = x (f b1) + x (f b2)\n 2. \\<And>r b.\n       b \\<in> S \\<Longrightarrow> x (f (r *\\<^sub>R b)) = r * x (f b)", "show \"x (f (b1 + b2)) = x (f b1) + x (f b2)\" if \"b1 \\<in> S\" \"b2 \\<in> S\" for b1 b2"], ["proof (prove)\ngoal (1 subgoal):\n 1. x (f (b1 + b2)) = x (f b1) + x (f b2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x (f (b1 + b2)) = x (f b1) + x (f b2)", "have \"f b1 \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f b1 \\<in> T", "using \\<open>b1 \\<in> S\\<close> defined"], ["proof (prove)\nusing this:\n  b1 \\<in> S\n  f ` S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. f b1 \\<in> T", "by auto"], ["proof (state)\nthis:\n  f b1 \\<in> T\n\ngoal (1 subgoal):\n 1. x (f (b1 + b2)) = x (f b1) + x (f b2)", "have \"f b2 \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f b2 \\<in> T", "using \\<open>b2 \\<in> S\\<close> defined"], ["proof (prove)\nusing this:\n  b2 \\<in> S\n  f ` S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. f b2 \\<in> T", "by auto"], ["proof (state)\nthis:\n  f b2 \\<in> T\n\ngoal (1 subgoal):\n 1. x (f (b1 + b2)) = x (f b1) + x (f b2)", "have \"x (f (b1 + b2)) = x (f b1 + f b2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x (f (b1 + b2)) = x (f b1 + f b2)", "by (auto simp: f[THEN linear_on.axioms, THEN module_hom_on.add] that)"], ["proof (state)\nthis:\n  x (f (b1 + b2)) = x (f b1 + f b2)\n\ngoal (1 subgoal):\n 1. x (f (b1 + b2)) = x (f b1) + x (f b2)", "also"], ["proof (state)\nthis:\n  x (f (b1 + b2)) = x (f b1 + f b2)\n\ngoal (1 subgoal):\n 1. x (f (b1 + b2)) = x (f b1) + x (f b2)", "have \"x (f b1 + f b2) = x (f b1) + x (f b2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x (f b1 + f b2) = x (f b1) + x (f b2)", "by (auto simp: 1[THEN linear_on.axioms, THEN module_hom_on.add] \\<open>f b1 \\<in> T\\<close> \\<open>f b2 \\<in> T\\<close>)"], ["proof (state)\nthis:\n  x (f b1 + f b2) = x (f b1) + x (f b2)\n\ngoal (1 subgoal):\n 1. x (f (b1 + b2)) = x (f b1) + x (f b2)", "finally"], ["proof (chain)\npicking this:\n  x (f (b1 + b2)) = x (f b1) + x (f b2)", "show ?thesis"], ["proof (prove)\nusing this:\n  x (f (b1 + b2)) = x (f b1) + x (f b2)\n\ngoal (1 subgoal):\n 1. x (f (b1 + b2)) = x (f b1) + x (f b2)", "."], ["proof (state)\nthis:\n  x (f (b1 + b2)) = x (f b1) + x (f b2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?b1.0 \\<in> S; ?b2.0 \\<in> S\\<rbrakk>\n  \\<Longrightarrow> x (f (?b1.0 + ?b2.0)) = x (f ?b1.0) + x (f ?b2.0)\n\ngoal (1 subgoal):\n 1. \\<And>r b.\n       b \\<in> S \\<Longrightarrow> x (f (r *\\<^sub>R b)) = r * x (f b)", "show \"x (f (r *\\<^sub>R b)) = r * x (f b)\" if \"b \\<in> S\" for r b"], ["proof (prove)\ngoal (1 subgoal):\n 1. x (f (r *\\<^sub>R b)) = r * x (f b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x (f (r *\\<^sub>R b)) = r * x (f b)", "have \"f b \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f b \\<in> T", "using \\<open>b \\<in> S\\<close> defined"], ["proof (prove)\nusing this:\n  b \\<in> S\n  f ` S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. f b \\<in> T", "by auto"], ["proof (state)\nthis:\n  f b \\<in> T\n\ngoal (1 subgoal):\n 1. x (f (r *\\<^sub>R b)) = r * x (f b)", "have \"x (f (r *\\<^sub>R b)) = x (r *\\<^sub>R f b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x (f (r *\\<^sub>R b)) = x (r *\\<^sub>R f b)", "by (auto simp: f[THEN linear_on.axioms, THEN module_hom_on.scale] that)"], ["proof (state)\nthis:\n  x (f (r *\\<^sub>R b)) = x (r *\\<^sub>R f b)\n\ngoal (1 subgoal):\n 1. x (f (r *\\<^sub>R b)) = r * x (f b)", "also"], ["proof (state)\nthis:\n  x (f (r *\\<^sub>R b)) = x (r *\\<^sub>R f b)\n\ngoal (1 subgoal):\n 1. x (f (r *\\<^sub>R b)) = r * x (f b)", "have \"x (r *\\<^sub>R f b) = r * x (f b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x (r *\\<^sub>R f b) = r * x (f b)", "by (auto simp: 1[THEN linear_on.axioms, THEN module_hom_on.scale] \\<open>f b \\<in> T\\<close>)"], ["proof (state)\nthis:\n  x (r *\\<^sub>R f b) = r * x (f b)\n\ngoal (1 subgoal):\n 1. x (f (r *\\<^sub>R b)) = r * x (f b)", "finally"], ["proof (chain)\npicking this:\n  x (f (r *\\<^sub>R b)) = r * x (f b)", "show ?thesis"], ["proof (prove)\nusing this:\n  x (f (r *\\<^sub>R b)) = r * x (f b)\n\ngoal (1 subgoal):\n 1. x (f (r *\\<^sub>R b)) = r * x (f b)", "."], ["proof (state)\nthis:\n  x (f (r *\\<^sub>R b)) = r * x (f b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?b \\<in> S \\<Longrightarrow> x (f (?r *\\<^sub>R ?b)) = ?r * x (f ?b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  linear_fun_on S (dual_map f x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dual_map f x \\<in> dual_space S\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>Functoriality of dual map: identity\\<close>"], ["", "context real_vector_space_on begin"], ["", "lemma dual_map_id:\n  \"real_vector_space_pair_on.dual_map S f y = y\"\n  if f: \"\\<And>x. x \\<in> S \\<Longrightarrow> f x = x\" and y: \"y \\<in> dual_space S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_vector_space_pair_on.dual_map S f y = y", "proof (rule ext_extensional0[of S])"], ["proof (state)\ngoal (3 subgoals):\n 1. extensional0 S (real_vector_space_pair_on.dual_map S f y)\n 2. extensional0 S y\n 3. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       real_vector_space_pair_on.dual_map S f y x = y x", "have 1: \"real_vector_space_pair_on S S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_vector_space_pair_on S S", ".."], ["proof (state)\nthis:\n  real_vector_space_pair_on S S\n\ngoal (3 subgoals):\n 1. extensional0 S (real_vector_space_pair_on.dual_map S f y)\n 2. extensional0 S y\n 3. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       real_vector_space_pair_on.dual_map S f y x = y x", "show \"extensional0 S (real_vector_space_pair_on.dual_map S f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensional0 S (real_vector_space_pair_on.dual_map S f y)", "unfolding real_vector_space_pair_on.dual_map_def[OF 1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. extensional0 S (restrict0 S (\\<lambda>x. y (f x)))", "by auto"], ["proof (state)\nthis:\n  extensional0 S (real_vector_space_pair_on.dual_map S f y)\n\ngoal (2 subgoals):\n 1. extensional0 S y\n 2. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       real_vector_space_pair_on.dual_map S f y x = y x", "show \"extensional0 S y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensional0 S y", "using y"], ["proof (prove)\nusing this:\n  y \\<in> dual_space S\n\ngoal (1 subgoal):\n 1. extensional0 S y", "by auto"], ["proof (state)\nthis:\n  extensional0 S y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       real_vector_space_pair_on.dual_map S f y x = y x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       real_vector_space_pair_on.dual_map S f y x = y x", "assume x: \"x \\<in> S\""], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> S \\<Longrightarrow>\n       real_vector_space_pair_on.dual_map S f y x = y x", "show \"real_vector_space_pair_on.dual_map S f y x = y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_vector_space_pair_on.dual_map S f y x = y x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. real_vector_space_pair_on.dual_map S f y x = y x", "have \"real_vector_space_pair_on.dual_map S f y x = y (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_vector_space_pair_on.dual_map S f y x = y (f x)", "by (auto simp: real_vector_space_pair_on.dual_map_def[OF 1] restrict0_def x)"], ["proof (state)\nthis:\n  real_vector_space_pair_on.dual_map S f y x = y (f x)\n\ngoal (1 subgoal):\n 1. real_vector_space_pair_on.dual_map S f y x = y x", "also"], ["proof (state)\nthis:\n  real_vector_space_pair_on.dual_map S f y x = y (f x)\n\ngoal (1 subgoal):\n 1. real_vector_space_pair_on.dual_map S f y x = y x", "have \"y (f x) = y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y (f x) = y x", "using f x"], ["proof (prove)\nusing this:\n  ?x \\<in> S \\<Longrightarrow> f ?x = ?x\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. y (f x) = y x", "by auto"], ["proof (state)\nthis:\n  y (f x) = y x\n\ngoal (1 subgoal):\n 1. real_vector_space_pair_on.dual_map S f y x = y x", "finally"], ["proof (chain)\npicking this:\n  real_vector_space_pair_on.dual_map S f y x = y x", "show ?thesis"], ["proof (prove)\nusing this:\n  real_vector_space_pair_on.dual_map S f y x = y x\n\ngoal (1 subgoal):\n 1. real_vector_space_pair_on.dual_map S f y x = y x", "."], ["proof (state)\nthis:\n  real_vector_space_pair_on.dual_map S f y x = y x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  real_vector_space_pair_on.dual_map S f y x = y x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "abbreviation \"dual_map \\<equiv> real_vector_space_pair_on.dual_map\""], ["", "lemmas dual_map_def = real_vector_space_pair_on.dual_map_def"], ["", "text \\<open>Functoriality of dual map: composition\\<close>"], ["", "lemma dual_map_compose:\n  \"dual_map S f (dual_map T g x) = dual_map S (g \\<circ> f) x\"\n  if \"x \\<in> dual_space U\" and \"linear_on T U scaleR scaleR g\"\n  and f: \"linear_on S T scaleR scaleR f\"\n  and defined: \"f ` S \\<subseteq> T\"\n  and ST: \"real_vector_space_pair_on S T\"\n  and TU: \"real_vector_space_pair_on T U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual_map S f (dual_map T g x) = dual_map S (g \\<circ> f) x", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       dual_map S f (dual_map T g x) xa = dual_map S (g \\<circ> f) x xa", "have SU: \"real_vector_space_pair_on S U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_vector_space_pair_on S U", "using ST TU"], ["proof (prove)\nusing this:\n  real_vector_space_pair_on S T\n  real_vector_space_pair_on T U\n\ngoal (1 subgoal):\n 1. real_vector_space_pair_on S U", "by (auto simp add: real_vector_space_pair_on_def)"], ["proof (state)\nthis:\n  real_vector_space_pair_on S U\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       dual_map S f (dual_map T g x) xa = dual_map S (g \\<circ> f) x xa", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       dual_map S f (dual_map T g x) xa = dual_map S (g \\<circ> f) x xa", "show \"dual_map S f (dual_map T g x) v = dual_map S (g \\<circ> f) x v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dual_map S f (dual_map T g x) v = dual_map S (g \\<circ> f) x v", "unfolding dual_map_def[OF ST] dual_map_def[OF TU] dual_map_def[OF SU] restrict0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if v \\<in> S then if f v \\<in> T then x (g (f v)) else 0 else 0) =\n    (if v \\<in> S then x ((g \\<circ> f) v) else 0)", "using defined"], ["proof (prove)\nusing this:\n  f ` S \\<subseteq> T\n\ngoal (1 subgoal):\n 1. (if v \\<in> S then if f v \\<in> T then x (g (f v)) else 0 else 0) =\n    (if v \\<in> S then x ((g \\<circ> f) v) else 0)", "by auto"], ["proof (state)\nthis:\n  dual_map S f (dual_map T g x) v = dual_map S (g \\<circ> f) x v\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Definition of cotangent space\\<close>"], ["", "context c_manifold begin"], ["", "definition cotangent_space :: \"'a \\<Rightarrow> ((('a \\<Rightarrow> real) \\<Rightarrow> real) \\<Rightarrow> real) set\" where\n  \"cotangent_space p = dual_space (tangent_space p)\""], ["", "lemma subspace_cotangent_space:\n  \"subspace (cotangent_space p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace (cotangent_space p)", "unfolding cotangent_space_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace (dual_space (tangent_space p))", "apply (rule subspace_dual_space)"], ["proof (prove)\ngoal (1 subgoal):\n 1. subspace (tangent_space p)", "apply (rule subspace_tangent_space)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "sublocale cotangent_space: real_vector_space_on \"cotangent_space p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_vector_space_on (cotangent_space p)", "by unfold_locales (rule subspace_cotangent_space)"], ["", "(* Shouldn't there be a general theorem for this, instead of repeating the proof\n   for tangent_space_dim_eq?\n*)"], ["", "lemma cotangent_space_dim_eq: \"cotangent_space.dim p X = dim X\"\n  if \"X \\<subseteq> cotangent_space p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cotangent_space.dim p X = dim X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cotangent_space.dim p X = dim X", "have *: \"b \\<subseteq> cotangent_space p \\<and> independent b \\<and> span b = span X \\<longleftrightarrow> independent b \\<and> span b = span X\"\n    for b"], ["proof (prove)\ngoal (1 subgoal):\n 1. (b \\<subseteq> cotangent_space p \\<and>\n     independent b \\<and> span b = span X) =\n    (independent b \\<and> span b = span X)", "using that"], ["proof (prove)\nusing this:\n  X \\<subseteq> cotangent_space p\n\ngoal (1 subgoal):\n 1. (b \\<subseteq> cotangent_space p \\<and>\n     independent b \\<and> span b = span X) =\n    (independent b \\<and> span b = span X)", "by auto (metis (no_types, lifting) c_manifold.subspace_cotangent_space c_manifold_axioms span_base span_eq_iff span_mono subsetCE)"], ["proof (state)\nthis:\n  (?b3 \\<subseteq> cotangent_space p \\<and>\n   independent ?b3 \\<and> span ?b3 = span X) =\n  (independent ?b3 \\<and> span ?b3 = span X)\n\ngoal (1 subgoal):\n 1. cotangent_space.dim p X = dim X", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. cotangent_space.dim p X = dim X", "using that"], ["proof (prove)\nusing this:\n  X \\<subseteq> cotangent_space p\n\ngoal (1 subgoal):\n 1. cotangent_space.dim p X = dim X", "unfolding cotangent_space.dim_def dim_def *"], ["proof (prove)\nusing this:\n  X \\<subseteq> cotangent_space p\n\ngoal (1 subgoal):\n 1. (if \\<exists>b. independent b \\<and> span b = span X\n     then card (SOME b. independent b \\<and> span b = span X) else 0) =\n    (if \\<exists>b. independent b \\<and> span b = span X\n     then card (SOME b. independent b \\<and> span b = span X) else 0)", "by auto"], ["proof (state)\nthis:\n  cotangent_space.dim p X = dim X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dim_cotangent_space:\n  \"dim (cotangent_space p) = DIM('b)\" if \"p \\<in> carrier\" and \"k = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim (cotangent_space p) = DIM('b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dim (cotangent_space p) = DIM('b)", "from basis_exists[of \"tangent_space p\"]"], ["proof (chain)\npicking this:\n  (\\<And>B.\n      \\<lbrakk>B \\<subseteq> tangent_space p; independent B;\n       tangent_space p \\<subseteq> span B;\n       card B = dim (tangent_space p)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain B where B: \"B \\<subseteq> tangent_space p\" \"independent B\" \"tangent_space p \\<subseteq> span B\"\n    \"card B = dim (tangent_space p)\""], ["proof (prove)\nusing this:\n  (\\<And>B.\n      \\<lbrakk>B \\<subseteq> tangent_space p; independent B;\n       tangent_space p \\<subseteq> span B;\n       card B = dim (tangent_space p)\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>B \\<subseteq> tangent_space p; independent B;\n         tangent_space p \\<subseteq> span B;\n         card B = dim (tangent_space p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  B \\<subseteq> tangent_space p\n  independent B\n  tangent_space p \\<subseteq> span B\n  card B = dim (tangent_space p)\n\ngoal (1 subgoal):\n 1. dim (cotangent_space p) = DIM('b)", "have \"finite B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite B", "apply (rule card_ge_0_finite)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < card B", "unfolding B"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dim (tangent_space p)", "apply (subst dim_tangent_space[OF that])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < DIM('b)", "by simp"], ["proof (state)\nthis:\n  finite B\n\ngoal (1 subgoal):\n 1. dim (cotangent_space p) = DIM('b)", "have \"dim (cotangent_space p) = dim (tangent_space p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim (cotangent_space p) = dim (tangent_space p)", "unfolding cotangent_space_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim (dual_space (tangent_space p)) = dim (tangent_space p)", "apply (rule dim_dual_space[of B])"], ["proof (prove)\ngoal (3 subgoals):\n 1. independent B\n 2. span B = tangent_space p\n 3. finite B", "apply fact"], ["proof (prove)\ngoal (2 subgoals):\n 1. span B = tangent_space p\n 2. finite B", "using B span_minimal[OF B(1) subspace_tangent_space] \\<open>finite B\\<close>"], ["proof (prove)\nusing this:\n  B \\<subseteq> tangent_space p\n  independent B\n  tangent_space p \\<subseteq> span B\n  card B = dim (tangent_space p)\n  span B \\<subseteq> tangent_space p\n  finite B\n\ngoal (2 subgoals):\n 1. span B = tangent_space p\n 2. finite B", "by auto"], ["proof (state)\nthis:\n  dim (cotangent_space p) = dim (tangent_space p)\n\ngoal (1 subgoal):\n 1. dim (cotangent_space p) = DIM('b)", "also"], ["proof (state)\nthis:\n  dim (cotangent_space p) = dim (tangent_space p)\n\ngoal (1 subgoal):\n 1. dim (cotangent_space p) = DIM('b)", "have \"dim (tangent_space p) = DIM('b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim (tangent_space p) = DIM('b)", "by (rule dim_tangent_space[OF that])"], ["proof (state)\nthis:\n  dim (tangent_space p) = DIM('b)\n\ngoal (1 subgoal):\n 1. dim (cotangent_space p) = DIM('b)", "finally"], ["proof (chain)\npicking this:\n  dim (cotangent_space p) = DIM('b)", "show ?thesis"], ["proof (prove)\nusing this:\n  dim (cotangent_space p) = DIM('b)\n\ngoal (1 subgoal):\n 1. dim (cotangent_space p) = DIM('b)", "."], ["proof (state)\nthis:\n  dim (cotangent_space p) = DIM('b)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Pullback of cotangent space\\<close>"], ["", "context diff begin"], ["", "definition pull_back :: \"'a \\<Rightarrow> ((('b \\<Rightarrow> real) \\<Rightarrow> real) \\<Rightarrow> real) \\<Rightarrow> (('a \\<Rightarrow> real) \\<Rightarrow> real) \\<Rightarrow> real\" where\n  \"pull_back p = dual_map (src.tangent_space p) push_forward\""], ["", "lemma\n  linear_pullback: \"linear_on (dest.cotangent_space (f p)) (src.cotangent_space p) scaleR scaleR (pull_back p)\" and\n  image_pullback: \"pull_back p ` (dest.cotangent_space (f p)) \\<subseteq> src.cotangent_space p\"\n  if \"p \\<in> src.carrier\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_on (dest.cotangent_space (f p)) (src.cotangent_space p)\n     (*\\<^sub>R) (*\\<^sub>R) (pull_back p) &&&\n    pull_back p ` dest.cotangent_space (f p)\n    \\<subseteq> src.cotangent_space p", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. linear_on (dest.cotangent_space (f p)) (src.cotangent_space p)\n     (*\\<^sub>R) (*\\<^sub>R) (pull_back p)\n 2. pull_back p ` dest.cotangent_space (f p)\n    \\<subseteq> src.cotangent_space p", "interpret a: real_vector_space_pair_on \"src.tangent_space p\" \"dest.tangent_space (f p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_vector_space_pair_on (src.tangent_space p)\n     (dest.tangent_space (f p))", ".."], ["proof (state)\ngoal (2 subgoals):\n 1. linear_on (dest.cotangent_space (f p)) (src.cotangent_space p)\n     (*\\<^sub>R) (*\\<^sub>R) (pull_back p)\n 2. pull_back p ` dest.cotangent_space (f p)\n    \\<subseteq> src.cotangent_space p", "show \"linear_on (dest.cotangent_space (f p)) (src.cotangent_space p) (*\\<^sub>R) (*\\<^sub>R) (pull_back p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_on (dest.cotangent_space (f p)) (src.cotangent_space p)\n     (*\\<^sub>R) (*\\<^sub>R) (pull_back p)", "unfolding dest.cotangent_space_def src.cotangent_space_def pull_back_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_on (dual_space (dest.tangent_space (f p)))\n     (dual_space (src.tangent_space p)) (*\\<^sub>R) (*\\<^sub>R)\n     (a.dual_map push_forward)", "by (rule a.dual_map_linear)"], ["proof (state)\nthis:\n  linear_on (dest.cotangent_space (f p)) (src.cotangent_space p) (*\\<^sub>R)\n   (*\\<^sub>R) (pull_back p)\n\ngoal (1 subgoal):\n 1. pull_back p ` dest.cotangent_space (f p)\n    \\<subseteq> src.cotangent_space p", "show \"pull_back p ` (dest.cotangent_space (f p)) \\<subseteq> src.cotangent_space p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pull_back p ` dest.cotangent_space (f p)\n    \\<subseteq> src.cotangent_space p", "unfolding dest.cotangent_space_def src.cotangent_space_def pull_back_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a.dual_map push_forward ` dual_space (dest.tangent_space (f p))\n    \\<subseteq> dual_space (src.tangent_space p)", "apply (rule a.image_dual_map)"], ["proof (prove)\ngoal (2 subgoals):\n 1. linear_on (src.tangent_space p) (dest.tangent_space (f p)) (*\\<^sub>R)\n     (*\\<^sub>R) push_forward\n 2. push_forward ` src.tangent_space p \\<subseteq> dest.tangent_space (f p)", "apply (rule linear_imp_linear_on)"], ["proof (prove)\ngoal (4 subgoals):\n 1. linear push_forward\n 2. subspace (src.tangent_space p)\n 3. subspace (dest.tangent_space (f p))\n 4. push_forward ` src.tangent_space p \\<subseteq> dest.tangent_space (f p)", "apply (rule local.linear_push_forward)"], ["proof (prove)\ngoal (3 subgoals):\n 1. subspace (src.tangent_space p)\n 2. subspace (dest.tangent_space (f p))\n 3. push_forward ` src.tangent_space p \\<subseteq> dest.tangent_space (f p)", "apply (rule local.src.subspace_tangent_space)"], ["proof (prove)\ngoal (2 subgoals):\n 1. subspace (dest.tangent_space (f p))\n 2. push_forward ` src.tangent_space p \\<subseteq> dest.tangent_space (f p)", "apply (rule local.dest.subspace_tangent_space)"], ["proof (prove)\ngoal (1 subgoal):\n 1. push_forward ` src.tangent_space p \\<subseteq> dest.tangent_space (f p)", "apply (rule local.push_forward_in_tangent_space)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> src.carrier", "by fact"], ["proof (state)\nthis:\n  pull_back p ` dest.cotangent_space (f p) \\<subseteq> src.cotangent_space p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Cotangent field of a function\\<close>"], ["", "context c_manifold begin"], ["", "text \\<open>Given a function f, the cotangent vector of f at a point p is defined\n  as follows: given a tangent vector X at p, considered as a functional, evaluate\n  X on f.\\<close>"], ["", "definition cotangent_field :: \"('a \\<Rightarrow> real) \\<Rightarrow> 'a \\<Rightarrow> ((('a \\<Rightarrow> real) \\<Rightarrow> real) \\<Rightarrow> real)\" where\n  \"cotangent_field f p = restrict0 (tangent_space p) (\\<lambda>X. X f)\""], ["", "lemma cotangent_field_is_cotangent:\n  \"cotangent_field f p \\<in> cotangent_space p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cotangent_field f p \\<in> cotangent_space p", "unfolding cotangent_space_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cotangent_field f p \\<in> dual_space (tangent_space p)", "proof (rule dual_spaceI)"], ["proof (state)\ngoal (2 subgoals):\n 1. extensional0 (tangent_space p) (cotangent_field f p)\n 2. linear_fun_on (tangent_space p) (cotangent_field f p)", "show \"extensional0 (tangent_space p) (cotangent_field f p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensional0 (tangent_space p) (cotangent_field f p)", "unfolding cotangent_field_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. extensional0 (tangent_space p)\n     (restrict0 (tangent_space p) (\\<lambda>X. X f))", "by auto"], ["proof (state)\nthis:\n  extensional0 (tangent_space p) (cotangent_field f p)\n\ngoal (1 subgoal):\n 1. linear_fun_on (tangent_space p) (cotangent_field f p)", "show \"linear_fun_on (tangent_space p) (cotangent_field f p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_fun_on (tangent_space p) (cotangent_field f p)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> tangent_space p; b2 \\<in> tangent_space p\\<rbrakk>\n       \\<Longrightarrow> cotangent_field f p (b1 + b2) =\n                         cotangent_field f p b1 + cotangent_field f p b2\n 2. \\<And>r b.\n       b \\<in> tangent_space p \\<Longrightarrow>\n       cotangent_field f p (r *\\<^sub>R b) =\n       r *\\<^sub>R cotangent_field f p b", "unfolding cotangent_field_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> tangent_space p; b2 \\<in> tangent_space p\\<rbrakk>\n       \\<Longrightarrow> restrict0 (tangent_space p) (\\<lambda>X. X f)\n                          (b1 + b2) =\n                         restrict0 (tangent_space p) (\\<lambda>X. X f) b1 +\n                         restrict0 (tangent_space p) (\\<lambda>X. X f) b2\n 2. \\<And>r b.\n       b \\<in> tangent_space p \\<Longrightarrow>\n       restrict0 (tangent_space p) (\\<lambda>X. X f) (r *\\<^sub>R b) =\n       r *\\<^sub>R restrict0 (tangent_space p) (\\<lambda>X. X f) b", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> tangent_space p; b2 \\<in> tangent_space p\\<rbrakk>\n       \\<Longrightarrow> restrict0 (tangent_space p) (\\<lambda>X. X f)\n                          (b1 + b2) =\n                         b1 f + b2 f\n 2. \\<And>r b.\n       b \\<in> tangent_space p \\<Longrightarrow>\n       restrict0 (tangent_space p) (\\<lambda>X. X f) (r *\\<^sub>R b) =\n       r * b f", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> tangent_space p; b2 \\<in> tangent_space p\\<rbrakk>\n       \\<Longrightarrow> restrict0 (tangent_space p) (\\<lambda>X. X f)\n                          (b1 + b2) =\n                         b1 f + b2 f\n 2. \\<And>r b.\n       b \\<in> tangent_space p \\<Longrightarrow>\n       restrict0 (tangent_space p) (\\<lambda>X. X f) (r *\\<^sub>R b) =\n       r * b f", "show \"restrict0 (tangent_space p) (\\<lambda>X. X f) (b1 + b2) = b1 f + b2 f\"\n      if b1: \"b1 \\<in> tangent_space p\" and b2: \"b2 \\<in> tangent_space p\" for b1 b2"], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict0 (tangent_space p) (\\<lambda>X. X f) (b1 + b2) = b1 f + b2 f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. restrict0 (tangent_space p) (\\<lambda>X. X f) (b1 + b2) = b1 f + b2 f", "have \"b1 + b2 \\<in> tangent_space p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 + b2 \\<in> tangent_space p", "using b1 b2 subspace_tangent_space subspace_add"], ["proof (prove)\nusing this:\n  b1 \\<in> tangent_space p\n  b2 \\<in> tangent_space p\n  subspace (tangent_space ?p)\n  \\<lbrakk>subspace ?S; ?x \\<in> ?S; ?y \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?x + ?y \\<in> ?S\n\ngoal (1 subgoal):\n 1. b1 + b2 \\<in> tangent_space p", "by auto"], ["proof (state)\nthis:\n  b1 + b2 \\<in> tangent_space p\n\ngoal (1 subgoal):\n 1. restrict0 (tangent_space p) (\\<lambda>X. X f) (b1 + b2) = b1 f + b2 f", "then"], ["proof (chain)\npicking this:\n  b1 + b2 \\<in> tangent_space p", "show ?thesis"], ["proof (prove)\nusing this:\n  b1 + b2 \\<in> tangent_space p\n\ngoal (1 subgoal):\n 1. restrict0 (tangent_space p) (\\<lambda>X. X f) (b1 + b2) = b1 f + b2 f", "by auto"], ["proof (state)\nthis:\n  restrict0 (tangent_space p) (\\<lambda>X. X f) (b1 + b2) = b1 f + b2 f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?b1.3 \\<in> tangent_space p; ?b2.3 \\<in> tangent_space p\\<rbrakk>\n  \\<Longrightarrow> restrict0 (tangent_space p) (\\<lambda>X. X f)\n                     (?b1.3 + ?b2.3) =\n                    ?b1.3 f + ?b2.3 f\n\ngoal (1 subgoal):\n 1. \\<And>r b.\n       b \\<in> tangent_space p \\<Longrightarrow>\n       restrict0 (tangent_space p) (\\<lambda>X. X f) (r *\\<^sub>R b) =\n       r * b f", "show \"restrict0 (tangent_space p) (\\<lambda>X. X f) (r *\\<^sub>R b) = r * b f\"\n      if b: \"b \\<in> tangent_space p\" for r b"], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict0 (tangent_space p) (\\<lambda>X. X f) (r *\\<^sub>R b) = r * b f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. restrict0 (tangent_space p) (\\<lambda>X. X f) (r *\\<^sub>R b) = r * b f", "have \"r *\\<^sub>R b \\<in> tangent_space p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r *\\<^sub>R b \\<in> tangent_space p", "using b subspace_tangent_space subspace_scale"], ["proof (prove)\nusing this:\n  b \\<in> tangent_space p\n  subspace (tangent_space ?p)\n  \\<lbrakk>subspace ?S; ?x \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> ?c *\\<^sub>R ?x \\<in> ?S\n\ngoal (1 subgoal):\n 1. r *\\<^sub>R b \\<in> tangent_space p", "by auto"], ["proof (state)\nthis:\n  r *\\<^sub>R b \\<in> tangent_space p\n\ngoal (1 subgoal):\n 1. restrict0 (tangent_space p) (\\<lambda>X. X f) (r *\\<^sub>R b) = r * b f", "then"], ["proof (chain)\npicking this:\n  r *\\<^sub>R b \\<in> tangent_space p", "show ?thesis"], ["proof (prove)\nusing this:\n  r *\\<^sub>R b \\<in> tangent_space p\n\ngoal (1 subgoal):\n 1. restrict0 (tangent_space p) (\\<lambda>X. X f) (r *\\<^sub>R b) = r * b f", "by auto"], ["proof (state)\nthis:\n  restrict0 (tangent_space p) (\\<lambda>X. X f) (r *\\<^sub>R b) = r * b f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?b3 \\<in> tangent_space p \\<Longrightarrow>\n  restrict0 (tangent_space p) (\\<lambda>X. X f) (?r3 *\\<^sub>R ?b3) =\n  ?r3 * ?b3 f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  linear_fun_on (tangent_space p) (cotangent_field f p)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Tangent field of a path\\<close>"], ["", "(* Note: an alternative definition is as follows: consider the path as\n   a smooth map from the manifold with boundary [a,b], then take the\n   push-forward of the trivial tangent field on [a,b]. In this case,\n   showing this is a tangent vector would be trivial. *)"], ["", "text \\<open>Given a path \\<open>c\\<close>, the tangent vector of \\<open>c\\<close> at real number \\<open>x\\<close> (or at point \\<open>c(x)\\<close>)\n  is defined as follows: given a function f, take the derivative of the\n  real-valued function \\<open>f \\<circ> c\\<close>.\\<close>"], ["", "definition tangent_field :: \"(real \\<Rightarrow> 'a) \\<Rightarrow> real \\<Rightarrow> (('a \\<Rightarrow> real) \\<Rightarrow> real)\" where\n  \"tangent_field c x = restrict0 diff_fun_space (\\<lambda>f. frechet_derivative (f \\<circ> c) (at x) 1)\""], ["", "lemma tangent_field_is_tangent:\n  \"tangent_field c x \\<in> tangent_space (c x)\"\n  if c_smooth: \"diff k charts_eucl charts c\" and smooth: \"k > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tangent_field c x \\<in> tangent_space (c x)", "proof (rule tangent_spaceI)"], ["proof (state)\ngoal (3 subgoals):\n 1. extensional0 diff_fun_space (tangent_field c x)\n 2. linear_fun_on diff_fun_space (tangent_field c x)\n 3. \\<And>f g.\n       \\<lbrakk>f \\<in> diff_fun_space; g \\<in> diff_fun_space\\<rbrakk>\n       \\<Longrightarrow> tangent_field c x (f * g) =\n                         f (c x) * tangent_field c x g +\n                         g (c x) * tangent_field c x f", "show \"extensional0 diff_fun_space (tangent_field c x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extensional0 diff_fun_space (tangent_field c x)", "unfolding tangent_field_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. extensional0 diff_fun_space\n     (restrict0 diff_fun_space\n       (\\<lambda>f. frechet_derivative (f \\<circ> c) (at x) 1))", "by auto"], ["proof (state)\nthis:\n  extensional0 diff_fun_space (tangent_field c x)\n\ngoal (2 subgoals):\n 1. linear_fun_on diff_fun_space (tangent_field c x)\n 2. \\<And>f g.\n       \\<lbrakk>f \\<in> diff_fun_space; g \\<in> diff_fun_space\\<rbrakk>\n       \\<Longrightarrow> tangent_field c x (f * g) =\n                         f (c x) * tangent_field c x g +\n                         g (c x) * tangent_field c x f", "have diff_fun_c_diff: \"(\\<lambda>x. b (c x)) differentiable at x\"\n    if b: \"b \\<in> diff_fun_space\"\n    for b::\"'a \\<Rightarrow> real\" and x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. b (c x)) differentiable at x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. b (c x)) differentiable at x", "have diff_b: \"diff_fun k charts_eucl (b o c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diff_fun k charts_eucl (b \\<circ> c)", "unfolding diff_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diff k charts_eucl charts_eucl (b \\<circ> c)", "using c_smooth diff_fun_spaceD[OF b, THEN diff_fun.axioms]"], ["proof (prove)\nusing this:\n  diff k charts_eucl charts c\n  diff k charts charts_eucl b\n\ngoal (1 subgoal):\n 1. diff k charts_eucl charts_eucl (b \\<circ> c)", "by (rule diff_compose)"], ["proof (state)\nthis:\n  diff_fun k charts_eucl (b \\<circ> c)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. b (c x)) differentiable at x", "from diff_fun_charts_euclD[OF this] smooth"], ["proof (chain)\npicking this:\n  k-smooth_on UNIV (b \\<circ> c)\n  0 < k", "have \"(b o c) differentiable_on UNIV\""], ["proof (prove)\nusing this:\n  k-smooth_on UNIV (b \\<circ> c)\n  0 < k\n\ngoal (1 subgoal):\n 1. b \\<circ> c differentiable_on UNIV", "by (rule smooth_on_imp_differentiable_on)"], ["proof (state)\nthis:\n  b \\<circ> c differentiable_on UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. b (c x)) differentiable at x", "then"], ["proof (chain)\npicking this:\n  b \\<circ> c differentiable_on UNIV", "show ?thesis"], ["proof (prove)\nusing this:\n  b \\<circ> c differentiable_on UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. b (c x)) differentiable at x", "by (auto simp: differentiable_on_def o_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. b (c x)) differentiable at x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?b3 \\<in> diff_fun_space \\<Longrightarrow>\n  (\\<lambda>x. ?b3 (c x)) differentiable at ?x3\n\ngoal (2 subgoals):\n 1. linear_fun_on diff_fun_space (tangent_field c x)\n 2. \\<And>f g.\n       \\<lbrakk>f \\<in> diff_fun_space; g \\<in> diff_fun_space\\<rbrakk>\n       \\<Longrightarrow> tangent_field c x (f * g) =\n                         f (c x) * tangent_field c x g +\n                         g (c x) * tangent_field c x f", "show \"linear_fun_on diff_fun_space (tangent_field c x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear_fun_on diff_fun_space (tangent_field c x)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> diff_fun_space; b2 \\<in> diff_fun_space\\<rbrakk>\n       \\<Longrightarrow> tangent_field c x (b1 + b2) =\n                         tangent_field c x b1 + tangent_field c x b2\n 2. \\<And>r b.\n       b \\<in> diff_fun_space \\<Longrightarrow>\n       tangent_field c x (r *\\<^sub>R b) = r *\\<^sub>R tangent_field c x b", "unfolding cotangent_field_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> diff_fun_space; b2 \\<in> diff_fun_space\\<rbrakk>\n       \\<Longrightarrow> tangent_field c x (b1 + b2) =\n                         tangent_field c x b1 + tangent_field c x b2\n 2. \\<And>r b.\n       b \\<in> diff_fun_space \\<Longrightarrow>\n       tangent_field c x (r *\\<^sub>R b) = r *\\<^sub>R tangent_field c x b", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> diff_fun_space; b2 \\<in> diff_fun_space\\<rbrakk>\n       \\<Longrightarrow> tangent_field c x (b1 + b2) =\n                         tangent_field c x b1 + tangent_field c x b2\n 2. \\<And>r b.\n       b \\<in> diff_fun_space \\<Longrightarrow>\n       tangent_field c x (r *\\<^sub>R b) = r * tangent_field c x b", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> diff_fun_space; b2 \\<in> diff_fun_space\\<rbrakk>\n       \\<Longrightarrow> tangent_field c x (b1 + b2) =\n                         tangent_field c x b1 + tangent_field c x b2\n 2. \\<And>r b.\n       b \\<in> diff_fun_space \\<Longrightarrow>\n       tangent_field c x (r *\\<^sub>R b) = r * tangent_field c x b", "show \"tangent_field c x (b1 + b2) = tangent_field c x b1 + tangent_field c x b2\"\n      if b1: \"b1 \\<in> diff_fun_space\" and b2: \"b2 \\<in> diff_fun_space\" for b1 b2"], ["proof (prove)\ngoal (1 subgoal):\n 1. tangent_field c x (b1 + b2) =\n    tangent_field c x b1 + tangent_field c x b2", "unfolding tangent_field_def restrict0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if b1 + b2 \\<in> diff_fun_space\n     then frechet_derivative (b1 + b2 \\<circ> c) (at x) 1 else 0) =\n    (if b1 \\<in> diff_fun_space\n     then frechet_derivative (b1 \\<circ> c) (at x) 1 else 0) +\n    (if b2 \\<in> diff_fun_space\n     then frechet_derivative (b2 \\<circ> c) (at x) 1 else 0)", "by (auto simp: diff_fun_space_add o_def diff_fun_c_diff b1 b2 frechet_derivative_plus)"], ["proof (state)\nthis:\n  \\<lbrakk>?b1.3 \\<in> diff_fun_space; ?b2.3 \\<in> diff_fun_space\\<rbrakk>\n  \\<Longrightarrow> tangent_field c x (?b1.3 + ?b2.3) =\n                    tangent_field c x ?b1.3 + tangent_field c x ?b2.3\n\ngoal (1 subgoal):\n 1. \\<And>r b.\n       b \\<in> diff_fun_space \\<Longrightarrow>\n       tangent_field c x (r *\\<^sub>R b) = r * tangent_field c x b", "show \"tangent_field c x (r *\\<^sub>R b) = r * tangent_field c x b\"\n      if b: \"b \\<in> diff_fun_space\" for r b"], ["proof (prove)\ngoal (1 subgoal):\n 1. tangent_field c x (r *\\<^sub>R b) = r * tangent_field c x b", "unfolding tangent_field_def restrict0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if r *\\<^sub>R b \\<in> diff_fun_space\n     then frechet_derivative (r *\\<^sub>R b \\<circ> c) (at x) 1 else 0) =\n    r *\n    (if b \\<in> diff_fun_space\n     then frechet_derivative (b \\<circ> c) (at x) 1 else 0)", "by (auto simp: diff_fun_space.m1.mem_scale o_def diff_fun_c_diff b frechet_derivative_times\n          frechet_derivative_const)"], ["proof (state)\nthis:\n  ?b3 \\<in> diff_fun_space \\<Longrightarrow>\n  tangent_field c x (?r3 *\\<^sub>R ?b3) = ?r3 * tangent_field c x ?b3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  linear_fun_on diff_fun_space (tangent_field c x)\n\ngoal (1 subgoal):\n 1. \\<And>f g.\n       \\<lbrakk>f \\<in> diff_fun_space; g \\<in> diff_fun_space\\<rbrakk>\n       \\<Longrightarrow> tangent_field c x (f * g) =\n                         f (c x) * tangent_field c x g +\n                         g (c x) * tangent_field c x f", "show \"tangent_field c x (f * g) = f (c x) * tangent_field c x g + g (c x) * tangent_field c x f\"\n    if f: \"f \\<in> diff_fun_space\" and g: \"g \\<in> diff_fun_space\" for f g"], ["proof (prove)\ngoal (1 subgoal):\n 1. tangent_field c x (f * g) =\n    f (c x) * tangent_field c x g + g (c x) * tangent_field c x f", "unfolding tangent_field_def restrict0_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if f * g \\<in> diff_fun_space\n     then frechet_derivative (f * g \\<circ> c) (at x) 1 else 0) =\n    f (c x) *\n    (if g \\<in> diff_fun_space\n     then frechet_derivative (g \\<circ> c) (at x) 1 else 0) +\n    g (c x) *\n    (if f \\<in> diff_fun_space\n     then frechet_derivative (f \\<circ> c) (at x) 1 else 0)", "by (auto simp: f g diff_fun_space_times diff_fun_space_add o_def diff_fun_c_diff\n        frechet_derivative_plus frechet_derivative_times)"], ["proof (state)\nthis:\n  \\<lbrakk>?f3 \\<in> diff_fun_space; ?g3 \\<in> diff_fun_space\\<rbrakk>\n  \\<Longrightarrow> tangent_field c x (?f3 * ?g3) =\n                    ?f3 (c x) * tangent_field c x ?g3 +\n                    ?g3 (c x) * tangent_field c x ?f3\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Integral along a path\\<close>"], ["", "lemma fundamental_theorem_of_path_integral:\n  \"((\\<lambda>x. (cotangent_field f (c x)) (tangent_field c x)) has_integral f (c b) - f (c a)) {a..b}\"\n  if ab: \"a \\<le> b\" and f: \"f \\<in> diff_fun_space\" and c: \"diff k charts_eucl charts c\" and k: \"k \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. cotangent_field f (c x) (tangent_field c x)) has_integral\n     f (c b) - f (c a))\n     {a..b}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. cotangent_field f (c x) (tangent_field c x)) has_integral\n     f (c b) - f (c a))\n     {a..b}", "from f"], ["proof (chain)\npicking this:\n  f \\<in> diff_fun_space", "have \"diff k charts charts_eucl f\""], ["proof (prove)\nusing this:\n  f \\<in> diff_fun_space\n\ngoal (1 subgoal):\n 1. diff k charts charts_eucl f", "by (auto simp: diff_fun_space_def diff_fun_def)"], ["proof (state)\nthis:\n  diff k charts charts_eucl f\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. cotangent_field f (c x) (tangent_field c x)) has_integral\n     f (c b) - f (c a))\n     {a..b}", "then"], ["proof (chain)\npicking this:\n  diff k charts charts_eucl f", "have \"(diff_fun k charts_eucl (f o c))\""], ["proof (prove)\nusing this:\n  diff k charts charts_eucl f\n\ngoal (1 subgoal):\n 1. diff_fun k charts_eucl (f \\<circ> c)", "unfolding diff_fun_def"], ["proof (prove)\nusing this:\n  diff k charts charts_eucl f\n\ngoal (1 subgoal):\n 1. diff k charts_eucl charts_eucl (f \\<circ> c)", "apply (intro diff_compose)"], ["proof (prove)\ngoal (2 subgoals):\n 1. diff k charts charts_eucl f \\<Longrightarrow> diff k charts_eucl ?M2.1 c\n 2. diff k charts charts_eucl f \\<Longrightarrow> diff k ?M2.1 charts_eucl f", "apply (rule c)"], ["proof (prove)\ngoal (1 subgoal):\n 1. diff k charts charts_eucl f \\<Longrightarrow>\n    diff k charts charts_eucl f", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  diff_fun k charts_eucl (f \\<circ> c)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. cotangent_field f (c x) (tangent_field c x)) has_integral\n     f (c b) - f (c a))\n     {a..b}", "then"], ["proof (chain)\npicking this:\n  diff_fun k charts_eucl (f \\<circ> c)", "have \"k-smooth_on UNIV (f o c)\""], ["proof (prove)\nusing this:\n  diff_fun k charts_eucl (f \\<circ> c)\n\ngoal (1 subgoal):\n 1. k-smooth_on UNIV (f \\<circ> c)", "by (rule diff_fun_charts_euclD)"], ["proof (state)\nthis:\n  k-smooth_on UNIV (f \\<circ> c)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. cotangent_field f (c x) (tangent_field c x)) has_integral\n     f (c b) - f (c a))\n     {a..b}", "then"], ["proof (chain)\npicking this:\n  k-smooth_on UNIV (f \\<circ> c)", "have \"(f o c) differentiable_on UNIV\""], ["proof (prove)\nusing this:\n  k-smooth_on UNIV (f \\<circ> c)\n\ngoal (1 subgoal):\n 1. f \\<circ> c differentiable_on UNIV", "by (rule smooth_on_imp_differentiable_on) (use k in simp)"], ["proof (state)\nthis:\n  f \\<circ> c differentiable_on UNIV\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. cotangent_field f (c x) (tangent_field c x)) has_integral\n     f (c b) - f (c a))\n     {a..b}", "then"], ["proof (chain)\npicking this:\n  f \\<circ> c differentiable_on UNIV", "have fc: \"(\\<lambda>a. f (c a)) differentiable at x\" for x"], ["proof (prove)\nusing this:\n  f \\<circ> c differentiable_on UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>a. f (c a)) differentiable at x", "by (auto simp: differentiable_on_def o_def)"], ["proof (state)\nthis:\n  (\\<lambda>a. f (c a)) differentiable at ?x3\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. cotangent_field f (c x) (tangent_field c x)) has_integral\n     f (c b) - f (c a))\n     {a..b}", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>a. f (c a)) differentiable at ?x3", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>a. f (c a)) differentiable at ?x3\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. cotangent_field f (c x) (tangent_field c x)) has_integral\n     f (c b) - f (c a))\n     {a..b}", "using ab"], ["proof (prove)\nusing this:\n  (\\<lambda>a. f (c a)) differentiable at ?x3\n  a \\<le> b\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. cotangent_field f (c x) (tangent_field c x)) has_integral\n     f (c b) - f (c a))\n     {a..b}", "unfolding cotangent_field_def"], ["proof (prove)\nusing this:\n  (\\<lambda>a. f (c a)) differentiable at ?x3\n  a \\<le> b\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         restrict0 (tangent_space (c x)) (\\<lambda>X. X f)\n          (tangent_field c x)) has_integral\n     f (c b) - f (c a))\n     {a..b}", "apply (auto simp: tangent_field_is_tangent c k)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n     a \\<le> b\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x. tangent_field c x f) has_integral\n                       f (c b) - f (c a))\n                       {a..b}", "unfolding tangent_field_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n     a \\<le> b\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           restrict0 diff_fun_space\n                            (\\<lambda>f.\n                                frechet_derivative (f \\<circ> c) (at x) 1)\n                            f) has_integral\n                       f (c b) - f (c a))\n                       {a..b}", "apply (auto simp: f)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n     a \\<le> b\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>x.\n                           frechet_derivative (f \\<circ> c) (at x)\n                            1) has_integral\n                       f (c b) - f (c a))\n                       {a..b}", "apply (rule fundamental_theorem_of_calculus)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n     a \\<le> b\\<rbrakk>\n    \\<Longrightarrow> a \\<le> b\n 2. \\<And>x.\n       \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n        a \\<le> b; x \\<in> {a..b}\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>a. f (c a)) has_vector_derivative\n                          frechet_derivative (f \\<circ> c) (at x) 1)\n                          (at x within {a..b})", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n        a \\<le> b; x \\<in> {a..b}\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>a. f (c a)) has_vector_derivative\n                          frechet_derivative (f \\<circ> c) (at x) 1)\n                          (at x within {a..b})", "apply (rule has_vector_derivative_at_within)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n        a \\<le> b; x \\<in> {a..b}\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>a. f (c a)) has_vector_derivative\n                          frechet_derivative (f \\<circ> c) (at x) 1)\n                          (at x)", "unfolding o_def has_vector_derivative_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n        a \\<le> b; x \\<in> {a..b}\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>a. f (c a)) has_derivative\n                          (\\<lambda>xa.\n                              xa *\\<^sub>R\n                              frechet_derivative (\\<lambda>x. f (c x))\n                               (at x) 1))\n                          (at x)", "apply (subst frechet_derivative_at_real_eq_scaleR[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n        a \\<le> b; x \\<in> {a..b}\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>x. f (c x)) differentiable at x\n 2. \\<And>x xa.\n       \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n        a \\<le> b; x \\<in> {a..b}\\<rbrakk>\n       \\<Longrightarrow> NO_MATCH (1::?'b11) xa\n 3. \\<And>x.\n       \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n        a \\<le> b; x \\<in> {a..b}\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>a. f (c a)) has_derivative\n                          frechet_derivative (\\<lambda>x. f (c x)) (at x))\n                          (at x)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n        a \\<le> b; x \\<in> {a..b}\\<rbrakk>\n       \\<Longrightarrow> NO_MATCH (1::?'b11) xa\n 2. \\<And>x.\n       \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n        a \\<le> b; x \\<in> {a..b}\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>a. f (c a)) has_derivative\n                          frechet_derivative (\\<lambda>x. f (c x)) (at x))\n                          (at x)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n        a \\<le> b; x \\<in> {a..b}\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>a. f (c a)) has_derivative\n                          frechet_derivative (\\<lambda>x. f (c x)) (at x))\n                          (at x)", "apply (rule frechet_derivative_worksI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x. (\\<lambda>a. f (c a)) differentiable at x;\n        a \\<le> b; x \\<in> {a..b}\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a. f (c a)) differentiable at x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ((\\<lambda>x. cotangent_field f (c x) (tangent_field c x)) has_integral\n   f (c b) - f (c a))\n   {a..b}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}