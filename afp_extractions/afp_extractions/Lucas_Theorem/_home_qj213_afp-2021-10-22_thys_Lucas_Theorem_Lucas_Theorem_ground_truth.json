{"file_name": "/home/qj213/afp-2021-10-22/thys/Lucas_Theorem/Lucas_Theorem.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Lucas_Theorem", "problem_names": ["lemma fpsrel_iff [simp]: \"(f, g) \\<in> fpsmodrel p \\<longleftrightarrow> (\\<forall>n. (f $ n) mod p = (g $ n) mod p)\"", "lemma fps_equiv: \"equiv UNIV (fpsmodrel p)\"", "lemma fps_mult_equiv_coeff: \n  fixes f g :: \"('a :: {euclidean_ring_cancel}) fps\"\n  assumes \"(f, g) \\<in> fpsmodrel p\"\n  shows \"(f*h)$n mod p = (g*h)$n mod p\"", "lemma fps_mult_equiv: \n  fixes f g :: \"('a :: {euclidean_ring_cancel}) fps\"\n  assumes \"(f, g) \\<in> fpsmodrel p\"\n  shows \"(f*h, g*h) \\<in> fpsmodrel p\"", "lemma fps_power_equiv: \n  fixes f g :: \"('a :: {euclidean_ring_cancel}) fps\"\n  fixes x :: nat\n  assumes \"(f, g) \\<in> fpsmodrel p\"\n  shows \"(f^x, g^x) \\<in> fpsmodrel p\"", "lemma binomial_coeffs_induct: \n  fixes n k :: nat\n  shows \"(1 + fps_X)^n $ k = of_nat(n choose k)\"", "lemma pn_choose_k_modp_0:\n  fixes n k::nat\n  assumes \"prime p\"\n          \"k \\<ge> 1 \\<and> k \\<le> p^n - 1\"\n          \"n > 0\"\n  shows \"(p^n choose k) mod p = 0\"", "lemma fps_middle_coeffs:\n  assumes \"prime p\"\n          \"n \\<noteq> 0 \\<and> n \\<noteq> p\"\n  shows \"((1 + fps_X :: int fps) ^p) $ n mod p = 0 mod p\"", "lemma fps_freshmans_dream:\n  assumes \"prime p\"\n  shows \"(((1 + fps_X :: int fps ) ^p), (1 + (fps_X)^(p))) \\<in> fpsmodrel p\"", "lemma fps_binomial_p_compose: \n  assumes \"p \\<noteq> 0\" \n  shows \"(1 + (fps_X:: ('a :: {idom} fps))^p)^n = ((1 + fps_X)^n) oo (fps_X^p)\"", "lemma fps_X_pow_binomial_coeffs: \n  assumes \"prime p\"\n  shows \"(1 + (fps_X ::int fps)^p)^N $k = (if p dvd k then (N choose (k div p)) else 0)\"", "lemma fps_div_rep_coeffs: \n  assumes \"prime p\"\n  shows \"((1 + (fps_X::int fps)^p)^(n div p) * (1 + fps_X)^(n mod p)) $ k = \n          ((n div p) choose (k div p)) * ((n mod p) choose (k mod p))\"\n    (is \"((1 + (fps_X::int fps)^p)^?N * (1 + fps_X)^?rn) $ k = (?N choose ?K) * (?rn choose ?rk)\")", "theorem lucas_theorem:\n  fixes n k d::nat\nassumes \"n < p ^ (Suc d)\"\nassumes \"k < p ^ (Suc d)\"\nassumes \"prime p\"\nshows \"(n choose k) mod p = (\\<Prod>i\\<le>d. ((nth_digit_general n i p) choose (nth_digit_general k i p))) mod p\""], "translations": [["", "lemma fpsrel_iff [simp]: \"(f, g) \\<in> fpsmodrel p \\<longleftrightarrow> (\\<forall>n. (f $ n) mod p = (g $ n) mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((f, g) \\<in> fpsmodrel p) = (\\<forall>n. f $ n mod p = g $ n mod p)", "by (simp add: fpsmodrel_def)"], ["", "lemma fps_equiv: \"equiv UNIV (fpsmodrel p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equiv UNIV (fpsmodrel p)", "proof (rule equivI)"], ["proof (state)\ngoal (3 subgoals):\n 1. refl (fpsmodrel p)\n 2. sym (fpsmodrel p)\n 3. trans (fpsmodrel p)", "show \"refl (fpsmodrel p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl (fpsmodrel p)", "by (simp add: refl_on_def fpsmodrel_def)"], ["proof (state)\nthis:\n  refl (fpsmodrel p)\n\ngoal (2 subgoals):\n 1. sym (fpsmodrel p)\n 2. trans (fpsmodrel p)", "show \"sym (fpsmodrel p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym (fpsmodrel p)", "by (simp add: sym_def fpsmodrel_def)"], ["proof (state)\nthis:\n  sym (fpsmodrel p)\n\ngoal (1 subgoal):\n 1. trans (fpsmodrel p)", "show \"trans (fpsmodrel p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans (fpsmodrel p)", "by (intro transI) (simp add: fpsmodrel_def)"], ["proof (state)\nthis:\n  trans (fpsmodrel p)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> Equivalence relation over multiplication \\<close>"], ["", "lemma fps_mult_equiv_coeff: \n  fixes f g :: \"('a :: {euclidean_ring_cancel}) fps\"\n  assumes \"(f, g) \\<in> fpsmodrel p\"\n  shows \"(f*h)$n mod p = (g*h)$n mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f * h) $ n mod p = (g * h) $ n mod p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (f * h) $ n mod p = (g * h) $ n mod p", "have \"((f*h) $ n) mod p =(\\<Sum>i=0..n. (f$i mod p * h$(n - i) mod p) mod p) mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f * h) $ n mod p =\n    (\\<Sum>i = 0..n. f $ i mod p * h $ (n - i) mod p mod p) mod p", "using mod_sum_eq mod_mult_left_eq"], ["proof (prove)\nusing this:\n  (\\<Sum>i\\<in>?A. ?f i mod ?a) mod ?a = sum ?f ?A mod ?a\n  ?a mod ?c * ?b mod ?c = ?a * ?b mod ?c\n\ngoal (1 subgoal):\n 1. (f * h) $ n mod p =\n    (\\<Sum>i = 0..n. f $ i mod p * h $ (n - i) mod p mod p) mod p", "by (simp add: fps_mult_nth mod_sum_eq mod_mult_left_eq)"], ["proof (state)\nthis:\n  (f * h) $ n mod p =\n  (\\<Sum>i = 0..n. f $ i mod p * h $ (n - i) mod p mod p) mod p\n\ngoal (1 subgoal):\n 1. (f * h) $ n mod p = (g * h) $ n mod p", "also"], ["proof (state)\nthis:\n  (f * h) $ n mod p =\n  (\\<Sum>i = 0..n. f $ i mod p * h $ (n - i) mod p mod p) mod p\n\ngoal (1 subgoal):\n 1. (f * h) $ n mod p = (g * h) $ n mod p", "have \"... = (\\<Sum>i=0..n. (g$i mod p * h$(n - i) mod p) mod p) mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..n. f $ i mod p * h $ (n - i) mod p mod p) mod p =\n    (\\<Sum>i = 0..n. g $ i mod p * h $ (n - i) mod p mod p) mod p", "using assms"], ["proof (prove)\nusing this:\n  (f, g) \\<in> fpsmodrel p\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..n. f $ i mod p * h $ (n - i) mod p mod p) mod p =\n    (\\<Sum>i = 0..n. g $ i mod p * h $ (n - i) mod p mod p) mod p", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..n. f $ i mod p * h $ (n - i) mod p mod p) mod p =\n  (\\<Sum>i = 0..n. g $ i mod p * h $ (n - i) mod p mod p) mod p\n\ngoal (1 subgoal):\n 1. (f * h) $ n mod p = (g * h) $ n mod p", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..n. f $ i mod p * h $ (n - i) mod p mod p) mod p =\n  (\\<Sum>i = 0..n. g $ i mod p * h $ (n - i) mod p mod p) mod p\n\ngoal (1 subgoal):\n 1. (f * h) $ n mod p = (g * h) $ n mod p", "have \"... = ((g*h) $ n) mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..n. g $ i mod p * h $ (n - i) mod p mod p) mod p =\n    (g * h) $ n mod p", "by (simp add: mod_mult_left_eq mod_sum_eq fps_mult_nth)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..n. g $ i mod p * h $ (n - i) mod p mod p) mod p =\n  (g * h) $ n mod p\n\ngoal (1 subgoal):\n 1. (f * h) $ n mod p = (g * h) $ n mod p", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..n. g $ i mod p * h $ (n - i) mod p mod p) mod p =\n  (g * h) $ n mod p\n\ngoal (1 subgoal):\n 1. (f * h) $ n mod p = (g * h) $ n mod p", "by (simp add: calculation)"], ["proof (state)\nthis:\n  (f * h) $ n mod p = (g * h) $ n mod p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fps_mult_equiv: \n  fixes f g :: \"('a :: {euclidean_ring_cancel}) fps\"\n  assumes \"(f, g) \\<in> fpsmodrel p\"\n  shows \"(f*h, g*h) \\<in> fpsmodrel p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f * h, g * h) \\<in> fpsmodrel p", "using fpsmodrel_def fps_mult_equiv_coeff assms"], ["proof (prove)\nusing this:\n  fpsmodrel ?p \\<equiv> {(f, g). \\<forall>n. f $ n mod ?p = g $ n mod ?p}\n  (?f, ?g) \\<in> fpsmodrel ?p \\<Longrightarrow>\n  (?f * ?h) $ ?n mod ?p = (?g * ?h) $ ?n mod ?p\n  (f, g) \\<in> fpsmodrel p\n\ngoal (1 subgoal):\n 1. (f * h, g * h) \\<in> fpsmodrel p", "by blast"], ["", "text \\<open> Equivalence relation over power operator \\<close>"], ["", "lemma fps_power_equiv: \n  fixes f g :: \"('a :: {euclidean_ring_cancel}) fps\"\n  fixes x :: nat\n  assumes \"(f, g) \\<in> fpsmodrel p\"\n  shows \"(f^x, g^x) \\<in> fpsmodrel p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^ x, g ^ x) \\<in> fpsmodrel p", "using assms"], ["proof (prove)\nusing this:\n  (f, g) \\<in> fpsmodrel p\n\ngoal (1 subgoal):\n 1. (f ^ x, g ^ x) \\<in> fpsmodrel p", "proof (induct x)"], ["proof (state)\ngoal (2 subgoals):\n 1. (f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n    (f ^ 0, g ^ 0) \\<in> fpsmodrel p\n 2. \\<And>x.\n       \\<lbrakk>(f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n                (f ^ x, g ^ x) \\<in> fpsmodrel p;\n        (f, g) \\<in> fpsmodrel p\\<rbrakk>\n       \\<Longrightarrow> (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "case 0"], ["proof (state)\nthis:\n  (f, g) \\<in> fpsmodrel p\n\ngoal (2 subgoals):\n 1. (f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n    (f ^ 0, g ^ 0) \\<in> fpsmodrel p\n 2. \\<And>x.\n       \\<lbrakk>(f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n                (f ^ x, g ^ x) \\<in> fpsmodrel p;\n        (f, g) \\<in> fpsmodrel p\\<rbrakk>\n       \\<Longrightarrow> (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "thus ?case"], ["proof (prove)\nusing this:\n  (f, g) \\<in> fpsmodrel p\n\ngoal (1 subgoal):\n 1. (f ^ 0, g ^ 0) \\<in> fpsmodrel p", "by (simp add: fpsmodrel_def)"], ["proof (state)\nthis:\n  (f ^ 0, g ^ 0) \\<in> fpsmodrel p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n                (f ^ x, g ^ x) \\<in> fpsmodrel p;\n        (f, g) \\<in> fpsmodrel p\\<rbrakk>\n       \\<Longrightarrow> (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n                (f ^ x, g ^ x) \\<in> fpsmodrel p;\n        (f, g) \\<in> fpsmodrel p\\<rbrakk>\n       \\<Longrightarrow> (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "case (Suc x)"], ["proof (state)\nthis:\n  (f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n  (f ^ x, g ^ x) \\<in> fpsmodrel p\n  (f, g) \\<in> fpsmodrel p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n                (f ^ x, g ^ x) \\<in> fpsmodrel p;\n        (f, g) \\<in> fpsmodrel p\\<rbrakk>\n       \\<Longrightarrow> (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "then"], ["proof (chain)\npicking this:\n  (f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n  (f ^ x, g ^ x) \\<in> fpsmodrel p\n  (f, g) \\<in> fpsmodrel p", "have hyp: \" \\<forall>n. f^x $ n mod p = g ^x $ n mod p\""], ["proof (prove)\nusing this:\n  (f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n  (f ^ x, g ^ x) \\<in> fpsmodrel p\n  (f, g) \\<in> fpsmodrel p\n\ngoal (1 subgoal):\n 1. \\<forall>n. f ^ x $ n mod p = g ^ x $ n mod p", "using fpsrel_iff"], ["proof (prove)\nusing this:\n  (f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n  (f ^ x, g ^ x) \\<in> fpsmodrel p\n  (f, g) \\<in> fpsmodrel p\n  ((?f, ?g) \\<in> fpsmodrel ?p) =\n  (\\<forall>n. ?f $ n mod ?p = ?g $ n mod ?p)\n\ngoal (1 subgoal):\n 1. \\<forall>n. f ^ x $ n mod p = g ^ x $ n mod p", "by blast"], ["proof (state)\nthis:\n  \\<forall>n. f ^ x $ n mod p = g ^ x $ n mod p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(f, g) \\<in> fpsmodrel p \\<Longrightarrow>\n                (f ^ x, g ^ x) \\<in> fpsmodrel p;\n        (f, g) \\<in> fpsmodrel p\\<rbrakk>\n       \\<Longrightarrow> (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>n. f ^ x $ n mod p = g ^ x $ n mod p\n\ngoal (1 subgoal):\n 1. (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n. f ^ x $ n mod p = g ^ x $ n mod p \\<Longrightarrow>\n    (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "have fact: \"\\<forall>n h. (g * h) $ n mod p = (f * h) $ n mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n h. (g * h) $ n mod p = (f * h) $ n mod p", "by (metis assms fps_mult_equiv_coeff)"], ["proof (state)\nthis:\n  \\<forall>n h. (g * h) $ n mod p = (f * h) $ n mod p\n\ngoal (1 subgoal):\n 1. \\<forall>n. f ^ x $ n mod p = g ^ x $ n mod p \\<Longrightarrow>\n    (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "have \"\\<forall>n h. (g ^ x * h) $ n mod p = (f ^ x * h) $ n mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n h. (g ^ x * h) $ n mod p = (f ^ x * h) $ n mod p", "by (simp add: fps_mult_equiv_coeff hyp)"], ["proof (state)\nthis:\n  \\<forall>n h. (g ^ x * h) $ n mod p = (f ^ x * h) $ n mod p\n\ngoal (1 subgoal):\n 1. \\<forall>n. f ^ x $ n mod p = g ^ x $ n mod p \\<Longrightarrow>\n    (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "then"], ["proof (chain)\npicking this:\n  \\<forall>n h. (g ^ x * h) $ n mod p = (f ^ x * h) $ n mod p", "have \"\\<forall>n h. (h * g ^ x) $ n mod p = (h * f ^ x) $ n mod p\""], ["proof (prove)\nusing this:\n  \\<forall>n h. (g ^ x * h) $ n mod p = (f ^ x * h) $ n mod p\n\ngoal (1 subgoal):\n 1. \\<forall>n h. (h * g ^ x) $ n mod p = (h * f ^ x) $ n mod p", "by (simp add: mult.commute)"], ["proof (state)\nthis:\n  \\<forall>n h. (h * g ^ x) $ n mod p = (h * f ^ x) $ n mod p\n\ngoal (1 subgoal):\n 1. \\<forall>n. f ^ x $ n mod p = g ^ x $ n mod p \\<Longrightarrow>\n    (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n h. (h * g ^ x) $ n mod p = (h * f ^ x) $ n mod p\n\ngoal (1 subgoal):\n 1. (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "using fact"], ["proof (prove)\nusing this:\n  \\<forall>n h. (h * g ^ x) $ n mod p = (h * f ^ x) $ n mod p\n  \\<forall>n h. (g * h) $ n mod p = (f * h) $ n mod p\n\ngoal (1 subgoal):\n 1. (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p", "by force"], ["proof (state)\nthis:\n  (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (f ^ Suc x, g ^ Suc x) \\<in> fpsmodrel p\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Binomial Coefficients \\<close>"], ["", "text \\<open>The @{term \"fps_binomial\"} definition in the formal power series uses the @{term \"n gchoose k\"} operator. It's \ndefined as being of type @{typ \"'a :: field_char_0 fps\"}, however the equivalence relation requires a type @{typ 'a} \nthat supports the modulo operator. \nThe proof of the binomial theorem based on FPS coefficients below uses the choose operator and does\nnot put bounds on the type of @{term \"fps_X\"}.\\<close>"], ["", "lemma binomial_coeffs_induct: \n  fixes n k :: nat\n  shows \"(1 + fps_X)^n $ k = of_nat(n choose k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ n $ k = of_nat (n choose k)", "proof (induct n arbitrary: k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k. (1 + fps_X) ^ 0 $ k = of_nat (0 choose k)\n 2. \\<And>n k.\n       (\\<And>k.\n           (1 + fps_X) ^ n $ k = of_nat (n choose k)) \\<Longrightarrow>\n       (1 + fps_X) ^ Suc n $ k = of_nat (Suc n choose k)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>k. (1 + fps_X) ^ 0 $ k = of_nat (0 choose k)\n 2. \\<And>n k.\n       (\\<And>k.\n           (1 + fps_X) ^ n $ k = of_nat (n choose k)) \\<Longrightarrow>\n       (1 + fps_X) ^ Suc n $ k = of_nat (Suc n choose k)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ 0 $ k = of_nat (0 choose k)", "by (metis binomial_eq_0_iff binomial_n_0 fps_nth_of_nat not_gr_zero of_nat_0 of_nat_1 power_0)"], ["proof (state)\nthis:\n  (1 + fps_X) ^ 0 $ k = of_nat (0 choose k)\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       (\\<And>k.\n           (1 + fps_X) ^ n $ k = of_nat (n choose k)) \\<Longrightarrow>\n       (1 + fps_X) ^ Suc n $ k = of_nat (Suc n choose k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n k.\n       (\\<And>k.\n           (1 + fps_X) ^ n $ k = of_nat (n choose k)) \\<Longrightarrow>\n       (1 + fps_X) ^ Suc n $ k = of_nat (Suc n choose k)", "case h: (Suc n)"], ["proof (state)\nthis:\n  (1 + fps_X) ^ n $ ?k = of_nat (n choose ?k)\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       (\\<And>k.\n           (1 + fps_X) ^ n $ k = of_nat (n choose k)) \\<Longrightarrow>\n       (1 + fps_X) ^ Suc n $ k = of_nat (Suc n choose k)", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n k.\n       (\\<And>k.\n           (1 + fps_X) ^ n $ k = of_nat (n choose k)) \\<Longrightarrow>\n       (1 + fps_X) ^ Suc n $ k = of_nat (Suc n choose k)", "have start: \"(1 + fps_X)^(n + 1) = (1 + fps_X) * (1 + fps_X)^n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ (n + 1) = (1 + fps_X) * (1 + fps_X) ^ n", "by auto"], ["proof (state)\nthis:\n  (1 + fps_X) ^ (n + 1) = (1 + fps_X) * (1 + fps_X) ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n k.\n       (\\<And>k.\n           (1 + fps_X) ^ n $ k = of_nat (n choose k)) \\<Longrightarrow>\n       (1 + fps_X) ^ Suc n $ k = of_nat (Suc n choose k)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ Suc n $ ka__ = of_nat (Suc n choose ka__)", "using One_nat_def Suc_eq_plus1 Suc_pred add.commute binomial_Suc_Suc binomial_n_0 \n        fps_mult_fps_X_plus_1_nth h.hyps neq0_conv start"], ["proof (prove)\nusing this:\n  1 = Suc 0\n  Suc ?n = ?n + 1\n  0 < ?n \\<Longrightarrow> Suc (?n - Suc 0) = ?n\n  ?a + ?b = ?b + ?a\n  Suc ?n choose Suc ?k = ?n choose ?k + (?n choose Suc ?k)\n  ?n choose 0 = 1\n  ((1 + fps_X) * ?a) $ ?n =\n  (if ?n = 0 then ?a $ ?n else ?a $ ?n + ?a $ (?n - 1))\n  (1 + fps_X) ^ n $ ?k = of_nat (n choose ?k)\n  (?n \\<noteq> 0) = (0 < ?n)\n  (1 + fps_X) ^ (n + 1) = (1 + fps_X) * (1 + fps_X) ^ n\n\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ Suc n $ ka__ = of_nat (Suc n choose ka__)", "by (smt of_nat_add)"], ["proof (state)\nthis:\n  (1 + fps_X) ^ Suc n $ ka__ = of_nat (Suc n choose ka__)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Freshman's Dream Lemma on FPS \\<close>"], ["", "text \\<open> The Freshman's dream lemma modulo a prime number $p$ is a well known proof that $(1 + x^p) \\equiv (1 + x)^p \\mod p$\\<close>"], ["", "text \\<open> First prove that $\\binom{p^n}{k} \\equiv 0 \\mod p$ for $k \\ge 1$ and $k < p^n$. The eventual\nproof only ended up requiring this with $n = 1$\\<close>"], ["", "lemma pn_choose_k_modp_0:\n  fixes n k::nat\n  assumes \"prime p\"\n          \"k \\<ge> 1 \\<and> k \\<le> p^n - 1\"\n          \"n > 0\"\n  shows \"(p^n choose k) mod p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "have inequality: \"k \\<le> p^n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<le> p ^ n", "using assms (2)"], ["proof (prove)\nusing this:\n  1 \\<le> k \\<and> k \\<le> p ^ n - 1\n\ngoal (1 subgoal):\n 1. k \\<le> p ^ n", "by arith"], ["proof (state)\nthis:\n  k \\<le> p ^ n\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "have choose_take_1: \"((p^n - 1) choose ( k - 1))= fact (p^n - 1) div (fact (k - 1) * fact (p^n - k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p ^ n - 1 choose (k - 1) =\n    fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k))", "using binomial_altdef_nat diff_le_mono inequality assms(2)"], ["proof (prove)\nusing this:\n  ?k \\<le> ?n \\<Longrightarrow>\n  ?n choose ?k = fact ?n div (fact ?k * fact (?n - ?k))\n  ?m \\<le> ?n \\<Longrightarrow> ?m - ?l \\<le> ?n - ?l\n  k \\<le> p ^ n\n  1 \\<le> k \\<and> k \\<le> p ^ n - 1\n\ngoal (1 subgoal):\n 1. p ^ n - 1 choose (k - 1) =\n    fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k))", "by auto"], ["proof (state)\nthis:\n  p ^ n - 1 choose (k - 1) =\n  fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "have \"k * (p^n choose k) = k * ((fact (p^n)) div (fact k * fact((p^n) - k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k * (p ^ n choose k) =\n    k * (fact (p ^ n) div (fact k * fact (p ^ n - k)))", "using assms binomial_fact'[OF inequality]"], ["proof (prove)\nusing this:\n  prime p\n  1 \\<le> k \\<and> k \\<le> p ^ n - 1\n  0 < n\n  p ^ n choose k = fact (p ^ n) div (fact k * fact (p ^ n - k))\n\ngoal (1 subgoal):\n 1. k * (p ^ n choose k) =\n    k * (fact (p ^ n) div (fact k * fact (p ^ n - k)))", "by auto"], ["proof (state)\nthis:\n  k * (p ^ n choose k) = k * (fact (p ^ n) div (fact k * fact (p ^ n - k)))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "also"], ["proof (state)\nthis:\n  k * (p ^ n choose k) = k * (fact (p ^ n) div (fact k * fact (p ^ n - k)))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "have \"... = k * fact (p^n) div (fact k * fact((p^n) - k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k * (fact (p ^ n) div (fact k * fact (p ^ n - k))) =\n    k * fact (p ^ n) div (fact k * fact (p ^ n - k))", "using binomial_fact_lemma div_mult_self_is_m fact_gt_zero inequality mult.assoc mult.commute \n          nat_0_less_mult_iff"], ["proof (prove)\nusing this:\n  ?k \\<le> ?n \\<Longrightarrow>\n  fact ?k * fact (?n - ?k) * (?n choose ?k) = fact ?n\n  0 < ?n \\<Longrightarrow> ?m * ?n div ?n = ?m\n  (0::?'a) < fact ?n\n  k \\<le> p ^ n\n  ?a * ?b * ?c = ?a * (?b * ?c)\n  ?a * ?b = ?b * ?a\n  (0 < ?m * ?n) = (0 < ?m \\<and> 0 < ?n)\n\ngoal (1 subgoal):\n 1. k * (fact (p ^ n) div (fact k * fact (p ^ n - k))) =\n    k * fact (p ^ n) div (fact k * fact (p ^ n - k))", "by smt"], ["proof (state)\nthis:\n  k * (fact (p ^ n) div (fact k * fact (p ^ n - k))) =\n  k * fact (p ^ n) div (fact k * fact (p ^ n - k))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "also"], ["proof (state)\nthis:\n  k * (fact (p ^ n) div (fact k * fact (p ^ n - k))) =\n  k * fact (p ^ n) div (fact k * fact (p ^ n - k))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "have \"... = k * fact (p^n) div (k * fact (k - 1) * fact((p^n) - k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k * fact (p ^ n) div (fact k * fact (p ^ n - k)) =\n    k * fact (p ^ n) div (k * fact (k - 1) * fact (p ^ n - k))", "by (metis assms(2) fact_nonzero fact_num_eq_if le0 le_antisym of_nat_id)"], ["proof (state)\nthis:\n  k * fact (p ^ n) div (fact k * fact (p ^ n - k)) =\n  k * fact (p ^ n) div (k * fact (k - 1) * fact (p ^ n - k))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "also"], ["proof (state)\nthis:\n  k * fact (p ^ n) div (fact k * fact (p ^ n - k)) =\n  k * fact (p ^ n) div (k * fact (k - 1) * fact (p ^ n - k))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "have \"... = fact (p^n) div (fact (k - 1) * fact((p^n) - k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k * fact (p ^ n) div (k * fact (k - 1) * fact (p ^ n - k)) =\n    fact (p ^ n) div (fact (k - 1) * fact (p ^ n - k))", "using assms"], ["proof (prove)\nusing this:\n  prime p\n  1 \\<le> k \\<and> k \\<le> p ^ n - 1\n  0 < n\n\ngoal (1 subgoal):\n 1. k * fact (p ^ n) div (k * fact (k - 1) * fact (p ^ n - k)) =\n    fact (p ^ n) div (fact (k - 1) * fact (p ^ n - k))", "by auto"], ["proof (state)\nthis:\n  k * fact (p ^ n) div (k * fact (k - 1) * fact (p ^ n - k)) =\n  fact (p ^ n) div (fact (k - 1) * fact (p ^ n - k))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "also"], ["proof (state)\nthis:\n  k * fact (p ^ n) div (k * fact (k - 1) * fact (p ^ n - k)) =\n  fact (p ^ n) div (fact (k - 1) * fact (p ^ n - k))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "have \"... = ((p^n) * fact (p^n - 1)) div (fact (k - 1) * fact((p^n) - k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact (p ^ n) div (fact (k - 1) * fact (p ^ n - k)) =\n    p ^ n * fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k))", "by (metis assms(2) fact_nonzero fact_num_eq_if inequality le0 le_antisym of_nat_id)"], ["proof (state)\nthis:\n  fact (p ^ n) div (fact (k - 1) * fact (p ^ n - k)) =\n  p ^ n * fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "also"], ["proof (state)\nthis:\n  fact (p ^ n) div (fact (k - 1) * fact (p ^ n - k)) =\n  p ^ n * fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "have \"... = (p^n) * (fact (p^n - 1) div (fact (k - 1) * fact((p^n) - k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p ^ n * fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k)) =\n    p ^ n * (fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k)))", "by (metis assms(2) calculation choose_take_1 neq0_conv not_one_le_zero times_binomial_minus1_eq)"], ["proof (state)\nthis:\n  p ^ n * fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k)) =\n  p ^ n * (fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k)))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "finally"], ["proof (chain)\npicking this:\n  k * (p ^ n choose k) =\n  p ^ n * (fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k)))", "have equality: \"k * (p^n choose k) = p^n * ((p^n - 1) choose (k - 1))\""], ["proof (prove)\nusing this:\n  k * (p ^ n choose k) =\n  p ^ n * (fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k)))\n\ngoal (1 subgoal):\n 1. k * (p ^ n choose k) = p ^ n * (p ^ n - 1 choose (k - 1))", "using assms(2) times_binomial_minus1_eq"], ["proof (prove)\nusing this:\n  k * (p ^ n choose k) =\n  p ^ n * (fact (p ^ n - 1) div (fact (k - 1) * fact (p ^ n - k)))\n  1 \\<le> k \\<and> k \\<le> p ^ n - 1\n  0 < ?k \\<Longrightarrow>\n  ?k * (?n choose ?k) = ?n * (?n - 1 choose (?k - 1))\n\ngoal (1 subgoal):\n 1. k * (p ^ n choose k) = p ^ n * (p ^ n - 1 choose (k - 1))", "by auto"], ["proof (state)\nthis:\n  k * (p ^ n choose k) = p ^ n * (p ^ n - 1 choose (k - 1))\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "then"], ["proof (chain)\npicking this:\n  k * (p ^ n choose k) = p ^ n * (p ^ n - 1 choose (k - 1))", "have dvd_result: \"p^n dvd (k * (p^n choose k))\""], ["proof (prove)\nusing this:\n  k * (p ^ n choose k) = p ^ n * (p ^ n - 1 choose (k - 1))\n\ngoal (1 subgoal):\n 1. p ^ n dvd k * (p ^ n choose k)", "by simp"], ["proof (state)\nthis:\n  p ^ n dvd k * (p ^ n choose k)\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "have \"\\<not> (p^n dvd k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> p ^ n dvd k", "using assms (2) binomial_n_0 diff_diff_cancel nat_dvd_not_less neq0_conv"], ["proof (prove)\nusing this:\n  1 \\<le> k \\<and> k \\<le> p ^ n - 1\n  ?n choose 0 = 1\n  ?i \\<le> ?n \\<Longrightarrow> ?n - (?n - ?i) = ?i\n  \\<lbrakk>0 < ?m; ?m < ?n\\<rbrakk> \\<Longrightarrow> \\<not> ?n dvd ?m\n  (?n \\<noteq> 0) = (0 < ?n)\n\ngoal (1 subgoal):\n 1. \\<not> p ^ n dvd k", "by auto"], ["proof (state)\nthis:\n  \\<not> p ^ n dvd k\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "then"], ["proof (chain)\npicking this:\n  \\<not> p ^ n dvd k", "have \"p dvd (p^n choose k)\""], ["proof (prove)\nusing this:\n  \\<not> p ^ n dvd k\n\ngoal (1 subgoal):\n 1. p dvd p ^ n choose k", "using mult.commute prime_imp_prime_elem prime_power_dvd_multD assms dvd_result"], ["proof (prove)\nusing this:\n  \\<not> p ^ n dvd k\n  ?a * ?b = ?b * ?a\n  prime ?p \\<Longrightarrow> prime_elem ?p\n  \\<lbrakk>prime_elem ?p; ?p ^ ?n dvd ?a * ?b; 0 < ?n;\n   \\<not> ?p dvd ?a\\<rbrakk>\n  \\<Longrightarrow> ?p ^ ?n dvd ?b\n  prime p\n  1 \\<le> k \\<and> k \\<le> p ^ n - 1\n  0 < n\n  p ^ n dvd k * (p ^ n choose k)\n\ngoal (1 subgoal):\n 1. p dvd p ^ n choose k", "by metis"], ["proof (state)\nthis:\n  p dvd p ^ n choose k\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  p dvd p ^ n choose k\n\ngoal (1 subgoal):\n 1. (p ^ n choose k) mod p = 0", "by simp"], ["proof (state)\nthis:\n  (p ^ n choose k) mod p = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> Applying the above lemma to the coefficients of $(1 + X)^p$, it is easy to show that all \ncoefficients other than the $0$th and $p$th will be $0$ \\<close>"], ["", "lemma fps_middle_coeffs:\n  assumes \"prime p\"\n          \"n \\<noteq> 0 \\<and> n \\<noteq> p\"\n  shows \"((1 + fps_X :: int fps) ^p) $ n mod p = 0 mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ p $ n mod int p = int (0 mod p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ p $ n mod int p = int (0 mod p)", "let ?f = \"(1 + fps_X :: int fps)^p\""], ["proof (state)\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ p $ n mod int p = int (0 mod p)", "have \"\\<forall> n. n > 0 \\<and> n < p \\<longrightarrow> (p choose n) mod p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. 0 < n \\<and> n < p \\<longrightarrow> (p choose n) mod p = 0", "using pn_choose_k_modp_0"], ["proof (prove)\nusing this:\n  \\<lbrakk>prime ?p; 1 \\<le> ?k \\<and> ?k \\<le> ?p ^ ?n - 1; 0 < ?n\\<rbrakk>\n  \\<Longrightarrow> (?p ^ ?n choose ?k) mod ?p = 0\n\ngoal (1 subgoal):\n 1. \\<forall>n. 0 < n \\<and> n < p \\<longrightarrow> (p choose n) mod p = 0", "by (metis (no_types, lifting) add_le_imp_le_diff assms(1) diff_diff_cancel diff_is_0_eq' \n        discrete le_add_diff_inverse le_numeral_extra(4) power_one_right zero_le_one zero_less_one)"], ["proof (state)\nthis:\n  \\<forall>n. 0 < n \\<and> n < p \\<longrightarrow> (p choose n) mod p = 0\n\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ p $ n mod int p = int (0 mod p)", "then"], ["proof (chain)\npicking this:\n  \\<forall>n. 0 < n \\<and> n < p \\<longrightarrow> (p choose n) mod p = 0", "have middle_0: \"\\<forall> n. n > 0 \\<and> n < p \\<longrightarrow> (?f $ n) mod p = 0\""], ["proof (prove)\nusing this:\n  \\<forall>n. 0 < n \\<and> n < p \\<longrightarrow> (p choose n) mod p = 0\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       0 < n \\<and> n < p \\<longrightarrow>\n       (1 + fps_X) ^ p $ n mod int p = 0", "using binomial_coeffs_induct"], ["proof (prove)\nusing this:\n  \\<forall>n. 0 < n \\<and> n < p \\<longrightarrow> (p choose n) mod p = 0\n  (1 + fps_X) ^ ?n $ ?k = of_nat (?n choose ?k)\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       0 < n \\<and> n < p \\<longrightarrow>\n       (1 + fps_X) ^ p $ n mod int p = 0", "by (metis of_nat_0 zmod_int)"], ["proof (state)\nthis:\n  \\<forall>n.\n     0 < n \\<and> n < p \\<longrightarrow> (1 + fps_X) ^ p $ n mod int p = 0\n\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ p $ n mod int p = int (0 mod p)", "have \"\\<forall> n. n > p \\<longrightarrow> ?f $ n mod p = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n>p. (1 + fps_X) ^ p $ n mod int p = 0", "using binomial_eq_0_iff binomial_coeffs_induct mod_0"], ["proof (prove)\nusing this:\n  (?n choose ?k = 0) = (?n < ?k)\n  (1 + fps_X) ^ ?n $ ?k = of_nat (?n choose ?k)\n  (0::?'a) mod ?a = (0::?'a)\n\ngoal (1 subgoal):\n 1. \\<forall>n>p. (1 + fps_X) ^ p $ n mod int p = 0", "by (metis of_nat_eq_0_iff)"], ["proof (state)\nthis:\n  \\<forall>n>p. (1 + fps_X) ^ p $ n mod int p = 0\n\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ p $ n mod int p = int (0 mod p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n>p. (1 + fps_X) ^ p $ n mod int p = 0\n\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ p $ n mod int p = int (0 mod p)", "using middle_0 assms(2) nat_neq_iff"], ["proof (prove)\nusing this:\n  \\<forall>n>p. (1 + fps_X) ^ p $ n mod int p = 0\n  \\<forall>n.\n     0 < n \\<and> n < p \\<longrightarrow> (1 + fps_X) ^ p $ n mod int p = 0\n  n \\<noteq> 0 \\<and> n \\<noteq> p\n  (?m \\<noteq> ?n) = (?m < ?n \\<or> ?n < ?m)\n\ngoal (1 subgoal):\n 1. (1 + fps_X) ^ p $ n mod int p = int (0 mod p)", "by auto"], ["proof (state)\nthis:\n  (1 + fps_X) ^ p $ n mod int p = int (0 mod p)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>It follows that $(1+ X)^p$ is equivalent to $(1 + X^p)$ under our equivalence relation, \nas required to prove the freshmans dream lemma. \\<close>"], ["", "lemma fps_freshmans_dream:\n  assumes \"prime p\"\n  shows \"(((1 + fps_X :: int fps ) ^p), (1 + (fps_X)^(p))) \\<in> fpsmodrel p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)", "let ?f = \"(1 + fps_X :: int fps)^p\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)", "let ?g = \"(1 + (fps_X :: int fps)^p)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)", "have all_f_coeffs: \"\\<forall> n. n \\<noteq> 0 \\<and> n \\<noteq> p \\<longrightarrow> ?f $ n mod p = 0 mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       n \\<noteq> 0 \\<and> n \\<noteq> p \\<longrightarrow>\n       (1 + fps_X) ^ p $ n mod int p = int (0 mod p)", "using fps_middle_coeffs assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>prime ?p; ?n \\<noteq> 0 \\<and> ?n \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> (1 + fps_X) ^ ?p $ ?n mod int ?p = int (0 mod ?p)\n  prime p\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       n \\<noteq> 0 \\<and> n \\<noteq> p \\<longrightarrow>\n       (1 + fps_X) ^ p $ n mod int p = int (0 mod p)", "by blast"], ["proof (state)\nthis:\n  \\<forall>n.\n     n \\<noteq> 0 \\<and> n \\<noteq> p \\<longrightarrow>\n     (1 + fps_X) ^ p $ n mod int p = int (0 mod p)\n\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)", "have \"?g $ 0 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) $ 0 = 1", "using assms"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) $ 0 = 1", "by auto"], ["proof (state)\nthis:\n  (1 + fps_X ^ p) $ 0 = 1\n\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)", "then"], ["proof (chain)\npicking this:\n  (1 + fps_X ^ p) $ 0 = 1", "have \"?g $ 0 mod p = 1 mod p\""], ["proof (prove)\nusing this:\n  (1 + fps_X ^ p) $ 0 = 1\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) $ 0 mod int p = int (1 mod p)", "using int_ops(2) zmod_int assms"], ["proof (prove)\nusing this:\n  (1 + fps_X ^ p) $ 0 = 1\n  int 1 = 1\n  int (?a mod ?b) = int ?a mod int ?b\n  prime p\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) $ 0 mod int p = int (1 mod p)", "by presburger"], ["proof (state)\nthis:\n  (1 + fps_X ^ p) $ 0 mod int p = int (1 mod p)\n\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)", "then"], ["proof (chain)\npicking this:\n  (1 + fps_X ^ p) $ 0 mod int p = int (1 mod p)", "have \"?g $ p mod p = 1 mod p\""], ["proof (prove)\nusing this:\n  (1 + fps_X ^ p) $ 0 mod int p = int (1 mod p)\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) $ p mod int p = int (1 mod p)", "using assms"], ["proof (prove)\nusing this:\n  (1 + fps_X ^ p) $ 0 mod int p = int (1 mod p)\n  prime p\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) $ p mod int p = int (1 mod p)", "by auto"], ["proof (state)\nthis:\n  (1 + fps_X ^ p) $ p mod int p = int (1 mod p)\n\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)", "then"], ["proof (chain)\npicking this:\n  (1 + fps_X ^ p) $ p mod int p = int (1 mod p)", "have \"\\<forall> n . ?f $ n mod p = ?g $ n mod p\""], ["proof (prove)\nusing this:\n  (1 + fps_X ^ p) $ p mod int p = int (1 mod p)\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (1 + fps_X) ^ p $ n mod int p = (1 + fps_X ^ p) $ n mod int p", "using all_f_coeffs"], ["proof (prove)\nusing this:\n  (1 + fps_X ^ p) $ p mod int p = int (1 mod p)\n  \\<forall>n.\n     n \\<noteq> 0 \\<and> n \\<noteq> p \\<longrightarrow>\n     (1 + fps_X) ^ p $ n mod int p = int (0 mod p)\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (1 + fps_X) ^ p $ n mod int p = (1 + fps_X ^ p) $ n mod int p", "by (simp add: binomial_coeffs_induct)"], ["proof (state)\nthis:\n  \\<forall>n. (1 + fps_X) ^ p $ n mod int p = (1 + fps_X ^ p) $ n mod int p\n\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n. (1 + fps_X) ^ p $ n mod int p = (1 + fps_X ^ p) $ n mod int p\n\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)", "using fpsrel_iff"], ["proof (prove)\nusing this:\n  \\<forall>n. (1 + fps_X) ^ p $ n mod int p = (1 + fps_X ^ p) $ n mod int p\n  ((?f, ?g) \\<in> fpsmodrel ?p) =\n  (\\<forall>n. ?f $ n mod ?p = ?g $ n mod ?p)\n\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)", "by blast"], ["proof (state)\nthis:\n  ((1 + fps_X) ^ p, 1 + fps_X ^ p) \\<in> fpsmodrel (int p)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Lucas's Theorem Proof\\<close>"], ["", "text \\<open>A formalisation of Lucas's theorem based on a generating function proof using the existing formal power series (FPS) Isabelle library\\<close>"], ["", "subsection \\<open>Reasoning about Coefficients Helpers\\<close>"], ["", "text \\<open>A generating function proof of Lucas's theorem relies on direct comparison between coefficients of FPS which requires a number \nof helper lemmas to prove formally. In particular it compares the coefficients of \n$(1 + X)^n \\mod p$ to $(1 + X^p)^N * (1 + X) ^rn \\mod p$, where $N = n / p$, and $rn = n \\mod p$.\nThis section proves that the $k$th coefficient of $(1 + X^p)^N * (1 + X) ^rn = (N choose K) * (rn choose rk)$\\<close>"], ["", "text \\<open>Applying the @{term \"fps_compose\"} operator enables reasoning about the coefficients of $(1 + X^p)^n$ \nusing the existing binomial theorem proof with $X^p$ instead of $X$.\\<close>"], ["", "lemma fps_binomial_p_compose: \n  assumes \"p \\<noteq> 0\" \n  shows \"(1 + (fps_X:: ('a :: {idom} fps))^p)^n = ((1 + fps_X)^n) oo (fps_X^p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ n = (1 + fps_X) ^ n oo fps_X ^ p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ n = (1 + fps_X) ^ n oo fps_X ^ p", "have \"(1::'a fps) + fps_X ^ p = 1 + fps_X oo fps_X ^ p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + fps_X ^ p = 1 + fps_X oo fps_X ^ p", "by (simp add: assms fps_compose_add_distrib)"], ["proof (state)\nthis:\n  1 + fps_X ^ p = 1 + fps_X oo fps_X ^ p\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ n = (1 + fps_X) ^ n oo fps_X ^ p", "then"], ["proof (chain)\npicking this:\n  1 + fps_X ^ p = 1 + fps_X oo fps_X ^ p", "show ?thesis"], ["proof (prove)\nusing this:\n  1 + fps_X ^ p = 1 + fps_X oo fps_X ^ p\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ n = (1 + fps_X) ^ n oo fps_X ^ p", "by (simp add: assms fps_compose_power)"], ["proof (state)\nthis:\n  (1 + fps_X ^ p) ^ n = (1 + fps_X) ^ n oo fps_X ^ p\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> Next the proof determines the value of the $k$th coefficient of $(1 + X^p)^N$. \\<close>"], ["", "lemma fps_X_pow_binomial_coeffs: \n  assumes \"prime p\"\n  shows \"(1 + (fps_X ::int fps)^p)^N $k = (if p dvd k then (N choose (k div p)) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "let ?fx = \"(fps_X :: int fps)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "have \"(1 + ?fx^p)^N $ k  = (((1 + ?fx)^N) oo (?fx^p)) $k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = ((1 + fps_X) ^ N oo fps_X ^ p) $ k", "by (metis assms fps_binomial_p_compose not_prime_0)"], ["proof (state)\nthis:\n  (1 + fps_X ^ p) ^ N $ k = ((1 + fps_X) ^ N oo fps_X ^ p) $ k\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "also"], ["proof (state)\nthis:\n  (1 + fps_X ^ p) ^ N $ k = ((1 + fps_X) ^ N oo fps_X ^ p) $ k\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "have \"... = (\\<Sum>i=0..k.((1 + ?fx)^N)$i * ((?fx^p)^i$k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ N oo fps_X ^ p) $ k =\n    (\\<Sum>i = 0..k. (1 + fps_X) ^ N $ i * (fps_X ^ p) ^ i $ k)", "by (simp add: fps_compose_nth)"], ["proof (state)\nthis:\n  ((1 + fps_X) ^ N oo fps_X ^ p) $ k =\n  (\\<Sum>i = 0..k. (1 + fps_X) ^ N $ i * (fps_X ^ p) ^ i $ k)\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "finally"], ["proof (chain)\npicking this:\n  (1 + fps_X ^ p) ^ N $ k =\n  (\\<Sum>i = 0..k. (1 + fps_X) ^ N $ i * (fps_X ^ p) ^ i $ k)", "have coeffs: \"(1 + ?fx^p)^N $ k = (\\<Sum>i=0..k. (N choose i) * ((?fx^(p*i))$k))\""], ["proof (prove)\nusing this:\n  (1 + fps_X ^ p) ^ N $ k =\n  (\\<Sum>i = 0..k. (1 + fps_X) ^ N $ i * (fps_X ^ p) ^ i $ k)\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k =\n    (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k)", "using binomial_coeffs_induct sum.cong"], ["proof (prove)\nusing this:\n  (1 + fps_X ^ p) ^ N $ k =\n  (\\<Sum>i = 0..k. (1 + fps_X) ^ N $ i * (fps_X ^ p) ^ i $ k)\n  (1 + fps_X) ^ ?n $ ?k = of_nat (?n choose ?k)\n  \\<lbrakk>?A = ?B;\n   \\<And>x. x \\<in> ?B \\<Longrightarrow> ?g x = ?h x\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?A = sum ?h ?B\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k =\n    (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k)", "by (metis (no_types, lifting) power_mult)"], ["proof (state)\nthis:\n  (1 + fps_X ^ p) ^ N $ k =\n  (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k)\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (1 + fps_X ^ p) ^ N $ k =\n  (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k)\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "proof (cases \"p dvd k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)\n 2. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     \\<not> p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)", "case False \\<comment> \\<open>$p$ does not divide $k$ implies the $k$th term has a coefficient of 0\\<close>"], ["proof (state)\nthis:\n  \\<not> p dvd k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)\n 2. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     \\<not> p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)", "have \"\\<forall> i. \\<not>(p dvd k) \\<longrightarrow> (?fx^(p*i)) $ k = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. \\<not> p dvd k \\<longrightarrow> fps_X ^ (p * i) $ k = 0", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. \\<not> p dvd k \\<longrightarrow> fps_X ^ (p * i) $ k = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)\n 2. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     \\<not> p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i. \\<not> p dvd k \\<longrightarrow> fps_X ^ (p * i) $ k = 0\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "using coeffs"], ["proof (prove)\nusing this:\n  \\<forall>i. \\<not> p dvd k \\<longrightarrow> fps_X ^ (p * i) $ k = 0\n  (1 + fps_X ^ p) ^ N $ k =\n  (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k)\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "by (simp add: False)"], ["proof (state)\nthis:\n  (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)", "case True \\<comment> \\<open>$p$ divides $k$ implies the $k$th term has a non-zero coefficient\\<close>"], ["proof (state)\nthis:\n  p dvd k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)", "have contained: \"k div p \\<in> {0.. k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k div p \\<in> {0..k}", "by simp"], ["proof (state)\nthis:\n  k div p \\<in> {0..k}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)", "have \"\\<forall> i. i \\<noteq> k div p \\<longrightarrow> (?fx^(p*i)) $ k = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. i \\<noteq> k div p \\<longrightarrow> fps_X ^ (p * i) $ k = 0", "using assms"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. \\<forall>i. i \\<noteq> k div p \\<longrightarrow> fps_X ^ (p * i) $ k = 0", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. i \\<noteq> k div p \\<longrightarrow> fps_X ^ (p * i) $ k = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)", "then"], ["proof (chain)\npicking this:\n  \\<forall>i. i \\<noteq> k div p \\<longrightarrow> fps_X ^ (p * i) $ k = 0", "have notdivpis0: \"\\<forall> i \\<in> ({0 .. k} - {k div p}). (?fx^(p*i)) $ k = 0\""], ["proof (prove)\nusing this:\n  \\<forall>i. i \\<noteq> k div p \\<longrightarrow> fps_X ^ (p * i) $ k = 0\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{0..k} - {k div p}. fps_X ^ (p * i) $ k = 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{0..k} - {k div p}. fps_X ^ (p * i) $ k = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)", "have \"(1 + ?fx^p)^N $ k = (N choose (k div p)) * (?fx^(p * (k div p))) $ k + (\\<Sum>i\\<in>({0..k} -{k div p}). (N choose i) * ((?fx^(p*i))$k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k =\n    int (N choose k div p) * fps_X ^ (p * (k div p)) $ k +\n    (\\<Sum>i\\<in>{0..k} - {k div p}. int (N choose i) * fps_X ^ (p * i) $ k)", "using contained coeffs sum.remove"], ["proof (prove)\nusing this:\n  k div p \\<in> {0..k}\n  (1 + fps_X ^ p) ^ N $ k =\n  (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k)\n  \\<lbrakk>finite ?A; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?A = ?g ?x + sum ?g (?A - {?x})\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k =\n    int (N choose k div p) * fps_X ^ (p * (k div p)) $ k +\n    (\\<Sum>i\\<in>{0..k} - {k div p}. int (N choose i) * fps_X ^ (p * i) $ k)", "by (metis (no_types, lifting) finite_atLeastAtMost)"], ["proof (state)\nthis:\n  (1 + fps_X ^ p) ^ N $ k =\n  int (N choose k div p) * fps_X ^ (p * (k div p)) $ k +\n  (\\<Sum>i\\<in>{0..k} - {k div p}. int (N choose i) * fps_X ^ (p * i) $ k)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(1 + fps_X ^ p) ^ N $ k =\n             (\\<Sum>i = 0..k. int (N choose i) * fps_X ^ (p * i) $ k);\n     p dvd k\\<rbrakk>\n    \\<Longrightarrow> (1 + fps_X ^ p) ^ N $ k =\n                      int (if p dvd k then N choose k div p else 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (1 + fps_X ^ p) ^ N $ k =\n  int (N choose k div p) * fps_X ^ (p * (k div p)) $ k +\n  (\\<Sum>i\\<in>{0..k} - {k div p}. int (N choose i) * fps_X ^ (p * i) $ k)\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "using notdivpis0 True"], ["proof (prove)\nusing this:\n  (1 + fps_X ^ p) ^ N $ k =\n  int (N choose k div p) * fps_X ^ (p * (k div p)) $ k +\n  (\\<Sum>i\\<in>{0..k} - {k div p}. int (N choose i) * fps_X ^ (p * i) $ k)\n  \\<forall>i\\<in>{0..k} - {k div p}. fps_X ^ (p * i) $ k = 0\n  p dvd k\n\ngoal (1 subgoal):\n 1. (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)", "by simp"], ["proof (state)\nthis:\n  (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (1 + fps_X ^ p) ^ N $ k = int (if p dvd k then N choose k div p else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> The final helper lemma proves the $k$th coefficient is equivalent to $\\binom{?N}{?K}*\\binom{?rn}{?rk}$ as required.\\<close>"], ["", "lemma fps_div_rep_coeffs: \n  assumes \"prime p\"\n  shows \"((1 + (fps_X::int fps)^p)^(n div p) * (1 + fps_X)^(n mod p)) $ k = \n          ((n div p) choose (k div p)) * ((n mod p) choose (k mod p))\"\n    (is \"((1 + (fps_X::int fps)^p)^?N * (1 + fps_X)^?rn) $ k = (?N choose ?K) * (?rn choose ?rk)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "proof -\n  \\<comment> \\<open>Initial facts with results around representation and 0 valued terms\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "let ?fx = \"fps_X :: int fps\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "have krep: \"k - ?rk = ?K*p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k - k mod p = k div p * p", "by (simp add: minus_mod_eq_mult_div)"], ["proof (state)\nthis:\n  k - k mod p = k div p * p\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "have rk_in_range: \"?rk \\<in> {0..k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k mod p \\<in> {0..k}", "by simp"], ["proof (state)\nthis:\n  k mod p \\<in> {0..k}\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "have \"\\<forall> i \\<ge> p. (?rn choose i) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>p. n mod p choose i = 0", "using binomial_eq_0_iff"], ["proof (prove)\nusing this:\n  (?n choose ?k = 0) = (?n < ?k)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>p. n mod p choose i = 0", "by (metis assms(1) leD le_less_trans linorder_cases mod_le_divisor mod_less_divisor prime_gt_0_nat)"], ["proof (state)\nthis:\n  \\<forall>i\\<ge>p. n mod p choose i = 0\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "then"], ["proof (chain)\npicking this:\n  \\<forall>i\\<ge>p. n mod p choose i = 0", "have ptok0: \"\\<forall> i \\<in> {p..k}. ((?rn choose i) * (1 + ?fx^p)^?N $ (k - i)) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<ge>p. n mod p choose i = 0\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{p..k}.\n       int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{p..k}.\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "then"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>{p..k}.\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0", "have notrkis0: \"\\<forall>i \\<in> {0.. k}. i \\<noteq> ?rk \\<longrightarrow> (?rn choose i) * (1 + ?fx^p)^?N $ (k - i) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>{p..k}.\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{0..k}.\n       i \\<noteq> k mod p \\<longrightarrow>\n       int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0", "proof (cases \"k < p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0\n 2. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     \\<not> k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0", "case True \\<comment> \\<open>When $k < p$, it presents a side case with regards to range of reasoning\\<close>"], ["proof (state)\nthis:\n  k < p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0\n 2. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     \\<not> k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0", "then"], ["proof (chain)\npicking this:\n  k < p", "have k_value: \"k = ?rk\""], ["proof (prove)\nusing this:\n  k < p\n\ngoal (1 subgoal):\n 1. k = k mod p", "by simp"], ["proof (state)\nthis:\n  k = k mod p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0\n 2. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     \\<not> k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0", "then"], ["proof (chain)\npicking this:\n  k = k mod p", "have \"\\<forall> i < k. \\<not> (p dvd (k - i))\""], ["proof (prove)\nusing this:\n  k = k mod p\n\ngoal (1 subgoal):\n 1. \\<forall>i<k. \\<not> p dvd k - i", "using True"], ["proof (prove)\nusing this:\n  k = k mod p\n  k < p\n\ngoal (1 subgoal):\n 1. \\<forall>i<k. \\<not> p dvd k - i", "by (metis diff_diff_cancel diff_is_0_eq dvd_imp_mod_0 less_imp_diff_less less_irrefl_nat mod_less)"], ["proof (state)\nthis:\n  \\<forall>i<k. \\<not> p dvd k - i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0\n 2. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     \\<not> k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<k. \\<not> p dvd k - i", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i<k. \\<not> p dvd k - i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{0..k}.\n       i \\<noteq> k mod p \\<longrightarrow>\n       int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0", "using fps_X_pow_binomial_coeffs assms(1) k_value"], ["proof (prove)\nusing this:\n  \\<forall>i<k. \\<not> p dvd k - i\n  prime ?p \\<Longrightarrow>\n  (1 + fps_X ^ ?p) ^ ?N $ ?k =\n  int (if ?p dvd ?k then ?N choose ?k div ?p else 0)\n  prime p\n  k = k mod p\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{0..k}.\n       i \\<noteq> k mod p \\<longrightarrow>\n       int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{0..k}.\n     i \\<noteq> k mod p \\<longrightarrow>\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     \\<not> k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     \\<not> k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0", "case False"], ["proof (state)\nthis:\n  \\<not> k < p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     \\<not> k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0", "then"], ["proof (chain)\npicking this:\n  \\<not> k < p", "have \"\\<forall> i < p. i \\<noteq> ?rk \\<longrightarrow> \\<not>(p dvd (k - i))\""], ["proof (prove)\nusing this:\n  \\<not> k < p\n\ngoal (1 subgoal):\n 1. \\<forall>i<p. i \\<noteq> k mod p \\<longrightarrow> \\<not> p dvd k - i", "using mod_nat_eqI"], ["proof (prove)\nusing this:\n  \\<not> k < p\n  \\<lbrakk>?r < ?n; ?r \\<le> ?m; ?n dvd ?m - ?r\\<rbrakk>\n  \\<Longrightarrow> ?m mod ?n = ?r\n\ngoal (1 subgoal):\n 1. \\<forall>i<p. i \\<noteq> k mod p \\<longrightarrow> \\<not> p dvd k - i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<p. i \\<noteq> k mod p \\<longrightarrow> \\<not> p dvd k - i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     \\<not> k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<p. i \\<noteq> k mod p \\<longrightarrow> \\<not> p dvd k - i", "have \"\\<forall> i \\<in> {0..<p}. i \\<noteq> ?rk \\<longrightarrow> (1 + ?fx^p)^?N $ (k - i) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>i<p. i \\<noteq> k mod p \\<longrightarrow> \\<not> p dvd k - i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{0..<p}.\n       i \\<noteq> k mod p \\<longrightarrow>\n       (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0", "using assms fps_X_pow_binomial_coeffs"], ["proof (prove)\nusing this:\n  \\<forall>i<p. i \\<noteq> k mod p \\<longrightarrow> \\<not> p dvd k - i\n  prime p\n  prime ?p \\<Longrightarrow>\n  (1 + fps_X ^ ?p) ^ ?N $ ?k =\n  int (if ?p dvd ?k then ?N choose ?k div ?p else 0)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{0..<p}.\n       i \\<noteq> k mod p \\<longrightarrow>\n       (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{0..<p}.\n     i \\<noteq> k mod p \\<longrightarrow>\n     (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i\\<in>{p..k}.\n                int (n mod p choose i) *\n                (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                0;\n     \\<not> k < p\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<in>{0..k}.\n                         i \\<noteq> k mod p \\<longrightarrow>\n                         int (n mod p choose i) *\n                         (1 + fps_X ^ p) ^ (n div p) $ (k - i) =\n                         0", "then"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>{0..<p}.\n     i \\<noteq> k mod p \\<longrightarrow>\n     (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>{0..<p}.\n     i \\<noteq> k mod p \\<longrightarrow>\n     (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{0..k}.\n       i \\<noteq> k mod p \\<longrightarrow>\n       int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0", "using ptok0"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>{0..<p}.\n     i \\<noteq> k mod p \\<longrightarrow>\n     (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0\n  \\<forall>i\\<in>{p..k}.\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{0..k}.\n       i \\<noteq> k mod p \\<longrightarrow>\n       int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{0..k}.\n     i \\<noteq> k mod p \\<longrightarrow>\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0\n\ngoal:\nNo subgoals!", "qed\n  \\<comment> \\<open>Main body of the proof, using helper facts above\\<close>"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{0..k}.\n     i \\<noteq> k mod p \\<longrightarrow>\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "have \"((1 + fps_X^p)^?N * (1 + fps_X)^?rn) $ k = (((1 + fps_X)^?rn) * (1 + fps_X^p)^?N) $ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    ((1 + fps_X) ^ (n mod p) * (1 + fps_X ^ p) ^ (n div p)) $ k", "by (metis (no_types, hide_lams) distrib_left distrib_right fps_mult_fps_X_commute fps_one_mult(1) \n        fps_one_mult(2) power_commuting_commutes)"], ["proof (state)\nthis:\n  ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n  ((1 + fps_X) ^ (n mod p) * (1 + fps_X ^ p) ^ (n div p)) $ k\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "also"], ["proof (state)\nthis:\n  ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n  ((1 + fps_X) ^ (n mod p) * (1 + fps_X ^ p) ^ (n div p)) $ k\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "have \"... = (\\<Sum>i=0..k.(of_nat(?rn choose i)) * ((1 + (fps_X)^p)^?N $ (k - i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ (n mod p) * (1 + fps_X ^ p) ^ (n div p)) $ k =\n    (\\<Sum>i = 0..k.\n        of_nat (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i))", "by (simp add: fps_mult_nth binomial_coeffs_induct)"], ["proof (state)\nthis:\n  ((1 + fps_X) ^ (n mod p) * (1 + fps_X ^ p) ^ (n div p)) $ k =\n  (\\<Sum>i = 0..k.\n      of_nat (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i))\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "also"], ["proof (state)\nthis:\n  ((1 + fps_X) ^ (n mod p) * (1 + fps_X ^ p) ^ (n div p)) $ k =\n  (\\<Sum>i = 0..k.\n      of_nat (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i))\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "have \"... =  ((?rn choose ?rk) * (1 + ?fx^p)^?N $ (k - ?rk)) + (\\<Sum>i\\<in>({0..k} - {?rk}). (?rn choose i) * (1 + ?fx^p)^?N $ (k - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..k.\n        int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i)) =\n    int (n mod p choose k mod p) *\n    (1 + fps_X ^ p) ^ (n div p) $ (k - k mod p) +\n    (\\<Sum>i\\<in>{0..k} - {k mod p}.\n       int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i))", "using rk_in_range sum.remove"], ["proof (prove)\nusing this:\n  k mod p \\<in> {0..k}\n  \\<lbrakk>finite ?A; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> sum ?g ?A = ?g ?x + sum ?g (?A - {?x})\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..k.\n        int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i)) =\n    int (n mod p choose k mod p) *\n    (1 + fps_X ^ p) ^ (n div p) $ (k - k mod p) +\n    (\\<Sum>i\\<in>{0..k} - {k mod p}.\n       int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i))", "by (metis (no_types, lifting) finite_atLeastAtMost)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..k.\n      int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i)) =\n  int (n mod p choose k mod p) *\n  (1 + fps_X ^ p) ^ (n div p) $ (k - k mod p) +\n  (\\<Sum>i\\<in>{0..k} - {k mod p}.\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i))\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "finally"], ["proof (chain)\npicking this:\n  ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n  int (n mod p choose k mod p) *\n  (1 + fps_X ^ p) ^ (n div p) $ (k - k mod p) +\n  (\\<Sum>i\\<in>{0..k} - {k mod p}.\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i))", "have \"((1 + ?fx^p)^?N * (1 + ?fx)^?rn) $ k = ((?rn choose ?rk) * (1 + ?fx^p)^?N $ (k - ?rk))\""], ["proof (prove)\nusing this:\n  ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n  int (n mod p choose k mod p) *\n  (1 + fps_X ^ p) ^ (n div p) $ (k - k mod p) +\n  (\\<Sum>i\\<in>{0..k} - {k mod p}.\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i))\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int (n mod p choose k mod p) *\n    (1 + fps_X ^ p) ^ (n div p) $ (k - k mod p)", "using notrkis0"], ["proof (prove)\nusing this:\n  ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n  int (n mod p choose k mod p) *\n  (1 + fps_X ^ p) ^ (n div p) $ (k - k mod p) +\n  (\\<Sum>i\\<in>{0..k} - {k mod p}.\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i))\n  \\<forall>i\\<in>{0..k}.\n     i \\<noteq> k mod p \\<longrightarrow>\n     int (n mod p choose i) * (1 + fps_X ^ p) ^ (n div p) $ (k - i) = 0\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int (n mod p choose k mod p) *\n    (1 + fps_X ^ p) ^ (n div p) $ (k - k mod p)", "by simp"], ["proof (state)\nthis:\n  ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n  int (n mod p choose k mod p) * (1 + fps_X ^ p) ^ (n div p) $ (k - k mod p)\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n  int (n mod p choose k mod p) * (1 + fps_X ^ p) ^ (n div p) $ (k - k mod p)\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "using fps_X_pow_binomial_coeffs assms krep"], ["proof (prove)\nusing this:\n  ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n  int (n mod p choose k mod p) * (1 + fps_X ^ p) ^ (n div p) $ (k - k mod p)\n  prime ?p \\<Longrightarrow>\n  (1 + fps_X ^ ?p) ^ ?N $ ?k =\n  int (if ?p dvd ?k then ?N choose ?k div ?p else 0)\n  prime p\n  k - k mod p = k div p * p\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "by auto"], ["proof (state)\nthis:\n  ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n  int ((n div p choose k div p) * (n mod p choose k mod p))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lucas theorem proof *)"], ["", "subsection \\<open>Lucas Theorem Proof\\<close>"], ["", "text \\<open> The proof of Lucas's theorem combines a generating function approach, based off \\cite{Fine} with induction.\nFor formalisation purposes, it was easier to first prove a well known corollary of the main theorem (also \noften presented as an alternative statement for Lucas's theorem), which can itself be used to backwards \nprove the the original statement by induction.\nThis approach was adapted from P. Cameron's lecture notes on combinatorics \\cite{petercameronNotesCombinatorics2007} \\<close>"], ["", "subsubsection \\<open> Proof of the Corollary \\<close>"], ["", "text \\<open> This step makes use of the coefficient equivalence arguments proved in the previous sections \\<close>"], ["", "corollary lucas_corollary: \n  fixes n k :: nat\n  assumes \"prime p\" \n  shows \"(n choose k) mod p = (((n div p) choose (k div p)) * ((n mod p) choose (k mod p))) mod p\" \n    (is \"(n choose k) mod p = ((?N choose ?K) * (?rn choose ?rk)) mod p\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "let ?fx = \"fps_X :: int fps\""], ["proof (state)\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "have n_rep: \"n = ?N * p  + ?rn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = n div p * p + n mod p", "by simp"], ["proof (state)\nthis:\n  n = n div p * p + n mod p\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "have k_rep: \"k =?K * p + ?rk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = k div p * p + k mod p", "by simp"], ["proof (state)\nthis:\n  k = k div p * p + k mod p\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "have rhs_coeffs: \"((1 + ?fx^p)^(?N) * (1 + ?fx)^(?rn)) $ k = (?N choose ?K) * (?rn choose ?rk)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "using assms fps_div_rep_coeffs k_rep n_rep"], ["proof (prove)\nusing this:\n  prime p\n  prime ?p \\<Longrightarrow>\n  ((1 + fps_X ^ ?p) ^ (?n div ?p) * (1 + fps_X) ^ (?n mod ?p)) $ ?k =\n  int ((?n div ?p choose ?k div ?p) * (?n mod ?p choose ?k mod ?p))\n  k = k div p * p + k mod p\n  n = n div p * p + n mod p\n\ngoal (1 subgoal):\n 1. ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n    int ((n div p choose k div p) * (n mod p choose k mod p))", "by blast \\<comment> \\<open>Application of coefficient reasoning\\<close>"], ["proof (state)\nthis:\n  ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n  int ((n div p choose k div p) * (n mod p choose k mod p))\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "have \"((((1 + ?fx)^p)^(?N) * (1 + ?fx)^(?rn)), \n          ((1 + ?fx^p)^(?N) * (1 + ?fx)^(?rn))) \\<in> fpsmodrel p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((1 + fps_X) ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p),\n     (1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p))\n    \\<in> fpsmodrel (int p)", "using fps_freshmans_dream assms fps_mult_equiv fps_power_equiv"], ["proof (prove)\nusing this:\n  prime ?p \\<Longrightarrow>\n  ((1 + fps_X) ^ ?p, 1 + fps_X ^ ?p) \\<in> fpsmodrel (int ?p)\n  prime p\n  (?f, ?g) \\<in> fpsmodrel ?p \\<Longrightarrow>\n  (?f * ?h, ?g * ?h) \\<in> fpsmodrel ?p\n  (?f, ?g) \\<in> fpsmodrel ?p \\<Longrightarrow>\n  (?f ^ ?x, ?g ^ ?x) \\<in> fpsmodrel ?p\n\ngoal (1 subgoal):\n 1. (((1 + fps_X) ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p),\n     (1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p))\n    \\<in> fpsmodrel (int p)", "by blast \\<comment> \\<open>Application of equivalence facts and freshmans dream lemma\\<close>"], ["proof (state)\nthis:\n  (((1 + fps_X) ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p),\n   (1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p))\n  \\<in> fpsmodrel (int p)\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "then"], ["proof (chain)\npicking this:\n  (((1 + fps_X) ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p),\n   (1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p))\n  \\<in> fpsmodrel (int p)", "have modrel2: \"((1 + ?fx)^n, ((1 + ?fx^p)^(?N) * (1 + ?fx)^(?rn))) \n                          \\<in> fpsmodrel p\""], ["proof (prove)\nusing this:\n  (((1 + fps_X) ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p),\n   (1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p))\n  \\<in> fpsmodrel (int p)\n\ngoal (1 subgoal):\n 1. ((1 + fps_X) ^ n, (1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p))\n    \\<in> fpsmodrel (int p)", "by (metis (mono_tags, hide_lams) mult_div_mod_eq power_add power_mult)"], ["proof (state)\nthis:\n  ((1 + fps_X) ^ n, (1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p))\n  \\<in> fpsmodrel (int p)\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((1 + fps_X) ^ n, (1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p))\n  \\<in> fpsmodrel (int p)\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "using fpsrel_iff binomial_coeffs_induct rhs_coeffs"], ["proof (prove)\nusing this:\n  ((1 + fps_X) ^ n, (1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p))\n  \\<in> fpsmodrel (int p)\n  ((?f, ?g) \\<in> fpsmodrel ?p) =\n  (\\<forall>n. ?f $ n mod ?p = ?g $ n mod ?p)\n  (1 + fps_X) ^ ?n $ ?k = of_nat (?n choose ?k)\n  ((1 + fps_X ^ p) ^ (n div p) * (1 + fps_X) ^ (n mod p)) $ k =\n  int ((n div p choose k div p) * (n mod p choose k mod p))\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "by (metis of_nat_eq_iff zmod_int)"], ["proof (state)\nthis:\n  (n choose k) mod p =\n  (n div p choose k div p) * (n mod p choose k mod p) mod p\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open> Proof of the Theorem \\<close>"], ["", "text \\<open>The theorem statement requires a formalised way of referring to the base $p$ representation of a number. \nWe use a definition that specifies the $i$th digit of the base $p$ representation. This definition is originally \nfrom the Hilbert's 10th Problem Formalisation project \\cite{bayerDPRMTheoremIsabelle2019} which this work contributes to.\\<close>"], ["", "definition nth_digit_general :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n  \"nth_digit_general num i base = (num div (base ^ i)) mod base\""], ["", "text \\<open>Applying induction on $d$, where $d$ is the highest power required in either $n$ or $k$'s base $p$\nrepresentation, @{thm lucas_corollary} can be used to prove the original theorem.\\<close>"], ["", "theorem lucas_theorem:\n  fixes n k d::nat\nassumes \"n < p ^ (Suc d)\"\nassumes \"k < p ^ (Suc d)\"\nassumes \"prime p\"\nshows \"(n choose k) mod p = (\\<Prod>i\\<le>d. ((nth_digit_general n i p) choose (nth_digit_general k i p))) mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (\\<Prod>i\\<le>d.\n        nth_digit_general n i p choose nth_digit_general k i p) mod\n    p", "using assms"], ["proof (prove)\nusing this:\n  n < p ^ Suc d\n  k < p ^ Suc d\n  prime p\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (\\<Prod>i\\<le>d.\n        nth_digit_general n i p choose nth_digit_general k i p) mod\n    p", "proof (induct d arbitrary: n k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n k.\n       \\<lbrakk>n < p ^ Suc 0; k < p ^ Suc 0; prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>0.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p\n 2. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "case 0"], ["proof (state)\nthis:\n  n < p ^ Suc 0\n  k < p ^ Suc 0\n  prime p\n\ngoal (2 subgoals):\n 1. \\<And>n k.\n       \\<lbrakk>n < p ^ Suc 0; k < p ^ Suc 0; prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>0.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p\n 2. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "thus ?case"], ["proof (prove)\nusing this:\n  n < p ^ Suc 0\n  k < p ^ Suc 0\n  prime p\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (\\<Prod>i\\<le>0.\n        nth_digit_general n i p choose nth_digit_general k i p) mod\n    p", "using nth_digit_general_def assms"], ["proof (prove)\nusing this:\n  n < p ^ Suc 0\n  k < p ^ Suc 0\n  prime p\n  nth_digit_general ?num ?i ?base = ?num div ?base ^ ?i mod ?base\n  n < p ^ Suc d\n  k < p ^ Suc d\n  prime p\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (\\<Prod>i\\<le>0.\n        nth_digit_general n i p choose nth_digit_general k i p) mod\n    p", "by simp"], ["proof (state)\nthis:\n  (n choose k) mod p =\n  (\\<Prod>i\\<le>0.\n      nth_digit_general n i p choose nth_digit_general k i p) mod\n  p\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "case (Suc d)\n  \\<comment> \\<open>Representation Variables\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>?n < p ^ Suc d; ?k < p ^ Suc d; prime p\\<rbrakk>\n  \\<Longrightarrow> (?n choose ?k) mod p =\n                    (\\<Prod>i\\<le>d.\n                        nth_digit_general ?n i p choose\n                        nth_digit_general ?k i p) mod\n                    p\n  n < p ^ Suc (Suc d)\n  k < p ^ Suc (Suc d)\n  prime p\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "let ?N = \"n div p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "let ?K = \"k div p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "let ?nr = \"n mod p\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "let ?kr = \"k mod p\"\n  \\<comment> \\<open>Required assumption facts\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "have Mlessthan: \"?N < p ^ (Suc d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n div p < p ^ Suc d", "using less_mult_imp_div_less power_Suc2 assms(3) prime_ge_2_nat Suc.prems(1)"], ["proof (prove)\nusing this:\n  ?m < ?i * ?n \\<Longrightarrow> ?m div ?n < ?i\n  ?a ^ Suc ?n = ?a ^ ?n * ?a\n  prime p\n  prime ?p \\<Longrightarrow> 2 \\<le> ?p\n  n < p ^ Suc (Suc d)\n\ngoal (1 subgoal):\n 1. n div p < p ^ Suc d", "by metis"], ["proof (state)\nthis:\n  n div p < p ^ Suc d\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "have Nlessthan: \"?K < p ^ (Suc d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k div p < p ^ Suc d", "using less_mult_imp_div_less power_Suc2 prime_ge_2_nat Suc.prems(2) assms(3)"], ["proof (prove)\nusing this:\n  ?m < ?i * ?n \\<Longrightarrow> ?m div ?n < ?i\n  ?a ^ Suc ?n = ?a ^ ?n * ?a\n  prime ?p \\<Longrightarrow> 2 \\<le> ?p\n  k < p ^ Suc (Suc d)\n  prime p\n\ngoal (1 subgoal):\n 1. k div p < p ^ Suc d", "by metis"], ["proof (state)\nthis:\n  k div p < p ^ Suc d\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "have shift_bounds_fact: \"(\\<Prod>i=(Suc 0)..(Suc (d )). ((nth_digit_general n i p) choose (nth_digit_general k i p))) = \n                            (\\<Prod>i=0..(d).  (nth_digit_general n (Suc i) p) choose (nth_digit_general k (Suc i) p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i = Suc 0..Suc d.\n        nth_digit_general n i p choose nth_digit_general k i p) =\n    (\\<Prod>i = 0..d.\n        nth_digit_general n (Suc i) p choose nth_digit_general k (Suc i) p)", "using prod.shift_bounds_cl_Suc_ivl"], ["proof (prove)\nusing this:\n  prod ?g {Suc ?m..Suc ?n} = (\\<Prod>i = ?m..?n. ?g (Suc i))\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = Suc 0..Suc d.\n        nth_digit_general n i p choose nth_digit_general k i p) =\n    (\\<Prod>i = 0..d.\n        nth_digit_general n (Suc i) p choose nth_digit_general k (Suc i) p)", "by blast \\<comment> \\<open>Product manipulation helper fact\\<close>"], ["proof (state)\nthis:\n  (\\<Prod>i = Suc 0..Suc d.\n      nth_digit_general n i p choose nth_digit_general k i p) =\n  (\\<Prod>i = 0..d.\n      nth_digit_general n (Suc i) p choose nth_digit_general k (Suc i) p)\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "have \"(n choose k ) mod p = ((?N choose ?K) * (?nr choose ?kr)) mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "using lucas_corollary assms(3)"], ["proof (prove)\nusing this:\n  prime ?p \\<Longrightarrow>\n  (?n choose ?k) mod ?p =\n  (?n div ?p choose ?k div ?p) * (?n mod ?p choose ?k mod ?p) mod ?p\n  prime p\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (n div p choose k div p) * (n mod p choose k mod p) mod p", "by blast \\<comment> \\<open>Application of corollary\\<close>"], ["proof (state)\nthis:\n  (n choose k) mod p =\n  (n div p choose k div p) * (n mod p choose k mod p) mod p\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "also"], ["proof (state)\nthis:\n  (n choose k) mod p =\n  (n div p choose k div p) * (n mod p choose k mod p) mod p\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "have \"...= ((\\<Prod>i\\<le>d. ((nth_digit_general ?N i p) choose (nth_digit_general ?K i p))) * (?nr choose ?kr)) mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n div p choose k div p) * (n mod p choose k mod p) mod p =\n    (\\<Prod>i\\<le>d.\n        nth_digit_general (n div p) i p choose\n        nth_digit_general (k div p) i p) *\n    (n mod p choose k mod p) mod\n    p", "using Mlessthan Nlessthan Suc.hyps mod_mult_cong assms(3)"], ["proof (prove)\nusing this:\n  n div p < p ^ Suc d\n  k div p < p ^ Suc d\n  \\<lbrakk>?n < p ^ Suc d; ?k < p ^ Suc d; prime p\\<rbrakk>\n  \\<Longrightarrow> (?n choose ?k) mod p =\n                    (\\<Prod>i\\<le>d.\n                        nth_digit_general ?n i p choose\n                        nth_digit_general ?k i p) mod\n                    p\n  \\<lbrakk>?a mod ?c = ?a' mod ?c; ?b mod ?c = ?b' mod ?c\\<rbrakk>\n  \\<Longrightarrow> ?a * ?b mod ?c = ?a' * ?b' mod ?c\n  prime p\n\ngoal (1 subgoal):\n 1. (n div p choose k div p) * (n mod p choose k mod p) mod p =\n    (\\<Prod>i\\<le>d.\n        nth_digit_general (n div p) i p choose\n        nth_digit_general (k div p) i p) *\n    (n mod p choose k mod p) mod\n    p", "by blast \\<comment> \\<open>Using Inductive Hypothesis\\<close>\n  \\<comment> \\<open>Product manipulation steps\\<close>"], ["proof (state)\nthis:\n  (n div p choose k div p) * (n mod p choose k mod p) mod p =\n  (\\<Prod>i\\<le>d.\n      nth_digit_general (n div p) i p choose\n      nth_digit_general (k div p) i p) *\n  (n mod p choose k mod p) mod\n  p\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "also"], ["proof (state)\nthis:\n  (n div p choose k div p) * (n mod p choose k mod p) mod p =\n  (\\<Prod>i\\<le>d.\n      nth_digit_general (n div p) i p choose\n      nth_digit_general (k div p) i p) *\n  (n mod p choose k mod p) mod\n  p\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "have \"... = ((\\<Prod>i=0..(d). (nth_digit_general n (Suc i) p) choose (nth_digit_general k (Suc i) p)) * (?nr choose ?kr)) mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<le>d.\n        nth_digit_general (n div p) i p choose\n        nth_digit_general (k div p) i p) *\n    (n mod p choose k mod p) mod\n    p =\n    (\\<Prod>i = 0..d.\n        nth_digit_general n (Suc i) p choose\n        nth_digit_general k (Suc i) p) *\n    (n mod p choose k mod p) mod\n    p", "using  atMost_atLeast0 nth_digit_general_def div_mult2_eq"], ["proof (prove)\nusing this:\n  {..?n} = {0..?n}\n  nth_digit_general ?num ?i ?base = ?num div ?base ^ ?i mod ?base\n  ?m div (?n * ?q) = ?m div ?n div ?q\n\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<le>d.\n        nth_digit_general (n div p) i p choose\n        nth_digit_general (k div p) i p) *\n    (n mod p choose k mod p) mod\n    p =\n    (\\<Prod>i = 0..d.\n        nth_digit_general n (Suc i) p choose\n        nth_digit_general k (Suc i) p) *\n    (n mod p choose k mod p) mod\n    p", "by auto"], ["proof (state)\nthis:\n  (\\<Prod>i\\<le>d.\n      nth_digit_general (n div p) i p choose\n      nth_digit_general (k div p) i p) *\n  (n mod p choose k mod p) mod\n  p =\n  (\\<Prod>i = 0..d.\n      nth_digit_general n (Suc i) p choose nth_digit_general k (Suc i) p) *\n  (n mod p choose k mod p) mod\n  p\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "also"], ["proof (state)\nthis:\n  (\\<Prod>i\\<le>d.\n      nth_digit_general (n div p) i p choose\n      nth_digit_general (k div p) i p) *\n  (n mod p choose k mod p) mod\n  p =\n  (\\<Prod>i = 0..d.\n      nth_digit_general n (Suc i) p choose nth_digit_general k (Suc i) p) *\n  (n mod p choose k mod p) mod\n  p\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "have \"... = ((\\<Prod>i=1..(d+1). (nth_digit_general n i p) choose (nth_digit_general k i p)) * \n                            ((nth_digit_general n 0 p) choose (nth_digit_general k 0 p))) mod p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..d.\n        nth_digit_general n (Suc i) p choose\n        nth_digit_general k (Suc i) p) *\n    (n mod p choose k mod p) mod\n    p =\n    (\\<Prod>i = 1..d + 1.\n        nth_digit_general n i p choose nth_digit_general k i p) *\n    (nth_digit_general n 0 p choose nth_digit_general k 0 p) mod\n    p", "using nth_digit_general_def shift_bounds_fact"], ["proof (prove)\nusing this:\n  nth_digit_general ?num ?i ?base = ?num div ?base ^ ?i mod ?base\n  (\\<Prod>i = Suc 0..Suc d.\n      nth_digit_general n i p choose nth_digit_general k i p) =\n  (\\<Prod>i = 0..d.\n      nth_digit_general n (Suc i) p choose nth_digit_general k (Suc i) p)\n\ngoal (1 subgoal):\n 1. (\\<Prod>i = 0..d.\n        nth_digit_general n (Suc i) p choose\n        nth_digit_general k (Suc i) p) *\n    (n mod p choose k mod p) mod\n    p =\n    (\\<Prod>i = 1..d + 1.\n        nth_digit_general n i p choose nth_digit_general k i p) *\n    (nth_digit_general n 0 p choose nth_digit_general k 0 p) mod\n    p", "by simp"], ["proof (state)\nthis:\n  (\\<Prod>i = 0..d.\n      nth_digit_general n (Suc i) p choose nth_digit_general k (Suc i) p) *\n  (n mod p choose k mod p) mod\n  p =\n  (\\<Prod>i = 1..d + 1.\n      nth_digit_general n i p choose nth_digit_general k i p) *\n  (nth_digit_general n 0 p choose nth_digit_general k 0 p) mod\n  p\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "finally"], ["proof (chain)\npicking this:\n  (n choose k) mod p =\n  (\\<Prod>i = 1..d + 1.\n      nth_digit_general n i p choose nth_digit_general k i p) *\n  (nth_digit_general n 0 p choose nth_digit_general k 0 p) mod\n  p", "have \"(n choose k ) mod p = ((\\<Prod>i=0..(d+1). (nth_digit_general n i p) choose (nth_digit_general k i p))) mod p\""], ["proof (prove)\nusing this:\n  (n choose k) mod p =\n  (\\<Prod>i = 1..d + 1.\n      nth_digit_general n i p choose nth_digit_general k i p) *\n  (nth_digit_general n 0 p choose nth_digit_general k 0 p) mod\n  p\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (\\<Prod>i = 0..d + 1.\n        nth_digit_general n i p choose nth_digit_general k i p) mod\n    p", "using One_nat_def atMost_atLeast0 mult.commute prod.atLeast1_atMost_eq prod.atMost_shift"], ["proof (prove)\nusing this:\n  (n choose k) mod p =\n  (\\<Prod>i = 1..d + 1.\n      nth_digit_general n i p choose nth_digit_general k i p) *\n  (nth_digit_general n 0 p choose nth_digit_general k 0 p) mod\n  p\n  1 = Suc 0\n  {..?n} = {0..?n}\n  ?a * ?b = ?b * ?a\n  prod ?g {Suc 0..?n} = (\\<Prod>k<?n. ?g (Suc k))\n  prod ?g {..?n} = ?g 0 * (\\<Prod>i<?n. ?g (Suc i))\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (\\<Prod>i = 0..d + 1.\n        nth_digit_general n i p choose nth_digit_general k i p) mod\n    p", "by (smt Suc_eq_plus1 shift_bounds_fact)"], ["proof (state)\nthis:\n  (n choose k) mod p =\n  (\\<Prod>i = 0..d + 1.\n      nth_digit_general n i p choose nth_digit_general k i p) mod\n  p\n\ngoal (1 subgoal):\n 1. \\<And>d n k.\n       \\<lbrakk>\\<And>n k.\n                   \\<lbrakk>n < p ^ Suc d; k < p ^ Suc d; prime p\\<rbrakk>\n                   \\<Longrightarrow> (n choose k) mod p =\n                                     (\\<Prod>i\\<le>d.\n   nth_digit_general n i p choose nth_digit_general k i p) mod\n                                     p;\n        n < p ^ Suc (Suc d); k < p ^ Suc (Suc d); prime p\\<rbrakk>\n       \\<Longrightarrow> (n choose k) mod p =\n                         (\\<Prod>i\\<le>Suc d.\n                             nth_digit_general n i p choose\n                             nth_digit_general k i p) mod\n                         p", "thus ?case"], ["proof (prove)\nusing this:\n  (n choose k) mod p =\n  (\\<Prod>i = 0..d + 1.\n      nth_digit_general n i p choose nth_digit_general k i p) mod\n  p\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (\\<Prod>i\\<le>Suc d.\n        nth_digit_general n i p choose nth_digit_general k i p) mod\n    p", "using Suc_eq_plus1 atMost_atLeast0"], ["proof (prove)\nusing this:\n  (n choose k) mod p =\n  (\\<Prod>i = 0..d + 1.\n      nth_digit_general n i p choose nth_digit_general k i p) mod\n  p\n  Suc ?n = ?n + 1\n  {..?n} = {0..?n}\n\ngoal (1 subgoal):\n 1. (n choose k) mod p =\n    (\\<Prod>i\\<le>Suc d.\n        nth_digit_general n i p choose nth_digit_general k i p) mod\n    p", "by presburger"], ["proof (state)\nthis:\n  (n choose k) mod p =\n  (\\<Prod>i\\<le>Suc d.\n      nth_digit_general n i p choose nth_digit_general k i p) mod\n  p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}