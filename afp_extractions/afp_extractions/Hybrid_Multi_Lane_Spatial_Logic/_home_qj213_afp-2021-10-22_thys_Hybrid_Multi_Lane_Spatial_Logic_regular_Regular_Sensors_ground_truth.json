{"file_name": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic/regular/Regular_Sensors.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic", "problem_names": ["lemma create_reservation_length_stable:\n  \"(ts\\<^bold>\\<midarrow>r(d)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\"", "lemma create_claim_length_stable:\n  \"(ts\\<^bold>\\<midarrow>c(d,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\"", "lemma withdraw_reservation_length_stable:\n  \"(ts\\<^bold>\\<midarrow>wdr(d,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\"", "lemma withdraw_claim_length_stable:\n  \"(ts\\<^bold>\\<midarrow>wdc(d)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\"", "lemma sensors_le:\"e \\<noteq> c \\<longrightarrow> regular e ts c < regular c ts c\"", "lemma sensors_leq:\" regular e ts c \\<le> regular c ts c\"", "lemma space_eq: \"own v = own v' \\<longrightarrow> space ts v c = space ts v' c\"", "lemma switch_space_le:\"(own v) \\<noteq> c \\<and> (v=c>v') \\<longrightarrow> space ts v c < space ts v' c\"", "lemma switch_space_leq:\"(v=c>v') \\<longrightarrow> space ts v c \\<le> space ts v' c\""], "translations": [["", "lemma create_reservation_length_stable:\n  \"(ts\\<^bold>\\<midarrow>r(d)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    len v ts c = len v ts' c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume assm:\"(ts\\<^bold>\\<midarrow>r(d)\\<^bold>\\<rightarrow>ts')\""], ["proof (state)\nthis:\n  ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence eq:\"space ts v c = space ts' v c\""], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "using traffic.create_reservation_def sensors.space_def regular_def"], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts'\n  ?ts \\<^bold>\\<midarrow>r( ?c ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = (res ?ts)(?c := res ?ts ?c \\<squnion> clm ?ts ?c) \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  clm ?ts' = (clm ?ts)(?c := bot) \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  regular ?e ?ts ?c \\<equiv>\n  if ?e = ?c then physical_size ?ts ?c + braking_distance ?ts ?c\n  else physical_size ?ts ?c\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "by (simp add: regular_sensors.sensors_axioms)"], ["proof (state)\nthis:\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \"left ((space ts v) c) > right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_right:\"left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_right':\"left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  right (ext v) < left (space ts' v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_right and outside_right'"], ["proof (chain)\npicking this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_right:\"\\<not> left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_right':\"\\<not> left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \" left (ext v) > right ((space ts v) c) \")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_left:\" left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_left':\" left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  right (space ts' v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_left and outside_left'"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_left:\"\\<not> left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_left':\"\\<not> left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from inside_left inside_right inside_left' inside_right' eq"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma create_claim_length_stable:\n  \"(ts\\<^bold>\\<midarrow>c(d,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    len v ts c = len v ts' c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume assm:\"(ts\\<^bold>\\<midarrow>c(d,n)\\<^bold>\\<rightarrow>ts')\""], ["proof (state)\nthis:\n  ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence eq:\"space ts v c = space ts' v c\""], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "using traffic.create_claim_def sensors.space_def regular_def"], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts'\n  ?ts \\<^bold>\\<midarrow>c( ?c, ?n ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = res ?ts \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts \\<and>\n  |clm ?ts ?c| = 0 \\<and>\n  |res ?ts ?c| = 1 \\<and>\n  (?n + 1 \\<^bold>\\<in> res ?ts ?c \\<or>\n   ?n - 1 \\<^bold>\\<in> res ?ts ?c) \\<and>\n  clm ?ts' = (clm ?ts)(?c := Abs_nat_int {?n})\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  regular ?e ?ts ?c \\<equiv>\n  if ?e = ?c then physical_size ?ts ?c + braking_distance ?ts ?c\n  else physical_size ?ts ?c\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "by (simp add: regular_sensors.sensors_axioms)"], ["proof (state)\nthis:\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \"left ((space ts v) c) > right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_right:\"left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_right':\"left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  right (ext v) < left (space ts' v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_right and outside_right'"], ["proof (chain)\npicking this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_right:\"\\<not> left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_right':\"\\<not> left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \" left (ext v) > right ((space ts v) c) \")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_left:\" left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_left':\" left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  right (space ts' v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_left and outside_left'"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_left:\"\\<not> left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_left':\"\\<not> left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from inside_left inside_right inside_left' inside_right' eq"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma withdraw_reservation_length_stable:\n  \"(ts\\<^bold>\\<midarrow>wdr(d,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    len v ts c = len v ts' c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume assm:\"(ts\\<^bold>\\<midarrow>wdr(d,n)\\<^bold>\\<rightarrow>ts')\""], ["proof (state)\nthis:\n  ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence eq:\"space ts v c = space ts' v c\""], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "using traffic.withdraw_reservation_def sensors.space_def regular_def"], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts'\n  ?ts \\<^bold>\\<midarrow>wdr( ?c, ?n ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = (res ?ts)(?c := Abs_nat_int {?n}) \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  clm ?ts' = clm ?ts \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts \\<and>\n  ?n \\<^bold>\\<in> res ?ts ?c \\<and> |res ?ts ?c| = 2\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  regular ?e ?ts ?c \\<equiv>\n  if ?e = ?c then physical_size ?ts ?c + braking_distance ?ts ?c\n  else physical_size ?ts ?c\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "by (simp add: regular_sensors.sensors_axioms)"], ["proof (state)\nthis:\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \"left ((space ts v) c) > right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_right:\"left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_right':\"left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  right (ext v) < left (space ts' v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_right and outside_right'"], ["proof (chain)\npicking this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_right:\"\\<not> left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_right':\"\\<not> left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \" left (ext v) > right ((space ts v) c) \")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_left:\" left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_left':\" left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  right (space ts' v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_left and outside_left'"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_left:\"\\<not> left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_left':\"\\<not> left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from inside_left inside_right inside_left' inside_right' eq"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma withdraw_claim_length_stable:\n  \"(ts\\<^bold>\\<midarrow>wdc(d)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    len v ts c = len v ts' c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume assm:\"(ts\\<^bold>\\<midarrow>wdc(d)\\<^bold>\\<rightarrow>ts')\""], ["proof (state)\nthis:\n  ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence eq:\"space ts v c = space ts' v c\""], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "using traffic.withdraw_claim_def sensors.space_def regular_def"], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts'\n  ?ts \\<^bold>\\<midarrow>wdc( ?c ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = res ?ts \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts \\<and>\n  clm ?ts' = (clm ?ts)(?c := bot)\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  regular ?e ?ts ?c \\<equiv>\n  if ?e = ?c then physical_size ?ts ?c + braking_distance ?ts ?c\n  else physical_size ?ts ?c\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "by (simp add: regular_sensors.sensors_axioms)"], ["proof (state)\nthis:\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \"left ((space ts v) c) > right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_right:\"left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_right':\"left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  right (ext v) < left (space ts' v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_right and outside_right'"], ["proof (chain)\npicking this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_right:\"\\<not> left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_right':\"\\<not> left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \" left (ext v) > right ((space ts v) c) \")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_left:\" left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_left':\" left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  right (space ts' v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_left and outside_left'"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_left:\"\\<not> left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_left':\"\\<not> left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from inside_left inside_right inside_left' inside_right' eq"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: regular_sensors.len_def)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\nSince the perceived length of cars depends on the owner of the view,\nwe can now prove how this perception changes if we change the\nperspective of a view.\n\\<close>"], ["", "lemma sensors_le:\"e \\<noteq> c \\<longrightarrow> regular e ts c < regular c ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<noteq> c \\<longrightarrow> regular e ts c < regular c ts c", "using  traffic.sdGeZero"], ["proof (prove)\nusing this:\n  \\<forall>c. 0 < braking_distance ?ts c\n\ngoal (1 subgoal):\n 1. e \\<noteq> c \\<longrightarrow> regular e ts c < regular c ts c", "by (simp add: regular_def)"], ["", "lemma sensors_leq:\" regular e ts c \\<le> regular c ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular e ts c \\<le> regular c ts c", "by (metis less_eq_real_def regular_sensors.sensors_le)"], ["", "lemma space_eq: \"own v = own v' \\<longrightarrow> space ts v c = space ts v' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. own v = own v' \\<longrightarrow> space ts v c = space ts v' c", "using regular_sensors.space_def sensors_def"], ["proof (prove)\nusing this:\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + regular (own ?v) ?ts ?c)\n  sensors ?sensors \\<equiv> \\<forall>e ts c. 0 < ?sensors e ts c\n\ngoal (1 subgoal):\n 1. own v = own v' \\<longrightarrow> space ts v c = space ts v' c", "by auto"], ["", "lemma switch_space_le:\"(own v) \\<noteq> c \\<and> (v=c>v') \\<longrightarrow> space ts v c < space ts v' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. own v \\<noteq> c \\<and> v = c > v' \\<longrightarrow>\n    space ts v c < space ts v' c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. own v \\<noteq> c \\<and> v = c > v' \\<Longrightarrow>\n    space ts v c < space ts v' c", "assume assm:\"(own v) \\<noteq> c \\<and> (v=c>v')\""], ["proof (state)\nthis:\n  own v \\<noteq> c \\<and> v = c > v'\n\ngoal (1 subgoal):\n 1. own v \\<noteq> c \\<and> v = c > v' \\<Longrightarrow>\n    space ts v c < space ts v' c", "hence sens:\"regular (own v) ts c < regular (own v') ts c\""], ["proof (prove)\nusing this:\n  own v \\<noteq> c \\<and> v = c > v'\n\ngoal (1 subgoal):\n 1. regular (own v) ts c < regular (own v') ts c", "using sensors_le view.switch_def"], ["proof (prove)\nusing this:\n  own v \\<noteq> c \\<and> v = c > v'\n  ?e \\<noteq> ?c \\<longrightarrow> regular ?e ?ts ?c < regular ?c ?ts ?c\n  ?v = ?c > ?w \\<equiv>\n  ext ?v = ext ?w \\<and>\n  lan ?v = lan ?w \\<and> own ?w = ?c \\<and> more ?v = more ?w\n\ngoal (1 subgoal):\n 1. regular (own v) ts c < regular (own v') ts c", "by auto"], ["proof (state)\nthis:\n  regular (own v) ts c < regular (own v') ts c\n\ngoal (1 subgoal):\n 1. own v \\<noteq> c \\<and> v = c > v' \\<Longrightarrow>\n    space ts v c < space ts v' c", "then"], ["proof (chain)\npicking this:\n  regular (own v) ts c < regular (own v') ts c", "have le:\"pos ts c + regular (own v) ts c < pos ts c + regular (own v') ts c\""], ["proof (prove)\nusing this:\n  regular (own v) ts c < regular (own v') ts c\n\ngoal (1 subgoal):\n 1. pos ts c + regular (own v) ts c < pos ts c + regular (own v') ts c", "by auto"], ["proof (state)\nthis:\n  pos ts c + regular (own v) ts c < pos ts c + regular (own v') ts c\n\ngoal (1 subgoal):\n 1. own v \\<noteq> c \\<and> v = c > v' \\<Longrightarrow>\n    space ts v c < space ts v' c", "have left_eq:\"left (space ts v c) = left (space ts v' c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (space ts v c) = left (space ts v' c)", "using regular_sensors.left_space"], ["proof (prove)\nusing this:\n  left (space ?ts ?v ?c) = pos ?ts ?c\n\ngoal (1 subgoal):\n 1. left (space ts v c) = left (space ts v' c)", "by auto"], ["proof (state)\nthis:\n  left (space ts v c) = left (space ts v' c)\n\ngoal (1 subgoal):\n 1. own v \\<noteq> c \\<and> v = c > v' \\<Longrightarrow>\n    space ts v c < space ts v' c", "have r1:\"right (space ts v c ) = pos ts c + regular (own v) ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (space ts v c) = pos ts c + regular (own v) ts c", "using regular_sensors.right_space"], ["proof (prove)\nusing this:\n  right (space ?ts ?v ?c) = pos ?ts ?c + regular (own ?v) ?ts ?c\n\ngoal (1 subgoal):\n 1. right (space ts v c) = pos ts c + regular (own v) ts c", "by auto"], ["proof (state)\nthis:\n  right (space ts v c) = pos ts c + regular (own v) ts c\n\ngoal (1 subgoal):\n 1. own v \\<noteq> c \\<and> v = c > v' \\<Longrightarrow>\n    space ts v c < space ts v' c", "have r2:\"right (space ts v' c ) = pos ts c + regular (own v') ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (space ts v' c) = pos ts c + regular (own v') ts c", "using regular_sensors.right_space"], ["proof (prove)\nusing this:\n  right (space ?ts ?v ?c) = pos ?ts ?c + regular (own ?v) ?ts ?c\n\ngoal (1 subgoal):\n 1. right (space ts v' c) = pos ts c + regular (own v') ts c", "by auto"], ["proof (state)\nthis:\n  right (space ts v' c) = pos ts c + regular (own v') ts c\n\ngoal (1 subgoal):\n 1. own v \\<noteq> c \\<and> v = c > v' \\<Longrightarrow>\n    space ts v c < space ts v' c", "then"], ["proof (chain)\npicking this:\n  right (space ts v' c) = pos ts c + regular (own v') ts c", "have \"right (space ts v c) < right( space ts v' c)\""], ["proof (prove)\nusing this:\n  right (space ts v' c) = pos ts c + regular (own v') ts c\n\ngoal (1 subgoal):\n 1. right (space ts v c) < right (space ts v' c)", "using r1 r2 le"], ["proof (prove)\nusing this:\n  right (space ts v' c) = pos ts c + regular (own v') ts c\n  right (space ts v c) = pos ts c + regular (own v) ts c\n  right (space ts v' c) = pos ts c + regular (own v') ts c\n  pos ts c + regular (own v) ts c < pos ts c + regular (own v') ts c\n\ngoal (1 subgoal):\n 1. right (space ts v c) < right (space ts v' c)", "by auto"], ["proof (state)\nthis:\n  right (space ts v c) < right (space ts v' c)\n\ngoal (1 subgoal):\n 1. own v \\<noteq> c \\<and> v = c > v' \\<Longrightarrow>\n    space ts v c < space ts v' c", "then"], ["proof (chain)\npicking this:\n  right (space ts v c) < right (space ts v' c)", "have \"left (space ts v' c) \\<ge> left (space ts v c)  \n              \\<and> (right (space ts v c) \\<le> right( space ts v' c)) \n              \\<and>  \\<not>(left (space ts v c) \\<ge> left (space ts v' c)  \n                    \\<and> right (space ts v' c) \\<le> right (space ts v c))\""], ["proof (prove)\nusing this:\n  right (space ts v c) < right (space ts v' c)\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> left (space ts v' c) \\<and>\n    right (space ts v c) \\<le> right (space ts v' c) \\<and>\n    \\<not> (left (space ts v' c) \\<le> left (space ts v c) \\<and>\n            right (space ts v' c) \\<le> right (space ts v c))", "using regular_sensors.left_space left_eq"], ["proof (prove)\nusing this:\n  right (space ts v c) < right (space ts v' c)\n  left (space ?ts ?v ?c) = pos ?ts ?c\n  left (space ts v c) = left (space ts v' c)\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> left (space ts v' c) \\<and>\n    right (space ts v c) \\<le> right (space ts v' c) \\<and>\n    \\<not> (left (space ts v' c) \\<le> left (space ts v c) \\<and>\n            right (space ts v' c) \\<le> right (space ts v c))", "by auto"], ["proof (state)\nthis:\n  left (space ts v c) \\<le> left (space ts v' c) \\<and>\n  right (space ts v c) \\<le> right (space ts v' c) \\<and>\n  \\<not> (left (space ts v' c) \\<le> left (space ts v c) \\<and>\n          right (space ts v' c) \\<le> right (space ts v c))\n\ngoal (1 subgoal):\n 1. own v \\<noteq> c \\<and> v = c > v' \\<Longrightarrow>\n    space ts v c < space ts v' c", "then"], ["proof (chain)\npicking this:\n  left (space ts v c) \\<le> left (space ts v' c) \\<and>\n  right (space ts v c) \\<le> right (space ts v' c) \\<and>\n  \\<not> (left (space ts v' c) \\<le> left (space ts v c) \\<and>\n          right (space ts v' c) \\<le> right (space ts v c))", "show \"space ts v c < space ts v' c\""], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> left (space ts v' c) \\<and>\n  right (space ts v c) \\<le> right (space ts v' c) \\<and>\n  \\<not> (left (space ts v' c) \\<le> left (space ts v c) \\<and>\n          right (space ts v' c) \\<le> right (space ts v c))\n\ngoal (1 subgoal):\n 1. space ts v c < space ts v' c", "using less_real_int_def left_eq"], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> left (space ts v' c) \\<and>\n  right (space ts v c) \\<le> right (space ts v' c) \\<and>\n  \\<not> (left (space ts v' c) \\<le> left (space ts v c) \\<and>\n          right (space ts v' c) \\<le> right (space ts v c))\n  ?r < ?s \\<equiv>\n  left ?s \\<le> left ?r \\<and>\n  right ?r \\<le> right ?s \\<and>\n  \\<not> (left ?r \\<le> left ?s \\<and> right ?s \\<le> right ?r)\n  left (space ts v c) = left (space ts v' c)\n\ngoal (1 subgoal):\n 1. space ts v c < space ts v' c", "by auto"], ["proof (state)\nthis:\n  space ts v c < space ts v' c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma switch_space_leq:\"(v=c>v') \\<longrightarrow> space ts v c \\<le> space ts v' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = c > v' \\<longrightarrow> space ts v c \\<le> space ts v' c", "by (metis less_imp_le order_refl switch_space_le view.switch_refl view.switch_unique)"], ["", "end"], ["", "end"]]}