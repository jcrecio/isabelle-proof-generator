{"file_name": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic/RealInt.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic", "problem_names": ["lemmas[simp] = left.rep_eq right.rep_eq", "lemma left_leq_right: \"left r \\<le> right r\"", "lemma length_ge_zero :\" \\<parallel>r\\<parallel> \\<ge> 0\"", "lemma consec_add:\n  \"left r = left s \\<and> right r = right t \\<and> right s = left t \\<Longrightarrow> \\<parallel>r\\<parallel> = \\<parallel>s\\<parallel> + \\<parallel>t\\<parallel>\"", "lemma length_zero_iff_borders_eq:\"\\<parallel>r\\<parallel> = 0 \\<longleftrightarrow> left r = right r\"", "lemma shift_left_eq_right:\"left (shift r x) \\<le> right (shift r x)\"", "lemma shift_keeps_length:\"\\<parallel>r\\<parallel> = \\<parallel> shift r x\\<parallel>\"", "lemma shift_zero:\"(shift r 0) = r\"", "lemma shift_additivity:\"(shift r (x+y)) = shift (shift r x) y\"", "lemma chop_always_possible: \"\\<forall>r .\\<exists> s t. R_Chop(r,s,t)\"", "lemma chop_singleton_right: \"\\<forall>r.\\<exists> s. R_Chop(r,r,s)\"", "lemma chop_singleton_left: \"\\<forall>r.\\<exists> s. R_Chop(r,s,r)\"", "lemma chop_add_length:\"R_Chop(r,s,t) \\<Longrightarrow> \\<parallel>r\\<parallel> = \\<parallel>s\\<parallel> + \\<parallel>t\\<parallel>\"", "lemma chop_add_length_ge_0:\"R_Chop(r,s,t) \\<and> \\<parallel>s\\<parallel> > 0 \\<and> \\<parallel>t\\<parallel>>0 \\<longrightarrow> \\<parallel>r\\<parallel>>0\"", "lemma chop_dense : \"\\<parallel>r\\<parallel> > 0 \\<longrightarrow> (\\<exists> s t. R_Chop(r,s,t) \\<and> \\<parallel>s\\<parallel>>0 \\<and> \\<parallel>t\\<parallel>>0)\"", "lemma chop_assoc1:\n  \"R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4) \n     \\<longrightarrow> R_Chop(r, Abs_real_int(left r1, right r3), r4) \n        \\<and> R_Chop(Abs_real_int(left r1, right r3), r1,r3)\"", "lemma chop_assoc2: \n  \"R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \n    \\<longrightarrow> R_Chop(r,r3, Abs_real_int(left r4, right r2)) \n      \\<and> R_Chop(Abs_real_int(left r4, right r2), r4,r2)\"", "lemma chop_leq1:\"R_Chop(r,s,t) \\<longrightarrow> s \\<le> r\"", "lemma chop_leq2:\"R_Chop(r,s,t) \\<longrightarrow> t \\<le> r\"", "lemma chop_empty1:\"R_Chop(r,s,t) \\<and> \\<parallel>s\\<parallel> = 0 \\<longrightarrow> r = t \"", "lemma chop_empty2:\"R_Chop(r,s,t) \\<and> \\<parallel>t\\<parallel> = 0 \\<longrightarrow> r = s \""], "translations": [["", "lemmas[simp] = left.rep_eq right.rep_eq"], ["", "locale real_int"], ["", "interpretation real_int_class?: real_int"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "context real_int\nbegin"], ["", "definition length :: \"real_int \\<Rightarrow> real\" (\"\\<parallel>_\\<parallel>\" 70)\n  where \"\\<parallel>r\\<parallel> \\<equiv> right r - left r\""], ["", "definition shift::\"real_int \\<Rightarrow> real \\<Rightarrow> real_int\" (\" shift _ _\")\n  where \"(shift r x) = Abs_real_int(left r +x, right r +x)\""], ["", "definition R_Chop :: \"real_int \\<Rightarrow> real_int \\<Rightarrow> real_int \\<Rightarrow> bool\" (\"R'_Chop'(_,_,_')\" 51)\n  where rchop_def :\n    \"R_Chop(r,s,t) ==  left r  = left s \\<and> right s = left t \\<and> right r =  right t\""], ["", "end"], ["", "text \\<open>The intervals defined in this way allow for the definition of an order: \nthe subinterval relation.\\<close>"], ["", "instantiation real_int :: order\nbegin"], ["", "definition \"less_eq_real_int r s \\<equiv> (left r \\<ge> left s) \\<and> (right r \\<le> right s)\""], ["", "definition \"less_real_int r s \\<equiv> (left r \\<ge> left s) \\<and> (right r \\<le> right s) \n                                  \\<and>  \\<not>((left s \\<ge> left r) \\<and> (right s \\<le> right r))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(real_int, order_class)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "fix r s t :: real_int"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "show \"(r < s) = (r \\<le> s \\<and> \\<not> s \\<le> r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r < s) = (r \\<le> s \\<and> \\<not> s \\<le> r)", "using less_eq_real_int_def less_real_int_def"], ["proof (prove)\nusing this:\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n  ?r < ?s \\<equiv>\n  left ?s \\<le> left ?r \\<and>\n  right ?r \\<le> right ?s \\<and>\n  \\<not> (left ?r \\<le> left ?s \\<and> right ?s \\<le> right ?r)\n\ngoal (1 subgoal):\n 1. (r < s) = (r \\<le> s \\<and> \\<not> s \\<le> r)", "by auto"], ["proof (state)\nthis:\n  (r < s) = (r \\<le> s \\<and> \\<not> s \\<le> r)\n\ngoal (3 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "show \"r \\<le> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> r", "using less_eq_real_int_def"], ["proof (prove)\nusing this:\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n\ngoal (1 subgoal):\n 1. r \\<le> r", "by auto"], ["proof (state)\nthis:\n  r \\<le> r\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "show \"r \\<le> s \\<Longrightarrow> s \\<le> t \\<Longrightarrow> r \\<le> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<le> s; s \\<le> t\\<rbrakk> \\<Longrightarrow> r \\<le> t", "using less_eq_real_int_def"], ["proof (prove)\nusing this:\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<le> s; s \\<le> t\\<rbrakk> \\<Longrightarrow> r \\<le> t", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>r \\<le> s; s \\<le> t\\<rbrakk> \\<Longrightarrow> r \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y", "show \"r \\<le> s \\<Longrightarrow> s \\<le> r \\<Longrightarrow> r = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<le> s; s \\<le> r\\<rbrakk> \\<Longrightarrow> r = s", "by (metis Rep_real_int_inject left.rep_eq less_le less_eq_real_int_def \n        not_le prod.collapse right.rep_eq)"], ["proof (state)\nthis:\n  \\<lbrakk>r \\<le> s; s \\<le> r\\<rbrakk> \\<Longrightarrow> r = s\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context real_int\nbegin"], ["", "lemma left_leq_right: \"left r \\<le> right r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left r \\<le> right r", "using Rep_real_int left.rep_eq right.rep_eq"], ["proof (prove)\nusing this:\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  left ?x = fst (Rep_real_int ?x)\n  right ?x = snd (Rep_real_int ?x)\n\ngoal (1 subgoal):\n 1. left r \\<le> right r", "by auto"], ["", "lemma length_ge_zero :\" \\<parallel>r\\<parallel> \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> \\<parallel>r\\<parallel>", "using Rep_real_int left.rep_eq right.rep_eq length_def"], ["proof (prove)\nusing this:\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  left ?x = fst (Rep_real_int ?x)\n  right ?x = snd (Rep_real_int ?x)\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n\ngoal (1 subgoal):\n 1. 0 \\<le> \\<parallel>r\\<parallel>", "by auto"], ["", "lemma consec_add:\n  \"left r = left s \\<and> right r = right t \\<and> right s = left t \\<Longrightarrow> \\<parallel>r\\<parallel> = \\<parallel>s\\<parallel> + \\<parallel>t\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left r = left s \\<and>\n    right r = right t \\<and> right s = left t \\<Longrightarrow>\n    \\<parallel>r\\<parallel> =\n    \\<parallel>s\\<parallel> + \\<parallel>t\\<parallel>", "by (simp add:length_def)"], ["", "lemma length_zero_iff_borders_eq:\"\\<parallel>r\\<parallel> = 0 \\<longleftrightarrow> left r = right r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<parallel>r\\<parallel> = 0) = (left r = right r)", "using length_def"], ["proof (prove)\nusing this:\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n\ngoal (1 subgoal):\n 1. (\\<parallel>r\\<parallel> = 0) = (left r = right r)", "by auto"], ["", "lemma shift_left_eq_right:\"left (shift r x) \\<le> right (shift r x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left  shift r x \\<le> right  shift r x", "using left_leq_right"], ["proof (prove)\nusing this:\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. left  shift r x \\<le> right  shift r x", "."], ["", "lemma shift_keeps_length:\"\\<parallel>r\\<parallel> = \\<parallel> shift r x\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>r\\<parallel> = \\<parallel> shift r x\\<parallel>", "using Abs_real_int_inverse left.rep_eq real_int.length_def length_ge_zero shift_def \n    right.rep_eq"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  left ?x = fst (Rep_real_int ?x)\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n  0 \\<le> \\<parallel>?r\\<parallel>\n   shift ?r ?x = Abs_real_int (left ?r + ?x, right ?r + ?x)\n  right ?x = snd (Rep_real_int ?x)\n\ngoal (1 subgoal):\n 1. \\<parallel>r\\<parallel> = \\<parallel> shift r x\\<parallel>", "by auto"], ["", "lemma shift_zero:\"(shift r 0) = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  shift r 0 = r", "by (simp add: Rep_real_int_inverse shift_def )"], ["", "lemma shift_additivity:\"(shift r (x+y)) = shift (shift r x) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  shift r x + y =  shift  shift r x y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1.  shift r x + y =  shift  shift r x y", "have 1:\"(shift r (x+y)) = Abs_real_int ((left r) +(x+y), (right r)+(x+y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  shift r x + y = Abs_real_int (left r + (x + y), right r + (x + y))", "using shift_def"], ["proof (prove)\nusing this:\n   shift ?r ?x = Abs_real_int (left ?r + ?x, right ?r + ?x)\n\ngoal (1 subgoal):\n 1.  shift r x + y = Abs_real_int (left r + (x + y), right r + (x + y))", "by auto"], ["proof (state)\nthis:\n   shift r x + y = Abs_real_int (left r + (x + y), right r + (x + y))\n\ngoal (1 subgoal):\n 1.  shift r x + y =  shift  shift r x y", "have 2:\"(left r) +(x+y) \\<le> (right r)+(x+y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left r + (x + y) \\<le> right r + (x + y)", "using left_leq_right"], ["proof (prove)\nusing this:\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. left r + (x + y) \\<le> right r + (x + y)", "by auto"], ["proof (state)\nthis:\n  left r + (x + y) \\<le> right r + (x + y)\n\ngoal (1 subgoal):\n 1.  shift r x + y =  shift  shift r x y", "hence left:\"left (shift r (x+y)) = (left r) +(x+y)\""], ["proof (prove)\nusing this:\n  left r + (x + y) \\<le> right r + (x + y)\n\ngoal (1 subgoal):\n 1. left  shift r x + y = left r + (x + y)", "by (simp add: Abs_real_int_inverse 1)"], ["proof (state)\nthis:\n  left  shift r x + y = left r + (x + y)\n\ngoal (1 subgoal):\n 1.  shift r x + y =  shift  shift r x y", "from 2"], ["proof (chain)\npicking this:\n  left r + (x + y) \\<le> right r + (x + y)", "have right:\"right (shift r (x+y)) = (right r) +(x+y)\""], ["proof (prove)\nusing this:\n  left r + (x + y) \\<le> right r + (x + y)\n\ngoal (1 subgoal):\n 1. right  shift r x + y = right r + (x + y)", "by (simp add: Abs_real_int_inverse 1)"], ["proof (state)\nthis:\n  right  shift r x + y = right r + (x + y)\n\ngoal (1 subgoal):\n 1.  shift r x + y =  shift  shift r x y", "have 3:\"(shift (shift r x) y) = Abs_real_int(left (shift r x) +y, right(shift r x)+y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  shift  shift r x y =\n    Abs_real_int (left  shift r x + y, right  shift r x + y)", "using shift_def"], ["proof (prove)\nusing this:\n   shift ?r ?x = Abs_real_int (left ?r + ?x, right ?r + ?x)\n\ngoal (1 subgoal):\n 1.  shift  shift r x y =\n    Abs_real_int (left  shift r x + y, right  shift r x + y)", "by auto"], ["proof (state)\nthis:\n   shift  shift r x y =\n  Abs_real_int (left  shift r x + y, right  shift r x + y)\n\ngoal (1 subgoal):\n 1.  shift r x + y =  shift  shift r x y", "have l1:\"left (shift r x) = left r + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left  shift r x = left r + x", "using shift_def  Abs_real_int_inverse \"2\" fstI mem_Collect_eq prod.sel(2) left.rep_eq"], ["proof (prove)\nusing this:\n   shift ?r ?x = Abs_real_int (left ?r + ?x, right ?r + ?x)\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  left r + (x + y) \\<le> right r + (x + y)\n  ?x = (?y, ?z) \\<Longrightarrow> fst ?x = ?y\n  (?a \\<in> Collect ?P) = ?P ?a\n  snd (?x1.0, ?x2.0) = ?x2.0\n  left ?x = fst (Rep_real_int ?x)\n\ngoal (1 subgoal):\n 1. left  shift r x = left r + x", "by auto"], ["proof (state)\nthis:\n  left  shift r x = left r + x\n\ngoal (1 subgoal):\n 1.  shift r x + y =  shift  shift r x y", "have r1:\"right (shift r x) = right r + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right  shift r x = right r + x", "using shift_def Abs_real_int_inverse \"2\" fstI mem_Collect_eq prod.sel(2) right.rep_eq"], ["proof (prove)\nusing this:\n   shift ?r ?x = Abs_real_int (left ?r + ?x, right ?r + ?x)\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  left r + (x + y) \\<le> right r + (x + y)\n  ?x = (?y, ?z) \\<Longrightarrow> fst ?x = ?y\n  (?a \\<in> Collect ?P) = ?P ?a\n  snd (?x1.0, ?x2.0) = ?x2.0\n  right ?x = snd (Rep_real_int ?x)\n\ngoal (1 subgoal):\n 1. right  shift r x = right r + x", "by auto"], ["proof (state)\nthis:\n  right  shift r x = right r + x\n\ngoal (1 subgoal):\n 1.  shift r x + y =  shift  shift r x y", "from 3 and l1 and r1"], ["proof (chain)\npicking this:\n   shift  shift r x y =\n  Abs_real_int (left  shift r x + y, right  shift r x + y)\n  left  shift r x = left r + x\n  right  shift r x = right r + x", "have \n    \"(shift (shift r x) y) = Abs_real_int(left  r+x+y, right  r+x+y)\""], ["proof (prove)\nusing this:\n   shift  shift r x y =\n  Abs_real_int (left  shift r x + y, right  shift r x + y)\n  left  shift r x = left r + x\n  right  shift r x = right r + x\n\ngoal (1 subgoal):\n 1.  shift  shift r x y = Abs_real_int (left r + x + y, right r + x + y)", "by auto"], ["proof (state)\nthis:\n   shift  shift r x y = Abs_real_int (left r + x + y, right r + x + y)\n\ngoal (1 subgoal):\n 1.  shift r x + y =  shift  shift r x y", "with 1"], ["proof (chain)\npicking this:\n   shift r x + y = Abs_real_int (left r + (x + y), right r + (x + y))\n   shift  shift r x y = Abs_real_int (left r + x + y, right r + x + y)", "show ?thesis"], ["proof (prove)\nusing this:\n   shift r x + y = Abs_real_int (left r + (x + y), right r + (x + y))\n   shift  shift r x y = Abs_real_int (left r + x + y, right r + x + y)\n\ngoal (1 subgoal):\n 1.  shift r x + y =  shift  shift r x y", "by (simp add: add.assoc)"], ["proof (state)\nthis:\n   shift r x + y =  shift  shift r x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma chop_always_possible: \"\\<forall>r .\\<exists> s t. R_Chop(r,s,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r. \\<exists>s t. R_Chop(r,s,t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s t. R_Chop(r,s,t)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s t. R_Chop(r,s,t)", "obtain s where l:\"left x \\<le> s  \\<and> s \\<le> right x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        left x \\<le> s \\<and> s \\<le> right x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using left_leq_right"], ["proof (prove)\nusing this:\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        left x \\<le> s \\<and> s \\<le> right x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  left x \\<le> s \\<and> s \\<le> right x\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s t. R_Chop(r,s,t)", "obtain x1  where x1_def:\"x1 = Abs_real_int(left x,s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x1.\n        x1 = Abs_real_int (left x, s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  x1 = Abs_real_int (left x, s)\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s t. R_Chop(r,s,t)", "obtain x2 where x2_def:\"x2 = Abs_real_int(s, right x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x2.\n        x2 = Abs_real_int (s, right x) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  x2 = Abs_real_int (s, right x)\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s t. R_Chop(r,s,t)", "have x1_in_type:\"(left x, s) \\<in> {r :: real*real . fst r \\<le> snd r }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (left x, s) \\<in> {r. fst r \\<le> snd r}", "using l"], ["proof (prove)\nusing this:\n  left x \\<le> s \\<and> s \\<le> right x\n\ngoal (1 subgoal):\n 1. (left x, s) \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (left x, s) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s t. R_Chop(r,s,t)", "have x2_in_type:\"(s, right x) \\<in> {r :: real*real . fst r \\<le> snd r }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, right x) \\<in> {r. fst r \\<le> snd r}", "using l"], ["proof (prove)\nusing this:\n  left x \\<le> s \\<and> s \\<le> right x\n\ngoal (1 subgoal):\n 1. (s, right x) \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (s, right x) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s t. R_Chop(r,s,t)", "have 1:\"left x = left x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left x = left x1", "using x1_in_type l Abs_real_int_inverse"], ["proof (prove)\nusing this:\n  (left x, s) \\<in> {r. fst r \\<le> snd r}\n  left x \\<le> s \\<and> s \\<le> right x\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n\ngoal (1 subgoal):\n 1. left x = left x1", "by (simp add:  x1_def)"], ["proof (state)\nthis:\n  left x = left x1\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s t. R_Chop(r,s,t)", "have 2:\"right x1 = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right x1 = s", "using Abs_real_int_inverse x1_def x1_in_type right.rep_eq"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  x1 = Abs_real_int (left x, s)\n  (left x, s) \\<in> {r. fst r \\<le> snd r}\n  right ?x = snd (Rep_real_int ?x)\n\ngoal (1 subgoal):\n 1. right x1 = s", "by auto"], ["proof (state)\nthis:\n  right x1 = s\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s t. R_Chop(r,s,t)", "have 3:\"right x1 = left x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right x1 = left x2", "using Abs_real_int_inverse x1_def x1_in_type x2_def x2_in_type left.rep_eq"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  x1 = Abs_real_int (left x, s)\n  (left x, s) \\<in> {r. fst r \\<le> snd r}\n  x2 = Abs_real_int (s, right x)\n  (s, right x) \\<in> {r. fst r \\<le> snd r}\n  left ?x = fst (Rep_real_int ?x)\n\ngoal (1 subgoal):\n 1. right x1 = left x2", "by auto"], ["proof (state)\nthis:\n  right x1 = left x2\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s t. R_Chop(r,s,t)", "from 1 and 2 and 3"], ["proof (chain)\npicking this:\n  left x = left x1\n  right x1 = s\n  right x1 = left x2", "have \"R_Chop(x,x1,x2)\""], ["proof (prove)\nusing this:\n  left x = left x1\n  right x1 = s\n  right x1 = left x2\n\ngoal (1 subgoal):\n 1. R_Chop(x,x1,x2)", "using Abs_real_int_inverse rchop_def snd_conv x2_def x2_in_type"], ["proof (prove)\nusing this:\n  left x = left x1\n  right x1 = s\n  right x1 = left x2\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  snd (?x1.0, ?x2.0) = ?x2.0\n  x2 = Abs_real_int (s, right x)\n  (s, right x) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. R_Chop(x,x1,x2)", "by auto"], ["proof (state)\nthis:\n  R_Chop(x,x1,x2)\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s t. R_Chop(r,s,t)", "then"], ["proof (chain)\npicking this:\n  R_Chop(x,x1,x2)", "show \"\\<exists>x1 x2. R_Chop(x,x1,x2)\""], ["proof (prove)\nusing this:\n  R_Chop(x,x1,x2)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2. R_Chop(x,x1,x2)", "by blast"], ["proof (state)\nthis:\n  \\<exists>x1 x2. R_Chop(x,x1,x2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma chop_singleton_right: \"\\<forall>r.\\<exists> s. R_Chop(r,r,s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r. \\<exists>s. R_Chop(r,r,s)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s. R_Chop(r,r,s)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s. R_Chop(r,r,s)", "obtain y where  \"y =  Abs_real_int(right x, right x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y = Abs_real_int (right x, right x) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  y = Abs_real_int (right x, right x)\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s. R_Chop(r,r,s)", "then"], ["proof (chain)\npicking this:\n  y = Abs_real_int (right x, right x)", "have \"R_Chop(x,x,y)\""], ["proof (prove)\nusing this:\n  y = Abs_real_int (right x, right x)\n\ngoal (1 subgoal):\n 1. R_Chop(x,x,y)", "by (simp add: Abs_real_int_inverse real_int.rchop_def)"], ["proof (state)\nthis:\n  R_Chop(x,x,y)\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s. R_Chop(r,r,s)", "then"], ["proof (chain)\npicking this:\n  R_Chop(x,x,y)", "show \"\\<exists>y. R_Chop(x,x,y)\""], ["proof (prove)\nusing this:\n  R_Chop(x,x,y)\n\ngoal (1 subgoal):\n 1. \\<exists>y. R_Chop(x,x,y)", "by blast"], ["proof (state)\nthis:\n  \\<exists>y. R_Chop(x,x,y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma chop_singleton_left: \"\\<forall>r.\\<exists> s. R_Chop(r,s,r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r. \\<exists>s. R_Chop(r,s,r)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s. R_Chop(r,s,r)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s. R_Chop(r,s,r)", "obtain y where  \"y =  Abs_real_int(left x, left x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y = Abs_real_int (left x, left x) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  y = Abs_real_int (left x, left x)\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s. R_Chop(r,s,r)", "then"], ["proof (chain)\npicking this:\n  y = Abs_real_int (left x, left x)", "have \"R_Chop(x,y,x)\""], ["proof (prove)\nusing this:\n  y = Abs_real_int (left x, left x)\n\ngoal (1 subgoal):\n 1. R_Chop(x,y,x)", "by (simp add: Abs_real_int_inverse real_int.rchop_def)"], ["proof (state)\nthis:\n  R_Chop(x,y,x)\n\ngoal (1 subgoal):\n 1. \\<And>r. \\<exists>s. R_Chop(r,s,r)", "then"], ["proof (chain)\npicking this:\n  R_Chop(x,y,x)", "show \"\\<exists>y. R_Chop(x,y,x)\""], ["proof (prove)\nusing this:\n  R_Chop(x,y,x)\n\ngoal (1 subgoal):\n 1. \\<exists>y. R_Chop(x,y,x)", "by blast"], ["proof (state)\nthis:\n  \\<exists>y. R_Chop(x,y,x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma chop_add_length:\"R_Chop(r,s,t) \\<Longrightarrow> \\<parallel>r\\<parallel> = \\<parallel>s\\<parallel> + \\<parallel>t\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,s,t) \\<Longrightarrow>\n    \\<parallel>r\\<parallel> =\n    \\<parallel>s\\<parallel> + \\<parallel>t\\<parallel>", "using consec_add"], ["proof (prove)\nusing this:\n  left ?r = left ?s \\<and>\n  right ?r = right ?t \\<and> right ?s = left ?t \\<Longrightarrow>\n  \\<parallel>?r\\<parallel> =\n  \\<parallel>?s\\<parallel> + \\<parallel>?t\\<parallel>\n\ngoal (1 subgoal):\n 1. R_Chop(r,s,t) \\<Longrightarrow>\n    \\<parallel>r\\<parallel> =\n    \\<parallel>s\\<parallel> + \\<parallel>t\\<parallel>", "by (simp add: rchop_def)"], ["", "lemma chop_add_length_ge_0:\"R_Chop(r,s,t) \\<and> \\<parallel>s\\<parallel> > 0 \\<and> \\<parallel>t\\<parallel>>0 \\<longrightarrow> \\<parallel>r\\<parallel>>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,s,t) \\<and>\n    0 < \\<parallel>s\\<parallel> \\<and>\n    0 < \\<parallel>t\\<parallel> \\<longrightarrow>\n    0 < \\<parallel>r\\<parallel>", "using chop_add_length"], ["proof (prove)\nusing this:\n  R_Chop(?r,?s,?t) \\<Longrightarrow>\n  \\<parallel>?r\\<parallel> =\n  \\<parallel>?s\\<parallel> + \\<parallel>?t\\<parallel>\n\ngoal (1 subgoal):\n 1. R_Chop(r,s,t) \\<and>\n    0 < \\<parallel>s\\<parallel> \\<and>\n    0 < \\<parallel>t\\<parallel> \\<longrightarrow>\n    0 < \\<parallel>r\\<parallel>", "by auto"], ["", "lemma chop_dense : \"\\<parallel>r\\<parallel> > 0 \\<longrightarrow> (\\<exists> s t. R_Chop(r,s,t) \\<and> \\<parallel>s\\<parallel>>0 \\<and> \\<parallel>t\\<parallel>>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<longrightarrow>\n    (\\<exists>s t.\n        R_Chop(r,s,t) \\<and>\n        0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "assume \"\\<parallel>r\\<parallel> > 0\""], ["proof (state)\nthis:\n  0 < \\<parallel>r\\<parallel>\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "have ff1: \" left r < right r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left r < right r", "using Rep_real_int \\<open>0 < \\<parallel>r\\<parallel>\\<close> length_def"], ["proof (prove)\nusing this:\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  0 < \\<parallel>r\\<parallel>\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n\ngoal (1 subgoal):\n 1. left r < right r", "by auto"], ["proof (state)\nthis:\n  left r < right r\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "have l_in_type:\"(left r, right r) \\<in> {r :: real*real . fst r \\<le> snd r }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (left r, right r) \\<in> {r. fst r \\<le> snd r}", "using Rep_real_int"], ["proof (prove)\nusing this:\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. (left r, right r) \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (left r, right r) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "obtain x where  x_def:\" x  = (left r + right r) / 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x = (left r + right r) / 2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = (left r + right r) / 2\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "have x_gr:\"x > left r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left r < x", "using ff1 field_less_half_sum x_def"], ["proof (prove)\nusing this:\n  left r < right r\n  ?x < ?y \\<Longrightarrow> ?x < (?x + ?y) / (2::?'a)\n  x = (left r + right r) / 2\n\ngoal (1 subgoal):\n 1. left r < x", "by blast"], ["proof (state)\nthis:\n  left r < x\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "have x_le:\"x < right r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < right r", "using ff1 x_def"], ["proof (prove)\nusing this:\n  left r < right r\n  x = (left r + right r) / 2\n\ngoal (1 subgoal):\n 1. x < right r", "by (simp add: field_sum_of_halves)"], ["proof (state)\nthis:\n  x < right r\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "obtain s where s_def:\"s = Abs_real_int(left r, x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        s = Abs_real_int (left r, x) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  s = Abs_real_int (left r, x)\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "obtain t where t_def:\"t = Abs_real_int(x, right r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t.\n        t = Abs_real_int (x, right r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  t = Abs_real_int (x, right r)\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "have s_in_type:\"(left r, x) \\<in> {r :: real*real . fst r \\<le> snd r }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (left r, x) \\<in> {r. fst r \\<le> snd r}", "using x_def x_le"], ["proof (prove)\nusing this:\n  x = (left r + right r) / 2\n  x < right r\n\ngoal (1 subgoal):\n 1. (left r, x) \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (left r, x) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "have t_in_type:\"(x, right r) \\<in> {r :: real*real . fst r \\<le> snd r }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, right r) \\<in> {r. fst r \\<le> snd r}", "using x_def x_gr"], ["proof (prove)\nusing this:\n  x = (left r + right r) / 2\n  left r < x\n\ngoal (1 subgoal):\n 1. (x, right r) \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (x, right r) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "have s_gr_0:\"\\<parallel>s\\<parallel> > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < \\<parallel>s\\<parallel>", "using Abs_real_int_inverse s_def length_def x_gr"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  s = Abs_real_int (left r, x)\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n  left r < x\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>s\\<parallel>", "by auto"], ["proof (state)\nthis:\n  0 < \\<parallel>s\\<parallel>\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "have t_gr_0:\"\\<parallel>t\\<parallel> > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < \\<parallel>t\\<parallel>", "using Abs_real_int_inverse t_def length_def x_le"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  t = Abs_real_int (x, right r)\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n  x < right r\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>t\\<parallel>", "by auto"], ["proof (state)\nthis:\n  0 < \\<parallel>t\\<parallel>\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "have \"R_Chop(r,s,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,s,t)", "using Abs_real_int_inverse s_def s_in_type t_def t_in_type rchop_def"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  s = Abs_real_int (left r, x)\n  (left r, x) \\<in> {r. fst r \\<le> snd r}\n  t = Abs_real_int (x, right r)\n  (x, right r) \\<in> {r. fst r \\<le> snd r}\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. R_Chop(r,s,t)", "by auto"], ["proof (state)\nthis:\n  R_Chop(r,s,t)\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "hence \"R_Chop(r,s,t) \\<and> \\<parallel>s\\<parallel>>0 \\<and> \\<parallel>t\\<parallel>>0\""], ["proof (prove)\nusing this:\n  R_Chop(r,s,t)\n\ngoal (1 subgoal):\n 1. R_Chop(r,s,t) \\<and>\n    0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "using s_gr_0 t_gr_0"], ["proof (prove)\nusing this:\n  R_Chop(r,s,t)\n  0 < \\<parallel>s\\<parallel>\n  0 < \\<parallel>t\\<parallel>\n\ngoal (1 subgoal):\n 1. R_Chop(r,s,t) \\<and>\n    0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "by blast"], ["proof (state)\nthis:\n  R_Chop(r,s,t) \\<and>\n  0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>r\\<parallel> \\<Longrightarrow>\n    \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "thus \"\\<exists> s t. R_Chop(r,s,t) \\<and> \\<parallel>s\\<parallel>>0 \\<and> \\<parallel>t\\<parallel>>0\""], ["proof (prove)\nusing this:\n  R_Chop(r,s,t) \\<and>\n  0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<exists>s t.\n       R_Chop(r,s,t) \\<and>\n       0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>", "by blast"], ["proof (state)\nthis:\n  \\<exists>s t.\n     R_Chop(r,s,t) \\<and>\n     0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma chop_assoc1:\n  \"R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4) \n     \\<longrightarrow> R_Chop(r, Abs_real_int(left r1, right r3), r4) \n        \\<and> R_Chop(Abs_real_int(left r1, right r3), r1,r3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4) \\<longrightarrow>\n    R_Chop(r,Abs_real_int (left r1, right r3),r4) \\<and>\n    R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4) \\<Longrightarrow>\n    R_Chop(r,Abs_real_int (left r1, right r3),r4) \\<and>\n    R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "assume assm: \"R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4)\""], ["proof (state)\nthis:\n  R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4)\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4) \\<Longrightarrow>\n    R_Chop(r,Abs_real_int (left r1, right r3),r4) \\<and>\n    R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "let ?y1 = \" Abs_real_int(left r1, right r3)\""], ["proof (state)\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4) \\<Longrightarrow>\n    R_Chop(r,Abs_real_int (left r1, right r3),r4) \\<and>\n    R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "have l1:\"left r1 = left ?y1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left r1 = left (Abs_real_int (left r1, right r3))", "by (metis  Abs_real_int_inverse assm fst_conv left.rep_eq mem_Collect_eq\n        order_trans real_int.left_leq_right real_int.rchop_def snd_conv)"], ["proof (state)\nthis:\n  left r1 = left (Abs_real_int (left r1, right r3))\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4) \\<Longrightarrow>\n    R_Chop(r,Abs_real_int (left r1, right r3),r4) \\<and>\n    R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "have r1:\"right ?y1 = right r3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (Abs_real_int (left r1, right r3)) = right r3", "by (metis  Rep_real_int_cases Rep_real_int_inverse assm fst_conv mem_Collect_eq\n        order_trans real_int.left_leq_right real_int.rchop_def right.rep_eq snd_conv)"], ["proof (state)\nthis:\n  right (Abs_real_int (left r1, right r3)) = right r3\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4) \\<Longrightarrow>\n    R_Chop(r,Abs_real_int (left r1, right r3),r4) \\<and>\n    R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "have g1:\"R_Chop(r, ?y1, r4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,Abs_real_int (left r1, right r3),r4)", "using assm  rchop_def r1 l1"], ["proof (prove)\nusing this:\n  R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  right (Abs_real_int (left r1, right r3)) = right r3\n  left r1 = left (Abs_real_int (left r1, right r3))\n\ngoal (1 subgoal):\n 1. R_Chop(r,Abs_real_int (left r1, right r3),r4)", "by simp"], ["proof (state)\nthis:\n  R_Chop(r,Abs_real_int (left r1, right r3),r4)\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4) \\<Longrightarrow>\n    R_Chop(r,Abs_real_int (left r1, right r3),r4) \\<and>\n    R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "have g2:\"R_Chop(?y1, r1,r3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "using assm  rchop_def r1 l1"], ["proof (prove)\nusing this:\n  R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  right (Abs_real_int (left r1, right r3)) = right r3\n  left r1 = left (Abs_real_int (left r1, right r3))\n\ngoal (1 subgoal):\n 1. R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "by simp"], ["proof (state)\nthis:\n  R_Chop(Abs_real_int (left r1, right r3),r1,r3)\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r2,r3,r4) \\<Longrightarrow>\n    R_Chop(r,Abs_real_int (left r1, right r3),r4) \\<and>\n    R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "show \"R_Chop(r, ?y1, r4) \\<and> R_Chop(?y1, r1,r3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,Abs_real_int (left r1, right r3),r4) \\<and>\n    R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "using g1 g2"], ["proof (prove)\nusing this:\n  R_Chop(r,Abs_real_int (left r1, right r3),r4)\n  R_Chop(Abs_real_int (left r1, right r3),r1,r3)\n\ngoal (1 subgoal):\n 1. R_Chop(r,Abs_real_int (left r1, right r3),r4) \\<and>\n    R_Chop(Abs_real_int (left r1, right r3),r1,r3)", "by simp"], ["proof (state)\nthis:\n  R_Chop(r,Abs_real_int (left r1, right r3),r4) \\<and>\n  R_Chop(Abs_real_int (left r1, right r3),r1,r3)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma chop_assoc2: \n  \"R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \n    \\<longrightarrow> R_Chop(r,r3, Abs_real_int(left r4, right r2)) \n      \\<and> R_Chop(Abs_real_int(left r4, right r2), r4,r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \\<longrightarrow>\n    R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \\<Longrightarrow>\n    R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "assume assm: \"R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4)\""], ["proof (state)\nthis:\n  R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4)\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \\<Longrightarrow>\n    R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "let ?y1 = \" Abs_real_int(left r4, right r2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \\<Longrightarrow>\n    R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "have \"left ?y1 \\<le> right ?y1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (Abs_real_int (left r4, right r2))\n    \\<le> right (Abs_real_int (left r4, right r2))", "using real_int.left_leq_right"], ["proof (prove)\nusing this:\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. left (Abs_real_int (left r4, right r2))\n    \\<le> right (Abs_real_int (left r4, right r2))", "by blast"], ["proof (state)\nthis:\n  left (Abs_real_int (left r4, right r2))\n  \\<le> right (Abs_real_int (left r4, right r2))\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \\<Longrightarrow>\n    R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "have f1: \"left r4 = right r3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left r4 = right r3", "using assm real_int.rchop_def"], ["proof (prove)\nusing this:\n  R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. left r4 = right r3", "by force"], ["proof (state)\nthis:\n  left r4 = right r3\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \\<Longrightarrow>\n    R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "then"], ["proof (chain)\npicking this:\n  left r4 = right r3", "have right:\"right r3 \\<le> right r2\""], ["proof (prove)\nusing this:\n  left r4 = right r3\n\ngoal (1 subgoal):\n 1. right r3 \\<le> right r2", "by (metis (no_types) assm order_trans real_int.left_leq_right real_int.rchop_def)"], ["proof (state)\nthis:\n  right r3 \\<le> right r2\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \\<Longrightarrow>\n    R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "then"], ["proof (chain)\npicking this:\n  right r3 \\<le> right r2", "have l1:\"left ?y1 = left r4\""], ["proof (prove)\nusing this:\n  right r3 \\<le> right r2\n\ngoal (1 subgoal):\n 1. left (Abs_real_int (left r4, right r2)) = left r4", "using f1"], ["proof (prove)\nusing this:\n  right r3 \\<le> right r2\n  left r4 = right r3\n\ngoal (1 subgoal):\n 1. left (Abs_real_int (left r4, right r2)) = left r4", "by (simp add: Abs_real_int_inverse)"], ["proof (state)\nthis:\n  left (Abs_real_int (left r4, right r2)) = left r4\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \\<Longrightarrow>\n    R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "have r1:\"right ?y1 = right r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (Abs_real_int (left r4, right r2)) = right r2", "using Abs_real_int_inverse right f1"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  right r3 \\<le> right r2\n  left r4 = right r3\n\ngoal (1 subgoal):\n 1. right (Abs_real_int (left r4, right r2)) = right r2", "by auto"], ["proof (state)\nthis:\n  right (Abs_real_int (left r4, right r2)) = right r2\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \\<Longrightarrow>\n    R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "have g1:\"R_Chop(r, r3, ?y1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,r3,Abs_real_int (left r4, right r2))", "using assm  rchop_def r1 l1"], ["proof (prove)\nusing this:\n  R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  right (Abs_real_int (left r4, right r2)) = right r2\n  left (Abs_real_int (left r4, right r2)) = left r4\n\ngoal (1 subgoal):\n 1. R_Chop(r,r3,Abs_real_int (left r4, right r2))", "by simp"], ["proof (state)\nthis:\n  R_Chop(r,r3,Abs_real_int (left r4, right r2))\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \\<Longrightarrow>\n    R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "have g2:\"R_Chop(?y1, r4,r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "using assm  rchop_def r1 l1"], ["proof (prove)\nusing this:\n  R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  right (Abs_real_int (left r4, right r2)) = right r2\n  left (Abs_real_int (left r4, right r2)) = left r4\n\ngoal (1 subgoal):\n 1. R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "by simp"], ["proof (state)\nthis:\n  R_Chop(Abs_real_int (left r4, right r2),r4,r2)\n\ngoal (1 subgoal):\n 1. R_Chop(r,r1,r2) \\<and> R_Chop(r1,r3,r4) \\<Longrightarrow>\n    R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "show \"R_Chop(r, r3, ?y1) \\<and> R_Chop(?y1, r4,r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "using g1 g2"], ["proof (prove)\nusing this:\n  R_Chop(r,r3,Abs_real_int (left r4, right r2))\n  R_Chop(Abs_real_int (left r4, right r2),r4,r2)\n\ngoal (1 subgoal):\n 1. R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n    R_Chop(Abs_real_int (left r4, right r2),r4,r2)", "by simp"], ["proof (state)\nthis:\n  R_Chop(r,r3,Abs_real_int (left r4, right r2)) \\<and>\n  R_Chop(Abs_real_int (left r4, right r2),r4,r2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma chop_leq1:\"R_Chop(r,s,t) \\<longrightarrow> s \\<le> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,s,t) \\<longrightarrow> s \\<le> r", "by (metis (full_types) less_eq_real_int_def order_refl real_int.left_leq_right real_int.rchop_def)"], ["", "lemma chop_leq2:\"R_Chop(r,s,t) \\<longrightarrow> t \\<le> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,s,t) \\<longrightarrow> t \\<le> r", "by (metis (full_types) less_eq_real_int_def order_refl real_int.left_leq_right real_int.rchop_def)"], ["", "lemma chop_empty1:\"R_Chop(r,s,t) \\<and> \\<parallel>s\\<parallel> = 0 \\<longrightarrow> r = t \""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,s,t) \\<and> \\<parallel>s\\<parallel> = 0 \\<longrightarrow> r = t", "by (metis (no_types, hide_lams) Rep_real_int_inject left.rep_eq prod.collapse\n      real_int.length_zero_iff_borders_eq real_int.rchop_def right.rep_eq)"], ["", "lemma chop_empty2:\"R_Chop(r,s,t) \\<and> \\<parallel>t\\<parallel> = 0 \\<longrightarrow> r = s \""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(r,s,t) \\<and> \\<parallel>t\\<parallel> = 0 \\<longrightarrow> r = s", "by (metis (no_types, hide_lams) Rep_real_int_inject left.rep_eq prod.collapse\n      real_int.length_zero_iff_borders_eq real_int.rchop_def right.rep_eq)"], ["", "end"], ["", "(*lemmas[simp] = length_dict *)"], ["", "end"]]}