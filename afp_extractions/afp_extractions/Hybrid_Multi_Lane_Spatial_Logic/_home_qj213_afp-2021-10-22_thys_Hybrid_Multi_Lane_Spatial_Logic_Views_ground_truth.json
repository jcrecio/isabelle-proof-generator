{"file_name": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic/Views.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic", "problem_names": ["lemma h_chop_middle1:\"(v=u\\<parallel>w) \\<longrightarrow> left (ext v) \\<le> right (ext u)\"", "lemma h_chop_middle2:\"(v=u\\<parallel>w) \\<longrightarrow> right (ext v) \\<ge> left (ext w)\"", "lemma horizontal_chop1: \" \\<exists> u w. (v=u\\<parallel>w)\"", "lemma horizontal_chop_empty_right :\"\\<forall>v. \\<exists> u. (v=v\\<parallel>u)\"", "lemma horizontal_chop_empty_left :\"\\<forall>v. \\<exists>u. (v=u\\<parallel>v)\"", "lemma horizontal_chop_non_empty:\n  \"\\<parallel>ext v\\<parallel> > 0 \\<longrightarrow> (\\<exists>u w. (v=u\\<parallel>w) \\<and> \\<parallel>ext u\\<parallel> > 0 \\<and> \\<parallel>ext w\\<parallel>>0)\"", "lemma horizontal_chop_split_add:\n  \"x \\<ge> 0 \\<and> y \\<ge> 0 \\<longrightarrow> \\<parallel>ext v\\<parallel> = x+y \\<longrightarrow> (\\<exists>u w. (v=u\\<parallel>w) \\<and> \\<parallel>ext u\\<parallel> = x \\<and> \\<parallel>ext w\\<parallel> = y)\"", "lemma horizontal_chop_assoc1:\n  \"(v=v1\\<parallel>v2) \\<and> (v2=v3\\<parallel>v4) \\<longrightarrow> (\\<exists>v'. (v=v'\\<parallel>v4) \\<and> (v'=v1\\<parallel>v3))\"", "lemma horizontal_chop_assoc2:\n  \"(v=v1\\<parallel>v2) \\<and> (v1=v3\\<parallel>v4) \\<longrightarrow> (\\<exists>v'. (v=v3\\<parallel>v') \\<and> (v'=v4\\<parallel>v2))\"", "lemma horizontal_chop_width_stable:\"(v=u\\<parallel>w)\\<longrightarrow>|lan v|=|lan u|\\<and>|lan v|=|lan w|\"", "lemma horizontal_chop_own_trans:\"(v=u\\<parallel>w) \\<longrightarrow> own u = own w\"", "lemma vertical_chop1:\"\\<forall>v. \\<exists> u w. (v=u--w)\"", "lemma vertical_chop_empty_down:\"\\<forall>v.\\<exists> u.(v=v--u)\"", "lemma vertical_chop_empty_up:\"\\<forall>v.\\<exists>u.(v=u--v)\"", "lemma vertical_chop_assoc1:\n  \"(v=v1--v2) \\<and> (v2=v3--v4) \\<longrightarrow> (\\<exists>v'. (v=v'--v4) \\<and> (v'=v1--v3))\"", "lemma vertical_chop_assoc2:\n  \"(v=v1--v2) \\<and> (v1=v3--v4) \\<longrightarrow> (\\<exists>v'. (v=v3--v') \\<and> (v'=v4--v2))\"", "lemma vertical_chop_singleton:\n  \"(v=u--w) \\<and> |lan v| = 1 \\<longrightarrow> ( |lan u| = 0 \\<or> |lan w| = 0)\"", "lemma vertical_chop_add1:\"(v=u--w) \\<longrightarrow> |lan v| = |lan u| + |lan w|\"", "lemma vertical_chop_add2:\n  \"|lan v| = x+y \\<longrightarrow> (\\<exists> u w.  (v=u--w) \\<and> |lan u| = x \\<and> |lan w| = y)\"", "lemma vertical_chop_length_stable:\n  \"(v=u--w) \\<longrightarrow> \\<parallel>ext v\\<parallel> = \\<parallel>ext u\\<parallel> \\<and> \\<parallel>ext v\\<parallel> = \\<parallel>ext w\\<parallel>\"", "lemma vertical_chop_own_trans:\"(v=u--w) \\<longrightarrow> own u = own w\"", "lemma vertical_chop_width_mon:\n  \"(v=v1--v2) \\<and> (v2=v3--v4) \\<and> |lan v3| = x \\<longrightarrow> |lan v| \\<ge> x\"", "lemma horizontal_chop_leq1:\"(v=u\\<parallel>w) \\<longrightarrow> u \\<le> v\"", "lemma horizontal_chop_leq2:\"(v=u\\<parallel>w) \\<longrightarrow> w \\<le> v\"", "lemma vertical_chop_leq1:\"(v=u--w) \\<longrightarrow> u \\<le> v\"", "lemma vertical_chop_leq2:\"(v=u--w) \\<longrightarrow> w \\<le> v\"", "lemma somewhere_leq:\n  \"v \\<le> v' \\<longleftrightarrow> (\\<exists>v1 v2 v3 vl vr vu vd. \n                (v'=vl\\<parallel>v1) \\<and> (v1=v2\\<parallel>vr) \\<and> (v2=vd--v3) \\<and> (v3=v--vu))\"", "lemma switch_unique:\"(v =c> u) \\<and> (v =c> w) \\<longrightarrow>u = w\"", "lemma switch_exists:\"\\<exists>c u.( v=c>u)\"", "lemma switch_always_exists:\"\\<forall>c. \\<exists>u. (v=c>u)\"", "lemma switch_origin:\" \\<exists>u. (u=(own v)>v)\"", "lemma switch_refl:\"(v=(own v)>v)\"", "lemma switch_symm:\"(v=c>u) \\<longrightarrow> (u=(own v)>v)\"", "lemma switch_trans:\"(v=c>u) \\<and> (u=d>w) \\<longrightarrow> (v=d>w)\"", "lemma switch_triangle:\"(v=c>u) \\<and> (v=d>w) \\<longrightarrow> (u=d>w)\"", "lemma switch_hchop1:\n  \"(v=v1\\<parallel>v2) \\<and> (v=c>v') \\<longrightarrow>\n     (\\<exists> v1' v2'. (v1 =c> v1') \\<and> (v2 =c> v2') \\<and> (v'=v1'\\<parallel>v2'))\"", "lemma switch_hchop2:\n  \"(v'=v1'\\<parallel>v2') \\<and> (v=c>v') \\<longrightarrow> \n      (\\<exists> v1 v2. (v1 =c> v1') \\<and> (v2 =c> v2') \\<and> (v=v1\\<parallel>v2))\"", "lemma switch_vchop1:\n  \"(v=v1--v2) \\<and> (v=c>v') \\<longrightarrow> \n      (\\<exists> v1' v2'. (v1 =c> v1') \\<and> (v2 =c> v2') \\<and> (v'=v1'--v2'))\"", "lemma switch_vchop2:\n  \"(v'=v1'--v2') \\<and> (v=c>v') \\<longrightarrow>\n       (\\<exists> v1 v2. (v1 =c> v1') \\<and> (v2 =c> v2') \\<and> (v=v1--v2))\"", "lemma switch_leq:\"u' \\<le> u \\<and> (v=c>u) \\<longrightarrow> (\\<exists>v'. (v'=c>u') \\<and> v' \\<le> v)\""], "translations": [["", "lemma h_chop_middle1:\"(v=u\\<parallel>w) \\<longrightarrow> left (ext v) \\<le> right (ext u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<longrightarrow> left (ext v) \\<le> right (ext u)", "by (metis hchop_def real_int.rchop_def real_int.left_leq_right)"], ["", "lemma h_chop_middle2:\"(v=u\\<parallel>w) \\<longrightarrow> right (ext v) \\<ge> left (ext w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<longrightarrow> left (ext w) \\<le> right (ext v)", "using real_int.left_leq_right real_int.rchop_def view.hchop_def"], ["proof (prove)\nusing this:\n  left ?r \\<le> right ?r\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<longrightarrow> left (ext w) \\<le> right (ext v)", "by auto"], ["", "lemma horizontal_chop1: \" \\<exists> u w. (v=u\\<parallel>w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u w. v=u\\<parallel>w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>u w. v=u\\<parallel>w", "have real_chop:\"\\<exists>x1 x2.  R_Chop(ext v, x1,x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x1 x2. R_Chop(ext v,x1,x2)", "using real_int.chop_singleton_left"], ["proof (prove)\nusing this:\n  \\<forall>r. \\<exists>s. R_Chop(r,s,r)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2. R_Chop(ext v,x1,x2)", "by force"], ["proof (state)\nthis:\n  \\<exists>x1 x2. R_Chop(ext v,x1,x2)\n\ngoal (1 subgoal):\n 1. \\<exists>u w. v=u\\<parallel>w", "obtain x1 and x2 where x1_x2_def:\" R_Chop(ext v, x1,x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x1 x2.\n        R_Chop(ext v,x1,x2) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using real_chop"], ["proof (prove)\nusing this:\n  \\<exists>x1 x2. R_Chop(ext v,x1,x2)\n\ngoal (1 subgoal):\n 1. (\\<And>x1 x2.\n        R_Chop(ext v,x1,x2) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  R_Chop(ext v,x1,x2)\n\ngoal (1 subgoal):\n 1. \\<exists>u w. v=u\\<parallel>w", "obtain V1 and V2 \n    where v1:\"V1 = \\<lparr> ext = x1, lan = lan v, own = own v\\<rparr>\" \n    and v2:\"V2 = \\<lparr> ext = x2,lan= lan v, own = own v\\<rparr> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>V1 V2.\n        \\<lbrakk>V1 = \\<lparr>ext = x1, lan = lan v, own = own v\\<rparr>;\n         V2 = \\<lparr>ext = x2, lan = lan v, own = own v\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  V1 = \\<lparr>ext = x1, lan = lan v, own = own v\\<rparr>\n  V2 = \\<lparr>ext = x2, lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>u w. v=u\\<parallel>w", "from v1 and v2"], ["proof (chain)\npicking this:\n  V1 = \\<lparr>ext = x1, lan = lan v, own = own v\\<rparr>\n  V2 = \\<lparr>ext = x2, lan = lan v, own = own v\\<rparr>", "have \"v=V1\\<parallel>V2\""], ["proof (prove)\nusing this:\n  V1 = \\<lparr>ext = x1, lan = lan v, own = own v\\<rparr>\n  V2 = \\<lparr>ext = x2, lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=V1\\<parallel>V2", "using hchop_def x1_x2_def"], ["proof (prove)\nusing this:\n  V1 = \\<lparr>ext = x1, lan = lan v, own = own v\\<rparr>\n  V2 = \\<lparr>ext = x2, lan = lan v, own = own v\\<rparr>\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  R_Chop(ext v,x1,x2)\n\ngoal (1 subgoal):\n 1. v=V1\\<parallel>V2", "by (simp)"], ["proof (state)\nthis:\n  v=V1\\<parallel>V2\n\ngoal (1 subgoal):\n 1. \\<exists>u w. v=u\\<parallel>w", "thus ?thesis"], ["proof (prove)\nusing this:\n  v=V1\\<parallel>V2\n\ngoal (1 subgoal):\n 1. \\<exists>u w. v=u\\<parallel>w", "by blast"], ["proof (state)\nthis:\n  \\<exists>u w. v=u\\<parallel>w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma horizontal_chop_empty_right :\"\\<forall>v. \\<exists> u. (v=v\\<parallel>u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v. \\<exists>u. v=v\\<parallel>u", "using hchop_def real_int.chop_singleton_right"], ["proof (prove)\nusing this:\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<forall>r. \\<exists>s. R_Chop(r,r,s)\n\ngoal (1 subgoal):\n 1. \\<forall>v. \\<exists>u. v=v\\<parallel>u", "by (metis (no_types, hide_lams) select_convs)"], ["", "lemma horizontal_chop_empty_left :\"\\<forall>v. \\<exists>u. (v=u\\<parallel>v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v. \\<exists>u. v=u\\<parallel>v", "using hchop_def real_int.chop_singleton_left"], ["proof (prove)\nusing this:\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<forall>r. \\<exists>s. R_Chop(r,s,r)\n\ngoal (1 subgoal):\n 1. \\<forall>v. \\<exists>u. v=u\\<parallel>v", "by (metis (no_types, hide_lams) select_convs)"], ["", "lemma horizontal_chop_non_empty:\n  \"\\<parallel>ext v\\<parallel> > 0 \\<longrightarrow> (\\<exists>u w. (v=u\\<parallel>w) \\<and> \\<parallel>ext u\\<parallel> > 0 \\<and> \\<parallel>ext w\\<parallel>>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < \\<parallel>ext v\\<parallel> \\<longrightarrow>\n    (\\<exists>u w.\n        v=u\\<parallel>w \\<and>\n        0 < \\<parallel>ext u\\<parallel> \\<and>\n        0 < \\<parallel>ext w\\<parallel>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < \\<parallel>ext v\\<parallel> \\<Longrightarrow>\n    \\<exists>u w.\n       v=u\\<parallel>w \\<and>\n       0 < \\<parallel>ext u\\<parallel> \\<and>\n       0 < \\<parallel>ext w\\<parallel>", "assume \"\\<parallel>ext v\\<parallel> > 0\""], ["proof (state)\nthis:\n  0 < \\<parallel>ext v\\<parallel>\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>ext v\\<parallel> \\<Longrightarrow>\n    \\<exists>u w.\n       v=u\\<parallel>w \\<and>\n       0 < \\<parallel>ext u\\<parallel> \\<and>\n       0 < \\<parallel>ext w\\<parallel>", "then"], ["proof (chain)\npicking this:\n  0 < \\<parallel>ext v\\<parallel>", "obtain l1 and l2 \n    where chop:\" R_Chop(ext v, l1,l2) \\<and> \\<parallel>l1\\<parallel> > 0 \\<and> \\<parallel>l2\\<parallel> > 0\""], ["proof (prove)\nusing this:\n  0 < \\<parallel>ext v\\<parallel>\n\ngoal (1 subgoal):\n 1. (\\<And>l1 l2.\n        R_Chop(ext v,l1,l2) \\<and>\n        0 < \\<parallel>l1\\<parallel> \\<and>\n        0 < \\<parallel>l2\\<parallel> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using real_int.chop_dense"], ["proof (prove)\nusing this:\n  0 < \\<parallel>ext v\\<parallel>\n  0 < \\<parallel>?r\\<parallel> \\<longrightarrow>\n  (\\<exists>s t.\n      R_Chop(?r,s,t) \\<and>\n      0 < \\<parallel>s\\<parallel> \\<and> 0 < \\<parallel>t\\<parallel>)\n\ngoal (1 subgoal):\n 1. (\\<And>l1 l2.\n        R_Chop(ext v,l1,l2) \\<and>\n        0 < \\<parallel>l1\\<parallel> \\<and>\n        0 < \\<parallel>l2\\<parallel> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  R_Chop(ext v,l1,l2) \\<and>\n  0 < \\<parallel>l1\\<parallel> \\<and> 0 < \\<parallel>l2\\<parallel>\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>ext v\\<parallel> \\<Longrightarrow>\n    \\<exists>u w.\n       v=u\\<parallel>w \\<and>\n       0 < \\<parallel>ext u\\<parallel> \\<and>\n       0 < \\<parallel>ext w\\<parallel>", "obtain V1 where v1_def:\"V1 = \\<lparr> ext = l1, lan = lan v, own = own v \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>V1.\n        V1 =\n        \\<lparr>ext = l1, lan = lan v, own = own v\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  V1 = \\<lparr>ext = l1, lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>ext v\\<parallel> \\<Longrightarrow>\n    \\<exists>u w.\n       v=u\\<parallel>w \\<and>\n       0 < \\<parallel>ext u\\<parallel> \\<and>\n       0 < \\<parallel>ext w\\<parallel>", "obtain V2 where v2_def:\"V2 = \\<lparr> ext = l2, lan = lan v, own = own v \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>V2.\n        V2 =\n        \\<lparr>ext = l2, lan = lan v, own = own v\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  V2 = \\<lparr>ext = l2, lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>ext v\\<parallel> \\<Longrightarrow>\n    \\<exists>u w.\n       v=u\\<parallel>w \\<and>\n       0 < \\<parallel>ext u\\<parallel> \\<and>\n       0 < \\<parallel>ext w\\<parallel>", "then"], ["proof (chain)\npicking this:\n  V2 = \\<lparr>ext = l2, lan = lan v, own = own v\\<rparr>", "have  \"(v=V1\\<parallel>V2) \\<and> \\<parallel>ext V1\\<parallel> > 0 \\<and> \\<parallel>ext V2\\<parallel>>0\""], ["proof (prove)\nusing this:\n  V2 = \\<lparr>ext = l2, lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=V1\\<parallel>V2 \\<and>\n    0 < \\<parallel>ext V1\\<parallel> \\<and> 0 < \\<parallel>ext V2\\<parallel>", "using  chop hchop_def v1_def"], ["proof (prove)\nusing this:\n  V2 = \\<lparr>ext = l2, lan = lan v, own = own v\\<rparr>\n  R_Chop(ext v,l1,l2) \\<and>\n  0 < \\<parallel>l1\\<parallel> \\<and> 0 < \\<parallel>l2\\<parallel>\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  V1 = \\<lparr>ext = l1, lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=V1\\<parallel>V2 \\<and>\n    0 < \\<parallel>ext V1\\<parallel> \\<and> 0 < \\<parallel>ext V2\\<parallel>", "by (simp)"], ["proof (state)\nthis:\n  v=V1\\<parallel>V2 \\<and>\n  0 < \\<parallel>ext V1\\<parallel> \\<and> 0 < \\<parallel>ext V2\\<parallel>\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>ext v\\<parallel> \\<Longrightarrow>\n    \\<exists>u w.\n       v=u\\<parallel>w \\<and>\n       0 < \\<parallel>ext u\\<parallel> \\<and>\n       0 < \\<parallel>ext w\\<parallel>", "then"], ["proof (chain)\npicking this:\n  v=V1\\<parallel>V2 \\<and>\n  0 < \\<parallel>ext V1\\<parallel> \\<and> 0 < \\<parallel>ext V2\\<parallel>", "show \" (\\<exists>V1 V2. (v=V1\\<parallel>V2) \\<and> \\<parallel>ext V1\\<parallel> > 0 \\<and> \\<parallel>ext V2\\<parallel>>0)\""], ["proof (prove)\nusing this:\n  v=V1\\<parallel>V2 \\<and>\n  0 < \\<parallel>ext V1\\<parallel> \\<and> 0 < \\<parallel>ext V2\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<exists>V1 V2.\n       v=V1\\<parallel>V2 \\<and>\n       0 < \\<parallel>ext V1\\<parallel> \\<and>\n       0 < \\<parallel>ext V2\\<parallel>", "by blast"], ["proof (state)\nthis:\n  \\<exists>V1 V2.\n     v=V1\\<parallel>V2 \\<and>\n     0 < \\<parallel>ext V1\\<parallel> \\<and>\n     0 < \\<parallel>ext V2\\<parallel>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma horizontal_chop_split_add:\n  \"x \\<ge> 0 \\<and> y \\<ge> 0 \\<longrightarrow> \\<parallel>ext v\\<parallel> = x+y \\<longrightarrow> (\\<exists>u w. (v=u\\<parallel>w) \\<and> \\<parallel>ext u\\<parallel> = x \\<and> \\<parallel>ext w\\<parallel> = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> x \\<and> 0 \\<le> y \\<longrightarrow>\n    \\<parallel>ext v\\<parallel> = x + y \\<longrightarrow>\n    (\\<exists>u w.\n        v=u\\<parallel>w \\<and>\n        \\<parallel>ext u\\<parallel> = x \\<and>\n        \\<parallel>ext w\\<parallel> = y)", "proof (rule impI)+"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x \\<and> 0 \\<le> y;\n     \\<parallel>ext v\\<parallel> = x + y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u w.\n                         v=u\\<parallel>w \\<and>\n                         \\<parallel>ext u\\<parallel> = x \\<and>\n                         \\<parallel>ext w\\<parallel> = y", "assume geq_0:\"x \\<ge> 0 \\<and> y \\<ge> 0\" and len_v:\"\\<parallel>ext v\\<parallel> = x+y\""], ["proof (state)\nthis:\n  0 \\<le> x \\<and> 0 \\<le> y\n  \\<parallel>ext v\\<parallel> = x + y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x \\<and> 0 \\<le> y;\n     \\<parallel>ext v\\<parallel> = x + y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u w.\n                         v=u\\<parallel>w \\<and>\n                         \\<parallel>ext u\\<parallel> = x \\<and>\n                         \\<parallel>ext w\\<parallel> = y", "obtain u \n    where v1_def: \n      \"u = \\<lparr> ext = Abs_real_int (left (ext v), left (ext v) + x), lan = lan v, own = (own v) \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        u =\n        \\<lparr>ext = Abs_real_int (left (ext v), left (ext v) + x),\n           lan = lan v, own = own v\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  u =\n  \\<lparr>ext = Abs_real_int (left (ext v), left (ext v) + x), lan = lan v,\n     own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x \\<and> 0 \\<le> y;\n     \\<parallel>ext v\\<parallel> = x + y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u w.\n                         v=u\\<parallel>w \\<and>\n                         \\<parallel>ext u\\<parallel> = x \\<and>\n                         \\<parallel>ext w\\<parallel> = y", "have v1_in_type:\"(left (ext v), left (ext v) + x) \\<in> {r::(real*real) . fst r \\<le> snd r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (left (ext v), left (ext v) + x) \\<in> {r. fst r \\<le> snd r}", "by (simp add: geq_0)"], ["proof (state)\nthis:\n  (left (ext v), left (ext v) + x) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x \\<and> 0 \\<le> y;\n     \\<parallel>ext v\\<parallel> = x + y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u w.\n                         v=u\\<parallel>w \\<and>\n                         \\<parallel>ext u\\<parallel> = x \\<and>\n                         \\<parallel>ext w\\<parallel> = y", "obtain w \n    where v2_def:\n      \"w = \\<lparr> ext = Abs_real_int (left (ext v)+x, left (ext v) + (x+y)), \n             lan = (lan v), own = (own v) \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>w.\n        w =\n        \\<lparr>ext =\n                  Abs_real_int (left (ext v) + x, left (ext v) + (x + y)),\n           lan = lan v, own = own v\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  w =\n  \\<lparr>ext = Abs_real_int (left (ext v) + x, left (ext v) + (x + y)),\n     lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x \\<and> 0 \\<le> y;\n     \\<parallel>ext v\\<parallel> = x + y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u w.\n                         v=u\\<parallel>w \\<and>\n                         \\<parallel>ext u\\<parallel> = x \\<and>\n                         \\<parallel>ext w\\<parallel> = y", "have v2_in_type:\n    \"(left (ext v)+x, left (ext v) + (x+y)) \\<in> {r::(real*real) . fst r \\<le> snd r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (left (ext v) + x, left (ext v) + (x + y)) \\<in> {r. fst r \\<le> snd r}", "by (simp add: geq_0)"], ["proof (state)\nthis:\n  (left (ext v) + x, left (ext v) + (x + y)) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x \\<and> 0 \\<le> y;\n     \\<parallel>ext v\\<parallel> = x + y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u w.\n                         v=u\\<parallel>w \\<and>\n                         \\<parallel>ext u\\<parallel> = x \\<and>\n                         \\<parallel>ext w\\<parallel> = y", "from v1_def and geq_0"], ["proof (chain)\npicking this:\n  u =\n  \\<lparr>ext = Abs_real_int (left (ext v), left (ext v) + x), lan = lan v,\n     own = own v\\<rparr>\n  0 \\<le> x \\<and> 0 \\<le> y", "have len_v1:\"\\<parallel>ext u\\<parallel> = x\""], ["proof (prove)\nusing this:\n  u =\n  \\<lparr>ext = Abs_real_int (left (ext v), left (ext v) + x), lan = lan v,\n     own = own v\\<rparr>\n  0 \\<le> x \\<and> 0 \\<le> y\n\ngoal (1 subgoal):\n 1. \\<parallel>ext u\\<parallel> = x", "using v1_in_type"], ["proof (prove)\nusing this:\n  u =\n  \\<lparr>ext = Abs_real_int (left (ext v), left (ext v) + x), lan = lan v,\n     own = own v\\<rparr>\n  0 \\<le> x \\<and> 0 \\<le> y\n  (left (ext v), left (ext v) + x) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. \\<parallel>ext u\\<parallel> = x", "by (simp add: Abs_real_int_inverse  real_int.length_def)"], ["proof (state)\nthis:\n  \\<parallel>ext u\\<parallel> = x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x \\<and> 0 \\<le> y;\n     \\<parallel>ext v\\<parallel> = x + y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u w.\n                         v=u\\<parallel>w \\<and>\n                         \\<parallel>ext u\\<parallel> = x \\<and>\n                         \\<parallel>ext w\\<parallel> = y", "from v2_def and geq_0"], ["proof (chain)\npicking this:\n  w =\n  \\<lparr>ext = Abs_real_int (left (ext v) + x, left (ext v) + (x + y)),\n     lan = lan v, own = own v\\<rparr>\n  0 \\<le> x \\<and> 0 \\<le> y", "have len_v2:\"\\<parallel>ext w\\<parallel>= y\""], ["proof (prove)\nusing this:\n  w =\n  \\<lparr>ext = Abs_real_int (left (ext v) + x, left (ext v) + (x + y)),\n     lan = lan v, own = own v\\<rparr>\n  0 \\<le> x \\<and> 0 \\<le> y\n\ngoal (1 subgoal):\n 1. \\<parallel>ext w\\<parallel> = y", "using v2_in_type"], ["proof (prove)\nusing this:\n  w =\n  \\<lparr>ext = Abs_real_int (left (ext v) + x, left (ext v) + (x + y)),\n     lan = lan v, own = own v\\<rparr>\n  0 \\<le> x \\<and> 0 \\<le> y\n  (left (ext v) + x, left (ext v) + (x + y)) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. \\<parallel>ext w\\<parallel> = y", "by (simp add: Abs_real_int_inverse  real_int.length_def)"], ["proof (state)\nthis:\n  \\<parallel>ext w\\<parallel> = y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x \\<and> 0 \\<le> y;\n     \\<parallel>ext v\\<parallel> = x + y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u w.\n                         v=u\\<parallel>w \\<and>\n                         \\<parallel>ext u\\<parallel> = x \\<and>\n                         \\<parallel>ext w\\<parallel> = y", "from v1_def and v2_def"], ["proof (chain)\npicking this:\n  u =\n  \\<lparr>ext = Abs_real_int (left (ext v), left (ext v) + x), lan = lan v,\n     own = own v\\<rparr>\n  w =\n  \\<lparr>ext = Abs_real_int (left (ext v) + x, left (ext v) + (x + y)),\n     lan = lan v, own = own v\\<rparr>", "have \"(v=u\\<parallel>w)\""], ["proof (prove)\nusing this:\n  u =\n  \\<lparr>ext = Abs_real_int (left (ext v), left (ext v) + x), lan = lan v,\n     own = own v\\<rparr>\n  w =\n  \\<lparr>ext = Abs_real_int (left (ext v) + x, left (ext v) + (x + y)),\n     lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=u\\<parallel>w", "using Abs_real_int_inverse fst_conv hchop_def len_v prod.collapse real_int.rchop_def\n      real_int.length_def snd_conv v1_in_type v2_in_type"], ["proof (prove)\nusing this:\n  u =\n  \\<lparr>ext = Abs_real_int (left (ext v), left (ext v) + x), lan = lan v,\n     own = own v\\<rparr>\n  w =\n  \\<lparr>ext = Abs_real_int (left (ext v) + x, left (ext v) + (x + y)),\n     lan = lan v, own = own v\\<rparr>\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  fst (?x1.0, ?x2.0) = ?x1.0\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<parallel>ext v\\<parallel> = x + y\n  (fst ?prod, snd ?prod) = ?prod\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n  snd (?x1.0, ?x2.0) = ?x2.0\n  (left (ext v), left (ext v) + x) \\<in> {r. fst r \\<le> snd r}\n  (left (ext v) + x, left (ext v) + (x + y)) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. v=u\\<parallel>w", "by auto"], ["proof (state)\nthis:\n  v=u\\<parallel>w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x \\<and> 0 \\<le> y;\n     \\<parallel>ext v\\<parallel> = x + y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u w.\n                         v=u\\<parallel>w \\<and>\n                         \\<parallel>ext u\\<parallel> = x \\<and>\n                         \\<parallel>ext w\\<parallel> = y", "with len_v1 and len_v2"], ["proof (chain)\npicking this:\n  \\<parallel>ext u\\<parallel> = x\n  \\<parallel>ext w\\<parallel> = y\n  v=u\\<parallel>w", "have \"(v=u\\<parallel>w) \\<and> \\<parallel>ext u\\<parallel> = x \\<and> \\<parallel>ext w\\<parallel> = y\""], ["proof (prove)\nusing this:\n  \\<parallel>ext u\\<parallel> = x\n  \\<parallel>ext w\\<parallel> = y\n  v=u\\<parallel>w\n\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<and>\n    \\<parallel>ext u\\<parallel> = x \\<and> \\<parallel>ext w\\<parallel> = y", "by simp"], ["proof (state)\nthis:\n  v=u\\<parallel>w \\<and>\n  \\<parallel>ext u\\<parallel> = x \\<and> \\<parallel>ext w\\<parallel> = y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x \\<and> 0 \\<le> y;\n     \\<parallel>ext v\\<parallel> = x + y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u w.\n                         v=u\\<parallel>w \\<and>\n                         \\<parallel>ext u\\<parallel> = x \\<and>\n                         \\<parallel>ext w\\<parallel> = y", "thus \"(\\<exists>u w. (v=u\\<parallel>w) \\<and> \\<parallel>ext u\\<parallel> = x \\<and> \\<parallel>ext w\\<parallel> = y)\""], ["proof (prove)\nusing this:\n  v=u\\<parallel>w \\<and>\n  \\<parallel>ext u\\<parallel> = x \\<and> \\<parallel>ext w\\<parallel> = y\n\ngoal (1 subgoal):\n 1. \\<exists>u w.\n       v=u\\<parallel>w \\<and>\n       \\<parallel>ext u\\<parallel> = x \\<and>\n       \\<parallel>ext w\\<parallel> = y", "by blast"], ["proof (state)\nthis:\n  \\<exists>u w.\n     v=u\\<parallel>w \\<and>\n     \\<parallel>ext u\\<parallel> = x \\<and> \\<parallel>ext w\\<parallel> = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma horizontal_chop_assoc1:\n  \"(v=v1\\<parallel>v2) \\<and> (v2=v3\\<parallel>v4) \\<longrightarrow> (\\<exists>v'. (v=v'\\<parallel>v4) \\<and> (v'=v1\\<parallel>v3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v2=v3\\<parallel>v4 \\<longrightarrow>\n    (\\<exists>v'. v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v2=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3", "assume assm:\"(v=v1\\<parallel>v2) \\<and> (v2=v3\\<parallel>v4)\""], ["proof (state)\nthis:\n  v=v1\\<parallel>v2 \\<and> v2=v3\\<parallel>v4\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v2=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3", "obtain v' \n    where v'_def:\n      \"v' =\\<lparr> ext = Abs_real_int(left (ext v1), right (ext v3)),\n             lan = (lan v), own = (own v) \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        v' =\n        \\<lparr>ext = Abs_real_int (left (ext v1), right (ext v3)),\n           lan = lan v, own = own v\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  v' =\n  \\<lparr>ext = Abs_real_int (left (ext v1), right (ext v3)), lan = lan v,\n     own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v2=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3", "hence 1:\"v=v'\\<parallel>v4\""], ["proof (prove)\nusing this:\n  v' =\n  \\<lparr>ext = Abs_real_int (left (ext v1), right (ext v3)), lan = lan v,\n     own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=v'\\<parallel>v4", "using assm real_int.chop_assoc1 hchop_def"], ["proof (prove)\nusing this:\n  v' =\n  \\<lparr>ext = Abs_real_int (left (ext v1), right (ext v3)), lan = lan v,\n     own = own v\\<rparr>\n  v=v1\\<parallel>v2 \\<and> v2=v3\\<parallel>v4\n  R_Chop(?r,?r1.0,?r2.0) \\<and> R_Chop(?r2.0,?r3.0,?r4.0) \\<longrightarrow>\n  R_Chop(?r,Abs_real_int (left ?r1.0, right ?r3.0),?r4.0) \\<and>\n  R_Chop(Abs_real_int (left ?r1.0, right ?r3.0),?r1.0,?r3.0)\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=v'\\<parallel>v4", "by auto"], ["proof (state)\nthis:\n  v=v'\\<parallel>v4\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v2=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3", "have 2:\"v'=v1\\<parallel>v3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v'=v1\\<parallel>v3", "using v'_def assm real_int.chop_assoc1 hchop_def"], ["proof (prove)\nusing this:\n  v' =\n  \\<lparr>ext = Abs_real_int (left (ext v1), right (ext v3)), lan = lan v,\n     own = own v\\<rparr>\n  v=v1\\<parallel>v2 \\<and> v2=v3\\<parallel>v4\n  R_Chop(?r,?r1.0,?r2.0) \\<and> R_Chop(?r2.0,?r3.0,?r4.0) \\<longrightarrow>\n  R_Chop(?r,Abs_real_int (left ?r1.0, right ?r3.0),?r4.0) \\<and>\n  R_Chop(Abs_real_int (left ?r1.0, right ?r3.0),?r1.0,?r3.0)\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v'=v1\\<parallel>v3", "by auto"], ["proof (state)\nthis:\n  v'=v1\\<parallel>v3\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v2=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3", "from 1 and 2"], ["proof (chain)\npicking this:\n  v=v'\\<parallel>v4\n  v'=v1\\<parallel>v3", "have \"(v=v'\\<parallel>v4) \\<and>  (v'=v1\\<parallel>v3)\""], ["proof (prove)\nusing this:\n  v=v'\\<parallel>v4\n  v'=v1\\<parallel>v3\n\ngoal (1 subgoal):\n 1. v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3", "by best"], ["proof (state)\nthis:\n  v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v2=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3", "thus \"(\\<exists>v'. (v=v'\\<parallel>v4)  \\<and> (v'=v1\\<parallel>v3))\""], ["proof (prove)\nusing this:\n  v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3", ".."], ["proof (state)\nthis:\n  \\<exists>v'. v=v'\\<parallel>v4 \\<and> v'=v1\\<parallel>v3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma horizontal_chop_assoc2:\n  \"(v=v1\\<parallel>v2) \\<and> (v1=v3\\<parallel>v4) \\<longrightarrow> (\\<exists>v'. (v=v3\\<parallel>v') \\<and> (v'=v4\\<parallel>v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v1=v3\\<parallel>v4 \\<longrightarrow>\n    (\\<exists>v'. v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v1=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2", "assume assm:\"(v=v1\\<parallel>v2) \\<and> (v1=v3\\<parallel>v4)\""], ["proof (state)\nthis:\n  v=v1\\<parallel>v2 \\<and> v1=v3\\<parallel>v4\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v1=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2", "obtain v' \n    where v'_def:\n      \"v'=\\<lparr> ext = Abs_real_int(left (ext v4),right (ext v2)),\n            lan = (lan v), own = (own v) \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        v' =\n        \\<lparr>ext = Abs_real_int (left (ext v4), right (ext v2)),\n           lan = lan v, own = own v\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  v' =\n  \\<lparr>ext = Abs_real_int (left (ext v4), right (ext v2)), lan = lan v,\n     own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v1=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2", "hence 1:\"v=v3\\<parallel>v'\""], ["proof (prove)\nusing this:\n  v' =\n  \\<lparr>ext = Abs_real_int (left (ext v4), right (ext v2)), lan = lan v,\n     own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=v3\\<parallel>v'", "using assm fst_conv real_int.chop_assoc2 snd_conv hchop_def"], ["proof (prove)\nusing this:\n  v' =\n  \\<lparr>ext = Abs_real_int (left (ext v4), right (ext v2)), lan = lan v,\n     own = own v\\<rparr>\n  v=v1\\<parallel>v2 \\<and> v1=v3\\<parallel>v4\n  fst (?x1.0, ?x2.0) = ?x1.0\n  R_Chop(?r,?r1.0,?r2.0) \\<and> R_Chop(?r1.0,?r3.0,?r4.0) \\<longrightarrow>\n  R_Chop(?r,?r3.0,Abs_real_int (left ?r4.0, right ?r2.0)) \\<and>\n  R_Chop(Abs_real_int (left ?r4.0, right ?r2.0),?r4.0,?r2.0)\n  snd (?x1.0, ?x2.0) = ?x2.0\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=v3\\<parallel>v'", "by auto"], ["proof (state)\nthis:\n  v=v3\\<parallel>v'\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v1=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2", "have 2: \"v'=v4\\<parallel>v2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v'=v4\\<parallel>v2", "using assm real_int.chop_assoc2 v'_def hchop_def"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> v1=v3\\<parallel>v4\n  R_Chop(?r,?r1.0,?r2.0) \\<and> R_Chop(?r1.0,?r3.0,?r4.0) \\<longrightarrow>\n  R_Chop(?r,?r3.0,Abs_real_int (left ?r4.0, right ?r2.0)) \\<and>\n  R_Chop(Abs_real_int (left ?r4.0, right ?r2.0),?r4.0,?r2.0)\n  v' =\n  \\<lparr>ext = Abs_real_int (left (ext v4), right (ext v2)), lan = lan v,\n     own = own v\\<rparr>\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v'=v4\\<parallel>v2", "by auto"], ["proof (state)\nthis:\n  v'=v4\\<parallel>v2\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v1=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2", "from 1 and 2"], ["proof (chain)\npicking this:\n  v=v3\\<parallel>v'\n  v'=v4\\<parallel>v2", "have \"(v=v3\\<parallel>v') \\<and> (v'=v4\\<parallel>v2)\""], ["proof (prove)\nusing this:\n  v=v3\\<parallel>v'\n  v'=v4\\<parallel>v2\n\ngoal (1 subgoal):\n 1. v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2", "by best"], ["proof (state)\nthis:\n  v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v1=v3\\<parallel>v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2", "thus \"(\\<exists>v'. (v=v3\\<parallel>v') \\<and> (v'=v4\\<parallel>v2))\""], ["proof (prove)\nusing this:\n  v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2", ".."], ["proof (state)\nthis:\n  \\<exists>v'. v=v3\\<parallel>v' \\<and> v'=v4\\<parallel>v2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma horizontal_chop_width_stable:\"(v=u\\<parallel>w)\\<longrightarrow>|lan v|=|lan u|\\<and>|lan v|=|lan w|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<longrightarrow>\n    |lan v| = |lan u| \\<and> |lan v| = |lan w|", "using hchop_def"], ["proof (prove)\nusing this:\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<longrightarrow>\n    |lan v| = |lan u| \\<and> |lan v| = |lan w|", "by auto"], ["", "lemma horizontal_chop_own_trans:\"(v=u\\<parallel>w) \\<longrightarrow> own u = own w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<longrightarrow> own u = own w", "using hchop_def"], ["proof (prove)\nusing this:\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<longrightarrow> own u = own w", "by auto"], ["", "lemma vertical_chop1:\"\\<forall>v. \\<exists> u w. (v=u--w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v. \\<exists>u w. v=u--w", "using vchop_def  nat_int.chop_always_possible"], ["proof (prove)\nusing this:\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<forall>i. \\<exists>j k. N_Chop(i,j,k)\n\ngoal (1 subgoal):\n 1. \\<forall>v. \\<exists>u w. v=u--w", "by (metis (no_types, hide_lams) select_convs)"], ["", "lemma vertical_chop_empty_down:\"\\<forall>v.\\<exists> u.(v=v--u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v. \\<exists>u. v=v--u", "using vchop_def nat_int.chop_empty_right"], ["proof (prove)\nusing this:\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<forall>i. N_Chop(i,i,bot)\n\ngoal (1 subgoal):\n 1. \\<forall>v. \\<exists>u. v=v--u", "by (metis (no_types, hide_lams) select_convs)"], ["", "lemma vertical_chop_empty_up:\"\\<forall>v.\\<exists>u.(v=u--v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v. \\<exists>u. v=u--v", "using vchop_def nat_int.chop_empty_left"], ["proof (prove)\nusing this:\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<forall>i. N_Chop(i,bot,i)\n\ngoal (1 subgoal):\n 1. \\<forall>v. \\<exists>u. v=u--v", "by (metis (no_types, hide_lams) select_convs)"], ["", "lemma vertical_chop_assoc1:\n  \"(v=v1--v2) \\<and> (v2=v3--v4) \\<longrightarrow> (\\<exists>v'. (v=v'--v4) \\<and> (v'=v1--v3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v2=v3--v4 \\<longrightarrow>\n    (\\<exists>v'. v=v'--v4 \\<and> v'=v1--v3)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v2=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'--v4 \\<and> v'=v1--v3", "assume assm:\"(v=v1--v2) \\<and> (v2=v3--v4)\""], ["proof (state)\nthis:\n  v=v1--v2 \\<and> v2=v3--v4\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v2=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'--v4 \\<and> v'=v1--v3", "obtain v' \n    where v'_def:\"v' =\\<lparr> ext = ext v, lan=(lan v1) \\<squnion> (lan v3), own = (own v) \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        v' =\n        \\<lparr>ext = ext v, lan = lan v1 \\<squnion> lan v3,\n           own = own v\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  v' =\n  \\<lparr>ext = ext v, lan = lan v1 \\<squnion> lan v3, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v2=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'--v4 \\<and> v'=v1--v3", "then"], ["proof (chain)\npicking this:\n  v' =\n  \\<lparr>ext = ext v, lan = lan v1 \\<squnion> lan v3, own = own v\\<rparr>", "have 1:\"v=v'--v4\""], ["proof (prove)\nusing this:\n  v' =\n  \\<lparr>ext = ext v, lan = lan v1 \\<squnion> lan v3, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=v'--v4", "using assm nat_int.chop_assoc1 vchop_def"], ["proof (prove)\nusing this:\n  v' =\n  \\<lparr>ext = ext v, lan = lan v1 \\<squnion> lan v3, own = own v\\<rparr>\n  v=v1--v2 \\<and> v2=v3--v4\n  N_Chop(?i,?i1.0,?i2.0) \\<and> N_Chop(?i2.0,?i3.0,?i4.0) \\<longrightarrow>\n  N_Chop(?i,?i1.0 \\<squnion> ?i3.0,?i4.0) \\<and>\n  N_Chop(?i1.0 \\<squnion> ?i3.0,?i1.0,?i3.0)\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=v'--v4", "by auto"], ["proof (state)\nthis:\n  v=v'--v4\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v2=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'--v4 \\<and> v'=v1--v3", "have 2:\"v'=v1--v3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v'=v1--v3", "using v'_def assm nat_int.chop_assoc1 vchop_def"], ["proof (prove)\nusing this:\n  v' =\n  \\<lparr>ext = ext v, lan = lan v1 \\<squnion> lan v3, own = own v\\<rparr>\n  v=v1--v2 \\<and> v2=v3--v4\n  N_Chop(?i,?i1.0,?i2.0) \\<and> N_Chop(?i2.0,?i3.0,?i4.0) \\<longrightarrow>\n  N_Chop(?i,?i1.0 \\<squnion> ?i3.0,?i4.0) \\<and>\n  N_Chop(?i1.0 \\<squnion> ?i3.0,?i1.0,?i3.0)\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v'=v1--v3", "by auto"], ["proof (state)\nthis:\n  v'=v1--v3\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v2=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'--v4 \\<and> v'=v1--v3", "from 1 and 2"], ["proof (chain)\npicking this:\n  v=v'--v4\n  v'=v1--v3", "have \"(v=v'--v4) \\<and>  (v'=v1--v3)\""], ["proof (prove)\nusing this:\n  v=v'--v4\n  v'=v1--v3\n\ngoal (1 subgoal):\n 1. v=v'--v4 \\<and> v'=v1--v3", "by best"], ["proof (state)\nthis:\n  v=v'--v4 \\<and> v'=v1--v3\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v2=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v'--v4 \\<and> v'=v1--v3", "then"], ["proof (chain)\npicking this:\n  v=v'--v4 \\<and> v'=v1--v3", "show \"(\\<exists>v'. (v=v'--v4)  \\<and> (v'=v1--v3))\""], ["proof (prove)\nusing this:\n  v=v'--v4 \\<and> v'=v1--v3\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v=v'--v4 \\<and> v'=v1--v3", ".."], ["proof (state)\nthis:\n  \\<exists>v'. v=v'--v4 \\<and> v'=v1--v3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vertical_chop_assoc2:\n  \"(v=v1--v2) \\<and> (v1=v3--v4) \\<longrightarrow> (\\<exists>v'. (v=v3--v') \\<and> (v'=v4--v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v1=v3--v4 \\<longrightarrow>\n    (\\<exists>v'. v=v3--v' \\<and> v'=v4--v2)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v1=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3--v' \\<and> v'=v4--v2", "assume assm:\"(v=v1--v2) \\<and> (v1=v3--v4)\""], ["proof (state)\nthis:\n  v=v1--v2 \\<and> v1=v3--v4\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v1=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3--v' \\<and> v'=v4--v2", "obtain v' \n    where v'_def:\"v'=\\<lparr> ext = ext v, lan =(lan v4) \\<squnion> (lan v2), own = (own v) \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        v' =\n        \\<lparr>ext = ext v, lan = lan v4 \\<squnion> lan v2,\n           own = own v\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  v' =\n  \\<lparr>ext = ext v, lan = lan v4 \\<squnion> lan v2, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v1=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3--v' \\<and> v'=v4--v2", "then"], ["proof (chain)\npicking this:\n  v' =\n  \\<lparr>ext = ext v, lan = lan v4 \\<squnion> lan v2, own = own v\\<rparr>", "have 1:\"v=v3--v'\""], ["proof (prove)\nusing this:\n  v' =\n  \\<lparr>ext = ext v, lan = lan v4 \\<squnion> lan v2, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=v3--v'", "using assm fst_conv nat_int.chop_assoc2 snd_conv vchop_def"], ["proof (prove)\nusing this:\n  v' =\n  \\<lparr>ext = ext v, lan = lan v4 \\<squnion> lan v2, own = own v\\<rparr>\n  v=v1--v2 \\<and> v1=v3--v4\n  fst (?x1.0, ?x2.0) = ?x1.0\n  N_Chop(?i,?i1.0,?i2.0) \\<and> N_Chop(?i1.0,?i3.0,?i4.0) \\<longrightarrow>\n  N_Chop(?i,?i3.0,?i4.0 \\<squnion> ?i2.0) \\<and>\n  N_Chop(?i4.0 \\<squnion> ?i2.0,?i4.0,?i2.0)\n  snd (?x1.0, ?x2.0) = ?x2.0\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=v3--v'", "by auto"], ["proof (state)\nthis:\n  v=v3--v'\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v1=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3--v' \\<and> v'=v4--v2", "have 2: \"v'=v4--v2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v'=v4--v2", "using assm nat_int.chop_assoc2 v'_def vchop_def"], ["proof (prove)\nusing this:\n  v=v1--v2 \\<and> v1=v3--v4\n  N_Chop(?i,?i1.0,?i2.0) \\<and> N_Chop(?i1.0,?i3.0,?i4.0) \\<longrightarrow>\n  N_Chop(?i,?i3.0,?i4.0 \\<squnion> ?i2.0) \\<and>\n  N_Chop(?i4.0 \\<squnion> ?i2.0,?i4.0,?i2.0)\n  v' =\n  \\<lparr>ext = ext v, lan = lan v4 \\<squnion> lan v2, own = own v\\<rparr>\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v'=v4--v2", "by auto"], ["proof (state)\nthis:\n  v'=v4--v2\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v1=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3--v' \\<and> v'=v4--v2", "from 1 and 2"], ["proof (chain)\npicking this:\n  v=v3--v'\n  v'=v4--v2", "have \"(v=v3--v') \\<and> (v'=v4--v2)\""], ["proof (prove)\nusing this:\n  v=v3--v'\n  v'=v4--v2\n\ngoal (1 subgoal):\n 1. v=v3--v' \\<and> v'=v4--v2", "by best"], ["proof (state)\nthis:\n  v=v3--v' \\<and> v'=v4--v2\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v1=v3--v4 \\<Longrightarrow>\n    \\<exists>v'. v=v3--v' \\<and> v'=v4--v2", "then"], ["proof (chain)\npicking this:\n  v=v3--v' \\<and> v'=v4--v2", "show \"(\\<exists>v'. (v=v3--v') \\<and> (v'=v4--v2))\""], ["proof (prove)\nusing this:\n  v=v3--v' \\<and> v'=v4--v2\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v=v3--v' \\<and> v'=v4--v2", ".."], ["proof (state)\nthis:\n  \\<exists>v'. v=v3--v' \\<and> v'=v4--v2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vertical_chop_singleton:\n  \"(v=u--w) \\<and> |lan v| = 1 \\<longrightarrow> ( |lan u| = 0 \\<or> |lan w| = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u--w \\<and> |lan v| = 1 \\<longrightarrow>\n    |lan u| = 0 \\<or> |lan w| = 0", "using nat_int.chop_single vchop_def Rep_nat_int_inverse"], ["proof (prove)\nusing this:\n  N_Chop(?i,?j,?k) \\<and> |?i| = 1 \\<longrightarrow> |?j| = 0 \\<or> |?k| = 0\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  Abs_nat_int (Rep_nat_int ?x) = ?x\n\ngoal (1 subgoal):\n 1. v=u--w \\<and> |lan v| = 1 \\<longrightarrow>\n    |lan u| = 0 \\<or> |lan w| = 0", "by fastforce"], ["", "lemma vertical_chop_add1:\"(v=u--w) \\<longrightarrow> |lan v| = |lan u| + |lan w|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u--w \\<longrightarrow> |lan v| = |lan u| + |lan w|", "using nat_int.chop_add1 vchop_def"], ["proof (prove)\nusing this:\n  N_Chop(?i,?j,?k) \\<longrightarrow> |?i| = |?j| + |?k|\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=u--w \\<longrightarrow> |lan v| = |lan u| + |lan w|", "by fastforce"], ["", "lemma vertical_chop_add2:\n  \"|lan v| = x+y \\<longrightarrow> (\\<exists> u w.  (v=u--w) \\<and> |lan u| = x \\<and> |lan w| = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |lan v| = x + y \\<longrightarrow>\n    (\\<exists>u w. v=u--w \\<and> |lan u| = x \\<and> |lan w| = y)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. |lan v| = x + y \\<Longrightarrow>\n    \\<exists>u w. v=u--w \\<and> |lan u| = x \\<and> |lan w| = y", "assume assm:\"|lan v| = x+y\""], ["proof (state)\nthis:\n  |lan v| = x + y\n\ngoal (1 subgoal):\n 1. |lan v| = x + y \\<Longrightarrow>\n    \\<exists>u w. v=u--w \\<and> |lan u| = x \\<and> |lan w| = y", "hence add:\"\\<exists>i j. N_Chop(lan v, i,j) \\<and> |i| = x \\<and> |j| = y\""], ["proof (prove)\nusing this:\n  |lan v| = x + y\n\ngoal (1 subgoal):\n 1. \\<exists>i j. N_Chop(lan v,i,j) \\<and> |i| = x \\<and> |j| = y", "using chop_add2"], ["proof (prove)\nusing this:\n  |lan v| = x + y\n  |?i| = ?x + ?y \\<longrightarrow>\n  (\\<exists>j k. N_Chop(?i,j,k) \\<and> |j| = ?x \\<and> |k| = ?y)\n\ngoal (1 subgoal):\n 1. \\<exists>i j. N_Chop(lan v,i,j) \\<and> |i| = x \\<and> |j| = y", "by blast"], ["proof (state)\nthis:\n  \\<exists>i j. N_Chop(lan v,i,j) \\<and> |i| = x \\<and> |j| = y\n\ngoal (1 subgoal):\n 1. |lan v| = x + y \\<Longrightarrow>\n    \\<exists>u w. v=u--w \\<and> |lan u| = x \\<and> |lan w| = y", "obtain i and j where l1_l2_def:\"N_Chop(lan v, i,j) \\<and> |i| = x \\<and> |j| = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        N_Chop(lan v,i,j) \\<and> |i| = x \\<and> |j| = y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using add"], ["proof (prove)\nusing this:\n  \\<exists>i j. N_Chop(lan v,i,j) \\<and> |i| = x \\<and> |j| = y\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        N_Chop(lan v,i,j) \\<and> |i| = x \\<and> |j| = y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  N_Chop(lan v,i,j) \\<and> |i| = x \\<and> |j| = y\n\ngoal (1 subgoal):\n 1. |lan v| = x + y \\<Longrightarrow>\n    \\<exists>u w. v=u--w \\<and> |lan u| = x \\<and> |lan w| = y", "obtain u and w where \"u=\\<lparr>ext =  ext v, lan = i, own = (own v) \\<rparr>\"\n    and \"w = \\<lparr> ext = ext v, lan = j, own = (own v) \\<rparr> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u w.\n        \\<lbrakk>u = \\<lparr>ext = ext v, lan = i, own = own v\\<rparr>;\n         w = \\<lparr>ext = ext v, lan = j, own = own v\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  u = \\<lparr>ext = ext v, lan = i, own = own v\\<rparr>\n  w = \\<lparr>ext = ext v, lan = j, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. |lan v| = x + y \\<Longrightarrow>\n    \\<exists>u w. v=u--w \\<and> |lan u| = x \\<and> |lan w| = y", "hence \"(v=u--w) \\<and> |lan u|=x \\<and> |lan w|=y\""], ["proof (prove)\nusing this:\n  u = \\<lparr>ext = ext v, lan = i, own = own v\\<rparr>\n  w = \\<lparr>ext = ext v, lan = j, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=u--w \\<and> |lan u| = x \\<and> |lan w| = y", "using l1_l2_def view.vchop_def"], ["proof (prove)\nusing this:\n  u = \\<lparr>ext = ext v, lan = i, own = own v\\<rparr>\n  w = \\<lparr>ext = ext v, lan = j, own = own v\\<rparr>\n  N_Chop(lan v,i,j) \\<and> |i| = x \\<and> |j| = y\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=u--w \\<and> |lan u| = x \\<and> |lan w| = y", "by (simp)"], ["proof (state)\nthis:\n  v=u--w \\<and> |lan u| = x \\<and> |lan w| = y\n\ngoal (1 subgoal):\n 1. |lan v| = x + y \\<Longrightarrow>\n    \\<exists>u w. v=u--w \\<and> |lan u| = x \\<and> |lan w| = y", "thus \"(\\<exists> u w.  (v=u--w) \\<and> |lan u| = x \\<and> |lan w| = y)\""], ["proof (prove)\nusing this:\n  v=u--w \\<and> |lan u| = x \\<and> |lan w| = y\n\ngoal (1 subgoal):\n 1. \\<exists>u w. v=u--w \\<and> |lan u| = x \\<and> |lan w| = y", "by blast"], ["proof (state)\nthis:\n  \\<exists>u w. v=u--w \\<and> |lan u| = x \\<and> |lan w| = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vertical_chop_length_stable:\n  \"(v=u--w) \\<longrightarrow> \\<parallel>ext v\\<parallel> = \\<parallel>ext u\\<parallel> \\<and> \\<parallel>ext v\\<parallel> = \\<parallel>ext w\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u--w \\<longrightarrow>\n    \\<parallel>ext v\\<parallel> = \\<parallel>ext u\\<parallel> \\<and>\n    \\<parallel>ext v\\<parallel> = \\<parallel>ext w\\<parallel>", "using vchop_def"], ["proof (prove)\nusing this:\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=u--w \\<longrightarrow>\n    \\<parallel>ext v\\<parallel> = \\<parallel>ext u\\<parallel> \\<and>\n    \\<parallel>ext v\\<parallel> = \\<parallel>ext w\\<parallel>", "by auto"], ["", "lemma vertical_chop_own_trans:\"(v=u--w) \\<longrightarrow> own u = own w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u--w \\<longrightarrow> own u = own w", "using vchop_def"], ["proof (prove)\nusing this:\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=u--w \\<longrightarrow> own u = own w", "by auto"], ["", "lemma vertical_chop_width_mon:\n  \"(v=v1--v2) \\<and> (v2=v3--v4) \\<and> |lan v3| = x \\<longrightarrow> |lan v| \\<ge> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v2=v3--v4 \\<and> |lan v3| = x \\<longrightarrow>\n    x \\<le> |lan v|", "by (metis le_add1 trans_le_add2 vertical_chop_add1)"], ["", "lemma horizontal_chop_leq1:\"(v=u\\<parallel>w) \\<longrightarrow> u \\<le> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<longrightarrow> u \\<le> v", "using real_int.chop_leq1 hchop_def less_eq_view_ext_def order_refl"], ["proof (prove)\nusing this:\n  R_Chop(?r,?s,?t) \\<longrightarrow> ?s \\<le> ?r\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  ?V \\<le> ?V' \\<equiv>\n  ext ?V \\<le> ext ?V' \\<and>\n  lan ?V \\<le> lan ?V' \\<and> own ?V = own ?V' \\<and> more ?V \\<le> more ?V'\n  ?x \\<le> ?x\n\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<longrightarrow> u \\<le> v", "by fastforce"], ["", "lemma horizontal_chop_leq2:\"(v=u\\<parallel>w) \\<longrightarrow> w \\<le> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<longrightarrow> w \\<le> v", "using real_int.chop_leq2 hchop_def less_eq_view_ext_def order_refl"], ["proof (prove)\nusing this:\n  R_Chop(?r,?s,?t) \\<longrightarrow> ?t \\<le> ?r\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  ?V \\<le> ?V' \\<equiv>\n  ext ?V \\<le> ext ?V' \\<and>\n  lan ?V \\<le> lan ?V' \\<and> own ?V = own ?V' \\<and> more ?V \\<le> more ?V'\n  ?x \\<le> ?x\n\ngoal (1 subgoal):\n 1. v=u\\<parallel>w \\<longrightarrow> w \\<le> v", "by fastforce"], ["", "lemma vertical_chop_leq1:\"(v=u--w) \\<longrightarrow> u \\<le> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u--w \\<longrightarrow> u \\<le> v", "using nat_int.chop_subset1 vchop_def less_eq_view_ext_def order_refl"], ["proof (prove)\nusing this:\n  N_Chop(?i,?j,?k) \\<longrightarrow> ?j \\<le> ?i\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  ?V \\<le> ?V' \\<equiv>\n  ext ?V \\<le> ext ?V' \\<and>\n  lan ?V \\<le> lan ?V' \\<and> own ?V = own ?V' \\<and> more ?V \\<le> more ?V'\n  ?x \\<le> ?x\n\ngoal (1 subgoal):\n 1. v=u--w \\<longrightarrow> u \\<le> v", "by fastforce"], ["", "lemma vertical_chop_leq2:\"(v=u--w) \\<longrightarrow> w \\<le> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=u--w \\<longrightarrow> w \\<le> v", "using nat_int.chop_subset2 vchop_def less_eq_view_ext_def order_refl"], ["proof (prove)\nusing this:\n  N_Chop(?i,?j,?k) \\<longrightarrow> ?k \\<le> ?i\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  ?V \\<le> ?V' \\<equiv>\n  ext ?V \\<le> ext ?V' \\<and>\n  lan ?V \\<le> lan ?V' \\<and> own ?V = own ?V' \\<and> more ?V \\<le> more ?V'\n  ?x \\<le> ?x\n\ngoal (1 subgoal):\n 1. v=u--w \\<longrightarrow> w \\<le> v", "by fastforce"], ["", "lemma somewhere_leq:\n  \"v \\<le> v' \\<longleftrightarrow> (\\<exists>v1 v2 v3 vl vr vu vd. \n                (v'=vl\\<parallel>v1) \\<and> (v1=v2\\<parallel>vr) \\<and> (v2=vd--v3) \\<and> (v3=v--vu))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<le> v') =\n    (\\<exists>v1 v2 v3 vl vr vu vd.\n        v'=vl\\<parallel>v1 \\<and>\n        v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "assume \"v \\<le> v'\""], ["proof (state)\nthis:\n  v \\<le> v'\n\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "hence assm_exp:\"(ext v \\<le> ext v') \\<and> (lan v \\<sqsubseteq> lan v') \\<and> (own v = own v')\""], ["proof (prove)\nusing this:\n  v \\<le> v'\n\ngoal (1 subgoal):\n 1. ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'", "using less_eq_view_ext_def"], ["proof (prove)\nusing this:\n  v \\<le> v'\n  ?V \\<le> ?V' \\<equiv>\n  ext ?V \\<le> ext ?V' \\<and>\n  lan ?V \\<le> lan ?V' \\<and> own ?V = own ?V' \\<and> more ?V \\<le> more ?V'\n\ngoal (1 subgoal):\n 1. ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'", "by auto"], ["proof (state)\nthis:\n  ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'\n\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "obtain vl v1 v2 vr \n    where \n      vl:\"vl=\\<lparr>ext=Abs_real_int(left(ext v'),left(ext v)), lan=lan v', own=own v'\\<rparr>\"\n    and \n      v1:\"v1=\\<lparr>ext=Abs_real_int(left(ext v),right(ext v')), lan=lan v', own=own v'\\<rparr>\"\n    and \n      v2:\"v2=\\<lparr>ext=Abs_real_int(left(ext v),right(ext v)), lan=lan v', own=own v'\\<rparr>\"\n    and \n      vr:\"vr=\\<lparr>ext=Abs_real_int(right(ext v),right(ext v')), lan=lan v', own=own v'\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vl v1 v2 vr.\n        \\<lbrakk>vl =\n                 \\<lparr>ext = Abs_real_int (left (ext v'), left (ext v)),\n                    lan = lan v', own = own v'\\<rparr>;\n         v1 =\n         \\<lparr>ext = Abs_real_int (left (ext v), right (ext v')),\n            lan = lan v', own = own v'\\<rparr>;\n         v2 =\n         \\<lparr>ext = Abs_real_int (left (ext v), right (ext v)),\n            lan = lan v', own = own v'\\<rparr>;\n         vr =\n         \\<lparr>ext = Abs_real_int (right (ext v), right (ext v')),\n            lan = lan v', own = own v'\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  vl =\n  \\<lparr>ext = Abs_real_int (left (ext v'), left (ext v)), lan = lan v',\n     own = own v'\\<rparr>\n  v1 =\n  \\<lparr>ext = Abs_real_int (left (ext v), right (ext v')), lan = lan v',\n     own = own v'\\<rparr>\n  v2 =\n  \\<lparr>ext = Abs_real_int (left (ext v), right (ext v)), lan = lan v',\n     own = own v'\\<rparr>\n  vr =\n  \\<lparr>ext = Abs_real_int (right (ext v), right (ext v')), lan = lan v',\n     own = own v'\\<rparr>\n\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "have vl_in_type:\"(left (ext v'), left (ext v)) \\<in> {r::(real*real) . fst r \\<le> snd r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (left (ext v'), left (ext v)) \\<in> {r. fst r \\<le> snd r}", "using less_eq_real_int_def assm_exp real_int.left_leq_right snd_conv \n      fst_conv mem_Collect_eq"], ["proof (prove)\nusing this:\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n  ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'\n  left ?r \\<le> right ?r\n  snd (?x1.0, ?x2.0) = ?x2.0\n  fst (?x1.0, ?x2.0) = ?x1.0\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. (left (ext v'), left (ext v)) \\<in> {r. fst r \\<le> snd r}", "by simp"], ["proof (state)\nthis:\n  (left (ext v'), left (ext v)) \\<in> {r. fst r \\<le> snd r}\n\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "have v1_in_type:\"(left (ext v), right (ext v')) \\<in> {r::(real*real) . fst r \\<le> snd r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (left (ext v), right (ext v')) \\<in> {r. fst r \\<le> snd r}", "using less_eq_real_int_def assm_exp real_int.left_leq_right snd_conv fst_conv\n      mem_Collect_eq order_trans"], ["proof (prove)\nusing this:\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n  ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'\n  left ?r \\<le> right ?r\n  snd (?x1.0, ?x2.0) = ?x2.0\n  fst (?x1.0, ?x2.0) = ?x1.0\n  (?a \\<in> Collect ?P) = ?P ?a\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n\ngoal (1 subgoal):\n 1. (left (ext v), right (ext v')) \\<in> {r. fst r \\<le> snd r}", "by fastforce"], ["proof (state)\nthis:\n  (left (ext v), right (ext v')) \\<in> {r. fst r \\<le> snd r}\n\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "have v2_in_type:\"(left (ext v), right (ext v)) \\<in> {r::(real*real) . fst r \\<le> snd r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (left (ext v), right (ext v)) \\<in> {r. fst r \\<le> snd r}", "using less_eq_real_int_def assm_exp real_int.left_leq_right snd_conv fst_conv \n      mem_Collect_eq order_trans"], ["proof (prove)\nusing this:\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n  ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'\n  left ?r \\<le> right ?r\n  snd (?x1.0, ?x2.0) = ?x2.0\n  fst (?x1.0, ?x2.0) = ?x1.0\n  (?a \\<in> Collect ?P) = ?P ?a\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n\ngoal (1 subgoal):\n 1. (left (ext v), right (ext v)) \\<in> {r. fst r \\<le> snd r}", "by fastforce"], ["proof (state)\nthis:\n  (left (ext v), right (ext v)) \\<in> {r. fst r \\<le> snd r}\n\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "have vr_in_type:\"(right (ext v), right (ext v')) \\<in> {r::(real*real) . fst r \\<le> snd r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (right (ext v), right (ext v')) \\<in> {r. fst r \\<le> snd r}", "using less_eq_real_int_def assm_exp real_int.left_leq_right snd_conv fst_conv\n      mem_Collect_eq order_trans"], ["proof (prove)\nusing this:\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n  ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'\n  left ?r \\<le> right ?r\n  snd (?x1.0, ?x2.0) = ?x2.0\n  fst (?x1.0, ?x2.0) = ?x1.0\n  (?a \\<in> Collect ?P) = ?P ?a\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n\ngoal (1 subgoal):\n 1. (right (ext v), right (ext v')) \\<in> {r. fst r \\<le> snd r}", "by fastforce"], ["proof (state)\nthis:\n  (right (ext v), right (ext v')) \\<in> {r. fst r \\<le> snd r}\n\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "then"], ["proof (chain)\npicking this:\n  (right (ext v), right (ext v')) \\<in> {r. fst r \\<le> snd r}", "have hchops:\"(v'=vl\\<parallel>v1)\\<and> (v1=v2\\<parallel>vr)\""], ["proof (prove)\nusing this:\n  (right (ext v), right (ext v')) \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. v'=vl\\<parallel>v1 \\<and> v1=v2\\<parallel>vr", "using vl v1 v2 vr less_eq_real_int_def hchop_def real_int.rchop_def \n     vl_in_type  v1_in_type  v2_in_type vr_in_type Abs_real_int_inverse"], ["proof (prove)\nusing this:\n  (right (ext v), right (ext v')) \\<in> {r. fst r \\<le> snd r}\n  vl =\n  \\<lparr>ext = Abs_real_int (left (ext v'), left (ext v)), lan = lan v',\n     own = own v'\\<rparr>\n  v1 =\n  \\<lparr>ext = Abs_real_int (left (ext v), right (ext v')), lan = lan v',\n     own = own v'\\<rparr>\n  v2 =\n  \\<lparr>ext = Abs_real_int (left (ext v), right (ext v)), lan = lan v',\n     own = own v'\\<rparr>\n  vr =\n  \\<lparr>ext = Abs_real_int (right (ext v), right (ext v')), lan = lan v',\n     own = own v'\\<rparr>\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  (left (ext v'), left (ext v)) \\<in> {r. fst r \\<le> snd r}\n  (left (ext v), right (ext v')) \\<in> {r. fst r \\<le> snd r}\n  (left (ext v), right (ext v)) \\<in> {r. fst r \\<le> snd r}\n  (right (ext v), right (ext v')) \\<in> {r. fst r \\<le> snd r}\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n\ngoal (1 subgoal):\n 1. v'=vl\\<parallel>v1 \\<and> v1=v2\\<parallel>vr", "by auto"], ["proof (state)\nthis:\n  v'=vl\\<parallel>v1 \\<and> v1=v2\\<parallel>vr\n\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "have lanes_v2:\"lan v2 = lan v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lan v2 = lan v'", "using v2"], ["proof (prove)\nusing this:\n  v2 =\n  \\<lparr>ext = Abs_real_int (left (ext v), right (ext v)), lan = lan v',\n     own = own v'\\<rparr>\n\ngoal (1 subgoal):\n 1. lan v2 = lan v'", "by auto"], ["proof (state)\nthis:\n  lan v2 = lan v'\n\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "have own_v2:\"own v2 = own v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. own v2 = own v'", "using v2"], ["proof (prove)\nusing this:\n  v2 =\n  \\<lparr>ext = Abs_real_int (left (ext v), right (ext v)), lan = lan v',\n     own = own v'\\<rparr>\n\ngoal (1 subgoal):\n 1. own v2 = own v'", "by auto"], ["proof (state)\nthis:\n  own v2 = own v'\n\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "have ext_v2:\"ext v2 =ext v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ext v2 = ext v", "using v2 v2_in_type Abs_real_int_inverse"], ["proof (prove)\nusing this:\n  v2 =\n  \\<lparr>ext = Abs_real_int (left (ext v), right (ext v)), lan = lan v',\n     own = own v'\\<rparr>\n  (left (ext v), right (ext v)) \\<in> {r. fst r \\<le> snd r}\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n\ngoal (1 subgoal):\n 1. ext v2 = ext v", "by (simp add: Rep_real_int_inverse)"], ["proof (state)\nthis:\n  ext v2 = ext v\n\ngoal (2 subgoals):\n 1. v \\<le> v' \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "show \n    \"\\<exists>v1 v2 v3 vl vr vu vd. (v'=vl\\<parallel>v1) \\<and> (v1=v2\\<parallel>vr) \\<and> (v2=vd--v3) \\<and> (v3=v--vu)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "proof (cases \"lan v' = lan v\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lan v' = lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. lan v' \\<noteq> lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "case True"], ["proof (state)\nthis:\n  lan v' = lan v\n\ngoal (2 subgoals):\n 1. lan v' = lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. lan v' \\<noteq> lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "obtain vd v3 vu \n      where vd:\"vd = \\<lparr> ext = ext v2, lan = \\<emptyset>, own = own v'\\<rparr>\" \n      and v3:\"v3 = \\<lparr> ext = ext v2, lan = lan v', own = own v' \\<rparr>\"\n      and vu:\"vu = \\<lparr> ext = ext v2, lan = \\<emptyset>, own = own v' \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vd v3 vu.\n        \\<lbrakk>vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>;\n         v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>;\n         vu = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vu = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n\ngoal (2 subgoals):\n 1. lan v' = lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. lan v' \\<noteq> lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "hence \"(v2=vd--v3) \\<and> (v3=v--vu)\""], ["proof (prove)\nusing this:\n  vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vu = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n\ngoal (1 subgoal):\n 1. v2=vd--v3 \\<and> v3=v--vu", "using vd v3 vu True vchop_def nat_int.nchop_def nat_int.un_empty_absorb1 \n        nat_int.un_empty_absorb2 nat_int.inter_empty1 nat_int.inter_empty2 lanes_v2\n        own_v2 ext_v2 assm_exp"], ["proof (prove)\nusing this:\n  vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vu = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vu = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  lan v' = lan v\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  N_Chop(?i,?j,?k) \\<equiv>\n  ?i = ?j \\<squnion> ?k \\<and> (?j = bot \\<or> ?k = bot \\<or> consec ?j ?k)\n  ?i \\<squnion> bot = ?i\n  bot \\<squnion> ?i = ?i\n  ?i \\<sqinter> bot = bot\n  bot \\<sqinter> ?i = bot\n  lan v2 = lan v'\n  own v2 = own v'\n  ext v2 = ext v\n  ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'\n\ngoal (1 subgoal):\n 1. v2=vd--v3 \\<and> v3=v--vu", "by auto"], ["proof (state)\nthis:\n  v2=vd--v3 \\<and> v3=v--vu\n\ngoal (2 subgoals):\n 1. lan v' = lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. lan v' \\<noteq> lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  v2=vd--v3 \\<and> v3=v--vu", "show ?thesis"], ["proof (prove)\nusing this:\n  v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "using hchops"], ["proof (prove)\nusing this:\n  v2=vd--v3 \\<and> v3=v--vu\n  v'=vl\\<parallel>v1 \\<and> v1=v2\\<parallel>vr\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "by blast"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. lan v' \\<noteq> lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lan v' \\<noteq> lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "case False"], ["proof (state)\nthis:\n  lan v' \\<noteq> lan v\n\ngoal (1 subgoal):\n 1. lan v' \\<noteq> lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  lan v' \\<noteq> lan v", "have v'_neq_empty:\"lan v' \\<noteq> \\<emptyset>\""], ["proof (prove)\nusing this:\n  lan v' \\<noteq> lan v\n\ngoal (1 subgoal):\n 1. lan v' \\<noteq> bot", "by (metis assm_exp nat_int.card_empty_zero nat_int.card_non_empty_geq_one \n          nat_int.card_subset_le le_0_eq)"], ["proof (state)\nthis:\n  lan v' \\<noteq> bot\n\ngoal (1 subgoal):\n 1. lan v' \\<noteq> lan v \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "proof (cases \"lan v \\<noteq> \\<emptyset>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lan v \\<noteq> bot \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<not> lan v \\<noteq> bot \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "case False"], ["proof (state)\nthis:\n  \\<not> lan v \\<noteq> bot\n\ngoal (2 subgoals):\n 1. lan v \\<noteq> bot \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<not> lan v \\<noteq> bot \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "obtain vd v3 vu where vd:\"vd = \\<lparr> ext = ext v2, lan = \\<emptyset>, own = own v'\\<rparr>\" \n        and v3:\"v3 = \\<lparr> ext = ext v2, lan = lan v', own = own v' \\<rparr>\"\n        and vu:\"vu = \\<lparr> ext = ext v2, lan = lan v', own = own v' \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vd v3 vu.\n        \\<lbrakk>vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>;\n         v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>;\n         vu =\n         \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vu = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n\ngoal (2 subgoals):\n 1. lan v \\<noteq> bot \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<not> lan v \\<noteq> bot \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vu = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>", "have \"(v2=vd--v3) \\<and> (v3=v--vu)\""], ["proof (prove)\nusing this:\n  vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vu = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n\ngoal (1 subgoal):\n 1. v2=vd--v3 \\<and> v3=v--vu", "using vd v3 vu False vchop_def nat_int.nchop_def\n          nat_int.un_empty_absorb1 nat_int.un_empty_absorb2\n          nat_int.inter_empty1 nat_int.inter_empty2 lanes_v2 own_v2 ext_v2 assm_exp"], ["proof (prove)\nusing this:\n  vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vu = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vu = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  \\<not> lan v \\<noteq> bot\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  N_Chop(?i,?j,?k) \\<equiv>\n  ?i = ?j \\<squnion> ?k \\<and> (?j = bot \\<or> ?k = bot \\<or> consec ?j ?k)\n  ?i \\<squnion> bot = ?i\n  bot \\<squnion> ?i = ?i\n  ?i \\<sqinter> bot = bot\n  bot \\<sqinter> ?i = bot\n  lan v2 = lan v'\n  own v2 = own v'\n  ext v2 = ext v\n  ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'\n\ngoal (1 subgoal):\n 1. v2=vd--v3 \\<and> v3=v--vu", "by auto"], ["proof (state)\nthis:\n  v2=vd--v3 \\<and> v3=v--vu\n\ngoal (2 subgoals):\n 1. lan v \\<noteq> bot \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. \\<not> lan v \\<noteq> bot \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  v2=vd--v3 \\<and> v3=v--vu", "show ?thesis"], ["proof (prove)\nusing this:\n  v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "using hchops"], ["proof (prove)\nusing this:\n  v2=vd--v3 \\<and> v3=v--vu\n  v'=vl\\<parallel>v1 \\<and> v1=v2\\<parallel>vr\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "by blast"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. lan v \\<noteq> bot \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lan v \\<noteq> bot \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "case True"], ["proof (state)\nthis:\n  lan v \\<noteq> bot\n\ngoal (1 subgoal):\n 1. lan v \\<noteq> bot \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "proof (cases \"(minimum (lan v)) = minimum(lan v')\")"], ["proof (state)\ngoal (2 subgoals):\n 1. minimum (lan v) = minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "assume min:\"minimum ( lan v) = minimum (lan v')\""], ["proof (state)\nthis:\n  minimum (lan v) = minimum (lan v')\n\ngoal (2 subgoals):\n 1. minimum (lan v) = minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "hence max:\"maximum (lan v) <maximum (lan v')\""], ["proof (prove)\nusing this:\n  minimum (lan v) = minimum (lan v')\n\ngoal (1 subgoal):\n 1. maximum (lan v) < maximum (lan v')", "by (metis Rep_nat_int_inverse assm_exp atLeastatMost_subset_iff leI le_antisym\n              nat_int.leq_max_sup nat_int.leq_min_inf nat_int.maximum_def nat_int.minimum_def\n              nat_int.rep_non_empty_means_seq less_eq_nat_int.rep_eq False True \n              v'_neq_empty)"], ["proof (state)\nthis:\n  maximum (lan v) < maximum (lan v')\n\ngoal (2 subgoals):\n 1. minimum (lan v) = minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "obtain vd v3 vu \n          where vd:\"vd = \\<lparr> ext = ext v2, lan = \\<emptyset>, own = own v'\\<rparr>\" \n          and v3:\"v3 = \\<lparr> ext = ext v2, lan = lan v', own = own v' \\<rparr>\"\n          and vu:\"vu = \\<lparr> ext = ext v2, lan = \n            Abs_nat_int({maximum(lan v)+1..maximum(lan v')}), own = own v' \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vd v3 vu.\n        \\<lbrakk>vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>;\n         v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>;\n         vu =\n         \\<lparr>ext = ext v2,\n            lan = Abs_nat_int {maximum (lan v) + 1..maximum (lan v')},\n            own = own v'\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vu =\n  \\<lparr>ext = ext v2,\n     lan = Abs_nat_int {maximum (lan v) + 1..maximum (lan v')},\n     own = own v'\\<rparr>\n\ngoal (2 subgoals):\n 1. minimum (lan v) = minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have vu_in_type:\n          \"{maximum(lan v)+1 ..maximum(lan v')} \\<in> {S.(\\<exists> (m::nat) n.{m..n }=S)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {maximum (lan v) + 1..maximum (lan v')}\n    \\<in> {S. \\<exists>m n. {m..n} = S}", "using max"], ["proof (prove)\nusing this:\n  maximum (lan v) < maximum (lan v')\n\ngoal (1 subgoal):\n 1. {maximum (lan v) + 1..maximum (lan v')}\n    \\<in> {S. \\<exists>m n. {m..n} = S}", "by auto"], ["proof (state)\nthis:\n  {maximum (lan v) + 1..maximum (lan v')}\n  \\<in> {S. \\<exists>m n. {m..n} = S}\n\ngoal (2 subgoals):\n 1. minimum (lan v) = minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have consec:\"consec (lan v) (lan vu)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consec (lan v) (lan vu)", "using max"], ["proof (prove)\nusing this:\n  maximum (lan v) < maximum (lan v')\n\ngoal (1 subgoal):\n 1. consec (lan v) (lan vu)", "by (simp add:  Suc_leI   nat_int.consec_def nat_int.leq_min_inf' \n              nat_int.leq_nat_non_empty True  vu)"], ["proof (state)\nthis:\n  consec (lan v) (lan vu)\n\ngoal (2 subgoals):\n 1. minimum (lan v) = minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have disjoint:\" lan v \\<sqinter>  lan vu = \\<emptyset>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lan v \\<sqinter> lan vu = bot", "by (simp add: consec nat_int.consec_inter_empty)"], ["proof (state)\nthis:\n  lan v \\<sqinter> lan vu = bot\n\ngoal (2 subgoals):\n 1. minimum (lan v) = minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have union:\"lan v' = lan v \\<squnion> lan vu\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lan v' = lan v \\<squnion> lan vu", "by (metis Suc_eq_plus1 Suc_leI consec leq_max_sup' max min\n              nat_int.consec_un_equality nat_int.consec_un_max nat_int.consec_un_min \n              select_convs(2) v'_neq_empty vu)"], ["proof (state)\nthis:\n  lan v' = lan v \\<squnion> lan vu\n\ngoal (2 subgoals):\n 1. minimum (lan v) = minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  lan v' = lan v \\<squnion> lan vu", "have \"(v2=vd--v3) \\<and> (v3=v--vu)\""], ["proof (prove)\nusing this:\n  lan v' = lan v \\<squnion> lan vu\n\ngoal (1 subgoal):\n 1. v2=vd--v3 \\<and> v3=v--vu", "using vd v3 vu vchop_def nat_int.nchop_def nat_int.un_empty_absorb1 \n            nat_int.un_empty_absorb2 nat_int.inter_empty1 nat_int.inter_empty2\n            lanes_v2 own_v2 ext_v2 assm_exp vu_in_type  Abs_nat_int_inverse\n            consec union disjoint select_convs"], ["proof (prove)\nusing this:\n  lan v' = lan v \\<squnion> lan vu\n  vd = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v', own = own v'\\<rparr>\n  vu =\n  \\<lparr>ext = ext v2,\n     lan = Abs_nat_int {maximum (lan v) + 1..maximum (lan v')},\n     own = own v'\\<rparr>\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  N_Chop(?i,?j,?k) \\<equiv>\n  ?i = ?j \\<squnion> ?k \\<and> (?j = bot \\<or> ?k = bot \\<or> consec ?j ?k)\n  ?i \\<squnion> bot = ?i\n  bot \\<squnion> ?i = ?i\n  ?i \\<sqinter> bot = bot\n  bot \\<sqinter> ?i = bot\n  lan v2 = lan v'\n  own v2 = own v'\n  ext v2 = ext v\n  ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'\n  {maximum (lan v) + 1..maximum (lan v')}\n  \\<in> {S. \\<exists>m n. {m..n} = S}\n  ?y \\<in> {S. \\<exists>m n. {m..n} = S} \\<Longrightarrow>\n  Rep_nat_int (Abs_nat_int ?y) = ?y\n  consec (lan v) (lan vu)\n  lan v' = lan v \\<squnion> lan vu\n  lan v \\<sqinter> lan vu = bot\n  ext \\<lparr>ext = ?ext, lan = ?lan, own = ?own, \\<dots> = ?more\\<rparr> =\n  ?ext\n  lan \\<lparr>ext = ?ext, lan = ?lan, own = ?own, \\<dots> = ?more\\<rparr> =\n  ?lan\n  own \\<lparr>ext = ?ext, lan = ?lan, own = ?own, \\<dots> = ?more\\<rparr> =\n  ?own\n  more \\<lparr>ext = ?ext, lan = ?lan, own = ?own, \\<dots> = ?more\\<rparr> =\n  ?more\n\ngoal (1 subgoal):\n 1. v2=vd--v3 \\<and> v3=v--vu", "by force"], ["proof (state)\nthis:\n  v2=vd--v3 \\<and> v3=v--vu\n\ngoal (2 subgoals):\n 1. minimum (lan v) = minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  v2=vd--v3 \\<and> v3=v--vu", "show ?thesis"], ["proof (prove)\nusing this:\n  v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "using hchops"], ["proof (prove)\nusing this:\n  v2=vd--v3 \\<and> v3=v--vu\n  v'=vl\\<parallel>v1 \\<and> v1=v2\\<parallel>vr\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "by blast"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "assume \"(minimum (lan v)) \\<noteq> minimum (lan v')\""], ["proof (state)\nthis:\n  minimum (lan v) \\<noteq> minimum (lan v')\n\ngoal (1 subgoal):\n 1. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  minimum (lan v) \\<noteq> minimum (lan v')", "have  min:\"minimum ( lan v) > minimum (lan v')\""], ["proof (prove)\nusing this:\n  minimum (lan v) \\<noteq> minimum (lan v')\n\ngoal (1 subgoal):\n 1. minimum (lan v') < minimum (lan v)", "by (metis Min_le True assm_exp finite_atLeastAtMost le_neq_implies_less \n              less_eq_nat_int.rep_eq nat_int.el.rep_eq nat_int.minimum_def \n              nat_int.minimum_in rep_non_empty_means_seq subsetCE v'_neq_empty)"], ["proof (state)\nthis:\n  minimum (lan v') < minimum (lan v)\n\ngoal (1 subgoal):\n 1. minimum (lan v) \\<noteq> minimum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "proof (cases \"(maximum (lan v)) = maximum (lan v')\")"], ["proof (state)\ngoal (2 subgoals):\n 1. maximum (lan v) = maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "assume max:\"maximum(lan v) = maximum (lan v')\""], ["proof (state)\nthis:\n  maximum (lan v) = maximum (lan v')\n\ngoal (2 subgoals):\n 1. maximum (lan v) = maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "obtain vd v3 vu \n            where \n              vd:\"vd = \n              \\<lparr> ext = ext v2,\n                lan = Abs_nat_int ({minimum(lan v')..minimum(lan v)-1}),\n                own = own v'\\<rparr>\" \n            and \n            v3:\"v3 = \\<lparr> ext = ext v2, lan = lan v, own = own v' \\<rparr>\"\n            and \n            vu:\"vu = \\<lparr> ext = ext v2, lan = \\<emptyset> , own = own v' \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vd v3 vu.\n        \\<lbrakk>vd =\n                 \\<lparr>ext = ext v2,\n                    lan =\n                      Abs_nat_int {minimum (lan v')..minimum (lan v) - 1},\n                    own = own v'\\<rparr>;\n         v3 = \\<lparr>ext = ext v2, lan = lan v, own = own v'\\<rparr>;\n         vu = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  vd =\n  \\<lparr>ext = ext v2,\n     lan = Abs_nat_int {minimum (lan v')..minimum (lan v) - 1},\n     own = own v'\\<rparr>\n  v3 = \\<lparr>ext = ext v2, lan = lan v, own = own v'\\<rparr>\n  vu = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n\ngoal (2 subgoals):\n 1. maximum (lan v) = maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have consec:\"consec (lan vd) (lan v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consec (lan vd) (lan v)", "using True leq_max_sup' leq_nat_non_empty min \n              nat_int.consec_def vd"], ["proof (prove)\nusing this:\n  lan v \\<noteq> bot\n  ?m \\<le> ?n \\<longrightarrow> maximum (Abs_nat_int {?m..?n}) = ?n\n  ?m \\<le> ?n \\<longrightarrow> Abs_nat_int {?m..?n} \\<noteq> bot\n  minimum (lan v') < minimum (lan v)\n  consec ?i ?j \\<equiv>\n  ?i \\<noteq> bot \\<and> ?j \\<noteq> bot \\<and> maximum ?i + 1 = minimum ?j\n  vd =\n  \\<lparr>ext = ext v2,\n     lan = Abs_nat_int {minimum (lan v')..minimum (lan v) - 1},\n     own = own v'\\<rparr>\n\ngoal (1 subgoal):\n 1. consec (lan vd) (lan v)", "by auto"], ["proof (state)\nthis:\n  consec (lan vd) (lan v)\n\ngoal (2 subgoals):\n 1. maximum (lan v) = maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have \"maximum (lan vd \\<squnion> lan v) = maximum (lan v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maximum (lan vd \\<squnion> lan v) = maximum (lan v)", "using consec consec_un_max"], ["proof (prove)\nusing this:\n  consec (lan vd) (lan v)\n  consec ?i ?j \\<longrightarrow> maximum ?j = maximum (?i \\<squnion> ?j)\n\ngoal (1 subgoal):\n 1. maximum (lan vd \\<squnion> lan v) = maximum (lan v)", "by auto"], ["proof (state)\nthis:\n  maximum (lan vd \\<squnion> lan v) = maximum (lan v)\n\ngoal (2 subgoals):\n 1. maximum (lan v) = maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  maximum (lan vd \\<squnion> lan v) = maximum (lan v)", "have max':\"maximum (lan vd \\<squnion> lan v) = maximum (lan v')\""], ["proof (prove)\nusing this:\n  maximum (lan vd \\<squnion> lan v) = maximum (lan v)\n\ngoal (1 subgoal):\n 1. maximum (lan vd \\<squnion> lan v) = maximum (lan v')", "by (simp add: max)"], ["proof (state)\nthis:\n  maximum (lan vd \\<squnion> lan v) = maximum (lan v')\n\ngoal (2 subgoals):\n 1. maximum (lan v) = maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have \"minimum (lan vd \\<squnion> lan v) = minimum (lan vd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minimum (lan vd \\<squnion> lan v) = minimum (lan vd)", "using consec consec_un_min"], ["proof (prove)\nusing this:\n  consec (lan vd) (lan v)\n  consec ?i ?j \\<longrightarrow> minimum ?i = minimum (?i \\<squnion> ?j)\n\ngoal (1 subgoal):\n 1. minimum (lan vd \\<squnion> lan v) = minimum (lan vd)", "by auto"], ["proof (state)\nthis:\n  minimum (lan vd \\<squnion> lan v) = minimum (lan vd)\n\ngoal (2 subgoals):\n 1. maximum (lan v) = maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  minimum (lan vd \\<squnion> lan v) = minimum (lan vd)", "have min':\"minimum (lan vd \\<squnion> lan v) = minimum (lan v')\""], ["proof (prove)\nusing this:\n  minimum (lan vd \\<squnion> lan v) = minimum (lan vd)\n\ngoal (1 subgoal):\n 1. minimum (lan vd \\<squnion> lan v) = minimum (lan v')", "by (metis atLeastatMost_empty_iff vd bot_nat_int.abs_eq consec \n                nat_int.consec_def nat_int.leq_min_inf' select_convs(2))"], ["proof (state)\nthis:\n  minimum (lan vd \\<squnion> lan v) = minimum (lan v')\n\ngoal (2 subgoals):\n 1. maximum (lan v) = maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have union:\" lan v' = lan vd \\<squnion> lan v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lan v' = lan vd \\<squnion> lan v", "using consec max' min' nat_int.consec_un_equality v'_neq_empty"], ["proof (prove)\nusing this:\n  consec (lan vd) (lan v)\n  maximum (lan vd \\<squnion> lan v) = maximum (lan v')\n  minimum (lan vd \\<squnion> lan v) = minimum (lan v')\n  consec ?i ?j \\<and> ?k \\<noteq> bot \\<longrightarrow>\n  minimum (?i \\<squnion> ?j) = minimum ?k \\<and>\n  maximum (?i \\<squnion> ?j) = maximum ?k \\<longrightarrow>\n  ?i \\<squnion> ?j = ?k\n  lan v' \\<noteq> bot\n\ngoal (1 subgoal):\n 1. lan v' = lan vd \\<squnion> lan v", "by fastforce"], ["proof (state)\nthis:\n  lan v' = lan vd \\<squnion> lan v\n\ngoal (2 subgoals):\n 1. maximum (lan v) = maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  lan v' = lan vd \\<squnion> lan v", "have \"(v2=vd--v3) \\<and> (v3=v--vu)\""], ["proof (prove)\nusing this:\n  lan v' = lan vd \\<squnion> lan v\n\ngoal (1 subgoal):\n 1. v2=vd--v3 \\<and> v3=v--vu", "using assm_exp consec ext_v2 lanes_v2 nat_int.nchop_def nat_int.un_empty_absorb1\n              own_v2 v3 vd view.vchop_def vu"], ["proof (prove)\nusing this:\n  lan v' = lan vd \\<squnion> lan v\n  ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'\n  consec (lan vd) (lan v)\n  ext v2 = ext v\n  lan v2 = lan v'\n  N_Chop(?i,?j,?k) \\<equiv>\n  ?i = ?j \\<squnion> ?k \\<and> (?j = bot \\<or> ?k = bot \\<or> consec ?j ?k)\n  ?i \\<squnion> bot = ?i\n  own v2 = own v'\n  v3 = \\<lparr>ext = ext v2, lan = lan v, own = own v'\\<rparr>\n  vd =\n  \\<lparr>ext = ext v2,\n     lan = Abs_nat_int {minimum (lan v')..minimum (lan v) - 1},\n     own = own v'\\<rparr>\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  vu = \\<lparr>ext = ext v2, lan = bot, own = own v'\\<rparr>\n\ngoal (1 subgoal):\n 1. v2=vd--v3 \\<and> v3=v--vu", "by force"], ["proof (state)\nthis:\n  v2=vd--v3 \\<and> v3=v--vu\n\ngoal (2 subgoals):\n 1. maximum (lan v) = maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n 2. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  v2=vd--v3 \\<and> v3=v--vu", "show ?thesis"], ["proof (prove)\nusing this:\n  v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "using hchops"], ["proof (prove)\nusing this:\n  v2=vd--v3 \\<and> v3=v--vu\n  v'=vl\\<parallel>v1 \\<and> v1=v2\\<parallel>vr\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "by blast"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "assume \"(maximum (lan v)) \\<noteq> maximum (lan v')\""], ["proof (state)\nthis:\n  maximum (lan v) \\<noteq> maximum (lan v')\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  maximum (lan v) \\<noteq> maximum (lan v')", "have max:\"maximum (lan v) < maximum (lan v')\""], ["proof (prove)\nusing this:\n  maximum (lan v) \\<noteq> maximum (lan v')\n\ngoal (1 subgoal):\n 1. maximum (lan v) < maximum (lan v')", "by (metis assm_exp atLeastatMost_subset_iff nat_int.leq_max_sup \n                nat_int.maximum_def nat_int.rep_non_empty_means_seq less_eq_nat_int.rep_eq\n                True order.not_eq_order_implies_strict v'_neq_empty)"], ["proof (state)\nthis:\n  maximum (lan v) < maximum (lan v')\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "obtain vd v3 vu \n            where vd:\n              \"vd = \\<lparr> ext = ext v2,\n                      lan = Abs_nat_int ({minimum(lan v')..minimum(lan v)-1}),\n                      own = own v'\\<rparr>\" \n            and v3:\n            \"v3 = \\<lparr> ext = ext v2, lan = lan v \\<squnion> lan vu, own = own v' \\<rparr>\"\n            and vu:\n            \"vu = \\<lparr> ext = ext v2, \n                    lan = Abs_nat_int ({maximum(lan v)+1..maximum(lan v')}),\n                    own = own v' \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vd v3 vu.\n        \\<lbrakk>vd =\n                 \\<lparr>ext = ext v2,\n                    lan =\n                      Abs_nat_int {minimum (lan v')..minimum (lan v) - 1},\n                    own = own v'\\<rparr>;\n         v3 =\n         \\<lparr>ext = ext v2, lan = lan v \\<squnion> lan vu,\n            own = own v'\\<rparr>;\n         vu =\n         \\<lparr>ext = ext v2,\n            lan = Abs_nat_int {maximum (lan v) + 1..maximum (lan v')},\n            own = own v'\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  vd =\n  \\<lparr>ext = ext v2,\n     lan = Abs_nat_int {minimum (lan v')..minimum (lan v) - 1},\n     own = own v'\\<rparr>\n  v3 =\n  \\<lparr>ext = ext v2, lan = lan v \\<squnion> lan vu, own = own v'\\<rparr>\n  vu =\n  \\<lparr>ext = ext v2,\n     lan = Abs_nat_int {maximum (lan v) + 1..maximum (lan v')},\n     own = own v'\\<rparr>\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have consec:\"consec (lan v) (lan vu)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consec (lan v) (lan vu)", "using True leq_nat_non_empty max nat_int.consec_def nat_int.leq_min_inf'\n              vu"], ["proof (prove)\nusing this:\n  lan v \\<noteq> bot\n  ?m \\<le> ?n \\<longrightarrow> Abs_nat_int {?m..?n} \\<noteq> bot\n  maximum (lan v) < maximum (lan v')\n  consec ?i ?j \\<equiv>\n  ?i \\<noteq> bot \\<and> ?j \\<noteq> bot \\<and> maximum ?i + 1 = minimum ?j\n  ?m \\<le> ?n \\<longrightarrow> minimum (Abs_nat_int {?m..?n}) = ?m\n  vu =\n  \\<lparr>ext = ext v2,\n     lan = Abs_nat_int {maximum (lan v) + 1..maximum (lan v')},\n     own = own v'\\<rparr>\n\ngoal (1 subgoal):\n 1. consec (lan v) (lan vu)", "by auto"], ["proof (state)\nthis:\n  consec (lan v) (lan vu)\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have union:\"lan v3 = lan v \\<squnion> lan vu\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lan v3 = lan v \\<squnion> lan vu", "by (simp add: v3 min max consec)"], ["proof (state)\nthis:\n  lan v3 = lan v \\<squnion> lan vu\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  lan v3 = lan v \\<squnion> lan vu", "have chop1:\" (v3=v--vu)\""], ["proof (prove)\nusing this:\n  lan v3 = lan v \\<squnion> lan vu\n\ngoal (1 subgoal):\n 1. v3=v--vu", "using assm_exp consec ext_v2 nat_int.nchop_def v3 view.vchop_def\n              vu"], ["proof (prove)\nusing this:\n  lan v3 = lan v \\<squnion> lan vu\n  ext v \\<le> ext v' \\<and> lan v \\<le> lan v' \\<and> own v = own v'\n  consec (lan v) (lan vu)\n  ext v2 = ext v\n  N_Chop(?i,?j,?k) \\<equiv>\n  ?i = ?j \\<squnion> ?k \\<and> (?j = bot \\<or> ?k = bot \\<or> consec ?j ?k)\n  v3 =\n  \\<lparr>ext = ext v2, lan = lan v \\<squnion> lan vu, own = own v'\\<rparr>\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  vu =\n  \\<lparr>ext = ext v2,\n     lan = Abs_nat_int {maximum (lan v) + 1..maximum (lan v')},\n     own = own v'\\<rparr>\n\ngoal (1 subgoal):\n 1. v3=v--vu", "by auto"], ["proof (state)\nthis:\n  v3=v--vu\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have min_eq:\"minimum (lan v3) = minimum (lan v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minimum (lan v3) = minimum (lan v)", "using chop1 consec nat_int.chop_min vchop_def"], ["proof (prove)\nusing this:\n  v3=v--vu\n  consec (lan v) (lan vu)\n  N_Chop(?i,?j,?k) \\<and> consec ?j ?k \\<longrightarrow>\n  minimum ?i = minimum ?j\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. minimum (lan v3) = minimum (lan v)", "by blast"], ["proof (state)\nthis:\n  minimum (lan v3) = minimum (lan v)\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have neq3:\"lan v3 \\<noteq> \\<emptyset>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lan v3 \\<noteq> bot", "by (metis bot.extremum_uniqueI consec nat_int.consec_def nat_int.un_subset2\n                union)"], ["proof (state)\nthis:\n  lan v3 \\<noteq> bot\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have consec2:\"consec (lan vd) (lan v3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consec (lan vd) (lan v3)", "using min consec union min_eq Suc_leI nat_int.consec_def nat_int.leq_max_sup'\n              nat_int.leq_min_inf' nat_int.leq_nat_non_empty neq3 v3 vd"], ["proof (prove)\nusing this:\n  minimum (lan v') < minimum (lan v)\n  consec (lan v) (lan vu)\n  lan v3 = lan v \\<squnion> lan vu\n  minimum (lan v3) = minimum (lan v)\n  ?m < ?n \\<Longrightarrow> Suc ?m \\<le> ?n\n  consec ?i ?j \\<equiv>\n  ?i \\<noteq> bot \\<and> ?j \\<noteq> bot \\<and> maximum ?i + 1 = minimum ?j\n  ?m \\<le> ?n \\<longrightarrow> maximum (Abs_nat_int {?m..?n}) = ?n\n  ?m \\<le> ?n \\<longrightarrow> minimum (Abs_nat_int {?m..?n}) = ?m\n  ?m \\<le> ?n \\<longrightarrow> Abs_nat_int {?m..?n} \\<noteq> bot\n  lan v3 \\<noteq> bot\n  v3 =\n  \\<lparr>ext = ext v2, lan = lan v \\<squnion> lan vu, own = own v'\\<rparr>\n  vd =\n  \\<lparr>ext = ext v2,\n     lan = Abs_nat_int {minimum (lan v')..minimum (lan v) - 1},\n     own = own v'\\<rparr>\n\ngoal (1 subgoal):\n 1. consec (lan vd) (lan v3)", "by (auto)"], ["proof (state)\nthis:\n  consec (lan vd) (lan v3)\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have \"minimum (lan vd \\<squnion> lan v3) = minimum (lan vd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. minimum (lan vd \\<squnion> lan v3) = minimum (lan vd)", "using consec2 consec_un_min"], ["proof (prove)\nusing this:\n  consec (lan vd) (lan v3)\n  consec ?i ?j \\<longrightarrow> minimum ?i = minimum (?i \\<squnion> ?j)\n\ngoal (1 subgoal):\n 1. minimum (lan vd \\<squnion> lan v3) = minimum (lan vd)", "by auto"], ["proof (state)\nthis:\n  minimum (lan vd \\<squnion> lan v3) = minimum (lan vd)\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  minimum (lan vd \\<squnion> lan v3) = minimum (lan vd)", "have min':\"minimum (lan vd \\<squnion> lan v3) = minimum (lan v')\""], ["proof (prove)\nusing this:\n  minimum (lan vd \\<squnion> lan v3) = minimum (lan vd)\n\ngoal (1 subgoal):\n 1. minimum (lan vd \\<squnion> lan v3) = minimum (lan v')", "by (metis vd atLeastatMost_empty_iff2 bot_nat_int.abs_eq consec2 leq_min_inf'\n                nat_int.consec_def select_convs(2))"], ["proof (state)\nthis:\n  minimum (lan vd \\<squnion> lan v3) = minimum (lan v')\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have \"maximum (lan vd \\<squnion>lan v3) = maximum (lan v3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. maximum (lan vd \\<squnion> lan v3) = maximum (lan v3)", "using consec2 consec_un_max"], ["proof (prove)\nusing this:\n  consec (lan vd) (lan v3)\n  consec ?i ?j \\<longrightarrow> maximum ?j = maximum (?i \\<squnion> ?j)\n\ngoal (1 subgoal):\n 1. maximum (lan vd \\<squnion> lan v3) = maximum (lan v3)", "by auto"], ["proof (state)\nthis:\n  maximum (lan vd \\<squnion> lan v3) = maximum (lan v3)\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  maximum (lan vd \\<squnion> lan v3) = maximum (lan v3)", "have \"maximum (lan vd \\<squnion>lan v3) = maximum (lan vu)\""], ["proof (prove)\nusing this:\n  maximum (lan vd \\<squnion> lan v3) = maximum (lan v3)\n\ngoal (1 subgoal):\n 1. maximum (lan vd \\<squnion> lan v3) = maximum (lan vu)", "using consec consec_un_max union"], ["proof (prove)\nusing this:\n  maximum (lan vd \\<squnion> lan v3) = maximum (lan v3)\n  consec (lan v) (lan vu)\n  consec ?i ?j \\<longrightarrow> maximum ?j = maximum (?i \\<squnion> ?j)\n  lan v3 = lan v \\<squnion> lan vu\n\ngoal (1 subgoal):\n 1. maximum (lan vd \\<squnion> lan v3) = maximum (lan vu)", "by auto"], ["proof (state)\nthis:\n  maximum (lan vd \\<squnion> lan v3) = maximum (lan vu)\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  maximum (lan vd \\<squnion> lan v3) = maximum (lan vu)", "have max':\"maximum (lan vd \\<squnion>lan v3) = maximum (lan v')\""], ["proof (prove)\nusing this:\n  maximum (lan vd \\<squnion> lan v3) = maximum (lan vu)\n\ngoal (1 subgoal):\n 1. maximum (lan vd \\<squnion> lan v3) = maximum (lan v')", "by (metis Suc_eq_plus1 Suc_leI max nat_int.leq_max_sup' \n                select_convs(2) vu)"], ["proof (state)\nthis:\n  maximum (lan vd \\<squnion> lan v3) = maximum (lan v')\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have union2:\" lan v' = lan vd \\<squnion> lan v3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lan v' = lan vd \\<squnion> lan v3", "using min max consec2 neq3 min' max' nat_int.consec_un_equality v'_neq_empty"], ["proof (prove)\nusing this:\n  minimum (lan v') < minimum (lan v)\n  maximum (lan v) < maximum (lan v')\n  consec (lan vd) (lan v3)\n  lan v3 \\<noteq> bot\n  minimum (lan vd \\<squnion> lan v3) = minimum (lan v')\n  maximum (lan vd \\<squnion> lan v3) = maximum (lan v')\n  consec ?i ?j \\<and> ?k \\<noteq> bot \\<longrightarrow>\n  minimum (?i \\<squnion> ?j) = minimum ?k \\<and>\n  maximum (?i \\<squnion> ?j) = maximum ?k \\<longrightarrow>\n  ?i \\<squnion> ?j = ?k\n  lan v' \\<noteq> bot\n\ngoal (1 subgoal):\n 1. lan v' = lan vd \\<squnion> lan v3", "by force"], ["proof (state)\nthis:\n  lan v' = lan vd \\<squnion> lan v3\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "have \"(v2=vd--v3) \\<and> (v3=v--vu)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v2=vd--v3 \\<and> v3=v--vu", "using union2 chop1 consec2 nat_int.nchop_def v2 v3 vd \n              view.vchop_def"], ["proof (prove)\nusing this:\n  lan v' = lan vd \\<squnion> lan v3\n  v3=v--vu\n  consec (lan vd) (lan v3)\n  N_Chop(?i,?j,?k) \\<equiv>\n  ?i = ?j \\<squnion> ?k \\<and> (?j = bot \\<or> ?k = bot \\<or> consec ?j ?k)\n  v2 =\n  \\<lparr>ext = Abs_real_int (left (ext v), right (ext v)), lan = lan v',\n     own = own v'\\<rparr>\n  v3 =\n  \\<lparr>ext = ext v2, lan = lan v \\<squnion> lan vu, own = own v'\\<rparr>\n  vd =\n  \\<lparr>ext = ext v2,\n     lan = Abs_nat_int {minimum (lan v')..minimum (lan v) - 1},\n     own = own v'\\<rparr>\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v2=vd--v3 \\<and> v3=v--vu", "by fastforce"], ["proof (state)\nthis:\n  v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. maximum (lan v) \\<noteq> maximum (lan v') \\<Longrightarrow>\n    \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "then"], ["proof (chain)\npicking this:\n  v2=vd--v3 \\<and> v3=v--vu", "show ?thesis"], ["proof (prove)\nusing this:\n  v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "using hchops"], ["proof (prove)\nusing this:\n  v2=vd--v3 \\<and> v3=v--vu\n  v'=vl\\<parallel>v1 \\<and> v1=v2\\<parallel>vr\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "by blast"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "assume \n    \"\\<exists>v1 v2 v3 vl vr vu vd. (v'=vl\\<parallel>v1) \\<and> (v1=v2\\<parallel>vr) \\<and> (v2=vd--v3) \\<and> (v3=v--vu)\""], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "then"], ["proof (chain)\npicking this:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "obtain v1 v2 v3 vl vr vu vd \n    where \" (v'=vl\\<parallel>v1) \\<and> (v1=v2\\<parallel>vr) \\<and> (v2=vd--v3) \\<and> (v3=v--vu)\""], ["proof (prove)\nusing this:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v'=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. (\\<And>vl v1 v2 vr vd v3 vu.\n        v'=vl\\<parallel>v1 \\<and>\n        v1=v2\\<parallel>vr \\<and>\n        v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v'=vl\\<parallel>v1 \\<and>\n  v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v'=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu \\<Longrightarrow>\n    v \\<le> v'", "then"], ["proof (chain)\npicking this:\n  v'=vl\\<parallel>v1 \\<and>\n  v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu", "show \"v \\<le> v'\""], ["proof (prove)\nusing this:\n  v'=vl\\<parallel>v1 \\<and>\n  v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v--vu\n\ngoal (1 subgoal):\n 1. v \\<le> v'", "by (meson horizontal_chop_leq1 horizontal_chop_leq2 order_trans vertical_chop_leq1\n        vertical_chop_leq2)"], ["proof (state)\nthis:\n  v \\<le> v'\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>The switch relation is compatible with the chopping relations, in the \nfollowing sense. If we can chop a view \\(v\\) into two subviews \\(u\\) and\n\\(w\\), and we can reach \\(v^\\prime\\) via the switch relation, then\nthere also exist two subviews \\(u^\\prime\\), \\(w^\\prime\\) of \\(v^\\prime\\),\nsuch that \\(u^\\prime\\) is reachable from \\(u\\) (and respectively for \\(w^\\prime\\), \\(w\\)).\n\\<close>"], ["", "(* switch lemmas *)"], ["", "lemma switch_unique:\"(v =c> u) \\<and> (v =c> w) \\<longrightarrow>u = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = c > u \\<and> v = c > w \\<longrightarrow> u = w", "using switch_def"], ["proof (prove)\nusing this:\n  ?v = ?c > ?w \\<equiv>\n  ext ?v = ext ?w \\<and>\n  lan ?v = lan ?w \\<and> own ?w = ?c \\<and> more ?v = more ?w\n\ngoal (1 subgoal):\n 1. v = c > u \\<and> v = c > w \\<longrightarrow> u = w", "by auto"], ["", "lemma switch_exists:\"\\<exists>c u.( v=c>u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c u. v = c > u", "using switch_def"], ["proof (prove)\nusing this:\n  ?v = ?c > ?w \\<equiv>\n  ext ?v = ext ?w \\<and>\n  lan ?v = lan ?w \\<and> own ?w = ?c \\<and> more ?v = more ?w\n\ngoal (1 subgoal):\n 1. \\<exists>c u. v = c > u", "by auto"], ["", "lemma switch_always_exists:\"\\<forall>c. \\<exists>u. (v=c>u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c. \\<exists>u. v = c > u", "by (metis select_convs switch_def)"], ["", "lemma switch_origin:\" \\<exists>u. (u=(own v)>v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u. u = own v > v", "using switch_def"], ["proof (prove)\nusing this:\n  ?v = ?c > ?w \\<equiv>\n  ext ?v = ext ?w \\<and>\n  lan ?v = lan ?w \\<and> own ?w = ?c \\<and> more ?v = more ?w\n\ngoal (1 subgoal):\n 1. \\<exists>u. u = own v > v", "by auto"], ["", "lemma switch_refl:\"(v=(own v)>v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = own v > v", "by (simp add:switch_def)"], ["", "lemma switch_symm:\"(v=c>u) \\<longrightarrow> (u=(own v)>v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = c > u \\<longrightarrow> u = own v > v", "by (simp add:switch_def)"], ["", "lemma switch_trans:\"(v=c>u) \\<and> (u=d>w) \\<longrightarrow> (v=d>w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = c > u \\<and> u = d > w \\<longrightarrow> v = d > w", "by (simp add: switch_def)"], ["", "lemma switch_triangle:\"(v=c>u) \\<and> (v=d>w) \\<longrightarrow> (u=d>w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = c > u \\<and> v = d > w \\<longrightarrow> u = d > w", "using switch_def"], ["proof (prove)\nusing this:\n  ?v = ?c > ?w \\<equiv>\n  ext ?v = ext ?w \\<and>\n  lan ?v = lan ?w \\<and> own ?w = ?c \\<and> more ?v = more ?w\n\ngoal (1 subgoal):\n 1. v = c > u \\<and> v = d > w \\<longrightarrow> u = d > w", "by auto"], ["", "lemma switch_hchop1:\n  \"(v=v1\\<parallel>v2) \\<and> (v=c>v') \\<longrightarrow>\n     (\\<exists> v1' v2'. (v1 =c> v1') \\<and> (v2 =c> v2') \\<and> (v'=v1'\\<parallel>v2'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v = c > v' \\<longrightarrow>\n    (\\<exists>v1' v2'.\n        v1 = c > v1' \\<and> v2 = c > v2' \\<and> v'=v1'\\<parallel>v2')", "by (metis (no_types, hide_lams) select_convs view.hchop_def view.switch_def)"], ["", "lemma switch_hchop2:\n  \"(v'=v1'\\<parallel>v2') \\<and> (v=c>v') \\<longrightarrow> \n      (\\<exists> v1 v2. (v1 =c> v1') \\<and> (v2 =c> v2') \\<and> (v=v1\\<parallel>v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v'=v1'\\<parallel>v2' \\<and> v = c > v' \\<longrightarrow>\n    (\\<exists>v1 v2.\n        v1 = c > v1' \\<and> v2 = c > v2' \\<and> v=v1\\<parallel>v2)", "by (metis (no_types, hide_lams) select_convs view.hchop_def view.switch_def)"], ["", "lemma switch_vchop1:\n  \"(v=v1--v2) \\<and> (v=c>v') \\<longrightarrow> \n      (\\<exists> v1' v2'. (v1 =c> v1') \\<and> (v2 =c> v2') \\<and> (v'=v1'--v2'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1--v2 \\<and> v = c > v' \\<longrightarrow>\n    (\\<exists>v1' v2'. v1 = c > v1' \\<and> v2 = c > v2' \\<and> v'=v1'--v2')", "by (metis (no_types, hide_lams) select_convs view.vchop_def view.switch_def)"], ["", "lemma switch_vchop2:\n  \"(v'=v1'--v2') \\<and> (v=c>v') \\<longrightarrow>\n       (\\<exists> v1 v2. (v1 =c> v1') \\<and> (v2 =c> v2') \\<and> (v=v1--v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v'=v1'--v2' \\<and> v = c > v' \\<longrightarrow>\n    (\\<exists>v1 v2. v1 = c > v1' \\<and> v2 = c > v2' \\<and> v=v1--v2)", "by (metis (no_types, hide_lams) select_convs view.vchop_def view.switch_def)"], ["", "lemma switch_leq:\"u' \\<le> u \\<and> (v=c>u) \\<longrightarrow> (\\<exists>v'. (v'=c>u') \\<and> v' \\<le> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u' \\<le> u \\<and> v = c > u \\<longrightarrow>\n    (\\<exists>v'. v' = c > u' \\<and> v' \\<le> v)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. u' \\<le> u \\<and> v = c > u \\<Longrightarrow>\n    \\<exists>v'. v' = c > u' \\<and> v' \\<le> v", "assume assm: \"u' \\<le> u \\<and> (v=c>u)\""], ["proof (state)\nthis:\n  u' \\<le> u \\<and> v = c > u\n\ngoal (1 subgoal):\n 1. u' \\<le> u \\<and> v = c > u \\<Longrightarrow>\n    \\<exists>v'. v' = c > u' \\<and> v' \\<le> v", "then"], ["proof (chain)\npicking this:\n  u' \\<le> u \\<and> v = c > u", "have more_eq:\"more v = more u\""], ["proof (prove)\nusing this:\n  u' \\<le> u \\<and> v = c > u\n\ngoal (1 subgoal):\n 1. more v = more u", "using view.switch_def"], ["proof (prove)\nusing this:\n  u' \\<le> u \\<and> v = c > u\n  ?v = ?c > ?w \\<equiv>\n  ext ?v = ext ?w \\<and>\n  lan ?v = lan ?w \\<and> own ?w = ?c \\<and> more ?v = more ?w\n\ngoal (1 subgoal):\n 1. more v = more u", "by blast"], ["proof (state)\nthis:\n  more v = more u\n\ngoal (1 subgoal):\n 1. u' \\<le> u \\<and> v = c > u \\<Longrightarrow>\n    \\<exists>v'. v' = c > u' \\<and> v' \\<le> v", "then"], ["proof (chain)\npicking this:\n  more v = more u", "obtain v' where v'_def:\"v'= \\<lparr> ext =ext u', lan = lan u', own = own v\\<rparr>\""], ["proof (prove)\nusing this:\n  more v = more u\n\ngoal (1 subgoal):\n 1. (\\<And>v'.\n        v' =\n        \\<lparr>ext = ext u', lan = lan u',\n           own = own v\\<rparr> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v' = \\<lparr>ext = ext u', lan = lan u', own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. u' \\<le> u \\<and> v = c > u \\<Longrightarrow>\n    \\<exists>v'. v' = c > u' \\<and> v' \\<le> v", "have ext:\"ext v' \\<le> ext v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ext v' \\<le> ext v", "using assm switch_def"], ["proof (prove)\nusing this:\n  u' \\<le> u \\<and> v = c > u\n  ?v = ?c > ?w \\<equiv>\n  ext ?v = ext ?w \\<and>\n  lan ?v = lan ?w \\<and> own ?w = ?c \\<and> more ?v = more ?w\n\ngoal (1 subgoal):\n 1. ext v' \\<le> ext v", "by (simp add: less_eq_view_ext_def v'_def)"], ["proof (state)\nthis:\n  ext v' \\<le> ext v\n\ngoal (1 subgoal):\n 1. u' \\<le> u \\<and> v = c > u \\<Longrightarrow>\n    \\<exists>v'. v' = c > u' \\<and> v' \\<le> v", "have lan:\"lan v' \\<le> lan v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lan v' \\<le> lan v", "using assm switch_def"], ["proof (prove)\nusing this:\n  u' \\<le> u \\<and> v = c > u\n  ?v = ?c > ?w \\<equiv>\n  ext ?v = ext ?w \\<and>\n  lan ?v = lan ?w \\<and> own ?w = ?c \\<and> more ?v = more ?w\n\ngoal (1 subgoal):\n 1. lan v' \\<le> lan v", "by (simp add: less_eq_view_ext_def v'_def)"], ["proof (state)\nthis:\n  lan v' \\<le> lan v\n\ngoal (1 subgoal):\n 1. u' \\<le> u \\<and> v = c > u \\<Longrightarrow>\n    \\<exists>v'. v' = c > u' \\<and> v' \\<le> v", "have more:\"more v' \\<le> more v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. more v' \\<le> more v", "using more_eq assm"], ["proof (prove)\nusing this:\n  more v = more u\n  u' \\<le> u \\<and> v = c > u\n\ngoal (1 subgoal):\n 1. more v' \\<le> more v", "by simp"], ["proof (state)\nthis:\n  more v' \\<le> more v\n\ngoal (1 subgoal):\n 1. u' \\<le> u \\<and> v = c > u \\<Longrightarrow>\n    \\<exists>v'. v' = c > u' \\<and> v' \\<le> v", "have less: \"v' \\<le> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v' \\<le> v", "using less_eq_view_ext_def ext lan more v'_def"], ["proof (prove)\nusing this:\n  ?V \\<le> ?V' \\<equiv>\n  ext ?V \\<le> ext ?V' \\<and>\n  lan ?V \\<le> lan ?V' \\<and> own ?V = own ?V' \\<and> more ?V \\<le> more ?V'\n  ext v' \\<le> ext v\n  lan v' \\<le> lan v\n  more v' \\<le> more v\n  v' = \\<lparr>ext = ext u', lan = lan u', own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v' \\<le> v", "by (simp add: less_eq_view_ext_def)"], ["proof (state)\nthis:\n  v' \\<le> v\n\ngoal (1 subgoal):\n 1. u' \\<le> u \\<and> v = c > u \\<Longrightarrow>\n    \\<exists>v'. v' = c > u' \\<and> v' \\<le> v", "have switch:\"v' =c> u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v' = c > u'", "using v'_def switch_def assm"], ["proof (prove)\nusing this:\n  v' = \\<lparr>ext = ext u', lan = lan u', own = own v\\<rparr>\n  ?v = ?c > ?w \\<equiv>\n  ext ?v = ext ?w \\<and>\n  lan ?v = lan ?w \\<and> own ?w = ?c \\<and> more ?v = more ?w\n  u' \\<le> u \\<and> v = c > u\n\ngoal (1 subgoal):\n 1. v' = c > u'", "by (simp add: less_eq_view_ext_def)"], ["proof (state)\nthis:\n  v' = c > u'\n\ngoal (1 subgoal):\n 1. u' \\<le> u \\<and> v = c > u \\<Longrightarrow>\n    \\<exists>v'. v' = c > u' \\<and> v' \\<le> v", "show  \"(\\<exists>v'. ( v' = c > u') \\<and> v' \\<le> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v'. v' = c > u' \\<and> v' \\<le> v", "using switch less"], ["proof (prove)\nusing this:\n  v' = c > u'\n  v' \\<le> v\n\ngoal (1 subgoal):\n 1. \\<exists>v'. v' = c > u' \\<and> v' \\<le> v", "by blast"], ["proof (state)\nthis:\n  \\<exists>v'. v' = c > u' \\<and> v' \\<le> v\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}