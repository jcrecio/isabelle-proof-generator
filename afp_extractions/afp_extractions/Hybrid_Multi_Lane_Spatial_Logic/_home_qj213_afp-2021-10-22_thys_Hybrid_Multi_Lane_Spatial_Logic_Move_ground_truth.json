{"file_name": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic/Move.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic", "problem_names": ["lemma move_keeps_length:\"\\<parallel>ext v\\<parallel> = \\<parallel>ext (move ts ts' v)\\<parallel>\"", "lemma move_keeps_lanes:\"lan v = lan (move ts ts' v)\"", "lemma move_keeps_owner:\"own v = own (move ts ts' v)\"", "lemma move_nothing :\"move ts ts v = v\"", "lemma move_trans:\n  \"(ts \\<^bold>\\<Rightarrow> ts') \\<and> (ts' \\<^bold>\\<Rightarrow>ts'') \\<longrightarrow> move ts' ts'' (move ts ts' v) = move ts ts'' v\"", "lemma move_stability_res:\"(ts\\<^bold>\\<midarrow>r(c)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> move ts ts' v = v\" \n  and move_stability_clm: \"(ts\\<^bold>\\<midarrow>c(c,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> move ts ts' v = v\"\n  and move_stability_wdr:\"(ts\\<^bold>\\<midarrow>wdr(c,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> move ts ts' v = v\"\n  and move_stability_wdc:\"(ts\\<^bold>\\<midarrow>wdc(c)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> move ts ts' v = v\""], "translations": [["", "lemma move_keeps_length:\"\\<parallel>ext v\\<parallel> = \\<parallel>ext (move ts ts' v)\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>ext v\\<parallel> = \\<parallel>ext (move ts ts' v)\\<parallel>", "using real_int.shift_keeps_length"], ["proof (prove)\nusing this:\n  \\<parallel>?r\\<parallel> = \\<parallel> shift ?r ?x\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<parallel>ext v\\<parallel> = \\<parallel>ext (move ts ts' v)\\<parallel>", "by (simp add: move_def)"], ["", "lemma move_keeps_lanes:\"lan v = lan (move ts ts' v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lan v = lan (move ts ts' v)", "using move_def"], ["proof (prove)\nusing this:\n  move ?ts ?ts' ?v =\n  \\<lparr>ext =  shift ext ?v pos ?ts' (own ?v) - pos ?ts (own ?v),\n     lan = lan ?v, own = own ?v\\<rparr>\n\ngoal (1 subgoal):\n 1. lan v = lan (move ts ts' v)", "by simp"], ["", "lemma move_keeps_owner:\"own v = own (move ts ts' v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. own v = own (move ts ts' v)", "using move_def"], ["proof (prove)\nusing this:\n  move ?ts ?ts' ?v =\n  \\<lparr>ext =  shift ext ?v pos ?ts' (own ?v) - pos ?ts (own ?v),\n     lan = lan ?v, own = own ?v\\<rparr>\n\ngoal (1 subgoal):\n 1. own v = own (move ts ts' v)", "by simp"], ["", "lemma move_nothing :\"move ts ts v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. move ts ts v = v", "using real_int.shift_zero move_def"], ["proof (prove)\nusing this:\n   shift ?r 0 = ?r\n  move ?ts ?ts' ?v =\n  \\<lparr>ext =  shift ext ?v pos ?ts' (own ?v) - pos ?ts (own ?v),\n     lan = lan ?v, own = own ?v\\<rparr>\n\ngoal (1 subgoal):\n 1. move ts ts v = v", "by simp"], ["", "lemma move_trans:\n  \"(ts \\<^bold>\\<Rightarrow> ts') \\<and> (ts' \\<^bold>\\<Rightarrow>ts'') \\<longrightarrow> move ts' ts'' (move ts ts' v) = move ts ts'' v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<Rightarrow> ts' \\<and>\n    ts' \\<^bold>\\<Rightarrow> ts'' \\<longrightarrow>\n    move ts' ts'' (move ts ts' v) = move ts ts'' v", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<Rightarrow> ts' \\<and>\n    ts' \\<^bold>\\<Rightarrow> ts'' \\<Longrightarrow>\n    move ts' ts'' (move ts ts' v) = move ts ts'' v", "assume assm:\"(ts \\<^bold>\\<Rightarrow> ts') \\<and> (ts' \\<^bold>\\<Rightarrow>ts'')\""], ["proof (state)\nthis:\n  ts \\<^bold>\\<Rightarrow> ts' \\<and> ts' \\<^bold>\\<Rightarrow> ts''\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<Rightarrow> ts' \\<and>\n    ts' \\<^bold>\\<Rightarrow> ts'' \\<Longrightarrow>\n    move ts' ts'' (move ts ts' v) = move ts ts'' v", "have \n    \"(pos ts'' (own v)) - pos ts (own v) \n      = (pos ts'' (own v) + pos ts' (own v)) - ( pos ts (own v) + pos ts' (own v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos ts'' (own v) - pos ts (own v) =\n    pos ts'' (own v) + pos ts' (own v) - (pos ts (own v) + pos ts' (own v))", "by simp"], ["proof (state)\nthis:\n  pos ts'' (own v) - pos ts (own v) =\n  pos ts'' (own v) + pos ts' (own v) - (pos ts (own v) + pos ts' (own v))\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<Rightarrow> ts' \\<and>\n    ts' \\<^bold>\\<Rightarrow> ts'' \\<Longrightarrow>\n    move ts' ts'' (move ts ts' v) = move ts ts'' v", "have \n    \"move ts' ts'' (move ts ts' v) =\n    \\<lparr> ext = \n    shift (ext (move ts ts' v)) \n      (pos ts'' (own (move ts ts' v)) - pos ts' (own (move ts ts' v))),\n     lan = lan (move ts ts' v), \n     own = own (move ts ts' v) \\<rparr> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. move ts' ts'' (move ts ts' v) =\n    \\<lparr>ext =\n               shift ext (move ts ts'\n                           v) pos ts'' (own (move ts ts' v)) -\n                              pos ts' (own (move ts ts' v)),\n       lan = lan (move ts ts' v), own = own (move ts ts' v)\\<rparr>", "using move_def"], ["proof (prove)\nusing this:\n  move ?ts ?ts' ?v =\n  \\<lparr>ext =  shift ext ?v pos ?ts' (own ?v) - pos ?ts (own ?v),\n     lan = lan ?v, own = own ?v\\<rparr>\n\ngoal (1 subgoal):\n 1. move ts' ts'' (move ts ts' v) =\n    \\<lparr>ext =\n               shift ext (move ts ts'\n                           v) pos ts'' (own (move ts ts' v)) -\n                              pos ts' (own (move ts ts' v)),\n       lan = lan (move ts ts' v), own = own (move ts ts' v)\\<rparr>", "by blast"], ["proof (state)\nthis:\n  move ts' ts'' (move ts ts' v) =\n  \\<lparr>ext =\n             shift ext (move ts ts'\n                         v) pos ts'' (own (move ts ts' v)) -\n                            pos ts' (own (move ts ts' v)),\n     lan = lan (move ts ts' v), own = own (move ts ts' v)\\<rparr>\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<Rightarrow> ts' \\<and>\n    ts' \\<^bold>\\<Rightarrow> ts'' \\<Longrightarrow>\n    move ts' ts'' (move ts ts' v) = move ts ts'' v", "hence \"move ts' ts'' (move ts ts' v) = \n \\<lparr> ext = shift (ext (move ts ts' v)) (pos ts'' (own v) - pos ts' (own  v)),\n  lan = lan  v, own = own  v \\<rparr> \""], ["proof (prove)\nusing this:\n  move ts' ts'' (move ts ts' v) =\n  \\<lparr>ext =\n             shift ext (move ts ts'\n                         v) pos ts'' (own (move ts ts' v)) -\n                            pos ts' (own (move ts ts' v)),\n     lan = lan (move ts ts' v), own = own (move ts ts' v)\\<rparr>\n\ngoal (1 subgoal):\n 1. move ts' ts'' (move ts ts' v) =\n    \\<lparr>ext =\n               shift ext (move ts ts' v) pos ts'' (own v) - pos ts' (own v),\n       lan = lan v, own = own v\\<rparr>", "using move_def"], ["proof (prove)\nusing this:\n  move ts' ts'' (move ts ts' v) =\n  \\<lparr>ext =\n             shift ext (move ts ts'\n                         v) pos ts'' (own (move ts ts' v)) -\n                            pos ts' (own (move ts ts' v)),\n     lan = lan (move ts ts' v), own = own (move ts ts' v)\\<rparr>\n  move ?ts ?ts' ?v =\n  \\<lparr>ext =  shift ext ?v pos ?ts' (own ?v) - pos ?ts (own ?v),\n     lan = lan ?v, own = own ?v\\<rparr>\n\ngoal (1 subgoal):\n 1. move ts' ts'' (move ts ts' v) =\n    \\<lparr>ext =\n               shift ext (move ts ts' v) pos ts'' (own v) - pos ts' (own v),\n       lan = lan v, own = own v\\<rparr>", "by simp"], ["proof (state)\nthis:\n  move ts' ts'' (move ts ts' v) =\n  \\<lparr>ext =\n             shift ext (move ts ts' v) pos ts'' (own v) - pos ts' (own v),\n     lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<Rightarrow> ts' \\<and>\n    ts' \\<^bold>\\<Rightarrow> ts'' \\<Longrightarrow>\n    move ts' ts'' (move ts ts' v) = move ts ts'' v", "then"], ["proof (chain)\npicking this:\n  move ts' ts'' (move ts ts' v) =\n  \\<lparr>ext =\n             shift ext (move ts ts' v) pos ts'' (own v) - pos ts' (own v),\n     lan = lan v, own = own v\\<rparr>", "show \"move ts' ts'' (move ts ts' v) = move ts ts'' v\""], ["proof (prove)\nusing this:\n  move ts' ts'' (move ts ts' v) =\n  \\<lparr>ext =\n             shift ext (move ts ts' v) pos ts'' (own v) - pos ts' (own v),\n     lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. move ts' ts'' (move ts ts' v) = move ts ts'' v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. move ts' ts'' (move ts ts' v) =\n    \\<lparr>ext =\n               shift ext (move ts ts' v) pos ts'' (own v) - pos ts' (own v),\n       lan = lan v, own = own v\\<rparr> \\<Longrightarrow>\n    move ts' ts'' (move ts ts' v) = move ts ts'' v", "have f2: \"\\<forall>x0 x1. (x1::real) + x0 = x0 + x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x0 x1. x1 + x0 = x0 + x1", "by auto"], ["proof (state)\nthis:\n  \\<forall>x0 x1. x1 + x0 = x0 + x1\n\ngoal (1 subgoal):\n 1. move ts' ts'' (move ts ts' v) =\n    \\<lparr>ext =\n               shift ext (move ts ts' v) pos ts'' (own v) - pos ts' (own v),\n       lan = lan v, own = own v\\<rparr> \\<Longrightarrow>\n    move ts' ts'' (move ts ts' v) = move ts ts'' v", "have \n      \"pos ts'' (own v)\n          + -1*pos ts' (own v)+(pos ts' (own v) + -1*pos ts (own v)) \n        = pos ts'' (own v) + - 1 * pos ts (own v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos ts'' (own v) + - 1 * pos ts' (own v) +\n    (pos ts' (own v) + - 1 * pos ts (own v)) =\n    pos ts'' (own v) + - 1 * pos ts (own v)", "by auto"], ["proof (state)\nthis:\n  pos ts'' (own v) + - 1 * pos ts' (own v) +\n  (pos ts' (own v) + - 1 * pos ts (own v)) =\n  pos ts'' (own v) + - 1 * pos ts (own v)\n\ngoal (1 subgoal):\n 1. move ts' ts'' (move ts ts' v) =\n    \\<lparr>ext =\n               shift ext (move ts ts' v) pos ts'' (own v) - pos ts' (own v),\n       lan = lan v, own = own v\\<rparr> \\<Longrightarrow>\n    move ts' ts'' (move ts ts' v) = move ts ts'' v", "then"], ["proof (chain)\npicking this:\n  pos ts'' (own v) + - 1 * pos ts' (own v) +\n  (pos ts' (own v) + - 1 * pos ts (own v)) =\n  pos ts'' (own v) + - 1 * pos ts (own v)", "have \n      \"(shift (ext v) ((pos ts'' (own v)) + ( -1 *  pos ts (own v)))) = \n       shift (shift  (ext v) (pos ts' (own v) + - 1 * pos ts (own v))) \n          (pos ts'' (own v) + - 1 * pos ts' (own v))\""], ["proof (prove)\nusing this:\n  pos ts'' (own v) + - 1 * pos ts' (own v) +\n  (pos ts' (own v) + - 1 * pos ts (own v)) =\n  pos ts'' (own v) + - 1 * pos ts (own v)\n\ngoal (1 subgoal):\n 1.  shift ext v pos ts'' (own v) + - 1 * pos ts (own v) =\n     shift  shift ext v pos ts' (own v) +\n                        - 1 *\n                        pos ts\n                         (own v) pos ts'' (own v) + - 1 * pos ts' (own v)", "by (metis f2 real_int.shift_additivity)"], ["proof (state)\nthis:\n   shift ext v pos ts'' (own v) + - 1 * pos ts (own v) =\n   shift  shift ext v pos ts' (own v) +\n                      - 1 *\n                      pos ts\n                       (own v) pos ts'' (own v) + - 1 * pos ts' (own v)\n\ngoal (1 subgoal):\n 1. move ts' ts'' (move ts ts' v) =\n    \\<lparr>ext =\n               shift ext (move ts ts' v) pos ts'' (own v) - pos ts' (own v),\n       lan = lan v, own = own v\\<rparr> \\<Longrightarrow>\n    move ts' ts'' (move ts ts' v) = move ts ts'' v", "then"], ["proof (chain)\npicking this:\n   shift ext v pos ts'' (own v) + - 1 * pos ts (own v) =\n   shift  shift ext v pos ts' (own v) +\n                      - 1 *\n                      pos ts\n                       (own v) pos ts'' (own v) + - 1 * pos ts' (own v)", "show ?thesis"], ["proof (prove)\nusing this:\n   shift ext v pos ts'' (own v) + - 1 * pos ts (own v) =\n   shift  shift ext v pos ts' (own v) +\n                      - 1 *\n                      pos ts\n                       (own v) pos ts'' (own v) + - 1 * pos ts' (own v)\n\ngoal (1 subgoal):\n 1. move ts' ts'' (move ts ts' v) = move ts ts'' v", "using move_def f2"], ["proof (prove)\nusing this:\n   shift ext v pos ts'' (own v) + - 1 * pos ts (own v) =\n   shift  shift ext v pos ts' (own v) +\n                      - 1 *\n                      pos ts\n                       (own v) pos ts'' (own v) + - 1 * pos ts' (own v)\n  move ?ts ?ts' ?v =\n  \\<lparr>ext =  shift ext ?v pos ?ts' (own ?v) - pos ?ts (own ?v),\n     lan = lan ?v, own = own ?v\\<rparr>\n  \\<forall>x0 x1. x1 + x0 = x0 + x1\n\ngoal (1 subgoal):\n 1. move ts' ts'' (move ts ts' v) = move ts ts'' v", "by simp"], ["proof (state)\nthis:\n  move ts' ts'' (move ts ts' v) = move ts ts'' v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  move ts' ts'' (move ts ts' v) = move ts ts'' v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma move_stability_res:\"(ts\\<^bold>\\<midarrow>r(c)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> move ts ts' v = v\" \n  and move_stability_clm: \"(ts\\<^bold>\\<midarrow>c(c,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> move ts ts' v = v\"\n  and move_stability_wdr:\"(ts\\<^bold>\\<midarrow>wdr(c,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> move ts ts' v = v\"\n  and move_stability_wdc:\"(ts\\<^bold>\\<midarrow>wdc(c)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> move ts ts' v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ts \\<^bold>\\<midarrow>r( c ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n     move ts ts' v = v &&&\n     ts \\<^bold>\\<midarrow>c( c, n ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n     move ts ts' v = v) &&&\n    ts \\<^bold>\\<midarrow>wdr( c, n ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    move ts ts' v = v &&&\n    ts \\<^bold>\\<midarrow>wdc( c ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    move ts ts' v = v", "using create_reservation_def create_claim_def withdraw_reservation_def\n    withdraw_claim_def move_def move_nothing"], ["proof (prove)\nusing this:\n  ?ts \\<^bold>\\<midarrow>r( ?c ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = (res ?ts)(?c := res ?ts ?c \\<squnion> clm ?ts ?c) \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  clm ?ts' = (clm ?ts)(?c := bot) \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts\n  ?ts \\<^bold>\\<midarrow>c( ?c, ?n ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = res ?ts \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts \\<and>\n  |clm ?ts ?c| = 0 \\<and>\n  |res ?ts ?c| = 1 \\<and>\n  (?n + 1 \\<^bold>\\<in> res ?ts ?c \\<or>\n   ?n - 1 \\<^bold>\\<in> res ?ts ?c) \\<and>\n  clm ?ts' = (clm ?ts)(?c := Abs_nat_int {?n})\n  ?ts \\<^bold>\\<midarrow>wdr( ?c, ?n ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = (res ?ts)(?c := Abs_nat_int {?n}) \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  clm ?ts' = clm ?ts \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts \\<and>\n  ?n \\<^bold>\\<in> res ?ts ?c \\<and> |res ?ts ?c| = 2\n  ?ts \\<^bold>\\<midarrow>wdc( ?c ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = res ?ts \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts \\<and>\n  clm ?ts' = (clm ?ts)(?c := bot)\n  move ?ts ?ts' ?v =\n  \\<lparr>ext =  shift ext ?v pos ?ts' (own ?v) - pos ?ts (own ?v),\n     lan = lan ?v, own = own ?v\\<rparr>\n  move ?ts ?ts ?v = ?v\n\ngoal (1 subgoal):\n 1. (ts \\<^bold>\\<midarrow>r( c ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n     move ts ts' v = v &&&\n     ts \\<^bold>\\<midarrow>c( c, n ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n     move ts ts' v = v) &&&\n    ts \\<^bold>\\<midarrow>wdr( c, n ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    move ts ts' v = v &&&\n    ts \\<^bold>\\<midarrow>wdc( c ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    move ts ts' v = v", "by (auto)+"], ["", "end"], ["", "end"]]}