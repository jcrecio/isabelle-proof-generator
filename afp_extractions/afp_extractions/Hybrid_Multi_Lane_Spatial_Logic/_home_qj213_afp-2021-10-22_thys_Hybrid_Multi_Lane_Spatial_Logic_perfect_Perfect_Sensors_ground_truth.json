{"file_name": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic/perfect/Perfect_Sensors.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic", "problem_names": ["lemma create_reservation_length_stable:\n  \"(ts\\<^bold>\\<midarrow>r(d)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\"", "lemma create_claim_length_stable:\n  \"(ts\\<^bold>\\<midarrow>c(d,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\"", "lemma withdraw_reservation_length_stable:\n  \"(ts\\<^bold>\\<midarrow>wdr(d,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\"", "lemma withdraw_claim_length_stable:\n  \"(ts\\<^bold>\\<midarrow>wdc(d)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\"", "lemma all_own_ext_eq_len_eq:\n  \"ext v = ext v'  \\<longrightarrow> len v ts c = len v' ts c\"", "lemma switch_length_stable:\"(v=d>v') \\<longrightarrow> len v ts c = len v' ts c\""], "translations": [["", "lemma create_reservation_length_stable:\n  \"(ts\\<^bold>\\<midarrow>r(d)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    len v ts c = len v ts' c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume assm:\"(ts\\<^bold>\\<midarrow>r(d)\\<^bold>\\<rightarrow>ts')\""], ["proof (state)\nthis:\n  ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence eq:\"space ts v c = space ts' v c\""], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "using traffic.create_reservation_def perfect_sensors.space_def perfect_def"], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts'\n  ?ts \\<^bold>\\<midarrow>r( ?c ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = (res ?ts)(?c := res ?ts ?c \\<squnion> clm ?ts ?c) \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  clm ?ts' = (clm ?ts)(?c := bot) \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + perfect (own ?v) ?ts ?c)\n  perfect ?e ?ts ?c \\<equiv> physical_size ?ts ?c + braking_distance ?ts ?c\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "by (simp)"], ["proof (state)\nthis:\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>r( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \"left ((space ts v) c) > right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_right:\"left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_right':\"left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  right (ext v) < left (space ts' v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_right and outside_right'"], ["proof (chain)\npicking this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_right:\"\\<not> left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_right':\"\\<not> left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \" left (ext v) > right ((space ts v) c) \")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_left:\" left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_left':\" left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  right (space ts' v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_left and outside_left'"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_left:\"\\<not> left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_left':\"\\<not> left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from inside_left inside_right inside_left' inside_right' eq"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma create_claim_length_stable:\n  \"(ts\\<^bold>\\<midarrow>c(d,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    len v ts c = len v ts' c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume assm:\"(ts\\<^bold>\\<midarrow>c(d,n)\\<^bold>\\<rightarrow>ts')\""], ["proof (state)\nthis:\n  ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence eq:\"space ts v c = space ts' v c\""], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "using traffic.create_claim_def perfect_sensors.space_def perfect_def"], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts'\n  ?ts \\<^bold>\\<midarrow>c( ?c, ?n ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = res ?ts \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts \\<and>\n  |clm ?ts ?c| = 0 \\<and>\n  |res ?ts ?c| = 1 \\<and>\n  (?n + 1 \\<^bold>\\<in> res ?ts ?c \\<or>\n   ?n - 1 \\<^bold>\\<in> res ?ts ?c) \\<and>\n  clm ?ts' = (clm ?ts)(?c := Abs_nat_int {?n})\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + perfect (own ?v) ?ts ?c)\n  perfect ?e ?ts ?c \\<equiv> physical_size ?ts ?c + braking_distance ?ts ?c\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "by (simp)"], ["proof (state)\nthis:\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>c( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \"left ((space ts v) c) > right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_right:\"left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_right':\"left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  right (ext v) < left (space ts' v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_right and outside_right'"], ["proof (chain)\npicking this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_right:\"\\<not> left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_right':\"\\<not> left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \" left (ext v) > right ((space ts v) c) \")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_left:\" left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_left':\" left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  right (space ts' v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_left and outside_left'"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_left:\"\\<not> left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_left':\"\\<not> left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from inside_left inside_right inside_left' inside_right' eq"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma withdraw_reservation_length_stable:\n  \"(ts\\<^bold>\\<midarrow>wdr(d,n)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    len v ts c = len v ts' c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume assm:\"(ts\\<^bold>\\<midarrow>wdr(d,n)\\<^bold>\\<rightarrow>ts')\""], ["proof (state)\nthis:\n  ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence eq:\"space ts v c = space ts' v c\""], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "using traffic.withdraw_reservation_def perfect_sensors.space_def perfect_def"], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts'\n  ?ts \\<^bold>\\<midarrow>wdr( ?c, ?n ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = (res ?ts)(?c := Abs_nat_int {?n}) \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  clm ?ts' = clm ?ts \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts \\<and>\n  ?n \\<^bold>\\<in> res ?ts ?c \\<and> |res ?ts ?c| = 2\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + perfect (own ?v) ?ts ?c)\n  perfect ?e ?ts ?c \\<equiv> physical_size ?ts ?c + braking_distance ?ts ?c\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "by (simp)"], ["proof (state)\nthis:\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdr( d, n ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \"left ((space ts v) c) > right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_right:\"left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_right':\"left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  right (ext v) < left (space ts' v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_right and outside_right'"], ["proof (chain)\npicking this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_right:\"\\<not> left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_right':\"\\<not> left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \" left (ext v) > right ((space ts v) c) \")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_left:\" left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_left':\" left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  right (space ts' v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_left and outside_left'"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_left:\"\\<not> left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_left':\"\\<not> left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from inside_left inside_right inside_left' inside_right' eq"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma withdraw_claim_length_stable:\n  \"(ts\\<^bold>\\<midarrow>wdc(d)\\<^bold>\\<rightarrow>ts') \\<longrightarrow> len v ts c = len v ts' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts' \\<longrightarrow>\n    len v ts c = len v ts' c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume assm:\"(ts\\<^bold>\\<midarrow>wdc(d)\\<^bold>\\<rightarrow>ts')\""], ["proof (state)\nthis:\n  ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence eq:\"space ts v c = space ts' v c\""], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts'\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "using traffic.withdraw_claim_def perfect_sensors.space_def perfect_def"], ["proof (prove)\nusing this:\n  ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts'\n  ?ts \\<^bold>\\<midarrow>wdc( ?c ) \\<^bold>\\<rightarrow> ?ts' \\<equiv>\n  pos ?ts' = pos ?ts \\<and>\n  res ?ts' = res ?ts \\<and>\n  dyn ?ts' = dyn ?ts \\<and>\n  physical_size ?ts' = physical_size ?ts \\<and>\n  braking_distance ?ts' = braking_distance ?ts \\<and>\n  clm ?ts' = (clm ?ts)(?c := bot)\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + perfect (own ?v) ?ts ?c)\n  perfect ?e ?ts ?c \\<equiv> physical_size ?ts ?c + braking_distance ?ts ?c\n\ngoal (1 subgoal):\n 1. space ts v c = space ts' v c", "by (simp)"], ["proof (state)\nthis:\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. ts \\<^bold>\\<midarrow>wdc( d ) \\<^bold>\\<rightarrow> ts' \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \"left ((space ts v) c) > right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_right:\"left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_right':\"left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  right (ext v) < left (space ts' v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_right and outside_right'"], ["proof (chain)\npicking this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_right:\"\\<not> left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_right':\"\\<not> left ((space ts' v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts' v c)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts' v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v ts' c", "show \"len v ( ts) c = len v ( ts') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "proof (cases \" left (ext v) > right ((space ts v) c) \")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume outside_left:\" left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence outside_left':\" left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  right (space ts' v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from outside_left and outside_left'"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def eq)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "assume inside_left:\"\\<not> left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "hence inside_left':\"\\<not> left (ext v) > right ((space ts' v) c) \""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "using eq"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts' v c) < left (ext v)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (space ts' v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v ts' c", "from inside_left inside_right inside_left' inside_right' eq"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts' v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts' v c)\n  space ts v c = space ts' v c\n\ngoal (1 subgoal):\n 1. len v ts c = len v ts' c", "by (simp add: perfect_sensors.len_def)"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v ts' c\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\nThe following lemma shows that the perceived length is independent from\nthe owner of the view. That is, as long as two views consist of the same \nextension, the perceived length of each car is the same in both views.\n\\<close>"], ["", "lemma all_own_ext_eq_len_eq:\n  \"ext v = ext v'  \\<longrightarrow> len v ts c = len v' ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ext v = ext v' \\<longrightarrow> len v ts c = len v' ts c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. ext v = ext v' \\<Longrightarrow> len v ts c = len v' ts c", "assume assm:\"ext v = ext v'\""], ["proof (state)\nthis:\n  ext v = ext v'\n\ngoal (1 subgoal):\n 1. ext v = ext v' \\<Longrightarrow> len v ts c = len v' ts c", "hence sp:\"space ts v c = space ts v' c\""], ["proof (prove)\nusing this:\n  ext v = ext v'\n\ngoal (1 subgoal):\n 1. space ts v c = space ts v' c", "by (simp add: perfect_def  perfect_sensors.space_def)"], ["proof (state)\nthis:\n  space ts v c = space ts v' c\n\ngoal (1 subgoal):\n 1. ext v = ext v' \\<Longrightarrow> len v ts c = len v' ts c", "have left_eq:\"left (ext v) = left (ext v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v) = left (ext v')", "using assm"], ["proof (prove)\nusing this:\n  ext v = ext v'\n\ngoal (1 subgoal):\n 1. left (ext v) = left (ext v')", "by simp"], ["proof (state)\nthis:\n  left (ext v) = left (ext v')\n\ngoal (1 subgoal):\n 1. ext v = ext v' \\<Longrightarrow> len v ts c = len v' ts c", "have right_eq:\"right (ext v) = right (ext v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (ext v) = right (ext v')", "using assm"], ["proof (prove)\nusing this:\n  ext v = ext v'\n\ngoal (1 subgoal):\n 1. right (ext v) = right (ext v')", "by simp"], ["proof (state)\nthis:\n  right (ext v) = right (ext v')\n\ngoal (1 subgoal):\n 1. ext v = ext v' \\<Longrightarrow> len v ts c = len v' ts c", "show \"len v ( ts) c = len v' ( ts) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v' ts c", "proof (cases \"left ((space ts v) c) > right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v' ts c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v' ts c", "assume outside_right:\"left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v' ts c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v' ts c", "hence outside_right':\"left ((space ts v) c) > right (ext v')\""], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v') < left (space ts v c)", "using right_eq"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  right (ext v) = right (ext v')\n\ngoal (1 subgoal):\n 1. right (ext v') < left (space ts v c)", "by simp"], ["proof (state)\nthis:\n  right (ext v') < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v' ts c\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v' ts c", "from outside_right and outside_right'"], ["proof (chain)\npicking this:\n  right (ext v) < left (space ts v c)\n  right (ext v') < left (space ts v c)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  right (ext v') < left (space ts v c)\n\ngoal (1 subgoal):\n 1. len v ts c = len v' ts c", "by (simp add: perfect_sensors.len_def right_eq assm sp)"], ["proof (state)\nthis:\n  len v ts c = len v' ts c\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v' ts c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v' ts c", "assume inside_right:\"\\<not> left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v' ts c", "hence inside_right':\"\\<not> left ((space ts v) c) > right (ext v')\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v') < left (space ts v c)", "using right_eq"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n  right (ext v) = right (ext v')\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v') < left (space ts v c)", "by simp"], ["proof (state)\nthis:\n  \\<not> right (ext v') < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = len v' ts c", "show \"len v ( ts) c = len v' ( ts) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = len v' ts c", "proof (cases \" left (ext v) > right ((space ts v) c) \")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v' ts c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v' ts c", "assume outside_left:\" left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v' ts c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v' ts c", "hence outside_left':\" left (ext v') > right ((space ts v) c) \""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts v c) < left (ext v')", "using left_eq"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  left (ext v) = left (ext v')\n\ngoal (1 subgoal):\n 1. right (space ts v c) < left (ext v')", "by simp"], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v')\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v' ts c\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v' ts c", "from outside_left and outside_left'"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v)\n  right (space ts v c) < left (ext v')", "show ?thesis"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  right (space ts v c) < left (ext v')\n\ngoal (1 subgoal):\n 1. len v ts c = len v' ts c", "using perfect_sensors.len_def left_eq sp right_eq"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  right (space ts v c) < left (ext v')\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left (ext v) = left (ext v')\n  space ts v c = space ts v' c\n  right (ext v) = right (ext v')\n\ngoal (1 subgoal):\n 1. len v ts c = len v' ts c", "by auto"], ["proof (state)\nthis:\n  len v ts c = len v' ts c\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v' ts c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v' ts c", "assume inside_left:\"\\<not> left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v' ts c", "hence inside_left':\"\\<not> left (ext v') > right ((space ts v) c) \""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v')", "using left_eq"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  left (ext v) = left (ext v')\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v')", "by simp"], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v')\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = len v' ts c", "from inside_left inside_right inside_left' inside_right' left_eq right_eq"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts v c) < left (ext v')\n  \\<not> right (ext v') < left (space ts v c)\n  left (ext v) = left (ext v')\n  right (ext v) = right (ext v')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  \\<not> right (space ts v c) < left (ext v')\n  \\<not> right (ext v') < left (space ts v c)\n  left (ext v) = left (ext v')\n  right (ext v) = right (ext v')\n\ngoal (1 subgoal):\n 1. len v ts c = len v' ts c", "by (simp add:perfect_sensors.len_def sp)"], ["proof (state)\nthis:\n  len v ts c = len v' ts c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v' ts c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = len v' ts c\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\nFinally, switching the perspective of a view does not change the\nperceived length.\n\\<close>"], ["", "lemma switch_length_stable:\"(v=d>v') \\<longrightarrow> len v ts c = len v' ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = d > v' \\<longrightarrow> len v ts c = len v' ts c", "using all_own_ext_eq_len_eq view.switch_def"], ["proof (prove)\nusing this:\n  ext ?v = ext ?v' \\<longrightarrow> len ?v ?ts ?c = len ?v' ?ts ?c\n  ?v = ?c > ?w \\<equiv>\n  ext ?v = ext ?w \\<and>\n  lan ?v = lan ?w \\<and> own ?w = ?c \\<and> more ?v = more ?w\n\ngoal (1 subgoal):\n 1. v = d > v' \\<longrightarrow> len v ts c = len v' ts c", "by metis"], ["", "end"], ["", "end"]]}