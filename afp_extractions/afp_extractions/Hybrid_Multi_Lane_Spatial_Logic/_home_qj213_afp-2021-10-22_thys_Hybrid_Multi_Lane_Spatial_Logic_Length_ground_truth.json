{"file_name": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic/Length.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Hybrid_Multi_Lane_Spatial_Logic", "problem_names": ["lemma len_left: \" left ((len v  ts) c) \\<ge> left (ext v)\"", "lemma len_right: \" right ((len v  ts) c) \\<le> right (ext v)\"", "lemma len_sub_int:\"len v ts c \\<le> ext v\"", "lemma len_space_left: \n  \"left (space ts v c) \\<le> right (ext v) \\<longrightarrow> left (len v ts c) \\<ge> left (space ts v c)\"", "lemma len_space_right: \n  \"right (space ts v c) \\<ge> left (ext v) \\<longrightarrow> right (len v ts c) \\<le> right (space ts v c)\"", "lemma len_hchop_left_right_border: \n  \"(len v ts c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> (right (len v1 ts c) = right (ext v1))\"", "lemma len_hchop_left_left_border: \n  \"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> (left ((len v1 ts) c) = left (ext v1))\"", "lemma len_view_hchop_left: \n  \"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> ((len v1 ts) c = ext v1)\"", "lemma len_hchop_right_left_border: \n  \"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> (left ((len v2 ts) c) = left (ext v2))\"", "lemma len_hchop_right_right_border: \n  \"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> (right ((len v2 ts) c) = right (ext v2))\"", "lemma len_view_hchop_right: \n  \"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> ((len v2 ts) c = ext v2)\"", "lemma len_compose_hchop:\n  \"(v=v1\\<parallel>v2) \\<and> (len v1 ( ts) c = ext v1) \\<and> (len v2 ( ts) c = ext v2)\n     \\<longrightarrow> (len v ( ts) c = ext v)\"", "lemma len_stable:\"(v=v1--v2) \\<longrightarrow> len v1 ts c = len v2 ts c\"", "lemma len_empty_on_subview1:\n  \"\\<parallel>len v ( ts) c\\<parallel> = 0 \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> \\<parallel>len v1 ( ts) c\\<parallel> = 0\"", "lemma len_empty_on_subview2:\n  \"\\<parallel>len v ts c\\<parallel> = 0 \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> \\<parallel>len v2 ts c\\<parallel> = 0\"", "lemma len_hchop_add:\n  \"(v=v1\\<parallel>v2) \\<longrightarrow> \\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\"", "lemma len_non_empty_inside:\n \"\\<parallel>len v ( ts) c\\<parallel> > 0 \n  \\<longrightarrow> left (space ts v c) < right (ext v) \\<and> right (space ts v c) > left (ext v)\"", "lemma len_fills_subview:\n  \"\\<parallel>len v ts c\\<parallel> > 0 \n      \\<longrightarrow> (\\<exists> v1 v2 v3 v'. (v=v1\\<parallel>v2) \\<and> (v2=v'\\<parallel>v3) \\<and> len v' ts c = ext v' \\<and> \n                          \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>)\"", "lemma ext_eq_len_eq:\n  \"ext v = ext v'\\<and> own v = own v' \\<longrightarrow> len v ts c = len v' ts c\"", "lemma len_stable_down:\"(v=v1--v2) \\<longrightarrow> len v ts c = len v1 ts c\"", "lemma len_stable_up:\"(v=v1--v2) \\<longrightarrow> len v ts c = len v2 ts c\"", "lemma len_empty_subview:\"\\<parallel>len v ts c\\<parallel> = 0 \\<and> (v' \\<le> v) \\<longrightarrow> \\<parallel>len v' ts c\\<parallel> = 0\"", "lemma view_leq_len_leq:\"(ext v \\<le> ext v') \\<and> (own v = own v') \\<and> \\<parallel>len v ts c\\<parallel> > 0 \n                          \\<longrightarrow> len v ts c \\<le> len v' ts c\""], "translations": [["", "lemma len_left: \" left ((len v  ts) c) \\<ge> left (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v) \\<le> left (len v ts c)", "using Abs_real_int_inverse left_leq_right sensors.len_def sensors_axioms"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  left ?r \\<le> right ?r\n  sensors ?sensors \\<Longrightarrow>\n  sensors.len ?sensors ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (sensors.space ?sensors ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (sensors.space ?sensors ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (sensors.space ?sensors ?ts ?v ?c)),\n              min (right (ext ?v))\n               (right (sensors.space ?sensors ?ts ?v ?c)))\n  sensors sensors\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> left (len v ts c)", "by auto"], ["", "lemma len_right: \" right ((len v  ts) c) \\<le> right (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v ts c) \\<le> right (ext v)", "using Abs_real_int_inverse left_leq_right sensors.len_def sensors_axioms"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  left ?r \\<le> right ?r\n  sensors ?sensors \\<Longrightarrow>\n  sensors.len ?sensors ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (sensors.space ?sensors ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (sensors.space ?sensors ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (sensors.space ?sensors ?ts ?v ?c)),\n              min (right (ext ?v))\n               (right (sensors.space ?sensors ?ts ?v ?c)))\n  sensors sensors\n\ngoal (1 subgoal):\n 1. right (len v ts c) \\<le> right (ext v)", "by auto"], ["", "lemma len_sub_int:\"len v ts c \\<le> ext v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c \\<le> ext v", "using less_eq_real_int_def len_left len_right"], ["proof (prove)\nusing this:\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n  left (ext ?v) \\<le> left (len ?v ?ts ?c)\n  right (len ?v ?ts ?c) \\<le> right (ext ?v)\n\ngoal (1 subgoal):\n 1. len v ts c \\<le> ext v", "by blast"], ["", "lemma len_space_left: \n  \"left (space ts v c) \\<le> right (ext v) \\<longrightarrow> left (len v ts c) \\<ge> left (space ts v c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v) \\<longrightarrow>\n    left (space ts v c) \\<le> left (len v ts c)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v) \\<Longrightarrow>\n    left (space ts v c) \\<le> left (len v ts c)", "assume assm:\"left (space ts v c) \\<le> right (ext v)\""], ["proof (state)\nthis:\n  left (space ts v c) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v) \\<Longrightarrow>\n    left (space ts v c) \\<le> left (len v ts c)", "then"], ["proof (chain)\npicking this:\n  left (space ts v c) \\<le> right (ext v)", "show \"left (len v ts c) \\<ge> left (space ts v c)\""], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> left (len v ts c)", "proof (cases \"right ((space ts v) c) < left (ext v)\" )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>left (space ts v c) \\<le> right (ext v);\n     right (space ts v c) < left (ext v)\\<rbrakk>\n    \\<Longrightarrow> left (space ts v c) \\<le> left (len v ts c)\n 2. \\<lbrakk>left (space ts v c) \\<le> right (ext v);\n     \\<not> right (space ts v c) < left (ext v)\\<rbrakk>\n    \\<Longrightarrow> left (space ts v c) \\<le> left (len v ts c)", "case True"], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>left (space ts v c) \\<le> right (ext v);\n     right (space ts v c) < left (ext v)\\<rbrakk>\n    \\<Longrightarrow> left (space ts v c) \\<le> left (len v ts c)\n 2. \\<lbrakk>left (space ts v c) \\<le> right (ext v);\n     \\<not> right (space ts v c) < left (ext v)\\<rbrakk>\n    \\<Longrightarrow> left (space ts v c) \\<le> left (len v ts c)", "then"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> left (len v ts c)", "using len_def len_left real_int.left_leq_right"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left (ext ?v) \\<le> left (len ?v ?ts ?c)\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> left (len v ts c)", "by (meson le_less_trans not_less order.asym)"], ["proof (state)\nthis:\n  left (space ts v c) \\<le> left (len v ts c)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>left (space ts v c) \\<le> right (ext v);\n     \\<not> right (space ts v c) < left (ext v)\\<rbrakk>\n    \\<Longrightarrow> left (space ts v c) \\<le> left (len v ts c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>left (space ts v c) \\<le> right (ext v);\n     \\<not> right (space ts v c) < left (ext v)\\<rbrakk>\n    \\<Longrightarrow> left (space ts v c) \\<le> left (len v ts c)", "case False"], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>left (space ts v c) \\<le> right (ext v);\n     \\<not> right (space ts v c) < left (ext v)\\<rbrakk>\n    \\<Longrightarrow> left (space ts v c) \\<le> left (len v ts c)", "then"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)", "have \"len v ts c = \n    Abs_real_int ((max (left (ext v)) (left ((space ts v) c))), \n                   min (right (ext v)) (right ((space ts v) c)))\""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "using len_def assm"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left (space ts v c) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>left (space ts v c) \\<le> right (ext v);\n     \\<not> right (space ts v c) < left (ext v)\\<rbrakk>\n    \\<Longrightarrow> left (space ts v c) \\<le> left (len v ts c)", "then"], ["proof (chain)\npicking this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))", "have \"left (len v ts c) = max (left (ext v)) (left ((space ts v) c))\""], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. left (len v ts c) = max (left (ext v)) (left (space ts v c))", "using Abs_real_int_inverse False assm real_int.left_leq_right"], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  \\<not> right (space ts v c) < left (ext v)\n  left (space ts v c) \\<le> right (ext v)\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. left (len v ts c) = max (left (ext v)) (left (space ts v c))", "by auto"], ["proof (state)\nthis:\n  left (len v ts c) = max (left (ext v)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>left (space ts v c) \\<le> right (ext v);\n     \\<not> right (space ts v c) < left (ext v)\\<rbrakk>\n    \\<Longrightarrow> left (space ts v c) \\<le> left (len v ts c)", "then"], ["proof (chain)\npicking this:\n  left (len v ts c) = max (left (ext v)) (left (space ts v c))", "show ?thesis"], ["proof (prove)\nusing this:\n  left (len v ts c) = max (left (ext v)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> left (len v ts c)", "by linarith"], ["proof (state)\nthis:\n  left (space ts v c) \\<le> left (len v ts c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  left (space ts v c) \\<le> left (len v ts c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_space_right: \n  \"right (space ts v c) \\<ge> left (ext v) \\<longrightarrow> right (len v ts c) \\<le> right (space ts v c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (space ts v c) \\<longrightarrow>\n    right (len v ts c) \\<le> right (space ts v c)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v ts c) \\<le> right (space ts v c)", "assume assm:\"right (space ts v c) \\<ge> left (ext v)\""], ["proof (state)\nthis:\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v ts c) \\<le> right (space ts v c)", "then"], ["proof (chain)\npicking this:\n  left (ext v) \\<le> right (space ts v c)", "show \"right (len v ts c) \\<le> right (space ts v c)\""], ["proof (prove)\nusing this:\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (len v ts c) \\<le> right (space ts v c)", "proof (cases \"left ((space ts v) c) > right (ext v)\" )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>left (ext v) \\<le> right (space ts v c);\n     right (ext v) < left (space ts v c)\\<rbrakk>\n    \\<Longrightarrow> right (len v ts c) \\<le> right (space ts v c)\n 2. \\<lbrakk>left (ext v) \\<le> right (space ts v c);\n     \\<not> right (ext v) < left (space ts v c)\\<rbrakk>\n    \\<Longrightarrow> right (len v ts c) \\<le> right (space ts v c)", "case True"], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>left (ext v) \\<le> right (space ts v c);\n     right (ext v) < left (space ts v c)\\<rbrakk>\n    \\<Longrightarrow> right (len v ts c) \\<le> right (space ts v c)\n 2. \\<lbrakk>left (ext v) \\<le> right (space ts v c);\n     \\<not> right (ext v) < left (space ts v c)\\<rbrakk>\n    \\<Longrightarrow> right (len v ts c) \\<le> right (space ts v c)", "then"], ["proof (chain)\npicking this:\n  right (ext v) < left (space ts v c)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (len v ts c) \\<le> right (space ts v c)", "using len_def len_right real_int.left_leq_right"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  right (len ?v ?ts ?c) \\<le> right (ext ?v)\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. right (len v ts c) \\<le> right (space ts v c)", "by (meson le_less_trans not_less order.asym)"], ["proof (state)\nthis:\n  right (len v ts c) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>left (ext v) \\<le> right (space ts v c);\n     \\<not> right (ext v) < left (space ts v c)\\<rbrakk>\n    \\<Longrightarrow> right (len v ts c) \\<le> right (space ts v c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>left (ext v) \\<le> right (space ts v c);\n     \\<not> right (ext v) < left (space ts v c)\\<rbrakk>\n    \\<Longrightarrow> right (len v ts c) \\<le> right (space ts v c)", "case False"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>left (ext v) \\<le> right (space ts v c);\n     \\<not> right (ext v) < left (space ts v c)\\<rbrakk>\n    \\<Longrightarrow> right (len v ts c) \\<le> right (space ts v c)", "then"], ["proof (chain)\npicking this:\n  \\<not> right (ext v) < left (space ts v c)", "have \"len v ts c = \n      Abs_real_int (max (left (ext v)) (left ((space ts v) c)), \n                     min (right (ext v)) (right ((space ts v) c)))\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "using len_def assm"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>left (ext v) \\<le> right (space ts v c);\n     \\<not> right (ext v) < left (space ts v c)\\<rbrakk>\n    \\<Longrightarrow> right (len v ts c) \\<le> right (space ts v c)", "then"], ["proof (chain)\npicking this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))", "have \"right (len v ts c) = min (right (ext v)) (right ((space ts v) c))\""], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. right (len v ts c) = min (right (ext v)) (right (space ts v c))", "using Abs_real_int_inverse False assm real_int.left_leq_right"], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  \\<not> right (ext v) < left (space ts v c)\n  left (ext v) \\<le> right (space ts v c)\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. right (len v ts c) = min (right (ext v)) (right (space ts v c))", "by auto"], ["proof (state)\nthis:\n  right (len v ts c) = min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>left (ext v) \\<le> right (space ts v c);\n     \\<not> right (ext v) < left (space ts v c)\\<rbrakk>\n    \\<Longrightarrow> right (len v ts c) \\<le> right (space ts v c)", "then"], ["proof (chain)\npicking this:\n  right (len v ts c) = min (right (ext v)) (right (space ts v c))", "show ?thesis"], ["proof (prove)\nusing this:\n  right (len v ts c) = min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. right (len v ts c) \\<le> right (space ts v c)", "by linarith"], ["proof (state)\nthis:\n  right (len v ts c) \\<le> right (space ts v c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  right (len v ts c) \\<le> right (space ts v c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_hchop_left_right_border: \n  \"(len v ts c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> (right (len v1 ts c) = right (ext v1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<longrightarrow>\n    right (len v1 ts c) = right (ext v1)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v1 ts c) = right (ext v1)", "assume assm:\"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2)\""], ["proof (state)\nthis:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v1 ts c) = right (ext v1)", "have l1:\"left ((len v ts) c) = left (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v ts c) = left (ext v)", "using assm"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. left (len v ts c) = left (ext v)", "by auto"], ["proof (state)\nthis:\n  left (len v ts c) = left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v1 ts c) = right (ext v1)", "from assm"], ["proof (chain)\npicking this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2", "have l2:\"left (ext v) = left (ext v1)\""], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. left (ext v) = left (ext v1)", "by (simp add: hchop_def real_int.rchop_def)"], ["proof (state)\nthis:\n  left (ext v) = left (ext v1)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v1 ts c) = right (ext v1)", "from l1 and l2"], ["proof (chain)\npicking this:\n  left (len v ts c) = left (ext v)\n  left (ext v) = left (ext v1)", "have l3:\"left ((len v ts) c) = left (ext v1)\""], ["proof (prove)\nusing this:\n  left (len v ts c) = left (ext v)\n  left (ext v) = left (ext v1)\n\ngoal (1 subgoal):\n 1. left (len v ts c) = left (ext v1)", "by simp"], ["proof (state)\nthis:\n  left (len v ts c) = left (ext v1)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v1 ts c) = right (ext v1)", "have r1:\"right ((len v ts) c) = right (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v ts c) = right (ext v)", "using assm"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. right (len v ts c) = right (ext v)", "by auto"], ["proof (state)\nthis:\n  right (len v ts c) = right (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v1 ts c) = right (ext v1)", "have r2:\"right (ext v1) \\<le> right (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (ext v1) \\<le> right (ext v)", "by (metis (no_types, lifting) assm hchop_def real_int.rchop_def \n        real_int.left_leq_right )"], ["proof (state)\nthis:\n  right (ext v1) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v1 ts c) = right (ext v1)", "have r3:\"right ((len v1 ts) c) \\<le> right (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v1 ts c) \\<le> right (ext v1)", "using len_right"], ["proof (prove)\nusing this:\n  right (len ?v ?ts ?c) \\<le> right (ext ?v)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) \\<le> right (ext v1)", "by blast"], ["proof (state)\nthis:\n  right (len v1 ts c) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v1 ts c) = right (ext v1)", "show \"right ((len v1 ts) c) = right (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v1)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. right (len v1 ts c) \\<noteq> right (ext v1) \\<Longrightarrow> False", "assume contra:\"right ((len v1 ts) c) \\<noteq> right (ext v1)\""], ["proof (state)\nthis:\n  right (len v1 ts c) \\<noteq> right (ext v1)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) \\<noteq> right (ext v1) \\<Longrightarrow> False", "with r3"], ["proof (chain)\npicking this:\n  right (len v1 ts c) \\<le> right (ext v1)\n  right (len v1 ts c) \\<noteq> right (ext v1)", "have less:\"right ((len v1 ts) c) < right (ext v1)\""], ["proof (prove)\nusing this:\n  right (len v1 ts c) \\<le> right (ext v1)\n  right (len v1 ts c) \\<noteq> right (ext v1)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) < right (ext v1)", "by simp"], ["proof (state)\nthis:\n  right (len v1 ts c) < right (ext v1)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) \\<noteq> right (ext v1) \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"left ((space ts v) c) \\<le> right (ext v1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow> False", "assume neg1:\"\\<not> left ((space ts v) c) \\<le> right (ext v1)\""], ["proof (state)\nthis:\n  \\<not> left (space ts v c) \\<le> right (ext v1)\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow> False", "have \"right ((len v1 ts) c) = right (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v1)", "using Abs_real_int_inverse left_space len_def neg1 right.rep_eq"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  left (space ?ts ?v ?c) = pos ?ts ?c\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> left (space ts v c) \\<le> right (ext v1)\n  right ?x = snd (Rep_real_int ?x)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v1)", "by auto"], ["proof (state)\nthis:\n  right (len v1 ts c) = right (ext v1)\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow> False", "with contra"], ["proof (chain)\npicking this:\n  right (len v1 ts c) \\<noteq> right (ext v1)\n  right (len v1 ts c) = right (ext v1)", "show False"], ["proof (prove)\nusing this:\n  right (len v1 ts c) \\<noteq> right (ext v1)\n  right (len v1 ts c) = right (ext v1)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow> False", "assume less1:\"left ((space ts v) c) \\<le> right (ext v1)\""], ["proof (state)\nthis:\n  left (space ts v c) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"right ((space ts v) c) \\<ge> left (ext v1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False\n 2. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "assume neg2:\"\\<not> left (ext v1) \\<le> right ((space ts v) c)\""], ["proof (state)\nthis:\n  \\<not> left (ext v1) \\<le> right (space ts v c)\n\ngoal (2 subgoals):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False\n 2. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "have \"right ((len v1 ts) c) = right (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v1)", "have \"(len v1 ts) c = Abs_real_int (left (ext v1),left (ext v1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))", "using len_def  neg2 assm hchop_def real_int.left_leq_right less1 space_def"], ["proof (prove)\nusing this:\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> left (ext v1) \\<le> right (space ts v c)\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  left ?r \\<le> right ?r\n  left (space ts v c) \\<le> right (ext v1)\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))", "by auto"], ["proof (state)\nthis:\n  len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v1)", "hence  \"right ((len v1 ts) c) = left ((len v1 ts )c)\""], ["proof (prove)\nusing this:\n  len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = left (len v1 ts c)", "using l3 assm contra less1 len_def neg2 r2 r3  real_int.left_leq_right"], ["proof (prove)\nusing this:\n  len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))\n  left (len v ts c) = left (ext v1)\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  right (len v1 ts c) \\<noteq> right (ext v1)\n  left (space ts v c) \\<le> right (ext v1)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> left (ext v1) \\<le> right (space ts v c)\n  right (ext v1) \\<le> right (ext v)\n  right (len v1 ts c) \\<le> right (ext v1)\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = left (len v1 ts c)", "by auto"], ["proof (state)\nthis:\n  right (len v1 ts c) = left (len v1 ts c)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v1)", "with l1"], ["proof (chain)\npicking this:\n  left (len v ts c) = left (ext v)\n  right (len v1 ts c) = left (len v1 ts c)", "have r4:\"right((len v1 ts)c ) = right (ext v)\""], ["proof (prove)\nusing this:\n  left (len v ts c) = left (ext v)\n  right (len v1 ts c) = left (len v1 ts c)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v)", "using assm l2 len_def neg2 assm hchop_def less1 real_int.left_leq_right r2\n              space_def"], ["proof (prove)\nusing this:\n  left (len v ts c) = left (ext v)\n  right (len v1 ts c) = left (len v1 ts c)\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  left (ext v) = left (ext v1)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> left (ext v1) \\<le> right (space ts v c)\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  left (space ts v c) \\<le> right (ext v1)\n  left ?r \\<le> right ?r\n  right (ext v1) \\<le> right (ext v)\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v)", "by auto"], ["proof (state)\nthis:\n  right (len v1 ts c) = right (ext v)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v1)", "hence \"right (ext v) = right (ext v1)\""], ["proof (prove)\nusing this:\n  right (len v1 ts c) = right (ext v)\n\ngoal (1 subgoal):\n 1. right (ext v) = right (ext v1)", "using r2 r3"], ["proof (prove)\nusing this:\n  right (len v1 ts c) = right (ext v)\n  right (ext v1) \\<le> right (ext v)\n  right (len v1 ts c) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. right (ext v) = right (ext v1)", "by auto"], ["proof (state)\nthis:\n  right (ext v) = right (ext v1)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v1)", "thus \"right ((len v1 ts) c) = right (ext v1)\""], ["proof (prove)\nusing this:\n  right (ext v) = right (ext v1)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v1)", "using r4"], ["proof (prove)\nusing this:\n  right (ext v) = right (ext v1)\n  right (len v1 ts c) = right (ext v)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = right (ext v1)", "by auto"], ["proof (state)\nthis:\n  right (len v1 ts c) = right (ext v1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  right (len v1 ts c) = right (ext v1)\n\ngoal (2 subgoals):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False\n 2. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "with contra"], ["proof (chain)\npicking this:\n  right (len v1 ts c) \\<noteq> right (ext v1)\n  right (len v1 ts c) = right (ext v1)", "show False"], ["proof (prove)\nusing this:\n  right (len v1 ts c) \\<noteq> right (ext v1)\n  right (len v1 ts c) = right (ext v1)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "assume less2:\"left (ext v1) \\<le> right ((space ts v) c)\""], ["proof (state)\nthis:\n  left (ext v1) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "have len_in_type:\n          \"(max (left (ext v1)) (left ((space ts v) c)), \n            min (right (ext v1)) (right ((space ts v) c))) \n            \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (max (left (ext v1)) (left (space ts v c)),\n     min (right (ext v1)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using Rep_real_int less1 less2"], ["proof (prove)\nusing this:\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  left (space ts v c) \\<le> right (ext v1)\n  left (ext v1) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. (max (left (ext v1)) (left (space ts v c)),\n     min (right (ext v1)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "from less1 and less2"], ["proof (chain)\npicking this:\n  left (space ts v c) \\<le> right (ext v1)\n  left (ext v1) \\<le> right (space ts v c)", "have len_def_v1:\"len v1 (ts) c = \n                Abs_real_int ((max (left (ext v1)) (left ((space ts v) c))), \n                              min (right (ext v1)) (right ((space ts v) c)))\""], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> right (ext v1)\n  left (ext v1) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c)))", "using len_def assm hchop_def  space_def"], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> right (ext v1)\n  left (ext v1) \\<le> right (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "with less"], ["proof (chain)\npicking this:\n  right (len v1 ts c) < right (ext v1)\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))", "have \n          \"min (right (ext v1)) (right ((space ts v) c)) = right ((space ts v) c)\""], ["proof (prove)\nusing this:\n  right (len v1 ts c) < right (ext v1)\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. min (right (ext v1)) (right (space ts v c)) = right (space ts v c)", "using Abs_real_int_inverse len_in_type snd_conv"], ["proof (prove)\nusing this:\n  right (len v1 ts c) < right (ext v1)\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. min (right (ext v1)) (right (space ts v c)) = right (space ts v c)", "by auto"], ["proof (state)\nthis:\n  min (right (ext v1)) (right (space ts v c)) = right (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "hence \"right ((space ts v) c) \\<le> right (ext v1)\""], ["proof (prove)\nusing this:\n  min (right (ext v1)) (right (space ts v c)) = right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (space ts v c) \\<le> right (ext v1)", "by simp"], ["proof (state)\nthis:\n  right (space ts v c) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "hence \"right ((space ts v) c) \\<le> right (ext v)\""], ["proof (prove)\nusing this:\n  right (space ts v c) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. right (space ts v c) \\<le> right (ext v)", "using r2"], ["proof (prove)\nusing this:\n  right (space ts v c) \\<le> right (ext v1)\n  right (ext v1) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts v c) \\<le> right (ext v)", "by linarith"], ["proof (state)\nthis:\n  right (space ts v c) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "from len_def_v1 and less and len_in_type"], ["proof (chain)\npicking this:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n  right (len v1 ts c) < right (ext v1)\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}", "have \"right ((space ts v) c) < right (ext v1)\""], ["proof (prove)\nusing this:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n  right (len v1 ts c) < right (ext v1)\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. right (space ts v c) < right (ext v1)", "using Abs_real_int_inverse sndI"], ["proof (prove)\nusing this:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n  right (len v1 ts c) < right (ext v1)\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  ?x = (?y, ?z) \\<Longrightarrow> snd ?x = ?z\n\ngoal (1 subgoal):\n 1. right (space ts v c) < right (ext v1)", "by auto"], ["proof (state)\nthis:\n  right (space ts v c) < right (ext v1)\n\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "hence r4:\"right ((space ts v) c) < right (ext v)\""], ["proof (prove)\nusing this:\n  right (space ts v c) < right (ext v1)\n\ngoal (1 subgoal):\n 1. right (space ts v c) < right (ext v)", "using r2"], ["proof (prove)\nusing this:\n  right (space ts v c) < right (ext v1)\n  right (ext v1) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts v c) < right (ext v)", "by linarith"], ["proof (state)\nthis:\n  right (space ts v c) < right (ext v)\n\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "from assm"], ["proof (chain)\npicking this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2", "have len_v_in_type:\n          \"(max (left (ext v)) (left ((space ts v) c)), \n            min (right (ext v)) (right ((space ts v) c))) \n          \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using r4 l2 len_in_type"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  right (space ts v c) < right (ext v)\n  left (ext v) = left (ext v1)\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "hence \" right (len v ( ts) c) \\<noteq> right (ext v)\""], ["proof (prove)\nusing this:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. right (len v ts c) \\<noteq> right (ext v)", "using Abs_real_int_inverse Pair_inject r4 len_def real_int.left_leq_right \n            surjective_pairing"], ["proof (prove)\nusing this:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  \\<lbrakk>(?a, ?b) = (?a', ?b');\n   \\<lbrakk>?a = ?a'; ?b = ?b'\\<rbrakk> \\<Longrightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R\n  right (space ts v c) < right (ext v)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left ?r \\<le> right ?r\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. right (len v ts c) \\<noteq> right (ext v)", "by auto"], ["proof (state)\nthis:\n  right (len v ts c) \\<noteq> right (ext v)\n\ngoal (1 subgoal):\n 1. left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow> False", "with r1"], ["proof (chain)\npicking this:\n  right (len v ts c) = right (ext v)\n  right (len v ts c) \\<noteq> right (ext v)", "show False"], ["proof (prove)\nusing this:\n  right (len v ts c) = right (ext v)\n  right (len v ts c) \\<noteq> right (ext v)\n\ngoal (1 subgoal):\n 1. False", "by best"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  right (len v1 ts c) = right (ext v1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_hchop_left_left_border: \n  \"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> (left ((len v1 ts) c) = left (ext v1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "assume assm:\"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2)\""], ["proof (state)\nthis:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "have l1:\"left ((len v ts) c) = left (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v ts c) = left (ext v)", "using assm"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. left (len v ts c) = left (ext v)", "by auto"], ["proof (state)\nthis:\n  left (len v ts c) = left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "from assm"], ["proof (chain)\npicking this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2", "have l2:\"left (ext v) = left (ext v1)\""], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. left (ext v) = left (ext v1)", "by (simp add: hchop_def real_int.rchop_def )"], ["proof (state)\nthis:\n  left (ext v) = left (ext v1)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "from l1 and l2"], ["proof (chain)\npicking this:\n  left (len v ts c) = left (ext v)\n  left (ext v) = left (ext v1)", "have l3:\"left ((len v ts) c) = left (ext v1)\""], ["proof (prove)\nusing this:\n  left (len v ts c) = left (ext v)\n  left (ext v) = left (ext v1)\n\ngoal (1 subgoal):\n 1. left (len v ts c) = left (ext v1)", "by simp"], ["proof (state)\nthis:\n  left (len v ts c) = left (ext v1)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "have r1:\"right ((len v ts) c) = right (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v ts c) = right (ext v)", "using assm"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. right (len v ts c) = right (ext v)", "by auto"], ["proof (state)\nthis:\n  right (len v ts c) = right (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "have r2:\"right (ext v1) \\<le> right (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (ext v1) \\<le> right (ext v)", "by (metis (no_types, lifting) assm hchop_def real_int.rchop_def \n        real_int.left_leq_right )"], ["proof (state)\nthis:\n  right (ext v1) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "have r3:\"right ((len v1 ts) c) \\<le> right (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v1 ts c) \\<le> right (ext v1)", "using len_right"], ["proof (prove)\nusing this:\n  right (len ?v ?ts ?c) \\<le> right (ext ?v)\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) \\<le> right (ext v1)", "by blast"], ["proof (state)\nthis:\n  right (len v1 ts c) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "show \"(left ((len v1 ts) c) = left (ext v1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v1 ts c) = left (ext v1)", "proof (cases \n      \"left ((space ts v) c) \\<le> right (ext v1) \\<and> right ((space ts v) c) \\<ge> left (ext v1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v1) \\<and>\n    left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)\n 2. \\<not> (left (space ts v c) \\<le> right (ext v1) \\<and>\n            left (ext v1) \\<le> right (space ts v c)) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "case True"], ["proof (state)\nthis:\n  left (space ts v c) \\<le> right (ext v1) \\<and>\n  left (ext v1) \\<le> right (space ts v c)\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v1) \\<and>\n    left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)\n 2. \\<not> (left (space ts v c) \\<le> right (ext v1) \\<and>\n            left (ext v1) \\<le> right (space ts v c)) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "show \"(left ((len v1 ts) c) = left (ext v1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v1 ts c) = left (ext v1)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "assume neq:\" left (len v1 ( ts) c) \\<noteq> left (ext v1)\""], ["proof (state)\nthis:\n  left (len v1 ts c) \\<noteq> left (ext v1)\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  left (len v1 ts c) \\<noteq> left (ext v1)", "have greater: \"left (len v1 ( ts) c) > left (ext v1)\""], ["proof (prove)\nusing this:\n  left (len v1 ts c) \\<noteq> left (ext v1)\n\ngoal (1 subgoal):\n 1. left (ext v1) < left (len v1 ts c)", "by (meson dual_order.order_iff_strict len_left)"], ["proof (state)\nthis:\n  left (ext v1) < left (len v1 ts c)\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "have len_in_type:\n        \"(max (left (ext v1)) (left ((space ts v) c)), \n           min (right (ext v1)) (right ((space ts v) c))) \n            \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (max (left (ext v1)) (left (space ts v c)),\n     min (right (ext v1)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using Rep_real_int True"], ["proof (prove)\nusing this:\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  left (space ts v c) \\<le> right (ext v1) \\<and>\n  left (ext v1) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. (max (left (ext v1)) (left (space ts v c)),\n     min (right (ext v1)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "from True"], ["proof (chain)\npicking this:\n  left (space ts v c) \\<le> right (ext v1) \\<and>\n  left (ext v1) \\<le> right (space ts v c)", "have \"len v1 ( ts) c =  \n        Abs_real_int ((max (left (ext v1)) (left ((space ts v) c))), \n                       min (right (ext v1)) (right ((space ts v) c)))\""], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> right (ext v1) \\<and>\n  left (ext v1) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c)))", "using len_def assm hchop_def space_def"], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> right (ext v1) \\<and>\n  left (ext v1) \\<le> right (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "hence maximum:\n        \"left (len v1 ( ts) c) = max (left (ext v1)) (left ((space ts v) c))\""], ["proof (prove)\nusing this:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) = max (left (ext v1)) (left (space ts v c))", "using Abs_real_int_inverse len_in_type"], ["proof (prove)\nusing this:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) = max (left (ext v1)) (left (space ts v c))", "by auto"], ["proof (state)\nthis:\n  left (len v1 ts c) = max (left (ext v1)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "have \"max (left (ext v1)) (left ((space ts v) c)) = left ((space ts v) c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max (left (ext v1)) (left (space ts v c)) = left (space ts v c)", "using maximum neq"], ["proof (prove)\nusing this:\n  left (len v1 ts c) = max (left (ext v1)) (left (space ts v c))\n  left (len v1 ts c) \\<noteq> left (ext v1)\n\ngoal (1 subgoal):\n 1. max (left (ext v1)) (left (space ts v c)) = left (space ts v c)", "by linarith"], ["proof (state)\nthis:\n  max (left (ext v1)) (left (space ts v c)) = left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "hence \"left ((space ts v) c) > left (ext v1)\""], ["proof (prove)\nusing this:\n  max (left (ext v1)) (left (space ts v c)) = left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v1) < left (space ts v c)", "using greater maximum"], ["proof (prove)\nusing this:\n  max (left (ext v1)) (left (space ts v c)) = left (space ts v c)\n  left (ext v1) < left (len v1 ts c)\n  left (len v1 ts c) = max (left (ext v1)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. left (ext v1) < left (space ts v c)", "by auto"], ["proof (state)\nthis:\n  left (ext v1) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "hence l4:\"left ((space ts v) c) > left (ext v)\""], ["proof (prove)\nusing this:\n  left (ext v1) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v) < left (space ts v c)", "using l2"], ["proof (prove)\nusing this:\n  left (ext v1) < left (space ts v c)\n  left (ext v) = left (ext v1)\n\ngoal (1 subgoal):\n 1. left (ext v) < left (space ts v c)", "by auto"], ["proof (state)\nthis:\n  left (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "with assm"], ["proof (chain)\npicking this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  left (ext v) < left (space ts v c)", "have len_v_in_type:\n        \"(max (left (ext v)) (left ((space ts v) c)), \n          min (right (ext v)) (right ((space ts v) c))) \n        \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  left (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using len_in_type r2"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  left (ext v) < left (space ts v c)\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  right (ext v1) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "hence \" left (len v ( ts) c) \\<noteq> left (ext v)\""], ["proof (prove)\nusing this:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. left (len v ts c) \\<noteq> left (ext v)", "using Abs_real_int_inverse l4 sensors.len_def sensors_axioms"], ["proof (prove)\nusing this:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  left (ext v) < left (space ts v c)\n  sensors ?sensors \\<Longrightarrow>\n  sensors.len ?sensors ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (sensors.space ?sensors ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (sensors.space ?sensors ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (sensors.space ?sensors ?ts ?v ?c)),\n              min (right (ext ?v))\n               (right (sensors.space ?sensors ?ts ?v ?c)))\n  sensors sensors\n\ngoal (1 subgoal):\n 1. left (len v ts c) \\<noteq> left (ext v)", "by auto"], ["proof (state)\nthis:\n  left (len v ts c) \\<noteq> left (ext v)\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  left (len v ts c) \\<noteq> left (ext v)\n\ngoal (1 subgoal):\n 1. False", "using l1"], ["proof (prove)\nusing this:\n  left (len v ts c) \\<noteq> left (ext v)\n  left (len v ts c) = left (ext v)\n\ngoal (1 subgoal):\n 1. False", "by best"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  left (len v1 ts c) = left (ext v1)\n\ngoal (1 subgoal):\n 1. \\<not> (left (space ts v c) \\<le> right (ext v1) \\<and>\n            left (ext v1) \\<le> right (space ts v c)) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (left (space ts v c) \\<le> right (ext v1) \\<and>\n            left (ext v1) \\<le> right (space ts v c)) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "case False"], ["proof (state)\nthis:\n  \\<not> (left (space ts v c) \\<le> right (ext v1) \\<and>\n          left (ext v1) \\<le> right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> (left (space ts v c) \\<le> right (ext v1) \\<and>\n            left (ext v1) \\<le> right (space ts v c)) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "then"], ["proof (chain)\npicking this:\n  \\<not> (left (space ts v c) \\<le> right (ext v1) \\<and>\n          left (ext v1) \\<le> right (space ts v c))", "have \n      \"\\<not>left ((space ts v) c) \\<le> right (ext v1) \\<or> \\<not>right ((space ts v) c) \\<ge> left (ext v1)\""], ["proof (prove)\nusing this:\n  \\<not> (left (space ts v c) \\<le> right (ext v1) \\<and>\n          left (ext v1) \\<le> right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> left (space ts v c) \\<le> right (ext v1) \\<or>\n    \\<not> left (ext v1) \\<le> right (space ts v c)", "by auto"], ["proof (state)\nthis:\n  \\<not> left (space ts v c) \\<le> right (ext v1) \\<or>\n  \\<not> left (ext v1) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> (left (space ts v c) \\<le> right (ext v1) \\<and>\n            left (ext v1) \\<le> right (space ts v c)) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "then"], ["proof (chain)\npicking this:\n  \\<not> left (space ts v c) \\<le> right (ext v1) \\<or>\n  \\<not> left (ext v1) \\<le> right (space ts v c)", "show \"(left ((len v1 ts) c) = left (ext v1))\""], ["proof (prove)\nusing this:\n  \\<not> left (space ts v c) \\<le> right (ext v1) \\<or>\n  \\<not> left (ext v1) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) = left (ext v1)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)\n 2. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "assume negative:\"\\<not> left ((space ts v) c) \\<le> right (ext v1)\""], ["proof (state)\nthis:\n  \\<not> left (space ts v c) \\<le> right (ext v1)\n\ngoal (2 subgoals):\n 1. \\<not> left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)\n 2. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "then"], ["proof (chain)\npicking this:\n  \\<not> left (space ts v c) \\<le> right (ext v1)", "have \"len v1 ( ts) c = Abs_real_int (right (ext v1),right (ext v1))\""], ["proof (prove)\nusing this:\n  \\<not> left (space ts v c) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. len v1 ts c = Abs_real_int (right (ext v1), right (ext v1))", "using len_def assm hchop_def space_def"], ["proof (prove)\nusing this:\n  \\<not> left (space ts v c) \\<le> right (ext v1)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v1 ts c = Abs_real_int (right (ext v1), right (ext v1))", "by auto"], ["proof (state)\nthis:\n  len v1 ts c = Abs_real_int (right (ext v1), right (ext v1))\n\ngoal (2 subgoals):\n 1. \\<not> left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)\n 2. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "hence empty:\"left (len v1 ( ts) c) = right (len v1 ( ts) c)\""], ["proof (prove)\nusing this:\n  len v1 ts c = Abs_real_int (right (ext v1), right (ext v1))\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) = right (len v1 ts c)", "by (metis real_int.chop_assoc2 real_int.chop_singleton_right real_int.rchop_def)"], ["proof (state)\nthis:\n  left (len v1 ts c) = right (len v1 ts c)\n\ngoal (2 subgoals):\n 1. \\<not> left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)\n 2. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "have len_geq:\"left(len v1 ( ts) c) \\<ge> left (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v) \\<le> left (len v1 ts c)", "using l2 len_left"], ["proof (prove)\nusing this:\n  left (ext v) = left (ext v1)\n  left (ext ?v) \\<le> left (len ?v ?ts ?c)\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> left (len v1 ts c)", "by auto"], ["proof (state)\nthis:\n  left (ext v) \\<le> left (len v1 ts c)\n\ngoal (2 subgoals):\n 1. \\<not> left (space ts v c) \\<le> right (ext v1) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)\n 2. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "show \"left (len v1 ( ts) c) = left (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v1 ts c) = left (ext v1)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "assume contra:\"left (len v1 ( ts) c) \\<noteq> left (ext v1)\""], ["proof (state)\nthis:\n  left (len v1 ts c) \\<noteq> left (ext v1)\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "with len_left"], ["proof (chain)\npicking this:\n  left (ext ?v) \\<le> left (len ?v ?ts ?c)\n  left (len v1 ts c) \\<noteq> left (ext v1)", "have \"left (ext v1) < left (len v1 ( ts) c)  \""], ["proof (prove)\nusing this:\n  left (ext ?v) \\<le> left (len ?v ?ts ?c)\n  left (len v1 ts c) \\<noteq> left (ext v1)\n\ngoal (1 subgoal):\n 1. left (ext v1) < left (len v1 ts c)", "using dual_order.order_iff_strict"], ["proof (prove)\nusing this:\n  left (ext ?v) \\<le> left (len ?v ?ts ?c)\n  left (len v1 ts c) \\<noteq> left (ext v1)\n  (?b \\<le> ?a) = (?b < ?a \\<or> ?a = ?b)\n\ngoal (1 subgoal):\n 1. left (ext v1) < left (len v1 ts c)", "by blast"], ["proof (state)\nthis:\n  left (ext v1) < left (len v1 ts c)\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "hence l5:\"left (ext v) < left (len v1 ( ts) c)\""], ["proof (prove)\nusing this:\n  left (ext v1) < left (len v1 ts c)\n\ngoal (1 subgoal):\n 1. left (ext v) < left (len v1 ts c)", "using l2"], ["proof (prove)\nusing this:\n  left (ext v1) < left (len v1 ts c)\n  left (ext v) = left (ext v1)\n\ngoal (1 subgoal):\n 1. left (ext v) < left (len v1 ts c)", "by auto"], ["proof (state)\nthis:\n  left (ext v) < left (len v1 ts c)\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "hence l6:\"left (len v ( ts) c) < left (len v1 ( ts) c)\""], ["proof (prove)\nusing this:\n  left (ext v) < left (len v1 ts c)\n\ngoal (1 subgoal):\n 1. left (len v ts c) < left (len v1 ts c)", "using l1"], ["proof (prove)\nusing this:\n  left (ext v) < left (len v1 ts c)\n  left (len v ts c) = left (ext v)\n\ngoal (1 subgoal):\n 1. left (len v ts c) < left (len v1 ts c)", "by auto"], ["proof (state)\nthis:\n  left (len v ts c) < left (len v1 ts c)\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) \\<noteq> left (ext v1) \\<Longrightarrow> False", "show \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"left ((space ts v) c) \\<le> right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  left (space ts v c) \\<le> right (ext v)\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "have well_sp:\"left ((space ts v) c) \\<le> right ((space ts v) c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (space ts v c)", "using real_int.left_leq_right"], ["proof (prove)\nusing this:\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (space ts v c)", "by auto"], ["proof (state)\nthis:\n  left (space ts v c) \\<le> right (space ts v c)\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "have well_v:\"left (ext v) \\<le> right (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (ext v)", "using real_int.left_leq_right"], ["proof (prove)\nusing this:\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (ext v)", "by auto"], ["proof (state)\nthis:\n  left (ext v) \\<le> right (ext v)\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "hence rs_geq_vl:\"right ((space ts v) c) \\<ge> left (ext v)\""], ["proof (prove)\nusing this:\n  left (ext v) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (space ts v c)", "using empty len_geq negative r3 well_sp"], ["proof (prove)\nusing this:\n  left (ext v) \\<le> right (ext v)\n  left (len v1 ts c) = right (len v1 ts c)\n  left (ext v) \\<le> left (len v1 ts c)\n  \\<not> left (space ts v c) \\<le> right (ext v1)\n  right (len v1 ts c) \\<le> right (ext v1)\n  left (space ts v c) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (space ts v c)", "by linarith"], ["proof (state)\nthis:\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "from True and rs_geq_vl"], ["proof (chain)\npicking this:\n  left (space ts v c) \\<le> right (ext v)\n  left (ext v) \\<le> right (space ts v c)", "have len_in_type:\n            \"(max (left (ext v)) (left ((space ts v) c)), \n              min (right (ext v)) (right ((space ts v) c)))\n              \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> right (ext v)\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using CollectD CollectI Rep_real_int fst_conv snd_conv"], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> right (ext v)\n  left (ext v) \\<le> right (space ts v c)\n  ?a \\<in> {x. ?P x} \\<Longrightarrow> ?P ?a\n  ?P ?a \\<Longrightarrow> ?a \\<in> {x. ?P x}\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  fst (?x1.0, ?x2.0) = ?x1.0\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "have \"len v (ts) c  = \n                Abs_real_int (max (left (ext v)) (left ((space ts v) c)), \n                               min (right (ext v)) (right ((space ts v) c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "using len_def"], ["proof (prove)\nusing this:\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "using True rs_geq_vl"], ["proof (prove)\nusing this:\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left (space ts v c) \\<le> right (ext v)\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "hence max_less:\n            \"max (left (ext v)) (left ((space ts v) c)) <  left (len v1 ( ts) c)\""], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) < left (len v1 ts c)", "using Abs_real_int_inverse"], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) < left (len v1 ts c)", "by (metis (full_types) l5 assm fst_conv left.rep_eq len_in_type)"], ["proof (state)\nthis:\n  max (left (ext v)) (left (space ts v c)) < left (len v1 ts c)\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using empty max_less negative r3"], ["proof (prove)\nusing this:\n  left (len v1 ts c) = right (len v1 ts c)\n  max (left (ext v)) (left (space ts v c)) < left (len v1 ts c)\n  \\<not> left (space ts v c) \\<le> right (ext v1)\n  right (len v1 ts c) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> left (space ts v c) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> left (space ts v c) \\<le> right (ext v)", "have \"len v ( ts) c = Abs_real_int (right (ext v), right (ext v))\""], ["proof (prove)\nusing this:\n  \\<not> left (space ts v c) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = Abs_real_int (right (ext v), right (ext v))", "using len_def"], ["proof (prove)\nusing this:\n  \\<not> left (space ts v c) \\<le> right (ext v)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n\ngoal (1 subgoal):\n 1. len v ts c = Abs_real_int (right (ext v), right (ext v))", "by auto"], ["proof (state)\nthis:\n  len v ts c = Abs_real_int (right (ext v), right (ext v))\n\ngoal (1 subgoal):\n 1. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "hence empty_len_v:\"left (len v ( ts) c) = right (ext v)\""], ["proof (prove)\nusing this:\n  len v ts c = Abs_real_int (right (ext v), right (ext v))\n\ngoal (1 subgoal):\n 1. left (len v ts c) = right (ext v)", "using Abs_real_int_inverse"], ["proof (prove)\nusing this:\n  len v ts c = Abs_real_int (right (ext v), right (ext v))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n\ngoal (1 subgoal):\n 1. left (len v ts c) = right (ext v)", "by simp"], ["proof (state)\nthis:\n  left (len v ts c) = right (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> left (space ts v c) \\<le> right (ext v) \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using l6 empty empty_len_v r2 r3"], ["proof (prove)\nusing this:\n  left (len v ts c) < left (len v1 ts c)\n  left (len v1 ts c) = right (len v1 ts c)\n  left (len v ts c) = right (ext v)\n  right (ext v1) \\<le> right (ext v)\n  right (len v1 ts c) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. False", "by linarith"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  left (len v1 ts c) = left (ext v1)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "have \"space ts v1 c \\<le> space ts v c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space ts v1 c \\<le> space ts v c", "using assm hchop_def space_def"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. space ts v1 c \\<le> space ts v c", "by auto"], ["proof (state)\nthis:\n  space ts v1 c \\<le> space ts v c\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "hence r4:\"right (space ts v1 c) \\<le> right (space ts v c)\""], ["proof (prove)\nusing this:\n  space ts v1 c \\<le> space ts v c\n\ngoal (1 subgoal):\n 1. right (space ts v1 c) \\<le> right (space ts v c)", "using  less_eq_real_int_def"], ["proof (prove)\nusing this:\n  space ts v1 c \\<le> space ts v c\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n\ngoal (1 subgoal):\n 1. right (space ts v1 c) \\<le> right (space ts v c)", "by auto"], ["proof (state)\nthis:\n  right (space ts v1 c) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "assume left_outside:\"\\<not> left (ext v1) \\<le> right ((space ts v) c)\""], ["proof (state)\nthis:\n  \\<not> left (ext v1) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "hence \"left (ext v1 ) > right (space ts v1 c)\""], ["proof (prove)\nusing this:\n  \\<not> left (ext v1) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (space ts v1 c) < left (ext v1)", "using r4"], ["proof (prove)\nusing this:\n  \\<not> left (ext v1) \\<le> right (space ts v c)\n  right (space ts v1 c) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (space ts v1 c) < left (ext v1)", "by linarith"], ["proof (state)\nthis:\n  right (space ts v1 c) < left (ext v1)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "then"], ["proof (chain)\npicking this:\n  right (space ts v1 c) < left (ext v1)", "have \"len v1 ( ts) c = Abs_real_int (left (ext v1),left (ext v1))\""], ["proof (prove)\nusing this:\n  right (space ts v1 c) < left (ext v1)\n\ngoal (1 subgoal):\n 1. len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))", "using len_def assm hchop_def real_int.left_leq_right r1 r2 l1 l2 l3 r3"], ["proof (prove)\nusing this:\n  right (space ts v1 c) < left (ext v1)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  left ?r \\<le> right ?r\n  right (len v ts c) = right (ext v)\n  right (ext v1) \\<le> right (ext v)\n  left (len v ts c) = left (ext v)\n  left (ext v) = left (ext v1)\n  left (len v ts c) = left (ext v1)\n  right (len v1 ts c) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))", "by (meson le_less_trans less_trans not_less)"], ["proof (state)\nthis:\n  len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v1) \\<le> right (space ts v c) \\<Longrightarrow>\n    left (len v1 ts c) = left (ext v1)", "thus \"(left ((len v1 ts) c) = left (ext v1))\""], ["proof (prove)\nusing this:\n  len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) = left (ext v1)", "using  Abs_real_int_inverse"], ["proof (prove)\nusing this:\n  len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) = left (ext v1)", "by auto"], ["proof (state)\nthis:\n  left (len v1 ts c) = left (ext v1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  left (len v1 ts c) = left (ext v1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  left (len v1 ts c) = left (ext v1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_view_hchop_left: \n  \"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> ((len v1 ts) c = ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<longrightarrow>\n    len v1 ts c = ext v1", "by (metis Rep_real_int_inverse left.rep_eq len_hchop_left_left_border \n      len_hchop_left_right_border prod.collapse right.rep_eq)"], ["", "lemma len_hchop_right_left_border: \n  \"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> (left ((len v2 ts) c) = left (ext v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<longrightarrow>\n    left (len v2 ts c) = left (ext v2)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v2 ts c) = left (ext v2)", "assume assm:\"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2)\""], ["proof (state)\nthis:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v2 ts c) = left (ext v2)", "have r1:\"right ((len v ts) c) = right (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v ts c) = right (ext v)", "using assm"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. right (len v ts c) = right (ext v)", "by auto"], ["proof (state)\nthis:\n  right (len v ts c) = right (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v2 ts c) = left (ext v2)", "from assm"], ["proof (chain)\npicking this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2", "have r2:\"right (ext v) = right (ext v2)\""], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. right (ext v) = right (ext v2)", "by (simp add: hchop_def real_int.rchop_def )"], ["proof (state)\nthis:\n  right (ext v) = right (ext v2)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v2 ts c) = left (ext v2)", "from r1 and r2"], ["proof (chain)\npicking this:\n  right (len v ts c) = right (ext v)\n  right (ext v) = right (ext v2)", "have r3:\"right ((len v ts) c) = right (ext v2)\""], ["proof (prove)\nusing this:\n  right (len v ts c) = right (ext v)\n  right (ext v) = right (ext v2)\n\ngoal (1 subgoal):\n 1. right (len v ts c) = right (ext v2)", "by simp"], ["proof (state)\nthis:\n  right (len v ts c) = right (ext v2)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v2 ts c) = left (ext v2)", "have l1:\"left ((len v ts) c) = left (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v ts c) = left (ext v)", "using assm"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. left (len v ts c) = left (ext v)", "by auto"], ["proof (state)\nthis:\n  left (len v ts c) = left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v2 ts c) = left (ext v2)", "have l2:\"left (ext v2) \\<ge> left (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v) \\<le> left (ext v2)", "using assm less_eq_real_int_def real_int.chop_leq2 view.hchop_def"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n  R_Chop(?r,?s,?t) \\<longrightarrow> ?t \\<le> ?r\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> left (ext v2)", "by blast"], ["proof (state)\nthis:\n  left (ext v) \\<le> left (ext v2)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v2 ts c) = left (ext v2)", "have l3:\"left ((len v2 ts) c) \\<ge> left (ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> left (len v2 ts c)", "using len_left"], ["proof (prove)\nusing this:\n  left (ext ?v) \\<le> left (len ?v ?ts ?c)\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> left (len v2 ts c)", "by blast"], ["proof (state)\nthis:\n  left (ext v2) \\<le> left (len v2 ts c)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    left (len v2 ts c) = left (ext v2)", "show \"left ((len v2 ts) c) = left (ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. left (len v2 ts c) \\<noteq> left (ext v2) \\<Longrightarrow> False", "assume contra:\"left ((len v2 ts) c) \\<noteq> left (ext v2)\""], ["proof (state)\nthis:\n  left (len v2 ts c) \\<noteq> left (ext v2)\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) \\<noteq> left (ext v2) \\<Longrightarrow> False", "with l3"], ["proof (chain)\npicking this:\n  left (ext v2) \\<le> left (len v2 ts c)\n  left (len v2 ts c) \\<noteq> left (ext v2)", "have less:\"left ((len v2 ts) c) > left (ext v2)\""], ["proof (prove)\nusing this:\n  left (ext v2) \\<le> left (len v2 ts c)\n  left (len v2 ts c) \\<noteq> left (ext v2)\n\ngoal (1 subgoal):\n 1. left (ext v2) < left (len v2 ts c)", "by simp"], ["proof (state)\nthis:\n  left (ext v2) < left (len v2 ts c)\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) \\<noteq> left (ext v2) \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"left ((space ts v) c) \\<le> right (ext v2)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v2) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v2) \\<Longrightarrow> False", "assume neg1:\"\\<not> left ((space ts v) c) \\<le> right (ext v2)\""], ["proof (state)\nthis:\n  \\<not> left (space ts v c) \\<le> right (ext v2)\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v2) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v2) \\<Longrightarrow> False", "have \"left ((len v2 ts) c) = left (ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "have \"(len v2 ts) c = Abs_real_int (right (ext v2),right (ext v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v2 ts c = Abs_real_int (right (ext v2), right (ext v2))", "using len_def  neg1 assm hchop_def space_def"], ["proof (prove)\nusing this:\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> left (space ts v c) \\<le> right (ext v2)\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v2 ts c = Abs_real_int (right (ext v2), right (ext v2))", "by auto"], ["proof (state)\nthis:\n  len v2 ts c = Abs_real_int (right (ext v2), right (ext v2))\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "thus \"left ((len v2 ts) c) = left (ext v2)\""], ["proof (prove)\nusing this:\n  len v2 ts c = Abs_real_int (right (ext v2), right (ext v2))\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "using assm l2 l3 len_def neg1 r3"], ["proof (prove)\nusing this:\n  len v2 ts c = Abs_real_int (right (ext v2), right (ext v2))\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  left (ext v) \\<le> left (ext v2)\n  left (ext v2) \\<le> left (len v2 ts c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> left (space ts v c) \\<le> right (ext v2)\n  right (len v ts c) = right (ext v2)\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "by auto"], ["proof (state)\nthis:\n  left (len v2 ts c) = left (ext v2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  left (len v2 ts c) = left (ext v2)\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v2) \\<Longrightarrow> False\n 2. \\<not> left (space ts v c) \\<le> right (ext v2) \\<Longrightarrow> False", "with contra"], ["proof (chain)\npicking this:\n  left (len v2 ts c) \\<noteq> left (ext v2)\n  left (len v2 ts c) = left (ext v2)", "show False"], ["proof (prove)\nusing this:\n  left (len v2 ts c) \\<noteq> left (ext v2)\n  left (len v2 ts c) = left (ext v2)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v2) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v2) \\<Longrightarrow> False", "assume less1:\"left ((space ts v) c) \\<le> right (ext v2)\""], ["proof (state)\nthis:\n  left (space ts v c) \\<le> right (ext v2)\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v2) \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"right ((space ts v) c) \\<ge> left (ext v2)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False\n 2. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "assume neg2:\"\\<not> left (ext v2) \\<le> right ((space ts v) c)\""], ["proof (state)\nthis:\n  \\<not> left (ext v2) \\<le> right (space ts v c)\n\ngoal (2 subgoals):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False\n 2. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "have \"space ts v2 c \\<le> space ts v c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space ts v2 c \\<le> space ts v c", "using assm hchop_def space_def"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. space ts v2 c \\<le> space ts v c", "by auto"], ["proof (state)\nthis:\n  space ts v2 c \\<le> space ts v c\n\ngoal (2 subgoals):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False\n 2. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "hence \"right (space ts v2 c) \\<le> right (space ts v c)\""], ["proof (prove)\nusing this:\n  space ts v2 c \\<le> space ts v c\n\ngoal (1 subgoal):\n 1. right (space ts v2 c) \\<le> right (space ts v c)", "using less_eq_real_int_def"], ["proof (prove)\nusing this:\n  space ts v2 c \\<le> space ts v c\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n\ngoal (1 subgoal):\n 1. right (space ts v2 c) \\<le> right (space ts v c)", "by auto"], ["proof (state)\nthis:\n  right (space ts v2 c) \\<le> right (space ts v c)\n\ngoal (2 subgoals):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False\n 2. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "with neg2"], ["proof (chain)\npicking this:\n  \\<not> left (ext v2) \\<le> right (space ts v c)\n  right (space ts v2 c) \\<le> right (space ts v c)", "have greater:\"left (ext v2 ) > right (space ts v2 c)\""], ["proof (prove)\nusing this:\n  \\<not> left (ext v2) \\<le> right (space ts v c)\n  right (space ts v2 c) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (space ts v2 c) < left (ext v2)", "by auto"], ["proof (state)\nthis:\n  right (space ts v2 c) < left (ext v2)\n\ngoal (2 subgoals):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False\n 2. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "have \"left ((len v2 ts) c) = left (ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "have len_empty:\"(len v2 ts) c = Abs_real_int (left (ext v2),left (ext v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v2 ts c = Abs_real_int (left (ext v2), left (ext v2))", "using len_def  neg2 assm hchop_def   less1 space_def"], ["proof (prove)\nusing this:\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> left (ext v2) \\<le> right (space ts v c)\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  left (space ts v c) \\<le> right (ext v2)\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v2 ts c = Abs_real_int (left (ext v2), left (ext v2))", "by auto"], ["proof (state)\nthis:\n  len v2 ts c = Abs_real_int (left (ext v2), left (ext v2))\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "have l4:\"left((len v2 ts)c ) = left (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v)", "using Abs_real_int_inverse len_def less neg2  assm hchop_def \n              CollectI len_empty prod.collapse prod.inject"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left (ext v2) < left (len v2 ts c)\n  \\<not> left (ext v2) \\<le> right (space ts v c)\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  ?P ?a \\<Longrightarrow> ?a \\<in> {x. ?P x}\n  len v2 ts c = Abs_real_int (left (ext v2), left (ext v2))\n  (fst ?prod, snd ?prod) = ?prod\n  ((?x1.0, ?x2.0) = (?y1.0, ?y2.0)) = (?x1.0 = ?y1.0 \\<and> ?x2.0 = ?y2.0)\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v)", "by auto"], ["proof (state)\nthis:\n  left (len v2 ts c) = left (ext v)\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "hence \"left (ext v) = left (ext v2)\""], ["proof (prove)\nusing this:\n  left (len v2 ts c) = left (ext v)\n\ngoal (1 subgoal):\n 1. left (ext v) = left (ext v2)", "using l2 l3"], ["proof (prove)\nusing this:\n  left (len v2 ts c) = left (ext v)\n  left (ext v) \\<le> left (ext v2)\n  left (ext v2) \\<le> left (len v2 ts c)\n\ngoal (1 subgoal):\n 1. left (ext v) = left (ext v2)", "by auto"], ["proof (state)\nthis:\n  left (ext v) = left (ext v2)\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "thus \"left ((len v2 ts) c) = left (ext v2)\""], ["proof (prove)\nusing this:\n  left (ext v) = left (ext v2)\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "using l4"], ["proof (prove)\nusing this:\n  left (ext v) = left (ext v2)\n  left (len v2 ts c) = left (ext v)\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) = left (ext v2)", "by auto"], ["proof (state)\nthis:\n  left (len v2 ts c) = left (ext v2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  left (len v2 ts c) = left (ext v2)\n\ngoal (2 subgoals):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False\n 2. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "with contra"], ["proof (chain)\npicking this:\n  left (len v2 ts c) \\<noteq> left (ext v2)\n  left (len v2 ts c) = left (ext v2)", "show False"], ["proof (prove)\nusing this:\n  left (len v2 ts c) \\<noteq> left (ext v2)\n  left (len v2 ts c) = left (ext v2)\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "assume less2:\"left (ext v2) \\<le> right ((space ts v) c)\""], ["proof (state)\nthis:\n  left (ext v2) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "have len_in_type:\n          \"(max (left (ext v2)) (left ((space ts v) c)), \n            min (right (ext v2)) (right ((space ts v) c))) \n            \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (max (left (ext v2)) (left (space ts v c)),\n     min (right (ext v2)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using Rep_real_int less1 less2"], ["proof (prove)\nusing this:\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  left (space ts v c) \\<le> right (ext v2)\n  left (ext v2) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. (max (left (ext v2)) (left (space ts v c)),\n     min (right (ext v2)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "from less1 and less2"], ["proof (chain)\npicking this:\n  left (space ts v c) \\<le> right (ext v2)\n  left (ext v2) \\<le> right (space ts v c)", "have len_def_v2:\"len v2 ( ts) c = \n                Abs_real_int (max (left (ext v2)) (left ((space ts v) c)),\n                              min (right (ext v2)) (right ((space ts v) c)))\""], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> right (ext v2)\n  left (ext v2) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c)))", "using len_def assm hchop_def space_def"], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> right (ext v2)\n  left (ext v2) \\<le> right (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "with less"], ["proof (chain)\npicking this:\n  left (ext v2) < left (len v2 ts c)\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))", "have \n          \"max (left (ext v2)) (left ((space ts v) c)) = left ((space ts v) c)\""], ["proof (prove)\nusing this:\n  left (ext v2) < left (len v2 ts c)\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. max (left (ext v2)) (left (space ts v c)) = left (space ts v c)", "using Abs_real_int_inverse len_in_type snd_conv"], ["proof (prove)\nusing this:\n  left (ext v2) < left (len v2 ts c)\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. max (left (ext v2)) (left (space ts v c)) = left (space ts v c)", "by auto"], ["proof (state)\nthis:\n  max (left (ext v2)) (left (space ts v c)) = left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "hence \"left ((space ts v) c) \\<ge> left (ext v2)\""], ["proof (prove)\nusing this:\n  max (left (ext v2)) (left (space ts v c)) = left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> left (space ts v c)", "by simp"], ["proof (state)\nthis:\n  left (ext v2) \\<le> left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "hence \"left ((space ts v) c) \\<ge> left (ext v)\""], ["proof (prove)\nusing this:\n  left (ext v2) \\<le> left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> left (space ts v c)", "using l2"], ["proof (prove)\nusing this:\n  left (ext v2) \\<le> left (space ts v c)\n  left (ext v) \\<le> left (ext v2)\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> left (space ts v c)", "by auto"], ["proof (state)\nthis:\n  left (ext v) \\<le> left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "from len_def_v2 and less and len_in_type"], ["proof (chain)\npicking this:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n  left (ext v2) < left (len v2 ts c)\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}", "have \"left ((space ts v) c) > left (ext v2)\""], ["proof (prove)\nusing this:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n  left (ext v2) < left (len v2 ts c)\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. left (ext v2) < left (space ts v c)", "using Abs_real_int_inverse sndI"], ["proof (prove)\nusing this:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n  left (ext v2) < left (len v2 ts c)\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  ?x = (?y, ?z) \\<Longrightarrow> snd ?x = ?z\n\ngoal (1 subgoal):\n 1. left (ext v2) < left (space ts v c)", "by auto"], ["proof (state)\nthis:\n  left (ext v2) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "hence l5:\"left ((space ts v) c) > left (ext v)\""], ["proof (prove)\nusing this:\n  left (ext v2) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v) < left (space ts v c)", "using l2"], ["proof (prove)\nusing this:\n  left (ext v2) < left (space ts v c)\n  left (ext v) \\<le> left (ext v2)\n\ngoal (1 subgoal):\n 1. left (ext v) < left (space ts v c)", "by linarith"], ["proof (state)\nthis:\n  left (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "with assm"], ["proof (chain)\npicking this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  left (ext v) < left (space ts v c)", "have len_v_in_type:\n          \"(max (left (ext v)) (left (space ts v c)), \n             min (right (ext v)) (right (space ts v c))) \n          \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  left (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using r2 len_in_type"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  left (ext v) < left (space ts v c)\n  right (ext v) = right (ext v2)\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "hence \"left (len v ( ts) c) \\<noteq> left (ext v)\""], ["proof (prove)\nusing this:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. left (len v ts c) \\<noteq> left (ext v)", "using Abs_real_int_inverse Pair_inject l5 len_def real_int.left_leq_right\n            surjective_pairing"], ["proof (prove)\nusing this:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  \\<lbrakk>(?a, ?b) = (?a', ?b');\n   \\<lbrakk>?a = ?a'; ?b = ?b'\\<rbrakk> \\<Longrightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R\n  left (ext v) < left (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left ?r \\<le> right ?r\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. left (len v ts c) \\<noteq> left (ext v)", "by auto"], ["proof (state)\nthis:\n  left (len v ts c) \\<noteq> left (ext v)\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow> False", "with l1"], ["proof (chain)\npicking this:\n  left (len v ts c) = left (ext v)\n  left (len v ts c) \\<noteq> left (ext v)", "show False"], ["proof (prove)\nusing this:\n  left (len v ts c) = left (ext v)\n  left (len v ts c) \\<noteq> left (ext v)\n\ngoal (1 subgoal):\n 1. False", "by best"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  left (len v2 ts c) = left (ext v2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_hchop_right_right_border: \n  \"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> (right ((len v2 ts) c) = right (ext v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "assume assm:\"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2)\""], ["proof (state)\nthis:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "have r1:\"right ((len v ts) c) = right (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v ts c) = right (ext v)", "using assm"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. right (len v ts c) = right (ext v)", "by auto"], ["proof (state)\nthis:\n  right (len v ts c) = right (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "from assm"], ["proof (chain)\npicking this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2", "have r2:\"right (ext v) = right (ext v2)\""], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. right (ext v) = right (ext v2)", "by (simp add: hchop_def real_int.rchop_def )"], ["proof (state)\nthis:\n  right (ext v) = right (ext v2)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "from r1 and r2"], ["proof (chain)\npicking this:\n  right (len v ts c) = right (ext v)\n  right (ext v) = right (ext v2)", "have r3:\"right ((len v ts) c) = right (ext v2)\""], ["proof (prove)\nusing this:\n  right (len v ts c) = right (ext v)\n  right (ext v) = right (ext v2)\n\ngoal (1 subgoal):\n 1. right (len v ts c) = right (ext v2)", "by simp"], ["proof (state)\nthis:\n  right (len v ts c) = right (ext v2)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "have l1:\"left ((len v ts) c) = left (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v ts c) = left (ext v)", "using assm"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. left (len v ts c) = left (ext v)", "by auto"], ["proof (state)\nthis:\n  left (len v ts c) = left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "have l2:\"left (ext v2) \\<le> right (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (ext v)", "using assm view.h_chop_middle2"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<longrightarrow> left (ext ?w) \\<le> right (ext ?v)\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> right (ext v)", "by blast"], ["proof (state)\nthis:\n  left (ext v2) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "have l3:\"left ((len v2 ts) c) \\<ge> left (ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> left (len v2 ts c)", "using len_left"], ["proof (prove)\nusing this:\n  left (ext ?v) \\<le> left (len ?v ?ts ?c)\n\ngoal (1 subgoal):\n 1. left (ext v2) \\<le> left (len v2 ts c)", "by blast"], ["proof (state)\nthis:\n  left (ext v2) \\<le> left (len v2 ts c)\n\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "show \"(right ((len v2 ts) c) = right (ext v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v2 ts c) = right (ext v2)", "proof (cases \n      \"left ((space ts v) c) \\<le> right (ext v2) \\<and> right ((space ts v) c) \\<ge> left (ext v2)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v2) \\<and>\n    left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)\n 2. \\<not> (left (space ts v c) \\<le> right (ext v2) \\<and>\n            left (ext v2) \\<le> right (space ts v c)) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "case True"], ["proof (state)\nthis:\n  left (space ts v c) \\<le> right (ext v2) \\<and>\n  left (ext v2) \\<le> right (space ts v c)\n\ngoal (2 subgoals):\n 1. left (space ts v c) \\<le> right (ext v2) \\<and>\n    left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)\n 2. \\<not> (left (space ts v c) \\<le> right (ext v2) \\<and>\n            left (ext v2) \\<le> right (space ts v c)) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "show \"(right ((len v2 ts) c) = right (ext v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v2 ts c) = right (ext v2)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "assume neq:\" right (len v2 ( ts) c) \\<noteq> right (ext v2)\""], ["proof (state)\nthis:\n  right (len v2 ts c) \\<noteq> right (ext v2)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  right (len v2 ts c) \\<noteq> right (ext v2)", "have lesser: \"right (len v2 ( ts) c) < right (ext v2)\""], ["proof (prove)\nusing this:\n  right (len v2 ts c) \\<noteq> right (ext v2)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) < right (ext v2)", "using len_right less_eq_real_def"], ["proof (prove)\nusing this:\n  right (len v2 ts c) \\<noteq> right (ext v2)\n  right (len ?v ?ts ?c) \\<le> right (ext ?v)\n  (?x \\<le> ?y) = (?x < ?y \\<or> ?x = ?y)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) < right (ext v2)", "by blast"], ["proof (state)\nthis:\n  right (len v2 ts c) < right (ext v2)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "have len_in_type:\n        \"(max (left (ext v2)) (left (space ts v c)), \n          min (right (ext v2)) (right (space ts v c))) \n            \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (max (left (ext v2)) (left (space ts v c)),\n     min (right (ext v2)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using Rep_real_int True"], ["proof (prove)\nusing this:\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  left (space ts v c) \\<le> right (ext v2) \\<and>\n  left (ext v2) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. (max (left (ext v2)) (left (space ts v c)),\n     min (right (ext v2)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "from True"], ["proof (chain)\npicking this:\n  left (space ts v c) \\<le> right (ext v2) \\<and>\n  left (ext v2) \\<le> right (space ts v c)", "have \n        \"len v2 ( ts) c = \n          Abs_real_int (max (left (ext v2)) (left (space ts v c)), \n                         min (right (ext v2)) (right (space ts v c)))\""], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> right (ext v2) \\<and>\n  left (ext v2) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c)))", "using len_def assm hchop_def space_def"], ["proof (prove)\nusing this:\n  left (space ts v c) \\<le> right (ext v2) \\<and>\n  left (ext v2) \\<le> right (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "hence maximum:\n        \"right (len v2 ( ts) c) = min (right (ext v2)) (right ((space ts v) c))\""], ["proof (prove)\nusing this:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) = min (right (ext v2)) (right (space ts v c))", "using Abs_real_int_inverse len_in_type"], ["proof (prove)\nusing this:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) = min (right (ext v2)) (right (space ts v c))", "by auto"], ["proof (state)\nthis:\n  right (len v2 ts c) = min (right (ext v2)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "have min_right:\n        \"min (right (ext v2)) (right ((space ts v) c)) = right ((space ts v) c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (right (ext v2)) (right (space ts v c)) = right (space ts v c)", "using maximum neq"], ["proof (prove)\nusing this:\n  right (len v2 ts c) = min (right (ext v2)) (right (space ts v c))\n  right (len v2 ts c) \\<noteq> right (ext v2)\n\ngoal (1 subgoal):\n 1. min (right (ext v2)) (right (space ts v c)) = right (space ts v c)", "by linarith"], ["proof (state)\nthis:\n  min (right (ext v2)) (right (space ts v c)) = right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "hence \"right ((space ts v) c) < right (ext v2)\""], ["proof (prove)\nusing this:\n  min (right (ext v2)) (right (space ts v c)) = right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (space ts v c) < right (ext v2)", "using lesser maximum"], ["proof (prove)\nusing this:\n  min (right (ext v2)) (right (space ts v c)) = right (space ts v c)\n  right (len v2 ts c) < right (ext v2)\n  right (len v2 ts c) = min (right (ext v2)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. right (space ts v c) < right (ext v2)", "by auto"], ["proof (state)\nthis:\n  right (space ts v c) < right (ext v2)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "hence right_v:\"right ((space ts v) c) < right (ext v)\""], ["proof (prove)\nusing this:\n  right (space ts v c) < right (ext v2)\n\ngoal (1 subgoal):\n 1. right (space ts v c) < right (ext v)", "using r2"], ["proof (prove)\nusing this:\n  right (space ts v c) < right (ext v2)\n  right (ext v) = right (ext v2)\n\ngoal (1 subgoal):\n 1. right (space ts v c) < right (ext v)", "by auto"], ["proof (state)\nthis:\n  right (space ts v c) < right (ext v)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "have right_inside:\"right ((space ts v) c) \\<ge> left (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (space ts v c)", "by (meson True assm less_eq_real_int_def less_eq_view_ext_def \n            order_trans view.horizontal_chop_leq2)"], ["proof (state)\nthis:\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "with assm and True and right_inside"], ["proof (chain)\npicking this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  left (space ts v c) \\<le> right (ext v2) \\<and>\n  left (ext v2) \\<le> right (space ts v c)\n  left (ext v) \\<le> right (space ts v c)\n  left (ext v) \\<le> right (space ts v c)", "have len_v_in_type:\n        \"(max (left (ext v)) (left (space ts v c)), \n          min (right (ext v)) (right (space ts v c))) \n        \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  left (space ts v c) \\<le> right (ext v2) \\<and>\n  left (ext v2) \\<le> right (space ts v c)\n  left (ext v) \\<le> right (space ts v c)\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using min_right r2 real_int.left_leq_right"], ["proof (prove)\nusing this:\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  left (space ts v c) \\<le> right (ext v2) \\<and>\n  left (ext v2) \\<le> right (space ts v c)\n  left (ext v) \\<le> right (space ts v c)\n  left (ext v) \\<le> right (space ts v c)\n  min (right (ext v2)) (right (space ts v c)) = right (space ts v c)\n  right (ext v) = right (ext v2)\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "hence \" right (len v ( ts) c) \\<noteq> right (ext v)\""], ["proof (prove)\nusing this:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. right (len v ts c) \\<noteq> right (ext v)", "using Abs_real_int_inverse Pair_inject right_v len_def \n          real_int.left_leq_right surjective_pairing"], ["proof (prove)\nusing this:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  \\<lbrakk>(?a, ?b) = (?a', ?b');\n   \\<lbrakk>?a = ?a'; ?b = ?b'\\<rbrakk> \\<Longrightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R\n  right (space ts v c) < right (ext v)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left ?r \\<le> right ?r\n  ?t = (fst ?t, snd ?t)\n\ngoal (1 subgoal):\n 1. right (len v ts c) \\<noteq> right (ext v)", "by auto"], ["proof (state)\nthis:\n  right (len v ts c) \\<noteq> right (ext v)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) \\<noteq> right (ext v2) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  right (len v ts c) \\<noteq> right (ext v)\n\ngoal (1 subgoal):\n 1. False", "using r1"], ["proof (prove)\nusing this:\n  right (len v ts c) \\<noteq> right (ext v)\n  right (len v ts c) = right (ext v)\n\ngoal (1 subgoal):\n 1. False", "by best"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  right (len v2 ts c) = right (ext v2)\n\ngoal (1 subgoal):\n 1. \\<not> (left (space ts v c) \\<le> right (ext v2) \\<and>\n            left (ext v2) \\<le> right (space ts v c)) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (left (space ts v c) \\<le> right (ext v2) \\<and>\n            left (ext v2) \\<le> right (space ts v c)) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "case False"], ["proof (state)\nthis:\n  \\<not> (left (space ts v c) \\<le> right (ext v2) \\<and>\n          left (ext v2) \\<le> right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> (left (space ts v c) \\<le> right (ext v2) \\<and>\n            left (ext v2) \\<le> right (space ts v c)) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "then"], ["proof (chain)\npicking this:\n  \\<not> (left (space ts v c) \\<le> right (ext v2) \\<and>\n          left (ext v2) \\<le> right (space ts v c))", "have \"\\<not>left ((space ts v) c) \\<le> right (ext v2) \\<or> \n               \\<not>right ((space ts v) c) \\<ge> left (ext v2)\""], ["proof (prove)\nusing this:\n  \\<not> (left (space ts v c) \\<le> right (ext v2) \\<and>\n          left (ext v2) \\<le> right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> left (space ts v c) \\<le> right (ext v2) \\<or>\n    \\<not> left (ext v2) \\<le> right (space ts v c)", "by auto"], ["proof (state)\nthis:\n  \\<not> left (space ts v c) \\<le> right (ext v2) \\<or>\n  \\<not> left (ext v2) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> (left (space ts v c) \\<le> right (ext v2) \\<and>\n            left (ext v2) \\<le> right (space ts v c)) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "thus \"right ((len v2 ts) c) = right (ext v2)\""], ["proof (prove)\nusing this:\n  \\<not> left (space ts v c) \\<le> right (ext v2) \\<or>\n  \\<not> left (ext v2) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) = right (ext v2)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> left (space ts v c) \\<le> right (ext v2) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)\n 2. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "assume negative:\"\\<not> left ((space ts v) c) \\<le> right (ext v2)\""], ["proof (state)\nthis:\n  \\<not> left (space ts v c) \\<le> right (ext v2)\n\ngoal (2 subgoals):\n 1. \\<not> left (space ts v c) \\<le> right (ext v2) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)\n 2. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v2 ts c) = right (ext v2)", "using left_space negative r1 r3 sensors.len_def sensors_axioms"], ["proof (prove)\nusing this:\n  left (space ?ts ?v ?c) = pos ?ts ?c\n  \\<not> left (space ts v c) \\<le> right (ext v2)\n  right (len v ts c) = right (ext v)\n  right (len v ts c) = right (ext v2)\n  sensors ?sensors \\<Longrightarrow>\n  sensors.len ?sensors ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (sensors.space ?sensors ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (sensors.space ?sensors ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (sensors.space ?sensors ?ts ?v ?c)),\n              min (right (ext ?v))\n               (right (sensors.space ?sensors ?ts ?v ?c)))\n  sensors sensors\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) = right (ext v2)", "by auto"], ["proof (state)\nthis:\n  right (len v2 ts c) = right (ext v2)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "assume left_outside:\"\\<not> left (ext v2) \\<le> right ((space ts v) c)\""], ["proof (state)\nthis:\n  \\<not> left (ext v2) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "hence \"left (ext v2) > right (space ts v2 c)\""], ["proof (prove)\nusing this:\n  \\<not> left (ext v2) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (space ts v2 c) < left (ext v2)", "using assm hchop_def space_def"], ["proof (prove)\nusing this:\n  \\<not> left (ext v2) \\<le> right (space ts v c)\n  len v ts c = ext v \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. right (space ts v2 c) < left (ext v2)", "by auto"], ["proof (state)\nthis:\n  right (space ts v2 c) < left (ext v2)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "then"], ["proof (chain)\npicking this:\n  right (space ts v2 c) < left (ext v2)", "have len:\"len v2 ( ts) c = Abs_real_int (left (ext v2),left (ext v2))\""], ["proof (prove)\nusing this:\n  right (space ts v2 c) < left (ext v2)\n\ngoal (1 subgoal):\n 1. len v2 ts c = Abs_real_int (left (ext v2), left (ext v2))", "by (metis (no_types, hide_lams) len_def l2 le_less_trans not_less order.asym\n            space_nonempty r2)"], ["proof (state)\nthis:\n  len v2 ts c = Abs_real_int (left (ext v2), left (ext v2))\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "show \"(right ((len v2 ts) c) = right (ext v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v2 ts c) = right (ext v2)", "proof (cases \"right ((space ts v) c) \\<ge> left (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. left (ext v) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)\n 2. \\<not> left (ext v) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "assume \"\\<not> left (ext v) \\<le> right ((space ts v) c)\""], ["proof (state)\nthis:\n  \\<not> left (ext v) \\<le> right (space ts v c)\n\ngoal (2 subgoals):\n 1. left (ext v) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)\n 2. \\<not> left (ext v) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "hence len_empty:\"len v (ts) c = Abs_real_int (left (ext v), left (ext v))\""], ["proof (prove)\nusing this:\n  \\<not> left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. len v ts c = Abs_real_int (left (ext v), left (ext v))", "using len_def real_int.left_leq_right Abs_real_int_inverse"], ["proof (prove)\nusing this:\n  \\<not> left (ext v) \\<le> right (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left ?r \\<le> right ?r\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n\ngoal (1 subgoal):\n 1. len v ts c = Abs_real_int (left (ext v), left (ext v))", "by (meson less_trans not_less space_nonempty)"], ["proof (state)\nthis:\n  len v ts c = Abs_real_int (left (ext v), left (ext v))\n\ngoal (2 subgoals):\n 1. left (ext v) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)\n 2. \\<not> left (ext v) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "show \"(right ((len v2 ts) c) = right (ext v2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v2 ts c) = right (ext v2)", "by (metis (no_types, hide_lams) Rep_real_int_inverse assm dual_order.antisym \n              left.rep_eq len len_empty prod.collapse real_int.chop_singleton_left \n              real_int.rchop_def right.rep_eq view.h_chop_middle1 view.hchop_def)"], ["proof (state)\nthis:\n  right (len v2 ts c) = right (ext v2)\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "assume \"left (ext v) \\<le> right ((space ts v) c)\""], ["proof (state)\nthis:\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (space ts v c) \\<Longrightarrow>\n    right (len v2 ts c) = right (ext v2)", "then"], ["proof (chain)\npicking this:\n  left (ext v) \\<le> right (space ts v c)", "show ?thesis"], ["proof (prove)\nusing this:\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) = right (ext v2)", "using l2 left_outside len_space_right r1"], ["proof (prove)\nusing this:\n  left (ext v) \\<le> right (space ts v c)\n  left (ext v2) \\<le> right (ext v)\n  \\<not> left (ext v2) \\<le> right (space ts v c)\n  left (ext ?v) \\<le> right (space ?ts ?v ?c) \\<longrightarrow>\n  right (len ?v ?ts ?c) \\<le> right (space ?ts ?v ?c)\n  right (len v ts c) = right (ext v)\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) = right (ext v2)", "by fastforce"], ["proof (state)\nthis:\n  right (len v2 ts c) = right (ext v2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  right (len v2 ts c) = right (ext v2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  right (len v2 ts c) = right (ext v2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  right (len v2 ts c) = right (ext v2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_view_hchop_right: \n  \"((len v ts) c = ext v) \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> ((len v2 ts) c = ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = ext v \\<and> v=v1\\<parallel>v2 \\<longrightarrow>\n    len v2 ts c = ext v2", "by (metis Rep_real_int_inverse left.rep_eq len_hchop_right_left_border \n      len_hchop_right_right_border prod.collapse right.rep_eq)"], ["", "lemma len_compose_hchop:\n  \"(v=v1\\<parallel>v2) \\<and> (len v1 ( ts) c = ext v1) \\<and> (len v2 ( ts) c = ext v2)\n     \\<longrightarrow> (len v ( ts) c = ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and>\n    len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2 \\<longrightarrow>\n    len v ts c = ext v", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and>\n    len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2 \\<Longrightarrow>\n    len v ts c = ext v", "assume assm:\"(v=v1\\<parallel>v2) \\<and> (len v1 ( ts) c = ext v1) \\<and> (len v2 ( ts) c = ext v2)\""], ["proof (state)\nthis:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and>\n    len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2 \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2", "have left_v1:\"left (len v1 ( ts) c) = left (ext v1)\""], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n\ngoal (1 subgoal):\n 1. left (len v1 ts c) = left (ext v1)", "by auto"], ["proof (state)\nthis:\n  left (len v1 ts c) = left (ext v1)\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and>\n    len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2 \\<Longrightarrow>\n    len v ts c = ext v", "from assm"], ["proof (chain)\npicking this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2", "have right_v1:\"right (len v1 ( ts) c) = left (ext v2)\""], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = left (ext v2)", "by (simp add: hchop_def real_int.rchop_def )"], ["proof (state)\nthis:\n  right (len v1 ts c) = left (ext v2)\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and>\n    len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2 \\<Longrightarrow>\n    len v ts c = ext v", "from assm"], ["proof (chain)\npicking this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2", "have left_v2:\"left (len v2 ( ts) c) = right (ext v1)\""], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) = right (ext v1)", "using right_v1"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  right (len v1 ts c) = left (ext v2)\n\ngoal (1 subgoal):\n 1. left (len v2 ts c) = right (ext v1)", "by auto"], ["proof (state)\nthis:\n  left (len v2 ts c) = right (ext v1)\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and>\n    len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2 \\<Longrightarrow>\n    len v ts c = ext v", "from assm"], ["proof (chain)\npicking this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2", "have right_v2:\"right (len v2 ( ts) c) = right (ext v2)\""], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n\ngoal (1 subgoal):\n 1. right (len v2 ts c) = right (ext v2)", "by auto"], ["proof (state)\nthis:\n  right (len v2 ts c) = right (ext v2)\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and>\n    len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2 \\<Longrightarrow>\n    len v ts c = ext v", "show \"(len v ( ts) c = ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = ext v", "proof (cases \" left ((space ts v) c) > right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "case True"], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  right (ext v) < left (space ts v c)", "have \"left (space ts v c) > right (ext v2)\""], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v2) < left (space ts v c)", "using assm right_v2"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  right (len v2 ts c) = right (ext v2)\n\ngoal (1 subgoal):\n 1. right (ext v2) < left (space ts v c)", "by (simp add: hchop_def real_int.rchop_def )"], ["proof (state)\nthis:\n  right (ext v2) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  right (ext v2) < left (space ts v c)", "have \"left (space ts v2 c) > right( ext v2)\""], ["proof (prove)\nusing this:\n  right (ext v2) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v2) < left (space ts v2 c)", "using assm hchop_def sensors.space_def sensors_axioms"], ["proof (prove)\nusing this:\n  right (ext v2) < left (space ts v c)\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  sensors sensors\n\ngoal (1 subgoal):\n 1. right (ext v2) < left (space ts v2 c)", "by auto"], ["proof (state)\nthis:\n  right (ext v2) < left (space ts v2 c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  right (ext v2) < left (space ts v2 c)", "have \"len v2 ts c = Abs_real_int(right (ext v2), right (ext v2))\""], ["proof (prove)\nusing this:\n  right (ext v2) < left (space ts v2 c)\n\ngoal (1 subgoal):\n 1. len v2 ts c = Abs_real_int (right (ext v2), right (ext v2))", "using len_def"], ["proof (prove)\nusing this:\n  right (ext v2) < left (space ts v2 c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n\ngoal (1 subgoal):\n 1. len v2 ts c = Abs_real_int (right (ext v2), right (ext v2))", "by simp"], ["proof (state)\nthis:\n  len v2 ts c = Abs_real_int (right (ext v2), right (ext v2))\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  len v2 ts c = Abs_real_int (right (ext v2), right (ext v2))", "have \"ext v2 = Abs_real_int(right (ext v2), right (ext v2))\""], ["proof (prove)\nusing this:\n  len v2 ts c = Abs_real_int (right (ext v2), right (ext v2))\n\ngoal (1 subgoal):\n 1. ext v2 = Abs_real_int (right (ext v2), right (ext v2))", "using assm"], ["proof (prove)\nusing this:\n  len v2 ts c = Abs_real_int (right (ext v2), right (ext v2))\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n\ngoal (1 subgoal):\n 1. ext v2 = Abs_real_int (right (ext v2), right (ext v2))", "by simp"], ["proof (state)\nthis:\n  ext v2 = Abs_real_int (right (ext v2), right (ext v2))\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  ext v2 = Abs_real_int (right (ext v2), right (ext v2))", "have \"\\<parallel>ext v2\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  ext v2 = Abs_real_int (right (ext v2), right (ext v2))\n\ngoal (1 subgoal):\n 1. \\<parallel>ext v2\\<parallel> = 0", "by (metis Rep_real_int_inverse fst_conv left.rep_eq\n          real_int.chop_singleton_right real_int.length_zero_iff_borders_eq\n          real_int.rchop_def right.rep_eq snd_conv surj_pair)"], ["proof (state)\nthis:\n  \\<parallel>ext v2\\<parallel> = 0\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  \\<parallel>ext v2\\<parallel> = 0", "have \"ext v = ext v1\""], ["proof (prove)\nusing this:\n  \\<parallel>ext v2\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. ext v = ext v1", "using assm hchop_def real_int.rchop_def real_int.chop_empty2"], ["proof (prove)\nusing this:\n  \\<parallel>ext v2\\<parallel> = 0\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  R_Chop(?r,?s,?t) \\<and> \\<parallel>?t\\<parallel> = 0 \\<longrightarrow>\n  ?r = ?s\n\ngoal (1 subgoal):\n 1. ext v = ext v1", "by simp"], ["proof (state)\nthis:\n  ext v = ext v1\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  ext v = ext v1", "show ?thesis"], ["proof (prove)\nusing this:\n  ext v = ext v1\n\ngoal (1 subgoal):\n 1. len v ts c = ext v", "using assm hchop_def len_def sensors.space_def sensors_axioms"], ["proof (prove)\nusing this:\n  ext v = ext v1\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  sensors sensors\n\ngoal (1 subgoal):\n 1. len v ts c = ext v", "by auto"], ["proof (state)\nthis:\n  len v ts c = ext v\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "case False"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  \\<not> right (ext v) < left (space ts v c)", "have in_left:\"left (space ts v c) \\<le> right (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v)", "by simp"], ["proof (state)\nthis:\n  left (space ts v c) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    len v ts c = ext v", "show \"len v ts c = ext v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = ext v", "proof (cases \"right (space ts v c) < left (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "case True"], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v)", "have \"right (space ts v c) < left (ext v1)\""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts v c) < left (ext v1)", "using assm left_v1"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  left (len v1 ts c) = left (ext v1)\n\ngoal (1 subgoal):\n 1. right (space ts v c) < left (ext v1)", "by (simp add: hchop_def real_int.rchop_def)"], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v1)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  right (space ts v c) < left (ext v1)", "have out_v1:\"right (space ts v1 c) < left (ext v1)\""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v1)\n\ngoal (1 subgoal):\n 1. right (space ts v1 c) < left (ext v1)", "using assm hchop_def sensors.space_def sensors_axioms"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v1)\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  sensors sensors\n\ngoal (1 subgoal):\n 1. right (space ts v1 c) < left (ext v1)", "by auto"], ["proof (state)\nthis:\n  right (space ts v1 c) < left (ext v1)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  right (space ts v1 c) < left (ext v1)", "have \"len v1 ts c = Abs_real_int(left (ext v1), left (ext v1))\""], ["proof (prove)\nusing this:\n  right (space ts v1 c) < left (ext v1)\n\ngoal (1 subgoal):\n 1. len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))", "using len_def in_left"], ["proof (prove)\nusing this:\n  right (space ts v1 c) < left (ext v1)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left (space ts v c) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))", "by (meson le_less_trans less_trans not_le real_int.left_leq_right)"], ["proof (state)\nthis:\n  len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))", "have \"ext v1 = Abs_real_int (left (ext v1), left (ext v1))\""], ["proof (prove)\nusing this:\n  len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))\n\ngoal (1 subgoal):\n 1. ext v1 = Abs_real_int (left (ext v1), left (ext v1))", "using assm"], ["proof (prove)\nusing this:\n  len v1 ts c = Abs_real_int (left (ext v1), left (ext v1))\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n\ngoal (1 subgoal):\n 1. ext v1 = Abs_real_int (left (ext v1), left (ext v1))", "by simp"], ["proof (state)\nthis:\n  ext v1 = Abs_real_int (left (ext v1), left (ext v1))\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  ext v1 = Abs_real_int (left (ext v1), left (ext v1))", "have \"\\<parallel>ext v1\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  ext v1 = Abs_real_int (left (ext v1), left (ext v1))\n\ngoal (1 subgoal):\n 1. \\<parallel>ext v1\\<parallel> = 0", "by (metis add.right_neutral real_int.chop_singleton_left\n            real_int.length_zero_iff_borders_eq real_int.rchop_def real_int.shift_def\n            real_int.shift_zero)"], ["proof (state)\nthis:\n  \\<parallel>ext v1\\<parallel> = 0\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  \\<parallel>ext v1\\<parallel> = 0", "have \"ext v = ext v2\""], ["proof (prove)\nusing this:\n  \\<parallel>ext v1\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. ext v = ext v2", "using assm hchop_def real_int.rchop_def real_int.chop_empty1"], ["proof (prove)\nusing this:\n  \\<parallel>ext v1\\<parallel> = 0\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  R_Chop(?r,?s,?t) \\<and> \\<parallel>?s\\<parallel> = 0 \\<longrightarrow>\n  ?r = ?t\n\ngoal (1 subgoal):\n 1. ext v = ext v2", "by auto"], ["proof (state)\nthis:\n  ext v = ext v2\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow> len v ts c = ext v\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  ext v = ext v2", "show ?thesis"], ["proof (prove)\nusing this:\n  ext v = ext v2\n\ngoal (1 subgoal):\n 1. len v ts c = ext v", "using assm hchop_def len_def sensors.space_def sensors_axioms"], ["proof (prove)\nusing this:\n  ext v = ext v2\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  sensors sensors\n\ngoal (1 subgoal):\n 1. len v ts c = ext v", "by auto"], ["proof (state)\nthis:\n  len v ts c = ext v\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "case False"], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)", "have in_right:\"right (space ts v c) \\<ge> left (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (space ts v c)", "by simp"], ["proof (state)\nthis:\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "have f1: \"own v = own v2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. own v = own v2", "using assm hchop_def"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. own v = own v2", "by (auto)"], ["proof (state)\nthis:\n  own v = own v2\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "have f2: \"own v = own v1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. own v = own v1", "using assm hchop_def"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. own v = own v1", "by auto"], ["proof (state)\nthis:\n  own v = own v1\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "have chop:\"R_Chop(ext v,ext v1,ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R_Chop(ext v,ext v1,ext v2)", "using assm hchop_def"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. R_Chop(ext v,ext v1,ext v2)", "by (auto )"], ["proof (state)\nthis:\n  R_Chop(ext v,ext v1,ext v2)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "have len:\"len v ts c = Abs_real_int(max (left (ext v)) (left (space ts v c)),\n                      min (right (ext v)) (right (space ts v c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "using len_def in_left in_right"], ["proof (prove)\nusing this:\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  left (space ts v c) \\<le> right (ext v)\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "by simp"], ["proof (state)\nthis:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "have len1:\"len v1 ts c = Abs_real_int(max (left (ext v1)) (left (space ts v1 c)),\n                      min (right (ext v1)) (right (space ts v1 c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v1 c)),\n      min (right (ext v1)) (right (space ts v1 c)))", "by (metis assm f2 f1 chop assm in_left in_right len_def len_space_left\n            not_le real_int.rchop_def space_def)"], ["proof (state)\nthis:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v1 c)),\n    min (right (ext v1)) (right (space ts v1 c)))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v1 c)),\n    min (right (ext v1)) (right (space ts v1 c)))", "have \"max (left (ext v1)) (left (space ts v1 c)) = left (len v1 ts c)\""], ["proof (prove)\nusing this:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v1 c)),\n    min (right (ext v1)) (right (space ts v1 c)))\n\ngoal (1 subgoal):\n 1. max (left (ext v1)) (left (space ts v1 c)) = left (len v1 ts c)", "by (metis assm chop f1 f2 in_left len_space_left max.orderE\n            real_int.rchop_def space_def)"], ["proof (state)\nthis:\n  max (left (ext v1)) (left (space ts v1 c)) = left (len v1 ts c)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  max (left (ext v1)) (left (space ts v1 c)) = left (len v1 ts c)", "have left_border:\"max (left (ext v1)) (left (space ts v1 c)) = left (ext v1)\""], ["proof (prove)\nusing this:\n  max (left (ext v1)) (left (space ts v1 c)) = left (len v1 ts c)\n\ngoal (1 subgoal):\n 1. max (left (ext v1)) (left (space ts v1 c)) = left (ext v1)", "using left_v1"], ["proof (prove)\nusing this:\n  max (left (ext v1)) (left (space ts v1 c)) = left (len v1 ts c)\n  left (len v1 ts c) = left (ext v1)\n\ngoal (1 subgoal):\n 1. max (left (ext v1)) (left (space ts v1 c)) = left (ext v1)", "by simp"], ["proof (state)\nthis:\n  max (left (ext v1)) (left (space ts v1 c)) = left (ext v1)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "have len2:\"len v2 ts c = Abs_real_int(max (left (ext v2)) (left (space ts v2 c)),\n                      min (right (ext v2)) (right (space ts v2 c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v2 c)),\n      min (right (ext v2)) (right (space ts v2 c)))", "by (metis len_def in_left in_right assm f2 f1 chop len_space_right not_le\n            real_int.rchop_def space_def)"], ["proof (state)\nthis:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v2 c)),\n    min (right (ext v2)) (right (space ts v2 c)))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v2 c)),\n    min (right (ext v2)) (right (space ts v2 c)))", "have \"min (right (ext v2)) (right (space ts v2 c)) = right (len v2 ts c)\""], ["proof (prove)\nusing this:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v2 c)),\n    min (right (ext v2)) (right (space ts v2 c)))\n\ngoal (1 subgoal):\n 1. min (right (ext v2)) (right (space ts v2 c)) = right (len v2 ts c)", "by (metis assm chop f1 f2 in_right len_space_right min.absorb_iff1 \n            real_int.rchop_def space_def)"], ["proof (state)\nthis:\n  min (right (ext v2)) (right (space ts v2 c)) = right (len v2 ts c)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  min (right (ext v2)) (right (space ts v2 c)) = right (len v2 ts c)", "have right_border:\n        \"min (right (ext v2)) (right (space ts v2 c)) = right (ext v2)\""], ["proof (prove)\nusing this:\n  min (right (ext v2)) (right (space ts v2 c)) = right (len v2 ts c)\n\ngoal (1 subgoal):\n 1. min (right (ext v2)) (right (space ts v2 c)) = right (ext v2)", "using right_v2"], ["proof (prove)\nusing this:\n  min (right (ext v2)) (right (space ts v2 c)) = right (len v2 ts c)\n  right (len v2 ts c) = right (ext v2)\n\ngoal (1 subgoal):\n 1. min (right (ext v2)) (right (space ts v2 c)) = right (ext v2)", "by simp"], ["proof (state)\nthis:\n  min (right (ext v2)) (right (space ts v2 c)) = right (ext v2)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "have \"left (space ts v c) = left (space ts v1 c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (space ts v c) = left (space ts v1 c)", "using assm hchop_def sensors.space_def sensors_axioms"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  sensors sensors\n\ngoal (1 subgoal):\n 1. left (space ts v c) = left (space ts v1 c)", "by auto"], ["proof (state)\nthis:\n  left (space ts v c) = left (space ts v1 c)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  left (space ts v c) = left (space ts v1 c)", "have max:\n        \"  max (left (ext v)) (left (space ts v c)) \n         = max (left (ext v1)) (left (space ts v1 c))\""], ["proof (prove)\nusing this:\n  left (space ts v c) = left (space ts v1 c)\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) =\n    max (left (ext v1)) (left (space ts v1 c))", "using assm hchop_def real_int.rchop_def"], ["proof (prove)\nusing this:\n  left (space ts v c) = left (space ts v1 c)\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) =\n    max (left (ext v1)) (left (space ts v1 c))", "by auto"], ["proof (state)\nthis:\n  max (left (ext v)) (left (space ts v c)) =\n  max (left (ext v1)) (left (space ts v1 c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "have \"right (space ts v c) = right (space ts v2 c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (space ts v c) = right (space ts v2 c)", "using assm hchop_def sensors.space_def sensors_axioms"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  sensors sensors\n\ngoal (1 subgoal):\n 1. right (space ts v c) = right (space ts v2 c)", "by auto"], ["proof (state)\nthis:\n  right (space ts v c) = right (space ts v2 c)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "then"], ["proof (chain)\npicking this:\n  right (space ts v c) = right (space ts v2 c)", "have min:\n        \"  min (right (ext v)) (right (space ts v c)) \n         = min (right (ext v2)) (right (space ts v2 c))\""], ["proof (prove)\nusing this:\n  right (space ts v c) = right (space ts v2 c)\n\ngoal (1 subgoal):\n 1. min (right (ext v)) (right (space ts v c)) =\n    min (right (ext v2)) (right (space ts v2 c))", "using assm hchop_def real_int.rchop_def"], ["proof (prove)\nusing this:\n  right (space ts v c) = right (space ts v2 c)\n  v=v1\\<parallel>v2 \\<and> len v1 ts c = ext v1 \\<and> len v2 ts c = ext v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. min (right (ext v)) (right (space ts v c)) =\n    min (right (ext v2)) (right (space ts v2 c))", "by auto"], ["proof (state)\nthis:\n  min (right (ext v)) (right (space ts v c)) =\n  min (right (ext v2)) (right (space ts v2 c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    len v ts c = ext v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = ext v", "by (metis min max left_border right_border False add.right_neutral \n            chop in_left len_def not_le real_int.rchop_def real_int.shift_def\n            real_int.shift_zero)"], ["proof (state)\nthis:\n  len v ts c = ext v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = ext v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  len v ts c = ext v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_stable:\"(v=v1--v2) \\<longrightarrow> len v1 ts c = len v2 ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1--v2 \\<longrightarrow> len v1 ts c = len v2 ts c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v=v1--v2 \\<Longrightarrow> len v1 ts c = len v2 ts c", "assume assm:\"v=v1--v2\""], ["proof (state)\nthis:\n  v=v1--v2\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<Longrightarrow> len v1 ts c = len v2 ts c", "then"], ["proof (chain)\npicking this:\n  v=v1--v2", "have ext_eq1:\"ext v = ext v1\" and ext_eq2:\"ext v = ext v2\""], ["proof (prove)\nusing this:\n  v=v1--v2\n\ngoal (1 subgoal):\n 1. ext v = ext v1 &&& ext v = ext v2", "using vchop_def"], ["proof (prove)\nusing this:\n  v=v1--v2\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. ext v = ext v1 &&& ext v = ext v2", "by auto"], ["proof (state)\nthis:\n  ext v = ext v1\n  ext v = ext v2\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<Longrightarrow> len v1 ts c = len v2 ts c", "hence ext1_eq_ext2:\"ext v1 = ext v2\""], ["proof (prove)\nusing this:\n  ext v = ext v1\n  ext v = ext v2\n\ngoal (1 subgoal):\n 1. ext v1 = ext v2", "by simp"], ["proof (state)\nthis:\n  ext v1 = ext v2\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<Longrightarrow> len v1 ts c = len v2 ts c", "show \"len v1 ts c = len v2 ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v1 ts c = len v2 ts c", "using assm ext1_eq_ext2 left_space right_space sensors.len_def sensors_axioms \n      view.vertical_chop_own_trans"], ["proof (prove)\nusing this:\n  v=v1--v2\n  ext v1 = ext v2\n  left (space ?ts ?v ?c) = pos ?ts ?c\n  right (space ?ts ?v ?c) = pos ?ts ?c + sensors (own ?v) ?ts ?c\n  sensors ?sensors \\<Longrightarrow>\n  sensors.len ?sensors ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (sensors.space ?sensors ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (sensors.space ?sensors ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (sensors.space ?sensors ?ts ?v ?c)),\n              min (right (ext ?v))\n               (right (sensors.space ?sensors ?ts ?v ?c)))\n  sensors sensors\n  ?v=?u--?w \\<longrightarrow> own ?u = own ?w\n\ngoal (1 subgoal):\n 1. len v1 ts c = len v2 ts c", "by auto"], ["proof (state)\nthis:\n  len v1 ts c = len v2 ts c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_empty_on_subview1:\n  \"\\<parallel>len v ( ts) c\\<parallel> = 0 \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> \\<parallel>len v1 ( ts) c\\<parallel> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and>\n    v=v1\\<parallel>v2 \\<longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and>\n    v=v1\\<parallel>v2 \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "assume assm:\"\\<parallel>len v ( ts) c\\<parallel> = 0 \\<and> (v=v1\\<parallel>v2)\""], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and>\n    v=v1\\<parallel>v2 \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "then"], ["proof (chain)\npicking this:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2", "have len_v_borders:\"left (len v ( ts) c) = right (len v ( ts) c)\""], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. left (len v ts c) = right (len v ts c)", "by (simp add:real_int.length_zero_iff_borders_eq)"], ["proof (state)\nthis:\n  left (len v ts c) = right (len v ts c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and>\n    v=v1\\<parallel>v2 \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "show \"\\<parallel>len v1 ( ts) c\\<parallel> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "proof (cases \"left ((space ts v) c) > right (ext v1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v1) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0\n 2. \\<not> right (ext v1) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "assume left_outside_v1:\"left ((space ts v) c) > right (ext v1)\""], ["proof (state)\nthis:\n  right (ext v1) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v1) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0\n 2. \\<not> right (ext v1) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "thus \"\\<parallel>len v1 ( ts) c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  right (ext v1) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "using Abs_real_int_inverse assm fst_conv hchop_def len_def real_int.length_zero_iff_borders_eq\n        mem_Collect_eq snd_conv space_def"], ["proof (prove)\nusing this:\n  right (ext v1) < left (space ts v c)\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  fst (?x1.0, ?x2.0) = ?x1.0\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  (\\<parallel>?r\\<parallel> = 0) = (left ?r = right ?r)\n  (?a \\<in> Collect ?P) = ?P ?a\n  snd (?x1.0, ?x2.0) = ?x2.0\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "by auto"], ["proof (state)\nthis:\n  \\<parallel>len v1 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v1) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v1) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "assume left_inside_v1:\"\\<not>left ((space ts v) c) > right (ext v1)\""], ["proof (state)\nthis:\n  \\<not> right (ext v1) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v1) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "show \"\\<parallel>len v1 ( ts) c\\<parallel> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "proof (cases \"left (ext v1) > right ((space ts v) c)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0\n 2. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "assume right_outside_v1:\"left (ext v1) > right ((space ts v) c)\""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v1)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0\n 2. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "hence \"left (ext v1) > right ((space ts v1) c)\""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v1)\n\ngoal (1 subgoal):\n 1. right (space ts v1 c) < left (ext v1)", "using assm hchop_def space_def"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v1)\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. right (space ts v1 c) < left (ext v1)", "by auto"], ["proof (state)\nthis:\n  right (space ts v1 c) < left (ext v1)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0\n 2. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "thus \"\\<parallel>len v1 (ts) c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  right (space ts v1 c) < left (ext v1)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "using assm hchop_def len_def real_int.length_def  Abs_real_int_inverse"], ["proof (prove)\nusing this:\n  right (space ts v1 c) < left (ext v1)\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "by auto"], ["proof (state)\nthis:\n  \\<parallel>len v1 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "assume right_inside_v1:\"\\<not>left (ext v1) > right ((space ts v) c)\""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v1)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "have len_v1:\n        \"len v1 ( ts) c = Abs_real_int (max (left (ext v1)) (left (space ts v c)), \n                                        min (right (ext v1)) (right (space ts v c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c)))", "using left_inside_v1 len_def right_inside_v1 assm hchop_def space_def"], ["proof (prove)\nusing this:\n  \\<not> right (ext v1) < left (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> right (space ts v c) < left (ext v1)\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "from left_inside_v1 and right_inside_v1"], ["proof (chain)\npicking this:\n  \\<not> right (ext v1) < left (space ts v c)\n  \\<not> right (space ts v c) < left (ext v1)", "have inside_v:\n        \"\\<not>left (space ts v c) > right (ext v) \\<and> \\<not>left (ext v) > right (space ts v c)\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v1) < left (space ts v c)\n  \\<not> right (space ts v c) < left (ext v1)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<and>\n    \\<not> right (space ts v c) < left (ext v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> right (ext v1) < left (space ts v c);\n     \\<not> right (space ts v c) < left (ext v1)\\<rbrakk>\n    \\<Longrightarrow> \\<not> right (ext v) < left (space ts v c) \\<and>\n                      \\<not> right (space ts v c) < left (ext v)", "have \"fst (Rep_real_int (ext v2)) \\<le> snd (Rep_real_int (ext v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (Rep_real_int (ext v2)) \\<le> snd (Rep_real_int (ext v))", "using assm view.h_chop_middle2"], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<longrightarrow> left (ext ?w) \\<le> right (ext ?v)\n\ngoal (1 subgoal):\n 1. fst (Rep_real_int (ext v2)) \\<le> snd (Rep_real_int (ext v))", "by force"], ["proof (state)\nthis:\n  fst (Rep_real_int (ext v2)) \\<le> snd (Rep_real_int (ext v))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> right (ext v1) < left (space ts v c);\n     \\<not> right (space ts v c) < left (ext v1)\\<rbrakk>\n    \\<Longrightarrow> \\<not> right (ext v) < left (space ts v c) \\<and>\n                      \\<not> right (space ts v c) < left (ext v)", "then"], ["proof (chain)\npicking this:\n  fst (Rep_real_int (ext v2)) \\<le> snd (Rep_real_int (ext v))", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (Rep_real_int (ext v2)) \\<le> snd (Rep_real_int (ext v))\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<and>\n    \\<not> right (space ts v c) < left (ext v)", "using assm left_inside_v1 real_int.rchop_def right_inside_v1 view.hchop_def"], ["proof (prove)\nusing this:\n  fst (Rep_real_int (ext v2)) \\<le> snd (Rep_real_int (ext v))\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  \\<not> right (ext v1) < left (space ts v c)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  \\<not> right (space ts v c) < left (ext v1)\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<and>\n    \\<not> right (space ts v c) < left (ext v)", "by force"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "hence len_v:\n        \"len v ts c = Abs_real_int (max (left (ext v)) (left (space ts v c)),\n                                    min (right (ext v)) (right (space ts v c)))\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "by (simp add: len_def)"], ["proof (state)\nthis:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "have less_eq:\n        \"  max (left (ext v)) (left (space ts v c)) \n         \\<le> min (right (ext v)) (right (space ts v c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c))\n    \\<le> min (right (ext v)) (right (space ts v c))", "using inside_v real_int.left_leq_right"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c))\n    \\<le> min (right (ext v)) (right (space ts v c))", "by auto"], ["proof (state)\nthis:\n  max (left (ext v)) (left (space ts v c))\n  \\<le> min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "from len_v"], ["proof (chain)\npicking this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))", "have len_v_empty: \n        \"  max (left (ext v)) (left ((space ts v) c)) \n         = min (right (ext v)) (right ((space ts v) c))\""], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) =\n    min (right (ext v)) (right (space ts v c))", "using Abs_real_int_inverse Rep_real_int_inverse inside_v\n        len_v_borders local.less_eq"], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  Abs_real_int (Rep_real_int ?x) = ?x\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n  left (len v ts c) = right (len v ts c)\n  max (left (ext v)) (left (space ts v c))\n  \\<le> min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) =\n    min (right (ext v)) (right (space ts v c))", "by auto"], ["proof (state)\nthis:\n  max (left (ext v)) (left (space ts v c)) =\n  min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "have left_len_eq:\n        \" max (left (ext v)) (left (space ts v c)) \n        = max (left (ext v1)) (left (space ts v c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) =\n    max (left (ext v1)) (left (space ts v c))", "using assm hchop_def real_int.rchop_def"], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) =\n    max (left (ext v1)) (left (space ts v c))", "by auto"], ["proof (state)\nthis:\n  max (left (ext v)) (left (space ts v c)) =\n  max (left (ext v1)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "have right_len_leq:\n        \"  min (right (ext v)) (right (space ts v c)) \n         \\<ge> min (right (ext v1)) (right (space ts v c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (right (ext v1)) (right (space ts v c))\n    \\<le> min (right (ext v)) (right (space ts v c))", "by (metis (no_types, hide_lams) assm min.bounded_iff min_less_iff_conj not_le\n            order_refl real_int.rchop_def view.h_chop_middle2 view.hchop_def)"], ["proof (state)\nthis:\n  min (right (ext v1)) (right (space ts v c))\n  \\<le> min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "hence left_geq_right:\n        \"  max (left (ext v1)) (left (space ts v c))\n         \\<ge> min (right (ext v1)) (right (space ts v c))\""], ["proof (prove)\nusing this:\n  min (right (ext v1)) (right (space ts v c))\n  \\<le> min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. min (right (ext v1)) (right (space ts v c))\n    \\<le> max (left (ext v1)) (left (space ts v c))", "using left_len_eq len_v_empty"], ["proof (prove)\nusing this:\n  min (right (ext v1)) (right (space ts v c))\n  \\<le> min (right (ext v)) (right (space ts v c))\n  max (left (ext v)) (left (space ts v c)) =\n  max (left (ext v1)) (left (space ts v c))\n  max (left (ext v)) (left (space ts v c)) =\n  min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. min (right (ext v1)) (right (space ts v c))\n    \\<le> max (left (ext v1)) (left (space ts v c))", "by auto"], ["proof (state)\nthis:\n  min (right (ext v1)) (right (space ts v c))\n  \\<le> max (left (ext v1)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "thus \"\\<parallel>len v1 ( ts) c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  min (right (ext v1)) (right (space ts v c))\n  \\<le> max (left (ext v1)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. min (right (ext v1)) (right (space ts v c))\n    \\<le> max (left (ext v1)) (left (space ts v c)) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "have f1: \n          \" \\<not> max (left (ext v)) (left (space ts v c)) \n            \\<le> min (right (ext v1)) (right (space ts v c)) \n          \\<or> \n              min (right (ext v1)) (right (space ts v c)) \n            = max (left (ext v)) (left (space ts v c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> max (left (ext v)) (left (space ts v c))\n           \\<le> min (right (ext v1)) (right (space ts v c)) \\<or>\n    min (right (ext v1)) (right (space ts v c)) =\n    max (left (ext v)) (left (space ts v c))", "by (metis antisym_conv left_geq_right left_len_eq)"], ["proof (state)\nthis:\n  \\<not> max (left (ext v)) (left (space ts v c))\n         \\<le> min (right (ext v1)) (right (space ts v c)) \\<or>\n  min (right (ext v1)) (right (space ts v c)) =\n  max (left (ext v)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. min (right (ext v1)) (right (space ts v c))\n    \\<le> max (left (ext v1)) (left (space ts v c)) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "have \n          \"\\<And>r. \\<not> left (ext v1) \\<le> r \n             \\<or> \\<not> left (space ts v c) \\<le> r \n             \\<or> max (left (ext v)) (left (space ts v c)) \\<le> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<not> left (ext v1) \\<le> r \\<or>\n       \\<not> left (space ts v c) \\<le> r \\<or>\n       max (left (ext v)) (left (space ts v c)) \\<le> r", "using left_len_eq"], ["proof (prove)\nusing this:\n  max (left (ext v)) (left (space ts v c)) =\n  max (left (ext v1)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<not> left (ext v1) \\<le> r \\<or>\n       \\<not> left (space ts v c) \\<le> r \\<or>\n       max (left (ext v)) (left (space ts v c)) \\<le> r", "by auto"], ["proof (state)\nthis:\n  \\<not> left (ext v1) \\<le> ?r \\<or>\n  \\<not> left (space ts v c) \\<le> ?r \\<or>\n  max (left (ext v)) (left (space ts v c)) \\<le> ?r\n\ngoal (1 subgoal):\n 1. min (right (ext v1)) (right (space ts v c))\n    \\<le> max (left (ext v1)) (left (space ts v c)) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "then"], ["proof (chain)\npicking this:\n  \\<not> left (ext v1) \\<le> ?r \\<or>\n  \\<not> left (space ts v c) \\<le> ?r \\<or>\n  max (left (ext v)) (left (space ts v c)) \\<le> ?r", "have \n          \"  min (right (ext v1)) (right (space ts v c)) \n           = max (left (ext v)) (left (space ts v c))\""], ["proof (prove)\nusing this:\n  \\<not> left (ext v1) \\<le> ?r \\<or>\n  \\<not> left (space ts v c) \\<le> ?r \\<or>\n  max (left (ext v)) (left (space ts v c)) \\<le> ?r\n\ngoal (1 subgoal):\n 1. min (right (ext v1)) (right (space ts v c)) =\n    max (left (ext v)) (left (space ts v c))", "using f1 inside_v left_inside_v1 real_int.left_leq_right"], ["proof (prove)\nusing this:\n  \\<not> left (ext v1) \\<le> ?r \\<or>\n  \\<not> left (space ts v c) \\<le> ?r \\<or>\n  max (left (ext v)) (left (space ts v c)) \\<le> ?r\n  \\<not> max (left (ext v)) (left (space ts v c))\n         \\<le> min (right (ext v1)) (right (space ts v c)) \\<or>\n  min (right (ext v1)) (right (space ts v c)) =\n  max (left (ext v)) (left (space ts v c))\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v1) < left (space ts v c)\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. min (right (ext v1)) (right (space ts v c)) =\n    max (left (ext v)) (left (space ts v c))", "by force"], ["proof (state)\nthis:\n  min (right (ext v1)) (right (space ts v c)) =\n  max (left (ext v)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. min (right (ext v1)) (right (space ts v c))\n    \\<le> max (left (ext v1)) (left (space ts v c)) \\<Longrightarrow>\n    \\<parallel>len v1 ts c\\<parallel> = 0", "then"], ["proof (chain)\npicking this:\n  min (right (ext v1)) (right (space ts v c)) =\n  max (left (ext v)) (left (space ts v c))", "show ?thesis"], ["proof (prove)\nusing this:\n  min (right (ext v1)) (right (space ts v c)) =\n  max (left (ext v)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "using assm left_len_eq len_v len_v1 len_v_empty"], ["proof (prove)\nusing this:\n  min (right (ext v1)) (right (space ts v c)) =\n  max (left (ext v)) (left (space ts v c))\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  max (left (ext v)) (left (space ts v c)) =\n  max (left (ext v1)) (left (space ts v c))\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n  max (left (ext v)) (left (space ts v c)) =\n  min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "by auto"], ["proof (state)\nthis:\n  \\<parallel>len v1 ts c\\<parallel> = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>len v1 ts c\\<parallel> = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>len v1 ts c\\<parallel> = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>len v1 ts c\\<parallel> = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_empty_on_subview2:\n  \"\\<parallel>len v ts c\\<parallel> = 0 \\<and> (v=v1\\<parallel>v2) \\<longrightarrow> \\<parallel>len v2 ts c\\<parallel> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and>\n    v=v1\\<parallel>v2 \\<longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and>\n    v=v1\\<parallel>v2 \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "assume assm:\"\\<parallel>len v ( ts) c\\<parallel> = 0 \\<and> (v=v1\\<parallel>v2)\""], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and>\n    v=v1\\<parallel>v2 \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "then"], ["proof (chain)\npicking this:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2", "have len_v_borders:\"left (len v ( ts) c) = right (len v ( ts) c)\""], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. left (len v ts c) = right (len v ts c)", "by (simp add:real_int.length_zero_iff_borders_eq)"], ["proof (state)\nthis:\n  left (len v ts c) = right (len v ts c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and>\n    v=v1\\<parallel>v2 \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "show \"\\<parallel>len v2 ( ts) c\\<parallel> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v2 ts c\\<parallel> = 0", "proof (cases \"left ((space ts v) c) > right (ext v2)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v2) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0\n 2. \\<not> right (ext v2) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "assume left_outside_v2:\"left ((space ts v) c) > right (ext v2)\""], ["proof (state)\nthis:\n  right (ext v2) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v2) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0\n 2. \\<not> right (ext v2) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "thus \"\\<parallel>len v2 ( ts) c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  right (ext v2) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v2 ts c\\<parallel> = 0", "using Abs_real_int_inverse assm fst_conv hchop_def len_def \n        real_int.length_zero_iff_borders_eq mem_Collect_eq snd_conv space_def"], ["proof (prove)\nusing this:\n  right (ext v2) < left (space ts v c)\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  fst (?x1.0, ?x2.0) = ?x1.0\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  (\\<parallel>?r\\<parallel> = 0) = (left ?r = right ?r)\n  (?a \\<in> Collect ?P) = ?P ?a\n  snd (?x1.0, ?x2.0) = ?x2.0\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v2 ts c\\<parallel> = 0", "by auto"], ["proof (state)\nthis:\n  \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v2) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v2) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "assume left_inside_v2:\"\\<not>left (space ts v c) > right (ext v2)\""], ["proof (state)\nthis:\n  \\<not> right (ext v2) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v2) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "show \"\\<parallel>len v2 ( ts) c\\<parallel> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v2 ts c\\<parallel> = 0", "proof (cases \"left (ext v2) > right (space ts v c)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0\n 2. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "assume right_outside_v2:\"left (ext v2) > right ((space ts v) c)\""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v2)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0\n 2. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "thus \"\\<parallel>len v2 ( ts) c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v2)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v2 ts c\\<parallel> = 0", "using Abs_real_int_inverse assm fst_conv hchop_def len_def \n          real_int.length_zero_iff_borders_eq mem_Collect_eq snd_conv \n          right_outside_v2 space_def"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v2)\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  fst (?x1.0, ?x2.0) = ?x1.0\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  (\\<parallel>?r\\<parallel> = 0) = (left ?r = right ?r)\n  (?a \\<in> Collect ?P) = ?P ?a\n  snd (?x1.0, ?x2.0) = ?x2.0\n  right (space ts v c) < left (ext v2)\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v2 ts c\\<parallel> = 0", "by auto"], ["proof (state)\nthis:\n  \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "assume right_inside_v2:\"\\<not>left (ext v2) > right ((space ts v) c)\""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v2)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "have len_v2:\n        \"len v2 ts c = Abs_real_int (max (left (ext v2)) (left (space ts v c)),\n                                     min (right (ext v2)) (right (space ts v c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c)))", "using left_inside_v2 len_def right_inside_v2 assm hchop_def space_def"], ["proof (prove)\nusing this:\n  \\<not> right (ext v2) < left (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> right (space ts v c) < left (ext v2)\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "from left_inside_v2 and right_inside_v2"], ["proof (chain)\npicking this:\n  \\<not> right (ext v2) < left (space ts v c)\n  \\<not> right (space ts v c) < left (ext v2)", "have inside_v:\n        \"\\<not>left ((space ts v) c) > right (ext v) \\<and> \\<not>left (ext v) > right ((space ts v) c)\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v2) < left (space ts v c)\n  \\<not> right (space ts v c) < left (ext v2)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<and>\n    \\<not> right (space ts v c) < left (ext v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> right (ext v2) < left (space ts v c);\n     \\<not> right (space ts v c) < left (ext v2)\\<rbrakk>\n    \\<Longrightarrow> \\<not> right (ext v) < left (space ts v c) \\<and>\n                      \\<not> right (space ts v c) < left (ext v)", "have \"left (ext v) \\<le> right (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (ext v1)", "using assm view.h_chop_middle1"], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<longrightarrow> left (ext ?v) \\<le> right (ext ?u)\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (ext v1)", "by auto"], ["proof (state)\nthis:\n  left (ext v) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> right (ext v2) < left (space ts v c);\n     \\<not> right (space ts v c) < left (ext v2)\\<rbrakk>\n    \\<Longrightarrow> \\<not> right (ext v) < left (space ts v c) \\<and>\n                      \\<not> right (space ts v c) < left (ext v)", "then"], ["proof (chain)\npicking this:\n  left (ext v) \\<le> right (ext v1)", "show ?thesis"], ["proof (prove)\nusing this:\n  left (ext v) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<and>\n    \\<not> right (space ts v c) < left (ext v)", "using assm left_inside_v2 real_int.rchop_def right_inside_v2 view.hchop_def"], ["proof (prove)\nusing this:\n  left (ext v) \\<le> right (ext v1)\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  \\<not> right (ext v2) < left (space ts v c)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  \\<not> right (space ts v c) < left (ext v2)\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<and>\n    \\<not> right (space ts v c) < left (ext v)", "by force"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "hence len_v:\n        \"len v ts c = Abs_real_int (max (left (ext v)) (left (space ts v c)), \n                                    min (right (ext v)) (right (space ts v c)))\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "by (simp add: len_def)"], ["proof (state)\nthis:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "have less_eq:\n        \"  max (left (ext v)) (left (space ts v c)) \n         \\<le> min (right (ext v)) (right (space ts v c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c))\n    \\<le> min (right (ext v)) (right (space ts v c))", "using inside_v real_int.left_leq_right"], ["proof (prove)\nusing this:\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n  left ?r \\<le> right ?r\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c))\n    \\<le> min (right (ext v)) (right (space ts v c))", "by auto"], ["proof (state)\nthis:\n  max (left (ext v)) (left (space ts v c))\n  \\<le> min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "from len_v"], ["proof (chain)\npicking this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))", "have len_v_empty: \n        \"  max (left (ext v)) (left (space ts v c))\n         = min (right (ext v)) (right (space ts v c))\""], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) =\n    min (right (ext v)) (right (space ts v c))", "using Abs_real_int_inverse Rep_real_int_inverse inside_v"], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  Abs_real_int (Rep_real_int ?x) = ?x\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) =\n    min (right (ext v)) (right (space ts v c))", "using len_v_borders local.less_eq"], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  Abs_real_int (Rep_real_int ?x) = ?x\n  \\<not> right (ext v) < left (space ts v c) \\<and>\n  \\<not> right (space ts v c) < left (ext v)\n  left (len v ts c) = right (len v ts c)\n  max (left (ext v)) (left (space ts v c))\n  \\<le> min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) =\n    min (right (ext v)) (right (space ts v c))", "by auto"], ["proof (state)\nthis:\n  max (left (ext v)) (left (space ts v c)) =\n  min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "have left_len_eq:\n        \"  max (left (ext v)) (left (space ts v c)) \n        \\<le> max (left (ext v2)) (left (space ts v c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c))\n    \\<le> max (left (ext v2)) (left (space ts v c))", "by (metis (no_types, hide_lams) assm left_leq_right max.mono order_refl\n            real_int.rchop_def view.hchop_def)"], ["proof (state)\nthis:\n  max (left (ext v)) (left (space ts v c))\n  \\<le> max (left (ext v2)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "have right_len_leq:\n        \"  min (right (ext v)) (right (space ts v c)) \n         = min (right (ext v2)) (right (space ts v c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (right (ext v)) (right (space ts v c)) =\n    min (right (ext v2)) (right (space ts v c))", "using assm real_int.rchop_def view.hchop_def"], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. min (right (ext v)) (right (space ts v c)) =\n    min (right (ext v2)) (right (space ts v c))", "by auto"], ["proof (state)\nthis:\n  min (right (ext v)) (right (space ts v c)) =\n  min (right (ext v2)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "hence left_geq_right:\n        \" max (left (ext v2)) (left (space ts v c)) \n        \\<ge> min (right (ext v2)) (right (space ts v c))\""], ["proof (prove)\nusing this:\n  min (right (ext v)) (right (space ts v c)) =\n  min (right (ext v2)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. min (right (ext v2)) (right (space ts v c))\n    \\<le> max (left (ext v2)) (left (space ts v c))", "using left_len_eq len_v_empty"], ["proof (prove)\nusing this:\n  min (right (ext v)) (right (space ts v c)) =\n  min (right (ext v2)) (right (space ts v c))\n  max (left (ext v)) (left (space ts v c))\n  \\<le> max (left (ext v2)) (left (space ts v c))\n  max (left (ext v)) (left (space ts v c)) =\n  min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. min (right (ext v2)) (right (space ts v c))\n    \\<le> max (left (ext v2)) (left (space ts v c))", "by auto"], ["proof (state)\nthis:\n  min (right (ext v2)) (right (space ts v c))\n  \\<le> max (left (ext v2)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "then"], ["proof (chain)\npicking this:\n  min (right (ext v2)) (right (space ts v c))\n  \\<le> max (left (ext v2)) (left (space ts v c))", "have \n        \"  max (left (ext v2)) (left (space ts v2 c)) \n         \\<ge> min (right (ext v2)) (right (space ts v2 c))\""], ["proof (prove)\nusing this:\n  min (right (ext v2)) (right (space ts v c))\n  \\<le> max (left (ext v2)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. min (right (ext v2)) (right (space ts v2 c))\n    \\<le> max (left (ext v2)) (left (space ts v2 c))", "using assm hchop_def space_def"], ["proof (prove)\nusing this:\n  min (right (ext v2)) (right (space ts v c))\n  \\<le> max (left (ext v2)) (left (space ts v c))\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. min (right (ext v2)) (right (space ts v2 c))\n    \\<le> max (left (ext v2)) (left (space ts v2 c))", "by auto"], ["proof (state)\nthis:\n  min (right (ext v2)) (right (space ts v2 c))\n  \\<le> max (left (ext v2)) (left (space ts v2 c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "then"], ["proof (chain)\npicking this:\n  min (right (ext v2)) (right (space ts v2 c))\n  \\<le> max (left (ext v2)) (left (space ts v2 c))", "have \n        \"  max (left (ext v2)) (left (space ts v2 c))\n         = min (right (ext v2)) (right (space ts v2 c))\""], ["proof (prove)\nusing this:\n  min (right (ext v2)) (right (space ts v2 c))\n  \\<le> max (left (ext v2)) (left (space ts v2 c))\n\ngoal (1 subgoal):\n 1. max (left (ext v2)) (left (space ts v2 c)) =\n    min (right (ext v2)) (right (space ts v2 c))", "by (metis (no_types, hide_lams) antisym_conv assm hchop_def len_v_empty\n            max_def min.bounded_iff not_le space_def right_inside_v2 right_len_leq\n            view.h_chop_middle2)"], ["proof (state)\nthis:\n  max (left (ext v2)) (left (space ts v2 c)) =\n  min (right (ext v2)) (right (space ts v2 c))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2) \\<Longrightarrow>\n    \\<parallel>len v2 ts c\\<parallel> = 0", "thus \"\\<parallel>len v2 ( ts) c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  max (left (ext v2)) (left (space ts v2 c)) =\n  min (right (ext v2)) (right (space ts v2 c))\n\ngoal (1 subgoal):\n 1. \\<parallel>len v2 ts c\\<parallel> = 0", "by (metis (no_types, hide_lams)  assm hchop_def len_v len_v2 len_v_empty\n            space_def right_len_leq)"], ["proof (state)\nthis:\n  \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_hchop_add:\n  \"(v=v1\\<parallel>v2) \\<longrightarrow> \\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "assume chop:\"v=v1\\<parallel>v2\""], ["proof (state)\nthis:\n  v=v1\\<parallel>v2\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "show \"\\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "proof (cases \"left ((space ts v) c) > right (ext v)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "assume outside_right:\"left (space ts v c) > right (ext v)\""], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence len_zero:\"\\<parallel>len v ( ts) c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0", "by (simp add: Abs_real_int_inverse  len_def real_int.length_zero_iff_borders_eq\n          snd_eqD)"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> = 0\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "with chop"], ["proof (chain)\npicking this:\n  v=v1\\<parallel>v2\n  \\<parallel>len v ts c\\<parallel> = 0", "have \"\\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2\n  \\<parallel>len v ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel> =\n    0", "by (metis add_cancel_right_left len_empty_on_subview1 len_empty_on_subview2)"], ["proof (state)\nthis:\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal (2 subgoals):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "using len_zero"], ["proof (prove)\nusing this:\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel> = 0\n  \\<parallel>len v ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "by (simp)"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> =\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "assume inside_right:\"\\<not>left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v) < left (space ts v c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "show \"\\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "proof (cases \" left (ext v) > right ((space ts v) c) \")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "assume outside_left:\" left (ext v) > right (space ts v c) \""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence len_zero:\"\\<parallel>len v ( ts) c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0", "by (simp add: Abs_real_int_inverse len_def real_int.length_zero_iff_borders_eq\n            snd_eqD)"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> = 0\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "with chop"], ["proof (chain)\npicking this:\n  v=v1\\<parallel>v2\n  \\<parallel>len v ts c\\<parallel> = 0", "have \"\\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2\n  \\<parallel>len v ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel> =\n    0", "by (metis add_cancel_right_left len_empty_on_subview1 len_empty_on_subview2)"], ["proof (state)\nthis:\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal (2 subgoals):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "using len_zero"], ["proof (prove)\nusing this:\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel> = 0\n  \\<parallel>len v ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "by (simp )"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> =\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "assume inside_left:\" \\<not>left (ext v) > right ((space ts v) c) \""], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence len_def_v:\"len v ( ts) c = \n                Abs_real_int ((max (left (ext v)) (left ((space ts v) c))), \n                              min (right (ext v)) (right ((space ts v) c)))\""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "using len_def inside_left inside_right"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "by simp"], ["proof (state)\nthis:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "from inside_left and inside_right"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)", "have \n        len_in_type:\"(max (left (ext v)) (left ((space ts v) c)), \n                      min (right (ext v)) (right ((space ts v) c))) \n                     \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using CollectD CollectI Rep_real_int fst_conv snd_conv"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  ?a \\<in> {x. ?P x} \\<Longrightarrow> ?P ?a\n  ?P ?a \\<Longrightarrow> ?a \\<in> {x. ?P x}\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  fst (?x1.0, ?x2.0) = ?x1.0\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. (max (left (ext v)) (left (space ts v c)),\n     min (right (ext v)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "show \"\\<parallel>len v ( ts) c\\<parallel> = \\<parallel>len v1 ( ts) c\\<parallel> + \\<parallel>len v2 ( ts) c\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "proof (cases \"right (len v ( ts) c) < right (ext v1)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "assume inside_v1:\"right (len v ( ts) c) < right (ext v1)\""], ["proof (state)\nthis:\n  right (len v ts c) < right (ext v1)\n\ngoal (2 subgoals):\n 1. right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "then"], ["proof (chain)\npicking this:\n  right (len v ts c) < right (ext v1)", "have min_less_v1:\n          \"min (right (ext v)) (right (space ts v c)) < right (ext v1)\""], ["proof (prove)\nusing this:\n  right (len v ts c) < right (ext v1)\n\ngoal (1 subgoal):\n 1. min (right (ext v)) (right (space ts v c)) < right (ext v1)", "using Abs_real_int_inverse len_in_type len_def_v"], ["proof (prove)\nusing this:\n  right (len v ts c) < right (ext v1)\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. min (right (ext v)) (right (space ts v c)) < right (ext v1)", "by auto"], ["proof (state)\nthis:\n  min (right (ext v)) (right (space ts v c)) < right (ext v1)\n\ngoal (2 subgoals):\n 1. right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence outside_v2:\"right ((space ts v) c) < left (ext v2)\""], ["proof (prove)\nusing this:\n  min (right (ext v)) (right (space ts v c)) < right (ext v1)\n\ngoal (1 subgoal):\n 1. right (space ts v c) < left (ext v2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. min (right (ext v)) (right (space ts v c))\n    < right (ext v1) \\<Longrightarrow>\n    right (space ts v c) < left (ext v2)", "have \"left (ext v2) = right (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v2) = right (ext v1)", "using chop real_int.rchop_def view.hchop_def"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. left (ext v2) = right (ext v1)", "by force"], ["proof (state)\nthis:\n  left (ext v2) = right (ext v1)\n\ngoal (1 subgoal):\n 1. min (right (ext v)) (right (space ts v c))\n    < right (ext v1) \\<Longrightarrow>\n    right (space ts v c) < left (ext v2)", "then"], ["proof (chain)\npicking this:\n  left (ext v2) = right (ext v1)", "show ?thesis"], ["proof (prove)\nusing this:\n  left (ext v2) = right (ext v1)\n\ngoal (1 subgoal):\n 1. right (space ts v c) < left (ext v2)", "by (metis (no_types) chop dual_order.order_iff_strict\n                min_less_iff_conj min_less_v1 not_less view.h_chop_middle2)"], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v2)\n\ngoal (2 subgoals):\n 1. right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence len_v2_0:\"\\<parallel>len v2 ( ts) c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v2)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v2 ts c\\<parallel> = 0", "using  Abs_real_int_inverse len_def \n            real_int.length_zero_iff_borders_eq outside_v2  snd_eqD Rep_real_int_inverse\n            chop hchop_def prod.collapse real_int.rchop_def real_int.chop_singleton_right\n            space_def"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v2)\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  (\\<parallel>?r\\<parallel> = 0) = (left ?r = right ?r)\n  right (space ts v c) < left (ext v2)\n  snd (?x, ?y) = ?a \\<Longrightarrow> ?y = ?a\n  Abs_real_int (Rep_real_int ?x) = ?x\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  (fst ?prod, snd ?prod) = ?prod\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  \\<forall>r. \\<exists>s. R_Chop(r,r,s)\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v2 ts c\\<parallel> = 0", "by auto"], ["proof (state)\nthis:\n  \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal (2 subgoals):\n 1. right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have inside_left_v1:\"  \\<not>left (ext v1) > right ((space ts v) c) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1)", "using chop hchop_def inside_left real_int.rchop_def"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<not> right (space ts v c) < left (ext v)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1)", "by auto"], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v1)\n\ngoal (2 subgoals):\n 1. right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have inside_right_v1:\"\\<not>left ((space ts v) c) > right (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> right (ext v1) < left (space ts v c)", "by (meson inside_right less_trans min_less_iff_disj min_less_v1 \n              order.asym space_nonempty)"], ["proof (state)\nthis:\n  \\<not> right (ext v1) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have len1_def:\"len v1 ( ts) c = \n                Abs_real_int ((max (left (ext v1)) (left ((space ts v) c))), \n                              min (right (ext v1)) (right ((space ts v) c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c)))", "using len_def inside_left_v1 inside_right_v1 chop hchop_def space_def"], ["proof (prove)\nusing this:\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> right (space ts v c) < left (ext v1)\n  \\<not> right (ext v1) < left (space ts v c)\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n\ngoal (2 subgoals):\n 1. right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence \"\\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel>\""], ["proof (prove)\nusing this:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c))) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel>", "have \"right (ext v1) \\<le> right (ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (ext v1) \\<le> right (ext v2)", "using chop left_leq_right real_int.rchop_def view.hchop_def"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2\n  left ?r \\<le> right ?r\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. right (ext v1) \\<le> right (ext v2)", "by auto"], ["proof (state)\nthis:\n  right (ext v1) \\<le> right (ext v2)\n\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c))) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel>", "then"], ["proof (chain)\npicking this:\n  right (ext v1) \\<le> right (ext v2)", "show ?thesis"], ["proof (prove)\nusing this:\n  right (ext v1) \\<le> right (ext v2)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel>", "using chop len1_def len_def_v min_less_v1 real_int.rchop_def view.hchop_def"], ["proof (prove)\nusing this:\n  right (ext v1) \\<le> right (ext v2)\n  v=v1\\<parallel>v2\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  min (right (ext v)) (right (space ts v c)) < right (ext v1)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel>", "by auto"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel>\n\ngoal (2 subgoals):\n 1. right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "thus \"\\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\""], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "using len_v2_0"], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel>\n  \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "by (simp)"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> =\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "assume r_inside_v2:\"\\<not> right (len v ( ts) c) < right (ext v1)\""], ["proof (state)\nthis:\n  \\<not> right (len v ts c) < right (ext v1)\n\ngoal (1 subgoal):\n 1. \\<not> right (len v ts c) < right (ext v1) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "show \"\\<parallel>len v ( ts) c\\<parallel> = \\<parallel>len v1 ( ts) c\\<parallel> + \\<parallel>len v2 ( ts) c\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "proof (cases \"left (len v ( ts) c) > left (ext v2)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "assume inside_v2:\"left (len v ( ts) c) > left (ext v2)\""], ["proof (state)\nthis:\n  left (ext v2) < left (len v ts c)\n\ngoal (2 subgoals):\n 1. left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence max_geq_v1:\"max (left (ext v)) (left ((space ts v) c)) > left (ext v2)\""], ["proof (prove)\nusing this:\n  left (ext v2) < left (len v ts c)\n\ngoal (1 subgoal):\n 1. left (ext v2) < max (left (ext v)) (left (space ts v c))", "using Abs_real_int_inverse len_in_type len_def"], ["proof (prove)\nusing this:\n  left (ext v2) < left (len v ts c)\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n\ngoal (1 subgoal):\n 1. left (ext v2) < max (left (ext v)) (left (space ts v c))", "by (simp )"], ["proof (state)\nthis:\n  left (ext v2) < max (left (ext v)) (left (space ts v c))\n\ngoal (2 subgoals):\n 1. left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence outside_v1:\"left ((space ts v) c) > right (ext v1)\""], ["proof (prove)\nusing this:\n  left (ext v2) < max (left (ext v)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. right (ext v1) < left (space ts v c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. left (ext v2)\n    < max (left (ext v)) (left (space ts v c)) \\<Longrightarrow>\n    right (ext v1) < left (space ts v c)", "have \"left (ext v) \\<le> right (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (ext v1)", "by (meson chop view.h_chop_middle1)"], ["proof (state)\nthis:\n  left (ext v) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. left (ext v2)\n    < max (left (ext v)) (left (space ts v c)) \\<Longrightarrow>\n    right (ext v1) < left (space ts v c)", "then"], ["proof (chain)\npicking this:\n  left (ext v) \\<le> right (ext v1)", "show ?thesis"], ["proof (prove)\nusing this:\n  left (ext v) \\<le> right (ext v1)\n\ngoal (1 subgoal):\n 1. right (ext v1) < left (space ts v c)", "using chop max_geq_v1 real_int.rchop_def view.hchop_def"], ["proof (prove)\nusing this:\n  left (ext v) \\<le> right (ext v1)\n  v=v1\\<parallel>v2\n  left (ext v2) < max (left (ext v)) (left (space ts v c))\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. right (ext v1) < left (space ts v c)", "by fastforce"], ["proof (state)\nthis:\n  right (ext v1) < left (space ts v c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  right (ext v1) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence len_v1_0:\"\\<parallel>len v1 ts c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  right (ext v1) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "using Abs_real_int_inverse len_def real_int.length_zero_iff_borders_eq\n              outside_v1 snd_eqD Rep_real_int_inverse chop hchop_def prod.collapse\n              real_int.rchop_def real_int.chop_singleton_right space_def"], ["proof (prove)\nusing this:\n  right (ext v1) < left (space ts v c)\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  (\\<parallel>?r\\<parallel> = 0) = (left ?r = right ?r)\n  right (ext v1) < left (space ts v c)\n  snd (?x, ?y) = ?a \\<Longrightarrow> ?y = ?a\n  Abs_real_int (Rep_real_int ?x) = ?x\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  (fst ?prod, snd ?prod) = ?prod\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  \\<forall>r. \\<exists>s. R_Chop(r,r,s)\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "by auto"], ["proof (state)\nthis:\n  \\<parallel>len v1 ts c\\<parallel> = 0\n\ngoal (2 subgoals):\n 1. left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have inside_left_v2:\"  \\<not>left (ext v2) > right ((space ts v) c) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2)", "by (meson inside_left less_max_iff_disj less_trans max_geq_v1 order.asym\n                space_nonempty)"], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v2)\n\ngoal (2 subgoals):\n 1. left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have inside_right_v2:\"\\<not>left ((space ts v) c) > right (ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> right (ext v2) < left (space ts v c)", "using chop hchop_def inside_right real_int.rchop_def"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<not> right (ext v) < left (space ts v c)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v2) < left (space ts v c)", "by auto"], ["proof (state)\nthis:\n  \\<not> right (ext v2) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have len2_def:\"len v2 ( ts) c = \n                Abs_real_int ((max (left (ext v2)) (left ((space ts v) c))), \n                              min (right (ext v2)) (right ((space ts v) c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c)))", "using len_def inside_left_v2 inside_right_v2 hchop_def chop space_def"], ["proof (prove)\nusing this:\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<not> right (space ts v c) < left (ext v2)\n  \\<not> right (ext v2) < left (space ts v c)\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  v=v1\\<parallel>v2\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n\ngoal (2 subgoals):\n 1. left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence \"\\<parallel>len v ts c\\<parallel> = \\<parallel>len v2 ts c\\<parallel>\""], ["proof (prove)\nusing this:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = \\<parallel>len v2 ts c\\<parallel>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c))) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> = \\<parallel>len v2 ts c\\<parallel>", "have \"left (ext v) \\<le> left (ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v) \\<le> left (ext v2)", "by (metis (no_types) chop real_int.rchop_def view.h_chop_middle1\n                  view.hchop_def)"], ["proof (state)\nthis:\n  left (ext v) \\<le> left (ext v2)\n\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c))) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> = \\<parallel>len v2 ts c\\<parallel>", "then"], ["proof (chain)\npicking this:\n  left (ext v) \\<le> left (ext v2)", "show ?thesis"], ["proof (prove)\nusing this:\n  left (ext v) \\<le> left (ext v2)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = \\<parallel>len v2 ts c\\<parallel>", "using chop inside_left inside_right len2_def len_def outside_v1\n                real_int.rchop_def view.hchop_def"], ["proof (prove)\nusing this:\n  left (ext v) \\<le> left (ext v2)\n  v=v1\\<parallel>v2\n  \\<not> right (space ts v c) < left (ext v)\n  \\<not> right (ext v) < left (space ts v c)\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  right (ext v1) < left (space ts v c)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = \\<parallel>len v2 ts c\\<parallel>", "by auto"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> = \\<parallel>len v2 ts c\\<parallel>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> = \\<parallel>len v2 ts c\\<parallel>\n\ngoal (2 subgoals):\n 1. left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n 2. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "thus \"\\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\""], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = \\<parallel>len v2 ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "using len_v1_0"], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = \\<parallel>len v2 ts c\\<parallel>\n  \\<parallel>len v1 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "by (simp)"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> =\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "assume l_inside_v1: \"\\<not>left (len v ( ts) c) > left (ext v2)\""], ["proof (state)\nthis:\n  \\<not> left (ext v2) < left (len v ts c)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have inside_left_v1:\"  \\<not>left (ext v1) > right ((space ts v) c) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1)", "using chop hchop_def inside_left real_int.rchop_def"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<not> right (space ts v c) < left (ext v)\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v1)", "by auto"], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v1)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have inside_right_v1:\"\\<not>left ((space ts v) c) > right (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> right (ext v1) < left (space ts v c)", "using Abs_real_int_inverse chop hchop_def l_inside_v1 len_in_type\n              len_def real_int.rchop_def"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<not> left (ext v2) < left (len v ts c)\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v1) < left (space ts v c)", "by auto"], ["proof (state)\nthis:\n  \\<not> right (ext v1) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence len1_def:\"len v1 ( ts) c = \n                Abs_real_int ((max (left (ext v1)) (left ((space ts v) c))), \n                              min (right (ext v1)) (right ((space ts v) c)))\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v1) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c)))", "using inside_left_v1 inside_right_v1 len_def chop hchop_def space_def"], ["proof (prove)\nusing this:\n  \\<not> right (ext v1) < left (space ts v c)\n  \\<not> right (space ts v c) < left (ext v1)\n  \\<not> right (ext v1) < left (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v1 ts c =\n    Abs_real_int\n     (max (left (ext v1)) (left (space ts v c)),\n      min (right (ext v1)) (right (space ts v c)))", "by (simp )"], ["proof (state)\nthis:\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "from inside_left_v1 and inside_right_v1"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v1)\n  \\<not> right (ext v1) < left (space ts v c)", "have len1_in_type:\n            \"(max (left (ext v1)) (left (space ts v c)), \n              min (right (ext v1)) (right (space ts v c))) \n            \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v1)\n  \\<not> right (ext v1) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. (max (left (ext v1)) (left (space ts v c)),\n     min (right (ext v1)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using CollectD CollectI Rep_real_int fst_conv snd_conv"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v1)\n  \\<not> right (ext v1) < left (space ts v c)\n  ?a \\<in> {x. ?P x} \\<Longrightarrow> ?P ?a\n  ?P ?a \\<Longrightarrow> ?a \\<in> {x. ?P x}\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  fst (?x1.0, ?x2.0) = ?x1.0\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. (max (left (ext v1)) (left (space ts v c)),\n     min (right (ext v1)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have inside_left_v2:\"  \\<not>left (ext v2) > right ((space ts v) c) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2)", "using real_int.rchop_def hchop_def inside_left chop Abs_real_int_inverse \n              len_def_v len_in_type r_inside_v2 snd_conv"], ["proof (prove)\nusing this:\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<not> right (space ts v c) < left (ext v)\n  v=v1\\<parallel>v2\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  \\<not> right (len v ts c) < right (ext v1)\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. \\<not> right (space ts v c) < left (ext v2)", "by auto"], ["proof (state)\nthis:\n  \\<not> right (space ts v c) < left (ext v2)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have inside_right_v2:\"\\<not>left ((space ts v) c) > right (ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> right (ext v2) < left (space ts v c)", "using Abs_real_int_inverse chop hchop_def l_inside_v1 len_in_type len_def\n              real_int.rchop_def"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  \\<not> left (ext v2) < left (len v ts c)\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. \\<not> right (ext v2) < left (space ts v c)", "by auto"], ["proof (state)\nthis:\n  \\<not> right (ext v2) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "hence len2_def:\"len v2 ts c = \n                Abs_real_int (max (left (ext v2)) (left (space ts v c)), \n                              min (right (ext v2)) (right (space ts v c)))\""], ["proof (prove)\nusing this:\n  \\<not> right (ext v2) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c)))", "using inside_left_v2 inside_right_v2 len_def chop hchop_def space_def"], ["proof (prove)\nusing this:\n  \\<not> right (ext v2) < left (space ts v c)\n  \\<not> right (space ts v c) < left (ext v2)\n  \\<not> right (ext v2) < left (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. len v2 ts c =\n    Abs_real_int\n     (max (left (ext v2)) (left (space ts v c)),\n      min (right (ext v2)) (right (space ts v c)))", "by (auto )"], ["proof (state)\nthis:\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "from inside_left_v2 and inside_right_v2"], ["proof (chain)\npicking this:\n  \\<not> right (space ts v c) < left (ext v2)\n  \\<not> right (ext v2) < left (space ts v c)", "have len2_in_type:\n            \"(max (left (ext v2)) (left (space ts v c)), \n              min (right (ext v2)) (right (space ts v c))) \n            \\<in> {r :: real*real . fst r \\<le> snd r}\""], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v2)\n  \\<not> right (ext v2) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. (max (left (ext v2)) (left (space ts v c)),\n     min (right (ext v2)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "using CollectD CollectI Rep_real_int fst_conv snd_conv"], ["proof (prove)\nusing this:\n  \\<not> right (space ts v c) < left (ext v2)\n  \\<not> right (ext v2) < left (space ts v c)\n  ?a \\<in> {x. ?P x} \\<Longrightarrow> ?P ?a\n  ?P ?a \\<Longrightarrow> ?a \\<in> {x. ?P x}\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  fst (?x1.0, ?x2.0) = ?x1.0\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. (max (left (ext v2)) (left (space ts v c)),\n     min (right (ext v2)) (right (space ts v c)))\n    \\<in> {r. fst r \\<le> snd r}", "by auto"], ["proof (state)\nthis:\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have left_v_v1:\"left (ext v) = left (ext v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v) = left (ext v1)", "using chop hchop_def real_int.rchop_def"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. left (ext v) = left (ext v1)", "by auto"], ["proof (state)\nthis:\n  left (ext v) = left (ext v1)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have max: \n               \"max (left (ext v)) (left (space ts v c)) = \n                max (left (ext v1)) (left (space ts v c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) =\n    max (left (ext v1)) (left (space ts v c))", "using left_v_v1"], ["proof (prove)\nusing this:\n  left (ext v) = left (ext v1)\n\ngoal (1 subgoal):\n 1. max (left (ext v)) (left (space ts v c)) =\n    max (left (ext v1)) (left (space ts v c))", "by auto"], ["proof (state)\nthis:\n  max (left (ext v)) (left (space ts v c)) =\n  max (left (ext v1)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have right_v_v2:\"right (ext v) = right (ext v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (ext v) = right (ext v2)", "using chop hchop_def real_int.rchop_def"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. right (ext v) = right (ext v2)", "by auto"], ["proof (state)\nthis:\n  right (ext v) = right (ext v2)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have min: \"(min (right (ext v)) (right ((space ts v) c))) = \n                (min (right (ext v2)) (right ((space ts v) c)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (right (ext v)) (right (space ts v c)) =\n    min (right (ext v2)) (right (space ts v c))", "using right_v_v2"], ["proof (prove)\nusing this:\n  right (ext v) = right (ext v2)\n\ngoal (1 subgoal):\n 1. min (right (ext v)) (right (space ts v c)) =\n    min (right (ext v2)) (right (space ts v c))", "by auto"], ["proof (state)\nthis:\n  min (right (ext v)) (right (space ts v c)) =\n  min (right (ext v2)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "from max"], ["proof (chain)\npicking this:\n  max (left (ext v)) (left (space ts v c)) =\n  max (left (ext v1)) (left (space ts v c))", "have left_len_v1_v:\"left (len v ( ts) c) = left (len v1 ( ts) c)\""], ["proof (prove)\nusing this:\n  max (left (ext v)) (left (space ts v c)) =\n  max (left (ext v1)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. left (len v ts c) = left (len v1 ts c)", "using Abs_real_int_inverse fst_conv len1_def len1_in_type\n              len_def_v len_in_type"], ["proof (prove)\nusing this:\n  max (left (ext v)) (left (space ts v c)) =\n  max (left (ext v1)) (left (space ts v c))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  fst (?x1.0, ?x2.0) = ?x1.0\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. left (len v ts c) = left (len v1 ts c)", "by auto"], ["proof (state)\nthis:\n  left (len v ts c) = left (len v1 ts c)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "from min"], ["proof (chain)\npicking this:\n  min (right (ext v)) (right (space ts v c)) =\n  min (right (ext v2)) (right (space ts v c))", "have right_len_v2_v:\"right (len v ( ts) c) = right (len v2 ( ts) c)\""], ["proof (prove)\nusing this:\n  min (right (ext v)) (right (space ts v c)) =\n  min (right (ext v2)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. right (len v ts c) = right (len v2 ts c)", "using Abs_real_int_inverse fst_conv len1_def len2_in_type len_def_v \n              len_in_type"], ["proof (prove)\nusing this:\n  min (right (ext v)) (right (space ts v c)) =\n  min (right (ext v2)) (right (space ts v c))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  fst (?x1.0, ?x2.0) = ?x1.0\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. right (len v ts c) = right (len v2 ts c)", "using len2_def snd_eqD"], ["proof (prove)\nusing this:\n  min (right (ext v)) (right (space ts v c)) =\n  min (right (ext v2)) (right (space ts v c))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  fst (?x1.0, ?x2.0) = ?x1.0\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  (max (left (ext v)) (left (space ts v c)),\n   min (right (ext v)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n  snd (?x, ?y) = ?a \\<Longrightarrow> ?y = ?a\n\ngoal (1 subgoal):\n 1. right (len v ts c) = right (len v2 ts c)", "by auto"], ["proof (state)\nthis:\n  right (len v ts c) = right (len v2 ts c)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "have \"right (len v1 ( ts) c) = left (len v2 ( ts) c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v1 ts c) = left (len v2 ts c)", "using Abs_real_int_inverse chop hchop_def len1_def len1_in_type len2_def\n              len2_in_type real_int.rchop_def"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  v=v1\\<parallel>v2\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  len v1 ts c =\n  Abs_real_int\n   (max (left (ext v1)) (left (space ts v c)),\n    min (right (ext v1)) (right (space ts v c)))\n  (max (left (ext v1)) (left (space ts v c)),\n   min (right (ext v1)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  len v2 ts c =\n  Abs_real_int\n   (max (left (ext v2)) (left (space ts v c)),\n    min (right (ext v2)) (right (space ts v c)))\n  (max (left (ext v2)) (left (space ts v c)),\n   min (right (ext v2)) (right (space ts v c)))\n  \\<in> {r. fst r \\<le> snd r}\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n\ngoal (1 subgoal):\n 1. right (len v1 ts c) = left (len v2 ts c)", "by auto"], ["proof (state)\nthis:\n  right (len v1 ts c) = left (len v2 ts c)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v2) < left (len v ts c) \\<Longrightarrow>\n    \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "thus \"\\<parallel>len v ts c\\<parallel> = \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\""], ["proof (prove)\nusing this:\n  right (len v1 ts c) = left (len v2 ts c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "using left_len_v1_v real_int.consec_add right_len_v2_v"], ["proof (prove)\nusing this:\n  right (len v1 ts c) = left (len v2 ts c)\n  left (len v ts c) = left (len v1 ts c)\n  left ?r = left ?s \\<and>\n  right ?r = right ?t \\<and> right ?s = left ?t \\<Longrightarrow>\n  \\<parallel>?r\\<parallel> =\n  \\<parallel>?s\\<parallel> + \\<parallel>?t\\<parallel>\n  right (len v ts c) = right (len v2 ts c)\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> =\n    \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>", "by simp"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> =\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> =\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> =\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> =\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> =\n  \\<parallel>len v1 ts c\\<parallel> + \\<parallel>len v2 ts c\\<parallel>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_non_empty_inside:\n \"\\<parallel>len v ( ts) c\\<parallel> > 0 \n  \\<longrightarrow> left (space ts v c) < right (ext v) \\<and> right (space ts v c) > left (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < \\<parallel>len v ts c\\<parallel> \\<longrightarrow>\n    left (space ts v c) < right (ext v) \\<and>\n    left (ext v) < right (space ts v c)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < \\<parallel>len v ts c\\<parallel> \\<Longrightarrow>\n    left (space ts v c) < right (ext v) \\<and>\n    left (ext v) < right (space ts v c)", "assume assm: \"\\<parallel>len v ( ts) c\\<parallel> > 0\""], ["proof (state)\nthis:\n  0 < \\<parallel>len v ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>len v ts c\\<parallel> \\<Longrightarrow>\n    left (space ts v c) < right (ext v) \\<and>\n    left (ext v) < right (space ts v c)", "show \"left ((space ts v) c) < right (ext v) \\<and> right ((space ts v) c) > left (ext v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (space ts v c) < right (ext v) \\<and>\n    left (ext v) < right (space ts v c)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (left (space ts v c) < right (ext v) \\<and>\n            left (ext v) < right (space ts v c)) \\<Longrightarrow>\n    False", "assume \"\\<not>(left ((space ts v) c) < right (ext v) \n              \\<and> right ((space ts v) c) > left (ext v))\""], ["proof (state)\nthis:\n  \\<not> (left (space ts v c) < right (ext v) \\<and>\n          left (ext v) < right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> (left (space ts v c) < right (ext v) \\<and>\n            left (ext v) < right (space ts v c)) \\<Longrightarrow>\n    False", "hence \"\\<not>left ((space ts v) c) < right (ext v) \n          \\<or> \\<not>right ((space ts v) c) > left (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> (left (space ts v c) < right (ext v) \\<and>\n          left (ext v) < right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<not> left (space ts v c) < right (ext v) \\<or>\n    \\<not> left (ext v) < right (space ts v c)", "by best"], ["proof (state)\nthis:\n  \\<not> left (space ts v c) < right (ext v) \\<or>\n  \\<not> left (ext v) < right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> (left (space ts v c) < right (ext v) \\<and>\n            left (ext v) < right (space ts v c)) \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  \\<not> left (space ts v c) < right (ext v) \\<or>\n  \\<not> left (ext v) < right (space ts v c)\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> left (space ts v c) < right (ext v) \\<Longrightarrow> False\n 2. \\<not> left (ext v) < right (space ts v c) \\<Longrightarrow> False", "assume \"\\<not>left ((space ts v) c) < right (ext v)\""], ["proof (state)\nthis:\n  \\<not> left (space ts v c) < right (ext v)\n\ngoal (2 subgoals):\n 1. \\<not> left (space ts v c) < right (ext v) \\<Longrightarrow> False\n 2. \\<not> left (ext v) < right (space ts v c) \\<Longrightarrow> False", "hence \"(left ((space ts v) c) = right (ext v)) \n            \\<or> left ((space ts v) c) > right (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> left (space ts v c) < right (ext v)\n\ngoal (1 subgoal):\n 1. left (space ts v c) = right (ext v) \\<or>\n    right (ext v) < left (space ts v c)", "by auto"], ["proof (state)\nthis:\n  left (space ts v c) = right (ext v) \\<or>\n  right (ext v) < left (space ts v c)\n\ngoal (2 subgoals):\n 1. \\<not> left (space ts v c) < right (ext v) \\<Longrightarrow> False\n 2. \\<not> left (ext v) < right (space ts v c) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  left (space ts v c) = right (ext v) \\<or>\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. left (space ts v c) = right (ext v) \\<Longrightarrow> False\n 2. right (ext v) < left (space ts v c) \\<Longrightarrow> False", "assume left_eq:\"left ((space ts v) c) = right (ext v)\""], ["proof (state)\nthis:\n  left (space ts v c) = right (ext v)\n\ngoal (2 subgoals):\n 1. left (space ts v c) = right (ext v) \\<Longrightarrow> False\n 2. right (ext v) < left (space ts v c) \\<Longrightarrow> False", "hence inside_left:\"right ((space ts v) c) \\<ge> left (ext v)\""], ["proof (prove)\nusing this:\n  left (space ts v c) = right (ext v)\n\ngoal (1 subgoal):\n 1. left (ext v) \\<le> right (space ts v c)", "by (metis order_trans real_int.left_leq_right)"], ["proof (state)\nthis:\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (2 subgoals):\n 1. left (space ts v c) = right (ext v) \\<Longrightarrow> False\n 2. right (ext v) < left (space ts v c) \\<Longrightarrow> False", "from left_eq and inside_left"], ["proof (chain)\npicking this:\n  left (space ts v c) = right (ext v)\n  left (ext v) \\<le> right (space ts v c)", "have len_v: \n          \"len v ( ts) c = Abs_real_int (max (left (ext v)) (left (space ts v c)), \n                                         min (right (ext v)) (right (space ts v c)))\""], ["proof (prove)\nusing this:\n  left (space ts v c) = right (ext v)\n  left (ext v) \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "using len_def"], ["proof (prove)\nusing this:\n  left (space ts v c) = right (ext v)\n  left (ext v) \\<le> right (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (2 subgoals):\n 1. left (space ts v c) = right (ext v) \\<Longrightarrow> False\n 2. right (ext v) < left (space ts v c) \\<Longrightarrow> False", "hence \"len v ( ts) c = Abs_real_int (left (space ts v c), left(space ts v c))\""], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. len v ts c = Abs_real_int (left (space ts v c), left (space ts v c))", "by (metis left_eq max_def min_def real_int.left_leq_right)"], ["proof (state)\nthis:\n  len v ts c = Abs_real_int (left (space ts v c), left (space ts v c))\n\ngoal (2 subgoals):\n 1. left (space ts v c) = right (ext v) \\<Longrightarrow> False\n 2. right (ext v) < left (space ts v c) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  len v ts c = Abs_real_int (left (space ts v c), left (space ts v c))\n\ngoal (1 subgoal):\n 1. False", "using Abs_real_int_inverse assm real_int.length_def"], ["proof (prove)\nusing this:\n  len v ts c = Abs_real_int (left (space ts v c), left (space ts v c))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  0 < \\<parallel>len v ts c\\<parallel>\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow> False", "assume \"left ((space ts v) c) > right (ext v)\""], ["proof (state)\nthis:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. right (ext v) < left (space ts v c) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n\ngoal (1 subgoal):\n 1. False", "using Abs_real_int_inverse assm len_def real_int.length_def"], ["proof (prove)\nusing this:\n  right (ext v) < left (space ts v c)\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  0 < \\<parallel>len v ts c\\<parallel>\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v) < right (space ts v c) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> left (ext v) < right (space ts v c) \\<Longrightarrow> False", "assume \"\\<not>right ((space ts v) c) > left (ext v)\""], ["proof (state)\nthis:\n  \\<not> left (ext v) < right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v) < right (space ts v c) \\<Longrightarrow> False", "hence \" right ((space ts v) c) = left (ext v) \n            \\<or> right ((space ts v) c) < left (ext v)\""], ["proof (prove)\nusing this:\n  \\<not> left (ext v) < right (space ts v c)\n\ngoal (1 subgoal):\n 1. right (space ts v c) = left (ext v) \\<or>\n    right (space ts v c) < left (ext v)", "by auto"], ["proof (state)\nthis:\n  right (space ts v c) = left (ext v) \\<or>\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. \\<not> left (ext v) < right (space ts v c) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  right (space ts v c) = left (ext v) \\<or>\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. False", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. right (space ts v c) = left (ext v) \\<Longrightarrow> False\n 2. right (space ts v c) < left (ext v) \\<Longrightarrow> False", "assume right_eq:\"right ((space ts v) c) = left (ext v)\""], ["proof (state)\nthis:\n  right (space ts v c) = left (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) = left (ext v) \\<Longrightarrow> False\n 2. right (space ts v c) < left (ext v) \\<Longrightarrow> False", "hence inside_right:\"right (ext v) \\<ge> left ((space ts v) c)\""], ["proof (prove)\nusing this:\n  right (space ts v c) = left (ext v)\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v)", "by (metis order_trans real_int.left_leq_right)"], ["proof (state)\nthis:\n  left (space ts v c) \\<le> right (ext v)\n\ngoal (2 subgoals):\n 1. right (space ts v c) = left (ext v) \\<Longrightarrow> False\n 2. right (space ts v c) < left (ext v) \\<Longrightarrow> False", "from right_eq and inside_right"], ["proof (chain)\npicking this:\n  right (space ts v c) = left (ext v)\n  left (space ts v c) \\<le> right (ext v)", "have len_v: \n          \"len v ts c = Abs_real_int (max (left (ext v)) (left (space ts v c)), \n                              min (right (ext v)) (right (space ts v c)))\""], ["proof (prove)\nusing this:\n  right (space ts v c) = left (ext v)\n  left (space ts v c) \\<le> right (ext v)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "using len_def"], ["proof (prove)\nusing this:\n  right (space ts v c) = left (ext v)\n  left (space ts v c) \\<le> right (ext v)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (2 subgoals):\n 1. right (space ts v c) = left (ext v) \\<Longrightarrow> False\n 2. right (space ts v c) < left (ext v) \\<Longrightarrow> False", "hence \n          \"len v ( ts) c = Abs_real_int(right (space ts v c), right (space ts v c))\""], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. len v ts c = Abs_real_int (right (space ts v c), right (space ts v c))", "by (metis max.commute max_def min_def real_int.left_leq_right right_eq)"], ["proof (state)\nthis:\n  len v ts c = Abs_real_int (right (space ts v c), right (space ts v c))\n\ngoal (2 subgoals):\n 1. right (space ts v c) = left (ext v) \\<Longrightarrow> False\n 2. right (space ts v c) < left (ext v) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  len v ts c = Abs_real_int (right (space ts v c), right (space ts v c))\n\ngoal (1 subgoal):\n 1. False", "using Abs_real_int_inverse assm real_int.length_def"], ["proof (prove)\nusing this:\n  len v ts c = Abs_real_int (right (space ts v c), right (space ts v c))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  0 < \\<parallel>len v ts c\\<parallel>\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow> False", "assume right_le:\"right ((space ts v) c) < left (ext v)\""], ["proof (state)\nthis:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. right (space ts v c) < left (ext v) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  right (space ts v c) < left (ext v)\n\ngoal (1 subgoal):\n 1. False", "by (metis (no_types, hide_lams) Rep_real_int_inverse assm left.rep_eq len_def\n              length_zero_iff_borders_eq less_irrefl prod.collapse real_int.rchop_def \n              right.rep_eq view.hchop_def view.horizontal_chop_empty_left \n              view.horizontal_chop_empty_right)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  left (space ts v c) < right (ext v) \\<and>\n  left (ext v) < right (space ts v c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_fills_subview:\n  \"\\<parallel>len v ts c\\<parallel> > 0 \n      \\<longrightarrow> (\\<exists> v1 v2 v3 v'. (v=v1\\<parallel>v2) \\<and> (v2=v'\\<parallel>v3) \\<and> len v' ts c = ext v' \\<and> \n                          \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < \\<parallel>len v ts c\\<parallel> \\<longrightarrow>\n    (\\<exists>v1 v2 v3 v'.\n        v=v1\\<parallel>v2 \\<and>\n        v2=v'\\<parallel>v3 \\<and>\n        len v' ts c = ext v' \\<and>\n        \\<parallel>len v' ts c\\<parallel> =\n        \\<parallel>len v ts c\\<parallel>)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < \\<parallel>len v ts c\\<parallel> \\<Longrightarrow>\n    \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "assume assm: \"\\<parallel>len v ( ts) c\\<parallel> > 0\""], ["proof (state)\nthis:\n  0 < \\<parallel>len v ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. 0 < \\<parallel>len v ts c\\<parallel> \\<Longrightarrow>\n    \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "show \" \\<exists> v1 v2 v3 v'. (v=v1\\<parallel>v2) \\<and> (v2=v'\\<parallel>v3) \\<and> len v' ( ts) c = ext v' \\<and> \n          \\<parallel>len v' ( ts) c\\<parallel> = \\<parallel>len v ( ts) c\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "from assm"], ["proof (chain)\npicking this:\n  0 < \\<parallel>len v ts c\\<parallel>", "have inside:\n      \"left ((space ts v) c) < right (ext v) \\<and> right ((space ts v) c) > left (ext v)\""], ["proof (prove)\nusing this:\n  0 < \\<parallel>len v ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. left (space ts v c) < right (ext v) \\<and>\n    left (ext v) < right (space ts v c)", "using len_non_empty_inside"], ["proof (prove)\nusing this:\n  0 < \\<parallel>len v ts c\\<parallel>\n  0 < \\<parallel>len ?v ?ts ?c\\<parallel> \\<longrightarrow>\n  left (space ?ts ?v ?c) < right (ext ?v) \\<and>\n  left (ext ?v) < right (space ?ts ?v ?c)\n\ngoal (1 subgoal):\n 1. left (space ts v c) < right (ext v) \\<and>\n    left (ext v) < right (space ts v c)", "by auto"], ["proof (state)\nthis:\n  left (space ts v c) < right (ext v) \\<and>\n  left (ext v) < right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "hence len_v: \n      \"len v ( ts) c = Abs_real_int (max (left (ext v)) (left (space ts v c)), \n                              min (right (ext v)) (right (space ts v c)))\""], ["proof (prove)\nusing this:\n  left (space ts v c) < right (ext v) \\<and>\n  left (ext v) < right (space ts v c)\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "using len_def"], ["proof (prove)\nusing this:\n  left (space ts v c) < right (ext v) \\<and>\n  left (ext v) < right (space ts v c)\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n\ngoal (1 subgoal):\n 1. len v ts c =\n    Abs_real_int\n     (max (left (ext v)) (left (space ts v c)),\n      min (right (ext v)) (right (space ts v c)))", "by auto"], ["proof (state)\nthis:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "obtain v1 and v2 and v3 and v' \n      where v1:\n        \"v1=\\<lparr>ext =Abs_real_int(left(ext v), left (len v ts c)),\n             lan = lan v,\n             own = own v\\<rparr>\"\n      and v2:\n      \"v2=\\<lparr>ext =Abs_real_int(left(len v ts c), right (ext v)),\n           lan = lan v,\n           own = own v\\<rparr>\"\n      and v':\n      \"v'=\\<lparr>ext =Abs_real_int(left(len v ts c), right (len v ts c)),\n           lan = lan v,\n           own = own v\\<rparr>\"\n      and v3:\n      \"v3=\\<lparr>ext =Abs_real_int(right(len v ts c), right (ext v)),\n           lan = lan v,\n           own = own v\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v1 v2 v' v3.\n        \\<lbrakk>v1 =\n                 \\<lparr>ext =\n                           Abs_real_int (left (ext v), left (len v ts c)),\n                    lan = lan v, own = own v\\<rparr>;\n         v2 =\n         \\<lparr>ext = Abs_real_int (left (len v ts c), right (ext v)),\n            lan = lan v, own = own v\\<rparr>;\n         v' =\n         \\<lparr>ext = Abs_real_int (left (len v ts c), right (len v ts c)),\n            lan = lan v, own = own v\\<rparr>;\n         v3 =\n         \\<lparr>ext = Abs_real_int (right (len v ts c), right (ext v)),\n            lan = lan v, own = own v\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v1 =\n  \\<lparr>ext = Abs_real_int (left (ext v), left (len v ts c)), lan = lan v,\n     own = own v\\<rparr>\n  v2 =\n  \\<lparr>ext = Abs_real_int (left (len v ts c), right (ext v)),\n     lan = lan v, own = own v\\<rparr>\n  v' =\n  \\<lparr>ext = Abs_real_int (left (len v ts c), right (len v ts c)),\n     lan = lan v, own = own v\\<rparr>\n  v3 =\n  \\<lparr>ext = Abs_real_int (right (len v ts c), right (ext v)),\n     lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "hence 1:\" (v=v1\\<parallel>v2) \\<and> (v2=v'\\<parallel>v3)\""], ["proof (prove)\nusing this:\n  v1 =\n  \\<lparr>ext = Abs_real_int (left (ext v), left (len v ts c)), lan = lan v,\n     own = own v\\<rparr>\n  v2 =\n  \\<lparr>ext = Abs_real_int (left (len v ts c), right (ext v)),\n     lan = lan v, own = own v\\<rparr>\n  v' =\n  \\<lparr>ext = Abs_real_int (left (len v ts c), right (len v ts c)),\n     lan = lan v, own = own v\\<rparr>\n  v3 =\n  \\<lparr>ext = Abs_real_int (right (len v ts c), right (ext v)),\n     lan = lan v, own = own v\\<rparr>\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v2=v'\\<parallel>v3", "using inside hchop_def real_int.rchop_def Abs_real_int_inverse real_int.left_leq_right\n        v1 v2 v' v3 len_def"], ["proof (prove)\nusing this:\n  v1 =\n  \\<lparr>ext = Abs_real_int (left (ext v), left (len v ts c)), lan = lan v,\n     own = own v\\<rparr>\n  v2 =\n  \\<lparr>ext = Abs_real_int (left (len v ts c), right (ext v)),\n     lan = lan v, own = own v\\<rparr>\n  v' =\n  \\<lparr>ext = Abs_real_int (left (len v ts c), right (len v ts c)),\n     lan = lan v, own = own v\\<rparr>\n  v3 =\n  \\<lparr>ext = Abs_real_int (right (len v ts c), right (ext v)),\n     lan = lan v, own = own v\\<rparr>\n  left (space ts v c) < right (ext v) \\<and>\n  left (ext v) < right (space ts v c)\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  R_Chop(?r,?s,?t) \\<equiv>\n  left ?r = left ?s \\<and> right ?s = left ?t \\<and> right ?r = right ?t\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  left ?r \\<le> right ?r\n  v1 =\n  \\<lparr>ext = Abs_real_int (left (ext v), left (len v ts c)), lan = lan v,\n     own = own v\\<rparr>\n  v2 =\n  \\<lparr>ext = Abs_real_int (left (len v ts c), right (ext v)),\n     lan = lan v, own = own v\\<rparr>\n  v' =\n  \\<lparr>ext = Abs_real_int (left (len v ts c), right (len v ts c)),\n     lan = lan v, own = own v\\<rparr>\n  v3 =\n  \\<lparr>ext = Abs_real_int (right (len v ts c), right (ext v)),\n     lan = lan v, own = own v\\<rparr>\n  len ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (space ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (space ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (space ?ts ?v ?c)),\n              min (right (ext ?v)) (right (space ?ts ?v ?c)))\n\ngoal (1 subgoal):\n 1. v=v1\\<parallel>v2 \\<and> v2=v'\\<parallel>v3", "by auto"], ["proof (state)\nthis:\n  v=v1\\<parallel>v2 \\<and> v2=v'\\<parallel>v3\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "have right:\"right (ext v') = right (len v ts c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (ext v') = right (len v ts c)", "by (simp add: Rep_real_int_inverse  v')"], ["proof (state)\nthis:\n  right (ext v') = right (len v ts c)\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "then"], ["proof (chain)\npicking this:\n  right (ext v') = right (len v ts c)", "have right':\"left ((space ts v) c) \\<le> right (ext v')\""], ["proof (prove)\nusing this:\n  right (ext v') = right (len v ts c)\n\ngoal (1 subgoal):\n 1. left (space ts v c) \\<le> right (ext v')", "by (metis inside len_space_left less_imp_le order_trans real_int.left_leq_right)"], ["proof (state)\nthis:\n  left (space ts v c) \\<le> right (ext v')\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "have left:\"left (ext v') = left (len v ts c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (ext v') = left (len v ts c)", "by (simp add: Rep_real_int_inverse  v')"], ["proof (state)\nthis:\n  left (ext v') = left (len v ts c)\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "then"], ["proof (chain)\npicking this:\n  left (ext v') = left (len v ts c)", "have left':\"right ((space ts v) c) \\<ge> left (ext v')\""], ["proof (prove)\nusing this:\n  left (ext v') = left (len v ts c)\n\ngoal (1 subgoal):\n 1. left (ext v') \\<le> right (space ts v c)", "by (metis inside len_space_right less_imp_le order_trans real_int.left_leq_right)"], ["proof (state)\nthis:\n  left (ext v') \\<le> right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "have inside':\n      \"left ((space ts v) c) < right (ext v') \\<and> right ((space ts v) c) > left (ext v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (space ts v c) < right (ext v') \\<and>\n    left (ext v') < right (space ts v c)", "by (metis (no_types) left' right' antisym_conv assm inside left len_space_left\n          len_space_right less_imp_le not_le real_int.left_leq_right\n          real_int.length_zero_iff_borders_eq right)"], ["proof (state)\nthis:\n  left (space ts v c) < right (ext v') \\<and>\n  left (ext v') < right (space ts v c)\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "have inside'':\n      \"left (space ts v' c) < right (ext v') \\<and> right (space ts v' c) > left (ext v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (space ts v' c) < right (ext v') \\<and>\n    left (ext v') < right (space ts v' c)", "using \"1\" hchop_def inside' sensors.space_def sensors_axioms"], ["proof (prove)\nusing this:\n  v=v1\\<parallel>v2 \\<and> v2=v'\\<parallel>v3\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  left (space ts v c) < right (ext v') \\<and>\n  left (ext v') < right (space ts v c)\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  sensors sensors\n\ngoal (1 subgoal):\n 1. left (space ts v' c) < right (ext v') \\<and>\n    left (ext v') < right (space ts v' c)", "by auto"], ["proof (state)\nthis:\n  left (space ts v' c) < right (ext v') \\<and>\n  left (ext v') < right (space ts v' c)\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "have len_v_v':\"len v ts c = ext v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v ts c = ext v'", "by (metis left prod.collapse right left.rep_eq right.rep_eq Rep_real_int_inverse)"], ["proof (state)\nthis:\n  len v ts c = ext v'\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "have \"left (len v ts c) = max (left (ext v)) (left ((space ts v) c)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. left (len v ts c) = max (left (ext v)) (left (space ts v c))", "using len_v Abs_real_int_inverse Rep_real_int inside"], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n  left (space ts v c) < right (ext v) \\<and>\n  left (ext v) < right (space ts v c)\n\ngoal (1 subgoal):\n 1. left (len v ts c) = max (left (ext v)) (left (space ts v c))", "by auto"], ["proof (state)\nthis:\n  left (len v ts c) = max (left (ext v)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "with left"], ["proof (chain)\npicking this:\n  left (ext v') = left (len v ts c)\n  left (len v ts c) = max (left (ext v)) (left (space ts v c))", "have left_len':\"left (ext v') = max (left (ext v)) (left (space ts v c))\""], ["proof (prove)\nusing this:\n  left (ext v') = left (len v ts c)\n  left (len v ts c) = max (left (ext v)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. left (ext v') = max (left (ext v)) (left (space ts v c))", "by auto"], ["proof (state)\nthis:\n  left (ext v') = max (left (ext v)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "then"], ["proof (chain)\npicking this:\n  left (ext v') = max (left (ext v)) (left (space ts v c))", "have left_len:\"left (ext v') = max (left (ext v')) (left (space ts v' c))\""], ["proof (prove)\nusing this:\n  left (ext v') = max (left (ext v)) (left (space ts v c))\n\ngoal (1 subgoal):\n 1. left (ext v') = max (left (ext v')) (left (space ts v' c))", "using \"1\"  hchop_def space_def"], ["proof (prove)\nusing this:\n  left (ext v') = max (left (ext v)) (left (space ts v c))\n  v=v1\\<parallel>v2 \\<and> v2=v'\\<parallel>v3\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. left (ext v') = max (left (ext v')) (left (space ts v' c))", "by fastforce"], ["proof (state)\nthis:\n  left (ext v') = max (left (ext v')) (left (space ts v' c))\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "have \"right (len v ts c) = min (right (ext v)) (right ((space ts v) c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right (len v ts c) = min (right (ext v)) (right (space ts v c))", "using len_v Abs_real_int_inverse inside Rep_real_int"], ["proof (prove)\nusing this:\n  len v ts c =\n  Abs_real_int\n   (max (left (ext v)) (left (space ts v c)),\n    min (right (ext v)) (right (space ts v c)))\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  left (space ts v c) < right (ext v) \\<and>\n  left (ext v) < right (space ts v c)\n  Rep_real_int ?x \\<in> {r. fst r \\<le> snd r}\n\ngoal (1 subgoal):\n 1. right (len v ts c) = min (right (ext v)) (right (space ts v c))", "by auto"], ["proof (state)\nthis:\n  right (len v ts c) = min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "with right"], ["proof (chain)\npicking this:\n  right (ext v') = right (len v ts c)\n  right (len v ts c) = min (right (ext v)) (right (space ts v c))", "have right_len':\n      \"right (ext v') = min (right (ext v)) (right (space ts v c))\""], ["proof (prove)\nusing this:\n  right (ext v') = right (len v ts c)\n  right (len v ts c) = min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. right (ext v') = min (right (ext v)) (right (space ts v c))", "by auto"], ["proof (state)\nthis:\n  right (ext v') = min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "then"], ["proof (chain)\npicking this:\n  right (ext v') = min (right (ext v)) (right (space ts v c))", "have right_len:\n      \"right (ext v') = min (right (ext v')) (right (space ts v' c))\""], ["proof (prove)\nusing this:\n  right (ext v') = min (right (ext v)) (right (space ts v c))\n\ngoal (1 subgoal):\n 1. right (ext v') = min (right (ext v')) (right (space ts v' c))", "using \"1\"  hchop_def space_def"], ["proof (prove)\nusing this:\n  right (ext v') = min (right (ext v)) (right (space ts v c))\n  v=v1\\<parallel>v2 \\<and> v2=v'\\<parallel>v3\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n  space ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + sensors (own ?v) ?ts ?c)\n\ngoal (1 subgoal):\n 1. right (ext v') = min (right (ext v')) (right (space ts v' c))", "by fastforce"], ["proof (state)\nthis:\n  right (ext v') = min (right (ext v')) (right (space ts v' c))\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "have 2:\"len v' ( ts) c = ext v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len v' ts c = ext v'", "by (metis left_len' right_len' len_v len_v_v' order.asym inside''\n          len_def left_len right_len)"], ["proof (state)\nthis:\n  len v' ts c = ext v'\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "have 3:\"  \\<parallel>len v' ( ts) c\\<parallel> = \\<parallel>len v ( ts) c\\<parallel>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "using len_left len_right hchop_def"], ["proof (prove)\nusing this:\n  left (ext ?v) \\<le> left (len ?v ?ts ?c)\n  right (len ?v ?ts ?c) \\<le> right (ext ?v)\n  ?v=?u\\<parallel>?w \\<equiv>\n  R_Chop(ext ?v,ext ?u,ext ?w) \\<and>\n  lan ?v = lan ?u \\<and>\n  lan ?v = lan ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "by (simp add: \"2\" len_v_v')"], ["proof (state)\nthis:\n  \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "then"], ["proof (chain)\npicking this:\n  \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "using 1 2 3"], ["proof (prove)\nusing this:\n  \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>\n  v=v1\\<parallel>v2 \\<and> v2=v'\\<parallel>v3\n  len v' ts c = ext v'\n  \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 v'.\n       v=v1\\<parallel>v2 \\<and>\n       v2=v'\\<parallel>v3 \\<and>\n       len v' ts c = ext v' \\<and>\n       \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>", "by blast"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 v'.\n     v=v1\\<parallel>v2 \\<and>\n     v2=v'\\<parallel>v3 \\<and>\n     len v' ts c = ext v' \\<and>\n     \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 v'.\n     v=v1\\<parallel>v2 \\<and>\n     v2=v'\\<parallel>v3 \\<and>\n     len v' ts c = ext v' \\<and>\n     \\<parallel>len v' ts c\\<parallel> = \\<parallel>len v ts c\\<parallel>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ext_eq_len_eq:\n  \"ext v = ext v'\\<and> own v = own v' \\<longrightarrow> len v ts c = len v' ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ext v = ext v' \\<and> own v = own v' \\<longrightarrow>\n    len v ts c = len v' ts c", "using left_space right_space sensors.len_def sensors_axioms"], ["proof (prove)\nusing this:\n  left (space ?ts ?v ?c) = pos ?ts ?c\n  right (space ?ts ?v ?c) = pos ?ts ?c + sensors (own ?v) ?ts ?c\n  sensors ?sensors \\<Longrightarrow>\n  sensors.len ?sensors ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (sensors.space ?sensors ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (sensors.space ?sensors ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (sensors.space ?sensors ?ts ?v ?c)),\n              min (right (ext ?v))\n               (right (sensors.space ?sensors ?ts ?v ?c)))\n  sensors sensors\n\ngoal (1 subgoal):\n 1. ext v = ext v' \\<and> own v = own v' \\<longrightarrow>\n    len v ts c = len v' ts c", "by auto"], ["", "lemma len_stable_down:\"(v=v1--v2) \\<longrightarrow> len v ts c = len v1 ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1--v2 \\<longrightarrow> len v ts c = len v1 ts c", "using ext_eq_len_eq view.vchop_def"], ["proof (prove)\nusing this:\n  ext ?v = ext ?v' \\<and> own ?v = own ?v' \\<longrightarrow>\n  len ?v ?ts ?c = len ?v' ?ts ?c\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<longrightarrow> len v ts c = len v1 ts c", "by blast"], ["", "lemma len_stable_up:\"(v=v1--v2) \\<longrightarrow> len v ts c = len v2 ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v=v1--v2 \\<longrightarrow> len v ts c = len v2 ts c", "using ext_eq_len_eq view.vchop_def"], ["proof (prove)\nusing this:\n  ext ?v = ext ?v' \\<and> own ?v = own ?v' \\<longrightarrow>\n  len ?v ?ts ?c = len ?v' ?ts ?c\n  ?v=?u--?w \\<equiv>\n  N_Chop(lan ?v,lan ?u,lan ?w) \\<and>\n  ext ?v = ext ?u \\<and>\n  ext ?v = ext ?w \\<and>\n  own ?v = own ?u \\<and>\n  own ?v = own ?w \\<and> more ?v = more ?w \\<and> more ?v = more ?u\n\ngoal (1 subgoal):\n 1. v=v1--v2 \\<longrightarrow> len v ts c = len v2 ts c", "by blast"], ["", "lemma len_empty_subview:\"\\<parallel>len v ts c\\<parallel> = 0 \\<and> (v' \\<le> v) \\<longrightarrow> \\<parallel>len v' ts c\\<parallel> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v \\<longrightarrow>\n    \\<parallel>len v' ts c\\<parallel> = 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v \\<Longrightarrow>\n    \\<parallel>len v' ts c\\<parallel> = 0", "assume assm:\"\\<parallel>len v ts c\\<parallel> = 0 \\<and> (v' \\<le> v)\""], ["proof (state)\nthis:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v \\<Longrightarrow>\n    \\<parallel>len v' ts c\\<parallel> = 0", "hence \"\\<exists>v1 v2 v3 vl vr vu vd. (v=vl\\<parallel>v1) \\<and> (v1=v2\\<parallel>vr) \\<and> (v2=vd--v3) \\<and> (v3=v'--vu)\""], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v'--vu", "using\n      somewhere_leq"], ["proof (prove)\nusing this:\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v\n  (?v \\<le> ?v') =\n  (\\<exists>v1 v2 v3 vl vr vu vd.\n      ?v'=vl\\<parallel>v1 \\<and>\n      v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=?v--vu)\n\ngoal (1 subgoal):\n 1. \\<exists>v1 v2 v3 vl vr vu vd.\n       v=vl\\<parallel>v1 \\<and>\n       v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v'--vu", "by auto"], ["proof (state)\nthis:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v'--vu\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v \\<Longrightarrow>\n    \\<parallel>len v' ts c\\<parallel> = 0", "then"], ["proof (chain)\npicking this:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v'--vu", "obtain v1 v2 v3 vl vr vu vd \n    where views:\"(v=vl\\<parallel>v1) \\<and> (v1=v2\\<parallel>vr) \\<and> (v2=vd--v3) \\<and> (v3=v'--vu)\""], ["proof (prove)\nusing this:\n  \\<exists>v1 v2 v3 vl vr vu vd.\n     v=vl\\<parallel>v1 \\<and>\n     v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v'--vu\n\ngoal (1 subgoal):\n 1. (\\<And>vl v1 v2 vr vd v3 vu.\n        v=vl\\<parallel>v1 \\<and>\n        v1=v2\\<parallel>vr \\<and>\n        v2=vd--v3 \\<and> v3=v'--vu \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v=vl\\<parallel>v1 \\<and>\n  v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v'--vu\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v \\<Longrightarrow>\n    \\<parallel>len v' ts c\\<parallel> = 0", "have \"\\<parallel>len v1 ts c\\<parallel> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "using views assm len_empty_on_subview2"], ["proof (prove)\nusing this:\n  v=vl\\<parallel>v1 \\<and>\n  v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v'--vu\n  \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v\n  \\<parallel>len ?v ?ts ?c\\<parallel> = 0 \\<and>\n  ?v=?v1.0\\<parallel>?v2.0 \\<longrightarrow>\n  \\<parallel>len ?v2.0 ?ts ?c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v1 ts c\\<parallel> = 0", "by blast"], ["proof (state)\nthis:\n  \\<parallel>len v1 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v \\<Longrightarrow>\n    \\<parallel>len v' ts c\\<parallel> = 0", "hence \"\\<parallel>len v2 ts c\\<parallel> = 0\""], ["proof (prove)\nusing this:\n  \\<parallel>len v1 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v2 ts c\\<parallel> = 0", "using views len_empty_on_subview1"], ["proof (prove)\nusing this:\n  \\<parallel>len v1 ts c\\<parallel> = 0\n  v=vl\\<parallel>v1 \\<and>\n  v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v'--vu\n  \\<parallel>len ?v ?ts ?c\\<parallel> = 0 \\<and>\n  ?v=?v1.0\\<parallel>?v2.0 \\<longrightarrow>\n  \\<parallel>len ?v1.0 ?ts ?c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v2 ts c\\<parallel> = 0", "by blast"], ["proof (state)\nthis:\n  \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v \\<Longrightarrow>\n    \\<parallel>len v' ts c\\<parallel> = 0", "hence \"\\<parallel>len v3 ts c \\<parallel> = 0\""], ["proof (prove)\nusing this:\n  \\<parallel>len v2 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v3 ts c\\<parallel> = 0", "using views len_stable_up"], ["proof (prove)\nusing this:\n  \\<parallel>len v2 ts c\\<parallel> = 0\n  v=vl\\<parallel>v1 \\<and>\n  v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v'--vu\n  ?v=?v1.0--?v2.0 \\<longrightarrow> len ?v ?ts ?c = len ?v2.0 ?ts ?c\n\ngoal (1 subgoal):\n 1. \\<parallel>len v3 ts c\\<parallel> = 0", "by auto"], ["proof (state)\nthis:\n  \\<parallel>len v3 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v ts c\\<parallel> = 0 \\<and> v' \\<le> v \\<Longrightarrow>\n    \\<parallel>len v' ts c\\<parallel> = 0", "thus \"\\<parallel>len v' ts c \\<parallel> = 0\""], ["proof (prove)\nusing this:\n  \\<parallel>len v3 ts c\\<parallel> = 0\n\ngoal (1 subgoal):\n 1. \\<parallel>len v' ts c\\<parallel> = 0", "using views len_stable_down"], ["proof (prove)\nusing this:\n  \\<parallel>len v3 ts c\\<parallel> = 0\n  v=vl\\<parallel>v1 \\<and>\n  v1=v2\\<parallel>vr \\<and> v2=vd--v3 \\<and> v3=v'--vu\n  ?v=?v1.0--?v2.0 \\<longrightarrow> len ?v ?ts ?c = len ?v1.0 ?ts ?c\n\ngoal (1 subgoal):\n 1. \\<parallel>len v' ts c\\<parallel> = 0", "by auto"], ["proof (state)\nthis:\n  \\<parallel>len v' ts c\\<parallel> = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma view_leq_len_leq:\"(ext v \\<le> ext v') \\<and> (own v = own v') \\<and> \\<parallel>len v ts c\\<parallel> > 0 \n                          \\<longrightarrow> len v ts c \\<le> len v' ts c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ext v \\<le> ext v' \\<and>\n    own v = own v' \\<and>\n    0 < \\<parallel>len v ts c\\<parallel> \\<longrightarrow>\n    len v ts c \\<le> len v' ts c", "using Abs_real_int_inverse  length_def length_ge_zero less_eq_real_int_def \n    sensors.len_def sensors.space_def sensors_axioms"], ["proof (prove)\nusing this:\n  ?y \\<in> {r. fst r \\<le> snd r} \\<Longrightarrow>\n  Rep_real_int (Abs_real_int ?y) = ?y\n  \\<parallel>?r\\<parallel> \\<equiv> right ?r - left ?r\n  0 \\<le> \\<parallel>?r\\<parallel>\n  ?r \\<le> ?s \\<equiv> left ?s \\<le> left ?r \\<and> right ?r \\<le> right ?s\n  sensors ?sensors \\<Longrightarrow>\n  sensors.len ?sensors ?v ?ts ?c \\<equiv>\n  if right (ext ?v) < left (sensors.space ?sensors ?ts ?v ?c)\n  then Abs_real_int (right (ext ?v), right (ext ?v))\n  else if right (sensors.space ?sensors ?ts ?v ?c) < left (ext ?v)\n       then Abs_real_int (left (ext ?v), left (ext ?v))\n       else Abs_real_int\n             (max (left (ext ?v)) (left (sensors.space ?sensors ?ts ?v ?c)),\n              min (right (ext ?v))\n               (right (sensors.space ?sensors ?ts ?v ?c)))\n  sensors ?sensors \\<Longrightarrow>\n  sensors.space ?sensors ?ts ?v ?c \\<equiv>\n  Abs_real_int (pos ?ts ?c, pos ?ts ?c + ?sensors (own ?v) ?ts ?c)\n  sensors sensors\n\ngoal (1 subgoal):\n 1. ext v \\<le> ext v' \\<and>\n    own v = own v' \\<and>\n    0 < \\<parallel>len v ts c\\<parallel> \\<longrightarrow>\n    len v ts c \\<le> len v' ts c", "by auto"], ["", "end"], ["", "end"]]}