{"file_name": "/home/qj213/afp-2021-10-22/thys/Abstract-Hoare-Logics/Proc/PHoareTotal.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Abstract-Hoare-Logics", "problem_names": ["lemma \"((\\<forall>s t. (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow> (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n            (\\<forall>s. (\\<exists>z. P z s) \\<longrightarrow> (\\<exists>z. P' z s)))\n        = (\\<forall>z s. P z s \\<longrightarrow> (\\<forall>t.\\<exists>z'. P' z' s \\<and> (Q' z' t \\<longrightarrow> Q z t)))\"", "lemma strengthen_pre:\n \"\\<lbrakk> \\<forall>z s. P' z s \\<longrightarrow> P z s; C \\<turnstile>\\<^sub>t {P}c{Q}  \\<rbrakk> \\<Longrightarrow> C \\<turnstile>\\<^sub>t {P'}c{Q}\"", "lemma weaken_post:\n \"\\<lbrakk> C \\<turnstile>\\<^sub>t {P}c{Q}; \\<forall>z s. Q z s \\<longrightarrow> Q' z s \\<rbrakk> \\<Longrightarrow> C \\<turnstile>\\<^sub>t {P}c{Q'}\"", "lemmas tvalid_defs = tvalid_def ctvalid_def valid_defs", "lemma [iff]:\n\"(\\<Turnstile>\\<^sub>t {\\<lambda>z s. \\<exists>n. P n z s}c{Q}) = (\\<forall>n. \\<Turnstile>\\<^sub>t {P n}c{Q})\"", "lemma [iff]:\n\"(\\<Turnstile>\\<^sub>t {\\<lambda>z s. P z s \\<and> P'}c{Q}) = (P' \\<longrightarrow> \\<Turnstile>\\<^sub>t {P}c{Q})\"", "lemma [iff]: \"(\\<Turnstile>\\<^sub>t {P}CALL{Q}) = (\\<Turnstile>\\<^sub>t {P}body{Q})\"", "theorem \"C \\<turnstile>\\<^sub>t {P}c{Q}  \\<Longrightarrow>  C \\<Turnstile>\\<^sub>t {P}c{Q}\"", "lemma MGT_implies_complete:\n \"{} \\<turnstile>\\<^sub>t MGT\\<^sub>t c \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P}c{Q} \\<Longrightarrow> {} \\<turnstile>\\<^sub>t {P}c{Q::state assn}\"", "lemma while_termiE: \"\\<lbrakk> WHILE b DO c \\<down> s; b s \\<rbrakk> \\<Longrightarrow> c \\<down> s\"", "lemma while_termiE2:\n  \"\\<lbrakk> WHILE b DO c \\<down> s; b s; s -c\\<rightarrow> t \\<rbrakk> \\<Longrightarrow> WHILE b DO c \\<down> t\"", "lemma MGT_lemma: \"C \\<turnstile>\\<^sub>t MGT\\<^sub>t CALL \\<Longrightarrow> C \\<turnstile>\\<^sub>t MGT\\<^sub>t c\"", "lemma [iff]: \"\\<not> ([],s) \\<rightarrow> u\"", "lemma app_exec: \"(cs,s) \\<rightarrow> (cs',s') \\<Longrightarrow> (cs@cs2,s) \\<rightarrow> (cs'@cs2,s')\"", "lemma app_execs: \"(cs,s) \\<rightarrow>\\<^sup>* (cs',s') \\<Longrightarrow> (cs@cs2,s) \\<rightarrow>\\<^sup>* (cs'@cs2,s')\"", "lemma exec_impl_execs[rule_format]:\n \"s -c\\<rightarrow> s' \\<Longrightarrow> \\<forall>cs. (c#cs,s) \\<rightarrow>\\<^sup>* (cs,s')\"", "theorem exec1s_impl_execs: \"(cs,s) \\<rightarrow>\\<^sup>* ([],t) \\<Longrightarrow> s =cs\\<Rightarrow> t\"", "theorem exec1s_impl_exec: \"([c],s) \\<rightarrow>\\<^sup>* ([],t) \\<Longrightarrow> s -c\\<rightarrow> t\"", "lemma exec1_pres_termis: \"(cs,s) \\<rightarrow> (cs',s') \\<Longrightarrow> cs\\<Down>s \\<longrightarrow> cs'\\<Down>s'\"", "lemma execs_pres_termis: \"(cs,s) \\<rightarrow>\\<^sup>* (cs',s') \\<Longrightarrow> cs\\<Down>s \\<longrightarrow> cs'\\<Down>s'\"", "lemma execs_pres_termi: \"\\<lbrakk> ([c],s) \\<rightarrow>\\<^sup>* (c'#cs',s'); c\\<down>s \\<rbrakk> \\<Longrightarrow> c'\\<down>s'\"", "lemma lem:\n  \"\\<forall>y. (a,y)\\<in>r\\<^sup>+ \\<longrightarrow> P a \\<longrightarrow> P y \\<Longrightarrow> ((b,a) \\<in> {(y,x). P x \\<and> (x,y):r}\\<^sup>+) = ((b,a) \\<in> {(y,x). P x \\<and> (x,y)\\<in>r\\<^sup>+})\"", "lemma renumber_aux:\n \"\\<lbrakk>\\<forall>i. (a,f i) : r^* \\<and> (f i,f(Suc i)) : r; (a,b) : r^* \\<rbrakk> \\<Longrightarrow> b = f 0 \\<longrightarrow> (\\<exists>f. f 0 = a & (\\<forall>i. (f i, f(Suc i)) : r))\"", "lemma renumber:\n \"\\<forall>i. (a,f i) : r^* \\<and> (f i,f(Suc i)) : r \\<Longrightarrow> \\<exists>f. f 0 = a & (\\<forall>i. (f i, f(Suc i)) : r)\"", "lemma [iff]: \"\\<not> inf [] s\"", "lemma [iff]: \"\\<not> inf [Do f] s\"", "lemma [iff]: \"inf ((c1;c2)#cs) s = inf (c1#c2#cs) s\"", "lemma [iff]: \"inf ((IF b THEN c1 ELSE c2)#cs) s =\n              inf ((if b s then c1 else c2)#cs) s\"", "lemma [simp]:\n \"inf ((WHILE b DO c)#cs) s =\n  (if b s then inf (c#(WHILE b DO c)#cs) s else inf cs s)\"", "lemma [iff]: \"inf (CALL#cs) s =  inf (body#cs) s\"", "lemma [iff]: \"inf ((LOCAL f;c;g)#cs) s =\n              inf (c#Do(\\<lambda>t. {g s t})#cs) (f s)\"", "lemma exec1_only1_aux: \"(ccs,s) \\<rightarrow> (cs',t) \\<Longrightarrow>\n                    \\<forall>c cs. ccs = c#cs \\<longrightarrow> (\\<exists>cs1. cs' = cs1 @ cs)\"", "lemma exec1_only1: \"(c#cs,s) \\<rightarrow> (cs',t) \\<Longrightarrow> \\<exists>cs1. cs' = cs1 @ cs\"", "lemma exec1_drop_suffix_aux:\n\"(cs12,s) \\<rightarrow> (cs1'2,s') \\<Longrightarrow> \\<forall>cs1 cs2 cs1'.\n cs12 = cs1@cs2 & cs1'2 = cs1'@cs2 & cs1 \\<noteq> [] \\<longrightarrow> (cs1,s) \\<rightarrow> (cs1',s')\"", "lemma exec1_drop_suffix:\n \"(cs1@cs2,s) \\<rightarrow> (cs1'@cs2,s') \\<Longrightarrow> cs1 \\<noteq> [] \\<Longrightarrow> (cs1,s) \\<rightarrow> (cs1',s')\"", "lemma execs_drop_suffix[rule_format(no_asm)]:\n  \"\\<lbrakk> f 0 = (c#cs,s);\\<forall>i. f(i) \\<rightarrow> f(Suc i) \\<rbrakk> \\<Longrightarrow>\n   (\\<forall>i<k. p i \\<noteq> [] & fst(f i) = p i@cs) \\<longrightarrow> fst(f k) = p k@cs\n   \\<longrightarrow> ([c],s) \\<rightarrow>\\<^sup>* (p k,snd(f k))\"", "lemma execs_drop_suffix0:\n  \"\\<lbrakk> f 0 = (c#cs,s);\\<forall>i. f(i) \\<rightarrow> f(Suc i); \\<forall>i<k. p i \\<noteq> [] & fst(f i) = p i@cs;\n     fst(f k) = cs; p k = [] \\<rbrakk> \\<Longrightarrow> ([c],s) \\<rightarrow>\\<^sup>* ([],snd(f k))\"", "lemma skolemize1: \"\\<forall>x. P x \\<longrightarrow> (\\<exists>y. Q x y) \\<Longrightarrow> \\<exists>f.\\<forall>x. P x \\<longrightarrow> Q x (f x)\"", "lemma least_aux: \"\\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        fst(f k) = cs; \\<forall>i<k. fst(f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i \\<le> k. (\\<exists>p. (p \\<noteq> []) = (i < k) & fst(f i) = p @ cs)\"", "lemma least_lem: \"\\<lbrakk>f 0 = (c#cs,s); \\<forall>i. f i \\<rightarrow> f(Suc i); \\<exists>i. fst(f i) = cs \\<rbrakk>\n       \\<Longrightarrow> \\<exists>k. fst(f k) = cs & ([c],s) \\<rightarrow>\\<^sup>* ([],snd(f k))\"", "lemma skolemize2: \"\\<forall>x.\\<exists>y. P x y \\<Longrightarrow> \\<exists>f.\\<forall>x. P x (f x)\"", "lemma inf_cases: \"inf (c#cs) s \\<Longrightarrow> inf [c] s \\<or> (\\<exists>t. s -c\\<rightarrow> t \\<and> inf cs t)\"", "lemma termi_impl_not_inf: \"c \\<down> s \\<Longrightarrow> \\<not> inf [c] s\"", "lemma termi_impl_no_inf_chain:\n \"c\\<down>s \\<Longrightarrow> \\<not>(\\<exists>f. f 0 = ([c],s) \\<and> (\\<forall>i::nat. (f i, f(i+1)) : exec1^+))\"", "lemma wf_termi_call_steps: \"wf termi_call_steps\"", "lemma CALL_lemma:\n\"{(\\<lambda>z s. (z=s \\<and> body\\<down>s) \\<and> (s,t) \\<in> termi_call_steps, CALL, \\<lambda>z s. z -body\\<rightarrow> s)} \\<turnstile>\\<^sub>t\n {\\<lambda>z s. (z=s \\<and> body\\<down>t) \\<and> (\\<exists>cs. ([body],t) \\<rightarrow>\\<^sup>* (c#cs,s))} c {\\<lambda>z s. z -c\\<rightarrow> s}\"", "lemma CALL_cor:\n\"{(\\<lambda>z s. (z=s \\<and> body\\<down>s) \\<and> (s,t) \\<in> termi_call_steps, CALL, \\<lambda>z s. z -body\\<rightarrow> s)} \\<turnstile>\\<^sub>t\n {\\<lambda>z s. (z=s \\<and> body\\<down>s) \\<and> s = t} body {\\<lambda>z s. z -body\\<rightarrow> s}\"", "lemma MGT_CALL: \"{} \\<turnstile>\\<^sub>t MGT\\<^sub>t CALL\"", "theorem \"{} \\<Turnstile>\\<^sub>t {P}c{Q}  \\<Longrightarrow>  {} \\<turnstile>\\<^sub>t {P}c{Q::state assn}\""], "translations": [["", "lemma \"((\\<forall>s t. (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow> (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n            (\\<forall>s. (\\<exists>z. P z s) \\<longrightarrow> (\\<exists>z. P' z s)))\n        = (\\<forall>z s. P z s \\<longrightarrow> (\\<forall>t.\\<exists>z'. P' z' s \\<and> (Q' z' t \\<longrightarrow> Q z t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>s t.\n         (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n         (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n     (\\<forall>s.\n         (\\<exists>z. P z s) \\<longrightarrow> (\\<exists>z. P' z s))) =\n    (\\<forall>z s.\n        P z s \\<longrightarrow>\n        (\\<forall>t.\n            \\<exists>z'. P' z' s \\<and> (Q' z' t \\<longrightarrow> Q z t)))", "by blast"], ["", "text\\<open>The key difference to the work by Kleymann (and America and de\nBoer) is that soundness and completeness are shown for arbitrary,\ni.e.\\ unbounded nondeterminism.  This is a significant extension and\nappears to have been an open problem. The details are found below and\nare explained in a separate paper~\\cite{Nipkow-CSL02}.\\<close>"], ["", "lemma strengthen_pre:\n \"\\<lbrakk> \\<forall>z s. P' z s \\<longrightarrow> P z s; C \\<turnstile>\\<^sub>t {P}c{Q}  \\<rbrakk> \\<Longrightarrow> C \\<turnstile>\\<^sub>t {P'}c{Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>z s. P' z s \\<longrightarrow> P z s;\n     C \\<turnstile>\\<^sub>t {P} c {Q}\\<rbrakk>\n    \\<Longrightarrow> C \\<turnstile>\\<^sub>t {P'} c {Q}", "by(rule thoare.Conseq, assumption, blast)"], ["", "lemma weaken_post:\n \"\\<lbrakk> C \\<turnstile>\\<^sub>t {P}c{Q}; \\<forall>z s. Q z s \\<longrightarrow> Q' z s \\<rbrakk> \\<Longrightarrow> C \\<turnstile>\\<^sub>t {P}c{Q'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<turnstile>\\<^sub>t {P} c {Q};\n     \\<forall>z s. Q z s \\<longrightarrow> Q' z s\\<rbrakk>\n    \\<Longrightarrow> C \\<turnstile>\\<^sub>t {P} c {Q'}", "by(erule thoare.Conseq, blast)"], ["", "lemmas tvalid_defs = tvalid_def ctvalid_def valid_defs"], ["", "lemma [iff]:\n\"(\\<Turnstile>\\<^sub>t {\\<lambda>z s. \\<exists>n. P n z s}c{Q}) = (\\<forall>n. \\<Turnstile>\\<^sub>t {P n}c{Q})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Turnstile>\\<^sub>t {\\<lambda>z s. \\<exists>n. P n z s} c {Q}) =\n    (\\<forall>n. \\<Turnstile>\\<^sub>t {P n} c {Q})", "apply(unfold tvalid_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>s t.\n         s -c\\<rightarrow> t \\<longrightarrow>\n         (\\<forall>z. (\\<exists>n. P n z s) \\<longrightarrow> Q z t)) \\<and>\n     (\\<forall>z s. (\\<exists>n. P n z s) \\<longrightarrow> c \\<down> s)) =\n    (\\<forall>n.\n        (\\<forall>s t.\n            s -c\\<rightarrow> t \\<longrightarrow>\n            (\\<forall>z. P n z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>z s. P n z s \\<longrightarrow> c \\<down> s))", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [iff]:\n\"(\\<Turnstile>\\<^sub>t {\\<lambda>z s. P z s \\<and> P'}c{Q}) = (P' \\<longrightarrow> \\<Turnstile>\\<^sub>t {P}c{Q})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Turnstile>\\<^sub>t {\\<lambda>z s. P z s \\<and> P'} c {Q}) =\n    (P' \\<longrightarrow> \\<Turnstile>\\<^sub>t {P} c {Q})", "apply(unfold tvalid_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>s t.\n         s -c\\<rightarrow> t \\<longrightarrow>\n         (\\<forall>z. P z s \\<and> P' \\<longrightarrow> Q z t)) \\<and>\n     (\\<forall>z s. P z s \\<and> P' \\<longrightarrow> c \\<down> s)) =\n    (P' \\<longrightarrow>\n     (\\<forall>s t.\n         s -c\\<rightarrow> t \\<longrightarrow>\n         (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n     (\\<forall>z s. P z s \\<longrightarrow> c \\<down> s))", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [iff]: \"(\\<Turnstile>\\<^sub>t {P}CALL{Q}) = (\\<Turnstile>\\<^sub>t {P}body{Q})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Turnstile>\\<^sub>t {P} CALL {Q}) =\n    (\\<Turnstile>\\<^sub>t {P} body {Q})", "apply(unfold tvalid_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>s t.\n         s -CALL\\<rightarrow> t \\<longrightarrow>\n         (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n     (\\<forall>z s. P z s \\<longrightarrow> CALL \\<down> s)) =\n    ((\\<forall>s t.\n         s -body\\<rightarrow> t \\<longrightarrow>\n         (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n     (\\<forall>z s. P z s \\<longrightarrow> body \\<down> s))", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem \"C \\<turnstile>\\<^sub>t {P}c{Q}  \\<Longrightarrow>  C \\<Turnstile>\\<^sub>t {P}c{Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<turnstile>\\<^sub>t {P} c {Q} \\<Longrightarrow>\n    C \\<Turnstile>\\<^sub>t {P} c {Q}", "apply(erule thoare.induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>C f P.\n       C \\<Turnstile>\\<^sub>t {\\<lambda>a b.\n                                  (\\<forall>t\\<in>f b. P a t) \\<and>\n                                  f b \\<noteq> {}}\n       Do f {P}\n 2. \\<And>C P c1 Q c2 R.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P} c1 {Q};\n        C \\<Turnstile>\\<^sub>t {P} c1 {Q};\n        C \\<turnstile>\\<^sub>t {Q} c2 {R};\n        C \\<Turnstile>\\<^sub>t {Q} c2 {R}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c1; c2 {R}\n 3. \\<And>C P b c Q d.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. P z s \\<and> b s} c {Q};\n        C \\<Turnstile>\\<^sub>t {\\<lambda>a c. P a c \\<and> b c} c {Q};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. P z s \\<and> \\<not> b s} d {Q};\n        C \\<Turnstile>\\<^sub>t {\\<lambda>a c. P a c \\<and> \\<not> b c} d\n        {Q}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} IF b THEN c ELSE d {Q}\n 4. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 5. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 6. \\<And>P Q. {(P, CALL, Q)} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 7. \\<And>C P' c Q' P Q.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P'} c {Q'};\n        C \\<Turnstile>\\<^sub>t {P'} c {Q'};\n        (\\<forall>s t.\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>s.\n            (\\<exists>z. P z s) \\<longrightarrow>\n            (\\<exists>z. P' z s))\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c {Q}\n 8. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(simp only:tvalid_defs)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>C f P.\n       (\\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s.\n               P' z s \\<longrightarrow> c' \\<down> s)) \\<longrightarrow>\n       (\\<forall>s t.\n           s -Do f\\<rightarrow> t \\<longrightarrow>\n           (\\<forall>z.\n               Ball (f s) (P z) \\<and> f s \\<noteq> {} \\<longrightarrow>\n               P z t)) \\<and>\n       (\\<forall>z s.\n           Ball (f s) (P z) \\<and> f s \\<noteq> {} \\<longrightarrow>\n           Do f \\<down> s)\n 2. \\<And>C P c1 Q c2 R.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P} c1 {Q};\n        C \\<Turnstile>\\<^sub>t {P} c1 {Q};\n        C \\<turnstile>\\<^sub>t {Q} c2 {R};\n        C \\<Turnstile>\\<^sub>t {Q} c2 {R}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c1; c2 {R}\n 3. \\<And>C P b c Q d.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. P z s \\<and> b s} c {Q};\n        C \\<Turnstile>\\<^sub>t {\\<lambda>a c. P a c \\<and> b c} c {Q};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. P z s \\<and> \\<not> b s} d {Q};\n        C \\<Turnstile>\\<^sub>t {\\<lambda>a c. P a c \\<and> \\<not> b c} d\n        {Q}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} IF b THEN c ELSE d {Q}\n 4. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 5. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 6. \\<And>P Q. {(P, CALL, Q)} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 7. \\<And>C P' c Q' P Q.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P'} c {Q'};\n        C \\<Turnstile>\\<^sub>t {P'} c {Q'};\n        (\\<forall>s t.\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>s.\n            (\\<exists>z. P z s) \\<longrightarrow>\n            (\\<exists>z. P' z s))\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c {Q}\n 8. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply fast"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>C P c1 Q c2 R.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P} c1 {Q};\n        C \\<Turnstile>\\<^sub>t {P} c1 {Q};\n        C \\<turnstile>\\<^sub>t {Q} c2 {R};\n        C \\<Turnstile>\\<^sub>t {Q} c2 {R}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c1; c2 {R}\n 2. \\<And>C P b c Q d.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. P z s \\<and> b s} c {Q};\n        C \\<Turnstile>\\<^sub>t {\\<lambda>a c. P a c \\<and> b c} c {Q};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. P z s \\<and> \\<not> b s} d {Q};\n        C \\<Turnstile>\\<^sub>t {\\<lambda>a c. P a c \\<and> \\<not> b c} d\n        {Q}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} IF b THEN c ELSE d {Q}\n 3. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 4. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 5. \\<And>P Q. {(P, CALL, Q)} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 6. \\<And>C P' c Q' P Q.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P'} c {Q'};\n        C \\<Turnstile>\\<^sub>t {P'} c {Q'};\n        (\\<forall>s t.\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>s.\n            (\\<exists>z. P z s) \\<longrightarrow>\n            (\\<exists>z. P' z s))\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c {Q}\n 7. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(simp only:tvalid_defs)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>C P c1 Q c2 R.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P} c1 {Q};\n        (\\<forall>(P', c', Q')\\<in>C.\n            (\\<forall>s t.\n                s -c'\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n            (\\<forall>z s.\n                P' z s \\<longrightarrow> c' \\<down> s)) \\<longrightarrow>\n        (\\<forall>s t.\n            s -c1\\<rightarrow> t \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>z s. P z s \\<longrightarrow> c1 \\<down> s);\n        C \\<turnstile>\\<^sub>t {Q} c2 {R};\n        (\\<forall>(P', c', Q')\\<in>C.\n            (\\<forall>s t.\n                s -c'\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n            (\\<forall>z s.\n                P' z s \\<longrightarrow> c' \\<down> s)) \\<longrightarrow>\n        (\\<forall>s t.\n            s -c2\\<rightarrow> t \\<longrightarrow>\n            (\\<forall>z. Q z s \\<longrightarrow> R z t)) \\<and>\n        (\\<forall>z s. Q z s \\<longrightarrow> c2 \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>(P', c', Q')\\<in>C.\n                             (\\<forall>s t.\n                                 s -c'\\<rightarrow> t \\<longrightarrow>\n                                 (\\<forall>z.\n                                     P' z s \\<longrightarrow>\n                                     Q' z t)) \\<and>\n                             (\\<forall>z s.\n                                 P' z s \\<longrightarrow>\n                                 c' \\<down> s)) \\<longrightarrow>\n                         (\\<forall>s t.\n                             s -c1; c2\\<rightarrow> t \\<longrightarrow>\n                             (\\<forall>z.\n                                 P z s \\<longrightarrow> R z t)) \\<and>\n                         (\\<forall>z s.\n                             P z s \\<longrightarrow> (c1; c2) \\<down> s)\n 2. \\<And>C P b c Q d.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. P z s \\<and> b s} c {Q};\n        C \\<Turnstile>\\<^sub>t {\\<lambda>a c. P a c \\<and> b c} c {Q};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. P z s \\<and> \\<not> b s} d {Q};\n        C \\<Turnstile>\\<^sub>t {\\<lambda>a c. P a c \\<and> \\<not> b c} d\n        {Q}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} IF b THEN c ELSE d {Q}\n 3. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 4. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 5. \\<And>P Q. {(P, CALL, Q)} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 6. \\<And>C P' c Q' P Q.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P'} c {Q'};\n        C \\<Turnstile>\\<^sub>t {P'} c {Q'};\n        (\\<forall>s t.\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>s.\n            (\\<exists>z. P z s) \\<longrightarrow>\n            (\\<exists>z. P' z s))\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c {Q}\n 7. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply fast"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>C P b c Q d.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. P z s \\<and> b s} c {Q};\n        C \\<Turnstile>\\<^sub>t {\\<lambda>a c. P a c \\<and> b c} c {Q};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. P z s \\<and> \\<not> b s} d {Q};\n        C \\<Turnstile>\\<^sub>t {\\<lambda>a c. P a c \\<and> \\<not> b c} d\n        {Q}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} IF b THEN c ELSE d {Q}\n 2. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>P Q. {(P, CALL, Q)} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 5. \\<And>C P' c Q' P Q.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P'} c {Q'};\n        C \\<Turnstile>\\<^sub>t {P'} c {Q'};\n        (\\<forall>s t.\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>s.\n            (\\<exists>z. P z s) \\<longrightarrow>\n            (\\<exists>z. P' z s))\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c {Q}\n 6. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(simp only:tvalid_defs)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>C P b c Q d.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. P z s \\<and> b s} c {Q};\n        (\\<forall>(P', c', Q')\\<in>C.\n            (\\<forall>s t.\n                s -c'\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n            (\\<forall>z s.\n                P' z s \\<longrightarrow> c' \\<down> s)) \\<longrightarrow>\n        (\\<forall>s t.\n            s -c\\<rightarrow> t \\<longrightarrow>\n            (\\<forall>z. P z s \\<and> b s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>z s. P z s \\<and> b s \\<longrightarrow> c \\<down> s);\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. P z s \\<and> \\<not> b s} d {Q};\n        (\\<forall>(P', c', Q')\\<in>C.\n            (\\<forall>s t.\n                s -c'\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n            (\\<forall>z s.\n                P' z s \\<longrightarrow> c' \\<down> s)) \\<longrightarrow>\n        (\\<forall>s t.\n            s -d\\<rightarrow> t \\<longrightarrow>\n            (\\<forall>z.\n                P z s \\<and> \\<not> b s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>z s.\n            P z s \\<and> \\<not> b s \\<longrightarrow> d \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>(P', c', Q')\\<in>C.\n                             (\\<forall>s t.\n                                 s -c'\\<rightarrow> t \\<longrightarrow>\n                                 (\\<forall>z.\n                                     P' z s \\<longrightarrow>\n                                     Q' z t)) \\<and>\n                             (\\<forall>z s.\n                                 P' z s \\<longrightarrow>\n                                 c' \\<down> s)) \\<longrightarrow>\n                         (\\<forall>s t.\n                             s -IF b THEN c ELSE d\\<rightarrow>\n                             t \\<longrightarrow>\n                             (\\<forall>z.\n                                 P z s \\<longrightarrow> Q z t)) \\<and>\n                         (\\<forall>z s.\n                             P z s \\<longrightarrow>\n                             IF b THEN c ELSE d \\<down> s)\n 2. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>P Q. {(P, CALL, Q)} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 5. \\<And>C P' c Q' P Q.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P'} c {Q'};\n        C \\<Turnstile>\\<^sub>t {P'} c {Q'};\n        (\\<forall>s t.\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>s.\n            (\\<exists>z. P z s) \\<longrightarrow>\n            (\\<exists>z. P' z s))\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c {Q}\n 6. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 3. \\<And>P Q. {(P, CALL, Q)} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P' c Q' P Q.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P'} c {Q'};\n        C \\<Turnstile>\\<^sub>t {P'} c {Q'};\n        (\\<forall>s t.\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>s.\n            (\\<exists>z. P z s) \\<longrightarrow>\n            (\\<exists>z. P' z s))\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c {Q}\n 5. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "prefer 3"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>P Q. {(P, CALL, Q)} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 2. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P' c Q' P Q.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P'} c {Q'};\n        C \\<Turnstile>\\<^sub>t {P'} c {Q'};\n        (\\<forall>s t.\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>s.\n            (\\<exists>z. P z s) \\<longrightarrow>\n            (\\<exists>z. P' z s))\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c {Q}\n 5. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(simp add:tvalid_defs)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 3. \\<And>C P' c Q' P Q.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P'} c {Q'};\n        C \\<Turnstile>\\<^sub>t {P'} c {Q'};\n        (\\<forall>s t.\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>s.\n            (\\<exists>z. P z s) \\<longrightarrow>\n            (\\<exists>z. P' z s))\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "prefer 3"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>C P' c Q' P Q.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P'} c {Q'};\n        C \\<Turnstile>\\<^sub>t {P'} c {Q'};\n        (\\<forall>s t.\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>s.\n            (\\<exists>z. P z s) \\<longrightarrow>\n            (\\<exists>z. P' z s))\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} c {Q}\n 2. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(simp only:tvalid_defs)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>C P' c Q' P Q.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t {P'} c {Q'};\n        (\\<forall>(P', c', Q')\\<in>C.\n            (\\<forall>s t.\n                s -c'\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n            (\\<forall>z s.\n                P' z s \\<longrightarrow> c' \\<down> s)) \\<longrightarrow>\n        (\\<forall>s t.\n            s -c\\<rightarrow> t \\<longrightarrow>\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n        (\\<forall>z s. P' z s \\<longrightarrow> c \\<down> s);\n        (\\<forall>s t.\n            (\\<forall>z. P' z s \\<longrightarrow> Q' z t) \\<longrightarrow>\n            (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n        (\\<forall>s.\n            (\\<exists>z. P z s) \\<longrightarrow>\n            (\\<exists>z. P' z s))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>(P', c', Q')\\<in>C.\n                             (\\<forall>s t.\n                                 s -c'\\<rightarrow> t \\<longrightarrow>\n                                 (\\<forall>z.\n                                     P' z s \\<longrightarrow>\n                                     Q' z t)) \\<and>\n                             (\\<forall>z s.\n                                 P' z s \\<longrightarrow>\n                                 c' \\<down> s)) \\<longrightarrow>\n                         (\\<forall>s t.\n                             s -c\\<rightarrow> t \\<longrightarrow>\n                             (\\<forall>z.\n                                 P z s \\<longrightarrow> Q z t)) \\<and>\n                         (\\<forall>z s. P z s \\<longrightarrow> c \\<down> s)\n 2. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           C \\<Turnstile>\\<^sub>t {\\<lambda>a c.\nP a c \\<and> b c \\<and> s' = c}\n           c {\\<lambda>a b. P a b \\<and> (b, s') \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> C \\<Turnstile>\\<^sub>t {P} WHILE b DO c\n                         {\\<lambda>a c. P a c \\<and> \\<not> b c}\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 3. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(simp only:tvalid_defs)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           ((\\<forall>(P', c', Q')\\<in>C.\n                (\\<forall>s t.\n                    s -c'\\<rightarrow> t \\<longrightarrow>\n                    (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n                (\\<forall>z s.\n                    P' z s \\<longrightarrow>\n                    c' \\<down> s)) \\<longrightarrow>\n            (\\<forall>s t.\n                s -c\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                    P z t \\<and> (t, s') \\<in> r)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                c \\<down> s))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>(P', c', Q')\\<in>C.\n                             (\\<forall>s t.\n                                 s -c'\\<rightarrow> t \\<longrightarrow>\n                                 (\\<forall>z.\n                                     P' z s \\<longrightarrow>\n                                     Q' z t)) \\<and>\n                             (\\<forall>z s.\n                                 P' z s \\<longrightarrow>\n                                 c' \\<down> s)) \\<longrightarrow>\n                         (\\<forall>s t.\n                             s -WHILE b DO c\\<rightarrow>\n                             t \\<longrightarrow>\n                             (\\<forall>z.\n                                 P z s \\<longrightarrow>\n                                 P z t \\<and> \\<not> b t)) \\<and>\n                         (\\<forall>z s.\n                             P z s \\<longrightarrow> WHILE b DO c \\<down> s)\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 3. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(rule impI, rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           ((\\<forall>(P', c', Q')\\<in>C.\n                (\\<forall>s t.\n                    s -c'\\<rightarrow> t \\<longrightarrow>\n                    (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n                (\\<forall>z s.\n                    P' z s \\<longrightarrow>\n                    c' \\<down> s)) \\<longrightarrow>\n            (\\<forall>s t.\n                s -c\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                    P z t \\<and> (t, s') \\<in> r)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            s -WHILE b DO c\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P z s \\<longrightarrow>\n                                P z t \\<and> \\<not> b t)\n 2. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           ((\\<forall>(P', c', Q')\\<in>C.\n                (\\<forall>s t.\n                    s -c'\\<rightarrow> t \\<longrightarrow>\n                    (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n                (\\<forall>z s.\n                    P' z s \\<longrightarrow>\n                    c' \\<down> s)) \\<longrightarrow>\n            (\\<forall>s t.\n                s -c\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                    P z t \\<and> (t, s') \\<in> r)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z s.\n                            P z s \\<longrightarrow> WHILE b DO c \\<down> s\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(rule allI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r C P b c s.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           ((\\<forall>(P', c', Q')\\<in>C.\n                (\\<forall>s t.\n                    s -c'\\<rightarrow> t \\<longrightarrow>\n                    (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n                (\\<forall>z s.\n                    P' z s \\<longrightarrow>\n                    c' \\<down> s)) \\<longrightarrow>\n            (\\<forall>s t.\n                s -c\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                    P z t \\<and> (t, s') \\<in> r)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t.\n                            s -WHILE b DO c\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P z s \\<longrightarrow>\n                                P z t \\<and> \\<not> b t)\n 2. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           ((\\<forall>(P', c', Q')\\<in>C.\n                (\\<forall>s t.\n                    s -c'\\<rightarrow> t \\<longrightarrow>\n                    (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n                (\\<forall>z s.\n                    P' z s \\<longrightarrow>\n                    c' \\<down> s)) \\<longrightarrow>\n            (\\<forall>s t.\n                s -c\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                    P z t \\<and> (t, s') \\<in> r)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z s.\n                            P z s \\<longrightarrow> WHILE b DO c \\<down> s\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(erule wf_induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r C P b c s x.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           (\\<forall>t.\n               y -WHILE b DO c\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z.\n                   P z y \\<longrightarrow>\n                   P z t \\<and> \\<not> b t))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t.\n                            x -WHILE b DO c\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P z x \\<longrightarrow>\n                                P z t \\<and> \\<not> b t)\n 2. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           ((\\<forall>(P', c', Q')\\<in>C.\n                (\\<forall>s t.\n                    s -c'\\<rightarrow> t \\<longrightarrow>\n                    (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n                (\\<forall>z s.\n                    P' z s \\<longrightarrow>\n                    c' \\<down> s)) \\<longrightarrow>\n            (\\<forall>s t.\n                s -c\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                    P z t \\<and> (t, s') \\<in> r)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z s.\n                            P z s \\<longrightarrow> WHILE b DO c \\<down> s\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply clarify"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r C P b c s x t z.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           (\\<forall>t.\n               y -WHILE b DO c\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z.\n                   P z y \\<longrightarrow> P z t \\<and> \\<not> b t));\n        x -WHILE b DO c\\<rightarrow> t; P z x\\<rbrakk>\n       \\<Longrightarrow> P z t \\<and> \\<not> b t\n 2. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           ((\\<forall>(P', c', Q')\\<in>C.\n                (\\<forall>s t.\n                    s -c'\\<rightarrow> t \\<longrightarrow>\n                    (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n                (\\<forall>z s.\n                    P' z s \\<longrightarrow>\n                    c' \\<down> s)) \\<longrightarrow>\n            (\\<forall>s t.\n                s -c\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                    P z t \\<and> (t, s') \\<in> r)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z s.\n                            P z s \\<longrightarrow> WHILE b DO c \\<down> s\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(drule unfold_while[THEN iffD1])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r C P b c s x t z.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           (\\<forall>t.\n               y -WHILE b DO c\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z.\n                   P z y \\<longrightarrow> P z t \\<and> \\<not> b t));\n        P z x;\n        x -IF b THEN c; WHILE b DO c ELSE Do (\\<lambda>s. {s})\\<rightarrow>\n        t\\<rbrakk>\n       \\<Longrightarrow> P z t \\<and> \\<not> b t\n 2. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           ((\\<forall>(P', c', Q')\\<in>C.\n                (\\<forall>s t.\n                    s -c'\\<rightarrow> t \\<longrightarrow>\n                    (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n                (\\<forall>z s.\n                    P' z s \\<longrightarrow>\n                    c' \\<down> s)) \\<longrightarrow>\n            (\\<forall>s t.\n                s -c\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                    P z t \\<and> (t, s') \\<in> r)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z s.\n                            P z s \\<longrightarrow> WHILE b DO c \\<down> s\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply (simp split: if_split_asm)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r C P b c x t z.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   (\\<forall>s t.\n                       s -c\\<rightarrow> t \\<longrightarrow>\n                       (\\<forall>z.\n                           P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                           P z t \\<and> (t, s) \\<in> r)) \\<and>\n                   ((\\<exists>z. P z s') \\<and> b s' \\<longrightarrow>\n                    c \\<down> s');\n        \\<forall>x\\<in>C.\n           case x of\n           (P', c', Q') \\<Rightarrow>\n             (\\<forall>s t.\n                 s -c'\\<rightarrow> t \\<longrightarrow>\n                 (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n             (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           (\\<forall>t.\n               y -WHILE b DO c\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z.\n                   P z y \\<longrightarrow> P z t \\<and> \\<not> b t));\n        P z x; b x;\n        \\<exists>ta.\n           x -c\\<rightarrow> ta \\<and> ta -WHILE b DO c\\<rightarrow>\n           t\\<rbrakk>\n       \\<Longrightarrow> P z t \\<and> \\<not> b t\n 2. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           ((\\<forall>(P', c', Q')\\<in>C.\n                (\\<forall>s t.\n                    s -c'\\<rightarrow> t \\<longrightarrow>\n                    (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n                (\\<forall>z s.\n                    P' z s \\<longrightarrow>\n                    c' \\<down> s)) \\<longrightarrow>\n            (\\<forall>s t.\n                s -c\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                    P z t \\<and> (t, s') \\<in> r)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z s.\n                            P z s \\<longrightarrow> WHILE b DO c \\<down> s\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r C P b c.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           ((\\<forall>(P', c', Q')\\<in>C.\n                (\\<forall>s t.\n                    s -c'\\<rightarrow> t \\<longrightarrow>\n                    (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n                (\\<forall>z s.\n                    P' z s \\<longrightarrow>\n                    c' \\<down> s)) \\<longrightarrow>\n            (\\<forall>s t.\n                s -c\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                    P z t \\<and> (t, s') \\<in> r)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>z s.\n                            P z s \\<longrightarrow> WHILE b DO c \\<down> s\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 3. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(rule allI, rule allI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r C P b c z s.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           C \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n           {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n           ((\\<forall>(P', c', Q')\\<in>C.\n                (\\<forall>s t.\n                    s -c'\\<rightarrow> t \\<longrightarrow>\n                    (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n                (\\<forall>z s.\n                    P' z s \\<longrightarrow>\n                    c' \\<down> s)) \\<longrightarrow>\n            (\\<forall>s t.\n                s -c\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                    P z t \\<and> (t, s') \\<in> r)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> P z s \\<longrightarrow> WHILE b DO c \\<down> s\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 3. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(erule wf_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r C P b c z s x.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y\\<rbrakk>\n       \\<Longrightarrow> P z x \\<longrightarrow> WHILE b DO c \\<down> x\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 3. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r C P b c z s x.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x\\<rbrakk>\n       \\<Longrightarrow> WHILE b DO c \\<down> x\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 3. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(case_tac \"b x\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r C P b c z s x.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x; b x\\<rbrakk>\n       \\<Longrightarrow> WHILE b DO c \\<down> x\n 2. \\<And>r C P b c z s x.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x; \\<not> b x\\<rbrakk>\n       \\<Longrightarrow> WHILE b DO c \\<down> x\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r C P b c z s x.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x; \\<not> b x\\<rbrakk>\n       \\<Longrightarrow> WHILE b DO c \\<down> x\n 2. \\<And>r C P b c z s x.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x; b x\\<rbrakk>\n       \\<Longrightarrow> WHILE b DO c \\<down> x\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply (erule termi.WhileFalse)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r C P b c z s x.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x; b x\\<rbrakk>\n       \\<Longrightarrow> WHILE b DO c \\<down> x\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 3. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(rule termi.WhileTrue, assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r C P b c z s x.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x; b x\\<rbrakk>\n       \\<Longrightarrow> c \\<down> x\n 2. \\<And>r C P b c z s x t.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x; b x; x -c\\<rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> WHILE b DO c \\<down> t\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r C P b c z s x t.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x; b x; x -c\\<rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> WHILE b DO c \\<down> t\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 3. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply (subgoal_tac \"(t,x):r\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>r C P b c z s x t.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x; b x; x -c\\<rightarrow> t; (t, x) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> WHILE b DO c \\<down> t\n 2. \\<And>r C P b c z s x t.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x; b x; x -c\\<rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> (t, x) \\<in> r\n 3. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 4. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply fast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r C P b c z s x t.\n       \\<lbrakk>\\<forall>s'.\n                   C \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> b s \\<and> s' = s} c\n                   {\\<lambda>z s. P z s \\<and> (s, s') \\<in> r} \\<and>\n                   ((\\<forall>(P', c', Q')\\<in>C.\n                        (\\<forall>s t.\n                            s -c'\\<rightarrow> t \\<longrightarrow>\n                            (\\<forall>z.\n                                P' z s \\<longrightarrow> Q' z t)) \\<and>\n                        (\\<forall>z s.\n                            P' z s \\<longrightarrow>\n                            c' \\<down> s)) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -c\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                            P z t \\<and> (t, s') \\<in> r)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> b s \\<and> s' = s \\<longrightarrow>\n                        c \\<down> s));\n        \\<forall>(P', c', Q')\\<in>C.\n           (\\<forall>s t.\n               s -c'\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q' z t)) \\<and>\n           (\\<forall>z s. P' z s \\<longrightarrow> c' \\<down> s);\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           P z y \\<longrightarrow> WHILE b DO c \\<down> y;\n        P z x; b x; x -c\\<rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> (t, x) \\<in> r\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 3. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL, Q)} \n           \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P} CALL {Q}\n 2. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(simp (no_asm_use) add:ctvalid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           (\\<Turnstile>\\<^sub>t {\\<lambda>z s.\n                                     P z s \\<and> (s, s') \\<in> r}\n            body {Q} \\<longrightarrow>\n            \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n            {Q})\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>t {P} body {Q}\n 2. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(subgoal_tac \"\\<forall>n. \\<Turnstile>\\<^sub>t {\\<lambda>z s. P z s \\<and> s=n} body {Q}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           (\\<Turnstile>\\<^sub>t {\\<lambda>z s.\n                                     P z s \\<and> (s, s') \\<in> r}\n            body {Q} \\<longrightarrow>\n            \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n            {Q});\n        \\<forall>n. \\<Turnstile>\\<^sub>t {\\<lambda>z s. P z s \\<and> s = n}\n           body {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>t {P} body {Q}\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           (\\<Turnstile>\\<^sub>t {\\<lambda>z s.\n                                     P z s \\<and> (s, s') \\<in> r}\n            body {Q} \\<longrightarrow>\n            \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n            {Q})\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            \\<Turnstile>\\<^sub>t {\\<lambda>z s.\n               P z s \\<and> s = n}\n                            body {Q}\n 3. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(simp (no_asm_use) add:tvalid_defs)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           ((\\<forall>s t.\n                s -body\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> (s, s') \\<in> r \\<longrightarrow>\n                    Q z t)) \\<and>\n            (\\<forall>z s.\n                P z s \\<and> (s, s') \\<in> r \\<longrightarrow>\n                body \\<down> s) \\<longrightarrow>\n            (\\<forall>s t.\n                s -body\\<rightarrow> t \\<longrightarrow>\n                (\\<forall>z.\n                    P z s \\<and> s = s' \\<longrightarrow> Q z t)) \\<and>\n            ((\\<exists>z. P z s') \\<longrightarrow> body \\<down> s'));\n        \\<forall>n.\n           (\\<forall>s t.\n               s -body\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z.\n                   P z s \\<and> s = n \\<longrightarrow> Q z t)) \\<and>\n           ((\\<exists>z. P z n) \\<longrightarrow> body \\<down> n)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s t.\n                             s -body\\<rightarrow> t \\<longrightarrow>\n                             (\\<forall>z.\n                                 P z s \\<longrightarrow> Q z t)) \\<and>\n                         (\\<forall>z s.\n                             P z s \\<longrightarrow> body \\<down> s)\n 2. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           (\\<Turnstile>\\<^sub>t {\\<lambda>z s.\n                                     P z s \\<and> (s, s') \\<in> r}\n            body {Q} \\<longrightarrow>\n            \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n            {Q})\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            \\<Turnstile>\\<^sub>t {\\<lambda>z s.\n               P z s \\<and> s = n}\n                            body {Q}\n 3. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r P Q.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           (\\<Turnstile>\\<^sub>t {\\<lambda>z s.\n                                     P z s \\<and> (s, s') \\<in> r}\n            body {Q} \\<longrightarrow>\n            \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n            {Q})\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            \\<Turnstile>\\<^sub>t {\\<lambda>z s.\n               P z s \\<and> s = n}\n                            body {Q}\n 2. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(rule allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r P Q n.\n       \\<lbrakk>wf r;\n        \\<forall>s'.\n           {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n             Q)} \\<turnstile>\\<^sub>t\n           {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n           (\\<Turnstile>\\<^sub>t {\\<lambda>z s.\n                                     P z s \\<and> (s, s') \\<in> r}\n            body {Q} \\<longrightarrow>\n            \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'} body\n            {Q})\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>t {\\<lambda>z s.\n            P z s \\<and> s = n}\n                         body {Q}\n 2. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(erule wf_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r P Q n x.\n       \\<lbrakk>\\<forall>s'.\n                   {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n                     Q)} \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n                   (\\<Turnstile>\\<^sub>t {\\<lambda>z s.\n       P z s \\<and> (s, s') \\<in> r}\n                    body {Q} \\<longrightarrow>\n                    \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a b \\<and> b = s'}\n                    body {Q});\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           \\<Turnstile>\\<^sub>t {\\<lambda>z s. P z s \\<and> s = y} body\n           {Q}\\<rbrakk>\n       \\<Longrightarrow> \\<Turnstile>\\<^sub>t {\\<lambda>z s.\n            P z s \\<and> s = x}\n                         body {Q}\n 2. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          C \\<Turnstile>\\<^sub>t {\\<lambda>a b. P a s' \\<and> b = f s'} c\n          {\\<lambda>a b. Q a (g s' b)} \\<Longrightarrow>\n       C \\<Turnstile>\\<^sub>t {P} LOCAL f; c; g {Q}", "apply(unfold tvalid_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r P Q n x.\n       \\<lbrakk>\\<forall>s'.\n                   {(\\<lambda>z s. P z s \\<and> (s, s') \\<in> r, CALL,\n                     Q)} \\<turnstile>\\<^sub>t\n                   {\\<lambda>z s. P z s \\<and> s = s'} body {Q} \\<and>\n                   ((\\<forall>s t.\n                        s -body\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> (s, s') \\<in> r \\<longrightarrow>\n                            Q z t)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> (s, s') \\<in> r \\<longrightarrow>\n                        body \\<down> s) \\<longrightarrow>\n                    (\\<forall>s t.\n                        s -body\\<rightarrow> t \\<longrightarrow>\n                        (\\<forall>z.\n                            P z s \\<and> s = s' \\<longrightarrow>\n                            Q z t)) \\<and>\n                    (\\<forall>z s.\n                        P z s \\<and> s = s' \\<longrightarrow>\n                        body \\<down> s));\n        \\<forall>y.\n           (y, x) \\<in> r \\<longrightarrow>\n           (\\<forall>s t.\n               s -body\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z.\n                   P z s \\<and> s = y \\<longrightarrow> Q z t)) \\<and>\n           (\\<forall>z s.\n               P z s \\<and> s = y \\<longrightarrow> body \\<down> s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s t.\n                             s -body\\<rightarrow> t \\<longrightarrow>\n                             (\\<forall>z.\n                                 P z s \\<and> s = x \\<longrightarrow>\n                                 Q z t)) \\<and>\n                         (\\<forall>z s.\n                             P z s \\<and> s = x \\<longrightarrow>\n                             body \\<down> s)\n 2. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          ((\\<forall>(P', c, Q)\\<in>C.\n               (\\<forall>s t.\n                   s -c\\<rightarrow> t \\<longrightarrow>\n                   (\\<forall>z. P' z s \\<longrightarrow> Q z t)) \\<and>\n               (\\<forall>z s.\n                   P' z s \\<longrightarrow> c \\<down> s)) \\<longrightarrow>\n           (\\<forall>s t.\n               s -c\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z.\n                   P z s' \\<and> s = f s' \\<longrightarrow>\n                   Q z (g s' t))) \\<and>\n           (\\<forall>z s.\n               P z s' \\<and> s = f s' \\<longrightarrow>\n               c \\<down> s)) \\<Longrightarrow>\n       (\\<forall>(P', c, Q)\\<in>C.\n           (\\<forall>s t.\n               s -c\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q z t)) \\<and>\n           (\\<forall>z s.\n               P' z s \\<longrightarrow> c \\<down> s)) \\<longrightarrow>\n       (\\<forall>s t.\n           s -LOCAL f; c; g\\<rightarrow> t \\<longrightarrow>\n           (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n       (\\<forall>z s. P z s \\<longrightarrow> LOCAL f; c; g \\<down> s)", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>C P f c Q g.\n       \\<forall>s'.\n          C \\<turnstile>\\<^sub>t\n          {\\<lambda>z s. P z s' \\<and> s = f s'} c\n          {\\<lambda>z t. Q z (g s' t)} \\<and>\n          ((\\<forall>(P', c, Q)\\<in>C.\n               (\\<forall>s t.\n                   s -c\\<rightarrow> t \\<longrightarrow>\n                   (\\<forall>z. P' z s \\<longrightarrow> Q z t)) \\<and>\n               (\\<forall>z s.\n                   P' z s \\<longrightarrow> c \\<down> s)) \\<longrightarrow>\n           (\\<forall>s t.\n               s -c\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z.\n                   P z s' \\<and> s = f s' \\<longrightarrow>\n                   Q z (g s' t))) \\<and>\n           (\\<forall>z s.\n               P z s' \\<and> s = f s' \\<longrightarrow>\n               c \\<down> s)) \\<Longrightarrow>\n       (\\<forall>(P', c, Q)\\<in>C.\n           (\\<forall>s t.\n               s -c\\<rightarrow> t \\<longrightarrow>\n               (\\<forall>z. P' z s \\<longrightarrow> Q z t)) \\<and>\n           (\\<forall>z s.\n               P' z s \\<longrightarrow> c \\<down> s)) \\<longrightarrow>\n       (\\<forall>s t.\n           s -LOCAL f; c; g\\<rightarrow> t \\<longrightarrow>\n           (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n       (\\<forall>z s. P z s \\<longrightarrow> LOCAL f; c; g \\<down> s)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition MGT\\<^sub>t :: \"com \\<Rightarrow> state assn \\<times> com \\<times> state assn\" where\n  [simp]: \"MGT\\<^sub>t c = (\\<lambda>z s. z = s \\<and> c\\<down>s, c, \\<lambda>z t. z -c\\<rightarrow> t)\""], ["", "lemma MGT_implies_complete:\n \"{} \\<turnstile>\\<^sub>t MGT\\<^sub>t c \\<Longrightarrow> {} \\<Turnstile>\\<^sub>t {P}c{Q} \\<Longrightarrow> {} \\<turnstile>\\<^sub>t {P}c{Q::state assn}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{} \\<turnstile>\\<^sub>t MGT\\<^sub>t c;\n     {} \\<Turnstile>\\<^sub>t {P} c {Q}\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\\<^sub>t {P} c {Q}", "apply(simp add: MGT\\<^sub>t_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{} \\<turnstile>\\<^sub>t\n             {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n             {\\<lambda>z. exec z c};\n     {} \\<Turnstile>\\<^sub>t {P} c {Q}\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\\<^sub>t {P} c {Q}", "apply (erule thoare.Conseq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<Turnstile>\\<^sub>t {P} c {Q} \\<Longrightarrow>\n    (\\<forall>s t.\n        (\\<forall>z.\n            z = s \\<and> c \\<down> s \\<longrightarrow> z -c\\<rightarrow>\n            t) \\<longrightarrow>\n        (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n    (\\<forall>s.\n        (\\<exists>z. P z s) \\<longrightarrow>\n        (\\<exists>z. z = s \\<and> c \\<down> s))", "apply(simp add: tvalid_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s t.\n        s -c\\<rightarrow> t \\<longrightarrow>\n        (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n    (\\<forall>z s. P z s \\<longrightarrow> c \\<down> s) \\<Longrightarrow>\n    (\\<forall>s t.\n        (c \\<down> s \\<longrightarrow> s -c\\<rightarrow>\n         t) \\<longrightarrow>\n        (\\<forall>z. P z s \\<longrightarrow> Q z t)) \\<and>\n    (\\<forall>s. (\\<exists>z. P z s) \\<longrightarrow> c \\<down> s)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma while_termiE: \"\\<lbrakk> WHILE b DO c \\<down> s; b s \\<rbrakk> \\<Longrightarrow> c \\<down> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>WHILE b DO c \\<down> s; b s\\<rbrakk>\n    \\<Longrightarrow> c \\<down> s", "by(erule termi.cases, auto)"], ["", "lemma while_termiE2:\n  \"\\<lbrakk> WHILE b DO c \\<down> s; b s; s -c\\<rightarrow> t \\<rbrakk> \\<Longrightarrow> WHILE b DO c \\<down> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>WHILE b DO c \\<down> s; b s; s -c\\<rightarrow> t\\<rbrakk>\n    \\<Longrightarrow> WHILE b DO c \\<down> t", "by(erule termi.cases, auto)"], ["", "lemma MGT_lemma: \"C \\<turnstile>\\<^sub>t MGT\\<^sub>t CALL \\<Longrightarrow> C \\<turnstile>\\<^sub>t MGT\\<^sub>t c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<turnstile>\\<^sub>t MGT\\<^sub>t CALL \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t MGT\\<^sub>t c", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> c \\<down> s} c {\\<lambda>z. exec z c}", "apply(induct_tac c)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x.\n       C \\<turnstile>\\<^sub>t\n       {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n       {\\<lambda>z. exec z body} \\<Longrightarrow>\n       C \\<turnstile>\\<^sub>t\n       {\\<lambda>z s. z = s \\<and> Do x \\<down> s} Do x\n       {\\<lambda>z. exec z (Do x)}\n 2. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x1a \\<down> s} x1a\n        {\\<lambda>z. exec z x1a};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s. z = s \\<and> (x1a; x2) \\<down> s}\n                         x1a; x2 {\\<lambda>z. exec z (x1a; x2)}\n 3. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> IF x1a THEN x2 ELSE x3 \\<down> s}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 4. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 5. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 6. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply (rule strengthen_pre[OF _ thoare.Do])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x.\n       C \\<turnstile>\\<^sub>t\n       {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n       {\\<lambda>z. exec z body} \\<Longrightarrow>\n       \\<forall>z s.\n          z = s \\<and> Do x \\<down> s \\<longrightarrow>\n          (\\<forall>t\\<in>x s. z -Do x\\<rightarrow> t) \\<and>\n          x s \\<noteq> {}\n 2. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x1a \\<down> s} x1a\n        {\\<lambda>z. exec z x1a};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s. z = s \\<and> (x1a; x2) \\<down> s}\n                         x1a; x2 {\\<lambda>z. exec z (x1a; x2)}\n 3. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> IF x1a THEN x2 ELSE x3 \\<down> s}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 4. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 5. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 6. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply blast"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x1a \\<down> s} x1a\n        {\\<lambda>z. exec z x1a};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s. z = s \\<and> (x1a; x2) \\<down> s}\n                         x1a; x2 {\\<lambda>z. exec z (x1a; x2)}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> IF x1a THEN x2 ELSE x3 \\<down> s}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(rename_tac com1 com2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>com1 com2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com1 \\<down> s} com1\n        {\\<lambda>z. exec z com1};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com2 \\<down> s} com2\n        {\\<lambda>z. exec z com2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s. z = s \\<and> (com1; com2) \\<down> s}\n                         com1; com2 {\\<lambda>z. exec z (com1; com2)}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> IF x1a THEN x2 ELSE x3 \\<down> s}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(rule_tac Q = \"\\<lambda>z s. z -com1\\<rightarrow>s & com2\\<down>s\" in thoare.Semi)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>com1 com2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com1 \\<down> s} com1\n        {\\<lambda>z. exec z com1};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com2 \\<down> s} com2\n        {\\<lambda>z. exec z com2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s. z = s \\<and> (com1; com2) \\<down> s}\n                         com1\n                         {\\<lambda>z s.\n                             z -com1\\<rightarrow> s \\<and> com2 \\<down> s}\n 2. \\<And>com1 com2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com1 \\<down> s} com1\n        {\\<lambda>z. exec z com1};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com2 \\<down> s} com2\n        {\\<lambda>z. exec z com2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z -com1\\<rightarrow> s \\<and> com2 \\<down> s}\n                         com2 {\\<lambda>z. exec z (com1; com2)}\n 3. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> IF x1a THEN x2 ELSE x3 \\<down> s}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 4. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 5. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 6. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(erule thoare.Conseq)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>com1 com2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com2 \\<down> s} com2\n        {\\<lambda>z. exec z com2}\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s t.\n                             (\\<forall>z.\n                                 z = s \\<and>\n                                 com1 \\<down> s \\<longrightarrow>\n                                 z -com1\\<rightarrow> t) \\<longrightarrow>\n                             (\\<forall>z.\n                                 z = s \\<and>\n                                 (com1; com2) \\<down> s \\<longrightarrow>\n                                 z -com1\\<rightarrow> t \\<and>\n                                 com2 \\<down> t)) \\<and>\n                         (\\<forall>s.\n                             (\\<exists>z.\n                                 z = s \\<and>\n                                 (com1; com2) \\<down> s) \\<longrightarrow>\n                             (\\<exists>z. z = s \\<and> com1 \\<down> s))\n 2. \\<And>com1 com2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com1 \\<down> s} com1\n        {\\<lambda>z. exec z com1};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com2 \\<down> s} com2\n        {\\<lambda>z. exec z com2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z -com1\\<rightarrow> s \\<and> com2 \\<down> s}\n                         com2 {\\<lambda>z. exec z (com1; com2)}\n 3. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> IF x1a THEN x2 ELSE x3 \\<down> s}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 4. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 5. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 6. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply fast"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>com1 com2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com1 \\<down> s} com1\n        {\\<lambda>z. exec z com1};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com2 \\<down> s} com2\n        {\\<lambda>z. exec z com2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z -com1\\<rightarrow> s \\<and> com2 \\<down> s}\n                         com2 {\\<lambda>z. exec z (com1; com2)}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> IF x1a THEN x2 ELSE x3 \\<down> s}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(erule thoare.Conseq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>com1 com2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> com1 \\<down> s} com1\n        {\\<lambda>z. exec z com1}\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s t.\n                             (\\<forall>z.\n                                 z = s \\<and>\n                                 com2 \\<down> s \\<longrightarrow>\n                                 z -com2\\<rightarrow> t) \\<longrightarrow>\n                             (\\<forall>z.\n                                 z -com1\\<rightarrow> s \\<and>\n                                 com2 \\<down> s \\<longrightarrow>\n                                 z -com1; com2\\<rightarrow> t)) \\<and>\n                         (\\<forall>s.\n                             (\\<exists>z.\n                                 z -com1\\<rightarrow> s \\<and>\n                                 com2 \\<down> s) \\<longrightarrow>\n                             (\\<exists>z. z = s \\<and> com2 \\<down> s))\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> IF x1a THEN x2 ELSE x3 \\<down> s}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply fast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> IF x1a THEN x2 ELSE x3 \\<down> s}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 2. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 3. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 4. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(rule thoare.If)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and>\n                              IF x1a THEN x2 ELSE x3 \\<down> s) \\<and>\n                             x1a s}\n                         x2 {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and>\n                              IF x1a THEN x2 ELSE x3 \\<down> s) \\<and>\n                             \\<not> x1a s}\n                         x3 {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(erule thoare.Conseq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s t.\n                             (\\<forall>z.\n                                 z = s \\<and> x2 \\<down> s \\<longrightarrow>\n                                 z -x2\\<rightarrow> t) \\<longrightarrow>\n                             (\\<forall>z.\n                                 (z = s \\<and>\n                                  IF x1a THEN x2 ELSE x3 \\<down> s) \\<and>\n                                 x1a s \\<longrightarrow>\n                                 z -IF x1a THEN x2 ELSE x3\\<rightarrow>\n                                 t)) \\<and>\n                         (\\<forall>s.\n                             (\\<exists>z.\n                                 (z = s \\<and>\n                                  IF x1a THEN x2 ELSE x3 \\<down> s) \\<and>\n                                 x1a s) \\<longrightarrow>\n                             (\\<exists>z. z = s \\<and> x2 \\<down> s))\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and>\n                              IF x1a THEN x2 ELSE x3 \\<down> s) \\<and>\n                             \\<not> x1a s}\n                         x3 {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x3 \\<down> s} x3\n        {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and>\n                              IF x1a THEN x2 ELSE x3 \\<down> s) \\<and>\n                             \\<not> x1a s}\n                         x3 {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 2. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 3. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 4. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(erule thoare.Conseq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s t.\n                             (\\<forall>z.\n                                 z = s \\<and> x3 \\<down> s \\<longrightarrow>\n                                 z -x3\\<rightarrow> t) \\<longrightarrow>\n                             (\\<forall>z.\n                                 (z = s \\<and>\n                                  IF x1a THEN x2 ELSE x3 \\<down> s) \\<and>\n                                 \\<not> x1a s \\<longrightarrow>\n                                 z -IF x1a THEN x2 ELSE x3\\<rightarrow>\n                                 t)) \\<and>\n                         (\\<forall>s.\n                             (\\<exists>z.\n                                 (z = s \\<and>\n                                  IF x1a THEN x2 ELSE x3 \\<down> s) \\<and>\n                                 \\<not> x1a s) \\<longrightarrow>\n                             (\\<exists>z. z = s \\<and> x3 \\<down> s))\n 2. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 3. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 4. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 2. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 3. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body} \\<Longrightarrow>\n    C \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> CALL \\<down> s} CALL\n    {\\<lambda>z. exec z CALL}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}\n 3. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> LOCAL x1a; x2; x3 \\<down> s}\n                         LOCAL x1a; x2; x3\n                         {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}\n 2. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply(fast intro:thoare.Local elim!: thoare.Conseq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> x2 \\<down> s} x2\n        {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             z = s \\<and> WHILE x1a DO x2 \\<down> s}\n                         WHILE x1a DO x2\n                         {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply(rename_tac b c)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s. z = s \\<and> WHILE b DO c \\<down> s}\n                         WHILE b DO c {\\<lambda>z. exec z (WHILE b DO c)}", "apply(rule_tac P' = \"\\<lambda>z s. (z,s) \\<in> ({(s,t). b s \\<and> s -c\\<rightarrow> t})^* \\<and>\n                           WHILE b DO c \\<down> s\" in thoare.Conseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z, s)\n                             \\<in> {(s, t).\n                                    b s \\<and> s -c\\<rightarrow>\n                                    t}\\<^sup>* \\<and>\n                             WHILE b DO c \\<down> s}\n                         WHILE b DO c {?Q'171 b c}\n 2. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s t.\n                             (\\<forall>z.\n                                 (z, s)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> s \\<longrightarrow>\n                                 ?Q'171 b c z t) \\<longrightarrow>\n                             (\\<forall>z.\n                                 z = s \\<and>\n                                 WHILE b DO c \\<down> s \\<longrightarrow>\n                                 z -WHILE b DO c\\<rightarrow> t)) \\<and>\n                         (\\<forall>s.\n                             (\\<exists>z.\n                                 z = s \\<and>\n                                 WHILE b DO c \\<down> s) \\<longrightarrow>\n                             (\\<exists>z.\n                                 (z, s)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> s))", "apply(rule_tac thoare.While[OF wf_termi])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s'.\n                            C \\<turnstile>\\<^sub>t\n                            {\\<lambda>z s.\n                                ((z, s)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> s) \\<and>\n                                b s \\<and> s' = s}\n                            c {\\<lambda>z s.\n                                  ((z, s)\n                                   \\<in> {(s, t).\n    b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                   WHILE b DO c \\<down> s) \\<and>\n                                  (s, s')\n                                  \\<in> {(t, s).\n   WHILE ?b173 b c DO ?c173 b c \\<down> s \\<and>\n   ?b173 b c s \\<and> s -?c173 b c\\<rightarrow> t}}\n 2. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s t.\n                             (\\<forall>z.\n                                 (z, s)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> s \\<longrightarrow>\n                                 ((z, t)\n                                  \\<in> {(s, t).\n   b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                  WHILE b DO c \\<down> t) \\<and>\n                                 \\<not> b t) \\<longrightarrow>\n                             (\\<forall>z.\n                                 z = s \\<and>\n                                 WHILE b DO c \\<down> s \\<longrightarrow>\n                                 z -WHILE b DO c\\<rightarrow> t)) \\<and>\n                         (\\<forall>s.\n                             (\\<exists>z.\n                                 z = s \\<and>\n                                 WHILE b DO c \\<down> s) \\<longrightarrow>\n                             (\\<exists>z.\n                                 (z, s)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> s))", "apply(rule allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s'.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> C \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             ((z, s)\n                              \\<in> {(s, t).\n                                     b s \\<and> s -c\\<rightarrow>\n                                     t}\\<^sup>* \\<and>\n                              WHILE b DO c \\<down> s) \\<and>\n                             b s \\<and> s' = s}\n                         c {\\<lambda>z s.\n                               ((z, s)\n                                \\<in> {(s, t).\n b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                WHILE b DO c \\<down> s) \\<and>\n                               (s, s')\n                               \\<in> {(t, s).\nWHILE ?b173 b c DO ?c173 b c \\<down> s \\<and>\n?b173 b c s \\<and> s -?c173 b c\\<rightarrow> t}}\n 2. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s t.\n                             (\\<forall>z.\n                                 (z, s)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> s \\<longrightarrow>\n                                 ((z, t)\n                                  \\<in> {(s, t).\n   b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                  WHILE b DO c \\<down> t) \\<and>\n                                 \\<not> b t) \\<longrightarrow>\n                             (\\<forall>z.\n                                 z = s \\<and>\n                                 WHILE b DO c \\<down> s \\<longrightarrow>\n                                 z -WHILE b DO c\\<rightarrow> t)) \\<and>\n                         (\\<forall>s.\n                             (\\<exists>z.\n                                 z = s \\<and>\n                                 WHILE b DO c \\<down> s) \\<longrightarrow>\n                             (\\<exists>z.\n                                 (z, s)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> s))", "apply(erule thoare.Conseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s'.\n       C \\<turnstile>\\<^sub>t\n       {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n       {\\<lambda>z. exec z body} \\<Longrightarrow>\n       (\\<forall>s t.\n           (\\<forall>z.\n               z = s \\<and> c \\<down> s \\<longrightarrow> z -c\\<rightarrow>\n               t) \\<longrightarrow>\n           (\\<forall>z.\n               ((z, s)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                WHILE b DO c \\<down> s) \\<and>\n               b s \\<and> s' = s \\<longrightarrow>\n               ((z, t)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                WHILE b DO c \\<down> t) \\<and>\n               (t, s')\n               \\<in> {(t, s).\n                      WHILE ?b173 b c DO ?c173 b c \\<down> s \\<and>\n                      ?b173 b c s \\<and> s -?c173 b c\\<rightarrow>\n                      t})) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               ((z, s)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                WHILE b DO c \\<down> s) \\<and>\n               b s \\<and> s' = s) \\<longrightarrow>\n           (\\<exists>z. z = s \\<and> c \\<down> s))\n 2. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s t.\n                             (\\<forall>z.\n                                 (z, s)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> s \\<longrightarrow>\n                                 ((z, t)\n                                  \\<in> {(s, t).\n   b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                  WHILE b DO c \\<down> t) \\<and>\n                                 \\<not> b t) \\<longrightarrow>\n                             (\\<forall>z.\n                                 z = s \\<and>\n                                 WHILE b DO c \\<down> s \\<longrightarrow>\n                                 z -WHILE b DO c\\<rightarrow> t)) \\<and>\n                         (\\<forall>s.\n                             (\\<exists>z.\n                                 z = s \\<and>\n                                 WHILE b DO c \\<down> s) \\<longrightarrow>\n                             (\\<exists>z.\n                                 (z, s)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> s))", "apply(fastforce intro:rtrancl_into_rtrancl dest:while_termiE while_termiE2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s t.\n                             (\\<forall>z.\n                                 (z, s)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> s \\<longrightarrow>\n                                 ((z, t)\n                                  \\<in> {(s, t).\n   b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                  WHILE b DO c \\<down> t) \\<and>\n                                 \\<not> b t) \\<longrightarrow>\n                             (\\<forall>z.\n                                 z = s \\<and>\n                                 WHILE b DO c \\<down> s \\<longrightarrow>\n                                 z -WHILE b DO c\\<rightarrow> t)) \\<and>\n                         (\\<forall>s.\n                             (\\<exists>z.\n                                 z = s \\<and>\n                                 WHILE b DO c \\<down> s) \\<longrightarrow>\n                             (\\<exists>z.\n                                 (z, s)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> s))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s t.\n                            (\\<forall>z.\n                                (z, s)\n                                \\<in> {(s, t).\n b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                WHILE b DO c \\<down> s \\<longrightarrow>\n                                ((z, t)\n                                 \\<in> {(s, t).\n  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                 WHILE b DO c \\<down> t) \\<and>\n                                \\<not> b t) \\<longrightarrow>\n                            (\\<forall>z.\n                                z = s \\<and>\n                                WHILE b DO c \\<down> s \\<longrightarrow>\n                                z -WHILE b DO c\\<rightarrow> t)\n 2. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            (\\<exists>z.\n                                z = s \\<and>\n                                WHILE b DO c \\<down> s) \\<longrightarrow>\n                            (\\<exists>z.\n                                (z, s)\n                                \\<in> {(s, t).\n b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                WHILE b DO c \\<down> s)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s t.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c {\\<lambda>z. exec z c};\n        \\<forall>z.\n           (z, s)\n           \\<in> {(s, t).\n                  b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<longrightarrow>\n           (z, t)\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n           WHILE b DO c \\<down> t \\<and> \\<not> b t;\n        WHILE b DO c \\<down> s\\<rbrakk>\n       \\<Longrightarrow> s -WHILE b DO c\\<rightarrow> t\n 2. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            (\\<exists>z.\n                                z = s \\<and>\n                                WHILE b DO c \\<down> s) \\<longrightarrow>\n                            (\\<exists>z.\n                                (z, s)\n                                \\<in> {(s, t).\n b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                WHILE b DO c \\<down> s)", "apply(erule_tac x = s in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s t.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c {\\<lambda>z. exec z c};\n        WHILE b DO c \\<down> s;\n        (s, s)\n        \\<in> {(s, t).\n               b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<longrightarrow>\n        (s, t) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n        WHILE b DO c \\<down> t \\<and> \\<not> b t\\<rbrakk>\n       \\<Longrightarrow> s -WHILE b DO c\\<rightarrow> t\n 2. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            (\\<exists>z.\n                                z = s \\<and>\n                                WHILE b DO c \\<down> s) \\<longrightarrow>\n                            (\\<exists>z.\n                                (z, s)\n                                \\<in> {(s, t).\n b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                WHILE b DO c \\<down> s)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s t.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c {\\<lambda>z. exec z c};\n        WHILE b DO c \\<down> s;\n        (s, t) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        WHILE b DO c \\<down> t; \\<not> b t\\<rbrakk>\n       \\<Longrightarrow> s -WHILE b DO c\\<rightarrow> t\n 2. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            (\\<exists>z.\n                                z = s \\<and>\n                                WHILE b DO c \\<down> s) \\<longrightarrow>\n                            (\\<exists>z.\n                                (z, s)\n                                \\<in> {(s, t).\n b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                WHILE b DO c \\<down> s)", "apply(erule converse_rtrancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b c s t.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c {\\<lambda>z. exec z c};\n        WHILE b DO c \\<down> s; WHILE b DO c \\<down> t; \\<not> b t\\<rbrakk>\n       \\<Longrightarrow> t -WHILE b DO c\\<rightarrow> t\n 2. \\<And>b c s t y z.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c {\\<lambda>z. exec z c};\n        WHILE b DO c \\<down> s; WHILE b DO c \\<down> t; \\<not> b t;\n        (y, z) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t};\n        (z, t) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        z -WHILE b DO c\\<rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> y -WHILE b DO c\\<rightarrow> t\n 3. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            (\\<exists>z.\n                                z = s \\<and>\n                                WHILE b DO c \\<down> s) \\<longrightarrow>\n                            (\\<exists>z.\n                                (z, s)\n                                \\<in> {(s, t).\n b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                WHILE b DO c \\<down> s)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s t y z.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c {\\<lambda>z. exec z c};\n        WHILE b DO c \\<down> s; WHILE b DO c \\<down> t; \\<not> b t;\n        (y, z) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t};\n        (z, t) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        z -WHILE b DO c\\<rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> y -WHILE b DO c\\<rightarrow> t\n 2. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            (\\<exists>z.\n                                z = s \\<and>\n                                WHILE b DO c \\<down> s) \\<longrightarrow>\n                            (\\<exists>z.\n                                (z, s)\n                                \\<in> {(s, t).\n b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                WHILE b DO c \\<down> s)", "apply(fast elim:exec.WhileTrue)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       \\<lbrakk>C \\<turnstile>\\<^sub>t\n                {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n                {\\<lambda>z. exec z body};\n        C \\<turnstile>\\<^sub>t\n        {\\<lambda>z s. z = s \\<and> c \\<down> s} c\n        {\\<lambda>z. exec z c}\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s.\n                            (\\<exists>z.\n                                z = s \\<and>\n                                WHILE b DO c \\<down> s) \\<longrightarrow>\n                            (\\<exists>z.\n                                (z, s)\n                                \\<in> {(s, t).\n b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                                WHILE b DO c \\<down> s)", "apply(fast intro: rtrancl_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "inductive_set\n  exec1 :: \"((com list \\<times> state) \\<times> (com list \\<times> state))set\"\n  and exec1' :: \"(com list \\<times> state) \\<Rightarrow> (com list \\<times> state) \\<Rightarrow> bool\"  (\"_ \\<rightarrow> _\" [81,81] 100)\nwhere\n  \"cs0 \\<rightarrow> cs1 \\<equiv> (cs0,cs1) : exec1\"\n\n| Do[iff]: \"t \\<in> f s \\<Longrightarrow> ((Do f)#cs,s) \\<rightarrow> (cs,t)\"\n\n| Semi[iff]: \"((c1;c2)#cs,s) \\<rightarrow> (c1#c2#cs,s)\"\n\n| IfTrue:   \"b s \\<Longrightarrow> ((IF b THEN c1 ELSE c2)#cs,s) \\<rightarrow> (c1#cs,s)\"\n| IfFalse: \"\\<not>b s \\<Longrightarrow> ((IF b THEN c1 ELSE c2)#cs,s) \\<rightarrow> (c2#cs,s)\"\n\n| WhileFalse: \"\\<not>b s \\<Longrightarrow> ((WHILE b DO c)#cs,s) \\<rightarrow> (cs,s)\"\n| WhileTrue:   \"b s \\<Longrightarrow> ((WHILE b DO c)#cs,s) \\<rightarrow> (c#(WHILE b DO c)#cs,s)\"\n\n| Call[iff]: \"(CALL#cs,s) \\<rightarrow> (body#cs,s)\"\n\n| Local[iff]: \"((LOCAL f;c;g)#cs,s) \\<rightarrow> (c # Do(\\<lambda>t. {g s t})#cs, f s)\""], ["", "abbreviation\n  exectr :: \"(com list \\<times> state) \\<Rightarrow> (com list \\<times> state) \\<Rightarrow> bool\"   (\"_ \\<rightarrow>\\<^sup>* _\" [81,81] 100)\n  where \"cs0 \\<rightarrow>\\<^sup>* cs1 \\<equiv> (cs0,cs1) : exec1^*\""], ["", "inductive_cases exec1E[elim!]:\n \"([],s) \\<rightarrow> (cs',s')\"\n \"(Do f#cs,s) \\<rightarrow> (cs',s')\"\n \"((c1;c2)#cs,s) \\<rightarrow> (cs',s')\"\n \"((IF b THEN c1 ELSE c2)#cs,s) \\<rightarrow> (cs',s')\"\n \"((WHILE b DO c)#cs,s) \\<rightarrow> (cs',s')\"\n \"(CALL#cs,s) \\<rightarrow> (cs',s')\"\n \"((LOCAL f;c;g)#cs,s) \\<rightarrow> (cs',s')\""], ["", "lemma [iff]: \"\\<not> ([],s) \\<rightarrow> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (([], s), u) \\<notin> exec1", "by (induct u) blast"], ["", "lemma app_exec: \"(cs,s) \\<rightarrow> (cs',s') \\<Longrightarrow> (cs@cs2,s) \\<rightarrow> (cs'@cs2,s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cs, s) \\<rightarrow> (cs', s') \\<Longrightarrow>\n    (cs @ cs2, s) \\<rightarrow> (cs' @ cs2, s')", "apply(erule exec1.induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>t f s cs.\n       t \\<in> f s \\<Longrightarrow>\n       ((Do f # cs) @ cs2, s) \\<rightarrow> (cs @ cs2, t)\n 2. \\<And>c1 c2 cs s.\n       (((c1; c2) # cs) @ cs2, s) \\<rightarrow> ((c1 # c2 # cs) @ cs2, s)\n 3. \\<And>b s c1 c2 cs.\n       b s \\<Longrightarrow>\n       (((IF b THEN c1 ELSE c2) # cs) @ cs2,\n        s) \\<rightarrow> ((c1 # cs) @ cs2, s)\n 4. \\<And>b s c1 c2 cs.\n       \\<not> b s \\<Longrightarrow>\n       (((IF b THEN c1 ELSE c2) # cs) @ cs2,\n        s) \\<rightarrow> ((c2 # cs) @ cs2, s)\n 5. \\<And>b s c cs.\n       \\<not> b s \\<Longrightarrow>\n       (((WHILE b DO c) # cs) @ cs2, s) \\<rightarrow> (cs @ cs2, s)\n 6. \\<And>b s c cs.\n       b s \\<Longrightarrow>\n       (((WHILE b DO c) # cs) @ cs2,\n        s) \\<rightarrow> ((c # (WHILE b DO c) # cs) @ cs2, s)\n 7. \\<And>cs s. ((CALL # cs) @ cs2, s) \\<rightarrow> ((body # cs) @ cs2, s)\n 8. \\<And>f c g cs s.\n       (((LOCAL f; c; g) # cs) @ cs2,\n        s) \\<rightarrow> ((c # Do (\\<lambda>t. {g s t}) # cs) @ cs2, f s)", "apply(simp_all del:fun_upd_apply)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b s c1 c2 cs.\n       b s \\<Longrightarrow>\n       ((IF b THEN c1 ELSE c2) # cs @ cs2,\n        s) \\<rightarrow> (c1 # cs @ cs2, s)\n 2. \\<And>b s c1 c2 cs.\n       \\<not> b s \\<Longrightarrow>\n       ((IF b THEN c1 ELSE c2) # cs @ cs2,\n        s) \\<rightarrow> (c2 # cs @ cs2, s)\n 3. \\<And>b s c cs.\n       \\<not> b s \\<Longrightarrow>\n       ((WHILE b DO c) # cs @ cs2, s) \\<rightarrow> (cs @ cs2, s)\n 4. \\<And>b s c cs.\n       b s \\<Longrightarrow>\n       ((WHILE b DO c) # cs @ cs2,\n        s) \\<rightarrow> (c # (WHILE b DO c) # cs @ cs2, s)", "apply(blast intro:exec1.intros)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma app_execs: \"(cs,s) \\<rightarrow>\\<^sup>* (cs',s') \\<Longrightarrow> (cs@cs2,s) \\<rightarrow>\\<^sup>* (cs'@cs2,s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cs, s) \\<rightarrow>\\<^sup>* (cs', s') \\<Longrightarrow>\n    (cs @ cs2, s) \\<rightarrow>\\<^sup>* (cs' @ cs2, s')", "apply(erule rtrancl_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (cs @ cs2, s) \\<rightarrow>\\<^sup>* (cs @ cs2, s)\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(cs, s) \\<rightarrow>\\<^sup>* (a, b);\n        (a, b) \\<rightarrow> (aa, ba);\n        (cs @ cs2, s) \\<rightarrow>\\<^sup>* (a @ cs2, b)\\<rbrakk>\n       \\<Longrightarrow> (cs @ cs2, s) \\<rightarrow>\\<^sup>* (aa @ cs2, ba)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(cs, s) \\<rightarrow>\\<^sup>* (a, b);\n        (a, b) \\<rightarrow> (aa, ba);\n        (cs @ cs2, s) \\<rightarrow>\\<^sup>* (a @ cs2, b)\\<rbrakk>\n       \\<Longrightarrow> (cs @ cs2, s) \\<rightarrow>\\<^sup>* (aa @ cs2, ba)", "apply(blast intro:app_exec rtrancl_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma exec_impl_execs[rule_format]:\n \"s -c\\<rightarrow> s' \\<Longrightarrow> \\<forall>cs. (c#cs,s) \\<rightarrow>\\<^sup>* (cs,s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s -c\\<rightarrow> s' \\<Longrightarrow>\n    \\<forall>cs. (c # cs, s) \\<rightarrow>\\<^sup>* (cs, s')", "apply(erule exec.induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>t f s.\n       t \\<in> f s \\<Longrightarrow>\n       \\<forall>cs. (Do f # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\n 2. \\<And>s0 c1 s1 c2 s2.\n       \\<lbrakk>s0 -c1\\<rightarrow> s1;\n        \\<forall>cs. (c1 # cs, s0) \\<rightarrow>\\<^sup>* (cs, s1);\n        s1 -c2\\<rightarrow> s2;\n        \\<forall>cs. (c2 # cs, s1) \\<rightarrow>\\<^sup>* (cs, s2)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((c1; c2) # cs,\n                             s0) \\<rightarrow>\\<^sup>* (cs, s2)\n 3. \\<And>b s c1 t c2.\n       \\<lbrakk>b s; s -c1\\<rightarrow> t;\n        \\<forall>cs. (c1 # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((IF b THEN c1 ELSE c2) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, t)\n 4. \\<And>b s c2 t c1.\n       \\<lbrakk>\\<not> b s; s -c2\\<rightarrow> t;\n        \\<forall>cs. (c2 # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((IF b THEN c1 ELSE c2) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, t)\n 5. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow>\n       \\<forall>cs. ((WHILE b DO c) # cs, s) \\<rightarrow>\\<^sup>* (cs, s)\n 6. \\<And>b s c t u.\n       \\<lbrakk>b s; s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, s) \\<rightarrow>\\<^sup>* (cs, t);\n        t -WHILE b DO c\\<rightarrow> u;\n        \\<forall>cs.\n           ((WHILE b DO c) # cs, t) \\<rightarrow>\\<^sup>* (cs, u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((WHILE b DO c) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, u)\n 7. \\<And>s t.\n       \\<lbrakk>s -body\\<rightarrow> t;\n        \\<forall>cs. (body # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            (CALL # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\n 8. \\<And>f s c t g.\n       \\<lbrakk>f s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, f s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((LOCAL f; c; g) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, g s t)", "apply blast"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s0 c1 s1 c2 s2.\n       \\<lbrakk>s0 -c1\\<rightarrow> s1;\n        \\<forall>cs. (c1 # cs, s0) \\<rightarrow>\\<^sup>* (cs, s1);\n        s1 -c2\\<rightarrow> s2;\n        \\<forall>cs. (c2 # cs, s1) \\<rightarrow>\\<^sup>* (cs, s2)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((c1; c2) # cs,\n                             s0) \\<rightarrow>\\<^sup>* (cs, s2)\n 2. \\<And>b s c1 t c2.\n       \\<lbrakk>b s; s -c1\\<rightarrow> t;\n        \\<forall>cs. (c1 # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((IF b THEN c1 ELSE c2) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, t)\n 3. \\<And>b s c2 t c1.\n       \\<lbrakk>\\<not> b s; s -c2\\<rightarrow> t;\n        \\<forall>cs. (c2 # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((IF b THEN c1 ELSE c2) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, t)\n 4. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow>\n       \\<forall>cs. ((WHILE b DO c) # cs, s) \\<rightarrow>\\<^sup>* (cs, s)\n 5. \\<And>b s c t u.\n       \\<lbrakk>b s; s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, s) \\<rightarrow>\\<^sup>* (cs, t);\n        t -WHILE b DO c\\<rightarrow> u;\n        \\<forall>cs.\n           ((WHILE b DO c) # cs, t) \\<rightarrow>\\<^sup>* (cs, u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((WHILE b DO c) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, u)\n 6. \\<And>s t.\n       \\<lbrakk>s -body\\<rightarrow> t;\n        \\<forall>cs. (body # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            (CALL # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\n 7. \\<And>f s c t g.\n       \\<lbrakk>f s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, f s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((LOCAL f; c; g) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, g s t)", "apply(blast intro:rtrancl_trans)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>b s c1 t c2.\n       \\<lbrakk>b s; s -c1\\<rightarrow> t;\n        \\<forall>cs. (c1 # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((IF b THEN c1 ELSE c2) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, t)\n 2. \\<And>b s c2 t c1.\n       \\<lbrakk>\\<not> b s; s -c2\\<rightarrow> t;\n        \\<forall>cs. (c2 # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((IF b THEN c1 ELSE c2) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, t)\n 3. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow>\n       \\<forall>cs. ((WHILE b DO c) # cs, s) \\<rightarrow>\\<^sup>* (cs, s)\n 4. \\<And>b s c t u.\n       \\<lbrakk>b s; s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, s) \\<rightarrow>\\<^sup>* (cs, t);\n        t -WHILE b DO c\\<rightarrow> u;\n        \\<forall>cs.\n           ((WHILE b DO c) # cs, t) \\<rightarrow>\\<^sup>* (cs, u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((WHILE b DO c) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, u)\n 5. \\<And>s t.\n       \\<lbrakk>s -body\\<rightarrow> t;\n        \\<forall>cs. (body # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            (CALL # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\n 6. \\<And>f s c t g.\n       \\<lbrakk>f s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, f s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((LOCAL f; c; g) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, g s t)", "apply(blast intro:exec1.IfTrue rtrancl_trans)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>b s c2 t c1.\n       \\<lbrakk>\\<not> b s; s -c2\\<rightarrow> t;\n        \\<forall>cs. (c2 # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((IF b THEN c1 ELSE c2) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, t)\n 2. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow>\n       \\<forall>cs. ((WHILE b DO c) # cs, s) \\<rightarrow>\\<^sup>* (cs, s)\n 3. \\<And>b s c t u.\n       \\<lbrakk>b s; s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, s) \\<rightarrow>\\<^sup>* (cs, t);\n        t -WHILE b DO c\\<rightarrow> u;\n        \\<forall>cs.\n           ((WHILE b DO c) # cs, t) \\<rightarrow>\\<^sup>* (cs, u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((WHILE b DO c) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, u)\n 4. \\<And>s t.\n       \\<lbrakk>s -body\\<rightarrow> t;\n        \\<forall>cs. (body # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            (CALL # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\n 5. \\<And>f s c t g.\n       \\<lbrakk>f s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, f s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((LOCAL f; c; g) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, g s t)", "apply(blast intro:exec1.IfFalse rtrancl_trans)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow>\n       \\<forall>cs. ((WHILE b DO c) # cs, s) \\<rightarrow>\\<^sup>* (cs, s)\n 2. \\<And>b s c t u.\n       \\<lbrakk>b s; s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, s) \\<rightarrow>\\<^sup>* (cs, t);\n        t -WHILE b DO c\\<rightarrow> u;\n        \\<forall>cs.\n           ((WHILE b DO c) # cs, t) \\<rightarrow>\\<^sup>* (cs, u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((WHILE b DO c) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, u)\n 3. \\<And>s t.\n       \\<lbrakk>s -body\\<rightarrow> t;\n        \\<forall>cs. (body # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            (CALL # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\n 4. \\<And>f s c t g.\n       \\<lbrakk>f s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, f s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((LOCAL f; c; g) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, g s t)", "apply(blast intro:exec1.WhileFalse rtrancl_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b s c t u.\n       \\<lbrakk>b s; s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, s) \\<rightarrow>\\<^sup>* (cs, t);\n        t -WHILE b DO c\\<rightarrow> u;\n        \\<forall>cs.\n           ((WHILE b DO c) # cs, t) \\<rightarrow>\\<^sup>* (cs, u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((WHILE b DO c) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, u)\n 2. \\<And>s t.\n       \\<lbrakk>s -body\\<rightarrow> t;\n        \\<forall>cs. (body # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            (CALL # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\n 3. \\<And>f s c t g.\n       \\<lbrakk>f s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, f s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((LOCAL f; c; g) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, g s t)", "apply(blast intro:exec1.WhileTrue rtrancl_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s t.\n       \\<lbrakk>s -body\\<rightarrow> t;\n        \\<forall>cs. (body # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            (CALL # cs, s) \\<rightarrow>\\<^sup>* (cs, t)\n 2. \\<And>f s c t g.\n       \\<lbrakk>f s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, f s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((LOCAL f; c; g) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, g s t)", "apply(blast intro: rtrancl_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f s c t g.\n       \\<lbrakk>f s -c\\<rightarrow> t;\n        \\<forall>cs. (c # cs, f s) \\<rightarrow>\\<^sup>* (cs, t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>cs.\n                            ((LOCAL f; c; g) # cs,\n                             s) \\<rightarrow>\\<^sup>* (cs, g s t)", "apply(blast intro: rtrancl_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "inductive\n  execs :: \"state \\<Rightarrow> com list \\<Rightarrow> state \\<Rightarrow> bool\"   (\"_/ =_\\<Rightarrow>/ _\" [50,0,50] 50)\nwhere\n  \"s =[]\\<Rightarrow> s\"\n| \"s -c\\<rightarrow> t \\<Longrightarrow> t =cs\\<Rightarrow> u \\<Longrightarrow> s =c#cs\\<Rightarrow> u\""], ["", "inductive_cases [elim!]:\n \"s =[]\\<Rightarrow> t\"\n \"s =c#cs\\<Rightarrow> t\""], ["", "theorem exec1s_impl_execs: \"(cs,s) \\<rightarrow>\\<^sup>* ([],t) \\<Longrightarrow> s =cs\\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cs, s) \\<rightarrow>\\<^sup>* ([], t) \\<Longrightarrow>\n    s =cs\\<Rightarrow> t", "apply(erule converse_rtrancl_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. t =[]\\<Rightarrow> t\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<rightarrow> (aa, ba);\n        (aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t", "apply(rule execs.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(a, b) \\<rightarrow> (aa, ba);\n        (aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t", "apply(erule exec1.cases)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>a b aa ba ta f s cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = Do f # cs; b = s; aa = cs; ba = ta;\n        ta \\<in> f s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 2. \\<And>a b aa ba c1 c2 cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (c1; c2) # cs; b = s; aa = c1 # c2 # cs;\n        ba = s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 3. \\<And>a b aa ba bb s c1 c2 cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (IF bb THEN c1 ELSE c2) # cs; b = s;\n        aa = c1 # cs; ba = s; bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 4. \\<And>a b aa ba bb s c1 c2 cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (IF bb THEN c1 ELSE c2) # cs; b = s;\n        aa = c2 # cs; ba = s; \\<not> bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 5. \\<And>a b aa ba bb s c cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (WHILE bb DO c) # cs; b = s; aa = cs;\n        ba = s; \\<not> bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 6. \\<And>a b aa ba bb s c cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (WHILE bb DO c) # cs; b = s;\n        aa = c # (WHILE bb DO c) # cs; ba = s; bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 7. \\<And>a b aa ba cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = CALL # cs; b = s; aa = body # cs;\n        ba = s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 8. \\<And>a b aa ba f c g cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (LOCAL f; c; g) # cs; b = s;\n        aa = c # Do (\\<lambda>t. {g s t}) # cs; ba = f s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t", "apply(blast intro:execs.intros)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>a b aa ba c1 c2 cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (c1; c2) # cs; b = s; aa = c1 # c2 # cs;\n        ba = s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 2. \\<And>a b aa ba bb s c1 c2 cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (IF bb THEN c1 ELSE c2) # cs; b = s;\n        aa = c1 # cs; ba = s; bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 3. \\<And>a b aa ba bb s c1 c2 cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (IF bb THEN c1 ELSE c2) # cs; b = s;\n        aa = c2 # cs; ba = s; \\<not> bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 4. \\<And>a b aa ba bb s c cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (WHILE bb DO c) # cs; b = s; aa = cs;\n        ba = s; \\<not> bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 5. \\<And>a b aa ba bb s c cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (WHILE bb DO c) # cs; b = s;\n        aa = c # (WHILE bb DO c) # cs; ba = s; bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 6. \\<And>a b aa ba cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = CALL # cs; b = s; aa = body # cs;\n        ba = s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 7. \\<And>a b aa ba f c g cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (LOCAL f; c; g) # cs; b = s;\n        aa = c # Do (\\<lambda>t. {g s t}) # cs; ba = f s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t", "apply(blast intro:execs.intros)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a b aa ba bb s c1 c2 cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (IF bb THEN c1 ELSE c2) # cs; b = s;\n        aa = c1 # cs; ba = s; bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 2. \\<And>a b aa ba bb s c1 c2 cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (IF bb THEN c1 ELSE c2) # cs; b = s;\n        aa = c2 # cs; ba = s; \\<not> bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 3. \\<And>a b aa ba bb s c cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (WHILE bb DO c) # cs; b = s; aa = cs;\n        ba = s; \\<not> bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 4. \\<And>a b aa ba bb s c cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (WHILE bb DO c) # cs; b = s;\n        aa = c # (WHILE bb DO c) # cs; ba = s; bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 5. \\<And>a b aa ba cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = CALL # cs; b = s; aa = body # cs;\n        ba = s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 6. \\<And>a b aa ba f c g cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (LOCAL f; c; g) # cs; b = s;\n        aa = c # Do (\\<lambda>t. {g s t}) # cs; ba = f s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t", "apply(fastforce intro:execs.intros)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b aa ba bb s c1 c2 cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (IF bb THEN c1 ELSE c2) # cs; b = s;\n        aa = c2 # cs; ba = s; \\<not> bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 2. \\<And>a b aa ba bb s c cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (WHILE bb DO c) # cs; b = s; aa = cs;\n        ba = s; \\<not> bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 3. \\<And>a b aa ba bb s c cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (WHILE bb DO c) # cs; b = s;\n        aa = c # (WHILE bb DO c) # cs; ba = s; bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 4. \\<And>a b aa ba cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = CALL # cs; b = s; aa = body # cs;\n        ba = s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 5. \\<And>a b aa ba f c g cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (LOCAL f; c; g) # cs; b = s;\n        aa = c # Do (\\<lambda>t. {g s t}) # cs; ba = f s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t", "apply(fastforce intro:execs.intros)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b aa ba bb s c cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (WHILE bb DO c) # cs; b = s; aa = cs;\n        ba = s; \\<not> bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 2. \\<And>a b aa ba bb s c cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (WHILE bb DO c) # cs; b = s;\n        aa = c # (WHILE bb DO c) # cs; ba = s; bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 3. \\<And>a b aa ba cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = CALL # cs; b = s; aa = body # cs;\n        ba = s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 4. \\<And>a b aa ba f c g cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (LOCAL f; c; g) # cs; b = s;\n        aa = c # Do (\\<lambda>t. {g s t}) # cs; ba = f s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t", "apply(blast intro:execs.intros exec.intros)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba bb s c cs.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (WHILE bb DO c) # cs; b = s;\n        aa = c # (WHILE bb DO c) # cs; ba = s; bb s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 2. \\<And>a b aa ba cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = CALL # cs; b = s; aa = body # cs;\n        ba = s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 3. \\<And>a b aa ba f c g cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (LOCAL f; c; g) # cs; b = s;\n        aa = c # Do (\\<lambda>t. {g s t}) # cs; ba = f s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t", "apply(blast intro:execs.intros exec.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b aa ba cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = CALL # cs; b = s; aa = body # cs;\n        ba = s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t\n 2. \\<And>a b aa ba f c g cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (LOCAL f; c; g) # cs; b = s;\n        aa = c # Do (\\<lambda>t. {g s t}) # cs; ba = f s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t", "apply(blast intro:execs.intros exec.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba f c g cs s.\n       \\<lbrakk>(aa, ba) \\<rightarrow>\\<^sup>* ([], t);\n        ba =aa\\<Rightarrow> t; a = (LOCAL f; c; g) # cs; b = s;\n        aa = c # Do (\\<lambda>t. {g s t}) # cs; ba = f s\\<rbrakk>\n       \\<Longrightarrow> b =a\\<Rightarrow> t", "apply(blast intro:execs.intros exec.intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem exec1s_impl_exec: \"([c],s) \\<rightarrow>\\<^sup>* ([],t) \\<Longrightarrow> s -c\\<rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([c], s) \\<rightarrow>\\<^sup>* ([], t) \\<Longrightarrow>\n    s -c\\<rightarrow> t", "by(blast dest: exec1s_impl_execs)"], ["", "primrec termis :: \"com list \\<Rightarrow> state \\<Rightarrow> bool\" (infixl \"\\<Down>\" 60) where\n  \"[]\\<Down>s = True\"\n| \"c#cs \\<Down> s = (c\\<down>s \\<and> (\\<forall>t. s -c\\<rightarrow> t \\<longrightarrow> cs\\<Down>t))\""], ["", "lemma exec1_pres_termis: \"(cs,s) \\<rightarrow> (cs',s') \\<Longrightarrow> cs\\<Down>s \\<longrightarrow> cs'\\<Down>s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cs, s) \\<rightarrow> (cs', s') \\<Longrightarrow>\n    cs \\<Down> s \\<longrightarrow> cs' \\<Down> s'", "apply(erule exec1.induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>t f s cs.\n       t \\<in> f s \\<Longrightarrow>\n       Do f # cs \\<Down> s \\<longrightarrow> cs \\<Down> t\n 2. \\<And>c1 c2 cs s.\n       (c1; c2) # cs \\<Down> s \\<longrightarrow> c1 # c2 # cs \\<Down> s\n 3. \\<And>b s c1 c2 cs.\n       b s \\<Longrightarrow>\n       (IF b THEN c1 ELSE c2) # cs \\<Down> s \\<longrightarrow>\n       c1 # cs \\<Down> s\n 4. \\<And>b s c1 c2 cs.\n       \\<not> b s \\<Longrightarrow>\n       (IF b THEN c1 ELSE c2) # cs \\<Down> s \\<longrightarrow>\n       c2 # cs \\<Down> s\n 5. \\<And>b s c cs.\n       \\<not> b s \\<Longrightarrow>\n       (WHILE b DO c) # cs \\<Down> s \\<longrightarrow> cs \\<Down> s\n 6. \\<And>b s c cs.\n       b s \\<Longrightarrow>\n       (WHILE b DO c) # cs \\<Down> s \\<longrightarrow>\n       c # (WHILE b DO c) # cs \\<Down> s\n 7. \\<And>cs s. CALL # cs \\<Down> s \\<longrightarrow> body # cs \\<Down> s\n 8. \\<And>f c g cs s.\n       (LOCAL f; c; g) # cs \\<Down> s \\<longrightarrow>\n       c # Do (\\<lambda>t. {g s t}) # cs \\<Down> f s", "apply(simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c1 c2 cs s.\n       c1 \\<down> s \\<and>\n       (\\<forall>s1.\n           s -c1\\<rightarrow> s1 \\<longrightarrow> c2 \\<down> s1) \\<and>\n       (\\<forall>t.\n           (\\<exists>ta.\n               s -c1\\<rightarrow> ta \\<and> ta -c2\\<rightarrow>\n               t) \\<longrightarrow>\n           cs \\<Down> t) \\<longrightarrow>\n       (\\<forall>t.\n           s -c1\\<rightarrow> t \\<longrightarrow>\n           (\\<forall>ta.\n               t -c2\\<rightarrow> ta \\<longrightarrow> cs \\<Down> ta))\n 2. \\<And>b s c cs.\n       b s \\<Longrightarrow>\n       WHILE b DO c \\<down> s \\<and>\n       (\\<forall>t.\n           s -WHILE b DO c\\<rightarrow> t \\<longrightarrow>\n           cs \\<Down> t) \\<longrightarrow>\n       c \\<down> s \\<and>\n       (\\<forall>t.\n           s -c\\<rightarrow> t \\<longrightarrow>\n           WHILE b DO c \\<down> t \\<and>\n           (\\<forall>ta.\n               t -WHILE b DO c\\<rightarrow> ta \\<longrightarrow>\n               cs \\<Down> ta))\n 3. \\<And>f c g cs s.\n       c \\<down> f s \\<and>\n       (\\<forall>t.\n           (\\<exists>ta.\n               f s -c\\<rightarrow> ta \\<and> t = g s ta) \\<longrightarrow>\n           cs \\<Down> t) \\<longrightarrow>\n       (\\<forall>t.\n           f s -c\\<rightarrow> t \\<longrightarrow> cs \\<Down> g s t)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b s c cs.\n       b s \\<Longrightarrow>\n       WHILE b DO c \\<down> s \\<and>\n       (\\<forall>t.\n           s -WHILE b DO c\\<rightarrow> t \\<longrightarrow>\n           cs \\<Down> t) \\<longrightarrow>\n       c \\<down> s \\<and>\n       (\\<forall>t.\n           s -c\\<rightarrow> t \\<longrightarrow>\n           WHILE b DO c \\<down> t \\<and>\n           (\\<forall>ta.\n               t -WHILE b DO c\\<rightarrow> ta \\<longrightarrow>\n               cs \\<Down> ta))\n 2. \\<And>f c g cs s.\n       c \\<down> f s \\<and>\n       (\\<forall>t.\n           (\\<exists>ta.\n               f s -c\\<rightarrow> ta \\<and> t = g s ta) \\<longrightarrow>\n           cs \\<Down> t) \\<longrightarrow>\n       (\\<forall>t.\n           f s -c\\<rightarrow> t \\<longrightarrow> cs \\<Down> g s t)", "apply(blast intro:while_termiE while_termiE2 exec.WhileTrue)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f c g cs s.\n       c \\<down> f s \\<and>\n       (\\<forall>t.\n           (\\<exists>ta.\n               f s -c\\<rightarrow> ta \\<and> t = g s ta) \\<longrightarrow>\n           cs \\<Down> t) \\<longrightarrow>\n       (\\<forall>t.\n           f s -c\\<rightarrow> t \\<longrightarrow> cs \\<Down> g s t)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma execs_pres_termis: \"(cs,s) \\<rightarrow>\\<^sup>* (cs',s') \\<Longrightarrow> cs\\<Down>s \\<longrightarrow> cs'\\<Down>s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cs, s) \\<rightarrow>\\<^sup>* (cs', s') \\<Longrightarrow>\n    cs \\<Down> s \\<longrightarrow> cs' \\<Down> s'", "apply(erule rtrancl_induct2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. cs \\<Down> s \\<longrightarrow> cs \\<Down> s\n 2. \\<And>a b aa ba.\n       \\<lbrakk>(cs, s) \\<rightarrow>\\<^sup>* (a, b);\n        (a, b) \\<rightarrow> (aa, ba);\n        cs \\<Down> s \\<longrightarrow> a \\<Down> b\\<rbrakk>\n       \\<Longrightarrow> cs \\<Down> s \\<longrightarrow> aa \\<Down> ba", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>(cs, s) \\<rightarrow>\\<^sup>* (a, b);\n        (a, b) \\<rightarrow> (aa, ba);\n        cs \\<Down> s \\<longrightarrow> a \\<Down> b\\<rbrakk>\n       \\<Longrightarrow> cs \\<Down> s \\<longrightarrow> aa \\<Down> ba", "apply(blast dest:exec1_pres_termis)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma execs_pres_termi: \"\\<lbrakk> ([c],s) \\<rightarrow>\\<^sup>* (c'#cs',s'); c\\<down>s \\<rbrakk> \\<Longrightarrow> c'\\<down>s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>([c], s) \\<rightarrow>\\<^sup>* (c' # cs', s');\n     c \\<down> s\\<rbrakk>\n    \\<Longrightarrow> c' \\<down> s'", "apply(insert execs_pres_termis[of \"[c]\" _ \"c'#cs'\",simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>([c], s) \\<rightarrow>\\<^sup>* (c' # cs', s'); c \\<down> s;\n     \\<And>s s'.\n        ([c], s) \\<rightarrow>\\<^sup>* (c' # cs', s') \\<Longrightarrow>\n        c \\<down> s \\<longrightarrow>\n        c' \\<down> s' \\<and>\n        (\\<forall>t.\n            s' -c'\\<rightarrow> t \\<longrightarrow> cs' \\<Down> t)\\<rbrakk>\n    \\<Longrightarrow> c' \\<down> s'", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n termi_call_steps :: \"(state \\<times> state)set\" where\n\"termi_call_steps = {(t,s). body\\<down>s \\<and> (\\<exists>cs. ([body], s) \\<rightarrow>\\<^sup>* (CALL # cs, t))}\""], ["", "lemma lem:\n  \"\\<forall>y. (a,y)\\<in>r\\<^sup>+ \\<longrightarrow> P a \\<longrightarrow> P y \\<Longrightarrow> ((b,a) \\<in> {(y,x). P x \\<and> (x,y):r}\\<^sup>+) = ((b,a) \\<in> {(y,x). P x \\<and> (x,y)\\<in>r\\<^sup>+})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n       P a \\<longrightarrow> P y \\<Longrightarrow>\n    ((b, a) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<^sup>+) =\n    ((b, a) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r\\<^sup>+})", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>y.\n                (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> (b, a)\n                      \\<in> {(y, x). P x \\<and> (x, y) \\<in> r\\<^sup>+}\n 2. \\<lbrakk>\\<forall>y.\n                (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r\\<^sup>+}\\<rbrakk>\n    \\<Longrightarrow> (b, a)\n                      \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<^sup>+", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>y.\n                (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> P a \\<and> (a, b) \\<in> r\\<^sup>+\n 2. \\<lbrakk>\\<forall>y.\n                (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r\\<^sup>+}\\<rbrakk>\n    \\<Longrightarrow> (b, a)\n                      \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<^sup>+", "apply(erule trancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>y.\n                   (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        (b, y) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<rbrakk>\n       \\<Longrightarrow> P y \\<and> (y, b) \\<in> r\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        (b, y) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<^sup>+;\n        (y, z) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r};\n        P y \\<and> (y, b) \\<in> r\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> P z \\<and> (z, b) \\<in> r\\<^sup>+\n 3. \\<lbrakk>\\<forall>y.\n                (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r\\<^sup>+}\\<rbrakk>\n    \\<Longrightarrow> (b, a)\n                      \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<^sup>+", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        (b, y) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<^sup>+;\n        (y, z) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r};\n        P y \\<and> (y, b) \\<in> r\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> P z \\<and> (z, b) \\<in> r\\<^sup>+\n 2. \\<lbrakk>\\<forall>y.\n                (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r\\<^sup>+}\\<rbrakk>\n    \\<Longrightarrow> (b, a)\n                      \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<^sup>+", "apply(blast intro:trancl_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y.\n                (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     (b, a) \\<in> {(y, x). P x \\<and> (x, y) \\<in> r\\<^sup>+}\\<rbrakk>\n    \\<Longrightarrow> (b, a)\n                      \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<^sup>+", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y.\n                (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                P a \\<longrightarrow> P y;\n     P a; (a, b) \\<in> r\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> (b, a)\n                      \\<in> {(y, x). P x \\<and> (x, y) \\<in> r}\\<^sup>+", "apply(erule trancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>y.\n                   (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        P a; (a, y) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> (y, a)\n                         \\<in> {a. case a of\n                                   (y, x) \\<Rightarrow>\n                                     P x \\<and> (x, y) \\<in> r}\\<^sup>+\n 2. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        P a; (a, y) \\<in> r\\<^sup>+; (y, z) \\<in> r;\n        (y, a)\n        \\<in> {a. case a of\n                  (y, x) \\<Rightarrow>\n                    P x \\<and> (x, y) \\<in> r}\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (z, a)\n                         \\<in> {a. case a of\n                                   (y, x) \\<Rightarrow>\n                                     P x \\<and> (x, y) \\<in> r}\\<^sup>+", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>\\<forall>y.\n                   (a, y) \\<in> r\\<^sup>+ \\<longrightarrow>\n                   P a \\<longrightarrow> P y;\n        P a; (a, y) \\<in> r\\<^sup>+; (y, z) \\<in> r;\n        (y, a)\n        \\<in> {a. case a of\n                  (y, x) \\<Rightarrow>\n                    P x \\<and> (x, y) \\<in> r}\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (z, a)\n                         \\<in> {a. case a of\n                                   (y, x) \\<Rightarrow>\n                                     P x \\<and> (x, y) \\<in> r}\\<^sup>+", "apply(blast intro:trancl_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma renumber_aux:\n \"\\<lbrakk>\\<forall>i. (a,f i) : r^* \\<and> (f i,f(Suc i)) : r; (a,b) : r^* \\<rbrakk> \\<Longrightarrow> b = f 0 \\<longrightarrow> (\\<exists>f. f 0 = a & (\\<forall>i. (f i, f(Suc i)) : r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r;\n     (a, b) \\<in> r\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> b = f 0 \\<longrightarrow>\n                      (\\<exists>f.\n                          f 0 = a \\<and>\n                          (\\<forall>i. (f i, f (Suc i)) \\<in> r))", "apply(erule converse_rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>i.\n       (a, f i) \\<in> r\\<^sup>* \\<and>\n       (f i, f (Suc i)) \\<in> r \\<Longrightarrow>\n    b = f 0 \\<longrightarrow>\n    (\\<exists>f. f 0 = b \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r))\n 2. \\<And>y z.\n       \\<lbrakk>\\<forall>i.\n                   (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r;\n        (y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<longrightarrow>\n        (\\<exists>f.\n            f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r))\\<rbrakk>\n       \\<Longrightarrow> b = f 0 \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = y \\<and>\n                             (\\<forall>i. (f i, f (Suc i)) \\<in> r))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>\\<forall>i.\n                   (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r;\n        (y, z) \\<in> r; (z, b) \\<in> r\\<^sup>*;\n        b = f 0 \\<longrightarrow>\n        (\\<exists>f.\n            f 0 = z \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r))\\<rbrakk>\n       \\<Longrightarrow> b = f 0 \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = y \\<and>\n                             (\\<forall>i. (f i, f (Suc i)) \\<in> r))", "apply(clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y fa.\n       \\<lbrakk>\\<forall>i.\n                   (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r;\n        (y, fa 0) \\<in> r; (fa 0, f 0) \\<in> r\\<^sup>*; b = f 0;\n        \\<forall>i. (fa i, fa (Suc i)) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = y \\<and>\n                            (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "apply(rule_tac x=\"\\<lambda>i. case i of 0 \\<Rightarrow> y | Suc i \\<Rightarrow> fa i\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y fa.\n       \\<lbrakk>\\<forall>i.\n                   (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r;\n        (y, fa 0) \\<in> r; (fa 0, f 0) \\<in> r\\<^sup>*; b = f 0;\n        \\<forall>i. (fa i, fa (Suc i)) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> (case 0 of 0 \\<Rightarrow> y\n                          | Suc i \\<Rightarrow> fa i) =\n                         y \\<and>\n                         (\\<forall>i.\n                             (case i of 0 \\<Rightarrow> y\n                              | Suc i \\<Rightarrow> fa i,\n                              case Suc i of 0 \\<Rightarrow> y\n                              | Suc i \\<Rightarrow> fa i)\n                             \\<in> r)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y fa.\n       \\<lbrakk>\\<forall>i.\n                   (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r;\n        (y, fa 0) \\<in> r; (fa 0, f 0) \\<in> r\\<^sup>*; b = f 0;\n        \\<forall>i. (fa i, fa (Suc i)) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            (case i of 0 \\<Rightarrow> y\n                             | Suc x \\<Rightarrow> fa x,\n                             fa i)\n                            \\<in> r", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y fa i.\n       \\<lbrakk>\\<forall>i.\n                   (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r;\n        (y, fa 0) \\<in> r; (fa 0, f 0) \\<in> r\\<^sup>*; b = f 0;\n        \\<forall>i. (fa i, fa (Suc i)) \\<in> r\\<rbrakk>\n       \\<Longrightarrow> (case i of 0 \\<Rightarrow> y\n                          | Suc x \\<Rightarrow> fa x,\n                          fa i)\n                         \\<in> r", "apply(case_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y fa i.\n       \\<lbrakk>\\<forall>i.\n                   (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r;\n        (y, fa 0) \\<in> r; (fa 0, f 0) \\<in> r\\<^sup>*; b = f 0;\n        \\<forall>i. (fa i, fa (Suc i)) \\<in> r; i = 0\\<rbrakk>\n       \\<Longrightarrow> (case i of 0 \\<Rightarrow> y\n                          | Suc x \\<Rightarrow> fa x,\n                          fa i)\n                         \\<in> r\n 2. \\<And>y fa i nat.\n       \\<lbrakk>\\<forall>i.\n                   (a, f i) \\<in> r\\<^sup>* \\<and> (f i, f (Suc i)) \\<in> r;\n        (y, fa 0) \\<in> r; (fa 0, f 0) \\<in> r\\<^sup>*; b = f 0;\n        \\<forall>i. (fa i, fa (Suc i)) \\<in> r; i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (case i of 0 \\<Rightarrow> y\n                          | Suc x \\<Rightarrow> fa x,\n                          fa i)\n                         \\<in> r", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma renumber:\n \"\\<forall>i. (a,f i) : r^* \\<and> (f i,f(Suc i)) : r \\<Longrightarrow> \\<exists>f. f 0 = a & (\\<forall>i. (f i, f(Suc i)) : r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (a, f i) \\<in> r\\<^sup>* \\<and>\n       (f i, f (Suc i)) \\<in> r \\<Longrightarrow>\n    \\<exists>f. f 0 = a \\<and> (\\<forall>i. (f i, f (Suc i)) \\<in> r)", "by(blast dest:renumber_aux)"], ["", "definition inf :: \"com list \\<Rightarrow> state \\<Rightarrow> bool\" where\n\"inf cs s \\<longleftrightarrow> (\\<exists>f. f 0 = (cs,s) \\<and> (\\<forall>i. f i \\<rightarrow> f(Suc i)))\""], ["", "lemma [iff]: \"\\<not> inf [] s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> PHoareTotal.inf [] s", "apply(unfold inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 = ([], s) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac x = 0 in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ([], s); f 0 \\<rightarrow> f (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [iff]: \"\\<not> inf [Do f] s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> PHoareTotal.inf [Do f] s", "apply(unfold inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>fa.\n       fa 0 = ([Do f], s) \\<and> (\\<forall>i. fa i \\<rightarrow> fa (Suc i))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fa.\n       \\<lbrakk>fa 0 = ([Do f], s);\n        \\<forall>i. fa i \\<rightarrow> fa (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(frule_tac x = 0 in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fa.\n       \\<lbrakk>fa 0 = ([Do f], s);\n        \\<forall>i. fa i \\<rightarrow> fa (Suc i);\n        fa 0 \\<rightarrow> fa (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac x = 1 in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fa.\n       \\<lbrakk>fa 0 = ([Do f], s); fa 0 \\<rightarrow> fa (Suc 0);\n        fa 1 \\<rightarrow> fa (Suc 1)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(case_tac \"fa (Suc 0)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fa a b.\n       \\<lbrakk>fa 0 = ([Do f], s); fa 0 \\<rightarrow> fa (Suc 0);\n        fa 1 \\<rightarrow> fa (Suc 1); fa (Suc 0) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [iff]: \"inf ((c1;c2)#cs) s = inf (c1#c2#cs) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PHoareTotal.inf ((c1; c2) # cs) s = PHoareTotal.inf (c1 # c2 # cs) s", "apply(unfold inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f.\n        f 0 = ((c1; c2) # cs, s) \\<and>\n        (\\<forall>i. f i \\<rightarrow> f (Suc i))) =\n    (\\<exists>f.\n        f 0 = (c1 # c2 # cs, s) \\<and>\n        (\\<forall>i. f i \\<rightarrow> f (Suc i)))", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>f.\n       f 0 = ((c1; c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = (c1 # c2 # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<exists>f.\n       f 0 = (c1 # c2 # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((c1; c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((c1; c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = (c1 # c2 # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<exists>f.\n       f 0 = (c1 # c2 # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((c1; c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule_tac x = \"\\<lambda>i. f(Suc i)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((c1; c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> f (Suc 0) = (c1 # c2 # cs, s) \\<and>\n                         (\\<forall>i.\n                             f (Suc i) \\<rightarrow> f (Suc (Suc i)))\n 2. \\<exists>f.\n       f 0 = (c1 # c2 # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((c1; c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(frule_tac x = 0 in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((c1; c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> f (Suc 0) = (c1 # c2 # cs, s) \\<and>\n                         (\\<forall>i.\n                             f (Suc i) \\<rightarrow> f (Suc (Suc i)))\n 2. \\<exists>f.\n       f 0 = (c1 # c2 # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((c1; c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(case_tac \"f (Suc 0)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f a b.\n       \\<lbrakk>f 0 = ((c1; c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> f (Suc 0) = (c1 # c2 # cs, s) \\<and>\n                         (\\<forall>i.\n                             f (Suc i) \\<rightarrow> f (Suc (Suc i)))\n 2. \\<exists>f.\n       f 0 = (c1 # c2 # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((c1; c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (c1 # c2 # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((c1; c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (c1 # c2 # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ((c1; c2) # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule_tac x = \"\\<lambda>i. case i of 0 \\<Rightarrow> ((c1;c2)#cs,s) | Suc i \\<Rightarrow> f i\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (c1 # c2 # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> (case 0 of 0 \\<Rightarrow> ((c1; c2) # cs, s)\n                          | Suc i \\<Rightarrow> f i) =\n                         ((c1; c2) # cs, s) \\<and>\n                         (\\<forall>i.\n                             (case i of 0 \\<Rightarrow> ((c1; c2) # cs, s)\n                              | Suc i \\<Rightarrow>\n                                  f i) \\<rightarrow> (case Suc i of\n                0 \\<Rightarrow> ((c1; c2) # cs, s)\n                | Suc i \\<Rightarrow> f i))", "apply(simp split:nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [iff]: \"inf ((IF b THEN c1 ELSE c2)#cs) s =\n              inf ((if b s then c1 else c2)#cs) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PHoareTotal.inf ((IF b THEN c1 ELSE c2) # cs) s =\n    PHoareTotal.inf ((if b s then c1 else c2) # cs) s", "apply(unfold inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f.\n        f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n        (\\<forall>i. f i \\<rightarrow> f (Suc i))) =\n    (\\<exists>f.\n        f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n        (\\<forall>i. f i \\<rightarrow> f (Suc i)))", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> (b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (c1 # cs, s) \\<and>\n                              (\\<forall>i.\n                                  f i \\<rightarrow> f (Suc i)))) \\<and>\n                         (\\<not> b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (c2 # cs, s) \\<and>\n                              (\\<forall>i. f i \\<rightarrow> f (Suc i))))\n 2. \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(frule_tac x = 0 in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> (b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (c1 # cs, s) \\<and>\n                              (\\<forall>i.\n                                  f i \\<rightarrow> f (Suc i)))) \\<and>\n                         (\\<not> b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (c2 # cs, s) \\<and>\n                              (\\<forall>i. f i \\<rightarrow> f (Suc i))))\n 2. \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply (case_tac \"f (Suc 0)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> (b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (c1 # cs, s) \\<and>\n                              (\\<forall>i.\n                                  f i \\<rightarrow> f (Suc i)))) \\<and>\n                         (\\<not> b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (c2 # cs, s) \\<and>\n                              (\\<forall>i. f i \\<rightarrow> f (Suc i))))\n 2. \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> b s \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = (c1 # cs, s) \\<and>\n                             (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 2. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<not> b s \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = (c2 # cs, s) \\<and>\n                             (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 3. \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i); f (Suc 0) = (c1 # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = (c1 # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<not> b s \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = (c2 # cs, s) \\<and>\n                             (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 3. \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule_tac x = \"\\<lambda>i. f(Suc i)\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i); f (Suc 0) = (c1 # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> f (Suc 0) = (c1 # cs, s) \\<and>\n                         (\\<forall>i.\n                             f (Suc i) \\<rightarrow> f (Suc (Suc i)))\n 2. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<not> b s \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = (c2 # cs, s) \\<and>\n                             (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 3. \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<not> b s \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = (c2 # cs, s) \\<and>\n                             (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 2. \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i); f (Suc 0) = (c2 # cs, s);\n        \\<not> b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = (c2 # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule_tac x = \"\\<lambda>i. f(Suc i)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((IF b THEN c1 ELSE c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i); f (Suc 0) = (c2 # cs, s);\n        \\<not> b s\\<rbrakk>\n       \\<Longrightarrow> f (Suc 0) = (c2 # cs, s) \\<and>\n                         (\\<forall>i.\n                             f (Suc i) \\<rightarrow> f (Suc (Suc i)))\n 2. \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = ((if b s then c1 else c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((if b s then c1 else c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule_tac x = \"\\<lambda>i. case i of 0 \\<Rightarrow> ((IF b THEN c1 ELSE c2)#cs,s) | Suc i \\<Rightarrow> f i\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((if b s then c1 else c2) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> (case 0 of\n                          0 \\<Rightarrow> ((IF b THEN c1 ELSE c2) # cs, s)\n                          | Suc i \\<Rightarrow> f i) =\n                         ((IF b THEN c1 ELSE c2) # cs, s) \\<and>\n                         (\\<forall>i.\n                             (case i of\n                              0 \\<Rightarrow>\n                                ((IF b THEN c1 ELSE c2) # cs, s)\n                              | Suc i \\<Rightarrow>\n                                  f i) \\<rightarrow> (case Suc i of\n                0 \\<Rightarrow> ((IF b THEN c1 ELSE c2) # cs, s)\n                | Suc i \\<Rightarrow> f i))", "apply(simp add: exec1.intros split:nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [simp]:\n \"inf ((WHILE b DO c)#cs) s =\n  (if b s then inf (c#(WHILE b DO c)#cs) s else inf cs s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PHoareTotal.inf ((WHILE b DO c) # cs) s =\n    (if b s then PHoareTotal.inf (c # (WHILE b DO c) # cs) s\n     else PHoareTotal.inf cs s)", "apply(unfold inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f.\n        f 0 = ((WHILE b DO c) # cs, s) \\<and>\n        (\\<forall>i. f i \\<rightarrow> f (Suc i))) =\n    (if b s\n     then \\<exists>f.\n             f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n             (\\<forall>i. f i \\<rightarrow> f (Suc i))\n     else \\<exists>f.\n             f 0 = (cs, s) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i)))", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> (b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n                              (\\<forall>i.\n                                  f i \\<rightarrow> f (Suc i)))) \\<and>\n                         (\\<not> b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (cs, s) \\<and>\n                              (\\<forall>i. f i \\<rightarrow> f (Suc i))))\n 2. if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(frule_tac x = 0 in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> (b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n                              (\\<forall>i.\n                                  f i \\<rightarrow> f (Suc i)))) \\<and>\n                         (\\<not> b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (cs, s) \\<and>\n                              (\\<forall>i. f i \\<rightarrow> f (Suc i))))\n 2. if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply (case_tac \"f (Suc 0)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> (b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n                              (\\<forall>i.\n                                  f i \\<rightarrow> f (Suc i)))) \\<and>\n                         (\\<not> b s \\<longrightarrow>\n                          (\\<exists>f.\n                              f 0 = (cs, s) \\<and>\n                              (\\<forall>i. f i \\<rightarrow> f (Suc i))))\n 2. if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> b s \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n                             (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 2. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<not> b s \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = (cs, s) \\<and>\n                             (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 3. if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f (Suc 0) = (c # (WHILE b DO c) # cs, s); b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<not> b s \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = (cs, s) \\<and>\n                             (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 3. if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule_tac x = \"\\<lambda>i. f(Suc i)\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f (Suc 0) = (c # (WHILE b DO c) # cs, s); b s\\<rbrakk>\n       \\<Longrightarrow> f (Suc 0) = (c # (WHILE b DO c) # cs, s) \\<and>\n                         (\\<forall>i.\n                             f (Suc i) \\<rightarrow> f (Suc (Suc i)))\n 2. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<not> b s \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = (cs, s) \\<and>\n                             (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 3. if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f a ba.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<not> b s \\<longrightarrow>\n                         (\\<exists>f.\n                             f 0 = (cs, s) \\<and>\n                             (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 2. if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i); f (Suc 0) = (cs, s);\n        \\<not> b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = (cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule_tac x = \"\\<lambda>i. f(Suc i)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = ((WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i); f (Suc 0) = (cs, s);\n        \\<not> b s\\<rbrakk>\n       \\<Longrightarrow> f (Suc 0) = (cs, s) \\<and>\n                         (\\<forall>i.\n                             f (Suc i) \\<rightarrow> f (Suc (Suc i)))\n 2. if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. if b s\n    then \\<exists>f.\n            f 0 = (c # (WHILE b DO c) # cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n    else \\<exists>f.\n            f 0 = (cs, s) \\<and>\n            (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = ((WHILE b DO c) # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply (clarsimp split:if_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>b s; f 0 = (c # (WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ((WHILE b DO c) # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<And>f.\n       \\<lbrakk>\\<not> b s; f 0 = (cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ((WHILE b DO c) # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule_tac x = \"\\<lambda>i. case i of 0 \\<Rightarrow> ((WHILE b DO c)#cs,s) | Suc i \\<Rightarrow> f i\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>b s; f 0 = (c # (WHILE b DO c) # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> (case 0 of 0 \\<Rightarrow> ((WHILE b DO c) # cs, s)\n                          | Suc i \\<Rightarrow> f i) =\n                         ((WHILE b DO c) # cs, s) \\<and>\n                         (\\<forall>i.\n                             (case i of\n                              0 \\<Rightarrow> ((WHILE b DO c) # cs, s)\n                              | Suc i \\<Rightarrow>\n                                  f i) \\<rightarrow> (case Suc i of\n                0 \\<Rightarrow> ((WHILE b DO c) # cs, s)\n                | Suc i \\<Rightarrow> f i))\n 2. \\<And>f.\n       \\<lbrakk>\\<not> b s; f 0 = (cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ((WHILE b DO c) # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(simp add: exec1.intros split:nat.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<not> b s; f 0 = (cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ((WHILE b DO c) # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule_tac x = \"\\<lambda>i. case i of 0 \\<Rightarrow> ((WHILE b DO c)#cs,s) | Suc i \\<Rightarrow> f i\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<not> b s; f 0 = (cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> (case 0 of 0 \\<Rightarrow> ((WHILE b DO c) # cs, s)\n                          | Suc i \\<Rightarrow> f i) =\n                         ((WHILE b DO c) # cs, s) \\<and>\n                         (\\<forall>i.\n                             (case i of\n                              0 \\<Rightarrow> ((WHILE b DO c) # cs, s)\n                              | Suc i \\<Rightarrow>\n                                  f i) \\<rightarrow> (case Suc i of\n                0 \\<Rightarrow> ((WHILE b DO c) # cs, s)\n                | Suc i \\<Rightarrow> f i))", "apply(simp add: exec1.intros split:nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [iff]: \"inf (CALL#cs) s =  inf (body#cs) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PHoareTotal.inf (CALL # cs) s = PHoareTotal.inf (body # cs) s", "apply(unfold inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>f.\n        f 0 = (CALL # cs, s) \\<and>\n        (\\<forall>i. f i \\<rightarrow> f (Suc i))) =\n    (\\<exists>f.\n        f 0 = (body # cs, s) \\<and>\n        (\\<forall>i. f i \\<rightarrow> f (Suc i)))", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>f.\n       f 0 = (CALL # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = (body # cs, s) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<exists>f.\n       f 0 = (body # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = (CALL # cs, s) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (CALL # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = (body # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<exists>f.\n       f 0 = (body # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = (CALL # cs, s) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(frule_tac x = 0 in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (CALL # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = (body # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<exists>f.\n       f 0 = (body # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = (CALL # cs, s) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply (case_tac \"f (Suc 0)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f a b.\n       \\<lbrakk>f 0 = (CALL # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f 0 \\<rightarrow> f (Suc 0); f (Suc 0) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = (body # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<exists>f.\n       f 0 = (body # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = (CALL # cs, s) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (CALL # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f (Suc 0) = (body # cs, s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = (body # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<exists>f.\n       f 0 = (body # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = (CALL # cs, s) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule_tac x = \"\\<lambda>i. f(Suc i)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (CALL # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        f (Suc 0) = (body # cs, s)\\<rbrakk>\n       \\<Longrightarrow> f (Suc 0) = (body # cs, s) \\<and>\n                         (\\<forall>i.\n                             f (Suc i) \\<rightarrow> f (Suc (Suc i)))\n 2. \\<exists>f.\n       f 0 = (body # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = (CALL # cs, s) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (body # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    \\<exists>f.\n       f 0 = (CALL # cs, s) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (body # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = (CALL # cs, s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(rule_tac x = \"\\<lambda>i. case i of 0 \\<Rightarrow> (CALL#cs,s) | Suc i \\<Rightarrow> f i\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (body # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> (case 0 of 0 \\<Rightarrow> (CALL # cs, s)\n                          | Suc i \\<Rightarrow> f i) =\n                         (CALL # cs, s) \\<and>\n                         (\\<forall>i.\n                             (case i of 0 \\<Rightarrow> (CALL # cs, s)\n                              | Suc i \\<Rightarrow>\n                                  f i) \\<rightarrow> (case Suc i of\n                0 \\<Rightarrow> (CALL # cs, s) | Suc i \\<Rightarrow> f i))", "apply(simp add: exec1.intros split:nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [iff]: \"inf ((LOCAL f;c;g)#cs) s =\n              inf (c#Do(\\<lambda>t. {g s t})#cs) (f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PHoareTotal.inf ((LOCAL f; c; g) # cs) s =\n    PHoareTotal.inf (c # Do (\\<lambda>t. {g s t}) # cs) (f s)", "apply(unfold inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>fa.\n        fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n        (\\<forall>i. fa i \\<rightarrow> fa (Suc i))) =\n    (\\<exists>fa.\n        fa 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n        (\\<forall>i. fa i \\<rightarrow> fa (Suc i)))", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>fa.\n       fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i)) \\<Longrightarrow>\n    \\<exists>fa.\n       fa 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i))\n 2. \\<exists>fa.\n       fa 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i)) \\<Longrightarrow>\n    \\<exists>fa.\n       fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>fa.\n       \\<lbrakk>fa 0 = ((LOCAL f; c; g) # cs, s);\n        \\<forall>i. fa i \\<rightarrow> fa (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa.\n                            fa 0 =\n                            (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n                            (\\<forall>i. fa i \\<rightarrow> fa (Suc i))\n 2. \\<exists>fa.\n       fa 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i)) \\<Longrightarrow>\n    \\<exists>fa.\n       fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i))", "apply(rename_tac F)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F 0 = ((LOCAL f; c; g) # cs, s);\n        \\<forall>i. F i \\<rightarrow> F (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa.\n                            fa 0 =\n                            (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n                            (\\<forall>i. fa i \\<rightarrow> fa (Suc i))\n 2. \\<exists>fa.\n       fa 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i)) \\<Longrightarrow>\n    \\<exists>fa.\n       fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i))", "apply(frule_tac x = 0 in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F 0 = ((LOCAL f; c; g) # cs, s);\n        \\<forall>i. F i \\<rightarrow> F (Suc i);\n        F 0 \\<rightarrow> F (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa.\n                            fa 0 =\n                            (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n                            (\\<forall>i. fa i \\<rightarrow> fa (Suc i))\n 2. \\<exists>fa.\n       fa 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i)) \\<Longrightarrow>\n    \\<exists>fa.\n       fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i))", "apply (case_tac \"F (Suc 0)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F a b.\n       \\<lbrakk>F 0 = ((LOCAL f; c; g) # cs, s);\n        \\<forall>i. F i \\<rightarrow> F (Suc i);\n        F 0 \\<rightarrow> F (Suc 0); F (Suc 0) = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa.\n                            fa 0 =\n                            (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n                            (\\<forall>i. fa i \\<rightarrow> fa (Suc i))\n 2. \\<exists>fa.\n       fa 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i)) \\<Longrightarrow>\n    \\<exists>fa.\n       fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F 0 = ((LOCAL f; c; g) # cs, s);\n        \\<forall>i. F i \\<rightarrow> F (Suc i);\n        F (Suc 0) = (c # Do (\\<lambda>t. {g s t}) # cs, f s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa.\n                            fa 0 =\n                            (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n                            (\\<forall>i. fa i \\<rightarrow> fa (Suc i))\n 2. \\<exists>fa.\n       fa 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i)) \\<Longrightarrow>\n    \\<exists>fa.\n       fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i))", "apply(rule_tac x = \"\\<lambda>i. F(Suc i)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>F.\n       \\<lbrakk>F 0 = ((LOCAL f; c; g) # cs, s);\n        \\<forall>i. F i \\<rightarrow> F (Suc i);\n        F (Suc 0) = (c # Do (\\<lambda>t. {g s t}) # cs, f s)\\<rbrakk>\n       \\<Longrightarrow> F (Suc 0) =\n                         (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n                         (\\<forall>i.\n                             F (Suc i) \\<rightarrow> F (Suc (Suc i)))\n 2. \\<exists>fa.\n       fa 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i)) \\<Longrightarrow>\n    \\<exists>fa.\n       fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>fa.\n       fa 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i)) \\<Longrightarrow>\n    \\<exists>fa.\n       fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n       (\\<forall>i. fa i \\<rightarrow> fa (Suc i))", "apply (clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fa.\n       \\<lbrakk>fa 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s);\n        \\<forall>i. fa i \\<rightarrow> fa (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa.\n                            fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n                            (\\<forall>i. fa i \\<rightarrow> fa (Suc i))", "apply(rename_tac F)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>F 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s);\n        \\<forall>i. F i \\<rightarrow> F (Suc i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa.\n                            fa 0 = ((LOCAL f; c; g) # cs, s) \\<and>\n                            (\\<forall>i. fa i \\<rightarrow> fa (Suc i))", "apply(rule_tac x = \"\\<lambda>i. case i of 0 \\<Rightarrow> ((LOCAL f;c;g)#cs,s) | Suc i \\<Rightarrow> F i\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F.\n       \\<lbrakk>F 0 = (c # Do (\\<lambda>t. {g s t}) # cs, f s);\n        \\<forall>i. F i \\<rightarrow> F (Suc i)\\<rbrakk>\n       \\<Longrightarrow> (case 0 of\n                          0 \\<Rightarrow> ((LOCAL f; c; g) # cs, s)\n                          | Suc i \\<Rightarrow> F i) =\n                         ((LOCAL f; c; g) # cs, s) \\<and>\n                         (\\<forall>i.\n                             (case i of\n                              0 \\<Rightarrow> ((LOCAL f; c; g) # cs, s)\n                              | Suc i \\<Rightarrow>\n                                  F i) \\<rightarrow> (case Suc i of\n                0 \\<Rightarrow> ((LOCAL f; c; g) # cs, s)\n                | Suc i \\<Rightarrow> F i))", "apply(simp add: exec1.intros split:nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma exec1_only1_aux: \"(ccs,s) \\<rightarrow> (cs',t) \\<Longrightarrow>\n                    \\<forall>c cs. ccs = c#cs \\<longrightarrow> (\\<exists>cs1. cs' = cs1 @ cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ccs, s) \\<rightarrow> (cs', t) \\<Longrightarrow>\n    \\<forall>c cs.\n       ccs = c # cs \\<longrightarrow> (\\<exists>cs1. cs' = cs1 @ cs)", "apply(erule exec1.induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>t f s cs.\n       t \\<in> f s \\<Longrightarrow>\n       \\<forall>c csa.\n          Do f # cs = c # csa \\<longrightarrow>\n          (\\<exists>cs1. cs = cs1 @ csa)\n 2. \\<And>c1 c2 cs s.\n       \\<forall>c csa.\n          (c1; c2) # cs = c # csa \\<longrightarrow>\n          (\\<exists>cs1. c1 # c2 # cs = cs1 @ csa)\n 3. \\<And>b s c1 c2 cs.\n       b s \\<Longrightarrow>\n       \\<forall>c csa.\n          (IF b THEN c1 ELSE c2) # cs = c # csa \\<longrightarrow>\n          (\\<exists>cs1. c1 # cs = cs1 @ csa)\n 4. \\<And>b s c1 c2 cs.\n       \\<not> b s \\<Longrightarrow>\n       \\<forall>c csa.\n          (IF b THEN c1 ELSE c2) # cs = c # csa \\<longrightarrow>\n          (\\<exists>cs1. c2 # cs = cs1 @ csa)\n 5. \\<And>b s c cs.\n       \\<not> b s \\<Longrightarrow>\n       \\<forall>ca csa.\n          (WHILE b DO c) # cs = ca # csa \\<longrightarrow>\n          (\\<exists>cs1. cs = cs1 @ csa)\n 6. \\<And>b s c cs.\n       b s \\<Longrightarrow>\n       \\<forall>ca csa.\n          (WHILE b DO c) # cs = ca # csa \\<longrightarrow>\n          (\\<exists>cs1. c # (WHILE b DO c) # cs = cs1 @ csa)\n 7. \\<And>cs s.\n       \\<forall>c csa.\n          CALL # cs = c # csa \\<longrightarrow>\n          (\\<exists>cs1. body # cs = cs1 @ csa)\n 8. \\<And>f c g cs s.\n       \\<forall>ca csa.\n          (LOCAL f; c; g) # cs = ca # csa \\<longrightarrow>\n          (\\<exists>cs1. c # Do (\\<lambda>t. {g s t}) # cs = cs1 @ csa)", "apply blast"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>c1 c2 cs s.\n       \\<forall>c csa.\n          (c1; c2) # cs = c # csa \\<longrightarrow>\n          (\\<exists>cs1. c1 # c2 # cs = cs1 @ csa)\n 2. \\<And>b s c1 c2 cs.\n       b s \\<Longrightarrow>\n       \\<forall>c csa.\n          (IF b THEN c1 ELSE c2) # cs = c # csa \\<longrightarrow>\n          (\\<exists>cs1. c1 # cs = cs1 @ csa)\n 3. \\<And>b s c1 c2 cs.\n       \\<not> b s \\<Longrightarrow>\n       \\<forall>c csa.\n          (IF b THEN c1 ELSE c2) # cs = c # csa \\<longrightarrow>\n          (\\<exists>cs1. c2 # cs = cs1 @ csa)\n 4. \\<And>b s c cs.\n       \\<not> b s \\<Longrightarrow>\n       \\<forall>ca csa.\n          (WHILE b DO c) # cs = ca # csa \\<longrightarrow>\n          (\\<exists>cs1. cs = cs1 @ csa)\n 5. \\<And>b s c cs.\n       b s \\<Longrightarrow>\n       \\<forall>ca csa.\n          (WHILE b DO c) # cs = ca # csa \\<longrightarrow>\n          (\\<exists>cs1. c # (WHILE b DO c) # cs = cs1 @ csa)\n 6. \\<And>cs s.\n       \\<forall>c csa.\n          CALL # cs = c # csa \\<longrightarrow>\n          (\\<exists>cs1. body # cs = cs1 @ csa)\n 7. \\<And>f c g cs s.\n       \\<forall>ca csa.\n          (LOCAL f; c; g) # cs = ca # csa \\<longrightarrow>\n          (\\<exists>cs1. c # Do (\\<lambda>t. {g s t}) # cs = cs1 @ csa)", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma exec1_only1: \"(c#cs,s) \\<rightarrow> (cs',t) \\<Longrightarrow> \\<exists>cs1. cs' = cs1 @ cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c # cs, s) \\<rightarrow> (cs', t) \\<Longrightarrow>\n    \\<exists>cs1. cs' = cs1 @ cs", "by(blast dest:exec1_only1_aux)"], ["", "lemma exec1_drop_suffix_aux:\n\"(cs12,s) \\<rightarrow> (cs1'2,s') \\<Longrightarrow> \\<forall>cs1 cs2 cs1'.\n cs12 = cs1@cs2 & cs1'2 = cs1'@cs2 & cs1 \\<noteq> [] \\<longrightarrow> (cs1,s) \\<rightarrow> (cs1',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cs12, s) \\<rightarrow> (cs1'2, s') \\<Longrightarrow>\n    \\<forall>cs1 cs2 cs1'.\n       cs12 = cs1 @ cs2 \\<and>\n       cs1'2 = cs1' @ cs2 \\<and> cs1 \\<noteq> [] \\<longrightarrow>\n       (cs1, s) \\<rightarrow> (cs1', s')", "apply(erule exec1.induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>t f s cs.\n       t \\<in> f s \\<Longrightarrow>\n       \\<forall>cs1 cs2 cs1'.\n          Do f # cs = cs1 @ cs2 \\<and>\n          cs = cs1' @ cs2 \\<and> cs1 \\<noteq> [] \\<longrightarrow>\n          (cs1, s) \\<rightarrow> (cs1', t)\n 2. \\<And>c1 c2 cs s.\n       \\<forall>cs1 cs2 cs1'.\n          (c1; c2) # cs = cs1 @ cs2 \\<and>\n          c1 # c2 # cs = cs1' @ cs2 \\<and> cs1 \\<noteq> [] \\<longrightarrow>\n          (cs1, s) \\<rightarrow> (cs1', s)\n 3. \\<And>b s c1 c2 cs.\n       b s \\<Longrightarrow>\n       \\<forall>cs1 cs2 cs1'.\n          (IF b THEN c1 ELSE c2) # cs = cs1 @ cs2 \\<and>\n          c1 # cs = cs1' @ cs2 \\<and> cs1 \\<noteq> [] \\<longrightarrow>\n          (cs1, s) \\<rightarrow> (cs1', s)\n 4. \\<And>b s c1 c2 cs.\n       \\<not> b s \\<Longrightarrow>\n       \\<forall>cs1 cs2 cs1'.\n          (IF b THEN c1 ELSE c2) # cs = cs1 @ cs2 \\<and>\n          c2 # cs = cs1' @ cs2 \\<and> cs1 \\<noteq> [] \\<longrightarrow>\n          (cs1, s) \\<rightarrow> (cs1', s)\n 5. \\<And>b s c cs.\n       \\<not> b s \\<Longrightarrow>\n       \\<forall>cs1 cs2 cs1'.\n          (WHILE b DO c) # cs = cs1 @ cs2 \\<and>\n          cs = cs1' @ cs2 \\<and> cs1 \\<noteq> [] \\<longrightarrow>\n          (cs1, s) \\<rightarrow> (cs1', s)\n 6. \\<And>b s c cs.\n       b s \\<Longrightarrow>\n       \\<forall>cs1 cs2 cs1'.\n          (WHILE b DO c) # cs = cs1 @ cs2 \\<and>\n          c # (WHILE b DO c) # cs = cs1' @ cs2 \\<and>\n          cs1 \\<noteq> [] \\<longrightarrow>\n          (cs1, s) \\<rightarrow> (cs1', s)\n 7. \\<And>cs s.\n       \\<forall>cs1 cs2 cs1'.\n          CALL # cs = cs1 @ cs2 \\<and>\n          body # cs = cs1' @ cs2 \\<and> cs1 \\<noteq> [] \\<longrightarrow>\n          (cs1, s) \\<rightarrow> (cs1', s)\n 8. \\<And>f c g cs s.\n       \\<forall>cs1 cs2 cs1'.\n          (LOCAL f; c; g) # cs = cs1 @ cs2 \\<and>\n          c # Do (\\<lambda>t. {g s t}) # cs = cs1' @ cs2 \\<and>\n          cs1 \\<noteq> [] \\<longrightarrow>\n          (cs1, s) \\<rightarrow> (cs1', f s)", "apply (force intro:exec1.intros simp add: neq_Nil_conv)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma exec1_drop_suffix:\n \"(cs1@cs2,s) \\<rightarrow> (cs1'@cs2,s') \\<Longrightarrow> cs1 \\<noteq> [] \\<Longrightarrow> (cs1,s) \\<rightarrow> (cs1',s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(cs1 @ cs2, s) \\<rightarrow> (cs1' @ cs2, s');\n     cs1 \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> (cs1, s) \\<rightarrow> (cs1', s')", "by(blast dest:exec1_drop_suffix_aux)"], ["", "lemma execs_drop_suffix[rule_format(no_asm)]:\n  \"\\<lbrakk> f 0 = (c#cs,s);\\<forall>i. f(i) \\<rightarrow> f(Suc i) \\<rbrakk> \\<Longrightarrow>\n   (\\<forall>i<k. p i \\<noteq> [] & fst(f i) = p i@cs) \\<longrightarrow> fst(f k) = p k@cs\n   \\<longrightarrow> ([c],s) \\<rightarrow>\\<^sup>* (p k,snd(f k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = (c # cs, s);\n     \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i<k.\n                          p i \\<noteq> [] \\<and>\n                          fst (f i) = p i @ cs) \\<longrightarrow>\n                      fst (f k) = p k @ cs \\<longrightarrow>\n                      ([c], s) \\<rightarrow>\\<^sup>* (p k, snd (f k))", "apply(induct_tac k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f 0 = (c # cs, s);\n     \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i<0.\n                          p i \\<noteq> [] \\<and>\n                          fst (f i) = p i @ cs) \\<longrightarrow>\n                      fst (f 0) = p 0 @ cs \\<longrightarrow>\n                      ([c], s) \\<rightarrow>\\<^sup>* (p 0, snd (f 0))\n 2. \\<And>n.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        (\\<forall>i<n.\n            p i \\<noteq> [] \\<and> fst (f i) = p i @ cs) \\<longrightarrow>\n        fst (f n) = p n @ cs \\<longrightarrow>\n        ([c], s) \\<rightarrow>\\<^sup>* (p n, snd (f n))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>i<Suc n.\n                             p i \\<noteq> [] \\<and>\n                             fst (f i) = p i @ cs) \\<longrightarrow>\n                         fst (f (Suc n)) = p (Suc n) @ cs \\<longrightarrow>\n                         ([c],\n                          s) \\<rightarrow>\\<^sup>* (p (Suc n),\n              snd (f (Suc n)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        (\\<forall>i<n.\n            p i \\<noteq> [] \\<and> fst (f i) = p i @ cs) \\<longrightarrow>\n        fst (f n) = p n @ cs \\<longrightarrow>\n        ([c], s) \\<rightarrow>\\<^sup>* (p n, snd (f n))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>i<Suc n.\n                             p i \\<noteq> [] \\<and>\n                             fst (f i) = p i @ cs) \\<longrightarrow>\n                         fst (f (Suc n)) = p (Suc n) @ cs \\<longrightarrow>\n                         ([c],\n                          s) \\<rightarrow>\\<^sup>* (p (Suc n),\n              snd (f (Suc n)))", "apply (clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        ([c], s) \\<rightarrow>\\<^sup>* (p n, snd (f n));\n        \\<forall>i<Suc n. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n        fst (f (Suc n)) = p (Suc n) @ cs\\<rbrakk>\n       \\<Longrightarrow> ([c],\n                          s) \\<rightarrow>\\<^sup>* (p (Suc n),\n              snd (f (Suc n)))", "apply(erule rtrancl_into_rtrancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i<Suc n. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n        fst (f (Suc n)) = p (Suc n) @ cs\\<rbrakk>\n       \\<Longrightarrow> (p n,\n                          snd (f n)) \\<rightarrow> (p (Suc n),\n              snd (f (Suc n)))", "apply(erule_tac x = n in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>f 0 = (c # cs, s);\n        \\<forall>i<Suc n. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n        fst (f (Suc n)) = p (Suc n) @ cs;\n        f n \\<rightarrow> f (Suc n)\\<rbrakk>\n       \\<Longrightarrow> (p n,\n                          snd (f n)) \\<rightarrow> (p (Suc n),\n              snd (f (Suc n)))", "apply(erule_tac x = n in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>f 0 = (c # cs, s); fst (f (Suc n)) = p (Suc n) @ cs;\n        f n \\<rightarrow> f (Suc n);\n        n < Suc n \\<longrightarrow>\n        p n \\<noteq> [] \\<and> fst (f n) = p n @ cs\\<rbrakk>\n       \\<Longrightarrow> (p n,\n                          snd (f n)) \\<rightarrow> (p (Suc n),\n              snd (f (Suc n)))", "apply(case_tac \"f n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n a b.\n       \\<lbrakk>f 0 = (c # cs, s); fst (f (Suc n)) = p (Suc n) @ cs;\n        f n \\<rightarrow> f (Suc n);\n        n < Suc n \\<longrightarrow>\n        p n \\<noteq> [] \\<and> fst (f n) = p n @ cs;\n        f n = (a, b)\\<rbrakk>\n       \\<Longrightarrow> (p n,\n                          snd (f n)) \\<rightarrow> (p (Suc n),\n              snd (f (Suc n)))", "apply(case_tac \"f(Suc n)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n a b aa ba.\n       \\<lbrakk>f 0 = (c # cs, s); fst (f (Suc n)) = p (Suc n) @ cs;\n        f n \\<rightarrow> f (Suc n);\n        n < Suc n \\<longrightarrow>\n        p n \\<noteq> [] \\<and> fst (f n) = p n @ cs;\n        f n = (a, b); f (Suc n) = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (p n,\n                          snd (f n)) \\<rightarrow> (p (Suc n),\n              snd (f (Suc n)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n b aa ba.\n       \\<lbrakk>f 0 = (c # cs, s); aa = p (Suc n) @ cs;\n        (p n @ cs, b) \\<rightarrow> (p (Suc n) @ cs, ba); p n \\<noteq> [];\n        f n = (p n @ cs, b); f (Suc n) = (p (Suc n) @ cs, ba)\\<rbrakk>\n       \\<Longrightarrow> (p n, b) \\<rightarrow> (p (Suc n), ba)", "apply(blast dest:exec1_drop_suffix)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma execs_drop_suffix0:\n  \"\\<lbrakk> f 0 = (c#cs,s);\\<forall>i. f(i) \\<rightarrow> f(Suc i); \\<forall>i<k. p i \\<noteq> [] & fst(f i) = p i@cs;\n     fst(f k) = cs; p k = [] \\<rbrakk> \\<Longrightarrow> ([c],s) \\<rightarrow>\\<^sup>* ([],snd(f k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<forall>i<k. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n     fst (f k) = cs; p k = []\\<rbrakk>\n    \\<Longrightarrow> ([c], s) \\<rightarrow>\\<^sup>* ([], snd (f k))", "apply(drule execs_drop_suffix,assumption,assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<forall>i<k. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n     fst (f k) = cs; p k = []\\<rbrakk>\n    \\<Longrightarrow> fst (f k) = p k @ cs\n 2. \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<forall>i<k. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n     fst (f k) = cs; p k = [];\n     ([c], s) \\<rightarrow>\\<^sup>* (p k, snd (f k))\\<rbrakk>\n    \\<Longrightarrow> ([c], s) \\<rightarrow>\\<^sup>* ([], snd (f k))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<forall>i<k. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n     fst (f k) = cs; p k = [];\n     ([c], s) \\<rightarrow>\\<^sup>* (p k, snd (f k))\\<rbrakk>\n    \\<Longrightarrow> ([c], s) \\<rightarrow>\\<^sup>* ([], snd (f k))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skolemize1: \"\\<forall>x. P x \\<longrightarrow> (\\<exists>y. Q x y) \\<Longrightarrow> \\<exists>f.\\<forall>x. P x \\<longrightarrow> Q x (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. P x \\<longrightarrow> (\\<exists>y. Q x y) \\<Longrightarrow>\n    \\<exists>f. \\<forall>x. P x \\<longrightarrow> Q x (f x)", "apply(rule_tac x = \"\\<lambda>x. SOME y. Q x y\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. P x \\<longrightarrow> (\\<exists>y. Q x y) \\<Longrightarrow>\n    \\<forall>x. P x \\<longrightarrow> Q x (SOME y. Q x y)", "apply(fast intro:someI2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma least_aux: \"\\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        fst(f k) = cs; \\<forall>i<k. fst(f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i \\<le> k. (\\<exists>p. (p \\<noteq> []) = (i < k) & fst(f i) = p @ cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     fst (f k) = cs; \\<forall>i<k. fst (f i) \\<noteq> cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<le>k.\n                         \\<exists>p.\n                            (p \\<noteq> []) = (i < k) \\<and>\n                            fst (f i) = p @ cs", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        fst (f k) = cs; \\<forall>i<k. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> i \\<le> k \\<longrightarrow>\n                         (\\<exists>p.\n                             (p \\<noteq> []) = (i < k) \\<and>\n                             fst (f i) = p @ cs)", "apply(induct_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        fst (f k) = cs; \\<forall>i<k. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> k \\<longrightarrow>\n                         (\\<exists>p.\n                             (p \\<noteq> []) = (0 < k) \\<and>\n                             fst (f 0) = p @ cs)\n 2. \\<And>i n.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        fst (f k) = cs; \\<forall>i<k. fst (f i) \\<noteq> cs;\n        n \\<le> k \\<longrightarrow>\n        (\\<exists>p.\n            (p \\<noteq> []) = (n < k) \\<and> fst (f n) = p @ cs)\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> k \\<longrightarrow>\n                         (\\<exists>p.\n                             (p \\<noteq> []) = (Suc n < k) \\<and>\n                             fst (f (Suc n)) = p @ cs)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     fst (f k) = cs; \\<forall>i<k. fst (f i) \\<noteq> cs\\<rbrakk>\n    \\<Longrightarrow> 0 < k\n 2. \\<And>i n.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        fst (f k) = cs; \\<forall>i<k. fst (f i) \\<noteq> cs;\n        n \\<le> k \\<longrightarrow>\n        (\\<exists>p.\n            (p \\<noteq> []) = (n < k) \\<and> fst (f n) = p @ cs)\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> k \\<longrightarrow>\n                         (\\<exists>p.\n                             (p \\<noteq> []) = (Suc n < k) \\<and>\n                             fst (f (Suc n)) = p @ cs)", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     fst (f k) = cs; \\<forall>i<k. fst (f i) \\<noteq> cs;\n     \\<not> 0 < k\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>i n.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        fst (f k) = cs; \\<forall>i<k. fst (f i) \\<noteq> cs;\n        n \\<le> k \\<longrightarrow>\n        (\\<exists>p.\n            (p \\<noteq> []) = (n < k) \\<and> fst (f n) = p @ cs)\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> k \\<longrightarrow>\n                         (\\<exists>p.\n                             (p \\<noteq> []) = (Suc n < k) \\<and>\n                             fst (f (Suc n)) = p @ cs)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        fst (f k) = cs; \\<forall>i<k. fst (f i) \\<noteq> cs;\n        n \\<le> k \\<longrightarrow>\n        (\\<exists>p.\n            (p \\<noteq> []) = (n < k) \\<and> fst (f n) = p @ cs)\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> k \\<longrightarrow>\n                         (\\<exists>p.\n                             (p \\<noteq> []) = (Suc n < k) \\<and>\n                             fst (f (Suc n)) = p @ cs)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>f 0 = (c # fst (f k), s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i<k. fst (f i) \\<noteq> fst (f k); cs = fst (f k);\n        Suc n \\<le> k; p \\<noteq> []; fst (f n) = p @ fst (f k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            (p \\<noteq> []) = (Suc n < k) \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)", "apply(drule order_le_imp_less_or_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>f 0 = (c # fst (f k), s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i<k. fst (f i) \\<noteq> fst (f k); cs = fst (f k);\n        p \\<noteq> []; fst (f n) = p @ fst (f k);\n        Suc n < k \\<or> Suc n = k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            (p \\<noteq> []) = (Suc n < k) \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n p.\n       \\<lbrakk>f 0 = (c # fst (f k), s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i<k. fst (f i) \\<noteq> fst (f k); cs = fst (f k);\n        p \\<noteq> []; fst (f n) = p @ fst (f k); Suc n < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            (p \\<noteq> []) = (Suc n < k) \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)\n 2. \\<And>n p.\n       \\<lbrakk>f 0 = (c # fst (f k), s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i<k. fst (f i) \\<noteq> fst (f k); cs = fst (f k);\n        p \\<noteq> []; fst (f n) = p @ fst (f k); Suc n = k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            (p \\<noteq> []) = (Suc n < k) \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n p.\n       \\<lbrakk>f 0 = (c # fst (f k), s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i<k. fst (f i) \\<noteq> fst (f k); cs = fst (f k);\n        p \\<noteq> []; fst (f n) = p @ fst (f k); Suc n = k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            (p \\<noteq> []) = (Suc n < k) \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)\n 2. \\<And>n p.\n       \\<lbrakk>f 0 = (c # fst (f k), s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i<k. fst (f i) \\<noteq> fst (f k); cs = fst (f k);\n        p \\<noteq> []; fst (f n) = p @ fst (f k); Suc n < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            (p \\<noteq> []) = (Suc n < k) \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>f 0 = (c # fst (f k), s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i<k. fst (f i) \\<noteq> fst (f k); cs = fst (f k);\n        p \\<noteq> []; fst (f n) = p @ fst (f k); Suc n < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            (p \\<noteq> []) = (Suc n < k) \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>f 0 = (c # fst (f k), s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i<k. fst (f i) \\<noteq> fst (f k); cs = fst (f k);\n        p \\<noteq> []; fst (f n) = p @ fst (f k); Suc n < k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)", "apply(erule_tac x = n in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>f 0 = (c # fst (f k), s);\n        \\<forall>i<k. fst (f i) \\<noteq> fst (f k); cs = fst (f k);\n        p \\<noteq> []; fst (f n) = p @ fst (f k); Suc n < k;\n        f n \\<rightarrow> f (Suc n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)", "apply(erule_tac x = \"Suc n\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n p.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); p \\<noteq> [];\n        fst (f n) = p @ fst (f k); Suc n < k; f n \\<rightarrow> f (Suc n);\n        Suc n < k \\<longrightarrow>\n        fst (f (Suc n)) \\<noteq> fst (f k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)", "apply(case_tac \"f n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n p a b.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); p \\<noteq> [];\n        fst (f n) = p @ fst (f k); Suc n < k; f n \\<rightarrow> f (Suc n);\n        Suc n < k \\<longrightarrow> fst (f (Suc n)) \\<noteq> fst (f k);\n        f n = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)", "apply(case_tac \"f(Suc n)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n p a b aa ba.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); p \\<noteq> [];\n        fst (f n) = p @ fst (f k); Suc n < k; f n \\<rightarrow> f (Suc n);\n        Suc n < k \\<longrightarrow> fst (f (Suc n)) \\<noteq> fst (f k);\n        f n = (a, b); f (Suc n) = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and>\n                            fst (f (Suc n)) = p @ fst (f k)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n p a b aa ba.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); p \\<noteq> [];\n        a = p @ fst (f k); Suc n < k;\n        (p @ fst (f k), b) \\<rightarrow> (aa, ba); aa \\<noteq> fst (f k);\n        f n = (p @ fst (f k), b); f (Suc n) = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p. p \\<noteq> [] \\<and> aa = p @ fst (f k)", "apply(rename_tac sn csn1 sn1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n p a sn csn1 sn1.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); p \\<noteq> [];\n        a = p @ fst (f k); Suc n < k;\n        (p @ fst (f k), sn) \\<rightarrow> (csn1, sn1);\n        csn1 \\<noteq> fst (f k); f n = (p @ fst (f k), sn);\n        f (Suc n) = (csn1, sn1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and> csn1 = p @ fst (f k)", "apply (clarsimp simp add: neq_Nil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n sn csn1 sn1 y ys.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); Suc n < k;\n        (y # ys @ fst (f k), sn) \\<rightarrow> (csn1, sn1);\n        csn1 \\<noteq> fst (f k); f n = (y # ys @ fst (f k), sn);\n        f (Suc n) = (csn1, sn1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            (\\<exists>y ys. p = y # ys) \\<and>\n                            csn1 = p @ fst (f k)", "apply(drule exec1_only1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n sn csn1 sn1 y ys.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); Suc n < k;\n        csn1 \\<noteq> fst (f k); f n = (y # ys @ fst (f k), sn);\n        f (Suc n) = (csn1, sn1);\n        \\<exists>cs1. csn1 = cs1 @ ys @ fst (f k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            (\\<exists>y ys. p = y # ys) \\<and>\n                            csn1 = p @ fst (f k)", "apply (clarsimp simp add: neq_Nil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n sn sn1 y ys cs1.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); Suc n < k;\n        (\\<exists>y ys. cs1 = y # ys) \\<or> (\\<exists>y ysa. ys = y # ysa);\n        f n = (y # ys @ fst (f k), sn);\n        f (Suc n) = (cs1 @ ys @ fst (f k), sn1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y ysa. cs1 @ ys = y # ysa", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n sn sn1 y ys cs1.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); Suc n < k;\n        f n = (y # ys @ fst (f k), sn);\n        f (Suc n) = (cs1 @ ys @ fst (f k), sn1);\n        \\<exists>y ys. cs1 = y # ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y ysa. cs1 @ ys = y # ysa\n 2. \\<And>n sn sn1 y ys cs1.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); Suc n < k;\n        f n = (y # ys @ fst (f k), sn);\n        f (Suc n) = (cs1 @ ys @ fst (f k), sn1);\n        \\<exists>y ysa. ys = y # ysa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y ysa. cs1 @ ys = y # ysa", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n sn sn1 y ys cs1.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); Suc n < k;\n        f n = (y # ys @ fst (f k), sn);\n        f (Suc n) = (cs1 @ ys @ fst (f k), sn1);\n        \\<exists>y ysa. ys = y # ysa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y ysa. cs1 @ ys = y # ysa", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n sn sn1 y cs1 ya ysa.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); Suc n < k;\n        f n = (y # ya # ysa @ fst (f k), sn);\n        f (Suc n) = (cs1 @ ya # ysa @ fst (f k), sn1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y ys. cs1 @ ya # ysa = y # ys", "apply(case_tac cs1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n sn sn1 y cs1 ya ysa.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); Suc n < k;\n        f n = (y # ya # ysa @ fst (f k), sn);\n        f (Suc n) = (cs1 @ ya # ysa @ fst (f k), sn1); cs1 = []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y ys. cs1 @ ya # ysa = y # ys\n 2. \\<And>n sn sn1 y cs1 ya ysa a list.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); Suc n < k;\n        f n = (y # ya # ysa @ fst (f k), sn);\n        f (Suc n) = (cs1 @ ya # ysa @ fst (f k), sn1);\n        cs1 = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y ys. cs1 @ ya # ysa = y # ys", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n sn sn1 y cs1 ya ysa a list.\n       \\<lbrakk>f 0 = (c # fst (f k), s); cs = fst (f k); Suc n < k;\n        f n = (y # ya # ysa @ fst (f k), sn);\n        f (Suc n) = (cs1 @ ya # ysa @ fst (f k), sn1);\n        cs1 = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y ys. cs1 @ ya # ysa = y # ys", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma least_lem: \"\\<lbrakk>f 0 = (c#cs,s); \\<forall>i. f i \\<rightarrow> f(Suc i); \\<exists>i. fst(f i) = cs \\<rbrakk>\n       \\<Longrightarrow> \\<exists>k. fst(f k) = cs & ([c],s) \\<rightarrow>\\<^sup>* ([],snd(f k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k.\n                         fst (f k) = cs \\<and>\n                         ([c], s) \\<rightarrow>\\<^sup>* ([], snd (f k))", "apply(rule_tac x=\"LEAST i. fst(f i) = cs\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> fst (f (LEAST i. fst (f i) = cs)) = cs \\<and>\n                      ([c],\n                       s) \\<rightarrow>\\<^sup>* ([],\n           snd (f (LEAST i. fst (f i) = cs)))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> fst (f (LEAST i. fst (f i) = cs)) = cs\n 2. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> ([c],\n                       s) \\<rightarrow>\\<^sup>* ([],\n           snd (f (LEAST i. fst (f i) = cs)))", "apply(fast intro: LeastI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> ([c],\n                       s) \\<rightarrow>\\<^sup>* ([],\n           snd (f (LEAST i. fst (f i) = cs)))", "apply(subgoal_tac\n \"\\<forall>i\\<le>LEAST i. fst (f i) = cs. \\<exists>p. ((p \\<noteq> []) = (i<(LEAST i. fst (f i) = cs))) & fst(f i) = p@cs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs;\n     \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n        \\<exists>p.\n           (p \\<noteq> []) = (i < (LEAST i. fst (f i) = cs)) \\<and>\n           fst (f i) = p @ cs\\<rbrakk>\n    \\<Longrightarrow> ([c],\n                       s) \\<rightarrow>\\<^sup>* ([],\n           snd (f (LEAST i. fst (f i) = cs)))\n 2. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n                         \\<exists>p.\n                            (p \\<noteq> []) =\n                            (i < (LEAST i. fst (f i) = cs)) \\<and>\n                            fst (f i) = p @ cs", "apply(drule skolemize1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs;\n     \\<exists>fa.\n        \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n           (fa i \\<noteq> []) = (i < (LEAST i. fst (f i) = cs)) \\<and>\n           fst (f i) = fa i @ cs\\<rbrakk>\n    \\<Longrightarrow> ([c],\n                       s) \\<rightarrow>\\<^sup>* ([],\n           snd (f (LEAST i. fst (f i) = cs)))\n 2. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n                         \\<exists>p.\n                            (p \\<noteq> []) =\n                            (i < (LEAST i. fst (f i) = cs)) \\<and>\n                            fst (f i) = p @ cs", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i fa.\n       \\<lbrakk>f 0 = (c # fst (f i), s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        \\<forall>ia\\<le>LEAST ia. fst (f ia) = fst (f i).\n           (fa ia \\<noteq> []) =\n           (ia < (LEAST ia. fst (f ia) = fst (f i))) \\<and>\n           fst (f ia) = fa ia @ fst (f i)\\<rbrakk>\n       \\<Longrightarrow> ([c],\n                          s) \\<rightarrow>\\<^sup>* ([],\n              snd (f (LEAST ia. fst (f ia) = fst (f i))))\n 2. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n                         \\<exists>p.\n                            (p \\<noteq> []) =\n                            (i < (LEAST i. fst (f i) = cs)) \\<and>\n                            fst (f i) = p @ cs", "apply(rename_tac p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i p.\n       \\<lbrakk>f 0 = (c # fst (f i), s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        \\<forall>ia\\<le>LEAST ia. fst (f ia) = fst (f i).\n           (p ia \\<noteq> []) =\n           (ia < (LEAST ia. fst (f ia) = fst (f i))) \\<and>\n           fst (f ia) = p ia @ fst (f i)\\<rbrakk>\n       \\<Longrightarrow> ([c],\n                          s) \\<rightarrow>\\<^sup>* ([],\n              snd (f (LEAST ia. fst (f ia) = fst (f i))))\n 2. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n                         \\<exists>p.\n                            (p \\<noteq> []) =\n                            (i < (LEAST i. fst (f i) = cs)) \\<and>\n                            fst (f i) = p @ cs", "apply(erule_tac p=p in execs_drop_suffix0, assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i p.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        \\<forall>ia\\<le>LEAST ia. fst (f ia) = fst (f i).\n           (p ia \\<noteq> []) =\n           (ia < (LEAST ia. fst (f ia) = fst (f i))) \\<and>\n           fst (f ia) = p ia @ fst (f i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>ia<LEAST ia. fst (f ia) = fst (f i).\n                            p ia \\<noteq> [] \\<and>\n                            fst (f ia) = p ia @ fst (f i)\n 2. \\<And>i p.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        \\<forall>ia\\<le>LEAST ia. fst (f ia) = fst (f i).\n           (p ia \\<noteq> []) =\n           (ia < (LEAST ia. fst (f ia) = fst (f i))) \\<and>\n           fst (f ia) = p ia @ fst (f i)\\<rbrakk>\n       \\<Longrightarrow> fst (f (LEAST ia. fst (f ia) = fst (f i))) =\n                         fst (f i)\n 3. \\<And>i p.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        \\<forall>ia\\<le>LEAST ia. fst (f ia) = fst (f i).\n           (p ia \\<noteq> []) =\n           (ia < (LEAST ia. fst (f ia) = fst (f i))) \\<and>\n           fst (f ia) = p ia @ fst (f i)\\<rbrakk>\n       \\<Longrightarrow> p (LEAST ia. fst (f ia) = fst (f i)) = []\n 4. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n                         \\<exists>p.\n                            (p \\<noteq> []) =\n                            (i < (LEAST i. fst (f i) = cs)) \\<and>\n                            fst (f i) = p @ cs", "apply (blast dest:order_less_imp_le)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i p.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        \\<forall>ia\\<le>LEAST ia. fst (f ia) = fst (f i).\n           (p ia \\<noteq> []) =\n           (ia < (LEAST ia. fst (f ia) = fst (f i))) \\<and>\n           fst (f ia) = p ia @ fst (f i)\\<rbrakk>\n       \\<Longrightarrow> fst (f (LEAST ia. fst (f ia) = fst (f i))) =\n                         fst (f i)\n 2. \\<And>i p.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        \\<forall>ia\\<le>LEAST ia. fst (f ia) = fst (f i).\n           (p ia \\<noteq> []) =\n           (ia < (LEAST ia. fst (f ia) = fst (f i))) \\<and>\n           fst (f ia) = p ia @ fst (f i)\\<rbrakk>\n       \\<Longrightarrow> p (LEAST ia. fst (f ia) = fst (f i)) = []\n 3. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n                         \\<exists>p.\n                            (p \\<noteq> []) =\n                            (i < (LEAST i. fst (f i) = cs)) \\<and>\n                            fst (f i) = p @ cs", "apply(fast intro: LeastI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i p.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        \\<forall>ia\\<le>LEAST ia. fst (f ia) = fst (f i).\n           (p ia \\<noteq> []) =\n           (ia < (LEAST ia. fst (f ia) = fst (f i))) \\<and>\n           fst (f ia) = p ia @ fst (f i)\\<rbrakk>\n       \\<Longrightarrow> p (LEAST ia. fst (f ia) = fst (f i)) = []\n 2. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n                         \\<exists>p.\n                            (p \\<noteq> []) =\n                            (i < (LEAST i. fst (f i) = cs)) \\<and>\n                            fst (f i) = p @ cs", "apply(erule thin_rl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i p.\n       \\<lbrakk>cs = fst (f i);\n        \\<forall>ia\\<le>LEAST ia. fst (f ia) = fst (f i).\n           (p ia \\<noteq> []) =\n           (ia < (LEAST ia. fst (f ia) = fst (f i))) \\<and>\n           fst (f ia) = p ia @ fst (f i)\\<rbrakk>\n       \\<Longrightarrow> p (LEAST ia. fst (f ia) = fst (f i)) = []\n 2. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n                         \\<exists>p.\n                            (p \\<noteq> []) =\n                            (i < (LEAST i. fst (f i) = cs)) \\<and>\n                            fst (f i) = p @ cs", "apply(erule_tac x = \"LEAST j. fst (f j) = fst (f i)\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i p.\n       \\<lbrakk>cs = fst (f i);\n        (LEAST j. fst (f j) = fst (f i))\n        \\<le> (LEAST ia. fst (f ia) = fst (f i)) \\<longrightarrow>\n        (p (LEAST j. fst (f j) = fst (f i)) \\<noteq> []) =\n        ((LEAST j. fst (f j) = fst (f i))\n         < (LEAST ia. fst (f ia) = fst (f i))) \\<and>\n        fst (f (LEAST j. fst (f j) = fst (f i))) =\n        p (LEAST j. fst (f j) = fst (f i)) @ fst (f i)\\<rbrakk>\n       \\<Longrightarrow> p (LEAST ia. fst (f ia) = fst (f i)) = []\n 2. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n                         \\<exists>p.\n                            (p \\<noteq> []) =\n                            (i < (LEAST i. fst (f i) = cs)) \\<and>\n                            fst (f i) = p @ cs", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i\\<le>LEAST i. fst (f i) = cs.\n                         \\<exists>p.\n                            (p \\<noteq> []) =\n                            (i < (LEAST i. fst (f i) = cs)) \\<and>\n                            fst (f i) = p @ cs", "apply(erule least_aux,assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> fst (f (LEAST i. fst (f i) = cs)) = cs\n 2. \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<LEAST i. fst (f i) = cs.\n                         fst (f i) \\<noteq> cs", "apply(fast intro: LeastI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i);\n     \\<exists>i. fst (f i) = cs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<LEAST i. fst (f i) = cs.\n                         fst (f i) \\<noteq> cs", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        ia < (LEAST ia. fst (f ia) = fst (f i));\n        fst (f ia) = fst (f i)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(drule not_less_Least)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        fst (f ia) = fst (f i); fst (f ia) \\<noteq> fst (f i)\\<rbrakk>\n       \\<Longrightarrow> False", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skolemize2: \"\\<forall>x.\\<exists>y. P x y \\<Longrightarrow> \\<exists>f.\\<forall>x. P x (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<exists>y. P x y \\<Longrightarrow>\n    \\<exists>f. \\<forall>x. P x (f x)", "apply(rule_tac x = \"\\<lambda>x. SOME y. P x y\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<exists>y. P x y \\<Longrightarrow>\n    \\<forall>x. P x (SOME y. P x y)", "apply(fast intro:someI2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inf_cases: \"inf (c#cs) s \\<Longrightarrow> inf [c] s \\<or> (\\<exists>t. s -c\\<rightarrow> t \\<and> inf cs t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PHoareTotal.inf (c # cs) s \\<Longrightarrow>\n    PHoareTotal.inf [c] s \\<or>\n    (\\<exists>t. s -c\\<rightarrow> t \\<and> PHoareTotal.inf cs t)", "apply(unfold inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f 0 = (c # cs, s) \\<and>\n       (\\<forall>i. f i \\<rightarrow> f (Suc i)) \\<Longrightarrow>\n    (\\<exists>f.\n        f 0 = ([c], s) \\<and>\n        (\\<forall>i. f i \\<rightarrow> f (Suc i))) \\<or>\n    (\\<exists>t.\n        s -c\\<rightarrow> t \\<and>\n        (\\<exists>f.\n            f 0 = (cs, t) \\<and> (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply (clarsimp del: disjCI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s);\n        \\<forall>i. f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply(case_tac \"\\<exists>i. fst(f i) = cs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<exists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<nexists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply(rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<exists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            s -c\\<rightarrow> t \\<and>\n                            (\\<exists>f.\n                                f 0 = (cs, t) \\<and>\n                                (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<nexists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply(drule least_lem, assumption, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<exists>i. fst (f i) = cs;\n        \\<exists>k.\n           fst (f k) = cs \\<and>\n           ([c], s) \\<rightarrow>\\<^sup>* ([], snd (f k))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            s -c\\<rightarrow> t \\<and>\n                            (\\<exists>f.\n                                f 0 = (cs, t) \\<and>\n                                (\\<forall>i. f i \\<rightarrow> f (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<nexists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f i k.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        fst (f k) = fst (f i);\n        ([c], s) \\<rightarrow>\\<^sup>* ([], snd (f k))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            s -c\\<rightarrow> t \\<and>\n                            (\\<exists>fa.\n                                fa 0 = (fst (f i), t) \\<and>\n                                (\\<forall>i. fa i \\<rightarrow> fa (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<nexists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply(drule exec1s_impl_exec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f i k.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        fst (f k) = fst (f i); s -c\\<rightarrow> snd (f k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            s -c\\<rightarrow> t \\<and>\n                            (\\<exists>fa.\n                                fa 0 = (fst (f i), t) \\<and>\n                                (\\<forall>i. fa i \\<rightarrow> fa (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<nexists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply(case_tac \"f k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f i k a b.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        fst (f k) = fst (f i); s -c\\<rightarrow> snd (f k);\n        f k = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            s -c\\<rightarrow> t \\<and>\n                            (\\<exists>fa.\n                                fa 0 = (fst (f i), t) \\<and>\n                                (\\<forall>i. fa i \\<rightarrow> fa (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<nexists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f i k a b.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        a = fst (f i); s -c\\<rightarrow> b; f k = (fst (f i), b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            s -c\\<rightarrow> t \\<and>\n                            (\\<exists>fa.\n                                fa 0 = (fst (f i), t) \\<and>\n                                (\\<forall>i. fa i \\<rightarrow> fa (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<nexists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply (rule exI, rule conjI, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f i k a b.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        a = fst (f i); s -c\\<rightarrow> b; f k = (fst (f i), b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa.\n                            fa 0 = (fst (f i), b) \\<and>\n                            (\\<forall>i. fa i \\<rightarrow> fa (Suc i))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<nexists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply(rule_tac x=\"\\<lambda>i. f(i+k)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f i k a b.\n       \\<lbrakk>\\<forall>i. f i \\<rightarrow> f (Suc i); cs = fst (f i);\n        a = fst (f i); s -c\\<rightarrow> b; f k = (fst (f i), b)\\<rbrakk>\n       \\<Longrightarrow> f (0 + k) = (fst (f i), b) \\<and>\n                         (\\<forall>i. f (i + k) \\<rightarrow> f (Suc i + k))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<nexists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply (clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<nexists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>f.\n                             f 0 = ([c], s) \\<and>\n                             (\\<forall>i.\n                                 f i \\<rightarrow> f (Suc i))) \\<or>\n                         (\\<exists>t.\n                             s -c\\<rightarrow> t \\<and>\n                             (\\<exists>f.\n                                 f 0 = (cs, t) \\<and>\n                                 (\\<forall>i. f i \\<rightarrow> f (Suc i))))", "apply(rule disjI1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<nexists>i. fst (f i) = cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ([c], s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ([c], s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))", "apply(subgoal_tac \"\\<forall>i. \\<exists>p. p \\<noteq> [] \\<and> fst(f i) = p@cs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<forall>i.\n           \\<exists>p. p \\<noteq> [] \\<and> fst (f i) = p @ cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ([c], s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(drule skolemize2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<exists>fa.\n           \\<forall>i.\n              fa i \\<noteq> [] \\<and> fst (f i) = fa i @ cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ([c], s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f fa.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<forall>i. fa i \\<noteq> [] \\<and> fst (f i) = fa i @ cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ([c], s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(rename_tac p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f p.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<forall>i. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f 0 = ([c], s) \\<and>\n                            (\\<forall>i. f i \\<rightarrow> f (Suc i))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(rule_tac x = \"\\<lambda>i. (p i, snd(f i))\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f p.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<forall>i. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs\\<rbrakk>\n       \\<Longrightarrow> (p 0, snd (f 0)) = ([c], s) \\<and>\n                         (\\<forall>i.\n                             (p i,\n                              snd (f i)) \\<rightarrow> (p (Suc i),\n                  snd (f (Suc i))))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f p.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<forall>i. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs\\<rbrakk>\n       \\<Longrightarrow> (p 0, snd (f 0)) = ([c], s)\n 2. \\<And>f p.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<forall>i. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            (p i,\n                             snd (f i)) \\<rightarrow> (p (Suc i),\n                 snd (f (Suc i)))\n 3. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(erule_tac x = 0 in allE, erule conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f p.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs; p 0 \\<noteq> [];\n        fst (f 0) = p 0 @ cs\\<rbrakk>\n       \\<Longrightarrow> (p 0, snd (f 0)) = ([c], s)\n 2. \\<And>f p.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<forall>i. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            (p i,\n                             snd (f i)) \\<rightarrow> (p (Suc i),\n                 snd (f (Suc i)))\n 3. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f p.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<forall>i. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            (p i,\n                             snd (f i)) \\<rightarrow> (p (Suc i),\n                 snd (f (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f p i.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<forall>i. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs\\<rbrakk>\n       \\<Longrightarrow> (p i,\n                          snd (f i)) \\<rightarrow> (p (Suc i),\n              snd (f (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(erule_tac x = i in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f p i.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<forall>i. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n        f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> (p i,\n                          snd (f i)) \\<rightarrow> (p (Suc i),\n              snd (f (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(erule_tac x = i in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f p i.\n       \\<lbrakk>f 0 = (c # cs, s);\n        \\<forall>i. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n        f i \\<rightarrow> f (Suc i); fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> (p i,\n                          snd (f i)) \\<rightarrow> (p (Suc i),\n              snd (f (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(frule_tac x = i in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f p i.\n       \\<lbrakk>f 0 = (c # cs, s);\n        \\<forall>i. p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n        f i \\<rightarrow> f (Suc i); fst (f i) \\<noteq> cs;\n        p i \\<noteq> [] \\<and> fst (f i) = p i @ cs\\<rbrakk>\n       \\<Longrightarrow> (p i,\n                          snd (f i)) \\<rightarrow> (p (Suc i),\n              snd (f (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(erule_tac x = \"Suc i\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f p i.\n       \\<lbrakk>f 0 = (c # cs, s); f i \\<rightarrow> f (Suc i);\n        fst (f i) \\<noteq> cs; p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n        p (Suc i) \\<noteq> [] \\<and>\n        fst (f (Suc i)) = p (Suc i) @ cs\\<rbrakk>\n       \\<Longrightarrow> (p i,\n                          snd (f i)) \\<rightarrow> (p (Suc i),\n              snd (f (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(case_tac \"f i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f p i a b.\n       \\<lbrakk>f 0 = (c # cs, s); f i \\<rightarrow> f (Suc i);\n        fst (f i) \\<noteq> cs; p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n        p (Suc i) \\<noteq> [] \\<and> fst (f (Suc i)) = p (Suc i) @ cs;\n        f i = (a, b)\\<rbrakk>\n       \\<Longrightarrow> (p i,\n                          snd (f i)) \\<rightarrow> (p (Suc i),\n              snd (f (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(case_tac \"f(Suc i)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f p i a b aa ba.\n       \\<lbrakk>f 0 = (c # cs, s); f i \\<rightarrow> f (Suc i);\n        fst (f i) \\<noteq> cs; p i \\<noteq> [] \\<and> fst (f i) = p i @ cs;\n        p (Suc i) \\<noteq> [] \\<and> fst (f (Suc i)) = p (Suc i) @ cs;\n        f i = (a, b); f (Suc i) = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> (p i,\n                          snd (f i)) \\<rightarrow> (p (Suc i),\n              snd (f (Suc i)))\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f p i b ba.\n       \\<lbrakk>f 0 = (c # cs, s);\n        (p i @ cs, b) \\<rightarrow> (p (Suc i) @ cs, ba); p i \\<noteq> [];\n        p (Suc i) \\<noteq> []; f i = (p i @ cs, b);\n        f (Suc i) = (p (Suc i) @ cs, ba)\\<rbrakk>\n       \\<Longrightarrow> (p i, b) \\<rightarrow> (p (Suc i), ba)\n 2. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(blast intro:exec1_drop_suffix)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            \\<exists>p.\n                               p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f i.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p. p \\<noteq> [] \\<and> fst (f i) = p @ cs", "apply(induct_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f i.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p. p \\<noteq> [] \\<and> fst (f 0) = p @ cs\n 2. \\<And>f i n.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<exists>p. p \\<noteq> [] \\<and> fst (f n) = p @ cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and> fst (f (Suc n)) = p @ cs", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f i n.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs;\n        \\<exists>p. p \\<noteq> [] \\<and> fst (f n) = p @ cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and> fst (f (Suc n)) = p @ cs", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n p.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs; p \\<noteq> [];\n        fst (f n) = p @ cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and> fst (f (Suc n)) = p @ cs", "apply(case_tac p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f n p.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs; p \\<noteq> [];\n        fst (f n) = p @ cs; p = []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and> fst (f (Suc n)) = p @ cs\n 2. \\<And>f n p a list.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs; p \\<noteq> [];\n        fst (f n) = p @ cs; p = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and> fst (f (Suc n)) = p @ cs", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n p a list.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. f i \\<rightarrow> f (Suc i);\n        \\<forall>i. fst (f i) \\<noteq> cs; p \\<noteq> [];\n        fst (f n) = p @ cs; p = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and> fst (f (Suc n)) = p @ cs", "apply(erule_tac x=n in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n p a list.\n       \\<lbrakk>f 0 = (c # cs, s); \\<forall>i. fst (f i) \\<noteq> cs;\n        p \\<noteq> []; fst (f n) = p @ cs; p = a # list;\n        f n \\<rightarrow> f (Suc n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and> fst (f (Suc n)) = p @ cs", "apply(erule_tac x=\"Suc n\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n p a list.\n       \\<lbrakk>f 0 = (c # cs, s); p \\<noteq> []; fst (f n) = p @ cs;\n        p = a # list; f n \\<rightarrow> f (Suc n);\n        fst (f (Suc n)) \\<noteq> cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and> fst (f (Suc n)) = p @ cs", "apply(case_tac \"f n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n p a list aa b.\n       \\<lbrakk>f 0 = (c # cs, s); p \\<noteq> []; fst (f n) = p @ cs;\n        p = a # list; f n \\<rightarrow> f (Suc n);\n        fst (f (Suc n)) \\<noteq> cs; f n = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and> fst (f (Suc n)) = p @ cs", "apply(case_tac \"f(Suc n)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n p a list aa b ab ba.\n       \\<lbrakk>f 0 = (c # cs, s); p \\<noteq> []; fst (f n) = p @ cs;\n        p = a # list; f n \\<rightarrow> f (Suc n);\n        fst (f (Suc n)) \\<noteq> cs; f n = (aa, b);\n        f (Suc n) = (ab, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p.\n                            p \\<noteq> [] \\<and> fst (f (Suc n)) = p @ cs", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n a list b ab ba.\n       \\<lbrakk>f 0 = (c # cs, s);\n        (a # list @ cs, b) \\<rightarrow> (ab, ba); ab \\<noteq> cs;\n        f n = (a # list @ cs, b); f (Suc n) = (ab, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p. p \\<noteq> [] \\<and> ab = p @ cs", "apply(drule exec1_only1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f n a list b ab ba.\n       \\<lbrakk>f 0 = (c # cs, s); ab \\<noteq> cs; f n = (a # list @ cs, b);\n        f (Suc n) = (ab, ba); \\<exists>cs1. ab = cs1 @ list @ cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p. p \\<noteq> [] \\<and> ab = p @ cs", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma termi_impl_not_inf: \"c \\<down> s \\<Longrightarrow> \\<not> inf [c] s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<down> s \\<Longrightarrow> \\<not> PHoareTotal.inf [c] s", "apply(erule termi.induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>f s.\n       f s \\<noteq> {} \\<Longrightarrow> \\<not> PHoareTotal.inf [Do f] s\n 2. \\<And>c1 s0 c2.\n       \\<lbrakk>c1 \\<down> s0; \\<not> PHoareTotal.inf [c1] s0;\n        \\<And>s1. s0 -c1\\<rightarrow> s1 \\<Longrightarrow> c2 \\<down> s1;\n        \\<And>s1.\n           s0 -c1\\<rightarrow> s1 \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [c2] s1\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [c1; c2] s0\n 3. \\<And>b s c1 c2.\n       \\<lbrakk>b s; c1 \\<down> s; \\<not> PHoareTotal.inf [c1] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 4. \\<And>b s c2 c1.\n       \\<lbrakk>\\<not> b s; c2 \\<down> s;\n        \\<not> PHoareTotal.inf [c2] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 5. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 6. \\<And>b s c.\n       \\<lbrakk>b s; c \\<down> s; \\<not> PHoareTotal.inf [c] s;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow> WHILE b DO c \\<down> t;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [WHILE b DO c] t\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 7. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 8. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "(*Do*)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>f s.\n       f s \\<noteq> {} \\<Longrightarrow> \\<not> PHoareTotal.inf [Do f] s\n 2. \\<And>c1 s0 c2.\n       \\<lbrakk>c1 \\<down> s0; \\<not> PHoareTotal.inf [c1] s0;\n        \\<And>s1. s0 -c1\\<rightarrow> s1 \\<Longrightarrow> c2 \\<down> s1;\n        \\<And>s1.\n           s0 -c1\\<rightarrow> s1 \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [c2] s1\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [c1; c2] s0\n 3. \\<And>b s c1 c2.\n       \\<lbrakk>b s; c1 \\<down> s; \\<not> PHoareTotal.inf [c1] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 4. \\<And>b s c2 c1.\n       \\<lbrakk>\\<not> b s; c2 \\<down> s;\n        \\<not> PHoareTotal.inf [c2] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 5. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 6. \\<And>b s c.\n       \\<lbrakk>b s; c \\<down> s; \\<not> PHoareTotal.inf [c] s;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow> WHILE b DO c \\<down> t;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [WHILE b DO c] t\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 7. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 8. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "apply clarify"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>c1 s0 c2.\n       \\<lbrakk>c1 \\<down> s0; \\<not> PHoareTotal.inf [c1] s0;\n        \\<And>s1. s0 -c1\\<rightarrow> s1 \\<Longrightarrow> c2 \\<down> s1;\n        \\<And>s1.\n           s0 -c1\\<rightarrow> s1 \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [c2] s1\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [c1; c2] s0\n 2. \\<And>b s c1 c2.\n       \\<lbrakk>b s; c1 \\<down> s; \\<not> PHoareTotal.inf [c1] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 3. \\<And>b s c2 c1.\n       \\<lbrakk>\\<not> b s; c2 \\<down> s;\n        \\<not> PHoareTotal.inf [c2] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 4. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 5. \\<And>b s c.\n       \\<lbrakk>b s; c \\<down> s; \\<not> PHoareTotal.inf [c] s;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow> WHILE b DO c \\<down> t;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [WHILE b DO c] t\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 6. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 7. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "(*Semi*)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>c1 s0 c2.\n       \\<lbrakk>c1 \\<down> s0; \\<not> PHoareTotal.inf [c1] s0;\n        \\<And>s1. s0 -c1\\<rightarrow> s1 \\<Longrightarrow> c2 \\<down> s1;\n        \\<And>s1.\n           s0 -c1\\<rightarrow> s1 \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [c2] s1\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [c1; c2] s0\n 2. \\<And>b s c1 c2.\n       \\<lbrakk>b s; c1 \\<down> s; \\<not> PHoareTotal.inf [c1] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 3. \\<And>b s c2 c1.\n       \\<lbrakk>\\<not> b s; c2 \\<down> s;\n        \\<not> PHoareTotal.inf [c2] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 4. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 5. \\<And>b s c.\n       \\<lbrakk>b s; c \\<down> s; \\<not> PHoareTotal.inf [c] s;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow> WHILE b DO c \\<down> t;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [WHILE b DO c] t\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 6. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 7. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "apply(blast dest:inf_cases)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>b s c1 c2.\n       \\<lbrakk>b s; c1 \\<down> s; \\<not> PHoareTotal.inf [c1] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 2. \\<And>b s c2 c1.\n       \\<lbrakk>\\<not> b s; c2 \\<down> s;\n        \\<not> PHoareTotal.inf [c2] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 3. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 4. \\<And>b s c.\n       \\<lbrakk>b s; c \\<down> s; \\<not> PHoareTotal.inf [c] s;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow> WHILE b DO c \\<down> t;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [WHILE b DO c] t\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 5. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 6. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "(* Cond *)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>b s c1 c2.\n       \\<lbrakk>b s; c1 \\<down> s; \\<not> PHoareTotal.inf [c1] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 2. \\<And>b s c2 c1.\n       \\<lbrakk>\\<not> b s; c2 \\<down> s;\n        \\<not> PHoareTotal.inf [c2] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 3. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 4. \\<And>b s c.\n       \\<lbrakk>b s; c \\<down> s; \\<not> PHoareTotal.inf [c] s;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow> WHILE b DO c \\<down> t;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [WHILE b DO c] t\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 5. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 6. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>b s c2 c1.\n       \\<lbrakk>\\<not> b s; c2 \\<down> s;\n        \\<not> PHoareTotal.inf [c2] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [IF b THEN c1 ELSE c2] s\n 2. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 3. \\<And>b s c.\n       \\<lbrakk>b s; c \\<down> s; \\<not> PHoareTotal.inf [c] s;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow> WHILE b DO c \\<down> t;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [WHILE b DO c] t\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 4. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 5. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 2. \\<And>b s c.\n       \\<lbrakk>b s; c \\<down> s; \\<not> PHoareTotal.inf [c] s;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow> WHILE b DO c \\<down> t;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [WHILE b DO c] t\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 3. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 4. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "(*While*)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b s c.\n       \\<not> b s \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 2. \\<And>b s c.\n       \\<lbrakk>b s; c \\<down> s; \\<not> PHoareTotal.inf [c] s;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow> WHILE b DO c \\<down> t;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [WHILE b DO c] t\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 3. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 4. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b s c.\n       \\<lbrakk>b s; c \\<down> s; \\<not> PHoareTotal.inf [c] s;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow> WHILE b DO c \\<down> t;\n        \\<And>t.\n           s -c\\<rightarrow> t \\<Longrightarrow>\n           \\<not> PHoareTotal.inf [WHILE b DO c] t\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [WHILE b DO c] s\n 2. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 3. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "apply(fastforce dest:inf_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 2. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "(*Call*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>body \\<down> s; \\<not> PHoareTotal.inf [body] s\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [CALL] s\n 2. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "(*Local*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c f s g.\n       \\<lbrakk>c \\<down> f s; \\<not> PHoareTotal.inf [c] (f s)\\<rbrakk>\n       \\<Longrightarrow> \\<not> PHoareTotal.inf [LOCAL f; c; g] s", "apply(blast dest:inf_cases)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma termi_impl_no_inf_chain:\n \"c\\<down>s \\<Longrightarrow> \\<not>(\\<exists>f. f 0 = ([c],s) \\<and> (\\<forall>i::nat. (f i, f(i+1)) : exec1^+))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<down> s \\<Longrightarrow>\n    \\<nexists>f.\n       f 0 = ([c], s) \\<and>\n       (\\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+)", "apply(subgoal_tac \"wf({(y,x). ([c],s) \\<rightarrow>\\<^sup>* x & x \\<rightarrow> y}^+)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<down> s;\n     wf ({(y, x).\n          ([c], s) \\<rightarrow>\\<^sup>* x \\<and>\n          x \\<rightarrow> y}\\<^sup>+)\\<rbrakk>\n    \\<Longrightarrow> \\<nexists>f.\n                         f 0 = ([c], s) \\<and>\n                         (\\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+)\n 2. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply(simp only:wf_iff_no_infinite_down_chain)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<down> s;\n     \\<nexists>f.\n        \\<forall>i.\n           (f (Suc i), f i)\n           \\<in> {(y, x).\n                  ([c], s) \\<rightarrow>\\<^sup>* x \\<and>\n                  x \\<rightarrow> y}\\<^sup>+\\<rbrakk>\n    \\<Longrightarrow> \\<nexists>f.\n                         f 0 = ([c], s) \\<and>\n                         (\\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+)\n 2. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply(erule contrapos_nn)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<down> s;\n     \\<exists>f.\n        f 0 = ([c], s) \\<and>\n        (\\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         \\<forall>i.\n                            (f (Suc i), f i)\n                            \\<in> {(y, x).\n                                   ([c], s) \\<rightarrow>\\<^sup>* x \\<and>\n                                   x \\<rightarrow> y}\\<^sup>+\n 2. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<forall>i.\n                               (f (Suc i), f i)\n                               \\<in> {(y, x).\n([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+\n 2. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply(subgoal_tac \"\\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+;\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<forall>i.\n                               (f (Suc i), f i)\n                               \\<in> {(y, x).\n([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+\n 2. \\<And>f.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\n 3. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\n 2. \\<And>f.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+;\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<forall>i.\n                               (f (Suc i), f i)\n                               \\<in> {(y, x).\n([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+\n 3. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply(rule allI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f i.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> ([c], s) \\<rightarrow>\\<^sup>* f i\n 2. \\<And>f.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+;\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<forall>i.\n                               (f (Suc i), f i)\n                               \\<in> {(y, x).\n([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+\n 3. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply(induct_tac i)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f i.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> ([c], s) \\<rightarrow>\\<^sup>* f 0\n 2. \\<And>f i n.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+;\n        ([c], s) \\<rightarrow>\\<^sup>* f n\\<rbrakk>\n       \\<Longrightarrow> ([c], s) \\<rightarrow>\\<^sup>* f (Suc n)\n 3. \\<And>f.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+;\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<forall>i.\n                               (f (Suc i), f i)\n                               \\<in> {(y, x).\n([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+\n 4. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f i n.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+;\n        ([c], s) \\<rightarrow>\\<^sup>* f n\\<rbrakk>\n       \\<Longrightarrow> ([c], s) \\<rightarrow>\\<^sup>* f (Suc n)\n 2. \\<And>f.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+;\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<forall>i.\n                               (f (Suc i), f i)\n                               \\<in> {(y, x).\n([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+\n 3. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f n.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (Suc i)) \\<in> exec1\\<^sup>+;\n        ([c], s) \\<rightarrow>\\<^sup>* f n\\<rbrakk>\n       \\<Longrightarrow> ([c], s) \\<rightarrow>\\<^sup>* f (Suc n)\n 2. \\<And>f.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+;\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<forall>i.\n                               (f (Suc i), f i)\n                               \\<in> {(y, x).\n([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+\n 3. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply(blast intro: trancl_into_rtrancl rtrancl_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+;\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            \\<forall>i.\n                               (f (Suc i), f i)\n                               \\<in> {(y, x).\n([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+\n 2. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply(rule_tac x=f in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+;\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            (f (Suc i), f i)\n                            \\<in> {(y, x).\n                                   ([c], s) \\<rightarrow>\\<^sup>* x \\<and>\n                                   x \\<rightarrow> y}\\<^sup>+\n 2. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f i.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+;\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i\\<rbrakk>\n       \\<Longrightarrow> (f (Suc i), f i)\n                         \\<in> {(y, x).\n                                ([c], s) \\<rightarrow>\\<^sup>* x \\<and>\n                                x \\<rightarrow> y}\\<^sup>+\n 2. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply(drule_tac x=i in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f i.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i;\n        (f i, f (i + 1)) \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (f (Suc i), f i)\n                         \\<in> {(y, x).\n                                ([c], s) \\<rightarrow>\\<^sup>* x \\<and>\n                                x \\<rightarrow> y}\\<^sup>+\n 2. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply(subst lem)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f i.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i;\n        (f i, f (i + 1)) \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y.\n                            (f i, y) \\<in> exec1\\<^sup>+ \\<longrightarrow>\n                            ([c],\n                             s) \\<rightarrow>\\<^sup>* f i \\<longrightarrow>\n                            ([c], s) \\<rightarrow>\\<^sup>* y\n 2. \\<And>f i.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i;\n        (f i, f (i + 1)) \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (f (Suc i), f i)\n                         \\<in> {(y, x).\n                                ([c], s) \\<rightarrow>\\<^sup>* x \\<and>\n                                (x, y) \\<in> exec1\\<^sup>+}\n 3. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply(blast intro: trancl_into_rtrancl rtrancl_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f i.\n       \\<lbrakk>c \\<down> s; f 0 = ([c], s);\n        \\<forall>i. ([c], s) \\<rightarrow>\\<^sup>* f i;\n        (f i, f (i + 1)) \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (f (Suc i), f i)\n                         \\<in> {(y, x).\n                                ([c], s) \\<rightarrow>\\<^sup>* x \\<and>\n                                (x, y) \\<in> exec1\\<^sup>+}\n 2. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<down> s \\<Longrightarrow>\n    wf ({(y, x).\n         ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}\\<^sup>+)", "apply(rule wf_trancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<down> s \\<Longrightarrow>\n    wf {(y, x). ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}", "apply(simp only:wf_iff_no_infinite_down_chain)"], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<down> s \\<Longrightarrow>\n    \\<nexists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(y, x).\n                 ([c], s) \\<rightarrow>\\<^sup>* x \\<and> x \\<rightarrow> y}", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>c \\<down> s;\n        \\<forall>i.\n           (f (Suc i), f i)\n           \\<in> {(y, x).\n                  ([c], s) \\<rightarrow>\\<^sup>* x \\<and>\n                  x \\<rightarrow> y}\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>c \\<down> s;\n        \\<forall>i.\n           ([c], s) \\<rightarrow>\\<^sup>* f i \\<and>\n           f i \\<rightarrow> f (Suc i)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(drule renumber)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>c \\<down> s;\n        \\<exists>f.\n           f 0 = ([c], s) \\<and>\n           (\\<forall>i. f i \\<rightarrow> f (Suc i))\\<rbrakk>\n       \\<Longrightarrow> False", "apply(fold inf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>c \\<down> s; PHoareTotal.inf [c] s\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp add: termi_impl_not_inf)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "primrec cseq :: \"(nat \\<Rightarrow> state) \\<Rightarrow> nat \\<Rightarrow> com list\" where\n  \"cseq S 0 = []\"\n| \"cseq S (Suc i) = (SOME cs. ([body], S i) \\<rightarrow>\\<^sup>* (CALL # cs, S(i+1))) @ cseq S i\""], ["", "lemma wf_termi_call_steps: \"wf termi_call_steps\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf termi_call_steps", "apply(unfold termi_call_steps_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(t, s).\n        body \\<down> s \\<and>\n        (\\<exists>cs. ([body], s) \\<rightarrow>\\<^sup>* (CALL # cs, t))}", "apply(simp only:wf_iff_no_infinite_down_chain)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(t, s).\n                 body \\<down> s \\<and>\n                 (\\<exists>cs.\n                     ([body], s) \\<rightarrow>\\<^sup>* (CALL # cs, t))}", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(t, s).\n                 body \\<down> s \\<and>\n                 (\\<exists>cs.\n                     ([body],\n                      s) \\<rightarrow>\\<^sup>* (CALL # cs,\n          t))} \\<Longrightarrow>\n       False", "apply(rename_tac S)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<forall>i.\n          (S (Suc i), S i)\n          \\<in> {(t, s).\n                 body \\<down> s \\<and>\n                 (\\<exists>cs.\n                     ([body],\n                      s) \\<rightarrow>\\<^sup>* (CALL # cs,\n          t))} \\<Longrightarrow>\n       False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<forall>i.\n          body \\<down> S i \\<and>\n          (\\<exists>cs.\n              ([body],\n               S i) \\<rightarrow>\\<^sup>* (CALL # cs,\n     S (Suc i))) \\<Longrightarrow>\n       False", "apply(subgoal_tac \"\\<exists>Cs. Cs 0 = [] & (\\<forall>i. (body # Cs i,S i) \\<rightarrow>\\<^sup>* (CALL # Cs(i+1), S(i+1)))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        \\<exists>Cs.\n           Cs 0 = [] \\<and>\n           (\\<forall>i.\n               (body # Cs i,\n                S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1),\n      S (i + 1)))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>S.\n       \\<forall>i.\n          body \\<down> S i \\<and>\n          (\\<exists>cs.\n              ([body],\n               S i) \\<rightarrow>\\<^sup>* (CALL # cs,\n     S (Suc i))) \\<Longrightarrow>\n       \\<exists>Cs.\n          Cs 0 = [] \\<and>\n          (\\<forall>i.\n              (body # Cs i,\n               S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1)))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<forall>i.\n          body \\<down> S i \\<and>\n          (\\<exists>cs.\n              ([body],\n               S i) \\<rightarrow>\\<^sup>* (CALL # cs,\n     S (Suc i))) \\<Longrightarrow>\n       \\<exists>Cs.\n          Cs 0 = [] \\<and>\n          (\\<forall>i.\n              (body # Cs i,\n               S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1)))\n 2. \\<And>S.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        \\<exists>Cs.\n           Cs 0 = [] \\<and>\n           (\\<forall>i.\n               (body # Cs i,\n                S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1),\n      S (i + 1)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply(rule_tac x = \"cseq S\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S.\n       \\<forall>i.\n          body \\<down> S i \\<and>\n          (\\<exists>cs.\n              ([body],\n               S i) \\<rightarrow>\\<^sup>* (CALL # cs,\n     S (Suc i))) \\<Longrightarrow>\n       cseq S 0 = [] \\<and>\n       (\\<forall>i.\n           (body # cseq S i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # cseq S (i + 1), S (i + 1)))\n 2. \\<And>S.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        \\<exists>Cs.\n           Cs 0 = [] \\<and>\n           (\\<forall>i.\n               (body # Cs i,\n                S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1),\n      S (i + 1)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S i.\n       \\<forall>i.\n          body \\<down> S i \\<and>\n          (\\<exists>cs.\n              ([body],\n               S i) \\<rightarrow>\\<^sup>* (CALL # cs,\n     S (Suc i))) \\<Longrightarrow>\n       (body # cseq S i,\n        S i) \\<rightarrow>\\<^sup>* (CALL #\n                                    (SOME cs.\n  ([body], S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i))) @\n                                    cseq S i,\n                                    S (Suc i))\n 2. \\<And>S.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        \\<exists>Cs.\n           Cs 0 = [] \\<and>\n           (\\<forall>i.\n               (body # Cs i,\n                S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1),\n      S (i + 1)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac x=i in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S i.\n       body \\<down> S i \\<and>\n       (\\<exists>cs.\n           ([body],\n            S i) \\<rightarrow>\\<^sup>* (CALL # cs,\n  S (Suc i))) \\<Longrightarrow>\n       (body # cseq S i,\n        S i) \\<rightarrow>\\<^sup>* (CALL #\n                                    (SOME cs.\n  ([body], S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i))) @\n                                    cseq S i,\n                                    S (Suc i))\n 2. \\<And>S.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        \\<exists>Cs.\n           Cs 0 = [] \\<and>\n           (\\<forall>i.\n               (body # Cs i,\n                S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1),\n      S (i + 1)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply(clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S i cs.\n       \\<lbrakk>body \\<down> S i;\n        ([body], S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i))\\<rbrakk>\n       \\<Longrightarrow> (body # cseq S i,\n                          S i) \\<rightarrow>\\<^sup>* (CALL #\n                (SOME cs.\n                    ([body],\n                     S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i))) @\n                cseq S i,\n                S (Suc i))\n 2. \\<And>S.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        \\<exists>Cs.\n           Cs 0 = [] \\<and>\n           (\\<forall>i.\n               (body # Cs i,\n                S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1),\n      S (i + 1)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac P = \"\\<lambda>cs.([body],S i) \\<rightarrow>\\<^sup>* (CALL # cs, S(Suc i))\" in someI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S i cs x.\n       \\<lbrakk>body \\<down> S i;\n        ([body], S i) \\<rightarrow>\\<^sup>* (CALL # x, S (Suc i))\\<rbrakk>\n       \\<Longrightarrow> (body # cseq S i,\n                          S i) \\<rightarrow>\\<^sup>* (CALL # x @ cseq S i,\n                S (Suc i))\n 2. \\<And>S.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        \\<exists>Cs.\n           Cs 0 = [] \\<and>\n           (\\<forall>i.\n               (body # Cs i,\n                S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1),\n      S (i + 1)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply(fastforce dest:app_execs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        \\<exists>Cs.\n           Cs 0 = [] \\<and>\n           (\\<forall>i.\n               (body # Cs i,\n                S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1),\n      S (i + 1)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1),\n  S (i + 1))\\<rbrakk>\n       \\<Longrightarrow> False", "apply(subgoal_tac \"\\<forall>i. ((body # Cs i,S i), (body # Cs(i+1), S(i+1))) : exec1^+\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1));\n        \\<forall>i.\n           ((body # Cs i, S i), body # Cs (i + 1), S (i + 1))\n           \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1),\n  S (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            ((body # Cs i, S i), body # Cs (i + 1),\n                             S (i + 1))\n                            \\<in> exec1\\<^sup>+", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1),\n  S (i + 1))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i.\n                            ((body # Cs i, S i), body # Cs (i + 1),\n                             S (i + 1))\n                            \\<in> exec1\\<^sup>+\n 2. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1));\n        \\<forall>i.\n           ((body # Cs i, S i), body # Cs (i + 1), S (i + 1))\n           \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> False", "apply(blast intro:rtrancl_into_trancl1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1));\n        \\<forall>i.\n           ((body # Cs i, S i), body # Cs (i + 1), S (i + 1))\n           \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> False", "apply(subgoal_tac \"\\<exists>f. f 0 = ([body],S 0) \\<and> (\\<forall>i. (f i, f(i+1)) : exec1^+)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1));\n        \\<forall>i.\n           ((body # Cs i, S i), body # Cs (i + 1), S (i + 1))\n           \\<in> exec1\\<^sup>+;\n        \\<exists>f.\n           f (0::?'a40) = ([body], S 0) \\<and>\n           (\\<forall>i.\n               (f i, f (i + (1::?'a40))) \\<in> exec1\\<^sup>+)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1));\n        \\<forall>i.\n           ((body # Cs i, S i), body # Cs (i + 1), S (i + 1))\n           \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f (0::?'a40) = ([body], S 0) \\<and>\n                            (\\<forall>i.\n                                (f i, f (i + (1::?'a40)))\n                                \\<in> exec1\\<^sup>+)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1));\n        \\<forall>i.\n           ((body # Cs i, S i), body # Cs (i + 1), S (i + 1))\n           \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            f (0::?'a40) = ([body], S 0) \\<and>\n                            (\\<forall>i.\n                                (f i, f (i + (1::?'a40)))\n                                \\<in> exec1\\<^sup>+)\n 2. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1));\n        \\<forall>i.\n           ((body # Cs i, S i), body # Cs (i + 1), S (i + 1))\n           \\<in> exec1\\<^sup>+;\n        \\<exists>f.\n           f (0::?'a40) = ([body], S 0) \\<and>\n           (\\<forall>i.\n               (f i, f (i + (1::?'a40))) \\<in> exec1\\<^sup>+)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(rule_tac x = \"\\<lambda>i.(body#Cs i,S i)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1));\n        \\<forall>i.\n           ((body # Cs i, S i), body # Cs (i + 1), S (i + 1))\n           \\<in> exec1\\<^sup>+\\<rbrakk>\n       \\<Longrightarrow> (body # Cs 0, S 0) = ([body], S 0) \\<and>\n                         (\\<forall>i.\n                             ((body # Cs i, S i), body # Cs (i + 1),\n                              S (i + 1))\n                             \\<in> exec1\\<^sup>+)\n 2. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1));\n        \\<forall>i.\n           ((body # Cs i, S i), body # Cs (i + 1), S (i + 1))\n           \\<in> exec1\\<^sup>+;\n        \\<exists>f.\n           f 0 = ([body], S 0) \\<and>\n           (\\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+)\\<rbrakk>\n       \\<Longrightarrow> False", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S Cs.\n       \\<lbrakk>\\<forall>i.\n                   body \\<down> S i \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        S i) \\<rightarrow>\\<^sup>* (CALL # cs, S (Suc i)));\n        Cs 0 = [];\n        \\<forall>i.\n           (body # Cs i,\n            S i) \\<rightarrow>\\<^sup>* (CALL # Cs (i + 1), S (i + 1));\n        \\<forall>i.\n           ((body # Cs i, S i), body # Cs (i + 1), S (i + 1))\n           \\<in> exec1\\<^sup>+;\n        \\<exists>f.\n           f 0 = ([body], S 0) \\<and>\n           (\\<forall>i. (f i, f (i + 1)) \\<in> exec1\\<^sup>+)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(blast dest:termi_impl_no_inf_chain)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CALL_lemma:\n\"{(\\<lambda>z s. (z=s \\<and> body\\<down>s) \\<and> (s,t) \\<in> termi_call_steps, CALL, \\<lambda>z s. z -body\\<rightarrow> s)} \\<turnstile>\\<^sub>t\n {\\<lambda>z s. (z=s \\<and> body\\<down>t) \\<and> (\\<exists>cs. ([body],t) \\<rightarrow>\\<^sup>* (c#cs,s))} c {\\<lambda>z s. z -c\\<rightarrow> s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n    c {\\<lambda>z. exec z c}", "apply(induct_tac c)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (Do x # cs, s))}\n       Do x {\\<lambda>z. exec z (Do x)}\n 2. \\<And>x1a x2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x1a # cs, s))}\n                x1a {\\<lambda>z. exec z x1a};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n        x2 {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((x1a; x2) # cs,\n                      s))}\n                         x1a; x2 {\\<lambda>z. exec z (x1a; x2)}\n 3. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 4. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 5. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 6. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "(*Do*)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (Do x # cs, s))}\n       Do x {\\<lambda>z. exec z (Do x)}\n 2. \\<And>x1a x2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x1a # cs, s))}\n                x1a {\\<lambda>z. exec z x1a};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n        x2 {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((x1a; x2) # cs,\n                      s))}\n                         x1a; x2 {\\<lambda>z. exec z (x1a; x2)}\n 3. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 4. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 5. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 6. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply (rule strengthen_pre[OF _ thoare.Do])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x.\n       \\<forall>z s.\n          (z = s \\<and> body \\<down> t) \\<and>\n          (\\<exists>cs.\n              ([body],\n               t) \\<rightarrow>\\<^sup>* (Do x # cs, s)) \\<longrightarrow>\n          (\\<forall>t\\<in>x s. z -Do x\\<rightarrow> t) \\<and>\n          x s \\<noteq> {}\n 2. \\<And>x1a x2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x1a # cs, s))}\n                x1a {\\<lambda>z. exec z x1a};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n        x2 {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((x1a; x2) # cs,\n                      s))}\n                         x1a; x2 {\\<lambda>z. exec z (x1a; x2)}\n 3. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 4. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 5. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 6. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(blast dest: execs_pres_termi)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1a x2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x1a # cs, s))}\n                x1a {\\<lambda>z. exec z x1a};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n        x2 {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((x1a; x2) # cs,\n                      s))}\n                         x1a; x2 {\\<lambda>z. exec z (x1a; x2)}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 5. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "(*Semi*)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x1a x2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x1a # cs, s))}\n                x1a {\\<lambda>z. exec z x1a};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n        x2 {\\<lambda>z. exec z x2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((x1a; x2) # cs,\n                      s))}\n                         x1a; x2 {\\<lambda>z. exec z (x1a; x2)}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 5. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(rename_tac c1 c2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n                      s))}\n                         c1; c2 {\\<lambda>z. exec z (c1; c2)}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 5. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(rule_tac Q = \"\\<lambda>z s. body\\<down>t & (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2#cs,s)) & z -c1\\<rightarrow>s & c2\\<down>s\" in thoare.Semi)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n                      s))}\n                         c1 {\\<lambda>z s.\n                                body \\<down> t \\<and>\n                                (\\<exists>cs.\n                                    ([body],\n                                     t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                         s)) \\<and>\n                                z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n 2. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 3. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 4. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 5. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 6. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(erule thoare.Conseq)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n               z -c1\\<rightarrow> ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n        s)) \\<longrightarrow>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n               z -c1\\<rightarrow> ta \\<and> c2 \\<down> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))))\n 2. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 3. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 4. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 5. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 6. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(rule conjI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s ta.\n          (\\<forall>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n              z -c1\\<rightarrow> ta) \\<longrightarrow>\n          (\\<forall>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s)) \\<longrightarrow>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n              z -c1\\<rightarrow> ta \\<and> c2 \\<down> ta)\n 2. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 3. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 4. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 5. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 6. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 7. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply clarsimp"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n                         s -c1\\<rightarrow> ta \\<and> c2 \\<down> ta\n 2. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 3. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 4. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 5. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 6. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 7. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(subgoal_tac \"s -c1\\<rightarrow> ta\")"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n                         s -c1\\<rightarrow> ta \\<and> c2 \\<down> ta\n 2. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s)\\<rbrakk>\n       \\<Longrightarrow> s -c1\\<rightarrow> ta\n 3. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 4. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 6. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 7. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 8. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "prefer 2"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s)\\<rbrakk>\n       \\<Longrightarrow> s -c1\\<rightarrow> ta\n 2. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n                         s -c1\\<rightarrow> ta \\<and> c2 \\<down> ta\n 3. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 4. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 6. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 7. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 8. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(blast intro: exec1.Semi exec_impl_execs rtrancl_trans)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n                         s -c1\\<rightarrow> ta \\<and> c2 \\<down> ta\n 2. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 3. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 4. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 5. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 6. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 7. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(subgoal_tac \"([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\")"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta;\n        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n                         s -c1\\<rightarrow> ta \\<and> c2 \\<down> ta\n 2. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\n 3. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 4. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 6. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 7. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 8. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "prefer 2"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\n 2. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta;\n        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n                         s -c1\\<rightarrow> ta \\<and> c2 \\<down> ta\n 3. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 4. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 6. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 7. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 8. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(blast intro:exec1.Semi[THEN r_into_rtrancl] exec_impl_execs rtrancl_trans)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta;\n        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n                         s -c1\\<rightarrow> ta \\<and> c2 \\<down> ta\n 2. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 3. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 4. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 5. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 6. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 7. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(subgoal_tac \"([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\")"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta;\n        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta);\n        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n                         s -c1\\<rightarrow> ta \\<and> c2 \\<down> ta\n 2. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta;\n        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\\<rbrakk>\n       \\<Longrightarrow> ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\n 3. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 4. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 6. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 7. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 8. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "prefer 2"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta;\n        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\\<rbrakk>\n       \\<Longrightarrow> ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\n 2. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta;\n        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta);\n        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n                         s -c1\\<rightarrow> ta \\<and> c2 \\<down> ta\n 3. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 4. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 5. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 6. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 7. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 8. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(blast intro: exec_impl_execs rtrancl_trans)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>c1 c2 s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n                c2 {\\<lambda>z. exec z c2};\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* (c1 # cs, s)) \\<longrightarrow>\n        s -c1\\<rightarrow> ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs, s);\n        s -c1\\<rightarrow> ta;\n        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta);\n        ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* (c2 # cs, ta)) \\<and>\n                         s -c1\\<rightarrow> ta \\<and> c2 \\<down> ta\n 2. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 3. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 4. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 5. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 6. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 7. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(blast intro:exec_impl_execs rtrancl_trans execs_pres_termi)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n       c2 {\\<lambda>z. exec z c2} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((c1; c2) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s)))\n 2. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 3. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 4. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 5. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 6. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(fast intro: exec1.Semi rtrancl_trans)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>c1 c2.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n                c1 {\\<lambda>z. exec z c1};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))}\n        c2 {\\<lambda>z. exec z c2}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             body \\<down> t \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* (c2 # cs,\n                      s)) \\<and>\n                             z -c1\\<rightarrow> s \\<and> c2 \\<down> s}\n                         c2 {\\<lambda>z. exec z (c1; c2)}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 5. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(erule thoare.Conseq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>c1 c2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c1 # cs, s))}\n       c1 {\\<lambda>z. exec z c1} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* (c2 # cs, s)) \\<longrightarrow>\n               z -c2\\<rightarrow> ta) \\<longrightarrow>\n           (\\<forall>z.\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s)) \\<and>\n               z -c1\\<rightarrow> s \\<and> c2 \\<down> s \\<longrightarrow>\n               z -c1; c2\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s)) \\<and>\n               z -c1\\<rightarrow> s \\<and> c2 \\<down> s) \\<longrightarrow>\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body], t) \\<rightarrow>\\<^sup>* (c2 # cs, s))))\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 5. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply blast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 3. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 4. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "(*Call*)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 3. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 4. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "prefer 3"], ["proof (prove)\ngoal (4 subgoals):\n 1. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(simp only:termi_call_steps_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and>\n         (s, t)\n         \\<in> {(t, s).\n                body \\<down> s \\<and>\n                (\\<exists>cs.\n                    ([body], s) \\<rightarrow>\\<^sup>* (CALL # cs, t))},\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s.\n        (z = s \\<and> body \\<down> t) \\<and>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (CALL # cs, s))}\n    CALL {\\<lambda>z. exec z CALL}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(rule thoare.Conseq[OF thoare.Asm])"], ["proof (prove)\ngoal (4 subgoals):\n 1. (\\<forall>s ta.\n        (\\<forall>z.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t)\n            \\<in> {(t, s).\n                   body \\<down> s \\<and>\n                   (\\<exists>cs.\n                       ([body],\n                        s) \\<rightarrow>\\<^sup>* (CALL # cs,\n            t))} \\<longrightarrow>\n            z -body\\<rightarrow> ta) \\<longrightarrow>\n        (\\<forall>z.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs.\n                ([body],\n                 t) \\<rightarrow>\\<^sup>* (CALL # cs, s)) \\<longrightarrow>\n            z -CALL\\<rightarrow> ta)) \\<and>\n    (\\<forall>s.\n        (\\<exists>z.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs.\n                ([body],\n                 t) \\<rightarrow>\\<^sup>* (CALL # cs, s))) \\<longrightarrow>\n        (\\<exists>z.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t)\n            \\<in> {(t, s).\n                   body \\<down> s \\<and>\n                   (\\<exists>cs.\n                       ([body], s) \\<rightarrow>\\<^sup>* (CALL # cs, t))}))\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(blast dest: execs_pres_termi)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 3. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "(*If*)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             (z = s \\<and> body \\<down> t) \\<and>\n                             (\\<exists>cs.\n                                 ([body],\n                                  t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                      cs,\n                      s))}\n                         IF x1a THEN x2 ELSE x3\n                         {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 3. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(rule thoare.If)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             ((z = s \\<and> body \\<down> t) \\<and>\n                              (\\<exists>cs.\n                                  ([body],\n                                   t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                       cs,\n                       s))) \\<and>\n                             x1a s}\n                         x2 {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             ((z = s \\<and> body \\<down> t) \\<and>\n                              (\\<exists>cs.\n                                  ([body],\n                                   t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                       cs,\n                       s))) \\<and>\n                             \\<not> x1a s}\n                         x3 {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(erule thoare.Conseq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n       x3 {\\<lambda>z. exec z x3} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* (x2 # cs, s)) \\<longrightarrow>\n               z -x2\\<rightarrow> ta) \\<longrightarrow>\n           (\\<forall>z.\n               ((z = s \\<and> body \\<down> t) \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n         cs,\n         s))) \\<and>\n               x1a s \\<longrightarrow>\n               z -IF x1a THEN x2 ELSE x3\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               ((z = s \\<and> body \\<down> t) \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n         cs,\n         s))) \\<and>\n               x1a s) \\<longrightarrow>\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))))\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             ((z = s \\<and> body \\<down> t) \\<and>\n                              (\\<exists>cs.\n                                  ([body],\n                                   t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                       cs,\n                       s))) \\<and>\n                             \\<not> x1a s}\n                         x3 {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            z = s \\<and>\n            body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           z = s \\<and>\n           body \\<down> t \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n       x3 {\\<lambda>z. exec z x3} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (body \\<down> t \\<and>\n            (\\<exists>cs.\n                ([body],\n                 t) \\<rightarrow>\\<^sup>* (x2 # cs, s)) \\<longrightarrow>\n            s -x2\\<rightarrow> ta) \\<longrightarrow>\n           body \\<down> t \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) # cs,\n    s)) \\<and>\n           x1a s \\<longrightarrow>\n           s -x2\\<rightarrow> ta) \\<and>\n       (\\<forall>s.\n           body \\<down> t \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) # cs,\n    s)) \\<and>\n           x1a s \\<longrightarrow>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s)))\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             ((z = s \\<and> body \\<down> t) \\<and>\n                              (\\<exists>cs.\n                                  ([body],\n                                   t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                       cs,\n                       s))) \\<and>\n                             \\<not> x1a s}\n                         x3 {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 4. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(blast intro: exec1.IfTrue rtrancl_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>{(\\<lambda>z s.\n                     (z = s \\<and> body \\<down> s) \\<and>\n                     (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    (z = s \\<and> body \\<down> t) \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n                x2 {\\<lambda>z. exec z x2};\n        {(\\<lambda>z s.\n             (z = s \\<and> body \\<down> s) \\<and>\n             (s, t) \\<in> termi_call_steps,\n          CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n        {\\<lambda>z s.\n            (z = s \\<and> body \\<down> t) \\<and>\n            (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))}\n        x3 {\\<lambda>z. exec z x3}\\<rbrakk>\n       \\<Longrightarrow> {(\\<lambda>z s.\n                              (z = s \\<and> body \\<down> s) \\<and>\n                              (s, t) \\<in> termi_call_steps,\n                           CALL,\n                           \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                         {\\<lambda>z s.\n                             ((z = s \\<and> body \\<down> t) \\<and>\n                              (\\<exists>cs.\n                                  ([body],\n                                   t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n                       cs,\n                       s))) \\<and>\n                             \\<not> x1a s}\n                         x3 {\\<lambda>z. exec z (IF x1a THEN x2 ELSE x3)}\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 3. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(erule thoare.Conseq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* (x3 # cs, s)) \\<longrightarrow>\n               z -x3\\<rightarrow> ta) \\<longrightarrow>\n           (\\<forall>z.\n               ((z = s \\<and> body \\<down> t) \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n         cs,\n         s))) \\<and>\n               \\<not> x1a s \\<longrightarrow>\n               z -IF x1a THEN x2 ELSE x3\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               ((z = s \\<and> body \\<down> t) \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) #\n         cs,\n         s))) \\<and>\n               \\<not> x1a s) \\<longrightarrow>\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s))))\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 3. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            z = s \\<and>\n            body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           z = s \\<and>\n           body \\<down> t \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (body \\<down> t \\<and>\n            (\\<exists>cs.\n                ([body],\n                 t) \\<rightarrow>\\<^sup>* (x3 # cs, s)) \\<longrightarrow>\n            s -x3\\<rightarrow> ta) \\<longrightarrow>\n           body \\<down> t \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) # cs,\n    s)) \\<and>\n           \\<not> x1a s \\<longrightarrow>\n           s -x3\\<rightarrow> ta) \\<and>\n       (\\<forall>s.\n           body \\<down> t \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((IF x1a THEN x2 ELSE x3) # cs,\n    s)) \\<and>\n           \\<not> x1a s \\<longrightarrow>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x3 # cs, s)))\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 3. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "apply(blast intro: exec1.IfFalse rtrancl_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 2. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "(*Var*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}\n 2. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3 {\\<lambda>z. exec z (LOCAL x1a; x2; x3)}\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            z = s \\<and>\n            body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           z = s \\<and>\n           body \\<down> t \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            z = s \\<and>\n            body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           z = s \\<and>\n           body \\<down> t \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s))}\n       LOCAL x1a; x2; x3\n       {\\<lambda>z s.\n           \\<exists>t. x1a z -x2\\<rightarrow> t \\<and> s = x3 z t}\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply(rule thoare.Local)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2 x3.\n       {(\\<lambda>z s.\n            z = s \\<and>\n            body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           z = s \\<and>\n           body \\<down> t \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       \\<forall>s'.\n          {(\\<lambda>z s.\n               z = s \\<and>\n               body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n            CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n          {\\<lambda>z s.\n              (z = s' \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs,\n        s'))) \\<and>\n              s = x1a s'}\n          x2 {\\<lambda>z t.\n                 \\<exists>ta.\n                    x1a z -x2\\<rightarrow> ta \\<and> x3 s' t = x3 z ta}\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply(rule allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2 x3 s'.\n       {(\\<lambda>z s.\n            z = s \\<and>\n            body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           z = s \\<and>\n           body \\<down> t \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            z = s \\<and>\n            body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s' \\<and>\n            body \\<down> t \\<and>\n            (\\<exists>cs.\n                ([body],\n                 t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs,\n     s'))) \\<and>\n           s = x1a s'}\n       x2 {\\<lambda>z t.\n              \\<exists>ta.\n                 x1a z -x2\\<rightarrow> ta \\<and> x3 s' t = x3 z ta}\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply(erule thoare.Conseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2 x3 s'.\n       (\\<forall>s ta.\n           (\\<forall>z.\n               z = s \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* (x2 # cs, s)) \\<longrightarrow>\n               z -x2\\<rightarrow> ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s' \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs,\n         s'))) \\<and>\n               s = x1a s' \\<longrightarrow>\n               (\\<exists>t.\n                   x1a z -x2\\<rightarrow> t \\<and>\n                   x3 s' ta = x3 z t))) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s' \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs,\n         s'))) \\<and>\n               s = x1a s') \\<longrightarrow>\n           (\\<exists>z.\n               z = s \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))))\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply (clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2 x3 s'.\n       (\\<forall>ta.\n           (body \\<down> t \\<and>\n            (\\<exists>cs.\n                ([body],\n                 t) \\<rightarrow>\\<^sup>* (x2 # cs,\n     x1a s')) \\<longrightarrow>\n            x1a s' -x2\\<rightarrow> ta) \\<longrightarrow>\n           body \\<down> t \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs,\n    s')) \\<longrightarrow>\n           (\\<exists>t.\n               x1a s' -x2\\<rightarrow> t \\<and> x3 s' ta = x3 s' t)) \\<and>\n       (body \\<down> t \\<and>\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs,\n s')) \\<longrightarrow>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, x1a s')))\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1a x2 x3 s'.\n       \\<forall>ta.\n          (body \\<down> t \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* (x2 # cs,\n    x1a s')) \\<longrightarrow>\n           x1a s' -x2\\<rightarrow> ta) \\<longrightarrow>\n          body \\<down> t \\<and>\n          (\\<exists>cs.\n              ([body],\n               t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs,\n   s')) \\<longrightarrow>\n          (\\<exists>t. x1a s' -x2\\<rightarrow> t \\<and> x3 s' ta = x3 s' t)\n 2. \\<And>x1a x2 x3 s'.\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs,\ns')) \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, x1a s'))\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply (clarsimp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1a x2 x3 s' ta cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (x2 # cs,\n         x1a s')) \\<longrightarrow>\n                x1a s' -x2\\<rightarrow> ta;\n        body \\<down> t;\n        ([body],\n         t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            x1a s' -x2\\<rightarrow> t \\<and>\n                            x3 s' ta = x3 s' t\n 2. \\<And>x1a x2 x3 s'.\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs,\ns')) \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, x1a s'))\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply(drule rtrancl_trans[OF _ r_into_rtrancl[OF exec1.Local]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1a x2 x3 s' ta cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (x2 # cs,\n         x1a s')) \\<longrightarrow>\n                x1a s' -x2\\<rightarrow> ta;\n        body \\<down> t;\n        ([body],\n         t) \\<rightarrow>\\<^sup>* (x2 # Do (\\<lambda>t. {x3 s' t}) # cs,\n                                   x1a s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            x1a s' -x2\\<rightarrow> t \\<and>\n                            x3 s' ta = x3 s' t\n 2. \\<And>x1a x2 x3 s'.\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs,\ns')) \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, x1a s'))\n 3. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply(fast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2 x3 s'.\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs,\ns')) \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, x1a s'))\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply (clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2 x3 s' cs.\n       \\<lbrakk>body \\<down> t;\n        ([body],\n         t) \\<rightarrow>\\<^sup>* ((LOCAL x1a; x2; x3) # cs, s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs.\n                            ([body],\n                             t) \\<rightarrow>\\<^sup>* (x2 # cs, x1a s')\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply(drule rtrancl_trans[OF _ r_into_rtrancl[OF exec1.Local]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2 x3 s' cs.\n       \\<lbrakk>body \\<down> t;\n        ([body],\n         t) \\<rightarrow>\\<^sup>* (x2 # Do (\\<lambda>t. {x3 s' t}) # cs,\n                                   x1a s')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs.\n                            ([body],\n                             t) \\<rightarrow>\\<^sup>* (x2 # cs, x1a s')\n 2. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (x2 # cs, s))}\n       x2 {\\<lambda>z. exec z x2} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE x1a DO x2) # cs, s))}\n       WHILE x1a DO x2 {\\<lambda>z. exec z (WHILE x1a DO x2)}", "apply(rename_tac b c)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs.\n               ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))}\n       WHILE b DO c {\\<lambda>z. exec z (WHILE b DO c)}", "apply(rule_tac P' = \"\\<lambda>z s. (z,s) \\<in> ({(s,t). b s \\<and> s -c\\<rightarrow> t})^* \\<and> body \\<down> t \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))\" in thoare.Conseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z, s)\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n           body \\<down> t \\<and>\n           (\\<exists>cs.\n               ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))}\n       WHILE b DO c {?Q'455 b c}\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ?Q'455 b c z ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(rule_tac thoare.While[OF wf_termi])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s'.\n          {(\\<lambda>z s.\n               (z = s \\<and> body \\<down> s) \\<and>\n               (s, t) \\<in> termi_call_steps,\n            CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n          {\\<lambda>z s.\n              ((z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<and>\n              b s \\<and> s' = s}\n          c {\\<lambda>z s.\n                ((z, s)\n                 \\<in> {(s, t).\n                        b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                 body \\<down> t \\<and>\n                 (\\<exists>cs.\n                     ([body],\n                      t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n          s))) \\<and>\n                (s, s')\n                \\<in> {(t, s).\n                       WHILE ?b457 b c DO ?c457 b c \\<down> s \\<and>\n                       ?b457 b c s \\<and> s -?c457 b c\\<rightarrow> t}}\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(rule allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s'.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           ((z, s)\n            \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n            body \\<down> t \\<and>\n            (\\<exists>cs.\n                ([body],\n                 t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))) \\<and>\n           b s \\<and> s' = s}\n       c {\\<lambda>z s.\n             ((z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s))) \\<and>\n             (s, s')\n             \\<in> {(t, s).\n                    WHILE ?b457 b c DO ?c457 b c \\<down> s \\<and>\n                    ?b457 b c s \\<and> s -?c457 b c\\<rightarrow> t}}\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(erule thoare.Conseq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s'.\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n               z -c\\<rightarrow> ta) \\<longrightarrow>\n           (\\<forall>z.\n               ((z, s)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         s))) \\<and>\n               b s \\<and> s' = s \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               (ta, s')\n               \\<in> {(t, s).\n                      WHILE ?b457 b c DO ?c457 b c \\<down> s \\<and>\n                      ?b457 b c s \\<and> s -?c457 b c\\<rightarrow>\n                      t})) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               ((z, s)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         s))) \\<and>\n               b s \\<and> s' = s) \\<longrightarrow>\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))))\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s'.\n       (\\<forall>s ta.\n           (body \\<down> t \\<and>\n            (\\<exists>cs.\n                ([body],\n                 t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n            s -c\\<rightarrow> ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<and>\n               b s \\<and> s' = s \\<longrightarrow>\n               (z, ta)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        ta)) \\<and>\n               WHILE ?b457 b c DO ?c457 b c \\<down> s \\<and>\n               ?b457 b c s \\<and> s -?c457 b c\\<rightarrow> ta)) \\<and>\n       ((\\<exists>z.\n            (z, s')\n            \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*) \\<and>\n        body \\<down> t \\<and>\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s')) \\<and>\n        b s' \\<longrightarrow>\n        (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s')))\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b c s'.\n       \\<forall>s ta.\n          (body \\<down> t \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n           s -c\\<rightarrow> ta) \\<longrightarrow>\n          (\\<forall>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)) \\<and>\n              b s \\<and> s' = s \\<longrightarrow>\n              (z, ta)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       ta)) \\<and>\n              WHILE ?b457 b c DO ?c457 b c \\<down> s \\<and>\n              ?b457 b c s \\<and> s -?c457 b c\\<rightarrow> ta)\n 2. \\<And>b c s'.\n       (\\<exists>z.\n           (z, s')\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*) \\<and>\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s')) \\<and>\n       b s' \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s'))\n 3. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> (z, ta)\n                         \\<in> {(s, t).\n                                b s \\<and> s -c\\<rightarrow>\n                                t}\\<^sup>* \\<and>\n                         (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n                  ta)) \\<and>\n                         WHILE ?b457 b c DO ?c457 b c \\<down> s \\<and>\n                         ?b457 b c s \\<and> s -?c457 b c\\<rightarrow> ta\n 2. \\<And>b c s'.\n       (\\<exists>z.\n           (z, s')\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*) \\<and>\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s')) \\<and>\n       b s' \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s'))\n 3. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> (z, ta)\n                         \\<in> {(s, t).\n                                b s \\<and> s -c\\<rightarrow> t}\\<^sup>*\n 2. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n                  ta)) \\<and>\n                         WHILE ?b457 b c DO ?c457 b c \\<down> s \\<and>\n                         ?b457 b c s \\<and> s -?c457 b c\\<rightarrow> ta\n 3. \\<And>b c s'.\n       (\\<exists>z.\n           (z, s')\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*) \\<and>\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s')) \\<and>\n       b s' \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s'))\n 4. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(blast intro: rtrancl_trans exec1.WhileTrue)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>cs.\n                             ([body],\n                              t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n                  ta)) \\<and>\n                         WHILE ?b457 b c DO ?c457 b c \\<down> s \\<and>\n                         ?b457 b c s \\<and> s -?c457 b c\\<rightarrow> ta\n 2. \\<And>b c s'.\n       (\\<exists>z.\n           (z, s')\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*) \\<and>\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s')) \\<and>\n       b s' \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s'))\n 3. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs.\n                            ([body],\n                             t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n                 ta)\n 2. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> WHILE ?b457 b c DO ?c457 b c \\<down> s \\<and>\n                         ?b457 b c s \\<and> s -?c457 b c\\<rightarrow> ta\n 3. \\<And>b c s'.\n       (\\<exists>z.\n           (z, s')\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*) \\<and>\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s')) \\<and>\n       b s' \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s'))\n 4. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(rule exI, rule rtrancl_trans, assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> ((WHILE b DO c) # cs,\n                          s) \\<rightarrow>\\<^sup>* ((WHILE b DO c) #\n              ?cs941 b c s ta z cs,\n              ta)\n 2. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> WHILE ?b457 b c DO ?c457 b c \\<down> s \\<and>\n                         ?b457 b c s \\<and> s -?c457 b c\\<rightarrow> ta\n 3. \\<And>b c s'.\n       (\\<exists>z.\n           (z, s')\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*) \\<and>\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s')) \\<and>\n       b s' \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s'))\n 4. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(blast intro: exec1.WhileTrue exec_impl_execs rtrancl_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> WHILE ?b457 b c DO ?c457 b c \\<down> s \\<and>\n                         ?b457 b c s \\<and> s -?c457 b c\\<rightarrow> ta\n 2. \\<And>b c s'.\n       (\\<exists>z.\n           (z, s')\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*) \\<and>\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s')) \\<and>\n       b s' \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s'))\n 3. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> WHILE ?b457 b c DO ?c457 b c \\<down> s\n 2. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> ?b457 b c s \\<and> s -?c457 b c\\<rightarrow> ta\n 3. \\<And>b c s'.\n       (\\<exists>z.\n           (z, s')\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*) \\<and>\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s')) \\<and>\n       b s' \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s'))\n 4. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(blast intro:execs_pres_termi)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b c s ta z cs.\n       \\<lbrakk>(\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* (c # cs, s)) \\<longrightarrow>\n                s -c\\<rightarrow> ta;\n        (z, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        b s\\<rbrakk>\n       \\<Longrightarrow> b s \\<and> s -c\\<rightarrow> ta\n 2. \\<And>b c s'.\n       (\\<exists>z.\n           (z, s')\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*) \\<and>\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s')) \\<and>\n       b s' \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s'))\n 3. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(blast intro: exec1.WhileTrue exec_impl_execs rtrancl_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s'.\n       (\\<exists>z.\n           (z, s')\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*) \\<and>\n       body \\<down> t \\<and>\n       (\\<exists>cs.\n           ([body],\n            t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s')) \\<and>\n       b s' \\<longrightarrow>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s'))\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(blast intro: exec1.WhileTrue exec_impl_execs rtrancl_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       (\\<forall>s ta.\n           (\\<forall>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               ((z, ta)\n                \\<in> {(s, t).\n                       b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n                body \\<down> t \\<and>\n                (\\<exists>cs.\n                    ([body],\n                     t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n         ta))) \\<and>\n               \\<not> b ta) \\<longrightarrow>\n           (\\<forall>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s)) \\<longrightarrow>\n               z -WHILE b DO c\\<rightarrow> ta)) \\<and>\n       (\\<forall>s.\n           (\\<exists>z.\n               (z = s \\<and> body \\<down> t) \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        s))) \\<longrightarrow>\n           (\\<exists>z.\n               (z, s)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s))))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s ta.\n          (\\<forall>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s)) \\<longrightarrow>\n              ((z, ta)\n               \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n               body \\<down> t \\<and>\n               (\\<exists>cs.\n                   ([body],\n                    t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n        ta))) \\<and>\n              \\<not> b ta) \\<longrightarrow>\n          (\\<forall>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s)) \\<longrightarrow>\n              z -WHILE b DO c\\<rightarrow> ta)\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n                c {\\<lambda>z. exec z c};\n        \\<forall>z.\n           (z, s)\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n    s)) \\<longrightarrow>\n           (z, ta)\n           \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n           (\\<exists>cs.\n               ([body],\n                t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, ta)) \\<and>\n           \\<not> b ta;\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)\\<rbrakk>\n       \\<Longrightarrow> s -WHILE b DO c\\<rightarrow> ta\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)))", "apply(erule_tac x = s in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n                c {\\<lambda>z. exec z c};\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        (s, s) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n s)) \\<longrightarrow>\n        (s, ta)\n        \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, ta)) \\<and>\n        \\<not> b ta\\<rbrakk>\n       \\<Longrightarrow> s -WHILE b DO c\\<rightarrow> ta\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n                c {\\<lambda>z. exec z c};\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n s)) \\<longrightarrow>\n        (s, ta)\n        \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, ta)) \\<and>\n        \\<not> b ta\\<rbrakk>\n       \\<Longrightarrow> s -WHILE b DO c\\<rightarrow> ta\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)))", "apply(erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b c s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n                c {\\<lambda>z. exec z c};\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs.\n                            ([body],\n                             t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n                 s)\n 2. \\<And>b c s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n                c {\\<lambda>z. exec z c};\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        (s, ta)\n        \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, ta)) \\<and>\n        \\<not> b ta\\<rbrakk>\n       \\<Longrightarrow> s -WHILE b DO c\\<rightarrow> ta\n 3. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s ta cs.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n                c {\\<lambda>z. exec z c};\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        (s, ta)\n        \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n        (\\<exists>cs.\n            ([body],\n             t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, ta)) \\<and>\n        \\<not> b ta\\<rbrakk>\n       \\<Longrightarrow> s -WHILE b DO c\\<rightarrow> ta\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)))", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s ta cs csa.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n                c {\\<lambda>z. exec z c};\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        (s, ta) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        \\<not> b ta;\n        ([body],\n         t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # csa, ta)\\<rbrakk>\n       \\<Longrightarrow> s -WHILE b DO c\\<rightarrow> ta\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)))", "apply(erule_tac a=s in converse_rtrancl_induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b c s ta cs csa.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n                c {\\<lambda>z. exec z c};\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        \\<not> b ta;\n        ([body],\n         t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # csa, ta)\\<rbrakk>\n       \\<Longrightarrow> ta -WHILE b DO c\\<rightarrow> ta\n 2. \\<And>b c s ta cs csa y z.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n                c {\\<lambda>z. exec z c};\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        \\<not> b ta;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # csa, ta);\n        (y, z) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t};\n        (z, ta) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        z -WHILE b DO c\\<rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> y -WHILE b DO c\\<rightarrow> ta\n 3. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c s ta cs csa y z.\n       \\<lbrakk>{(\\<lambda>z s.\n                     z = s \\<and>\n                     body \\<down> s \\<and> (s, t) \\<in> termi_call_steps,\n                  CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n                {\\<lambda>z s.\n                    z = s \\<and>\n                    (\\<exists>cs.\n                        ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n                c {\\<lambda>z. exec z c};\n        body \\<down> t;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s);\n        \\<not> b ta;\n        ([body], t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # csa, ta);\n        (y, z) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t};\n        (z, ta) \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>*;\n        z -WHILE b DO c\\<rightarrow> ta\\<rbrakk>\n       \\<Longrightarrow> y -WHILE b DO c\\<rightarrow> ta\n 2. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)))", "apply(fast elim:exec.WhileTrue)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b c.\n       {(\\<lambda>z s.\n            (z = s \\<and> body \\<down> s) \\<and>\n            (s, t) \\<in> termi_call_steps,\n         CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n       {\\<lambda>z s.\n           (z = s \\<and> body \\<down> t) \\<and>\n           (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (c # cs, s))}\n       c {\\<lambda>z. exec z c} \\<Longrightarrow>\n       \\<forall>s.\n          (\\<exists>z.\n              (z = s \\<and> body \\<down> t) \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs,\n       s))) \\<longrightarrow>\n          (\\<exists>z.\n              (z, s)\n              \\<in> {(s, t). b s \\<and> s -c\\<rightarrow> t}\\<^sup>* \\<and>\n              body \\<down> t \\<and>\n              (\\<exists>cs.\n                  ([body],\n                   t) \\<rightarrow>\\<^sup>* ((WHILE b DO c) # cs, s)))", "apply(fast intro: rtrancl_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CALL_cor:\n\"{(\\<lambda>z s. (z=s \\<and> body\\<down>s) \\<and> (s,t) \\<in> termi_call_steps, CALL, \\<lambda>z s. z -body\\<rightarrow> s)} \\<turnstile>\\<^sub>t\n {\\<lambda>z s. (z=s \\<and> body\\<down>s) \\<and> s = t} body {\\<lambda>z s. z -body\\<rightarrow> s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(\\<lambda>z s.\n         (z = s \\<and> body \\<down> s) \\<and> (s, t) \\<in> termi_call_steps,\n      CALL, \\<lambda>z. exec z body)} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. (z = s \\<and> body \\<down> s) \\<and> s = t} body\n    {\\<lambda>z. exec z body}", "apply(rule strengthen_pre[OF _ CALL_lemma])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z s.\n       (z = s \\<and> body \\<down> s) \\<and> s = t \\<longrightarrow>\n       (z = s \\<and> body \\<down> t) \\<and>\n       (\\<exists>cs. ([body], t) \\<rightarrow>\\<^sup>* (body # cs, s))", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma MGT_CALL: \"{} \\<turnstile>\\<^sub>t MGT\\<^sub>t CALL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\\<^sub>t MGT\\<^sub>t CALL", "apply(simp add: MGT\\<^sub>t_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\\<^sub>t\n    {\\<lambda>z s. z = s \\<and> body \\<down> s} CALL\n    {\\<lambda>z. exec z body}", "apply(blast intro:thoare.Call wf_termi_call_steps CALL_cor)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem \"{} \\<Turnstile>\\<^sub>t {P}c{Q}  \\<Longrightarrow>  {} \\<turnstile>\\<^sub>t {P}c{Q::state assn}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<Turnstile>\\<^sub>t {P} c {Q} \\<Longrightarrow>\n    {} \\<turnstile>\\<^sub>t {P} c {Q}", "apply(erule MGT_implies_complete[OF MGT_lemma[OF MGT_CALL]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}