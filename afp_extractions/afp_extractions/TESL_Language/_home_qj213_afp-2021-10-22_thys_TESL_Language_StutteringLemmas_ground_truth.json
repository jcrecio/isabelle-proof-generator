{"file_name": "/home/qj213/afp-2021-10-22/thys/TESL_Language/StutteringLemmas.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/TESL_Language", "problem_names": ["lemma bounded_suc_ind:\n  assumes \\<open>\\<And>k. k < m \\<Longrightarrow> P (Suc (z + k)) = P (z + k)\\<close>\n    shows \\<open>k < m \\<Longrightarrow> P (Suc (z + k)) = P z\\<close>", "lemma dilating_fun_injects:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>inj_on f A\\<close>", "lemma dilating_injects:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>inj_on f A\\<close>", "lemma ticks_image:\n  assumes \\<open>dilating_fun f r\\<close>\n  and     \\<open>hamlet ((Rep_run r) n c)\\<close>\n  shows   \\<open>\\<exists>n\\<^sub>0. f n\\<^sub>0 = n\\<close>", "lemma ticks_image_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>hamlet ((Rep_run r) n c)\\<close>\n  shows   \\<open>\\<exists>n\\<^sub>0. f n\\<^sub>0 = n\\<close>", "lemma ticks_image_sub':\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>\\<exists>c. hamlet ((Rep_run r) n c)\\<close>\n  shows   \\<open>\\<exists>n\\<^sub>0. f n\\<^sub>0 = n\\<close>", "lemma dilating_fun_image_strict:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>{k. f m < k \\<and> k < f n \\<and> hamlet ((Rep_run r) k c)}\n            = image f {k. m < k \\<and> k < n \\<and> hamlet ((Rep_run r) (f k) c)}\\<close>\n  (is \\<open>?IMG = image f ?SET\\<close>)", "lemma dilating_fun_image_left:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>{k. f m \\<le> k \\<and> k < f n \\<and> hamlet ((Rep_run r) k c)}\n          = image f {k. m \\<le> k \\<and> k < n \\<and> hamlet ((Rep_run r) (f k) c)}\\<close>\n  (is \\<open>?IMG = image f ?SET\\<close>)", "lemma dilating_fun_image_right:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>{k. f m < k \\<and> k \\<le> f n \\<and> hamlet ((Rep_run r) k c)}\n          = image f {k. m < k \\<and> k \\<le> n \\<and> hamlet ((Rep_run r) (f k) c)}\\<close>\n  (is \\<open>?IMG = image f ?SET\\<close>)", "lemma dilating_fun_image:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>{k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet ((Rep_run r) k c)}\n          = image f {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet ((Rep_run r) (f k) c)}\\<close>\n  (is \\<open>?IMG = image f ?SET\\<close>)", "lemma ticks_as_often_strict:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>card {p. n < p \\<and> p < m \\<and> hamlet ((Rep_run r) (f p) c)}\n          = card {p. f n < p \\<and> p < f m \\<and> hamlet ((Rep_run r) p c)}\\<close>\n    (is \\<open>card ?SET = card ?IMG\\<close>)", "lemma ticks_as_often_left:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>card {p. n \\<le> p \\<and> p < m \\<and> hamlet ((Rep_run r) (f p) c)}\n          = card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet ((Rep_run r) p c)}\\<close>\n    (is \\<open>card ?SET = card ?IMG\\<close>)", "lemma ticks_as_often_right:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>card {p. n < p \\<and> p \\<le> m \\<and> hamlet ((Rep_run r) (f p) c)}\n          = card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet ((Rep_run r) p c)}\\<close>\n    (is \\<open>card ?SET = card ?IMG\\<close>)", "lemma ticks_as_often:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet ((Rep_run r) (f p) c)}\n          = card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet ((Rep_run r) p c)}\\<close>\n    (is \\<open>card ?SET = card ?IMG\\<close>)", "lemma ticks_tag_image:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>\\<exists>c. hamlet ((Rep_run r) k c)\\<close>\n  and     \\<open>time ((Rep_run r) k c) = \\<tau>\\<close>\n  shows   \\<open>\\<exists>k\\<^sub>0. f k\\<^sub>0 = k \\<and> time ((Rep_run sub) k\\<^sub>0 c) = \\<tau>\\<close>", "lemma ticks_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>hamlet ((Rep_run sub) n a) = hamlet ((Rep_run r) (f n) a)\\<close>", "lemma no_tick_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>(\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n) \\<longrightarrow> \\<not>hamlet ((Rep_run r) n a)\\<close>", "lemma tick_set_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{k. hamlet ((Rep_run r) k c)} = image f {k. hamlet ((Rep_run sub) k c)}\\<close>\n    (is \\<open>?R = image f ?S\\<close>)", "lemma Least_strict_mono:\n  assumes \\<open>strict_mono f\\<close>\n  and     \\<open>\\<exists>x \\<in> S. \\<forall>y \\<in> S. x \\<le> y\\<close>\n  shows   \\<open>(LEAST y. y \\<in> f ` S) = f (LEAST x. x \\<in> S)\\<close>", "lemma Least_nat_ex:\n  \\<open>(n::nat) \\<in> S \\<Longrightarrow> \\<exists>x \\<in> S. (\\<forall>y \\<in> S. x \\<le> y)\\<close>", "lemma Least_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>\\<exists>k::nat. hamlet ((Rep_run sub) k c)\\<close>\n  shows   \\<open>(LEAST k. k \\<in> {t. hamlet ((Rep_run r) t c)})\n              = f (LEAST k. k \\<in> {t. hamlet ((Rep_run sub) t c)})\\<close>\n          (is \\<open>(LEAST k. k \\<in> ?R) = f (LEAST k. k \\<in> ?S)\\<close>)", "lemma ticks_imp_ticks_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>\\<exists>k. hamlet ((Rep_run r) k c)\\<close>\n  shows   \\<open>\\<exists>k\\<^sub>0. hamlet ((Rep_run sub) k\\<^sub>0 c)\\<close>", "lemma ticks_imp_ticks_subk:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>hamlet ((Rep_run r) k c)\\<close>\n  shows   \\<open>\\<exists>k\\<^sub>0. f k\\<^sub>0 = k \\<and> hamlet ((Rep_run sub) k\\<^sub>0 c)\\<close>", "lemma dilated_ticks_strict:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{i. f m < i \\<and> i < f n \\<and> hamlet ((Rep_run r) i c)}\n          = image f {i. m < i \\<and> i < n \\<and> hamlet ((Rep_run sub) i c)}\\<close>\n    (is \\<open>?RUN = image f ?SUB\\<close>)", "lemma dilated_ticks_left:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{i. f m \\<le> i \\<and> i < f n \\<and> hamlet ((Rep_run r) i c)}\n          = image f {i. m \\<le> i \\<and> i < n \\<and> hamlet ((Rep_run sub) i c)}\\<close>\n    (is \\<open>?RUN = image f ?SUB\\<close>)", "lemma dilated_ticks_right:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{i. f m < i \\<and> i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\n          = image f {i. m < i \\<and> i \\<le> n \\<and> hamlet ((Rep_run sub) i c)}\\<close>\n    (is \\<open>?RUN = image f ?SUB\\<close>)", "lemma dilated_ticks:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\n          = image f {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet ((Rep_run sub) i c)}\\<close>\n    (is \\<open>?RUN = image f ?SUB\\<close>)", "lemma empty_dilated_prefix:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>n < f 0\\<close>\nshows   \\<open>\\<not> hamlet ((Rep_run r) n c)\\<close>", "lemma nat_sing_prop:\n  \\<open>{i::nat. i = k \\<and> P(i)} = {i::nat. i = k \\<and> P(k)}\\<close>", "lemma tick_count_is_fun[code]:\\<open>tick_count r c n = run_tick_count r c n\\<close>", "lemma tick_count_strict_suc:\\<open>tick_count_strict r c (Suc n) = tick_count r c n\\<close>", "lemma tick_count_strict_is_fun[code]:\n  \\<open>tick_count_strict r c n = run_tick_count_strictly r c n\\<close>", "lemma strictly_precedes_alt_def1:\n  \\<open>{ \\<rho>. \\<forall>n::nat. (run_tick_count \\<rho> K\\<^sub>2 n) \\<le> (run_tick_count_strictly \\<rho> K\\<^sub>1 n) }\n = { \\<rho>. \\<forall>n::nat. (run_tick_count_strictly \\<rho> K\\<^sub>2 (Suc n))\n                  \\<le> (run_tick_count_strictly \\<rho> K\\<^sub>1 n) }\\<close>", "lemma zero_gt_all:\n  assumes \\<open>P (0::nat)\\<close>\n      and \\<open>\\<And>n. n > 0 \\<Longrightarrow> P n\\<close>\n    shows \\<open>P n\\<close>", "lemma strictly_precedes_alt_def2:\n  \\<open>{ \\<rho>. \\<forall>n::nat. (run_tick_count \\<rho> K\\<^sub>2 n) \\<le> (run_tick_count_strictly \\<rho> K\\<^sub>1 n) }\n = { \\<rho>. (\\<not>hamlet ((Rep_run \\<rho>) 0 K\\<^sub>2))\n      \\<and> (\\<forall>n::nat. (run_tick_count \\<rho> K\\<^sub>2 (Suc n)) \\<le> (run_tick_count \\<rho> K\\<^sub>1 n)) }\\<close>\n  (is \\<open>?P = ?P'\\<close>)", "lemma run_tick_count_suc:\n  \\<open>run_tick_count r c (Suc n) = (if hamlet ((Rep_run r) (Suc n) c)\n                                 then Suc (run_tick_count r c n)\n                                 else run_tick_count r c n)\\<close>", "lemma card_suc:\n  \\<open>card {i. i \\<le> (Suc n) \\<and> P i} = card {i. i \\<le> n \\<and> P i} + card {i. i = (Suc n) \\<and> P i}\\<close>", "lemma card_le_leq:\n  assumes \\<open>m < n\\<close>\n    shows \\<open>card {i::nat. m < i \\<and> i \\<le> n \\<and> P i}\n         = card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}\\<close>", "lemma card_le_leq_0:\n  \\<open>card {i::nat. i \\<le> n \\<and> P i} = card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}\\<close>", "lemma card_mnm:\n  assumes \\<open>m < n\\<close>\n    shows \\<open>card {i::nat. i < n \\<and> P i}\n         = card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}\\<close>", "lemma card_mnm':\n  assumes \\<open>m < n\\<close>\n    shows \\<open>card {i::nat. i < n \\<and> P i}\n         = card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}\\<close>", "lemma nat_interval_union:\n  assumes \\<open>m \\<le> n\\<close>\n    shows \\<open>{i::nat. i \\<le> n \\<and> P i}\n         = {i::nat. i \\<le> m \\<and> P i} \\<union> {i::nat. m < i \\<and> i \\<le> n \\<and> P i}\\<close>", "lemma card_sing_prop:\\<open>card {i. i = n \\<and> P i} = (if P n then 1 else 0)\\<close>", "lemma card_prop_mono:\n  assumes \\<open>m \\<le> n\\<close>\n    shows \\<open>card {i::nat. i \\<le> m \\<and> P i} \\<le> card {i. i \\<le> n \\<and> P i}\\<close>", "lemma no_tick_before_suc:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>(f n) < k \\<and> k < (f (Suc n))\\<close>\n    shows \\<open>\\<not>hamlet ((Rep_run r) k c)\\<close>", "lemma tick_count_fsuc:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count r c (f (Suc n))\n         = tick_count r c (f n) + card {k. k = f (Suc n) \\<and> hamlet ((Rep_run r) k c)}\\<close>", "lemma tick_count_f_suc_sub:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count r c (f (Suc n)) = (if hamlet ((Rep_run sub) (Suc n) c)\n                                         then Suc (tick_count r c (f n))\n                                         else tick_count r c (f n))\\<close>", "lemma tick_count_latest:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>f n\\<^sub>p < n \\<and> (\\<forall>k. f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\\<close>\n    shows \\<open>tick_count r c n = tick_count r c (f n\\<^sub>p)\\<close>", "lemma tick_count_sub:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count sub c n = tick_count r c (f n)\\<close>", "lemma tick_count_strict_0:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count_strict r c (f 0) = 0\\<close>", "lemma tick_count_strict_stable:\n  assumes \\<open>dilating f sub r\\<close>\n  assumes \\<open>(f n) < k \\<and> k < (f (Suc n))\\<close>\n  shows \\<open>tick_count_strict r c k = tick_count_strict r c (f (Suc n))\\<close>", "lemma tick_count_strict_sub:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count_strict sub c n = tick_count_strict r c (f n)\\<close>", "lemma mono_tick_count:\n  \\<open>mono (\\<lambda> k. tick_count r c k)\\<close>", "lemma greatest_prev_image:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>(\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n) \\<Longrightarrow> (\\<exists>n\\<^sub>p. f n\\<^sub>p < n \\<and> (\\<forall>k. f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)))\\<close>", "lemma strict_mono_suc:\n  assumes \\<open>strict_mono f\\<close>\n      and \\<open>f sn = Suc (f n)\\<close>\n    shows \\<open>sn = Suc n\\<close>", "lemma next_non_stuttering:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>f n\\<^sub>p < n \\<and> (\\<forall>k. f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\\<close>\n      and \\<open>f sn\\<^sub>0 = Suc n\\<close>\n    shows \\<open>sn\\<^sub>0 = Suc n\\<^sub>p\\<close>", "lemma dil_tick_count:\n  assumes \\<open>sub \\<lless> r\\<close>\n      and \\<open>\\<forall>n. run_tick_count sub a n \\<le> run_tick_count sub b n\\<close>\n    shows \\<open>run_tick_count r a n \\<le> run_tick_count r b n\\<close>", "lemma stutter_no_time:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>\\<And>k. f n < k \\<and> k \\<le> m \\<Longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)\\<close>\n      and \\<open>m > f n\\<close>\n    shows \\<open>time ((Rep_run r) m c) = time ((Rep_run r) (f n) c)\\<close>", "lemma time_stuttering:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>time ((Rep_run sub) n c) = \\<tau>\\<close>\n      and \\<open>\\<And>k. f n < k \\<and> k \\<le> m \\<Longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)\\<close>\n      and \\<open>m > f n\\<close>\n    shows \\<open>time ((Rep_run r) m c) = \\<tau>\\<close>", "lemma first_time_image:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>first_time sub c n t = first_time r c (f n) t\\<close>", "lemma first_dilated_instant:\n  assumes \\<open>strict_mono f\\<close>\n      and \\<open>f (0::nat) = (0::nat)\\<close>\n    shows \\<open>Max {i. f i \\<le> 0} = 0\\<close>", "lemma not_image_stut:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>n\\<^sub>0 = Max {i. f i \\<le> n}\\<close>\n      and \\<open>f n\\<^sub>0 < k \\<and> k \\<le> n\\<close>\n    shows \\<open>\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k\\<close>", "lemma contracting_inverse:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>contracting (dil_inverse f) r sub f\\<close>", "lemma dense_run_dil_inverse_only:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>contracting g r sub f\\<close>\n      and \\<open>dense_run sub\\<close>\n    shows \\<open>g = (dil_inverse f)\\<close>"], "translations": [["", "lemma bounded_suc_ind:\n  assumes \\<open>\\<And>k. k < m \\<Longrightarrow> P (Suc (z + k)) = P (z + k)\\<close>\n    shows \\<open>k < m \\<Longrightarrow> P (Suc (z + k)) = P z\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. k < m \\<Longrightarrow> P (Suc (z + k)) = P z", "proof (induction k)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < m \\<Longrightarrow> P (Suc (z + 0)) = P z\n 2. \\<And>k.\n       \\<lbrakk>k < m \\<Longrightarrow> P (Suc (z + k)) = P z;\n        Suc k < m\\<rbrakk>\n       \\<Longrightarrow> P (Suc (z + Suc k)) = P z", "case 0"], ["proof (state)\nthis:\n  0 < m\n\ngoal (2 subgoals):\n 1. 0 < m \\<Longrightarrow> P (Suc (z + 0)) = P z\n 2. \\<And>k.\n       \\<lbrakk>k < m \\<Longrightarrow> P (Suc (z + k)) = P z;\n        Suc k < m\\<rbrakk>\n       \\<Longrightarrow> P (Suc (z + Suc k)) = P z", "with assms(1)[of 0]"], ["proof (chain)\npicking this:\n  0 < m \\<Longrightarrow> P (Suc (z + 0)) = P (z + 0)\n  0 < m", "show ?case"], ["proof (prove)\nusing this:\n  0 < m \\<Longrightarrow> P (Suc (z + 0)) = P (z + 0)\n  0 < m\n\ngoal (1 subgoal):\n 1. P (Suc (z + 0)) = P z", "by simp"], ["proof (state)\nthis:\n  P (Suc (z + 0)) = P z\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k < m \\<Longrightarrow> P (Suc (z + k)) = P z;\n        Suc k < m\\<rbrakk>\n       \\<Longrightarrow> P (Suc (z + Suc k)) = P z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k < m \\<Longrightarrow> P (Suc (z + k)) = P z;\n        Suc k < m\\<rbrakk>\n       \\<Longrightarrow> P (Suc (z + Suc k)) = P z", "case (Suc k')"], ["proof (state)\nthis:\n  k' < m \\<Longrightarrow> P (Suc (z + k')) = P z\n  Suc k' < m\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>k < m \\<Longrightarrow> P (Suc (z + k)) = P z;\n        Suc k < m\\<rbrakk>\n       \\<Longrightarrow> P (Suc (z + Suc k)) = P z", "with assms[of \\<open>Suc k'\\<close>]"], ["proof (chain)\npicking this:\n  Suc k' < m \\<Longrightarrow> P (Suc (z + Suc k')) = P (z + Suc k')\n  k' < m \\<Longrightarrow> P (Suc (z + k')) = P z\n  Suc k' < m", "show ?case"], ["proof (prove)\nusing this:\n  Suc k' < m \\<Longrightarrow> P (Suc (z + Suc k')) = P (z + Suc k')\n  k' < m \\<Longrightarrow> P (Suc (z + k')) = P z\n  Suc k' < m\n\ngoal (1 subgoal):\n 1. P (Suc (z + Suc k')) = P z", "by force"], ["proof (state)\nthis:\n  P (Suc (z + Suc k')) = P z\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Lemmas used to prove the invariance by stuttering\\<close>"], ["", "text \\<open>Since a dilating function is strictly monotonous, it is injective.\\<close>"], ["", "lemma dilating_fun_injects:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>inj_on f A\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f A", "using assms dilating_fun_def strict_mono_imp_inj_on"], ["proof (prove)\nusing this:\n  dilating_fun f r\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n  strict_mono ?f \\<Longrightarrow> inj_on ?f ?A\n\ngoal (1 subgoal):\n 1. inj_on f A", "by blast"], ["", "lemma dilating_injects:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>inj_on f A\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f A", "using assms dilating_def dilating_fun_injects"], ["proof (prove)\nusing this:\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  dilating_fun ?f ?r \\<Longrightarrow> inj_on ?f ?A\n\ngoal (1 subgoal):\n 1. inj_on f A", "by blast"], ["", "text \\<open>\n  If a clock ticks at an instant in a dilated run, that instant is the image\n  by the dilating function of an instant of the original run.\n\\<close>"], ["", "lemma ticks_image:\n  assumes \\<open>dilating_fun f r\\<close>\n  and     \\<open>hamlet ((Rep_run r) n c)\\<close>\n  shows   \\<open>\\<exists>n\\<^sub>0. f n\\<^sub>0 = n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<^sub>0. f n\\<^sub>0 = n", "using dilating_fun_def assms"], ["proof (prove)\nusing this:\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n  dilating_fun f r\n  hamlet (Rep_run r n c)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<^sub>0. f n\\<^sub>0 = n", "by blast"], ["", "lemma ticks_image_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>hamlet ((Rep_run r) n c)\\<close>\n  shows   \\<open>\\<exists>n\\<^sub>0. f n\\<^sub>0 = n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<^sub>0. f n\\<^sub>0 = n", "using assms dilating_def ticks_image"], ["proof (prove)\nusing this:\n  dilating f sub r\n  hamlet (Rep_run r n c)\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  \\<lbrakk>dilating_fun ?f ?r; hamlet (Rep_run ?r ?n ?c)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n\\<^sub>0. ?f n\\<^sub>0 = ?n\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<^sub>0. f n\\<^sub>0 = n", "by blast"], ["", "lemma ticks_image_sub':\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>\\<exists>c. hamlet ((Rep_run r) n c)\\<close>\n  shows   \\<open>\\<exists>n\\<^sub>0. f n\\<^sub>0 = n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<^sub>0. f n\\<^sub>0 = n", "using ticks_image_sub[OF assms(1)] assms(2)"], ["proof (prove)\nusing this:\n  hamlet (Rep_run r ?n ?c) \\<Longrightarrow>\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = ?n\n  \\<exists>c. hamlet (Rep_run r n c)\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<^sub>0. f n\\<^sub>0 = n", "by blast"], ["", "text \\<open> \n  The image of the ticks in an interval by a dilating function is the interval \n  bounded by the image of the bounds of the original interval.\n  This is proven for all 4 kinds of intervals:  \\<^verbatim>\\<open>]m, n[\\<close>, \\<^verbatim>\\<open>[m, n[\\<close>, \\<^verbatim>\\<open>]m, n]\\<close>\n  and \\<^verbatim>\\<open>[m, n]\\<close>.\n\\<close>"], ["", "lemma dilating_fun_image_strict:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>{k. f m < k \\<and> k < f n \\<and> hamlet ((Rep_run r) k c)}\n            = image f {k. m < k \\<and> k < n \\<and> hamlet ((Rep_run r) (f k) c)}\\<close>\n  (is \\<open>?IMG = image f ?SET\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)} =\n    f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "assume h:\\<open>k \\<in> ?IMG\\<close>"], ["proof (state)\nthis:\n  k \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "from h"], ["proof (chain)\npicking this:\n  k \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "obtain k\\<^sub>0 where k0prop:\\<open>f k\\<^sub>0 = k \\<and> hamlet ((Rep_run r) (f k\\<^sub>0) c)\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<and>\n        hamlet (Rep_run r (f k\\<^sub>0) c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ticks_image[OF assms]"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n  hamlet (Rep_run r ?n ?c) \\<Longrightarrow>\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = ?n\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<and>\n        hamlet (Rep_run r (f k\\<^sub>0) c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "with h"], ["proof (chain)\npicking this:\n  k \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)", "have \\<open>k \\<in> image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n\ngoal (1 subgoal):\n 1. k \\<in> f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}", "using assms dilating_fun_def strict_mono_less"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n  dilating_fun f r\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n\ngoal (1 subgoal):\n 1. k \\<in> f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}", "by blast"], ["proof (state)\nthis:\n  k \\<in> f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "}"], ["proof (state)\nthis:\n  ?k2\n  \\<in> {k. f m < k \\<and>\n            k < f n \\<and> hamlet (Rep_run r k c)} \\<Longrightarrow>\n  ?k2 \\<in> f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "thus \\<open>?IMG \\<subseteq> image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  ?k2\n  \\<in> {k. f m < k \\<and>\n            k < f n \\<and> hamlet (Rep_run r k c)} \\<Longrightarrow>\n  ?k2 \\<in> f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}", ".."], ["proof (state)\nthis:\n  {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n  \\<subseteq> f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "assume h:\\<open>k \\<in> image f ?SET\\<close>"], ["proof (state)\nthis:\n  k \\<in> f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "from h"], ["proof (chain)\npicking this:\n  k \\<in> f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}", "obtain k\\<^sub>0 where k0prop:\\<open>k = f k\\<^sub>0 \\<and> k\\<^sub>0 \\<in> ?SET\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        k = f k\\<^sub>0 \\<and>\n        k\\<^sub>0\n        \\<in> {k. m < k \\<and>\n                  k < n \\<and> hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0 \\<in> {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "hence \\<open>k \\<in> ?IMG\\<close>"], ["proof (prove)\nusing this:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0 \\<in> {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. k \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "using assms"], ["proof (prove)\nusing this:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0 \\<in> {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n  dilating_fun f r\n\ngoal (1 subgoal):\n 1. k \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "by (simp add: dilating_fun_def strict_mono_less)"], ["proof (state)\nthis:\n  k \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "}"], ["proof (state)\nthis:\n  ?k2\n  \\<in> f `\n        {k. m < k \\<and>\n            k < n \\<and> hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n  ?k2 \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "thus \\<open>image f ?SET \\<subseteq> ?IMG\\<close>"], ["proof (prove)\nusing this:\n  ?k2\n  \\<in> f `\n        {k. m < k \\<and>\n            k < n \\<and> hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n  ?k2 \\<in> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", ".."], ["proof (state)\nthis:\n  f ` {k. m < k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n  \\<subseteq> {k. f m < k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dilating_fun_image_left:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>{k. f m \\<le> k \\<and> k < f n \\<and> hamlet ((Rep_run r) k c)}\n          = image f {k. m \\<le> k \\<and> k < n \\<and> hamlet ((Rep_run r) (f k) c)}\\<close>\n  (is \\<open>?IMG = image f ?SET\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)} =\n    f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "assume h:\\<open>k \\<in> ?IMG\\<close>"], ["proof (state)\nthis:\n  k \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "from h"], ["proof (chain)\npicking this:\n  k \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "obtain k\\<^sub>0 where k0prop:\\<open>f k\\<^sub>0 = k \\<and> hamlet ((Rep_run r) (f k\\<^sub>0) c)\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<and>\n        hamlet (Rep_run r (f k\\<^sub>0) c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ticks_image[OF assms]"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n  hamlet (Rep_run r ?n ?c) \\<Longrightarrow>\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = ?n\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<and>\n        hamlet (Rep_run r (f k\\<^sub>0) c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "with h"], ["proof (chain)\npicking this:\n  k \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)", "have \\<open>k \\<in> image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n\ngoal (1 subgoal):\n 1. k \\<in> f `\n            {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}", "using assms dilating_fun_def strict_mono_less strict_mono_less_eq"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n  dilating_fun f r\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n  strict_mono ?f \\<Longrightarrow> (?f ?x \\<le> ?f ?y) = (?x \\<le> ?y)\n\ngoal (1 subgoal):\n 1. k \\<in> f `\n            {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}", "by fastforce"], ["proof (state)\nthis:\n  k \\<in> f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "}"], ["proof (state)\nthis:\n  ?k2\n  \\<in> {k. f m \\<le> k \\<and>\n            k < f n \\<and> hamlet (Rep_run r k c)} \\<Longrightarrow>\n  ?k2\n  \\<in> f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k < n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "thus \\<open>?IMG \\<subseteq> image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  ?k2\n  \\<in> {k. f m \\<le> k \\<and>\n            k < f n \\<and> hamlet (Rep_run r k c)} \\<Longrightarrow>\n  ?k2\n  \\<in> f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k < n \\<and> hamlet (Rep_run r (f k) c)}", ".."], ["proof (state)\nthis:\n  {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n  \\<subseteq> f `\n              {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "assume h:\\<open>k \\<in> image f ?SET\\<close>"], ["proof (state)\nthis:\n  k \\<in> f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "from h"], ["proof (chain)\npicking this:\n  k \\<in> f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}", "obtain k\\<^sub>0 where k0prop:\\<open>k = f k\\<^sub>0 \\<and> k\\<^sub>0 \\<in> ?SET\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        k = f k\\<^sub>0 \\<and>\n        k\\<^sub>0\n        \\<in> {k. m \\<le> k \\<and>\n                  k < n \\<and> hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0\n  \\<in> {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "hence \\<open>k \\<in> ?IMG\\<close>"], ["proof (prove)\nusing this:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0\n  \\<in> {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. k \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "using assms dilating_fun_def strict_mono_less strict_mono_less_eq"], ["proof (prove)\nusing this:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0\n  \\<in> {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n  dilating_fun f r\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n  strict_mono ?f \\<Longrightarrow> (?f ?x \\<le> ?f ?y) = (?x \\<le> ?y)\n\ngoal (1 subgoal):\n 1. k \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}", "by fastforce"], ["proof (state)\nthis:\n  k \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "}"], ["proof (state)\nthis:\n  ?k2\n  \\<in> f `\n        {k. m \\<le> k \\<and>\n            k < n \\<and> hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n  ?k2 \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", "thus \\<open>image f ?SET \\<subseteq> ?IMG\\<close>"], ["proof (prove)\nusing this:\n  ?k2\n  \\<in> f `\n        {k. m \\<le> k \\<and>\n            k < n \\<and> hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n  ?k2 \\<in> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k < f n \\<and> hamlet (Rep_run r k c)}", ".."], ["proof (state)\nthis:\n  f ` {k. m \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n  \\<subseteq> {k. f m \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dilating_fun_image_right:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>{k. f m < k \\<and> k \\<le> f n \\<and> hamlet ((Rep_run r) k c)}\n          = image f {k. m < k \\<and> k \\<le> n \\<and> hamlet ((Rep_run r) (f k) c)}\\<close>\n  (is \\<open>?IMG = image f ?SET\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)} =\n    f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "assume h:\\<open>k \\<in> ?IMG\\<close>"], ["proof (state)\nthis:\n  k \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "from h"], ["proof (chain)\npicking this:\n  k \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "obtain k\\<^sub>0 where k0prop:\\<open>f k\\<^sub>0 = k \\<and> hamlet ((Rep_run r) (f k\\<^sub>0) c)\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<and>\n        hamlet (Rep_run r (f k\\<^sub>0) c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ticks_image[OF assms]"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  hamlet (Rep_run r ?n ?c) \\<Longrightarrow>\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = ?n\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<and>\n        hamlet (Rep_run r (f k\\<^sub>0) c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "with h"], ["proof (chain)\npicking this:\n  k \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)", "have \\<open>k \\<in> image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n\ngoal (1 subgoal):\n 1. k \\<in> f `\n            {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}", "using assms dilating_fun_def strict_mono_less strict_mono_less_eq"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n  dilating_fun f r\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n  strict_mono ?f \\<Longrightarrow> (?f ?x \\<le> ?f ?y) = (?x \\<le> ?y)\n\ngoal (1 subgoal):\n 1. k \\<in> f `\n            {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}", "by fastforce"], ["proof (state)\nthis:\n  k \\<in> f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "}"], ["proof (state)\nthis:\n  ?k2\n  \\<in> {k. f m < k \\<and>\n            k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<Longrightarrow>\n  ?k2\n  \\<in> f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (2 subgoals):\n 1. {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "thus \\<open>?IMG \\<subseteq> image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  ?k2\n  \\<in> {k. f m < k \\<and>\n            k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<Longrightarrow>\n  ?k2\n  \\<in> f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m < k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}", ".."], ["proof (state)\nthis:\n  {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  \\<subseteq> f `\n              {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "assume h:\\<open>k \\<in> image f ?SET\\<close>"], ["proof (state)\nthis:\n  k \\<in> f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "from h"], ["proof (chain)\npicking this:\n  k \\<in> f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}", "obtain k\\<^sub>0 where k0prop:\\<open>k = f k\\<^sub>0 \\<and> k\\<^sub>0 \\<in> ?SET\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        k = f k\\<^sub>0 \\<and>\n        k\\<^sub>0\n        \\<in> {k. m < k \\<and>\n                  k \\<le> n \\<and>\n                  hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0\n  \\<in> {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "hence \\<open>k \\<in> ?IMG\\<close>"], ["proof (prove)\nusing this:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0\n  \\<in> {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. k \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "using assms dilating_fun_def strict_mono_less strict_mono_less_eq"], ["proof (prove)\nusing this:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0\n  \\<in> {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n  dilating_fun f r\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n  strict_mono ?f \\<Longrightarrow> (?f ?x \\<le> ?f ?y) = (?x \\<le> ?y)\n\ngoal (1 subgoal):\n 1. k \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "by fastforce"], ["proof (state)\nthis:\n  k \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "}"], ["proof (state)\nthis:\n  ?k2\n  \\<in> f `\n        {k. m < k \\<and>\n            k \\<le> n \\<and> hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n  ?k2 \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "thus \\<open>image f ?SET \\<subseteq> ?IMG\\<close>"], ["proof (prove)\nusing this:\n  ?k2\n  \\<in> f `\n        {k. m < k \\<and>\n            k \\<le> n \\<and> hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n  ?k2 \\<in> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m < k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", ".."], ["proof (state)\nthis:\n  f ` {k. m < k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n  \\<subseteq> {k. f m < k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dilating_fun_image:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>{k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet ((Rep_run r) k c)}\n          = image f {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet ((Rep_run r) (f k) c)}\\<close>\n  (is \\<open>?IMG = image f ?SET\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)} =\n    f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "assume h:\\<open>k \\<in> ?IMG\\<close>"], ["proof (state)\nthis:\n  k \\<in> {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "from h"], ["proof (chain)\npicking this:\n  k \\<in> {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "obtain k\\<^sub>0 where k0prop:\\<open>f k\\<^sub>0 = k \\<and> hamlet ((Rep_run r) (f k\\<^sub>0) c)\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<and>\n        hamlet (Rep_run r (f k\\<^sub>0) c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ticks_image[OF assms]"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  hamlet (Rep_run r ?n ?c) \\<Longrightarrow>\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = ?n\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<and>\n        hamlet (Rep_run r (f k\\<^sub>0) c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "with h"], ["proof (chain)\npicking this:\n  k \\<in> {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)", "have \\<open>k \\<in> image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n\ngoal (1 subgoal):\n 1. k \\<in> f `\n            {k. m \\<le> k \\<and>\n                k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}", "using assms dilating_fun_def strict_mono_less_eq"], ["proof (prove)\nusing this:\n  k \\<in> {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run r (f k\\<^sub>0) c)\n  dilating_fun f r\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n  strict_mono ?f \\<Longrightarrow> (?f ?x \\<le> ?f ?y) = (?x \\<le> ?y)\n\ngoal (1 subgoal):\n 1. k \\<in> f `\n            {k. m \\<le> k \\<and>\n                k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}", "by blast"], ["proof (state)\nthis:\n  k \\<in> f `\n          {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "}"], ["proof (state)\nthis:\n  ?k2\n  \\<in> {k. f m \\<le> k \\<and>\n            k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<Longrightarrow>\n  ?k2\n  \\<in> f `\n        {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (2 subgoals):\n 1. {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n 2. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "thus \\<open>?IMG \\<subseteq> image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  ?k2\n  \\<in> {k. f m \\<le> k \\<and>\n            k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<Longrightarrow>\n  ?k2\n  \\<in> f `\n        {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n    \\<subseteq> f `\n                {k. m \\<le> k \\<and>\n                    k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}", ".."], ["proof (state)\nthis:\n  {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  \\<subseteq> f `\n              {k. m \\<le> k \\<and>\n                  k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "assume h:\\<open>k \\<in> image f ?SET\\<close>"], ["proof (state)\nthis:\n  k \\<in> f `\n          {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "from h"], ["proof (chain)\npicking this:\n  k \\<in> f `\n          {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}", "obtain k\\<^sub>0 where k0prop:\\<open>k = f k\\<^sub>0 \\<and> k\\<^sub>0 \\<in> ?SET\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> f `\n          {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        k = f k\\<^sub>0 \\<and>\n        k\\<^sub>0\n        \\<in> {k. m \\<le> k \\<and>\n                  k \\<le> n \\<and>\n                  hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0\n  \\<in> {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "hence \\<open>k \\<in> ?IMG\\<close>"], ["proof (prove)\nusing this:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0\n  \\<in> {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. k \\<in> {k. f m \\<le> k \\<and>\n                k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "using assms"], ["proof (prove)\nusing this:\n  k = f k\\<^sub>0 \\<and>\n  k\\<^sub>0\n  \\<in> {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n  dilating_fun f r\n\ngoal (1 subgoal):\n 1. k \\<in> {k. f m \\<le> k \\<and>\n                k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "by (simp add: dilating_fun_def strict_mono_less_eq)"], ["proof (state)\nthis:\n  k \\<in> {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "}"], ["proof (state)\nthis:\n  ?k2\n  \\<in> f `\n        {k. m \\<le> k \\<and>\n            k \\<le> n \\<and> hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n  ?k2\n  \\<in> {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "thus \\<open>image f ?SET \\<subseteq> ?IMG\\<close>"], ["proof (prove)\nusing this:\n  ?k2\n  \\<in> f `\n        {k. m \\<le> k \\<and>\n            k \\<le> n \\<and> hamlet (Rep_run r (f k) c)} \\<Longrightarrow>\n  ?k2\n  \\<in> {k. f m \\<le> k \\<and> k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n    \\<subseteq> {k. f m \\<le> k \\<and>\n                    k \\<le> f n \\<and> hamlet (Rep_run r k c)}", ".."], ["proof (state)\nthis:\n  f ` {k. m \\<le> k \\<and> k \\<le> n \\<and> hamlet (Rep_run r (f k) c)}\n  \\<subseteq> {k. f m \\<le> k \\<and>\n                  k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  On any clock, the number of ticks in an interval is preserved\n  by a dilating function.\n\\<close>"], ["", "lemma ticks_as_often_strict:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>card {p. n < p \\<and> p < m \\<and> hamlet ((Rep_run r) (f p) c)}\n          = card {p. f n < p \\<and> p < f m \\<and> hamlet ((Rep_run r) p c)}\\<close>\n    (is \\<open>card ?SET = card ?IMG\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "from dilating_fun_injects[OF assms]"], ["proof (chain)\npicking this:\n  inj_on f ?A", "have \\<open>inj_on f ?SET\\<close>"], ["proof (prove)\nusing this:\n  inj_on f ?A\n\ngoal (1 subgoal):\n 1. inj_on f {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "."], ["proof (state)\nthis:\n  inj_on f {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "moreover"], ["proof (state)\nthis:\n  inj_on f {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "have \\<open>finite ?SET\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "by simp"], ["proof (state)\nthis:\n  finite {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "from inj_on_iff_eq_card[OF this] calculation"], ["proof (chain)\npicking this:\n  inj_on ?f {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n  (card (?f ` {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n   card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)})\n  inj_on f {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "have \\<open>card (image f ?SET) = card ?SET\\<close>"], ["proof (prove)\nusing this:\n  inj_on ?f {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n  (card (?f ` {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n   card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)})\n  inj_on f {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card (f ` {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n    card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "by blast"], ["proof (state)\nthis:\n  card (f ` {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "moreover"], ["proof (state)\nthis:\n  card (f ` {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "from dilating_fun_image_strict[OF assms]"], ["proof (chain)\npicking this:\n  {k. f ?m < k \\<and> k < f ?n \\<and> hamlet (Rep_run r k ?c)} =\n  f ` {k. ?m < k \\<and> k < ?n \\<and> hamlet (Rep_run r (f k) ?c)}", "have \\<open>?IMG = image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  {k. f ?m < k \\<and> k < f ?n \\<and> hamlet (Rep_run r k ?c)} =\n  f ` {k. ?m < k \\<and> k < ?n \\<and> hamlet (Rep_run r (f k) ?c)}\n\ngoal (1 subgoal):\n 1. {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)} =\n    f ` {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "."], ["proof (state)\nthis:\n  {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "ultimately"], ["proof (chain)\npicking this:\n  inj_on f {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n  card (f ` {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n  {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "show ?thesis"], ["proof (prove)\nusing this:\n  inj_on f {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n  card (f ` {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n  {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "by auto"], ["proof (state)\nthis:\n  card {p. n < p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n  card {p. f n < p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ticks_as_often_left:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>card {p. n \\<le> p \\<and> p < m \\<and> hamlet ((Rep_run r) (f p) c)}\n          = card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet ((Rep_run r) p c)}\\<close>\n    (is \\<open>card ?SET = card ?IMG\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "from dilating_fun_injects[OF assms]"], ["proof (chain)\npicking this:\n  inj_on f ?A", "have \\<open>inj_on f ?SET\\<close>"], ["proof (prove)\nusing this:\n  inj_on f ?A\n\ngoal (1 subgoal):\n 1. inj_on f {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "."], ["proof (state)\nthis:\n  inj_on f {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "moreover"], ["proof (state)\nthis:\n  inj_on f {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "have \\<open>finite ?SET\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "by simp"], ["proof (state)\nthis:\n  finite {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "from inj_on_iff_eq_card[OF this] calculation"], ["proof (chain)\npicking this:\n  inj_on ?f {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n  (card\n    (?f ` {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n   card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)})\n  inj_on f {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "have \\<open>card (image f ?SET) = card ?SET\\<close>"], ["proof (prove)\nusing this:\n  inj_on ?f {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n  (card\n    (?f ` {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n   card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)})\n  inj_on f {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card\n     (f ` {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n    card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "by blast"], ["proof (state)\nthis:\n  card (f ` {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "moreover"], ["proof (state)\nthis:\n  card (f ` {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "from dilating_fun_image_left[OF assms]"], ["proof (chain)\npicking this:\n  {k. f ?m \\<le> k \\<and> k < f ?n \\<and> hamlet (Rep_run r k ?c)} =\n  f ` {k. ?m \\<le> k \\<and> k < ?n \\<and> hamlet (Rep_run r (f k) ?c)}", "have \\<open>?IMG = image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  {k. f ?m \\<le> k \\<and> k < f ?n \\<and> hamlet (Rep_run r k ?c)} =\n  f ` {k. ?m \\<le> k \\<and> k < ?n \\<and> hamlet (Rep_run r (f k) ?c)}\n\ngoal (1 subgoal):\n 1. {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)} =\n    f ` {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "."], ["proof (state)\nthis:\n  {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "ultimately"], ["proof (chain)\npicking this:\n  inj_on f {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n  card (f ` {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n  {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}", "show ?thesis"], ["proof (prove)\nusing this:\n  inj_on f {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n  card (f ` {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n  {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}", "by auto"], ["proof (state)\nthis:\n  card {p. n \\<le> p \\<and> p < m \\<and> hamlet (Rep_run r (f p) c)} =\n  card {p. f n \\<le> p \\<and> p < f m \\<and> hamlet (Rep_run r p c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ticks_as_often_right:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>card {p. n < p \\<and> p \\<le> m \\<and> hamlet ((Rep_run r) (f p) c)}\n          = card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet ((Rep_run r) p c)}\\<close>\n    (is \\<open>card ?SET = card ?IMG\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "from dilating_fun_injects[OF assms]"], ["proof (chain)\npicking this:\n  inj_on f ?A", "have \\<open>inj_on f ?SET\\<close>"], ["proof (prove)\nusing this:\n  inj_on f ?A\n\ngoal (1 subgoal):\n 1. inj_on f {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "."], ["proof (state)\nthis:\n  inj_on f {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "moreover"], ["proof (state)\nthis:\n  inj_on f {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "have \\<open>finite ?SET\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "by simp"], ["proof (state)\nthis:\n  finite {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "from inj_on_iff_eq_card[OF this] calculation"], ["proof (chain)\npicking this:\n  inj_on ?f {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n  (card\n    (?f ` {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n   card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)})\n  inj_on f {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "have \\<open>card (image f ?SET) = card ?SET\\<close>"], ["proof (prove)\nusing this:\n  inj_on ?f {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n  (card\n    (?f ` {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n   card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)})\n  inj_on f {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card\n     (f ` {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n    card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "by blast"], ["proof (state)\nthis:\n  card (f ` {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "moreover"], ["proof (state)\nthis:\n  card (f ` {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "from dilating_fun_image_right[OF assms]"], ["proof (chain)\npicking this:\n  {k. f ?m < k \\<and> k \\<le> f ?n \\<and> hamlet (Rep_run r k ?c)} =\n  f ` {k. ?m < k \\<and> k \\<le> ?n \\<and> hamlet (Rep_run r (f k) ?c)}", "have \\<open>?IMG = image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  {k. f ?m < k \\<and> k \\<le> f ?n \\<and> hamlet (Rep_run r k ?c)} =\n  f ` {k. ?m < k \\<and> k \\<le> ?n \\<and> hamlet (Rep_run r (f k) ?c)}\n\ngoal (1 subgoal):\n 1. {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)} =\n    f ` {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "."], ["proof (state)\nthis:\n  {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "ultimately"], ["proof (chain)\npicking this:\n  inj_on f {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n  card (f ` {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n  {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "show ?thesis"], ["proof (prove)\nusing this:\n  inj_on f {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n  card (f ` {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n  {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "by auto"], ["proof (state)\nthis:\n  card {p. n < p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n  card {p. f n < p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ticks_as_often:\n  assumes \\<open>dilating_fun f r\\<close>\n  shows   \\<open>card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet ((Rep_run r) (f p) c)}\n          = card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet ((Rep_run r) p c)}\\<close>\n    (is \\<open>card ?SET = card ?IMG\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "from dilating_fun_injects[OF assms]"], ["proof (chain)\npicking this:\n  inj_on f ?A", "have \\<open>inj_on f ?SET\\<close>"], ["proof (prove)\nusing this:\n  inj_on f ?A\n\ngoal (1 subgoal):\n 1. inj_on f\n     {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "."], ["proof (state)\nthis:\n  inj_on f {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "moreover"], ["proof (state)\nthis:\n  inj_on f {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "have \\<open>finite ?SET\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "by simp"], ["proof (state)\nthis:\n  finite {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "from inj_on_iff_eq_card[OF this] calculation"], ["proof (chain)\npicking this:\n  inj_on ?f\n   {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n  (card\n    (?f `\n     {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n   card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)})\n  inj_on f {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "have \\<open>card (image f ?SET) = card ?SET\\<close>"], ["proof (prove)\nusing this:\n  inj_on ?f\n   {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n  (card\n    (?f `\n     {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n   card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)})\n  inj_on f {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card\n     (f `\n      {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n    card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "by blast"], ["proof (state)\nthis:\n  card\n   (f ` {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "moreover"], ["proof (state)\nthis:\n  card\n   (f ` {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "from dilating_fun_image[OF assms]"], ["proof (chain)\npicking this:\n  {k. f ?m \\<le> k \\<and> k \\<le> f ?n \\<and> hamlet (Rep_run r k ?c)} =\n  f ` {k. ?m \\<le> k \\<and> k \\<le> ?n \\<and> hamlet (Rep_run r (f k) ?c)}", "have \\<open>?IMG = image f ?SET\\<close>"], ["proof (prove)\nusing this:\n  {k. f ?m \\<le> k \\<and> k \\<le> f ?n \\<and> hamlet (Rep_run r k ?c)} =\n  f ` {k. ?m \\<le> k \\<and> k \\<le> ?n \\<and> hamlet (Rep_run r (f k) ?c)}\n\ngoal (1 subgoal):\n 1. {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)} =\n    f ` {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "."], ["proof (state)\nthis:\n  {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "ultimately"], ["proof (chain)\npicking this:\n  inj_on f {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n  card\n   (f ` {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n  {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}", "show ?thesis"], ["proof (prove)\nusing this:\n  inj_on f {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n  card\n   (f ` {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}) =\n  card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n  {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)} =\n  f ` {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)}\n\ngoal (1 subgoal):\n 1. card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n    card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}", "by auto"], ["proof (state)\nthis:\n  card {p. n \\<le> p \\<and> p \\<le> m \\<and> hamlet (Rep_run r (f p) c)} =\n  card {p. f n \\<le> p \\<and> p \\<le> f m \\<and> hamlet (Rep_run r p c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The date of an event is preserved by dilation.\\<close>"], ["", "lemma ticks_tag_image:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>\\<exists>c. hamlet ((Rep_run r) k c)\\<close>\n  and     \\<open>time ((Rep_run r) k c) = \\<tau>\\<close>\n  shows   \\<open>\\<exists>k\\<^sub>0. f k\\<^sub>0 = k \\<and> time ((Rep_run sub) k\\<^sub>0 c) = \\<tau>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> time (Rep_run sub k\\<^sub>0 c) = \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> time (Rep_run sub k\\<^sub>0 c) = \\<tau>", "from ticks_image_sub'[OF assms(1,2)]"], ["proof (chain)\npicking this:\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = k", "have \\<open>\\<exists>k\\<^sub>0. f k\\<^sub>0 = k\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0. f k\\<^sub>0 = k", "."], ["proof (state)\nthis:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> time (Rep_run sub k\\<^sub>0 c) = \\<tau>", "from this"], ["proof (chain)\npicking this:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k", "obtain k\\<^sub>0 where \\<open>f k\\<^sub>0 = k\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> time (Rep_run sub k\\<^sub>0 c) = \\<tau>", "moreover"], ["proof (state)\nthis:\n  f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> time (Rep_run sub k\\<^sub>0 c) = \\<tau>", "with assms(1,3)"], ["proof (chain)\npicking this:\n  dilating f sub r\n  time (Rep_run r k c) = \\<tau>\n  f k\\<^sub>0 = k", "have \\<open>time ((Rep_run sub) k\\<^sub>0 c) = \\<tau>\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n  time (Rep_run r k c) = \\<tau>\n  f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. time (Rep_run sub k\\<^sub>0 c) = \\<tau>", "by (simp add: dilating_def)"], ["proof (state)\nthis:\n  time (Rep_run sub k\\<^sub>0 c) = \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> time (Rep_run sub k\\<^sub>0 c) = \\<tau>", "ultimately"], ["proof (chain)\npicking this:\n  f k\\<^sub>0 = k\n  time (Rep_run sub k\\<^sub>0 c) = \\<tau>", "show ?thesis"], ["proof (prove)\nusing this:\n  f k\\<^sub>0 = k\n  time (Rep_run sub k\\<^sub>0 c) = \\<tau>\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> time (Rep_run sub k\\<^sub>0 c) = \\<tau>", "by blast"], ["proof (state)\nthis:\n  \\<exists>k\\<^sub>0.\n     f k\\<^sub>0 = k \\<and> time (Rep_run sub k\\<^sub>0 c) = \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>TESL operators are invariant by dilation.\\<close>"], ["", "lemma ticks_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>hamlet ((Rep_run sub) n a) = hamlet ((Rep_run r) (f n) a)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. hamlet (Rep_run sub n a) = hamlet (Rep_run r (f n) a)", "using assms"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run sub n a) = hamlet (Rep_run r (f n) a)", "by (simp add: dilating_def)"], ["", "lemma no_tick_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>(\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n) \\<longrightarrow> \\<not>hamlet ((Rep_run r) n a)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n) \\<longrightarrow>\n    \\<not> hamlet (Rep_run r n a)", "using assms dilating_def dilating_fun_def"], ["proof (prove)\nusing this:\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n\ngoal (1 subgoal):\n 1. (\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n) \\<longrightarrow>\n    \\<not> hamlet (Rep_run r n a)", "by blast"], ["", "text \\<open>Lifting a total function to a partial function on an option domain.\\<close>"], ["", "definition opt_lift::\\<open>('a \\<Rightarrow> 'a) \\<Rightarrow> ('a option \\<Rightarrow> 'a option)\\<close>\nwhere\n  \\<open>opt_lift f \\<equiv> \\<lambda>x. case x of None \\<Rightarrow> None | Some y \\<Rightarrow> Some (f y)\\<close>"], ["", "text \\<open>\n  The set of instants when a clock ticks in a dilated run is the image by the \n  dilation function of the set of instants when it ticks in the subrun.\n\\<close>"], ["", "lemma tick_set_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{k. hamlet ((Rep_run r) k c)} = image f {k. hamlet ((Rep_run sub) k c)}\\<close>\n    (is \\<open>?R = image f ?S\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {k. hamlet (Rep_run r k c)} = f ` {k. hamlet (Rep_run sub k c)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. hamlet (Rep_run r k c)}\n    \\<subseteq> f ` {k. hamlet (Rep_run sub k c)}\n 2. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. hamlet (Rep_run r k c)}\n    \\<subseteq> f ` {k. hamlet (Rep_run sub k c)}\n 2. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. {k. hamlet (Rep_run r k c)}\n    \\<subseteq> f ` {k. hamlet (Rep_run sub k c)}\n 2. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "assume h:\\<open>k \\<in> ?R\\<close>"], ["proof (state)\nthis:\n  k \\<in> {k. hamlet (Rep_run r k c)}\n\ngoal (2 subgoals):\n 1. {k. hamlet (Rep_run r k c)}\n    \\<subseteq> f ` {k. hamlet (Rep_run sub k c)}\n 2. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "with no_tick_sub[OF assms]"], ["proof (chain)\npicking this:\n  (\\<nexists>n\\<^sub>0. f n\\<^sub>0 = ?n) \\<longrightarrow>\n  \\<not> hamlet (Rep_run r ?n ?a)\n  k \\<in> {k. hamlet (Rep_run r k c)}", "have \\<open>\\<exists>k\\<^sub>0. f k\\<^sub>0 = k\\<close>"], ["proof (prove)\nusing this:\n  (\\<nexists>n\\<^sub>0. f n\\<^sub>0 = ?n) \\<longrightarrow>\n  \\<not> hamlet (Rep_run r ?n ?a)\n  k \\<in> {k. hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0. f k\\<^sub>0 = k", "by blast"], ["proof (state)\nthis:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k\n\ngoal (2 subgoals):\n 1. {k. hamlet (Rep_run r k c)}\n    \\<subseteq> f ` {k. hamlet (Rep_run sub k c)}\n 2. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "from this"], ["proof (chain)\npicking this:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k", "obtain k\\<^sub>0 where k0prop:\\<open>f k\\<^sub>0 = k\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f k\\<^sub>0 = k\n\ngoal (2 subgoals):\n 1. {k. hamlet (Rep_run r k c)}\n    \\<subseteq> f ` {k. hamlet (Rep_run sub k c)}\n 2. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "with ticks_sub[OF assms] h"], ["proof (chain)\npicking this:\n  hamlet (Rep_run sub ?n ?a) = hamlet (Rep_run r (f ?n) ?a)\n  k \\<in> {k. hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k", "have \\<open>hamlet ((Rep_run sub) k\\<^sub>0 c)\\<close>"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub ?n ?a) = hamlet (Rep_run r (f ?n) ?a)\n  k \\<in> {k. hamlet (Rep_run r k c)}\n  f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run sub k\\<^sub>0 c)", "by blast"], ["proof (state)\nthis:\n  hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal (2 subgoals):\n 1. {k. hamlet (Rep_run r k c)}\n    \\<subseteq> f ` {k. hamlet (Rep_run sub k c)}\n 2. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "with k0prop"], ["proof (chain)\npicking this:\n  f k\\<^sub>0 = k\n  hamlet (Rep_run sub k\\<^sub>0 c)", "have \\<open>k \\<in> image f ?S\\<close>"], ["proof (prove)\nusing this:\n  f k\\<^sub>0 = k\n  hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. k \\<in> f ` {k. hamlet (Rep_run sub k c)}", "by blast"], ["proof (state)\nthis:\n  k \\<in> f ` {k. hamlet (Rep_run sub k c)}\n\ngoal (2 subgoals):\n 1. {k. hamlet (Rep_run r k c)}\n    \\<subseteq> f ` {k. hamlet (Rep_run sub k c)}\n 2. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "}"], ["proof (state)\nthis:\n  ?k2 \\<in> {k. hamlet (Rep_run r k c)} \\<Longrightarrow>\n  ?k2 \\<in> f ` {k. hamlet (Rep_run sub k c)}\n\ngoal (2 subgoals):\n 1. {k. hamlet (Rep_run r k c)}\n    \\<subseteq> f ` {k. hamlet (Rep_run sub k c)}\n 2. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "thus \\<open>?R \\<subseteq> image f ?S\\<close>"], ["proof (prove)\nusing this:\n  ?k2 \\<in> {k. hamlet (Rep_run r k c)} \\<Longrightarrow>\n  ?k2 \\<in> f ` {k. hamlet (Rep_run sub k c)}\n\ngoal (1 subgoal):\n 1. {k. hamlet (Rep_run r k c)}\n    \\<subseteq> f ` {k. hamlet (Rep_run sub k c)}", "by blast"], ["proof (state)\nthis:\n  {k. hamlet (Rep_run r k c)} \\<subseteq> f ` {k. hamlet (Rep_run sub k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "assume h:\\<open>k \\<in> image f ?S\\<close>"], ["proof (state)\nthis:\n  k \\<in> f ` {k. hamlet (Rep_run sub k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "from this"], ["proof (chain)\npicking this:\n  k \\<in> f ` {k. hamlet (Rep_run sub k c)}", "obtain k\\<^sub>0 where \\<open>f k\\<^sub>0 = k \\<and> hamlet ((Rep_run sub) k\\<^sub>0 c)\\<close>"], ["proof (prove)\nusing this:\n  k \\<in> f ` {k. hamlet (Rep_run sub k c)}\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<and>\n        hamlet (Rep_run sub k\\<^sub>0 c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "with assms"], ["proof (chain)\npicking this:\n  dilating f sub r\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "have \\<open>k \\<in> ?R\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. k \\<in> {k. hamlet (Rep_run r k c)}", "using ticks_sub"], ["proof (prove)\nusing this:\n  dilating f sub r\n  f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)\n  dilating ?f ?sub ?r \\<Longrightarrow>\n  hamlet (Rep_run ?sub ?n ?a) = hamlet (Rep_run ?r (?f ?n) ?a)\n\ngoal (1 subgoal):\n 1. k \\<in> {k. hamlet (Rep_run r k c)}", "by blast"], ["proof (state)\nthis:\n  k \\<in> {k. hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "}"], ["proof (state)\nthis:\n  ?k2 \\<in> f ` {k. hamlet (Rep_run sub k c)} \\<Longrightarrow>\n  ?k2 \\<in> {k. hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "thus \\<open>image f ?S \\<subseteq> ?R\\<close>"], ["proof (prove)\nusing this:\n  ?k2 \\<in> f ` {k. hamlet (Rep_run sub k c)} \\<Longrightarrow>\n  ?k2 \\<in> {k. hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. f ` {k. hamlet (Rep_run sub k c)}\n    \\<subseteq> {k. hamlet (Rep_run r k c)}", "by blast"], ["proof (state)\nthis:\n  f ` {k. hamlet (Rep_run sub k c)} \\<subseteq> {k. hamlet (Rep_run r k c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Strictly monotonous functions preserve the least element.\n\\<close>"], ["", "lemma Least_strict_mono:\n  assumes \\<open>strict_mono f\\<close>\n  and     \\<open>\\<exists>x \\<in> S. \\<forall>y \\<in> S. x \\<le> y\\<close>\n  shows   \\<open>(LEAST y. y \\<in> f ` S) = f (LEAST x. x \\<in> S)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST y. y \\<in> f ` S) = f (LEAST x. x \\<in> S)", "using Least_mono[OF strict_mono_mono, OF assms]"], ["proof (prove)\nusing this:\n  (LEAST y. y \\<in> f ` S) = f (LEAST x. x \\<in> S)\n\ngoal (1 subgoal):\n 1. (LEAST y. y \\<in> f ` S) = f (LEAST x. x \\<in> S)", "."], ["", "text \\<open>\n  A non empty set of @{typ nat}s has a least element.\n\\<close>"], ["", "lemma Least_nat_ex:\n  \\<open>(n::nat) \\<in> S \\<Longrightarrow> \\<exists>x \\<in> S. (\\<forall>y \\<in> S. x \\<le> y)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> S \\<Longrightarrow>\n    \\<exists>x\\<in>S. \\<forall>y\\<in>S. x \\<le> y", "by (induction n rule: nat_less_induct, insert not_le_imp_less, blast)"], ["", "text \\<open>  \n  The first instant when a clock ticks in a dilated run is the image by the dilation\n  function of the first instant when it ticks in the subrun.\n\\<close>"], ["", "lemma Least_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>\\<exists>k::nat. hamlet ((Rep_run sub) k c)\\<close>\n  shows   \\<open>(LEAST k. k \\<in> {t. hamlet ((Rep_run r) t c)})\n              = f (LEAST k. k \\<in> {t. hamlet ((Rep_run sub) t c)})\\<close>\n          (is \\<open>(LEAST k. k \\<in> ?R) = f (LEAST k. k \\<in> ?S)\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST k. k \\<in> {t. hamlet (Rep_run r t c)}) =\n    f (LEAST k. k \\<in> {t. hamlet (Rep_run sub t c)})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (LEAST k. k \\<in> {t. hamlet (Rep_run r t c)}) =\n    f (LEAST k. k \\<in> {t. hamlet (Rep_run sub t c)})", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<exists>k. hamlet (Rep_run sub k c)", "have \\<open>\\<exists>x. x \\<in> ?S\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k. hamlet (Rep_run sub k c)\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {t. hamlet (Rep_run sub t c)}", "by simp"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> {t. hamlet (Rep_run sub t c)}\n\ngoal (1 subgoal):\n 1. (LEAST k. k \\<in> {t. hamlet (Rep_run r t c)}) =\n    f (LEAST k. k \\<in> {t. hamlet (Rep_run sub t c)})", "hence least:\\<open>\\<exists>x \\<in> ?S. \\<forall>y \\<in> ?S. x \\<le> y\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> {t. hamlet (Rep_run sub t c)}\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>{t. hamlet (Rep_run sub t c)}.\n       \\<forall>y\\<in>{t. hamlet (Rep_run sub t c)}. x \\<le> y", "using Least_nat_ex"], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> {t. hamlet (Rep_run sub t c)}\n  ?n \\<in> ?S \\<Longrightarrow>\n  \\<exists>x\\<in>?S. \\<forall>y\\<in>?S. x \\<le> y\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>{t. hamlet (Rep_run sub t c)}.\n       \\<forall>y\\<in>{t. hamlet (Rep_run sub t c)}. x \\<le> y", ".."], ["proof (state)\nthis:\n  \\<exists>x\\<in>{t. hamlet (Rep_run sub t c)}.\n     \\<forall>y\\<in>{t. hamlet (Rep_run sub t c)}. x \\<le> y\n\ngoal (1 subgoal):\n 1. (LEAST k. k \\<in> {t. hamlet (Rep_run r t c)}) =\n    f (LEAST k. k \\<in> {t. hamlet (Rep_run sub t c)})", "from assms(1)"], ["proof (chain)\npicking this:\n  dilating f sub r", "have \\<open>strict_mono f\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. strict_mono f", "by (simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. (LEAST k. k \\<in> {t. hamlet (Rep_run r t c)}) =\n    f (LEAST k. k \\<in> {t. hamlet (Rep_run sub t c)})", "from Least_strict_mono[OF this least]"], ["proof (chain)\npicking this:\n  (LEAST y. y \\<in> f ` {t. hamlet (Rep_run sub t c)}) =\n  f (LEAST x. x \\<in> {t. hamlet (Rep_run sub t c)})", "have\n    \\<open>(LEAST y. y \\<in> f ` ?S)  = f (LEAST x. x \\<in> ?S)\\<close>"], ["proof (prove)\nusing this:\n  (LEAST y. y \\<in> f ` {t. hamlet (Rep_run sub t c)}) =\n  f (LEAST x. x \\<in> {t. hamlet (Rep_run sub t c)})\n\ngoal (1 subgoal):\n 1. (LEAST y. y \\<in> f ` {t. hamlet (Rep_run sub t c)}) =\n    f (LEAST x. x \\<in> {t. hamlet (Rep_run sub t c)})", "."], ["proof (state)\nthis:\n  (LEAST y. y \\<in> f ` {t. hamlet (Rep_run sub t c)}) =\n  f (LEAST x. x \\<in> {t. hamlet (Rep_run sub t c)})\n\ngoal (1 subgoal):\n 1. (LEAST k. k \\<in> {t. hamlet (Rep_run r t c)}) =\n    f (LEAST k. k \\<in> {t. hamlet (Rep_run sub t c)})", "with tick_set_sub[OF assms(1), of \\<open>c\\<close>]"], ["proof (chain)\npicking this:\n  {k. hamlet (Rep_run r k c)} = f ` {k. hamlet (Rep_run sub k c)}\n  (LEAST y. y \\<in> f ` {t. hamlet (Rep_run sub t c)}) =\n  f (LEAST x. x \\<in> {t. hamlet (Rep_run sub t c)})", "show ?thesis"], ["proof (prove)\nusing this:\n  {k. hamlet (Rep_run r k c)} = f ` {k. hamlet (Rep_run sub k c)}\n  (LEAST y. y \\<in> f ` {t. hamlet (Rep_run sub t c)}) =\n  f (LEAST x. x \\<in> {t. hamlet (Rep_run sub t c)})\n\ngoal (1 subgoal):\n 1. (LEAST k. k \\<in> {t. hamlet (Rep_run r t c)}) =\n    f (LEAST k. k \\<in> {t. hamlet (Rep_run sub t c)})", "by auto"], ["proof (state)\nthis:\n  (LEAST k. k \\<in> {t. hamlet (Rep_run r t c)}) =\n  f (LEAST k. k \\<in> {t. hamlet (Rep_run sub t c)})\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  If a clock ticks in a run, it ticks in the subrun.\n\\<close>"], ["", "lemma ticks_imp_ticks_sub:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>\\<exists>k. hamlet ((Rep_run r) k c)\\<close>\n  shows   \\<open>\\<exists>k\\<^sub>0. hamlet ((Rep_run sub) k\\<^sub>0 c)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0. hamlet (Rep_run sub k\\<^sub>0 c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0. hamlet (Rep_run sub k\\<^sub>0 c)", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<exists>k. hamlet (Rep_run r k c)", "obtain k where \\<open>hamlet ((Rep_run r) k c)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k. hamlet (Rep_run r k c)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        hamlet (Rep_run r k c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  hamlet (Rep_run r k c)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0. hamlet (Rep_run sub k\\<^sub>0 c)", "with ticks_image_sub[OF assms(1)] ticks_sub[OF assms(1)]"], ["proof (chain)\npicking this:\n  hamlet (Rep_run r ?n ?c) \\<Longrightarrow>\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = ?n\n  hamlet (Rep_run sub ?n ?a) = hamlet (Rep_run r (f ?n) ?a)\n  hamlet (Rep_run r k c)", "show ?thesis"], ["proof (prove)\nusing this:\n  hamlet (Rep_run r ?n ?c) \\<Longrightarrow>\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = ?n\n  hamlet (Rep_run sub ?n ?a) = hamlet (Rep_run r (f ?n) ?a)\n  hamlet (Rep_run r k c)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0. hamlet (Rep_run sub k\\<^sub>0 c)", "by blast"], ["proof (state)\nthis:\n  \\<exists>k\\<^sub>0. hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Stronger version: it ticks in the subrun and we know when.\n\\<close>"], ["", "lemma ticks_imp_ticks_subk:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>hamlet ((Rep_run r) k c)\\<close>\n  shows   \\<open>\\<exists>k\\<^sub>0. f k\\<^sub>0 = k \\<and> hamlet ((Rep_run sub) k\\<^sub>0 c)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "from no_tick_sub[OF assms(1)] assms(2)"], ["proof (chain)\npicking this:\n  (\\<nexists>n\\<^sub>0. f n\\<^sub>0 = ?n) \\<longrightarrow>\n  \\<not> hamlet (Rep_run r ?n ?a)\n  hamlet (Rep_run r k c)", "have \\<open>\\<exists>k\\<^sub>0. f k\\<^sub>0 = k\\<close>"], ["proof (prove)\nusing this:\n  (\\<nexists>n\\<^sub>0. f n\\<^sub>0 = ?n) \\<longrightarrow>\n  \\<not> hamlet (Rep_run r ?n ?a)\n  hamlet (Rep_run r k c)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0. f k\\<^sub>0 = k", "by blast"], ["proof (state)\nthis:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k", "obtain k\\<^sub>0 where \\<open>f k\\<^sub>0 = k\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "moreover"], ["proof (state)\nthis:\n  f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "with ticks_sub[OF assms(1)] assms(2)"], ["proof (chain)\npicking this:\n  hamlet (Rep_run sub ?n ?a) = hamlet (Rep_run r (f ?n) ?a)\n  hamlet (Rep_run r k c)\n  f k\\<^sub>0 = k", "have \\<open>hamlet ((Rep_run sub) k\\<^sub>0 c)\\<close>"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub ?n ?a) = hamlet (Rep_run r (f ?n) ?a)\n  hamlet (Rep_run r k c)\n  f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run sub k\\<^sub>0 c)", "by blast"], ["proof (state)\nthis:\n  hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "ultimately"], ["proof (chain)\npicking this:\n  f k\\<^sub>0 = k\n  hamlet (Rep_run sub k\\<^sub>0 c)", "show ?thesis"], ["proof (prove)\nusing this:\n  f k\\<^sub>0 = k\n  hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0.\n       f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "by blast"], ["proof (state)\nthis:\n  \\<exists>k\\<^sub>0.\n     f k\\<^sub>0 = k \\<and> hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  A dilating function preserves the tick count on an interval for any clock.\n\\<close>"], ["", "lemma dilated_ticks_strict:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{i. f m < i \\<and> i < f n \\<and> hamlet ((Rep_run r) i c)}\n          = image f {i. m < i \\<and> i < n \\<and> hamlet ((Rep_run sub) i c)}\\<close>\n    (is \\<open>?RUN = image f ?SUB\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "assume h:\\<open>i \\<in> ?SUB\\<close>"], ["proof (state)\nthis:\n  i \\<in> {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>m < i \\<and> i < n\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. m < i \\<and> i < n", "by simp"], ["proof (state)\nthis:\n  m < i \\<and> i < n\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>f m < f i \\<and> f i < (f n)\\<close>"], ["proof (prove)\nusing this:\n  m < i \\<and> i < n\n\ngoal (1 subgoal):\n 1. f m < f i \\<and> f i < f n", "using assms"], ["proof (prove)\nusing this:\n  m < i \\<and> i < n\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. f m < f i \\<and> f i < f n", "by (simp add: dilating_def dilating_fun_def strict_monoD strict_mono_less_eq)"], ["proof (state)\nthis:\n  f m < f i \\<and> f i < f n\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "moreover"], ["proof (state)\nthis:\n  f m < f i \\<and> f i < f n\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "from h"], ["proof (chain)\npicking this:\n  i \\<in> {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "have \\<open>hamlet ((Rep_run sub) i c)\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run sub i c)", "by simp"], ["proof (state)\nthis:\n  hamlet (Rep_run sub i c)\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>hamlet ((Rep_run r) (f i) c)\\<close>"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub i c)\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r (f i) c)", "using ticks_sub[OF assms]"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub i c)\n  hamlet (Rep_run sub ?n ?a) = hamlet (Rep_run r (f ?n) ?a)\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r (f i) c)", "by blast"], ["proof (state)\nthis:\n  hamlet (Rep_run r (f i) c)\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "ultimately"], ["proof (chain)\npicking this:\n  f m < f i \\<and> f i < f n\n  hamlet (Rep_run r (f i) c)", "have \\<open>f i \\<in> ?RUN\\<close>"], ["proof (prove)\nusing this:\n  f m < f i \\<and> f i < f n\n  hamlet (Rep_run r (f i) c)\n\ngoal (1 subgoal):\n 1. f i \\<in> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "by simp"], ["proof (state)\nthis:\n  f i \\<in> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "}"], ["proof (state)\nthis:\n  ?i2\n  \\<in> {i. m < i \\<and>\n            i < n \\<and> hamlet (Rep_run sub i c)} \\<Longrightarrow>\n  f ?i2 \\<in> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "thus \\<open>image f ?SUB \\<subseteq> ?RUN\\<close>"], ["proof (prove)\nusing this:\n  ?i2\n  \\<in> {i. m < i \\<and>\n            i < n \\<and> hamlet (Rep_run sub i c)} \\<Longrightarrow>\n  f ?i2 \\<in> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "by blast"], ["proof (state)\nthis:\n  f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n  \\<subseteq> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "assume h:\\<open>i \\<in> ?RUN\\<close>"], ["proof (state)\nthis:\n  i \\<in> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "hence \\<open>hamlet ((Rep_run r) i c)\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r i c)", "by simp"], ["proof (state)\nthis:\n  hamlet (Rep_run r i c)\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "from ticks_imp_ticks_subk[OF assms this]"], ["proof (chain)\npicking this:\n  \\<exists>k\\<^sub>0.\n     f k\\<^sub>0 = i \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "obtain i\\<^sub>0 where i0prop:\\<open>f i\\<^sub>0 = i \\<and> hamlet ((Rep_run sub) i\\<^sub>0 c)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k\\<^sub>0.\n     f k\\<^sub>0 = i \\<and> hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. (\\<And>i\\<^sub>0.\n        f i\\<^sub>0 = i \\<and>\n        hamlet (Rep_run sub i\\<^sub>0 c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "with h"], ["proof (chain)\npicking this:\n  i \\<in> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)", "have \\<open>f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n", "by simp"], ["proof (state)\nthis:\n  f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "moreover"], ["proof (state)\nthis:\n  f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "have \\<open>strict_mono f\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono f", "using assms dilating_def dilating_fun_def"], ["proof (prove)\nusing this:\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n\ngoal (1 subgoal):\n 1. strict_mono f", "by blast"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "ultimately"], ["proof (chain)\npicking this:\n  f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\n  strict_mono f", "have \\<open>m < i\\<^sub>0 \\<and> i\\<^sub>0 < n\\<close>"], ["proof (prove)\nusing this:\n  f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\n  strict_mono f\n\ngoal (1 subgoal):\n 1. m < i\\<^sub>0 \\<and> i\\<^sub>0 < n", "using strict_mono_less strict_mono_less_eq"], ["proof (prove)\nusing this:\n  f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\n  strict_mono f\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n  strict_mono ?f \\<Longrightarrow> (?f ?x \\<le> ?f ?y) = (?x \\<le> ?y)\n\ngoal (1 subgoal):\n 1. m < i\\<^sub>0 \\<and> i\\<^sub>0 < n", "by blast"], ["proof (state)\nthis:\n  m < i\\<^sub>0 \\<and> i\\<^sub>0 < n\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "with i0prop"], ["proof (chain)\npicking this:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n  m < i\\<^sub>0 \\<and> i\\<^sub>0 < n", "have \\<open>\\<exists>i\\<^sub>0. f i\\<^sub>0 = i \\<and> i\\<^sub>0 \\<in> ?SUB\\<close>"], ["proof (prove)\nusing this:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n  m < i\\<^sub>0 \\<and> i\\<^sub>0 < n\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<^sub>0.\n       f i\\<^sub>0 = i \\<and>\n       i\\<^sub>0\n       \\<in> {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "by blast"], ["proof (state)\nthis:\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = i \\<and>\n     i\\<^sub>0 \\<in> {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "}"], ["proof (state)\nthis:\n  ?i2\n  \\<in> {i. f m < i \\<and>\n            i < f n \\<and> hamlet (Rep_run r i c)} \\<Longrightarrow>\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = ?i2 \\<and>\n     i\\<^sub>0 \\<in> {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "thus \\<open>?RUN \\<subseteq> image f ?SUB\\<close>"], ["proof (prove)\nusing this:\n  ?i2\n  \\<in> {i. f m < i \\<and>\n            i < f n \\<and> hamlet (Rep_run r i c)} \\<Longrightarrow>\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = ?i2 \\<and>\n     i\\<^sub>0 \\<in> {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "by blast"], ["proof (state)\nthis:\n  {i. f m < i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n  \\<subseteq> f ` {i. m < i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dilated_ticks_left:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{i. f m \\<le> i \\<and> i < f n \\<and> hamlet ((Rep_run r) i c)}\n          = image f {i. m \\<le> i \\<and> i < n \\<and> hamlet ((Rep_run sub) i c)}\\<close>\n    (is \\<open>?RUN = image f ?SUB\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "assume h:\\<open>i \\<in> ?SUB\\<close>"], ["proof (state)\nthis:\n  i \\<in> {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>m \\<le> i \\<and> i < n\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. m \\<le> i \\<and> i < n", "by simp"], ["proof (state)\nthis:\n  m \\<le> i \\<and> i < n\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>f m \\<le> f i \\<and> f i < (f n)\\<close>"], ["proof (prove)\nusing this:\n  m \\<le> i \\<and> i < n\n\ngoal (1 subgoal):\n 1. f m \\<le> f i \\<and> f i < f n", "using assms"], ["proof (prove)\nusing this:\n  m \\<le> i \\<and> i < n\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. f m \\<le> f i \\<and> f i < f n", "by (simp add: dilating_def dilating_fun_def strict_monoD strict_mono_less_eq)"], ["proof (state)\nthis:\n  f m \\<le> f i \\<and> f i < f n\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "moreover"], ["proof (state)\nthis:\n  f m \\<le> f i \\<and> f i < f n\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "from h"], ["proof (chain)\npicking this:\n  i \\<in> {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "have \\<open>hamlet ((Rep_run sub) i c)\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run sub i c)", "by simp"], ["proof (state)\nthis:\n  hamlet (Rep_run sub i c)\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>hamlet ((Rep_run r) (f i) c)\\<close>"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub i c)\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r (f i) c)", "using ticks_sub[OF assms]"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub i c)\n  hamlet (Rep_run sub ?n ?a) = hamlet (Rep_run r (f ?n) ?a)\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r (f i) c)", "by blast"], ["proof (state)\nthis:\n  hamlet (Rep_run r (f i) c)\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "ultimately"], ["proof (chain)\npicking this:\n  f m \\<le> f i \\<and> f i < f n\n  hamlet (Rep_run r (f i) c)", "have \\<open>f i \\<in> ?RUN\\<close>"], ["proof (prove)\nusing this:\n  f m \\<le> f i \\<and> f i < f n\n  hamlet (Rep_run r (f i) c)\n\ngoal (1 subgoal):\n 1. f i \\<in> {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}", "by simp"], ["proof (state)\nthis:\n  f i \\<in> {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "}"], ["proof (state)\nthis:\n  ?i2\n  \\<in> {i. m \\<le> i \\<and>\n            i < n \\<and> hamlet (Rep_run sub i c)} \\<Longrightarrow>\n  f ?i2 \\<in> {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "thus \\<open>image f ?SUB \\<subseteq> ?RUN\\<close>"], ["proof (prove)\nusing this:\n  ?i2\n  \\<in> {i. m \\<le> i \\<and>\n            i < n \\<and> hamlet (Rep_run sub i c)} \\<Longrightarrow>\n  f ?i2 \\<in> {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i < f n \\<and> hamlet (Rep_run r i c)}", "by blast"], ["proof (state)\nthis:\n  f ` {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n  \\<subseteq> {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "assume h:\\<open>i \\<in> ?RUN\\<close>"], ["proof (state)\nthis:\n  i \\<in> {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "hence \\<open>hamlet ((Rep_run r) i c)\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r i c)", "by simp"], ["proof (state)\nthis:\n  hamlet (Rep_run r i c)\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "from ticks_imp_ticks_subk[OF assms this]"], ["proof (chain)\npicking this:\n  \\<exists>k\\<^sub>0.\n     f k\\<^sub>0 = i \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "obtain i\\<^sub>0 where i0prop:\\<open>f i\\<^sub>0 = i \\<and> hamlet ((Rep_run sub) i\\<^sub>0 c)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k\\<^sub>0.\n     f k\\<^sub>0 = i \\<and> hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. (\\<And>i\\<^sub>0.\n        f i\\<^sub>0 = i \\<and>\n        hamlet (Rep_run sub i\\<^sub>0 c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "with h"], ["proof (chain)\npicking this:\n  i \\<in> {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)", "have \\<open>f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n", "by simp"], ["proof (state)\nthis:\n  f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "moreover"], ["proof (state)\nthis:\n  f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "have \\<open>strict_mono f\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono f", "using assms dilating_def dilating_fun_def"], ["proof (prove)\nusing this:\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n\ngoal (1 subgoal):\n 1. strict_mono f", "by blast"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "ultimately"], ["proof (chain)\npicking this:\n  f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\n  strict_mono f", "have \\<open>m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 < n\\<close>"], ["proof (prove)\nusing this:\n  f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\n  strict_mono f\n\ngoal (1 subgoal):\n 1. m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 < n", "using strict_mono_less strict_mono_less_eq"], ["proof (prove)\nusing this:\n  f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 < f n\n  strict_mono f\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n  strict_mono ?f \\<Longrightarrow> (?f ?x \\<le> ?f ?y) = (?x \\<le> ?y)\n\ngoal (1 subgoal):\n 1. m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 < n", "by blast"], ["proof (state)\nthis:\n  m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 < n\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "with i0prop"], ["proof (chain)\npicking this:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n  m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 < n", "have \\<open>\\<exists>i\\<^sub>0. f i\\<^sub>0 = i \\<and> i\\<^sub>0 \\<in> ?SUB\\<close>"], ["proof (prove)\nusing this:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n  m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 < n\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<^sub>0.\n       f i\\<^sub>0 = i \\<and>\n       i\\<^sub>0\n       \\<in> {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "by blast"], ["proof (state)\nthis:\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = i \\<and>\n     i\\<^sub>0\n     \\<in> {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "}"], ["proof (state)\nthis:\n  ?i2\n  \\<in> {i. f m \\<le> i \\<and>\n            i < f n \\<and> hamlet (Rep_run r i c)} \\<Longrightarrow>\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = ?i2 \\<and>\n     i\\<^sub>0\n     \\<in> {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "thus \\<open>?RUN \\<subseteq> image f ?SUB\\<close>"], ["proof (prove)\nusing this:\n  ?i2\n  \\<in> {i. f m \\<le> i \\<and>\n            i < f n \\<and> hamlet (Rep_run r i c)} \\<Longrightarrow>\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = ?i2 \\<and>\n     i\\<^sub>0\n     \\<in> {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}", "by blast"], ["proof (state)\nthis:\n  {i. f m \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)}\n  \\<subseteq> f `\n              {i. m \\<le> i \\<and> i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dilated_ticks_right:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{i. f m < i \\<and> i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\n          = image f {i. m < i \\<and> i \\<le> n \\<and> hamlet ((Rep_run sub) i c)}\\<close>\n    (is \\<open>?RUN = image f ?SUB\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "assume h:\\<open>i \\<in> ?SUB\\<close>"], ["proof (state)\nthis:\n  i \\<in> {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>m < i \\<and> i \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. m < i \\<and> i \\<le> n", "by simp"], ["proof (state)\nthis:\n  m < i \\<and> i \\<le> n\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>f m < f i \\<and> f i \\<le> (f n)\\<close>"], ["proof (prove)\nusing this:\n  m < i \\<and> i \\<le> n\n\ngoal (1 subgoal):\n 1. f m < f i \\<and> f i \\<le> f n", "using assms"], ["proof (prove)\nusing this:\n  m < i \\<and> i \\<le> n\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. f m < f i \\<and> f i \\<le> f n", "by (simp add: dilating_def dilating_fun_def strict_monoD strict_mono_less_eq)"], ["proof (state)\nthis:\n  f m < f i \\<and> f i \\<le> f n\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "moreover"], ["proof (state)\nthis:\n  f m < f i \\<and> f i \\<le> f n\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "from h"], ["proof (chain)\npicking this:\n  i \\<in> {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "have \\<open>hamlet ((Rep_run sub) i c)\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run sub i c)", "by simp"], ["proof (state)\nthis:\n  hamlet (Rep_run sub i c)\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>hamlet ((Rep_run r) (f i) c)\\<close>"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub i c)\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r (f i) c)", "using ticks_sub[OF assms]"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub i c)\n  hamlet (Rep_run sub ?n ?a) = hamlet (Rep_run r (f ?n) ?a)\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r (f i) c)", "by blast"], ["proof (state)\nthis:\n  hamlet (Rep_run r (f i) c)\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "ultimately"], ["proof (chain)\npicking this:\n  f m < f i \\<and> f i \\<le> f n\n  hamlet (Rep_run r (f i) c)", "have \\<open>f i \\<in> ?RUN\\<close>"], ["proof (prove)\nusing this:\n  f m < f i \\<and> f i \\<le> f n\n  hamlet (Rep_run r (f i) c)\n\ngoal (1 subgoal):\n 1. f i \\<in> {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "by simp"], ["proof (state)\nthis:\n  f i \\<in> {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "}"], ["proof (state)\nthis:\n  ?i2\n  \\<in> {i. m < i \\<and>\n            i \\<le> n \\<and> hamlet (Rep_run sub i c)} \\<Longrightarrow>\n  f ?i2 \\<in> {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (2 subgoals):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "thus \\<open>image f ?SUB \\<subseteq> ?RUN\\<close>"], ["proof (prove)\nusing this:\n  ?i2\n  \\<in> {i. m < i \\<and>\n            i \\<le> n \\<and> hamlet (Rep_run sub i c)} \\<Longrightarrow>\n  f ?i2 \\<in> {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m < i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "by blast"], ["proof (state)\nthis:\n  f ` {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n  \\<subseteq> {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "assume h:\\<open>i \\<in> ?RUN\\<close>"], ["proof (state)\nthis:\n  i \\<in> {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "hence \\<open>hamlet ((Rep_run r) i c)\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r i c)", "by simp"], ["proof (state)\nthis:\n  hamlet (Rep_run r i c)\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "from ticks_imp_ticks_subk[OF assms this]"], ["proof (chain)\npicking this:\n  \\<exists>k\\<^sub>0.\n     f k\\<^sub>0 = i \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "obtain i\\<^sub>0 where i0prop:\\<open>f i\\<^sub>0 = i \\<and> hamlet ((Rep_run sub) i\\<^sub>0 c)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k\\<^sub>0.\n     f k\\<^sub>0 = i \\<and> hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. (\\<And>i\\<^sub>0.\n        f i\\<^sub>0 = i \\<and>\n        hamlet (Rep_run sub i\\<^sub>0 c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "with h"], ["proof (chain)\npicking this:\n  i \\<in> {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)", "have \\<open>f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n", "by simp"], ["proof (state)\nthis:\n  f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "moreover"], ["proof (state)\nthis:\n  f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "have \\<open>strict_mono f\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono f", "using assms dilating_def dilating_fun_def"], ["proof (prove)\nusing this:\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n\ngoal (1 subgoal):\n 1. strict_mono f", "by blast"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "ultimately"], ["proof (chain)\npicking this:\n  f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\n  strict_mono f", "have \\<open>m < i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\n  strict_mono f\n\ngoal (1 subgoal):\n 1. m < i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n", "using strict_mono_less strict_mono_less_eq"], ["proof (prove)\nusing this:\n  f m < f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\n  strict_mono f\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n  strict_mono ?f \\<Longrightarrow> (?f ?x \\<le> ?f ?y) = (?x \\<le> ?y)\n\ngoal (1 subgoal):\n 1. m < i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n", "by blast"], ["proof (state)\nthis:\n  m < i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "with i0prop"], ["proof (chain)\npicking this:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n  m < i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n", "have \\<open>\\<exists>i\\<^sub>0. f i\\<^sub>0 = i \\<and> i\\<^sub>0 \\<in> ?SUB\\<close>"], ["proof (prove)\nusing this:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n  m < i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<^sub>0.\n       f i\\<^sub>0 = i \\<and>\n       i\\<^sub>0\n       \\<in> {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "by blast"], ["proof (state)\nthis:\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = i \\<and>\n     i\\<^sub>0\n     \\<in> {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "}"], ["proof (state)\nthis:\n  ?i2\n  \\<in> {i. f m < i \\<and>\n            i \\<le> f n \\<and> hamlet (Rep_run r i c)} \\<Longrightarrow>\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = ?i2 \\<and>\n     i\\<^sub>0\n     \\<in> {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "thus \\<open>?RUN \\<subseteq> image f ?SUB\\<close>"], ["proof (prove)\nusing this:\n  ?i2\n  \\<in> {i. f m < i \\<and>\n            i \\<le> f n \\<and> hamlet (Rep_run r i c)} \\<Longrightarrow>\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = ?i2 \\<and>\n     i\\<^sub>0\n     \\<in> {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "by blast"], ["proof (state)\nthis:\n  {i. f m < i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n  \\<subseteq> f `\n              {i. m < i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dilated_ticks:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\n          = image f {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet ((Rep_run sub) i c)}\\<close>\n    (is \\<open>?RUN = image f ?SUB\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "assume h:\\<open>i \\<in> ?SUB\\<close>"], ["proof (state)\nthis:\n  i \\<in> {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>m \\<le> i \\<and> i \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. m \\<le> i \\<and> i \\<le> n", "by simp"], ["proof (state)\nthis:\n  m \\<le> i \\<and> i \\<le> n\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>f m \\<le> f i \\<and> f i \\<le> (f n)\\<close>"], ["proof (prove)\nusing this:\n  m \\<le> i \\<and> i \\<le> n\n\ngoal (1 subgoal):\n 1. f m \\<le> f i \\<and> f i \\<le> f n", "using assms"], ["proof (prove)\nusing this:\n  m \\<le> i \\<and> i \\<le> n\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. f m \\<le> f i \\<and> f i \\<le> f n", "by (simp add: dilating_def dilating_fun_def strict_mono_less_eq)"], ["proof (state)\nthis:\n  f m \\<le> f i \\<and> f i \\<le> f n\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "moreover"], ["proof (state)\nthis:\n  f m \\<le> f i \\<and> f i \\<le> f n\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "from h"], ["proof (chain)\npicking this:\n  i \\<in> {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "have \\<open>hamlet ((Rep_run sub) i c)\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run sub i c)", "by simp"], ["proof (state)\nthis:\n  hamlet (Rep_run sub i c)\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>hamlet ((Rep_run r) (f i) c)\\<close>"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub i c)\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r (f i) c)", "using ticks_sub[OF assms]"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub i c)\n  hamlet (Rep_run sub ?n ?a) = hamlet (Rep_run r (f ?n) ?a)\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r (f i) c)", "by blast"], ["proof (state)\nthis:\n  hamlet (Rep_run r (f i) c)\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "ultimately"], ["proof (chain)\npicking this:\n  f m \\<le> f i \\<and> f i \\<le> f n\n  hamlet (Rep_run r (f i) c)", "have \\<open>f i \\<in>?RUN\\<close>"], ["proof (prove)\nusing this:\n  f m \\<le> f i \\<and> f i \\<le> f n\n  hamlet (Rep_run r (f i) c)\n\ngoal (1 subgoal):\n 1. f i\n    \\<in> {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "by simp"], ["proof (state)\nthis:\n  f i\n  \\<in> {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "}"], ["proof (state)\nthis:\n  ?i2\n  \\<in> {i. m \\<le> i \\<and>\n            i \\<le> n \\<and> hamlet (Rep_run sub i c)} \\<Longrightarrow>\n  f ?i2\n  \\<in> {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (2 subgoals):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n 2. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "thus \\<open>image f ?SUB \\<subseteq> ?RUN\\<close>"], ["proof (prove)\nusing this:\n  ?i2\n  \\<in> {i. m \\<le> i \\<and>\n            i \\<le> n \\<and> hamlet (Rep_run sub i c)} \\<Longrightarrow>\n  f ?i2\n  \\<in> {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n    \\<subseteq> {i. f m \\<le> i \\<and>\n                    i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "by blast"], ["proof (state)\nthis:\n  f ` {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n  \\<subseteq> {i. f m \\<le> i \\<and>\n                  i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "assume h:\\<open>i \\<in> ?RUN\\<close>"], ["proof (state)\nthis:\n  i \\<in> {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "hence \\<open>hamlet ((Rep_run r) i c)\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r i c)", "by simp"], ["proof (state)\nthis:\n  hamlet (Rep_run r i c)\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "from ticks_imp_ticks_subk[OF assms this]"], ["proof (chain)\npicking this:\n  \\<exists>k\\<^sub>0.\n     f k\\<^sub>0 = i \\<and> hamlet (Rep_run sub k\\<^sub>0 c)", "obtain i\\<^sub>0 where i0prop:\\<open>f i\\<^sub>0 = i \\<and> hamlet ((Rep_run sub) i\\<^sub>0 c)\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k\\<^sub>0.\n     f k\\<^sub>0 = i \\<and> hamlet (Rep_run sub k\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. (\\<And>i\\<^sub>0.\n        f i\\<^sub>0 = i \\<and>\n        hamlet (Rep_run sub i\\<^sub>0 c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "with h"], ["proof (chain)\npicking this:\n  i \\<in> {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)", "have \\<open>f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n\ngoal (1 subgoal):\n 1. f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n", "by simp"], ["proof (state)\nthis:\n  f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "moreover"], ["proof (state)\nthis:\n  f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "have \\<open>strict_mono f\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono f", "using assms dilating_def dilating_fun_def"], ["proof (prove)\nusing this:\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n\ngoal (1 subgoal):\n 1. strict_mono f", "by blast"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "ultimately"], ["proof (chain)\npicking this:\n  f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\n  strict_mono f", "have \\<open>m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\n  strict_mono f\n\ngoal (1 subgoal):\n 1. m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n", "using strict_mono_less_eq"], ["proof (prove)\nusing this:\n  f m \\<le> f i\\<^sub>0 \\<and> f i\\<^sub>0 \\<le> f n\n  strict_mono f\n  strict_mono ?f \\<Longrightarrow> (?f ?x \\<le> ?f ?y) = (?x \\<le> ?y)\n\ngoal (1 subgoal):\n 1. m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n", "by blast"], ["proof (state)\nthis:\n  m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "with i0prop"], ["proof (chain)\npicking this:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n  m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n", "have \\<open>\\<exists>i\\<^sub>0. f i\\<^sub>0 = i \\<and> i\\<^sub>0 \\<in> ?SUB\\<close>"], ["proof (prove)\nusing this:\n  f i\\<^sub>0 = i \\<and> hamlet (Rep_run sub i\\<^sub>0 c)\n  m \\<le> i\\<^sub>0 \\<and> i\\<^sub>0 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<^sub>0.\n       f i\\<^sub>0 = i \\<and>\n       i\\<^sub>0\n       \\<in> {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "by blast"], ["proof (state)\nthis:\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = i \\<and>\n     i\\<^sub>0\n     \\<in> {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "}"], ["proof (state)\nthis:\n  ?i2\n  \\<in> {i. f m \\<le> i \\<and>\n            i \\<le> f n \\<and> hamlet (Rep_run r i c)} \\<Longrightarrow>\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = ?i2 \\<and>\n     i\\<^sub>0\n     \\<in> {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "thus \\<open>?RUN \\<subseteq> image f ?SUB\\<close>"], ["proof (prove)\nusing this:\n  ?i2\n  \\<in> {i. f m \\<le> i \\<and>\n            i \\<le> f n \\<and> hamlet (Rep_run r i c)} \\<Longrightarrow>\n  \\<exists>i\\<^sub>0.\n     f i\\<^sub>0 = ?i2 \\<and>\n     i\\<^sub>0\n     \\<in> {i. m \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n    \\<subseteq> f `\n                {i. m \\<le> i \\<and>\n                    i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "by blast"], ["proof (state)\nthis:\n  {i. f m \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n  \\<subseteq> f `\n              {i. m \\<le> i \\<and>\n                  i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  No tick can occur in a dilated run before the image of 0 by the dilation function.\n\\<close>"], ["", "lemma empty_dilated_prefix:\n  assumes \\<open>dilating f sub r\\<close>\n  and     \\<open>n < f 0\\<close>\nshows   \\<open>\\<not> hamlet ((Rep_run r) n c)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r n c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r n c)", "from assms"], ["proof (chain)\npicking this:\n  dilating f sub r\n  n < f 0", "have False"], ["proof (prove)\nusing this:\n  dilating f sub r\n  n < f 0\n\ngoal (1 subgoal):\n 1. False", "by (simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r n c)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r n c)", ".."], ["proof (state)\nthis:\n  \\<not> hamlet (Rep_run r n c)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary empty_dilated_prefix':\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\n         = {i. i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "from assms"], ["proof (chain)\npicking this:\n  dilating f sub r", "have \\<open>strict_mono f\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. strict_mono f", "by (simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>f 0 \\<le> f n\\<close>"], ["proof (prove)\nusing this:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. f 0 \\<le> f n", "unfolding strict_mono_def"], ["proof (prove)\nusing this:\n  \\<forall>x y. x < y \\<longrightarrow> f x < f y\n\ngoal (1 subgoal):\n 1. f 0 \\<le> f n", "by (simp add: less_mono_imp_le_mono)"], ["proof (state)\nthis:\n  f 0 \\<le> f n\n\ngoal (1 subgoal):\n 1. {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>\\<forall>i. i \\<le> f n = (i < f 0) \\<or> (f 0 \\<le> i \\<and> i \\<le> f n)\\<close>"], ["proof (prove)\nusing this:\n  f 0 \\<le> f n\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (i \\<le> f n) = (i < f 0) \\<or> f 0 \\<le> i \\<and> i \\<le> f n", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. (i \\<le> f n) = (i < f 0) \\<or> f 0 \\<le> i \\<and> i \\<le> f n\n\ngoal (1 subgoal):\n 1. {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "hence \\<open>{i. i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\n        = {i. i < f 0 \\<and> hamlet ((Rep_run r) i c)}\n        \\<union> {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i. (i \\<le> f n) = (i < f 0) \\<or> f 0 \\<le> i \\<and> i \\<le> f n\n\ngoal (1 subgoal):\n 1. {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. i < f 0 \\<and> hamlet (Rep_run r i c)} \\<union>\n    {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "by auto"], ["proof (state)\nthis:\n  {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n  {i. i < f 0 \\<and> hamlet (Rep_run r i c)} \\<union>\n  {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "also"], ["proof (state)\nthis:\n  {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n  {i. i < f 0 \\<and> hamlet (Rep_run r i c)} \\<union>\n  {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "have \\<open>... = {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < f 0 \\<and> hamlet (Rep_run r i c)} \\<union>\n    {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "using empty_dilated_prefix[OF assms]"], ["proof (prove)\nusing this:\n  ?n < f 0 \\<Longrightarrow> \\<not> hamlet (Rep_run r ?n ?c)\n\ngoal (1 subgoal):\n 1. {i. i < f 0 \\<and> hamlet (Rep_run r i c)} \\<union>\n    {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "by blast"], ["proof (state)\nthis:\n  {i. i < f 0 \\<and> hamlet (Rep_run r i c)} \\<union>\n  {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n  {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "finally"], ["proof (chain)\npicking this:\n  {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n  {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "show ?thesis"], ["proof (prove)\nusing this:\n  {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n  {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "by simp"], ["proof (state)\nthis:\n  {i. f 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n  {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary dilated_prefix:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{i. i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\n          = image f {i. i \\<le> n \\<and> hamlet ((Rep_run sub) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "have \\<open>{i. 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\n        = image f {i. 0 \\<le> i \\<and> i \\<le> n \\<and> hamlet ((Rep_run sub) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. 0 \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "using dilated_ticks[OF assms] empty_dilated_prefix'[OF assms]"], ["proof (prove)\nusing this:\n  {i. f ?m \\<le> i \\<and> i \\<le> f ?n \\<and> hamlet (Rep_run r i ?c)} =\n  f ` {i. ?m \\<le> i \\<and> i \\<le> ?n \\<and> hamlet (Rep_run sub i ?c)}\n  {i. f 0 \\<le> i \\<and> i \\<le> f ?n \\<and> hamlet (Rep_run r i ?c)} =\n  {i. i \\<le> f ?n \\<and> hamlet (Rep_run r i ?c)}\n\ngoal (1 subgoal):\n 1. {i. 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. 0 \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "by blast"], ["proof (state)\nthis:\n  {i. 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n  f ` {i. 0 \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "thus ?thesis"], ["proof (prove)\nusing this:\n  {i. 0 \\<le> i \\<and> i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n  f ` {i. 0 \\<le> i \\<and> i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "by simp"], ["proof (state)\nthis:\n  {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n  f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary dilated_strict_prefix:\n  assumes \\<open>dilating f sub r\\<close>\n  shows   \\<open>{i. i < f n \\<and> hamlet ((Rep_run r) i c)}\n          = image f {i. i < n \\<and> hamlet ((Rep_run sub) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "from assms"], ["proof (chain)\npicking this:\n  dilating f sub r", "have dil:\\<open>dilating_fun f r\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. dilating_fun f r", "unfolding dilating_def"], ["proof (prove)\nusing this:\n  dilating_fun f r \\<and>\n  (\\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run sub n c) = hamlet (Rep_run r (f n) c))\n\ngoal (1 subgoal):\n 1. dilating_fun f r", "by simp"], ["proof (state)\nthis:\n  dilating_fun f r\n\ngoal (1 subgoal):\n 1. {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "from dil"], ["proof (chain)\npicking this:\n  dilating_fun f r", "have f0:\\<open>f 0 = 0\\<close>"], ["proof (prove)\nusing this:\n  dilating_fun f r\n\ngoal (1 subgoal):\n 1. f 0 = 0", "using dilating_fun_def"], ["proof (prove)\nusing this:\n  dilating_fun f r\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n\ngoal (1 subgoal):\n 1. f 0 = 0", "by blast"], ["proof (state)\nthis:\n  f 0 = 0\n\ngoal (1 subgoal):\n 1. {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "from dilating_fun_image_left[OF dil, of \\<open>0\\<close> \\<open>n\\<close> \\<open>c\\<close>]"], ["proof (chain)\npicking this:\n  {k. f 0 \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)} =\n  f ` {k. 0 \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}", "have \\<open>{i. f 0 \\<le> i \\<and> i < f n \\<and> hamlet ((Rep_run r) i c)}\n        = image f {i. 0 \\<le> i \\<and> i < n \\<and> hamlet ((Rep_run r) (f i) c)}\\<close>"], ["proof (prove)\nusing this:\n  {k. f 0 \\<le> k \\<and> k < f n \\<and> hamlet (Rep_run r k c)} =\n  f ` {k. 0 \\<le> k \\<and> k < n \\<and> hamlet (Rep_run r (f k) c)}\n\ngoal (1 subgoal):\n 1. {i. f 0 \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. 0 \\<le> i \\<and> i < n \\<and> hamlet (Rep_run r (f i) c)}", "."], ["proof (state)\nthis:\n  {i. f 0 \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)} =\n  f ` {i. 0 \\<le> i \\<and> i < n \\<and> hamlet (Rep_run r (f i) c)}\n\ngoal (1 subgoal):\n 1. {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "hence \\<open>{i. i < f n \\<and> hamlet ((Rep_run r) i c)}\n        = image f {i. i < n \\<and> hamlet ((Rep_run r) (f i) c)}\\<close>"], ["proof (prove)\nusing this:\n  {i. f 0 \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)} =\n  f ` {i. 0 \\<le> i \\<and> i < n \\<and> hamlet (Rep_run r (f i) c)}\n\ngoal (1 subgoal):\n 1. {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run r (f i) c)}", "using f0"], ["proof (prove)\nusing this:\n  {i. f 0 \\<le> i \\<and> i < f n \\<and> hamlet (Rep_run r i c)} =\n  f ` {i. 0 \\<le> i \\<and> i < n \\<and> hamlet (Rep_run r (f i) c)}\n  f 0 = 0\n\ngoal (1 subgoal):\n 1. {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run r (f i) c)}", "by simp"], ["proof (state)\nthis:\n  {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n  f ` {i. i < n \\<and> hamlet (Rep_run r (f i) c)}\n\ngoal (1 subgoal):\n 1. {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "also"], ["proof (state)\nthis:\n  {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n  f ` {i. i < n \\<and> hamlet (Rep_run r (f i) c)}\n\ngoal (1 subgoal):\n 1. {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "have \\<open>... = image f {i. i < n \\<and> hamlet ((Rep_run sub) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` {i. i < n \\<and> hamlet (Rep_run r (f i) c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "using assms dilating_def"], ["proof (prove)\nusing this:\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n\ngoal (1 subgoal):\n 1. f ` {i. i < n \\<and> hamlet (Rep_run r (f i) c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "by blast"], ["proof (state)\nthis:\n  f ` {i. i < n \\<and> hamlet (Rep_run r (f i) c)} =\n  f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "finally"], ["proof (chain)\npicking this:\n  {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n  f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "show ?thesis"], ["proof (prove)\nusing this:\n  {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n  f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}", "by simp"], ["proof (state)\nthis:\n  {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n  f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>A singleton of @{typ nat} can be defined with a weaker property.\\<close>"], ["", "lemma nat_sing_prop:\n  \\<open>{i::nat. i = k \\<and> P(i)} = {i::nat. i = k \\<and> P(k)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i = k \\<and> P i} = {i. i = k \\<and> P k}", "by auto"], ["", "text \\<open>\n  The set definition and the function definition of @{const tick_count}\n  are equivalent.\n\\<close>"], ["", "lemma tick_count_is_fun[code]:\\<open>tick_count r c n = run_tick_count r c n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count r c n = #\\<^sub>\\<le> r c n", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. tick_count r c 0 = #\\<^sub>\\<le> r c 0\n 2. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. tick_count r c 0 = #\\<^sub>\\<le> r c 0\n 2. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "have \\<open>tick_count r c 0 = card {i. i \\<le> 0 \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count r c 0 = card {i. i \\<le> 0 \\<and> hamlet (Rep_run r i c)}", "by (simp add: tick_count_def)"], ["proof (state)\nthis:\n  tick_count r c 0 = card {i. i \\<le> 0 \\<and> hamlet (Rep_run r i c)}\n\ngoal (2 subgoals):\n 1. tick_count r c 0 = #\\<^sub>\\<le> r c 0\n 2. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "also"], ["proof (state)\nthis:\n  tick_count r c 0 = card {i. i \\<le> 0 \\<and> hamlet (Rep_run r i c)}\n\ngoal (2 subgoals):\n 1. tick_count r c 0 = #\\<^sub>\\<le> r c 0\n 2. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "have \\<open>... = card {i::nat. i = 0 \\<and> hamlet ((Rep_run r) 0 c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i \\<le> 0 \\<and> hamlet (Rep_run r i c)} =\n    card {i. i = 0 \\<and> hamlet (Rep_run r 0 c)}", "using le_zero_eq nat_sing_prop[of \\<open>0\\<close> \\<open>\\<lambda>i. hamlet ((Rep_run r) i c)\\<close>]"], ["proof (prove)\nusing this:\n  (?n \\<le> (0::?'a)) = (?n = (0::?'a))\n  {i. i = 0 \\<and> hamlet (Rep_run r i c)} =\n  {i. i = 0 \\<and> hamlet (Rep_run r 0 c)}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> 0 \\<and> hamlet (Rep_run r i c)} =\n    card {i. i = 0 \\<and> hamlet (Rep_run r 0 c)}", "by simp"], ["proof (state)\nthis:\n  card {i. i \\<le> 0 \\<and> hamlet (Rep_run r i c)} =\n  card {i. i = 0 \\<and> hamlet (Rep_run r 0 c)}\n\ngoal (2 subgoals):\n 1. tick_count r c 0 = #\\<^sub>\\<le> r c 0\n 2. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "also"], ["proof (state)\nthis:\n  card {i. i \\<le> 0 \\<and> hamlet (Rep_run r i c)} =\n  card {i. i = 0 \\<and> hamlet (Rep_run r 0 c)}\n\ngoal (2 subgoals):\n 1. tick_count r c 0 = #\\<^sub>\\<le> r c 0\n 2. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "have \\<open>... = (if hamlet ((Rep_run r) 0 c) then 1 else 0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i = 0 \\<and> hamlet (Rep_run r 0 c)} =\n    (if hamlet (Rep_run r 0 c) then 1 else 0)", "by simp"], ["proof (state)\nthis:\n  card {i. i = 0 \\<and> hamlet (Rep_run r 0 c)} =\n  (if hamlet (Rep_run r 0 c) then 1 else 0)\n\ngoal (2 subgoals):\n 1. tick_count r c 0 = #\\<^sub>\\<le> r c 0\n 2. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "also"], ["proof (state)\nthis:\n  card {i. i = 0 \\<and> hamlet (Rep_run r 0 c)} =\n  (if hamlet (Rep_run r 0 c) then 1 else 0)\n\ngoal (2 subgoals):\n 1. tick_count r c 0 = #\\<^sub>\\<le> r c 0\n 2. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "have \\<open>... = run_tick_count r c 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if hamlet (Rep_run r 0 c) then 1 else 0) = #\\<^sub>\\<le> r c 0", "by simp"], ["proof (state)\nthis:\n  (if hamlet (Rep_run r 0 c) then 1 else 0) = #\\<^sub>\\<le> r c 0\n\ngoal (2 subgoals):\n 1. tick_count r c 0 = #\\<^sub>\\<le> r c 0\n 2. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "finally"], ["proof (chain)\npicking this:\n  tick_count r c 0 = #\\<^sub>\\<le> r c 0", "show ?case"], ["proof (prove)\nusing this:\n  tick_count r c 0 = #\\<^sub>\\<le> r c 0\n\ngoal (1 subgoal):\n 1. tick_count r c 0 = #\\<^sub>\\<le> r c 0", "."], ["proof (state)\nthis:\n  tick_count r c 0 = #\\<^sub>\\<le> r c 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "case (Suc k)"], ["proof (state)\nthis:\n  tick_count r c k = #\\<^sub>\\<le> r c k\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       tick_count r c n = #\\<^sub>\\<le> r c n \\<Longrightarrow>\n       tick_count r c (Suc n) = #\\<^sub>\\<le> r c Suc n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "proof (cases \\<open>hamlet ((Rep_run r) (Suc k) c)\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k\n 2. \\<not> hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "case True"], ["proof (state)\nthis:\n  hamlet (Rep_run r (Suc k) c)\n\ngoal (2 subgoals):\n 1. hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k\n 2. \\<not> hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "hence \\<open>{i. i \\<le> Suc k \\<and> hamlet ((Rep_run r) i c)}\n             = insert (Suc k) {i. i \\<le> k \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\nusing this:\n  hamlet (Rep_run r (Suc k) c)\n\ngoal (1 subgoal):\n 1. {i. i \\<le> Suc k \\<and> hamlet (Rep_run r i c)} =\n    insert (Suc k) {i. i \\<le> k \\<and> hamlet (Rep_run r i c)}", "by auto"], ["proof (state)\nthis:\n  {i. i \\<le> Suc k \\<and> hamlet (Rep_run r i c)} =\n  insert (Suc k) {i. i \\<le> k \\<and> hamlet (Rep_run r i c)}\n\ngoal (2 subgoals):\n 1. hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k\n 2. \\<not> hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "hence \\<open>tick_count r c (Suc k) = Suc (tick_count r c k)\\<close>"], ["proof (prove)\nusing this:\n  {i. i \\<le> Suc k \\<and> hamlet (Rep_run r i c)} =\n  insert (Suc k) {i. i \\<le> k \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count r c (Suc k) = Suc (tick_count r c k)", "by (simp add: tick_count_def)"], ["proof (state)\nthis:\n  tick_count r c (Suc k) = Suc (tick_count r c k)\n\ngoal (2 subgoals):\n 1. hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k\n 2. \\<not> hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "with Suc.IH"], ["proof (chain)\npicking this:\n  tick_count r c k = #\\<^sub>\\<le> r c k\n  tick_count r c (Suc k) = Suc (tick_count r c k)", "have \\<open>tick_count r c (Suc k) = Suc (run_tick_count r c k)\\<close>"], ["proof (prove)\nusing this:\n  tick_count r c k = #\\<^sub>\\<le> r c k\n  tick_count r c (Suc k) = Suc (tick_count r c k)\n\ngoal (1 subgoal):\n 1. tick_count r c (Suc k) = Suc #\\<^sub>\\<le> r c k", "by simp"], ["proof (state)\nthis:\n  tick_count r c (Suc k) = Suc #\\<^sub>\\<le> r c k\n\ngoal (2 subgoals):\n 1. hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k\n 2. \\<not> hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "thus ?thesis"], ["proof (prove)\nusing this:\n  tick_count r c (Suc k) = Suc #\\<^sub>\\<le> r c k\n\ngoal (1 subgoal):\n 1. tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "by (simp add: True)"], ["proof (state)\nthis:\n  tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "case False"], ["proof (state)\nthis:\n  \\<not> hamlet (Rep_run r (Suc k) c)\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "hence \\<open>{i. i \\<le> Suc k \\<and> hamlet ((Rep_run r) i c)}\n             = {i. i \\<le> k \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\nusing this:\n  \\<not> hamlet (Rep_run r (Suc k) c)\n\ngoal (1 subgoal):\n 1. {i. i \\<le> Suc k \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> k \\<and> hamlet (Rep_run r i c)}", "using le_Suc_eq"], ["proof (prove)\nusing this:\n  \\<not> hamlet (Rep_run r (Suc k) c)\n  (?m \\<le> Suc ?n) = (?m \\<le> ?n \\<or> ?m = Suc ?n)\n\ngoal (1 subgoal):\n 1. {i. i \\<le> Suc k \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> k \\<and> hamlet (Rep_run r i c)}", "by auto"], ["proof (state)\nthis:\n  {i. i \\<le> Suc k \\<and> hamlet (Rep_run r i c)} =\n  {i. i \\<le> k \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "hence \\<open>tick_count r c (Suc k) = tick_count r c k\\<close>"], ["proof (prove)\nusing this:\n  {i. i \\<le> Suc k \\<and> hamlet (Rep_run r i c)} =\n  {i. i \\<le> k \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count r c (Suc k) = tick_count r c k", "by (simp add: tick_count_def)"], ["proof (state)\nthis:\n  tick_count r c (Suc k) = tick_count r c k\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r (Suc k) c) \\<Longrightarrow>\n    tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "thus ?thesis"], ["proof (prove)\nusing this:\n  tick_count r c (Suc k) = tick_count r c k\n\ngoal (1 subgoal):\n 1. tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "using Suc.IH"], ["proof (prove)\nusing this:\n  tick_count r c (Suc k) = tick_count r c k\n  tick_count r c k = #\\<^sub>\\<le> r c k\n\ngoal (1 subgoal):\n 1. tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k", "by (simp add: False)"], ["proof (state)\nthis:\n  tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tick_count r c (Suc k) = #\\<^sub>\\<le> r c Suc k\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  To show that the set definition and the function definition \n  of @{const tick_count_strict} are equivalent, we first show that\n  the \\<^emph>\\<open>strictness\\<close> of @{const tick_count_strict} can be softened using @{const Suc}.\n\\<close>"], ["", "lemma tick_count_strict_suc:\\<open>tick_count_strict r c (Suc n) = tick_count r c n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count_strict r c (Suc n) = tick_count r c n", "unfolding tick_count_def tick_count_strict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < Suc n \\<and> hamlet (Rep_run r i c)} =\n    card {i. i \\<le> n \\<and> hamlet (Rep_run r i c)}", "using less_Suc_eq_le"], ["proof (prove)\nusing this:\n  (?m < Suc ?n) = (?m \\<le> ?n)\n\ngoal (1 subgoal):\n 1. card {i. i < Suc n \\<and> hamlet (Rep_run r i c)} =\n    card {i. i \\<le> n \\<and> hamlet (Rep_run r i c)}", "by auto"], ["", "lemma tick_count_strict_is_fun[code]:\n  \\<open>tick_count_strict r c n = run_tick_count_strictly r c n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count_strict r c n = #\\<^sub>< r c n", "proof (cases \\<open>n = 0\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n\n 2. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n\n 2. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "hence \\<open>tick_count_strict r c n = 0\\<close>"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. tick_count_strict r c n = 0", "unfolding tick_count_strict_def"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> hamlet (Rep_run r i c)} = 0", "by simp"], ["proof (state)\nthis:\n  tick_count_strict r c n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n\n 2. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "also"], ["proof (state)\nthis:\n  tick_count_strict r c n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n\n 2. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "have \\<open>... = run_tick_count_strictly r c 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = #\\<^sub>< r c 0", "using run_tick_count_strictly.simps(1)[symmetric]"], ["proof (prove)\nusing this:\n  0 = #\\<^sub>< ?\\<rho> ?K 0\n\ngoal (1 subgoal):\n 1. 0 = #\\<^sub>< r c 0", "."], ["proof (state)\nthis:\n  0 = #\\<^sub>< r c 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n\n 2. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "finally"], ["proof (chain)\npicking this:\n  tick_count_strict r c n = #\\<^sub>< r c 0", "show ?thesis"], ["proof (prove)\nusing this:\n  tick_count_strict r c n = #\\<^sub>< r c 0\n\ngoal (1 subgoal):\n 1. tick_count_strict r c n = #\\<^sub>< r c n", "using True"], ["proof (prove)\nusing this:\n  tick_count_strict r c n = #\\<^sub>< r c 0\n  n = 0\n\ngoal (1 subgoal):\n 1. tick_count_strict r c n = #\\<^sub>< r c n", "by simp"], ["proof (state)\nthis:\n  tick_count_strict r c n = #\\<^sub>< r c n\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "from not0_implies_Suc[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>m. n = Suc m", "obtain m where *:\\<open>n = Suc m\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m. n = Suc m\n\ngoal (1 subgoal):\n 1. (\\<And>m. n = Suc m \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "hence \\<open>tick_count_strict r c n = tick_count r c m\\<close>"], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. tick_count_strict r c n = tick_count r c m", "using tick_count_strict_suc"], ["proof (prove)\nusing this:\n  n = Suc m\n  tick_count_strict ?r ?c (Suc ?n) = tick_count ?r ?c ?n\n\ngoal (1 subgoal):\n 1. tick_count_strict r c n = tick_count r c m", "by simp"], ["proof (state)\nthis:\n  tick_count_strict r c n = tick_count r c m\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "also"], ["proof (state)\nthis:\n  tick_count_strict r c n = tick_count r c m\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "have \\<open>... = run_tick_count r c m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count r c m = #\\<^sub>\\<le> r c m", "using tick_count_is_fun[of \\<open>r\\<close> \\<open>c\\<close> \\<open>m\\<close>]"], ["proof (prove)\nusing this:\n  tick_count r c m = #\\<^sub>\\<le> r c m\n\ngoal (1 subgoal):\n 1. tick_count r c m = #\\<^sub>\\<le> r c m", "."], ["proof (state)\nthis:\n  tick_count r c m = #\\<^sub>\\<le> r c m\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "also"], ["proof (state)\nthis:\n  tick_count r c m = #\\<^sub>\\<le> r c m\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "have \\<open>... = run_tick_count_strictly r c (Suc m)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r c m = #\\<^sub>< r c Suc m", "using run_tick_count_strictly.simps(2)[symmetric]"], ["proof (prove)\nusing this:\n  #\\<^sub>\\<le> ?\\<rho> ?K ?n = #\\<^sub>< ?\\<rho> ?K Suc ?n\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r c m = #\\<^sub>< r c Suc m", "."], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r c m = #\\<^sub>< r c Suc m\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> tick_count_strict r c n = #\\<^sub>< r c n", "finally"], ["proof (chain)\npicking this:\n  tick_count_strict r c n = #\\<^sub>< r c Suc m", "show ?thesis"], ["proof (prove)\nusing this:\n  tick_count_strict r c n = #\\<^sub>< r c Suc m\n\ngoal (1 subgoal):\n 1. tick_count_strict r c n = #\\<^sub>< r c n", "using *"], ["proof (prove)\nusing this:\n  tick_count_strict r c n = #\\<^sub>< r c Suc m\n  n = Suc m\n\ngoal (1 subgoal):\n 1. tick_count_strict r c n = #\\<^sub>< r c n", "by simp"], ["proof (state)\nthis:\n  tick_count_strict r c n = #\\<^sub>< r c n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  This leads to an alternate definition of the strict precedence relation.\n\\<close>"], ["", "lemma strictly_precedes_alt_def1:\n  \\<open>{ \\<rho>. \\<forall>n::nat. (run_tick_count \\<rho> K\\<^sub>2 n) \\<le> (run_tick_count_strictly \\<rho> K\\<^sub>1 n) }\n = { \\<rho>. \\<forall>n::nat. (run_tick_count_strictly \\<rho> K\\<^sub>2 (Suc n))\n                  \\<le> (run_tick_count_strictly \\<rho> K\\<^sub>1 n) }\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n        \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n} =\n    {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>< \\<rho> K\\<^sub>2 Suc n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "by auto"], ["", "text \\<open>\n  The strict precedence relation can even be defined using \n  only @{const \\<open>run_tick_count\\<close>}:\n\\<close>"], ["", "lemma zero_gt_all:\n  assumes \\<open>P (0::nat)\\<close>\n      and \\<open>\\<And>n. n > 0 \\<Longrightarrow> P n\\<close>\n    shows \\<open>P n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. P n", "using assms neq0_conv"], ["proof (prove)\nusing this:\n  P 0\n  0 < ?n \\<Longrightarrow> P ?n\n  (?n \\<noteq> 0) = (0 < ?n)\n\ngoal (1 subgoal):\n 1. P n", "by blast"], ["", "lemma strictly_precedes_alt_def2:\n  \\<open>{ \\<rho>. \\<forall>n::nat. (run_tick_count \\<rho> K\\<^sub>2 n) \\<le> (run_tick_count_strictly \\<rho> K\\<^sub>1 n) }\n = { \\<rho>. (\\<not>hamlet ((Rep_run \\<rho>) 0 K\\<^sub>2))\n      \\<and> (\\<forall>n::nat. (run_tick_count \\<rho> K\\<^sub>2 (Suc n)) \\<le> (run_tick_count \\<rho> K\\<^sub>1 n)) }\\<close>\n  (is \\<open>?P = ?P'\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n        \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n} =\n    {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "fix r::\\<open>'a run\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "assume \\<open>r \\<in> ?P\\<close>"], ["proof (state)\nthis:\n  r \\<in> {\\<rho>.\n           \\<forall>n.\n              #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n              \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence \\<open>\\<forall>n::nat. (run_tick_count r K\\<^sub>2 n) \\<le> (run_tick_count_strictly r K\\<^sub>1 n)\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> {\\<rho>.\n           \\<forall>n.\n              #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n              \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n\ngoal (1 subgoal):\n 1. \\<forall>n. #\\<^sub>\\<le> r K\\<^sub>2 n \\<le> #\\<^sub>< r K\\<^sub>1 n", "by simp"], ["proof (state)\nthis:\n  \\<forall>n. #\\<^sub>\\<le> r K\\<^sub>2 n \\<le> #\\<^sub>< r K\\<^sub>1 n\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence 1:\\<open>\\<forall>n::nat. (tick_count r K\\<^sub>2 n) \\<le> (tick_count_strict r K\\<^sub>1 n)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n. #\\<^sub>\\<le> r K\\<^sub>2 n \\<le> #\\<^sub>< r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n", "using tick_count_is_fun[symmetric, of r] tick_count_strict_is_fun[symmetric, of r]"], ["proof (prove)\nusing this:\n  \\<forall>n. #\\<^sub>\\<le> r K\\<^sub>2 n \\<le> #\\<^sub>< r K\\<^sub>1 n\n  #\\<^sub>\\<le> r ?c ?n = tick_count r ?c ?n\n  #\\<^sub>< r ?c ?n = tick_count_strict r ?c ?n\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n", "by simp"], ["proof (state)\nthis:\n  \\<forall>n. tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence \\<open>\\<forall>n::nat. (tick_count_strict r K\\<^sub>2 (Suc n)) \\<le> (tick_count_strict r K\\<^sub>1 n)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n. tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       tick_count_strict r K\\<^sub>2 (Suc n)\n       \\<le> tick_count_strict r K\\<^sub>1 n", "using tick_count_strict_suc[symmetric, of \\<open>r\\<close> \\<open>K\\<^sub>2\\<close>]"], ["proof (prove)\nusing this:\n  \\<forall>n. tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n\n  tick_count r K\\<^sub>2 ?n = tick_count_strict r K\\<^sub>2 (Suc ?n)\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       tick_count_strict r K\\<^sub>2 (Suc n)\n       \\<le> tick_count_strict r K\\<^sub>1 n", "by simp"], ["proof (state)\nthis:\n  \\<forall>n.\n     tick_count_strict r K\\<^sub>2 (Suc n)\n     \\<le> tick_count_strict r K\\<^sub>1 n\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence \\<open>\\<forall>n::nat. (tick_count_strict r K\\<^sub>2 (Suc (Suc n))) \\<le> (tick_count_strict r K\\<^sub>1 (Suc n))\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     tick_count_strict r K\\<^sub>2 (Suc n)\n     \\<le> tick_count_strict r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       tick_count_strict r K\\<^sub>2 (Suc (Suc n))\n       \\<le> tick_count_strict r K\\<^sub>1 (Suc n)", "by simp"], ["proof (state)\nthis:\n  \\<forall>n.\n     tick_count_strict r K\\<^sub>2 (Suc (Suc n))\n     \\<le> tick_count_strict r K\\<^sub>1 (Suc n)\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence \\<open>\\<forall>n::nat. (tick_count r K\\<^sub>2 (Suc n)) \\<le> (tick_count r K\\<^sub>1 n)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     tick_count_strict r K\\<^sub>2 (Suc (Suc n))\n     \\<le> tick_count_strict r K\\<^sub>1 (Suc n)\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       tick_count r K\\<^sub>2 (Suc n) \\<le> tick_count r K\\<^sub>1 n", "using tick_count_strict_suc[symmetric, of \\<open>r\\<close>]"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     tick_count_strict r K\\<^sub>2 (Suc (Suc n))\n     \\<le> tick_count_strict r K\\<^sub>1 (Suc n)\n  tick_count r ?c ?n = tick_count_strict r ?c (Suc ?n)\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       tick_count r K\\<^sub>2 (Suc n) \\<le> tick_count r K\\<^sub>1 n", "by simp"], ["proof (state)\nthis:\n  \\<forall>n. tick_count r K\\<^sub>2 (Suc n) \\<le> tick_count r K\\<^sub>1 n\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence *:\\<open>\\<forall>n::nat. (run_tick_count r K\\<^sub>2 (Suc n)) \\<le> (run_tick_count r K\\<^sub>1 n)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n. tick_count r K\\<^sub>2 (Suc n) \\<le> tick_count r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       #\\<^sub>\\<le> r K\\<^sub>2 Suc n \\<le> #\\<^sub>\\<le> r K\\<^sub>1 n", "by (simp add: tick_count_is_fun)"], ["proof (state)\nthis:\n  \\<forall>n.\n     #\\<^sub>\\<le> r K\\<^sub>2 Suc n \\<le> #\\<^sub>\\<le> r K\\<^sub>1 n\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "from 1"], ["proof (chain)\npicking this:\n  \\<forall>n. tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n", "have \\<open>tick_count r K\\<^sub>2 0 <= tick_count_strict r K\\<^sub>1 0\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n. tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. tick_count r K\\<^sub>2 0 \\<le> tick_count_strict r K\\<^sub>1 0", "by simp"], ["proof (state)\nthis:\n  tick_count r K\\<^sub>2 0 \\<le> tick_count_strict r K\\<^sub>1 0\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "moreover"], ["proof (state)\nthis:\n  tick_count r K\\<^sub>2 0 \\<le> tick_count_strict r K\\<^sub>1 0\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "have \\<open>tick_count_strict r K\\<^sub>1 0 = 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count_strict r K\\<^sub>1 0 = 0", "unfolding tick_count_strict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < 0 \\<and> hamlet (Rep_run r i K\\<^sub>1)} = 0", "by simp"], ["proof (state)\nthis:\n  tick_count_strict r K\\<^sub>1 0 = 0\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "ultimately"], ["proof (chain)\npicking this:\n  tick_count r K\\<^sub>2 0 \\<le> tick_count_strict r K\\<^sub>1 0\n  tick_count_strict r K\\<^sub>1 0 = 0", "have \\<open>tick_count r K\\<^sub>2 0 = 0\\<close>"], ["proof (prove)\nusing this:\n  tick_count r K\\<^sub>2 0 \\<le> tick_count_strict r K\\<^sub>1 0\n  tick_count_strict r K\\<^sub>1 0 = 0\n\ngoal (1 subgoal):\n 1. tick_count r K\\<^sub>2 0 = 0", "by simp"], ["proof (state)\nthis:\n  tick_count r K\\<^sub>2 0 = 0\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence \\<open>\\<not>hamlet ((Rep_run r) 0 K\\<^sub>2)\\<close>"], ["proof (prove)\nusing this:\n  tick_count r K\\<^sub>2 0 = 0\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r 0 K\\<^sub>2)", "unfolding tick_count_def"], ["proof (prove)\nusing this:\n  card {i. i \\<le> 0 \\<and> hamlet (Rep_run r i K\\<^sub>2)} = 0\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r 0 K\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  \\<not> hamlet (Rep_run r 0 K\\<^sub>2)\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "with *"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     #\\<^sub>\\<le> r K\\<^sub>2 Suc n \\<le> #\\<^sub>\\<le> r K\\<^sub>1 n\n  \\<not> hamlet (Rep_run r 0 K\\<^sub>2)", "have \\<open>r \\<in> ?P'\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     #\\<^sub>\\<le> r K\\<^sub>2 Suc n \\<le> #\\<^sub>\\<le> r K\\<^sub>1 n\n  \\<not> hamlet (Rep_run r 0 K\\<^sub>2)\n\ngoal (1 subgoal):\n 1. r \\<in> {\\<rho>.\n             \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n             (\\<forall>n.\n                 #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                 \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}", "by simp"], ["proof (state)\nthis:\n  r \\<in> {\\<rho>.\n           \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n           (\\<forall>n.\n               #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n               \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "}"], ["proof (state)\nthis:\n  ?r2\n  \\<in> {\\<rho>.\n         \\<forall>n.\n            #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n            \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n} \\<Longrightarrow>\n  ?r2\n  \\<in> {\\<rho>.\n         \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n         (\\<forall>n.\n             #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n             \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n\ngoal (2 subgoals):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n 2. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "thus \\<open>?P \\<subseteq> ?P'\\<close>"], ["proof (prove)\nusing this:\n  ?r2\n  \\<in> {\\<rho>.\n         \\<forall>n.\n            #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n            \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n} \\<Longrightarrow>\n  ?r2\n  \\<in> {\\<rho>.\n         \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n         (\\<forall>n.\n             #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n             \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<forall>n.\n        #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n    \\<subseteq> {\\<rho>.\n                 \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n                 (\\<forall>n.\n                     #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                     \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}", ".."], ["proof (state)\nthis:\n  {\\<rho>.\n   \\<forall>n.\n      #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n  \\<subseteq> {\\<rho>.\n               \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n               (\\<forall>n.\n                   #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                   \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "{"], ["proof (state)\nthis:\n  {\\<rho>.\n   \\<forall>n.\n      #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n  \\<subseteq> {\\<rho>.\n               \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n               (\\<forall>n.\n                   #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n                   \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "fix r::\\<open>'a run\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "assume h:\\<open>r \\<in> ?P'\\<close>"], ["proof (state)\nthis:\n  r \\<in> {\\<rho>.\n           \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n           (\\<forall>n.\n               #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n               \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence \\<open>\\<forall>n::nat. (run_tick_count r K\\<^sub>2 (Suc n)) \\<le> (run_tick_count r K\\<^sub>1 n)\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> {\\<rho>.\n           \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n           (\\<forall>n.\n               #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n               \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       #\\<^sub>\\<le> r K\\<^sub>2 Suc n \\<le> #\\<^sub>\\<le> r K\\<^sub>1 n", "by simp"], ["proof (state)\nthis:\n  \\<forall>n.\n     #\\<^sub>\\<le> r K\\<^sub>2 Suc n \\<le> #\\<^sub>\\<le> r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence \\<open>\\<forall>n::nat. (tick_count r K\\<^sub>2 (Suc n)) \\<le> (tick_count r K\\<^sub>1 n)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     #\\<^sub>\\<le> r K\\<^sub>2 Suc n \\<le> #\\<^sub>\\<le> r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       tick_count r K\\<^sub>2 (Suc n) \\<le> tick_count r K\\<^sub>1 n", "by (simp add: tick_count_is_fun)"], ["proof (state)\nthis:\n  \\<forall>n. tick_count r K\\<^sub>2 (Suc n) \\<le> tick_count r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence \\<open>\\<forall>n::nat. (tick_count r K\\<^sub>2 (Suc n)) \\<le> (tick_count_strict r K\\<^sub>1 (Suc n))\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n. tick_count r K\\<^sub>2 (Suc n) \\<le> tick_count r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       tick_count r K\\<^sub>2 (Suc n)\n       \\<le> tick_count_strict r K\\<^sub>1 (Suc n)", "using tick_count_strict_suc[symmetric, of \\<open>r\\<close> \\<open>K\\<^sub>1\\<close>]"], ["proof (prove)\nusing this:\n  \\<forall>n. tick_count r K\\<^sub>2 (Suc n) \\<le> tick_count r K\\<^sub>1 n\n  tick_count r K\\<^sub>1 ?n = tick_count_strict r K\\<^sub>1 (Suc ?n)\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       tick_count r K\\<^sub>2 (Suc n)\n       \\<le> tick_count_strict r K\\<^sub>1 (Suc n)", "by simp"], ["proof (state)\nthis:\n  \\<forall>n.\n     tick_count r K\\<^sub>2 (Suc n)\n     \\<le> tick_count_strict r K\\<^sub>1 (Suc n)\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence *:\\<open>\\<forall>n. n > 0 \\<longrightarrow> (tick_count r K\\<^sub>2 n) \\<le> (tick_count_strict r K\\<^sub>1 n)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     tick_count r K\\<^sub>2 (Suc n)\n     \\<le> tick_count_strict r K\\<^sub>1 (Suc n)\n\ngoal (1 subgoal):\n 1. \\<forall>n>0.\n       tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n", "using gr0_implies_Suc"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     tick_count r K\\<^sub>2 (Suc n)\n     \\<le> tick_count_strict r K\\<^sub>1 (Suc n)\n  0 < ?n \\<Longrightarrow> \\<exists>m. ?n = Suc m\n\ngoal (1 subgoal):\n 1. \\<forall>n>0.\n       tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n", "by blast"], ["proof (state)\nthis:\n  \\<forall>n>0.\n     tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "have \\<open>tick_count_strict r K\\<^sub>1 0 = 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count_strict r K\\<^sub>1 0 = 0", "unfolding tick_count_strict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < 0 \\<and> hamlet (Rep_run r i K\\<^sub>1)} = 0", "by simp"], ["proof (state)\nthis:\n  tick_count_strict r K\\<^sub>1 0 = 0\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "moreover"], ["proof (state)\nthis:\n  tick_count_strict r K\\<^sub>1 0 = 0\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "from h"], ["proof (chain)\npicking this:\n  r \\<in> {\\<rho>.\n           \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n           (\\<forall>n.\n               #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n               \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}", "have \\<open>\\<not>hamlet ((Rep_run r) 0 K\\<^sub>2)\\<close>"], ["proof (prove)\nusing this:\n  r \\<in> {\\<rho>.\n           \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n           (\\<forall>n.\n               #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n               \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r 0 K\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  \\<not> hamlet (Rep_run r 0 K\\<^sub>2)\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence \\<open>tick_count r K\\<^sub>2 0 = 0\\<close>"], ["proof (prove)\nusing this:\n  \\<not> hamlet (Rep_run r 0 K\\<^sub>2)\n\ngoal (1 subgoal):\n 1. tick_count r K\\<^sub>2 0 = 0", "unfolding tick_count_def"], ["proof (prove)\nusing this:\n  \\<not> hamlet (Rep_run r 0 K\\<^sub>2)\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> 0 \\<and> hamlet (Rep_run r i K\\<^sub>2)} = 0", "by auto"], ["proof (state)\nthis:\n  tick_count r K\\<^sub>2 0 = 0\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "ultimately"], ["proof (chain)\npicking this:\n  tick_count_strict r K\\<^sub>1 0 = 0\n  tick_count r K\\<^sub>2 0 = 0", "have \\<open>tick_count r K\\<^sub>2 0 \\<le> tick_count_strict r K\\<^sub>1 0\\<close>"], ["proof (prove)\nusing this:\n  tick_count_strict r K\\<^sub>1 0 = 0\n  tick_count r K\\<^sub>2 0 = 0\n\ngoal (1 subgoal):\n 1. tick_count r K\\<^sub>2 0 \\<le> tick_count_strict r K\\<^sub>1 0", "by simp"], ["proof (state)\nthis:\n  tick_count r K\\<^sub>2 0 \\<le> tick_count_strict r K\\<^sub>1 0\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "from zero_gt_all[of \\<open>\\<lambda>n. tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n\\<close>, OF this ] *"], ["proof (chain)\npicking this:\n  (\\<And>n.\n      0 < n \\<Longrightarrow>\n      tick_count r K\\<^sub>2 n\n      \\<le> tick_count_strict r K\\<^sub>1 n) \\<Longrightarrow>\n  tick_count r K\\<^sub>2 ?n \\<le> tick_count_strict r K\\<^sub>1 ?n\n  \\<forall>n>0.\n     tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n", "have \\<open>\\<forall>n. (tick_count r K\\<^sub>2 n) \\<le> (tick_count_strict r K\\<^sub>1 n)\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>n.\n      0 < n \\<Longrightarrow>\n      tick_count r K\\<^sub>2 n\n      \\<le> tick_count_strict r K\\<^sub>1 n) \\<Longrightarrow>\n  tick_count r K\\<^sub>2 ?n \\<le> tick_count_strict r K\\<^sub>1 ?n\n  \\<forall>n>0.\n     tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. \\<forall>n.\n       tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n", "by simp"], ["proof (state)\nthis:\n  \\<forall>n. tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence \\<open>\\<forall>n. (run_tick_count r K\\<^sub>2 n) \\<le> (run_tick_count_strictly r K\\<^sub>1 n)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n. tick_count r K\\<^sub>2 n \\<le> tick_count_strict r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. \\<forall>n. #\\<^sub>\\<le> r K\\<^sub>2 n \\<le> #\\<^sub>< r K\\<^sub>1 n", "by (simp add: tick_count_is_fun tick_count_strict_is_fun)"], ["proof (state)\nthis:\n  \\<forall>n. #\\<^sub>\\<le> r K\\<^sub>2 n \\<le> #\\<^sub>< r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "hence \\<open>r \\<in> ?P\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n. #\\<^sub>\\<le> r K\\<^sub>2 n \\<le> #\\<^sub>< r K\\<^sub>1 n\n\ngoal (1 subgoal):\n 1. r \\<in> {\\<rho>.\n             \\<forall>n.\n                #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", ".."], ["proof (state)\nthis:\n  r \\<in> {\\<rho>.\n           \\<forall>n.\n              #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n              \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "}"], ["proof (state)\nthis:\n  ?r2\n  \\<in> {\\<rho>.\n         \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n         (\\<forall>n.\n             #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n             \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)} \\<Longrightarrow>\n  ?r2\n  \\<in> {\\<rho>.\n         \\<forall>n.\n            #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n            \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", "thus \\<open>?P' \\<subseteq> ?P\\<close>"], ["proof (prove)\nusing this:\n  ?r2\n  \\<in> {\\<rho>.\n         \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n         (\\<forall>n.\n             #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n             \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)} \\<Longrightarrow>\n  ?r2\n  \\<in> {\\<rho>.\n         \\<forall>n.\n            #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n            \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n\ngoal (1 subgoal):\n 1. {\\<rho>.\n     \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n     (\\<forall>n.\n         #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n         \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n    \\<subseteq> {\\<rho>.\n                 \\<forall>n.\n                    #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                    \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}", ".."], ["proof (state)\nthis:\n  {\\<rho>.\n   \\<not> hamlet (Rep_run \\<rho> 0 K\\<^sub>2) \\<and>\n   (\\<forall>n.\n       #\\<^sub>\\<le> \\<rho> K\\<^sub>2 Suc n\n       \\<le> #\\<^sub>\\<le> \\<rho> K\\<^sub>1 n)}\n  \\<subseteq> {\\<rho>.\n               \\<forall>n.\n                  #\\<^sub>\\<le> \\<rho> K\\<^sub>2 n\n                  \\<le> #\\<^sub>< \\<rho> K\\<^sub>1 n}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Some properties of @{const \\<open>run_tick_count\\<close>}, @{const \\<open>tick_count\\<close>} \n  and @{const \\<open>Suc\\<close>}:\n\\<close>"], ["", "lemma run_tick_count_suc:\n  \\<open>run_tick_count r c (Suc n) = (if hamlet ((Rep_run r) (Suc n) c)\n                                 then Suc (run_tick_count r c n)\n                                 else run_tick_count r c n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r c Suc n =\n    (if hamlet (Rep_run r (Suc n) c) then Suc #\\<^sub>\\<le> r c n\n     else #\\<^sub>\\<le> r c n)", "by simp"], ["", "corollary tick_count_suc:\n  \\<open>tick_count r c (Suc n) = (if hamlet ((Rep_run r) (Suc n) c)\n                             then Suc (tick_count r c n)\n                             else tick_count r c n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count r c (Suc n) =\n    (if hamlet (Rep_run r (Suc n) c) then Suc (tick_count r c n)\n     else tick_count r c n)", "by (simp add: tick_count_is_fun)"], ["", "text \\<open>\n  Some generic properties on the cardinal of sets of nat that we will need later.\n\\<close>"], ["", "lemma card_suc:\n  \\<open>card {i. i \\<le> (Suc n) \\<and> P i} = card {i. i \\<le> n \\<and> P i} + card {i. i = (Suc n) \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i \\<le> Suc n \\<and> P i} =\n    card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {i. i \\<le> Suc n \\<and> P i} =\n    card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}", "have \\<open>{i. i \\<le> n \\<and> P i} \\<inter> {i. i = (Suc n) \\<and> P i} = {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> n \\<and> P i} \\<inter> {i. i = Suc n \\<and> P i} = {}", "by auto"], ["proof (state)\nthis:\n  {i. i \\<le> n \\<and> P i} \\<inter> {i. i = Suc n \\<and> P i} = {}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> Suc n \\<and> P i} =\n    card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}", "moreover"], ["proof (state)\nthis:\n  {i. i \\<le> n \\<and> P i} \\<inter> {i. i = Suc n \\<and> P i} = {}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> Suc n \\<and> P i} =\n    card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}", "have \\<open>{i. i \\<le> n \\<and> P i} \\<union> {i. i = (Suc n) \\<and> P i}\n               = {i. i \\<le> (Suc n) \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> n \\<and> P i} \\<union> {i. i = Suc n \\<and> P i} =\n    {i. i \\<le> Suc n \\<and> P i}", "by auto"], ["proof (state)\nthis:\n  {i. i \\<le> n \\<and> P i} \\<union> {i. i = Suc n \\<and> P i} =\n  {i. i \\<le> Suc n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> Suc n \\<and> P i} =\n    card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}", "moreover"], ["proof (state)\nthis:\n  {i. i \\<le> n \\<and> P i} \\<union> {i. i = Suc n \\<and> P i} =\n  {i. i \\<le> Suc n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> Suc n \\<and> P i} =\n    card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}", "have \\<open>finite {i. i \\<le> n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. i \\<le> n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  finite {i. i \\<le> n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> Suc n \\<and> P i} =\n    card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}", "moreover"], ["proof (state)\nthis:\n  finite {i. i \\<le> n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> Suc n \\<and> P i} =\n    card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}", "have \\<open>finite {i. i = (Suc n) \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. i = Suc n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  finite {i. i = Suc n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> Suc n \\<and> P i} =\n    card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}", "ultimately"], ["proof (chain)\npicking this:\n  {i. i \\<le> n \\<and> P i} \\<inter> {i. i = Suc n \\<and> P i} = {}\n  {i. i \\<le> n \\<and> P i} \\<union> {i. i = Suc n \\<and> P i} =\n  {i. i \\<le> Suc n \\<and> P i}\n  finite {i. i \\<le> n \\<and> P i}\n  finite {i. i = Suc n \\<and> P i}", "show ?thesis"], ["proof (prove)\nusing this:\n  {i. i \\<le> n \\<and> P i} \\<inter> {i. i = Suc n \\<and> P i} = {}\n  {i. i \\<le> n \\<and> P i} \\<union> {i. i = Suc n \\<and> P i} =\n  {i. i \\<le> Suc n \\<and> P i}\n  finite {i. i \\<le> n \\<and> P i}\n  finite {i. i = Suc n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> Suc n \\<and> P i} =\n    card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}", "using card_Un_disjoint[of \\<open>{i. i \\<le> n \\<and> P i}\\<close> \\<open>{i. i = Suc n \\<and> P i}\\<close>]"], ["proof (prove)\nusing this:\n  {i. i \\<le> n \\<and> P i} \\<inter> {i. i = Suc n \\<and> P i} = {}\n  {i. i \\<le> n \\<and> P i} \\<union> {i. i = Suc n \\<and> P i} =\n  {i. i \\<le> Suc n \\<and> P i}\n  finite {i. i \\<le> n \\<and> P i}\n  finite {i. i = Suc n \\<and> P i}\n  \\<lbrakk>finite {i. i \\<le> n \\<and> P i};\n   finite {i. i = Suc n \\<and> P i};\n   {i. i \\<le> n \\<and> P i} \\<inter> {i. i = Suc n \\<and> P i} =\n   {}\\<rbrakk>\n  \\<Longrightarrow> card\n                     ({i. i \\<le> n \\<and> P i} \\<union>\n                      {i. i = Suc n \\<and> P i}) =\n                    card {i. i \\<le> n \\<and> P i} +\n                    card {i. i = Suc n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> Suc n \\<and> P i} =\n    card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  card {i. i \\<le> Suc n \\<and> P i} =\n  card {i. i \\<le> n \\<and> P i} + card {i. i = Suc n \\<and> P i}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_le_leq:\n  assumes \\<open>m < n\\<close>\n    shows \\<open>card {i::nat. m < i \\<and> i \\<le> n \\<and> P i}\n         = card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n    card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n    card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}", "have \\<open>{i::nat. m < i \\<and> i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. m < i \\<and> i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}", "by auto"], ["proof (state)\nthis:\n  {i. m < i \\<and> i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\n\ngoal (1 subgoal):\n 1. card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n    card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}", "moreover"], ["proof (state)\nthis:\n  {i. m < i \\<and> i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\n\ngoal (1 subgoal):\n 1. card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n    card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}", "with assms"], ["proof (chain)\npicking this:\n  m < n\n  {i. m < i \\<and> i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}", "have\n    \\<open>{i::nat. m < i \\<and> i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} = {i. m < i \\<and> i \\<le> n \\<and> P i}\\<close>"], ["proof (prove)\nusing this:\n  m < n\n  {i. m < i \\<and> i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\n\ngoal (1 subgoal):\n 1. {i. m < i \\<and> i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n    {i. m < i \\<and> i \\<le> n \\<and> P i}", "by auto"], ["proof (state)\nthis:\n  {i. m < i \\<and> i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n  {i. m < i \\<and> i \\<le> n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n    card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}", "moreover"], ["proof (state)\nthis:\n  {i. m < i \\<and> i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n  {i. m < i \\<and> i \\<le> n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n    card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}", "have \\<open>finite {i. m < i \\<and> i < n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. m < i \\<and> i < n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  finite {i. m < i \\<and> i < n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n    card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}", "moreover"], ["proof (state)\nthis:\n  finite {i. m < i \\<and> i < n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n    card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}", "have \\<open>finite {i. i = n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. i = n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  finite {i. i = n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n    card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}", "ultimately"], ["proof (chain)\npicking this:\n  {i. m < i \\<and> i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\n  {i. m < i \\<and> i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n  {i. m < i \\<and> i \\<le> n \\<and> P i}\n  finite {i. m < i \\<and> i < n \\<and> P i}\n  finite {i. i = n \\<and> P i}", "show ?thesis"], ["proof (prove)\nusing this:\n  {i. m < i \\<and> i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\n  {i. m < i \\<and> i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n  {i. m < i \\<and> i \\<le> n \\<and> P i}\n  finite {i. m < i \\<and> i < n \\<and> P i}\n  finite {i. i = n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n    card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}", "using card_Un_disjoint[of \\<open>{i. m < i \\<and> i < n \\<and> P i}\\<close> \\<open>{i. i = n \\<and> P i}\\<close>]"], ["proof (prove)\nusing this:\n  {i. m < i \\<and> i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\n  {i. m < i \\<and> i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n  {i. m < i \\<and> i \\<le> n \\<and> P i}\n  finite {i. m < i \\<and> i < n \\<and> P i}\n  finite {i. i = n \\<and> P i}\n  \\<lbrakk>finite {i. m < i \\<and> i < n \\<and> P i};\n   finite {i. i = n \\<and> P i};\n   {i. m < i \\<and> i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} =\n   {}\\<rbrakk>\n  \\<Longrightarrow> card\n                     ({i. m < i \\<and> i < n \\<and> P i} \\<union>\n                      {i. i = n \\<and> P i}) =\n                    card {i. m < i \\<and> i < n \\<and> P i} +\n                    card {i. i = n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n    card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  card {i. m < i \\<and> i \\<le> n \\<and> P i} =\n  card {i. m < i \\<and> i < n \\<and> P i} + card {i. i = n \\<and> P i}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_le_leq_0:\n  \\<open>card {i::nat. i \\<le> n \\<and> P i} = card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> P i} =\n    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> P i} =\n    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}", "have \\<open>{i::nat. i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}", "by auto"], ["proof (state)\nthis:\n  {i. i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> P i} =\n    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}", "moreover"], ["proof (state)\nthis:\n  {i. i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> P i} =\n    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}", "have \\<open>{i. i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} = {i. i \\<le> n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n    {i. i \\<le> n \\<and> P i}", "by auto"], ["proof (state)\nthis:\n  {i. i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n  {i. i \\<le> n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> P i} =\n    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}", "moreover"], ["proof (state)\nthis:\n  {i. i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n  {i. i \\<le> n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> P i} =\n    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}", "have \\<open>finite {i. i < n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. i < n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  finite {i. i < n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> P i} =\n    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}", "moreover"], ["proof (state)\nthis:\n  finite {i. i < n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> P i} =\n    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}", "have \\<open>finite {i. i = n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. i = n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  finite {i. i = n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> P i} =\n    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}", "ultimately"], ["proof (chain)\npicking this:\n  {i. i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\n  {i. i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n  {i. i \\<le> n \\<and> P i}\n  finite {i. i < n \\<and> P i}\n  finite {i. i = n \\<and> P i}", "show ?thesis"], ["proof (prove)\nusing this:\n  {i. i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\n  {i. i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n  {i. i \\<le> n \\<and> P i}\n  finite {i. i < n \\<and> P i}\n  finite {i. i = n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> P i} =\n    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}", "using card_Un_disjoint[of \\<open>{i. i < n \\<and> P i}\\<close> \\<open>{i. i = n \\<and> P i}\\<close>]"], ["proof (prove)\nusing this:\n  {i. i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\n  {i. i < n \\<and> P i} \\<union> {i. i = n \\<and> P i} =\n  {i. i \\<le> n \\<and> P i}\n  finite {i. i < n \\<and> P i}\n  finite {i. i = n \\<and> P i}\n  \\<lbrakk>finite {i. i < n \\<and> P i}; finite {i. i = n \\<and> P i};\n   {i. i < n \\<and> P i} \\<inter> {i. i = n \\<and> P i} = {}\\<rbrakk>\n  \\<Longrightarrow> card\n                     ({i. i < n \\<and> P i} \\<union>\n                      {i. i = n \\<and> P i}) =\n                    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> P i} =\n    card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  card {i. i \\<le> n \\<and> P i} =\n  card {i. i < n \\<and> P i} + card {i. i = n \\<and> P i}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_mnm:\n  assumes \\<open>m < n\\<close>\n    shows \\<open>card {i::nat. i < n \\<and> P i}\n         = card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}", "have 1:\\<open>{i::nat. i \\<le> m \\<and> P i} \\<inter> {i. m < i \\<and> i < n \\<and> P i} = {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> m \\<and> P i} \\<inter> {i. m < i \\<and> i < n \\<and> P i} =\n    {}", "by auto"], ["proof (state)\nthis:\n  {i. i \\<le> m \\<and> P i} \\<inter> {i. m < i \\<and> i < n \\<and> P i} = {}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}", "from assms"], ["proof (chain)\npicking this:\n  m < n", "have \\<open>\\<forall>i::nat. i < n = (i \\<le> m) \\<or> (m < i \\<and> i < n)\\<close>"], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<forall>i. (i < n) = (i \\<le> m) \\<or> m < i \\<and> i < n", "using less_trans"], ["proof (prove)\nusing this:\n  m < n\n  \\<lbrakk>?x < ?y; ?y < ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (1 subgoal):\n 1. \\<forall>i. (i < n) = (i \\<le> m) \\<or> m < i \\<and> i < n", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. (i < n) = (i \\<le> m) \\<or> m < i \\<and> i < n\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}", "hence 2:\n    \\<open>{i::nat. i < n \\<and> P i} = {i. i \\<le> m \\<and> P i} \\<union> {i. m < i \\<and> i < n \\<and> P i}\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i. (i < n) = (i \\<le> m) \\<or> m < i \\<and> i < n\n\ngoal (1 subgoal):\n 1. {i. i < n \\<and> P i} =\n    {i. i \\<le> m \\<and> P i} \\<union> {i. m < i \\<and> i < n \\<and> P i}", "by blast"], ["proof (state)\nthis:\n  {i. i < n \\<and> P i} =\n  {i. i \\<le> m \\<and> P i} \\<union> {i. m < i \\<and> i < n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}", "have 3:\\<open>finite {i. i \\<le> m \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. i \\<le> m \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  finite {i. i \\<le> m \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}", "have 4:\\<open>finite {i. m < i \\<and> i < n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. m < i \\<and> i < n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  finite {i. m < i \\<and> i < n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}", "from card_Un_disjoint[OF 3 4 1] 2"], ["proof (chain)\npicking this:\n  card\n   ({i. i \\<le> m \\<and> P i} \\<union> {i. m < i \\<and> i < n \\<and> P i}) =\n  card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}\n  {i. i < n \\<and> P i} =\n  {i. i \\<le> m \\<and> P i} \\<union> {i. m < i \\<and> i < n \\<and> P i}", "show ?thesis"], ["proof (prove)\nusing this:\n  card\n   ({i. i \\<le> m \\<and> P i} \\<union> {i. m < i \\<and> i < n \\<and> P i}) =\n  card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}\n  {i. i < n \\<and> P i} =\n  {i. i \\<le> m \\<and> P i} \\<union> {i. m < i \\<and> i < n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  card {i. i < n \\<and> P i} =\n  card {i. i \\<le> m \\<and> P i} + card {i. m < i \\<and> i < n \\<and> P i}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_mnm':\n  assumes \\<open>m < n\\<close>\n    shows \\<open>card {i::nat. i < n \\<and> P i}\n         = card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}", "have 1:\\<open>{i::nat. i < m \\<and> P i} \\<inter> {i. m \\<le> i \\<and> i < n \\<and> P i} = {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < m \\<and> P i} \\<inter> {i. m \\<le> i \\<and> i < n \\<and> P i} =\n    {}", "by auto"], ["proof (state)\nthis:\n  {i. i < m \\<and> P i} \\<inter> {i. m \\<le> i \\<and> i < n \\<and> P i} = {}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}", "from assms"], ["proof (chain)\npicking this:\n  m < n", "have \\<open>\\<forall>i::nat. i < n = (i < m) \\<or> (m \\<le> i \\<and> i < n)\\<close>"], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. \\<forall>i. (i < n) = (i < m) \\<or> m \\<le> i \\<and> i < n", "using less_trans"], ["proof (prove)\nusing this:\n  m < n\n  \\<lbrakk>?x < ?y; ?y < ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (1 subgoal):\n 1. \\<forall>i. (i < n) = (i < m) \\<or> m \\<le> i \\<and> i < n", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. (i < n) = (i < m) \\<or> m \\<le> i \\<and> i < n\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}", "hence 2:\n    \\<open>{i::nat. i < n \\<and> P i} = {i. i < m \\<and> P i} \\<union> {i. m \\<le> i \\<and> i < n \\<and> P i}\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i. (i < n) = (i < m) \\<or> m \\<le> i \\<and> i < n\n\ngoal (1 subgoal):\n 1. {i. i < n \\<and> P i} =\n    {i. i < m \\<and> P i} \\<union> {i. m \\<le> i \\<and> i < n \\<and> P i}", "by blast"], ["proof (state)\nthis:\n  {i. i < n \\<and> P i} =\n  {i. i < m \\<and> P i} \\<union> {i. m \\<le> i \\<and> i < n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}", "have 3:\\<open>finite {i. i < m \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. i < m \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  finite {i. i < m \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}", "have 4:\\<open>finite {i. m \\<le> i \\<and> i < n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. m \\<le> i \\<and> i < n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  finite {i. m \\<le> i \\<and> i < n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}", "from card_Un_disjoint[OF 3 4 1] 2"], ["proof (chain)\npicking this:\n  card\n   ({i. i < m \\<and> P i} \\<union> {i. m \\<le> i \\<and> i < n \\<and> P i}) =\n  card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}\n  {i. i < n \\<and> P i} =\n  {i. i < m \\<and> P i} \\<union> {i. m \\<le> i \\<and> i < n \\<and> P i}", "show ?thesis"], ["proof (prove)\nusing this:\n  card\n   ({i. i < m \\<and> P i} \\<union> {i. m \\<le> i \\<and> i < n \\<and> P i}) =\n  card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}\n  {i. i < n \\<and> P i} =\n  {i. i < m \\<and> P i} \\<union> {i. m \\<le> i \\<and> i < n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> P i} =\n    card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  card {i. i < n \\<and> P i} =\n  card {i. i < m \\<and> P i} + card {i. m \\<le> i \\<and> i < n \\<and> P i}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nat_interval_union:\n  assumes \\<open>m \\<le> n\\<close>\n    shows \\<open>{i::nat. i \\<le> n \\<and> P i}\n         = {i::nat. i \\<le> m \\<and> P i} \\<union> {i::nat. m < i \\<and> i \\<le> n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> n \\<and> P i} =\n    {i. i \\<le> m \\<and> P i} \\<union>\n    {i. m < i \\<and> i \\<le> n \\<and> P i}", "using assms le_cases nat_less_le"], ["proof (prove)\nusing this:\n  m \\<le> n\n  \\<lbrakk>?x \\<le> ?y \\<Longrightarrow> ?P;\n   ?y \\<le> ?x \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  (?m < ?n) = (?m \\<le> ?n \\<and> ?m \\<noteq> ?n)\n\ngoal (1 subgoal):\n 1. {i. i \\<le> n \\<and> P i} =\n    {i. i \\<le> m \\<and> P i} \\<union>\n    {i. m < i \\<and> i \\<le> n \\<and> P i}", "by auto"], ["", "lemma card_sing_prop:\\<open>card {i. i = n \\<and> P i} = (if P n then 1 else 0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i = n \\<and> P i} = (if P n then 1 else 0)", "proof (cases \\<open>P n\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. P n \\<Longrightarrow>\n    card {i. i = n \\<and> P i} = (if P n then 1 else 0)\n 2. \\<not> P n \\<Longrightarrow>\n    card {i. i = n \\<and> P i} = (if P n then 1 else 0)", "case True"], ["proof (state)\nthis:\n  P n\n\ngoal (2 subgoals):\n 1. P n \\<Longrightarrow>\n    card {i. i = n \\<and> P i} = (if P n then 1 else 0)\n 2. \\<not> P n \\<Longrightarrow>\n    card {i. i = n \\<and> P i} = (if P n then 1 else 0)", "hence \\<open>{i. i = n \\<and> P i} = {n}\\<close>"], ["proof (prove)\nusing this:\n  P n\n\ngoal (1 subgoal):\n 1. {i. i = n \\<and> P i} = {n}", "by (simp add: Collect_conv_if)"], ["proof (state)\nthis:\n  {i. i = n \\<and> P i} = {n}\n\ngoal (2 subgoals):\n 1. P n \\<Longrightarrow>\n    card {i. i = n \\<and> P i} = (if P n then 1 else 0)\n 2. \\<not> P n \\<Longrightarrow>\n    card {i. i = n \\<and> P i} = (if P n then 1 else 0)", "with \\<open>P n\\<close>"], ["proof (chain)\npicking this:\n  P n\n  {i. i = n \\<and> P i} = {n}", "show ?thesis"], ["proof (prove)\nusing this:\n  P n\n  {i. i = n \\<and> P i} = {n}\n\ngoal (1 subgoal):\n 1. card {i. i = n \\<and> P i} = (if P n then 1 else 0)", "by simp"], ["proof (state)\nthis:\n  card {i. i = n \\<and> P i} = (if P n then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<not> P n \\<Longrightarrow>\n    card {i. i = n \\<and> P i} = (if P n then 1 else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> P n \\<Longrightarrow>\n    card {i. i = n \\<and> P i} = (if P n then 1 else 0)", "case False"], ["proof (state)\nthis:\n  \\<not> P n\n\ngoal (1 subgoal):\n 1. \\<not> P n \\<Longrightarrow>\n    card {i. i = n \\<and> P i} = (if P n then 1 else 0)", "hence \\<open>{i. i = n \\<and> P i} = {}\\<close>"], ["proof (prove)\nusing this:\n  \\<not> P n\n\ngoal (1 subgoal):\n 1. {i. i = n \\<and> P i} = {}", "by (simp add: Collect_conv_if)"], ["proof (state)\nthis:\n  {i. i = n \\<and> P i} = {}\n\ngoal (1 subgoal):\n 1. \\<not> P n \\<Longrightarrow>\n    card {i. i = n \\<and> P i} = (if P n then 1 else 0)", "with \\<open>\\<not>P n\\<close>"], ["proof (chain)\npicking this:\n  \\<not> P n\n  {i. i = n \\<and> P i} = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> P n\n  {i. i = n \\<and> P i} = {}\n\ngoal (1 subgoal):\n 1. card {i. i = n \\<and> P i} = (if P n then 1 else 0)", "by simp"], ["proof (state)\nthis:\n  card {i. i = n \\<and> P i} = (if P n then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_prop_mono:\n  assumes \\<open>m \\<le> n\\<close>\n    shows \\<open>card {i::nat. i \\<le> m \\<and> P i} \\<le> card {i. i \\<le> n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i \\<le> m \\<and> P i} \\<le> card {i. i \\<le> n \\<and> P i}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {i. i \\<le> m \\<and> P i} \\<le> card {i. i \\<le> n \\<and> P i}", "from assms"], ["proof (chain)\npicking this:\n  m \\<le> n", "have \\<open>{i. i \\<le> m \\<and> P i} \\<subseteq> {i. i \\<le> n \\<and> P i}\\<close>"], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. {i. i \\<le> m \\<and> P i} \\<subseteq> {i. i \\<le> n \\<and> P i}", "by auto"], ["proof (state)\nthis:\n  {i. i \\<le> m \\<and> P i} \\<subseteq> {i. i \\<le> n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> m \\<and> P i} \\<le> card {i. i \\<le> n \\<and> P i}", "moreover"], ["proof (state)\nthis:\n  {i. i \\<le> m \\<and> P i} \\<subseteq> {i. i \\<le> n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> m \\<and> P i} \\<le> card {i. i \\<le> n \\<and> P i}", "have \\<open>finite {i. i \\<le> n \\<and> P i}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. i \\<le> n \\<and> P i}", "by simp"], ["proof (state)\nthis:\n  finite {i. i \\<le> n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> m \\<and> P i} \\<le> card {i. i \\<le> n \\<and> P i}", "ultimately"], ["proof (chain)\npicking this:\n  {i. i \\<le> m \\<and> P i} \\<subseteq> {i. i \\<le> n \\<and> P i}\n  finite {i. i \\<le> n \\<and> P i}", "show ?thesis"], ["proof (prove)\nusing this:\n  {i. i \\<le> m \\<and> P i} \\<subseteq> {i. i \\<le> n \\<and> P i}\n  finite {i. i \\<le> n \\<and> P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> m \\<and> P i} \\<le> card {i. i \\<le> n \\<and> P i}", "by (simp add: card_mono)"], ["proof (state)\nthis:\n  card {i. i \\<le> m \\<and> P i} \\<le> card {i. i \\<le> n \\<and> P i}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  In a dilated run, no tick occurs strictly between two successive instants that \n  are the images by @{term \\<open>f\\<close>} of instants of the original run.\n\\<close>"], ["", "lemma no_tick_before_suc:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>(f n) < k \\<and> k < (f (Suc n))\\<close>\n    shows \\<open>\\<not>hamlet ((Rep_run r) k c)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "from assms(1)"], ["proof (chain)\npicking this:\n  dilating f sub r", "have smf:\\<open>strict_mono f\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. strict_mono f", "by (simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "{"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "assume h:\\<open>f n < k \\<and> k < f (Suc n) \\<and> hamlet ((Rep_run r) k c)\\<close>"], ["proof (state)\nthis:\n  f n < k \\<and> k < f (Suc n) \\<and> hamlet (Rep_run r k c)\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "hence \\<open>\\<exists>k\\<^sub>0. f k\\<^sub>0 = k\\<close>"], ["proof (prove)\nusing this:\n  f n < k \\<and> k < f (Suc n) \\<and> hamlet (Rep_run r k c)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0. f k\\<^sub>0 = k", "using assms(1) dilating_def dilating_fun_def"], ["proof (prove)\nusing this:\n  f n < k \\<and> k < f (Suc n) \\<and> hamlet (Rep_run r k c)\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<^sub>0. f k\\<^sub>0 = k", "by blast"], ["proof (state)\nthis:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "from this"], ["proof (chain)\npicking this:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k", "obtain k\\<^sub>0 where \\<open>f k\\<^sub>0 = k\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k\\<^sub>0. f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. (\\<And>k\\<^sub>0.\n        f k\\<^sub>0 = k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "with h"], ["proof (chain)\npicking this:\n  f n < k \\<and> k < f (Suc n) \\<and> hamlet (Rep_run r k c)\n  f k\\<^sub>0 = k", "have \\<open>f n < f k\\<^sub>0 \\<and> f k\\<^sub>0 < f (Suc n)\\<close>"], ["proof (prove)\nusing this:\n  f n < k \\<and> k < f (Suc n) \\<and> hamlet (Rep_run r k c)\n  f k\\<^sub>0 = k\n\ngoal (1 subgoal):\n 1. f n < f k\\<^sub>0 \\<and> f k\\<^sub>0 < f (Suc n)", "by simp"], ["proof (state)\nthis:\n  f n < f k\\<^sub>0 \\<and> f k\\<^sub>0 < f (Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "hence False"], ["proof (prove)\nusing this:\n  f n < f k\\<^sub>0 \\<and> f k\\<^sub>0 < f (Suc n)\n\ngoal (1 subgoal):\n 1. False", "using smf not_less_eq strict_mono_less"], ["proof (prove)\nusing this:\n  f n < f k\\<^sub>0 \\<and> f k\\<^sub>0 < f (Suc n)\n  strict_mono f\n  (\\<not> ?m < ?n) = (?n < Suc ?m)\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "}"], ["proof (state)\nthis:\n  f n < ?ka2 \\<and>\n  ?ka2 < f (Suc n) \\<and> hamlet (Rep_run r ?ka2 c) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f n < ?ka2 \\<and>\n  ?ka2 < f (Suc n) \\<and> hamlet (Rep_run r ?ka2 c) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "using assms(2)"], ["proof (prove)\nusing this:\n  f n < ?ka2 \\<and>\n  ?ka2 < f (Suc n) \\<and> hamlet (Rep_run r ?ka2 c) \\<Longrightarrow>\n  False\n  f n < k \\<and> k < f (Suc n)\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r k c)", "by blast"], ["proof (state)\nthis:\n  \\<not> hamlet (Rep_run r k c)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  From this, we show that the number of ticks on any clock at @{term \\<open>f (Suc n)\\<close>}\n  depends only on the number of ticks on this clock at @{term \\<open>f n\\<close>} and whether\n  this clock ticks at @{term \\<open>f (Suc n)\\<close>}.\n  All the instants in between are stuttering instants.\n\\<close>"], ["", "lemma tick_count_fsuc:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count r c (f (Suc n))\n         = tick_count r c (f n) + card {k. k = f (Suc n) \\<and> hamlet ((Rep_run r) k c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "have smf:\\<open>strict_mono f\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_mono f", "using assms dilating_def dilating_fun_def"], ["proof (prove)\nusing this:\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n\ngoal (1 subgoal):\n 1. strict_mono f", "by blast"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "moreover"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "have \\<open>finite {k. k \\<le> f n \\<and> hamlet ((Rep_run r) k c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)}", "by simp"], ["proof (state)\nthis:\n  finite {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "moreover"], ["proof (state)\nthis:\n  finite {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "have *:\\<open>finite {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet ((Rep_run r) k c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}", "by simp"], ["proof (state)\nthis:\n  finite {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "ultimately"], ["proof (chain)\npicking this:\n  strict_mono f\n  finite {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  finite {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}", "have \\<open>{k. k \\<le> f (Suc n) \\<and> hamlet ((Rep_run r) k c)} =\n                        {k. k \\<le> f n \\<and> hamlet ((Rep_run r) k c)}\n                      \\<union> {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet ((Rep_run r) k c)}\\<close>"], ["proof (prove)\nusing this:\n  strict_mono f\n  finite {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n  finite {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. {k. k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n    {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<union>\n    {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}", "by (simp add: nat_interval_union strict_mono_less_eq)"], ["proof (state)\nthis:\n  {k. k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<union>\n  {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "moreover"], ["proof (state)\nthis:\n  {k. k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<union>\n  {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "have \\<open>{k. k \\<le> f n \\<and> hamlet ((Rep_run r) k c)}\n                  \\<inter> {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet ((Rep_run r) k c)} = {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<inter>\n    {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n    {}", "by auto"], ["proof (state)\nthis:\n  {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<inter>\n  {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  {}\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "ultimately"], ["proof (chain)\npicking this:\n  {k. k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<union>\n  {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}\n  {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<inter>\n  {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  {}", "have \\<open>card {k. k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n                      card {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)}\n                    + card {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}\\<close>"], ["proof (prove)\nusing this:\n  {k. k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<union>\n  {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}\n  {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} \\<inter>\n  {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  {}\n\ngoal (1 subgoal):\n 1. card {k. k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n    card {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} +\n    card {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}", "by (simp add: * card_Un_disjoint)"], ["proof (state)\nthis:\n  card {k. k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  card {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} +\n  card {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "moreover"], ["proof (state)\nthis:\n  card {k. k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  card {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} +\n  card {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "from no_tick_before_suc[OF assms]"], ["proof (chain)\npicking this:\n  f ?n < ?k \\<and> ?k < f (Suc ?n) \\<Longrightarrow>\n  \\<not> hamlet (Rep_run r ?k ?c)", "have\n    \\<open>{k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet ((Rep_run r) k c)} =\n            {k. k = f (Suc n) \\<and> hamlet ((Rep_run r) k c)}\\<close>"], ["proof (prove)\nusing this:\n  f ?n < ?k \\<and> ?k < f (Suc ?n) \\<Longrightarrow>\n  \\<not> hamlet (Rep_run r ?k ?c)\n\ngoal (1 subgoal):\n 1. {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n    {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "using smf strict_mono_less"], ["proof (prove)\nusing this:\n  f ?n < ?k \\<and> ?k < f (Suc ?n) \\<Longrightarrow>\n  \\<not> hamlet (Rep_run r ?k ?c)\n  strict_mono f\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n\ngoal (1 subgoal):\n 1. {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n    {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "by fastforce"], ["proof (state)\nthis:\n  {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "ultimately"], ["proof (chain)\npicking this:\n  card {k. k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  card {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} +\n  card {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}\n  {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "show ?thesis"], ["proof (prove)\nusing this:\n  card {k. k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  card {k. k \\<le> f n \\<and> hamlet (Rep_run r k c)} +\n  card {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)}\n  {k. f n < k \\<and> k \\<le> f (Suc n) \\<and> hamlet (Rep_run r k c)} =\n  {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}", "by (simp add: tick_count_def)"], ["proof (state)\nthis:\n  tick_count r c (f (Suc n)) =\n  tick_count r c (f n) +\n  card {k. k = f (Suc n) \\<and> hamlet (Rep_run r k c)}\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary tick_count_f_suc:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count r c (f (Suc n))\n         = tick_count r c (f n) + (if hamlet ((Rep_run r) (f (Suc n)) c) then 1 else 0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    (if hamlet (Rep_run r (f (Suc n)) c) then 1 else 0)", "using tick_count_fsuc[OF assms]\n      card_sing_prop[of \\<open>f (Suc n)\\<close> \\<open>\\<lambda>k. hamlet ((Rep_run r) k c)\\<close>]"], ["proof (prove)\nusing this:\n  tick_count r ?c (f (Suc ?n)) =\n  tick_count r ?c (f ?n) +\n  card {k. k = f (Suc ?n) \\<and> hamlet (Rep_run r k ?c)}\n  card {i. i = f (Suc n) \\<and> hamlet (Rep_run r i c)} =\n  (if hamlet (Rep_run r (f (Suc n)) c) then 1 else 0)\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    tick_count r c (f n) +\n    (if hamlet (Rep_run r (f (Suc n)) c) then 1 else 0)", "by simp"], ["", "corollary tick_count_f_suc_suc:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count r c (f (Suc n)) = (if hamlet ((Rep_run r) (f (Suc n)) c)\n                                         then Suc (tick_count r c (f n))\n                                         else tick_count r c (f n))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    (if hamlet (Rep_run r (f (Suc n)) c) then Suc (tick_count r c (f n))\n     else tick_count r c (f n))", "using tick_count_f_suc[OF assms]"], ["proof (prove)\nusing this:\n  tick_count r ?c (f (Suc ?n)) =\n  tick_count r ?c (f ?n) +\n  (if hamlet (Rep_run r (f (Suc ?n)) ?c) then 1 else 0)\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    (if hamlet (Rep_run r (f (Suc n)) c) then Suc (tick_count r c (f n))\n     else tick_count r c (f n))", "by simp"], ["", "lemma tick_count_f_suc_sub:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count r c (f (Suc n)) = (if hamlet ((Rep_run sub) (Suc n) c)\n                                         then Suc (tick_count r c (f n))\n                                         else tick_count r c (f n))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    (if hamlet (Rep_run sub (Suc n) c) then Suc (tick_count r c (f n))\n     else tick_count r c (f n))", "using tick_count_f_suc_suc[OF assms] assms"], ["proof (prove)\nusing this:\n  tick_count r ?c (f (Suc ?n)) =\n  (if hamlet (Rep_run r (f (Suc ?n)) ?c) then Suc (tick_count r ?c (f ?n))\n   else tick_count r ?c (f ?n))\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. tick_count r c (f (Suc n)) =\n    (if hamlet (Rep_run sub (Suc n) c) then Suc (tick_count r c (f n))\n     else tick_count r c (f n))", "by (simp add: dilating_def)"], ["", "text \\<open>\n  The number of ticks does not progress during stuttering instants.\n\\<close>"], ["", "lemma tick_count_latest:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>f n\\<^sub>p < n \\<and> (\\<forall>k. f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\\<close>\n    shows \\<open>tick_count r c n = tick_count r c (f n\\<^sub>p)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count r c n = tick_count r c (f n\\<^sub>p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tick_count r c n = tick_count r c (f n\\<^sub>p)", "have union:\\<open>{i. i \\<le> n \\<and> hamlet ((Rep_run r) i c)} =\n          {i. i \\<le> f n\\<^sub>p \\<and> hamlet ((Rep_run r) i c)}\n        \\<union> {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> n \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> f n\\<^sub>p \\<and> hamlet (Rep_run r i c)} \\<union>\n    {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)}", "using assms(2)"], ["proof (prove)\nusing this:\n  f n\\<^sub>p < n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. {i. i \\<le> n \\<and> hamlet (Rep_run r i c)} =\n    {i. i \\<le> f n\\<^sub>p \\<and> hamlet (Rep_run r i c)} \\<union>\n    {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)}", "by auto"], ["proof (state)\nthis:\n  {i. i \\<le> n \\<and> hamlet (Rep_run r i c)} =\n  {i. i \\<le> f n\\<^sub>p \\<and> hamlet (Rep_run r i c)} \\<union>\n  {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count r c n = tick_count r c (f n\\<^sub>p)", "have partition: \\<open>{i. i \\<le> f n\\<^sub>p \\<and> hamlet ((Rep_run r) i c)}\n        \\<inter> {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet ((Rep_run r) i c)} = {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i \\<le> f n\\<^sub>p \\<and> hamlet (Rep_run r i c)} \\<inter>\n    {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)} =\n    {}", "by (simp add: disjoint_iff_not_equal)"], ["proof (state)\nthis:\n  {i. i \\<le> f n\\<^sub>p \\<and> hamlet (Rep_run r i c)} \\<inter>\n  {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)} =\n  {}\n\ngoal (1 subgoal):\n 1. tick_count r c n = tick_count r c (f n\\<^sub>p)", "from assms"], ["proof (chain)\npicking this:\n  dilating f sub r\n  f n\\<^sub>p < n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "have \\<open>{i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet ((Rep_run r) i c)} = {}\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n  f n\\<^sub>p < n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)} = {}", "using no_tick_sub"], ["proof (prove)\nusing this:\n  dilating f sub r\n  f n\\<^sub>p < n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n  dilating ?f ?sub ?r \\<Longrightarrow>\n  (\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = ?n) \\<longrightarrow>\n  \\<not> hamlet (Rep_run ?r ?n ?a)\n\ngoal (1 subgoal):\n 1. {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)} = {}", "by fastforce"], ["proof (state)\nthis:\n  {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)} = {}\n\ngoal (1 subgoal):\n 1. tick_count r c n = tick_count r c (f n\\<^sub>p)", "with union and partition"], ["proof (chain)\npicking this:\n  {i. i \\<le> n \\<and> hamlet (Rep_run r i c)} =\n  {i. i \\<le> f n\\<^sub>p \\<and> hamlet (Rep_run r i c)} \\<union>\n  {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)}\n  {i. i \\<le> f n\\<^sub>p \\<and> hamlet (Rep_run r i c)} \\<inter>\n  {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)} =\n  {}\n  {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)} = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  {i. i \\<le> n \\<and> hamlet (Rep_run r i c)} =\n  {i. i \\<le> f n\\<^sub>p \\<and> hamlet (Rep_run r i c)} \\<union>\n  {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)}\n  {i. i \\<le> f n\\<^sub>p \\<and> hamlet (Rep_run r i c)} \\<inter>\n  {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)} =\n  {}\n  {i. f n\\<^sub>p < i \\<and> i \\<le> n \\<and> hamlet (Rep_run r i c)} = {}\n\ngoal (1 subgoal):\n 1. tick_count r c n = tick_count r c (f n\\<^sub>p)", "by (simp add: tick_count_def)"], ["proof (state)\nthis:\n  tick_count r c n = tick_count r c (f n\\<^sub>p)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We finally show that the number of ticks on any clock is preserved by dilation.\n\\<close>"], ["", "lemma tick_count_sub:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count sub c n = tick_count r c (f n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count sub c n = tick_count r c (f n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tick_count sub c n = tick_count r c (f n)", "have \\<open>tick_count sub c n = card {i. i \\<le> n \\<and> hamlet ((Rep_run sub) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count sub c n = card {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "using tick_count_def[of \\<open>sub\\<close> \\<open>c\\<close> \\<open>n\\<close>]"], ["proof (prove)\nusing this:\n  tick_count sub c n = card {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. tick_count sub c n = card {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}", "."], ["proof (state)\nthis:\n  tick_count sub c n = card {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. tick_count sub c n = tick_count r c (f n)", "also"], ["proof (state)\nthis:\n  tick_count sub c n = card {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. tick_count sub c n = tick_count r c (f n)", "have \\<open>... = card (image f {i. i \\<le> n \\<and> hamlet ((Rep_run sub) i c)})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)} =\n    card (f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)})", "using assms dilating_def dilating_injects[OF assms]"], ["proof (prove)\nusing this:\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  inj_on f ?A\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)} =\n    card (f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)})", "by (simp add: card_image)"], ["proof (state)\nthis:\n  card {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)} =\n  card (f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)})\n\ngoal (1 subgoal):\n 1. tick_count sub c n = tick_count r c (f n)", "also"], ["proof (state)\nthis:\n  card {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)} =\n  card (f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)})\n\ngoal (1 subgoal):\n 1. tick_count sub c n = tick_count r c (f n)", "have \\<open>... = card {i. i \\<le> f n \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}) =\n    card {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "using dilated_prefix[OF assms, symmetric, of \\<open>n\\<close> \\<open>c\\<close>]"], ["proof (prove)\nusing this:\n  f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)} =\n  {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. card (f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}) =\n    card {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}", "by simp"], ["proof (state)\nthis:\n  card (f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}) =\n  card {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count sub c n = tick_count r c (f n)", "also"], ["proof (state)\nthis:\n  card (f ` {i. i \\<le> n \\<and> hamlet (Rep_run sub i c)}) =\n  card {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count sub c n = tick_count r c (f n)", "have \\<open>... = tick_count r c (f n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    tick_count r c (f n)", "using tick_count_def[of \\<open>r\\<close> \\<open>c\\<close> \\<open>f n\\<close>]"], ["proof (prove)\nusing this:\n  tick_count r c (f n) = card {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} =\n    tick_count r c (f n)", "by simp"], ["proof (state)\nthis:\n  card {i. i \\<le> f n \\<and> hamlet (Rep_run r i c)} = tick_count r c (f n)\n\ngoal (1 subgoal):\n 1. tick_count sub c n = tick_count r c (f n)", "finally"], ["proof (chain)\npicking this:\n  tick_count sub c n = tick_count r c (f n)", "show ?thesis"], ["proof (prove)\nusing this:\n  tick_count sub c n = tick_count r c (f n)\n\ngoal (1 subgoal):\n 1. tick_count sub c n = tick_count r c (f n)", "."], ["proof (state)\nthis:\n  tick_count sub c n = tick_count r c (f n)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary run_tick_count_sub:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>run_tick_count sub c n = run_tick_count r c (f n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> sub c n = #\\<^sub>\\<le> r c f n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> sub c n = #\\<^sub>\\<le> r c f n", "have \\<open>run_tick_count sub c n = tick_count sub c n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> sub c n = tick_count sub c n", "using tick_count_is_fun[of \\<open>sub\\<close> c n, symmetric]"], ["proof (prove)\nusing this:\n  #\\<^sub>\\<le> sub c n = tick_count sub c n\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> sub c n = tick_count sub c n", "."], ["proof (state)\nthis:\n  #\\<^sub>\\<le> sub c n = tick_count sub c n\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> sub c n = #\\<^sub>\\<le> r c f n", "also"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> sub c n = tick_count sub c n\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> sub c n = #\\<^sub>\\<le> r c f n", "from tick_count_sub[OF assms]"], ["proof (chain)\npicking this:\n  tick_count sub ?c ?n = tick_count r ?c (f ?n)", "have \\<open>... = tick_count r c (f n)\\<close>"], ["proof (prove)\nusing this:\n  tick_count sub ?c ?n = tick_count r ?c (f ?n)\n\ngoal (1 subgoal):\n 1. tick_count sub c n = tick_count r c (f n)", "."], ["proof (state)\nthis:\n  tick_count sub c n = tick_count r c (f n)\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> sub c n = #\\<^sub>\\<le> r c f n", "also"], ["proof (state)\nthis:\n  tick_count sub c n = tick_count r c (f n)\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> sub c n = #\\<^sub>\\<le> r c f n", "have \\<open>... = #\\<^sub>\\<le> r c (f n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count r c (f n) = #\\<^sub>\\<le> r c f n", "using tick_count_is_fun[of r c \\<open>f n\\<close>]"], ["proof (prove)\nusing this:\n  tick_count r c (f n) = #\\<^sub>\\<le> r c f n\n\ngoal (1 subgoal):\n 1. tick_count r c (f n) = #\\<^sub>\\<le> r c f n", "."], ["proof (state)\nthis:\n  tick_count r c (f n) = #\\<^sub>\\<le> r c f n\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> sub c n = #\\<^sub>\\<le> r c f n", "finally"], ["proof (chain)\npicking this:\n  #\\<^sub>\\<le> sub c n = #\\<^sub>\\<le> r c f n", "show ?thesis"], ["proof (prove)\nusing this:\n  #\\<^sub>\\<le> sub c n = #\\<^sub>\\<le> r c f n\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> sub c n = #\\<^sub>\\<le> r c f n", "."], ["proof (state)\nthis:\n  #\\<^sub>\\<le> sub c n = #\\<^sub>\\<le> r c f n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The number of ticks occurring strictly before the first instant is null.\n\\<close>"], ["", "lemma tick_count_strict_0:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count_strict r c (f 0) = 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count_strict r c (f 0) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tick_count_strict r c (f 0) = 0", "from assms"], ["proof (chain)\npicking this:\n  dilating f sub r", "have \\<open>f 0 = 0\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. f 0 = 0", "by (simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  f 0 = 0\n\ngoal (1 subgoal):\n 1. tick_count_strict r c (f 0) = 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  f 0 = 0\n\ngoal (1 subgoal):\n 1. tick_count_strict r c (f 0) = 0", "unfolding tick_count_strict_def"], ["proof (prove)\nusing this:\n  f 0 = 0\n\ngoal (1 subgoal):\n 1. card {i. i < f 0 \\<and> hamlet (Rep_run r i c)} = 0", "by simp"], ["proof (state)\nthis:\n  tick_count_strict r c (f 0) = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The number of ticks strictly before an instant does not progress\n  during stuttering instants.\n\\<close>"], ["", "lemma tick_count_strict_stable:\n  assumes \\<open>dilating f sub r\\<close>\n  assumes \\<open>(f n) < k \\<and> k < (f (Suc n))\\<close>\n  shows \\<open>tick_count_strict r c k = tick_count_strict r c (f (Suc n))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "from assms(1)"], ["proof (chain)\npicking this:\n  dilating f sub r", "have smf:\\<open>strict_mono f\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. strict_mono f", "by (simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "from assms(2)"], ["proof (chain)\npicking this:\n  f n < k \\<and> k < f (Suc n)", "have \\<open>f n < k\\<close>"], ["proof (prove)\nusing this:\n  f n < k \\<and> k < f (Suc n)\n\ngoal (1 subgoal):\n 1. f n < k", "by simp"], ["proof (state)\nthis:\n  f n < k\n\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "hence \\<open>\\<forall>i. k \\<le> i \\<longrightarrow> f n < i\\<close>"], ["proof (prove)\nusing this:\n  f n < k\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<ge>k. f n < i", "by simp"], ["proof (state)\nthis:\n  \\<forall>i\\<ge>k. f n < i\n\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "with no_tick_before_suc[OF assms(1)]"], ["proof (chain)\npicking this:\n  f ?n < ?k \\<and> ?k < f (Suc ?n) \\<Longrightarrow>\n  \\<not> hamlet (Rep_run r ?k ?c)\n  \\<forall>i\\<ge>k. f n < i", "have\n    *:\\<open>\\<forall>i. k \\<le> i \\<and> i < f (Suc n) \\<longrightarrow> \\<not>hamlet ((Rep_run r) i c)\\<close>"], ["proof (prove)\nusing this:\n  f ?n < ?k \\<and> ?k < f (Suc ?n) \\<Longrightarrow>\n  \\<not> hamlet (Rep_run r ?k ?c)\n  \\<forall>i\\<ge>k. f n < i\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       k \\<le> i \\<and> i < f (Suc n) \\<longrightarrow>\n       \\<not> hamlet (Rep_run r i c)", "by blast"], ["proof (state)\nthis:\n  \\<forall>i.\n     k \\<le> i \\<and> i < f (Suc n) \\<longrightarrow>\n     \\<not> hamlet (Rep_run r i c)\n\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "from tick_count_strict_def"], ["proof (chain)\npicking this:\n  tick_count_strict ?r ?c ?n =\n  card {i. i < ?n \\<and> hamlet (Rep_run ?r i ?c)}", "have\n    \\<open>tick_count_strict r c (f (Suc n)) = card {i. i < f (Suc n) \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\nusing this:\n  tick_count_strict ?r ?c ?n =\n  card {i. i < ?n \\<and> hamlet (Rep_run ?r i ?c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict r c (f (Suc n)) =\n    card {i. i < f (Suc n) \\<and> hamlet (Rep_run r i c)}", "."], ["proof (state)\nthis:\n  tick_count_strict r c (f (Suc n)) =\n  card {i. i < f (Suc n) \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "also"], ["proof (state)\nthis:\n  tick_count_strict r c (f (Suc n)) =\n  card {i. i < f (Suc n) \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "have\n    \\<open>... = card {i. i < k \\<and> hamlet ((Rep_run r) i c)}\n         + card {i. k \\<le> i \\<and> i < f (Suc n) \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < f (Suc n) \\<and> hamlet (Rep_run r i c)} =\n    card {i. i < k \\<and> hamlet (Rep_run r i c)} +\n    card {i. k \\<le> i \\<and> i < f (Suc n) \\<and> hamlet (Rep_run r i c)}", "using card_mnm' assms(2)"], ["proof (prove)\nusing this:\n  ?m < ?n \\<Longrightarrow>\n  card {i. i < ?n \\<and> ?P i} =\n  card {i. i < ?m \\<and> ?P i} +\n  card {i. ?m \\<le> i \\<and> i < ?n \\<and> ?P i}\n  f n < k \\<and> k < f (Suc n)\n\ngoal (1 subgoal):\n 1. card {i. i < f (Suc n) \\<and> hamlet (Rep_run r i c)} =\n    card {i. i < k \\<and> hamlet (Rep_run r i c)} +\n    card {i. k \\<le> i \\<and> i < f (Suc n) \\<and> hamlet (Rep_run r i c)}", "by simp"], ["proof (state)\nthis:\n  card {i. i < f (Suc n) \\<and> hamlet (Rep_run r i c)} =\n  card {i. i < k \\<and> hamlet (Rep_run r i c)} +\n  card {i. k \\<le> i \\<and> i < f (Suc n) \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "also"], ["proof (state)\nthis:\n  card {i. i < f (Suc n) \\<and> hamlet (Rep_run r i c)} =\n  card {i. i < k \\<and> hamlet (Rep_run r i c)} +\n  card {i. k \\<le> i \\<and> i < f (Suc n) \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "have \\<open>... = card {i. i < k \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < k \\<and> hamlet (Rep_run r i c)} +\n    card {i. k \\<le> i \\<and> i < f (Suc n) \\<and> hamlet (Rep_run r i c)} =\n    card {i. i < k \\<and> hamlet (Rep_run r i c)}", "using *"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     k \\<le> i \\<and> i < f (Suc n) \\<longrightarrow>\n     \\<not> hamlet (Rep_run r i c)\n\ngoal (1 subgoal):\n 1. card {i. i < k \\<and> hamlet (Rep_run r i c)} +\n    card {i. k \\<le> i \\<and> i < f (Suc n) \\<and> hamlet (Rep_run r i c)} =\n    card {i. i < k \\<and> hamlet (Rep_run r i c)}", "by simp"], ["proof (state)\nthis:\n  card {i. i < k \\<and> hamlet (Rep_run r i c)} +\n  card {i. k \\<le> i \\<and> i < f (Suc n) \\<and> hamlet (Rep_run r i c)} =\n  card {i. i < k \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "finally"], ["proof (chain)\npicking this:\n  tick_count_strict r c (f (Suc n)) =\n  card {i. i < k \\<and> hamlet (Rep_run r i c)}", "show ?thesis"], ["proof (prove)\nusing this:\n  tick_count_strict r c (f (Suc n)) =\n  card {i. i < k \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict r c k = tick_count_strict r c (f (Suc n))", "by (simp add: tick_count_strict_def)"], ["proof (state)\nthis:\n  tick_count_strict r c k = tick_count_strict r c (f (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Finally, the number of ticks strictly before an instant is preserved by dilation.\n\\<close>"], ["", "lemma tick_count_strict_sub:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>tick_count_strict sub c n = tick_count_strict r c (f n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count_strict sub c n = tick_count_strict r c (f n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tick_count_strict sub c n = tick_count_strict r c (f n)", "have \\<open>tick_count_strict sub c n = card {i. i < n \\<and> hamlet ((Rep_run sub) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tick_count_strict sub c n =\n    card {i. i < n \\<and> hamlet (Rep_run sub i c)}", "using tick_count_strict_def[of \\<open>sub\\<close> \\<open>c\\<close> \\<open>n\\<close>]"], ["proof (prove)\nusing this:\n  tick_count_strict sub c n =\n  card {i. i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict sub c n =\n    card {i. i < n \\<and> hamlet (Rep_run sub i c)}", "."], ["proof (state)\nthis:\n  tick_count_strict sub c n =\n  card {i. i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict sub c n = tick_count_strict r c (f n)", "also"], ["proof (state)\nthis:\n  tick_count_strict sub c n =\n  card {i. i < n \\<and> hamlet (Rep_run sub i c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict sub c n = tick_count_strict r c (f n)", "have \\<open>... = card (image f {i. i < n \\<and> hamlet ((Rep_run sub) i c)})\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> hamlet (Rep_run sub i c)} =\n    card (f ` {i. i < n \\<and> hamlet (Rep_run sub i c)})", "using assms dilating_def dilating_injects[OF assms]"], ["proof (prove)\nusing this:\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  inj_on f ?A\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> hamlet (Rep_run sub i c)} =\n    card (f ` {i. i < n \\<and> hamlet (Rep_run sub i c)})", "by (simp add: card_image)"], ["proof (state)\nthis:\n  card {i. i < n \\<and> hamlet (Rep_run sub i c)} =\n  card (f ` {i. i < n \\<and> hamlet (Rep_run sub i c)})\n\ngoal (1 subgoal):\n 1. tick_count_strict sub c n = tick_count_strict r c (f n)", "also"], ["proof (state)\nthis:\n  card {i. i < n \\<and> hamlet (Rep_run sub i c)} =\n  card (f ` {i. i < n \\<and> hamlet (Rep_run sub i c)})\n\ngoal (1 subgoal):\n 1. tick_count_strict sub c n = tick_count_strict r c (f n)", "have \\<open>... = card {i. i < f n \\<and> hamlet ((Rep_run r) i c)}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}) =\n    card {i. i < f n \\<and> hamlet (Rep_run r i c)}", "using dilated_strict_prefix[OF assms, symmetric, of \\<open>n\\<close> \\<open>c\\<close>]"], ["proof (prove)\nusing this:\n  f ` {i. i < n \\<and> hamlet (Rep_run sub i c)} =\n  {i. i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. card (f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}) =\n    card {i. i < f n \\<and> hamlet (Rep_run r i c)}", "by simp"], ["proof (state)\nthis:\n  card (f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}) =\n  card {i. i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict sub c n = tick_count_strict r c (f n)", "also"], ["proof (state)\nthis:\n  card (f ` {i. i < n \\<and> hamlet (Rep_run sub i c)}) =\n  card {i. i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. tick_count_strict sub c n = tick_count_strict r c (f n)", "have \\<open>... = tick_count_strict r c (f n)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    tick_count_strict r c (f n)", "using tick_count_strict_def[of \\<open>r\\<close> \\<open>c\\<close> \\<open>f n\\<close>]"], ["proof (prove)\nusing this:\n  tick_count_strict r c (f n) =\n  card {i. i < f n \\<and> hamlet (Rep_run r i c)}\n\ngoal (1 subgoal):\n 1. card {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n    tick_count_strict r c (f n)", "by simp"], ["proof (state)\nthis:\n  card {i. i < f n \\<and> hamlet (Rep_run r i c)} =\n  tick_count_strict r c (f n)\n\ngoal (1 subgoal):\n 1. tick_count_strict sub c n = tick_count_strict r c (f n)", "finally"], ["proof (chain)\npicking this:\n  tick_count_strict sub c n = tick_count_strict r c (f n)", "show ?thesis"], ["proof (prove)\nusing this:\n  tick_count_strict sub c n = tick_count_strict r c (f n)\n\ngoal (1 subgoal):\n 1. tick_count_strict sub c n = tick_count_strict r c (f n)", "."], ["proof (state)\nthis:\n  tick_count_strict sub c n = tick_count_strict r c (f n)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The tick count on any clock can only increase.\n\\<close>"], ["", "lemma mono_tick_count:\n  \\<open>mono (\\<lambda> k. tick_count r c k)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (tick_count r c)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow> tick_count r c x \\<le> tick_count r c y", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow> tick_count r c x \\<le> tick_count r c y", "fix x y::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow> tick_count r c x \\<le> tick_count r c y", "assume \\<open>x \\<le> y\\<close>"], ["proof (state)\nthis:\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow> tick_count r c x \\<le> tick_count r c y", "from card_prop_mono[OF this]"], ["proof (chain)\npicking this:\n  card {i. i \\<le> x \\<and> ?P i} \\<le> card {i. i \\<le> y \\<and> ?P i}", "have \\<open>tick_count r c x \\<le> tick_count r c y\\<close>"], ["proof (prove)\nusing this:\n  card {i. i \\<le> x \\<and> ?P i} \\<le> card {i. i \\<le> y \\<and> ?P i}\n\ngoal (1 subgoal):\n 1. tick_count r c x \\<le> tick_count r c y", "unfolding tick_count_def"], ["proof (prove)\nusing this:\n  card {i. i \\<le> x \\<and> ?P i} \\<le> card {i. i \\<le> y \\<and> ?P i}\n\ngoal (1 subgoal):\n 1. card {i. i \\<le> x \\<and> hamlet (Rep_run r i c)}\n    \\<le> card {i. i \\<le> y \\<and> hamlet (Rep_run r i c)}", "by simp"], ["proof (state)\nthis:\n  tick_count r c x \\<le> tick_count r c y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow> tick_count r c x \\<le> tick_count r c y", "}"], ["proof (state)\nthis:\n  ?x2 \\<le> ?y2 \\<Longrightarrow>\n  tick_count r c ?x2 \\<le> tick_count r c ?y2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow> tick_count r c x \\<le> tick_count r c y", "thus \\<open>\\<And>x y. x \\<le> y \\<Longrightarrow> tick_count r c x \\<le> tick_count r c y\\<close>"], ["proof (prove)\nusing this:\n  ?x2 \\<le> ?y2 \\<Longrightarrow>\n  tick_count r c ?x2 \\<le> tick_count r c ?y2\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<le> y \\<Longrightarrow> tick_count r c x \\<le> tick_count r c y", "."], ["proof (state)\nthis:\n  ?x \\<le> ?y \\<Longrightarrow> tick_count r c ?x \\<le> tick_count r c ?y\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  In a dilated run, for any stuttering instant, there is an instant which is the \n  image of an instant in the original run, and which is the latest one before\n  the stuttering instant.\n\\<close>"], ["", "lemma greatest_prev_image:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>(\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n) \\<Longrightarrow> (\\<exists>n\\<^sub>p. f n\\<^sub>p < n \\<and> (\\<forall>k. f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = 0 \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < 0 \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> 0 \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n 2. \\<And>n.\n       \\<lbrakk>\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n                \\<exists>n\\<^sub>p.\n                   f n\\<^sub>p < n \\<and>\n                   (\\<forall>k.\n                       f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n                       (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k));\n        \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<^sub>p.\n                            f n\\<^sub>p < Suc n \\<and>\n                            (\\<forall>k.\n                                f n\\<^sub>p < k \\<and>\n                                k \\<le> Suc n \\<longrightarrow>\n                                (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "case 0"], ["proof (state)\nthis:\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = 0\n\ngoal (2 subgoals):\n 1. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = 0 \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < 0 \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> 0 \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n 2. \\<And>n.\n       \\<lbrakk>\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n                \\<exists>n\\<^sub>p.\n                   f n\\<^sub>p < n \\<and>\n                   (\\<forall>k.\n                       f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n                       (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k));\n        \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<^sub>p.\n                            f n\\<^sub>p < Suc n \\<and>\n                            (\\<forall>k.\n                                f n\\<^sub>p < k \\<and>\n                                k \\<le> Suc n \\<longrightarrow>\n                                (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "with assms"], ["proof (chain)\npicking this:\n  dilating f sub r\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = 0", "have \\<open>f 0 = 0\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = 0\n\ngoal (1 subgoal):\n 1. f 0 = 0", "by (simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  f 0 = 0\n\ngoal (2 subgoals):\n 1. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = 0 \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < 0 \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> 0 \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n 2. \\<And>n.\n       \\<lbrakk>\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n                \\<exists>n\\<^sub>p.\n                   f n\\<^sub>p < n \\<and>\n                   (\\<forall>k.\n                       f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n                       (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k));\n        \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<^sub>p.\n                            f n\\<^sub>p < Suc n \\<and>\n                            (\\<forall>k.\n                                f n\\<^sub>p < k \\<and>\n                                k \\<le> Suc n \\<longrightarrow>\n                                (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "thus ?case"], ["proof (prove)\nusing this:\n  f 0 = 0\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < 0 \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> 0 \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "using \"0.prems\""], ["proof (prove)\nusing this:\n  f 0 = 0\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = 0\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < 0 \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> 0 \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "by blast"], ["proof (state)\nthis:\n  \\<exists>n\\<^sub>p.\n     f n\\<^sub>p < 0 \\<and>\n     (\\<forall>k.\n         f n\\<^sub>p < k \\<and> k \\<le> 0 \\<longrightarrow>\n         (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n                \\<exists>n\\<^sub>p.\n                   f n\\<^sub>p < n \\<and>\n                   (\\<forall>k.\n                       f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n                       (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k));\n        \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<^sub>p.\n                            f n\\<^sub>p < Suc n \\<and>\n                            (\\<forall>k.\n                                f n\\<^sub>p < k \\<and>\n                                k \\<le> Suc n \\<longrightarrow>\n                                (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n                \\<exists>n\\<^sub>p.\n                   f n\\<^sub>p < n \\<and>\n                   (\\<forall>k.\n                       f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n                       (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k));\n        \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<^sub>p.\n                            f n\\<^sub>p < Suc n \\<and>\n                            (\\<forall>k.\n                                f n\\<^sub>p < k \\<and>\n                                k \\<le> Suc n \\<longrightarrow>\n                                (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "case (Suc n)"], ["proof (state)\nthis:\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n  \\<exists>n\\<^sub>p.\n     f n\\<^sub>p < n \\<and>\n     (\\<forall>k.\n         f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n         (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n                \\<exists>n\\<^sub>p.\n                   f n\\<^sub>p < n \\<and>\n                   (\\<forall>k.\n                       f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n                       (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k));\n        \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n\\<^sub>p.\n                            f n\\<^sub>p < Suc n \\<and>\n                            (\\<forall>k.\n                                f n\\<^sub>p < k \\<and>\n                                k \\<le> Suc n \\<longrightarrow>\n                                (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "proof (cases \\<open>\\<exists>n\\<^sub>0. f n\\<^sub>0 = n\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n 2. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "case True"], ["proof (state)\nthis:\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = n\n\ngoal (2 subgoals):\n 1. \\<exists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n 2. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "from this"], ["proof (chain)\npicking this:\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = n", "obtain n\\<^sub>0 where \\<open>f n\\<^sub>0 = n\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = n\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>0.\n        f n\\<^sub>0 = n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f n\\<^sub>0 = n\n\ngoal (2 subgoals):\n 1. \\<exists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n 2. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "hence \\<open>f n\\<^sub>0 < (Suc n) \\<and> (\\<forall>k. f n\\<^sub>0 < k \\<and> k \\<le> (Suc n) \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\\<close>"], ["proof (prove)\nusing this:\n  f n\\<^sub>0 = n\n\ngoal (1 subgoal):\n 1. f n\\<^sub>0 < Suc n \\<and>\n    (\\<forall>k.\n        f n\\<^sub>0 < k \\<and> k \\<le> Suc n \\<longrightarrow>\n        (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "using Suc.prems Suc_leI le_antisym"], ["proof (prove)\nusing this:\n  f n\\<^sub>0 = n\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n\n  ?m < ?n \\<Longrightarrow> Suc ?m \\<le> ?n\n  \\<lbrakk>?m \\<le> ?n; ?n \\<le> ?m\\<rbrakk> \\<Longrightarrow> ?m = ?n\n\ngoal (1 subgoal):\n 1. f n\\<^sub>0 < Suc n \\<and>\n    (\\<forall>k.\n        f n\\<^sub>0 < k \\<and> k \\<le> Suc n \\<longrightarrow>\n        (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "by blast"], ["proof (state)\nthis:\n  f n\\<^sub>0 < Suc n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>0 < k \\<and> k \\<le> Suc n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (2 subgoals):\n 1. \\<exists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n 2. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "thus ?thesis"], ["proof (prove)\nusing this:\n  f n\\<^sub>0 < Suc n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>0 < k \\<and> k \\<le> Suc n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "by blast"], ["proof (state)\nthis:\n  \\<exists>n\\<^sub>p.\n     f n\\<^sub>p < Suc n \\<and>\n     (\\<forall>k.\n         f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n         (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "case False"], ["proof (state)\nthis:\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n\n\ngoal (1 subgoal):\n 1. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "from Suc.IH[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>n\\<^sub>p.\n     f n\\<^sub>p < n \\<and>\n     (\\<forall>k.\n         f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n         (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "obtain n\\<^sub>p\n      where \\<open>f n\\<^sub>p < n \\<and> (\\<forall>k. f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>n\\<^sub>p.\n     f n\\<^sub>p < n \\<and>\n     (\\<forall>k.\n         f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n         (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>p.\n        f n\\<^sub>p < n \\<and>\n        (\\<forall>k.\n            f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n            (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f n\\<^sub>p < n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "hence \\<open>f n\\<^sub>p < Suc n \\<and> (\\<forall>k. f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\\<close>"], ["proof (prove)\nusing this:\n  f n\\<^sub>p < n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. f n\\<^sub>p < Suc n \\<and>\n    (\\<forall>k.\n        f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n        (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "by simp"], ["proof (state)\nthis:\n  f n\\<^sub>p < Suc n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "with Suc(2)"], ["proof (chain)\npicking this:\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n\n  f n\\<^sub>p < Suc n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "have \\<open>f n\\<^sub>p < (Suc n) \\<and> (\\<forall>k. f n\\<^sub>p < k \\<and> k \\<le> (Suc n) \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n\n  f n\\<^sub>p < Suc n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. f n\\<^sub>p < Suc n \\<and>\n    (\\<forall>k.\n        f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n        (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "using le_Suc_eq"], ["proof (prove)\nusing this:\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n\n  f n\\<^sub>p < Suc n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n  (?m \\<le> Suc ?n) = (?m \\<le> ?n \\<or> ?m = Suc ?n)\n\ngoal (1 subgoal):\n 1. f n\\<^sub>p < Suc n \\<and>\n    (\\<forall>k.\n        f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n        (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "by auto"], ["proof (state)\nthis:\n  f n\\<^sub>p < Suc n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. \\<nexists>n\\<^sub>0. f n\\<^sub>0 = n \\<Longrightarrow>\n    \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "thus ?thesis"], ["proof (prove)\nusing this:\n  f n\\<^sub>p < Suc n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. \\<exists>n\\<^sub>p.\n       f n\\<^sub>p < Suc n \\<and>\n       (\\<forall>k.\n           f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "by blast"], ["proof (state)\nthis:\n  \\<exists>n\\<^sub>p.\n     f n\\<^sub>p < Suc n \\<and>\n     (\\<forall>k.\n         f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n         (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n\\<^sub>p.\n     f n\\<^sub>p < Suc n \\<and>\n     (\\<forall>k.\n         f n\\<^sub>p < k \\<and> k \\<le> Suc n \\<longrightarrow>\n         (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  If a strictly monotonous function on @{typ \\<open>nat\\<close>} increases only by one,\n  its argument was increased only by one.\n\\<close>"], ["", "lemma strict_mono_suc:\n  assumes \\<open>strict_mono f\\<close>\n      and \\<open>f sn = Suc (f n)\\<close>\n    shows \\<open>sn = Suc n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sn = Suc n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sn = Suc n", "from assms(2)"], ["proof (chain)\npicking this:\n  f sn = Suc (f n)", "have \\<open>f sn > f n\\<close>"], ["proof (prove)\nusing this:\n  f sn = Suc (f n)\n\ngoal (1 subgoal):\n 1. f n < f sn", "by simp"], ["proof (state)\nthis:\n  f n < f sn\n\ngoal (1 subgoal):\n 1. sn = Suc n", "with strict_mono_less[OF assms(1)]"], ["proof (chain)\npicking this:\n  (f ?x < f ?y) = (?x < ?y)\n  f n < f sn", "have \\<open>sn > n\\<close>"], ["proof (prove)\nusing this:\n  (f ?x < f ?y) = (?x < ?y)\n  f n < f sn\n\ngoal (1 subgoal):\n 1. n < sn", "by simp"], ["proof (state)\nthis:\n  n < sn\n\ngoal (1 subgoal):\n 1. sn = Suc n", "moreover"], ["proof (state)\nthis:\n  n < sn\n\ngoal (1 subgoal):\n 1. sn = Suc n", "have \\<open>sn \\<le> Suc n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sn \\<le> Suc n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sn \\<le> Suc n", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. sn \\<le> Suc n", "assume \\<open>sn > Suc n\\<close>"], ["proof (state)\nthis:\n  Suc n < sn\n\ngoal (1 subgoal):\n 1. sn \\<le> Suc n", "from this"], ["proof (chain)\npicking this:\n  Suc n < sn", "obtain i where \\<open>n < i \\<and> i < sn\\<close>"], ["proof (prove)\nusing this:\n  Suc n < sn\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        n < i \\<and> i < sn \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n < i \\<and> i < sn\n\ngoal (1 subgoal):\n 1. sn \\<le> Suc n", "hence \\<open>f n < f i \\<and> f i < f sn\\<close>"], ["proof (prove)\nusing this:\n  n < i \\<and> i < sn\n\ngoal (1 subgoal):\n 1. f n < f i \\<and> f i < f sn", "using assms(1)"], ["proof (prove)\nusing this:\n  n < i \\<and> i < sn\n  strict_mono f\n\ngoal (1 subgoal):\n 1. f n < f i \\<and> f i < f sn", "by (simp add: strict_mono_def)"], ["proof (state)\nthis:\n  f n < f i \\<and> f i < f sn\n\ngoal (1 subgoal):\n 1. sn \\<le> Suc n", "with assms(2)"], ["proof (chain)\npicking this:\n  f sn = Suc (f n)\n  f n < f i \\<and> f i < f sn", "have False"], ["proof (prove)\nusing this:\n  f sn = Suc (f n)\n  f n < f i \\<and> f i < f sn\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. sn \\<le> Suc n", "}"], ["proof (state)\nthis:\n  Suc n < sn \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. sn \\<le> Suc n", "thus ?thesis"], ["proof (prove)\nusing this:\n  Suc n < sn \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. sn \\<le> Suc n", "using not_less"], ["proof (prove)\nusing this:\n  Suc n < sn \\<Longrightarrow> False\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. sn \\<le> Suc n", "by blast"], ["proof (state)\nthis:\n  sn \\<le> Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sn \\<le> Suc n\n\ngoal (1 subgoal):\n 1. sn = Suc n", "ultimately"], ["proof (chain)\npicking this:\n  n < sn\n  sn \\<le> Suc n", "show ?thesis"], ["proof (prove)\nusing this:\n  n < sn\n  sn \\<le> Suc n\n\ngoal (1 subgoal):\n 1. sn = Suc n", "by (simp add: Suc_leI)"], ["proof (state)\nthis:\n  sn = Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Two successive non stuttering instants of a dilated run are the images\n  of two successive instants of the original run.\n\\<close>"], ["", "lemma next_non_stuttering:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>f n\\<^sub>p < n \\<and> (\\<forall>k. f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\\<close>\n      and \\<open>f sn\\<^sub>0 = Suc n\\<close>\n    shows \\<open>sn\\<^sub>0 = Suc n\\<^sub>p\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sn\\<^sub>0 = Suc n\\<^sub>p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sn\\<^sub>0 = Suc n\\<^sub>p", "from assms(1)"], ["proof (chain)\npicking this:\n  dilating f sub r", "have smf:\\<open>strict_mono f\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. strict_mono f", "by (simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  strict_mono f\n\ngoal (1 subgoal):\n 1. sn\\<^sub>0 = Suc n\\<^sub>p", "from assms(2)"], ["proof (chain)\npicking this:\n  f n\\<^sub>p < n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "have *:\\<open>\\<forall>k. f n\\<^sub>p < k \\<and> k < Suc n \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)\\<close>"], ["proof (prove)\nusing this:\n  f n\\<^sub>p < n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. \\<forall>k.\n       f n\\<^sub>p < k \\<and> k < Suc n \\<longrightarrow>\n       (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)", "by simp"], ["proof (state)\nthis:\n  \\<forall>k.\n     f n\\<^sub>p < k \\<and> k < Suc n \\<longrightarrow>\n     (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)\n\ngoal (1 subgoal):\n 1. sn\\<^sub>0 = Suc n\\<^sub>p", "from assms(2)"], ["proof (chain)\npicking this:\n  f n\\<^sub>p < n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "have \\<open>f n\\<^sub>p < n\\<close>"], ["proof (prove)\nusing this:\n  f n\\<^sub>p < n \\<and>\n  (\\<forall>k.\n      f n\\<^sub>p < k \\<and> k \\<le> n \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. f n\\<^sub>p < n", "by simp"], ["proof (state)\nthis:\n  f n\\<^sub>p < n\n\ngoal (1 subgoal):\n 1. sn\\<^sub>0 = Suc n\\<^sub>p", "with smf assms(3)"], ["proof (chain)\npicking this:\n  strict_mono f\n  f sn\\<^sub>0 = Suc n\n  f n\\<^sub>p < n", "have **:\\<open>sn\\<^sub>0 > n\\<^sub>p\\<close>"], ["proof (prove)\nusing this:\n  strict_mono f\n  f sn\\<^sub>0 = Suc n\n  f n\\<^sub>p < n\n\ngoal (1 subgoal):\n 1. n\\<^sub>p < sn\\<^sub>0", "using strict_mono_less"], ["proof (prove)\nusing this:\n  strict_mono f\n  f sn\\<^sub>0 = Suc n\n  f n\\<^sub>p < n\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n\ngoal (1 subgoal):\n 1. n\\<^sub>p < sn\\<^sub>0", "by fastforce"], ["proof (state)\nthis:\n  n\\<^sub>p < sn\\<^sub>0\n\ngoal (1 subgoal):\n 1. sn\\<^sub>0 = Suc n\\<^sub>p", "have \\<open>Suc n \\<le> f (Suc n\\<^sub>p)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n \\<le> f (Suc n\\<^sub>p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Suc n \\<le> f (Suc n\\<^sub>p)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Suc n \\<le> f (Suc n\\<^sub>p)", "assume h:\\<open>Suc n > f (Suc n\\<^sub>p)\\<close>"], ["proof (state)\nthis:\n  f (Suc n\\<^sub>p) < Suc n\n\ngoal (1 subgoal):\n 1. Suc n \\<le> f (Suc n\\<^sub>p)", "hence \\<open>Suc n\\<^sub>p < sn\\<^sub>0\\<close>"], ["proof (prove)\nusing this:\n  f (Suc n\\<^sub>p) < Suc n\n\ngoal (1 subgoal):\n 1. Suc n\\<^sub>p < sn\\<^sub>0", "using ** Suc_lessI assms(3)"], ["proof (prove)\nusing this:\n  f (Suc n\\<^sub>p) < Suc n\n  n\\<^sub>p < sn\\<^sub>0\n  \\<lbrakk>?m < ?n; Suc ?m \\<noteq> ?n\\<rbrakk>\n  \\<Longrightarrow> Suc ?m < ?n\n  f sn\\<^sub>0 = Suc n\n\ngoal (1 subgoal):\n 1. Suc n\\<^sub>p < sn\\<^sub>0", "by fastforce"], ["proof (state)\nthis:\n  Suc n\\<^sub>p < sn\\<^sub>0\n\ngoal (1 subgoal):\n 1. Suc n \\<le> f (Suc n\\<^sub>p)", "hence \\<open>\\<exists>k. k > n\\<^sub>p \\<and> f k < Suc n\\<close>"], ["proof (prove)\nusing this:\n  Suc n\\<^sub>p < sn\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<exists>k>n\\<^sub>p. f k < Suc n", "using h"], ["proof (prove)\nusing this:\n  Suc n\\<^sub>p < sn\\<^sub>0\n  f (Suc n\\<^sub>p) < Suc n\n\ngoal (1 subgoal):\n 1. \\<exists>k>n\\<^sub>p. f k < Suc n", "by blast"], ["proof (state)\nthis:\n  \\<exists>k>n\\<^sub>p. f k < Suc n\n\ngoal (1 subgoal):\n 1. Suc n \\<le> f (Suc n\\<^sub>p)", "with *"], ["proof (chain)\npicking this:\n  \\<forall>k.\n     f n\\<^sub>p < k \\<and> k < Suc n \\<longrightarrow>\n     (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)\n  \\<exists>k>n\\<^sub>p. f k < Suc n", "have False"], ["proof (prove)\nusing this:\n  \\<forall>k.\n     f n\\<^sub>p < k \\<and> k < Suc n \\<longrightarrow>\n     (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)\n  \\<exists>k>n\\<^sub>p. f k < Suc n\n\ngoal (1 subgoal):\n 1. False", "using smf strict_mono_less"], ["proof (prove)\nusing this:\n  \\<forall>k.\n     f n\\<^sub>p < k \\<and> k < Suc n \\<longrightarrow>\n     (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)\n  \\<exists>k>n\\<^sub>p. f k < Suc n\n  strict_mono f\n  strict_mono ?f \\<Longrightarrow> (?f ?x < ?f ?y) = (?x < ?y)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. Suc n \\<le> f (Suc n\\<^sub>p)", "}"], ["proof (state)\nthis:\n  f (Suc n\\<^sub>p) < Suc n \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. Suc n \\<le> f (Suc n\\<^sub>p)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f (Suc n\\<^sub>p) < Suc n \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. Suc n \\<le> f (Suc n\\<^sub>p)", "using not_less"], ["proof (prove)\nusing this:\n  f (Suc n\\<^sub>p) < Suc n \\<Longrightarrow> False\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. Suc n \\<le> f (Suc n\\<^sub>p)", "by blast"], ["proof (state)\nthis:\n  Suc n \\<le> f (Suc n\\<^sub>p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Suc n \\<le> f (Suc n\\<^sub>p)\n\ngoal (1 subgoal):\n 1. sn\\<^sub>0 = Suc n\\<^sub>p", "hence \\<open>sn\\<^sub>0 \\<le> Suc n\\<^sub>p\\<close>"], ["proof (prove)\nusing this:\n  Suc n \\<le> f (Suc n\\<^sub>p)\n\ngoal (1 subgoal):\n 1. sn\\<^sub>0 \\<le> Suc n\\<^sub>p", "using assms(3) smf"], ["proof (prove)\nusing this:\n  Suc n \\<le> f (Suc n\\<^sub>p)\n  f sn\\<^sub>0 = Suc n\n  strict_mono f\n\ngoal (1 subgoal):\n 1. sn\\<^sub>0 \\<le> Suc n\\<^sub>p", "using strict_mono_less_eq"], ["proof (prove)\nusing this:\n  Suc n \\<le> f (Suc n\\<^sub>p)\n  f sn\\<^sub>0 = Suc n\n  strict_mono f\n  strict_mono ?f \\<Longrightarrow> (?f ?x \\<le> ?f ?y) = (?x \\<le> ?y)\n\ngoal (1 subgoal):\n 1. sn\\<^sub>0 \\<le> Suc n\\<^sub>p", "by fastforce"], ["proof (state)\nthis:\n  sn\\<^sub>0 \\<le> Suc n\\<^sub>p\n\ngoal (1 subgoal):\n 1. sn\\<^sub>0 = Suc n\\<^sub>p", "with **"], ["proof (chain)\npicking this:\n  n\\<^sub>p < sn\\<^sub>0\n  sn\\<^sub>0 \\<le> Suc n\\<^sub>p", "show ?thesis"], ["proof (prove)\nusing this:\n  n\\<^sub>p < sn\\<^sub>0\n  sn\\<^sub>0 \\<le> Suc n\\<^sub>p\n\ngoal (1 subgoal):\n 1. sn\\<^sub>0 = Suc n\\<^sub>p", "by simp"], ["proof (state)\nthis:\n  sn\\<^sub>0 = Suc n\\<^sub>p\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The order relation between tick counts on clocks is preserved by dilation.\n\\<close>"], ["", "lemma dil_tick_count:\n  assumes \\<open>sub \\<lless> r\\<close>\n      and \\<open>\\<forall>n. run_tick_count sub a n \\<le> run_tick_count sub b n\\<close>\n    shows \\<open>run_tick_count r a n \\<le> run_tick_count r b n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n", "from assms(1) is_subrun_def"], ["proof (chain)\npicking this:\n  sub \\<lless> r\n  ?sub \\<lless> ?r \\<equiv> \\<exists>f. dilating f ?sub ?r", "obtain f where *:\\<open>dilating f sub r\\<close>"], ["proof (prove)\nusing this:\n  sub \\<lless> r\n  ?sub \\<lless> ?r \\<equiv> \\<exists>f. dilating f ?sub ?r\n\ngoal (1 subgoal):\n 1. (\\<And>f. dilating f sub r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. #\\<^sub>\\<le> r a 0 \\<le> #\\<^sub>\\<le> r b 0\n 2. \\<And>n.\n       #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n \\<Longrightarrow>\n       #\\<^sub>\\<le> r a Suc n \\<le> #\\<^sub>\\<le> r b Suc n", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. #\\<^sub>\\<le> r a 0 \\<le> #\\<^sub>\\<le> r b 0\n 2. \\<And>n.\n       #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n \\<Longrightarrow>\n       #\\<^sub>\\<le> r a Suc n \\<le> #\\<^sub>\\<le> r b Suc n", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<forall>n. #\\<^sub>\\<le> sub a n \\<le> #\\<^sub>\\<le> sub b n", "have \\<open>run_tick_count sub a 0 \\<le> run_tick_count sub b 0\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n. #\\<^sub>\\<le> sub a n \\<le> #\\<^sub>\\<le> sub b n\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> sub a 0 \\<le> #\\<^sub>\\<le> sub b 0", ".."], ["proof (state)\nthis:\n  #\\<^sub>\\<le> sub a 0 \\<le> #\\<^sub>\\<le> sub b 0\n\ngoal (2 subgoals):\n 1. #\\<^sub>\\<le> r a 0 \\<le> #\\<^sub>\\<le> r b 0\n 2. \\<And>n.\n       #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n \\<Longrightarrow>\n       #\\<^sub>\\<le> r a Suc n \\<le> #\\<^sub>\\<le> r b Suc n", "with run_tick_count_sub[OF *, of _ 0]"], ["proof (chain)\npicking this:\n  #\\<^sub>\\<le> sub ?c 0 = #\\<^sub>\\<le> r ?c f 0\n  #\\<^sub>\\<le> sub a 0 \\<le> #\\<^sub>\\<le> sub b 0", "have\n        \\<open>run_tick_count r a (f 0) \\<le> run_tick_count r b (f 0)\\<close>"], ["proof (prove)\nusing this:\n  #\\<^sub>\\<le> sub ?c 0 = #\\<^sub>\\<le> r ?c f 0\n  #\\<^sub>\\<le> sub a 0 \\<le> #\\<^sub>\\<le> sub b 0\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a f 0 \\<le> #\\<^sub>\\<le> r b f 0", "by simp"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r a f 0 \\<le> #\\<^sub>\\<le> r b f 0\n\ngoal (2 subgoals):\n 1. #\\<^sub>\\<le> r a 0 \\<le> #\\<^sub>\\<le> r b 0\n 2. \\<And>n.\n       #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n \\<Longrightarrow>\n       #\\<^sub>\\<le> r a Suc n \\<le> #\\<^sub>\\<le> r b Suc n", "moreover"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r a f 0 \\<le> #\\<^sub>\\<le> r b f 0\n\ngoal (2 subgoals):\n 1. #\\<^sub>\\<le> r a 0 \\<le> #\\<^sub>\\<le> r b 0\n 2. \\<And>n.\n       #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n \\<Longrightarrow>\n       #\\<^sub>\\<le> r a Suc n \\<le> #\\<^sub>\\<le> r b Suc n", "from *"], ["proof (chain)\npicking this:\n  dilating f sub r", "have \\<open>f 0 = 0\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. f 0 = 0", "by (simp add:dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  f 0 = 0\n\ngoal (2 subgoals):\n 1. #\\<^sub>\\<le> r a 0 \\<le> #\\<^sub>\\<le> r b 0\n 2. \\<And>n.\n       #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n \\<Longrightarrow>\n       #\\<^sub>\\<le> r a Suc n \\<le> #\\<^sub>\\<le> r b Suc n", "ultimately"], ["proof (chain)\npicking this:\n  #\\<^sub>\\<le> r a f 0 \\<le> #\\<^sub>\\<le> r b f 0\n  f 0 = 0", "show ?case"], ["proof (prove)\nusing this:\n  #\\<^sub>\\<le> r a f 0 \\<le> #\\<^sub>\\<le> r b f 0\n  f 0 = 0\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a 0 \\<le> #\\<^sub>\\<le> r b 0", "by simp"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r a 0 \\<le> #\\<^sub>\\<le> r b 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n \\<Longrightarrow>\n       #\\<^sub>\\<le> r a Suc n \\<le> #\\<^sub>\\<le> r b Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n \\<Longrightarrow>\n       #\\<^sub>\\<le> r a Suc n \\<le> #\\<^sub>\\<le> r b Suc n", "case (Suc n')"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n'\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n \\<Longrightarrow>\n       #\\<^sub>\\<le> r a Suc n \\<le> #\\<^sub>\\<le> r b Suc n", "thus ?case"], ["proof (prove)\nusing this:\n  #\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n'\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "proof (cases \\<open>\\<exists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>#\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n';\n     \\<exists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\\<rbrakk>\n    \\<Longrightarrow> #\\<^sub>\\<le> r a Suc n'\n                      \\<le> #\\<^sub>\\<le> r b Suc n'\n 2. \\<lbrakk>#\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n';\n     \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\\<rbrakk>\n    \\<Longrightarrow> #\\<^sub>\\<le> r a Suc n'\n                      \\<le> #\\<^sub>\\<le> r b Suc n'", "case True"], ["proof (state)\nthis:\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>#\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n';\n     \\<exists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\\<rbrakk>\n    \\<Longrightarrow> #\\<^sub>\\<le> r a Suc n'\n                      \\<le> #\\<^sub>\\<le> r b Suc n'\n 2. \\<lbrakk>#\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n';\n     \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\\<rbrakk>\n    \\<Longrightarrow> #\\<^sub>\\<le> r a Suc n'\n                      \\<le> #\\<^sub>\\<le> r b Suc n'", "from this"], ["proof (chain)\npicking this:\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = Suc n'", "obtain n\\<^sub>0 where fn0:\\<open>f n\\<^sub>0 = Suc n'\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>0.\n        f n\\<^sub>0 = Suc n' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f n\\<^sub>0 = Suc n'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>#\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n';\n     \\<exists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\\<rbrakk>\n    \\<Longrightarrow> #\\<^sub>\\<le> r a Suc n'\n                      \\<le> #\\<^sub>\\<le> r b Suc n'\n 2. \\<lbrakk>#\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n';\n     \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\\<rbrakk>\n    \\<Longrightarrow> #\\<^sub>\\<le> r a Suc n'\n                      \\<le> #\\<^sub>\\<le> r b Suc n'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "proof (cases \\<open>hamlet ((Rep_run sub) n\\<^sub>0 a)\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. hamlet (Rep_run sub n\\<^sub>0 a) \\<Longrightarrow>\n    #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'\n 2. \\<not> hamlet (Rep_run sub n\\<^sub>0 a) \\<Longrightarrow>\n    #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "case True"], ["proof (state)\nthis:\n  hamlet (Rep_run sub n\\<^sub>0 a)\n\ngoal (2 subgoals):\n 1. hamlet (Rep_run sub n\\<^sub>0 a) \\<Longrightarrow>\n    #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'\n 2. \\<not> hamlet (Rep_run sub n\\<^sub>0 a) \\<Longrightarrow>\n    #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "have \\<open>run_tick_count r a (f n\\<^sub>0) \\<le> run_tick_count r b (f n\\<^sub>0)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a f n\\<^sub>0 \\<le> #\\<^sub>\\<le> r b f n\\<^sub>0", "using assms(2) run_tick_count_sub[OF *]"], ["proof (prove)\nusing this:\n  \\<forall>n. #\\<^sub>\\<le> sub a n \\<le> #\\<^sub>\\<le> sub b n\n  #\\<^sub>\\<le> sub ?c ?n = #\\<^sub>\\<le> r ?c f ?n\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a f n\\<^sub>0 \\<le> #\\<^sub>\\<le> r b f n\\<^sub>0", "by simp"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r a f n\\<^sub>0 \\<le> #\\<^sub>\\<le> r b f n\\<^sub>0\n\ngoal (2 subgoals):\n 1. hamlet (Rep_run sub n\\<^sub>0 a) \\<Longrightarrow>\n    #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'\n 2. \\<not> hamlet (Rep_run sub n\\<^sub>0 a) \\<Longrightarrow>\n    #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  #\\<^sub>\\<le> r a f n\\<^sub>0 \\<le> #\\<^sub>\\<le> r b f n\\<^sub>0\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "by (simp add: fn0)"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run sub n\\<^sub>0 a) \\<Longrightarrow>\n    #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run sub n\\<^sub>0 a) \\<Longrightarrow>\n    #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "case False"], ["proof (state)\nthis:\n  \\<not> hamlet (Rep_run sub n\\<^sub>0 a)\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run sub n\\<^sub>0 a) \\<Longrightarrow>\n    #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "hence \\<open>\\<not> hamlet ((Rep_run r) (Suc n') a)\\<close>"], ["proof (prove)\nusing this:\n  \\<not> hamlet (Rep_run sub n\\<^sub>0 a)\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r (Suc n') a)", "using * fn0 ticks_sub"], ["proof (prove)\nusing this:\n  \\<not> hamlet (Rep_run sub n\\<^sub>0 a)\n  dilating f sub r\n  f n\\<^sub>0 = Suc n'\n  dilating ?f ?sub ?r \\<Longrightarrow>\n  hamlet (Rep_run ?sub ?n ?a) = hamlet (Rep_run ?r (?f ?n) ?a)\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run r (Suc n') a)", "by fastforce"], ["proof (state)\nthis:\n  \\<not> hamlet (Rep_run r (Suc n') a)\n\ngoal (1 subgoal):\n 1. \\<not> hamlet (Rep_run sub n\\<^sub>0 a) \\<Longrightarrow>\n    #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> hamlet (Rep_run r (Suc n') a)\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "by (simp add: Suc.IH le_SucI)"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>#\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n';\n     \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\\<rbrakk>\n    \\<Longrightarrow> #\\<^sub>\\<le> r a Suc n'\n                      \\<le> #\\<^sub>\\<le> r b Suc n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>#\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n';\n     \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\\<rbrakk>\n    \\<Longrightarrow> #\\<^sub>\\<le> r a Suc n'\n                      \\<le> #\\<^sub>\\<le> r b Suc n'", "case False"], ["proof (state)\nthis:\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>#\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n';\n     \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\\<rbrakk>\n    \\<Longrightarrow> #\\<^sub>\\<le> r a Suc n'\n                      \\<le> #\\<^sub>\\<le> r b Suc n'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "using * Suc.IH no_tick_sub"], ["proof (prove)\nusing this:\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n'\n  dilating f sub r\n  #\\<^sub>\\<le> r a n' \\<le> #\\<^sub>\\<le> r b n'\n  dilating ?f ?sub ?r \\<Longrightarrow>\n  (\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = ?n) \\<longrightarrow>\n  \\<not> hamlet (Rep_run ?r ?n ?a)\n\ngoal (1 subgoal):\n 1. #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'", "by fastforce"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r a Suc n' \\<le> #\\<^sub>\\<le> r b Suc n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  #\\<^sub>\\<le> r a n \\<le> #\\<^sub>\\<le> r b n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Time does not progress during stuttering instants.\n\\<close>"], ["", "lemma stutter_no_time:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>\\<And>k. f n < k \\<and> k \\<le> m \\<Longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)\\<close>\n      and \\<open>m > f n\\<close>\n    shows \\<open>time ((Rep_run r) m c) = time ((Rep_run r) (f n) c)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "from assms"], ["proof (chain)\npicking this:\n  dilating f sub r\n  f n < ?k \\<and> ?k \\<le> m \\<Longrightarrow>\n  \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k\n  f n < m", "have \\<open>\\<forall>k. k < m - (f n) \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = Suc ((f n) + k))\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n  f n < ?k \\<and> ?k \\<le> m \\<Longrightarrow>\n  \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k\n  f n < m\n\ngoal (1 subgoal):\n 1. \\<forall>k<m - f n. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = Suc (f n + k)", "by simp"], ["proof (state)\nthis:\n  \\<forall>k<m - f n. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = Suc (f n + k)\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "hence \\<open>\\<forall>k. k < m - (f n)\n            \\<longrightarrow> time ((Rep_run r) (Suc ((f n) + k)) c) = time ((Rep_run r) ((f n) + k) c)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k<m - f n. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = Suc (f n + k)\n\ngoal (1 subgoal):\n 1. \\<forall>k<m - f n.\n       time (Rep_run r (Suc (f n + k)) c) = time (Rep_run r (f n + k) c)", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<forall>k<m - f n. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = Suc (f n + k)\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. \\<forall>k<m - f n.\n       time (Rep_run r (Suc (f n + k)) c) = time (Rep_run r (f n + k) c)", "by (simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  \\<forall>k<m - f n.\n     time (Rep_run r (Suc (f n + k)) c) = time (Rep_run r (f n + k) c)\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "hence *:\\<open>\\<forall>k. k < m - (f n) \\<longrightarrow> time ((Rep_run r) (Suc ((f n) + k)) c) = time ((Rep_run r) (f n) c)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k<m - f n.\n     time (Rep_run r (Suc (f n + k)) c) = time (Rep_run r (f n + k) c)\n\ngoal (1 subgoal):\n 1. \\<forall>k<m - f n.\n       time (Rep_run r (Suc (f n + k)) c) = time (Rep_run r (f n) c)", "using bounded_suc_ind[of \\<open>m - (f n)\\<close> \\<open>\\<lambda>k. time (Rep_run r k c)\\<close> \\<open>f n\\<close>]"], ["proof (prove)\nusing this:\n  \\<forall>k<m - f n.\n     time (Rep_run r (Suc (f n + k)) c) = time (Rep_run r (f n + k) c)\n  \\<lbrakk>\\<And>k.\n              k < m - f n \\<Longrightarrow>\n              time (Rep_run r (Suc (f n + k)) c) =\n              time (Rep_run r (f n + k) c);\n   ?k < m - f n\\<rbrakk>\n  \\<Longrightarrow> time (Rep_run r (Suc (f n + ?k)) c) =\n                    time (Rep_run r (f n) c)\n\ngoal (1 subgoal):\n 1. \\<forall>k<m - f n.\n       time (Rep_run r (Suc (f n + k)) c) = time (Rep_run r (f n) c)", "by blast"], ["proof (state)\nthis:\n  \\<forall>k<m - f n.\n     time (Rep_run r (Suc (f n + k)) c) = time (Rep_run r (f n) c)\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "from assms(3)"], ["proof (chain)\npicking this:\n  f n < m", "obtain m\\<^sub>0 where m0:\\<open>Suc m\\<^sub>0 = m - (f n)\\<close>"], ["proof (prove)\nusing this:\n  f n < m\n\ngoal (1 subgoal):\n 1. (\\<And>m\\<^sub>0.\n        Suc m\\<^sub>0 = m - f n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Suc_diff_Suc"], ["proof (prove)\nusing this:\n  f n < m\n  ?n < ?m \\<Longrightarrow> Suc (?m - Suc ?n) = ?m - ?n\n\ngoal (1 subgoal):\n 1. (\\<And>m\\<^sub>0.\n        Suc m\\<^sub>0 = m - f n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Suc m\\<^sub>0 = m - f n\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "with *"], ["proof (chain)\npicking this:\n  \\<forall>k<m - f n.\n     time (Rep_run r (Suc (f n + k)) c) = time (Rep_run r (f n) c)\n  Suc m\\<^sub>0 = m - f n", "have \\<open>time ((Rep_run r) (Suc ((f n) + m\\<^sub>0)) c) = time ((Rep_run r) (f n) c)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k<m - f n.\n     time (Rep_run r (Suc (f n + k)) c) = time (Rep_run r (f n) c)\n  Suc m\\<^sub>0 = m - f n\n\ngoal (1 subgoal):\n 1. time (Rep_run r (Suc (f n + m\\<^sub>0)) c) = time (Rep_run r (f n) c)", "by auto"], ["proof (state)\nthis:\n  time (Rep_run r (Suc (f n + m\\<^sub>0)) c) = time (Rep_run r (f n) c)\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "moreover"], ["proof (state)\nthis:\n  time (Rep_run r (Suc (f n + m\\<^sub>0)) c) = time (Rep_run r (f n) c)\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "from m0"], ["proof (chain)\npicking this:\n  Suc m\\<^sub>0 = m - f n", "have \\<open>Suc ((f n) + m\\<^sub>0) = m\\<close>"], ["proof (prove)\nusing this:\n  Suc m\\<^sub>0 = m - f n\n\ngoal (1 subgoal):\n 1. Suc (f n + m\\<^sub>0) = m", "by simp"], ["proof (state)\nthis:\n  Suc (f n + m\\<^sub>0) = m\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "ultimately"], ["proof (chain)\npicking this:\n  time (Rep_run r (Suc (f n + m\\<^sub>0)) c) = time (Rep_run r (f n) c)\n  Suc (f n + m\\<^sub>0) = m", "show ?thesis"], ["proof (prove)\nusing this:\n  time (Rep_run r (Suc (f n + m\\<^sub>0)) c) = time (Rep_run r (f n) c)\n  Suc (f n + m\\<^sub>0) = m\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "by simp"], ["proof (state)\nthis:\n  time (Rep_run r m c) = time (Rep_run r (f n) c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma time_stuttering:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>time ((Rep_run sub) n c) = \\<tau>\\<close>\n      and \\<open>\\<And>k. f n < k \\<and> k \\<le> m \\<Longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)\\<close>\n      and \\<open>m > f n\\<close>\n    shows \\<open>time ((Rep_run r) m c) = \\<tau>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = \\<tau>", "from assms(3)"], ["proof (chain)\npicking this:\n  f n < ?k \\<and> ?k \\<le> m \\<Longrightarrow>\n  \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k", "have \\<open>time ((Rep_run r) m c) = time ((Rep_run r) (f n) c)\\<close>"], ["proof (prove)\nusing this:\n  f n < ?k \\<and> ?k \\<le> m \\<Longrightarrow>\n  \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "using  stutter_no_time[OF assms(1,3,4)]"], ["proof (prove)\nusing this:\n  f n < ?k \\<and> ?k \\<le> m \\<Longrightarrow>\n  \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k\n  (\\<And>k.\n      f n < k \\<and> k \\<le> m \\<Longrightarrow>\n      f n < k \\<and> k \\<le> m) \\<Longrightarrow>\n  time (Rep_run r m ?c) = time (Rep_run r (f n) ?c)\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run r (f n) c)", "by blast"], ["proof (state)\nthis:\n  time (Rep_run r m c) = time (Rep_run r (f n) c)\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = \\<tau>", "also"], ["proof (state)\nthis:\n  time (Rep_run r m c) = time (Rep_run r (f n) c)\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = \\<tau>", "from assms(1,2)"], ["proof (chain)\npicking this:\n  dilating f sub r\n  time (Rep_run sub n c) = \\<tau>", "have \\<open>time ((Rep_run r) (f n) c) = \\<tau>\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n  time (Rep_run sub n c) = \\<tau>\n\ngoal (1 subgoal):\n 1. time (Rep_run r (f n) c) = \\<tau>", "by (simp add: dilating_def)"], ["proof (state)\nthis:\n  time (Rep_run r (f n) c) = \\<tau>\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = \\<tau>", "finally"], ["proof (chain)\npicking this:\n  time (Rep_run r m c) = \\<tau>", "show ?thesis"], ["proof (prove)\nusing this:\n  time (Rep_run r m c) = \\<tau>\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = \\<tau>", "."], ["proof (state)\nthis:\n  time (Rep_run r m c) = \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The first instant at which a given date is reached on a clock is preserved\n  by dilation.\n\\<close>"], ["", "lemma first_time_image:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>first_time sub c n t = first_time r c (f n) t\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. first_time sub c n t = first_time r c (f n) t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. first_time sub c n t \\<Longrightarrow> first_time r c (f n) t\n 2. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "assume \\<open>first_time sub c n t\\<close>"], ["proof (state)\nthis:\n  first_time sub c n t\n\ngoal (2 subgoals):\n 1. first_time sub c n t \\<Longrightarrow> first_time r c (f n) t\n 2. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "with before_first_time[OF this]"], ["proof (chain)\npicking this:\n  ?m < n \\<Longrightarrow> time (Rep_run sub ?m c) < t\n  first_time sub c n t", "have *:\\<open>time ((Rep_run sub) n c) = t \\<and> (\\<forall>m < n. time((Rep_run sub) m c) < t)\\<close>"], ["proof (prove)\nusing this:\n  ?m < n \\<Longrightarrow> time (Rep_run sub ?m c) < t\n  first_time sub c n t\n\ngoal (1 subgoal):\n 1. time (Rep_run sub n c) = t \\<and>\n    (\\<forall>m<n. time (Rep_run sub m c) < t)", "by (simp add: first_time_def)"], ["proof (state)\nthis:\n  time (Rep_run sub n c) = t \\<and>\n  (\\<forall>m<n. time (Rep_run sub m c) < t)\n\ngoal (2 subgoals):\n 1. first_time sub c n t \\<Longrightarrow> first_time r c (f n) t\n 2. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "moreover"], ["proof (state)\nthis:\n  time (Rep_run sub n c) = t \\<and>\n  (\\<forall>m<n. time (Rep_run sub m c) < t)\n\ngoal (2 subgoals):\n 1. first_time sub c n t \\<Longrightarrow> first_time r c (f n) t\n 2. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "have \\<open>\\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)", "using assms(1)"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. \\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)", "by (simp add: dilating_def)"], ["proof (state)\nthis:\n  \\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)\n\ngoal (2 subgoals):\n 1. first_time sub c n t \\<Longrightarrow> first_time r c (f n) t\n 2. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "ultimately"], ["proof (chain)\npicking this:\n  time (Rep_run sub n c) = t \\<and>\n  (\\<forall>m<n. time (Rep_run sub m c) < t)\n  \\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)", "have **:\n    \\<open>time ((Rep_run r) (f n) c) = t \\<and> (\\<forall>m < n. time((Rep_run r) (f m) c) < t)\\<close>"], ["proof (prove)\nusing this:\n  time (Rep_run sub n c) = t \\<and>\n  (\\<forall>m<n. time (Rep_run sub m c) < t)\n  \\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)\n\ngoal (1 subgoal):\n 1. time (Rep_run r (f n) c) = t \\<and>\n    (\\<forall>m<n. time (Rep_run r (f m) c) < t)", "by simp"], ["proof (state)\nthis:\n  time (Rep_run r (f n) c) = t \\<and>\n  (\\<forall>m<n. time (Rep_run r (f m) c) < t)\n\ngoal (2 subgoals):\n 1. first_time sub c n t \\<Longrightarrow> first_time r c (f n) t\n 2. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "have \\<open>\\<forall>m < f n. time ((Rep_run r) m c) < t\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m<f n. time (Rep_run r m c) < t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>m<f n. time (Rep_run r m c) < t", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>m<f n. time (Rep_run r m c) < t", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>m<f n. time (Rep_run r m c) < t", "assume hyp:\\<open>m < f n\\<close>"], ["proof (state)\nthis:\n  m < f n\n\ngoal (1 subgoal):\n 1. \\<forall>m<f n. time (Rep_run r m c) < t", "have \\<open>time ((Rep_run r) m c) < t\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. time (Rep_run r m c) < t", "proof (cases \\<open>\\<exists>m\\<^sub>0. f m\\<^sub>0 = m\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t\n 2. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "case True"], ["proof (state)\nthis:\n  \\<exists>m\\<^sub>0. f m\\<^sub>0 = m\n\ngoal (2 subgoals):\n 1. \\<exists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t\n 2. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "from this"], ["proof (chain)\npicking this:\n  \\<exists>m\\<^sub>0. f m\\<^sub>0 = m", "obtain m\\<^sub>0 where mm0:\\<open>m = f m\\<^sub>0\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m\\<^sub>0. f m\\<^sub>0 = m\n\ngoal (1 subgoal):\n 1. (\\<And>m\\<^sub>0.\n        m = f m\\<^sub>0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m = f m\\<^sub>0\n\ngoal (2 subgoals):\n 1. \\<exists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t\n 2. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "with hyp"], ["proof (chain)\npicking this:\n  m < f n\n  m = f m\\<^sub>0", "have m0n:\\<open>m\\<^sub>0 < n\\<close>"], ["proof (prove)\nusing this:\n  m < f n\n  m = f m\\<^sub>0\n\ngoal (1 subgoal):\n 1. m\\<^sub>0 < n", "using assms(1)"], ["proof (prove)\nusing this:\n  m < f n\n  m = f m\\<^sub>0\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. m\\<^sub>0 < n", "by (simp add: dilating_def dilating_fun_def strict_mono_less)"], ["proof (state)\nthis:\n  m\\<^sub>0 < n\n\ngoal (2 subgoals):\n 1. \\<exists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t\n 2. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "hence \\<open>time ((Rep_run sub) m\\<^sub>0 c) < t\\<close>"], ["proof (prove)\nusing this:\n  m\\<^sub>0 < n\n\ngoal (1 subgoal):\n 1. time (Rep_run sub m\\<^sub>0 c) < t", "using *"], ["proof (prove)\nusing this:\n  m\\<^sub>0 < n\n  time (Rep_run sub n c) = t \\<and>\n  (\\<forall>m<n. time (Rep_run sub m c) < t)\n\ngoal (1 subgoal):\n 1. time (Rep_run sub m\\<^sub>0 c) < t", "by blast"], ["proof (state)\nthis:\n  time (Rep_run sub m\\<^sub>0 c) < t\n\ngoal (2 subgoals):\n 1. \\<exists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t\n 2. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "thus ?thesis"], ["proof (prove)\nusing this:\n  time (Rep_run sub m\\<^sub>0 c) < t\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) < t", "by (simp add: mm0 m0n **)"], ["proof (state)\nthis:\n  time (Rep_run r m c) < t\n\ngoal (1 subgoal):\n 1. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "case False"], ["proof (state)\nthis:\n  \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m\n\ngoal (1 subgoal):\n 1. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "hence \\<open>\\<exists>m\\<^sub>p. f m\\<^sub>p < m \\<and> (\\<forall>k. f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^sub>p.\n       f m\\<^sub>p < m \\<and>\n       (\\<forall>k.\n           f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "using greatest_prev_image[OF assms]"], ["proof (prove)\nusing this:\n  \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m\n  \\<nexists>n\\<^sub>0. f n\\<^sub>0 = ?n \\<Longrightarrow>\n  \\<exists>n\\<^sub>p.\n     f n\\<^sub>p < ?n \\<and>\n     (\\<forall>k.\n         f n\\<^sub>p < k \\<and> k \\<le> ?n \\<longrightarrow>\n         (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^sub>p.\n       f m\\<^sub>p < m \\<and>\n       (\\<forall>k.\n           f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow>\n           (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "by simp"], ["proof (state)\nthis:\n  \\<exists>m\\<^sub>p.\n     f m\\<^sub>p < m \\<and>\n     (\\<forall>k.\n         f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow>\n         (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "from this"], ["proof (chain)\npicking this:\n  \\<exists>m\\<^sub>p.\n     f m\\<^sub>p < m \\<and>\n     (\\<forall>k.\n         f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow>\n         (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "obtain m\\<^sub>p where\n          mp:\\<open>f m\\<^sub>p < m \\<and> (\\<forall>k. f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow> (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m\\<^sub>p.\n     f m\\<^sub>p < m \\<and>\n     (\\<forall>k.\n         f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow>\n         (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. (\\<And>m\\<^sub>p.\n        f m\\<^sub>p < m \\<and>\n        (\\<forall>k.\n            f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow>\n            (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f m\\<^sub>p < m \\<and>\n  (\\<forall>k.\n      f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "hence \\<open>time ((Rep_run r) m c) = time ((Rep_run sub) m\\<^sub>p c)\\<close>"], ["proof (prove)\nusing this:\n  f m\\<^sub>p < m \\<and>\n  (\\<forall>k.\n      f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run sub m\\<^sub>p c)", "using time_stuttering[OF assms]"], ["proof (prove)\nusing this:\n  f m\\<^sub>p < m \\<and>\n  (\\<forall>k.\n      f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n  \\<lbrakk>time (Rep_run sub ?n ?c) = ?\\<tau>;\n   \\<And>k.\n      f ?n < k \\<and> k \\<le> ?m \\<Longrightarrow>\n      \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n   f ?n < ?m\\<rbrakk>\n  \\<Longrightarrow> time (Rep_run r ?m ?c) = ?\\<tau>\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) = time (Rep_run sub m\\<^sub>p c)", "by blast"], ["proof (state)\nthis:\n  time (Rep_run r m c) = time (Rep_run sub m\\<^sub>p c)\n\ngoal (1 subgoal):\n 1. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "also"], ["proof (state)\nthis:\n  time (Rep_run r m c) = time (Rep_run sub m\\<^sub>p c)\n\ngoal (1 subgoal):\n 1. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "from hyp mp"], ["proof (chain)\npicking this:\n  m < f n\n  f m\\<^sub>p < m \\<and>\n  (\\<forall>k.\n      f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))", "have \\<open>f m\\<^sub>p < f n\\<close>"], ["proof (prove)\nusing this:\n  m < f n\n  f m\\<^sub>p < m \\<and>\n  (\\<forall>k.\n      f m\\<^sub>p < k \\<and> k \\<le> m \\<longrightarrow>\n      (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k))\n\ngoal (1 subgoal):\n 1. f m\\<^sub>p < f n", "by linarith"], ["proof (state)\nthis:\n  f m\\<^sub>p < f n\n\ngoal (1 subgoal):\n 1. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "hence \\<open>m\\<^sub>p < n\\<close>"], ["proof (prove)\nusing this:\n  f m\\<^sub>p < f n\n\ngoal (1 subgoal):\n 1. m\\<^sub>p < n", "using assms"], ["proof (prove)\nusing this:\n  f m\\<^sub>p < f n\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. m\\<^sub>p < n", "by (simp add:dilating_def dilating_fun_def strict_mono_less)"], ["proof (state)\nthis:\n  m\\<^sub>p < n\n\ngoal (1 subgoal):\n 1. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "hence \\<open>time ((Rep_run sub) m\\<^sub>p c) < t\\<close>"], ["proof (prove)\nusing this:\n  m\\<^sub>p < n\n\ngoal (1 subgoal):\n 1. time (Rep_run sub m\\<^sub>p c) < t", "using *"], ["proof (prove)\nusing this:\n  m\\<^sub>p < n\n  time (Rep_run sub n c) = t \\<and>\n  (\\<forall>m<n. time (Rep_run sub m c) < t)\n\ngoal (1 subgoal):\n 1. time (Rep_run sub m\\<^sub>p c) < t", "by simp"], ["proof (state)\nthis:\n  time (Rep_run sub m\\<^sub>p c) < t\n\ngoal (1 subgoal):\n 1. \\<nexists>m\\<^sub>0. f m\\<^sub>0 = m \\<Longrightarrow>\n    time (Rep_run r m c) < t", "finally"], ["proof (chain)\npicking this:\n  time (Rep_run r m c) < t", "show ?thesis"], ["proof (prove)\nusing this:\n  time (Rep_run r m c) < t\n\ngoal (1 subgoal):\n 1. time (Rep_run r m c) < t", "by simp"], ["proof (state)\nthis:\n  time (Rep_run r m c) < t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  time (Rep_run r m c) < t\n\ngoal (1 subgoal):\n 1. \\<forall>m<f n. time (Rep_run r m c) < t", "}"], ["proof (state)\nthis:\n  ?m2 < f n \\<Longrightarrow> time (Rep_run r ?m2 c) < t\n\ngoal (1 subgoal):\n 1. \\<forall>m<f n. time (Rep_run r m c) < t", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?m2 < f n \\<Longrightarrow> time (Rep_run r ?m2 c) < t\n\ngoal (1 subgoal):\n 1. \\<forall>m<f n. time (Rep_run r m c) < t", "by simp"], ["proof (state)\nthis:\n  \\<forall>m<f n. time (Rep_run r m c) < t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m<f n. time (Rep_run r m c) < t\n\ngoal (2 subgoals):\n 1. first_time sub c n t \\<Longrightarrow> first_time r c (f n) t\n 2. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "with **"], ["proof (chain)\npicking this:\n  time (Rep_run r (f n) c) = t \\<and>\n  (\\<forall>m<n. time (Rep_run r (f m) c) < t)\n  \\<forall>m<f n. time (Rep_run r m c) < t", "show \\<open>first_time r c (f n) t\\<close>"], ["proof (prove)\nusing this:\n  time (Rep_run r (f n) c) = t \\<and>\n  (\\<forall>m<n. time (Rep_run r (f m) c) < t)\n  \\<forall>m<f n. time (Rep_run r m c) < t\n\ngoal (1 subgoal):\n 1. first_time r c (f n) t", "by (simp add: alt_first_time_def)"], ["proof (state)\nthis:\n  first_time r c (f n) t\n\ngoal (1 subgoal):\n 1. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "assume \\<open>first_time r c (f n) t\\<close>"], ["proof (state)\nthis:\n  first_time r c (f n) t\n\ngoal (1 subgoal):\n 1. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "hence *:\\<open>time ((Rep_run r) (f n) c) = t \\<and> (\\<forall>k < f n. time ((Rep_run r) k c) < t)\\<close>"], ["proof (prove)\nusing this:\n  first_time r c (f n) t\n\ngoal (1 subgoal):\n 1. time (Rep_run r (f n) c) = t \\<and>\n    (\\<forall>k<f n. time (Rep_run r k c) < t)", "by (simp add: first_time_def before_first_time)"], ["proof (state)\nthis:\n  time (Rep_run r (f n) c) = t \\<and>\n  (\\<forall>k<f n. time (Rep_run r k c) < t)\n\ngoal (1 subgoal):\n 1. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "hence \\<open>time ((Rep_run sub) n c) = t\\<close>"], ["proof (prove)\nusing this:\n  time (Rep_run r (f n) c) = t \\<and>\n  (\\<forall>k<f n. time (Rep_run r k c) < t)\n\ngoal (1 subgoal):\n 1. time (Rep_run sub n c) = t", "using assms dilating_def"], ["proof (prove)\nusing this:\n  time (Rep_run r (f n) c) = t \\<and>\n  (\\<forall>k<f n. time (Rep_run r k c) < t)\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n\ngoal (1 subgoal):\n 1. time (Rep_run sub n c) = t", "by blast"], ["proof (state)\nthis:\n  time (Rep_run sub n c) = t\n\ngoal (1 subgoal):\n 1. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "moreover"], ["proof (state)\nthis:\n  time (Rep_run sub n c) = t\n\ngoal (1 subgoal):\n 1. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "from *"], ["proof (chain)\npicking this:\n  time (Rep_run r (f n) c) = t \\<and>\n  (\\<forall>k<f n. time (Rep_run r k c) < t)", "have \\<open>(\\<forall>k < n. time ((Rep_run sub) k c) < t)\\<close>"], ["proof (prove)\nusing this:\n  time (Rep_run r (f n) c) = t \\<and>\n  (\\<forall>k<f n. time (Rep_run r k c) < t)\n\ngoal (1 subgoal):\n 1. \\<forall>k<n. time (Rep_run sub k c) < t", "using assms dilating_def dilating_fun_def strict_monoD"], ["proof (prove)\nusing this:\n  time (Rep_run r (f n) c) = t \\<and>\n  (\\<forall>k<f n. time (Rep_run r k c) < t)\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n  \\<lbrakk>strict_mono ?f; ?x < ?y\\<rbrakk> \\<Longrightarrow> ?f ?x < ?f ?y\n\ngoal (1 subgoal):\n 1. \\<forall>k<n. time (Rep_run sub k c) < t", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>k<n. time (Rep_run sub k c) < t\n\ngoal (1 subgoal):\n 1. first_time r c (f n) t \\<Longrightarrow> first_time sub c n t", "ultimately"], ["proof (chain)\npicking this:\n  time (Rep_run sub n c) = t\n  \\<forall>k<n. time (Rep_run sub k c) < t", "show \\<open>first_time sub c n t\\<close>"], ["proof (prove)\nusing this:\n  time (Rep_run sub n c) = t\n  \\<forall>k<n. time (Rep_run sub k c) < t\n\ngoal (1 subgoal):\n 1. first_time sub c n t", "by (simp add: alt_first_time_def)"], ["proof (state)\nthis:\n  first_time sub c n t\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The first instant of a dilated run is necessarily the image of the first instant\n  of the original run.\n\\<close>"], ["", "lemma first_dilated_instant:\n  assumes \\<open>strict_mono f\\<close>\n      and \\<open>f (0::nat) = (0::nat)\\<close>\n    shows \\<open>Max {i. f i \\<le> 0} = 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max {i. f i \\<le> 0} = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Max {i. f i \\<le> 0} = 0", "from assms(2)"], ["proof (chain)\npicking this:\n  f 0 = 0", "have \\<open>\\<forall>n > 0. f n > 0\\<close>"], ["proof (prove)\nusing this:\n  f 0 = 0\n\ngoal (1 subgoal):\n 1. \\<forall>n>0. 0 < f n", "using strict_monoD[OF assms(1)]"], ["proof (prove)\nusing this:\n  f 0 = 0\n  ?x < ?y \\<Longrightarrow> f ?x < f ?y\n\ngoal (1 subgoal):\n 1. \\<forall>n>0. 0 < f n", "by force"], ["proof (state)\nthis:\n  \\<forall>n>0. 0 < f n\n\ngoal (1 subgoal):\n 1. Max {i. f i \\<le> 0} = 0", "hence \\<open>\\<forall>n \\<noteq> 0. \\<not>(f n \\<le> 0)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n>0. 0 < f n\n\ngoal (1 subgoal):\n 1. \\<forall>n. n \\<noteq> 0 \\<longrightarrow> \\<not> f n \\<le> 0", "by simp"], ["proof (state)\nthis:\n  \\<forall>n. n \\<noteq> 0 \\<longrightarrow> \\<not> f n \\<le> 0\n\ngoal (1 subgoal):\n 1. Max {i. f i \\<le> 0} = 0", "with assms(2)"], ["proof (chain)\npicking this:\n  f 0 = 0\n  \\<forall>n. n \\<noteq> 0 \\<longrightarrow> \\<not> f n \\<le> 0", "have \\<open>{i. f i \\<le> 0} = {0}\\<close>"], ["proof (prove)\nusing this:\n  f 0 = 0\n  \\<forall>n. n \\<noteq> 0 \\<longrightarrow> \\<not> f n \\<le> 0\n\ngoal (1 subgoal):\n 1. {i. f i \\<le> 0} = {0}", "by blast"], ["proof (state)\nthis:\n  {i. f i \\<le> 0} = {0}\n\ngoal (1 subgoal):\n 1. Max {i. f i \\<le> 0} = 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  {i. f i \\<le> 0} = {0}\n\ngoal (1 subgoal):\n 1. Max {i. f i \\<le> 0} = 0", "by simp"], ["proof (state)\nthis:\n  Max {i. f i \\<le> 0} = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  For any instant @{term \\<open>n\\<close>} of a dilated run, let @{term \\<open>n\\<^sub>0\\<close>} be the last \n  instant before @{term \\<open>n\\<close>} that is the image of an original instant. All instants\n  strictly after @{term \\<open>n\\<^sub>0\\<close>} and before @{term \\<open>n\\<close>} are stuttering instants.\n\\<close>"], ["", "lemma not_image_stut:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>n\\<^sub>0 = Max {i. f i \\<le> n}\\<close>\n      and \\<open>f n\\<^sub>0 < k \\<and> k \\<le> n\\<close>\n    shows \\<open>\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k", "from assms(1)"], ["proof (chain)\npicking this:\n  dilating f sub r", "have smf:\\<open>strict_mono f\\<close>\n                and fxge:\\<open>\\<forall>x. f x \\<ge> x\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. strict_mono f &&& \\<forall>x. x \\<le> f x", "by (auto simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  strict_mono f\n  \\<forall>x. x \\<le> f x\n\ngoal (1 subgoal):\n 1. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k", "have finite_prefix:\\<open>finite {i. f i \\<le> n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. f i \\<le> n}", "by (simp add: finite_less_ub fxge)"], ["proof (state)\nthis:\n  finite {i. f i \\<le> n}\n\ngoal (1 subgoal):\n 1. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k", "from assms(1)"], ["proof (chain)\npicking this:\n  dilating f sub r", "have \\<open>f 0 \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. f 0 \\<le> n", "by (simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  f 0 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k", "hence \\<open>{i. f i \\<le> n} \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  f 0 \\<le> n\n\ngoal (1 subgoal):\n 1. {i. f i \\<le> n} \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  {i. f i \\<le> n} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k", "from assms(3) fxge"], ["proof (chain)\npicking this:\n  f n\\<^sub>0 < k \\<and> k \\<le> n\n  \\<forall>x. x \\<le> f x", "have \\<open>f n\\<^sub>0 < n\\<close>"], ["proof (prove)\nusing this:\n  f n\\<^sub>0 < k \\<and> k \\<le> n\n  \\<forall>x. x \\<le> f x\n\ngoal (1 subgoal):\n 1. f n\\<^sub>0 < n", "by linarith"], ["proof (state)\nthis:\n  f n\\<^sub>0 < n\n\ngoal (1 subgoal):\n 1. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k", "from assms(2)"], ["proof (chain)\npicking this:\n  n\\<^sub>0 = Max {i. f i \\<le> n}", "have \\<open>\\<forall>x > n\\<^sub>0. f x > n\\<close>"], ["proof (prove)\nusing this:\n  n\\<^sub>0 = Max {i. f i \\<le> n}\n\ngoal (1 subgoal):\n 1. \\<forall>x>n\\<^sub>0. n < f x", "using Max.coboundedI[OF finite_prefix]"], ["proof (prove)\nusing this:\n  n\\<^sub>0 = Max {i. f i \\<le> n}\n  ?a \\<in> {i. f i \\<le> n} \\<Longrightarrow> ?a \\<le> Max {i. f i \\<le> n}\n\ngoal (1 subgoal):\n 1. \\<forall>x>n\\<^sub>0. n < f x", "using not_le"], ["proof (prove)\nusing this:\n  n\\<^sub>0 = Max {i. f i \\<le> n}\n  ?a \\<in> {i. f i \\<le> n} \\<Longrightarrow> ?a \\<le> Max {i. f i \\<le> n}\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. \\<forall>x>n\\<^sub>0. n < f x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x>n\\<^sub>0. n < f x\n\ngoal (1 subgoal):\n 1. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k", "with assms(3) strict_mono_less[OF smf]"], ["proof (chain)\npicking this:\n  f n\\<^sub>0 < k \\<and> k \\<le> n\n  (f ?x < f ?y) = (?x < ?y)\n  \\<forall>x>n\\<^sub>0. n < f x", "show ?thesis"], ["proof (prove)\nusing this:\n  f n\\<^sub>0 < k \\<and> k \\<le> n\n  (f ?x < f ?y) = (?x < ?y)\n  \\<forall>x>n\\<^sub>0. n < f x\n\ngoal (1 subgoal):\n 1. \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k", "by auto"], ["proof (state)\nthis:\n  \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  For any dilating function @{term \\<open>f\\<close>}, @{term \\<open>dil_inverse f\\<close>} is a \n  contracting function.\n\\<close>"], ["", "lemma contracting_inverse:\n  assumes \\<open>dilating f sub r\\<close>\n    shows \\<open>contracting (dil_inverse f) r sub f\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "from assms"], ["proof (chain)\npicking this:\n  dilating f sub r", "have smf:\\<open>strict_mono f\\<close>\n    and no_img_tick:\\<open>\\<forall>k. (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k) \\<longrightarrow> (\\<forall>c. \\<not>(hamlet ((Rep_run r) k c)))\\<close>\n    and no_img_time:\\<open>\\<And>n. (\\<nexists>n\\<^sub>0. f n\\<^sub>0 = (Suc n))\n                          \\<longrightarrow> (\\<forall>c. time ((Rep_run r) (Suc n) c) = time ((Rep_run r) n c))\\<close>\n    and fxge:\\<open>\\<forall>x. f x \\<ge> x\\<close> and f0n:\\<open>\\<And>n. f 0 \\<le> n\\<close> and f0:\\<open>f 0 = 0\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. (strict_mono f &&&\n     \\<forall>k.\n        (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k) \\<longrightarrow>\n        (\\<forall>c. \\<not> hamlet (Rep_run r k c)) &&&\n     (\\<And>n.\n         (\\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc n) \\<longrightarrow>\n         (\\<forall>c.\n             time (Rep_run r (Suc n) c) = time (Rep_run r n c)))) &&&\n    \\<forall>x. x \\<le> f x &&& (\\<And>n. f 0 \\<le> n) &&& f 0 = 0", "by (auto simp add: dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  strict_mono f\n  \\<forall>k.\n     (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k) \\<longrightarrow>\n     (\\<forall>c. \\<not> hamlet (Rep_run r k c))\n  (\\<nexists>n\\<^sub>0. f n\\<^sub>0 = Suc ?n) \\<longrightarrow>\n  (\\<forall>c. time (Rep_run r (Suc ?n) c) = time (Rep_run r ?n c))\n  \\<forall>x. x \\<le> f x\n  f 0 \\<le> ?n\n  f 0 = 0\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "have finite_prefix:\\<open>\\<And>n. finite {i. f i \\<le> n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. finite {i. f i \\<le> n}", "by (auto simp add: finite_less_ub fxge)"], ["proof (state)\nthis:\n  finite {i. f i \\<le> ?n}\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "have prefix_not_empty:\\<open>\\<And>n. {i. f i \\<le> n} \\<noteq> {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. {i. f i \\<le> n} \\<noteq> {}", "using f0n"], ["proof (prove)\nusing this:\n  f 0 \\<le> ?n\n\ngoal (1 subgoal):\n 1. \\<And>n. {i. f i \\<le> n} \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  {i. f i \\<le> ?n} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "have 1:\\<open>mono (dil_inverse f)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (dil_inverse f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mono (dil_inverse f)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. mono (dil_inverse f)", "fix x::\\<open>nat\\<close> and y::\\<open>nat\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. mono (dil_inverse f)", "assume hyp:\\<open>x \\<le> y\\<close>"], ["proof (state)\nthis:\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. mono (dil_inverse f)", "hence inc:\\<open>{i. f i \\<le> x} \\<subseteq> {i. f i \\<le> y}\\<close>"], ["proof (prove)\nusing this:\n  x \\<le> y\n\ngoal (1 subgoal):\n 1. {i. f i \\<le> x} \\<subseteq> {i. f i \\<le> y}", "by (simp add: hyp Collect_mono le_trans)"], ["proof (state)\nthis:\n  {i. f i \\<le> x} \\<subseteq> {i. f i \\<le> y}\n\ngoal (1 subgoal):\n 1. mono (dil_inverse f)", "from Max_mono[OF inc prefix_not_empty finite_prefix]"], ["proof (chain)\npicking this:\n  Max {i. f i \\<le> x} \\<le> Max {i. f i \\<le> y}", "have \\<open>(dil_inverse f) x \\<le> (dil_inverse f) y\\<close>"], ["proof (prove)\nusing this:\n  Max {i. f i \\<le> x} \\<le> Max {i. f i \\<le> y}\n\ngoal (1 subgoal):\n 1. dil_inverse f x \\<le> dil_inverse f y", "unfolding dil_inverse_def"], ["proof (prove)\nusing this:\n  Max {i. f i \\<le> x} \\<le> Max {i. f i \\<le> y}\n\ngoal (1 subgoal):\n 1. Max {i. f i \\<le> x} \\<le> Max {i. f i \\<le> y}", "."], ["proof (state)\nthis:\n  dil_inverse f x \\<le> dil_inverse f y\n\ngoal (1 subgoal):\n 1. mono (dil_inverse f)", "}"], ["proof (state)\nthis:\n  ?x2 \\<le> ?y2 \\<Longrightarrow> dil_inverse f ?x2 \\<le> dil_inverse f ?y2\n\ngoal (1 subgoal):\n 1. mono (dil_inverse f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?x2 \\<le> ?y2 \\<Longrightarrow> dil_inverse f ?x2 \\<le> dil_inverse f ?y2\n\ngoal (1 subgoal):\n 1. mono (dil_inverse f)", "unfolding mono_def"], ["proof (prove)\nusing this:\n  ?x2 \\<le> ?y2 \\<Longrightarrow> dil_inverse f ?x2 \\<le> dil_inverse f ?y2\n\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       x \\<le> y \\<longrightarrow> dil_inverse f x \\<le> dil_inverse f y", "by simp"], ["proof (state)\nthis:\n  mono (dil_inverse f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mono (dil_inverse f)\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "from first_dilated_instant[OF smf f0]"], ["proof (chain)\npicking this:\n  Max {i. f i \\<le> 0} = 0", "have 2:\\<open>(dil_inverse f) 0 = 0\\<close>"], ["proof (prove)\nusing this:\n  Max {i. f i \\<le> 0} = 0\n\ngoal (1 subgoal):\n 1. dil_inverse f 0 = 0", "unfolding dil_inverse_def"], ["proof (prove)\nusing this:\n  Max {i. f i \\<le> 0} = 0\n\ngoal (1 subgoal):\n 1. Max {i. f i \\<le> 0} = 0", "."], ["proof (state)\nthis:\n  dil_inverse f 0 = 0\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "from fxge"], ["proof (chain)\npicking this:\n  \\<forall>x. x \\<le> f x", "have \\<open>\\<forall>n i. f i \\<le> n \\<longrightarrow> i \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>x. x \\<le> f x\n\ngoal (1 subgoal):\n 1. \\<forall>n i. f i \\<le> n \\<longrightarrow> i \\<le> n", "using le_trans"], ["proof (prove)\nusing this:\n  \\<forall>x. x \\<le> f x\n  \\<lbrakk>?i \\<le> ?j; ?j \\<le> ?k\\<rbrakk> \\<Longrightarrow> ?i \\<le> ?k\n\ngoal (1 subgoal):\n 1. \\<forall>n i. f i \\<le> n \\<longrightarrow> i \\<le> n", "by blast"], ["proof (state)\nthis:\n  \\<forall>n i. f i \\<le> n \\<longrightarrow> i \\<le> n\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "hence 3:\\<open>\\<forall>n. (dil_inverse f) n \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n i. f i \\<le> n \\<longrightarrow> i \\<le> n\n\ngoal (1 subgoal):\n 1. \\<forall>n. dil_inverse f n \\<le> n", "using Max_in[OF finite_prefix prefix_not_empty]"], ["proof (prove)\nusing this:\n  \\<forall>n i. f i \\<le> n \\<longrightarrow> i \\<le> n\n  Max {i. f i \\<le> ?n1} \\<in> {i. f i \\<le> ?n1}\n\ngoal (1 subgoal):\n 1. \\<forall>n. dil_inverse f n \\<le> n", "unfolding dil_inverse_def"], ["proof (prove)\nusing this:\n  \\<forall>n i. f i \\<le> n \\<longrightarrow> i \\<le> n\n  Max {i. f i \\<le> ?n1} \\<in> {i. f i \\<le> ?n1}\n\ngoal (1 subgoal):\n 1. \\<forall>n. Max {i. f i \\<le> n} \\<le> n", "by blast"], ["proof (state)\nthis:\n  \\<forall>n. dil_inverse f n \\<le> n\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "from 1 2 3"], ["proof (chain)\npicking this:\n  mono (dil_inverse f)\n  dil_inverse f 0 = 0\n  \\<forall>n. dil_inverse f n \\<le> n", "have *:\\<open>contracting_fun (dil_inverse f)\\<close>"], ["proof (prove)\nusing this:\n  mono (dil_inverse f)\n  dil_inverse f 0 = 0\n  \\<forall>n. dil_inverse f n \\<le> n\n\ngoal (1 subgoal):\n 1. contracting_fun (dil_inverse f)", "by (simp add: contracting_fun_def)"], ["proof (state)\nthis:\n  contracting_fun (dil_inverse f)\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "have \\<open>\\<forall>n. finite {i. f i \\<le> n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. finite {i. f i \\<le> n}", "by (simp add: finite_prefix)"], ["proof (state)\nthis:\n  \\<forall>n. finite {i. f i \\<le> n}\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "moreover"], ["proof (state)\nthis:\n  \\<forall>n. finite {i. f i \\<le> n}\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "have \\<open>\\<forall>n. {i. f i \\<le> n} \\<noteq> {}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. {i. f i \\<le> n} \\<noteq> {}", "using prefix_not_empty"], ["proof (prove)\nusing this:\n  {i. f i \\<le> ?n} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<forall>n. {i. f i \\<le> n} \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  \\<forall>n. {i. f i \\<le> n} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n. finite {i. f i \\<le> n}\n  \\<forall>n. {i. f i \\<le> n} \\<noteq> {}", "have 4:\\<open>\\<forall>n. f ((dil_inverse f) n) \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>n. finite {i. f i \\<le> n}\n  \\<forall>n. {i. f i \\<le> n} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<forall>n. f (dil_inverse f n) \\<le> n", "unfolding dil_inverse_def"], ["proof (prove)\nusing this:\n  \\<forall>n. finite {i. f i \\<le> n}\n  \\<forall>n. {i. f i \\<le> n} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<forall>n. f (Max {i. f i \\<le> n}) \\<le> n", "using assms(1) dilating_def dilating_fun_def Max_in"], ["proof (prove)\nusing this:\n  \\<forall>n. finite {i. f i \\<le> n}\n  \\<forall>n. {i. f i \\<le> n} \\<noteq> {}\n  dilating f sub r\n  dilating ?f ?sub ?r \\<equiv>\n  dilating_fun ?f ?r \\<and>\n  (\\<forall>n c.\n      time (Rep_run ?sub n c) = time (Rep_run ?r (?f n) c)) \\<and>\n  (\\<forall>n c. hamlet (Rep_run ?sub n c) = hamlet (Rep_run ?r (?f n) c))\n  dilating_fun ?f ?r \\<equiv>\n  strict_mono ?f \\<and>\n  ?f 0 = 0 \\<and>\n  (\\<forall>n.\n      n \\<le> ?f n \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = n) \\<longrightarrow>\n       (\\<forall>c. \\<not> hamlet (Rep_run ?r n c))) \\<and>\n      ((\\<nexists>n\\<^sub>0. ?f n\\<^sub>0 = Suc n) \\<longrightarrow>\n       (\\<forall>c. time (Rep_run ?r (Suc n) c) = time (Rep_run ?r n c))))\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max ?A \\<in> ?A\n\ngoal (1 subgoal):\n 1. \\<forall>n. f (Max {i. f i \\<le> n}) \\<le> n", "by blast"], ["proof (state)\nthis:\n  \\<forall>n. f (dil_inverse f n) \\<le> n\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "have 5:\\<open>\\<forall>n c k. f ((dil_inverse f) n) < k \\<and> k \\<le> n\n                              \\<longrightarrow> \\<not> hamlet ((Rep_run r) k c)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) < k \\<and> k \\<le> n \\<longrightarrow>\n       \\<not> hamlet (Rep_run r k c)", "using not_image_stut[OF assms] no_img_tick"], ["proof (prove)\nusing this:\n  \\<lbrakk>?n\\<^sub>0 = Max {i. f i \\<le> ?n};\n   f ?n\\<^sub>0 < ?k \\<and> ?k \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k\n  \\<forall>k.\n     (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k) \\<longrightarrow>\n     (\\<forall>c. \\<not> hamlet (Rep_run r k c))\n\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) < k \\<and> k \\<le> n \\<longrightarrow>\n       \\<not> hamlet (Rep_run r k c)", "unfolding dil_inverse_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?n\\<^sub>0 = Max {i. f i \\<le> ?n};\n   f ?n\\<^sub>0 < ?k \\<and> ?k \\<le> ?n\\<rbrakk>\n  \\<Longrightarrow> \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k\n  \\<forall>k.\n     (\\<nexists>k\\<^sub>0. f k\\<^sub>0 = k) \\<longrightarrow>\n     (\\<forall>c. \\<not> hamlet (Rep_run r k c))\n\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (Max {i. f i \\<le> n}) < k \\<and> k \\<le> n \\<longrightarrow>\n       \\<not> hamlet (Rep_run r k c)", "by blast"], ["proof (state)\nthis:\n  \\<forall>n c k.\n     f (dil_inverse f n) < k \\<and> k \\<le> n \\<longrightarrow>\n     \\<not> hamlet (Rep_run r k c)\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "have 6:\\<open>(\\<forall>n c k. f ((dil_inverse f) n) \\<le> k \\<and> k \\<le> n\n                      \\<longrightarrow> time ((Rep_run r) k c) = time ((Rep_run sub) ((dil_inverse f) n) c))\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n       time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n       time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n       time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "fix n c k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n       time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "assume h:\\<open>f ((dil_inverse f) n) \\<le> k \\<and> k \\<le> n\\<close>"], ["proof (state)\nthis:\n  f (dil_inverse f n) \\<le> k \\<and> k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n       time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "let ?\\<tau> = \\<open>time (Rep_run sub ((dil_inverse f) n) c)\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n       time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "have tau:\\<open>time (Rep_run sub ((dil_inverse f) n) c) = ?\\<tau>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. time (Rep_run sub (dil_inverse f n) c) =\n    time (Rep_run sub (dil_inverse f n) c)", ".."], ["proof (state)\nthis:\n  time (Rep_run sub (dil_inverse f n) c) =\n  time (Rep_run sub (dil_inverse f n) c)\n\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n       time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "have gn:\\<open>(dil_inverse f) n = Max {i. f i \\<le> n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dil_inverse f n = Max {i. f i \\<le> n}", "unfolding dil_inverse_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max {i. f i \\<le> n} = Max {i. f i \\<le> n}", ".."], ["proof (state)\nthis:\n  dil_inverse f n = Max {i. f i \\<le> n}\n\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n       time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "from time_stuttering[OF assms tau, of k] not_image_stut[OF assms gn]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>ka.\n              f (dil_inverse f n) < ka \\<and> ka \\<le> k \\<Longrightarrow>\n              \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n   f (dil_inverse f n) < k\\<rbrakk>\n  \\<Longrightarrow> time (Rep_run r k c) =\n                    time (Rep_run sub (dil_inverse f n) c)\n  f (dil_inverse f n) < ?k \\<and> ?k \\<le> n \\<Longrightarrow>\n  \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k", "have \\<open>time ((Rep_run r) k c) = time ((Rep_run sub) ((dil_inverse f) n) c)\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>ka.\n              f (dil_inverse f n) < ka \\<and> ka \\<le> k \\<Longrightarrow>\n              \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n   f (dil_inverse f n) < k\\<rbrakk>\n  \\<Longrightarrow> time (Rep_run r k c) =\n                    time (Rep_run sub (dil_inverse f n) c)\n  f (dil_inverse f n) < ?k \\<and> ?k \\<le> n \\<Longrightarrow>\n  \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k\n\ngoal (1 subgoal):\n 1. time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "proof (cases \\<open>f ((dil_inverse f) n) = k\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) = k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)\n 2. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) \\<noteq> k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)", "case True"], ["proof (state)\nthis:\n  f (dil_inverse f n) = k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) = k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)\n 2. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) \\<noteq> k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)", "moreover"], ["proof (state)\nthis:\n  f (dil_inverse f n) = k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) = k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)\n 2. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) \\<noteq> k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)", "have \\<open>\\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)", "using assms"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. \\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)", "by (simp add: dilating_def)"], ["proof (state)\nthis:\n  \\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) = k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)\n 2. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) \\<noteq> k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)", "ultimately"], ["proof (chain)\npicking this:\n  f (dil_inverse f n) = k\n  \\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)", "show ?thesis"], ["proof (prove)\nusing this:\n  f (dil_inverse f n) = k\n  \\<forall>n c. time (Rep_run sub n c) = time (Rep_run r (f n) c)\n\ngoal (1 subgoal):\n 1. time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "by simp"], ["proof (state)\nthis:\n  time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) \\<noteq> k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) \\<noteq> k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)", "case False"], ["proof (state)\nthis:\n  f (dil_inverse f n) \\<noteq> k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) \\<noteq> k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)", "with h"], ["proof (chain)\npicking this:\n  f (dil_inverse f n) \\<le> k \\<and> k \\<le> n\n  f (dil_inverse f n) \\<noteq> k", "have \\<open>f (Max {i. f i \\<le> n}) < k \\<and> k \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  f (dil_inverse f n) \\<le> k \\<and> k \\<le> n\n  f (dil_inverse f n) \\<noteq> k\n\ngoal (1 subgoal):\n 1. f (Max {i. f i \\<le> n}) < k \\<and> k \\<le> n", "by (simp add: dil_inverse_def)"], ["proof (state)\nthis:\n  f (Max {i. f i \\<le> n}) < k \\<and> k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>\\<And>ka.\n                         f (dil_inverse f n) < ka \\<and>\n                         ka \\<le> k \\<Longrightarrow>\n                         \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n              f (dil_inverse f n) < k\\<rbrakk>\n             \\<Longrightarrow> time (Rep_run r k c) =\n                               time (Rep_run sub (dil_inverse f n) c);\n     \\<And>k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<Longrightarrow>\n        \\<nexists>k\\<^sub>0. f k\\<^sub>0 = k;\n     f (dil_inverse f n) \\<noteq> k\\<rbrakk>\n    \\<Longrightarrow> time (Rep_run r k c) =\n                      time (Rep_run sub (dil_inverse f n) c)", "with time_stuttering[OF assms tau, of k] not_image_stut[OF assms gn]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>ka.\n              f (dil_inverse f n) < ka \\<and> ka \\<le> k \\<Longrightarrow>\n              \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n   f (dil_inverse f n) < k\\<rbrakk>\n  \\<Longrightarrow> time (Rep_run r k c) =\n                    time (Rep_run sub (dil_inverse f n) c)\n  f (dil_inverse f n) < ?k \\<and> ?k \\<le> n \\<Longrightarrow>\n  \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k\n  f (Max {i. f i \\<le> n}) < k \\<and> k \\<le> n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>ka.\n              f (dil_inverse f n) < ka \\<and> ka \\<le> k \\<Longrightarrow>\n              \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n   f (dil_inverse f n) < k\\<rbrakk>\n  \\<Longrightarrow> time (Rep_run r k c) =\n                    time (Rep_run sub (dil_inverse f n) c)\n  f (dil_inverse f n) < ?k \\<and> ?k \\<le> n \\<Longrightarrow>\n  \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k\n  f (Max {i. f i \\<le> n}) < k \\<and> k \\<le> n\n\ngoal (1 subgoal):\n 1. time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "unfolding dil_inverse_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>ka.\n              f (Max {i. f i \\<le> n}) < ka \\<and>\n              ka \\<le> k \\<Longrightarrow>\n              \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ka;\n   f (Max {i. f i \\<le> n}) < k\\<rbrakk>\n  \\<Longrightarrow> time (Rep_run r k c) =\n                    time (Rep_run sub (Max {i. f i \\<le> n}) c)\n  f (Max {i. f i \\<le> n}) < ?k \\<and> ?k \\<le> n \\<Longrightarrow>\n  \\<nexists>k\\<^sub>0. f k\\<^sub>0 = ?k\n  f (Max {i. f i \\<le> n}) < k \\<and> k \\<le> n\n\ngoal (1 subgoal):\n 1. time (Rep_run r k c) = time (Rep_run sub (Max {i. f i \\<le> n}) c)", "by auto"], ["proof (state)\nthis:\n  time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)\n\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n       time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "}"], ["proof (state)\nthis:\n  f (dil_inverse f ?n2) \\<le> ?k2 \\<and> ?k2 \\<le> ?n2 \\<Longrightarrow>\n  time (Rep_run r ?k2 ?c2) = time (Rep_run sub (dil_inverse f ?n2) ?c2)\n\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n       time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f (dil_inverse f ?n2) \\<le> ?k2 \\<and> ?k2 \\<le> ?n2 \\<Longrightarrow>\n  time (Rep_run r ?k2 ?c2) = time (Rep_run sub (dil_inverse f ?n2) ?c2)\n\ngoal (1 subgoal):\n 1. \\<forall>n c k.\n       f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n       time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "by simp"], ["proof (state)\nthis:\n  \\<forall>n c k.\n     f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n     time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n c k.\n     f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n     time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "from * 4 5 6"], ["proof (chain)\npicking this:\n  contracting_fun (dil_inverse f)\n  \\<forall>n. f (dil_inverse f n) \\<le> n\n  \\<forall>n c k.\n     f (dil_inverse f n) < k \\<and> k \\<le> n \\<longrightarrow>\n     \\<not> hamlet (Rep_run r k c)\n  \\<forall>n c k.\n     f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n     time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)", "show ?thesis"], ["proof (prove)\nusing this:\n  contracting_fun (dil_inverse f)\n  \\<forall>n. f (dil_inverse f n) \\<le> n\n  \\<forall>n c k.\n     f (dil_inverse f n) < k \\<and> k \\<le> n \\<longrightarrow>\n     \\<not> hamlet (Rep_run r k c)\n  \\<forall>n c k.\n     f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n     time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)\n\ngoal (1 subgoal):\n 1. contracting (dil_inverse f) r sub f", "unfolding contracting_def"], ["proof (prove)\nusing this:\n  contracting_fun (dil_inverse f)\n  \\<forall>n. f (dil_inverse f n) \\<le> n\n  \\<forall>n c k.\n     f (dil_inverse f n) < k \\<and> k \\<le> n \\<longrightarrow>\n     \\<not> hamlet (Rep_run r k c)\n  \\<forall>n c k.\n     f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n     time (Rep_run r k c) = time (Rep_run sub (dil_inverse f n) c)\n\ngoal (1 subgoal):\n 1. contracting_fun (dil_inverse f) \\<and>\n    (\\<forall>n. f (dil_inverse f n) \\<le> n) \\<and>\n    (\\<forall>n c k.\n        f (dil_inverse f n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n        time (Rep_run r k c) =\n        time (Rep_run sub (dil_inverse f n) c)) \\<and>\n    (\\<forall>n c k.\n        f (dil_inverse f n) < k \\<and> k \\<le> n \\<longrightarrow>\n        \\<not> hamlet (Rep_run r k c))", "by simp"], ["proof (state)\nthis:\n  contracting (dil_inverse f) r sub f\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The only possible contracting function toward a dense run (a run with no empty \n  instants) is the inverse of the dilating function as defined by \n  @{term \\<open>dil_inverse\\<close>}.\n\\<close>"], ["", "lemma dense_run_dil_inverse_only:\n  assumes \\<open>dilating f sub r\\<close>\n      and \\<open>contracting g r sub f\\<close>\n      and \\<open>dense_run sub\\<close>\n    shows \\<open>g = (dil_inverse f)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. g = dil_inverse f", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "from assms(1)"], ["proof (chain)\npicking this:\n  dilating f sub r", "have *:\\<open>\\<And>n. finite {i. f i \\<le> n}\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. \\<And>n. finite {i. f i \\<le> n}", "using finite_less_ub"], ["proof (prove)\nusing this:\n  dilating f sub r\n  (\\<And>n. n \\<le> ?f n) \\<Longrightarrow> finite {n. ?f n \\<le> ?u}\n\ngoal (1 subgoal):\n 1. \\<And>n. finite {i. f i \\<le> n}", "by (simp add:  dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  finite {i. f i \\<le> ?n}\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "from assms(1)"], ["proof (chain)\npicking this:\n  dilating f sub r", "have \\<open>f 0 = 0\\<close>"], ["proof (prove)\nusing this:\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. f 0 = 0", "by (simp add:  dilating_def dilating_fun_def)"], ["proof (state)\nthis:\n  f 0 = 0\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "hence \\<open>\\<And>n. 0 \\<in> {i. f i \\<le> n}\\<close>"], ["proof (prove)\nusing this:\n  f 0 = 0\n\ngoal (1 subgoal):\n 1. \\<And>n. 0 \\<in> {i. f i \\<le> n}", "by simp"], ["proof (state)\nthis:\n  0 \\<in> {i. f i \\<le> ?n}\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "hence **:\\<open>\\<And>n. {i. f i \\<le> n} \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  0 \\<in> {i. f i \\<le> ?n}\n\ngoal (1 subgoal):\n 1. \\<And>n. {i. f i \\<le> n} \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  {i. f i \\<le> ?n} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "{"], ["proof (state)\nthis:\n  {i. f i \\<le> ?n} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "assume h:\\<open>g n < (dil_inverse f) n\\<close>"], ["proof (state)\nthis:\n  g n < dil_inverse f n\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "hence \\<open>\\<exists>k > g n. f k \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  g n < dil_inverse f n\n\ngoal (1 subgoal):\n 1. \\<exists>k>g n. f k \\<le> n", "unfolding dil_inverse_def"], ["proof (prove)\nusing this:\n  g n < Max {i. f i \\<le> n}\n\ngoal (1 subgoal):\n 1. \\<exists>k>g n. f k \\<le> n", "using Max_in[OF * **]"], ["proof (prove)\nusing this:\n  g n < Max {i. f i \\<le> n}\n  Max {i. f i \\<le> ?n1} \\<in> {i. f i \\<le> ?n1}\n\ngoal (1 subgoal):\n 1. \\<exists>k>g n. f k \\<le> n", "by blast"], ["proof (state)\nthis:\n  \\<exists>k>g n. f k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "from this"], ["proof (chain)\npicking this:\n  \\<exists>k>g n. f k \\<le> n", "obtain k where kprop:\\<open>g n < k \\<and> f k \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k>g n. f k \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        g n < k \\<and> f k \\<le> n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  g n < k \\<and> f k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "with assms(3) dense_run_def"], ["proof (chain)\npicking this:\n  dense_run sub\n  dense_run ?\\<rho> \\<equiv>\n  \\<forall>n. \\<exists>c. hamlet (Rep_run ?\\<rho> n c)\n  g n < k \\<and> f k \\<le> n", "obtain c where \\<open>hamlet ((Rep_run sub) k c)\\<close>"], ["proof (prove)\nusing this:\n  dense_run sub\n  dense_run ?\\<rho> \\<equiv>\n  \\<forall>n. \\<exists>c. hamlet (Rep_run ?\\<rho> n c)\n  g n < k \\<and> f k \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        hamlet (Rep_run sub k c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  hamlet (Rep_run sub k c)\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "hence \\<open>hamlet ((Rep_run r) (f k) c)\\<close>"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub k c)\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r (f k) c)", "using ticks_sub[OF assms(1)]"], ["proof (prove)\nusing this:\n  hamlet (Rep_run sub k c)\n  hamlet (Rep_run sub ?n ?a) = hamlet (Rep_run r (f ?n) ?a)\n\ngoal (1 subgoal):\n 1. hamlet (Rep_run r (f k) c)", "by blast"], ["proof (state)\nthis:\n  hamlet (Rep_run r (f k) c)\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "moreover"], ["proof (state)\nthis:\n  hamlet (Rep_run r (f k) c)\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "from kprop"], ["proof (chain)\npicking this:\n  g n < k \\<and> f k \\<le> n", "have \\<open>f (g n) < f k \\<and> f k \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  g n < k \\<and> f k \\<le> n\n\ngoal (1 subgoal):\n 1. f (g n) < f k \\<and> f k \\<le> n", "using assms(1)"], ["proof (prove)\nusing this:\n  g n < k \\<and> f k \\<le> n\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. f (g n) < f k \\<and> f k \\<le> n", "by (simp add: dilating_def dilating_fun_def strict_monoD)"], ["proof (state)\nthis:\n  f (g n) < f k \\<and> f k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "ultimately"], ["proof (chain)\npicking this:\n  hamlet (Rep_run r (f k) c)\n  f (g n) < f k \\<and> f k \\<le> n", "have False"], ["proof (prove)\nusing this:\n  hamlet (Rep_run r (f k) c)\n  f (g n) < f k \\<and> f k \\<le> n\n\ngoal (1 subgoal):\n 1. False", "using assms(2)"], ["proof (prove)\nusing this:\n  hamlet (Rep_run r (f k) c)\n  f (g n) < f k \\<and> f k \\<le> n\n  contracting g r sub f\n\ngoal (1 subgoal):\n 1. False", "unfolding contracting_def"], ["proof (prove)\nusing this:\n  hamlet (Rep_run r (f k) c)\n  f (g n) < f k \\<and> f k \\<le> n\n  contracting_fun g \\<and>\n  (\\<forall>n. f (g n) \\<le> n) \\<and>\n  (\\<forall>n c k.\n      f (g n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n      time (Rep_run r k c) = time (Rep_run sub (g n) c)) \\<and>\n  (\\<forall>n c k.\n      f (g n) < k \\<and> k \\<le> n \\<longrightarrow>\n      \\<not> hamlet (Rep_run r k c))\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "}"], ["proof (state)\nthis:\n  g ?n2 < dil_inverse f ?n2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "hence 1:\\<open>\\<And>n. \\<not>(g n < (dil_inverse f) n)\\<close>"], ["proof (prove)\nusing this:\n  g ?n2 < dil_inverse f ?n2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>n. \\<not> g n < dil_inverse f n", "by blast"], ["proof (state)\nthis:\n  \\<not> g ?n < dil_inverse f ?n\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "{"], ["proof (state)\nthis:\n  \\<not> g ?n < dil_inverse f ?n\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "assume h:\\<open>g n > (dil_inverse f) n\\<close>"], ["proof (state)\nthis:\n  dil_inverse f n < g n\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "have \\<open>\\<exists>k \\<le> g n. f k > n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>g n. n < f k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>g n. n < f k", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>g n. n < f k", "assume \\<open>\\<forall>k \\<le> g n. f k \\<le> n\\<close>"], ["proof (state)\nthis:\n  \\<forall>k\\<le>g n. f k \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>g n. n < f k", "with h"], ["proof (chain)\npicking this:\n  dil_inverse f n < g n\n  \\<forall>k\\<le>g n. f k \\<le> n", "have False"], ["proof (prove)\nusing this:\n  dil_inverse f n < g n\n  \\<forall>k\\<le>g n. f k \\<le> n\n\ngoal (1 subgoal):\n 1. False", "unfolding dil_inverse_def"], ["proof (prove)\nusing this:\n  Max {i. f i \\<le> n} < g n\n  \\<forall>k\\<le>g n. f k \\<le> n\n\ngoal (1 subgoal):\n 1. False", "using Max_gr_iff[OF * **]"], ["proof (prove)\nusing this:\n  Max {i. f i \\<le> n} < g n\n  \\<forall>k\\<le>g n. f k \\<le> n\n  (?x < Max {i. f i \\<le> ?n1}) =\n  (\\<exists>a\\<in>{i. f i \\<le> ?n1}. ?x < a)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>g n. n < f k", "}"], ["proof (state)\nthis:\n  \\<forall>k\\<le>g n. f k \\<le> n \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>g n. n < f k", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>k\\<le>g n. f k \\<le> n \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>g n. n < f k", "using not_less"], ["proof (prove)\nusing this:\n  \\<forall>k\\<le>g n. f k \\<le> n \\<Longrightarrow> False\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. \\<exists>k\\<le>g n. n < f k", "by blast"], ["proof (state)\nthis:\n  \\<exists>k\\<le>g n. n < f k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k\\<le>g n. n < f k\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "from this"], ["proof (chain)\npicking this:\n  \\<exists>k\\<le>g n. n < f k", "obtain k where \\<open>k \\<le> g n \\<and> f k > n\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>k\\<le>g n. n < f k\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        k \\<le> g n \\<and> n < f k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  k \\<le> g n \\<and> n < f k\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "hence \\<open>f (g n) \\<ge> f k \\<and> f k > n\\<close>"], ["proof (prove)\nusing this:\n  k \\<le> g n \\<and> n < f k\n\ngoal (1 subgoal):\n 1. f k \\<le> f (g n) \\<and> n < f k", "using assms(1)"], ["proof (prove)\nusing this:\n  k \\<le> g n \\<and> n < f k\n  dilating f sub r\n\ngoal (1 subgoal):\n 1. f k \\<le> f (g n) \\<and> n < f k", "by (simp add: dilating_def dilating_fun_def strict_mono_less_eq)"], ["proof (state)\nthis:\n  f k \\<le> f (g n) \\<and> n < f k\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "hence \\<open>f (g n) > n\\<close>"], ["proof (prove)\nusing this:\n  f k \\<le> f (g n) \\<and> n < f k\n\ngoal (1 subgoal):\n 1. n < f (g n)", "by simp"], ["proof (state)\nthis:\n  n < f (g n)\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "with assms(2)"], ["proof (chain)\npicking this:\n  contracting g r sub f\n  n < f (g n)", "have False"], ["proof (prove)\nusing this:\n  contracting g r sub f\n  n < f (g n)\n\ngoal (1 subgoal):\n 1. False", "unfolding contracting_def"], ["proof (prove)\nusing this:\n  contracting_fun g \\<and>\n  (\\<forall>n. f (g n) \\<le> n) \\<and>\n  (\\<forall>n c k.\n      f (g n) \\<le> k \\<and> k \\<le> n \\<longrightarrow>\n      time (Rep_run r k c) = time (Rep_run sub (g n) c)) \\<and>\n  (\\<forall>n c k.\n      f (g n) < k \\<and> k \\<le> n \\<longrightarrow>\n      \\<not> hamlet (Rep_run r k c))\n  n < f (g n)\n\ngoal (1 subgoal):\n 1. False", "by (simp add: leD)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "}"], ["proof (state)\nthis:\n  dil_inverse f ?n2 < g ?n2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "hence 2:\\<open>\\<And>n. \\<not>(g n > (dil_inverse f) n)\\<close>"], ["proof (prove)\nusing this:\n  dil_inverse f ?n2 < g ?n2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>n. \\<not> dil_inverse f n < g n", "by blast"], ["proof (state)\nthis:\n  \\<not> dil_inverse f ?n < g ?n\n\ngoal (1 subgoal):\n 1. \\<And>x. g x = dil_inverse f x", "from 1 2"], ["proof (chain)\npicking this:\n  \\<not> g ?n < dil_inverse f ?n\n  \\<not> dil_inverse f ?n < g ?n", "show \\<open>\\<And>n. g n = (dil_inverse f) n\\<close>"], ["proof (prove)\nusing this:\n  \\<not> g ?n < dil_inverse f ?n\n  \\<not> dil_inverse f ?n < g ?n\n\ngoal (1 subgoal):\n 1. \\<And>n. g n = dil_inverse f n", "by (simp add: not_less_iff_gr_or_eq)"], ["proof (state)\nthis:\n  g ?n = dil_inverse f ?n\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}