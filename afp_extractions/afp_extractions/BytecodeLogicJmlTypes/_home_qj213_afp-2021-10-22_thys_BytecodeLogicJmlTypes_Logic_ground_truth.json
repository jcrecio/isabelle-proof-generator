{"file_name": "/home/qj213/afp-2021-10-22/thys/BytecodeLogicJmlTypes/Logic.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BytecodeLogicJmlTypes", "problem_names": ["lemma AssertionsImplyInvariantsAux[rule_format]:\n\"G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I \\<Longrightarrow> \n  ((\\<forall> s0 s t. A s0 s \\<longrightarrow> I s0 s (heap s)) \\<and>\n   (\\<forall> Mspec Minv Anno .\n        MST\\<down>(C,m) = Some (Mspec,Minv,Anno) \\<longrightarrow>\n        (\\<forall> Q . Anno\\<down>(l) = Some Q \\<longrightarrow> \n               (\\<forall> s0 s . A s0 s \\<longrightarrow> Q s0 s))))\"", "lemma AssertionsImplyMethInvariants:\n \"\\<lbrakk> G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I; A s0 s\\<rbrakk> \\<Longrightarrow> I s0 s (heap s)\"", "lemma AssertionsImplyAnnoInvariants:\n \"\\<lbrakk> G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I; MST\\<down>(C,m) = Some(Mspec,Minv,Anno);\n    Anno\\<down>(l) = Some Q; A s0 s\\<rbrakk> \\<Longrightarrow> Q s0 s\""], "translations": [["", "lemma AssertionsImplyInvariantsAux[rule_format]:\n\"G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I \\<Longrightarrow> \n  ((\\<forall> s0 s t. A s0 s \\<longrightarrow> I s0 s (heap s)) \\<and>\n   (\\<forall> Mspec Minv Anno .\n        MST\\<down>(C,m) = Some (Mspec,Minv,Anno) \\<longrightarrow>\n        (\\<forall> Q . Anno\\<down>(l) = Some Q \\<longrightarrow> \n               (\\<forall> s0 s . A s0 s \\<longrightarrow> Q s0 s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I \\<Longrightarrow>\n    (\\<forall>s0 s t. A s0 s \\<longrightarrow> I s0 s (heap s)) \\<and>\n    (\\<forall>Mspec Minv Anno.\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n        (\\<forall>Q.\n            Anno\\<down>l = Some Q \\<longrightarrow>\n            (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s)))", "apply (erule SP_Judgement.induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>C m M l ins Mspec Minv Anno A I c x f g d F G B.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some ins;\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        ins\n        \\<in> {const c, dup, pop, swap, load x, store x, binop f, unop g,\n               new d, getfield d F, putfield d F, checkcast d};\n        G \\<rhd> \\<langle> SP_pre M l\n                            A \\<rangle> C,m,(l +\n       1) \\<langle> SP_post M l B \\<rangle> SP_inv M l I;\n        (\\<forall>s0 s t.\n            SP_pre M l A s0 s \\<longrightarrow>\n            SP_inv M l I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l + 1 = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SP_pre M l A s0 s \\<longrightarrow> Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 2. \\<And>C m M l pc Mspec Minv Anno A I G B.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some (goto pc);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        G \\<rhd> \\<langle> SP_pre M l\n                            A \\<rangle> C,m,pc \\<langle> SP_post M l\n                    B \\<rangle> SP_inv M l I;\n        (\\<forall>s0 s t.\n            SP_pre M l A s0 s \\<longrightarrow>\n            SP_inv M l I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>pc = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SP_pre M l A s0 s \\<longrightarrow> Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 3. \\<And>C m M l pc Mspec Minv Anno A I G B.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some (iftrue pc);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        G \\<rhd> \\<langle> SP_pre M l\n                            (\\<lambda>s0 s.\n                                \\<forall>ops S k.\n                                   s = (TRUE # ops, S, k) \\<longrightarrow>\n                                   A s0\n                                    s) \\<rangle> C,m,pc \\<langle> SP_post M\n                             l (\\<lambda>s0 s t.\n                                   \\<forall>ops S k.\ns = (TRUE # ops, S, k) \\<longrightarrow>\nB s0 s\n t) \\<rangle> SP_inv M l\n               (\\<lambda>s0 s t.\n                   \\<forall>ops S k.\n                      s = (TRUE # ops, S, k) \\<longrightarrow> I s0 s t);\n        (\\<forall>s0 s t.\n            SP_pre M l\n             (\\<lambda>s0 s.\n                 \\<forall>ops S k.\n                    s = (TRUE # ops, S, k) \\<longrightarrow> A s0 s)\n             s0 s \\<longrightarrow>\n            SP_inv M l\n             (\\<lambda>s0 s t.\n                 \\<forall>ops S k.\n                    s = (TRUE # ops, S, k) \\<longrightarrow> I s0 s t)\n             s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>pc = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SP_pre M l\n                     (\\<lambda>s0 s.\n                         \\<forall>ops S k.\n                            s = (TRUE # ops, S, k) \\<longrightarrow> A s0 s)\n                     s0 s \\<longrightarrow>\n                    Q s0 s)));\n        G \\<rhd> \\<langle> SP_pre M l\n                            (\\<lambda>s0 s.\n                                \\<forall>ops S k v.\n                                   s = (v # ops, S, k) \\<longrightarrow>\n                                   v \\<noteq> TRUE \\<longrightarrow>\n                                   A s0\n                                    s) \\<rangle> C,m,(l +\n                1) \\<langle> SP_post M l\n                              (\\<lambda>s0 s t.\n                                  \\<forall>ops S k v.\n                                     s = (v # ops, S, k) \\<longrightarrow>\n                                     v \\<noteq> TRUE \\<longrightarrow>\n                                     B s0 s\nt) \\<rangle> SP_inv M l\n              (\\<lambda>s0 s t.\n                  \\<forall>ops S k v.\n                     s = (v # ops, S, k) \\<longrightarrow>\n                     v \\<noteq> TRUE \\<longrightarrow> I s0 s t);\n        (\\<forall>s0 s t.\n            SP_pre M l\n             (\\<lambda>s0 s.\n                 \\<forall>ops S k v.\n                    s = (v # ops, S, k) \\<longrightarrow>\n                    v \\<noteq> TRUE \\<longrightarrow> A s0 s)\n             s0 s \\<longrightarrow>\n            SP_inv M l\n             (\\<lambda>s0 s t.\n                 \\<forall>ops S k v.\n                    s = (v # ops, S, k) \\<longrightarrow>\n                    v \\<noteq> TRUE \\<longrightarrow> I s0 s t)\n             s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l + 1 = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SP_pre M l\n                     (\\<lambda>s0 s.\n                         \\<forall>ops S k v.\n                            s = (v # ops, S, k) \\<longrightarrow>\n                            v \\<noteq> TRUE \\<longrightarrow> A s0 s)\n                     s0 s \\<longrightarrow>\n                    Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 4. \\<And>C m M l Mspec Minv Anno A I B G.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some vreturn;\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        \\<forall>s0 s.\n           A s0 s \\<longrightarrow>\n           (\\<forall>v ops S h.\n               s = (v # ops, S, h) \\<longrightarrow> B s0 s (h, v))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 5. \\<And>C m M l D m' Mspec Minv Anno T MI Anno2 par code l0 A I G B.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some (invokeS D m');\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        MST\\<down>(D, m') = Some (T, MI, Anno2);\n        mbody_is D m' (par, code, l0);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        \\<forall>s0 ops1 ops2 S R k t.\n           (ops1, par, R, ops2) \\<in> Frame \\<longrightarrow>\n           A s0 (ops1, S, k) \\<longrightarrow>\n           MI (R, k) t \\<longrightarrow> I s0 (ops1, S, k) t;\n        G \\<rhd> \\<langle> SINV_pre par T\n                            A \\<rangle> C,m,(l +\n       1) \\<langle> SINV_post par T B \\<rangle> SINV_inv par T I;\n        (\\<forall>s0 s t.\n            SINV_pre par T A s0 s \\<longrightarrow>\n            SINV_inv par T I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l + 1 = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SINV_pre par T A s0 s \\<longrightarrow>\n                    Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 6. \\<And>b G C m l AA BB II A B I.\n       \\<lbrakk>(b, G, C, m, l, AA, BB, II) \\<in> SP_Judgement;\n        (\\<forall>s0 s t. AA s0 s \\<longrightarrow> II s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. AA s0 s \\<longrightarrow> Q s0 s)));\n        \\<forall>s0 s. A s0 s \\<longrightarrow> AA s0 s;\n        \\<forall>s0 s t. BB s0 s t \\<longrightarrow> B s0 s t;\n        \\<forall>s0 s k. II s0 s k \\<longrightarrow> I s0 s k\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 7. \\<And>G A C m l B I.\n       \\<lbrakk>G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I;\n        (\\<forall>s0 s t. A s0 s \\<longrightarrow> I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 8. \\<And>G C m l A B I Mspec Minv Anno.\n       \\<lbrakk>G\\<down>(C, m, l) = Some (A, B, I);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))", "apply clarsimp"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>C m M l pc Mspec Minv Anno A I G B.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some (goto pc);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        G \\<rhd> \\<langle> SP_pre M l\n                            A \\<rangle> C,m,pc \\<langle> SP_post M l\n                    B \\<rangle> SP_inv M l I;\n        (\\<forall>s0 s t.\n            SP_pre M l A s0 s \\<longrightarrow>\n            SP_inv M l I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>pc = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SP_pre M l A s0 s \\<longrightarrow> Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 2. \\<And>C m M l pc Mspec Minv Anno A I G B.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some (iftrue pc);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        G \\<rhd> \\<langle> SP_pre M l\n                            (\\<lambda>s0 s.\n                                \\<forall>ops S k.\n                                   s = (TRUE # ops, S, k) \\<longrightarrow>\n                                   A s0\n                                    s) \\<rangle> C,m,pc \\<langle> SP_post M\n                             l (\\<lambda>s0 s t.\n                                   \\<forall>ops S k.\ns = (TRUE # ops, S, k) \\<longrightarrow>\nB s0 s\n t) \\<rangle> SP_inv M l\n               (\\<lambda>s0 s t.\n                   \\<forall>ops S k.\n                      s = (TRUE # ops, S, k) \\<longrightarrow> I s0 s t);\n        (\\<forall>s0 s t.\n            SP_pre M l\n             (\\<lambda>s0 s.\n                 \\<forall>ops S k.\n                    s = (TRUE # ops, S, k) \\<longrightarrow> A s0 s)\n             s0 s \\<longrightarrow>\n            SP_inv M l\n             (\\<lambda>s0 s t.\n                 \\<forall>ops S k.\n                    s = (TRUE # ops, S, k) \\<longrightarrow> I s0 s t)\n             s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>pc = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SP_pre M l\n                     (\\<lambda>s0 s.\n                         \\<forall>ops S k.\n                            s = (TRUE # ops, S, k) \\<longrightarrow> A s0 s)\n                     s0 s \\<longrightarrow>\n                    Q s0 s)));\n        G \\<rhd> \\<langle> SP_pre M l\n                            (\\<lambda>s0 s.\n                                \\<forall>ops S k v.\n                                   s = (v # ops, S, k) \\<longrightarrow>\n                                   v \\<noteq> TRUE \\<longrightarrow>\n                                   A s0\n                                    s) \\<rangle> C,m,(l +\n                1) \\<langle> SP_post M l\n                              (\\<lambda>s0 s t.\n                                  \\<forall>ops S k v.\n                                     s = (v # ops, S, k) \\<longrightarrow>\n                                     v \\<noteq> TRUE \\<longrightarrow>\n                                     B s0 s\nt) \\<rangle> SP_inv M l\n              (\\<lambda>s0 s t.\n                  \\<forall>ops S k v.\n                     s = (v # ops, S, k) \\<longrightarrow>\n                     v \\<noteq> TRUE \\<longrightarrow> I s0 s t);\n        (\\<forall>s0 s t.\n            SP_pre M l\n             (\\<lambda>s0 s.\n                 \\<forall>ops S k v.\n                    s = (v # ops, S, k) \\<longrightarrow>\n                    v \\<noteq> TRUE \\<longrightarrow> A s0 s)\n             s0 s \\<longrightarrow>\n            SP_inv M l\n             (\\<lambda>s0 s t.\n                 \\<forall>ops S k v.\n                    s = (v # ops, S, k) \\<longrightarrow>\n                    v \\<noteq> TRUE \\<longrightarrow> I s0 s t)\n             s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l + 1 = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SP_pre M l\n                     (\\<lambda>s0 s.\n                         \\<forall>ops S k v.\n                            s = (v # ops, S, k) \\<longrightarrow>\n                            v \\<noteq> TRUE \\<longrightarrow> A s0 s)\n                     s0 s \\<longrightarrow>\n                    Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 3. \\<And>C m M l Mspec Minv Anno A I B G.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some vreturn;\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        \\<forall>s0 s.\n           A s0 s \\<longrightarrow>\n           (\\<forall>v ops S h.\n               s = (v # ops, S, h) \\<longrightarrow> B s0 s (h, v))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 4. \\<And>C m M l D m' Mspec Minv Anno T MI Anno2 par code l0 A I G B.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some (invokeS D m');\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        MST\\<down>(D, m') = Some (T, MI, Anno2);\n        mbody_is D m' (par, code, l0);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        \\<forall>s0 ops1 ops2 S R k t.\n           (ops1, par, R, ops2) \\<in> Frame \\<longrightarrow>\n           A s0 (ops1, S, k) \\<longrightarrow>\n           MI (R, k) t \\<longrightarrow> I s0 (ops1, S, k) t;\n        G \\<rhd> \\<langle> SINV_pre par T\n                            A \\<rangle> C,m,(l +\n       1) \\<langle> SINV_post par T B \\<rangle> SINV_inv par T I;\n        (\\<forall>s0 s t.\n            SINV_pre par T A s0 s \\<longrightarrow>\n            SINV_inv par T I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l + 1 = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SINV_pre par T A s0 s \\<longrightarrow>\n                    Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 5. \\<And>b G C m l AA BB II A B I.\n       \\<lbrakk>(b, G, C, m, l, AA, BB, II) \\<in> SP_Judgement;\n        (\\<forall>s0 s t. AA s0 s \\<longrightarrow> II s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. AA s0 s \\<longrightarrow> Q s0 s)));\n        \\<forall>s0 s. A s0 s \\<longrightarrow> AA s0 s;\n        \\<forall>s0 s t. BB s0 s t \\<longrightarrow> B s0 s t;\n        \\<forall>s0 s k. II s0 s k \\<longrightarrow> I s0 s k\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 6. \\<And>G A C m l B I.\n       \\<lbrakk>G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I;\n        (\\<forall>s0 s t. A s0 s \\<longrightarrow> I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 7. \\<And>G C m l A B I Mspec Minv Anno.\n       \\<lbrakk>G\\<down>(C, m, l) = Some (A, B, I);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))", "apply clarsimp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>C m M l pc Mspec Minv Anno A I G B.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some (iftrue pc);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        G \\<rhd> \\<langle> SP_pre M l\n                            (\\<lambda>s0 s.\n                                \\<forall>ops S k.\n                                   s = (TRUE # ops, S, k) \\<longrightarrow>\n                                   A s0\n                                    s) \\<rangle> C,m,pc \\<langle> SP_post M\n                             l (\\<lambda>s0 s t.\n                                   \\<forall>ops S k.\ns = (TRUE # ops, S, k) \\<longrightarrow>\nB s0 s\n t) \\<rangle> SP_inv M l\n               (\\<lambda>s0 s t.\n                   \\<forall>ops S k.\n                      s = (TRUE # ops, S, k) \\<longrightarrow> I s0 s t);\n        (\\<forall>s0 s t.\n            SP_pre M l\n             (\\<lambda>s0 s.\n                 \\<forall>ops S k.\n                    s = (TRUE # ops, S, k) \\<longrightarrow> A s0 s)\n             s0 s \\<longrightarrow>\n            SP_inv M l\n             (\\<lambda>s0 s t.\n                 \\<forall>ops S k.\n                    s = (TRUE # ops, S, k) \\<longrightarrow> I s0 s t)\n             s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>pc = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SP_pre M l\n                     (\\<lambda>s0 s.\n                         \\<forall>ops S k.\n                            s = (TRUE # ops, S, k) \\<longrightarrow> A s0 s)\n                     s0 s \\<longrightarrow>\n                    Q s0 s)));\n        G \\<rhd> \\<langle> SP_pre M l\n                            (\\<lambda>s0 s.\n                                \\<forall>ops S k v.\n                                   s = (v # ops, S, k) \\<longrightarrow>\n                                   v \\<noteq> TRUE \\<longrightarrow>\n                                   A s0\n                                    s) \\<rangle> C,m,(l +\n                1) \\<langle> SP_post M l\n                              (\\<lambda>s0 s t.\n                                  \\<forall>ops S k v.\n                                     s = (v # ops, S, k) \\<longrightarrow>\n                                     v \\<noteq> TRUE \\<longrightarrow>\n                                     B s0 s\nt) \\<rangle> SP_inv M l\n              (\\<lambda>s0 s t.\n                  \\<forall>ops S k v.\n                     s = (v # ops, S, k) \\<longrightarrow>\n                     v \\<noteq> TRUE \\<longrightarrow> I s0 s t);\n        (\\<forall>s0 s t.\n            SP_pre M l\n             (\\<lambda>s0 s.\n                 \\<forall>ops S k v.\n                    s = (v # ops, S, k) \\<longrightarrow>\n                    v \\<noteq> TRUE \\<longrightarrow> A s0 s)\n             s0 s \\<longrightarrow>\n            SP_inv M l\n             (\\<lambda>s0 s t.\n                 \\<forall>ops S k v.\n                    s = (v # ops, S, k) \\<longrightarrow>\n                    v \\<noteq> TRUE \\<longrightarrow> I s0 s t)\n             s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l + 1 = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SP_pre M l\n                     (\\<lambda>s0 s.\n                         \\<forall>ops S k v.\n                            s = (v # ops, S, k) \\<longrightarrow>\n                            v \\<noteq> TRUE \\<longrightarrow> A s0 s)\n                     s0 s \\<longrightarrow>\n                    Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 2. \\<And>C m M l Mspec Minv Anno A I B G.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some vreturn;\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        \\<forall>s0 s.\n           A s0 s \\<longrightarrow>\n           (\\<forall>v ops S h.\n               s = (v # ops, S, h) \\<longrightarrow> B s0 s (h, v))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 3. \\<And>C m M l D m' Mspec Minv Anno T MI Anno2 par code l0 A I G B.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some (invokeS D m');\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        MST\\<down>(D, m') = Some (T, MI, Anno2);\n        mbody_is D m' (par, code, l0);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        \\<forall>s0 ops1 ops2 S R k t.\n           (ops1, par, R, ops2) \\<in> Frame \\<longrightarrow>\n           A s0 (ops1, S, k) \\<longrightarrow>\n           MI (R, k) t \\<longrightarrow> I s0 (ops1, S, k) t;\n        G \\<rhd> \\<langle> SINV_pre par T\n                            A \\<rangle> C,m,(l +\n       1) \\<langle> SINV_post par T B \\<rangle> SINV_inv par T I;\n        (\\<forall>s0 s t.\n            SINV_pre par T A s0 s \\<longrightarrow>\n            SINV_inv par T I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l + 1 = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SINV_pre par T A s0 s \\<longrightarrow>\n                    Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 4. \\<And>b G C m l AA BB II A B I.\n       \\<lbrakk>(b, G, C, m, l, AA, BB, II) \\<in> SP_Judgement;\n        (\\<forall>s0 s t. AA s0 s \\<longrightarrow> II s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. AA s0 s \\<longrightarrow> Q s0 s)));\n        \\<forall>s0 s. A s0 s \\<longrightarrow> AA s0 s;\n        \\<forall>s0 s t. BB s0 s t \\<longrightarrow> B s0 s t;\n        \\<forall>s0 s k. II s0 s k \\<longrightarrow> I s0 s k\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 5. \\<And>G A C m l B I.\n       \\<lbrakk>G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I;\n        (\\<forall>s0 s t. A s0 s \\<longrightarrow> I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 6. \\<And>G C m l A B I Mspec Minv Anno.\n       \\<lbrakk>G\\<down>(C, m, l) = Some (A, B, I);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>C m M l Mspec Minv Anno A I B G.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some vreturn;\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        \\<forall>s0 s.\n           A s0 s \\<longrightarrow>\n           (\\<forall>v ops S h.\n               s = (v # ops, S, h) \\<longrightarrow> B s0 s (h, v))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 2. \\<And>C m M l D m' Mspec Minv Anno T MI Anno2 par code l0 A I G B.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some (invokeS D m');\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        MST\\<down>(D, m') = Some (T, MI, Anno2);\n        mbody_is D m' (par, code, l0);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        \\<forall>s0 ops1 ops2 S R k t.\n           (ops1, par, R, ops2) \\<in> Frame \\<longrightarrow>\n           A s0 (ops1, S, k) \\<longrightarrow>\n           MI (R, k) t \\<longrightarrow> I s0 (ops1, S, k) t;\n        G \\<rhd> \\<langle> SINV_pre par T\n                            A \\<rangle> C,m,(l +\n       1) \\<langle> SINV_post par T B \\<rangle> SINV_inv par T I;\n        (\\<forall>s0 s t.\n            SINV_pre par T A s0 s \\<longrightarrow>\n            SINV_inv par T I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l + 1 = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SINV_pre par T A s0 s \\<longrightarrow>\n                    Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 3. \\<And>b G C m l AA BB II A B I.\n       \\<lbrakk>(b, G, C, m, l, AA, BB, II) \\<in> SP_Judgement;\n        (\\<forall>s0 s t. AA s0 s \\<longrightarrow> II s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. AA s0 s \\<longrightarrow> Q s0 s)));\n        \\<forall>s0 s. A s0 s \\<longrightarrow> AA s0 s;\n        \\<forall>s0 s t. BB s0 s t \\<longrightarrow> B s0 s t;\n        \\<forall>s0 s k. II s0 s k \\<longrightarrow> I s0 s k\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 4. \\<And>G A C m l B I.\n       \\<lbrakk>G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I;\n        (\\<forall>s0 s t. A s0 s \\<longrightarrow> I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 5. \\<And>G C m l A B I Mspec Minv Anno.\n       \\<lbrakk>G\\<down>(C, m, l) = Some (A, B, I);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>C m M l D m' Mspec Minv Anno T MI Anno2 par code l0 A I G B.\n       \\<lbrakk>mbody_is C m M; get_ins M l = Some (invokeS D m');\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        MST\\<down>(D, m') = Some (T, MI, Anno2);\n        mbody_is D m' (par, code, l0);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s);\n        \\<forall>s0 ops1 ops2 S R k t.\n           (ops1, par, R, ops2) \\<in> Frame \\<longrightarrow>\n           A s0 (ops1, S, k) \\<longrightarrow>\n           MI (R, k) t \\<longrightarrow> I s0 (ops1, S, k) t;\n        G \\<rhd> \\<langle> SINV_pre par T\n                            A \\<rangle> C,m,(l +\n       1) \\<langle> SINV_post par T B \\<rangle> SINV_inv par T I;\n        (\\<forall>s0 s t.\n            SINV_pre par T A s0 s \\<longrightarrow>\n            SINV_inv par T I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l + 1 = Some Q \\<longrightarrow>\n                (\\<forall>s0 s.\n                    SINV_pre par T A s0 s \\<longrightarrow>\n                    Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 2. \\<And>b G C m l AA BB II A B I.\n       \\<lbrakk>(b, G, C, m, l, AA, BB, II) \\<in> SP_Judgement;\n        (\\<forall>s0 s t. AA s0 s \\<longrightarrow> II s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. AA s0 s \\<longrightarrow> Q s0 s)));\n        \\<forall>s0 s. A s0 s \\<longrightarrow> AA s0 s;\n        \\<forall>s0 s t. BB s0 s t \\<longrightarrow> B s0 s t;\n        \\<forall>s0 s k. II s0 s k \\<longrightarrow> I s0 s k\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 3. \\<And>G A C m l B I.\n       \\<lbrakk>G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I;\n        (\\<forall>s0 s t. A s0 s \\<longrightarrow> I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 4. \\<And>G C m l A B I Mspec Minv Anno.\n       \\<lbrakk>G\\<down>(C, m, l) = Some (A, B, I);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b G C m l AA BB II A B I.\n       \\<lbrakk>(b, G, C, m, l, AA, BB, II) \\<in> SP_Judgement;\n        (\\<forall>s0 s t. AA s0 s \\<longrightarrow> II s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. AA s0 s \\<longrightarrow> Q s0 s)));\n        \\<forall>s0 s. A s0 s \\<longrightarrow> AA s0 s;\n        \\<forall>s0 s t. BB s0 s t \\<longrightarrow> B s0 s t;\n        \\<forall>s0 s k. II s0 s k \\<longrightarrow> I s0 s k\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 2. \\<And>G A C m l B I.\n       \\<lbrakk>G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I;\n        (\\<forall>s0 s t. A s0 s \\<longrightarrow> I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 3. \\<And>G C m l A B I Mspec Minv Anno.\n       \\<lbrakk>G\\<down>(C, m, l) = Some (A, B, I);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>G A C m l B I.\n       \\<lbrakk>G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I;\n        (\\<forall>s0 s t. A s0 s \\<longrightarrow> I s0 s (heap s)) \\<and>\n        (\\<forall>Mspec Minv Anno.\n            MST\\<down>(C, m) = Some (Mspec, Minv, Anno) \\<longrightarrow>\n            (\\<forall>Q.\n                Anno\\<down>l = Some Q \\<longrightarrow>\n                (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s)))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))\n 2. \\<And>G C m l A B I Mspec Minv Anno.\n       \\<lbrakk>G\\<down>(C, m, l) = Some (A, B, I);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G C m l A B I Mspec Minv Anno.\n       \\<lbrakk>G\\<down>(C, m, l) = Some (A, B, I);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))", "(*fast*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G C m l A B I Mspec Minv Anno.\n       \\<lbrakk>G\\<down>(C, m, l) = Some (A, B, I);\n        MST\\<down>(C, m) = Some (Mspec, Minv, Anno);\n        \\<forall>Q.\n           Anno\\<down>l = Some Q \\<longrightarrow>\n           (\\<forall>s0 s. A s0 s \\<longrightarrow> Q s0 s);\n        \\<forall>s0 s. A s0 s \\<longrightarrow> I s0 s (heap s)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>s0 s t.\n                             A s0 s \\<longrightarrow>\n                             I s0 s (heap s)) \\<and>\n                         (\\<forall>Mspec Minv Anno.\n                             MST\\<down>(C, m) =\n                             Some (Mspec, Minv, Anno) \\<longrightarrow>\n                             (\\<forall>Q.\n                                 Anno\\<down>l = Some Q \\<longrightarrow>\n                                 (\\<forall>s0 s.\n                                     A s0 s \\<longrightarrow> Q s0 s)))", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "(*fast*)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma AssertionsImplyMethInvariants:\n \"\\<lbrakk> G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I; A s0 s\\<rbrakk> \\<Longrightarrow> I s0 s (heap s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I;\n     A s0 s\\<rbrakk>\n    \\<Longrightarrow> I s0 s (heap s)", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I;\n     A s0 s\\<rbrakk>\n    \\<Longrightarrow> I s0 s (heap s)", "by (drule AssertionsImplyInvariantsAux, fast)"], ["", "(*>*)"], ["", "lemma AssertionsImplyAnnoInvariants:\n \"\\<lbrakk> G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I; MST\\<down>(C,m) = Some(Mspec,Minv,Anno);\n    Anno\\<down>(l) = Some Q; A s0 s\\<rbrakk> \\<Longrightarrow> Q s0 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I;\n     MST\\<down>(C, m) = Some (Mspec, Minv, Anno); Anno\\<down>l = Some Q;\n     A s0 s\\<rbrakk>\n    \\<Longrightarrow> Q s0 s", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G \\<rhd> \\<lbrace> A \\<rbrace> C,m,l \\<lbrace> B \\<rbrace> I;\n     MST\\<down>(C, m) = Some (Mspec, Minv, Anno); Anno\\<down>l = Some Q;\n     A s0 s\\<rbrakk>\n    \\<Longrightarrow> Q s0 s", "by (drule AssertionsImplyInvariantsAux, fast)"], ["", "(*>*)"], ["", "text\\<open>For \\emph{verified} \\emph{programs}, all preconditions can be\njustified by proof derivations, and initial labels of all methods\n(again provably) satisfy the method preconditions.\\<close>"], ["", "definition mkState::\"InitState \\<Rightarrow> State\"\nwhere \"mkState s0 = ([],fst s0,snd s0)\""], ["", "definition mkPost::\"MethSpec \\<Rightarrow> Post\"\nwhere \"mkPost T = (\\<lambda> s0 s t . s=mkState s0 \\<longrightarrow> T s0 t)\""], ["", "definition mkInv::\"MethInv \\<Rightarrow> Inv\"\nwhere \"mkInv MI = (\\<lambda> s0 s t . s=mkState s0 \\<longrightarrow> MI s0 t)\""], ["", "definition VP_G::\"CTXT \\<Rightarrow> bool\" where\n\"VP_G G =\n  ((\\<forall> C m l A B I. G\\<down>(C,m,l) = Some (A,B,I) \\<longrightarrow> G \\<rhd> \\<lbrace>A\\<rbrace> C,m,l \\<lbrace>B\\<rbrace> I) \\<and>\n  (\\<forall> C m par code l0 T MI Anno. \n      mbody_is C m (par,code,l0) \\<longrightarrow> MST\\<down>(C,m) = Some(T,MI,Anno) \\<longrightarrow> \n      G \\<rhd> \\<lbrace>(\\<lambda> s0 s. s = mkState s0)\\<rbrace> C,m,l0 \\<lbrace>mkPost T\\<rbrace> (mkInv MI)))\""], ["", "definition VP::bool where \"VP = (\\<exists> G . VP_G G)\""], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}