{"file_name": "/home/qj213/afp-2021-10-22/thys/BytecodeLogicJmlTypes/Language.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BytecodeLogicJmlTypes", "problem_names": ["lemma Frame_deterministic[rule_format]:\n\"(ops, par, S, os) \\<in> Frame \\<Longrightarrow> \n(\\<forall> R opsa . (ops, par, R, opsa) \\<in> Frame \\<longrightarrow> R=S \\<and> opsa = os)\"", "lemma no_zero_height_derivsAux[rule_format]: \n\"\\<forall>n . ((M,l,s,n,ll,t) : Step \\<longrightarrow> (n=0 \\<longrightarrow> False)) \\<and> ((MM,lll,ss,m,h,v):Exec \\<longrightarrow> (m=0 \\<longrightarrow> False))\"", "lemma no_zero_height_derivsAux2: \"((M,l,s,0,ll,t):Step \\<longrightarrow> False) \\<and> ((MM,lll,ss,0,h,v):Exec \\<longrightarrow> False)\"", "lemma no_zero_height_Step_derivs: \"(M,l,s,0,ll,t):Step \\<Longrightarrow> False\"", "lemma no_zero_height_Step_derivs1: \"(M,l,(os,S,H),0,ll,t):Step \\<Longrightarrow> False\"", "lemma no_zero_height_Exec_derivs: \"(M,l,s,0,h,v):Exec \\<Longrightarrow> False\"", "lemma no_zero_height_Exec_derivs1: \"(M,l,(os,S,H),0,h,v):Exec \\<Longrightarrow> False\"", "lemma ConstElim1:\"\\<lbrakk>(M, l, (os, S, h), n, ll,t) \\<in> Step; get_ins M l = Some (const v)\\<rbrakk> \n               \\<Longrightarrow> n = Suc 0 \\<and> t = (v # os, S, h) \\<and> ll = l+1\"", "lemma DupElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l =  Some dup\\<rbrakk> \n               \\<Longrightarrow> \\<exists> v ops . os = v # ops \\<and> n = Suc 0 \\<and> t = (v # os, S, h) \\<and> ll = l+1\"", "lemma PopElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l =  Some pop\\<rbrakk> \n               \\<Longrightarrow> \\<exists> v ops . os = v # ops \\<and> n = Suc 0 \\<and> t = (ops, S, h) \\<and> ll = l+1\"", "lemma SwapElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some swap\\<rbrakk>\n              \\<Longrightarrow> \\<exists> v w ops . os = v # w # ops \\<and> n = Suc 0 \\<and> t = (w # v # ops, S, h) \\<and> ll = l+1\"", "lemma LoadElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (load x)\\<rbrakk>\n                 \\<Longrightarrow> \\<exists> v . S\\<down>x = Some v \\<and> n = Suc 0 \\<and> t = (v # os, S, h) \\<and> ll = l+1\"", "lemma StoreElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (store x)\\<rbrakk>\n                  \\<Longrightarrow> \\<exists> v ops . os = v # ops \\<and> n = Suc 0 \\<and> t = (ops, S[x\\<mapsto>v], h) \\<and> ll = l+1\"", "lemma BinopElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (binop f)\\<rbrakk>\n                  \\<Longrightarrow> \\<exists> v w ops . os = v # w # ops \\<and> n = Suc 0 \\<and> t = (f v w # ops, S, h) \\<and> ll = l+1\"", "lemma UnopElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (unop f)\\<rbrakk>\n                 \\<Longrightarrow> \\<exists> v ops . os = v # ops \\<and> n = Suc 0 \\<and> t = (f v # ops, S, h) \\<and> ll = l+1\"", "lemma NewElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (new d)\\<rbrakk>\n               \\<Longrightarrow> \\<exists> a . a = nextLoc h \\<and> n = Suc 0 \\<and> t = (RVal (Loc a) # os, S, h[a\\<mapsto>(d, emp)]) \\<and> ll = l+1\"", "lemma GetElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (getfield d F)\\<rbrakk>\n               \\<Longrightarrow> \\<exists> a Flds v ops. h\\<down>a = Some (d, Flds) \\<and> Flds\\<down>F = Some v \\<and> \n                                   os = RVal (Loc a) # ops \\<and> n = Suc 0 \\<and> t = (v # ops, S, h) \\<and> ll = l+1\"", "lemma PutElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (putfield d F)\\<rbrakk>\n                \\<Longrightarrow> \\<exists> a Flds v ops. h\\<down>a = Some (d, Flds) \\<and> os = v # RVal (Loc a) # ops \\<and>\n                                   n = Suc 0 \\<and> t = (ops, S, h[a\\<mapsto>(d, Flds[F\\<mapsto>v])]) \\<and> ll = l+1\"", "lemma CastElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (checkcast d)\\<rbrakk>\n                \\<Longrightarrow> \\<exists> a Flds ops . h\\<down>a = Some (d, Flds) \\<and> os = RVal (Loc a) # ops \\<and> n = Suc 0 \\<and> \n                                   t = (RVal (Loc a) # ops, S, h) \\<and> ll = l+1\"", "lemma GotoElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (goto pc)\\<rbrakk>\n                \\<Longrightarrow> n = Suc 0 \\<and> t = (os, S, h) \\<and> ll = pc\"", "lemma IfElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (iftrue pc)\\<rbrakk>\n              \\<Longrightarrow> (\\<exists> ops . os = TRUE # ops \\<and> n = Suc 0 \\<and> t = (ops, S, h) \\<and> ll = pc) \\<or> \n                  (\\<exists> v ops . v \\<noteq> TRUE \\<and> os = v # ops \\<and> n = Suc 0 \\<and> t = (ops, S, h) \\<and> ll = l+1)\"", "lemma InvokeElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (invokeS C m)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists> code l0 v ops hh u k R par. \n                           mbody_is C m (par,code, l0) \\<and> (os,par,R,ops):Frame \\<and> \n                           ((par,code,l0), l0, ([], R, h), k, hh, v) \\<in> Exec \\<and> \n                           n = Suc k \\<and> t = (v # ops, S, hh) \\<and> ll = l+1\"", "lemma InvokeElim: \"\\<lbrakk>(M, l, s, n, ll, t) \\<in> Step; get_ins M l = Some (invokeS C m)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists> code l0 v ops hh u k R par. \n                           mbody_is C m (par,code, l0) \\<and> (fst s,par,R,ops):Frame \\<and> \n                           ((par,code,l0), l0, ([], R, snd(snd s)), k, hh, v) \\<in> Exec \\<and> \n                           n = Suc k \\<and> t = (v # ops, fst (snd s), hh) \\<and> ll = l+1\"", "lemma RetElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (vreturn)\\<rbrakk> \\<Longrightarrow> False\"", "lemma ExecElim1: \"\\<lbrakk>(M,l,(os,S,H),k,h,v):Exec\\<rbrakk>\n      \\<Longrightarrow> (get_ins M l = Some vreturn \\<and> (\\<exists> ops . os = v # ops \\<and> k = Suc 0 \\<and> h=H)) \\<or>\n          (\\<exists> n m t ll. (M, l,(os,S,H), n, ll,t) \\<in> Step \\<and> (M, ll, t, m, h, v) \\<in> Exec \\<and> k = Suc (max n m))\"", "lemma InstrElimNext:\n \"\\<lbrakk>(M, l, s, n, ll, t) \\<in> Step;\n   get_ins M l = Some I;\n   I = const c \\<or> I = dup \\<or> I = pop \\<or> I = swap \\<or> I = load x \\<or>\n   I = store x \\<or> I = binop f \\<or> I = unop g \\<or> I = new d \\<or>\n   I = getfield d F \\<or> I = putfield d F \\<or> I = checkcast d\\<rbrakk>\n  \\<Longrightarrow> ll = l+1\"", "lemma StepExec_determ_Aux[rule_format]:\n\"(\\<forall> n1 l M s l1 t . n1 \\<le> n \\<longrightarrow> (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n       (\\<forall> n2 l2 r. (M,l,s,n2,l2,r):Step \\<longrightarrow> (n1=n2 \\<and> t=r \\<and> l1=l2))) \\<and>\n (\\<forall> n1 l M s h v . n1 \\<le> n \\<longrightarrow> (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n      (\\<forall> n2 k w . (M,l,s,n2,k,w):Exec \\<longrightarrow> (n1=n2 \\<and> h=k \\<and> v=w)))\"", "lemma Step_determ:\n \"\\<lbrakk>(M,l,s,n,l1,t) \\<in> Step; (M,l,s,m,l2,r):Step\\<rbrakk> \\<Longrightarrow> n=m \\<and> t=r \\<and> l1=l2\"", "lemma Exec_determ:\n \"\\<lbrakk>(M,l,s,n,h,v) \\<in> Exec; (M,l,s,m,k,w):Exec\\<rbrakk> \\<Longrightarrow> n=m \\<and> h=k \\<and> v=w\""], "translations": [["", "lemma Frame_deterministic[rule_format]:\n\"(ops, par, S, os) \\<in> Frame \\<Longrightarrow> \n(\\<forall> R opsa . (ops, par, R, opsa) \\<in> Frame \\<longrightarrow> R=S \\<and> opsa = os)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ops, par, S, os) \\<in> Frame \\<Longrightarrow>\n    \\<forall>R opsa.\n       (ops, par, R, opsa) \\<in> Frame \\<longrightarrow>\n       R = S \\<and> opsa = os", "apply (erule Frame.induct, clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>oo R opsa.\n       (oo, [], R, opsa) \\<in> Frame \\<Longrightarrow>\n       R = emp \\<and> opsa = oo\n 2. \\<And>oo par S ops R x v.\n       \\<lbrakk>(oo, par, S, ops) \\<in> Frame;\n        \\<forall>R opsa.\n           (oo, par, R, opsa) \\<in> Frame \\<longrightarrow>\n           R = S \\<and> opsa = ops;\n        R = S[x\\<mapsto>v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ra opsa.\n                            (v # oo, x # par, Ra, opsa)\n                            \\<in> Frame \\<longrightarrow>\n                            Ra = R \\<and> opsa = ops", "apply (erule Frame.cases, clarsimp, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>oo par S ops R x v.\n       \\<lbrakk>(oo, par, S, ops) \\<in> Frame;\n        \\<forall>R opsa.\n           (oo, par, R, opsa) \\<in> Frame \\<longrightarrow>\n           R = S \\<and> opsa = ops;\n        R = S[x\\<mapsto>v]\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Ra opsa.\n                            (v # oo, x # par, Ra, opsa)\n                            \\<in> Frame \\<longrightarrow>\n                            Ra = R \\<and> opsa = ops", "apply (erule thin_rl, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>oo par S ops x v Ra opsa.\n       \\<lbrakk>\\<forall>R opsa.\n                   (oo, par, R, opsa) \\<in> Frame \\<longrightarrow>\n                   R = S \\<and> opsa = ops;\n        (v # oo, x # par, Ra, opsa) \\<in> Frame\\<rbrakk>\n       \\<Longrightarrow> Ra = S[x\\<mapsto>v] \\<and> opsa = ops", "apply (erule Frame.cases, clarsimp, clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>In order to obtain a deterministic semantics, we assume the\nexistence of a function, with the obvious freshness axiom for this\nconstruction.\\<close>"], ["", "axiomatization nextLoc::\"Heap \\<Rightarrow> Addr\"\nwhere nextLoc_fresh: \"h\\<down>(nextLoc h) = None\""], ["", "subsubsection\\<open>Operational judgements\\<close>"], ["", "text\\<open>Similar to Bannwart-M\\\"uller~\\cite{BannwartMueller05}, we define\ntwo operational judgements: a one-step relation and a relation that\nrepresents the transitive closure of the former until the end of the\ncurrent method invocation. These relations are mutually recursive,\nsince the method invocation rule contracts the execution of the\ninvoked method to a single step. The one-step relation associates a\nstate to its immediate successor state, where the program counter is\ninterpreted with respect to the current method body. The transitive\nclosure ignores the bottom part of the operand stack and the store of\nthe final configuration. It simply returns the heap and the result of\nthe method invocation, where the latter is given by the topmost value\non the operand stack. In contrast to~\\cite{BannwartMueller05}, we do\nnot use an explicit \\<open>return\\<close> variable. Both relations take an\nadditional index of type \\<open>nat\\<close> that monitors the derivation\nheight. This is useful in the proof of soundness of the program\nlogic.\\<close>"], ["", "text\\<open>Intuitively, \\<open>(M,l,s,n,l',s'):Step\\<close> means that method\n(body) \\<open>M\\<close> evolves in one step from state \\<open>s\\<close> to state\n\\<open>s'\\<close>, while statement \\<open>(M,s,n,h,v):Exec\\<close> indicates that\nexecuting from \\<open>s\\<close> in method \\<open>M\\<close> leads eventually to a\nstate whose final value is \\<open>h\\<close>, where precisely the last step in\nthis sequence is a \\<open>vreturn\\<close> instruction and the return value is\n\\<open>v\\<close>.\\<close>"], ["", "text\\<open>Like Bannwart and M\\\"uller, we define a \"frame-less\"\nsemantics. i.e.~the execution of a method body is modelled by a\ntransitive closure of the basic step-relation, which results in a\none-step reduction at the invocation site. Arguably, an operational\nsemantics with an explicit frame stack is closer to the real JVM. It\nshould not be difficult to verify the operational soundness of the\npresent system w.r.t.~such a finer model, or to modify the\nsemantics.\\<close>"], ["", "inductive_set\n  Step::\"(Mbody \\<times> Label \\<times> State \\<times> nat \\<times> Label \\<times> State) set\"\nand\n  Exec::\"(Mbody \\<times> Label \\<times> State \\<times> nat \\<times> Heap \\<times> Val) set\"\nwhere\nConst:\"\\<lbrakk>get_ins M l = Some (const v); NEXT = (v # os,s,h); ll=l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(os,s,h), 1, ll, NEXT) : Step\"\n|\nDup:  \"\\<lbrakk>get_ins M l = Some dup; NEXT = (v # v # os,s,h); ll =l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(v # os,s,h), 1, ll, NEXT) : Step\"\n|\nPop:  \"\\<lbrakk>get_ins M l = Some pop; NEXT = (os,s,h); ll=l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(v # os,s,h), 1, ll, NEXT) : Step\"\n|\nSwap: \"\\<lbrakk>get_ins M l = Some swap; NEXT = (w # (v # os),s,h); ll= l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(v # (w # os),s,h), 1, ll, NEXT) : Step\"\n|\nLoad: \"\\<lbrakk>get_ins M l = Some (load x); s\\<down>x = Some v;\n         NEXT = (v # os,s,h); ll=l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(os,s,h), 1, ll,NEXT) : Step\"\n|\nStore:\"\\<lbrakk>get_ins M l = Some (store x); NEXT = (os,s[x\\<mapsto>v],h); ll= l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(v # os,s,h), 1, ll, NEXT) : Step\"\n|\nBinop:\"\\<lbrakk>get_ins M l = Some (binop f); NEXT = ((f v w) # os,s,h); ll=l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(v # (w # os),s,h), 1, ll,NEXT) : Step\"\n|\nUnop: \"\\<lbrakk>get_ins M l = Some (unop f); NEXT = ((f v) # os,s,h);ll=l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(v # os,s,h), 1, ll, NEXT) : Step\"\n|\nNew:  \"\\<lbrakk>get_ins M l = Some (new d); newobj = (d, emp); a=nextLoc h; \n         NEXT = ((RVal (Loc a)) # os,s,h[a\\<mapsto>newobj]); ll = l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(os,s,h), 1, ll,NEXT) : Step\"\n|\nGet:  \"\\<lbrakk>get_ins M l = Some (getfield d F); h\\<down>a = Some (d, Flds);\n         Flds\\<down>F = Some v; NEXT = (v # os,s,h); ll=l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,((RVal (Loc a)) # os,s,h), 1, ll,NEXT) : Step\"\n|\nPut:  \"\\<lbrakk>get_ins M l = Some (putfield d F); h\\<down>a = Some (d, Flds);\n         newobj = (d, Flds[F\\<mapsto>v]); NEXT = (os,s,h[a\\<mapsto>newobj]); ll=l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(v # ((RVal (Loc a)) # os),s,h), 1, ll, NEXT) : Step\"\n|\nCast: \"\\<lbrakk>get_ins M l = Some (checkcast d); h\\<down>a = Some (d, Flds);\n         NEXT = ((RVal (Loc a)) # os,s,h); ll=l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,((RVal (Loc a)) # os,s,h), 1, ll,NEXT) : Step\"\n|\nGoto: \"\\<lbrakk>get_ins M l = Some (goto pc)\\<rbrakk> \\<Longrightarrow> (M,l,S, 1, pc,S) : Step\"\n|\nIfT:  \"\\<lbrakk>get_ins M l = Some (iftrue pc); NEXT = (os,s,h)\\<rbrakk>\n       \\<Longrightarrow> (M,l,(TRUE # os,s,h), 1, pc, NEXT) : Step\"\n|\nIfF:  \"\\<lbrakk>get_ins M l = Some (iftrue pc); v \\<noteq> TRUE; NEXT = (os,s,h); ll=l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(v # os,s,h), 1, ll, NEXT) : Step\"\n|\nInvS: \"\\<lbrakk>get_ins M l = Some (invokeS C m); mbody_is C m (par,code,l0);\n         ((par,code,l0),l0,([], S,h), n, hh, v): Exec; \n         (ops,par,S,os) : Frame; NEXT = (v # os,s,hh); ll = l+1\\<rbrakk>\n       \\<Longrightarrow> (M,l,(ops,s,h), Suc n, ll, NEXT) : Step\"\n|\nVret: \"\\<lbrakk>get_ins M l = Some vreturn\\<rbrakk> \\<Longrightarrow> (M,l,(v # os,s,h), 1, h, v) : Exec\"\n|\nRun:  \"\\<lbrakk>(M,l,s,n,ll,t):Step; (M,ll,t,m,h,v):Exec; k = (max n m) +1 \\<rbrakk>\n       \\<Longrightarrow> (M,l,s,k,h,v) : Exec\""], ["", "text\\<open>A big-step operational judgement that abstracts from the\nderivation height is easily defined.\\<close>"], ["", "definition Opsem::\"Mbody \\<Rightarrow> Label \\<Rightarrow> State \\<Rightarrow> Heap \\<Rightarrow> Val \\<Rightarrow> bool\"\nwhere \"Opsem M l s h v = (\\<exists> n . (M,l,s,n,h,v):Exec)\""], ["", "subsection \\<open>Basic properties\\<close>"], ["", "text \\<open>We provide elimination lemmas for the inductively defined\nrelations\\<close>"], ["", "inductive_cases eval_cases: \n \"(M,l,s,n,ll,t) : Step\"\n \"(M,l,s,n,h,v) : Exec\""], ["", "(*<*)"], ["", "lemma no_zero_height_derivsAux[rule_format]: \n\"\\<forall>n . ((M,l,s,n,ll,t) : Step \\<longrightarrow> (n=0 \\<longrightarrow> False)) \\<and> ((MM,lll,ss,m,h,v):Exec \\<longrightarrow> (m=0 \\<longrightarrow> False))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       ((M, l, s, n, ll, t) \\<in> Step \\<longrightarrow>\n        n = 0 \\<longrightarrow> False) \\<and>\n       ((MM, lll, ss, m, h, v) \\<in> Exec \\<longrightarrow>\n        m = 0 \\<longrightarrow> False)", "by (rule allI, rule Step_Exec.induct, simp_all)"], ["", "lemma no_zero_height_derivsAux2: \"((M,l,s,0,ll,t):Step \\<longrightarrow> False) \\<and> ((MM,lll,ss,0,h,v):Exec \\<longrightarrow> False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((M, l, s, 0, ll, t) \\<in> Step \\<longrightarrow> False) \\<and>\n    ((MM, lll, ss, 0, h, v) \\<in> Exec \\<longrightarrow> False)", "by (insert no_zero_height_derivsAux, fast)"], ["", "(*>*)"], ["", "text \\<open>and observe that no derivations of height 0 exist.\\<close>"], ["", "lemma no_zero_height_Step_derivs: \"(M,l,s,0,ll,t):Step \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, l, s, 0, ll, t) \\<in> Step \\<Longrightarrow> False", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, l, s, 0, ll, t) \\<in> Step \\<Longrightarrow> False", "by (insert no_zero_height_derivsAux2, fast)"], ["", "(*>*)\n(*<*)"], ["", "lemma no_zero_height_Step_derivs1: \"(M,l,(os,S,H),0,ll,t):Step \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, l, (os, S, H), 0, ll, t) \\<in> Step \\<Longrightarrow> False", "by (insert no_zero_height_derivsAux2, fast)"], ["", "(*>*)"], ["", "lemma no_zero_height_Exec_derivs: \"(M,l,s,0,h,v):Exec \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, l, s, 0, h, v) \\<in> Exec \\<Longrightarrow> False", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, l, s, 0, h, v) \\<in> Exec \\<Longrightarrow> False", "by (insert no_zero_height_derivsAux2, fast)"], ["", "(*>*)\n(*<*)"], ["", "lemma no_zero_height_Exec_derivs1: \"(M,l,(os,S,H),0,h,v):Exec \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, l, (os, S, H), 0, h, v) \\<in> Exec \\<Longrightarrow> False", "by (insert no_zero_height_derivsAux2, fast)"], ["", "(*>*)\n\n(*<*)\n(*Elimination rules*)"], ["", "lemma ConstElim1:\"\\<lbrakk>(M, l, (os, S, h), n, ll,t) \\<in> Step; get_ins M l = Some (const v)\\<rbrakk> \n               \\<Longrightarrow> n = Suc 0 \\<and> t = (v # os, S, h) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (const v)\\<rbrakk>\n    \\<Longrightarrow> n = Suc 0 \\<and> t = (v # os, S, h) \\<and> ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma DupElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l =  Some dup\\<rbrakk> \n               \\<Longrightarrow> \\<exists> v ops . os = v # ops \\<and> n = Suc 0 \\<and> t = (v # os, S, h) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some dup\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v ops.\n                         os = v # ops \\<and>\n                         n = Suc 0 \\<and>\n                         t = (v # os, S, h) \\<and> ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma PopElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l =  Some pop\\<rbrakk> \n               \\<Longrightarrow> \\<exists> v ops . os = v # ops \\<and> n = Suc 0 \\<and> t = (ops, S, h) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some pop\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v ops.\n                         os = v # ops \\<and>\n                         n = Suc 0 \\<and> t = (ops, S, h) \\<and> ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma SwapElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some swap\\<rbrakk>\n              \\<Longrightarrow> \\<exists> v w ops . os = v # w # ops \\<and> n = Suc 0 \\<and> t = (w # v # ops, S, h) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some swap\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v w ops.\n                         os = v # w # ops \\<and>\n                         n = Suc 0 \\<and>\n                         t = (w # v # ops, S, h) \\<and> ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma LoadElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (load x)\\<rbrakk>\n                 \\<Longrightarrow> \\<exists> v . S\\<down>x = Some v \\<and> n = Suc 0 \\<and> t = (v # os, S, h) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (load x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v.\n                         S\\<down>x = Some v \\<and>\n                         n = Suc 0 \\<and>\n                         t = (v # os, S, h) \\<and> ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma StoreElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (store x)\\<rbrakk>\n                  \\<Longrightarrow> \\<exists> v ops . os = v # ops \\<and> n = Suc 0 \\<and> t = (ops, S[x\\<mapsto>v], h) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (store x)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v ops.\n                         os = v # ops \\<and>\n                         n = Suc 0 \\<and>\n                         t = (ops, S[x\\<mapsto>v], h) \\<and> ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma BinopElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (binop f)\\<rbrakk>\n                  \\<Longrightarrow> \\<exists> v w ops . os = v # w # ops \\<and> n = Suc 0 \\<and> t = (f v w # ops, S, h) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (binop f)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v w ops.\n                         os = v # w # ops \\<and>\n                         n = Suc 0 \\<and>\n                         t = (f v w # ops, S, h) \\<and> ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma UnopElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (unop f)\\<rbrakk>\n                 \\<Longrightarrow> \\<exists> v ops . os = v # ops \\<and> n = Suc 0 \\<and> t = (f v # ops, S, h) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (unop f)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>v ops.\n                         os = v # ops \\<and>\n                         n = Suc 0 \\<and>\n                         t = (f v # ops, S, h) \\<and> ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma NewElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (new d)\\<rbrakk>\n               \\<Longrightarrow> \\<exists> a . a = nextLoc h \\<and> n = Suc 0 \\<and> t = (RVal (Loc a) # os, S, h[a\\<mapsto>(d, emp)]) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (new d)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a.\n                         a = nextLoc h \\<and>\n                         n = Suc 0 \\<and>\n                         t =\n                         (RVal (Loc a) # os, S,\n                          h[a\\<mapsto>(d, emp)]) \\<and>\n                         ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma GetElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (getfield d F)\\<rbrakk>\n               \\<Longrightarrow> \\<exists> a Flds v ops. h\\<down>a = Some (d, Flds) \\<and> Flds\\<down>F = Some v \\<and> \n                                   os = RVal (Loc a) # ops \\<and> n = Suc 0 \\<and> t = (v # ops, S, h) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (getfield d F)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a Flds v ops.\n                         h\\<down>a = Some (d, Flds) \\<and>\n                         Flds\\<down>F = Some v \\<and>\n                         os = RVal (Loc a) # ops \\<and>\n                         n = Suc 0 \\<and>\n                         t = (v # ops, S, h) \\<and> ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma PutElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (putfield d F)\\<rbrakk>\n                \\<Longrightarrow> \\<exists> a Flds v ops. h\\<down>a = Some (d, Flds) \\<and> os = v # RVal (Loc a) # ops \\<and>\n                                   n = Suc 0 \\<and> t = (ops, S, h[a\\<mapsto>(d, Flds[F\\<mapsto>v])]) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (putfield d F)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a Flds v ops.\n                         h\\<down>a = Some (d, Flds) \\<and>\n                         os = v # RVal (Loc a) # ops \\<and>\n                         n = Suc 0 \\<and>\n                         t =\n                         (ops, S,\n                          h[a\\<mapsto>(d, Flds[F\\<mapsto>v])]) \\<and>\n                         ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma CastElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (checkcast d)\\<rbrakk>\n                \\<Longrightarrow> \\<exists> a Flds ops . h\\<down>a = Some (d, Flds) \\<and> os = RVal (Loc a) # ops \\<and> n = Suc 0 \\<and> \n                                   t = (RVal (Loc a) # ops, S, h) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (checkcast d)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a Flds ops.\n                         h\\<down>a = Some (d, Flds) \\<and>\n                         os = RVal (Loc a) # ops \\<and>\n                         n = Suc 0 \\<and>\n                         t = (RVal (Loc a) # ops, S, h) \\<and> ll = l + 1", "by (erule eval_cases, simp_all)"], ["", "lemma GotoElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (goto pc)\\<rbrakk>\n                \\<Longrightarrow> n = Suc 0 \\<and> t = (os, S, h) \\<and> ll = pc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (goto pc)\\<rbrakk>\n    \\<Longrightarrow> n = Suc 0 \\<and> t = (os, S, h) \\<and> ll = pc", "by (erule eval_cases, simp_all)"], ["", "lemma IfElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (iftrue pc)\\<rbrakk>\n              \\<Longrightarrow> (\\<exists> ops . os = TRUE # ops \\<and> n = Suc 0 \\<and> t = (ops, S, h) \\<and> ll = pc) \\<or> \n                  (\\<exists> v ops . v \\<noteq> TRUE \\<and> os = v # ops \\<and> n = Suc 0 \\<and> t = (ops, S, h) \\<and> ll = l+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (iftrue pc)\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>ops.\n                          os = TRUE # ops \\<and>\n                          n = Suc 0 \\<and>\n                          t = (ops, S, h) \\<and> ll = pc) \\<or>\n                      (\\<exists>v ops.\n                          v \\<noteq> TRUE \\<and>\n                          os = v # ops \\<and>\n                          n = Suc 0 \\<and>\n                          t = (ops, S, h) \\<and> ll = l + 1)", "by (erule eval_cases, simp_all)"], ["", "lemma InvokeElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (invokeS C m)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists> code l0 v ops hh u k R par. \n                           mbody_is C m (par,code, l0) \\<and> (os,par,R,ops):Frame \\<and> \n                           ((par,code,l0), l0, ([], R, h), k, hh, v) \\<in> Exec \\<and> \n                           n = Suc k \\<and> t = (v # ops, S, hh) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some (invokeS C m)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>code l0 v ops hh u k R par.\n                         mbody_is C m (par, code, l0) \\<and>\n                         (os, par, R, ops) \\<in> Frame \\<and>\n                         ((par, code, l0), l0, ([], R, h), k, hh, v)\n                         \\<in> Exec \\<and>\n                         n = Suc k \\<and>\n                         t = (v # ops, S, hh) \\<and> ll = l + 1", "by (erule eval_cases, simp_all, fastforce)"], ["", "lemma InvokeElim: \"\\<lbrakk>(M, l, s, n, ll, t) \\<in> Step; get_ins M l = Some (invokeS C m)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists> code l0 v ops hh u k R par. \n                           mbody_is C m (par,code, l0) \\<and> (fst s,par,R,ops):Frame \\<and> \n                           ((par,code,l0), l0, ([], R, snd(snd s)), k, hh, v) \\<in> Exec \\<and> \n                           n = Suc k \\<and> t = (v # ops, fst (snd s), hh) \\<and> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, s, n, ll, t) \\<in> Step;\n     get_ins M l = Some (invokeS C m)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>code l0 v ops hh u k R par.\n                         mbody_is C m (par, code, l0) \\<and>\n                         (fst s, par, R, ops) \\<in> Frame \\<and>\n                         ((par, code, l0), l0, ([], R, snd (snd s)), k, hh,\n                          v)\n                         \\<in> Exec \\<and>\n                         n = Suc k \\<and>\n                         t = (v # ops, fst (snd s), hh) \\<and> ll = l + 1", "by (erule eval_cases, simp_all, fastforce)"], ["", "lemma RetElim1: \"\\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step; get_ins M l = Some (vreturn)\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, (os, S, h), n, ll, t) \\<in> Step;\n     get_ins M l = Some vreturn\\<rbrakk>\n    \\<Longrightarrow> False", "by (erule eval_cases, simp_all)"], ["", "lemma ExecElim1: \"\\<lbrakk>(M,l,(os,S,H),k,h,v):Exec\\<rbrakk>\n      \\<Longrightarrow> (get_ins M l = Some vreturn \\<and> (\\<exists> ops . os = v # ops \\<and> k = Suc 0 \\<and> h=H)) \\<or>\n          (\\<exists> n m t ll. (M, l,(os,S,H), n, ll,t) \\<in> Step \\<and> (M, ll, t, m, h, v) \\<in> Exec \\<and> k = Suc (max n m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, l, (os, S, H), k, h, v) \\<in> Exec \\<Longrightarrow>\n    get_ins M l = Some vreturn \\<and>\n    (\\<exists>ops. os = v # ops \\<and> k = Suc 0 \\<and> h = H) \\<or>\n    (\\<exists>n m t ll.\n        (M, l, (os, S, H), n, ll, t) \\<in> Step \\<and>\n        (M, ll, t, m, h, v) \\<in> Exec \\<and> k = Suc (max n m))", "apply (erule eval_cases, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ll t m.\n       \\<lbrakk>k = Suc (max n m); (M, l, (os, S, H), n, ll, t) \\<in> Step;\n        (M, ll, t, m, h, v) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> get_ins M l = Some vreturn \\<and>\n                         (\\<exists>ops. os = v # ops) \\<and>\n                         n = 0 \\<and> m = 0 \\<and> h = H \\<or>\n                         (\\<exists>na ma a aa b ll.\n                             (M, l, (os, S, H), na, ll, a, aa, b)\n                             \\<in> Step \\<and>\n                             (M, ll, (a, aa, b), ma, h, v) \\<in> Exec \\<and>\n                             max n m = max na ma)", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ll t m.\n       \\<lbrakk>k = Suc (max n m); (M, l, (os, S, H), n, ll, t) \\<in> Step;\n        (M, ll, t, m, h, v) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> \\<exists>na ma a aa b ll.\n                            (M, l, (os, S, H), na, ll, a, aa, b)\n                            \\<in> Step \\<and>\n                            (M, ll, (a, aa, b), ma, h, v) \\<in> Exec \\<and>\n                            max n m = max na ma", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ll a aa b m.\n       \\<lbrakk>k = Suc (max n m);\n        (M, l, (os, S, H), n, ll, a, aa, b) \\<in> Step;\n        (M, ll, (a, aa, b), m, h, v) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> \\<exists>na ma a aa b ll.\n                            (M, l, (os, S, H), na, ll, a, aa, b)\n                            \\<in> Step \\<and>\n                            (M, ll, (a, aa, b), ma, h, v) \\<in> Exec \\<and>\n                            max n m = max na ma", "apply (rule, rule, rule, rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ll a aa b m.\n       \\<lbrakk>k = Suc (max n m);\n        (M, l, (os, S, H), n, ll, a, aa, b) \\<in> Step;\n        (M, ll, (a, aa, b), m, h, v) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ba lla.\n                            (M, l, (os, S, H), ?n6 n ll a aa b m, lla,\n                             ?a10 n ll a aa b m, ?a12 n ll a aa b m, ba)\n                            \\<in> Step \\<and>\n                            (M, lla,\n                             (?a10 n ll a aa b m, ?a12 n ll a aa b m, ba),\n                             ?m8 n ll a aa b m, h, v)\n                            \\<in> Exec \\<and>\n                            max n m =\n                            max (?n6 n ll a aa b m) (?m8 n ll a aa b m)", "apply (rule, rule, rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n ll a aa b m.\n       \\<lbrakk>k = Suc (max n m);\n        (M, l, (os, S, H), n, ll, a, aa, b) \\<in> Step;\n        (M, ll, (a, aa, b), m, h, v) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> (M, l, (os, S, H), ?n6 n ll a aa b m,\n                          ?ll16 n ll a aa b m, ?a10 n ll a aa b m,\n                          ?a12 n ll a aa b m, ?b14 n ll a aa b m)\n                         \\<in> Step\n 2. \\<And>n ll a aa b m.\n       \\<lbrakk>k = Suc (max n m);\n        (M, l, (os, S, H), n, ll, a, aa, b) \\<in> Step;\n        (M, ll, (a, aa, b), m, h, v) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> (M, ?ll16 n ll a aa b m,\n                          (?a10 n ll a aa b m, ?a12 n ll a aa b m,\n                           ?b14 n ll a aa b m),\n                          ?m8 n ll a aa b m, h, v)\n                         \\<in> Exec \\<and>\n                         max n m =\n                         max (?n6 n ll a aa b m) (?m8 n ll a aa b m)", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ll a aa b m.\n       \\<lbrakk>k = Suc (max n m);\n        (M, l, (os, S, H), n, ll, a, aa, b) \\<in> Step;\n        (M, ll, (a, aa, b), m, h, v) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> (M, ll, (a, aa, b), ?m8 n ll a aa b m, h, v)\n                         \\<in> Exec \\<and>\n                         max n m = max n (?m8 n ll a aa b m)", "apply (rule, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ll a aa b m.\n       \\<lbrakk>k = Suc (max n m);\n        (M, l, (os, S, H), n, ll, a, aa, b) \\<in> Step;\n        (M, ll, (a, aa, b), m, h, v) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max n m = max n m", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma InstrElimNext:\n \"\\<lbrakk>(M, l, s, n, ll, t) \\<in> Step;\n   get_ins M l = Some I;\n   I = const c \\<or> I = dup \\<or> I = pop \\<or> I = swap \\<or> I = load x \\<or>\n   I = store x \\<or> I = binop f \\<or> I = unop g \\<or> I = new d \\<or>\n   I = getfield d F \\<or> I = putfield d F \\<or> I = checkcast d\\<rbrakk>\n  \\<Longrightarrow> ll = l+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, s, n, ll, t) \\<in> Step; get_ins M l = Some I;\n     I = const c \\<or>\n     I = dup \\<or>\n     I = pop \\<or>\n     I = swap \\<or>\n     I = load x \\<or>\n     I = store x \\<or>\n     I = binop f \\<or>\n     I = unop g \\<or>\n     I = new d \\<or>\n     I = getfield d F \\<or> I = putfield d F \\<or> I = checkcast d\\<rbrakk>\n    \\<Longrightarrow> ll = l + 1", "apply (drule eval_cases, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>goto ll = I;\n     I = const c \\<or>\n     I = dup \\<or>\n     I = pop \\<or>\n     I = swap \\<or>\n     I = load x \\<or>\n     I = store x \\<or>\n     I = binop f \\<or>\n     I = unop g \\<or>\n     I = new d \\<or>\n     I = getfield d F \\<or> I = putfield d F \\<or> I = checkcast d;\n     n = Suc 0; t = s; get_ins M l = Some I\\<rbrakk>\n    \\<Longrightarrow> ll = l + 1\n 2. \\<And>os sa h.\n       \\<lbrakk>iftrue ll = I;\n        I = const c \\<or>\n        I = dup \\<or>\n        I = pop \\<or>\n        I = swap \\<or>\n        I = load x \\<or>\n        I = store x \\<or>\n        I = binop f \\<or>\n        I = unop g \\<or>\n        I = new d \\<or>\n        I = getfield d F \\<or> I = putfield d F \\<or> I = checkcast d;\n        s = (TRUE # os, sa, h); n = Suc 0; t = (os, sa, h);\n        get_ins M l = Some I\\<rbrakk>\n       \\<Longrightarrow> ll = l + 1", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>os sa h.\n       \\<lbrakk>iftrue ll = I;\n        I = const c \\<or>\n        I = dup \\<or>\n        I = pop \\<or>\n        I = swap \\<or>\n        I = load x \\<or>\n        I = store x \\<or>\n        I = binop f \\<or>\n        I = unop g \\<or>\n        I = new d \\<or>\n        I = getfield d F \\<or> I = putfield d F \\<or> I = checkcast d;\n        s = (TRUE # os, sa, h); n = Suc 0; t = (os, sa, h);\n        get_ins M l = Some I\\<rbrakk>\n       \\<Longrightarrow> ll = l + 1", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "text\\<open>By induction on the derivation system one can show\ndeterminism.\\<close>"], ["", "(*<*)"], ["", "lemma StepExec_determ_Aux[rule_format]:\n\"(\\<forall> n1 l M s l1 t . n1 \\<le> n \\<longrightarrow> (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n       (\\<forall> n2 l2 r. (M,l,s,n2,l2,r):Step \\<longrightarrow> (n1=n2 \\<and> t=r \\<and> l1=l2))) \\<and>\n (\\<forall> n1 l M s h v . n1 \\<le> n \\<longrightarrow> (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n      (\\<forall> n2 k w . (M,l,s,n2,k,w):Exec \\<longrightarrow> (n1=n2 \\<and> h=k \\<and> v=w)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n1 l M s l1 t.\n        n1 \\<le> n \\<longrightarrow>\n        (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n        (\\<forall>n2 l2 r.\n            (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n            n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n    (\\<forall>n1 l M s h v.\n        n1 \\<le> n \\<longrightarrow>\n        (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n        (\\<forall>n2 k w.\n            (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n            n1 = n2 \\<and> h = k \\<and> v = w))", "supply [[simproc del: defined_all]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n1 l M s l1 t.\n        n1 \\<le> n \\<longrightarrow>\n        (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n        (\\<forall>n2 l2 r.\n            (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n            n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n    (\\<forall>n1 l M s h v.\n        n1 \\<le> n \\<longrightarrow>\n        (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n        (\\<forall>n2 k w.\n            (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n            n1 = n2 \\<and> h = k \\<and> v = w))", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<forall>n1 l M s l1 t.\n        n1 \\<le> 0 \\<longrightarrow>\n        (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n        (\\<forall>n2 l2 r.\n            (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n            n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n    (\\<forall>n1 l M s h v.\n        n1 \\<le> 0 \\<longrightarrow>\n        (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n        (\\<forall>n2 k w.\n            (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n            n1 = n2 \\<and> h = k \\<and> v = w))\n 2. \\<And>n.\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w)) \\<Longrightarrow>\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<forall>l a aa b ab ac ba l1 ad ae bb.\n        ((a, aa, b), l, (ab, ac, ba), 0, l1, ad, ae, bb)\n        \\<in> Step \\<longrightarrow>\n        (\\<forall>n2 l2 af ag bc.\n            ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n            \\<in> Step \\<longrightarrow>\n            n2 = 0 \\<and>\n            ad = af \\<and> ae = ag \\<and> bb = bc \\<and> l1 = l2)) \\<and>\n    (\\<forall>l a aa b ab ac ba h v.\n        ((a, aa, b), l, (ab, ac, ba), 0, h, v) \\<in> Exec \\<longrightarrow>\n        (\\<forall>n2 k w.\n            ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n            \\<in> Exec \\<longrightarrow>\n            n2 = 0 \\<and> h = k \\<and> v = w))\n 2. \\<And>n.\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w)) \\<Longrightarrow>\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>l a aa b ab ac ba l1 ad ae bb.\n       ((a, aa, b), l, (ab, ac, ba), 0, l1, ad, ae, bb)\n       \\<in> Step \\<longrightarrow>\n       (\\<forall>n2 l2 af ag bc.\n           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n           \\<in> Step \\<longrightarrow>\n           n2 = 0 \\<and>\n           ad = af \\<and> ae = ag \\<and> bb = bc \\<and> l1 = l2)\n 2. \\<forall>l a aa b ab ac ba h v.\n       ((a, aa, b), l, (ab, ac, ba), 0, h, v) \\<in> Exec \\<longrightarrow>\n       (\\<forall>n2 k w.\n           ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n           \\<in> Exec \\<longrightarrow>\n           n2 = 0 \\<and> h = k \\<and> v = w)\n 3. \\<And>n.\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w)) \\<Longrightarrow>\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w))", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc.\n       \\<lbrakk>((a, aa, b), l, (ab, ac, ba), 0, l1, ad, ae, bb) \\<in> Step;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n        \\<in> Step\\<rbrakk>\n       \\<Longrightarrow> n2 = 0 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<forall>l a aa b ab ac ba h v.\n       ((a, aa, b), l, (ab, ac, ba), 0, h, v) \\<in> Exec \\<longrightarrow>\n       (\\<forall>n2 k w.\n           ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n           \\<in> Exec \\<longrightarrow>\n           n2 = 0 \\<and> h = k \\<and> v = w)\n 3. \\<And>n.\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w)) \\<Longrightarrow>\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w))", "apply (drule no_zero_height_Step_derivs1, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>l a aa b ab ac ba h v.\n       ((a, aa, b), l, (ab, ac, ba), 0, h, v) \\<in> Exec \\<longrightarrow>\n       (\\<forall>n2 k w.\n           ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n           \\<in> Exec \\<longrightarrow>\n           n2 = 0 \\<and> h = k \\<and> v = w)\n 2. \\<And>n.\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w)) \\<Longrightarrow>\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w))", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l a aa b ab ac ba h v n2 k w.\n       \\<lbrakk>((a, aa, b), l, (ab, ac, ba), 0, h, v) \\<in> Exec;\n        ((a, aa, b), l, (ab, ac, ba), n2, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> n2 = 0 \\<and> h = k \\<and> v = w\n 2. \\<And>n.\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w)) \\<Longrightarrow>\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w))", "apply (drule no_zero_height_Exec_derivs1, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w)) \\<Longrightarrow>\n       (\\<forall>n1 l M s l1 t.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n           (\\<forall>n2 l2 r.\n               (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n               n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n       (\\<forall>n1 l M s h v.\n           n1 \\<le> Suc n \\<longrightarrow>\n           (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n           (\\<forall>n2 k w.\n               (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n               n1 = n2 \\<and> h = k \\<and> v = w))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>n1\\<le>Suc n.\n                             \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                                ((a, aa, b), l, (ab, ac, ba), n1, l1, ad,\n                                 ae, bb)\n                                \\<in> Step \\<longrightarrow>\n                                (\\<forall>n2 l2 af ag bc.\n                                    ((a, aa, b), l, (ab, ac, ba), n2, l2,\n                                     af, ag, bc)\n                                    \\<in> Step \\<longrightarrow>\n                                    n1 = n2 \\<and>\n                                    ad = af \\<and>\n                                    ae = ag \\<and>\n                                    bb = bc \\<and> l1 = l2)) \\<and>\n                         (\\<forall>n1\\<le>Suc n.\n                             \\<forall>l a aa b ab ac ba h v.\n                                ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                                \\<in> Exec \\<longrightarrow>\n                                (\\<forall>n2 k w.\n                                    ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                    \\<in> Exec \\<longrightarrow>\n                                    n1 = n2 \\<and> h = k \\<and> v = w))", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                               ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae,\n                                bb)\n                               \\<in> Step \\<longrightarrow>\n                               (\\<forall>n2 l2 af ag bc.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, l2, af,\n                                    ag, bc)\n                                   \\<in> Step \\<longrightarrow>\n                                   n1 = n2 \\<and>\n                                   ad = af \\<and>\n                                   ae = ag \\<and> bb = bc \\<and> l1 = l2)\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb) \\<in> Step;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n        \\<in> Step\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (erule Step.cases)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la v NEXT os s\n       h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (const v);\n        NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT v os s\n       h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some dup;\n        NEXT = (v # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT os s h\n       ll v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some pop;\n        NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n        Flds v NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n         n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n         get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n         Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 17 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (os, s, h), n2, l2, af, ag, bc) \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (const v)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT v os s\n       h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some dup;\n        NEXT = (v # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT os s h\n       ll v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some pop;\n        NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n        Flds v NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n         n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n         get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n         Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 17 subgoals...", "apply (drule ConstElim1)"], ["proof (prove)\ngoal (18 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (const v)\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (const\n                            (?v137 n n2 l2 af ag bc ah ai bd la v os s h))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (const v);\n        n2 = Suc 0 \\<and>\n        (af, ag, bc) =\n        (?v137 n n2 l2 af ag bc ah ai bd la v os s h # os, s, h) \\<and>\n        l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT v os s\n       h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some dup;\n        NEXT = (v # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT os s h\n       ll v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some pop;\n        NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj\n        ah h NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n         (ad, ae, bb) = NEXT; get_ins M la = Some (new d);\n         newobj = (d, emp); ah = nextLoc h;\n         NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n         ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 18 subgoals...", "apply simp"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (const v);\n        n2 = Suc 0 \\<and>\n        (af, ag, bc) = (v # os, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT v os s\n       h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some dup;\n        NEXT = (v # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT os s h\n       ll v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some pop;\n        NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n        Flds v NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n         n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n         get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n         Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 17 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT v os s\n       h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some dup;\n        NEXT = (v # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT os s h\n       ll v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some pop;\n        NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n        Flds newobj v NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la;\n         (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n         (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n         h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n         NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 16 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (v # os, s, h), n2, l2, af, ag, bc) \\<in> Step;\n        get_ins (ah, ai, bd) la = Some dup\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT os s h\n       ll v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some pop;\n        NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n        Flds newobj v NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la;\n         (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n         (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n         h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n         NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 16 subgoals...", "apply (drule DupElim1)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some dup\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la = Some dup\n 2. \\<And>n n2 l2 af ag bc ah ai bd la v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some dup;\n        \\<exists>va ops.\n           v # os = va # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (va # v # os, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT os s h\n       ll v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some pop;\n        NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n        Flds v NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n         n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n         get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n         Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 17 subgoals...", "apply simp"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some dup;\n        \\<exists>va ops.\n           v # os = va # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (va # v # os, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT os s h\n       ll v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some pop;\n        NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n        Flds newobj v NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la;\n         (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n         (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n         h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n         NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 16 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT os s h\n       ll v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some pop;\n        NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah\n        Flds NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n         n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n         get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n         NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 15 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la os s h v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (v # os, s, h), n2, l2, af, ag, bc) \\<in> Step;\n        get_ins (ah, ai, bd) la = Some pop\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah\n        Flds NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n         n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n         get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n         NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 15 subgoals...", "apply (drule PopElim1)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la os s h v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some pop\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la = Some pop\n 2. \\<And>n n2 l2 af ag bc ah ai bd la os s h v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some pop;\n        \\<exists>va ops.\n           v # os = va # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (ops, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n        Flds newobj v NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la;\n         (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n         (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n         h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n         NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 16 subgoals...", "apply simp"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la os s h v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some pop;\n        \\<exists>va ops.\n           v # os = va # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (ops, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah\n        Flds NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n         n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n         get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n         NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 15 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la NEXT w v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some swap;\n        NEXT = (w # v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n         (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 14 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la w v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (v # w # os, s, h), n2, l2, af, ag, bc)\n        \\<in> Step;\n        get_ins (ah, ai, bd) la = Some swap\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         w # v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n         (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 14 subgoals...", "apply (drule SwapElim1)"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la w v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some swap\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la = Some swap\n 2. \\<And>n n2 l2 af ag bc ah ai bd la w v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some swap;\n        \\<exists>va wa ops.\n           v # w # os = va # wa # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (wa # va # ops, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         w # v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah\n        Flds NEXT os s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n         n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n         get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n         NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 15 subgoals...", "apply simp"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la w v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some swap;\n        \\<exists>va wa ops.\n           v # w # os = va # wa # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (wa # va # ops, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         w # v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n         (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 14 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x s v NEXT\n       os h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (load x);\n        s\\<down>x = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n        s h.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n         l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n         NEXT = (os, s, h)\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 13 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la x s v os h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (os, s, h), n2, l2, af, ag, bc) \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (load x); s\\<down>x = Some v\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n        s h.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n         l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n         NEXT = (os, s, h)\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 13 subgoals...", "apply (drule LoadElim1)"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la x s v os h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (load x); s\\<down>x = Some v\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (load\n                            (?x270 n n2 l2 af ag bc ah ai bd la x s v os h))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la x s v os h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (load x); s\\<down>x = Some v;\n        \\<exists>va.\n           s\\<down>?x270 n n2 l2 af ag bc ah ai bd la x s v os h =\n           Some va \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (va # os, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n         (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 14 subgoals...", "apply simp"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la x s v os h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (load x); s\\<down>x = Some v;\n        \\<exists>v.\n           s\\<down>x = Some v \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (v # os, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n        s h.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n         l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n         NEXT = (os, s, h)\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 13 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la x NEXT os s\n       v h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (store x);\n        NEXT = (os, s[x\\<mapsto>v], h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n        os s h ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n         l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n         v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 12 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la x os s v h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (v # os, s, h), n2, l2, af, ag, bc) \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (store x)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s[x\\<mapsto>v] = ag \\<and>\n                         h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n        os s h ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n         l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n         v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 12 subgoals...", "apply (drule StoreElim1)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la x os s v h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (store x)\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (store\n                            (?x304 n n2 l2 af ag bc ah ai bd la x os s v h))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la x os s v h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (store x);\n        \\<exists>va ops.\n           v # os = va # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) =\n           (ops,\n            s[?x304 n n2 l2 af ag bc ah ai bd la x os s v h\\<mapsto>va],\n            h) \\<and>\n           l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s[x\\<mapsto>v] = ag \\<and>\n                         h = bc \\<and> la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n        s h.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n         l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n         NEXT = (os, s, h)\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 13 subgoals...", "apply simp"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la x os s v h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (store x);\n        \\<exists>va ops.\n           v # os = va # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (ops, s[x\\<mapsto>va], h) \\<and>\n           l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s[x\\<mapsto>v] = ag \\<and>\n                         h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n        os s h ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n         l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n         v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 12 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v w\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # w # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (binop f);\n        NEXT = (f v w # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n        code l0 S h na hh v ops os NEXT s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n         l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n         mbody_is C m (par, code, l0);\n         ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n         (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n         ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 11 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la f v w os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (v # w # os, s, h), n2, l2, af, ag, bc)\n        \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (binop f)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         f v w # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n        code l0 S h na hh v ops os NEXT s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n         l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n         mbody_is C m (par, code, l0);\n         ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n         (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n         ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 11 subgoals...", "apply (drule BinopElim1)"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la f v w os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (binop f)\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (binop\n                            (?f338 n n2 l2 af ag bc ah ai bd la f v w os s\n                              h))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la f v w os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (binop f);\n        \\<exists>va wa ops.\n           v # w # os = va # wa # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) =\n           (?f338 n n2 l2 af ag bc ah ai bd la f v w os s h va wa # ops, s,\n            h) \\<and>\n           l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         f v w # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n        os s h ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n         l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n         v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 12 subgoals...", "apply simp"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la f v w os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (binop f);\n        \\<exists>va wa ops.\n           v # w # os = va # wa # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (f va wa # ops, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         f v w # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n        code l0 S h na hh v ops os NEXT s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n         l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n         mbody_is C m (par, code, l0);\n         ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n         (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n         ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 11 subgoals...", "apply clarsimp"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la f NEXT v os\n       s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (unop f);\n        NEXT = (f v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                             \\<forall>l a aa b ab ac ba h v.\n                                ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                                \\<in> Exec \\<longrightarrow>\n                                (\\<forall>n2 k w.\n                                    ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                    \\<in> Exec \\<longrightarrow>\n                                    n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la f v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (v # os, s, h), n2, l2, af, ag, bc) \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (unop f)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         f v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                             \\<forall>l a aa b ab ac ba h v.\n                                ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                                \\<in> Exec \\<longrightarrow>\n                                (\\<forall>n2 k w.\n                                    ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                    \\<in> Exec \\<longrightarrow>\n                                    n1 = n2 \\<and> h = k \\<and> v = w)", "apply (drule UnopElim1)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la f v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (unop f)\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (unop\n                            (?f372 n n2 l2 af ag bc ah ai bd la f v os s h))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la f v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (unop f);\n        \\<exists>va ops.\n           v # os = va # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) =\n           (?f372 n n2 l2 af ag bc ah ai bd la f v os s h va # ops, s,\n            h) \\<and>\n           l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         f v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n        code l0 S h na hh v ops os NEXT s ll.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w);\n         n1 \\<le> Suc n;\n         ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n         (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n         l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n         mbody_is C m (par, code, l0);\n         ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n         (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n         ll = la + 1\\<rbrakk>\n        \\<Longrightarrow> n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2\nA total of 11 subgoals...", "apply simp"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la f v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (unop f);\n        \\<exists>va ops.\n           v # os = va # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (f va # ops, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         f v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                             \\<forall>l a aa b ab ac ba h v.\n                                ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                                \\<in> Exec \\<longrightarrow>\n                                (\\<forall>n2 k w.\n                                    ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                    \\<in> Exec \\<longrightarrow>\n                                    n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d newobj ah\n       h NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (new d); newobj = (d, emp);\n        ah = nextLoc h;\n        NEXT = (RVal (Loc ah) # os, s, h[ah\\<mapsto>newobj]);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d h os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (os, s, h), n2, l2, af, ag, bc) \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (new d)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         RVal (Loc (nextLoc h)) # os = af \\<and>\n                         s = ag \\<and>\n                         h[nextLoc h\\<mapsto>(d, emp)] = bc \\<and>\n                         la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (drule NewElim1)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d h os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (new d)\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (new (?d411 n n2 l2 af ag bc ah ai bd la d h os\n                                 s))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la d h os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (new d);\n        \\<exists>a.\n           a = nextLoc h \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) =\n           (RVal (Loc a) # os, s,\n            h[a\\<mapsto>(?d411 n n2 l2 af ag bc ah ai bd la d h os s,\n                         emp)]) \\<and>\n           l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         RVal (Loc (nextLoc h)) # os = af \\<and>\n                         s = ag \\<and>\n                         h[nextLoc h\\<mapsto>(d, emp)] = bc \\<and>\n                         la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 10. \\<And>n.\n        \\<lbrakk>\\<forall>n1\\<le>n.\n                    \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                       ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                       \\<in> Step \\<longrightarrow>\n                       (\\<forall>n2 l2 af ag bc.\n                           ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                           \\<in> Step \\<longrightarrow>\n                           n1 = n2 \\<and>\n                           ad = af \\<and>\n                           ae = ag \\<and> bb = bc \\<and> l1 = l2);\n         \\<forall>n1\\<le>n.\n            \\<forall>l a aa b ab ac ba h v.\n               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n               \\<in> Exec \\<longrightarrow>\n               (\\<forall>n2 k w.\n                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                   \\<in> Exec \\<longrightarrow>\n                   n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n        \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                             \\<forall>l a aa b ab ac ba h v.\n                                ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                                \\<in> Exec \\<longrightarrow>\n                                (\\<forall>n2 k w.\n                                    ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                    \\<in> Exec \\<longrightarrow>\n                                    n1 = n2 \\<and> h = k \\<and> v = w)", "apply simp"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d h os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (new d);\n        \\<exists>a.\n           a = nextLoc h \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) =\n           (RVal (Loc a) # os, s, h[a\\<mapsto>(d, emp)]) \\<and>\n           l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         RVal (Loc (nextLoc h)) # os = af \\<and>\n                         s = ag \\<and>\n                         h[nextLoc h\\<mapsto>(d, emp)] = bc \\<and>\n                         la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (getfield d F); h\\<down>ah = Some (d, Flds);\n        Flds\\<down>F = Some v; NEXT = (v # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d F h aha Flds v os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (RVal (Loc aha) # os, s, h), n2, l2, af, ag, bc)\n        \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (getfield d F);\n        h\\<down>aha = Some (d, Flds); Flds\\<down>F = Some v\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (drule GetElim1)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d F h aha Flds v os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (getfield d F);\n        h\\<down>aha = Some (d, Flds); Flds\\<down>F = Some v\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (getfield\n                            (?d445 n n2 l2 af ag bc ah ai bd la d F h aha\n                              Flds v os s)\n                            (?F445 n n2 l2 af ag bc ah ai bd la d F h aha\n                              Flds v os s))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la d F h aha Flds v os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (getfield d F);\n        h\\<down>aha = Some (d, Flds); Flds\\<down>F = Some v;\n        \\<exists>a Fldsa va ops.\n           h\\<down>a =\n           Some\n            (?d445 n n2 l2 af ag bc ah ai bd la d F h aha Flds v os s,\n             Fldsa) \\<and>\n           Fldsa\\<down>?F445 n n2 l2 af ag bc ah ai bd la d F h aha Flds v\n                        os s =\n           Some va \\<and>\n           RVal (Loc aha) # os = RVal (Loc a) # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (va # ops, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 9. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply fastforce"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d F h aha Flds v os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (getfield d F);\n        h\\<down>aha = Some (d, Flds); Flds\\<down>F = Some v;\n        \\<exists>a Flds v ops.\n           h\\<down>a = Some (d, Flds) \\<and>\n           Flds\\<down>F = Some v \\<and>\n           RVal (Loc aha) # os = RVal (Loc a) # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (v # ops, s, h) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d F h ah\n       Flds newobj v NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la;\n        (ab, ac, ba) = (v # RVal (Loc ah) # os, s, h); n1 = 1; l1 = ll;\n        (ad, ae, bb) = NEXT; get_ins M la = Some (putfield d F);\n        h\\<down>ah = Some (d, Flds); newobj = (d, Flds[F\\<mapsto>v]);\n        NEXT = (os, s, h[ah\\<mapsto>newobj]); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d F h aha Flds v os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (v # RVal (Loc aha) # os, s, h), n2, l2, af, ag,\n         bc)\n        \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (putfield d F);\n        h\\<down>aha = Some (d, Flds)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s = ag \\<and>\n                         h[aha\\<mapsto>(d, Flds[F\\<mapsto>v])] = bc \\<and>\n                         la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (drule PutElim1)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d F h aha Flds v os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (putfield d F);\n        h\\<down>aha = Some (d, Flds)\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (putfield\n                            (?d505 n n2 l2 af ag bc ah ai bd la d F h aha\n                              Flds v os s)\n                            (?F505 n n2 l2 af ag bc ah ai bd la d F h aha\n                              Flds v os s))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la d F h aha Flds v os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (putfield d F);\n        h\\<down>aha = Some (d, Flds);\n        \\<exists>a Fldsa va ops.\n           h\\<down>a =\n           Some\n            (?d505 n n2 l2 af ag bc ah ai bd la d F h aha Flds v os s,\n             Fldsa) \\<and>\n           v # RVal (Loc aha) # os = va # RVal (Loc a) # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) =\n           (ops, s,\n            h[a\\<mapsto>(?d505 n n2 l2 af ag bc ah ai bd la d F h aha Flds v\n                          os s,\n                         Fldsa[?F505 n n2 l2 af ag bc ah ai bd la d F h aha\n                                Flds v os s\\<mapsto>va])]) \\<and>\n           l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s = ag \\<and>\n                         h[aha\\<mapsto>(d, Flds[F\\<mapsto>v])] = bc \\<and>\n                         la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 8. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply fastforce"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d F h aha Flds v os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (putfield d F);\n        h\\<down>aha = Some (d, Flds);\n        \\<exists>a Flds va ops.\n           h\\<down>a = Some (d, Flds) \\<and>\n           v # RVal (Loc aha) # os = va # RVal (Loc a) # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) =\n           (ops, s, h[a\\<mapsto>(d, Flds[F\\<mapsto>va])]) \\<and>\n           l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s = ag \\<and>\n                         h[aha\\<mapsto>(d, Flds[F\\<mapsto>v])] = bc \\<and>\n                         la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la d h ah Flds\n       NEXT os s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (RVal (Loc ah) # os, s, h);\n        n1 = 1; l1 = ll; (ad, ae, bb) = NEXT;\n        get_ins M la = Some (checkcast d); h\\<down>ah = Some (d, Flds);\n        NEXT = (RVal (Loc ah) # os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d h aha Flds os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (RVal (Loc aha) # os, s, h), n2, l2, af, ag, bc)\n        \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (checkcast d);\n        h\\<down>aha = Some (d, Flds)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         RVal (Loc aha) # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (drule CastElim1)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d h aha Flds os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (checkcast d);\n        h\\<down>aha = Some (d, Flds)\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (checkcast\n                            (?d543 n n2 l2 af ag bc ah ai bd la d h aha Flds\n                              os s))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la d h aha Flds os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (checkcast d);\n        h\\<down>aha = Some (d, Flds);\n        \\<exists>a Fldsa ops.\n           h\\<down>a =\n           Some\n            (?d543 n n2 l2 af ag bc ah ai bd la d h aha Flds os s,\n             Fldsa) \\<and>\n           RVal (Loc aha) # os = RVal (Loc a) # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (RVal (Loc a) # ops, s, h) \\<and>\n           l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         RVal (Loc aha) # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 7. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply simp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la d h aha Flds os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (checkcast d);\n        h\\<down>aha = Some (d, Flds);\n        \\<exists>a Flds ops.\n           h\\<down>a = Some (d, Flds) \\<and>\n           RVal (Loc aha) # os = RVal (Loc a) # ops \\<and>\n           n2 = Suc 0 \\<and>\n           (af, ag, bc) = (RVal (Loc a) # ops, s, h) \\<and>\n           l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         RVal (Loc aha) # os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc S.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = S; n1 = 1; l1 = pc;\n        (ad, ae, bb) = S; get_ins M la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la pc aj ak be.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (aj, ak, be), n2, l2, af, ag, bc) \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         aj = af \\<and>\n                         ak = ag \\<and> be = bc \\<and> pc = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (drule GotoElim1)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la pc aj ak be.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (goto pc)\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (goto\n                            (?pc573 n n2 l2 af ag bc ah ai bd la pc aj ak\n                              be))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la pc aj ak be.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (goto pc);\n        n2 = Suc 0 \\<and>\n        (af, ag, bc) = (aj, ak, be) \\<and>\n        l2 = ?pc573 n n2 l2 af ag bc ah ai bd la pc aj ak be\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         aj = af \\<and>\n                         ak = ag \\<and> be = bc \\<and> pc = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 6. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la pc aj ak be.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (goto pc);\n        n2 = Suc 0 \\<and>\n        (af, ag, bc) = (aj, ak, be) \\<and> l2 = pc\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         aj = af \\<and>\n                         ak = ag \\<and> be = bc \\<and> pc = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc NEXT os\n       s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (TRUE # os, s, h); n1 = 1;\n        l1 = pc; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        NEXT = (os, s, h)\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la pc os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (TRUE # os, s, h), n2, l2, af, ag, bc)\n        \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (iftrue pc)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and> s = ag \\<and> h = bc \\<and> pc = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (drule IfElim1)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la pc os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (iftrue pc)\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (iftrue\n                            (?pc606 n n2 l2 af ag bc ah ai bd la pc os s h))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la pc os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (iftrue pc);\n        (\\<exists>ops.\n            TRUE # os = TRUE # ops \\<and>\n            n2 = Suc 0 \\<and>\n            (af, ag, bc) = (ops, s, h) \\<and>\n            l2 = ?pc606 n n2 l2 af ag bc ah ai bd la pc os s h) \\<or>\n        (\\<exists>v ops.\n            v \\<noteq> TRUE \\<and>\n            TRUE # os = v # ops \\<and>\n            n2 = Suc 0 \\<and>\n            (af, ag, bc) = (ops, s, h) \\<and> l2 = la + 1)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and> s = ag \\<and> h = bc \\<and> pc = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 5. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la pc os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (iftrue pc);\n        (\\<exists>ops.\n            TRUE # os = TRUE # ops \\<and>\n            n2 = Suc 0 \\<and>\n            (af, ag, bc) = (ops, s, h) \\<and> l2 = pc) \\<or>\n        (\\<exists>v ops.\n            v \\<noteq> TRUE \\<and>\n            TRUE # os = v # ops \\<and>\n            n2 = Suc 0 \\<and>\n            (af, ag, bc) = (ops, s, h) \\<and> l2 = la + 1)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and> s = ag \\<and> h = bc \\<and> pc = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la pc v NEXT\n       os s h ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (v # os, s, h); n1 = 1;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (iftrue pc);\n        v \\<noteq> TRUE; NEXT = (os, s, h); ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la pc v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ah, ai, bd), la, (v # os, s, h), n2, l2, af, ag, bc) \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (iftrue pc); v \\<noteq> TRUE\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (drule IfElim1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la pc v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (iftrue pc); v \\<noteq> TRUE\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (iftrue\n                            (?pc640 n n2 l2 af ag bc ah ai bd la pc v os s\n                              h))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la pc v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (iftrue pc); v \\<noteq> TRUE;\n        (\\<exists>ops.\n            v # os = TRUE # ops \\<and>\n            n2 = Suc 0 \\<and>\n            (af, ag, bc) = (ops, s, h) \\<and>\n            l2 = ?pc640 n n2 l2 af ag bc ah ai bd la pc v os s h) \\<or>\n        (\\<exists>va ops.\n            va \\<noteq> TRUE \\<and>\n            v # os = va # ops \\<and>\n            n2 = Suc 0 \\<and>\n            (af, ag, bc) = (ops, s, h) \\<and> l2 = la + 1)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 3. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 4. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la pc v os s h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ah, ai, bd) la = Some (iftrue pc); v \\<noteq> TRUE;\n        (\\<exists>ops.\n            v # os = TRUE # ops \\<and>\n            n2 = Suc 0 \\<and>\n            (af, ag, bc) = (ops, s, h) \\<and> l2 = pc) \\<or>\n        (\\<exists>va ops.\n            va \\<noteq> TRUE \\<and>\n            v # os = va # ops \\<and>\n            n2 = Suc 0 \\<and>\n            (af, ag, bc) = (ops, s, h) \\<and> l2 = la + 1)\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and>\n                         os = af \\<and>\n                         s = ag \\<and> h = bc \\<and> la + 1 = l2\n 2. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 3. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba l1 ad ae bb n2 l2 af ag bc M la C m par\n       code l0 S h na hh v ops os NEXT s ll.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n;\n        ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc) \\<in> Step;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (ops, s, h); n1 = Suc na;\n        l1 = ll; (ad, ae, bb) = NEXT; get_ins M la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; NEXT = (v # os, s, hh);\n        ll = la + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and>\n                         ad = af \\<and>\n                         ae = ag \\<and> bb = bc \\<and> l1 = l2\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la C m par code l0 S h na hh v ops os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        na \\<le> n;\n        ((ah, ai, bd), la, (ops, s, h), n2, l2, af, ag, bc) \\<in> Step;\n        get_ins (ah, ai, bd) la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame\\<rbrakk>\n       \\<Longrightarrow> Suc na = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> hh = bc \\<and> la + 1 = l2\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (drule InvokeElim1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la C m par code l0 S h na hh v ops os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        na \\<le> n; get_ins (ah, ai, bd) la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame\\<rbrakk>\n       \\<Longrightarrow> get_ins (ah, ai, bd) la =\n                         Some\n                          (invokeS\n                            (?C674 n n2 l2 af ag bc ah ai bd la C m par code\n                              l0 S h na hh v ops os s)\n                            (?m674 n n2 l2 af ag bc ah ai bd la C m par code\n                              l0 S h na hh v ops os s))\n 2. \\<And>n n2 l2 af ag bc ah ai bd la C m par code l0 S h na hh v ops os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        na \\<le> n; get_ins (ah, ai, bd) la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame;\n        \\<exists>codea l0a va opsa hha u k R para.\n           mbody_is\n            (?C674 n n2 l2 af ag bc ah ai bd la C m par code l0 S h na hh v\n              ops os s)\n            (?m674 n n2 l2 af ag bc ah ai bd la C m par code l0 S h na hh v\n              ops os s)\n            (para, codea, l0a) \\<and>\n           (ops, para, R, opsa) \\<in> Frame \\<and>\n           ((para, codea, l0a), l0a, ([], R, h), k, hha, va)\n           \\<in> Exec \\<and>\n           n2 = Suc k \\<and>\n           (af, ag, bc) = (va # opsa, s, hha) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc na = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> hh = bc \\<and> la + 1 = l2\n 3. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n n2 l2 af ag bc ah ai bd la C m par code l0 S h na hh v ops os s.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        na \\<le> n; get_ins (ah, ai, bd) la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame;\n        \\<exists>code l0 v opsa hh u k R par.\n           mbody_is C m (par, code, l0) \\<and>\n           (ops, par, R, opsa) \\<in> Frame \\<and>\n           ((par, code, l0), l0, ([], R, h), k, hh, v) \\<in> Exec \\<and>\n           n2 = Suc k \\<and>\n           (af, ag, bc) = (v # opsa, s, hh) \\<and> l2 = la + 1\\<rbrakk>\n       \\<Longrightarrow> Suc na = n2 \\<and>\n                         v # os = af \\<and>\n                         s = ag \\<and> hh = bc \\<and> la + 1 = l2\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n bc ah ai bd la C m par code l0 S h na hh v ops os codea l0a va\n       opsa k R para.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        na \\<le> n; get_ins (ah, ai, bd) la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; mbody_is C m (para, codea, l0a);\n        (ops, para, R, opsa) \\<in> Frame;\n        ((para, codea, l0a), l0a, ([], R, h), k, bc, va) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> na = k \\<and>\n                         v = va \\<and> os = opsa \\<and> hh = bc\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (erule thin_rl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n bc ah ai bd la C m par code l0 S h na hh v ops os codea l0a va\n       opsa k R para.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba h v.\n                      ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                      \\<in> Exec \\<longrightarrow>\n                      (\\<forall>n2 k w.\n                          ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                          \\<in> Exec \\<longrightarrow>\n                          n1 = n2 \\<and> h = k \\<and> v = w);\n        na \\<le> n; get_ins (ah, ai, bd) la = Some (invokeS C m);\n        mbody_is C m (par, code, l0);\n        ((par, code, l0), l0, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, par, S, os) \\<in> Frame; mbody_is C m (para, codea, l0a);\n        (ops, para, R, opsa) \\<in> Frame;\n        ((para, codea, l0a), l0a, ([], R, h), k, bc, va) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> na = k \\<and>\n                         v = va \\<and> os = opsa \\<and> hh = bc\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (simp add: mbody_is_def, clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n bc ah ai bd la C m S h na hh v ops os codea l0a va opsa k R para\n       CD.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba h v.\n                      ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                      \\<in> Exec \\<longrightarrow>\n                      (\\<forall>n2 k w.\n                          ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                          \\<in> Exec \\<longrightarrow>\n                          n1 = n2 \\<and> h = k \\<and> v = w);\n        na \\<le> n; get_ins (ah, ai, bd) la = Some (invokeS C m);\n        ((para, codea, l0a), l0a, ([], S, h), na, hh, v) \\<in> Exec;\n        (ops, para, S, os) \\<in> Frame; (ops, para, R, opsa) \\<in> Frame;\n        ((para, codea, l0a), l0a, ([], R, h), k, bc, va) \\<in> Exec;\n        CD\\<down>m = Some (para, codea, l0a); P\\<down>C = Some CD\\<rbrakk>\n       \\<Longrightarrow> na = k \\<and>\n                         v = va \\<and> os = opsa \\<and> hh = bc\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply (drule Frame_deterministic, assumption, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n1\\<le>Suc n.\n                            \\<forall>l a aa b ab ac ba h v.\n                               ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                               \\<in> Exec \\<longrightarrow>\n                               (\\<forall>n2 k w.\n                                   ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                                   \\<in> Exec \\<longrightarrow>\n                                   n1 = n2 \\<and> h = k \\<and> v = w)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n n1 l a aa b ab ac ba h v n2 k w.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n; ((a, aa, b), l, (ab, ac, ba), n1, h, v) \\<in> Exec;\n        ((a, aa, b), l, (ab, ac, ba), n2, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and> h = k \\<and> v = w", "apply (erule Exec.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n n1 l a aa b ab ac ba h v n2 k w M la va os s ha.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n; ((a, aa, b), l, (ab, ac, ba), n2, k, w) \\<in> Exec;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = (va # os, s, ha); n1 = 1;\n        h = ha; v = va; get_ins M la = Some vreturn\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and> h = k \\<and> v = w\n 2. \\<And>n n1 l a aa b ab ac ba h v n2 k w M la s na ll t m ha va ka.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n; ((a, aa, b), l, (ab, ac, ba), n2, k, w) \\<in> Exec;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = s; n1 = ka; h = ha; v = va;\n        (M, la, s, na, ll, t) \\<in> Step; (M, ll, t, m, ha, va) \\<in> Exec;\n        ka = max na m + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and> h = k \\<and> v = w", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n n2 k w ad ae bb la va os s ha.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (va # os, s, ha), n2, k, w) \\<in> Exec;\n        get_ins (ad, ae, bb) la = Some vreturn\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and> ha = k \\<and> va = w\n 2. \\<And>n n1 l a aa b ab ac ba h v n2 k w M la s na ll t m ha va ka.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n; ((a, aa, b), l, (ab, ac, ba), n2, k, w) \\<in> Exec;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = s; n1 = ka; h = ha; v = va;\n        (M, la, s, na, ll, t) \\<in> Step; (M, ll, t, m, ha, va) \\<in> Exec;\n        ka = max na m + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and> h = k \\<and> v = w", "apply (erule Exec.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n n2 k w ad ae bb la va os s ha M l v osa sa h.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ad, ae, bb) la = Some vreturn; (ad, ae, bb) = M; la = l;\n        (va # os, s, ha) = (v # osa, sa, h); n2 = 1; k = h; w = v;\n        get_ins M l = Some vreturn\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and> ha = k \\<and> va = w\n 2. \\<And>n n2 k w ad ae bb la va os s ha M l sa na ll t m h v ka.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ad, ae, bb) la = Some vreturn; (ad, ae, bb) = M; la = l;\n        (va # os, s, ha) = sa; n2 = ka; k = h; w = v;\n        (M, l, sa, na, ll, t) \\<in> Step; (M, ll, t, m, h, v) \\<in> Exec;\n        ka = max na m + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and> ha = k \\<and> va = w\n 3. \\<And>n n1 l a aa b ab ac ba h v n2 k w M la s na ll t m ha va ka.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n; ((a, aa, b), l, (ab, ac, ba), n2, k, w) \\<in> Exec;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = s; n1 = ka; h = ha; v = va;\n        (M, la, s, na, ll, t) \\<in> Step; (M, ll, t, m, ha, va) \\<in> Exec;\n        ka = max na m + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and> h = k \\<and> v = w", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n n2 k w ad ae bb la va os s ha M l sa na ll t m h v ka.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (ad, ae, bb) la = Some vreturn; (ad, ae, bb) = M; la = l;\n        (va # os, s, ha) = sa; n2 = ka; k = h; w = v;\n        (M, l, sa, na, ll, t) \\<in> Step; (M, ll, t, m, h, v) \\<in> Exec;\n        ka = max na m + 1\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = n2 \\<and> ha = k \\<and> va = w\n 2. \\<And>n n1 l a aa b ab ac ba h v n2 k w M la s na ll t m ha va ka.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n; ((a, aa, b), l, (ab, ac, ba), n2, k, w) \\<in> Exec;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = s; n1 = ka; h = ha; v = va;\n        (M, la, s, na, ll, t) \\<in> Step; (M, ll, t, m, ha, va) \\<in> Exec;\n        ka = max na m + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and> h = k \\<and> v = w", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n va os a aa b l ac ba na ll af ag bc m h v.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        get_ins (a, aa, b) l = Some vreturn;\n        ((a, aa, b), l, (va # os, ac, ba), na, ll, af, ag, bc) \\<in> Step;\n        ((a, aa, b), ll, (af, ag, bc), m, h, v) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> na = 0 \\<and> m = 0 \\<and> ba = h \\<and> va = v\n 2. \\<And>n n1 l a aa b ab ac ba h v n2 k w M la s na ll t m ha va ka.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n; ((a, aa, b), l, (ab, ac, ba), n2, k, w) \\<in> Exec;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = s; n1 = ka; h = ha; v = va;\n        (M, la, s, na, ll, t) \\<in> Step; (M, ll, t, m, ha, va) \\<in> Exec;\n        ka = max na m + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and> h = k \\<and> v = w", "apply (drule RetElim1, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n n1 l a aa b ab ac ba h v n2 k w M la s na ll t m ha va ka.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        n1 \\<le> Suc n; ((a, aa, b), l, (ab, ac, ba), n2, k, w) \\<in> Exec;\n        (a, aa, b) = M; l = la; (ab, ac, ba) = s; n1 = ka; h = ha; v = va;\n        (M, la, s, na, ll, t) \\<in> Step; (M, ll, t, m, ha, va) \\<in> Exec;\n        ka = max na m + 1\\<rbrakk>\n       \\<Longrightarrow> n1 = n2 \\<and> h = k \\<and> v = w", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n n2 k w ad ae bb la af ag bc na ll ah ai bd m ha va.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), n2, k, w) \\<in> Exec;\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> Suc (max na m) = n2 \\<and> ha = k \\<and> va = w", "apply (drule ExecElim1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n n2 k w ad ae bb la af ag bc na ll ah ai bd m ha va.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        get_ins (ad, ae, bb) la = Some vreturn \\<and>\n        (\\<exists>ops. af = w # ops \\<and> n2 = Suc 0 \\<and> k = bc) \\<or>\n        (\\<exists>n m t ll.\n            ((ad, ae, bb), la, (af, ag, bc), n, ll, t) \\<in> Step \\<and>\n            ((ad, ae, bb), ll, t, m, k, w) \\<in> Exec \\<and>\n            n2 = Suc (max n m))\\<rbrakk>\n       \\<Longrightarrow> Suc (max na m) = n2 \\<and> ha = k \\<and> va = w", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n n2 k w ad ae bb la af ag bc na ll ah ai bd m ha va.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        get_ins (ad, ae, bb) la = Some vreturn \\<and>\n        (\\<exists>ops. af = w # ops) \\<and> n2 = Suc 0 \\<and> k = bc \\<or>\n        (\\<exists>n m a aa b ll.\n            ((ad, ae, bb), la, (af, ag, bc), n, ll, a, aa, b)\n            \\<in> Step \\<and>\n            ((ad, ae, bb), ll, (a, aa, b), m, k, w) \\<in> Exec \\<and>\n            n2 = Suc (max n m))\\<rbrakk>\n       \\<Longrightarrow> Suc (max na m) = n2 \\<and> ha = k \\<and> va = w", "apply (erule disjE, clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n w ad ae bb la ag bc na ll ah ai bd m ha va ops.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (w # ops, ag, bc), na, ll, ah, ai, bd)\n        \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n; get_ins (ad, ae, bb) la = Some vreturn\\<rbrakk>\n       \\<Longrightarrow> na = 0 \\<and> m = 0 \\<and> ha = bc \\<and> va = w\n 2. \\<And>n n2 k w ad ae bb la af ag bc na ll ah ai bd m ha va.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        \\<exists>n m a aa b ll.\n           ((ad, ae, bb), la, (af, ag, bc), n, ll, a, aa, b)\n           \\<in> Step \\<and>\n           ((ad, ae, bb), ll, (a, aa, b), m, k, w) \\<in> Exec \\<and>\n           n2 = Suc (max n m)\\<rbrakk>\n       \\<Longrightarrow> Suc (max na m) = n2 \\<and> ha = k \\<and> va = w", "apply (drule RetElim1, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n n2 k w ad ae bb la af ag bc na ll ah ai bd m ha va.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        \\<exists>n m a aa b ll.\n           ((ad, ae, bb), la, (af, ag, bc), n, ll, a, aa, b)\n           \\<in> Step \\<and>\n           ((ad, ae, bb), ll, (a, aa, b), m, k, w) \\<in> Exec \\<and>\n           n2 = Suc (max n m)\\<rbrakk>\n       \\<Longrightarrow> Suc (max na m) = n2 \\<and> ha = k \\<and> va = w", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba l1 ad ae bb.\n                      ((a, aa, b), l, (ab, ac, ba), n1, l1, ad, ae, bb)\n                      \\<in> Step \\<longrightarrow>\n                      (\\<forall>n2 l2 af ag bc.\n                          ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                          \\<in> Step \\<longrightarrow>\n                          n1 = n2 \\<and>\n                          ad = af \\<and>\n                          ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=na in allE, rotate_tac -1, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>l a aa b ab ac ba l1 ad ae bb.\n                   ((a, aa, b), l, (ab, ac, ba), na, l1, ad, ae, bb)\n                   \\<in> Step \\<longrightarrow>\n                   (\\<forall>n2 l2 af ag bc.\n                       ((a, aa, b), l, (ab, ac, ba), n2, l2, af, ag, bc)\n                       \\<in> Step \\<longrightarrow>\n                       na = n2 \\<and>\n                       ad = af \\<and>\n                       ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=la in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>a aa b ab ac ba l1 ad ae bb.\n                   ((a, aa, b), la, (ab, ac, ba), na, l1, ad, ae, bb)\n                   \\<in> Step \\<longrightarrow>\n                   (\\<forall>n2 l2 af ag bc.\n                       ((a, aa, b), la, (ab, ac, ba), n2, l2, af, ag, bc)\n                       \\<in> Step \\<longrightarrow>\n                       na = n2 \\<and>\n                       ad = af \\<and>\n                       ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=ad in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>a b aa ab ba l1 ac ae bb.\n                   ((ad, a, b), la, (aa, ab, ba), na, l1, ac, ae, bb)\n                   \\<in> Step \\<longrightarrow>\n                   (\\<forall>n2 l2 af ag bc.\n                       ((ad, a, b), la, (aa, ab, ba), n2, l2, af, ag, bc)\n                       \\<in> Step \\<longrightarrow>\n                       na = n2 \\<and>\n                       ac = af \\<and>\n                       ae = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=ae in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>b a aa ba l1 ab ac bb.\n                   ((ad, ae, b), la, (a, aa, ba), na, l1, ab, ac, bb)\n                   \\<in> Step \\<longrightarrow>\n                   (\\<forall>n2 l2 af ag bc.\n                       ((ad, ae, b), la, (a, aa, ba), n2, l2, af, ag, bc)\n                       \\<in> Step \\<longrightarrow>\n                       na = n2 \\<and>\n                       ab = af \\<and>\n                       ac = ag \\<and> bb = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=bb in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>a aa b l1 ab ac ba.\n                   ((ad, ae, bb), la, (a, aa, b), na, l1, ab, ac, ba)\n                   \\<in> Step \\<longrightarrow>\n                   (\\<forall>n2 l2 af ag bc.\n                       ((ad, ae, bb), la, (a, aa, b), n2, l2, af, ag, bc)\n                       \\<in> Step \\<longrightarrow>\n                       na = n2 \\<and>\n                       ab = af \\<and>\n                       ac = ag \\<and> ba = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=af in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>a b l1 aa ab ba.\n                   ((ad, ae, bb), la, (af, a, b), na, l1, aa, ab, ba)\n                   \\<in> Step \\<longrightarrow>\n                   (\\<forall>n2 l2 ac ag bc.\n                       ((ad, ae, bb), la, (af, a, b), n2, l2, ac, ag, bc)\n                       \\<in> Step \\<longrightarrow>\n                       na = n2 \\<and>\n                       aa = ac \\<and>\n                       ab = ag \\<and> ba = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=ag in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>b l1 a aa ba.\n                   ((ad, ae, bb), la, (af, ag, b), na, l1, a, aa, ba)\n                   \\<in> Step \\<longrightarrow>\n                   (\\<forall>n2 l2 ab ac bc.\n                       ((ad, ae, bb), la, (af, ag, b), n2, l2, ab, ac, bc)\n                       \\<in> Step \\<longrightarrow>\n                       na = n2 \\<and>\n                       a = ab \\<and> aa = ac \\<and> ba = bc \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=bc in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>l1 a aa b.\n                   ((ad, ae, bb), la, (af, ag, bc), na, l1, a, aa, b)\n                   \\<in> Step \\<longrightarrow>\n                   (\\<forall>n2 l2 ab ac ba.\n                       ((ad, ae, bb), la, (af, ag, bc), n2, l2, ab, ac, ba)\n                       \\<in> Step \\<longrightarrow>\n                       na = n2 \\<and>\n                       a = ab \\<and> aa = ac \\<and> b = ba \\<and> l1 = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=ll in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>a aa b.\n                   ((ad, ae, bb), la, (af, ag, bc), na, ll, a, aa, b)\n                   \\<in> Step \\<longrightarrow>\n                   (\\<forall>n2 l2 ab ac ba.\n                       ((ad, ae, bb), la, (af, ag, bc), n2, l2, ab, ac, ba)\n                       \\<in> Step \\<longrightarrow>\n                       na = n2 \\<and>\n                       a = ab \\<and> aa = ac \\<and> b = ba \\<and> ll = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=ah in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>a b.\n                   ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, a, b)\n                   \\<in> Step \\<longrightarrow>\n                   (\\<forall>n2 l2 aa ab ba.\n                       ((ad, ae, bb), la, (af, ag, bc), n2, l2, aa, ab, ba)\n                       \\<in> Step \\<longrightarrow>\n                       na = n2 \\<and>\n                       ah = aa \\<and> a = ab \\<and> b = ba \\<and> ll = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=ai in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>b.\n                   ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, b)\n                   \\<in> Step \\<longrightarrow>\n                   (\\<forall>n2 l2 a aa ba.\n                       ((ad, ae, bb), la, (af, ag, bc), n2, l2, a, aa, ba)\n                       \\<in> Step \\<longrightarrow>\n                       na = n2 \\<and>\n                       ah = a \\<and> ai = aa \\<and> b = ba \\<and> ll = l2);\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), la, (af, ag, bc), na, ll, ah, ai, bd) \\<in> Step;\n        ((ad, ae, bb), ll, (ah, ai, bd), m, ha, va) \\<in> Exec; na \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max na m = max nb ma \\<and> ha = k \\<and> va = w", "apply (erule_tac x=bd in allE, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba h v.\n                      ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                      \\<in> Exec \\<longrightarrow>\n                      (\\<forall>n2 k w.\n                          ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                          \\<in> Exec \\<longrightarrow>\n                          n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec;\n        \\<forall>n2 l2 a aa b.\n           ((ad, ae, bb), la, (af, ag, bc), n2, l2, a, aa, b)\n           \\<in> Step \\<longrightarrow>\n           na = n2 \\<and>\n           ah = a \\<and> ai = aa \\<and> bd = b \\<and> ll = l2\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>n2 l2 a aa b.\n                   ((ad, ae, bb), la, (af, ag, bc), n2, l2, a, aa, b)\n                   \\<in> Step \\<longrightarrow>\n                   na = n2 \\<and>\n                   ah = a \\<and> ai = aa \\<and> bd = b \\<and> ll = l2;\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=nb in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>l2 a aa b.\n                   ((ad, ae, bb), la, (af, ag, bc), nb, l2, a, aa, b)\n                   \\<in> Step \\<longrightarrow>\n                   na = nb \\<and>\n                   ah = a \\<and> ai = aa \\<and> bd = b \\<and> ll = l2;\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=lla in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>a aa b.\n                   ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b)\n                   \\<in> Step \\<longrightarrow>\n                   na = nb \\<and>\n                   ah = a \\<and> ai = aa \\<and> bd = b \\<and> ll = lla;\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=a in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>aa b.\n                   ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b)\n                   \\<in> Step \\<longrightarrow>\n                   na = nb \\<and>\n                   ah = a \\<and> ai = aa \\<and> bd = b \\<and> ll = lla;\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=aa in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc na ll ah ai bd m ha va nb ma a aa b\n       lla.\n       \\<lbrakk>\\<forall>b.\n                   ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b)\n                   \\<in> Step \\<longrightarrow>\n                   na = nb \\<and>\n                   ah = a \\<and> ai = aa \\<and> bd = b \\<and> ll = lla;\n        \\<forall>n1\\<le>n.\n           \\<forall>l a aa b ab ac ba h v.\n              ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n              \\<in> Exec \\<longrightarrow>\n              (\\<forall>n2 k w.\n                  ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                  \\<in> Exec \\<longrightarrow>\n                  n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=b in allE, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc m ha va nb ma a aa b lla.\n       \\<lbrakk>\\<forall>n1\\<le>n.\n                   \\<forall>l a aa b ab ac ba h v.\n                      ((a, aa, b), l, (ab, ac, ba), n1, h, v)\n                      \\<in> Exec \\<longrightarrow>\n                      (\\<forall>n2 k w.\n                          ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                          \\<in> Exec \\<longrightarrow>\n                          n1 = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=m in allE, rotate_tac -1, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc m ha va nb ma a aa b lla.\n       \\<lbrakk>\\<forall>l a aa b ab ac ba h v.\n                   ((a, aa, b), l, (ab, ac, ba), m, h, v)\n                   \\<in> Exec \\<longrightarrow>\n                   (\\<forall>n2 k w.\n                       ((a, aa, b), l, (ab, ac, ba), n2, k, w)\n                       \\<in> Exec \\<longrightarrow>\n                       m = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=lla in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc m ha va nb ma a aa b lla.\n       \\<lbrakk>\\<forall>a aa b ab ac ba h v.\n                   ((a, aa, b), lla, (ab, ac, ba), m, h, v)\n                   \\<in> Exec \\<longrightarrow>\n                   (\\<forall>n2 k w.\n                       ((a, aa, b), lla, (ab, ac, ba), n2, k, w)\n                       \\<in> Exec \\<longrightarrow>\n                       m = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=ad in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc m ha va nb ma a aa b lla.\n       \\<lbrakk>\\<forall>a b aa ab ba h v.\n                   ((ad, a, b), lla, (aa, ab, ba), m, h, v)\n                   \\<in> Exec \\<longrightarrow>\n                   (\\<forall>n2 k w.\n                       ((ad, a, b), lla, (aa, ab, ba), n2, k, w)\n                       \\<in> Exec \\<longrightarrow>\n                       m = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=ae in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc m ha va nb ma a aa b lla.\n       \\<lbrakk>\\<forall>b a aa ba h v.\n                   ((ad, ae, b), lla, (a, aa, ba), m, h, v)\n                   \\<in> Exec \\<longrightarrow>\n                   (\\<forall>n2 k w.\n                       ((ad, ae, b), lla, (a, aa, ba), n2, k, w)\n                       \\<in> Exec \\<longrightarrow>\n                       m = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=bb in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc m ha va nb ma a aa b lla.\n       \\<lbrakk>\\<forall>a aa b h v.\n                   ((ad, ae, bb), lla, (a, aa, b), m, h, v)\n                   \\<in> Exec \\<longrightarrow>\n                   (\\<forall>n2 k w.\n                       ((ad, ae, bb), lla, (a, aa, b), n2, k, w)\n                       \\<in> Exec \\<longrightarrow>\n                       m = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=a in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc m ha va nb ma a aa b lla.\n       \\<lbrakk>\\<forall>aa b h v.\n                   ((ad, ae, bb), lla, (a, aa, b), m, h, v)\n                   \\<in> Exec \\<longrightarrow>\n                   (\\<forall>n2 k w.\n                       ((ad, ae, bb), lla, (a, aa, b), n2, k, w)\n                       \\<in> Exec \\<longrightarrow>\n                       m = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=aa in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc m ha va nb ma a aa b lla.\n       \\<lbrakk>\\<forall>b h v.\n                   ((ad, ae, bb), lla, (a, aa, b), m, h, v)\n                   \\<in> Exec \\<longrightarrow>\n                   (\\<forall>n2 k w.\n                       ((ad, ae, bb), lla, (a, aa, b), n2, k, w)\n                       \\<in> Exec \\<longrightarrow>\n                       m = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=b in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc m ha va nb ma a aa b lla.\n       \\<lbrakk>\\<forall>h v.\n                   ((ad, ae, bb), lla, (a, aa, b), m, h, v)\n                   \\<in> Exec \\<longrightarrow>\n                   (\\<forall>n2 k w.\n                       ((ad, ae, bb), lla, (a, aa, b), n2, k, w)\n                       \\<in> Exec \\<longrightarrow>\n                       m = n2 \\<and> h = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=ha in allE, rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n k w ad ae bb la af ag bc m ha va nb ma a aa b lla.\n       \\<lbrakk>\\<forall>v.\n                   ((ad, ae, bb), lla, (a, aa, b), m, ha, v)\n                   \\<in> Exec \\<longrightarrow>\n                   (\\<forall>n2 k w.\n                       ((ad, ae, bb), lla, (a, aa, b), n2, k, w)\n                       \\<in> Exec \\<longrightarrow>\n                       m = n2 \\<and> ha = k \\<and> v = w);\n        ((ad, ae, bb), lla, (a, aa, b), m, ha, va) \\<in> Exec; nb \\<le> n;\n        m \\<le> n;\n        ((ad, ae, bb), la, (af, ag, bc), nb, lla, a, aa, b) \\<in> Step;\n        ((ad, ae, bb), lla, (a, aa, b), ma, k, w) \\<in> Exec\\<rbrakk>\n       \\<Longrightarrow> max nb m = max nb ma", "apply (erule_tac x=va in allE, rotate_tac -1, clarsimp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Step_determ:\n \"\\<lbrakk>(M,l,s,n,l1,t) \\<in> Step; (M,l,s,m,l2,r):Step\\<rbrakk> \\<Longrightarrow> n=m \\<and> t=r \\<and> l1=l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, s, n, l1, t) \\<in> Step;\n     (M, l, s, m, l2, r) \\<in> Step\\<rbrakk>\n    \\<Longrightarrow> n = m \\<and> t = r \\<and> l1 = l2", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, s, n, l1, t) \\<in> Step;\n     (M, l, s, m, l2, r) \\<in> Step\\<rbrakk>\n    \\<Longrightarrow> n = m \\<and> t = r \\<and> l1 = l2", "apply (insert StepExec_determ_Aux[of n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, s, n, l1, t) \\<in> Step; (M, l, s, m, l2, r) \\<in> Step;\n     (\\<forall>n1 l M s l1 t.\n         n1 \\<le> n \\<longrightarrow>\n         (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n         (\\<forall>n2 l2 r.\n             (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n             n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n     (\\<forall>n1 l M s h v.\n         n1 \\<le> n \\<longrightarrow>\n         (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n         (\\<forall>n2 k w.\n             (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n             n1 = n2 \\<and> h = k \\<and> v = w))\\<rbrakk>\n    \\<Longrightarrow> n = m \\<and> t = r \\<and> l1 = l2", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, s, n, l1, t) \\<in> Step; (M, l, s, m, l2, r) \\<in> Step;\n     \\<forall>n1 l M s l1 t.\n        n1 \\<le> n \\<longrightarrow>\n        (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n        (\\<forall>n2 l2 r.\n            (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n            n1 = n2 \\<and> t = r \\<and> l1 = l2);\n     \\<forall>n1 l M s h v.\n        n1 \\<le> n \\<longrightarrow>\n        (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n        (\\<forall>n2 k w.\n            (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n            n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n    \\<Longrightarrow> n = m \\<and> t = r \\<and> l1 = l2", "apply (rotate_tac -1, erule thin_rl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, s, n, l1, t) \\<in> Step; (M, l, s, m, l2, r) \\<in> Step;\n     \\<forall>n1 l M s l1 t.\n        n1 \\<le> n \\<longrightarrow>\n        (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n        (\\<forall>n2 l2 r.\n            (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n            n1 = n2 \\<and> t = r \\<and> l1 = l2)\\<rbrakk>\n    \\<Longrightarrow> n = m \\<and> t = r \\<and> l1 = l2", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)"], ["", "lemma Exec_determ:\n \"\\<lbrakk>(M,l,s,n,h,v) \\<in> Exec; (M,l,s,m,k,w):Exec\\<rbrakk> \\<Longrightarrow> n=m \\<and> h=k \\<and> v=w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, s, n, h, v) \\<in> Exec;\n     (M, l, s, m, k, w) \\<in> Exec\\<rbrakk>\n    \\<Longrightarrow> n = m \\<and> h = k \\<and> v = w", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, s, n, h, v) \\<in> Exec;\n     (M, l, s, m, k, w) \\<in> Exec\\<rbrakk>\n    \\<Longrightarrow> n = m \\<and> h = k \\<and> v = w", "apply (insert StepExec_determ_Aux[of n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, s, n, h, v) \\<in> Exec; (M, l, s, m, k, w) \\<in> Exec;\n     (\\<forall>n1 l M s l1 t.\n         n1 \\<le> n \\<longrightarrow>\n         (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n         (\\<forall>n2 l2 r.\n             (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n             n1 = n2 \\<and> t = r \\<and> l1 = l2)) \\<and>\n     (\\<forall>n1 l M s h v.\n         n1 \\<le> n \\<longrightarrow>\n         (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n         (\\<forall>n2 k w.\n             (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n             n1 = n2 \\<and> h = k \\<and> v = w))\\<rbrakk>\n    \\<Longrightarrow> n = m \\<and> h = k \\<and> v = w", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(M, l, s, n, h, v) \\<in> Exec; (M, l, s, m, k, w) \\<in> Exec;\n     \\<forall>n1 l M s l1 t.\n        n1 \\<le> n \\<longrightarrow>\n        (M, l, s, n1, l1, t) \\<in> Step \\<longrightarrow>\n        (\\<forall>n2 l2 r.\n            (M, l, s, n2, l2, r) \\<in> Step \\<longrightarrow>\n            n1 = n2 \\<and> t = r \\<and> l1 = l2);\n     \\<forall>n1 l M s h v.\n        n1 \\<le> n \\<longrightarrow>\n        (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n        (\\<forall>n2 k w.\n            (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n            n1 = n2 \\<and> h = k \\<and> v = w)\\<rbrakk>\n    \\<Longrightarrow> n = m \\<and> h = k \\<and> v = w", "apply (rotate_tac -2, erule thin_rl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>n1 l M s h v.\n                n1 \\<le> n \\<longrightarrow>\n                (M, l, s, n1, h, v) \\<in> Exec \\<longrightarrow>\n                (\\<forall>n2 k w.\n                    (M, l, s, n2, k, w) \\<in> Exec \\<longrightarrow>\n                    n1 = n2 \\<and> h = k \\<and> v = w);\n     (M, l, s, n, h, v) \\<in> Exec; (M, l, s, m, k, w) \\<in> Exec\\<rbrakk>\n    \\<Longrightarrow> n = m \\<and> h = k \\<and> v = w", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*>*)\n\n(*<*)"], ["", "end"], ["", "(*>*)"]]}