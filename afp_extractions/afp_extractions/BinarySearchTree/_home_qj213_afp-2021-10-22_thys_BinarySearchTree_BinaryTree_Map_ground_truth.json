{"file_name": "/home/qj213/afp-2021-10-22/thys/BinarySearchTree/BinaryTree_Map.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BinarySearchTree", "problem_names": ["lemma mapOf_lookup1: \"tlookup fst i t = None ==> mapOf t i = None\"", "lemma mapOf_lookup2: \"tlookup fst i t = Some (j,a) ==> mapOf t i = Some a\"", "lemma assumes h: \"mapOf t i = None\"\n      shows mapOf_lookup3: \"tlookup fst i t = None\"", "lemma assumes v: \"valid_tmap t\"\n      assumes h: \"mapOf t i = Some a\"\n      shows mapOf_lookup4: \"tlookup fst i t = Some (i,a)\"", "lemma assumes v: \"valid_tmap t\"\n      shows mapset_none: \"(mapOf t i = None) = (\\<forall>a. (i,a) \\<notin> setOf t)\"", "lemma assumes v: \"valid_tmap t\"\n      shows mapset_some: \"(mapOf t i = Some a) = ((i,a) : setOf t)\"", "lemma mnew_spec_valid: \"valid_tmap Tip\"", "lemma mtip_spec_empty: \"mapOf Tip k = None\"", "lemma assumes v: \"valid_tmap t\"\n      shows mupdate_map: \"mapOf (mupdate i a t) = (mapOf t)(i |-> a)\"", "lemma assumes v: \"valid_tmap t\"\n      shows mupdate_valid: \"valid_tmap (mupdate i a t)\"", "lemma assumes v: \"valid_tmap t\"\n      shows mremove_valid: \"valid_tmap (mremove i t)\"", "lemma assumes v: \"valid_tmap t\"\n      shows mremove_map: \"mapOf (mremove i t) i = None\""], "translations": [["", "lemma mapOf_lookup1: \"tlookup fst i t = None ==> mapOf t i = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tlookup fst i t = None \\<Longrightarrow> mapOf t i = None", "by (simp add: mapOf_def)"], ["", "lemma mapOf_lookup2: \"tlookup fst i t = Some (j,a) ==> mapOf t i = Some a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tlookup fst i t = Some (j, a) \\<Longrightarrow> mapOf t i = Some a", "by (simp add: mapOf_def)"], ["", "lemma assumes h: \"mapOf t i = None\"\n      shows mapOf_lookup3: \"tlookup fst i t = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tlookup fst i t = None", "proof (cases \"tlookup fst i t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. tlookup fst i t = None \\<Longrightarrow> tlookup fst i t = None\n 2. \\<And>a.\n       tlookup fst i t = Some a \\<Longrightarrow> tlookup fst i t = None", "case None"], ["proof (state)\nthis:\n  tlookup fst i t = None\n\ngoal (2 subgoals):\n 1. tlookup fst i t = None \\<Longrightarrow> tlookup fst i t = None\n 2. \\<And>a.\n       tlookup fst i t = Some a \\<Longrightarrow> tlookup fst i t = None", "from this"], ["proof (chain)\npicking this:\n  tlookup fst i t = None", "show ?thesis"], ["proof (prove)\nusing this:\n  tlookup fst i t = None\n\ngoal (1 subgoal):\n 1. tlookup fst i t = None", "by assumption"], ["proof (state)\nthis:\n  tlookup fst i t = None\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       tlookup fst i t = Some a \\<Longrightarrow> tlookup fst i t = None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       tlookup fst i t = Some a \\<Longrightarrow> tlookup fst i t = None", "case (Some ia)"], ["proof (state)\nthis:\n  tlookup fst i t = Some ia\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       tlookup fst i t = Some a \\<Longrightarrow> tlookup fst i t = None", "note tsome = this"], ["proof (state)\nthis:\n  tlookup fst i t = Some ia\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       tlookup fst i t = Some a \\<Longrightarrow> tlookup fst i t = None", "from this"], ["proof (chain)\npicking this:\n  tlookup fst i t = Some ia", "have o1: \"tlookup fst i t = Some (fst ia, snd ia)\""], ["proof (prove)\nusing this:\n  tlookup fst i t = Some ia\n\ngoal (1 subgoal):\n 1. tlookup fst i t = Some (fst ia, snd ia)", "by simp"], ["proof (state)\nthis:\n  tlookup fst i t = Some (fst ia, snd ia)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       tlookup fst i t = Some a \\<Longrightarrow> tlookup fst i t = None", "have \"mapOf t i = Some (snd ia)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapOf t i = Some (snd ia)", "by (insert mapOf_lookup2 [of i t \"fst ia\" \"snd ia\"], simp add: o1)"], ["proof (state)\nthis:\n  mapOf t i = Some (snd ia)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       tlookup fst i t = Some a \\<Longrightarrow> tlookup fst i t = None", "from this"], ["proof (chain)\npicking this:\n  mapOf t i = Some (snd ia)", "have \"mapOf t i ~= None\""], ["proof (prove)\nusing this:\n  mapOf t i = Some (snd ia)\n\ngoal (1 subgoal):\n 1. mapOf t i \\<noteq> None", "by simp"], ["proof (state)\nthis:\n  mapOf t i \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       tlookup fst i t = Some a \\<Longrightarrow> tlookup fst i t = None", "from this h"], ["proof (chain)\npicking this:\n  mapOf t i \\<noteq> None\n  mapOf t i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  mapOf t i \\<noteq> None\n  mapOf t i = None\n\ngoal (1 subgoal):\n 1. tlookup fst i t = None", "by simp \\<comment> \\<open>contradiction\\<close>"], ["proof (state)\nthis:\n  tlookup fst i t = None\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes v: \"valid_tmap t\"\n      assumes h: \"mapOf t i = Some a\"\n      shows mapOf_lookup4: \"tlookup fst i t = Some (i,a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tlookup fst i t = Some (i, a)", "proof (cases \"tlookup fst i t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. tlookup fst i t = None \\<Longrightarrow> tlookup fst i t = Some (i, a)\n 2. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "case None"], ["proof (state)\nthis:\n  tlookup fst i t = None\n\ngoal (2 subgoals):\n 1. tlookup fst i t = None \\<Longrightarrow> tlookup fst i t = Some (i, a)\n 2. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "from this mapOf_lookup1"], ["proof (chain)\npicking this:\n  tlookup fst i t = None\n  tlookup fst ?i ?t = None \\<Longrightarrow> mapOf ?t ?i = None", "have \"mapOf t i = None\""], ["proof (prove)\nusing this:\n  tlookup fst i t = None\n  tlookup fst ?i ?t = None \\<Longrightarrow> mapOf ?t ?i = None\n\ngoal (1 subgoal):\n 1. mapOf t i = None", "by auto"], ["proof (state)\nthis:\n  mapOf t i = None\n\ngoal (2 subgoals):\n 1. tlookup fst i t = None \\<Longrightarrow> tlookup fst i t = Some (i, a)\n 2. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "from this h"], ["proof (chain)\npicking this:\n  mapOf t i = None\n  mapOf t i = Some a", "show ?thesis"], ["proof (prove)\nusing this:\n  mapOf t i = None\n  mapOf t i = Some a\n\ngoal (1 subgoal):\n 1. tlookup fst i t = Some (i, a)", "by simp \\<comment> \\<open>contradiction\\<close>"], ["proof (state)\nthis:\n  tlookup fst i t = Some (i, a)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "case (Some ia)"], ["proof (state)\nthis:\n  tlookup fst i t = Some ia\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "note tsome = this"], ["proof (state)\nthis:\n  tlookup fst i t = Some ia\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "have tlookup_some_inst: \"sortedTree fst t & (tlookup fst i t = Some ia) --> \n        ia : setOf t & fst ia = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sortedTree fst t \\<and> tlookup fst i t = Some ia \\<longrightarrow>\n    ia \\<in> setOf t \\<and> fst ia = i", "by (simp add: tlookup_some)"], ["proof (state)\nthis:\n  sortedTree fst t \\<and> tlookup fst i t = Some ia \\<longrightarrow>\n  ia \\<in> setOf t \\<and> fst ia = i\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "from tlookup_some_inst tsome v"], ["proof (chain)\npicking this:\n  sortedTree fst t \\<and> tlookup fst i t = Some ia \\<longrightarrow>\n  ia \\<in> setOf t \\<and> fst ia = i\n  tlookup fst i t = Some ia\n  valid_tmap t", "have \"ia : setOf t\""], ["proof (prove)\nusing this:\n  sortedTree fst t \\<and> tlookup fst i t = Some ia \\<longrightarrow>\n  ia \\<in> setOf t \\<and> fst ia = i\n  tlookup fst i t = Some ia\n  valid_tmap t\n\ngoal (1 subgoal):\n 1. ia \\<in> setOf t", "by simp"], ["proof (state)\nthis:\n  ia \\<in> setOf t\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "from tsome"], ["proof (chain)\npicking this:\n  tlookup fst i t = Some ia", "have \"mapOf t i = Some (snd ia)\""], ["proof (prove)\nusing this:\n  tlookup fst i t = Some ia\n\ngoal (1 subgoal):\n 1. mapOf t i = Some (snd ia)", "by (simp add: mapOf_def)"], ["proof (state)\nthis:\n  mapOf t i = Some (snd ia)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "from this h"], ["proof (chain)\npicking this:\n  mapOf t i = Some (snd ia)\n  mapOf t i = Some a", "have o1: \"snd ia = a\""], ["proof (prove)\nusing this:\n  mapOf t i = Some (snd ia)\n  mapOf t i = Some a\n\ngoal (1 subgoal):\n 1. snd ia = a", "by simp"], ["proof (state)\nthis:\n  snd ia = a\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "from tlookup_some_inst tsome v"], ["proof (chain)\npicking this:\n  sortedTree fst t \\<and> tlookup fst i t = Some ia \\<longrightarrow>\n  ia \\<in> setOf t \\<and> fst ia = i\n  tlookup fst i t = Some ia\n  valid_tmap t", "have o2: \"fst ia = i\""], ["proof (prove)\nusing this:\n  sortedTree fst t \\<and> tlookup fst i t = Some ia \\<longrightarrow>\n  ia \\<in> setOf t \\<and> fst ia = i\n  tlookup fst i t = Some ia\n  valid_tmap t\n\ngoal (1 subgoal):\n 1. fst ia = i", "by simp"], ["proof (state)\nthis:\n  fst ia = i\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "from o1 o2"], ["proof (chain)\npicking this:\n  snd ia = a\n  fst ia = i", "have \"ia = (i,a)\""], ["proof (prove)\nusing this:\n  snd ia = a\n  fst ia = i\n\ngoal (1 subgoal):\n 1. ia = (i, a)", "by auto"], ["proof (state)\nthis:\n  ia = (i, a)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       tlookup fst i t = Some aa \\<Longrightarrow>\n       tlookup fst i t = Some (i, a)", "from this tsome"], ["proof (chain)\npicking this:\n  ia = (i, a)\n  tlookup fst i t = Some ia", "show \"tlookup fst i t = Some (i, a)\""], ["proof (prove)\nusing this:\n  ia = (i, a)\n  tlookup fst i t = Some ia\n\ngoal (1 subgoal):\n 1. tlookup fst i t = Some (i, a)", "by simp"], ["proof (state)\nthis:\n  tlookup fst i t = Some (i, a)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Lemmas \\<open>mapset_none\\<close> and \\<open>mapset_some\\<close> establish \n              a relation between the set and map abstraction of the tree\\<close>"], ["", "lemma assumes v: \"valid_tmap t\"\n      shows mapset_none: \"(mapOf t i = None) = (\\<forall>a. (i,a) \\<notin> setOf t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mapOf t i = None) = (\\<forall>a. (i, a) \\<notin> setOf t)", "proof\n  \\<comment> \\<open>==>\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. mapOf t i = None \\<Longrightarrow> \\<forall>a. (i, a) \\<notin> setOf t\n 2. \\<forall>a. (i, a) \\<notin> setOf t \\<Longrightarrow> mapOf t i = None", "assume mapNone: \"mapOf t i = None\""], ["proof (state)\nthis:\n  mapOf t i = None\n\ngoal (2 subgoals):\n 1. mapOf t i = None \\<Longrightarrow> \\<forall>a. (i, a) \\<notin> setOf t\n 2. \\<forall>a. (i, a) \\<notin> setOf t \\<Longrightarrow> mapOf t i = None", "from v mapNone mapOf_lookup3"], ["proof (chain)\npicking this:\n  valid_tmap t\n  mapOf t i = None\n  mapOf ?t ?i = None \\<Longrightarrow> tlookup fst ?i ?t = None", "have lnone: \"tlookup fst i t = None\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  mapOf t i = None\n  mapOf ?t ?i = None \\<Longrightarrow> tlookup fst ?i ?t = None\n\ngoal (1 subgoal):\n 1. tlookup fst i t = None", "by auto"], ["proof (state)\nthis:\n  tlookup fst i t = None\n\ngoal (2 subgoals):\n 1. mapOf t i = None \\<Longrightarrow> \\<forall>a. (i, a) \\<notin> setOf t\n 2. \\<forall>a. (i, a) \\<notin> setOf t \\<Longrightarrow> mapOf t i = None", "show \"\\<forall>a. (i,a) \\<notin> setOf t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a. (i, a) \\<notin> setOf t", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. (i, a) \\<notin> setOf t", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. (i, a) \\<notin> setOf t", "show \"(i,a) ~: setOf t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i, a) \\<notin> setOf t", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t \\<Longrightarrow> False", "assume iain: \"(i,a) : setOf t\""], ["proof (state)\nthis:\n  (i, a) \\<in> setOf t\n\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t \\<Longrightarrow> False", "have tlookup_none_inst: \n      \"sortedTree fst t & (tlookup fst i t = None) --> (\\<forall>x \\<in> setOf t. fst x ~= i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sortedTree fst t \\<and> tlookup fst i t = None \\<longrightarrow>\n    (\\<forall>x\\<in>setOf t. fst x \\<noteq> i)", "by (insert tlookup_none [of \"fst\" \"t\" \"i\"], assumption)"], ["proof (state)\nthis:\n  sortedTree fst t \\<and> tlookup fst i t = None \\<longrightarrow>\n  (\\<forall>x\\<in>setOf t. fst x \\<noteq> i)\n\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t \\<Longrightarrow> False", "from v lnone tlookup_none_inst"], ["proof (chain)\npicking this:\n  valid_tmap t\n  tlookup fst i t = None\n  sortedTree fst t \\<and> tlookup fst i t = None \\<longrightarrow>\n  (\\<forall>x\\<in>setOf t. fst x \\<noteq> i)", "have \"\\<forall>x \\<in> setOf t. fst x ~= i\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  tlookup fst i t = None\n  sortedTree fst t \\<and> tlookup fst i t = None \\<longrightarrow>\n  (\\<forall>x\\<in>setOf t. fst x \\<noteq> i)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>setOf t. fst x \\<noteq> i", "by simp"], ["proof (state)\nthis:\n  \\<forall>x\\<in>setOf t. fst x \\<noteq> i\n\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t \\<Longrightarrow> False", "from this iain"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>setOf t. fst x \\<noteq> i\n  (i, a) \\<in> setOf t", "have \"fst (i,a) ~= i\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>setOf t. fst x \\<noteq> i\n  (i, a) \\<in> setOf t\n\ngoal (1 subgoal):\n 1. fst (i, a) \\<noteq> i", "by fastforce"], ["proof (state)\nthis:\n  fst (i, a) \\<noteq> i\n\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t \\<Longrightarrow> False", "from this"], ["proof (chain)\npicking this:\n  fst (i, a) \\<noteq> i", "show False"], ["proof (prove)\nusing this:\n  fst (i, a) \\<noteq> i\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (i, a) \\<notin> setOf t\n\ngoal:\nNo subgoals!", "qed\n  \\<comment> \\<open><==\\<close>"], ["proof (state)\nthis:\n  \\<forall>a. (i, a) \\<notin> setOf t\n\ngoal (1 subgoal):\n 1. \\<forall>a. (i, a) \\<notin> setOf t \\<Longrightarrow> mapOf t i = None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>a. (i, a) \\<notin> setOf t \\<Longrightarrow> mapOf t i = None", "assume h: \"\\<forall>a. (i,a) \\<notin> setOf t\""], ["proof (state)\nthis:\n  \\<forall>a. (i, a) \\<notin> setOf t\n\ngoal (1 subgoal):\n 1. \\<forall>a. (i, a) \\<notin> setOf t \\<Longrightarrow> mapOf t i = None", "show \"mapOf t i = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapOf t i = None", "proof (cases \"mapOf t i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. mapOf t i = None \\<Longrightarrow> mapOf t i = None\n 2. \\<And>a. mapOf t i = Some a \\<Longrightarrow> mapOf t i = None", "case None"], ["proof (state)\nthis:\n  mapOf t i = None\n\ngoal (2 subgoals):\n 1. mapOf t i = None \\<Longrightarrow> mapOf t i = None\n 2. \\<And>a. mapOf t i = Some a \\<Longrightarrow> mapOf t i = None", "then"], ["proof (chain)\npicking this:\n  mapOf t i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  mapOf t i = None\n\ngoal (1 subgoal):\n 1. mapOf t i = None", "."], ["proof (state)\nthis:\n  mapOf t i = None\n\ngoal (1 subgoal):\n 1. \\<And>a. mapOf t i = Some a \\<Longrightarrow> mapOf t i = None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. mapOf t i = Some a \\<Longrightarrow> mapOf t i = None", "case (Some a)"], ["proof (state)\nthis:\n  mapOf t i = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a. mapOf t i = Some a \\<Longrightarrow> mapOf t i = None", "note mapsome = this"], ["proof (state)\nthis:\n  mapOf t i = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a. mapOf t i = Some a \\<Longrightarrow> mapOf t i = None", "from v mapsome"], ["proof (chain)\npicking this:\n  valid_tmap t\n  mapOf t i = Some a", "have o1: \"tlookup fst i t = Some (i,a)\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  mapOf t i = Some a\n\ngoal (1 subgoal):\n 1. tlookup fst i t = Some (i, a)", "by (simp add: mapOf_lookup4)"], ["proof (state)\nthis:\n  tlookup fst i t = Some (i, a)\n\ngoal (1 subgoal):\n 1. \\<And>a. mapOf t i = Some a \\<Longrightarrow> mapOf t i = None", "(* moving mapOf_lookup4 to assumption does not work, although it uses\n       no == !! *)"], ["proof (state)\nthis:\n  tlookup fst i t = Some (i, a)\n\ngoal (1 subgoal):\n 1. \\<And>a. mapOf t i = Some a \\<Longrightarrow> mapOf t i = None", "from tlookup_some"], ["proof (chain)\npicking this:\n  sortedTree ?h ?t \\<and> tlookup ?h ?k ?t = Some ?x \\<longrightarrow>\n  ?x \\<in> setOf ?t \\<and> ?h ?x = ?k", "have tlookup_some_inst:\n    \"sortedTree fst t & tlookup fst i t = Some (i,a) --> \n     (i,a) : setOf t & fst (i,a) = i\""], ["proof (prove)\nusing this:\n  sortedTree ?h ?t \\<and> tlookup ?h ?k ?t = Some ?x \\<longrightarrow>\n  ?x \\<in> setOf ?t \\<and> ?h ?x = ?k\n\ngoal (1 subgoal):\n 1. sortedTree fst t \\<and> tlookup fst i t = Some (i, a) \\<longrightarrow>\n    (i, a) \\<in> setOf t \\<and> fst (i, a) = i", "by (insert tlookup_some [of fst t i \"(i,a)\"], assumption)"], ["proof (state)\nthis:\n  sortedTree fst t \\<and> tlookup fst i t = Some (i, a) \\<longrightarrow>\n  (i, a) \\<in> setOf t \\<and> fst (i, a) = i\n\ngoal (1 subgoal):\n 1. \\<And>a. mapOf t i = Some a \\<Longrightarrow> mapOf t i = None", "from v o1 this"], ["proof (chain)\npicking this:\n  valid_tmap t\n  tlookup fst i t = Some (i, a)\n  sortedTree fst t \\<and> tlookup fst i t = Some (i, a) \\<longrightarrow>\n  (i, a) \\<in> setOf t \\<and> fst (i, a) = i", "have \"(i,a) : setOf t\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  tlookup fst i t = Some (i, a)\n  sortedTree fst t \\<and> tlookup fst i t = Some (i, a) \\<longrightarrow>\n  (i, a) \\<in> setOf t \\<and> fst (i, a) = i\n\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t", "by simp"], ["proof (state)\nthis:\n  (i, a) \\<in> setOf t\n\ngoal (1 subgoal):\n 1. \\<And>a. mapOf t i = Some a \\<Longrightarrow> mapOf t i = None", "from this h"], ["proof (chain)\npicking this:\n  (i, a) \\<in> setOf t\n  \\<forall>a. (i, a) \\<notin> setOf t", "show ?thesis"], ["proof (prove)\nusing this:\n  (i, a) \\<in> setOf t\n  \\<forall>a. (i, a) \\<notin> setOf t\n\ngoal (1 subgoal):\n 1. mapOf t i = None", "by auto \\<comment> \\<open>contradiction\\<close>"], ["proof (state)\nthis:\n  mapOf t i = None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mapOf t i = None\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes v: \"valid_tmap t\"\n      shows mapset_some: \"(mapOf t i = Some a) = ((i,a) : setOf t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mapOf t i = Some a) = ((i, a) \\<in> setOf t)", "proof\n  \\<comment> \\<open>==>\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. mapOf t i = Some a \\<Longrightarrow> (i, a) \\<in> setOf t\n 2. (i, a) \\<in> setOf t \\<Longrightarrow> mapOf t i = Some a", "assume mapsome: \"mapOf t i = Some a\""], ["proof (state)\nthis:\n  mapOf t i = Some a\n\ngoal (2 subgoals):\n 1. mapOf t i = Some a \\<Longrightarrow> (i, a) \\<in> setOf t\n 2. (i, a) \\<in> setOf t \\<Longrightarrow> mapOf t i = Some a", "from v mapsome"], ["proof (chain)\npicking this:\n  valid_tmap t\n  mapOf t i = Some a", "have o1: \"tlookup fst i t = Some (i,a)\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  mapOf t i = Some a\n\ngoal (1 subgoal):\n 1. tlookup fst i t = Some (i, a)", "by (simp add: mapOf_lookup4)"], ["proof (state)\nthis:\n  tlookup fst i t = Some (i, a)\n\ngoal (2 subgoals):\n 1. mapOf t i = Some a \\<Longrightarrow> (i, a) \\<in> setOf t\n 2. (i, a) \\<in> setOf t \\<Longrightarrow> mapOf t i = Some a", "from tlookup_some"], ["proof (chain)\npicking this:\n  sortedTree ?h ?t \\<and> tlookup ?h ?k ?t = Some ?x \\<longrightarrow>\n  ?x \\<in> setOf ?t \\<and> ?h ?x = ?k", "have tlookup_some_inst:\n  \"sortedTree fst t & tlookup fst i t = Some (i,a) --> \n   (i,a) : setOf t & fst (i,a) = i\""], ["proof (prove)\nusing this:\n  sortedTree ?h ?t \\<and> tlookup ?h ?k ?t = Some ?x \\<longrightarrow>\n  ?x \\<in> setOf ?t \\<and> ?h ?x = ?k\n\ngoal (1 subgoal):\n 1. sortedTree fst t \\<and> tlookup fst i t = Some (i, a) \\<longrightarrow>\n    (i, a) \\<in> setOf t \\<and> fst (i, a) = i", "by (insert tlookup_some [of fst t i \"(i,a)\"], assumption)"], ["proof (state)\nthis:\n  sortedTree fst t \\<and> tlookup fst i t = Some (i, a) \\<longrightarrow>\n  (i, a) \\<in> setOf t \\<and> fst (i, a) = i\n\ngoal (2 subgoals):\n 1. mapOf t i = Some a \\<Longrightarrow> (i, a) \\<in> setOf t\n 2. (i, a) \\<in> setOf t \\<Longrightarrow> mapOf t i = Some a", "from v o1 this"], ["proof (chain)\npicking this:\n  valid_tmap t\n  tlookup fst i t = Some (i, a)\n  sortedTree fst t \\<and> tlookup fst i t = Some (i, a) \\<longrightarrow>\n  (i, a) \\<in> setOf t \\<and> fst (i, a) = i", "show \"(i,a) : setOf t\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  tlookup fst i t = Some (i, a)\n  sortedTree fst t \\<and> tlookup fst i t = Some (i, a) \\<longrightarrow>\n  (i, a) \\<in> setOf t \\<and> fst (i, a) = i\n\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t", "by simp\n  \\<comment> \\<open><==\\<close>"], ["proof (state)\nthis:\n  (i, a) \\<in> setOf t\n\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t \\<Longrightarrow> mapOf t i = Some a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t \\<Longrightarrow> mapOf t i = Some a", "assume iain: \"(i,a) : setOf t\""], ["proof (state)\nthis:\n  (i, a) \\<in> setOf t\n\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t \\<Longrightarrow> mapOf t i = Some a", "from v iain tlookup_finds"], ["proof (chain)\npicking this:\n  valid_tmap t\n  (i, a) \\<in> setOf t\n  sortedTree ?h ?t \\<and> ?y \\<in> setOf ?t \\<longrightarrow>\n  tlookup ?h (?h ?y) ?t = Some ?y", "have \"tlookup fst (fst (i,a)) t = Some (i,a)\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  (i, a) \\<in> setOf t\n  sortedTree ?h ?t \\<and> ?y \\<in> setOf ?t \\<longrightarrow>\n  tlookup ?h (?h ?y) ?t = Some ?y\n\ngoal (1 subgoal):\n 1. tlookup fst (fst (i, a)) t = Some (i, a)", "by fastforce"], ["proof (state)\nthis:\n  tlookup fst (fst (i, a)) t = Some (i, a)\n\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t \\<Longrightarrow> mapOf t i = Some a", "from this"], ["proof (chain)\npicking this:\n  tlookup fst (fst (i, a)) t = Some (i, a)", "have \"tlookup fst i t = Some (i,a)\""], ["proof (prove)\nusing this:\n  tlookup fst (fst (i, a)) t = Some (i, a)\n\ngoal (1 subgoal):\n 1. tlookup fst i t = Some (i, a)", "by simp"], ["proof (state)\nthis:\n  tlookup fst i t = Some (i, a)\n\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf t \\<Longrightarrow> mapOf t i = Some a", "from this"], ["proof (chain)\npicking this:\n  tlookup fst i t = Some (i, a)", "show \"mapOf t i = Some a\""], ["proof (prove)\nusing this:\n  tlookup fst i t = Some (i, a)\n\ngoal (1 subgoal):\n 1. mapOf t i = Some a", "by (simp add: mapOf_def)"], ["proof (state)\nthis:\n  mapOf t i = Some a\n\ngoal:\nNo subgoals!", "qed"], ["", "(*============================================================*)"], ["", "section \\<open>Empty Map\\<close>"], ["", "(*============================================================*)"], ["", "lemma mnew_spec_valid: \"valid_tmap Tip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_tmap Tip", "by (simp add: mapOf_def)"], ["", "lemma mtip_spec_empty: \"mapOf Tip k = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapOf Tip k = None", "by (simp add: mapOf_def)"], ["", "(*============================================================*)"], ["", "section \\<open>Map Update Operation\\<close>"], ["", "(*============================================================*)"], ["", "definition mupdate :: \"index => 'a => 'a tarray => 'a tarray\" where\n  \"mupdate i a t == binsert fst (i,a) t\""], ["", "lemma assumes v: \"valid_tmap t\"\n      shows mupdate_map: \"mapOf (mupdate i a t) = (mapOf t)(i |-> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapOf (mupdate i a t) = mapOf t(i \\<mapsto> a)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. mapOf (mupdate i a t) x = (mapOf t(i \\<mapsto> a)) x", "fix i2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. mapOf (mupdate i a t) x = (mapOf t(i \\<mapsto> a)) x", "let ?tr = \"binsert fst (i,a) t\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. mapOf (mupdate i a t) x = (mapOf t(i \\<mapsto> a)) x", "have upres: \"mupdate i a t = ?tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mupdate i a t = binsert fst (i, a) t", "by (simp add: mupdate_def)"], ["proof (state)\nthis:\n  mupdate i a t = binsert fst (i, a) t\n\ngoal (1 subgoal):\n 1. \\<And>x. mapOf (mupdate i a t) x = (mapOf t(i \\<mapsto> a)) x", "from v binsert_set"], ["proof (chain)\npicking this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow>\n  setOf (binsert ?h ?e ?t) = setOf ?t - eqs ?h ?e \\<union> {?e}", "have setSpec: \"setOf ?tr = setOf t - eqs fst (i,a) Un {(i,a)}\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow>\n  setOf (binsert ?h ?e ?t) = setOf ?t - eqs ?h ?e \\<union> {?e}\n\ngoal (1 subgoal):\n 1. setOf (binsert fst (i, a) t) =\n    setOf t - eqs fst (i, a) \\<union> {(i, a)}", "by fastforce"], ["proof (state)\nthis:\n  setOf (binsert fst (i, a) t) = setOf t - eqs fst (i, a) \\<union> {(i, a)}\n\ngoal (1 subgoal):\n 1. \\<And>x. mapOf (mupdate i a t) x = (mapOf t(i \\<mapsto> a)) x", "from v binsert_sorted"], ["proof (chain)\npicking this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow> sortedTree ?h (binsert ?h ?x ?t)", "have vr: \"valid_tmap ?tr\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow> sortedTree ?h (binsert ?h ?x ?t)\n\ngoal (1 subgoal):\n 1. valid_tmap (binsert fst (i, a) t)", "by fastforce"], ["proof (state)\nthis:\n  valid_tmap (binsert fst (i, a) t)\n\ngoal (1 subgoal):\n 1. \\<And>x. mapOf (mupdate i a t) x = (mapOf t(i \\<mapsto> a)) x", "show \"mapOf (mupdate i a t) i2 = ((mapOf t)(i |-> a)) i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "proof (cases \"i = i2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2\n 2. i \\<noteq> i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "case True"], ["proof (state)\nthis:\n  i = i2\n\ngoal (2 subgoals):\n 1. i = i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2\n 2. i \\<noteq> i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "note i2ei = this"], ["proof (state)\nthis:\n  i = i2\n\ngoal (2 subgoals):\n 1. i = i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2\n 2. i \\<noteq> i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "from i2ei"], ["proof (chain)\npicking this:\n  i = i2", "have rhs_res: \"((mapOf t)(i |-> a)) i2 = Some a\""], ["proof (prove)\nusing this:\n  i = i2\n\ngoal (1 subgoal):\n 1. (mapOf t(i \\<mapsto> a)) i2 = Some a", "by simp"], ["proof (state)\nthis:\n  (mapOf t(i \\<mapsto> a)) i2 = Some a\n\ngoal (2 subgoals):\n 1. i = i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2\n 2. i \\<noteq> i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "have lhs_res: \"mapOf (mupdate i a t) i = Some a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapOf (mupdate i a t) i = Some a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mapOf (mupdate i a t) i = Some a", "have will_find: \"tlookup fst i ?tr = Some (i,a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tlookup fst i (binsert fst (i, a) t) = Some (i, a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tlookup fst i (binsert fst (i, a) t) = Some (i, a)", "from setSpec"], ["proof (chain)\npicking this:\n  setOf (binsert fst (i, a) t) = setOf t - eqs fst (i, a) \\<union> {(i, a)}", "have kvin: \"(i,a) : setOf ?tr\""], ["proof (prove)\nusing this:\n  setOf (binsert fst (i, a) t) = setOf t - eqs fst (i, a) \\<union> {(i, a)}\n\ngoal (1 subgoal):\n 1. (i, a) \\<in> setOf (binsert fst (i, a) t)", "by simp"], ["proof (state)\nthis:\n  (i, a) \\<in> setOf (binsert fst (i, a) t)\n\ngoal (1 subgoal):\n 1. tlookup fst i (binsert fst (i, a) t) = Some (i, a)", "have binsert_sorted_inst: \"sortedTree fst t --> \n                                 sortedTree fst ?tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sortedTree fst t \\<longrightarrow> sortedTree fst (binsert fst (i, a) t)", "by (insert binsert_sorted [of \"fst\" \"t\" \"(i,a)\"], assumption)"], ["proof (state)\nthis:\n  sortedTree fst t \\<longrightarrow> sortedTree fst (binsert fst (i, a) t)\n\ngoal (1 subgoal):\n 1. tlookup fst i (binsert fst (i, a) t) = Some (i, a)", "from v binsert_sorted_inst"], ["proof (chain)\npicking this:\n  valid_tmap t\n  sortedTree fst t \\<longrightarrow> sortedTree fst (binsert fst (i, a) t)", "have rs: \"sortedTree fst ?tr\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  sortedTree fst t \\<longrightarrow> sortedTree fst (binsert fst (i, a) t)\n\ngoal (1 subgoal):\n 1. sortedTree fst (binsert fst (i, a) t)", "by simp"], ["proof (state)\nthis:\n  sortedTree fst (binsert fst (i, a) t)\n\ngoal (1 subgoal):\n 1. tlookup fst i (binsert fst (i, a) t) = Some (i, a)", "have tlookup_finds_inst: \"sortedTree fst ?tr & (i,a) : setOf ?tr --> \n                                  tlookup fst i ?tr = Some (i,a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sortedTree fst (binsert fst (i, a) t) \\<and>\n    (i, a) \\<in> setOf (binsert fst (i, a) t) \\<longrightarrow>\n    tlookup fst i (binsert fst (i, a) t) = Some (i, a)", "by (insert tlookup_finds [of \"fst\" \"?tr\" \"(i,a)\"], simp)"], ["proof (state)\nthis:\n  sortedTree fst (binsert fst (i, a) t) \\<and>\n  (i, a) \\<in> setOf (binsert fst (i, a) t) \\<longrightarrow>\n  tlookup fst i (binsert fst (i, a) t) = Some (i, a)\n\ngoal (1 subgoal):\n 1. tlookup fst i (binsert fst (i, a) t) = Some (i, a)", "from rs kvin tlookup_finds_inst"], ["proof (chain)\npicking this:\n  sortedTree fst (binsert fst (i, a) t)\n  (i, a) \\<in> setOf (binsert fst (i, a) t)\n  sortedTree fst (binsert fst (i, a) t) \\<and>\n  (i, a) \\<in> setOf (binsert fst (i, a) t) \\<longrightarrow>\n  tlookup fst i (binsert fst (i, a) t) = Some (i, a)", "show ?thesis"], ["proof (prove)\nusing this:\n  sortedTree fst (binsert fst (i, a) t)\n  (i, a) \\<in> setOf (binsert fst (i, a) t)\n  sortedTree fst (binsert fst (i, a) t) \\<and>\n  (i, a) \\<in> setOf (binsert fst (i, a) t) \\<longrightarrow>\n  tlookup fst i (binsert fst (i, a) t) = Some (i, a)\n\ngoal (1 subgoal):\n 1. tlookup fst i (binsert fst (i, a) t) = Some (i, a)", "by simp"], ["proof (state)\nthis:\n  tlookup fst i (binsert fst (i, a) t) = Some (i, a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tlookup fst i (binsert fst (i, a) t) = Some (i, a)\n\ngoal (1 subgoal):\n 1. mapOf (mupdate i a t) i = Some a", "from upres will_find"], ["proof (chain)\npicking this:\n  mupdate i a t = binsert fst (i, a) t\n  tlookup fst i (binsert fst (i, a) t) = Some (i, a)", "show ?thesis"], ["proof (prove)\nusing this:\n  mupdate i a t = binsert fst (i, a) t\n  tlookup fst i (binsert fst (i, a) t) = Some (i, a)\n\ngoal (1 subgoal):\n 1. mapOf (mupdate i a t) i = Some a", "by (simp add: mapOf_def)"], ["proof (state)\nthis:\n  mapOf (mupdate i a t) i = Some a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mapOf (mupdate i a t) i = Some a\n\ngoal (2 subgoals):\n 1. i = i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2\n 2. i \\<noteq> i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "from lhs_res rhs_res i2ei"], ["proof (chain)\npicking this:\n  mapOf (mupdate i a t) i = Some a\n  (mapOf t(i \\<mapsto> a)) i2 = Some a\n  i = i2", "show ?thesis"], ["proof (prove)\nusing this:\n  mapOf (mupdate i a t) i = Some a\n  (mapOf t(i \\<mapsto> a)) i2 = Some a\n  i = i2\n\ngoal (1 subgoal):\n 1. mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "by simp"], ["proof (state)\nthis:\n  mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2\n\ngoal (1 subgoal):\n 1. i \\<noteq> i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "case False"], ["proof (state)\nthis:\n  i \\<noteq> i2\n\ngoal (1 subgoal):\n 1. i \\<noteq> i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "note i2nei = this"], ["proof (state)\nthis:\n  i \\<noteq> i2\n\ngoal (1 subgoal):\n 1. i \\<noteq> i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "from i2nei"], ["proof (chain)\npicking this:\n  i \\<noteq> i2", "have rhs_res: \"((mapOf t)(i |-> a)) i2 = mapOf t i2\""], ["proof (prove)\nusing this:\n  i \\<noteq> i2\n\ngoal (1 subgoal):\n 1. (mapOf t(i \\<mapsto> a)) i2 = mapOf t i2", "by auto"], ["proof (state)\nthis:\n  (mapOf t(i \\<mapsto> a)) i2 = mapOf t i2\n\ngoal (1 subgoal):\n 1. i \\<noteq> i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "have lhs_res: \"mapOf (mupdate i a t) i2 = mapOf t i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapOf (mupdate i a t) i2 = mapOf t i2", "proof (cases \"mapOf t i2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. mapOf t i2 = None \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = mapOf t i2\n 2. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "case None"], ["proof (state)\nthis:\n  mapOf t i2 = None\n\ngoal (2 subgoals):\n 1. mapOf t i2 = None \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = mapOf t i2\n 2. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "from this"], ["proof (chain)\npicking this:\n  mapOf t i2 = None", "have mapNone: \"mapOf t i2 = None\""], ["proof (prove)\nusing this:\n  mapOf t i2 = None\n\ngoal (1 subgoal):\n 1. mapOf t i2 = None", "by simp"], ["proof (state)\nthis:\n  mapOf t i2 = None\n\ngoal (2 subgoals):\n 1. mapOf t i2 = None \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = mapOf t i2\n 2. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "from v mapNone mapset_none"], ["proof (chain)\npicking this:\n  valid_tmap t\n  mapOf t i2 = None\n  valid_tmap ?t \\<Longrightarrow>\n  (mapOf ?t ?i = None) = (\\<forall>a. (?i, a) \\<notin> setOf ?t)", "have i2nin: \"\\<forall>a. (i2,a) \\<notin> setOf t\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  mapOf t i2 = None\n  valid_tmap ?t \\<Longrightarrow>\n  (mapOf ?t ?i = None) = (\\<forall>a. (?i, a) \\<notin> setOf ?t)\n\ngoal (1 subgoal):\n 1. \\<forall>a. (i2, a) \\<notin> setOf t", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>a. (i2, a) \\<notin> setOf t\n\ngoal (2 subgoals):\n 1. mapOf t i2 = None \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = mapOf t i2\n 2. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "have noneIn: \"\\<forall>b. (i2,b) \\<notin> setOf ?tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b. (i2, b) \\<notin> setOf (binsert fst (i, a) t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. (i2, b) \\<notin> setOf (binsert fst (i, a) t)", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. (i2, b) \\<notin> setOf (binsert fst (i, a) t)", "from v binsert_set"], ["proof (chain)\npicking this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow>\n  setOf (binsert ?h ?e ?t) = setOf ?t - eqs ?h ?e \\<union> {?e}", "have \"setOf ?tr = setOf t - eqs fst (i,a) Un {(i,a)}\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow>\n  setOf (binsert ?h ?e ?t) = setOf ?t - eqs ?h ?e \\<union> {?e}\n\ngoal (1 subgoal):\n 1. setOf (binsert fst (i, a) t) =\n    setOf t - eqs fst (i, a) \\<union> {(i, a)}", "by fastforce"], ["proof (state)\nthis:\n  setOf (binsert fst (i, a) t) = setOf t - eqs fst (i, a) \\<union> {(i, a)}\n\ngoal (1 subgoal):\n 1. \\<And>b. (i2, b) \\<notin> setOf (binsert fst (i, a) t)", "from this i2nei i2nin"], ["proof (chain)\npicking this:\n  setOf (binsert fst (i, a) t) = setOf t - eqs fst (i, a) \\<union> {(i, a)}\n  i \\<noteq> i2\n  \\<forall>a. (i2, a) \\<notin> setOf t", "show \"(i2,b) ~: setOf ?tr\""], ["proof (prove)\nusing this:\n  setOf (binsert fst (i, a) t) = setOf t - eqs fst (i, a) \\<union> {(i, a)}\n  i \\<noteq> i2\n  \\<forall>a. (i2, a) \\<notin> setOf t\n\ngoal (1 subgoal):\n 1. (i2, b) \\<notin> setOf (binsert fst (i, a) t)", "by fastforce"], ["proof (state)\nthis:\n  (i2, b) \\<notin> setOf (binsert fst (i, a) t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>b. (i2, b) \\<notin> setOf (binsert fst (i, a) t)\n\ngoal (2 subgoals):\n 1. mapOf t i2 = None \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = mapOf t i2\n 2. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "have mapset_none_inst: \n      \"valid_tmap ?tr --> (mapOf ?tr i2 = None) = (\\<forall>a. (i2, a) \\<notin> setOf ?tr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_tmap (binsert fst (i, a) t) \\<longrightarrow>\n    (mapOf (binsert fst (i, a) t) i2 = None) =\n    (\\<forall>aa. (i2, aa) \\<notin> setOf (binsert fst (i, a) t))", "by (insert mapset_none [of \"?tr\" i2], simp)"], ["proof (state)\nthis:\n  valid_tmap (binsert fst (i, a) t) \\<longrightarrow>\n  (mapOf (binsert fst (i, a) t) i2 = None) =\n  (\\<forall>aa. (i2, aa) \\<notin> setOf (binsert fst (i, a) t))\n\ngoal (2 subgoals):\n 1. mapOf t i2 = None \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = mapOf t i2\n 2. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "from vr noneIn mapset_none_inst"], ["proof (chain)\npicking this:\n  valid_tmap (binsert fst (i, a) t)\n  \\<forall>b. (i2, b) \\<notin> setOf (binsert fst (i, a) t)\n  valid_tmap (binsert fst (i, a) t) \\<longrightarrow>\n  (mapOf (binsert fst (i, a) t) i2 = None) =\n  (\\<forall>aa. (i2, aa) \\<notin> setOf (binsert fst (i, a) t))", "have \"mapOf ?tr i2 = None\""], ["proof (prove)\nusing this:\n  valid_tmap (binsert fst (i, a) t)\n  \\<forall>b. (i2, b) \\<notin> setOf (binsert fst (i, a) t)\n  valid_tmap (binsert fst (i, a) t) \\<longrightarrow>\n  (mapOf (binsert fst (i, a) t) i2 = None) =\n  (\\<forall>aa. (i2, aa) \\<notin> setOf (binsert fst (i, a) t))\n\ngoal (1 subgoal):\n 1. mapOf (binsert fst (i, a) t) i2 = None", "by fastforce"], ["proof (state)\nthis:\n  mapOf (binsert fst (i, a) t) i2 = None\n\ngoal (2 subgoals):\n 1. mapOf t i2 = None \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = mapOf t i2\n 2. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "from this upres mapNone"], ["proof (chain)\npicking this:\n  mapOf (binsert fst (i, a) t) i2 = None\n  mupdate i a t = binsert fst (i, a) t\n  mapOf t i2 = None", "show ?thesis"], ["proof (prove)\nusing this:\n  mapOf (binsert fst (i, a) t) i2 = None\n  mupdate i a t = binsert fst (i, a) t\n  mapOf t i2 = None\n\ngoal (1 subgoal):\n 1. mapOf (mupdate i a t) i2 = mapOf t i2", "by simp"], ["proof (state)\nthis:\n  mapOf (mupdate i a t) i2 = mapOf t i2\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "case (Some z)"], ["proof (state)\nthis:\n  mapOf t i2 = Some z\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "from this"], ["proof (chain)\npicking this:\n  mapOf t i2 = Some z", "have mapSome: \"mapOf t i2 = Some z\""], ["proof (prove)\nusing this:\n  mapOf t i2 = Some z\n\ngoal (1 subgoal):\n 1. mapOf t i2 = Some z", "by simp"], ["proof (state)\nthis:\n  mapOf t i2 = Some z\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "from v mapSome mapset_some"], ["proof (chain)\npicking this:\n  valid_tmap t\n  mapOf t i2 = Some z\n  valid_tmap ?t \\<Longrightarrow>\n  (mapOf ?t ?i = Some ?a) = ((?i, ?a) \\<in> setOf ?t)", "have \"(i2,z) : setOf t\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  mapOf t i2 = Some z\n  valid_tmap ?t \\<Longrightarrow>\n  (mapOf ?t ?i = Some ?a) = ((?i, ?a) \\<in> setOf ?t)\n\ngoal (1 subgoal):\n 1. (i2, z) \\<in> setOf t", "by fastforce"], ["proof (state)\nthis:\n  (i2, z) \\<in> setOf t\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "from this setSpec i2nei"], ["proof (chain)\npicking this:\n  (i2, z) \\<in> setOf t\n  setOf (binsert fst (i, a) t) = setOf t - eqs fst (i, a) \\<union> {(i, a)}\n  i \\<noteq> i2", "have \"(i2,z) : setOf ?tr\""], ["proof (prove)\nusing this:\n  (i2, z) \\<in> setOf t\n  setOf (binsert fst (i, a) t) = setOf t - eqs fst (i, a) \\<union> {(i, a)}\n  i \\<noteq> i2\n\ngoal (1 subgoal):\n 1. (i2, z) \\<in> setOf (binsert fst (i, a) t)", "by (simp add: eqs_def)"], ["proof (state)\nthis:\n  (i2, z) \\<in> setOf (binsert fst (i, a) t)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "from this vr mapset_some"], ["proof (chain)\npicking this:\n  (i2, z) \\<in> setOf (binsert fst (i, a) t)\n  valid_tmap (binsert fst (i, a) t)\n  valid_tmap ?t \\<Longrightarrow>\n  (mapOf ?t ?i = Some ?a) = ((?i, ?a) \\<in> setOf ?t)", "have \"mapOf ?tr i2 = Some z\""], ["proof (prove)\nusing this:\n  (i2, z) \\<in> setOf (binsert fst (i, a) t)\n  valid_tmap (binsert fst (i, a) t)\n  valid_tmap ?t \\<Longrightarrow>\n  (mapOf ?t ?i = Some ?a) = ((?i, ?a) \\<in> setOf ?t)\n\ngoal (1 subgoal):\n 1. mapOf (binsert fst (i, a) t) i2 = Some z", "by fastforce"], ["proof (state)\nthis:\n  mapOf (binsert fst (i, a) t) i2 = Some z\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       mapOf t i2 = Some aa \\<Longrightarrow>\n       mapOf (mupdate i a t) i2 = mapOf t i2", "from this upres mapSome"], ["proof (chain)\npicking this:\n  mapOf (binsert fst (i, a) t) i2 = Some z\n  mupdate i a t = binsert fst (i, a) t\n  mapOf t i2 = Some z", "show ?thesis"], ["proof (prove)\nusing this:\n  mapOf (binsert fst (i, a) t) i2 = Some z\n  mupdate i a t = binsert fst (i, a) t\n  mapOf t i2 = Some z\n\ngoal (1 subgoal):\n 1. mapOf (mupdate i a t) i2 = mapOf t i2", "by simp"], ["proof (state)\nthis:\n  mapOf (mupdate i a t) i2 = mapOf t i2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mapOf (mupdate i a t) i2 = mapOf t i2\n\ngoal (1 subgoal):\n 1. i \\<noteq> i2 \\<Longrightarrow>\n    mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "from lhs_res rhs_res"], ["proof (chain)\npicking this:\n  mapOf (mupdate i a t) i2 = mapOf t i2\n  (mapOf t(i \\<mapsto> a)) i2 = mapOf t i2", "show ?thesis"], ["proof (prove)\nusing this:\n  mapOf (mupdate i a t) i2 = mapOf t i2\n  (mapOf t(i \\<mapsto> a)) i2 = mapOf t i2\n\ngoal (1 subgoal):\n 1. mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2", "by simp"], ["proof (state)\nthis:\n  mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mapOf (mupdate i a t) i2 = (mapOf t(i \\<mapsto> a)) i2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes v: \"valid_tmap t\"\n      shows mupdate_valid: \"valid_tmap (mupdate i a t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_tmap (mupdate i a t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_tmap (mupdate i a t)", "let ?tr = \"binsert fst (i,a) t\""], ["proof (state)\ngoal (1 subgoal):\n 1. valid_tmap (mupdate i a t)", "have upres: \"mupdate i a t = ?tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mupdate i a t = binsert fst (i, a) t", "by (simp add: mupdate_def)"], ["proof (state)\nthis:\n  mupdate i a t = binsert fst (i, a) t\n\ngoal (1 subgoal):\n 1. valid_tmap (mupdate i a t)", "from v binsert_sorted"], ["proof (chain)\npicking this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow> sortedTree ?h (binsert ?h ?x ?t)", "have vr: \"valid_tmap ?tr\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow> sortedTree ?h (binsert ?h ?x ?t)\n\ngoal (1 subgoal):\n 1. valid_tmap (binsert fst (i, a) t)", "by fastforce"], ["proof (state)\nthis:\n  valid_tmap (binsert fst (i, a) t)\n\ngoal (1 subgoal):\n 1. valid_tmap (mupdate i a t)", "from vr upres"], ["proof (chain)\npicking this:\n  valid_tmap (binsert fst (i, a) t)\n  mupdate i a t = binsert fst (i, a) t", "show ?thesis"], ["proof (prove)\nusing this:\n  valid_tmap (binsert fst (i, a) t)\n  mupdate i a t = binsert fst (i, a) t\n\ngoal (1 subgoal):\n 1. valid_tmap (mupdate i a t)", "by simp"], ["proof (state)\nthis:\n  valid_tmap (mupdate i a t)\n\ngoal:\nNo subgoals!", "qed"], ["", "(*============================================================*)"], ["", "section \\<open>Map Remove Operation\\<close>"], ["", "(*============================================================*)"], ["", "definition mremove :: \"index => 'a tarray => 'a tarray\" where\n  \"mremove i t == remove fst (i, undefined) t\""], ["", "lemma assumes v: \"valid_tmap t\"\n      shows mremove_valid: \"valid_tmap (mremove i t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_tmap (mremove i t)", "proof (simp add: mremove_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. sortedTree fst (remove fst (i, undefined) t)", "from v remove_sort"], ["proof (chain)\npicking this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow> sortedTree ?h (remove ?h ?e ?t)", "show \"sortedTree fst (remove fst (i, undefined) t)\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow> sortedTree ?h (remove ?h ?e ?t)\n\ngoal (1 subgoal):\n 1. sortedTree fst (remove fst (i, undefined) t)", "by fastforce"], ["proof (state)\nthis:\n  sortedTree fst (remove fst (i, undefined) t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assumes v: \"valid_tmap t\"\n      shows mremove_map: \"mapOf (mremove i t) i = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapOf (mremove i t) i = None", "proof (simp add: mremove_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. mapOf (remove fst (i, undefined) t) i = None", "let ?tr = \"remove fst (i, undefined) t\""], ["proof (state)\ngoal (1 subgoal):\n 1. mapOf (remove fst (i, undefined) t) i = None", "show \"mapOf ?tr i = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mapOf (remove fst (i, undefined) t) i = None", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mapOf (remove fst (i, undefined) t) i = None", "from v remove_spec"], ["proof (chain)\npicking this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow>\n  sortedTree ?h (remove ?h ?e ?t) \\<and>\n  setOf (remove ?h ?e ?t) = setOf ?t - eqs ?h ?e", "have remSet: \"setOf ?tr = setOf t - eqs fst (i, undefined)\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow>\n  sortedTree ?h (remove ?h ?e ?t) \\<and>\n  setOf (remove ?h ?e ?t) = setOf ?t - eqs ?h ?e\n\ngoal (1 subgoal):\n 1. setOf (remove fst (i, undefined) t) = setOf t - eqs fst (i, undefined)", "by fastforce"], ["proof (state)\nthis:\n  setOf (remove fst (i, undefined) t) = setOf t - eqs fst (i, undefined)\n\ngoal (1 subgoal):\n 1. mapOf (remove fst (i, undefined) t) i = None", "have noneIn: \"\\<forall>a. (i,a) \\<notin> setOf ?tr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t)", "from remSet"], ["proof (chain)\npicking this:\n  setOf (remove fst (i, undefined) t) = setOf t - eqs fst (i, undefined)", "show \"(i,a) ~: setOf ?tr\""], ["proof (prove)\nusing this:\n  setOf (remove fst (i, undefined) t) = setOf t - eqs fst (i, undefined)\n\ngoal (1 subgoal):\n 1. (i, a) \\<notin> setOf (remove fst (i, undefined) t)", "by (simp add: eqs_def)"], ["proof (state)\nthis:\n  (i, a) \\<notin> setOf (remove fst (i, undefined) t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t)\n\ngoal (1 subgoal):\n 1. mapOf (remove fst (i, undefined) t) i = None", "from v remove_sort"], ["proof (chain)\npicking this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow> sortedTree ?h (remove ?h ?e ?t)", "have vr: \"valid_tmap ?tr\""], ["proof (prove)\nusing this:\n  valid_tmap t\n  sortedTree ?h ?t \\<longrightarrow> sortedTree ?h (remove ?h ?e ?t)\n\ngoal (1 subgoal):\n 1. valid_tmap (remove fst (i, undefined) t)", "by fastforce"], ["proof (state)\nthis:\n  valid_tmap (remove fst (i, undefined) t)\n\ngoal (1 subgoal):\n 1. mapOf (remove fst (i, undefined) t) i = None", "have mapset_none_inst: \"valid_tmap ?tr ==>\n    (mapOf ?tr i = None) = (\\<forall>a. (i,a) \\<notin> setOf ?tr)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_tmap (remove fst (i, undefined) t) \\<Longrightarrow>\n    (mapOf (remove fst (i, undefined) t) i = None) =\n    (\\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t))", "by (insert mapset_none [of \"?tr\" \"i\"], simp)"], ["proof (state)\nthis:\n  valid_tmap (remove fst (i, undefined) t) \\<Longrightarrow>\n  (mapOf (remove fst (i, undefined) t) i = None) =\n  (\\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t))\n\ngoal (1 subgoal):\n 1. mapOf (remove fst (i, undefined) t) i = None", "from vr this"], ["proof (chain)\npicking this:\n  valid_tmap (remove fst (i, undefined) t)\n  valid_tmap (remove fst (i, undefined) t) \\<Longrightarrow>\n  (mapOf (remove fst (i, undefined) t) i = None) =\n  (\\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t))", "have \"(mapOf ?tr i = None) = (\\<forall>a. (i,a) \\<notin> setOf ?tr)\""], ["proof (prove)\nusing this:\n  valid_tmap (remove fst (i, undefined) t)\n  valid_tmap (remove fst (i, undefined) t) \\<Longrightarrow>\n  (mapOf (remove fst (i, undefined) t) i = None) =\n  (\\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t))\n\ngoal (1 subgoal):\n 1. (mapOf (remove fst (i, undefined) t) i = None) =\n    (\\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t))", "by fastforce"], ["proof (state)\nthis:\n  (mapOf (remove fst (i, undefined) t) i = None) =\n  (\\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t))\n\ngoal (1 subgoal):\n 1. mapOf (remove fst (i, undefined) t) i = None", "from this noneIn"], ["proof (chain)\npicking this:\n  (mapOf (remove fst (i, undefined) t) i = None) =\n  (\\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t))\n  \\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t)", "show \"mapOf ?tr i = None\""], ["proof (prove)\nusing this:\n  (mapOf (remove fst (i, undefined) t) i = None) =\n  (\\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t))\n  \\<forall>a. (i, a) \\<notin> setOf (remove fst (i, undefined) t)\n\ngoal (1 subgoal):\n 1. mapOf (remove fst (i, undefined) t) i = None", "by simp"], ["proof (state)\nthis:\n  mapOf (remove fst (i, undefined) t) i = None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mapOf (remove fst (i, undefined) t) i = None\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}