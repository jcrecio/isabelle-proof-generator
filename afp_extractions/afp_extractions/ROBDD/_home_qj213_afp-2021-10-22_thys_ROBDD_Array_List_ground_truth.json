{"file_name": "/home/qj213/afp-2021-10-22/thys/ROBDD/Array_List.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/ROBDD", "problem_names": ["lemma [sep_heap_rules]: \"< emp > arl_empty <is_array_list []>\"", "lemma [sep_heap_rules]: \"i<length l \\<Longrightarrow> < is_array_list l a > arl_nth a i <\\<lambda>x. is_array_list l a * \\<up>(x = l!i) >\"", "lemma [sep_heap_rules]: \"\n    < is_array_list l a > \n      arl_append a x \n    <\\<lambda>a. is_array_list (l@[x]) a >\\<^sub>t\"", "lemma is_array_list_prec: \"precise is_array_list\"", "lemma is_array_list_lengthIA: \"is_array_list l li \\<Longrightarrow>\\<^sub>A \\<up>(snd li = length l) * true\"", "lemma is_array_list_lengthI: \"x \\<Turnstile> is_array_list l li \\<Longrightarrow> snd li = length l\""], "translations": [["", "lemma [sep_heap_rules]: \"< emp > arl_empty <is_array_list []>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <emp> arl_empty <is_array_list []>", "by (sep_auto simp: arl_empty_def is_array_list_def initial_capacity_def)"], ["", "definition \"arl_nth \\<equiv> \\<lambda>(a,n) i. do {\n    Array.nth a i\n  }\""], ["", "lemma [sep_heap_rules]: \"i<length l \\<Longrightarrow> < is_array_list l a > arl_nth a i <\\<lambda>x. is_array_list l a * \\<up>(x = l!i) >\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length l \\<Longrightarrow>\n    <is_array_list l a> arl_nth a i\n    <\\<lambda>x. is_array_list l a * \\<up> (x = l ! i)>", "by (sep_auto simp: arl_nth_def is_array_list_def split: prod.splits)"], ["", "definition \"arl_append \\<equiv> \\<lambda>(a,n) x. do {\n    len \\<leftarrow> Array.len a;\n\n    if n<len then do {\n      a \\<leftarrow> Array.upd n x a;\n      return (a,n+1)\n    } else do {\n      let newcap = 2 * len;\n      a \\<leftarrow> array_grow a newcap default;\n      a \\<leftarrow> Array.upd n x a;\n      return (a,n+1)\n    }\n  }\""], ["", "lemma [sep_heap_rules]: \"\n    < is_array_list l a > \n      arl_append a x \n    <\\<lambda>a. is_array_list (l@[x]) a >\\<^sub>t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <is_array_list l a> arl_append a x <is_array_list (l @ [x])>\\<^sub>t", "by (sep_auto \n      simp: arl_append_def is_array_list_def take_update_last neq_Nil_conv\n      split: prod.splits nat.split)"], ["", "lemma is_array_list_prec: \"precise is_array_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. precise is_array_list", "unfolding is_array_list_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. precise\n     (\\<lambda>l (a, n).\n         \\<exists>\\<^sub>Al'.\n            a \\<mapsto>\\<^sub>a l' *\n            \\<up>\n             (n \\<le> length l' \\<and> l = take n l' \\<and> 0 < length l'))", "apply(rule preciseI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' h p F F'.\n       h \\<Turnstile>\n       (case p of\n        (aa, n) \\<Rightarrow>\n          \\<exists>\\<^sub>Al'.\n             aa \\<mapsto>\\<^sub>a l' *\n             \\<up>\n              (n \\<le> length l' \\<and>\n               a = take n l' \\<and> 0 < length l')) *\n       F \\<and>\\<^sub>A\n       (case p of\n        (a, n) \\<Rightarrow>\n          \\<exists>\\<^sub>Al'.\n             a \\<mapsto>\\<^sub>a l' *\n             \\<up>\n              (n \\<le> length l' \\<and>\n               a' = take n l' \\<and> 0 < length l')) *\n       F' \\<Longrightarrow>\n       a = a'", "apply(simp split: prod.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' h p F F' x1 x2.\n       \\<lbrakk>p = (x1, x2);\n        \\<exists>l' l'a.\n           h \\<Turnstile>\n           x1 \\<mapsto>\\<^sub>a l'a * F \\<and>\\<^sub>A\n           x1 \\<mapsto>\\<^sub>a l' * F' \\<and>\n           x2 \\<le> length l'a \\<and>\n           a = take x2 l'a \\<and>\n           l'a \\<noteq> [] \\<and>\n           x2 \\<le> length l' \\<and>\n           a' = take x2 l' \\<and> l' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> a = a'", "using preciseD snga_prec"], ["proof (prove)\nusing this:\n  \\<lbrakk>precise ?R;\n   ?h \\<Turnstile> ?R ?a ?p * ?F \\<and>\\<^sub>A ?R ?a' ?p * ?F'\\<rbrakk>\n  \\<Longrightarrow> ?a = ?a'\n  precise (\\<lambda>x p. p \\<mapsto>\\<^sub>a x)\n\ngoal (1 subgoal):\n 1. \\<And>a a' h p F F' x1 x2.\n       \\<lbrakk>p = (x1, x2);\n        \\<exists>l' l'a.\n           h \\<Turnstile>\n           x1 \\<mapsto>\\<^sub>a l'a * F \\<and>\\<^sub>A\n           x1 \\<mapsto>\\<^sub>a l' * F' \\<and>\n           x2 \\<le> length l'a \\<and>\n           a = take x2 l'a \\<and>\n           l'a \\<noteq> [] \\<and>\n           x2 \\<le> length l' \\<and>\n           a' = take x2 l' \\<and> l' \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> a = a'", "by fastforce"], ["", "lemma is_array_list_lengthIA: \"is_array_list l li \\<Longrightarrow>\\<^sub>A \\<up>(snd li = length l) * true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_array_list l li \\<Longrightarrow>\\<^sub>A\n    \\<up> (snd li = length l) * true", "by(sep_auto simp: is_array_list_def split: prod.splits)"], ["", "find_consts \"assn \\<Rightarrow> bool\""], ["", "lemma is_array_list_lengthI: \"x \\<Turnstile> is_array_list l li \\<Longrightarrow> snd li = length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<Turnstile> is_array_list l li \\<Longrightarrow> snd li = length l", "using is_array_list_lengthIA"], ["proof (prove)\nusing this:\n  is_array_list ?l ?li \\<Longrightarrow>\\<^sub>A\n  \\<up> (snd ?li = length ?l) * true\n\ngoal (1 subgoal):\n 1. x \\<Turnstile> is_array_list l li \\<Longrightarrow> snd li = length l", "by (metis (full_types) ent_pure_post_iff star_aci(2))"], ["", "end"]]}