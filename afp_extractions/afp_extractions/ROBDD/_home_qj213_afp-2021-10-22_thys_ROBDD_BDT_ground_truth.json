{"file_name": "/home/qj213/afp-2021-10-22/thys/ROBDD/BDT.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/ROBDD", "problem_names": ["lemma ifex_var_noinfluence: \"x \\<notin> ifex_var_set b \\<Longrightarrow> val_ifex b (ass(x:=val)) = val_ifex b ass\"", "lemma roifex_var_not_in_subtree:\n  assumes \"ro_ifex b\" and \"b = IF v t e\" \n  shows \"v \\<notin> ifex_var_set t\" and \"v \\<notin> ifex_var_set e\"", "lemma roifex_set_var_subtree: \n  assumes \"ro_ifex b\" and \"b = IF v t e\"\n  shows \"val_ifex b (ass(v:=True)) = val_ifex t ass\" \n        \"val_ifex b (ass(v:=False)) = val_ifex e ass\"", "lemma roifex_Trueif_unique: \"ro_ifex b \\<Longrightarrow> \\<forall>ass. val_ifex b ass \\<Longrightarrow> b = Trueif\"", "lemma roifex_Falseif_unique: \"ro_ifex b \\<Longrightarrow> \\<forall>ass. \\<not> val_ifex b ass \\<Longrightarrow> b = Falseif\"", "lemma \"(f, b) \\<in> bf_ifex_rel \\<Longrightarrow>  b = Trueif \\<longleftrightarrow> f = (\\<lambda>_. True)\"", "lemma \"(f, b) \\<in> bf_ifex_rel \\<Longrightarrow>  b = Falseif \\<longleftrightarrow> f = (\\<lambda>_. False)\"", "lemma ifex_ordered_not_part: \"ifex_ordered  b \\<Longrightarrow> b = IF v b1 b2 \\<Longrightarrow> w < v \\<Longrightarrow> w \\<notin> ifex_var_set b\"", "lemma ro_ifex_unique: \"ro_ifex x \\<Longrightarrow> ro_ifex y \\<Longrightarrow> (\\<And>ass. val_ifex x ass = val_ifex y ass) \\<Longrightarrow> x = y\"", "theorem bf_ifex_rel_single: \"single_valued bf_ifex_rel\" \"single_valued (bf_ifex_rel\\<inverse>)\"", "lemma bf_ifex_eq: \"(af, at) \\<in> bf_ifex_rel \\<Longrightarrow> (bf, bt) \\<in> bf_ifex_rel \\<Longrightarrow> (af = bf) \\<longleftrightarrow> (at = bt)\"", "lemma nonempty_if_var_set: \"ifex_vars (IF v t e) \\<noteq> []\"", "lemma not_element_restrict: \"var \\<notin> ifex_var_set (restrict b var val)\"", "lemma restrict_assignment: \"val_ifex b (ass(var := val)) \\<longleftrightarrow> val_ifex (restrict b var val) ass\"", "lemma restrict_variables_subset: \"ifex_var_set (restrict b var val) \\<subseteq> ifex_var_set b\"", "lemma restrict_ifex_ordered_invar: \"ifex_ordered b \\<Longrightarrow> ifex_ordered (restrict b var val)\"", "lemma restrict_val_invar: \"\\<forall>ass. a ass = val_ifex b ass \\<Longrightarrow>\n                           (bf_restrict var val a) ass = val_ifex (restrict b var val) ass\"", "lemma restrict_untouched_id: \"x \\<notin> ifex_var_set t \\<Longrightarrow> restrict t x val = t\"", "lemma restrict_top_id: \"ifex_ordered e \\<Longrightarrow> ifex_top_var e = Some v \\<Longrightarrow> v' < v \\<Longrightarrow> restrict_top e v' val = e\"", "lemma restrict_id: \"ifex_ordered e \\<Longrightarrow> ifex_top_var e = Some v \\<Longrightarrow> v' < v \\<Longrightarrow> restrict e v' val = e\"", "lemma restrict_top_IF_id: \"ifex_ordered (IF v t e) \\<Longrightarrow> v' < v \\<Longrightarrow> restrict_top (IF v t e) v' val = (IF v t e)\"", "lemma restrict_IF_id: assumes o: \"ifex_ordered (IF v t e)\" assumes le: \"v' < v\"\n  shows \"restrict (IF v t e) v' val = (IF v t e)\"", "lemma restrict_top_eq: \"ifex_ordered (IF v t e) \\<Longrightarrow> restrict (IF v t e) v val = restrict_top (IF v t e) v val\"", "lemma restrict_top_ifex_ordered_invar: \"ifex_ordered b \\<Longrightarrow> ifex_ordered (restrict_top b var val)\"", "lemma lowest_tops_NoneD: \"lowest_tops k = None \\<Longrightarrow> (\\<not>(\\<exists>v t e. ((IF v t e) \\<in> set k)))\"", "lemma lowest_tops_in: \"lowest_tops k = Some l \\<Longrightarrow> l \\<in> set (concat (map ifex_vars k))\"", "lemma restrict_size_le: \"size (restrict_top k var val) \\<le> size k\"", "lemma restrict_size_less: \"ifex_top_var k = Some var \\<Longrightarrow> size (restrict_top k var val) < size k\"", "lemma lowest_tops_cases:\n\"lowest_tops [i, t, e] = Some var \\<Longrightarrow> ifex_top_var i = Some var \\<or> ifex_top_var t\n                                      = Some var \\<or> ifex_top_var e = Some var\"", "lemma lowest_tops_lowest: \"lowest_tops es = Some a \\<Longrightarrow> e \\<in> set es \\<Longrightarrow> ifex_ordered e \\<Longrightarrow> v \\<in> ifex_var_set e \\<Longrightarrow> a \\<le> v\"", "lemma termlemma2: \"lowest_tops [i, t, e] = Some xa \\<Longrightarrow>\n  (size (restrict_top i xa val) + size (restrict_top t xa val) + size (restrict_top e xa val)) <\n  (size i + size t + size e)\"", "lemma termlemma: \"lowest_tops [i, t, e] = Some xa \\<Longrightarrow>\n       (case (restrict_top i xa val, restrict_top t xa val, restrict_top e xa val) of \n             (i, t, e) \\<Rightarrow> size i + size t + size e) <\n       (case (i, t, e) of (i, t, e) \\<Rightarrow> size i + size t + size e)\"", "lemma rel_true_false: \"(a, Trueif) \\<in> bf_ifex_rel \\<Longrightarrow> a = const True\" \"(a, Falseif) \\<in> bf_ifex_rel \\<Longrightarrow> a = const False\"", "lemma rel_if: \"(a, IF v t e) \\<in> bf_ifex_rel \\<Longrightarrow> (ta, t) \\<in> bf_ifex_rel \\<Longrightarrow> (ea, e) \\<in> bf_ifex_rel \\<Longrightarrow> a = (\\<lambda>as. if as v then ta as else ea as)\"", "lemma ifex_ordered_implied: \"(a, b) \\<in> bf_ifex_rel \\<Longrightarrow> ifex_ordered b\"", "lemma ifex_minimal_implied: \"(a, b) \\<in> bf_ifex_rel \\<Longrightarrow> ifex_minimal b\"", "lemma ifex_ite_induct2[case_names Trueif Falseif IF]: \"\n  (\\<And>i t e. lowest_tops [i, t, e] = None \\<Longrightarrow> i = Trueif \\<Longrightarrow> sentence i t e) \\<Longrightarrow>\n  (\\<And>i t e. lowest_tops [i, t, e] = None \\<Longrightarrow> i = Falseif \\<Longrightarrow> sentence i t e) \\<Longrightarrow>\n  (\\<And>i t e a. sentence (restrict_top i a True) (restrict_top t a True) (restrict_top e a True) \\<Longrightarrow>\n             sentence (restrict_top i a False) (restrict_top t a False) (restrict_top e a False) \\<Longrightarrow>\n   lowest_tops [i, t, e] = Some a \\<Longrightarrow> sentence i t e) \\<Longrightarrow> sentence i t e\"", "lemma ifex_ite_induct[case_names Trueif Falseif IF]: \"\n  (\\<And>i t e. lowest_tops [i, t, e] = None \\<Longrightarrow> i = Trueif \\<Longrightarrow> P i t e) \\<Longrightarrow>\n  (\\<And>i t e. lowest_tops [i, t, e] = None \\<Longrightarrow> i = Falseif \\<Longrightarrow> P i t e) \\<Longrightarrow>\n  (\\<And>i t e a. (\\<And>val. P (restrict_top i a val) (restrict_top t a val) (restrict_top e a val)) \\<Longrightarrow> \n   lowest_tops [i, t, e] = Some a \\<Longrightarrow> P i t e) \\<Longrightarrow> P i t e\"", "lemma restrict_top_subset: \"x \\<in> ifex_var_set (restrict_top i vr vl) \\<Longrightarrow> x \\<in> ifex_var_set i\"", "lemma ifex_vars_subset: \"x \\<in> ifex_var_set (ifex_ite i t e) \\<Longrightarrow> (x \\<in> ifex_var_set i) \\<or> (x \\<in> ifex_var_set t) \\<or> (x \\<in> ifex_var_set e)\"", "lemma three_ins: \"i \\<in> set [i, t, e]\" \"t \\<in> set [i, t, e]\" \"e \\<in> set [i, t, e]\"", "lemma hlp3: \"lowest_tops (IF v uu uv # r) \\<noteq> lowest_tops r \\<Longrightarrow> lowest_tops (IF v uu uv # r) = Some v\"", "lemma hlp2: \"IF vi vt ve \\<in> set is \\<Longrightarrow> lowest_tops is = Some a \\<Longrightarrow> a \\<le> vi\"", "lemma hlp1: \"i \\<in> set is \\<Longrightarrow> lowest_tops is = Some a \\<Longrightarrow> ifex_ordered i \\<Longrightarrow> a \\<notin> (ifex_var_set (restrict_top i a val))\"", "lemma order_ifex_ite_invar: \"ifex_ordered i \\<Longrightarrow> ifex_ordered t \\<Longrightarrow> ifex_ordered e \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\"", "lemma ifc_split: \"P (IFC v t e) \\<longleftrightarrow> ((t = e) \\<longrightarrow> P t) \\<and> (t \\<noteq> e \\<longrightarrow> P (IF v t e))\"", "lemma restrict_top_ifex_minimal_invar: \"ifex_minimal i \\<Longrightarrow> ifex_minimal (restrict_top i a val)\"", "lemma minimal_ifex_ite_invar: \"ifex_minimal i \\<Longrightarrow> ifex_minimal t \\<Longrightarrow> ifex_minimal e \\<Longrightarrow> ifex_minimal (ifex_ite i t e)\"", "lemma restrict_top_bf: \"i \\<in> set is \\<Longrightarrow> lowest_tops is = Some vr \\<Longrightarrow>\n  ifex_ordered i \\<Longrightarrow> (\\<And>ass. fi ass = val_ifex i ass) \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass = bf_restrict vr vl fi ass\"", "lemma val_ifex_ite: \"\n  (\\<And>ass. fi ass = val_ifex i ass) \\<Longrightarrow>\n  (\\<And>ass. ft ass = val_ifex t ass) \\<Longrightarrow>\n  (\\<And>ass. fe ass = val_ifex e ass) \\<Longrightarrow>\n  ifex_ordered i \\<Longrightarrow> ifex_ordered t \\<Longrightarrow> ifex_ordered e \\<Longrightarrow>\n  (bf_ite fi ft fe) ass = val_ifex (ifex_ite i t e) ass\"", "theorem ifex_ite_rel_bf: \"\n  (fi,i) \\<in> bf_ifex_rel \\<Longrightarrow>\n  (ft,t) \\<in> bf_ifex_rel \\<Longrightarrow>\n  (fe,e) \\<in> bf_ifex_rel \\<Longrightarrow>\n  ((bf_ite fi ft fe), (ifex_ite i t e)) \\<in> bf_ifex_rel\"", "lemma param_opt_ifex_ite_eq: \"ro_ifex i \\<Longrightarrow> ro_ifex t \\<Longrightarrow> ro_ifex e \\<Longrightarrow>\n       param_opt i t e = Some r \\<Longrightarrow> r = ifex_ite i t e\"", "lemma ifex_ite_opt_eq: \"\n  ro_ifex i \\<Longrightarrow> ro_ifex t \\<Longrightarrow> ro_ifex e \\<Longrightarrow> ifex_ite_opt i t e = ifex_ite i t e\"", "lemma ro_ifexI: \"(a,b) \\<in> bf_ifex_rel \\<Longrightarrow> ro_ifex b\"", "theorem ifex_ite_opt_rel_bf: \"\n  (fi,i) \\<in> bf_ifex_rel \\<Longrightarrow>\n  (ft,t) \\<in> bf_ifex_rel \\<Longrightarrow>\n  (fe,e) \\<in> bf_ifex_rel \\<Longrightarrow>\n  ((bf_ite fi ft fe), (ifex_ite_opt i t e)) \\<in> bf_ifex_rel\"", "lemma restrict_top_bf_ifex_rel:\n\"(f, i) \\<in> bf_ifex_rel \\<Longrightarrow> \\<exists>f'. (f', restrict_top i var val) \\<in> bf_ifex_rel\"", "lemma param_opt_lowest_tops_lem: \"param_opt i t e = None \\<Longrightarrow> \\<exists>y. lowest_tops [i,t,e] = Some y\"", "lemma ifex_sat_untouched_False: \"v \\<notin> ifex_var_set i \\<Longrightarrow> ifex_sat i = Some a \\<Longrightarrow> a v = False\"", "lemma ifex_upd_other: \"v \\<notin> ifex_var_set i \\<Longrightarrow> val_ifex i (a(v:=any)) = val_ifex i a\"", "lemma ordered_ifex_no_twiceI: \"ifex_ordered i \\<Longrightarrow> ifex_no_twice i\"", "lemma ifex_sat_NoneD: \"ifex_sat i = None \\<Longrightarrow> val_ifex i ass = False\"", "lemma ifex_sat_SomeD: \"ifex_no_twice i \\<Longrightarrow> ifex_sat i = Some ass \\<Longrightarrow> val_ifex i ass = True\"", "lemma ifex_sat_NoneI: \"ifex_no_twice i \\<Longrightarrow> (\\<And>ass. val_ifex i ass = False) \\<Longrightarrow> ifex_sat i = None\"", "lemma update_assignment_notin: \"a \\<notin> fst ` set us \\<Longrightarrow> update_assignment us as a = as a\"", "lemma update_assignment_alt: \"update_assignment u as = update_assignment_alt u as\"", "lemma update_assignment: \"distinct (map fst ((v,u)#us)) \\<Longrightarrow> update_assignment ((v,u)#us) as = update_assignment us (as(v:=u))\"", "lemma ass_upd_same: \"update_assignment ((v, u) # a) ass v = u\"", "lemma ifex_sat_list_subset:  \"ifex_sat_list t = Some u \\<Longrightarrow> fst ` set u \\<subseteq> ifex_var_set t\"", "lemma sat_list_distinct: \"ifex_no_twice t \\<Longrightarrow> ifex_sat_list t = Some u \\<Longrightarrow> distinct (map fst u)\"", "lemma ifex_sat_list_NoneD: \"ifex_sat_list i = None \\<Longrightarrow> val_ifex i ass = False\"", "lemma ifex_sat_list_SomeD: \"ifex_no_twice i \\<Longrightarrow> ifex_sat_list i = Some u \\<Longrightarrow> ass = update_assignment u ass' \\<Longrightarrow> val_ifex i ass = True\"", "lemma \"ifex_sat_list i = Some u \\<Longrightarrow> val_ifex (sat_list_to_bdt u) as \\<Longrightarrow> val_ifex i as\"", "lemma bf_ifex_rel_consts[simp,intro!]:\n  \"(bf_True, Trueif) \\<in> bf_ifex_rel\"\n  \"(bf_False, Falseif) \\<in> bf_ifex_rel\"", "lemma bf_ifex_rel_lit[simp,intro!]:\n  \"(bf_lit v, IFC v Trueif Falseif) \\<in> bf_ifex_rel\"", "lemma bf_ifex_rel_consts_ensured[simp]:\n  \"(bf_True,x) \\<in> bf_ifex_rel \\<longleftrightarrow> (x = Trueif)\"\n  \"(bf_False,x) \\<in> bf_ifex_rel \\<longleftrightarrow> (x = Falseif)\"", "lemma bf_ifex_rel_consts_ensured_rev[simp]:\n  \"(x,Trueif) \\<in> bf_ifex_rel \\<longleftrightarrow> (x = bf_True)\"\n  \"(x,Falseif) \\<in> bf_ifex_rel \\<longleftrightarrow> (x = bf_False)\""], "translations": [["", "lemma ifex_var_noinfluence: \"x \\<notin> ifex_var_set b \\<Longrightarrow> val_ifex b (ass(x:=val)) = val_ifex b ass\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> ifex_var_set b \\<Longrightarrow>\n    val_ifex b (ass(x := val)) = val_ifex b ass", "by (induction b, auto)"], ["", "lemma roifex_var_not_in_subtree:\n  assumes \"ro_ifex b\" and \"b = IF v t e\" \n  shows \"v \\<notin> ifex_var_set t\" and \"v \\<notin> ifex_var_set e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> ifex_var_set t &&& v \\<notin> ifex_var_set e", "using assms"], ["proof (prove)\nusing this:\n  ro_ifex b\n  b = IF v t e\n\ngoal (1 subgoal):\n 1. v \\<notin> ifex_var_set t &&& v \\<notin> ifex_var_set e", "by (induction, auto)"], ["", "lemma roifex_set_var_subtree: \n  assumes \"ro_ifex b\" and \"b = IF v t e\"\n  shows \"val_ifex b (ass(v:=True)) = val_ifex t ass\" \n        \"val_ifex b (ass(v:=False)) = val_ifex e ass\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_ifex b (ass(v := True)) = val_ifex t ass &&&\n    val_ifex b (ass(v := False)) = val_ifex e ass", "using assms"], ["proof (prove)\nusing this:\n  ro_ifex b\n  b = IF v t e\n\ngoal (1 subgoal):\n 1. val_ifex b (ass(v := True)) = val_ifex t ass &&&\n    val_ifex b (ass(v := False)) = val_ifex e ass", "by (auto intro!: ifex_var_noinfluence dest: roifex_var_not_in_subtree)"], ["", "lemma roifex_Trueif_unique: \"ro_ifex b \\<Longrightarrow> \\<forall>ass. val_ifex b ass \\<Longrightarrow> b = Trueif\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ro_ifex b; \\<forall>ass. val_ifex b ass\\<rbrakk>\n    \\<Longrightarrow> b = Trueif", "proof(induction b)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>ro_ifex Trueif; All (val_ifex Trueif)\\<rbrakk>\n    \\<Longrightarrow> Trueif = Trueif\n 2. \\<lbrakk>ro_ifex Falseif; All (val_ifex Falseif)\\<rbrakk>\n    \\<Longrightarrow> Falseif = Trueif\n 3. \\<And>x1 b1 b2.\n       \\<lbrakk>\\<lbrakk>ro_ifex b1; All (val_ifex b1)\\<rbrakk>\n                \\<Longrightarrow> b1 = Trueif;\n        \\<lbrakk>ro_ifex b2; All (val_ifex b2)\\<rbrakk>\n        \\<Longrightarrow> b2 = Trueif;\n        ro_ifex (IF x1 b1 b2); All (val_ifex (IF x1 b1 b2))\\<rbrakk>\n       \\<Longrightarrow> IF x1 b1 b2 = Trueif", "case (IF v b1 b2)"], ["proof (state)\nthis:\n  \\<lbrakk>ro_ifex b1; \\<forall>a. val_ifex b1 a\\<rbrakk>\n  \\<Longrightarrow> b1 = Trueif\n  \\<lbrakk>ro_ifex b2; \\<forall>a. val_ifex b2 a\\<rbrakk>\n  \\<Longrightarrow> b2 = Trueif\n  ro_ifex (IF v b1 b2)\n  \\<forall>a. val_ifex (IF v b1 b2) a\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ro_ifex Trueif; All (val_ifex Trueif)\\<rbrakk>\n    \\<Longrightarrow> Trueif = Trueif\n 2. \\<lbrakk>ro_ifex Falseif; All (val_ifex Falseif)\\<rbrakk>\n    \\<Longrightarrow> Falseif = Trueif\n 3. \\<And>x1 b1 b2.\n       \\<lbrakk>\\<lbrakk>ro_ifex b1; All (val_ifex b1)\\<rbrakk>\n                \\<Longrightarrow> b1 = Trueif;\n        \\<lbrakk>ro_ifex b2; All (val_ifex b2)\\<rbrakk>\n        \\<Longrightarrow> b2 = Trueif;\n        ro_ifex (IF x1 b1 b2); All (val_ifex (IF x1 b1 b2))\\<rbrakk>\n       \\<Longrightarrow> IF x1 b1 b2 = Trueif", "with roifex_set_var_subtree[OF \\<open>ro_ifex (IF v b1 b2)\\<close>]"], ["proof (chain)\npicking this:\n  IF v b1 b2 = IF ?v ?t ?e \\<Longrightarrow>\n  val_ifex (IF v b1 b2) (?ass(?v := True)) = val_ifex ?t ?ass\n  IF v b1 b2 = IF ?v ?t ?e \\<Longrightarrow>\n  val_ifex (IF v b1 b2) (?ass(?v := False)) = val_ifex ?e ?ass\n  \\<lbrakk>ro_ifex b1; \\<forall>a. val_ifex b1 a\\<rbrakk>\n  \\<Longrightarrow> b1 = Trueif\n  \\<lbrakk>ro_ifex b2; \\<forall>a. val_ifex b2 a\\<rbrakk>\n  \\<Longrightarrow> b2 = Trueif\n  ro_ifex (IF v b1 b2)\n  \\<forall>a. val_ifex (IF v b1 b2) a", "show ?case"], ["proof (prove)\nusing this:\n  IF v b1 b2 = IF ?v ?t ?e \\<Longrightarrow>\n  val_ifex (IF v b1 b2) (?ass(?v := True)) = val_ifex ?t ?ass\n  IF v b1 b2 = IF ?v ?t ?e \\<Longrightarrow>\n  val_ifex (IF v b1 b2) (?ass(?v := False)) = val_ifex ?e ?ass\n  \\<lbrakk>ro_ifex b1; \\<forall>a. val_ifex b1 a\\<rbrakk>\n  \\<Longrightarrow> b1 = Trueif\n  \\<lbrakk>ro_ifex b2; \\<forall>a. val_ifex b2 a\\<rbrakk>\n  \\<Longrightarrow> b2 = Trueif\n  ro_ifex (IF v b1 b2)\n  \\<forall>a. val_ifex (IF v b1 b2) a\n\ngoal (1 subgoal):\n 1. IF v b1 b2 = Trueif", "by force"], ["proof (state)\nthis:\n  IF v b1 b2 = Trueif\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ro_ifex Trueif; All (val_ifex Trueif)\\<rbrakk>\n    \\<Longrightarrow> Trueif = Trueif\n 2. \\<lbrakk>ro_ifex Falseif; All (val_ifex Falseif)\\<rbrakk>\n    \\<Longrightarrow> Falseif = Trueif", "qed(auto)"], ["", "lemma roifex_Falseif_unique: \"ro_ifex b \\<Longrightarrow> \\<forall>ass. \\<not> val_ifex b ass \\<Longrightarrow> b = Falseif\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ro_ifex b; \\<forall>ass. \\<not> val_ifex b ass\\<rbrakk>\n    \\<Longrightarrow> b = Falseif", "proof(induction b)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>ro_ifex Trueif;\n     \\<forall>ass. \\<not> val_ifex Trueif ass\\<rbrakk>\n    \\<Longrightarrow> Trueif = Falseif\n 2. \\<lbrakk>ro_ifex Falseif;\n     \\<forall>ass. \\<not> val_ifex Falseif ass\\<rbrakk>\n    \\<Longrightarrow> Falseif = Falseif\n 3. \\<And>x1 b1 b2.\n       \\<lbrakk>\\<lbrakk>ro_ifex b1;\n                 \\<forall>ass. \\<not> val_ifex b1 ass\\<rbrakk>\n                \\<Longrightarrow> b1 = Falseif;\n        \\<lbrakk>ro_ifex b2; \\<forall>ass. \\<not> val_ifex b2 ass\\<rbrakk>\n        \\<Longrightarrow> b2 = Falseif;\n        ro_ifex (IF x1 b1 b2);\n        \\<forall>ass. \\<not> val_ifex (IF x1 b1 b2) ass\\<rbrakk>\n       \\<Longrightarrow> IF x1 b1 b2 = Falseif", "case (IF v b1 b2)"], ["proof (state)\nthis:\n  \\<lbrakk>ro_ifex b1; \\<forall>ass. \\<not> val_ifex b1 ass\\<rbrakk>\n  \\<Longrightarrow> b1 = Falseif\n  \\<lbrakk>ro_ifex b2; \\<forall>ass. \\<not> val_ifex b2 ass\\<rbrakk>\n  \\<Longrightarrow> b2 = Falseif\n  ro_ifex (IF v b1 b2)\n  \\<forall>ass. \\<not> val_ifex (IF v b1 b2) ass\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ro_ifex Trueif;\n     \\<forall>ass. \\<not> val_ifex Trueif ass\\<rbrakk>\n    \\<Longrightarrow> Trueif = Falseif\n 2. \\<lbrakk>ro_ifex Falseif;\n     \\<forall>ass. \\<not> val_ifex Falseif ass\\<rbrakk>\n    \\<Longrightarrow> Falseif = Falseif\n 3. \\<And>x1 b1 b2.\n       \\<lbrakk>\\<lbrakk>ro_ifex b1;\n                 \\<forall>ass. \\<not> val_ifex b1 ass\\<rbrakk>\n                \\<Longrightarrow> b1 = Falseif;\n        \\<lbrakk>ro_ifex b2; \\<forall>ass. \\<not> val_ifex b2 ass\\<rbrakk>\n        \\<Longrightarrow> b2 = Falseif;\n        ro_ifex (IF x1 b1 b2);\n        \\<forall>ass. \\<not> val_ifex (IF x1 b1 b2) ass\\<rbrakk>\n       \\<Longrightarrow> IF x1 b1 b2 = Falseif", "with roifex_set_var_subtree[OF \\<open>ro_ifex (IF v b1 b2)\\<close>, of v b1 b2]"], ["proof (chain)\npicking this:\n  IF v b1 b2 = IF v b1 b2 \\<Longrightarrow>\n  val_ifex (IF v b1 b2) (?ass(v := True)) = val_ifex b1 ?ass\n  IF v b1 b2 = IF v b1 b2 \\<Longrightarrow>\n  val_ifex (IF v b1 b2) (?ass(v := False)) = val_ifex b2 ?ass\n  \\<lbrakk>ro_ifex b1; \\<forall>ass. \\<not> val_ifex b1 ass\\<rbrakk>\n  \\<Longrightarrow> b1 = Falseif\n  \\<lbrakk>ro_ifex b2; \\<forall>ass. \\<not> val_ifex b2 ass\\<rbrakk>\n  \\<Longrightarrow> b2 = Falseif\n  ro_ifex (IF v b1 b2)\n  \\<forall>ass. \\<not> val_ifex (IF v b1 b2) ass", "show ?case"], ["proof (prove)\nusing this:\n  IF v b1 b2 = IF v b1 b2 \\<Longrightarrow>\n  val_ifex (IF v b1 b2) (?ass(v := True)) = val_ifex b1 ?ass\n  IF v b1 b2 = IF v b1 b2 \\<Longrightarrow>\n  val_ifex (IF v b1 b2) (?ass(v := False)) = val_ifex b2 ?ass\n  \\<lbrakk>ro_ifex b1; \\<forall>ass. \\<not> val_ifex b1 ass\\<rbrakk>\n  \\<Longrightarrow> b1 = Falseif\n  \\<lbrakk>ro_ifex b2; \\<forall>ass. \\<not> val_ifex b2 ass\\<rbrakk>\n  \\<Longrightarrow> b2 = Falseif\n  ro_ifex (IF v b1 b2)\n  \\<forall>ass. \\<not> val_ifex (IF v b1 b2) ass\n\ngoal (1 subgoal):\n 1. IF v b1 b2 = Falseif", "by fastforce"], ["proof (state)\nthis:\n  IF v b1 b2 = Falseif\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ro_ifex Trueif;\n     \\<forall>ass. \\<not> val_ifex Trueif ass\\<rbrakk>\n    \\<Longrightarrow> Trueif = Falseif\n 2. \\<lbrakk>ro_ifex Falseif;\n     \\<forall>ass. \\<not> val_ifex Falseif ass\\<rbrakk>\n    \\<Longrightarrow> Falseif = Falseif", "qed(auto)"], ["", "lemma \"(f, b) \\<in> bf_ifex_rel \\<Longrightarrow>  b = Trueif \\<longleftrightarrow> f = (\\<lambda>_. True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f, b) \\<in> bf_ifex_rel \\<Longrightarrow> (b = Trueif) = (f = bf_True)", "unfolding bf_ifex_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f, b)\n    \\<in> {(a, b).\n           (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n           ro_ifex b} \\<Longrightarrow>\n    (b = Trueif) = (f = bf_True)", "using roifex_Trueif_unique"], ["proof (prove)\nusing this:\n  \\<lbrakk>ro_ifex ?b; \\<forall>ass. val_ifex ?b ass\\<rbrakk>\n  \\<Longrightarrow> ?b = Trueif\n\ngoal (1 subgoal):\n 1. (f, b)\n    \\<in> {(a, b).\n           (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n           ro_ifex b} \\<Longrightarrow>\n    (b = Trueif) = (f = bf_True)", "by auto"], ["", "lemma \"(f, b) \\<in> bf_ifex_rel \\<Longrightarrow>  b = Falseif \\<longleftrightarrow> f = (\\<lambda>_. False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f, b) \\<in> bf_ifex_rel \\<Longrightarrow>\n    (b = Falseif) = (f = bf_False)", "unfolding bf_ifex_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f, b)\n    \\<in> {(a, b).\n           (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n           ro_ifex b} \\<Longrightarrow>\n    (b = Falseif) = (f = bf_False)", "using roifex_Falseif_unique"], ["proof (prove)\nusing this:\n  \\<lbrakk>ro_ifex ?b; \\<forall>ass. \\<not> val_ifex ?b ass\\<rbrakk>\n  \\<Longrightarrow> ?b = Falseif\n\ngoal (1 subgoal):\n 1. (f, b)\n    \\<in> {(a, b).\n           (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n           ro_ifex b} \\<Longrightarrow>\n    (b = Falseif) = (f = bf_False)", "by auto"], ["", "lemma ifex_ordered_not_part: \"ifex_ordered  b \\<Longrightarrow> b = IF v b1 b2 \\<Longrightarrow> w < v \\<Longrightarrow> w \\<notin> ifex_var_set b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_ordered b; b = IF v b1 b2; w < v\\<rbrakk>\n    \\<Longrightarrow> w \\<notin> ifex_var_set b", "using less_asym"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x < ?y; \\<not> ?P \\<Longrightarrow> ?y < ?x\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_ordered b; b = IF v b1 b2; w < v\\<rbrakk>\n    \\<Longrightarrow> w \\<notin> ifex_var_set b", "by fastforce"], ["", "lemma ro_ifex_unique: \"ro_ifex x \\<Longrightarrow> ro_ifex y \\<Longrightarrow> (\\<And>ass. val_ifex x ass = val_ifex y ass) \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ro_ifex x; ro_ifex y;\n     \\<And>ass. val_ifex x ass = val_ifex y ass\\<rbrakk>\n    \\<Longrightarrow> x = y", "proof(induction x arbitrary: y)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>ro_ifex Trueif; ro_ifex y;\n        \\<And>ass. val_ifex Trueif ass = val_ifex y ass\\<rbrakk>\n       \\<Longrightarrow> Trueif = y\n 2. \\<And>y.\n       \\<lbrakk>ro_ifex Falseif; ro_ifex y;\n        \\<And>ass. val_ifex Falseif ass = val_ifex y ass\\<rbrakk>\n       \\<Longrightarrow> Falseif = y\n 3. \\<And>x1 x1a x2 y.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>ro_ifex x1a; ro_ifex y;\n                    \\<And>ass. val_ifex x1a ass = val_ifex y ass\\<rbrakk>\n                   \\<Longrightarrow> x1a = y;\n        \\<And>y.\n           \\<lbrakk>ro_ifex x2; ro_ifex y;\n            \\<And>ass. val_ifex x2 ass = val_ifex y ass\\<rbrakk>\n           \\<Longrightarrow> x2 = y;\n        ro_ifex (IF x1 x1a x2); ro_ifex y;\n        \\<And>ass. val_ifex (IF x1 x1a x2) ass = val_ifex y ass\\<rbrakk>\n       \\<Longrightarrow> IF x1 x1a x2 = y", "case (IF xv xb1 xb2)"], ["proof (state)\nthis:\n  \\<lbrakk>ro_ifex xb1; ro_ifex ?y;\n   \\<And>ass. val_ifex xb1 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb1 = ?y\n  \\<lbrakk>ro_ifex xb2; ro_ifex ?y;\n   \\<And>ass. val_ifex xb2 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb2 = ?y\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex y\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex y ?ass\n\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>ro_ifex Trueif; ro_ifex y;\n        \\<And>ass. val_ifex Trueif ass = val_ifex y ass\\<rbrakk>\n       \\<Longrightarrow> Trueif = y\n 2. \\<And>y.\n       \\<lbrakk>ro_ifex Falseif; ro_ifex y;\n        \\<And>ass. val_ifex Falseif ass = val_ifex y ass\\<rbrakk>\n       \\<Longrightarrow> Falseif = y\n 3. \\<And>x1 x1a x2 y.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>ro_ifex x1a; ro_ifex y;\n                    \\<And>ass. val_ifex x1a ass = val_ifex y ass\\<rbrakk>\n                   \\<Longrightarrow> x1a = y;\n        \\<And>y.\n           \\<lbrakk>ro_ifex x2; ro_ifex y;\n            \\<And>ass. val_ifex x2 ass = val_ifex y ass\\<rbrakk>\n           \\<Longrightarrow> x2 = y;\n        ro_ifex (IF x1 x1a x2); ro_ifex y;\n        \\<And>ass. val_ifex (IF x1 x1a x2) ass = val_ifex y ass\\<rbrakk>\n       \\<Longrightarrow> IF x1 x1a x2 = y", "note IFind = IF"], ["proof (state)\nthis:\n  \\<lbrakk>ro_ifex xb1; ro_ifex ?y;\n   \\<And>ass. val_ifex xb1 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb1 = ?y\n  \\<lbrakk>ro_ifex xb2; ro_ifex ?y;\n   \\<And>ass. val_ifex xb2 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb2 = ?y\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex y\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex y ?ass\n\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>ro_ifex Trueif; ro_ifex y;\n        \\<And>ass. val_ifex Trueif ass = val_ifex y ass\\<rbrakk>\n       \\<Longrightarrow> Trueif = y\n 2. \\<And>y.\n       \\<lbrakk>ro_ifex Falseif; ro_ifex y;\n        \\<And>ass. val_ifex Falseif ass = val_ifex y ass\\<rbrakk>\n       \\<Longrightarrow> Falseif = y\n 3. \\<And>x1 x1a x2 y.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>ro_ifex x1a; ro_ifex y;\n                    \\<And>ass. val_ifex x1a ass = val_ifex y ass\\<rbrakk>\n                   \\<Longrightarrow> x1a = y;\n        \\<And>y.\n           \\<lbrakk>ro_ifex x2; ro_ifex y;\n            \\<And>ass. val_ifex x2 ass = val_ifex y ass\\<rbrakk>\n           \\<Longrightarrow> x2 = y;\n        ro_ifex (IF x1 x1a x2); ro_ifex y;\n        \\<And>ass. val_ifex (IF x1 x1a x2) ass = val_ifex y ass\\<rbrakk>\n       \\<Longrightarrow> IF x1 x1a x2 = y", "from \\<open>ro_ifex (IF xv xb1 xb2)\\<close>  \\<open>ro_ifex y\\<close> \\<open>\\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex y ass\\<close>"], ["proof (chain)\npicking this:\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex y\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex y ?ass", "show ?case"], ["proof (prove)\nusing this:\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex y\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex y ?ass\n\ngoal (1 subgoal):\n 1. IF xv xb1 xb2 = y", "proof(induction y)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Trueif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Trueif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Trueif\n 2. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Falseif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Falseif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Falseif\n 3. \\<And>x1 y1 y2.\n       \\<lbrakk>\\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y1;\n                 \\<And>ass.\n                    val_ifex (IF xv xb1 xb2) ass = val_ifex y1 ass\\<rbrakk>\n                \\<Longrightarrow> IF xv xb1 xb2 = y1;\n        \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y2;\n         \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex y2 ass\\<rbrakk>\n        \\<Longrightarrow> IF xv xb1 xb2 = y2;\n        ro_ifex (IF xv xb1 xb2); ro_ifex (IF x1 y1 y2);\n        \\<And>ass.\n           val_ifex (IF xv xb1 xb2) ass =\n           val_ifex (IF x1 y1 y2) ass\\<rbrakk>\n       \\<Longrightarrow> IF xv xb1 xb2 = IF x1 y1 y2", "case (IF yv yb1 yb2)"], ["proof (state)\nthis:\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb1;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb1 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb1\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb2;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb2 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb2\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex (IF yv yb1 yb2)\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex (IF yv yb1 yb2) ?ass\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Trueif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Trueif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Trueif\n 2. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Falseif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Falseif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Falseif\n 3. \\<And>x1 y1 y2.\n       \\<lbrakk>\\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y1;\n                 \\<And>ass.\n                    val_ifex (IF xv xb1 xb2) ass = val_ifex y1 ass\\<rbrakk>\n                \\<Longrightarrow> IF xv xb1 xb2 = y1;\n        \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y2;\n         \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex y2 ass\\<rbrakk>\n        \\<Longrightarrow> IF xv xb1 xb2 = y2;\n        ro_ifex (IF xv xb1 xb2); ro_ifex (IF x1 y1 y2);\n        \\<And>ass.\n           val_ifex (IF xv xb1 xb2) ass =\n           val_ifex (IF x1 y1 y2) ass\\<rbrakk>\n       \\<Longrightarrow> IF xv xb1 xb2 = IF x1 y1 y2", "obtain x where x_def: \"x = IF xv xb1 xb2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x = IF xv xb1 xb2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  x = IF xv xb1 xb2\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Trueif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Trueif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Trueif\n 2. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Falseif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Falseif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Falseif\n 3. \\<And>x1 y1 y2.\n       \\<lbrakk>\\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y1;\n                 \\<And>ass.\n                    val_ifex (IF xv xb1 xb2) ass = val_ifex y1 ass\\<rbrakk>\n                \\<Longrightarrow> IF xv xb1 xb2 = y1;\n        \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y2;\n         \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex y2 ass\\<rbrakk>\n        \\<Longrightarrow> IF xv xb1 xb2 = y2;\n        ro_ifex (IF xv xb1 xb2); ro_ifex (IF x1 y1 y2);\n        \\<And>ass.\n           val_ifex (IF xv xb1 xb2) ass =\n           val_ifex (IF x1 y1 y2) ass\\<rbrakk>\n       \\<Longrightarrow> IF xv xb1 xb2 = IF x1 y1 y2", "obtain y' where y'_def: \"y' = IF yv yb1 yb2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        y' = IF yv yb1 yb2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  y' = IF yv yb1 yb2\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Trueif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Trueif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Trueif\n 2. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Falseif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Falseif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Falseif\n 3. \\<And>x1 y1 y2.\n       \\<lbrakk>\\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y1;\n                 \\<And>ass.\n                    val_ifex (IF xv xb1 xb2) ass = val_ifex y1 ass\\<rbrakk>\n                \\<Longrightarrow> IF xv xb1 xb2 = y1;\n        \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y2;\n         \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex y2 ass\\<rbrakk>\n        \\<Longrightarrow> IF xv xb1 xb2 = y2;\n        ro_ifex (IF xv xb1 xb2); ro_ifex (IF x1 y1 y2);\n        \\<And>ass.\n           val_ifex (IF xv xb1 xb2) ass =\n           val_ifex (IF x1 y1 y2) ass\\<rbrakk>\n       \\<Longrightarrow> IF xv xb1 xb2 = IF x1 y1 y2", "from y'_def x_def IFind IF"], ["proof (chain)\npicking this:\n  y' = IF yv yb1 yb2\n  x = IF xv xb1 xb2\n  \\<lbrakk>ro_ifex xb1; ro_ifex ?y;\n   \\<And>ass. val_ifex xb1 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb1 = ?y\n  \\<lbrakk>ro_ifex xb2; ro_ifex ?y;\n   \\<And>ass. val_ifex xb2 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb2 = ?y\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex y\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex y ?ass\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb1;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb1 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb1\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb2;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb2 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb2\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex (IF yv yb1 yb2)\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex (IF yv yb1 yb2) ?ass", "have 0: \"ro_ifex xb1\" \"ro_ifex xb2\" \"ro_ifex yb1\" \n                                               \"ro_ifex yb2\" \"ro_ifex x\" \"ro_ifex y'\""], ["proof (prove)\nusing this:\n  y' = IF yv yb1 yb2\n  x = IF xv xb1 xb2\n  \\<lbrakk>ro_ifex xb1; ro_ifex ?y;\n   \\<And>ass. val_ifex xb1 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb1 = ?y\n  \\<lbrakk>ro_ifex xb2; ro_ifex ?y;\n   \\<And>ass. val_ifex xb2 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb2 = ?y\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex y\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex y ?ass\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb1;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb1 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb1\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb2;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb2 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb2\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex (IF yv yb1 yb2)\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex (IF yv yb1 yb2) ?ass\n\ngoal (1 subgoal):\n 1. (ro_ifex xb1 &&& ro_ifex xb2 &&& ro_ifex yb1) &&&\n    ro_ifex yb2 &&& ro_ifex x &&& ro_ifex y'", "by auto"], ["proof (state)\nthis:\n  ro_ifex xb1\n  ro_ifex xb2\n  ro_ifex yb1\n  ro_ifex yb2\n  ro_ifex x\n  ro_ifex y'\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Trueif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Trueif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Trueif\n 2. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Falseif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Falseif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Falseif\n 3. \\<And>x1 y1 y2.\n       \\<lbrakk>\\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y1;\n                 \\<And>ass.\n                    val_ifex (IF xv xb1 xb2) ass = val_ifex y1 ass\\<rbrakk>\n                \\<Longrightarrow> IF xv xb1 xb2 = y1;\n        \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y2;\n         \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex y2 ass\\<rbrakk>\n        \\<Longrightarrow> IF xv xb1 xb2 = y2;\n        ro_ifex (IF xv xb1 xb2); ro_ifex (IF x1 y1 y2);\n        \\<And>ass.\n           val_ifex (IF xv xb1 xb2) ass =\n           val_ifex (IF x1 y1 y2) ass\\<rbrakk>\n       \\<Longrightarrow> IF xv xb1 xb2 = IF x1 y1 y2", "from IF IFind x_def y'_def"], ["proof (chain)\npicking this:\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb1;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb1 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb1\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb2;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb2 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb2\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex (IF yv yb1 yb2)\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex (IF yv yb1 yb2) ?ass\n  \\<lbrakk>ro_ifex xb1; ro_ifex ?y;\n   \\<And>ass. val_ifex xb1 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb1 = ?y\n  \\<lbrakk>ro_ifex xb2; ro_ifex ?y;\n   \\<And>ass. val_ifex xb2 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb2 = ?y\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex y\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex y ?ass\n  x = IF xv xb1 xb2\n  y' = IF yv yb1 yb2", "have 1: \"\\<And>ass. val_ifex x ass = val_ifex y' ass\""], ["proof (prove)\nusing this:\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb1;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb1 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb1\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb2;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb2 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb2\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex (IF yv yb1 yb2)\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex (IF yv yb1 yb2) ?ass\n  \\<lbrakk>ro_ifex xb1; ro_ifex ?y;\n   \\<And>ass. val_ifex xb1 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb1 = ?y\n  \\<lbrakk>ro_ifex xb2; ro_ifex ?y;\n   \\<And>ass. val_ifex xb2 ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> xb2 = ?y\n  ro_ifex (IF xv xb1 xb2)\n  ro_ifex y\n  val_ifex (IF xv xb1 xb2) ?ass = val_ifex y ?ass\n  x = IF xv xb1 xb2\n  y' = IF yv yb1 yb2\n\ngoal (1 subgoal):\n 1. \\<And>ass. val_ifex x ass = val_ifex y' ass", "by simp"], ["proof (state)\nthis:\n  val_ifex x ?ass = val_ifex y' ?ass\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Trueif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Trueif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Trueif\n 2. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Falseif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Falseif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Falseif\n 3. \\<And>x1 y1 y2.\n       \\<lbrakk>\\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y1;\n                 \\<And>ass.\n                    val_ifex (IF xv xb1 xb2) ass = val_ifex y1 ass\\<rbrakk>\n                \\<Longrightarrow> IF xv xb1 xb2 = y1;\n        \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex y2;\n         \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex y2 ass\\<rbrakk>\n        \\<Longrightarrow> IF xv xb1 xb2 = y2;\n        ro_ifex (IF xv xb1 xb2); ro_ifex (IF x1 y1 y2);\n        \\<And>ass.\n           val_ifex (IF xv xb1 xb2) ass =\n           val_ifex (IF x1 y1 y2) ass\\<rbrakk>\n       \\<Longrightarrow> IF xv xb1 xb2 = IF x1 y1 y2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. IF xv xb1 xb2 = IF yv yb1 yb2", "proof(cases \"xv = yv\")"], ["proof (state)\ngoal (2 subgoals):\n 1. xv = yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2\n 2. xv \\<noteq> yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "case True"], ["proof (state)\nthis:\n  xv = yv\n\ngoal (2 subgoals):\n 1. xv = yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2\n 2. xv \\<noteq> yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "have \"xb1 = yb1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xb1 = yb1", "by (auto intro: IFind simp add: 0 1 True roifex_set_var_subtree[OF _ y'_def]\n                                        roifex_set_var_subtree[OF _ x_def, symmetric])"], ["proof (state)\nthis:\n  xb1 = yb1\n\ngoal (2 subgoals):\n 1. xv = yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2\n 2. xv \\<noteq> yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "moreover"], ["proof (state)\nthis:\n  xb1 = yb1\n\ngoal (2 subgoals):\n 1. xv = yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2\n 2. xv \\<noteq> yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "have \"xb2 = yb2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xb2 = yb2", "by (auto intro: IFind simp add: 0 1 True roifex_set_var_subtree[OF _ y'_def]\n                                        roifex_set_var_subtree[OF _ x_def, symmetric])"], ["proof (state)\nthis:\n  xb2 = yb2\n\ngoal (2 subgoals):\n 1. xv = yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2\n 2. xv \\<noteq> yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "ultimately"], ["proof (chain)\npicking this:\n  xb1 = yb1\n  xb2 = yb2", "show ?thesis"], ["proof (prove)\nusing this:\n  xb1 = yb1\n  xb2 = yb2\n\ngoal (1 subgoal):\n 1. IF xv xb1 xb2 = IF yv yb1 yb2", "using True"], ["proof (prove)\nusing this:\n  xb1 = yb1\n  xb2 = yb2\n  xv = yv\n\ngoal (1 subgoal):\n 1. IF xv xb1 xb2 = IF yv yb1 yb2", "by simp"], ["proof (state)\nthis:\n  IF xv xb1 xb2 = IF yv yb1 yb2\n\ngoal (1 subgoal):\n 1. xv \\<noteq> yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xv \\<noteq> yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "case False"], ["proof (state)\nthis:\n  xv \\<noteq> yv\n\ngoal (1 subgoal):\n 1. xv \\<noteq> yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "note uneq = False"], ["proof (state)\nthis:\n  xv \\<noteq> yv\n\ngoal (1 subgoal):\n 1. xv \\<noteq> yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. IF xv xb1 xb2 = IF yv yb1 yb2", "proof(cases \"xv < yv\")"], ["proof (state)\ngoal (2 subgoals):\n 1. xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2\n 2. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "case True"], ["proof (state)\nthis:\n  xv < yv\n\ngoal (2 subgoals):\n 1. xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2\n 2. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from ifex_ordered_not_part[OF _ y'_def True] ifex_var_noinfluence[of xv y' _ \"True\"]\n               0(6) roifex_set_var_subtree(1)[OF 0(5) x_def] 1"], ["proof (chain)\npicking this:\n  ifex_ordered y' \\<Longrightarrow> xv \\<notin> ifex_var_set y'\n  xv \\<notin> ifex_var_set y' \\<Longrightarrow>\n  val_ifex y' (?ass(xv := True)) = val_ifex y' ?ass\n  ro_ifex y'\n  val_ifex x (?ass(xv := True)) = val_ifex xb1 ?ass\n  val_ifex x ?ass = val_ifex y' ?ass", "have 5: \"\\<And>ass. val_ifex xb1 ass = val_ifex x ass\""], ["proof (prove)\nusing this:\n  ifex_ordered y' \\<Longrightarrow> xv \\<notin> ifex_var_set y'\n  xv \\<notin> ifex_var_set y' \\<Longrightarrow>\n  val_ifex y' (?ass(xv := True)) = val_ifex y' ?ass\n  ro_ifex y'\n  val_ifex x (?ass(xv := True)) = val_ifex xb1 ?ass\n  val_ifex x ?ass = val_ifex y' ?ass\n\ngoal (1 subgoal):\n 1. \\<And>ass. val_ifex xb1 ass = val_ifex x ass", "by blast"], ["proof (state)\nthis:\n  val_ifex xb1 ?ass = val_ifex x ?ass\n\ngoal (2 subgoals):\n 1. xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2\n 2. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from 0(5) ifex_var_noinfluence[of xv xb1 _ \"False\"] \n                    ifex_var_noinfluence[of xv xb2 _ \"False\"] \n               x_def"], ["proof (chain)\npicking this:\n  ro_ifex x\n  xv \\<notin> ifex_var_set xb1 \\<Longrightarrow>\n  val_ifex xb1 (?ass(xv := False)) = val_ifex xb1 ?ass\n  xv \\<notin> ifex_var_set xb2 \\<Longrightarrow>\n  val_ifex xb2 (?ass(xv := False)) = val_ifex xb2 ?ass\n  x = IF xv xb1 xb2", "have \"\\<And>ass. val_ifex xb1 (ass(xv := False)) = val_ifex xb1 ass\"\n                 \"\\<And>ass. val_ifex xb2 (ass(xv := False)) = val_ifex xb2 ass\""], ["proof (prove)\nusing this:\n  ro_ifex x\n  xv \\<notin> ifex_var_set xb1 \\<Longrightarrow>\n  val_ifex xb1 (?ass(xv := False)) = val_ifex xb1 ?ass\n  xv \\<notin> ifex_var_set xb2 \\<Longrightarrow>\n  val_ifex xb2 (?ass(xv := False)) = val_ifex xb2 ?ass\n  x = IF xv xb1 xb2\n\ngoal (1 subgoal):\n 1. (\\<And>ass. val_ifex xb1 (ass(xv := False)) = val_ifex xb1 ass) &&&\n    (\\<And>ass. val_ifex xb2 (ass(xv := False)) = val_ifex xb2 ass)", "by auto"], ["proof (state)\nthis:\n  val_ifex xb1 (?ass(xv := False)) = val_ifex xb1 ?ass\n  val_ifex xb2 (?ass(xv := False)) = val_ifex xb2 ?ass\n\ngoal (2 subgoals):\n 1. xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2\n 2. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from 5 this roifex_set_var_subtree(2)[OF 0(5) x_def]"], ["proof (chain)\npicking this:\n  val_ifex xb1 ?ass = val_ifex x ?ass\n  val_ifex xb1 (?ass(xv := False)) = val_ifex xb1 ?ass\n  val_ifex xb2 (?ass(xv := False)) = val_ifex xb2 ?ass\n  val_ifex x (?ass(xv := False)) = val_ifex xb2 ?ass", "have \"\\<And>ass. val_ifex xb1 ass = val_ifex xb2 ass\""], ["proof (prove)\nusing this:\n  val_ifex xb1 ?ass = val_ifex x ?ass\n  val_ifex xb1 (?ass(xv := False)) = val_ifex xb1 ?ass\n  val_ifex xb2 (?ass(xv := False)) = val_ifex xb2 ?ass\n  val_ifex x (?ass(xv := False)) = val_ifex xb2 ?ass\n\ngoal (1 subgoal):\n 1. \\<And>ass. val_ifex xb1 ass = val_ifex xb2 ass", "by presburger"], ["proof (state)\nthis:\n  val_ifex xb1 ?ass = val_ifex xb2 ?ass\n\ngoal (2 subgoals):\n 1. xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2\n 2. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from IFind(1)[OF 0(1) 0(2)] this IFind(3)"], ["proof (chain)\npicking this:\n  (\\<And>ass. val_ifex xb1 ass = val_ifex xb2 ass) \\<Longrightarrow>\n  xb1 = xb2\n  val_ifex xb1 ?ass = val_ifex xb2 ?ass\n  ro_ifex (IF xv xb1 xb2)", "have \"False\""], ["proof (prove)\nusing this:\n  (\\<And>ass. val_ifex xb1 ass = val_ifex xb2 ass) \\<Longrightarrow>\n  xb1 = xb2\n  val_ifex xb1 ?ass = val_ifex xb2 ?ass\n  ro_ifex (IF xv xb1 xb2)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2\n 2. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from this"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. IF xv xb1 xb2 = IF yv yb1 yb2", ".."], ["proof (state)\nthis:\n  IF xv xb1 xb2 = IF yv yb1 yb2\n\ngoal (1 subgoal):\n 1. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "case False"], ["proof (state)\nthis:\n  \\<not> xv < yv\n\ngoal (1 subgoal):\n 1. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from this uneq"], ["proof (chain)\npicking this:\n  \\<not> xv < yv\n  xv \\<noteq> yv", "have 6: \"yv < xv\""], ["proof (prove)\nusing this:\n  \\<not> xv < yv\n  xv \\<noteq> yv\n\ngoal (1 subgoal):\n 1. yv < xv", "by auto"], ["proof (state)\nthis:\n  yv < xv\n\ngoal (1 subgoal):\n 1. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from ifex_ordered_not_part[OF _ x_def this]\n                     ifex_var_noinfluence[of yv x] 0(5)"], ["proof (chain)\npicking this:\n  ifex_ordered x \\<Longrightarrow> yv \\<notin> ifex_var_set x\n  yv \\<notin> ifex_var_set x \\<Longrightarrow>\n  val_ifex x (?ass(yv := ?val)) = val_ifex x ?ass\n  ro_ifex x", "have  \"\\<And>ass val. val_ifex x (ass(yv := val)) = val_ifex x ass\" \n                   \"\\<And>ass val. val_ifex x (ass(yv := val)) =  val_ifex x ass\""], ["proof (prove)\nusing this:\n  ifex_ordered x \\<Longrightarrow> yv \\<notin> ifex_var_set x\n  yv \\<notin> ifex_var_set x \\<Longrightarrow>\n  val_ifex x (?ass(yv := ?val)) = val_ifex x ?ass\n  ro_ifex x\n\ngoal (1 subgoal):\n 1. (\\<And>ass val. val_ifex x (ass(yv := val)) = val_ifex x ass) &&&\n    (\\<And>ass val. val_ifex x (ass(yv := val)) = val_ifex x ass)", "by auto"], ["proof (state)\nthis:\n  val_ifex x (?ass(yv := ?val)) = val_ifex x ?ass\n  val_ifex x (?ass(yv := ?val)) = val_ifex x ?ass\n\ngoal (1 subgoal):\n 1. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from this roifex_set_var_subtree[OF 0(5) x_def]"], ["proof (chain)\npicking this:\n  val_ifex x (?ass(yv := ?val)) = val_ifex x ?ass\n  val_ifex x (?ass(yv := ?val)) = val_ifex x ?ass\n  val_ifex x (?ass(xv := True)) = val_ifex xb1 ?ass\n  val_ifex x (?ass(xv := False)) = val_ifex xb2 ?ass", "have \"\\<And>ass val. val_ifex x (ass(xv := True, yv := val)) = val_ifex xb1 ass\"\n                 \"\\<And>ass val. val_ifex x (ass(xv := False, yv := val)) = val_ifex xb2 ass\""], ["proof (prove)\nusing this:\n  val_ifex x (?ass(yv := ?val)) = val_ifex x ?ass\n  val_ifex x (?ass(yv := ?val)) = val_ifex x ?ass\n  val_ifex x (?ass(xv := True)) = val_ifex xb1 ?ass\n  val_ifex x (?ass(xv := False)) = val_ifex xb2 ?ass\n\ngoal (1 subgoal):\n 1. (\\<And>ass val.\n        val_ifex x (ass(xv := True, yv := val)) = val_ifex xb1 ass) &&&\n    (\\<And>ass val.\n        val_ifex x (ass(xv := False, yv := val)) = val_ifex xb2 ass)", "by blast+"], ["proof (state)\nthis:\n  val_ifex x (?ass(xv := True, yv := ?val)) = val_ifex xb1 ?ass\n  val_ifex x (?ass(xv := False, yv := ?val)) = val_ifex xb2 ?ass\n\ngoal (1 subgoal):\n 1. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from ifex_ordered_not_part[OF _ x_def 6] 0(5) ifex_var_noinfluence[of yv x] 1\n               roifex_set_var_subtree[OF 0(6) y'_def]"], ["proof (chain)\npicking this:\n  ifex_ordered x \\<Longrightarrow> yv \\<notin> ifex_var_set x\n  ro_ifex x\n  yv \\<notin> ifex_var_set x \\<Longrightarrow>\n  val_ifex x (?ass(yv := ?val)) = val_ifex x ?ass\n  val_ifex x ?ass = val_ifex y' ?ass\n  val_ifex y' (?ass(yv := True)) = val_ifex yb1 ?ass\n  val_ifex y' (?ass(yv := False)) = val_ifex yb2 ?ass", "have \"\\<And>ass val. val_ifex x ass = val_ifex yb1 ass\"\n                 \"\\<And>ass val. val_ifex x ass = val_ifex yb2 ass\""], ["proof (prove)\nusing this:\n  ifex_ordered x \\<Longrightarrow> yv \\<notin> ifex_var_set x\n  ro_ifex x\n  yv \\<notin> ifex_var_set x \\<Longrightarrow>\n  val_ifex x (?ass(yv := ?val)) = val_ifex x ?ass\n  val_ifex x ?ass = val_ifex y' ?ass\n  val_ifex y' (?ass(yv := True)) = val_ifex yb1 ?ass\n  val_ifex y' (?ass(yv := False)) = val_ifex yb2 ?ass\n\ngoal (1 subgoal):\n 1. (\\<And>ass val. val_ifex x ass = val_ifex yb1 ass) &&&\n    (\\<And>ass val. val_ifex x ass = val_ifex yb2 ass)", "by blast+"], ["proof (state)\nthis:\n  val_ifex x ?ass = val_ifex yb1 ?ass\n  val_ifex x ?ass = val_ifex yb2 ?ass\n\ngoal (1 subgoal):\n 1. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from this IF(1,2) x_def 0(5) y'_def 0(6)"], ["proof (chain)\npicking this:\n  val_ifex x ?ass = val_ifex yb1 ?ass\n  val_ifex x ?ass = val_ifex yb2 ?ass\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb1;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb1 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb1\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb2;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb2 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb2\n  x = IF xv xb1 xb2\n  ro_ifex x\n  y' = IF yv yb1 yb2\n  ro_ifex y'", "have \"x = yb1\" \"x = yb2\""], ["proof (prove)\nusing this:\n  val_ifex x ?ass = val_ifex yb1 ?ass\n  val_ifex x ?ass = val_ifex yb2 ?ass\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb1;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb1 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb1\n  \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex yb2;\n   \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex yb2 ass\\<rbrakk>\n  \\<Longrightarrow> IF xv xb1 xb2 = yb2\n  x = IF xv xb1 xb2\n  ro_ifex x\n  y' = IF yv yb1 yb2\n  ro_ifex y'\n\ngoal (1 subgoal):\n 1. x = yb1 &&& x = yb2", "by fastforce+"], ["proof (state)\nthis:\n  x = yb1\n  x = yb2\n\ngoal (1 subgoal):\n 1. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from this"], ["proof (chain)\npicking this:\n  x = yb1\n  x = yb2", "have \"yb1 = yb2\""], ["proof (prove)\nusing this:\n  x = yb1\n  x = yb2\n\ngoal (1 subgoal):\n 1. yb1 = yb2", "by auto"], ["proof (state)\nthis:\n  yb1 = yb2\n\ngoal (1 subgoal):\n 1. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "from 0(6) y'_def this"], ["proof (chain)\npicking this:\n  ro_ifex y'\n  y' = IF yv yb1 yb2\n  yb1 = yb2", "have \"False\""], ["proof (prove)\nusing this:\n  ro_ifex y'\n  y' = IF yv yb1 yb2\n  yb1 = yb2\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> xv < yv \\<Longrightarrow> IF xv xb1 xb2 = IF yv yb1 yb2", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. IF xv xb1 xb2 = IF yv yb1 yb2", ".."], ["proof (state)\nthis:\n  IF xv xb1 xb2 = IF yv yb1 yb2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  IF xv xb1 xb2 = IF yv yb1 yb2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  IF xv xb1 xb2 = IF yv yb1 yb2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Trueif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Trueif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Trueif\n 2. \\<lbrakk>ro_ifex (IF xv xb1 xb2); ro_ifex Falseif;\n     \\<And>ass. val_ifex (IF xv xb1 xb2) ass = val_ifex Falseif ass\\<rbrakk>\n    \\<Longrightarrow> IF xv xb1 xb2 = Falseif", "qed (fastforce intro: roifex_Falseif_unique roifex_Trueif_unique)+"], ["proof (state)\nthis:\n  IF xv xb1 xb2 = y\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>ro_ifex Trueif; ro_ifex y;\n        \\<And>ass. val_ifex Trueif ass = val_ifex y ass\\<rbrakk>\n       \\<Longrightarrow> Trueif = y\n 2. \\<And>y.\n       \\<lbrakk>ro_ifex Falseif; ro_ifex y;\n        \\<And>ass. val_ifex Falseif ass = val_ifex y ass\\<rbrakk>\n       \\<Longrightarrow> Falseif = y", "qed (fastforce intro: roifex_Falseif_unique[symmetric] roifex_Trueif_unique[symmetric])+"], ["", "theorem bf_ifex_rel_single: \"single_valued bf_ifex_rel\" \"single_valued (bf_ifex_rel\\<inverse>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued bf_ifex_rel &&& single_valued (bf_ifex_rel\\<inverse>)", "unfolding single_valued_def bf_ifex_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       (x, y)\n       \\<in> {(a, b).\n              (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n              ro_ifex b} \\<longrightarrow>\n       (\\<forall>z.\n           (x, z)\n           \\<in> {(a, b).\n                  (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n                  ro_ifex b} \\<longrightarrow>\n           y = z) &&&\n    \\<forall>x y.\n       (x, y)\n       \\<in> {(a, b).\n              (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n              ro_ifex b}\\<inverse> \\<longrightarrow>\n       (\\<forall>z.\n           (x, z)\n           \\<in> {(a, b).\n                  (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n                  ro_ifex b}\\<inverse> \\<longrightarrow>\n           y = z)", "using ro_ifex_unique"], ["proof (prove)\nusing this:\n  \\<lbrakk>ro_ifex ?x; ro_ifex ?y;\n   \\<And>ass. val_ifex ?x ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       (x, y)\n       \\<in> {(a, b).\n              (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n              ro_ifex b} \\<longrightarrow>\n       (\\<forall>z.\n           (x, z)\n           \\<in> {(a, b).\n                  (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n                  ro_ifex b} \\<longrightarrow>\n           y = z) &&&\n    \\<forall>x y.\n       (x, y)\n       \\<in> {(a, b).\n              (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n              ro_ifex b}\\<inverse> \\<longrightarrow>\n       (\\<forall>z.\n           (x, z)\n           \\<in> {(a, b).\n                  (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n                  ro_ifex b}\\<inverse> \\<longrightarrow>\n           y = z)", "by auto"], ["", "lemma bf_ifex_eq: \"(af, at) \\<in> bf_ifex_rel \\<Longrightarrow> (bf, bt) \\<in> bf_ifex_rel \\<Longrightarrow> (af = bf) \\<longleftrightarrow> (at = bt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(af, at) \\<in> bf_ifex_rel; (bf, bt) \\<in> bf_ifex_rel\\<rbrakk>\n    \\<Longrightarrow> (af = bf) = (at = bt)", "unfolding bf_ifex_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(af, at)\n             \\<in> {(a, b).\n                    (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n                    ro_ifex b};\n     (bf, bt)\n     \\<in> {(a, b).\n            (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n            ro_ifex b}\\<rbrakk>\n    \\<Longrightarrow> (af = bf) = (at = bt)", "using ro_ifex_unique"], ["proof (prove)\nusing this:\n  \\<lbrakk>ro_ifex ?x; ro_ifex ?y;\n   \\<And>ass. val_ifex ?x ass = val_ifex ?y ass\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(af, at)\n             \\<in> {(a, b).\n                    (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n                    ro_ifex b};\n     (bf, bt)\n     \\<in> {(a, b).\n            (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n            ro_ifex b}\\<rbrakk>\n    \\<Longrightarrow> (af = bf) = (at = bt)", "by auto"], ["", "lemma nonempty_if_var_set: \"ifex_vars (IF v t e) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_vars (IF v t e) \\<noteq> []", "by auto"], ["", "fun restrict where\n  \"restrict (IF v t e) var val = (let rt = restrict t var val; re = restrict e var val in\n                   (if v = var then (if val then rt else re) else (IF v rt re)))\" |\n  \"restrict i _ _ = i\""], ["", "declare Let_def[simp]"], ["", "lemma not_element_restrict: \"var \\<notin> ifex_var_set (restrict b var val)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<notin> ifex_var_set (restrict b var val)", "by (induction b) auto"], ["", "lemma restrict_assignment: \"val_ifex b (ass(var := val)) \\<longleftrightarrow> val_ifex (restrict b var val) ass\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_ifex b (ass(var := val)) = val_ifex (restrict b var val) ass", "by (induction b) auto"], ["", "lemma restrict_variables_subset: \"ifex_var_set (restrict b var val) \\<subseteq> ifex_var_set b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_var_set (restrict b var val) \\<subseteq> ifex_var_set b", "by (induction b) auto"], ["", "lemma restrict_ifex_ordered_invar: \"ifex_ordered b \\<Longrightarrow> ifex_ordered (restrict b var val)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_ordered b \\<Longrightarrow> ifex_ordered (restrict b var val)", "using restrict_variables_subset"], ["proof (prove)\nusing this:\n  ifex_var_set (restrict ?b ?var ?val) \\<subseteq> ifex_var_set ?b\n\ngoal (1 subgoal):\n 1. ifex_ordered b \\<Longrightarrow> ifex_ordered (restrict b var val)", "by (induction b) (fastforce)+"], ["", "lemma restrict_val_invar: \"\\<forall>ass. a ass = val_ifex b ass \\<Longrightarrow>\n                           (bf_restrict var val a) ass = val_ifex (restrict b var val) ass\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ass. a ass = val_ifex b ass \\<Longrightarrow>\n    bf_restrict var val a ass = val_ifex (restrict b var val) ass", "unfolding bf_restrict_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ass. a ass = val_ifex b ass \\<Longrightarrow>\n    a (ass(var := val)) = val_ifex (restrict b var val) ass", "using restrict_assignment"], ["proof (prove)\nusing this:\n  val_ifex ?b (?ass(?var := ?val)) = val_ifex (restrict ?b ?var ?val) ?ass\n\ngoal (1 subgoal):\n 1. \\<forall>ass. a ass = val_ifex b ass \\<Longrightarrow>\n    a (ass(var := val)) = val_ifex (restrict b var val) ass", "by simp"], ["", "lemma restrict_untouched_id: \"x \\<notin> ifex_var_set t \\<Longrightarrow> restrict t x val = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> ifex_var_set t \\<Longrightarrow> restrict t x val = t", "(* inversion should hold, too\\<dots> *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> ifex_var_set t \\<Longrightarrow> restrict t x val = t", "proof(induction t)"], ["proof (state)\ngoal (3 subgoals):\n 1. x \\<notin> ifex_var_set Trueif \\<Longrightarrow>\n    restrict Trueif x val = Trueif\n 2. x \\<notin> ifex_var_set Falseif \\<Longrightarrow>\n    restrict Falseif x val = Falseif\n 3. \\<And>x1 t1 t2.\n       \\<lbrakk>x \\<notin> ifex_var_set t1 \\<Longrightarrow>\n                restrict t1 x val = t1;\n        x \\<notin> ifex_var_set t2 \\<Longrightarrow> restrict t2 x val = t2;\n        x \\<notin> ifex_var_set (IF x1 t1 t2)\\<rbrakk>\n       \\<Longrightarrow> restrict (IF x1 t1 t2) x val = IF x1 t1 t2", "case (IF v t e)"], ["proof (state)\nthis:\n  x \\<notin> ifex_var_set t \\<Longrightarrow> restrict t x val = t\n  x \\<notin> ifex_var_set e \\<Longrightarrow> restrict e x val = e\n  x \\<notin> ifex_var_set (IF v t e)\n\ngoal (3 subgoals):\n 1. x \\<notin> ifex_var_set Trueif \\<Longrightarrow>\n    restrict Trueif x val = Trueif\n 2. x \\<notin> ifex_var_set Falseif \\<Longrightarrow>\n    restrict Falseif x val = Falseif\n 3. \\<And>x1 t1 t2.\n       \\<lbrakk>x \\<notin> ifex_var_set t1 \\<Longrightarrow>\n                restrict t1 x val = t1;\n        x \\<notin> ifex_var_set t2 \\<Longrightarrow> restrict t2 x val = t2;\n        x \\<notin> ifex_var_set (IF x1 t1 t2)\\<rbrakk>\n       \\<Longrightarrow> restrict (IF x1 t1 t2) x val = IF x1 t1 t2", "from IF.prems"], ["proof (chain)\npicking this:\n  x \\<notin> ifex_var_set (IF v t e)", "have \"x \\<notin> ifex_var_set t\" \"x \\<notin> ifex_var_set e\""], ["proof (prove)\nusing this:\n  x \\<notin> ifex_var_set (IF v t e)\n\ngoal (1 subgoal):\n 1. x \\<notin> ifex_var_set t &&& x \\<notin> ifex_var_set e", "by simp_all"], ["proof (state)\nthis:\n  x \\<notin> ifex_var_set t\n  x \\<notin> ifex_var_set e\n\ngoal (3 subgoals):\n 1. x \\<notin> ifex_var_set Trueif \\<Longrightarrow>\n    restrict Trueif x val = Trueif\n 2. x \\<notin> ifex_var_set Falseif \\<Longrightarrow>\n    restrict Falseif x val = Falseif\n 3. \\<And>x1 t1 t2.\n       \\<lbrakk>x \\<notin> ifex_var_set t1 \\<Longrightarrow>\n                restrict t1 x val = t1;\n        x \\<notin> ifex_var_set t2 \\<Longrightarrow> restrict t2 x val = t2;\n        x \\<notin> ifex_var_set (IF x1 t1 t2)\\<rbrakk>\n       \\<Longrightarrow> restrict (IF x1 t1 t2) x val = IF x1 t1 t2", "note mIH = IF.IH(1)[OF this(1)] IF.IH(2)[OF this(2)]"], ["proof (state)\nthis:\n  restrict t x val = t\n  restrict e x val = e\n\ngoal (3 subgoals):\n 1. x \\<notin> ifex_var_set Trueif \\<Longrightarrow>\n    restrict Trueif x val = Trueif\n 2. x \\<notin> ifex_var_set Falseif \\<Longrightarrow>\n    restrict Falseif x val = Falseif\n 3. \\<And>x1 t1 t2.\n       \\<lbrakk>x \\<notin> ifex_var_set t1 \\<Longrightarrow>\n                restrict t1 x val = t1;\n        x \\<notin> ifex_var_set t2 \\<Longrightarrow> restrict t2 x val = t2;\n        x \\<notin> ifex_var_set (IF x1 t1 t2)\\<rbrakk>\n       \\<Longrightarrow> restrict (IF x1 t1 t2) x val = IF x1 t1 t2", "from IF.prems"], ["proof (chain)\npicking this:\n  x \\<notin> ifex_var_set (IF v t e)", "have \"x \\<noteq> v\""], ["proof (prove)\nusing this:\n  x \\<notin> ifex_var_set (IF v t e)\n\ngoal (1 subgoal):\n 1. x \\<noteq> v", "by simp"], ["proof (state)\nthis:\n  x \\<noteq> v\n\ngoal (3 subgoals):\n 1. x \\<notin> ifex_var_set Trueif \\<Longrightarrow>\n    restrict Trueif x val = Trueif\n 2. x \\<notin> ifex_var_set Falseif \\<Longrightarrow>\n    restrict Falseif x val = Falseif\n 3. \\<And>x1 t1 t2.\n       \\<lbrakk>x \\<notin> ifex_var_set t1 \\<Longrightarrow>\n                restrict t1 x val = t1;\n        x \\<notin> ifex_var_set t2 \\<Longrightarrow> restrict t2 x val = t2;\n        x \\<notin> ifex_var_set (IF x1 t1 t2)\\<rbrakk>\n       \\<Longrightarrow> restrict (IF x1 t1 t2) x val = IF x1 t1 t2", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<noteq> v\n\ngoal (1 subgoal):\n 1. restrict (IF v t e) x val = IF v t e", "unfolding restrict.simps Let_def mIH"], ["proof (prove)\nusing this:\n  x \\<noteq> v\n\ngoal (1 subgoal):\n 1. (if v = x then if val then t else e else IF v t e) = IF v t e", "by simp"], ["proof (state)\nthis:\n  restrict (IF v t e) x val = IF v t e\n\ngoal (2 subgoals):\n 1. x \\<notin> ifex_var_set Trueif \\<Longrightarrow>\n    restrict Trueif x val = Trueif\n 2. x \\<notin> ifex_var_set Falseif \\<Longrightarrow>\n    restrict Falseif x val = Falseif", "qed simp_all"], ["", "fun ifex_top_var :: \"'a ifex \\<Rightarrow> 'a option\" where\n  \"ifex_top_var (IF v t e) = Some v\" |\n  \"ifex_top_var _ = None\""], ["", "fun restrict_top :: \"('a :: linorder) ifex \\<Rightarrow> 'a \\<Rightarrow> bool \\<Rightarrow> 'a ifex\" where\n  \"restrict_top (IF v t e) var val = (if v = var then (if val then t else e) else (IF v t e))\" |\n  \"restrict_top i _ _ = i\""], ["", "(* the following four are might be useful eventually\\<dots> *)"], ["", "lemma restrict_top_id: \"ifex_ordered e \\<Longrightarrow> ifex_top_var e = Some v \\<Longrightarrow> v' < v \\<Longrightarrow> restrict_top e v' val = e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_ordered e; ifex_top_var e = Some v; v' < v\\<rbrakk>\n    \\<Longrightarrow> restrict_top e v' val = e", "by(induction e) auto"], ["", "lemma restrict_id: \"ifex_ordered e \\<Longrightarrow> ifex_top_var e = Some v \\<Longrightarrow> v' < v \\<Longrightarrow> restrict e v' val = e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_ordered e; ifex_top_var e = Some v; v' < v\\<rbrakk>\n    \\<Longrightarrow> restrict e v' val = e", "proof(induction e arbitrary: v)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>ifex_ordered Trueif; ifex_top_var Trueif = Some v;\n        v' < v\\<rbrakk>\n       \\<Longrightarrow> restrict Trueif v' val = Trueif\n 2. \\<And>v.\n       \\<lbrakk>ifex_ordered Falseif; ifex_top_var Falseif = Some v;\n        v' < v\\<rbrakk>\n       \\<Longrightarrow> restrict Falseif v' val = Falseif\n 3. \\<And>x1 e1 e2 v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>ifex_ordered e1; ifex_top_var e1 = Some v;\n                    v' < v\\<rbrakk>\n                   \\<Longrightarrow> restrict e1 v' val = e1;\n        \\<And>v.\n           \\<lbrakk>ifex_ordered e2; ifex_top_var e2 = Some v;\n            v' < v\\<rbrakk>\n           \\<Longrightarrow> restrict e2 v' val = e2;\n        ifex_ordered (IF x1 e1 e2); ifex_top_var (IF x1 e1 e2) = Some v;\n        v' < v\\<rbrakk>\n       \\<Longrightarrow> restrict (IF x1 e1 e2) v' val = IF x1 e1 e2", "case (IF w e1 e2)"], ["proof (state)\nthis:\n  \\<lbrakk>ifex_ordered e1; ifex_top_var e1 = Some ?v; v' < ?v\\<rbrakk>\n  \\<Longrightarrow> restrict e1 v' val = e1\n  \\<lbrakk>ifex_ordered e2; ifex_top_var e2 = Some ?v; v' < ?v\\<rbrakk>\n  \\<Longrightarrow> restrict e2 v' val = e2\n  ifex_ordered (IF w e1 e2)\n  ifex_top_var (IF w e1 e2) = Some v\n  v' < v\n\ngoal (3 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>ifex_ordered Trueif; ifex_top_var Trueif = Some v;\n        v' < v\\<rbrakk>\n       \\<Longrightarrow> restrict Trueif v' val = Trueif\n 2. \\<And>v.\n       \\<lbrakk>ifex_ordered Falseif; ifex_top_var Falseif = Some v;\n        v' < v\\<rbrakk>\n       \\<Longrightarrow> restrict Falseif v' val = Falseif\n 3. \\<And>x1 e1 e2 v.\n       \\<lbrakk>\\<And>v.\n                   \\<lbrakk>ifex_ordered e1; ifex_top_var e1 = Some v;\n                    v' < v\\<rbrakk>\n                   \\<Longrightarrow> restrict e1 v' val = e1;\n        \\<And>v.\n           \\<lbrakk>ifex_ordered e2; ifex_top_var e2 = Some v;\n            v' < v\\<rbrakk>\n           \\<Longrightarrow> restrict e2 v' val = e2;\n        ifex_ordered (IF x1 e1 e2); ifex_top_var (IF x1 e1 e2) = Some v;\n        v' < v\\<rbrakk>\n       \\<Longrightarrow> restrict (IF x1 e1 e2) v' val = IF x1 e1 e2", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>ifex_ordered e1; ifex_top_var e1 = Some ?v; v' < ?v\\<rbrakk>\n  \\<Longrightarrow> restrict e1 v' val = e1\n  \\<lbrakk>ifex_ordered e2; ifex_top_var e2 = Some ?v; v' < ?v\\<rbrakk>\n  \\<Longrightarrow> restrict e2 v' val = e2\n  ifex_ordered (IF w e1 e2)\n  ifex_top_var (IF w e1 e2) = Some v\n  v' < v\n\ngoal (1 subgoal):\n 1. restrict (IF w e1 e2) v' val = IF w e1 e2", "by (cases e1; cases e2; force)"], ["proof (state)\nthis:\n  restrict (IF w e1 e2) v' val = IF w e1 e2\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       \\<lbrakk>ifex_ordered Trueif; ifex_top_var Trueif = Some v;\n        v' < v\\<rbrakk>\n       \\<Longrightarrow> restrict Trueif v' val = Trueif\n 2. \\<And>v.\n       \\<lbrakk>ifex_ordered Falseif; ifex_top_var Falseif = Some v;\n        v' < v\\<rbrakk>\n       \\<Longrightarrow> restrict Falseif v' val = Falseif", "qed(auto)"], ["", "lemma restrict_top_IF_id: \"ifex_ordered (IF v t e) \\<Longrightarrow> v' < v \\<Longrightarrow> restrict_top (IF v t e) v' val = (IF v t e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_ordered (IF v t e); v' < v\\<rbrakk>\n    \\<Longrightarrow> restrict_top (IF v t e) v' val = IF v t e", "using restrict_top_id"], ["proof (prove)\nusing this:\n  \\<lbrakk>ifex_ordered ?e; ifex_top_var ?e = Some ?v; ?v' < ?v\\<rbrakk>\n  \\<Longrightarrow> restrict_top ?e ?v' ?val = ?e\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_ordered (IF v t e); v' < v\\<rbrakk>\n    \\<Longrightarrow> restrict_top (IF v t e) v' val = IF v t e", "by auto"], ["", "lemma restrict_IF_id: assumes o: \"ifex_ordered (IF v t e)\" assumes le: \"v' < v\"\n  shows \"restrict (IF v t e) v' val = (IF v t e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict (IF v t e) v' val = IF v t e", "using restrict_id[OF o, unfolded ifex_top_var.simps, OF refl le, of val]"], ["proof (prove)\nusing this:\n  restrict (IF v t e) v' val = IF v t e\n\ngoal (1 subgoal):\n 1. restrict (IF v t e) v' val = IF v t e", "."], ["", "lemma restrict_top_eq: \"ifex_ordered (IF v t e) \\<Longrightarrow> restrict (IF v t e) v val = restrict_top (IF v t e) v val\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_ordered (IF v t e) \\<Longrightarrow>\n    restrict (IF v t e) v val = restrict_top (IF v t e) v val", "using restrict_untouched_id"], ["proof (prove)\nusing this:\n  ?x \\<notin> ifex_var_set ?t \\<Longrightarrow> restrict ?t ?x ?val = ?t\n\ngoal (1 subgoal):\n 1. ifex_ordered (IF v t e) \\<Longrightarrow>\n    restrict (IF v t e) v val = restrict_top (IF v t e) v val", "by auto"], ["", "lemma restrict_top_ifex_ordered_invar: \"ifex_ordered b \\<Longrightarrow> ifex_ordered (restrict_top b var val)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_ordered b \\<Longrightarrow> ifex_ordered (restrict_top b var val)", "by (induction b) simp_all"], ["", "fun lowest_tops :: \"('a :: linorder) ifex list \\<Rightarrow> 'a option\" where\n  \"lowest_tops [] = None\" |\n  \"lowest_tops ((IF v _ _)#r) = Some (case lowest_tops r of Some u \\<Rightarrow> (min u v) | None \\<Rightarrow> v)\" |\n  \"lowest_tops (_#r) = lowest_tops r\""], ["", "lemma lowest_tops_NoneD: \"lowest_tops k = None \\<Longrightarrow> (\\<not>(\\<exists>v t e. ((IF v t e) \\<in> set k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowest_tops k = None \\<Longrightarrow>\n    \\<nexists>v t e. IF v t e \\<in> set k", "by (induction k rule: lowest_tops.induct) simp_all"], ["", "lemma lowest_tops_in: \"lowest_tops k = Some l \\<Longrightarrow> l \\<in> set (concat (map ifex_vars k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowest_tops k = Some l \\<Longrightarrow>\n    l \\<in> set (concat (map ifex_vars k))", "by(induction k rule: lowest_tops.induct) (simp_all split: option.splits if_splits add: min_def)"], ["", "definition \"IFC v t e \\<equiv> (if t = e then t else IF v t e)\""], ["", "function ifex_ite :: \"'a ifex \\<Rightarrow> 'a ifex \\<Rightarrow> 'a ifex \\<Rightarrow> ('a :: linorder) ifex\" where\n  \"ifex_ite i t e = (case lowest_tops [i, t, e] of Some x \\<Rightarrow> \n                         (IFC x (ifex_ite (restrict_top i x True) (restrict_top t x True) (restrict_top e x True))\n                               (ifex_ite (restrict_top i x False) (restrict_top t x False) (restrict_top e x False)))\n                     | None \\<Rightarrow> (case i of Trueif \\<Rightarrow> t | Falseif \\<Rightarrow> e))\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>i t e. x = (i, t, e) \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>i t e ia ta ea.\n       (i, t, e) = (ia, ta, ea) \\<Longrightarrow>\n       (case lowest_tops [i, t, e] of\n        None \\<Rightarrow>\n          case i of Trueif \\<Rightarrow> t | Falseif \\<Rightarrow> e\n        | Some x \\<Rightarrow>\n            IFC x\n             (ifex_ite_sumC\n               (restrict_top i x True, restrict_top t x True,\n                restrict_top e x True))\n             (ifex_ite_sumC\n               (restrict_top i x False, restrict_top t x False,\n                restrict_top e x False))) =\n       (case lowest_tops [ia, ta, ea] of\n        None \\<Rightarrow>\n          case ia of Trueif \\<Rightarrow> ta | Falseif \\<Rightarrow> ea\n        | Some x \\<Rightarrow>\n            IFC x\n             (ifex_ite_sumC\n               (restrict_top ia x True, restrict_top ta x True,\n                restrict_top ea x True))\n             (ifex_ite_sumC\n               (restrict_top ia x False, restrict_top ta x False,\n                restrict_top ea x False)))", "by pat_completeness auto"], ["", "lemma restrict_size_le: \"size (restrict_top k var val) \\<le> size k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (restrict_top k var val) \\<le> size k", "by (induction k, auto)"], ["", "lemma restrict_size_less: \"ifex_top_var k = Some var \\<Longrightarrow> size (restrict_top k var val) < size k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_top_var k = Some var \\<Longrightarrow>\n    size (restrict_top k var val) < size k", "by (induction k, auto)"], ["", "lemma lowest_tops_cases:\n\"lowest_tops [i, t, e] = Some var \\<Longrightarrow> ifex_top_var i = Some var \\<or> ifex_top_var t\n                                      = Some var \\<or> ifex_top_var e = Some var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowest_tops [i, t, e] = Some var \\<Longrightarrow>\n    ifex_top_var i = Some var \\<or>\n    ifex_top_var t = Some var \\<or> ifex_top_var e = Some var", "by ((cases i; cases t; cases e), auto simp add: min_def)"], ["", "lemma lowest_tops_lowest: \"lowest_tops es = Some a \\<Longrightarrow> e \\<in> set es \\<Longrightarrow> ifex_ordered e \\<Longrightarrow> v \\<in> ifex_var_set e \\<Longrightarrow> a \\<le> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lowest_tops es = Some a; e \\<in> set es; ifex_ordered e;\n     v \\<in> ifex_var_set e\\<rbrakk>\n    \\<Longrightarrow> a \\<le> v", "proof (induction arbitrary: a rule: lowest_tops.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>lowest_tops [] = Some a; e \\<in> set []; ifex_ordered e;\n        v \\<in> ifex_var_set e\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v\n 2. \\<And>va uu_ uv_ r a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>lowest_tops r = Some a; e \\<in> set r;\n                    ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> v;\n        lowest_tops (IF va uu_ uv_ # r) = Some a;\n        e \\<in> set (IF va uu_ uv_ # r); ifex_ordered e;\n        v \\<in> ifex_var_set e\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v\n 3. \\<And>r a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>lowest_tops r = Some a; e \\<in> set r;\n                    ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> v;\n        lowest_tops (Trueif # r) = Some a; e \\<in> set (Trueif # r);\n        ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v\n 4. \\<And>r a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>lowest_tops r = Some a; e \\<in> set r;\n                    ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> v;\n        lowest_tops (Falseif # r) = Some a; e \\<in> set (Falseif # r);\n        ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v", "case 2"], ["proof (state)\nthis:\n  \\<lbrakk>lowest_tops r_ = Some ?a; e \\<in> set r_; ifex_ordered e;\n   v \\<in> ifex_var_set e\\<rbrakk>\n  \\<Longrightarrow> ?a \\<le> v\n  lowest_tops (IF v_ uu_ uv_ # r_) = Some a\n  e \\<in> set (IF v_ uu_ uv_ # r_)\n  ifex_ordered e\n  v \\<in> ifex_var_set e\n\ngoal (4 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>lowest_tops [] = Some a; e \\<in> set []; ifex_ordered e;\n        v \\<in> ifex_var_set e\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v\n 2. \\<And>va uu_ uv_ r a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>lowest_tops r = Some a; e \\<in> set r;\n                    ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> v;\n        lowest_tops (IF va uu_ uv_ # r) = Some a;\n        e \\<in> set (IF va uu_ uv_ # r); ifex_ordered e;\n        v \\<in> ifex_var_set e\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v\n 3. \\<And>r a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>lowest_tops r = Some a; e \\<in> set r;\n                    ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> v;\n        lowest_tops (Trueif # r) = Some a; e \\<in> set (Trueif # r);\n        ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v\n 4. \\<And>r a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>lowest_tops r = Some a; e \\<in> set r;\n                    ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> v;\n        lowest_tops (Falseif # r) = Some a; e \\<in> set (Falseif # r);\n        ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>lowest_tops r_ = Some ?a; e \\<in> set r_; ifex_ordered e;\n   v \\<in> ifex_var_set e\\<rbrakk>\n  \\<Longrightarrow> ?a \\<le> v\n  lowest_tops (IF v_ uu_ uv_ # r_) = Some a\n  e \\<in> set (IF v_ uu_ uv_ # r_)\n  ifex_ordered e\n  v \\<in> ifex_var_set e\n\ngoal (1 subgoal):\n 1. a \\<le> v", "proof(cases e)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>a.\n                \\<lbrakk>lowest_tops r_ = Some a; e \\<in> set r_;\n                 ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                \\<Longrightarrow> a \\<le> v;\n     lowest_tops (IF v_ uu_ uv_ # r_) = Some a;\n     e \\<in> set (IF v_ uu_ uv_ # r_); ifex_ordered e;\n     v \\<in> ifex_var_set e; e = Trueif\\<rbrakk>\n    \\<Longrightarrow> a \\<le> v\n 2. \\<lbrakk>\\<And>a.\n                \\<lbrakk>lowest_tops r_ = Some a; e \\<in> set r_;\n                 ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                \\<Longrightarrow> a \\<le> v;\n     lowest_tops (IF v_ uu_ uv_ # r_) = Some a;\n     e \\<in> set (IF v_ uu_ uv_ # r_); ifex_ordered e;\n     v \\<in> ifex_var_set e; e = Falseif\\<rbrakk>\n    \\<Longrightarrow> a \\<le> v\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>lowest_tops r_ = Some a; e \\<in> set r_;\n                    ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> v;\n        lowest_tops (IF v_ uu_ uv_ # r_) = Some a;\n        e \\<in> set (IF v_ uu_ uv_ # r_); ifex_ordered e;\n        v \\<in> ifex_var_set e; e = IF x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v", "case IF"], ["proof (state)\nthis:\n  e = IF x31_ x32_ x33_\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>a.\n                \\<lbrakk>lowest_tops r_ = Some a; e \\<in> set r_;\n                 ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                \\<Longrightarrow> a \\<le> v;\n     lowest_tops (IF v_ uu_ uv_ # r_) = Some a;\n     e \\<in> set (IF v_ uu_ uv_ # r_); ifex_ordered e;\n     v \\<in> ifex_var_set e; e = Trueif\\<rbrakk>\n    \\<Longrightarrow> a \\<le> v\n 2. \\<lbrakk>\\<And>a.\n                \\<lbrakk>lowest_tops r_ = Some a; e \\<in> set r_;\n                 ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                \\<Longrightarrow> a \\<le> v;\n     lowest_tops (IF v_ uu_ uv_ # r_) = Some a;\n     e \\<in> set (IF v_ uu_ uv_ # r_); ifex_ordered e;\n     v \\<in> ifex_var_set e; e = Falseif\\<rbrakk>\n    \\<Longrightarrow> a \\<le> v\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>lowest_tops r_ = Some a; e \\<in> set r_;\n                    ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> v;\n        lowest_tops (IF v_ uu_ uv_ # r_) = Some a;\n        e \\<in> set (IF v_ uu_ uv_ # r_); ifex_ordered e;\n        v \\<in> ifex_var_set e; e = IF x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v", "with 2"], ["proof (chain)\npicking this:\n  \\<lbrakk>lowest_tops r_ = Some ?a; e \\<in> set r_; ifex_ordered e;\n   v \\<in> ifex_var_set e\\<rbrakk>\n  \\<Longrightarrow> ?a \\<le> v\n  lowest_tops (IF v_ uu_ uv_ # r_) = Some a\n  e \\<in> set (IF v_ uu_ uv_ # r_)\n  ifex_ordered e\n  v \\<in> ifex_var_set e\n  e = IF x31_ x32_ x33_", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>lowest_tops r_ = Some ?a; e \\<in> set r_; ifex_ordered e;\n   v \\<in> ifex_var_set e\\<rbrakk>\n  \\<Longrightarrow> ?a \\<le> v\n  lowest_tops (IF v_ uu_ uv_ # r_) = Some a\n  e \\<in> set (IF v_ uu_ uv_ # r_)\n  ifex_ordered e\n  v \\<in> ifex_var_set e\n  e = IF x31_ x32_ x33_\n\ngoal (1 subgoal):\n 1. a \\<le> v", "apply (simp add: min_def Ball_def less_imp_le split: if_splits option.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x31_ = a \\<and> x32_ = uu_ \\<and> x33_ = uv_ \\<or>\n             IF x31_ x32_ x33_ \\<in> set r_;\n     v = x31_ \\<or>\n     v \\<in> ifex_var_set x32_ \\<or> v \\<in> ifex_var_set x33_;\n     e = IF x31_ x32_ x33_; lowest_tops r_ = None;\n     \\<forall>x.\n        (x \\<in> ifex_var_set x32_ \\<longrightarrow> x31_ < x) \\<and>\n        (x \\<in> ifex_var_set x33_ \\<longrightarrow> x31_ < x);\n     ifex_ordered x32_; ifex_ordered x33_; v_ = a\\<rbrakk>\n    \\<Longrightarrow> a \\<le> v\n 2. \\<And>x2.\n       \\<lbrakk>x31_ = v_ \\<and> x32_ = uu_ \\<and> x33_ = uv_ \\<or>\n                IF x31_ x32_ x33_ \\<in> set r_;\n        v = x31_ \\<or>\n        v \\<in> ifex_var_set x32_ \\<or> v \\<in> ifex_var_set x33_;\n        e = IF x31_ x32_ x33_;\n        IF x31_ x32_ x33_ \\<in> set r_ \\<Longrightarrow> a \\<le> v;\n        \\<forall>x.\n           (x \\<in> ifex_var_set x32_ \\<longrightarrow> x31_ < x) \\<and>\n           (x \\<in> ifex_var_set x33_ \\<longrightarrow> x31_ < x);\n        ifex_ordered x32_; ifex_ordered x33_; lowest_tops r_ = Some a;\n        a \\<le> v_; x2 = a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v\n 3. \\<And>x2.\n       \\<lbrakk>x31_ = a \\<and> x32_ = uu_ \\<and> x33_ = uv_ \\<or>\n                IF x31_ x32_ x33_ \\<in> set r_;\n        v = x31_ \\<or>\n        v \\<in> ifex_var_set x32_ \\<or> v \\<in> ifex_var_set x33_;\n        e = IF x31_ x32_ x33_;\n        IF x31_ x32_ x33_ \\<in> set r_ \\<Longrightarrow> x2 \\<le> v;\n        \\<forall>x.\n           (x \\<in> ifex_var_set x32_ \\<longrightarrow> x31_ < x) \\<and>\n           (x \\<in> ifex_var_set x33_ \\<longrightarrow> x31_ < x);\n        ifex_ordered x32_; ifex_ordered x33_; lowest_tops r_ = Some x2;\n        \\<not> x2 \\<le> a; v_ = a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v", "apply (meson less_imp_le lowest_tops_NoneD order_refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>x31_ = v_ \\<and> x32_ = uu_ \\<and> x33_ = uv_ \\<or>\n                IF x31_ x32_ x33_ \\<in> set r_;\n        v = x31_ \\<or>\n        v \\<in> ifex_var_set x32_ \\<or> v \\<in> ifex_var_set x33_;\n        e = IF x31_ x32_ x33_;\n        IF x31_ x32_ x33_ \\<in> set r_ \\<Longrightarrow> a \\<le> v;\n        \\<forall>x.\n           (x \\<in> ifex_var_set x32_ \\<longrightarrow> x31_ < x) \\<and>\n           (x \\<in> ifex_var_set x33_ \\<longrightarrow> x31_ < x);\n        ifex_ordered x32_; ifex_ordered x33_; lowest_tops r_ = Some a;\n        a \\<le> v_; x2 = a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v\n 2. \\<And>x2.\n       \\<lbrakk>x31_ = a \\<and> x32_ = uu_ \\<and> x33_ = uv_ \\<or>\n                IF x31_ x32_ x33_ \\<in> set r_;\n        v = x31_ \\<or>\n        v \\<in> ifex_var_set x32_ \\<or> v \\<in> ifex_var_set x33_;\n        e = IF x31_ x32_ x33_;\n        IF x31_ x32_ x33_ \\<in> set r_ \\<Longrightarrow> x2 \\<le> v;\n        \\<forall>x.\n           (x \\<in> ifex_var_set x32_ \\<longrightarrow> x31_ < x) \\<and>\n           (x \\<in> ifex_var_set x33_ \\<longrightarrow> x31_ < x);\n        ifex_ordered x32_; ifex_ordered x33_; lowest_tops r_ = Some x2;\n        \\<not> x2 \\<le> a; v_ = a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v", "by fastforce+"], ["proof (state)\nthis:\n  a \\<le> v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>a.\n                \\<lbrakk>lowest_tops r_ = Some a; e \\<in> set r_;\n                 ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                \\<Longrightarrow> a \\<le> v;\n     lowest_tops (IF v_ uu_ uv_ # r_) = Some a;\n     e \\<in> set (IF v_ uu_ uv_ # r_); ifex_ordered e;\n     v \\<in> ifex_var_set e; e = Trueif\\<rbrakk>\n    \\<Longrightarrow> a \\<le> v\n 2. \\<lbrakk>\\<And>a.\n                \\<lbrakk>lowest_tops r_ = Some a; e \\<in> set r_;\n                 ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                \\<Longrightarrow> a \\<le> v;\n     lowest_tops (IF v_ uu_ uv_ # r_) = Some a;\n     e \\<in> set (IF v_ uu_ uv_ # r_); ifex_ordered e;\n     v \\<in> ifex_var_set e; e = Falseif\\<rbrakk>\n    \\<Longrightarrow> a \\<le> v", "qed simp+"], ["proof (state)\nthis:\n  a \\<le> v\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>lowest_tops [] = Some a; e \\<in> set []; ifex_ordered e;\n        v \\<in> ifex_var_set e\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v\n 2. \\<And>r a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>lowest_tops r = Some a; e \\<in> set r;\n                    ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> v;\n        lowest_tops (Trueif # r) = Some a; e \\<in> set (Trueif # r);\n        ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v\n 3. \\<And>r a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>lowest_tops r = Some a; e \\<in> set r;\n                    ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> v;\n        lowest_tops (Falseif # r) = Some a; e \\<in> set (Falseif # r);\n        ifex_ordered e; v \\<in> ifex_var_set e\\<rbrakk>\n       \\<Longrightarrow> a \\<le> v", "qed fastforce+"], ["", "lemma termlemma2: \"lowest_tops [i, t, e] = Some xa \\<Longrightarrow>\n  (size (restrict_top i xa val) + size (restrict_top t xa val) + size (restrict_top e xa val)) <\n  (size i + size t + size e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowest_tops [i, t, e] = Some xa \\<Longrightarrow>\n    size (restrict_top i xa val) + size (restrict_top t xa val) +\n    size (restrict_top e xa val)\n    < size i + size t + size e", "using restrict_size_le[of i xa val] restrict_size_le[of t xa val]  restrict_size_le[of e xa val]"], ["proof (prove)\nusing this:\n  size (restrict_top i xa val) \\<le> size i\n  size (restrict_top t xa val) \\<le> size t\n  size (restrict_top e xa val) \\<le> size e\n\ngoal (1 subgoal):\n 1. lowest_tops [i, t, e] = Some xa \\<Longrightarrow>\n    size (restrict_top i xa val) + size (restrict_top t xa val) +\n    size (restrict_top e xa val)\n    < size i + size t + size e", "by (auto dest!: lowest_tops_cases restrict_size_less[of _ _ val])"], ["", "lemma termlemma: \"lowest_tops [i, t, e] = Some xa \\<Longrightarrow>\n       (case (restrict_top i xa val, restrict_top t xa val, restrict_top e xa val) of \n             (i, t, e) \\<Rightarrow> size i + size t + size e) <\n       (case (i, t, e) of (i, t, e) \\<Rightarrow> size i + size t + size e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowest_tops [i, t, e] = Some xa \\<Longrightarrow>\n    (case (restrict_top i xa val, restrict_top t xa val,\n           restrict_top e xa val) of\n     (i, t, e) \\<Rightarrow> size i + size t + size e)\n    < (case (i, t, e) of (i, t, e) \\<Rightarrow> size i + size t + size e)", "using termlemma2"], ["proof (prove)\nusing this:\n  lowest_tops [?i, ?t, ?e] = Some ?xa \\<Longrightarrow>\n  size (restrict_top ?i ?xa ?val) + size (restrict_top ?t ?xa ?val) +\n  size (restrict_top ?e ?xa ?val)\n  < size ?i + size ?t + size ?e\n\ngoal (1 subgoal):\n 1. lowest_tops [i, t, e] = Some xa \\<Longrightarrow>\n    (case (restrict_top i xa val, restrict_top t xa val,\n           restrict_top e xa val) of\n     (i, t, e) \\<Rightarrow> size i + size t + size e)\n    < (case (i, t, e) of (i, t, e) \\<Rightarrow> size i + size t + size e)", "by fast"], ["", "termination ifex_ite"], ["proof (prove)\ngoal (1 subgoal):\n 1. All ifex_ite_dom", "by (relation \"measure (\\<lambda>(i,t,e). size i + size t + size e)\", rule wf_measure, unfold in_measure) \n     (simp_all only: termlemma)"], ["", "definition \"const x _ = x\""], ["", "(* inspired by Haskell *)"], ["", "declare const_def[simp]"], ["", "lemma rel_true_false: \"(a, Trueif) \\<in> bf_ifex_rel \\<Longrightarrow> a = const True\" \"(a, Falseif) \\<in> bf_ifex_rel \\<Longrightarrow> a = const False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, Trueif) \\<in> bf_ifex_rel \\<Longrightarrow> a = const True) &&&\n    ((a, Falseif) \\<in> bf_ifex_rel \\<Longrightarrow> a = const False)", "unfolding fun_eq_iff const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, Trueif) \\<in> bf_ifex_rel \\<Longrightarrow>\n     \\<forall>x. a x = True) &&&\n    ((a, Falseif) \\<in> bf_ifex_rel \\<Longrightarrow>\n     \\<forall>x. a x = False)", "unfolding bf_ifex_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, Trueif)\n     \\<in> {(a, b).\n            (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n            ro_ifex b} \\<Longrightarrow>\n     \\<forall>x. a x = True) &&&\n    ((a, Falseif)\n     \\<in> {(a, b).\n            (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n            ro_ifex b} \\<Longrightarrow>\n     \\<forall>x. a x = False)", "by simp_all"], ["", "lemma rel_if: \"(a, IF v t e) \\<in> bf_ifex_rel \\<Longrightarrow> (ta, t) \\<in> bf_ifex_rel \\<Longrightarrow> (ea, e) \\<in> bf_ifex_rel \\<Longrightarrow> a = (\\<lambda>as. if as v then ta as else ea as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, IF v t e) \\<in> bf_ifex_rel; (ta, t) \\<in> bf_ifex_rel;\n     (ea, e) \\<in> bf_ifex_rel\\<rbrakk>\n    \\<Longrightarrow> a = (\\<lambda>as. if as v then ta as else ea as)", "unfolding fun_eq_iff const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, IF v t e) \\<in> bf_ifex_rel; (ta, t) \\<in> bf_ifex_rel;\n     (ea, e) \\<in> bf_ifex_rel\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. a x = (if x v then ta x else ea x)", "unfolding bf_ifex_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, IF v t e)\n             \\<in> {(a, b).\n                    (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n                    ro_ifex b};\n     (ta, t)\n     \\<in> {(a, b).\n            (\\<forall>ass. a ass = val_ifex b ass) \\<and> ro_ifex b};\n     (ea, e)\n     \\<in> {(a, b).\n            (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n            ro_ifex b}\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. a x = (if x v then ta x else ea x)", "by simp_all"], ["", "lemma ifex_ordered_implied: \"(a, b) \\<in> bf_ifex_rel \\<Longrightarrow> ifex_ordered b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> bf_ifex_rel \\<Longrightarrow> ifex_ordered b", "unfolding bf_ifex_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b)\n    \\<in> {(a, b).\n           (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n           ro_ifex b} \\<Longrightarrow>\n    ifex_ordered b", "by simp"], ["", "lemma ifex_minimal_implied: \"(a, b) \\<in> bf_ifex_rel \\<Longrightarrow> ifex_minimal b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> bf_ifex_rel \\<Longrightarrow> ifex_minimal b", "unfolding bf_ifex_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b)\n    \\<in> {(a, b).\n           (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n           ro_ifex b} \\<Longrightarrow>\n    ifex_minimal b", "by simp"], ["", "lemma ifex_ite_induct2[case_names Trueif Falseif IF]: \"\n  (\\<And>i t e. lowest_tops [i, t, e] = None \\<Longrightarrow> i = Trueif \\<Longrightarrow> sentence i t e) \\<Longrightarrow>\n  (\\<And>i t e. lowest_tops [i, t, e] = None \\<Longrightarrow> i = Falseif \\<Longrightarrow> sentence i t e) \\<Longrightarrow>\n  (\\<And>i t e a. sentence (restrict_top i a True) (restrict_top t a True) (restrict_top e a True) \\<Longrightarrow>\n             sentence (restrict_top i a False) (restrict_top t a False) (restrict_top e a False) \\<Longrightarrow>\n   lowest_tops [i, t, e] = Some a \\<Longrightarrow> sentence i t e) \\<Longrightarrow> sentence i t e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i t e.\n                \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n                \\<Longrightarrow> sentence i t e;\n     \\<And>i t e.\n        \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n        \\<Longrightarrow> sentence i t e;\n     \\<And>i t e a.\n        \\<lbrakk>sentence (restrict_top i a True) (restrict_top t a True)\n                  (restrict_top e a True);\n         sentence (restrict_top i a False) (restrict_top t a False)\n          (restrict_top e a False);\n         lowest_tops [i, t, e] = Some a\\<rbrakk>\n        \\<Longrightarrow> sentence i t e\\<rbrakk>\n    \\<Longrightarrow> sentence i t e", "proof(induction i t e rule: ifex_ite.induct, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i t e.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n                    \\<And>i t e.\n                       \\<lbrakk>lowest_tops [i, t, e] = None;\n                        i = Trueif\\<rbrakk>\n                       \\<Longrightarrow> sentence i t e;\n                    \\<And>i t e.\n                       \\<lbrakk>lowest_tops [i, t, e] = None;\n                        i = Falseif\\<rbrakk>\n                       \\<Longrightarrow> sentence i t e;\n                    \\<And>i t e a.\n                       \\<lbrakk>sentence (restrict_top i a True)\n                                 (restrict_top t a True)\n                                 (restrict_top e a True);\n                        sentence (restrict_top i a False)\n                         (restrict_top t a False) (restrict_top e a False);\n                        lowest_tops [i, t, e] = Some a\\<rbrakk>\n                       \\<Longrightarrow> sentence i t e\\<rbrakk>\n                   \\<Longrightarrow> sentence (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True);\n        \\<And>x2.\n           \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n            \\<And>i t e.\n               \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n               \\<Longrightarrow> sentence i t e;\n            \\<And>i t e.\n               \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n               \\<Longrightarrow> sentence i t e;\n            \\<And>i t e a.\n               \\<lbrakk>sentence (restrict_top i a True)\n                         (restrict_top t a True) (restrict_top e a True);\n                sentence (restrict_top i a False) (restrict_top t a False)\n                 (restrict_top e a False);\n                lowest_tops [i, t, e] = Some a\\<rbrakk>\n               \\<Longrightarrow> sentence i t e\\<rbrakk>\n           \\<Longrightarrow> sentence (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False);\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> sentence i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> sentence i t e;\n        \\<And>i t e a.\n           \\<lbrakk>sentence (restrict_top i a True) (restrict_top t a True)\n                     (restrict_top e a True);\n            sentence (restrict_top i a False) (restrict_top t a False)\n             (restrict_top e a False);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> sentence i t e\\<rbrakk>\n       \\<Longrightarrow> sentence i t e", "case (1 i t e)"], ["proof (state)\nthis:\n  \\<lbrakk>lowest_tops [i, t, e] = Some ?x2.0;\n   \\<And>i t e.\n      \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n      \\<Longrightarrow> sentence i t e;\n   \\<And>i t e.\n      \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n      \\<Longrightarrow> sentence i t e;\n   \\<And>i t e a.\n      \\<lbrakk>sentence (restrict_top i a True) (restrict_top t a True)\n                (restrict_top e a True);\n       sentence (restrict_top i a False) (restrict_top t a False)\n        (restrict_top e a False);\n       lowest_tops [i, t, e] = Some a\\<rbrakk>\n      \\<Longrightarrow> sentence i t e\\<rbrakk>\n  \\<Longrightarrow> sentence (restrict_top i ?x2.0 True)\n                     (restrict_top t ?x2.0 True) (restrict_top e ?x2.0 True)\n  \\<lbrakk>lowest_tops [i, t, e] = Some ?x2.0;\n   \\<And>i t e.\n      \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n      \\<Longrightarrow> sentence i t e;\n   \\<And>i t e.\n      \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n      \\<Longrightarrow> sentence i t e;\n   \\<And>i t e a.\n      \\<lbrakk>sentence (restrict_top i a True) (restrict_top t a True)\n                (restrict_top e a True);\n       sentence (restrict_top i a False) (restrict_top t a False)\n        (restrict_top e a False);\n       lowest_tops [i, t, e] = Some a\\<rbrakk>\n      \\<Longrightarrow> sentence i t e\\<rbrakk>\n  \\<Longrightarrow> sentence (restrict_top i ?x2.0 False)\n                     (restrict_top t ?x2.0 False)\n                     (restrict_top e ?x2.0 False)\n  \\<lbrakk>lowest_tops [?i, ?t, ?e] = None; ?i = Trueif\\<rbrakk>\n  \\<Longrightarrow> sentence ?i ?t ?e\n  \\<lbrakk>lowest_tops [?i, ?t, ?e] = None; ?i = Falseif\\<rbrakk>\n  \\<Longrightarrow> sentence ?i ?t ?e\n  \\<lbrakk>sentence (restrict_top ?i ?a True) (restrict_top ?t ?a True)\n            (restrict_top ?e ?a True);\n   sentence (restrict_top ?i ?a False) (restrict_top ?t ?a False)\n    (restrict_top ?e ?a False);\n   lowest_tops [?i, ?t, ?e] = Some ?a\\<rbrakk>\n  \\<Longrightarrow> sentence ?i ?t ?e\n\ngoal (1 subgoal):\n 1. \\<And>i t e.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n                    \\<And>i t e.\n                       \\<lbrakk>lowest_tops [i, t, e] = None;\n                        i = Trueif\\<rbrakk>\n                       \\<Longrightarrow> sentence i t e;\n                    \\<And>i t e.\n                       \\<lbrakk>lowest_tops [i, t, e] = None;\n                        i = Falseif\\<rbrakk>\n                       \\<Longrightarrow> sentence i t e;\n                    \\<And>i t e a.\n                       \\<lbrakk>sentence (restrict_top i a True)\n                                 (restrict_top t a True)\n                                 (restrict_top e a True);\n                        sentence (restrict_top i a False)\n                         (restrict_top t a False) (restrict_top e a False);\n                        lowest_tops [i, t, e] = Some a\\<rbrakk>\n                       \\<Longrightarrow> sentence i t e\\<rbrakk>\n                   \\<Longrightarrow> sentence (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True);\n        \\<And>x2.\n           \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n            \\<And>i t e.\n               \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n               \\<Longrightarrow> sentence i t e;\n            \\<And>i t e.\n               \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n               \\<Longrightarrow> sentence i t e;\n            \\<And>i t e a.\n               \\<lbrakk>sentence (restrict_top i a True)\n                         (restrict_top t a True) (restrict_top e a True);\n                sentence (restrict_top i a False) (restrict_top t a False)\n                 (restrict_top e a False);\n                lowest_tops [i, t, e] = Some a\\<rbrakk>\n               \\<Longrightarrow> sentence i t e\\<rbrakk>\n           \\<Longrightarrow> sentence (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False);\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> sentence i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> sentence i t e;\n        \\<And>i t e a.\n           \\<lbrakk>sentence (restrict_top i a True) (restrict_top t a True)\n                     (restrict_top e a True);\n            sentence (restrict_top i a False) (restrict_top t a False)\n             (restrict_top e a False);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> sentence i t e\\<rbrakk>\n       \\<Longrightarrow> sentence i t e", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sentence i t e", "proof(cases \"lowest_tops [i, t, e]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lowest_tops [i, t, e] = None \\<Longrightarrow> sentence i t e\n 2. \\<And>a. lowest_tops [i, t, e] = Some a \\<Longrightarrow> sentence i t e", "case None"], ["proof (state)\nthis:\n  lowest_tops [i, t, e] = None\n\ngoal (2 subgoals):\n 1. lowest_tops [i, t, e] = None \\<Longrightarrow> sentence i t e\n 2. \\<And>a. lowest_tops [i, t, e] = Some a \\<Longrightarrow> sentence i t e", "thus ?thesis"], ["proof (prove)\nusing this:\n  lowest_tops [i, t, e] = None\n\ngoal (1 subgoal):\n 1. sentence i t e", "by (cases i) (auto intro: 1)"], ["proof (state)\nthis:\n  sentence i t e\n\ngoal (1 subgoal):\n 1. \\<And>a. lowest_tops [i, t, e] = Some a \\<Longrightarrow> sentence i t e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. lowest_tops [i, t, e] = Some a \\<Longrightarrow> sentence i t e", "case (Some a)"], ["proof (state)\nthis:\n  lowest_tops [i, t, e] = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a. lowest_tops [i, t, e] = Some a \\<Longrightarrow> sentence i t e", "thus ?thesis"], ["proof (prove)\nusing this:\n  lowest_tops [i, t, e] = Some a\n\ngoal (1 subgoal):\n 1. sentence i t e", "by(auto intro: 1)"], ["proof (state)\nthis:\n  sentence i t e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sentence i t e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ifex_ite_induct[case_names Trueif Falseif IF]: \"\n  (\\<And>i t e. lowest_tops [i, t, e] = None \\<Longrightarrow> i = Trueif \\<Longrightarrow> P i t e) \\<Longrightarrow>\n  (\\<And>i t e. lowest_tops [i, t, e] = None \\<Longrightarrow> i = Falseif \\<Longrightarrow> P i t e) \\<Longrightarrow>\n  (\\<And>i t e a. (\\<And>val. P (restrict_top i a val) (restrict_top t a val) (restrict_top e a val)) \\<Longrightarrow> \n   lowest_tops [i, t, e] = Some a \\<Longrightarrow> P i t e) \\<Longrightarrow> P i t e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i t e.\n                \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n                \\<Longrightarrow> P i t e;\n     \\<And>i t e.\n        \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n        \\<Longrightarrow> P i t e;\n     \\<And>i t e a.\n        \\<lbrakk>\\<And>val.\n                    P (restrict_top i a val) (restrict_top t a val)\n                     (restrict_top e a val);\n         lowest_tops [i, t, e] = Some a\\<rbrakk>\n        \\<Longrightarrow> P i t e\\<rbrakk>\n    \\<Longrightarrow> P i t e", "proof(induction i t e rule: ifex_ite_induct2)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e a.\n           \\<lbrakk>\\<And>val.\n                       P (restrict_top i a val) (restrict_top t a val)\n                        (restrict_top e a val);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> P i t e\\<rbrakk>\n       \\<Longrightarrow> P i t e\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e a.\n           \\<lbrakk>\\<And>val.\n                       P (restrict_top i a val) (restrict_top t a val)\n                        (restrict_top e a val);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> P i t e\\<rbrakk>\n       \\<Longrightarrow> P i t e\n 3. \\<And>i t e a.\n       \\<lbrakk>\\<lbrakk>\\<And>i t e.\n                            \\<lbrakk>lowest_tops [i, t, e] = None;\n                             i = Trueif\\<rbrakk>\n                            \\<Longrightarrow> P i t e;\n                 \\<And>i t e.\n                    \\<lbrakk>lowest_tops [i, t, e] = None;\n                     i = Falseif\\<rbrakk>\n                    \\<Longrightarrow> P i t e;\n                 \\<And>i t e a.\n                    \\<lbrakk>\\<And>val.\n                                P (restrict_top i a val)\n                                 (restrict_top t a val)\n                                 (restrict_top e a val);\n                     lowest_tops [i, t, e] = Some a\\<rbrakk>\n                    \\<Longrightarrow> P i t e\\<rbrakk>\n                \\<Longrightarrow> P (restrict_top i a True)\n                                   (restrict_top t a True)\n                                   (restrict_top e a True);\n        \\<lbrakk>\\<And>i t e.\n                    \\<lbrakk>lowest_tops [i, t, e] = None;\n                     i = Trueif\\<rbrakk>\n                    \\<Longrightarrow> P i t e;\n         \\<And>i t e.\n            \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n            \\<Longrightarrow> P i t e;\n         \\<And>i t e a.\n            \\<lbrakk>\\<And>val.\n                        P (restrict_top i a val) (restrict_top t a val)\n                         (restrict_top e a val);\n             lowest_tops [i, t, e] = Some a\\<rbrakk>\n            \\<Longrightarrow> P i t e\\<rbrakk>\n        \\<Longrightarrow> P (restrict_top i a False)\n                           (restrict_top t a False)\n                           (restrict_top e a False);\n        lowest_tops [i, t, e] = Some a;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e a.\n           \\<lbrakk>\\<And>val.\n                       P (restrict_top i a val) (restrict_top t a val)\n                        (restrict_top e a val);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> P i t e\\<rbrakk>\n       \\<Longrightarrow> P i t e", "case (IF i t e a)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i t e.\n              \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n              \\<Longrightarrow> P i t e;\n   \\<And>i t e.\n      \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n      \\<Longrightarrow> P i t e;\n   \\<And>i t e a.\n      \\<lbrakk>\\<And>val.\n                  P (restrict_top i a val) (restrict_top t a val)\n                   (restrict_top e a val);\n       lowest_tops [i, t, e] = Some a\\<rbrakk>\n      \\<Longrightarrow> P i t e\\<rbrakk>\n  \\<Longrightarrow> P (restrict_top i a True) (restrict_top t a True)\n                     (restrict_top e a True)\n  \\<lbrakk>\\<And>i t e.\n              \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n              \\<Longrightarrow> P i t e;\n   \\<And>i t e.\n      \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n      \\<Longrightarrow> P i t e;\n   \\<And>i t e a.\n      \\<lbrakk>\\<And>val.\n                  P (restrict_top i a val) (restrict_top t a val)\n                   (restrict_top e a val);\n       lowest_tops [i, t, e] = Some a\\<rbrakk>\n      \\<Longrightarrow> P i t e\\<rbrakk>\n  \\<Longrightarrow> P (restrict_top i a False) (restrict_top t a False)\n                     (restrict_top e a False)\n  lowest_tops [i, t, e] = Some a\n  \\<lbrakk>lowest_tops [?i, ?t, ?e] = None; ?i = Trueif\\<rbrakk>\n  \\<Longrightarrow> P ?i ?t ?e\n  \\<lbrakk>lowest_tops [?i, ?t, ?e] = None; ?i = Falseif\\<rbrakk>\n  \\<Longrightarrow> P ?i ?t ?e\n  \\<lbrakk>\\<And>val.\n              P (restrict_top ?i ?a val) (restrict_top ?t ?a val)\n               (restrict_top ?e ?a val);\n   lowest_tops [?i, ?t, ?e] = Some ?a\\<rbrakk>\n  \\<Longrightarrow> P ?i ?t ?e\n\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e a.\n           \\<lbrakk>\\<And>val.\n                       P (restrict_top i a val) (restrict_top t a val)\n                        (restrict_top e a val);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> P i t e\\<rbrakk>\n       \\<Longrightarrow> P i t e\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e a.\n           \\<lbrakk>\\<And>val.\n                       P (restrict_top i a val) (restrict_top t a val)\n                        (restrict_top e a val);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> P i t e\\<rbrakk>\n       \\<Longrightarrow> P i t e\n 3. \\<And>i t e a.\n       \\<lbrakk>\\<lbrakk>\\<And>i t e.\n                            \\<lbrakk>lowest_tops [i, t, e] = None;\n                             i = Trueif\\<rbrakk>\n                            \\<Longrightarrow> P i t e;\n                 \\<And>i t e.\n                    \\<lbrakk>lowest_tops [i, t, e] = None;\n                     i = Falseif\\<rbrakk>\n                    \\<Longrightarrow> P i t e;\n                 \\<And>i t e a.\n                    \\<lbrakk>\\<And>val.\n                                P (restrict_top i a val)\n                                 (restrict_top t a val)\n                                 (restrict_top e a val);\n                     lowest_tops [i, t, e] = Some a\\<rbrakk>\n                    \\<Longrightarrow> P i t e\\<rbrakk>\n                \\<Longrightarrow> P (restrict_top i a True)\n                                   (restrict_top t a True)\n                                   (restrict_top e a True);\n        \\<lbrakk>\\<And>i t e.\n                    \\<lbrakk>lowest_tops [i, t, e] = None;\n                     i = Trueif\\<rbrakk>\n                    \\<Longrightarrow> P i t e;\n         \\<And>i t e.\n            \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n            \\<Longrightarrow> P i t e;\n         \\<And>i t e a.\n            \\<lbrakk>\\<And>val.\n                        P (restrict_top i a val) (restrict_top t a val)\n                         (restrict_top e a val);\n             lowest_tops [i, t, e] = Some a\\<rbrakk>\n            \\<Longrightarrow> P i t e\\<rbrakk>\n        \\<Longrightarrow> P (restrict_top i a False)\n                           (restrict_top t a False)\n                           (restrict_top e a False);\n        lowest_tops [i, t, e] = Some a;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e a.\n           \\<lbrakk>\\<And>val.\n                       P (restrict_top i a val) (restrict_top t a val)\n                        (restrict_top e a val);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> P i t e\\<rbrakk>\n       \\<Longrightarrow> P i t e", "have \"\\<And>val. (P (restrict_top i a val) (restrict_top t a val) (restrict_top e a val))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>val.\n       P (restrict_top i a val) (restrict_top t a val)\n        (restrict_top e a val)", "by (case_tac val) (clarsimp, blast intro: IF)+"], ["proof (state)\nthis:\n  P (restrict_top i a ?val) (restrict_top t a ?val) (restrict_top e a ?val)\n\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e a.\n           \\<lbrakk>\\<And>val.\n                       P (restrict_top i a val) (restrict_top t a val)\n                        (restrict_top e a val);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> P i t e\\<rbrakk>\n       \\<Longrightarrow> P i t e\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e a.\n           \\<lbrakk>\\<And>val.\n                       P (restrict_top i a val) (restrict_top t a val)\n                        (restrict_top e a val);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> P i t e\\<rbrakk>\n       \\<Longrightarrow> P i t e\n 3. \\<And>i t e a.\n       \\<lbrakk>\\<lbrakk>\\<And>i t e.\n                            \\<lbrakk>lowest_tops [i, t, e] = None;\n                             i = Trueif\\<rbrakk>\n                            \\<Longrightarrow> P i t e;\n                 \\<And>i t e.\n                    \\<lbrakk>lowest_tops [i, t, e] = None;\n                     i = Falseif\\<rbrakk>\n                    \\<Longrightarrow> P i t e;\n                 \\<And>i t e a.\n                    \\<lbrakk>\\<And>val.\n                                P (restrict_top i a val)\n                                 (restrict_top t a val)\n                                 (restrict_top e a val);\n                     lowest_tops [i, t, e] = Some a\\<rbrakk>\n                    \\<Longrightarrow> P i t e\\<rbrakk>\n                \\<Longrightarrow> P (restrict_top i a True)\n                                   (restrict_top t a True)\n                                   (restrict_top e a True);\n        \\<lbrakk>\\<And>i t e.\n                    \\<lbrakk>lowest_tops [i, t, e] = None;\n                     i = Trueif\\<rbrakk>\n                    \\<Longrightarrow> P i t e;\n         \\<And>i t e.\n            \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n            \\<Longrightarrow> P i t e;\n         \\<And>i t e a.\n            \\<lbrakk>\\<And>val.\n                        P (restrict_top i a val) (restrict_top t a val)\n                         (restrict_top e a val);\n             lowest_tops [i, t, e] = Some a\\<rbrakk>\n            \\<Longrightarrow> P i t e\\<rbrakk>\n        \\<Longrightarrow> P (restrict_top i a False)\n                           (restrict_top t a False)\n                           (restrict_top e a False);\n        lowest_tops [i, t, e] = Some a;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e a.\n           \\<lbrakk>\\<And>val.\n                       P (restrict_top i a val) (restrict_top t a val)\n                        (restrict_top e a val);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> P i t e\\<rbrakk>\n       \\<Longrightarrow> P i t e", "with IF"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>i t e.\n              \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n              \\<Longrightarrow> P i t e;\n   \\<And>i t e.\n      \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n      \\<Longrightarrow> P i t e;\n   \\<And>i t e a.\n      \\<lbrakk>\\<And>val.\n                  P (restrict_top i a val) (restrict_top t a val)\n                   (restrict_top e a val);\n       lowest_tops [i, t, e] = Some a\\<rbrakk>\n      \\<Longrightarrow> P i t e\\<rbrakk>\n  \\<Longrightarrow> P (restrict_top i a True) (restrict_top t a True)\n                     (restrict_top e a True)\n  \\<lbrakk>\\<And>i t e.\n              \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n              \\<Longrightarrow> P i t e;\n   \\<And>i t e.\n      \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n      \\<Longrightarrow> P i t e;\n   \\<And>i t e a.\n      \\<lbrakk>\\<And>val.\n                  P (restrict_top i a val) (restrict_top t a val)\n                   (restrict_top e a val);\n       lowest_tops [i, t, e] = Some a\\<rbrakk>\n      \\<Longrightarrow> P i t e\\<rbrakk>\n  \\<Longrightarrow> P (restrict_top i a False) (restrict_top t a False)\n                     (restrict_top e a False)\n  lowest_tops [i, t, e] = Some a\n  \\<lbrakk>lowest_tops [?i, ?t, ?e] = None; ?i = Trueif\\<rbrakk>\n  \\<Longrightarrow> P ?i ?t ?e\n  \\<lbrakk>lowest_tops [?i, ?t, ?e] = None; ?i = Falseif\\<rbrakk>\n  \\<Longrightarrow> P ?i ?t ?e\n  \\<lbrakk>\\<And>val.\n              P (restrict_top ?i ?a val) (restrict_top ?t ?a val)\n               (restrict_top ?e ?a val);\n   lowest_tops [?i, ?t, ?e] = Some ?a\\<rbrakk>\n  \\<Longrightarrow> P ?i ?t ?e\n  P (restrict_top i a ?val) (restrict_top t a ?val) (restrict_top e a ?val)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i t e.\n              \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n              \\<Longrightarrow> P i t e;\n   \\<And>i t e.\n      \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n      \\<Longrightarrow> P i t e;\n   \\<And>i t e a.\n      \\<lbrakk>\\<And>val.\n                  P (restrict_top i a val) (restrict_top t a val)\n                   (restrict_top e a val);\n       lowest_tops [i, t, e] = Some a\\<rbrakk>\n      \\<Longrightarrow> P i t e\\<rbrakk>\n  \\<Longrightarrow> P (restrict_top i a True) (restrict_top t a True)\n                     (restrict_top e a True)\n  \\<lbrakk>\\<And>i t e.\n              \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n              \\<Longrightarrow> P i t e;\n   \\<And>i t e.\n      \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n      \\<Longrightarrow> P i t e;\n   \\<And>i t e a.\n      \\<lbrakk>\\<And>val.\n                  P (restrict_top i a val) (restrict_top t a val)\n                   (restrict_top e a val);\n       lowest_tops [i, t, e] = Some a\\<rbrakk>\n      \\<Longrightarrow> P i t e\\<rbrakk>\n  \\<Longrightarrow> P (restrict_top i a False) (restrict_top t a False)\n                     (restrict_top e a False)\n  lowest_tops [i, t, e] = Some a\n  \\<lbrakk>lowest_tops [?i, ?t, ?e] = None; ?i = Trueif\\<rbrakk>\n  \\<Longrightarrow> P ?i ?t ?e\n  \\<lbrakk>lowest_tops [?i, ?t, ?e] = None; ?i = Falseif\\<rbrakk>\n  \\<Longrightarrow> P ?i ?t ?e\n  \\<lbrakk>\\<And>val.\n              P (restrict_top ?i ?a val) (restrict_top ?t ?a val)\n               (restrict_top ?e ?a val);\n   lowest_tops [?i, ?t, ?e] = Some ?a\\<rbrakk>\n  \\<Longrightarrow> P ?i ?t ?e\n  P (restrict_top i a ?val) (restrict_top t a ?val) (restrict_top e a ?val)\n\ngoal (1 subgoal):\n 1. P i t e", "by blast"], ["proof (state)\nthis:\n  P i t e\n\ngoal (2 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e a.\n           \\<lbrakk>\\<And>val.\n                       P (restrict_top i a val) (restrict_top t a val)\n                        (restrict_top e a val);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> P i t e\\<rbrakk>\n       \\<Longrightarrow> P i t e\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e.\n           \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif\\<rbrakk>\n           \\<Longrightarrow> P i t e;\n        \\<And>i t e a.\n           \\<lbrakk>\\<And>val.\n                       P (restrict_top i a val) (restrict_top t a val)\n                        (restrict_top e a val);\n            lowest_tops [i, t, e] = Some a\\<rbrakk>\n           \\<Longrightarrow> P i t e\\<rbrakk>\n       \\<Longrightarrow> P i t e", "qed blast+"], ["", "lemma restrict_top_subset: \"x \\<in> ifex_var_set (restrict_top i vr vl) \\<Longrightarrow> x \\<in> ifex_var_set i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> ifex_var_set (restrict_top i vr vl) \\<Longrightarrow>\n    x \\<in> ifex_var_set i", "by(induction i) (simp_all split: if_splits)"], ["", "lemma ifex_vars_subset: \"x \\<in> ifex_var_set (ifex_ite i t e) \\<Longrightarrow> (x \\<in> ifex_var_set i) \\<or> (x \\<in> ifex_var_set t) \\<or> (x \\<in> ifex_var_set e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> ifex_var_set (ifex_ite i t e) \\<Longrightarrow>\n    x \\<in> ifex_var_set i \\<or>\n    x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "proof(induction rule: ifex_ite_induct2)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e\n 3. \\<And>i t e a.\n       \\<lbrakk>x \\<in> ifex_var_set\n                         (ifex_ite (restrict_top i a True)\n                           (restrict_top t a True)\n                           (restrict_top e a True)) \\<Longrightarrow>\n                x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n                x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n                x \\<in> ifex_var_set (restrict_top e a True);\n        x \\<in> ifex_var_set\n                 (ifex_ite (restrict_top i a False) (restrict_top t a False)\n                   (restrict_top e a False)) \\<Longrightarrow>\n        x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n        x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n        x \\<in> ifex_var_set (restrict_top e a False);\n        lowest_tops [i, t, e] = Some a;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "case (IF i t e a)"], ["proof (state)\nthis:\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a True) (restrict_top t a True)\n             (restrict_top e a True)) \\<Longrightarrow>\n  x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a True)\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a False) (restrict_top t a False)\n             (restrict_top e a False)) \\<Longrightarrow>\n  x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a False)\n  lowest_tops [i, t, e] = Some a\n  x \\<in> ifex_var_set (ifex_ite i t e)\n\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e\n 3. \\<And>i t e a.\n       \\<lbrakk>x \\<in> ifex_var_set\n                         (ifex_ite (restrict_top i a True)\n                           (restrict_top t a True)\n                           (restrict_top e a True)) \\<Longrightarrow>\n                x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n                x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n                x \\<in> ifex_var_set (restrict_top e a True);\n        x \\<in> ifex_var_set\n                 (ifex_ite (restrict_top i a False) (restrict_top t a False)\n                   (restrict_top e a False)) \\<Longrightarrow>\n        x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n        x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n        x \\<in> ifex_var_set (restrict_top e a False);\n        lowest_tops [i, t, e] = Some a;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "have \"x \\<in> {x. x = a} \\<or> x \\<in> (ifex_var_set (ifex_ite (restrict_top i a True) (restrict_top t a True) (restrict_top e a True))) \\<or> x \\<in> (ifex_var_set (ifex_ite (restrict_top i a False) (restrict_top t a False) (restrict_top e a False)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {x. x = a} \\<or>\n    x \\<in> ifex_var_set\n             (ifex_ite (restrict_top i a True) (restrict_top t a True)\n               (restrict_top e a True)) \\<or>\n    x \\<in> ifex_var_set\n             (ifex_ite (restrict_top i a False) (restrict_top t a False)\n               (restrict_top e a False))", "using IF"], ["proof (prove)\nusing this:\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a True) (restrict_top t a True)\n             (restrict_top e a True)) \\<Longrightarrow>\n  x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a True)\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a False) (restrict_top t a False)\n             (restrict_top e a False)) \\<Longrightarrow>\n  x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a False)\n  lowest_tops [i, t, e] = Some a\n  x \\<in> ifex_var_set (ifex_ite i t e)\n\ngoal (1 subgoal):\n 1. x \\<in> {x. x = a} \\<or>\n    x \\<in> ifex_var_set\n             (ifex_ite (restrict_top i a True) (restrict_top t a True)\n               (restrict_top e a True)) \\<or>\n    x \\<in> ifex_var_set\n             (ifex_ite (restrict_top i a False) (restrict_top t a False)\n               (restrict_top e a False))", "by(simp add: IFC_def split: if_splits)"], ["proof (state)\nthis:\n  x \\<in> {x. x = a} \\<or>\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a True) (restrict_top t a True)\n             (restrict_top e a True)) \\<or>\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a False) (restrict_top t a False)\n             (restrict_top e a False))\n\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e\n 3. \\<And>i t e a.\n       \\<lbrakk>x \\<in> ifex_var_set\n                         (ifex_ite (restrict_top i a True)\n                           (restrict_top t a True)\n                           (restrict_top e a True)) \\<Longrightarrow>\n                x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n                x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n                x \\<in> ifex_var_set (restrict_top e a True);\n        x \\<in> ifex_var_set\n                 (ifex_ite (restrict_top i a False) (restrict_top t a False)\n                   (restrict_top e a False)) \\<Longrightarrow>\n        x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n        x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n        x \\<in> ifex_var_set (restrict_top e a False);\n        lowest_tops [i, t, e] = Some a;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "hence \"x = a \\<or>\n    x \\<in> (ifex_var_set (restrict_top i a True )) \\<or> x \\<in> (ifex_var_set (restrict_top t a True )) \\<or> x \\<in> (ifex_var_set (restrict_top e a True )) \\<or>\n    x \\<in> (ifex_var_set (restrict_top i a False)) \\<or> x \\<in> (ifex_var_set (restrict_top t a False)) \\<or> x \\<in> (ifex_var_set (restrict_top e a False))\""], ["proof (prove)\nusing this:\n  x \\<in> {x. x = a} \\<or>\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a True) (restrict_top t a True)\n             (restrict_top e a True)) \\<or>\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a False) (restrict_top t a False)\n             (restrict_top e a False))\n\ngoal (1 subgoal):\n 1. x = a \\<or>\n    x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n    x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n    x \\<in> ifex_var_set (restrict_top e a True) \\<or>\n    x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n    x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n    x \\<in> ifex_var_set (restrict_top e a False)", "using IF"], ["proof (prove)\nusing this:\n  x \\<in> {x. x = a} \\<or>\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a True) (restrict_top t a True)\n             (restrict_top e a True)) \\<or>\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a False) (restrict_top t a False)\n             (restrict_top e a False))\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a True) (restrict_top t a True)\n             (restrict_top e a True)) \\<Longrightarrow>\n  x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a True)\n  x \\<in> ifex_var_set\n           (ifex_ite (restrict_top i a False) (restrict_top t a False)\n             (restrict_top e a False)) \\<Longrightarrow>\n  x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a False)\n  lowest_tops [i, t, e] = Some a\n  x \\<in> ifex_var_set (ifex_ite i t e)\n\ngoal (1 subgoal):\n 1. x = a \\<or>\n    x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n    x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n    x \\<in> ifex_var_set (restrict_top e a True) \\<or>\n    x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n    x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n    x \\<in> ifex_var_set (restrict_top e a False)", "by blast"], ["proof (state)\nthis:\n  x = a \\<or>\n  x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a False)\n\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e\n 3. \\<And>i t e a.\n       \\<lbrakk>x \\<in> ifex_var_set\n                         (ifex_ite (restrict_top i a True)\n                           (restrict_top t a True)\n                           (restrict_top e a True)) \\<Longrightarrow>\n                x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n                x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n                x \\<in> ifex_var_set (restrict_top e a True);\n        x \\<in> ifex_var_set\n                 (ifex_ite (restrict_top i a False) (restrict_top t a False)\n                   (restrict_top e a False)) \\<Longrightarrow>\n        x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n        x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n        x \\<in> ifex_var_set (restrict_top e a False);\n        lowest_tops [i, t, e] = Some a;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "thus ?case"], ["proof (prove)\nusing this:\n  x = a \\<or>\n  x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a False)\n\ngoal (1 subgoal):\n 1. x \\<in> ifex_var_set i \\<or>\n    x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "using restrict_top_subset"], ["proof (prove)\nusing this:\n  x = a \\<or>\n  x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a True) \\<or>\n  x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n  x \\<in> ifex_var_set (restrict_top e a False)\n  ?x \\<in> ifex_var_set (restrict_top ?i ?vr ?vl) \\<Longrightarrow>\n  ?x \\<in> ifex_var_set ?i\n\ngoal (1 subgoal):\n 1. x \\<in> ifex_var_set i \\<or>\n    x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = a \\<or>\n             x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n             x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n             x \\<in> ifex_var_set (restrict_top e a True) \\<or>\n             x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n             x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n             x \\<in> ifex_var_set (restrict_top e a False);\n     \\<And>x i vr vl.\n        x \\<in> ifex_var_set (restrict_top i vr vl) \\<Longrightarrow>\n        x \\<in> ifex_var_set i\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                      x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x i vr vl.\n                x \\<in> ifex_var_set\n                         (restrict_top i vr vl) \\<Longrightarrow>\n                x \\<in> ifex_var_set i;\n     x = a\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                      x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e\n 2. \\<lbrakk>\\<And>x i vr vl.\n                x \\<in> ifex_var_set\n                         (restrict_top i vr vl) \\<Longrightarrow>\n                x \\<in> ifex_var_set i;\n     x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n     x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n     x \\<in> ifex_var_set (restrict_top e a True) \\<or>\n     x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n     x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n     x \\<in> ifex_var_set (restrict_top e a False)\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                      x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x i vr vl.\n                x \\<in> ifex_var_set\n                         (restrict_top i vr vl) \\<Longrightarrow>\n                x \\<in> ifex_var_set i;\n     x = a\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                      x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "using lowest_tops_in[OF IF(3)]"], ["proof (prove)\nusing this:\n  a \\<in> set (concat (map ifex_vars [i, t, e]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x i vr vl.\n                x \\<in> ifex_var_set\n                         (restrict_top i vr vl) \\<Longrightarrow>\n                x \\<in> ifex_var_set i;\n     x = a\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                      x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "apply(simp only: set_concat set_map set_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x i vr vl.\n                x \\<in> ifex_var_set\n                         (restrict_top i vr vl) \\<Longrightarrow>\n                x \\<in> ifex_var_set i;\n     x = a; a \\<in> \\<Union> (set ` ifex_vars ` {i, t, e})\\<rbrakk>\n    \\<Longrightarrow> a \\<in> ifex_var_set i \\<or>\n                      a \\<in> ifex_var_set t \\<or> a \\<in> ifex_var_set e", "by blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x i vr vl.\n                x \\<in> ifex_var_set\n                         (restrict_top i vr vl) \\<Longrightarrow>\n                x \\<in> ifex_var_set i;\n     x \\<in> ifex_var_set (restrict_top i a True) \\<or>\n     x \\<in> ifex_var_set (restrict_top t a True) \\<or>\n     x \\<in> ifex_var_set (restrict_top e a True) \\<or>\n     x \\<in> ifex_var_set (restrict_top i a False) \\<or>\n     x \\<in> ifex_var_set (restrict_top t a False) \\<or>\n     x \\<in> ifex_var_set (restrict_top e a False)\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                      x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "by blast"], ["proof (state)\nthis:\n  x \\<in> ifex_var_set i \\<or>\n  x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e\n\ngoal (2 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        x \\<in> ifex_var_set (ifex_ite i t e)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ifex_var_set i \\<or>\n                         x \\<in> ifex_var_set t \\<or> x \\<in> ifex_var_set e", "qed simp_all"], ["", "lemma three_ins: \"i \\<in> set [i, t, e]\" \"t \\<in> set [i, t, e]\" \"e \\<in> set [i, t, e]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> set [i, t, e] &&&\n    t \\<in> set [i, t, e] &&& e \\<in> set [i, t, e]", "by simp_all"], ["", "lemma hlp3: \"lowest_tops (IF v uu uv # r) \\<noteq> lowest_tops r \\<Longrightarrow> lowest_tops (IF v uu uv # r) = Some v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lowest_tops (IF v uu uv # r) \\<noteq> lowest_tops r \\<Longrightarrow>\n    lowest_tops (IF v uu uv # r) = Some v", "by(simp add: min_def split: option.splits if_splits)"], ["", "lemma hlp2: \"IF vi vt ve \\<in> set is \\<Longrightarrow> lowest_tops is = Some a \\<Longrightarrow> a \\<le> vi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>IF vi vt ve \\<in> set is; lowest_tops is = Some a\\<rbrakk>\n    \\<Longrightarrow> a \\<le> vi", "apply(induction \"is\" arbitrary: vt ve a rule: lowest_tops.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>vt ve a.\n       \\<lbrakk>IF vi vt ve \\<in> set []; lowest_tops [] = Some a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> vi\n 2. \\<And>v uu_ uv_ r vt ve a.\n       \\<lbrakk>\\<And>vt ve a.\n                   \\<lbrakk>IF vi vt ve \\<in> set r;\n                    lowest_tops r = Some a\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> vi;\n        IF vi vt ve \\<in> set (IF v uu_ uv_ # r);\n        lowest_tops (IF v uu_ uv_ # r) = Some a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> vi\n 3. \\<And>r vt ve a.\n       \\<lbrakk>\\<And>vt ve a.\n                   \\<lbrakk>IF vi vt ve \\<in> set r;\n                    lowest_tops r = Some a\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> vi;\n        IF vi vt ve \\<in> set (Trueif # r);\n        lowest_tops (Trueif # r) = Some a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> vi\n 4. \\<And>r vt ve a.\n       \\<lbrakk>\\<And>vt ve a.\n                   \\<lbrakk>IF vi vt ve \\<in> set r;\n                    lowest_tops r = Some a\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> vi;\n        IF vi vt ve \\<in> set (Falseif # r);\n        lowest_tops (Falseif # r) = Some a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> vi", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>v uu_ uv_ r vt ve a.\n       \\<lbrakk>\\<And>vt ve a.\n                   \\<lbrakk>IF vi vt ve \\<in> set r;\n                    lowest_tops r = Some a\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> vi;\n        IF vi vt ve \\<in> set (IF v uu_ uv_ # r);\n        lowest_tops (IF v uu_ uv_ # r) = Some a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> vi\n 2. \\<And>vt ve a.\n       \\<lbrakk>IF vi vt ve \\<in> set []; lowest_tops [] = Some a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> vi\n 3. \\<And>r vt ve a.\n       \\<lbrakk>\\<And>vt ve a.\n                   \\<lbrakk>IF vi vt ve \\<in> set r;\n                    lowest_tops r = Some a\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> vi;\n        IF vi vt ve \\<in> set (Trueif # r);\n        lowest_tops (Trueif # r) = Some a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> vi\n 4. \\<And>r vt ve a.\n       \\<lbrakk>\\<And>vt ve a.\n                   \\<lbrakk>IF vi vt ve \\<in> set r;\n                    lowest_tops r = Some a\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> vi;\n        IF vi vt ve \\<in> set (Falseif # r);\n        lowest_tops (Falseif # r) = Some a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> vi", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>vt ve a.\n                \\<lbrakk>IF vi vt ve \\<in> set r_;\n                 lowest_tops r_ = Some a\\<rbrakk>\n                \\<Longrightarrow> a \\<le> vi;\n     IF vi vt_ ve_ \\<in> set (IF v_ uu_ uv_ # r_);\n     lowest_tops (IF v_ uu_ uv_ # r_) = Some a_\\<rbrakk>\n    \\<Longrightarrow> a_ \\<le> vi", "apply(auto simp add: min_def split: if_splits option.splits dest: lowest_tops_NoneD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>vt ve a.\n                   \\<lbrakk>IF vi vt ve \\<in> set r_; x2 = a\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> vi;\n        lowest_tops r_ = Some x2; \\<not> x2 \\<le> a_; v_ = a_;\n        IF vi vt_ ve_ \\<in> set r_\\<rbrakk>\n       \\<Longrightarrow> a_ \\<le> vi", "by (meson le_cases order_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>vt ve a.\n       \\<lbrakk>IF vi vt ve \\<in> set []; lowest_tops [] = Some a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> vi\n 2. \\<And>r vt ve a.\n       \\<lbrakk>\\<And>vt ve a.\n                   \\<lbrakk>IF vi vt ve \\<in> set r;\n                    lowest_tops r = Some a\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> vi;\n        IF vi vt ve \\<in> set (Trueif # r);\n        lowest_tops (Trueif # r) = Some a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> vi\n 3. \\<And>r vt ve a.\n       \\<lbrakk>\\<And>vt ve a.\n                   \\<lbrakk>IF vi vt ve \\<in> set r;\n                    lowest_tops r = Some a\\<rbrakk>\n                   \\<Longrightarrow> a \\<le> vi;\n        IF vi vt ve \\<in> set (Falseif # r);\n        lowest_tops (Falseif # r) = Some a\\<rbrakk>\n       \\<Longrightarrow> a \\<le> vi", "by (auto)"], ["", "lemma hlp1: \"i \\<in> set is \\<Longrightarrow> lowest_tops is = Some a \\<Longrightarrow> ifex_ordered i \\<Longrightarrow> a \\<notin> (ifex_var_set (restrict_top i a val))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some a;\n     ifex_ordered i\\<rbrakk>\n    \\<Longrightarrow> a \\<notin> ifex_var_set (restrict_top i a val)", "proof(rule ccontr, unfold not_not, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some a; ifex_ordered i;\n     a \\<in> ifex_var_set (restrict_top i a val)\\<rbrakk>\n    \\<Longrightarrow> False", "case 1"], ["proof (state)\nthis:\n  i \\<in> set is\n  lowest_tops is = Some a\n  ifex_ordered i\n  a \\<in> ifex_var_set (restrict_top i a val)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some a; ifex_ordered i;\n     a \\<in> ifex_var_set (restrict_top i a val)\\<rbrakk>\n    \\<Longrightarrow> False", "from 1(4)"], ["proof (chain)\npicking this:\n  a \\<in> ifex_var_set (restrict_top i a val)", "obtain vi vt ve where vi: \"i = IF vi vt ve\""], ["proof (prove)\nusing this:\n  a \\<in> ifex_var_set (restrict_top i a val)\n\ngoal (1 subgoal):\n 1. (\\<And>vi vt ve.\n        i = IF vi vt ve \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases i) simp_all"], ["proof (state)\nthis:\n  i = IF vi vt ve\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some a; ifex_ordered i;\n     a \\<in> ifex_var_set (restrict_top i a val)\\<rbrakk>\n    \\<Longrightarrow> False", "with 1"], ["proof (chain)\npicking this:\n  i \\<in> set is\n  lowest_tops is = Some a\n  ifex_ordered i\n  a \\<in> ifex_var_set (restrict_top i a val)\n  i = IF vi vt ve", "have ne: \"vi \\<noteq> a\""], ["proof (prove)\nusing this:\n  i \\<in> set is\n  lowest_tops is = Some a\n  ifex_ordered i\n  a \\<in> ifex_var_set (restrict_top i a val)\n  i = IF vi vt ve\n\ngoal (1 subgoal):\n 1. vi \\<noteq> a", "by(simp split: if_splits) blast+"], ["proof (state)\nthis:\n  vi \\<noteq> a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some a; ifex_ordered i;\n     a \\<in> ifex_var_set (restrict_top i a val)\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  vi \\<noteq> a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some a; ifex_ordered i;\n     a \\<in> ifex_var_set (restrict_top i a val)\\<rbrakk>\n    \\<Longrightarrow> False", "have \"vi \\<le> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vi \\<le> a", "using 1(3,4)"], ["proof (prove)\nusing this:\n  ifex_ordered i\n  a \\<in> ifex_var_set (restrict_top i a val)\n\ngoal (1 subgoal):\n 1. vi \\<le> a", "proof(-,goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_ordered i;\n     a \\<in> ifex_var_set (restrict_top i a val)\\<rbrakk>\n    \\<Longrightarrow> vi \\<le> a", "case 1"], ["proof (state)\nthis:\n  ifex_ordered i\n  a \\<in> ifex_var_set (restrict_top i a val)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_ordered i;\n     a \\<in> ifex_var_set (restrict_top i a val)\\<rbrakk>\n    \\<Longrightarrow> vi \\<le> a", "hence \"a \\<in> (ifex_var_set vt) \\<or> a \\<in> (ifex_var_set ve)\""], ["proof (prove)\nusing this:\n  ifex_ordered i\n  a \\<in> ifex_var_set (restrict_top i a val)\n\ngoal (1 subgoal):\n 1. a \\<in> ifex_var_set vt \\<or> a \\<in> ifex_var_set ve", "using ne"], ["proof (prove)\nusing this:\n  ifex_ordered i\n  a \\<in> ifex_var_set (restrict_top i a val)\n  vi \\<noteq> a\n\ngoal (1 subgoal):\n 1. a \\<in> ifex_var_set vt \\<or> a \\<in> ifex_var_set ve", "by(simp add: vi)"], ["proof (state)\nthis:\n  a \\<in> ifex_var_set vt \\<or> a \\<in> ifex_var_set ve\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_ordered i;\n     a \\<in> ifex_var_set (restrict_top i a val)\\<rbrakk>\n    \\<Longrightarrow> vi \\<le> a", "thus ?case"], ["proof (prove)\nusing this:\n  a \\<in> ifex_var_set vt \\<or> a \\<in> ifex_var_set ve\n\ngoal (1 subgoal):\n 1. vi \\<le> a", "using \\<open>ifex_ordered i\\<close> vi"], ["proof (prove)\nusing this:\n  a \\<in> ifex_var_set vt \\<or> a \\<in> ifex_var_set ve\n  ifex_ordered i\n  i = IF vi vt ve\n\ngoal (1 subgoal):\n 1. vi \\<le> a", "using less_imp_le"], ["proof (prove)\nusing this:\n  a \\<in> ifex_var_set vt \\<or> a \\<in> ifex_var_set ve\n  ifex_ordered i\n  i = IF vi vt ve\n  ?x < ?y \\<Longrightarrow> ?x \\<le> ?y\n\ngoal (1 subgoal):\n 1. vi \\<le> a", "by auto"], ["proof (state)\nthis:\n  vi \\<le> a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vi \\<le> a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some a; ifex_ordered i;\n     a \\<in> ifex_var_set (restrict_top i a val)\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  vi \\<le> a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some a; ifex_ordered i;\n     a \\<in> ifex_var_set (restrict_top i a val)\\<rbrakk>\n    \\<Longrightarrow> False", "have \"a \\<le> vi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> vi", "using 1(1)"], ["proof (prove)\nusing this:\n  i \\<in> set is\n\ngoal (1 subgoal):\n 1. a \\<le> vi", "unfolding vi"], ["proof (prove)\nusing this:\n  IF vi vt ve \\<in> set is\n\ngoal (1 subgoal):\n 1. a \\<le> vi", "using 1(2) hlp2"], ["proof (prove)\nusing this:\n  IF vi vt ve \\<in> set is\n  lowest_tops is = Some a\n  \\<lbrakk>IF ?vi ?vt ?ve \\<in> set ?is; lowest_tops ?is = Some ?a\\<rbrakk>\n  \\<Longrightarrow> ?a \\<le> ?vi\n\ngoal (1 subgoal):\n 1. a \\<le> vi", "by metis"], ["proof (state)\nthis:\n  a \\<le> vi\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some a; ifex_ordered i;\n     a \\<in> ifex_var_set (restrict_top i a val)\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  vi \\<noteq> a\n  vi \\<le> a\n  a \\<le> vi", "show False"], ["proof (prove)\nusing this:\n  vi \\<noteq> a\n  vi \\<le> a\n  a \\<le> vi\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma order_ifex_ite_invar: \"ifex_ordered i \\<Longrightarrow> ifex_ordered t \\<Longrightarrow> ifex_ordered e \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_ordered i; ifex_ordered t; ifex_ordered e\\<rbrakk>\n    \\<Longrightarrow> ifex_ordered (ifex_ite i t e)", "proof(induction i t e rule: ifex_ite_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 3. \\<And>i t e a.\n       \\<lbrakk>\\<And>val.\n                   \\<lbrakk>ifex_ordered (restrict_top i a val);\n                    ifex_ordered (restrict_top t a val);\n                    ifex_ordered (restrict_top e a val)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ordered\n(ifex_ite (restrict_top i a val) (restrict_top t a val)\n  (restrict_top e a val));\n        lowest_tops [i, t, e] = Some a; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)", "case (IF i t e)"], ["proof (state)\nthis:\n  \\<lbrakk>ifex_ordered (restrict_top i a_ ?val);\n   ifex_ordered (restrict_top t a_ ?val);\n   ifex_ordered (restrict_top e a_ ?val)\\<rbrakk>\n  \\<Longrightarrow> ifex_ordered\n                     (ifex_ite (restrict_top i a_ ?val)\n                       (restrict_top t a_ ?val) (restrict_top e a_ ?val))\n  lowest_tops [i, t, e] = Some a_\n  ifex_ordered i\n  ifex_ordered t\n  ifex_ordered e\n\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 3. \\<And>i t e a.\n       \\<lbrakk>\\<And>val.\n                   \\<lbrakk>ifex_ordered (restrict_top i a val);\n                    ifex_ordered (restrict_top t a val);\n                    ifex_ordered (restrict_top e a val)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ordered\n(ifex_ite (restrict_top i a val) (restrict_top t a val)\n  (restrict_top e a val));\n        lowest_tops [i, t, e] = Some a; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)", "note goal1 = IF"], ["proof (state)\nthis:\n  \\<lbrakk>ifex_ordered (restrict_top i a_ ?val);\n   ifex_ordered (restrict_top t a_ ?val);\n   ifex_ordered (restrict_top e a_ ?val)\\<rbrakk>\n  \\<Longrightarrow> ifex_ordered\n                     (ifex_ite (restrict_top i a_ ?val)\n                       (restrict_top t a_ ?val) (restrict_top e a_ ?val))\n  lowest_tops [i, t, e] = Some a_\n  ifex_ordered i\n  ifex_ordered t\n  ifex_ordered e\n\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 3. \\<And>i t e a.\n       \\<lbrakk>\\<And>val.\n                   \\<lbrakk>ifex_ordered (restrict_top i a val);\n                    ifex_ordered (restrict_top t a val);\n                    ifex_ordered (restrict_top e a val)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ordered\n(ifex_ite (restrict_top i a val) (restrict_top t a val)\n  (restrict_top e a val));\n        lowest_tops [i, t, e] = Some a; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)", "note l = restrict_top_ifex_ordered_invar"], ["proof (state)\nthis:\n  ifex_ordered ?b \\<Longrightarrow> ifex_ordered (restrict_top ?b ?var ?val)\n\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 3. \\<And>i t e a.\n       \\<lbrakk>\\<And>val.\n                   \\<lbrakk>ifex_ordered (restrict_top i a val);\n                    ifex_ordered (restrict_top t a val);\n                    ifex_ordered (restrict_top e a val)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ordered\n(ifex_ite (restrict_top i a val) (restrict_top t a val)\n  (restrict_top e a val));\n        lowest_tops [i, t, e] = Some a; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)", "note l[OF goal1(3)] l[OF goal1(4)] l[OF goal1(5)]"], ["proof (state)\nthis:\n  ifex_ordered (restrict_top i ?var ?val)\n  ifex_ordered (restrict_top t ?var ?val)\n  ifex_ordered (restrict_top e ?var ?val)\n\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 3. \\<And>i t e a.\n       \\<lbrakk>\\<And>val.\n                   \\<lbrakk>ifex_ordered (restrict_top i a val);\n                    ifex_ordered (restrict_top t a val);\n                    ifex_ordered (restrict_top e a val)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ordered\n(ifex_ite (restrict_top i a val) (restrict_top t a val)\n  (restrict_top e a val));\n        lowest_tops [i, t, e] = Some a; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)", "note mIH = goal1(1)[OF this]"], ["proof (state)\nthis:\n  ifex_ordered\n   (ifex_ite (restrict_top i a_ ?val) (restrict_top t a_ ?val)\n     (restrict_top e a_ ?val))\n\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 3. \\<And>i t e a.\n       \\<lbrakk>\\<And>val.\n                   \\<lbrakk>ifex_ordered (restrict_top i a val);\n                    ifex_ordered (restrict_top t a val);\n                    ifex_ordered (restrict_top e a val)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ordered\n(ifex_ite (restrict_top i a val) (restrict_top t a val)\n  (restrict_top e a val));\n        lowest_tops [i, t, e] = Some a; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)", "note blubb = lowest_tops_lowest[OF goal1(2) _ _ restrict_top_subset]"], ["proof (state)\nthis:\n  \\<lbrakk>?e \\<in> set [i, t, e]; ifex_ordered ?e;\n   ?v \\<in> ifex_var_set (restrict_top ?e ?vr1 ?vl1)\\<rbrakk>\n  \\<Longrightarrow> a_ \\<le> ?v\n\ngoal (3 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 3. \\<And>i t e a.\n       \\<lbrakk>\\<And>val.\n                   \\<lbrakk>ifex_ordered (restrict_top i a val);\n                    ifex_ordered (restrict_top t a val);\n                    ifex_ordered (restrict_top e a val)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ordered\n(ifex_ite (restrict_top i a val) (restrict_top t a val)\n  (restrict_top e a val));\n        lowest_tops [i, t, e] = Some a; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_ordered (ifex_ite i t e)", "using mIH"], ["proof (prove)\nusing this:\n  ifex_ordered\n   (ifex_ite (restrict_top i a_ ?val) (restrict_top t a_ ?val)\n     (restrict_top e a_ ?val))\n\ngoal (1 subgoal):\n 1. ifex_ordered (ifex_ite i t e)", "by (subst ifex_ite.simps,\n    auto simp del: ifex_ite.simps\n      simp add: IFC_def goal1(2) hlp1[OF three_ins(1) goal1(2) goal1(3)] hlp1[OF three_ins(2) goal1(2) goal1(4)] hlp1[OF three_ins(3) goal1(2) goal1(5)] \n      dest: ifex_vars_subset blubb[OF three_ins(1) goal1(3)] blubb[OF three_ins(2) goal1(4)] blubb[OF three_ins(3) goal1(5)] \n      intro!: le_neq_trans)"], ["proof (state)\nthis:\n  ifex_ordered (ifex_ite i t e)\n\ngoal (2 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)\n 2. \\<And>i t e.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif; ifex_ordered i;\n        ifex_ordered t; ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> ifex_ordered (ifex_ite i t e)", "qed simp_all"], ["", "lemma ifc_split: \"P (IFC v t e) \\<longleftrightarrow> ((t = e) \\<longrightarrow> P t) \\<and> (t \\<noteq> e \\<longrightarrow> P (IF v t e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (IFC v t e) =\n    ((t = e \\<longrightarrow> P t) \\<and>\n     (t \\<noteq> e \\<longrightarrow> P (IF v t e)))", "unfolding IFC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (if t = e then t else IF v t e) =\n    ((t = e \\<longrightarrow> P t) \\<and>\n     (t \\<noteq> e \\<longrightarrow> P (IF v t e)))", "by simp"], ["", "lemma restrict_top_ifex_minimal_invar: \"ifex_minimal i \\<Longrightarrow> ifex_minimal (restrict_top i a val)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_minimal i \\<Longrightarrow> ifex_minimal (restrict_top i a val)", "by(induction i) simp_all"], ["", "lemma minimal_ifex_ite_invar: \"ifex_minimal i \\<Longrightarrow> ifex_minimal t \\<Longrightarrow> ifex_minimal e \\<Longrightarrow> ifex_minimal (ifex_ite i t e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_minimal i; ifex_minimal t; ifex_minimal e\\<rbrakk>\n    \\<Longrightarrow> ifex_minimal (ifex_ite i t e)", "by(induction i t e rule: ifex_ite_induct) (simp_all split: ifc_split option.split add: restrict_top_ifex_minimal_invar)"], ["", "lemma restrict_top_bf: \"i \\<in> set is \\<Longrightarrow> lowest_tops is = Some vr \\<Longrightarrow>\n  ifex_ordered i \\<Longrightarrow> (\\<And>ass. fi ass = val_ifex i ass) \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass = bf_restrict vr vl fi ass\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n     \\<And>ass. fi ass = val_ifex i ass\\<rbrakk>\n    \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                      bf_restrict vr vl fi ass", "proof(cases i, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n     \\<And>ass. fi ass = val_ifex i ass; i = Trueif\\<rbrakk>\n    \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                      bf_restrict vr vl fi ass\n 2. \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n     \\<And>ass. fi ass = val_ifex i ass; i = Falseif\\<rbrakk>\n    \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                      bf_restrict vr vl fi ass\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n        \\<And>ass. fi ass = val_ifex i ass; i = IF x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                         bf_restrict vr vl fi ass", "case (3 x31 x32 x33)"], ["proof (state)\nthis:\n  i \\<in> set is\n  lowest_tops is = Some vr\n  ifex_ordered i\n  fi ?ass = val_ifex i ?ass\n  i = IF x31 x32 x33\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n     \\<And>ass. fi ass = val_ifex i ass; i = Trueif\\<rbrakk>\n    \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                      bf_restrict vr vl fi ass\n 2. \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n     \\<And>ass. fi ass = val_ifex i ass; i = Falseif\\<rbrakk>\n    \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                      bf_restrict vr vl fi ass\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n        \\<And>ass. fi ass = val_ifex i ass; i = IF x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                         bf_restrict vr vl fi ass", "note goal3 = 3"], ["proof (state)\nthis:\n  i \\<in> set is\n  lowest_tops is = Some vr\n  ifex_ordered i\n  fi ?ass = val_ifex i ?ass\n  i = IF x31 x32 x33\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n     \\<And>ass. fi ass = val_ifex i ass; i = Trueif\\<rbrakk>\n    \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                      bf_restrict vr vl fi ass\n 2. \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n     \\<And>ass. fi ass = val_ifex i ass; i = Falseif\\<rbrakk>\n    \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                      bf_restrict vr vl fi ass\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n        \\<And>ass. fi ass = val_ifex i ass; i = IF x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                         bf_restrict vr vl fi ass", "have rr: \"restrict_top i vr vl = restrict i vr vl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_top i vr vl = restrict i vr vl", "proof(cases \"x31 = vr\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x31 = vr \\<Longrightarrow> restrict_top i vr vl = restrict i vr vl\n 2. x31 \\<noteq> vr \\<Longrightarrow>\n    restrict_top i vr vl = restrict i vr vl", "case True"], ["proof (state)\nthis:\n  x31 = vr\n\ngoal (2 subgoals):\n 1. x31 = vr \\<Longrightarrow> restrict_top i vr vl = restrict i vr vl\n 2. x31 \\<noteq> vr \\<Longrightarrow>\n    restrict_top i vr vl = restrict i vr vl", "note uf = restrict_top_eq[OF goal3(3)[unfolded goal3(5)], symmetric, unfolded goal3(5)[symmetric], unfolded True]"], ["proof (state)\nthis:\n  restrict_top i vr ?val = restrict i vr ?val\n\ngoal (2 subgoals):\n 1. x31 = vr \\<Longrightarrow> restrict_top i vr vl = restrict i vr vl\n 2. x31 \\<noteq> vr \\<Longrightarrow>\n    restrict_top i vr vl = restrict i vr vl", "thus ?thesis"], ["proof (prove)\nusing this:\n  restrict_top i vr ?val = restrict i vr ?val\n\ngoal (1 subgoal):\n 1. restrict_top i vr vl = restrict i vr vl", "."], ["proof (state)\nthis:\n  restrict_top i vr vl = restrict i vr vl\n\ngoal (1 subgoal):\n 1. x31 \\<noteq> vr \\<Longrightarrow>\n    restrict_top i vr vl = restrict i vr vl", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x31 \\<noteq> vr \\<Longrightarrow>\n    restrict_top i vr vl = restrict i vr vl", "case False"], ["proof (state)\nthis:\n  x31 \\<noteq> vr\n\ngoal (1 subgoal):\n 1. x31 \\<noteq> vr \\<Longrightarrow>\n    restrict_top i vr vl = restrict i vr vl", "have 1: \"restrict_top i vr vl = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_top i vr vl = i", "by (simp add: False goal3(5))"], ["proof (state)\nthis:\n  restrict_top i vr vl = i\n\ngoal (1 subgoal):\n 1. x31 \\<noteq> vr \\<Longrightarrow>\n    restrict_top i vr vl = restrict i vr vl", "have \"vr < x31\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vr < x31", "using le_neq_trans[OF hlp2[OF goal3(1)[unfolded goal3(5)] goal3(2)] False[symmetric]]"], ["proof (prove)\nusing this:\n  vr < x31\n\ngoal (1 subgoal):\n 1. vr < x31", "by blast"], ["proof (state)\nthis:\n  vr < x31\n\ngoal (1 subgoal):\n 1. x31 \\<noteq> vr \\<Longrightarrow>\n    restrict_top i vr vl = restrict i vr vl", "with goal3(3,5)"], ["proof (chain)\npicking this:\n  ifex_ordered i\n  i = IF x31 x32 x33\n  vr < x31", "have 2: \"restrict i vr vl = i\""], ["proof (prove)\nusing this:\n  ifex_ordered i\n  i = IF x31 x32 x33\n  vr < x31\n\ngoal (1 subgoal):\n 1. restrict i vr vl = i", "using restrict_IF_id"], ["proof (prove)\nusing this:\n  ifex_ordered i\n  i = IF x31 x32 x33\n  vr < x31\n  \\<lbrakk>ifex_ordered (IF ?v ?t ?e); ?v' < ?v\\<rbrakk>\n  \\<Longrightarrow> restrict (IF ?v ?t ?e) ?v' ?val = IF ?v ?t ?e\n\ngoal (1 subgoal):\n 1. restrict i vr vl = i", "by blast"], ["proof (state)\nthis:\n  restrict i vr vl = i\n\ngoal (1 subgoal):\n 1. x31 \\<noteq> vr \\<Longrightarrow>\n    restrict_top i vr vl = restrict i vr vl", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_top i vr vl = restrict i vr vl", "unfolding 1 2"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = i", ".."], ["proof (state)\nthis:\n  restrict_top i vr vl = restrict i vr vl\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  restrict_top i vr vl = restrict i vr vl\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n     \\<And>ass. fi ass = val_ifex i ass; i = Trueif\\<rbrakk>\n    \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                      bf_restrict vr vl fi ass\n 2. \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n     \\<And>ass. fi ass = val_ifex i ass; i = Falseif\\<rbrakk>\n    \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                      bf_restrict vr vl fi ass\n 3. \\<And>x31 x32 x33.\n       \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n        \\<And>ass. fi ass = val_ifex i ass; i = IF x31 x32 x33\\<rbrakk>\n       \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                         bf_restrict vr vl fi ass", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_ifex (restrict_top i vr vl) ass = bf_restrict vr vl fi ass", "unfolding rr"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_ifex (restrict i vr vl) ass = bf_restrict vr vl fi ass", "by(simp add: goal3(4) restrict_val_invar[symmetric])"], ["proof (state)\nthis:\n  val_ifex (restrict_top i vr vl) ass = bf_restrict vr vl fi ass\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n     \\<And>ass. fi ass = val_ifex i ass; i = Trueif\\<rbrakk>\n    \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                      bf_restrict vr vl fi ass\n 2. \\<lbrakk>i \\<in> set is; lowest_tops is = Some vr; ifex_ordered i;\n     \\<And>ass. fi ass = val_ifex i ass; i = Falseif\\<rbrakk>\n    \\<Longrightarrow> val_ifex (restrict_top i vr vl) ass =\n                      bf_restrict vr vl fi ass", "qed (simp_all add: bf_restrict_def)"], ["", "lemma val_ifex_ite: \"\n  (\\<And>ass. fi ass = val_ifex i ass) \\<Longrightarrow>\n  (\\<And>ass. ft ass = val_ifex t ass) \\<Longrightarrow>\n  (\\<And>ass. fe ass = val_ifex e ass) \\<Longrightarrow>\n  ifex_ordered i \\<Longrightarrow> ifex_ordered t \\<Longrightarrow> ifex_ordered e \\<Longrightarrow>\n  (bf_ite fi ft fe) ass = val_ifex (ifex_ite i t e) ass\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ass. fi ass = val_ifex i ass;\n     \\<And>ass. ft ass = val_ifex t ass; \\<And>ass. fe ass = val_ifex e ass;\n     ifex_ordered i; ifex_ordered t; ifex_ordered e\\<rbrakk>\n    \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass", "proof(induction i t e arbitrary: fi ft fe rule: ifex_ite_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i t e fi ft fe.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass\n 2. \\<And>i t e fi ft fe.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass\n 3. \\<And>i t e a fi ft fe.\n       \\<lbrakk>\\<And>val fi ft fe.\n                   \\<lbrakk>\\<And>ass.\n                               fi ass = val_ifex (restrict_top i a val) ass;\n                    \\<And>ass. ft ass = val_ifex (restrict_top t a val) ass;\n                    \\<And>ass. fe ass = val_ifex (restrict_top e a val) ass;\n                    ifex_ordered (restrict_top i a val);\n                    ifex_ordered (restrict_top t a val);\n                    ifex_ordered (restrict_top e a val)\\<rbrakk>\n                   \\<Longrightarrow> bf_ite fi ft fe ass =\n                                     val_ifex\n(ifex_ite (restrict_top i a val) (restrict_top t a val)\n  (restrict_top e a val))\nass;\n        lowest_tops [i, t, e] = Some a; \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass", "case (IF i t e a)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>ass. ?fi ass = val_ifex (restrict_top i a ?val) ass;\n   \\<And>ass. ?ft ass = val_ifex (restrict_top t a ?val) ass;\n   \\<And>ass. ?fe ass = val_ifex (restrict_top e a ?val) ass;\n   ifex_ordered (restrict_top i a ?val);\n   ifex_ordered (restrict_top t a ?val);\n   ifex_ordered (restrict_top e a ?val)\\<rbrakk>\n  \\<Longrightarrow> bf_ite ?fi ?ft ?fe ass =\n                    val_ifex\n                     (ifex_ite (restrict_top i a ?val)\n                       (restrict_top t a ?val) (restrict_top e a ?val))\n                     ass\n  lowest_tops [i, t, e] = Some a\n  fi ?ass = val_ifex i ?ass\n  ft ?ass = val_ifex t ?ass\n  fe ?ass = val_ifex e ?ass\n  ifex_ordered i\n  ifex_ordered t\n  ifex_ordered e\n\ngoal (3 subgoals):\n 1. \\<And>i t e fi ft fe.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass\n 2. \\<And>i t e fi ft fe.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass\n 3. \\<And>i t e a fi ft fe.\n       \\<lbrakk>\\<And>val fi ft fe.\n                   \\<lbrakk>\\<And>ass.\n                               fi ass = val_ifex (restrict_top i a val) ass;\n                    \\<And>ass. ft ass = val_ifex (restrict_top t a val) ass;\n                    \\<And>ass. fe ass = val_ifex (restrict_top e a val) ass;\n                    ifex_ordered (restrict_top i a val);\n                    ifex_ordered (restrict_top t a val);\n                    ifex_ordered (restrict_top e a val)\\<rbrakk>\n                   \\<Longrightarrow> bf_ite fi ft fe ass =\n                                     val_ifex\n(ifex_ite (restrict_top i a val) (restrict_top t a val)\n  (restrict_top e a val))\nass;\n        lowest_tops [i, t, e] = Some a; \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass", "note mIH = IF(1)[OF refl refl refl\n    restrict_top_ifex_ordered_invar[OF IF(6)]\n    restrict_top_ifex_ordered_invar[OF IF(7)]\n    restrict_top_ifex_ordered_invar[OF IF(8)], symmetric]"], ["proof (state)\nthis:\n  val_ifex\n   (ifex_ite (restrict_top i a ?val) (restrict_top t a ?val)\n     (restrict_top e a ?val))\n   ass =\n  bf_ite (val_ifex (restrict_top i a ?val))\n   (val_ifex (restrict_top t a ?val)) (val_ifex (restrict_top e a ?val)) ass\n\ngoal (3 subgoals):\n 1. \\<And>i t e fi ft fe.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass\n 2. \\<And>i t e fi ft fe.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass\n 3. \\<And>i t e a fi ft fe.\n       \\<lbrakk>\\<And>val fi ft fe.\n                   \\<lbrakk>\\<And>ass.\n                               fi ass = val_ifex (restrict_top i a val) ass;\n                    \\<And>ass. ft ass = val_ifex (restrict_top t a val) ass;\n                    \\<And>ass. fe ass = val_ifex (restrict_top e a val) ass;\n                    ifex_ordered (restrict_top i a val);\n                    ifex_ordered (restrict_top t a val);\n                    ifex_ordered (restrict_top e a val)\\<rbrakk>\n                   \\<Longrightarrow> bf_ite fi ft fe ass =\n                                     val_ifex\n(ifex_ite (restrict_top i a val) (restrict_top t a val)\n  (restrict_top e a val))\nass;\n        lowest_tops [i, t, e] = Some a; \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass", "note uf1 = restrict_top_bf[OF three_ins(1) IF(2) \\<open>ifex_ordered i\\<close>  IF(3)]\n             restrict_top_bf[OF three_ins(2) IF(2) \\<open>ifex_ordered t\\<close>  IF(4)]\n             restrict_top_bf[OF three_ins(3) IF(2) \\<open>ifex_ordered e\\<close>  IF(5)]"], ["proof (state)\nthis:\n  val_ifex (restrict_top i a ?vl) ?ass = bf_restrict a ?vl fi ?ass\n  val_ifex (restrict_top t a ?vl) ?ass = bf_restrict a ?vl ft ?ass\n  val_ifex (restrict_top e a ?vl) ?ass = bf_restrict a ?vl fe ?ass\n\ngoal (3 subgoals):\n 1. \\<And>i t e fi ft fe.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass\n 2. \\<And>i t e fi ft fe.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass\n 3. \\<And>i t e a fi ft fe.\n       \\<lbrakk>\\<And>val fi ft fe.\n                   \\<lbrakk>\\<And>ass.\n                               fi ass = val_ifex (restrict_top i a val) ass;\n                    \\<And>ass. ft ass = val_ifex (restrict_top t a val) ass;\n                    \\<And>ass. fe ass = val_ifex (restrict_top e a val) ass;\n                    ifex_ordered (restrict_top i a val);\n                    ifex_ordered (restrict_top t a val);\n                    ifex_ordered (restrict_top e a val)\\<rbrakk>\n                   \\<Longrightarrow> bf_ite fi ft fe ass =\n                                     val_ifex\n(ifex_ite (restrict_top i a val) (restrict_top t a val)\n  (restrict_top e a val))\nass;\n        lowest_tops [i, t, e] = Some a; \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass", "by(rule trans[OF brace90shannon[where i=a]])\n      (auto simp: restrict_top_ifex_ordered_invar IF(1,2,6-8) uf1 mIH bf_ite_def[of \"\\<lambda>l. l a\"]\n            split: ifc_split)"], ["proof (state)\nthis:\n  bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass\n\ngoal (2 subgoals):\n 1. \\<And>i t e fi ft fe.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Trueif;\n        \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass\n 2. \\<And>i t e fi ft fe.\n       \\<lbrakk>lowest_tops [i, t, e] = None; i = Falseif;\n        \\<And>ass. fi ass = val_ifex i ass;\n        \\<And>ass. ft ass = val_ifex t ass;\n        \\<And>ass. fe ass = val_ifex e ass; ifex_ordered i; ifex_ordered t;\n        ifex_ordered e\\<rbrakk>\n       \\<Longrightarrow> bf_ite fi ft fe ass = val_ifex (ifex_ite i t e) ass", "qed (simp add: bf_ite_def bf_ifex_rel_def)+"], ["", "theorem ifex_ite_rel_bf: \"\n  (fi,i) \\<in> bf_ifex_rel \\<Longrightarrow>\n  (ft,t) \\<in> bf_ifex_rel \\<Longrightarrow>\n  (fe,e) \\<in> bf_ifex_rel \\<Longrightarrow>\n  ((bf_ite fi ft fe), (ifex_ite i t e)) \\<in> bf_ifex_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(fi, i) \\<in> bf_ifex_rel; (ft, t) \\<in> bf_ifex_rel;\n     (fe, e) \\<in> bf_ifex_rel\\<rbrakk>\n    \\<Longrightarrow> (bf_ite fi ft fe, ifex_ite i t e) \\<in> bf_ifex_rel", "by (auto simp add:  bf_ifex_rel_def order_ifex_ite_invar minimal_ifex_ite_invar val_ifex_ite\n         simp del: ifex_ite.simps)"], ["", "definition param_opt where \"param_opt i t e =\n  (if i = Trueif then Some t else\n   if i = Falseif then Some e else\n   if t = Trueif \\<and> e = Falseif then Some i else\n   if t = e then Some t else\n   if e = Trueif \\<and> i = t then Some Trueif else\n   if t = Falseif \\<and> i = e then Some Falseif else\n   None)\""], ["", "lemma param_opt_ifex_ite_eq: \"ro_ifex i \\<Longrightarrow> ro_ifex t \\<Longrightarrow> ro_ifex e \\<Longrightarrow>\n       param_opt i t e = Some r \\<Longrightarrow> r = ifex_ite i t e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ro_ifex i; ro_ifex t; ro_ifex e;\n     param_opt i t e = Some r\\<rbrakk>\n    \\<Longrightarrow> r = ifex_ite i t e", "apply(rule ro_ifex_unique)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ro_ifex i; ro_ifex t; ro_ifex e;\n     param_opt i t e = Some r\\<rbrakk>\n    \\<Longrightarrow> ro_ifex r\n 2. \\<lbrakk>ro_ifex i; ro_ifex t; ro_ifex e;\n     param_opt i t e = Some r\\<rbrakk>\n    \\<Longrightarrow> ro_ifex (ifex_ite i t e)\n 3. \\<And>ass.\n       \\<lbrakk>ro_ifex i; ro_ifex t; ro_ifex e;\n        param_opt i t e = Some r\\<rbrakk>\n       \\<Longrightarrow> val_ifex r ass = val_ifex (ifex_ite i t e) ass", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ro_ifex i; ro_ifex t; ro_ifex e;\n     param_opt i t e = Some r\\<rbrakk>\n    \\<Longrightarrow> ro_ifex r", "by (subst (asm) param_opt_def) (simp split: if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ro_ifex i; ro_ifex t; ro_ifex e;\n     param_opt i t e = Some r\\<rbrakk>\n    \\<Longrightarrow> ro_ifex (ifex_ite i t e)\n 2. \\<And>ass.\n       \\<lbrakk>ro_ifex i; ro_ifex t; ro_ifex e;\n        param_opt i t e = Some r\\<rbrakk>\n       \\<Longrightarrow> val_ifex r ass = val_ifex (ifex_ite i t e) ass", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ro_ifex i; ro_ifex t; ro_ifex e;\n     param_opt i t e = Some r\\<rbrakk>\n    \\<Longrightarrow> ro_ifex (ifex_ite i t e)", "using order_ifex_ite_invar minimal_ifex_ite_invar"], ["proof (prove)\nusing this:\n  \\<lbrakk>ifex_ordered ?i; ifex_ordered ?t; ifex_ordered ?e\\<rbrakk>\n  \\<Longrightarrow> ifex_ordered (ifex_ite ?i ?t ?e)\n  \\<lbrakk>ifex_minimal ?i; ifex_minimal ?t; ifex_minimal ?e\\<rbrakk>\n  \\<Longrightarrow> ifex_minimal (ifex_ite ?i ?t ?e)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ro_ifex i; ro_ifex t; ro_ifex e;\n     param_opt i t e = Some r\\<rbrakk>\n    \\<Longrightarrow> ro_ifex (ifex_ite i t e)", "by (blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ass.\n       \\<lbrakk>ro_ifex i; ro_ifex t; ro_ifex e;\n        param_opt i t e = Some r\\<rbrakk>\n       \\<Longrightarrow> val_ifex r ass = val_ifex (ifex_ite i t e) ass", "by (subst val_ifex_ite[symmetric])\n      (auto split: if_split_asm simp add: bf_ite_def param_opt_def val_ifex_ite[symmetric])"], ["", "function ifex_ite_opt :: \"'a ifex \\<Rightarrow> 'a ifex \\<Rightarrow> 'a ifex \\<Rightarrow> ('a :: linorder) ifex\" where\n  \"ifex_ite_opt i t e = (case param_opt i t e of Some b \\<Rightarrow> b | None \\<Rightarrow>\n                        (case lowest_tops [i, t, e] of Some x \\<Rightarrow> \n                         (IFC x (ifex_ite_opt (restrict_top i x True) (restrict_top t x True)\n                                              (restrict_top e x True))\n                                (ifex_ite_opt (restrict_top i x False) (restrict_top t x False)\n                                              (restrict_top e x False)))\n                     | None \\<Rightarrow> (case i of Trueif \\<Rightarrow> t | Falseif \\<Rightarrow> e)))\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>i t e. x = (i, t, e) \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>i t e ia ta ea.\n       (i, t, e) = (ia, ta, ea) \\<Longrightarrow>\n       (case param_opt i t e of\n        None \\<Rightarrow>\n          case lowest_tops [i, t, e] of\n          None \\<Rightarrow>\n            case i of Trueif \\<Rightarrow> t | Falseif \\<Rightarrow> e\n          | Some x \\<Rightarrow>\n              IFC x\n               (ifex_ite_opt_sumC\n                 (restrict_top i x True, restrict_top t x True,\n                  restrict_top e x True))\n               (ifex_ite_opt_sumC\n                 (restrict_top i x False, restrict_top t x False,\n                  restrict_top e x False))\n        | Some b \\<Rightarrow> b) =\n       (case param_opt ia ta ea of\n        None \\<Rightarrow>\n          case lowest_tops [ia, ta, ea] of\n          None \\<Rightarrow>\n            case ia of Trueif \\<Rightarrow> ta | Falseif \\<Rightarrow> ea\n          | Some x \\<Rightarrow>\n              IFC x\n               (ifex_ite_opt_sumC\n                 (restrict_top ia x True, restrict_top ta x True,\n                  restrict_top ea x True))\n               (ifex_ite_opt_sumC\n                 (restrict_top ia x False, restrict_top ta x False,\n                  restrict_top ea x False))\n        | Some b \\<Rightarrow> b)", "by pat_completeness auto"], ["", "termination ifex_ite_opt"], ["proof (prove)\ngoal (1 subgoal):\n 1. All ifex_ite_opt_dom", "by (relation \"measure (\\<lambda>(i,t,e). size i + size t + size e)\", rule wf_measure, unfold in_measure)\n     (simp_all only: termlemma)"], ["", "lemma ifex_ite_opt_eq: \"\n  ro_ifex i \\<Longrightarrow> ro_ifex t \\<Longrightarrow> ro_ifex e \\<Longrightarrow> ifex_ite_opt i t e = ifex_ite i t e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ro_ifex i; ro_ifex t; ro_ifex e\\<rbrakk>\n    \\<Longrightarrow> ifex_ite_opt i t e = ifex_ite i t e", "apply(induction i t e rule: ifex_ite_opt.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i t e.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>param_opt i t e = None;\n                    lowest_tops [i, t, e] = Some x2;\n                    ro_ifex (restrict_top i x2 True);\n                    ro_ifex (restrict_top t x2 True);\n                    ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True) =\n                                     ifex_ite (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True);\n        \\<And>x2.\n           \\<lbrakk>param_opt i t e = None; lowest_tops [i, t, e] = Some x2;\n            ro_ifex (restrict_top i x2 False);\n            ro_ifex (restrict_top t x2 False);\n            ro_ifex (restrict_top e x2 False)\\<rbrakk>\n           \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False) =\n                             ifex_ite (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False);\n        ro_ifex i; ro_ifex t; ro_ifex e\\<rbrakk>\n       \\<Longrightarrow> ifex_ite_opt i t e = ifex_ite i t e", "apply(subst ifex_ite_opt.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i t e.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>param_opt i t e = None;\n                    lowest_tops [i, t, e] = Some x2;\n                    ro_ifex (restrict_top i x2 True);\n                    ro_ifex (restrict_top t x2 True);\n                    ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True) =\n                                     ifex_ite (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True);\n        \\<And>x2.\n           \\<lbrakk>param_opt i t e = None; lowest_tops [i, t, e] = Some x2;\n            ro_ifex (restrict_top i x2 False);\n            ro_ifex (restrict_top t x2 False);\n            ro_ifex (restrict_top e x2 False)\\<rbrakk>\n           \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False) =\n                             ifex_ite (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False);\n        ro_ifex i; ro_ifex t; ro_ifex e\\<rbrakk>\n       \\<Longrightarrow> (case param_opt i t e of\n                          None \\<Rightarrow>\n                            case lowest_tops [i, t, e] of\n                            None \\<Rightarrow>\n                              case i of Trueif \\<Rightarrow> t\n                              | Falseif \\<Rightarrow> e\n                            | Some x \\<Rightarrow>\n                                IFC x\n                                 (ifex_ite_opt (restrict_top i x True)\n                                   (restrict_top t x True)\n                                   (restrict_top e x True))\n                                 (ifex_ite_opt (restrict_top i x False)\n                                   (restrict_top t x False)\n                                   (restrict_top e x False))\n                          | Some b \\<Rightarrow> b) =\n                         ifex_ite i t e", "apply(rename_tac i t e)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i t e.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>param_opt i t e = None;\n                    lowest_tops [i, t, e] = Some x2;\n                    ro_ifex (restrict_top i x2 True);\n                    ro_ifex (restrict_top t x2 True);\n                    ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True) =\n                                     ifex_ite (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True);\n        \\<And>x2.\n           \\<lbrakk>param_opt i t e = None; lowest_tops [i, t, e] = Some x2;\n            ro_ifex (restrict_top i x2 False);\n            ro_ifex (restrict_top t x2 False);\n            ro_ifex (restrict_top e x2 False)\\<rbrakk>\n           \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False) =\n                             ifex_ite (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False);\n        ro_ifex i; ro_ifex t; ro_ifex e\\<rbrakk>\n       \\<Longrightarrow> (case param_opt i t e of\n                          None \\<Rightarrow>\n                            case lowest_tops [i, t, e] of\n                            None \\<Rightarrow>\n                              case i of Trueif \\<Rightarrow> t\n                              | Falseif \\<Rightarrow> e\n                            | Some x \\<Rightarrow>\n                                IFC x\n                                 (ifex_ite_opt (restrict_top i x True)\n                                   (restrict_top t x True)\n                                   (restrict_top e x True))\n                                 (ifex_ite_opt (restrict_top i x False)\n                                   (restrict_top t x False)\n                                   (restrict_top e x False))\n                          | Some b \\<Rightarrow> b) =\n                         ifex_ite i t e", "apply(case_tac \"\\<exists>r. param_opt i t e = Some r\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i t e.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>param_opt i t e = None;\n                    lowest_tops [i, t, e] = Some x2;\n                    ro_ifex (restrict_top i x2 True);\n                    ro_ifex (restrict_top t x2 True);\n                    ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True) =\n                                     ifex_ite (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True);\n        \\<And>x2.\n           \\<lbrakk>param_opt i t e = None; lowest_tops [i, t, e] = Some x2;\n            ro_ifex (restrict_top i x2 False);\n            ro_ifex (restrict_top t x2 False);\n            ro_ifex (restrict_top e x2 False)\\<rbrakk>\n           \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False) =\n                             ifex_ite (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False);\n        ro_ifex i; ro_ifex t; ro_ifex e;\n        \\<exists>r. param_opt i t e = Some r\\<rbrakk>\n       \\<Longrightarrow> (case param_opt i t e of\n                          None \\<Rightarrow>\n                            case lowest_tops [i, t, e] of\n                            None \\<Rightarrow>\n                              case i of Trueif \\<Rightarrow> t\n                              | Falseif \\<Rightarrow> e\n                            | Some x \\<Rightarrow>\n                                IFC x\n                                 (ifex_ite_opt (restrict_top i x True)\n                                   (restrict_top t x True)\n                                   (restrict_top e x True))\n                                 (ifex_ite_opt (restrict_top i x False)\n                                   (restrict_top t x False)\n                                   (restrict_top e x False))\n                          | Some b \\<Rightarrow> b) =\n                         ifex_ite i t e\n 2. \\<And>i t e.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>param_opt i t e = None;\n                    lowest_tops [i, t, e] = Some x2;\n                    ro_ifex (restrict_top i x2 True);\n                    ro_ifex (restrict_top t x2 True);\n                    ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True) =\n                                     ifex_ite (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True);\n        \\<And>x2.\n           \\<lbrakk>param_opt i t e = None; lowest_tops [i, t, e] = Some x2;\n            ro_ifex (restrict_top i x2 False);\n            ro_ifex (restrict_top t x2 False);\n            ro_ifex (restrict_top e x2 False)\\<rbrakk>\n           \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False) =\n                             ifex_ite (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False);\n        ro_ifex i; ro_ifex t; ro_ifex e;\n        \\<nexists>r. param_opt i t e = Some r\\<rbrakk>\n       \\<Longrightarrow> (case param_opt i t e of\n                          None \\<Rightarrow>\n                            case lowest_tops [i, t, e] of\n                            None \\<Rightarrow>\n                              case i of Trueif \\<Rightarrow> t\n                              | Falseif \\<Rightarrow> e\n                            | Some x \\<Rightarrow>\n                                IFC x\n                                 (ifex_ite_opt (restrict_top i x True)\n                                   (restrict_top t x True)\n                                   (restrict_top e x True))\n                                 (ifex_ite_opt (restrict_top i x False)\n                                   (restrict_top t x False)\n                                   (restrict_top e x False))\n                          | Some b \\<Rightarrow> b) =\n                         ifex_ite i t e", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>param_opt i_ t_ e_ = None;\n                 lowest_tops [i_, t_, e_] = Some x2;\n                 ro_ifex (restrict_top i_ x2 True);\n                 ro_ifex (restrict_top t_ x2 True);\n                 ro_ifex (restrict_top e_ x2 True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i_ x2 True)\n                                   (restrict_top t_ x2 True)\n                                   (restrict_top e_ x2 True) =\n                                  ifex_ite (restrict_top i_ x2 True)\n                                   (restrict_top t_ x2 True)\n                                   (restrict_top e_ x2 True);\n     \\<And>x2.\n        \\<lbrakk>param_opt i_ t_ e_ = None;\n         lowest_tops [i_, t_, e_] = Some x2;\n         ro_ifex (restrict_top i_ x2 False);\n         ro_ifex (restrict_top t_ x2 False);\n         ro_ifex (restrict_top e_ x2 False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i_ x2 False)\n                           (restrict_top t_ x2 False)\n                           (restrict_top e_ x2 False) =\n                          ifex_ite (restrict_top i_ x2 False)\n                           (restrict_top t_ x2 False)\n                           (restrict_top e_ x2 False);\n     ro_ifex i_; ro_ifex t_; ro_ifex e_;\n     \\<exists>r. param_opt i_ t_ e_ = Some r\\<rbrakk>\n    \\<Longrightarrow> (case param_opt i_ t_ e_ of\n                       None \\<Rightarrow>\n                         case lowest_tops [i_, t_, e_] of\n                         None \\<Rightarrow>\n                           case i_ of Trueif \\<Rightarrow> t_\n                           | Falseif \\<Rightarrow> e_\n                         | Some x \\<Rightarrow>\n                             IFC x\n                              (ifex_ite_opt (restrict_top i_ x True)\n                                (restrict_top t_ x True)\n                                (restrict_top e_ x True))\n                              (ifex_ite_opt (restrict_top i_ x False)\n                                (restrict_top t_ x False)\n                                (restrict_top e_ x False))\n                       | Some b \\<Rightarrow> b) =\n                      ifex_ite i_ t_ e_", "apply(simp del: ifex_ite.simps restrict_top.simps lowest_tops.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>param_opt i_ t_ e_ = None;\n                 lowest_tops [i_, t_, e_] = Some x2;\n                 ro_ifex (restrict_top i_ x2 True);\n                 ro_ifex (restrict_top t_ x2 True);\n                 ro_ifex (restrict_top e_ x2 True)\\<rbrakk>\n                \\<Longrightarrow> (case param_opt (restrict_top i_ x2 True)\n   (restrict_top t_ x2 True) (restrict_top e_ x2 True) of\n                                   None \\<Rightarrow>\n                                     case lowest_tops\n     [restrict_top i_ x2 True, restrict_top t_ x2 True,\n      restrict_top e_ x2 True] of\n                                     None \\<Rightarrow>\n case restrict_top i_ x2 True of\n Trueif \\<Rightarrow> restrict_top t_ x2 True\n | Falseif \\<Rightarrow> restrict_top e_ x2 True\n                                     | Some x \\<Rightarrow>\n   IFC x\n    (ifex_ite_opt (restrict_top (restrict_top i_ x2 True) x True)\n      (restrict_top (restrict_top t_ x2 True) x True)\n      (restrict_top (restrict_top e_ x2 True) x True))\n    (ifex_ite_opt (restrict_top (restrict_top i_ x2 True) x False)\n      (restrict_top (restrict_top t_ x2 True) x False)\n      (restrict_top (restrict_top e_ x2 True) x False))\n                                   | Some b \\<Rightarrow> b) =\n                                  ifex_ite (restrict_top i_ x2 True)\n                                   (restrict_top t_ x2 True)\n                                   (restrict_top e_ x2 True);\n     \\<And>x2.\n        \\<lbrakk>param_opt i_ t_ e_ = None;\n         lowest_tops [i_, t_, e_] = Some x2;\n         ro_ifex (restrict_top i_ x2 False);\n         ro_ifex (restrict_top t_ x2 False);\n         ro_ifex (restrict_top e_ x2 False)\\<rbrakk>\n        \\<Longrightarrow> (case param_opt (restrict_top i_ x2 False)\n                                 (restrict_top t_ x2 False)\n                                 (restrict_top e_ x2 False) of\n                           None \\<Rightarrow>\n                             case lowest_tops\n                                   [restrict_top i_ x2 False,\n                                    restrict_top t_ x2 False,\n                                    restrict_top e_ x2 False] of\n                             None \\<Rightarrow>\n                               case restrict_top i_ x2 False of\n                               Trueif \\<Rightarrow> restrict_top t_ x2 False\n                               | Falseif \\<Rightarrow>\n                                   restrict_top e_ x2 False\n                             | Some x \\<Rightarrow>\n                                 IFC x\n                                  (ifex_ite_opt\n                                    (restrict_top (restrict_top i_ x2 False)\nx True)\n                                    (restrict_top (restrict_top t_ x2 False)\nx True)\n                                    (restrict_top (restrict_top e_ x2 False)\nx True))\n                                  (ifex_ite_opt\n                                    (restrict_top (restrict_top i_ x2 False)\nx False)\n                                    (restrict_top (restrict_top t_ x2 False)\nx False)\n                                    (restrict_top (restrict_top e_ x2 False)\nx False))\n                           | Some b \\<Rightarrow> b) =\n                          ifex_ite (restrict_top i_ x2 False)\n                           (restrict_top t_ x2 False)\n                           (restrict_top e_ x2 False);\n     ro_ifex i_; ro_ifex t_; ro_ifex e_;\n     \\<exists>r. param_opt i_ t_ e_ = Some r\\<rbrakk>\n    \\<Longrightarrow> (case param_opt i_ t_ e_ of\n                       None \\<Rightarrow>\n                         case lowest_tops [i_, t_, e_] of\n                         None \\<Rightarrow>\n                           case i_ of Trueif \\<Rightarrow> t_\n                           | Falseif \\<Rightarrow> e_\n                         | Some x \\<Rightarrow>\n                             IFC x\n                              (ifex_ite_opt (restrict_top i_ x True)\n                                (restrict_top t_ x True)\n                                (restrict_top e_ x True))\n                              (ifex_ite_opt (restrict_top i_ x False)\n                                (restrict_top t_ x False)\n                                (restrict_top e_ x False))\n                       | Some b \\<Rightarrow> b) =\n                      ifex_ite i_ t_ e_", "apply(rule param_opt_ifex_ite_eq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>param_opt i_ t_ e_ = None;\n                 lowest_tops [i_, t_, e_] = Some x2;\n                 ro_ifex (restrict_top i_ x2 True);\n                 ro_ifex (restrict_top t_ x2 True);\n                 ro_ifex (restrict_top e_ x2 True)\\<rbrakk>\n                \\<Longrightarrow> (case param_opt (restrict_top i_ x2 True)\n   (restrict_top t_ x2 True) (restrict_top e_ x2 True) of\n                                   None \\<Rightarrow>\n                                     case lowest_tops\n     [restrict_top i_ x2 True, restrict_top t_ x2 True,\n      restrict_top e_ x2 True] of\n                                     None \\<Rightarrow>\n case restrict_top i_ x2 True of\n Trueif \\<Rightarrow> restrict_top t_ x2 True\n | Falseif \\<Rightarrow> restrict_top e_ x2 True\n                                     | Some x \\<Rightarrow>\n   IFC x\n    (ifex_ite_opt (restrict_top (restrict_top i_ x2 True) x True)\n      (restrict_top (restrict_top t_ x2 True) x True)\n      (restrict_top (restrict_top e_ x2 True) x True))\n    (ifex_ite_opt (restrict_top (restrict_top i_ x2 True) x False)\n      (restrict_top (restrict_top t_ x2 True) x False)\n      (restrict_top (restrict_top e_ x2 True) x False))\n                                   | Some b \\<Rightarrow> b) =\n                                  ifex_ite (restrict_top i_ x2 True)\n                                   (restrict_top t_ x2 True)\n                                   (restrict_top e_ x2 True);\n     \\<And>x2.\n        \\<lbrakk>param_opt i_ t_ e_ = None;\n         lowest_tops [i_, t_, e_] = Some x2;\n         ro_ifex (restrict_top i_ x2 False);\n         ro_ifex (restrict_top t_ x2 False);\n         ro_ifex (restrict_top e_ x2 False)\\<rbrakk>\n        \\<Longrightarrow> (case param_opt (restrict_top i_ x2 False)\n                                 (restrict_top t_ x2 False)\n                                 (restrict_top e_ x2 False) of\n                           None \\<Rightarrow>\n                             case lowest_tops\n                                   [restrict_top i_ x2 False,\n                                    restrict_top t_ x2 False,\n                                    restrict_top e_ x2 False] of\n                             None \\<Rightarrow>\n                               case restrict_top i_ x2 False of\n                               Trueif \\<Rightarrow> restrict_top t_ x2 False\n                               | Falseif \\<Rightarrow>\n                                   restrict_top e_ x2 False\n                             | Some x \\<Rightarrow>\n                                 IFC x\n                                  (ifex_ite_opt\n                                    (restrict_top (restrict_top i_ x2 False)\nx True)\n                                    (restrict_top (restrict_top t_ x2 False)\nx True)\n                                    (restrict_top (restrict_top e_ x2 False)\nx True))\n                                  (ifex_ite_opt\n                                    (restrict_top (restrict_top i_ x2 False)\nx False)\n                                    (restrict_top (restrict_top t_ x2 False)\nx False)\n                                    (restrict_top (restrict_top e_ x2 False)\nx False))\n                           | Some b \\<Rightarrow> b) =\n                          ifex_ite (restrict_top i_ x2 False)\n                           (restrict_top t_ x2 False)\n                           (restrict_top e_ x2 False);\n     ro_ifex i_; ro_ifex t_; ro_ifex e_;\n     \\<exists>r. param_opt i_ t_ e_ = Some r\\<rbrakk>\n    \\<Longrightarrow> ro_ifex i_\n 2. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>param_opt i_ t_ e_ = None;\n                 lowest_tops [i_, t_, e_] = Some x2;\n                 ro_ifex (restrict_top i_ x2 True);\n                 ro_ifex (restrict_top t_ x2 True);\n                 ro_ifex (restrict_top e_ x2 True)\\<rbrakk>\n                \\<Longrightarrow> (case param_opt (restrict_top i_ x2 True)\n   (restrict_top t_ x2 True) (restrict_top e_ x2 True) of\n                                   None \\<Rightarrow>\n                                     case lowest_tops\n     [restrict_top i_ x2 True, restrict_top t_ x2 True,\n      restrict_top e_ x2 True] of\n                                     None \\<Rightarrow>\n case restrict_top i_ x2 True of\n Trueif \\<Rightarrow> restrict_top t_ x2 True\n | Falseif \\<Rightarrow> restrict_top e_ x2 True\n                                     | Some x \\<Rightarrow>\n   IFC x\n    (ifex_ite_opt (restrict_top (restrict_top i_ x2 True) x True)\n      (restrict_top (restrict_top t_ x2 True) x True)\n      (restrict_top (restrict_top e_ x2 True) x True))\n    (ifex_ite_opt (restrict_top (restrict_top i_ x2 True) x False)\n      (restrict_top (restrict_top t_ x2 True) x False)\n      (restrict_top (restrict_top e_ x2 True) x False))\n                                   | Some b \\<Rightarrow> b) =\n                                  ifex_ite (restrict_top i_ x2 True)\n                                   (restrict_top t_ x2 True)\n                                   (restrict_top e_ x2 True);\n     \\<And>x2.\n        \\<lbrakk>param_opt i_ t_ e_ = None;\n         lowest_tops [i_, t_, e_] = Some x2;\n         ro_ifex (restrict_top i_ x2 False);\n         ro_ifex (restrict_top t_ x2 False);\n         ro_ifex (restrict_top e_ x2 False)\\<rbrakk>\n        \\<Longrightarrow> (case param_opt (restrict_top i_ x2 False)\n                                 (restrict_top t_ x2 False)\n                                 (restrict_top e_ x2 False) of\n                           None \\<Rightarrow>\n                             case lowest_tops\n                                   [restrict_top i_ x2 False,\n                                    restrict_top t_ x2 False,\n                                    restrict_top e_ x2 False] of\n                             None \\<Rightarrow>\n                               case restrict_top i_ x2 False of\n                               Trueif \\<Rightarrow> restrict_top t_ x2 False\n                               | Falseif \\<Rightarrow>\n                                   restrict_top e_ x2 False\n                             | Some x \\<Rightarrow>\n                                 IFC x\n                                  (ifex_ite_opt\n                                    (restrict_top (restrict_top i_ x2 False)\nx True)\n                                    (restrict_top (restrict_top t_ x2 False)\nx True)\n                                    (restrict_top (restrict_top e_ x2 False)\nx True))\n                                  (ifex_ite_opt\n                                    (restrict_top (restrict_top i_ x2 False)\nx False)\n                                    (restrict_top (restrict_top t_ x2 False)\nx False)\n                                    (restrict_top (restrict_top e_ x2 False)\nx False))\n                           | Some b \\<Rightarrow> b) =\n                          ifex_ite (restrict_top i_ x2 False)\n                           (restrict_top t_ x2 False)\n                           (restrict_top e_ x2 False);\n     ro_ifex i_; ro_ifex t_; ro_ifex e_;\n     \\<exists>r. param_opt i_ t_ e_ = Some r\\<rbrakk>\n    \\<Longrightarrow> ro_ifex t_\n 3. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>param_opt i_ t_ e_ = None;\n                 lowest_tops [i_, t_, e_] = Some x2;\n                 ro_ifex (restrict_top i_ x2 True);\n                 ro_ifex (restrict_top t_ x2 True);\n                 ro_ifex (restrict_top e_ x2 True)\\<rbrakk>\n                \\<Longrightarrow> (case param_opt (restrict_top i_ x2 True)\n   (restrict_top t_ x2 True) (restrict_top e_ x2 True) of\n                                   None \\<Rightarrow>\n                                     case lowest_tops\n     [restrict_top i_ x2 True, restrict_top t_ x2 True,\n      restrict_top e_ x2 True] of\n                                     None \\<Rightarrow>\n case restrict_top i_ x2 True of\n Trueif \\<Rightarrow> restrict_top t_ x2 True\n | Falseif \\<Rightarrow> restrict_top e_ x2 True\n                                     | Some x \\<Rightarrow>\n   IFC x\n    (ifex_ite_opt (restrict_top (restrict_top i_ x2 True) x True)\n      (restrict_top (restrict_top t_ x2 True) x True)\n      (restrict_top (restrict_top e_ x2 True) x True))\n    (ifex_ite_opt (restrict_top (restrict_top i_ x2 True) x False)\n      (restrict_top (restrict_top t_ x2 True) x False)\n      (restrict_top (restrict_top e_ x2 True) x False))\n                                   | Some b \\<Rightarrow> b) =\n                                  ifex_ite (restrict_top i_ x2 True)\n                                   (restrict_top t_ x2 True)\n                                   (restrict_top e_ x2 True);\n     \\<And>x2.\n        \\<lbrakk>param_opt i_ t_ e_ = None;\n         lowest_tops [i_, t_, e_] = Some x2;\n         ro_ifex (restrict_top i_ x2 False);\n         ro_ifex (restrict_top t_ x2 False);\n         ro_ifex (restrict_top e_ x2 False)\\<rbrakk>\n        \\<Longrightarrow> (case param_opt (restrict_top i_ x2 False)\n                                 (restrict_top t_ x2 False)\n                                 (restrict_top e_ x2 False) of\n                           None \\<Rightarrow>\n                             case lowest_tops\n                                   [restrict_top i_ x2 False,\n                                    restrict_top t_ x2 False,\n                                    restrict_top e_ x2 False] of\n                             None \\<Rightarrow>\n                               case restrict_top i_ x2 False of\n                               Trueif \\<Rightarrow> restrict_top t_ x2 False\n                               | Falseif \\<Rightarrow>\n                                   restrict_top e_ x2 False\n                             | Some x \\<Rightarrow>\n                                 IFC x\n                                  (ifex_ite_opt\n                                    (restrict_top (restrict_top i_ x2 False)\nx True)\n                                    (restrict_top (restrict_top t_ x2 False)\nx True)\n                                    (restrict_top (restrict_top e_ x2 False)\nx True))\n                                  (ifex_ite_opt\n                                    (restrict_top (restrict_top i_ x2 False)\nx False)\n                                    (restrict_top (restrict_top t_ x2 False)\nx False)\n                                    (restrict_top (restrict_top e_ x2 False)\nx False))\n                           | Some b \\<Rightarrow> b) =\n                          ifex_ite (restrict_top i_ x2 False)\n                           (restrict_top t_ x2 False)\n                           (restrict_top e_ x2 False);\n     ro_ifex i_; ro_ifex t_; ro_ifex e_;\n     \\<exists>r. param_opt i_ t_ e_ = Some r\\<rbrakk>\n    \\<Longrightarrow> ro_ifex e_\n 4. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>param_opt i_ t_ e_ = None;\n                 lowest_tops [i_, t_, e_] = Some x2;\n                 ro_ifex (restrict_top i_ x2 True);\n                 ro_ifex (restrict_top t_ x2 True);\n                 ro_ifex (restrict_top e_ x2 True)\\<rbrakk>\n                \\<Longrightarrow> (case param_opt (restrict_top i_ x2 True)\n   (restrict_top t_ x2 True) (restrict_top e_ x2 True) of\n                                   None \\<Rightarrow>\n                                     case lowest_tops\n     [restrict_top i_ x2 True, restrict_top t_ x2 True,\n      restrict_top e_ x2 True] of\n                                     None \\<Rightarrow>\n case restrict_top i_ x2 True of\n Trueif \\<Rightarrow> restrict_top t_ x2 True\n | Falseif \\<Rightarrow> restrict_top e_ x2 True\n                                     | Some x \\<Rightarrow>\n   IFC x\n    (ifex_ite_opt (restrict_top (restrict_top i_ x2 True) x True)\n      (restrict_top (restrict_top t_ x2 True) x True)\n      (restrict_top (restrict_top e_ x2 True) x True))\n    (ifex_ite_opt (restrict_top (restrict_top i_ x2 True) x False)\n      (restrict_top (restrict_top t_ x2 True) x False)\n      (restrict_top (restrict_top e_ x2 True) x False))\n                                   | Some b \\<Rightarrow> b) =\n                                  ifex_ite (restrict_top i_ x2 True)\n                                   (restrict_top t_ x2 True)\n                                   (restrict_top e_ x2 True);\n     \\<And>x2.\n        \\<lbrakk>param_opt i_ t_ e_ = None;\n         lowest_tops [i_, t_, e_] = Some x2;\n         ro_ifex (restrict_top i_ x2 False);\n         ro_ifex (restrict_top t_ x2 False);\n         ro_ifex (restrict_top e_ x2 False)\\<rbrakk>\n        \\<Longrightarrow> (case param_opt (restrict_top i_ x2 False)\n                                 (restrict_top t_ x2 False)\n                                 (restrict_top e_ x2 False) of\n                           None \\<Rightarrow>\n                             case lowest_tops\n                                   [restrict_top i_ x2 False,\n                                    restrict_top t_ x2 False,\n                                    restrict_top e_ x2 False] of\n                             None \\<Rightarrow>\n                               case restrict_top i_ x2 False of\n                               Trueif \\<Rightarrow> restrict_top t_ x2 False\n                               | Falseif \\<Rightarrow>\n                                   restrict_top e_ x2 False\n                             | Some x \\<Rightarrow>\n                                 IFC x\n                                  (ifex_ite_opt\n                                    (restrict_top (restrict_top i_ x2 False)\nx True)\n                                    (restrict_top (restrict_top t_ x2 False)\nx True)\n                                    (restrict_top (restrict_top e_ x2 False)\nx True))\n                                  (ifex_ite_opt\n                                    (restrict_top (restrict_top i_ x2 False)\nx False)\n                                    (restrict_top (restrict_top t_ x2 False)\nx False)\n                                    (restrict_top (restrict_top e_ x2 False)\nx False))\n                           | Some b \\<Rightarrow> b) =\n                          ifex_ite (restrict_top i_ x2 False)\n                           (restrict_top t_ x2 False)\n                           (restrict_top e_ x2 False);\n     ro_ifex i_; ro_ifex t_; ro_ifex e_;\n     \\<exists>r. param_opt i_ t_ e_ = Some r\\<rbrakk>\n    \\<Longrightarrow> param_opt i_ t_ e_ =\n                      Some\n                       (case param_opt i_ t_ e_ of\n                        None \\<Rightarrow>\n                          case lowest_tops [i_, t_, e_] of\n                          None \\<Rightarrow>\n                            case i_ of Trueif \\<Rightarrow> t_\n                            | Falseif \\<Rightarrow> e_\n                          | Some x \\<Rightarrow>\n                              IFC x\n                               (ifex_ite_opt (restrict_top i_ x True)\n                                 (restrict_top t_ x True)\n                                 (restrict_top e_ x True))\n                               (ifex_ite_opt (restrict_top i_ x False)\n                                 (restrict_top t_ x False)\n                                 (restrict_top e_ x False))\n                        | Some b \\<Rightarrow> b)", "by (auto simp add: bf_ifex_rel_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i t e.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>param_opt i t e = None;\n                    lowest_tops [i, t, e] = Some x2;\n                    ro_ifex (restrict_top i x2 True);\n                    ro_ifex (restrict_top t x2 True);\n                    ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                   \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True) =\n                                     ifex_ite (restrict_top i x2 True)\n(restrict_top t x2 True) (restrict_top e x2 True);\n        \\<And>x2.\n           \\<lbrakk>param_opt i t e = None; lowest_tops [i, t, e] = Some x2;\n            ro_ifex (restrict_top i x2 False);\n            ro_ifex (restrict_top t x2 False);\n            ro_ifex (restrict_top e x2 False)\\<rbrakk>\n           \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False) =\n                             ifex_ite (restrict_top i x2 False)\n                              (restrict_top t x2 False)\n                              (restrict_top e x2 False);\n        ro_ifex i; ro_ifex t; ro_ifex e;\n        \\<nexists>r. param_opt i t e = Some r\\<rbrakk>\n       \\<Longrightarrow> (case param_opt i t e of\n                          None \\<Rightarrow>\n                            case lowest_tops [i, t, e] of\n                            None \\<Rightarrow>\n                              case i of Trueif \\<Rightarrow> t\n                              | Falseif \\<Rightarrow> e\n                            | Some x \\<Rightarrow>\n                                IFC x\n                                 (ifex_ite_opt (restrict_top i x True)\n                                   (restrict_top t x True)\n                                   (restrict_top e x True))\n                                 (ifex_ite_opt (restrict_top i x False)\n                                   (restrict_top t x False)\n                                   (restrict_top e x False))\n                          | Some b \\<Rightarrow> b) =\n                         ifex_ite i t e", "subgoal for i t e"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>param_opt i t e = None;\n                 lowest_tops [i, t, e] = Some x2;\n                 ro_ifex (restrict_top i x2 True);\n                 ro_ifex (restrict_top t x2 True);\n                 ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True) =\n                                  ifex_ite (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True);\n     \\<And>x2.\n        \\<lbrakk>param_opt i t e = None; lowest_tops [i, t, e] = Some x2;\n         ro_ifex (restrict_top i x2 False);\n         ro_ifex (restrict_top t x2 False);\n         ro_ifex (restrict_top e x2 False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False) =\n                          ifex_ite (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False);\n     ro_ifex i; ro_ifex t; ro_ifex e;\n     \\<nexists>r. param_opt i t e = Some r\\<rbrakk>\n    \\<Longrightarrow> (case param_opt i t e of\n                       None \\<Rightarrow>\n                         case lowest_tops [i, t, e] of\n                         None \\<Rightarrow>\n                           case i of Trueif \\<Rightarrow> t\n                           | Falseif \\<Rightarrow> e\n                         | Some x \\<Rightarrow>\n                             IFC x\n                              (ifex_ite_opt (restrict_top i x True)\n                                (restrict_top t x True)\n                                (restrict_top e x True))\n                              (ifex_ite_opt (restrict_top i x False)\n                                (restrict_top t x False)\n                                (restrict_top e x False))\n                       | Some b \\<Rightarrow> b) =\n                      ifex_ite i t e", "apply(clarsimp simp del: restrict_top.simps ifex_ite.simps ifex_ite_opt.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n                 ro_ifex (restrict_top i x2 True);\n                 ro_ifex (restrict_top t x2 True);\n                 ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True) =\n                                  ifex_ite (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True);\n     \\<And>x2.\n        \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n         ro_ifex (restrict_top i x2 False);\n         ro_ifex (restrict_top t x2 False);\n         ro_ifex (restrict_top e x2 False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False) =\n                          ifex_ite (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False);\n     param_opt i t e = None; ifex_ordered i; ifex_minimal i; ifex_ordered t;\n     ifex_minimal t; ifex_ordered e; ifex_minimal e\\<rbrakk>\n    \\<Longrightarrow> (case lowest_tops [i, t, e] of\n                       None \\<Rightarrow>\n                         case i of Trueif \\<Rightarrow> t\n                         | Falseif \\<Rightarrow> e\n                       | Some x \\<Rightarrow>\n                           IFC x\n                            (ifex_ite_opt (restrict_top i x True)\n                              (restrict_top t x True)\n                              (restrict_top e x True))\n                            (ifex_ite_opt (restrict_top i x False)\n                              (restrict_top t x False)\n                              (restrict_top e x False))) =\n                      ifex_ite i t e", "apply(cases \"lowest_tops [i,t,e] = None\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n                 ro_ifex (restrict_top i x2 True);\n                 ro_ifex (restrict_top t x2 True);\n                 ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True) =\n                                  ifex_ite (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True);\n     \\<And>x2.\n        \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n         ro_ifex (restrict_top i x2 False);\n         ro_ifex (restrict_top t x2 False);\n         ro_ifex (restrict_top e x2 False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False) =\n                          ifex_ite (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False);\n     param_opt i t e = None; ifex_ordered i; ifex_minimal i; ifex_ordered t;\n     ifex_minimal t; ifex_ordered e; ifex_minimal e;\n     lowest_tops [i, t, e] = None\\<rbrakk>\n    \\<Longrightarrow> (case lowest_tops [i, t, e] of\n                       None \\<Rightarrow>\n                         case i of Trueif \\<Rightarrow> t\n                         | Falseif \\<Rightarrow> e\n                       | Some x \\<Rightarrow>\n                           IFC x\n                            (ifex_ite_opt (restrict_top i x True)\n                              (restrict_top t x True)\n                              (restrict_top e x True))\n                            (ifex_ite_opt (restrict_top i x False)\n                              (restrict_top t x False)\n                              (restrict_top e x False))) =\n                      ifex_ite i t e\n 2. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n                 ro_ifex (restrict_top i x2 True);\n                 ro_ifex (restrict_top t x2 True);\n                 ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True) =\n                                  ifex_ite (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True);\n     \\<And>x2.\n        \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n         ro_ifex (restrict_top i x2 False);\n         ro_ifex (restrict_top t x2 False);\n         ro_ifex (restrict_top e x2 False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False) =\n                          ifex_ite (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False);\n     param_opt i t e = None; ifex_ordered i; ifex_minimal i; ifex_ordered t;\n     ifex_minimal t; ifex_ordered e; ifex_minimal e;\n     lowest_tops [i, t, e] \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> (case lowest_tops [i, t, e] of\n                       None \\<Rightarrow>\n                         case i of Trueif \\<Rightarrow> t\n                         | Falseif \\<Rightarrow> e\n                       | Some x \\<Rightarrow>\n                           IFC x\n                            (ifex_ite_opt (restrict_top i x True)\n                              (restrict_top t x True)\n                              (restrict_top e x True))\n                            (ifex_ite_opt (restrict_top i x False)\n                              (restrict_top t x False)\n                              (restrict_top e x False))) =\n                      ifex_ite i t e", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n                 ro_ifex (restrict_top i x2 True);\n                 ro_ifex (restrict_top t x2 True);\n                 ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True) =\n                                  ifex_ite (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True);\n     \\<And>x2.\n        \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n         ro_ifex (restrict_top i x2 False);\n         ro_ifex (restrict_top t x2 False);\n         ro_ifex (restrict_top e x2 False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False) =\n                          ifex_ite (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False);\n     param_opt i t e = None; ifex_ordered i; ifex_minimal i; ifex_ordered t;\n     ifex_minimal t; ifex_ordered e; ifex_minimal e;\n     lowest_tops [i, t, e] = None\\<rbrakk>\n    \\<Longrightarrow> (case lowest_tops [i, t, e] of\n                       None \\<Rightarrow>\n                         case i of Trueif \\<Rightarrow> t\n                         | Falseif \\<Rightarrow> e\n                       | Some x \\<Rightarrow>\n                           IFC x\n                            (ifex_ite_opt (restrict_top i x True)\n                              (restrict_top t x True)\n                              (restrict_top e x True))\n                            (ifex_ite_opt (restrict_top i x False)\n                              (restrict_top t x False)\n                              (restrict_top e x False))) =\n                      ifex_ite i t e", "by clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n                 ro_ifex (restrict_top i x2 True);\n                 ro_ifex (restrict_top t x2 True);\n                 ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True) =\n                                  ifex_ite (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True);\n     \\<And>x2.\n        \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n         ro_ifex (restrict_top i x2 False);\n         ro_ifex (restrict_top t x2 False);\n         ro_ifex (restrict_top e x2 False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False) =\n                          ifex_ite (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False);\n     param_opt i t e = None; ifex_ordered i; ifex_minimal i; ifex_ordered t;\n     ifex_minimal t; ifex_ordered e; ifex_minimal e;\n     lowest_tops [i, t, e] \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> (case lowest_tops [i, t, e] of\n                       None \\<Rightarrow>\n                         case i of Trueif \\<Rightarrow> t\n                         | Falseif \\<Rightarrow> e\n                       | Some x \\<Rightarrow>\n                           IFC x\n                            (ifex_ite_opt (restrict_top i x True)\n                              (restrict_top t x True)\n                              (restrict_top e x True))\n                            (ifex_ite_opt (restrict_top i x False)\n                              (restrict_top t x False)\n                              (restrict_top e x False))) =\n                      ifex_ite i t e", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n                 ro_ifex (restrict_top i x2 True);\n                 ro_ifex (restrict_top t x2 True);\n                 ro_ifex (restrict_top e x2 True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True) =\n                                  ifex_ite (restrict_top i x2 True)\n                                   (restrict_top t x2 True)\n                                   (restrict_top e x2 True);\n     \\<And>x2.\n        \\<lbrakk>lowest_tops [i, t, e] = Some x2;\n         ro_ifex (restrict_top i x2 False);\n         ro_ifex (restrict_top t x2 False);\n         ro_ifex (restrict_top e x2 False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False) =\n                          ifex_ite (restrict_top i x2 False)\n                           (restrict_top t x2 False)\n                           (restrict_top e x2 False);\n     param_opt i t e = None; ifex_ordered i; ifex_minimal i; ifex_ordered t;\n     ifex_minimal t; ifex_ordered e; ifex_minimal e;\n     lowest_tops [i, t, e] \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> (case lowest_tops [i, t, e] of\n                       None \\<Rightarrow>\n                         case i of Trueif \\<Rightarrow> t\n                         | Falseif \\<Rightarrow> e\n                       | Some x \\<Rightarrow>\n                           IFC x\n                            (ifex_ite_opt (restrict_top i x True)\n                              (restrict_top t x True)\n                              (restrict_top e x True))\n                            (ifex_ite_opt (restrict_top i x False)\n                              (restrict_top t x False)\n                              (restrict_top e x False))) =\n                      ifex_ite i t e", "apply(clarsimp simp del: restrict_top.simps ifex_ite.simps ifex_ite_opt.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y True);\n                 ro_ifex (restrict_top t y True);\n                 ro_ifex (restrict_top e y True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True) =\n                                  ifex_ite (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True);\n        \\<lbrakk>ro_ifex (restrict_top i y False);\n         ro_ifex (restrict_top t y False);\n         ro_ifex (restrict_top e y False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False) =\n                          ifex_ite (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False);\n        param_opt i t e = None; ifex_ordered i; ifex_minimal i;\n        ifex_ordered t; ifex_minimal t; ifex_ordered e; ifex_minimal e;\n        lowest_tops [i, t, e] = Some y\\<rbrakk>\n       \\<Longrightarrow> IFC y\n                          (ifex_ite_opt (restrict_top i y True)\n                            (restrict_top t y True) (restrict_top e y True))\n                          (ifex_ite_opt (restrict_top i y False)\n                            (restrict_top t y False)\n                            (restrict_top e y False)) =\n                         ifex_ite i t e", "apply(subst ifex_ite.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y True);\n                 ro_ifex (restrict_top t y True);\n                 ro_ifex (restrict_top e y True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True) =\n                                  ifex_ite (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True);\n        \\<lbrakk>ro_ifex (restrict_top i y False);\n         ro_ifex (restrict_top t y False);\n         ro_ifex (restrict_top e y False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False) =\n                          ifex_ite (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False);\n        param_opt i t e = None; ifex_ordered i; ifex_minimal i;\n        ifex_ordered t; ifex_minimal t; ifex_ordered e; ifex_minimal e;\n        lowest_tops [i, t, e] = Some y\\<rbrakk>\n       \\<Longrightarrow> IFC y\n                          (ifex_ite_opt (restrict_top i y True)\n                            (restrict_top t y True) (restrict_top e y True))\n                          (ifex_ite_opt (restrict_top i y False)\n                            (restrict_top t y False)\n                            (restrict_top e y False)) =\n                         (case lowest_tops [i, t, e] of\n                          None \\<Rightarrow>\n                            case i of Trueif \\<Rightarrow> t\n                            | Falseif \\<Rightarrow> e\n                          | Some x \\<Rightarrow>\n                              IFC x\n                               (ifex_ite (restrict_top i x True)\n                                 (restrict_top t x True)\n                                 (restrict_top e x True))\n                               (ifex_ite (restrict_top i x False)\n                                 (restrict_top t x False)\n                                 (restrict_top e x False)))", "apply(rename_tac y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y True);\n                 ro_ifex (restrict_top t y True);\n                 ro_ifex (restrict_top e y True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True) =\n                                  ifex_ite (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True);\n        \\<lbrakk>ro_ifex (restrict_top i y False);\n         ro_ifex (restrict_top t y False);\n         ro_ifex (restrict_top e y False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False) =\n                          ifex_ite (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False);\n        param_opt i t e = None; ifex_ordered i; ifex_minimal i;\n        ifex_ordered t; ifex_minimal t; ifex_ordered e; ifex_minimal e;\n        lowest_tops [i, t, e] = Some y\\<rbrakk>\n       \\<Longrightarrow> IFC y\n                          (ifex_ite_opt (restrict_top i y True)\n                            (restrict_top t y True) (restrict_top e y True))\n                          (ifex_ite_opt (restrict_top i y False)\n                            (restrict_top t y False)\n                            (restrict_top e y False)) =\n                         (case lowest_tops [i, t, e] of\n                          None \\<Rightarrow>\n                            case i of Trueif \\<Rightarrow> t\n                            | Falseif \\<Rightarrow> e\n                          | Some x \\<Rightarrow>\n                              IFC x\n                               (ifex_ite (restrict_top i x True)\n                                 (restrict_top t x True)\n                                 (restrict_top e x True))\n                               (ifex_ite (restrict_top i x False)\n                                 (restrict_top t x False)\n                                 (restrict_top e x False)))", "apply(subgoal_tac \"(ifex_ite_opt (restrict_top i y True) (restrict_top t y True) (restrict_top e y True)) =\n                         (ifex_ite (restrict_top i y True) (restrict_top t y True) (restrict_top e y True))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y True);\n                 ro_ifex (restrict_top t y True);\n                 ro_ifex (restrict_top e y True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True) =\n                                  ifex_ite (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True);\n        \\<lbrakk>ro_ifex (restrict_top i y False);\n         ro_ifex (restrict_top t y False);\n         ro_ifex (restrict_top e y False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False) =\n                          ifex_ite (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False);\n        param_opt i t e = None; ifex_ordered i; ifex_minimal i;\n        ifex_ordered t; ifex_minimal t; ifex_ordered e; ifex_minimal e;\n        lowest_tops [i, t, e] = Some y;\n        ifex_ite_opt (restrict_top i y True) (restrict_top t y True)\n         (restrict_top e y True) =\n        ifex_ite (restrict_top i y True) (restrict_top t y True)\n         (restrict_top e y True)\\<rbrakk>\n       \\<Longrightarrow> IFC y\n                          (ifex_ite_opt (restrict_top i y True)\n                            (restrict_top t y True) (restrict_top e y True))\n                          (ifex_ite_opt (restrict_top i y False)\n                            (restrict_top t y False)\n                            (restrict_top e y False)) =\n                         (case lowest_tops [i, t, e] of\n                          None \\<Rightarrow>\n                            case i of Trueif \\<Rightarrow> t\n                            | Falseif \\<Rightarrow> e\n                          | Some x \\<Rightarrow>\n                              IFC x\n                               (ifex_ite (restrict_top i x True)\n                                 (restrict_top t x True)\n                                 (restrict_top e x True))\n                               (ifex_ite (restrict_top i x False)\n                                 (restrict_top t x False)\n                                 (restrict_top e x False)))\n 2. \\<And>y.\n       \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y True);\n                 ro_ifex (restrict_top t y True);\n                 ro_ifex (restrict_top e y True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True) =\n                                  ifex_ite (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True);\n        \\<lbrakk>ro_ifex (restrict_top i y False);\n         ro_ifex (restrict_top t y False);\n         ro_ifex (restrict_top e y False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False) =\n                          ifex_ite (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False);\n        param_opt i t e = None; ifex_ordered i; ifex_minimal i;\n        ifex_ordered t; ifex_minimal t; ifex_ordered e; ifex_minimal e;\n        lowest_tops [i, t, e] = Some y\\<rbrakk>\n       \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                          (restrict_top t y True) (restrict_top e y True) =\n                         ifex_ite (restrict_top i y True)\n                          (restrict_top t y True) (restrict_top e y True)", "apply(subgoal_tac \"(ifex_ite_opt (restrict_top i y False) (restrict_top t y False) (restrict_top e y False)) =\n                         (ifex_ite (restrict_top i y False) (restrict_top t y False) (restrict_top e y False))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y True);\n                 ro_ifex (restrict_top t y True);\n                 ro_ifex (restrict_top e y True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True) =\n                                  ifex_ite (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True);\n        \\<lbrakk>ro_ifex (restrict_top i y False);\n         ro_ifex (restrict_top t y False);\n         ro_ifex (restrict_top e y False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False) =\n                          ifex_ite (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False);\n        param_opt i t e = None; ifex_ordered i; ifex_minimal i;\n        ifex_ordered t; ifex_minimal t; ifex_ordered e; ifex_minimal e;\n        lowest_tops [i, t, e] = Some y;\n        ifex_ite_opt (restrict_top i y True) (restrict_top t y True)\n         (restrict_top e y True) =\n        ifex_ite (restrict_top i y True) (restrict_top t y True)\n         (restrict_top e y True);\n        ifex_ite_opt (restrict_top i y False) (restrict_top t y False)\n         (restrict_top e y False) =\n        ifex_ite (restrict_top i y False) (restrict_top t y False)\n         (restrict_top e y False)\\<rbrakk>\n       \\<Longrightarrow> IFC y\n                          (ifex_ite_opt (restrict_top i y True)\n                            (restrict_top t y True) (restrict_top e y True))\n                          (ifex_ite_opt (restrict_top i y False)\n                            (restrict_top t y False)\n                            (restrict_top e y False)) =\n                         (case lowest_tops [i, t, e] of\n                          None \\<Rightarrow>\n                            case i of Trueif \\<Rightarrow> t\n                            | Falseif \\<Rightarrow> e\n                          | Some x \\<Rightarrow>\n                              IFC x\n                               (ifex_ite (restrict_top i x True)\n                                 (restrict_top t x True)\n                                 (restrict_top e x True))\n                               (ifex_ite (restrict_top i x False)\n                                 (restrict_top t x False)\n                                 (restrict_top e x False)))\n 2. \\<And>y.\n       \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y True);\n                 ro_ifex (restrict_top t y True);\n                 ro_ifex (restrict_top e y True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True) =\n                                  ifex_ite (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True);\n        \\<lbrakk>ro_ifex (restrict_top i y False);\n         ro_ifex (restrict_top t y False);\n         ro_ifex (restrict_top e y False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False) =\n                          ifex_ite (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False);\n        param_opt i t e = None; ifex_ordered i; ifex_minimal i;\n        ifex_ordered t; ifex_minimal t; ifex_ordered e; ifex_minimal e;\n        lowest_tops [i, t, e] = Some y;\n        ifex_ite_opt (restrict_top i y True) (restrict_top t y True)\n         (restrict_top e y True) =\n        ifex_ite (restrict_top i y True) (restrict_top t y True)\n         (restrict_top e y True)\\<rbrakk>\n       \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                          (restrict_top t y False)\n                          (restrict_top e y False) =\n                         ifex_ite (restrict_top i y False)\n                          (restrict_top t y False) (restrict_top e y False)\n 3. \\<And>y.\n       \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y True);\n                 ro_ifex (restrict_top t y True);\n                 ro_ifex (restrict_top e y True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True) =\n                                  ifex_ite (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True);\n        \\<lbrakk>ro_ifex (restrict_top i y False);\n         ro_ifex (restrict_top t y False);\n         ro_ifex (restrict_top e y False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False) =\n                          ifex_ite (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False);\n        param_opt i t e = None; ifex_ordered i; ifex_minimal i;\n        ifex_ordered t; ifex_minimal t; ifex_ordered e; ifex_minimal e;\n        lowest_tops [i, t, e] = Some y\\<rbrakk>\n       \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                          (restrict_top t y True) (restrict_top e y True) =\n                         ifex_ite (restrict_top i y True)\n                          (restrict_top t y True) (restrict_top e y True)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y_ True);\n              ro_ifex (restrict_top t y_ True);\n              ro_ifex (restrict_top e y_ True)\\<rbrakk>\n             \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ True)\n                                (restrict_top t y_ True)\n                                (restrict_top e y_ True) =\n                               ifex_ite (restrict_top i y_ True)\n                                (restrict_top t y_ True)\n                                (restrict_top e y_ True);\n     \\<lbrakk>ro_ifex (restrict_top i y_ False);\n      ro_ifex (restrict_top t y_ False);\n      ro_ifex (restrict_top e y_ False)\\<rbrakk>\n     \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ False)\n                        (restrict_top t y_ False)\n                        (restrict_top e y_ False) =\n                       ifex_ite (restrict_top i y_ False)\n                        (restrict_top t y_ False) (restrict_top e y_ False);\n     param_opt i t e = None; ifex_ordered i; ifex_minimal i; ifex_ordered t;\n     ifex_minimal t; ifex_ordered e; ifex_minimal e;\n     lowest_tops [i, t, e] = Some y_;\n     ifex_ite_opt (restrict_top i y_ True) (restrict_top t y_ True)\n      (restrict_top e y_ True) =\n     ifex_ite (restrict_top i y_ True) (restrict_top t y_ True)\n      (restrict_top e y_ True);\n     ifex_ite_opt (restrict_top i y_ False) (restrict_top t y_ False)\n      (restrict_top e y_ False) =\n     ifex_ite (restrict_top i y_ False) (restrict_top t y_ False)\n      (restrict_top e y_ False)\\<rbrakk>\n    \\<Longrightarrow> IFC y_\n                       (ifex_ite_opt (restrict_top i y_ True)\n                         (restrict_top t y_ True) (restrict_top e y_ True))\n                       (ifex_ite_opt (restrict_top i y_ False)\n                         (restrict_top t y_ False)\n                         (restrict_top e y_ False)) =\n                      (case lowest_tops [i, t, e] of\n                       None \\<Rightarrow>\n                         case i of Trueif \\<Rightarrow> t\n                         | Falseif \\<Rightarrow> e\n                       | Some x \\<Rightarrow>\n                           IFC x\n                            (ifex_ite (restrict_top i x True)\n                              (restrict_top t x True)\n                              (restrict_top e x True))\n                            (ifex_ite (restrict_top i x False)\n                              (restrict_top t x False)\n                              (restrict_top e x False)))", "by force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y True);\n                 ro_ifex (restrict_top t y True);\n                 ro_ifex (restrict_top e y True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True) =\n                                  ifex_ite (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True);\n        \\<lbrakk>ro_ifex (restrict_top i y False);\n         ro_ifex (restrict_top t y False);\n         ro_ifex (restrict_top e y False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False) =\n                          ifex_ite (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False);\n        param_opt i t e = None; ifex_ordered i; ifex_minimal i;\n        ifex_ordered t; ifex_minimal t; ifex_ordered e; ifex_minimal e;\n        lowest_tops [i, t, e] = Some y;\n        ifex_ite_opt (restrict_top i y True) (restrict_top t y True)\n         (restrict_top e y True) =\n        ifex_ite (restrict_top i y True) (restrict_top t y True)\n         (restrict_top e y True)\\<rbrakk>\n       \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                          (restrict_top t y False)\n                          (restrict_top e y False) =\n                         ifex_ite (restrict_top i y False)\n                          (restrict_top t y False) (restrict_top e y False)\n 2. \\<And>y.\n       \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y True);\n                 ro_ifex (restrict_top t y True);\n                 ro_ifex (restrict_top e y True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True) =\n                                  ifex_ite (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True);\n        \\<lbrakk>ro_ifex (restrict_top i y False);\n         ro_ifex (restrict_top t y False);\n         ro_ifex (restrict_top e y False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False) =\n                          ifex_ite (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False);\n        param_opt i t e = None; ifex_ordered i; ifex_minimal i;\n        ifex_ordered t; ifex_minimal t; ifex_ordered e; ifex_minimal e;\n        lowest_tops [i, t, e] = Some y\\<rbrakk>\n       \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                          (restrict_top t y True) (restrict_top e y True) =\n                         ifex_ite (restrict_top i y True)\n                          (restrict_top t y True) (restrict_top e y True)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y_ True);\n              ro_ifex (restrict_top t y_ True);\n              ro_ifex (restrict_top e y_ True)\\<rbrakk>\n             \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ True)\n                                (restrict_top t y_ True)\n                                (restrict_top e y_ True) =\n                               ifex_ite (restrict_top i y_ True)\n                                (restrict_top t y_ True)\n                                (restrict_top e y_ True);\n     \\<lbrakk>ro_ifex (restrict_top i y_ False);\n      ro_ifex (restrict_top t y_ False);\n      ro_ifex (restrict_top e y_ False)\\<rbrakk>\n     \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ False)\n                        (restrict_top t y_ False)\n                        (restrict_top e y_ False) =\n                       ifex_ite (restrict_top i y_ False)\n                        (restrict_top t y_ False) (restrict_top e y_ False);\n     param_opt i t e = None; ifex_ordered i; ifex_minimal i; ifex_ordered t;\n     ifex_minimal t; ifex_ordered e; ifex_minimal e;\n     lowest_tops [i, t, e] = Some y_;\n     ifex_ite_opt (restrict_top i y_ True) (restrict_top t y_ True)\n      (restrict_top e y_ True) =\n     ifex_ite (restrict_top i y_ True) (restrict_top t y_ True)\n      (restrict_top e y_ True)\\<rbrakk>\n    \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ False)\n                       (restrict_top t y_ False) (restrict_top e y_ False) =\n                      ifex_ite (restrict_top i y_ False)\n                       (restrict_top t y_ False) (restrict_top e y_ False)", "using restrict_top_ifex_minimal_invar restrict_top_ifex_ordered_invar"], ["proof (prove)\nusing this:\n  ifex_minimal ?i \\<Longrightarrow> ifex_minimal (restrict_top ?i ?a ?val)\n  ifex_ordered ?b \\<Longrightarrow> ifex_ordered (restrict_top ?b ?var ?val)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y_ True);\n              ro_ifex (restrict_top t y_ True);\n              ro_ifex (restrict_top e y_ True)\\<rbrakk>\n             \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ True)\n                                (restrict_top t y_ True)\n                                (restrict_top e y_ True) =\n                               ifex_ite (restrict_top i y_ True)\n                                (restrict_top t y_ True)\n                                (restrict_top e y_ True);\n     \\<lbrakk>ro_ifex (restrict_top i y_ False);\n      ro_ifex (restrict_top t y_ False);\n      ro_ifex (restrict_top e y_ False)\\<rbrakk>\n     \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ False)\n                        (restrict_top t y_ False)\n                        (restrict_top e y_ False) =\n                       ifex_ite (restrict_top i y_ False)\n                        (restrict_top t y_ False) (restrict_top e y_ False);\n     param_opt i t e = None; ifex_ordered i; ifex_minimal i; ifex_ordered t;\n     ifex_minimal t; ifex_ordered e; ifex_minimal e;\n     lowest_tops [i, t, e] = Some y_;\n     ifex_ite_opt (restrict_top i y_ True) (restrict_top t y_ True)\n      (restrict_top e y_ True) =\n     ifex_ite (restrict_top i y_ True) (restrict_top t y_ True)\n      (restrict_top e y_ True)\\<rbrakk>\n    \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ False)\n                       (restrict_top t y_ False) (restrict_top e y_ False) =\n                      ifex_ite (restrict_top i y_ False)\n                       (restrict_top t y_ False) (restrict_top e y_ False)", "by metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y True);\n                 ro_ifex (restrict_top t y True);\n                 ro_ifex (restrict_top e y True)\\<rbrakk>\n                \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True) =\n                                  ifex_ite (restrict_top i y True)\n                                   (restrict_top t y True)\n                                   (restrict_top e y True);\n        \\<lbrakk>ro_ifex (restrict_top i y False);\n         ro_ifex (restrict_top t y False);\n         ro_ifex (restrict_top e y False)\\<rbrakk>\n        \\<Longrightarrow> ifex_ite_opt (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False) =\n                          ifex_ite (restrict_top i y False)\n                           (restrict_top t y False)\n                           (restrict_top e y False);\n        param_opt i t e = None; ifex_ordered i; ifex_minimal i;\n        ifex_ordered t; ifex_minimal t; ifex_ordered e; ifex_minimal e;\n        lowest_tops [i, t, e] = Some y\\<rbrakk>\n       \\<Longrightarrow> ifex_ite_opt (restrict_top i y True)\n                          (restrict_top t y True) (restrict_top e y True) =\n                         ifex_ite (restrict_top i y True)\n                          (restrict_top t y True) (restrict_top e y True)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y_ True);\n              ro_ifex (restrict_top t y_ True);\n              ro_ifex (restrict_top e y_ True)\\<rbrakk>\n             \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ True)\n                                (restrict_top t y_ True)\n                                (restrict_top e y_ True) =\n                               ifex_ite (restrict_top i y_ True)\n                                (restrict_top t y_ True)\n                                (restrict_top e y_ True);\n     \\<lbrakk>ro_ifex (restrict_top i y_ False);\n      ro_ifex (restrict_top t y_ False);\n      ro_ifex (restrict_top e y_ False)\\<rbrakk>\n     \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ False)\n                        (restrict_top t y_ False)\n                        (restrict_top e y_ False) =\n                       ifex_ite (restrict_top i y_ False)\n                        (restrict_top t y_ False) (restrict_top e y_ False);\n     param_opt i t e = None; ifex_ordered i; ifex_minimal i; ifex_ordered t;\n     ifex_minimal t; ifex_ordered e; ifex_minimal e;\n     lowest_tops [i, t, e] = Some y_\\<rbrakk>\n    \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ True)\n                       (restrict_top t y_ True) (restrict_top e y_ True) =\n                      ifex_ite (restrict_top i y_ True)\n                       (restrict_top t y_ True) (restrict_top e y_ True)", "using restrict_top_ifex_minimal_invar restrict_top_ifex_ordered_invar"], ["proof (prove)\nusing this:\n  ifex_minimal ?i \\<Longrightarrow> ifex_minimal (restrict_top ?i ?a ?val)\n  ifex_ordered ?b \\<Longrightarrow> ifex_ordered (restrict_top ?b ?var ?val)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>ro_ifex (restrict_top i y_ True);\n              ro_ifex (restrict_top t y_ True);\n              ro_ifex (restrict_top e y_ True)\\<rbrakk>\n             \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ True)\n                                (restrict_top t y_ True)\n                                (restrict_top e y_ True) =\n                               ifex_ite (restrict_top i y_ True)\n                                (restrict_top t y_ True)\n                                (restrict_top e y_ True);\n     \\<lbrakk>ro_ifex (restrict_top i y_ False);\n      ro_ifex (restrict_top t y_ False);\n      ro_ifex (restrict_top e y_ False)\\<rbrakk>\n     \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ False)\n                        (restrict_top t y_ False)\n                        (restrict_top e y_ False) =\n                       ifex_ite (restrict_top i y_ False)\n                        (restrict_top t y_ False) (restrict_top e y_ False);\n     param_opt i t e = None; ifex_ordered i; ifex_minimal i; ifex_ordered t;\n     ifex_minimal t; ifex_ordered e; ifex_minimal e;\n     lowest_tops [i, t, e] = Some y_\\<rbrakk>\n    \\<Longrightarrow> ifex_ite_opt (restrict_top i y_ True)\n                       (restrict_top t y_ True) (restrict_top e y_ True) =\n                      ifex_ite (restrict_top i y_ True)\n                       (restrict_top t y_ True) (restrict_top e y_ True)", "by metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ro_ifexI: \"(a,b) \\<in> bf_ifex_rel \\<Longrightarrow> ro_ifex b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> bf_ifex_rel \\<Longrightarrow> ro_ifex b", "by (simp add: ifex_minimal_implied ifex_ordered_implied)"], ["", "theorem ifex_ite_opt_rel_bf: \"\n  (fi,i) \\<in> bf_ifex_rel \\<Longrightarrow>\n  (ft,t) \\<in> bf_ifex_rel \\<Longrightarrow>\n  (fe,e) \\<in> bf_ifex_rel \\<Longrightarrow>\n  ((bf_ite fi ft fe), (ifex_ite_opt i t e)) \\<in> bf_ifex_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(fi, i) \\<in> bf_ifex_rel; (ft, t) \\<in> bf_ifex_rel;\n     (fe, e) \\<in> bf_ifex_rel\\<rbrakk>\n    \\<Longrightarrow> (bf_ite fi ft fe, ifex_ite_opt i t e)\n                      \\<in> bf_ifex_rel", "using ifex_ite_rel_bf ifex_ite_opt_eq ro_ifexI"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?fi, ?i) \\<in> bf_ifex_rel; (?ft, ?t) \\<in> bf_ifex_rel;\n   (?fe, ?e) \\<in> bf_ifex_rel\\<rbrakk>\n  \\<Longrightarrow> (bf_ite ?fi ?ft ?fe, ifex_ite ?i ?t ?e)\n                    \\<in> bf_ifex_rel\n  \\<lbrakk>ro_ifex ?i; ro_ifex ?t; ro_ifex ?e\\<rbrakk>\n  \\<Longrightarrow> ifex_ite_opt ?i ?t ?e = ifex_ite ?i ?t ?e\n  (?a, ?b) \\<in> bf_ifex_rel \\<Longrightarrow> ro_ifex ?b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(fi, i) \\<in> bf_ifex_rel; (ft, t) \\<in> bf_ifex_rel;\n     (fe, e) \\<in> bf_ifex_rel\\<rbrakk>\n    \\<Longrightarrow> (bf_ite fi ft fe, ifex_ite_opt i t e)\n                      \\<in> bf_ifex_rel", "by metis"], ["", "lemma restrict_top_bf_ifex_rel:\n\"(f, i) \\<in> bf_ifex_rel \\<Longrightarrow> \\<exists>f'. (f', restrict_top i var val) \\<in> bf_ifex_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f, i) \\<in> bf_ifex_rel \\<Longrightarrow>\n    \\<exists>f'. (f', restrict_top i var val) \\<in> bf_ifex_rel", "unfolding bf_ifex_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f, i)\n    \\<in> {(a, b).\n           (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n           ro_ifex b} \\<Longrightarrow>\n    \\<exists>f'.\n       (f', restrict_top i var val)\n       \\<in> {(a, b).\n              (\\<forall>ass. a ass = val_ifex b ass) \\<and> ro_ifex b}", "using restrict_top_ifex_minimal_invar restrict_top_ifex_ordered_invar"], ["proof (prove)\nusing this:\n  ifex_minimal ?i \\<Longrightarrow> ifex_minimal (restrict_top ?i ?a ?val)\n  ifex_ordered ?b \\<Longrightarrow> ifex_ordered (restrict_top ?b ?var ?val)\n\ngoal (1 subgoal):\n 1. (f, i)\n    \\<in> {(a, b).\n           (\\<forall>ass. a ass = val_ifex b ass) \\<and>\n           ro_ifex b} \\<Longrightarrow>\n    \\<exists>f'.\n       (f', restrict_top i var val)\n       \\<in> {(a, b).\n              (\\<forall>ass. a ass = val_ifex b ass) \\<and> ro_ifex b}", "by fast"], ["", "lemma param_opt_lowest_tops_lem: \"param_opt i t e = None \\<Longrightarrow> \\<exists>y. lowest_tops [i,t,e] = Some y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. param_opt i t e = None \\<Longrightarrow>\n    \\<exists>y. lowest_tops [i, t, e] = Some y", "by (cases i) (auto simp add: param_opt_def)"], ["", "fun ifex_sat where\n\"ifex_sat Trueif = Some (const False)\" |\n\"ifex_sat Falseif = None\" |\n\"ifex_sat (IF v t e) =\n  (case ifex_sat e of \n    Some a \\<Rightarrow> Some (a(v:=False)) |\n    None \\<Rightarrow> (case ifex_sat t of\n      Some a \\<Rightarrow> Some (a(v:=True)) |\n      None \\<Rightarrow> None))\n\""], ["", "lemma ifex_sat_untouched_False: \"v \\<notin> ifex_var_set i \\<Longrightarrow> ifex_sat i = Some a \\<Longrightarrow> a v = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<notin> ifex_var_set i; ifex_sat i = Some a\\<rbrakk>\n    \\<Longrightarrow> a v = False", "proof(induction i arbitrary: a)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Trueif;\n        ifex_sat Trueif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False\n 2. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Falseif;\n        ifex_sat Falseif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False\n 3. \\<And>x1 i1 i2 a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>v \\<notin> ifex_var_set i1;\n                    ifex_sat i1 = Some a\\<rbrakk>\n                   \\<Longrightarrow> a v = False;\n        \\<And>a.\n           \\<lbrakk>v \\<notin> ifex_var_set i2;\n            ifex_sat i2 = Some a\\<rbrakk>\n           \\<Longrightarrow> a v = False;\n        v \\<notin> ifex_var_set (IF x1 i1 i2);\n        ifex_sat (IF x1 i1 i2) = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False", "case (IF v1 t e)"], ["proof (state)\nthis:\n  \\<lbrakk>v \\<notin> ifex_var_set t; ifex_sat t = Some ?a\\<rbrakk>\n  \\<Longrightarrow> ?a v = False\n  \\<lbrakk>v \\<notin> ifex_var_set e; ifex_sat e = Some ?a\\<rbrakk>\n  \\<Longrightarrow> ?a v = False\n  v \\<notin> ifex_var_set (IF v1 t e)\n  ifex_sat (IF v1 t e) = Some a\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Trueif;\n        ifex_sat Trueif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False\n 2. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Falseif;\n        ifex_sat Falseif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False\n 3. \\<And>x1 i1 i2 a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>v \\<notin> ifex_var_set i1;\n                    ifex_sat i1 = Some a\\<rbrakk>\n                   \\<Longrightarrow> a v = False;\n        \\<And>a.\n           \\<lbrakk>v \\<notin> ifex_var_set i2;\n            ifex_sat i2 = Some a\\<rbrakk>\n           \\<Longrightarrow> a v = False;\n        v \\<notin> ifex_var_set (IF x1 i1 i2);\n        ifex_sat (IF x1 i1 i2) = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False", "have ni: \"v \\<notin> ifex_var_set t\" \"v \\<notin> ifex_var_set e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> ifex_var_set t &&& v \\<notin> ifex_var_set e", "using IF.prems(1)"], ["proof (prove)\nusing this:\n  v \\<notin> ifex_var_set (IF v1 t e)\n\ngoal (1 subgoal):\n 1. v \\<notin> ifex_var_set t &&& v \\<notin> ifex_var_set e", "by simp_all"], ["proof (state)\nthis:\n  v \\<notin> ifex_var_set t\n  v \\<notin> ifex_var_set e\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Trueif;\n        ifex_sat Trueif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False\n 2. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Falseif;\n        ifex_sat Falseif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False\n 3. \\<And>x1 i1 i2 a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>v \\<notin> ifex_var_set i1;\n                    ifex_sat i1 = Some a\\<rbrakk>\n                   \\<Longrightarrow> a v = False;\n        \\<And>a.\n           \\<lbrakk>v \\<notin> ifex_var_set i2;\n            ifex_sat i2 = Some a\\<rbrakk>\n           \\<Longrightarrow> a v = False;\n        v \\<notin> ifex_var_set (IF x1 i1 i2);\n        ifex_sat (IF x1 i1 i2) = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False", "have ne: \"v1 \\<noteq> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 \\<noteq> v", "using IF.prems(1)"], ["proof (prove)\nusing this:\n  v \\<notin> ifex_var_set (IF v1 t e)\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v", "by force"], ["proof (state)\nthis:\n  v1 \\<noteq> v\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Trueif;\n        ifex_sat Trueif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False\n 2. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Falseif;\n        ifex_sat Falseif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False\n 3. \\<And>x1 i1 i2 a.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>v \\<notin> ifex_var_set i1;\n                    ifex_sat i1 = Some a\\<rbrakk>\n                   \\<Longrightarrow> a v = False;\n        \\<And>a.\n           \\<lbrakk>v \\<notin> ifex_var_set i2;\n            ifex_sat i2 = Some a\\<rbrakk>\n           \\<Longrightarrow> a v = False;\n        v \\<notin> ifex_var_set (IF x1 i1 i2);\n        ifex_sat (IF x1 i1 i2) = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. a v = False", "proof(cases \"ifex_sat e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False\n 2. \\<And>a. ifex_sat e = Some a \\<Longrightarrow> a v = False", "case (Some as)"], ["proof (state)\nthis:\n  ifex_sat e = Some as\n\ngoal (2 subgoals):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False\n 2. \\<And>a. ifex_sat e = Some a \\<Longrightarrow> a v = False", "with IF.prems(2)"], ["proof (chain)\npicking this:\n  ifex_sat (IF v1 t e) = Some a\n  ifex_sat e = Some as", "have au: \"a = as(v1 := False)\""], ["proof (prove)\nusing this:\n  ifex_sat (IF v1 t e) = Some a\n  ifex_sat e = Some as\n\ngoal (1 subgoal):\n 1. a = as(v1 := False)", "by simp"], ["proof (state)\nthis:\n  a = as(v1 := False)\n\ngoal (2 subgoals):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False\n 2. \\<And>a. ifex_sat e = Some a \\<Longrightarrow> a v = False", "moreover"], ["proof (state)\nthis:\n  a = as(v1 := False)\n\ngoal (2 subgoals):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False\n 2. \\<And>a. ifex_sat e = Some a \\<Longrightarrow> a v = False", "from IF.IH(2)[OF ni(2)]"], ["proof (chain)\npicking this:\n  ifex_sat e = Some ?a \\<Longrightarrow> ?a v = False", "have \"as v = False\""], ["proof (prove)\nusing this:\n  ifex_sat e = Some ?a \\<Longrightarrow> ?a v = False\n\ngoal (1 subgoal):\n 1. as v = False", "using Some"], ["proof (prove)\nusing this:\n  ifex_sat e = Some ?a \\<Longrightarrow> ?a v = False\n  ifex_sat e = Some as\n\ngoal (1 subgoal):\n 1. as v = False", "."], ["proof (state)\nthis:\n  as v = False\n\ngoal (2 subgoals):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False\n 2. \\<And>a. ifex_sat e = Some a \\<Longrightarrow> a v = False", "ultimately"], ["proof (chain)\npicking this:\n  a = as(v1 := False)\n  as v = False", "show ?thesis"], ["proof (prove)\nusing this:\n  a = as(v1 := False)\n  as v = False\n\ngoal (1 subgoal):\n 1. a v = False", "using ne"], ["proof (prove)\nusing this:\n  a = as(v1 := False)\n  as v = False\n  v1 \\<noteq> v\n\ngoal (1 subgoal):\n 1. a v = False", "by simp"], ["proof (state)\nthis:\n  a v = False\n\ngoal (1 subgoal):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False", "case None"], ["proof (state)\nthis:\n  ifex_sat e = None\n\ngoal (1 subgoal):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False", "obtain as where Some: \"ifex_sat t = Some as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        ifex_sat t = Some as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using None IF.prems(2)"], ["proof (prove)\nusing this:\n  ifex_sat e = None\n  ifex_sat (IF v1 t e) = Some a\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        ifex_sat t = Some as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ifex_sat t = Some as\n\ngoal (1 subgoal):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False", "with IF.prems(2) None"], ["proof (chain)\npicking this:\n  ifex_sat (IF v1 t e) = Some a\n  ifex_sat e = None\n  ifex_sat t = Some as", "have au: \"a = as(v1 := True)\""], ["proof (prove)\nusing this:\n  ifex_sat (IF v1 t e) = Some a\n  ifex_sat e = None\n  ifex_sat t = Some as\n\ngoal (1 subgoal):\n 1. a = as(v1 := True)", "by(simp)"], ["proof (state)\nthis:\n  a = as(v1 := True)\n\ngoal (1 subgoal):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False", "moreover"], ["proof (state)\nthis:\n  a = as(v1 := True)\n\ngoal (1 subgoal):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False", "from IF.IH(1)[OF ni(1)]"], ["proof (chain)\npicking this:\n  ifex_sat t = Some ?a \\<Longrightarrow> ?a v = False", "have \"as v = False\""], ["proof (prove)\nusing this:\n  ifex_sat t = Some ?a \\<Longrightarrow> ?a v = False\n\ngoal (1 subgoal):\n 1. as v = False", "using Some"], ["proof (prove)\nusing this:\n  ifex_sat t = Some ?a \\<Longrightarrow> ?a v = False\n  ifex_sat t = Some as\n\ngoal (1 subgoal):\n 1. as v = False", "."], ["proof (state)\nthis:\n  as v = False\n\ngoal (1 subgoal):\n 1. ifex_sat e = None \\<Longrightarrow> a v = False", "ultimately"], ["proof (chain)\npicking this:\n  a = as(v1 := True)\n  as v = False", "show ?thesis"], ["proof (prove)\nusing this:\n  a = as(v1 := True)\n  as v = False\n\ngoal (1 subgoal):\n 1. a v = False", "using ne"], ["proof (prove)\nusing this:\n  a = as(v1 := True)\n  as v = False\n  v1 \\<noteq> v\n\ngoal (1 subgoal):\n 1. a v = False", "by simp"], ["proof (state)\nthis:\n  a v = False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a v = False\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Trueif;\n        ifex_sat Trueif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False\n 2. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Falseif;\n        ifex_sat Falseif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False", "(* this proof seems to complicated\\<dots> *)"], ["proof (state)\nthis:\n  a v = False\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Trueif;\n        ifex_sat Trueif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False\n 2. \\<And>a.\n       \\<lbrakk>v \\<notin> ifex_var_set Falseif;\n        ifex_sat Falseif = Some a\\<rbrakk>\n       \\<Longrightarrow> a v = False", "qed(simp_all add: fun_eq_iff)"], ["", "lemma ifex_upd_other: \"v \\<notin> ifex_var_set i \\<Longrightarrow> val_ifex i (a(v:=any)) = val_ifex i a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> ifex_var_set i \\<Longrightarrow>\n    val_ifex i (a(v := any)) = val_ifex i a", "proof(induction i)"], ["proof (state)\ngoal (3 subgoals):\n 1. v \\<notin> ifex_var_set Trueif \\<Longrightarrow>\n    val_ifex Trueif (a(v := any)) = val_ifex Trueif a\n 2. v \\<notin> ifex_var_set Falseif \\<Longrightarrow>\n    val_ifex Falseif (a(v := any)) = val_ifex Falseif a\n 3. \\<And>x1 i1 i2.\n       \\<lbrakk>v \\<notin> ifex_var_set i1 \\<Longrightarrow>\n                val_ifex i1 (a(v := any)) = val_ifex i1 a;\n        v \\<notin> ifex_var_set i2 \\<Longrightarrow>\n        val_ifex i2 (a(v := any)) = val_ifex i2 a;\n        v \\<notin> ifex_var_set (IF x1 i1 i2)\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) (a(v := any)) =\n                         val_ifex (IF x1 i1 i2) a", "case (IF v1 t e)"], ["proof (state)\nthis:\n  v \\<notin> ifex_var_set t \\<Longrightarrow>\n  val_ifex t (a(v := any)) = val_ifex t a\n  v \\<notin> ifex_var_set e \\<Longrightarrow>\n  val_ifex e (a(v := any)) = val_ifex e a\n  v \\<notin> ifex_var_set (IF v1 t e)\n\ngoal (3 subgoals):\n 1. v \\<notin> ifex_var_set Trueif \\<Longrightarrow>\n    val_ifex Trueif (a(v := any)) = val_ifex Trueif a\n 2. v \\<notin> ifex_var_set Falseif \\<Longrightarrow>\n    val_ifex Falseif (a(v := any)) = val_ifex Falseif a\n 3. \\<And>x1 i1 i2.\n       \\<lbrakk>v \\<notin> ifex_var_set i1 \\<Longrightarrow>\n                val_ifex i1 (a(v := any)) = val_ifex i1 a;\n        v \\<notin> ifex_var_set i2 \\<Longrightarrow>\n        val_ifex i2 (a(v := any)) = val_ifex i2 a;\n        v \\<notin> ifex_var_set (IF x1 i1 i2)\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) (a(v := any)) =\n                         val_ifex (IF x1 i1 i2) a", "have prems: \"v \\<notin> ifex_var_set t \" \"v \\<notin> ifex_var_set e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> ifex_var_set t &&& v \\<notin> ifex_var_set e", "using IF.prems"], ["proof (prove)\nusing this:\n  v \\<notin> ifex_var_set (IF v1 t e)\n\ngoal (1 subgoal):\n 1. v \\<notin> ifex_var_set t &&& v \\<notin> ifex_var_set e", "by simp_all"], ["proof (state)\nthis:\n  v \\<notin> ifex_var_set t\n  v \\<notin> ifex_var_set e\n\ngoal (3 subgoals):\n 1. v \\<notin> ifex_var_set Trueif \\<Longrightarrow>\n    val_ifex Trueif (a(v := any)) = val_ifex Trueif a\n 2. v \\<notin> ifex_var_set Falseif \\<Longrightarrow>\n    val_ifex Falseif (a(v := any)) = val_ifex Falseif a\n 3. \\<And>x1 i1 i2.\n       \\<lbrakk>v \\<notin> ifex_var_set i1 \\<Longrightarrow>\n                val_ifex i1 (a(v := any)) = val_ifex i1 a;\n        v \\<notin> ifex_var_set i2 \\<Longrightarrow>\n        val_ifex i2 (a(v := any)) = val_ifex i2 a;\n        v \\<notin> ifex_var_set (IF x1 i1 i2)\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) (a(v := any)) =\n                         val_ifex (IF x1 i1 i2) a", "from IF.prems"], ["proof (chain)\npicking this:\n  v \\<notin> ifex_var_set (IF v1 t e)", "have ne: \"v1 \\<noteq> v\""], ["proof (prove)\nusing this:\n  v \\<notin> ifex_var_set (IF v1 t e)\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v", "by clarsimp"], ["proof (state)\nthis:\n  v1 \\<noteq> v\n\ngoal (3 subgoals):\n 1. v \\<notin> ifex_var_set Trueif \\<Longrightarrow>\n    val_ifex Trueif (a(v := any)) = val_ifex Trueif a\n 2. v \\<notin> ifex_var_set Falseif \\<Longrightarrow>\n    val_ifex Falseif (a(v := any)) = val_ifex Falseif a\n 3. \\<And>x1 i1 i2.\n       \\<lbrakk>v \\<notin> ifex_var_set i1 \\<Longrightarrow>\n                val_ifex i1 (a(v := any)) = val_ifex i1 a;\n        v \\<notin> ifex_var_set i2 \\<Longrightarrow>\n        val_ifex i2 (a(v := any)) = val_ifex i2 a;\n        v \\<notin> ifex_var_set (IF x1 i1 i2)\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) (a(v := any)) =\n                         val_ifex (IF x1 i1 i2) a", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_ifex (IF v1 t e) (a(v := any)) = val_ifex (IF v1 t e) a", "by(simp only: val_ifex.simps fun_upd_other[OF ne] ifex_vars.simps IF.IH(1)[OF prems(1)] IF.IH(2)[OF prems(2)] split: if_splits)"], ["proof (state)\nthis:\n  val_ifex (IF v1 t e) (a(v := any)) = val_ifex (IF v1 t e) a\n\ngoal (2 subgoals):\n 1. v \\<notin> ifex_var_set Trueif \\<Longrightarrow>\n    val_ifex Trueif (a(v := any)) = val_ifex Trueif a\n 2. v \\<notin> ifex_var_set Falseif \\<Longrightarrow>\n    val_ifex Falseif (a(v := any)) = val_ifex Falseif a", "qed simp_all"], ["", "(* something weaker than ifex_ordered *)"], ["", "fun ifex_no_twice where\n\"ifex_no_twice (IF v t e) = (\n  v \\<notin> (ifex_var_set t \\<union> ifex_var_set e) \\<and>\n  ifex_no_twice t \\<and> ifex_no_twice e)\" |\n\"ifex_no_twice _ = True\""], ["", "lemma ordered_ifex_no_twiceI: \"ifex_ordered i \\<Longrightarrow> ifex_no_twice i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_ordered i \\<Longrightarrow> ifex_no_twice i", "by(induction i) (simp_all,blast)"], ["", "lemma ifex_sat_NoneD: \"ifex_sat i = None \\<Longrightarrow> val_ifex i ass = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_sat i = None \\<Longrightarrow> val_ifex i ass = False", "by(induction i) (simp_all split: option.splits)"], ["", "lemma ifex_sat_SomeD: \"ifex_no_twice i \\<Longrightarrow> ifex_sat i = Some ass \\<Longrightarrow> val_ifex i ass = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice i; ifex_sat i = Some ass\\<rbrakk>\n    \\<Longrightarrow> val_ifex i ass = True", "proof(induction i arbitrary: ass)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ass.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat Trueif = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif ass = True\n 2. \\<And>ass.\n       \\<lbrakk>ifex_no_twice Falseif; ifex_sat Falseif = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif ass = True\n 3. \\<And>x1 i1 i2 ass.\n       \\<lbrakk>\\<And>ass.\n                   \\<lbrakk>ifex_no_twice i1;\n                    ifex_sat i1 = Some ass\\<rbrakk>\n                   \\<Longrightarrow> val_ifex i1 ass = True;\n        \\<And>ass.\n           \\<lbrakk>ifex_no_twice i2; ifex_sat i2 = Some ass\\<rbrakk>\n           \\<Longrightarrow> val_ifex i2 ass = True;\n        ifex_no_twice (IF x1 i1 i2);\n        ifex_sat (IF x1 i1 i2) = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) ass = True", "case (IF v t e)"], ["proof (state)\nthis:\n  \\<lbrakk>ifex_no_twice t; ifex_sat t = Some ?ass\\<rbrakk>\n  \\<Longrightarrow> val_ifex t ?ass = True\n  \\<lbrakk>ifex_no_twice e; ifex_sat e = Some ?ass\\<rbrakk>\n  \\<Longrightarrow> val_ifex e ?ass = True\n  ifex_no_twice (IF v t e)\n  ifex_sat (IF v t e) = Some ass\n\ngoal (3 subgoals):\n 1. \\<And>ass.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat Trueif = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif ass = True\n 2. \\<And>ass.\n       \\<lbrakk>ifex_no_twice Falseif; ifex_sat Falseif = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif ass = True\n 3. \\<And>x1 i1 i2 ass.\n       \\<lbrakk>\\<And>ass.\n                   \\<lbrakk>ifex_no_twice i1;\n                    ifex_sat i1 = Some ass\\<rbrakk>\n                   \\<Longrightarrow> val_ifex i1 ass = True;\n        \\<And>ass.\n           \\<lbrakk>ifex_no_twice i2; ifex_sat i2 = Some ass\\<rbrakk>\n           \\<Longrightarrow> val_ifex i2 ass = True;\n        ifex_no_twice (IF x1 i1 i2);\n        ifex_sat (IF x1 i1 i2) = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) ass = True", "have ni: \"v \\<notin> ifex_var_set t\" \"v \\<notin> ifex_var_set e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> ifex_var_set t &&& v \\<notin> ifex_var_set e", "using IF.prems(1)"], ["proof (prove)\nusing this:\n  ifex_no_twice (IF v t e)\n\ngoal (1 subgoal):\n 1. v \\<notin> ifex_var_set t &&& v \\<notin> ifex_var_set e", "by simp_all"], ["proof (state)\nthis:\n  v \\<notin> ifex_var_set t\n  v \\<notin> ifex_var_set e\n\ngoal (3 subgoals):\n 1. \\<And>ass.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat Trueif = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif ass = True\n 2. \\<And>ass.\n       \\<lbrakk>ifex_no_twice Falseif; ifex_sat Falseif = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif ass = True\n 3. \\<And>x1 i1 i2 ass.\n       \\<lbrakk>\\<And>ass.\n                   \\<lbrakk>ifex_no_twice i1;\n                    ifex_sat i1 = Some ass\\<rbrakk>\n                   \\<Longrightarrow> val_ifex i1 ass = True;\n        \\<And>ass.\n           \\<lbrakk>ifex_no_twice i2; ifex_sat i2 = Some ass\\<rbrakk>\n           \\<Longrightarrow> val_ifex i2 ass = True;\n        ifex_no_twice (IF x1 i1 i2);\n        ifex_sat (IF x1 i1 i2) = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) ass = True", "note IF.prems[unfolded ifex_sat.simps]"], ["proof (state)\nthis:\n  ifex_no_twice (IF v t e)\n  (case ifex_sat e of\n   None \\<Rightarrow>\n     case ifex_sat t of None \\<Rightarrow> None\n     | Some a \\<Rightarrow> Some (a(v := True))\n   | Some a \\<Rightarrow> Some (a(v := False))) =\n  Some ass\n\ngoal (3 subgoals):\n 1. \\<And>ass.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat Trueif = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif ass = True\n 2. \\<And>ass.\n       \\<lbrakk>ifex_no_twice Falseif; ifex_sat Falseif = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif ass = True\n 3. \\<And>x1 i1 i2 ass.\n       \\<lbrakk>\\<And>ass.\n                   \\<lbrakk>ifex_no_twice i1;\n                    ifex_sat i1 = Some ass\\<rbrakk>\n                   \\<Longrightarrow> val_ifex i1 ass = True;\n        \\<And>ass.\n           \\<lbrakk>ifex_no_twice i2; ifex_sat i2 = Some ass\\<rbrakk>\n           \\<Longrightarrow> val_ifex i2 ass = True;\n        ifex_no_twice (IF x1 i1 i2);\n        ifex_sat (IF x1 i1 i2) = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) ass = True", "thus ?case"], ["proof (prove)\nusing this:\n  ifex_no_twice (IF v t e)\n  (case ifex_sat e of\n   None \\<Rightarrow>\n     case ifex_sat t of None \\<Rightarrow> None\n     | Some a \\<Rightarrow> Some (a(v := True))\n   | Some a \\<Rightarrow> Some (a(v := False))) =\n  Some ass\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) ass = True", "proof(cases \"ifex_sat e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ifex_no_twice (IF v t e);\n     (case ifex_sat e of\n      None \\<Rightarrow>\n        case ifex_sat t of None \\<Rightarrow> None\n        | Some a \\<Rightarrow> Some (a(v := True))\n      | Some a \\<Rightarrow> Some (a(v := False))) =\n     Some ass;\n     ifex_sat e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True\n 2. \\<And>a.\n       \\<lbrakk>ifex_no_twice (IF v t e);\n        (case ifex_sat e of\n         None \\<Rightarrow>\n           case ifex_sat t of None \\<Rightarrow> None\n           | Some a \\<Rightarrow> Some (a(v := True))\n         | Some a \\<Rightarrow> Some (a(v := False))) =\n        Some ass;\n        ifex_sat e = Some a\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF v t e) ass = True", "case (Some a)"], ["proof (state)\nthis:\n  ifex_sat e = Some a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ifex_no_twice (IF v t e);\n     (case ifex_sat e of\n      None \\<Rightarrow>\n        case ifex_sat t of None \\<Rightarrow> None\n        | Some a \\<Rightarrow> Some (a(v := True))\n      | Some a \\<Rightarrow> Some (a(v := False))) =\n     Some ass;\n     ifex_sat e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True\n 2. \\<And>a.\n       \\<lbrakk>ifex_no_twice (IF v t e);\n        (case ifex_sat e of\n         None \\<Rightarrow>\n           case ifex_sat t of None \\<Rightarrow> None\n           | Some a \\<Rightarrow> Some (a(v := True))\n         | Some a \\<Rightarrow> Some (a(v := False))) =\n        Some ass;\n        ifex_sat e = Some a\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF v t e) ass = True", "thus ?thesis"], ["proof (prove)\nusing this:\n  ifex_sat e = Some a\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) ass = True", "using IF.prems"], ["proof (prove)\nusing this:\n  ifex_sat e = Some a\n  ifex_no_twice (IF v t e)\n  ifex_sat (IF v t e) = Some ass\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) ass = True", "apply(clarsimp simp only: val_ifex.simps ifex_sat.simps option.simps fun_upd_same if_False ifex_upd_other[OF ni(2)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_sat e = Some a; ifex_no_twice (IF v t e);\n     ass = a(v := False)\\<rbrakk>\n    \\<Longrightarrow> val_ifex e a = True", "apply(rule IF.IH(2), simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  val_ifex (IF v t e) ass = True\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice (IF v t e);\n     (case ifex_sat e of\n      None \\<Rightarrow>\n        case ifex_sat t of None \\<Rightarrow> None\n        | Some a \\<Rightarrow> Some (a(v := True))\n      | Some a \\<Rightarrow> Some (a(v := False))) =\n     Some ass;\n     ifex_sat e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice (IF v t e);\n     (case ifex_sat e of\n      None \\<Rightarrow>\n        case ifex_sat t of None \\<Rightarrow> None\n        | Some a \\<Rightarrow> Some (a(v := True))\n      | Some a \\<Rightarrow> Some (a(v := False))) =\n     Some ass;\n     ifex_sat e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True", "case None"], ["proof (state)\nthis:\n  ifex_sat e = None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice (IF v t e);\n     (case ifex_sat e of\n      None \\<Rightarrow>\n        case ifex_sat t of None \\<Rightarrow> None\n        | Some a \\<Rightarrow> Some (a(v := True))\n      | Some a \\<Rightarrow> Some (a(v := False))) =\n     Some ass;\n     ifex_sat e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True", "obtain a where Some: \"ifex_sat t = Some a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        ifex_sat t = Some a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using None IF.prems(2)"], ["proof (prove)\nusing this:\n  ifex_sat e = None\n  ifex_sat (IF v t e) = Some ass\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        ifex_sat t = Some a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ifex_sat t = Some a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice (IF v t e);\n     (case ifex_sat e of\n      None \\<Rightarrow>\n        case ifex_sat t of None \\<Rightarrow> None\n        | Some a \\<Rightarrow> Some (a(v := True))\n      | Some a \\<Rightarrow> Some (a(v := False))) =\n     Some ass;\n     ifex_sat e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True", "thus ?thesis"], ["proof (prove)\nusing this:\n  ifex_sat t = Some a\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) ass = True", "using IF.prems"], ["proof (prove)\nusing this:\n  ifex_sat t = Some a\n  ifex_no_twice (IF v t e)\n  ifex_sat (IF v t e) = Some ass\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) ass = True", "by(clarsimp simp only: val_ifex.simps ifex_sat.simps option.simps fun_upd_same if_True None ifex_upd_other[OF ni(1)])\n      (rule IF.IH(1), simp_all)"], ["proof (state)\nthis:\n  val_ifex (IF v t e) ass = True\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_ifex (IF v t e) ass = True\n\ngoal (2 subgoals):\n 1. \\<And>ass.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat Trueif = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif ass = True\n 2. \\<And>ass.\n       \\<lbrakk>ifex_no_twice Falseif; ifex_sat Falseif = Some ass\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif ass = True", "qed simp_all"], ["", "lemma ifex_sat_NoneI: \"ifex_no_twice i \\<Longrightarrow> (\\<And>ass. val_ifex i ass = False) \\<Longrightarrow> ifex_sat i = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice i; \\<And>ass. val_ifex i ass = False\\<rbrakk>\n    \\<Longrightarrow> ifex_sat i = None", "(* alternate proof: using ifex_sat_SomeD by fastforce *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice i; \\<And>ass. val_ifex i ass = False\\<rbrakk>\n    \\<Longrightarrow> ifex_sat i = None", "proof(rule ccontr, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice i; \\<And>ass. val_ifex i ass = False;\n     ifex_sat i \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> False", "case 1"], ["proof (state)\nthis:\n  ifex_no_twice i\n  val_ifex i ?ass = False\n  ifex_sat i \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice i; \\<And>ass. val_ifex i ass = False;\n     ifex_sat i \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> False", "from 1(3)"], ["proof (chain)\npicking this:\n  ifex_sat i \\<noteq> None", "obtain as where \"ifex_sat i = Some as\""], ["proof (prove)\nusing this:\n  ifex_sat i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        ifex_sat i = Some as \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ifex_sat i = Some as\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice i; \\<And>ass. val_ifex i ass = False;\n     ifex_sat i \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> False", "from ifex_sat_SomeD[OF 1(1) this]"], ["proof (chain)\npicking this:\n  val_ifex i as = True", "show False"], ["proof (prove)\nusing this:\n  val_ifex i as = True\n\ngoal (1 subgoal):\n 1. False", "using 1(2)"], ["proof (prove)\nusing this:\n  val_ifex i as = True\n  val_ifex i ?ass = False\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "fun ifex_sat_list where\n\"ifex_sat_list Trueif = Some []\" |\n\"ifex_sat_list Falseif = None\" |\n\"ifex_sat_list (IF v t e) =\n  (case ifex_sat_list e of \n    Some a \\<Rightarrow> Some ((v,False)#a) |\n    None \\<Rightarrow> (case ifex_sat_list t of\n      Some a \\<Rightarrow> Some ((v,True)#a) |\n      None \\<Rightarrow> None))\n\""], ["", "definition \"update_assignment_alt u as = (\\<lambda>v. case map_of u v of None \\<Rightarrow> as v | Some n \\<Rightarrow> n)\""], ["", "fun update_assignment where\n\"update_assignment ((v,u)#us) as = (update_assignment us as)(v:=u)\" |\n\"update_assignment [] as = as\""], ["", "lemma update_assignment_notin: \"a \\<notin> fst ` set us \\<Longrightarrow> update_assignment us as a = as a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> fst ` set us \\<Longrightarrow>\n    update_assignment us as a = as a", "by(induction us) clarsimp+"], ["", "lemma update_assignment_alt: \"update_assignment u as = update_assignment_alt u as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. update_assignment u as = update_assignment_alt u as", "by(induction u arbitrary: as) (clarsimp simp: update_assignment_alt_def fun_eq_iff)+"], ["", "lemma update_assignment: \"distinct (map fst ((v,u)#us)) \\<Longrightarrow> update_assignment ((v,u)#us) as = update_assignment us (as(v:=u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst ((v, u) # us)) \\<Longrightarrow>\n    update_assignment ((v, u) # us) as = update_assignment us (as(v := u))", "unfolding update_assignment_alt update_assignment_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst ((v, u) # us)) \\<Longrightarrow>\n    (\\<lambda>va.\n        case map_of ((v, u) # us) va of None \\<Rightarrow> as va\n        | Some n \\<Rightarrow> n) =\n    (\\<lambda>va.\n        case map_of us va of None \\<Rightarrow> (as(v := u)) va\n        | Some n \\<Rightarrow> n)", "unfolding fun_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst ((v, u) # us)) \\<Longrightarrow>\n    \\<forall>x.\n       (case map_of ((v, u) # us) x of None \\<Rightarrow> as x\n        | Some n \\<Rightarrow> n) =\n       (case map_of us x of None \\<Rightarrow> (as(v := u)) x\n        | Some n \\<Rightarrow> n)", "by(clarsimp split: option.splits) force"], ["", "lemma ass_upd_same: \"update_assignment ((v, u) # a) ass v = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. update_assignment ((v, u) # a) ass v = u", "by simp"], ["", "lemma ifex_sat_list_subset:  \"ifex_sat_list t = Some u \\<Longrightarrow> fst ` set u \\<subseteq> ifex_var_set t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_sat_list t = Some u \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set t", "proof(induction t arbitrary: u)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>u.\n       ifex_sat_list Trueif = Some u \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set Trueif\n 2. \\<And>u.\n       ifex_sat_list Falseif = Some u \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set Falseif\n 3. \\<And>x1 t1 t2 u.\n       \\<lbrakk>\\<And>u.\n                   ifex_sat_list t1 = Some u \\<Longrightarrow>\n                   fst ` set u \\<subseteq> ifex_var_set t1;\n        \\<And>u.\n           ifex_sat_list t2 = Some u \\<Longrightarrow>\n           fst ` set u \\<subseteq> ifex_var_set t2;\n        ifex_sat_list (IF x1 t1 t2) = Some u\\<rbrakk>\n       \\<Longrightarrow> fst ` set u \\<subseteq> ifex_var_set (IF x1 t1 t2)", "case (IF v t e)"], ["proof (state)\nthis:\n  ifex_sat_list t = Some ?u \\<Longrightarrow>\n  fst ` set ?u \\<subseteq> ifex_var_set t\n  ifex_sat_list e = Some ?u \\<Longrightarrow>\n  fst ` set ?u \\<subseteq> ifex_var_set e\n  ifex_sat_list (IF v t e) = Some u\n\ngoal (3 subgoals):\n 1. \\<And>u.\n       ifex_sat_list Trueif = Some u \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set Trueif\n 2. \\<And>u.\n       ifex_sat_list Falseif = Some u \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set Falseif\n 3. \\<And>x1 t1 t2 u.\n       \\<lbrakk>\\<And>u.\n                   ifex_sat_list t1 = Some u \\<Longrightarrow>\n                   fst ` set u \\<subseteq> ifex_var_set t1;\n        \\<And>u.\n           ifex_sat_list t2 = Some u \\<Longrightarrow>\n           fst ` set u \\<subseteq> ifex_var_set t2;\n        ifex_sat_list (IF x1 t1 t2) = Some u\\<rbrakk>\n       \\<Longrightarrow> fst ` set u \\<subseteq> ifex_var_set (IF x1 t1 t2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "proof(cases \"ifex_sat_list e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "case (Some ue)"], ["proof (state)\nthis:\n  ifex_sat_list e = Some ue\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "note IF.IH(2)[OF this]"], ["proof (state)\nthis:\n  fst ` set ue \\<subseteq> ifex_var_set e\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "hence \"fst ` set ue \\<subseteq> ifex_var_set (IF v t e)\""], ["proof (prove)\nusing this:\n  fst ` set ue \\<subseteq> ifex_var_set e\n\ngoal (1 subgoal):\n 1. fst ` set ue \\<subseteq> ifex_var_set (IF v t e)", "by simp blast"], ["proof (state)\nthis:\n  fst ` set ue \\<subseteq> ifex_var_set (IF v t e)\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "moreover"], ["proof (state)\nthis:\n  fst ` set ue \\<subseteq> ifex_var_set (IF v t e)\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "have \"fst ` set u = insert v (fst ` set ue)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` set u = insert v (fst ` set ue)", "using IF.prems Some"], ["proof (prove)\nusing this:\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list e = Some ue\n\ngoal (1 subgoal):\n 1. fst ` set u = insert v (fst ` set ue)", "by force"], ["proof (state)\nthis:\n  fst ` set u = insert v (fst ` set ue)\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "ultimately"], ["proof (chain)\npicking this:\n  fst ` set ue \\<subseteq> ifex_var_set (IF v t e)\n  fst ` set u = insert v (fst ` set ue)", "show ?thesis"], ["proof (prove)\nusing this:\n  fst ` set ue \\<subseteq> ifex_var_set (IF v t e)\n  fst ` set u = insert v (fst ` set ue)\n\ngoal (1 subgoal):\n 1. fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "by simp"], ["proof (state)\nthis:\n  fst ` set u \\<subseteq> ifex_var_set (IF v t e)\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "case None"], ["proof (state)\nthis:\n  ifex_sat_list e = None\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "with IF.prems"], ["proof (chain)\npicking this:\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list e = None", "obtain ut where Some: \"ifex_sat_list t = Some ut\""], ["proof (prove)\nusing this:\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list e = None\n\ngoal (1 subgoal):\n 1. (\\<And>ut.\n        ifex_sat_list t = Some ut \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(simp split: option.splits)"], ["proof (state)\nthis:\n  ifex_sat_list t = Some ut\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "note IF.IH(1)[OF this]"], ["proof (state)\nthis:\n  fst ` set ut \\<subseteq> ifex_var_set t\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "hence \"fst ` set ut \\<subseteq> ifex_var_set (IF v t e)\""], ["proof (prove)\nusing this:\n  fst ` set ut \\<subseteq> ifex_var_set t\n\ngoal (1 subgoal):\n 1. fst ` set ut \\<subseteq> ifex_var_set (IF v t e)", "by simp blast"], ["proof (state)\nthis:\n  fst ` set ut \\<subseteq> ifex_var_set (IF v t e)\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "moreover"], ["proof (state)\nthis:\n  fst ` set ut \\<subseteq> ifex_var_set (IF v t e)\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "have \"fst ` set u = insert v (fst ` set ut)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` set u = insert v (fst ` set ut)", "using IF.prems None Some"], ["proof (prove)\nusing this:\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list e = None\n  ifex_sat_list t = Some ut\n\ngoal (1 subgoal):\n 1. fst ` set u = insert v (fst ` set ut)", "by force"], ["proof (state)\nthis:\n  fst ` set u = insert v (fst ` set ut)\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow>\n    fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "ultimately"], ["proof (chain)\npicking this:\n  fst ` set ut \\<subseteq> ifex_var_set (IF v t e)\n  fst ` set u = insert v (fst ` set ut)", "show ?thesis"], ["proof (prove)\nusing this:\n  fst ` set ut \\<subseteq> ifex_var_set (IF v t e)\n  fst ` set u = insert v (fst ` set ut)\n\ngoal (1 subgoal):\n 1. fst ` set u \\<subseteq> ifex_var_set (IF v t e)", "by simp"], ["proof (state)\nthis:\n  fst ` set u \\<subseteq> ifex_var_set (IF v t e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst ` set u \\<subseteq> ifex_var_set (IF v t e)\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       ifex_sat_list Trueif = Some u \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set Trueif\n 2. \\<And>u.\n       ifex_sat_list Falseif = Some u \\<Longrightarrow>\n       fst ` set u \\<subseteq> ifex_var_set Falseif", "qed simp_all"], ["", "lemma sat_list_distinct: \"ifex_no_twice t \\<Longrightarrow> ifex_sat_list t = Some u \\<Longrightarrow> distinct (map fst u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice t; ifex_sat_list t = Some u\\<rbrakk>\n    \\<Longrightarrow> distinct (map fst u)", "proof(induction t arbitrary: u)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat_list Trueif = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)\n 2. \\<And>u.\n       \\<lbrakk>ifex_no_twice Falseif;\n        ifex_sat_list Falseif = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)\n 3. \\<And>x1 t1 t2 u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>ifex_no_twice t1;\n                    ifex_sat_list t1 = Some u\\<rbrakk>\n                   \\<Longrightarrow> distinct (map fst u);\n        \\<And>u.\n           \\<lbrakk>ifex_no_twice t2; ifex_sat_list t2 = Some u\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst u);\n        ifex_no_twice (IF x1 t1 t2);\n        ifex_sat_list (IF x1 t1 t2) = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)", "case (IF v t e)"], ["proof (state)\nthis:\n  \\<lbrakk>ifex_no_twice t; ifex_sat_list t = Some ?u\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?u)\n  \\<lbrakk>ifex_no_twice e; ifex_sat_list e = Some ?u\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?u)\n  ifex_no_twice (IF v t e)\n  ifex_sat_list (IF v t e) = Some u\n\ngoal (3 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat_list Trueif = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)\n 2. \\<And>u.\n       \\<lbrakk>ifex_no_twice Falseif;\n        ifex_sat_list Falseif = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)\n 3. \\<And>x1 t1 t2 u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>ifex_no_twice t1;\n                    ifex_sat_list t1 = Some u\\<rbrakk>\n                   \\<Longrightarrow> distinct (map fst u);\n        \\<And>u.\n           \\<lbrakk>ifex_no_twice t2; ifex_sat_list t2 = Some u\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst u);\n        ifex_no_twice (IF x1 t1 t2);\n        ifex_sat_list (IF x1 t1 t2) = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)", "from IF.prems"], ["proof (chain)\npicking this:\n  ifex_no_twice (IF v t e)\n  ifex_sat_list (IF v t e) = Some u", "have nt: \"ifex_no_twice t\" \"ifex_no_twice e\""], ["proof (prove)\nusing this:\n  ifex_no_twice (IF v t e)\n  ifex_sat_list (IF v t e) = Some u\n\ngoal (1 subgoal):\n 1. ifex_no_twice t &&& ifex_no_twice e", "by simp_all"], ["proof (state)\nthis:\n  ifex_no_twice t\n  ifex_no_twice e\n\ngoal (3 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat_list Trueif = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)\n 2. \\<And>u.\n       \\<lbrakk>ifex_no_twice Falseif;\n        ifex_sat_list Falseif = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)\n 3. \\<And>x1 t1 t2 u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>ifex_no_twice t1;\n                    ifex_sat_list t1 = Some u\\<rbrakk>\n                   \\<Longrightarrow> distinct (map fst u);\n        \\<And>u.\n           \\<lbrakk>ifex_no_twice t2; ifex_sat_list t2 = Some u\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst u);\n        ifex_no_twice (IF x1 t1 t2);\n        ifex_sat_list (IF x1 t1 t2) = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)", "note mIH = IF.IH(1)[OF this(1)] IF.IH(2)[OF this(2)]"], ["proof (state)\nthis:\n  ifex_sat_list t = Some ?u \\<Longrightarrow> distinct (map fst ?u)\n  ifex_sat_list e = Some ?u \\<Longrightarrow> distinct (map fst ?u)\n\ngoal (3 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat_list Trueif = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)\n 2. \\<And>u.\n       \\<lbrakk>ifex_no_twice Falseif;\n        ifex_sat_list Falseif = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)\n 3. \\<And>x1 t1 t2 u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>ifex_no_twice t1;\n                    ifex_sat_list t1 = Some u\\<rbrakk>\n                   \\<Longrightarrow> distinct (map fst u);\n        \\<And>u.\n           \\<lbrakk>ifex_no_twice t2; ifex_sat_list t2 = Some u\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst u);\n        ifex_no_twice (IF x1 t1 t2);\n        ifex_sat_list (IF x1 t1 t2) = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst u)", "proof(cases \"ifex_sat_list e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow> distinct (map fst u)\n 2. \\<And>a. ifex_sat_list e = Some a \\<Longrightarrow> distinct (map fst u)", "case (Some a)"], ["proof (state)\nthis:\n  ifex_sat_list e = Some a\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow> distinct (map fst u)\n 2. \\<And>a. ifex_sat_list e = Some a \\<Longrightarrow> distinct (map fst u)", "note mIH = mIH(2)[OF this]"], ["proof (state)\nthis:\n  distinct (map fst a)\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow> distinct (map fst u)\n 2. \\<And>a. ifex_sat_list e = Some a \\<Longrightarrow> distinct (map fst u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  distinct (map fst a)\n\ngoal (1 subgoal):\n 1. distinct (map fst u)", "using IF.prems ifex_sat_list.simps Some ifex_sat_list_subset"], ["proof (prove)\nusing this:\n  distinct (map fst a)\n  ifex_no_twice (IF v t e)\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list Trueif = Some []\n  ifex_sat_list Falseif = None\n  ifex_sat_list (IF ?v ?t ?e) =\n  (case ifex_sat_list ?e of\n   None \\<Rightarrow>\n     case ifex_sat_list ?t of None \\<Rightarrow> None\n     | Some a \\<Rightarrow> Some ((?v, True) # a)\n   | Some a \\<Rightarrow> Some ((?v, False) # a))\n  ifex_sat_list e = Some a\n  ifex_sat_list ?t = Some ?u \\<Longrightarrow>\n  fst ` set ?u \\<subseteq> ifex_var_set ?t\n\ngoal (1 subgoal):\n 1. distinct (map fst u)", "by fastforce"], ["proof (state)\nthis:\n  distinct (map fst u)\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> distinct (map fst u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> distinct (map fst u)", "case None"], ["proof (state)\nthis:\n  ifex_sat_list e = None\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> distinct (map fst u)", "with IF.prems"], ["proof (chain)\npicking this:\n  ifex_no_twice (IF v t e)\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list e = None", "obtain ut where Some: \"ifex_sat_list t = Some ut\""], ["proof (prove)\nusing this:\n  ifex_no_twice (IF v t e)\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list e = None\n\ngoal (1 subgoal):\n 1. (\\<And>ut.\n        ifex_sat_list t = Some ut \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(simp split: option.splits)"], ["proof (state)\nthis:\n  ifex_sat_list t = Some ut\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> distinct (map fst u)", "note mIH(1)[OF this]"], ["proof (state)\nthis:\n  distinct (map fst ut)\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> distinct (map fst u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  distinct (map fst ut)\n\ngoal (1 subgoal):\n 1. distinct (map fst u)", "using IF.prems ifex_sat_list.simps None Some ifex_sat_list_subset"], ["proof (prove)\nusing this:\n  distinct (map fst ut)\n  ifex_no_twice (IF v t e)\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list Trueif = Some []\n  ifex_sat_list Falseif = None\n  ifex_sat_list (IF ?v ?t ?e) =\n  (case ifex_sat_list ?e of\n   None \\<Rightarrow>\n     case ifex_sat_list ?t of None \\<Rightarrow> None\n     | Some a \\<Rightarrow> Some ((?v, True) # a)\n   | Some a \\<Rightarrow> Some ((?v, False) # a))\n  ifex_sat_list e = None\n  ifex_sat_list t = Some ut\n  ifex_sat_list ?t = Some ?u \\<Longrightarrow>\n  fst ` set ?u \\<subseteq> ifex_var_set ?t\n\ngoal (1 subgoal):\n 1. distinct (map fst u)", "by fastforce"], ["proof (state)\nthis:\n  distinct (map fst u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distinct (map fst u)\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat_list Trueif = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)\n 2. \\<And>u.\n       \\<lbrakk>ifex_no_twice Falseif;\n        ifex_sat_list Falseif = Some u\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst u)", "qed simp_all"], ["", "lemma ifex_sat_list_NoneD: \"ifex_sat_list i = None \\<Longrightarrow> val_ifex i ass = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_sat_list i = None \\<Longrightarrow> val_ifex i ass = False", "by(induction i) (simp_all split: option.splits)"], ["", "lemma ifex_sat_list_SomeD: \"ifex_no_twice i \\<Longrightarrow> ifex_sat_list i = Some u \\<Longrightarrow> ass = update_assignment u ass' \\<Longrightarrow> val_ifex i ass = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice i; ifex_sat_list i = Some u;\n     ass = update_assignment u ass'\\<rbrakk>\n    \\<Longrightarrow> val_ifex i ass = True", "proof(induction i arbitrary: ass ass' u)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat_list Trueif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif ass = True\n 2. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Falseif; ifex_sat_list Falseif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif ass = True\n 3. \\<And>x1 i1 i2 ass ass' u.\n       \\<lbrakk>\\<And>ass ass' u.\n                   \\<lbrakk>ifex_no_twice i1; ifex_sat_list i1 = Some u;\n                    ass = update_assignment u ass'\\<rbrakk>\n                   \\<Longrightarrow> val_ifex i1 ass = True;\n        \\<And>ass ass' u.\n           \\<lbrakk>ifex_no_twice i2; ifex_sat_list i2 = Some u;\n            ass = update_assignment u ass'\\<rbrakk>\n           \\<Longrightarrow> val_ifex i2 ass = True;\n        ifex_no_twice (IF x1 i1 i2); ifex_sat_list (IF x1 i1 i2) = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) ass = True", "case (IF v t e)"], ["proof (state)\nthis:\n  \\<lbrakk>ifex_no_twice t; ifex_sat_list t = Some ?u;\n   ?ass = update_assignment ?u ?ass'\\<rbrakk>\n  \\<Longrightarrow> val_ifex t ?ass = True\n  \\<lbrakk>ifex_no_twice e; ifex_sat_list e = Some ?u;\n   ?ass = update_assignment ?u ?ass'\\<rbrakk>\n  \\<Longrightarrow> val_ifex e ?ass = True\n  ifex_no_twice (IF v t e)\n  ifex_sat_list (IF v t e) = Some u\n  ass = update_assignment u ass'\n\ngoal (3 subgoals):\n 1. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat_list Trueif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif ass = True\n 2. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Falseif; ifex_sat_list Falseif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif ass = True\n 3. \\<And>x1 i1 i2 ass ass' u.\n       \\<lbrakk>\\<And>ass ass' u.\n                   \\<lbrakk>ifex_no_twice i1; ifex_sat_list i1 = Some u;\n                    ass = update_assignment u ass'\\<rbrakk>\n                   \\<Longrightarrow> val_ifex i1 ass = True;\n        \\<And>ass ass' u.\n           \\<lbrakk>ifex_no_twice i2; ifex_sat_list i2 = Some u;\n            ass = update_assignment u ass'\\<rbrakk>\n           \\<Longrightarrow> val_ifex i2 ass = True;\n        ifex_no_twice (IF x1 i1 i2); ifex_sat_list (IF x1 i1 i2) = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) ass = True", "have nt: \"ifex_no_twice t\" \"ifex_no_twice e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifex_no_twice t &&& ifex_no_twice e", "using IF.prems(1)"], ["proof (prove)\nusing this:\n  ifex_no_twice (IF v t e)\n\ngoal (1 subgoal):\n 1. ifex_no_twice t &&& ifex_no_twice e", "by simp_all"], ["proof (state)\nthis:\n  ifex_no_twice t\n  ifex_no_twice e\n\ngoal (3 subgoals):\n 1. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat_list Trueif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif ass = True\n 2. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Falseif; ifex_sat_list Falseif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif ass = True\n 3. \\<And>x1 i1 i2 ass ass' u.\n       \\<lbrakk>\\<And>ass ass' u.\n                   \\<lbrakk>ifex_no_twice i1; ifex_sat_list i1 = Some u;\n                    ass = update_assignment u ass'\\<rbrakk>\n                   \\<Longrightarrow> val_ifex i1 ass = True;\n        \\<And>ass ass' u.\n           \\<lbrakk>ifex_no_twice i2; ifex_sat_list i2 = Some u;\n            ass = update_assignment u ass'\\<rbrakk>\n           \\<Longrightarrow> val_ifex i2 ass = True;\n        ifex_no_twice (IF x1 i1 i2); ifex_sat_list (IF x1 i1 i2) = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) ass = True", "have ni: \"v \\<notin> ifex_var_set t\" \"v \\<notin> ifex_var_set e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> ifex_var_set t &&& v \\<notin> ifex_var_set e", "using IF.prems(1)"], ["proof (prove)\nusing this:\n  ifex_no_twice (IF v t e)\n\ngoal (1 subgoal):\n 1. v \\<notin> ifex_var_set t &&& v \\<notin> ifex_var_set e", "by simp_all"], ["proof (state)\nthis:\n  v \\<notin> ifex_var_set t\n  v \\<notin> ifex_var_set e\n\ngoal (3 subgoals):\n 1. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat_list Trueif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif ass = True\n 2. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Falseif; ifex_sat_list Falseif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif ass = True\n 3. \\<And>x1 i1 i2 ass ass' u.\n       \\<lbrakk>\\<And>ass ass' u.\n                   \\<lbrakk>ifex_no_twice i1; ifex_sat_list i1 = Some u;\n                    ass = update_assignment u ass'\\<rbrakk>\n                   \\<Longrightarrow> val_ifex i1 ass = True;\n        \\<And>ass ass' u.\n           \\<lbrakk>ifex_no_twice i2; ifex_sat_list i2 = Some u;\n            ass = update_assignment u ass'\\<rbrakk>\n           \\<Longrightarrow> val_ifex i2 ass = True;\n        ifex_no_twice (IF x1 i1 i2); ifex_sat_list (IF x1 i1 i2) = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) ass = True", "note IF.prems[unfolded ifex_sat.simps]"], ["proof (state)\nthis:\n  ifex_no_twice (IF v t e)\n  ifex_sat_list (IF v t e) = Some u\n  ass = update_assignment u ass'\n\ngoal (3 subgoals):\n 1. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat_list Trueif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif ass = True\n 2. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Falseif; ifex_sat_list Falseif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif ass = True\n 3. \\<And>x1 i1 i2 ass ass' u.\n       \\<lbrakk>\\<And>ass ass' u.\n                   \\<lbrakk>ifex_no_twice i1; ifex_sat_list i1 = Some u;\n                    ass = update_assignment u ass'\\<rbrakk>\n                   \\<Longrightarrow> val_ifex i1 ass = True;\n        \\<And>ass ass' u.\n           \\<lbrakk>ifex_no_twice i2; ifex_sat_list i2 = Some u;\n            ass = update_assignment u ass'\\<rbrakk>\n           \\<Longrightarrow> val_ifex i2 ass = True;\n        ifex_no_twice (IF x1 i1 i2); ifex_sat_list (IF x1 i1 i2) = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) ass = True", "thus ?case"], ["proof (prove)\nusing this:\n  ifex_no_twice (IF v t e)\n  ifex_sat_list (IF v t e) = Some u\n  ass = update_assignment u ass'\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) ass = True", "proof(cases \"ifex_sat_list e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True\n 2. \\<And>a.\n       \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n        ass = update_assignment u ass'; ifex_sat_list e = Some a\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF v t e) ass = True", "case (Some a)"], ["proof (state)\nthis:\n  ifex_sat_list e = Some a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True\n 2. \\<And>a.\n       \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n        ass = update_assignment u ass'; ifex_sat_list e = Some a\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF v t e) ass = True", "have ef: \"u = (v, False) # a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = (v, False) # a", "using IF.prems(2) Some"], ["proof (prove)\nusing this:\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list e = Some a\n\ngoal (1 subgoal):\n 1. u = (v, False) # a", "by simp"], ["proof (state)\nthis:\n  u = (v, False) # a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True\n 2. \\<And>a.\n       \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n        ass = update_assignment u ass'; ifex_sat_list e = Some a\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF v t e) ass = True", "from IF.prems(3)"], ["proof (chain)\npicking this:\n  ass = update_assignment u ass'", "have au: \"ass = update_assignment a (ass'(v := False))\""], ["proof (prove)\nusing this:\n  ass = update_assignment u ass'\n\ngoal (1 subgoal):\n 1. ass = update_assignment a (ass'(v := False))", "unfolding ef"], ["proof (prove)\nusing this:\n  ass = update_assignment ((v, False) # a) ass'\n\ngoal (1 subgoal):\n 1. ass = update_assignment a (ass'(v := False))", "using update_assignment[OF sat_list_distinct[OF IF.prems(1,2), unfolded ef]]"], ["proof (prove)\nusing this:\n  ass = update_assignment ((v, False) # a) ass'\n  update_assignment ((v, False) # a) ?as =\n  update_assignment a (?as(v := False))\n\ngoal (1 subgoal):\n 1. ass = update_assignment a (ass'(v := False))", "by presburger"], ["proof (state)\nthis:\n  ass = update_assignment a (ass'(v := False))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True\n 2. \\<And>a.\n       \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n        ass = update_assignment u ass'; ifex_sat_list e = Some a\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF v t e) ass = True", "have avF: \"ass v = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ass v = False", "using IF.prems(3)[symmetric]"], ["proof (prove)\nusing this:\n  update_assignment u ass' = ass\n\ngoal (1 subgoal):\n 1. ass v = False", "unfolding ef"], ["proof (prove)\nusing this:\n  update_assignment ((v, False) # a) ass' = ass\n\ngoal (1 subgoal):\n 1. ass v = False", "by clarsimp"], ["proof (state)\nthis:\n  ass v = False\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True\n 2. \\<And>a.\n       \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n        ass = update_assignment u ass'; ifex_sat_list e = Some a\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF v t e) ass = True", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) ass = True", "using IF.IH(2)[OF nt(2) Some au] Some IF.prems(2) avF"], ["proof (prove)\nusing this:\n  val_ifex e ass = True\n  ifex_sat_list e = Some a\n  ifex_sat_list (IF v t e) = Some u\n  ass v = False\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) ass = True", "by simp"], ["proof (state)\nthis:\n  val_ifex (IF v t e) ass = True\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True", "case None"], ["proof (state)\nthis:\n  ifex_sat_list e = None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True", "obtain a where Some: \"ifex_sat_list t = Some a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        ifex_sat_list t = Some a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using None IF.prems(2)"], ["proof (prove)\nusing this:\n  ifex_sat_list e = None\n  ifex_sat_list (IF v t e) = Some u\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        ifex_sat_list t = Some a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ifex_sat_list t = Some a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True", "have ef: \"u = (v, True) # a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = (v, True) # a", "using IF.prems(2) None Some"], ["proof (prove)\nusing this:\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list e = None\n  ifex_sat_list t = Some a\n\ngoal (1 subgoal):\n 1. u = (v, True) # a", "by simp"], ["proof (state)\nthis:\n  u = (v, True) # a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True", "from IF.prems(3)"], ["proof (chain)\npicking this:\n  ass = update_assignment u ass'", "have au: \"ass = update_assignment a (ass'(v := True))\""], ["proof (prove)\nusing this:\n  ass = update_assignment u ass'\n\ngoal (1 subgoal):\n 1. ass = update_assignment a (ass'(v := True))", "unfolding ef"], ["proof (prove)\nusing this:\n  ass = update_assignment ((v, True) # a) ass'\n\ngoal (1 subgoal):\n 1. ass = update_assignment a (ass'(v := True))", "using update_assignment[OF sat_list_distinct[OF IF.prems(1,2), unfolded ef]]"], ["proof (prove)\nusing this:\n  ass = update_assignment ((v, True) # a) ass'\n  update_assignment ((v, True) # a) ?as =\n  update_assignment a (?as(v := True))\n\ngoal (1 subgoal):\n 1. ass = update_assignment a (ass'(v := True))", "by presburger"], ["proof (state)\nthis:\n  ass = update_assignment a (ass'(v := True))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True", "have avT: \"ass v = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ass v = True", "using IF.prems(3)[symmetric]"], ["proof (prove)\nusing this:\n  update_assignment u ass' = ass\n\ngoal (1 subgoal):\n 1. ass v = True", "unfolding ef"], ["proof (prove)\nusing this:\n  update_assignment ((v, True) # a) ass' = ass\n\ngoal (1 subgoal):\n 1. ass v = True", "by clarsimp"], ["proof (state)\nthis:\n  ass v = True\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_no_twice (IF v t e); ifex_sat_list (IF v t e) = Some u;\n     ass = update_assignment u ass'; ifex_sat_list e = None\\<rbrakk>\n    \\<Longrightarrow> val_ifex (IF v t e) ass = True", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) ass = True", "using IF.IH(1)[OF nt(1) Some au] Some IF.prems(2) avT"], ["proof (prove)\nusing this:\n  val_ifex t ass = True\n  ifex_sat_list t = Some a\n  ifex_sat_list (IF v t e) = Some u\n  ass v = True\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) ass = True", "by simp"], ["proof (state)\nthis:\n  val_ifex (IF v t e) ass = True\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_ifex (IF v t e) ass = True\n\ngoal (2 subgoals):\n 1. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Trueif; ifex_sat_list Trueif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif ass = True\n 2. \\<And>ass ass' u.\n       \\<lbrakk>ifex_no_twice Falseif; ifex_sat_list Falseif = Some u;\n        ass = update_assignment u ass'\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif ass = True", "qed simp_all"], ["", "fun sat_list_to_bdt where\n\"sat_list_to_bdt [] = Trueif\" |\n\"sat_list_to_bdt ((v,u)#us) = (if u then IF v (sat_list_to_bdt us) Falseif else IF v Falseif (sat_list_to_bdt us))\""], ["", "lemma \"ifex_sat_list i = Some u \\<Longrightarrow> val_ifex (sat_list_to_bdt u) as \\<Longrightarrow> val_ifex i as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifex_sat_list i = Some u;\n     val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n    \\<Longrightarrow> val_ifex i as", "proof(induction i arbitrary: u)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>ifex_sat_list Trueif = Some u;\n        val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif as\n 2. \\<And>u.\n       \\<lbrakk>ifex_sat_list Falseif = Some u;\n        val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif as\n 3. \\<And>x1 i1 i2 u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>ifex_sat_list i1 = Some u;\n                    val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n                   \\<Longrightarrow> val_ifex i1 as;\n        \\<And>u.\n           \\<lbrakk>ifex_sat_list i2 = Some u;\n            val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n           \\<Longrightarrow> val_ifex i2 as;\n        ifex_sat_list (IF x1 i1 i2) = Some u;\n        val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) as", "case (IF v t e)"], ["proof (state)\nthis:\n  \\<lbrakk>ifex_sat_list t = Some ?u;\n   val_ifex (sat_list_to_bdt ?u) as\\<rbrakk>\n  \\<Longrightarrow> val_ifex t as\n  \\<lbrakk>ifex_sat_list e = Some ?u;\n   val_ifex (sat_list_to_bdt ?u) as\\<rbrakk>\n  \\<Longrightarrow> val_ifex e as\n  ifex_sat_list (IF v t e) = Some u\n  val_ifex (sat_list_to_bdt u) as\n\ngoal (3 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>ifex_sat_list Trueif = Some u;\n        val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif as\n 2. \\<And>u.\n       \\<lbrakk>ifex_sat_list Falseif = Some u;\n        val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif as\n 3. \\<And>x1 i1 i2 u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>ifex_sat_list i1 = Some u;\n                    val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n                   \\<Longrightarrow> val_ifex i1 as;\n        \\<And>u.\n           \\<lbrakk>ifex_sat_list i2 = Some u;\n            val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n           \\<Longrightarrow> val_ifex i2 as;\n        ifex_sat_list (IF x1 i1 i2) = Some u;\n        val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n       \\<Longrightarrow> val_ifex (IF x1 i1 i2) as", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) as", "proof(cases \"ifex_sat_list e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow> val_ifex (IF v t e) as", "case (Some a)"], ["proof (state)\nthis:\n  ifex_sat_list e = Some a\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow> val_ifex (IF v t e) as", "note mIH = IF.IH(2)[OF this]"], ["proof (state)\nthis:\n  val_ifex (sat_list_to_bdt a) as \\<Longrightarrow> val_ifex e as\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow> val_ifex (IF v t e) as", "have ef: \"u = (v, False) # a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = (v, False) # a", "using IF.prems(1) Some"], ["proof (prove)\nusing this:\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list e = Some a\n\ngoal (1 subgoal):\n 1. u = (v, False) # a", "by simp"], ["proof (state)\nthis:\n  u = (v, False) # a\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow> val_ifex (IF v t e) as", "have avF: \"as v = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as v = False", "using IF.prems(2)"], ["proof (prove)\nusing this:\n  val_ifex (sat_list_to_bdt u) as\n\ngoal (1 subgoal):\n 1. as v = False", "unfolding ef"], ["proof (prove)\nusing this:\n  val_ifex (sat_list_to_bdt ((v, False) # a)) as\n\ngoal (1 subgoal):\n 1. as v = False", "by(simp split: if_splits)"], ["proof (state)\nthis:\n  as v = False\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow> val_ifex (IF v t e) as", "have \"val_ifex (sat_list_to_bdt a) as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_ifex (sat_list_to_bdt a) as", "using IF.prems(2)"], ["proof (prove)\nusing this:\n  val_ifex (sat_list_to_bdt u) as\n\ngoal (1 subgoal):\n 1. val_ifex (sat_list_to_bdt a) as", "unfolding ef"], ["proof (prove)\nusing this:\n  val_ifex (sat_list_to_bdt ((v, False) # a)) as\n\ngoal (1 subgoal):\n 1. val_ifex (sat_list_to_bdt a) as", "using avF"], ["proof (prove)\nusing this:\n  val_ifex (sat_list_to_bdt ((v, False) # a)) as\n  as v = False\n\ngoal (1 subgoal):\n 1. val_ifex (sat_list_to_bdt a) as", "by simp"], ["proof (state)\nthis:\n  val_ifex (sat_list_to_bdt a) as\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow> val_ifex (IF v t e) as", "note mIH = mIH[OF this]"], ["proof (state)\nthis:\n  val_ifex e as\n\ngoal (2 subgoals):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as\n 2. \\<And>a.\n       ifex_sat_list e = Some a \\<Longrightarrow> val_ifex (IF v t e) as", "thus ?thesis"], ["proof (prove)\nusing this:\n  val_ifex e as\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) as", "using avF"], ["proof (prove)\nusing this:\n  val_ifex e as\n  as v = False\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) as", "by simp"], ["proof (state)\nthis:\n  val_ifex (IF v t e) as\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as", "case None"], ["proof (state)\nthis:\n  ifex_sat_list e = None\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as", "obtain a where Some: \"ifex_sat_list t = Some a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        ifex_sat_list t = Some a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using None IF.prems(1)"], ["proof (prove)\nusing this:\n  ifex_sat_list e = None\n  ifex_sat_list (IF v t e) = Some u\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        ifex_sat_list t = Some a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ifex_sat_list t = Some a\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as", "have ef: \"u = (v, True) # a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = (v, True) # a", "using IF.prems(1) Some None"], ["proof (prove)\nusing this:\n  ifex_sat_list (IF v t e) = Some u\n  ifex_sat_list t = Some a\n  ifex_sat_list e = None\n\ngoal (1 subgoal):\n 1. u = (v, True) # a", "by simp"], ["proof (state)\nthis:\n  u = (v, True) # a\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as", "have avT: \"as v = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as v = True", "using IF.prems(2)"], ["proof (prove)\nusing this:\n  val_ifex (sat_list_to_bdt u) as\n\ngoal (1 subgoal):\n 1. as v = True", "unfolding ef"], ["proof (prove)\nusing this:\n  val_ifex (sat_list_to_bdt ((v, True) # a)) as\n\ngoal (1 subgoal):\n 1. as v = True", "by(simp split: if_splits)"], ["proof (state)\nthis:\n  as v = True\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as", "have \"val_ifex (sat_list_to_bdt a) as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. val_ifex (sat_list_to_bdt a) as", "using IF.prems(2)"], ["proof (prove)\nusing this:\n  val_ifex (sat_list_to_bdt u) as\n\ngoal (1 subgoal):\n 1. val_ifex (sat_list_to_bdt a) as", "unfolding ef"], ["proof (prove)\nusing this:\n  val_ifex (sat_list_to_bdt ((v, True) # a)) as\n\ngoal (1 subgoal):\n 1. val_ifex (sat_list_to_bdt a) as", "using avT"], ["proof (prove)\nusing this:\n  val_ifex (sat_list_to_bdt ((v, True) # a)) as\n  as v = True\n\ngoal (1 subgoal):\n 1. val_ifex (sat_list_to_bdt a) as", "by simp"], ["proof (state)\nthis:\n  val_ifex (sat_list_to_bdt a) as\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as", "note mIH = IF.IH(1)[OF Some this]"], ["proof (state)\nthis:\n  val_ifex t as\n\ngoal (1 subgoal):\n 1. ifex_sat_list e = None \\<Longrightarrow> val_ifex (IF v t e) as", "thus ?thesis"], ["proof (prove)\nusing this:\n  val_ifex t as\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) as", "using avT"], ["proof (prove)\nusing this:\n  val_ifex t as\n  as v = True\n\ngoal (1 subgoal):\n 1. val_ifex (IF v t e) as", "by simp"], ["proof (state)\nthis:\n  val_ifex (IF v t e) as\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  val_ifex (IF v t e) as\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>ifex_sat_list Trueif = Some u;\n        val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n       \\<Longrightarrow> val_ifex Trueif as\n 2. \\<And>u.\n       \\<lbrakk>ifex_sat_list Falseif = Some u;\n        val_ifex (sat_list_to_bdt u) as\\<rbrakk>\n       \\<Longrightarrow> val_ifex Falseif as", "qed simp_all"], ["", "lemma bf_ifex_rel_consts[simp,intro!]:\n  \"(bf_True, Trueif) \\<in> bf_ifex_rel\"\n  \"(bf_False, Falseif) \\<in> bf_ifex_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bf_True, Trueif) \\<in> bf_ifex_rel &&&\n    (bf_False, Falseif) \\<in> bf_ifex_rel", "by(fastforce simp add: bf_ifex_rel_def)+"], ["", "lemma bf_ifex_rel_lit[simp,intro!]:\n  \"(bf_lit v, IFC v Trueif Falseif) \\<in> bf_ifex_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bf_lit v, IFC v Trueif Falseif) \\<in> bf_ifex_rel", "by(simp add: bf_ifex_rel_def IFC_def bf_lit_def)"], ["", "lemma bf_ifex_rel_consts_ensured[simp]:\n  \"(bf_True,x) \\<in> bf_ifex_rel \\<longleftrightarrow> (x = Trueif)\"\n  \"(bf_False,x) \\<in> bf_ifex_rel \\<longleftrightarrow> (x = Falseif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((bf_True, x) \\<in> bf_ifex_rel) = (x = Trueif) &&&\n    ((bf_False, x) \\<in> bf_ifex_rel) = (x = Falseif)", "by(auto simp add: bf_ifex_rel_def\n             intro: roifex_Trueif_unique roifex_Falseif_unique)"], ["", "(* reverse of the above *)"], ["", "lemma bf_ifex_rel_consts_ensured_rev[simp]:\n  \"(x,Trueif) \\<in> bf_ifex_rel \\<longleftrightarrow> (x = bf_True)\"\n  \"(x,Falseif) \\<in> bf_ifex_rel \\<longleftrightarrow> (x = bf_False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, Trueif) \\<in> bf_ifex_rel) = (x = bf_True) &&&\n    ((x, Falseif) \\<in> bf_ifex_rel) = (x = bf_False)", "by(simp_all add: bf_ifex_rel_def fun_eq_iff)"], ["", "declare ifex_ite_opt.simps restrict_top.simps lowest_tops.simps[simp del]"], ["", "end"]]}