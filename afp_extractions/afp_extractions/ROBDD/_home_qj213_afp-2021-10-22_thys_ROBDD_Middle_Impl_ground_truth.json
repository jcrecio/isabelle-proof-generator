{"file_name": "/home/qj213/afp-2021-10-22/thys/ROBDD/Middle_Impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/ROBDD", "problem_names": ["lemma [simp]:\n  \"bdd_node_valid bdd 0\"\n  \"bdd_node_valid bdd (Suc 0)\"", "lemma [simp,intro!]: \"bdd_sane emptymi\"", "lemma prod_split3: \"P (case p of (x, xa, xaa) \\<Rightarrow> f x xa xaa) = (\\<forall>x1 x2 x3. p = (x1, x2, x3) \\<longrightarrow> P (f x1 x2 x3))\"", "lemma IfI: \"(c \\<Longrightarrow> P x) \\<Longrightarrow> (\\<not>c \\<Longrightarrow> P y) \\<Longrightarrow> P (if c then x else y)\"", "lemma fstsndI: \"x = (a,b) \\<Longrightarrow> fst x = a \\<and> snd x = b\"", "lemma Rmi_g_2_split: \"P (Rmi_g n x m) =\n  ((x = Falseif \\<longrightarrow> P (Rmi_g n x m)) \\<and>\n  (x = Trueif \\<longrightarrow> P (Rmi_g n x m)) \\<and>\n  (\\<forall>vs ts es. x = IF vs ts es \\<longrightarrow> P (Rmi_g n x m)))\"", "lemma rmigeq: \"Rmi_g ni1 n1 s \\<Longrightarrow> Rmi_g ni2 n2 s \\<Longrightarrow> ni1 = ni2 \\<Longrightarrow> n1 = n2\"", "lemma rmigneq: \"bdd_sane s \\<Longrightarrow> Rmi_g ni1 n1 s \\<Longrightarrow> Rmi_g ni2 n2 s \\<Longrightarrow> ni1 \\<noteq> ni2 \\<Longrightarrow> n1 \\<noteq> n2\"", "lemma ifmi_les_hlp: \"pointermap_sane (dpm s) \\<Longrightarrow> pointermap_getmk (v, ni1, ni2) (dpm s) = (x1, dpm s') \\<Longrightarrow> Rmi_g nia n s \\<Longrightarrow> Rmi_g nia n s'\"", "lemma ifmi_les:\n    assumes \"bdd_sane s\"\n    assumes \"ifmi v ni1 ni2 s = (ni, s')\"\n    shows \"mi_pre.les s s'\"", "lemma ifmi_notouch_dcl: \"ifmi v ni1 ni2 s = (ni, s') \\<Longrightarrow> dcl s' = dcl s\"", "lemma ifmi_saneI: \"bdd_sane s \\<Longrightarrow> ifmi v ni1 ni2 s = (ni, s') \\<Longrightarrow> bdd_sane s'\"", "lemma rmigif: \"Rmi_g ni (IF v n1 n2) s \\<Longrightarrow> \\<exists>n. ni = Suc (Suc n)\"", "lemma in_lesI:\n  assumes \"mi_pre.les s s'\"\n    assumes \"(ni1, n1) \\<in> Rmi s\"\n    assumes \"(ni2, n2) \\<in> Rmi s\"\n    shows \"(ni1, n1) \\<in> Rmi s'\" \"(ni2, n2) \\<in> Rmi s'\"", "lemma ifmi_modification_validI:\n  assumes sane: \"bdd_sane s\"\n  assumes ifm: \"ifmi v ni1 ni2 s = (ni, s')\"\n  assumes vld: \"bdd_node_valid s n\"\n  shows \"bdd_node_valid s' n\"", "lemma ifmi'_spec: \"\\<lbrakk>bdd_sane s; bdd_node_valid s ni1; bdd_node_valid s ni2\\<rbrakk> \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s) (\\<lambda>r. r = ifmi v ni1 ni2 s)\"", "lemma ifmi'_ifmi: \"\\<lbrakk>bdd_sane s; bdd_node_valid s ni1; bdd_node_valid s ni2\\<rbrakk> \\<Longrightarrow> ifmi' v ni1 ni2 s = Some (ifmi v ni1 ni2 s)\"", "lemma destrmi_someD: \"destrmi' e bdd = Some x \\<Longrightarrow> bdd_sane bdd \\<and> bdd_node_valid bdd e\"", "lemma Rmi_sv: \n  assumes \"bdd_sane s\" \"(ni,n) \\<in> Rmi s\" \"(ni',n') \\<in> Rmi s\"  \n  shows \"ni=ni' \\<Longrightarrow> n=n'\"\n  and \"ni\\<noteq>ni' \\<Longrightarrow> n\\<noteq>n'\"", "lemma True_rep[simp]: \"bdd_sane s \\<Longrightarrow> (ni,Trueif)\\<in>Rmi s \\<longleftrightarrow> ni=Suc 0\"", "lemma False_rep[simp]: \"bdd_sane s \\<Longrightarrow> (ni,Falseif)\\<in>Rmi s \\<longleftrightarrow> ni=0\"", "lemma updS_dpm: \"dpm (updS s x r) = dpm s\"", "lemma updS_Rmi_g: \"Rmi_g n i (updS s x r) = Rmi_g n i s\"", "lemma updS_Rmi: \"Rmi (updS s x r) = Rmi s\"", "lemma p_valid_RmiI: \"(Suc (Suc na), b) \\<in> Rmi bdd \\<Longrightarrow> pointermap_p_valid na (dpm bdd)\"", "lemma n_valid_RmiI: \"(na, b) \\<in> Rmi bdd \\<Longrightarrow> bdd_node_valid bdd na\"", "lemma n_valid_Rmi_alt: \"bdd_node_valid bdd na \\<longleftrightarrow> (\\<exists>b. (na, b) \\<in> Rmi bdd)\"", "lemma ifmi_result_validI:\n  assumes sane: \"bdd_sane s\"\n  assumes vld: \"bdd_node_valid s ni1\" \"bdd_node_valid s ni2\"\n  assumes ifm: \"ifmi v ni1 ni2 s = (ni, s')\"\n  shows \"bdd_node_valid s' ni\""], "translations": [["", "lemma [simp]:\n  \"bdd_node_valid bdd 0\"\n  \"bdd_node_valid bdd (Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_node_valid bdd 0 &&& bdd_node_valid bdd (Suc 0)", "apply(simp_all add: bdd_node_valid_def Rmi_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>b. Rmi_g 0 b bdd\n 2. \\<exists>b. Rmi_g (Suc 0) b bdd", "using Rmi_g.simps(1,2)"], ["proof (prove)\nusing this:\n  Rmi_g 0 Falseif ?bdd = True\n  Rmi_g (Suc 0) Trueif ?bdd = True\n\ngoal (2 subgoals):\n 1. \\<exists>b. Rmi_g 0 b bdd\n 2. \\<exists>b. Rmi_g (Suc 0) b bdd", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"ifexd_valid bdd e \\<equiv> (case e of IFD _ t e \\<Rightarrow> bdd_node_valid bdd t \\<and> bdd_node_valid bdd e | _ \\<Rightarrow> True)\""], ["", "definition \"bdd_sane bdd \\<equiv> pointermap_sane (dpm bdd) \\<and> mi_pre.map_invar_impl (dcl bdd) bdd\""], ["", "lemma [simp,intro!]: \"bdd_sane emptymi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_sane emptymi", "unfolding emptymi_def bdd_sane_def bdd.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. pointermap_sane empty_pointermap \\<and>\n    mi_pre.map_invar_impl Map.empty\n     \\<lparr>dpm = empty_pointermap, dcl = Map.empty\\<rparr>", "by(simp add: mi_pre.map_invar_impl_def)"], ["", "lemma prod_split3: \"P (case p of (x, xa, xaa) \\<Rightarrow> f x xa xaa) = (\\<forall>x1 x2 x3. p = (x1, x2, x3) \\<longrightarrow> P (f x1 x2 x3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (case p of (x, xa, xaa) \\<Rightarrow> f x xa xaa) =\n    (\\<forall>x1 x2 x3. p = (x1, x2, x3) \\<longrightarrow> P (f x1 x2 x3))", "by(simp split: prod.splits)"], ["", "lemma IfI: \"(c \\<Longrightarrow> P x) \\<Longrightarrow> (\\<not>c \\<Longrightarrow> P y) \\<Longrightarrow> P (if c then x else y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<Longrightarrow> P x;\n     \\<not> c \\<Longrightarrow> P y\\<rbrakk>\n    \\<Longrightarrow> P (if c then x else y)", "by simp"], ["", "lemma fstsndI: \"x = (a,b) \\<Longrightarrow> fst x = a \\<and> snd x = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = (a, b) \\<Longrightarrow> fst x = a \\<and> snd x = b", "by simp"], ["", "thm nat.split"], ["", "lemma Rmi_g_2_split: \"P (Rmi_g n x m) =\n  ((x = Falseif \\<longrightarrow> P (Rmi_g n x m)) \\<and>\n  (x = Trueif \\<longrightarrow> P (Rmi_g n x m)) \\<and>\n  (\\<forall>vs ts es. x = IF vs ts es \\<longrightarrow> P (Rmi_g n x m)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (Rmi_g n x m) =\n    ((x = Falseif \\<longrightarrow> P (Rmi_g n x m)) \\<and>\n     (x = Trueif \\<longrightarrow> P (Rmi_g n x m)) \\<and>\n     (\\<forall>vs ts es. x = IF vs ts es \\<longrightarrow> P (Rmi_g n x m)))", "by(cases x;simp)"], ["", "lemma rmigeq: \"Rmi_g ni1 n1 s \\<Longrightarrow> Rmi_g ni2 n2 s \\<Longrightarrow> ni1 = ni2 \\<Longrightarrow> n1 = n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Rmi_g ni1 n1 s; Rmi_g ni2 n2 s; ni1 = ni2\\<rbrakk>\n    \\<Longrightarrow> n1 = n2", "proof(induction ni1 n1 s arbitrary: n2 ni2 rule: Rmi_g.induct, goal_cases)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g 0 Falseif bdd; Rmi_g ni2 n2 bdd; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 2. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 3. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    Rmi_g xa t bdd; Rmi_g ni2 n2 bdd; xa = ni2\\<rbrakk>\n                   \\<Longrightarrow> t = n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya = ni2\\<rbrakk>\n           \\<Longrightarrow> e = n2;\n        Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) = ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e = n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 5. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 6. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 7. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) (IF va vb vc) uw_; Rmi_g ni2 n2 uw_;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc = n2\n 8. \\<And>uw_ n2 ni2.\n       \\<lbrakk>Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 9. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n         0 = ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb = n2\nA total of 11 subgoals...", "case (3 n v t e bdd n2 ni2)"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y; Rmi_g ?xa t bdd;\n   Rmi_g ?ni2.0 ?n2.0 bdd; ?xa = ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> t = ?n2.0\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y; Rmi_g ?ya e bdd;\n   Rmi_g ?ni2.0 ?n2.0 bdd; ?ya = ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> e = ?n2.0\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n  Rmi_g ni2 n2 bdd\n  Suc (Suc n) = ni2\n\ngoal (11 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g 0 Falseif bdd; Rmi_g ni2 n2 bdd; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 2. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 3. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    Rmi_g xa t bdd; Rmi_g ni2 n2 bdd; xa = ni2\\<rbrakk>\n                   \\<Longrightarrow> t = n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya = ni2\\<rbrakk>\n           \\<Longrightarrow> e = n2;\n        Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) = ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e = n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 5. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 6. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 7. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) (IF va vb vc) uw_; Rmi_g ni2 n2 uw_;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc = n2\n 8. \\<And>uw_ n2 ni2.\n       \\<lbrakk>Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 9. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n         0 = ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb = n2\nA total of 11 subgoals...", "note goal3 = 3"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y; Rmi_g ?xa t bdd;\n   Rmi_g ?ni2.0 ?n2.0 bdd; ?xa = ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> t = ?n2.0\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y; Rmi_g ?ya e bdd;\n   Rmi_g ?ni2.0 ?n2.0 bdd; ?ya = ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> e = ?n2.0\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n  Rmi_g ni2 n2 bdd\n  Suc (Suc n) = ni2\n\ngoal (11 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g 0 Falseif bdd; Rmi_g ni2 n2 bdd; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 2. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 3. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    Rmi_g xa t bdd; Rmi_g ni2 n2 bdd; xa = ni2\\<rbrakk>\n                   \\<Longrightarrow> t = n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya = ni2\\<rbrakk>\n           \\<Longrightarrow> e = n2;\n        Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) = ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e = n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 5. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 6. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 7. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) (IF va vb vc) uw_; Rmi_g ni2 n2 uw_;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc = n2\n 8. \\<And>uw_ n2 ni2.\n       \\<lbrakk>Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 9. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n         0 = ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb = n2\nA total of 11 subgoals...", "note 1 = goal3(1,2)"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y; Rmi_g ?xa t bdd;\n   Rmi_g ?ni2.0 ?n2.0 bdd; ?xa = ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> t = ?n2.0\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y; Rmi_g ?ya e bdd;\n   Rmi_g ?ni2.0 ?n2.0 bdd; ?ya = ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> e = ?n2.0\n\ngoal (11 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g 0 Falseif bdd; Rmi_g ni2 n2 bdd; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 2. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 3. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    Rmi_g xa t bdd; Rmi_g ni2 n2 bdd; xa = ni2\\<rbrakk>\n                   \\<Longrightarrow> t = n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya = ni2\\<rbrakk>\n           \\<Longrightarrow> e = n2;\n        Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) = ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e = n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 5. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 6. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 7. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) (IF va vb vc) uw_; Rmi_g ni2 n2 uw_;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc = n2\n 8. \\<And>uw_ n2 ni2.\n       \\<lbrakk>Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 9. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n         0 = ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb = n2\nA total of 11 subgoals...", "have 2: \"Rmi_g (fst (snd (pm_pth (dpm bdd) n))) t bdd\" \"Rmi_g (snd (snd (pm_pth (dpm bdd) n))) e bdd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rmi_g (fst (snd (pm_pth (dpm bdd) n))) t bdd &&&\n    Rmi_g (snd (snd (pm_pth (dpm bdd) n))) e bdd", "using goal3(3)"], ["proof (prove)\nusing this:\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n\ngoal (1 subgoal):\n 1. Rmi_g (fst (snd (pm_pth (dpm bdd) n))) t bdd &&&\n    Rmi_g (snd (snd (pm_pth (dpm bdd) n))) e bdd", "by(clarsimp)+"], ["proof (state)\nthis:\n  Rmi_g (fst (snd (pm_pth (dpm bdd) n))) t bdd\n  Rmi_g (snd (snd (pm_pth (dpm bdd) n))) e bdd\n\ngoal (11 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g 0 Falseif bdd; Rmi_g ni2 n2 bdd; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 2. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 3. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    Rmi_g xa t bdd; Rmi_g ni2 n2 bdd; xa = ni2\\<rbrakk>\n                   \\<Longrightarrow> t = n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya = ni2\\<rbrakk>\n           \\<Longrightarrow> e = n2;\n        Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) = ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e = n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 5. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 6. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 7. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) (IF va vb vc) uw_; Rmi_g ni2 n2 uw_;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc = n2\n 8. \\<And>uw_ n2 ni2.\n       \\<lbrakk>Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 9. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n         0 = ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb = n2\nA total of 11 subgoals...", "note mIH = 1(1)[OF _ _ 2(1) _ refl] 1(2)[OF _ _ 2(2) _ refl]"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n;\n   (fst (snd (pm_pth (dpm bdd) n)), ?ya) = ?y;\n   Rmi_g (fst (snd (pm_pth (dpm bdd) n))) ?n2.0 bdd\\<rbrakk>\n  \\<Longrightarrow> t = ?n2.0\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n;\n   (?xa, snd (snd (pm_pth (dpm bdd) n))) = ?y;\n   Rmi_g (snd (snd (pm_pth (dpm bdd) n))) ?n2.0 bdd\\<rbrakk>\n  \\<Longrightarrow> e = ?n2.0\n\ngoal (11 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g 0 Falseif bdd; Rmi_g ni2 n2 bdd; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 2. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 3. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    Rmi_g xa t bdd; Rmi_g ni2 n2 bdd; xa = ni2\\<rbrakk>\n                   \\<Longrightarrow> t = n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya = ni2\\<rbrakk>\n           \\<Longrightarrow> e = n2;\n        Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) = ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e = n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 5. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 6. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 7. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) (IF va vb vc) uw_; Rmi_g ni2 n2 uw_;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc = n2\n 8. \\<And>uw_ n2 ni2.\n       \\<lbrakk>Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 9. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n         0 = ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb = n2\nA total of 11 subgoals...", "obtain v2 t2 e2 where v2: \"n2 = IF v2 t2 e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v2 t2 e2.\n        n2 = IF v2 t2 e2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Rmi_g.simps(4,6) goal3(3-5)"], ["proof (prove)\nusing this:\n  Rmi_g (Suc (Suc ?va)) Trueif ?uw = False\n  Rmi_g (Suc ?v) Falseif ?uw = False\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n  Rmi_g ni2 n2 bdd\n  Suc (Suc n) = ni2\n\ngoal (1 subgoal):\n 1. (\\<And>v2 t2 e2.\n        n2 = IF v2 t2 e2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases n2) blast+"], ["proof (state)\nthis:\n  n2 = IF v2 t2 e2\n\ngoal (11 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g 0 Falseif bdd; Rmi_g ni2 n2 bdd; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 2. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 3. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    Rmi_g xa t bdd; Rmi_g ni2 n2 bdd; xa = ni2\\<rbrakk>\n                   \\<Longrightarrow> t = n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya = ni2\\<rbrakk>\n           \\<Longrightarrow> e = n2;\n        Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) = ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e = n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 5. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 6. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 7. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) (IF va vb vc) uw_; Rmi_g ni2 n2 uw_;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc = n2\n 8. \\<And>uw_ n2 ni2.\n       \\<lbrakk>Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 9. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n         0 = ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb = n2\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  n2 = IF v2 t2 e2\n\ngoal (1 subgoal):\n 1. IF v t e = n2", "using goal3(3-4)"], ["proof (prove)\nusing this:\n  n2 = IF v2 t2 e2\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n  Rmi_g ni2 n2 bdd\n\ngoal (1 subgoal):\n 1. IF v t e = n2", "by(clarsimp simp add: v2 goal3(5)[symmetric] mIH)"], ["proof (state)\nthis:\n  IF v t e = n2\n\ngoal (10 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g 0 Falseif bdd; Rmi_g ni2 n2 bdd; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 2. \\<And>bdd n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 5. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v = ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif = n2\n 6. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc 0) (IF va vb vc) uw_; Rmi_g ni2 n2 uw_;\n        Suc 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc = n2\n 7. \\<And>uw_ n2 ni2.\n       \\<lbrakk>Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 8. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>Rmi_g (Suc (Suc va)) Trueif uw_; Rmi_g ni2 n2 uw_;\n        Suc (Suc va) = ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif = n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_; 0 = ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb = n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>Rmi_g (Suc 0) (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n         Suc 0 = ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb = n2", "qed (rename_tac n2 ni2, (case_tac n2; clarsimp))+"], ["", "lemma rmigneq: \"bdd_sane s \\<Longrightarrow> Rmi_g ni1 n1 s \\<Longrightarrow> Rmi_g ni2 n2 s \\<Longrightarrow> ni1 \\<noteq> ni2 \\<Longrightarrow> n1 \\<noteq> n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdd_sane s; Rmi_g ni1 n1 s; Rmi_g ni2 n2 s;\n     ni1 \\<noteq> ni2\\<rbrakk>\n    \\<Longrightarrow> n1 \\<noteq> n2", "proof(induction ni1 n1 s arbitrary: n2 ni2 rule: Rmi_g.induct, goal_cases)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>bdd_sane bdd; Rmi_g 0 Falseif bdd; Rmi_g ni2 n2 bdd;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 2. \\<And>bdd n2 ni2.\n       \\<lbrakk>bdd_sane bdd; Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 3. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 5. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 6. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 7. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 8. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 9. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n         0 \\<noteq> ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb \\<noteq> n2\nA total of 11 subgoals...", "case 1"], ["proof (state)\nthis:\n  bdd_sane bdd_\n  Rmi_g 0 Falseif bdd_\n  Rmi_g ni2_ n2_ bdd_\n  0 \\<noteq> ni2_\n\ngoal (11 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>bdd_sane bdd; Rmi_g 0 Falseif bdd; Rmi_g ni2 n2 bdd;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 2. \\<And>bdd n2 ni2.\n       \\<lbrakk>bdd_sane bdd; Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 3. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 5. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 6. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 7. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 8. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 9. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n         0 \\<noteq> ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb \\<noteq> n2\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane bdd_\n  Rmi_g 0 Falseif bdd_\n  Rmi_g ni2_ n2_ bdd_\n  0 \\<noteq> ni2_\n\ngoal (1 subgoal):\n 1. Falseif \\<noteq> n2_", "by (metis Rmi_g.simps(6) old.nat.exhaust)"], ["proof (state)\nthis:\n  Falseif \\<noteq> n2_\n\ngoal (10 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>bdd_sane bdd; Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 2. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 5. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 6. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 7. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 8. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n         Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb \\<noteq> n2", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>bdd_sane bdd; Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 2. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 5. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 6. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 7. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 8. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n         Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb \\<noteq> n2", "case 2"], ["proof (state)\nthis:\n  bdd_sane bdd_\n  Rmi_g (Suc 0) Trueif bdd_\n  Rmi_g ni2_ n2_ bdd_\n  Suc 0 \\<noteq> ni2_\n\ngoal (10 subgoals):\n 1. \\<And>bdd n2 ni2.\n       \\<lbrakk>bdd_sane bdd; Rmi_g (Suc 0) Trueif bdd; Rmi_g ni2 n2 bdd;\n        Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 2. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 4. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 5. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 6. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 7. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 8. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 10. \\<And>v va vb uw_ n2 ni2.\n        \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n         Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n        \\<Longrightarrow> IF v va vb \\<noteq> n2", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane bdd_\n  Rmi_g (Suc 0) Trueif bdd_\n  Rmi_g ni2_ n2_ bdd_\n  Suc 0 \\<noteq> ni2_\n\ngoal (1 subgoal):\n 1. Trueif \\<noteq> n2_", "by (metis Rmi_g.simps(4,8) old.nat.exhaust)"], ["proof (state)\nthis:\n  Trueif \\<noteq> n2_\n\ngoal (9 subgoals):\n 1. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 4. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 5. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 6. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 7. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 8. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 4. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 5. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 6. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 7. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 8. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2", "case (3 n v t e bdd n2 ni2)"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y; bdd_sane bdd;\n   Rmi_g ?xa t bdd; Rmi_g ?ni2.0 ?n2.0 bdd; ?xa \\<noteq> ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> t \\<noteq> ?n2.0\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y; bdd_sane bdd;\n   Rmi_g ?ya e bdd; Rmi_g ?ni2.0 ?n2.0 bdd; ?ya \\<noteq> ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> e \\<noteq> ?n2.0\n  bdd_sane bdd\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n  Rmi_g ni2 n2 bdd\n  Suc (Suc n) \\<noteq> ni2\n\ngoal (9 subgoals):\n 1. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 4. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 5. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 6. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 7. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 8. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2", "note goal3 = 3"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y; bdd_sane bdd;\n   Rmi_g ?xa t bdd; Rmi_g ?ni2.0 ?n2.0 bdd; ?xa \\<noteq> ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> t \\<noteq> ?n2.0\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y; bdd_sane bdd;\n   Rmi_g ?ya e bdd; Rmi_g ?ni2.0 ?n2.0 bdd; ?ya \\<noteq> ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> e \\<noteq> ?n2.0\n  bdd_sane bdd\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n  Rmi_g ni2 n2 bdd\n  Suc (Suc n) \\<noteq> ni2\n\ngoal (9 subgoals):\n 1. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 4. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 5. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 6. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 7. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 8. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2", "let ?bddpth = \"pm_pth (dpm bdd)\""], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 4. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 5. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 6. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 7. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 8. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2", "note 1 = goal3(1,2)[OF prod.collapse prod.collapse]"], ["proof (state)\nthis:\n  \\<lbrakk>bdd_sane bdd; Rmi_g (fst (snd (pm_pth (dpm bdd) n))) t bdd;\n   Rmi_g ?ni2.0 ?n2.0 bdd;\n   fst (snd (pm_pth (dpm bdd) n)) \\<noteq> ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> t \\<noteq> ?n2.0\n  \\<lbrakk>bdd_sane bdd; Rmi_g (snd (snd (pm_pth (dpm bdd) n))) e bdd;\n   Rmi_g ?ni2.0 ?n2.0 bdd;\n   snd (snd (pm_pth (dpm bdd) n)) \\<noteq> ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> e \\<noteq> ?n2.0\n\ngoal (9 subgoals):\n 1. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 4. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 5. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 6. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 7. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 8. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2", "have 2: \"Rmi_g (fst (snd (?bddpth n))) t bdd\" \"Rmi_g (snd (snd (?bddpth n))) e bdd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rmi_g (fst (snd (pm_pth (dpm bdd) n))) t bdd &&&\n    Rmi_g (snd (snd (pm_pth (dpm bdd) n))) e bdd", "using goal3(4)"], ["proof (prove)\nusing this:\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n\ngoal (1 subgoal):\n 1. Rmi_g (fst (snd (pm_pth (dpm bdd) n))) t bdd &&&\n    Rmi_g (snd (snd (pm_pth (dpm bdd) n))) e bdd", "by(clarsimp)+"], ["proof (state)\nthis:\n  Rmi_g (fst (snd (pm_pth (dpm bdd) n))) t bdd\n  Rmi_g (snd (snd (pm_pth (dpm bdd) n))) e bdd\n\ngoal (9 subgoals):\n 1. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 4. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 5. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 6. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 7. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 8. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2", "note mIH = 1(1)[OF goal3(3) 2(1)] 1(2)[OF goal3(3) 2(2)]"], ["proof (state)\nthis:\n  \\<lbrakk>Rmi_g ?ni2.0 ?n2.0 bdd;\n   fst (snd (pm_pth (dpm bdd) n)) \\<noteq> ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> t \\<noteq> ?n2.0\n  \\<lbrakk>Rmi_g ?ni2.0 ?n2.0 bdd;\n   snd (snd (pm_pth (dpm bdd) n)) \\<noteq> ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> e \\<noteq> ?n2.0\n\ngoal (9 subgoals):\n 1. \\<And>n v t e bdd n2 ni2.\n       \\<lbrakk>\\<And>x y xa ya n2 ni2.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    bdd_sane bdd; Rmi_g xa t bdd; Rmi_g ni2 n2 bdd;\n                    xa \\<noteq> ni2\\<rbrakk>\n                   \\<Longrightarrow> t \\<noteq> n2;\n        \\<And>x y xa ya n2 ni2.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y; bdd_sane bdd;\n            Rmi_g ya e bdd; Rmi_g ni2 n2 bdd; ya \\<noteq> ni2\\<rbrakk>\n           \\<Longrightarrow> e \\<noteq> n2;\n        bdd_sane bdd; Rmi_g (Suc (Suc n)) (IF v t e) bdd; Rmi_g ni2 n2 bdd;\n        Suc (Suc n) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 3. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 4. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 5. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 6. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 7. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 8. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 9. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. IF v t e \\<noteq> n2", "proof(cases \"0 < ni2\", case_tac \"1 < ni2\")"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 3. \\<not> 0 < ni2 \\<Longrightarrow> IF v t e \\<noteq> n2", "case False"], ["proof (state)\nthis:\n  \\<not> 0 < ni2\n\ngoal (3 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 3. \\<not> 0 < ni2 \\<Longrightarrow> IF v t e \\<noteq> n2", "hence e: \"ni2 = 0\""], ["proof (prove)\nusing this:\n  \\<not> 0 < ni2\n\ngoal (1 subgoal):\n 1. ni2 = 0", "by simp"], ["proof (state)\nthis:\n  ni2 = 0\n\ngoal (3 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 3. \\<not> 0 < ni2 \\<Longrightarrow> IF v t e \\<noteq> n2", "with goal3(5)"], ["proof (chain)\npicking this:\n  Rmi_g ni2 n2 bdd\n  ni2 = 0", "have \"n2 = Falseif\""], ["proof (prove)\nusing this:\n  Rmi_g ni2 n2 bdd\n  ni2 = 0\n\ngoal (1 subgoal):\n 1. n2 = Falseif", "using rmigeq"], ["proof (prove)\nusing this:\n  Rmi_g ni2 n2 bdd\n  ni2 = 0\n  \\<lbrakk>Rmi_g ?ni1.0 ?n1.0 ?s; Rmi_g ?ni2.0 ?n2.0 ?s;\n   ?ni1.0 = ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> ?n1.0 = ?n2.0\n\ngoal (1 subgoal):\n 1. n2 = Falseif", "by auto"], ["proof (state)\nthis:\n  n2 = Falseif\n\ngoal (3 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 3. \\<not> 0 < ni2 \\<Longrightarrow> IF v t e \\<noteq> n2", "(* honestly, I'm puzzled how this works\\<dots> *)"], ["proof (state)\nthis:\n  n2 = Falseif\n\ngoal (3 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 3. \\<not> 0 < ni2 \\<Longrightarrow> IF v t e \\<noteq> n2", "thus ?thesis"], ["proof (prove)\nusing this:\n  n2 = Falseif\n\ngoal (1 subgoal):\n 1. IF v t e \\<noteq> n2", "by simp"], ["proof (state)\nthis:\n  IF v t e \\<noteq> n2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "case True"], ["proof (state)\nthis:\n  0 < ni2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "moreover"], ["proof (state)\nthis:\n  0 < ni2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "assume 3: \"\\<not> 1 < ni2\""], ["proof (state)\nthis:\n  \\<not> 1 < ni2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "ultimately"], ["proof (chain)\npicking this:\n  0 < ni2\n  \\<not> 1 < ni2", "have \"ni2 = 1\""], ["proof (prove)\nusing this:\n  0 < ni2\n  \\<not> 1 < ni2\n\ngoal (1 subgoal):\n 1. ni2 = 1", "by simp"], ["proof (state)\nthis:\n  ni2 = 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "with goal3(5)"], ["proof (chain)\npicking this:\n  Rmi_g ni2 n2 bdd\n  ni2 = 1", "have \"n2 = Trueif\""], ["proof (prove)\nusing this:\n  Rmi_g ni2 n2 bdd\n  ni2 = 1\n\ngoal (1 subgoal):\n 1. n2 = Trueif", "using rmigeq"], ["proof (prove)\nusing this:\n  Rmi_g ni2 n2 bdd\n  ni2 = 1\n  \\<lbrakk>Rmi_g ?ni1.0 ?n1.0 ?s; Rmi_g ?ni2.0 ?n2.0 ?s;\n   ?ni1.0 = ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> ?n1.0 = ?n2.0\n\ngoal (1 subgoal):\n 1. n2 = Trueif", "by auto"], ["proof (state)\nthis:\n  n2 = Trueif\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2\n 2. \\<lbrakk>0 < ni2; \\<not> 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "thus ?thesis"], ["proof (prove)\nusing this:\n  n2 = Trueif\n\ngoal (1 subgoal):\n 1. IF v t e \\<noteq> n2", "by simp"], ["proof (state)\nthis:\n  IF v t e \\<noteq> n2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "assume 3: \"1 < ni2\""], ["proof (state)\nthis:\n  1 < ni2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "then"], ["proof (chain)\npicking this:\n  1 < ni2", "obtain ni2s where [simp]: \"ni2 = Suc (Suc ni2s)\""], ["proof (prove)\nusing this:\n  1 < ni2\n\ngoal (1 subgoal):\n 1. (\\<And>ni2s.\n        ni2 = Suc (Suc ni2s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding One_nat_def"], ["proof (prove)\nusing this:\n  Suc 0 < ni2\n\ngoal (1 subgoal):\n 1. (\\<And>ni2s.\n        ni2 = Suc (Suc ni2s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using less_imp_Suc_add"], ["proof (prove)\nusing this:\n  Suc 0 < ni2\n  ?m < ?n \\<Longrightarrow> \\<exists>k. ?n = Suc (?m + k)\n\ngoal (1 subgoal):\n 1. (\\<And>ni2s.\n        ni2 = Suc (Suc ni2s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ni2 = Suc (Suc ni2s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "obtain v2 t2 e2 where v2[simp]: \"n2 = IF v2 t2 e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v2 t2 e2.\n        n2 = IF v2 t2 e2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using goal3(5)"], ["proof (prove)\nusing this:\n  Rmi_g ni2 n2 bdd\n\ngoal (1 subgoal):\n 1. (\\<And>v2 t2 e2.\n        n2 = IF v2 t2 e2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases \"(ni2, n2, bdd)\" rule: Rmi_g.cases) clarsimp+"], ["proof (state)\nthis:\n  n2 = IF v2 t2 e2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "have 4: \"Rmi_g (fst (snd (?bddpth ni2s))) t2 bdd\" \"Rmi_g (snd (snd (?bddpth ni2s))) e2 bdd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rmi_g (fst (snd (pm_pth (dpm bdd) ni2s))) t2 bdd &&&\n    Rmi_g (snd (snd (pm_pth (dpm bdd) ni2s))) e2 bdd", "using goal3(5)"], ["proof (prove)\nusing this:\n  Rmi_g ni2 n2 bdd\n\ngoal (1 subgoal):\n 1. Rmi_g (fst (snd (pm_pth (dpm bdd) ni2s))) t2 bdd &&&\n    Rmi_g (snd (snd (pm_pth (dpm bdd) ni2s))) e2 bdd", "by clarsimp+"], ["proof (state)\nthis:\n  Rmi_g (fst (snd (pm_pth (dpm bdd) ni2s))) t2 bdd\n  Rmi_g (snd (snd (pm_pth (dpm bdd) ni2s))) e2 bdd\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < ni2; 1 < ni2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> n2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. IF v t e \\<noteq> n2", "unfolding v2"], ["proof (prove)\ngoal (1 subgoal):\n 1. IF v t e \\<noteq> IF v2 t2 e2", "proof(cases \"fst (snd (?bddpth n)) = fst (snd (?bddpth ni2s))\",\n      case_tac \"snd (snd (?bddpth n)) = snd (snd (?bddpth ni2s))\",\n      case_tac \"v = v2\")"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v = v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 2. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v \\<noteq> v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 3. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) \\<noteq>\n     snd (snd (pm_pth (dpm bdd) ni2s))\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 4. fst (snd (pm_pth (dpm bdd) n)) \\<noteq>\n    fst (snd (pm_pth (dpm bdd) ni2s)) \\<Longrightarrow>\n    IF v t e \\<noteq> IF v2 t2 e2", "have ne: \"ni2s \\<noteq> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ni2s \\<noteq> n", "using goal3(6)"], ["proof (prove)\nusing this:\n  Suc (Suc n) \\<noteq> ni2\n\ngoal (1 subgoal):\n 1. ni2s \\<noteq> n", "by simp"], ["proof (state)\nthis:\n  ni2s \\<noteq> n\n\ngoal (4 subgoals):\n 1. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v = v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 2. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v \\<noteq> v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 3. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) \\<noteq>\n     snd (snd (pm_pth (dpm bdd) ni2s))\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 4. fst (snd (pm_pth (dpm bdd) n)) \\<noteq>\n    fst (snd (pm_pth (dpm bdd) ni2s)) \\<Longrightarrow>\n    IF v t e \\<noteq> IF v2 t2 e2", "have ib: \"pointermap_p_valid n (dpm bdd)\"  \"pointermap_p_valid ni2s (dpm bdd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pointermap_p_valid n (dpm bdd) &&& pointermap_p_valid ni2s (dpm bdd)", "using Rmi_g.simps(3) goal3(4,5)"], ["proof (prove)\nusing this:\n  Rmi_g (Suc (Suc ?n)) (IF ?v ?t ?e) ?bdd =\n  (pointermap_p_valid ?n (dpm ?bdd) \\<and>\n   (case pm_pth (dpm ?bdd) ?n of\n    (nv, nt, ne) \\<Rightarrow>\n      nv = ?v \\<and> Rmi_g nt ?t ?bdd \\<and> Rmi_g ne ?e ?bdd))\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n  Rmi_g ni2 n2 bdd\n\ngoal (1 subgoal):\n 1. pointermap_p_valid n (dpm bdd) &&& pointermap_p_valid ni2s (dpm bdd)", "by simp_all"], ["proof (state)\nthis:\n  pointermap_p_valid n (dpm bdd)\n  pointermap_p_valid ni2s (dpm bdd)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v = v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 2. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v \\<noteq> v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 3. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) \\<noteq>\n     snd (snd (pm_pth (dpm bdd) ni2s))\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 4. fst (snd (pm_pth (dpm bdd) n)) \\<noteq>\n    fst (snd (pm_pth (dpm bdd) ni2s)) \\<Longrightarrow>\n    IF v t e \\<noteq> IF v2 t2 e2", "assume goal1:\n        \"fst (snd (pm_pth (dpm bdd) n)) = fst (snd (pm_pth (dpm bdd) ni2s))\"\n        \"snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s))\"\n        \"v = v2\""], ["proof (state)\nthis:\n  fst (snd (pm_pth (dpm bdd) n)) = fst (snd (pm_pth (dpm bdd) ni2s))\n  snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s))\n  v = v2\n\ngoal (4 subgoals):\n 1. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v = v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 2. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v \\<noteq> v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 3. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) \\<noteq>\n     snd (snd (pm_pth (dpm bdd) ni2s))\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 4. fst (snd (pm_pth (dpm bdd) n)) \\<noteq>\n    fst (snd (pm_pth (dpm bdd) ni2s)) \\<Longrightarrow>\n    IF v t e \\<noteq> IF v2 t2 e2", "hence \"?bddpth n = ?bddpth ni2s\""], ["proof (prove)\nusing this:\n  fst (snd (pm_pth (dpm bdd) n)) = fst (snd (pm_pth (dpm bdd) ni2s))\n  snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s))\n  v = v2\n\ngoal (1 subgoal):\n 1. pm_pth (dpm bdd) n = pm_pth (dpm bdd) ni2s", "unfolding prod_eq_iff"], ["proof (prove)\nusing this:\n  fst (snd (pm_pth (dpm bdd) n)) = fst (snd (pm_pth (dpm bdd) ni2s))\n  snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s))\n  v = v2\n\ngoal (1 subgoal):\n 1. fst (pm_pth (dpm bdd) n) = fst (pm_pth (dpm bdd) ni2s) \\<and>\n    fst (snd (pm_pth (dpm bdd) n)) =\n    fst (snd (pm_pth (dpm bdd) ni2s)) \\<and>\n    snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s))", "using goal3(4) goal3(5)"], ["proof (prove)\nusing this:\n  fst (snd (pm_pth (dpm bdd) n)) = fst (snd (pm_pth (dpm bdd) ni2s))\n  snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s))\n  v = v2\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n  Rmi_g ni2 n2 bdd\n\ngoal (1 subgoal):\n 1. fst (pm_pth (dpm bdd) n) = fst (pm_pth (dpm bdd) ni2s) \\<and>\n    fst (snd (pm_pth (dpm bdd) n)) =\n    fst (snd (pm_pth (dpm bdd) ni2s)) \\<and>\n    snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s))", "by auto"], ["proof (state)\nthis:\n  pm_pth (dpm bdd) n = pm_pth (dpm bdd) ni2s\n\ngoal (4 subgoals):\n 1. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v = v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 2. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v \\<noteq> v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 3. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) \\<noteq>\n     snd (snd (pm_pth (dpm bdd) ni2s))\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 4. fst (snd (pm_pth (dpm bdd) n)) \\<noteq>\n    fst (snd (pm_pth (dpm bdd) ni2s)) \\<Longrightarrow>\n    IF v t e \\<noteq> IF v2 t2 e2", "with goal3(3) ne"], ["proof (chain)\npicking this:\n  bdd_sane bdd\n  ni2s \\<noteq> n\n  pm_pth (dpm bdd) n = pm_pth (dpm bdd) ni2s", "have False"], ["proof (prove)\nusing this:\n  bdd_sane bdd\n  ni2s \\<noteq> n\n  pm_pth (dpm bdd) n = pm_pth (dpm bdd) ni2s\n\ngoal (1 subgoal):\n 1. False", "unfolding bdd_sane_def"], ["proof (prove)\nusing this:\n  pointermap_sane (dpm bdd) \\<and> mi_pre.map_invar_impl (dcl bdd) bdd\n  ni2s \\<noteq> n\n  pm_pth (dpm bdd) n = pm_pth (dpm bdd) ni2s\n\ngoal (1 subgoal):\n 1. False", "using pth_eq_iff_index_eq[OF _ ib]"], ["proof (prove)\nusing this:\n  pointermap_sane (dpm bdd) \\<and> mi_pre.map_invar_impl (dcl bdd) bdd\n  ni2s \\<noteq> n\n  pm_pth (dpm bdd) n = pm_pth (dpm bdd) ni2s\n  pointermap_sane (dpm bdd) \\<Longrightarrow>\n  (pm_pth (dpm bdd) n = pm_pth (dpm bdd) ni2s) = (n = ni2s)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (4 subgoals):\n 1. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v = v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 2. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v \\<noteq> v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 3. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) \\<noteq>\n     snd (snd (pm_pth (dpm bdd) ni2s))\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 4. fst (snd (pm_pth (dpm bdd) n)) \\<noteq>\n    fst (snd (pm_pth (dpm bdd) ni2s)) \\<Longrightarrow>\n    IF v t e \\<noteq> IF v2 t2 e2", "thus \"IF v t e \\<noteq> IF v2 t2 e2\""], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. IF v t e \\<noteq> IF v2 t2 e2", ".."], ["proof (state)\nthis:\n  IF v t e \\<noteq> IF v2 t2 e2\n\ngoal (3 subgoals):\n 1. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) = snd (snd (pm_pth (dpm bdd) ni2s));\n     v \\<noteq> v2\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 2. \\<lbrakk>fst (snd (pm_pth (dpm bdd) n)) =\n             fst (snd (pm_pth (dpm bdd) ni2s));\n     snd (snd (pm_pth (dpm bdd) n)) \\<noteq>\n     snd (snd (pm_pth (dpm bdd) ni2s))\\<rbrakk>\n    \\<Longrightarrow> IF v t e \\<noteq> IF v2 t2 e2\n 3. fst (snd (pm_pth (dpm bdd) n)) \\<noteq>\n    fst (snd (pm_pth (dpm bdd) ni2s)) \\<Longrightarrow>\n    IF v t e \\<noteq> IF v2 t2 e2", "qed (simp_all add: mIH(1)[OF 4(1)] mIH(2)[OF 4(2)])"], ["proof (state)\nthis:\n  IF v t e \\<noteq> n2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  IF v t e \\<noteq> n2\n\ngoal (8 subgoals):\n 1. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 2. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Falseif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 3. \\<And>v uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc v) Falseif uw_; Rmi_g ni2 n2 uw_;\n        Suc v \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Falseif \\<noteq> n2\n 4. \\<And>va vb vc uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF va vb vc) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF va vb vc \\<noteq> n2\n 5. \\<And>uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 Trueif uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 6. \\<And>va uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc (Suc va)) Trueif uw_;\n        Rmi_g ni2 n2 uw_; Suc (Suc va) \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> Trueif \\<noteq> n2\n 7. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g 0 (IF v va vb) uw_; Rmi_g ni2 n2 uw_;\n        0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2\n 8. \\<And>v va vb uw_ n2 ni2.\n       \\<lbrakk>bdd_sane uw_; Rmi_g (Suc 0) (IF v va vb) uw_;\n        Rmi_g ni2 n2 uw_; Suc 0 \\<noteq> ni2\\<rbrakk>\n       \\<Longrightarrow> IF v va vb \\<noteq> n2", "qed simp_all"], ["", "lemma ifmi_les_hlp: \"pointermap_sane (dpm s) \\<Longrightarrow> pointermap_getmk (v, ni1, ni2) (dpm s) = (x1, dpm s') \\<Longrightarrow> Rmi_g nia n s \\<Longrightarrow> Rmi_g nia n s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>pointermap_sane (dpm s);\n     pointermap_getmk (v, ni1, ni2) (dpm s) = (x1, dpm s');\n     Rmi_g nia n s\\<rbrakk>\n    \\<Longrightarrow> Rmi_g nia n s'", "proof(induction nia n s rule: Rmi_g.induct, goal_cases)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g 0 Falseif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Falseif s'\n 2. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc 0) Trueif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) Trueif s'\n 3. \\<And>n va t e bdd.\n       \\<lbrakk>\\<And>x y xa ya.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    pointermap_sane (dpm bdd);\n                    pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n                    Rmi_g xa t bdd\\<rbrakk>\n                   \\<Longrightarrow> Rmi_g xa t s';\n        \\<And>x y xa ya.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            pointermap_sane (dpm bdd);\n            pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n            Rmi_g ya e bdd\\<rbrakk>\n           \\<Longrightarrow> Rmi_g ya e s';\n        pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc (Suc n)) (IF va t e) bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc n)) (IF va t e) s'\n 4. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 5. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Falseif s'\n 6. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc va) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc va) Falseif s'\n 7. \\<And>va vb vc uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc 0) (IF va vb vc) uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) (IF va vb vc) s'\n 8. \\<And>uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g 0 Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Trueif s'\n 9. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 10. \\<And>va vaa vb uw_.\n        \\<lbrakk>pointermap_sane (dpm uw_);\n         pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n         Rmi_g 0 (IF va vaa vb) uw_\\<rbrakk>\n        \\<Longrightarrow> Rmi_g 0 (IF va vaa vb) s'\nA total of 11 subgoals...", "case (3 n v t e bdd)"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y;\n   pointermap_sane (dpm bdd);\n   pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n   Rmi_g ?xa t bdd\\<rbrakk>\n  \\<Longrightarrow> Rmi_g ?xa t s'\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y;\n   pointermap_sane (dpm bdd);\n   pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n   Rmi_g ?ya e bdd\\<rbrakk>\n  \\<Longrightarrow> Rmi_g ?ya e s'\n  pointermap_sane (dpm bdd)\n  pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s')\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n\ngoal (11 subgoals):\n 1. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g 0 Falseif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Falseif s'\n 2. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc 0) Trueif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) Trueif s'\n 3. \\<And>n va t e bdd.\n       \\<lbrakk>\\<And>x y xa ya.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    pointermap_sane (dpm bdd);\n                    pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n                    Rmi_g xa t bdd\\<rbrakk>\n                   \\<Longrightarrow> Rmi_g xa t s';\n        \\<And>x y xa ya.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            pointermap_sane (dpm bdd);\n            pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n            Rmi_g ya e bdd\\<rbrakk>\n           \\<Longrightarrow> Rmi_g ya e s';\n        pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc (Suc n)) (IF va t e) bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc n)) (IF va t e) s'\n 4. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 5. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Falseif s'\n 6. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc va) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc va) Falseif s'\n 7. \\<And>va vb vc uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc 0) (IF va vb vc) uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) (IF va vb vc) s'\n 8. \\<And>uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g 0 Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Trueif s'\n 9. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 10. \\<And>va vaa vb uw_.\n        \\<lbrakk>pointermap_sane (dpm uw_);\n         pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n         Rmi_g 0 (IF va vaa vb) uw_\\<rbrakk>\n        \\<Longrightarrow> Rmi_g 0 (IF va vaa vb) s'\nA total of 11 subgoals...", "note goal3 = 3"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y;\n   pointermap_sane (dpm bdd);\n   pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n   Rmi_g ?xa t bdd\\<rbrakk>\n  \\<Longrightarrow> Rmi_g ?xa t s'\n  \\<lbrakk>(?x, ?y) = pm_pth (dpm bdd) n; (?xa, ?ya) = ?y;\n   pointermap_sane (dpm bdd);\n   pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n   Rmi_g ?ya e bdd\\<rbrakk>\n  \\<Longrightarrow> Rmi_g ?ya e s'\n  pointermap_sane (dpm bdd)\n  pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s')\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n\ngoal (11 subgoals):\n 1. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g 0 Falseif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Falseif s'\n 2. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc 0) Trueif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) Trueif s'\n 3. \\<And>n va t e bdd.\n       \\<lbrakk>\\<And>x y xa ya.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    pointermap_sane (dpm bdd);\n                    pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n                    Rmi_g xa t bdd\\<rbrakk>\n                   \\<Longrightarrow> Rmi_g xa t s';\n        \\<And>x y xa ya.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            pointermap_sane (dpm bdd);\n            pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n            Rmi_g ya e bdd\\<rbrakk>\n           \\<Longrightarrow> Rmi_g ya e s';\n        pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc (Suc n)) (IF va t e) bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc n)) (IF va t e) s'\n 4. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 5. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Falseif s'\n 6. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc va) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc va) Falseif s'\n 7. \\<And>va vb vc uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc 0) (IF va vb vc) uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) (IF va vb vc) s'\n 8. \\<And>uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g 0 Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Trueif s'\n 9. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 10. \\<And>va vaa vb uw_.\n        \\<lbrakk>pointermap_sane (dpm uw_);\n         pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n         Rmi_g 0 (IF va vaa vb) uw_\\<rbrakk>\n        \\<Longrightarrow> Rmi_g 0 (IF va vaa vb) s'\nA total of 11 subgoals...", "obtain x1a x2a where pth[simp]: \"pm_pth (dpm bdd) n = (v, x1a, x2a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x1a x2a.\n        pm_pth (dpm bdd) n = (v, x1a, x2a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using goal3(5)"], ["proof (prove)\nusing this:\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n\ngoal (1 subgoal):\n 1. (\\<And>x1a x2a.\n        pm_pth (dpm bdd) n = (v, x1a, x2a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  pm_pth (dpm bdd) n = (v, x1a, x2a)\n\ngoal (11 subgoals):\n 1. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g 0 Falseif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Falseif s'\n 2. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc 0) Trueif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) Trueif s'\n 3. \\<And>n va t e bdd.\n       \\<lbrakk>\\<And>x y xa ya.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    pointermap_sane (dpm bdd);\n                    pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n                    Rmi_g xa t bdd\\<rbrakk>\n                   \\<Longrightarrow> Rmi_g xa t s';\n        \\<And>x y xa ya.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            pointermap_sane (dpm bdd);\n            pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n            Rmi_g ya e bdd\\<rbrakk>\n           \\<Longrightarrow> Rmi_g ya e s';\n        pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc (Suc n)) (IF va t e) bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc n)) (IF va t e) s'\n 4. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 5. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Falseif s'\n 6. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc va) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc va) Falseif s'\n 7. \\<And>va vb vc uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc 0) (IF va vb vc) uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) (IF va vb vc) s'\n 8. \\<And>uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g 0 Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Trueif s'\n 9. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 10. \\<And>va vaa vb uw_.\n        \\<lbrakk>pointermap_sane (dpm uw_);\n         pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n         Rmi_g 0 (IF va vaa vb) uw_\\<rbrakk>\n        \\<Longrightarrow> Rmi_g 0 (IF va vaa vb) s'\nA total of 11 subgoals...", "have pth'[simp]: \"pm_pth (dpm s') n = (v, x1a, x2a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pm_pth (dpm s') n = (v, x1a, x2a)", "unfolding pth[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. pm_pth (dpm s') n = pm_pth (dpm bdd) n", "using goal3(4,5)"], ["proof (prove)\nusing this:\n  pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s')\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n\ngoal (1 subgoal):\n 1. pm_pth (dpm s') n = pm_pth (dpm bdd) n", "by (meson Rmi_g.simps(3) pointermap_p_pth_inv)"], ["proof (state)\nthis:\n  pm_pth (dpm s') n = (v, x1a, x2a)\n\ngoal (11 subgoals):\n 1. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g 0 Falseif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Falseif s'\n 2. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc 0) Trueif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) Trueif s'\n 3. \\<And>n va t e bdd.\n       \\<lbrakk>\\<And>x y xa ya.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    pointermap_sane (dpm bdd);\n                    pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n                    Rmi_g xa t bdd\\<rbrakk>\n                   \\<Longrightarrow> Rmi_g xa t s';\n        \\<And>x y xa ya.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            pointermap_sane (dpm bdd);\n            pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n            Rmi_g ya e bdd\\<rbrakk>\n           \\<Longrightarrow> Rmi_g ya e s';\n        pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc (Suc n)) (IF va t e) bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc n)) (IF va t e) s'\n 4. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 5. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Falseif s'\n 6. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc va) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc va) Falseif s'\n 7. \\<And>va vb vc uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc 0) (IF va vb vc) uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) (IF va vb vc) s'\n 8. \\<And>uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g 0 Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Trueif s'\n 9. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 10. \\<And>va vaa vb uw_.\n        \\<lbrakk>pointermap_sane (dpm uw_);\n         pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n         Rmi_g 0 (IF va vaa vb) uw_\\<rbrakk>\n        \\<Longrightarrow> Rmi_g 0 (IF va vaa vb) s'\nA total of 11 subgoals...", "note mIH = goal3(1,2)[OF pth[symmetric] refl goal3(3,4)]"], ["proof (state)\nthis:\n  Rmi_g x1a t bdd \\<Longrightarrow> Rmi_g x1a t s'\n  Rmi_g x2a e bdd \\<Longrightarrow> Rmi_g x2a e s'\n\ngoal (11 subgoals):\n 1. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g 0 Falseif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Falseif s'\n 2. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc 0) Trueif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) Trueif s'\n 3. \\<And>n va t e bdd.\n       \\<lbrakk>\\<And>x y xa ya.\n                   \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n                    pointermap_sane (dpm bdd);\n                    pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n                    Rmi_g xa t bdd\\<rbrakk>\n                   \\<Longrightarrow> Rmi_g xa t s';\n        \\<And>x y xa ya.\n           \\<lbrakk>(x, y) = pm_pth (dpm bdd) n; (xa, ya) = y;\n            pointermap_sane (dpm bdd);\n            pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n            Rmi_g ya e bdd\\<rbrakk>\n           \\<Longrightarrow> Rmi_g ya e s';\n        pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc (Suc n)) (IF va t e) bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc n)) (IF va t e) s'\n 4. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 5. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Falseif s'\n 6. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc va) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc va) Falseif s'\n 7. \\<And>va vb vc uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc 0) (IF va vb vc) uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) (IF va vb vc) s'\n 8. \\<And>uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g 0 Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Trueif s'\n 9. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 10. \\<And>va vaa vb uw_.\n        \\<lbrakk>pointermap_sane (dpm uw_);\n         pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n         Rmi_g 0 (IF va vaa vb) uw_\\<rbrakk>\n        \\<Longrightarrow> Rmi_g 0 (IF va vaa vb) s'\nA total of 11 subgoals...", "from goal3(5)"], ["proof (chain)\npicking this:\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd", "show ?case"], ["proof (prove)\nusing this:\n  Rmi_g (Suc (Suc n)) (IF v t e) bdd\n\ngoal (1 subgoal):\n 1. Rmi_g (Suc (Suc n)) (IF v t e) s'", "unfolding Rmi_g.simps"], ["proof (prove)\nusing this:\n  pointermap_p_valid n (dpm bdd) \\<and>\n  (case pm_pth (dpm bdd) n of\n   (nv, nt, ne) \\<Rightarrow>\n     nv = v \\<and> Rmi_g nt t bdd \\<and> Rmi_g ne e bdd)\n\ngoal (1 subgoal):\n 1. pointermap_p_valid n (dpm s') \\<and>\n    (case pm_pth (dpm s') n of\n     (nv, nt, ne) \\<Rightarrow>\n       nv = v \\<and> Rmi_g nt t s' \\<and> Rmi_g ne e s')", "using pointermap_p_valid_inv[OF _ goal3(4)] mIH"], ["proof (prove)\nusing this:\n  pointermap_p_valid n (dpm bdd) \\<and>\n  (case pm_pth (dpm bdd) n of\n   (nv, nt, ne) \\<Rightarrow>\n     nv = v \\<and> Rmi_g nt t bdd \\<and> Rmi_g ne e bdd)\n  pointermap_p_valid ?p (dpm bdd) \\<Longrightarrow>\n  pointermap_p_valid ?p (dpm s')\n  Rmi_g x1a t bdd \\<Longrightarrow> Rmi_g x1a t s'\n  Rmi_g x2a e bdd \\<Longrightarrow> Rmi_g x2a e s'\n\ngoal (1 subgoal):\n 1. pointermap_p_valid n (dpm s') \\<and>\n    (case pm_pth (dpm s') n of\n     (nv, nt, ne) \\<Rightarrow>\n       nv = v \\<and> Rmi_g nt t s' \\<and> Rmi_g ne e s')", "by(simp split: prod.splits)"], ["proof (state)\nthis:\n  Rmi_g (Suc (Suc n)) (IF v t e) s'\n\ngoal (10 subgoals):\n 1. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g 0 Falseif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Falseif s'\n 2. \\<And>bdd.\n       \\<lbrakk>pointermap_sane (dpm bdd);\n        pointermap_getmk (v, ni1, ni2) (dpm bdd) = (x1, dpm s');\n        Rmi_g (Suc 0) Trueif bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) Trueif s'\n 3. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 4. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Falseif s'\n 5. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc va) Falseif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc va) Falseif s'\n 6. \\<And>va vb vc uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc 0) (IF va vb vc) uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc 0) (IF va vb vc) s'\n 7. \\<And>uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g 0 Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 Trueif s'\n 8. \\<And>va uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g (Suc (Suc va)) Trueif uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc va)) Trueif s'\n 9. \\<And>va vaa vb uw_.\n       \\<lbrakk>pointermap_sane (dpm uw_);\n        pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n        Rmi_g 0 (IF va vaa vb) uw_\\<rbrakk>\n       \\<Longrightarrow> Rmi_g 0 (IF va vaa vb) s'\n 10. \\<And>va vaa vb uw_.\n        \\<lbrakk>pointermap_sane (dpm uw_);\n         pointermap_getmk (v, ni1, ni2) (dpm uw_) = (x1, dpm s');\n         Rmi_g (Suc 0) (IF va vaa vb) uw_\\<rbrakk>\n        \\<Longrightarrow> Rmi_g (Suc 0) (IF va vaa vb) s'", "qed simp_all"], ["", "lemma ifmi_les:\n    assumes \"bdd_sane s\"\n    assumes \"ifmi v ni1 ni2 s = (ni, s')\"\n    shows \"mi_pre.les s s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mi_pre.les s s'", "using assms"], ["proof (prove)\nusing this:\n  bdd_sane s\n  ifmi v ni1 ni2 s = (ni, s')\n\ngoal (1 subgoal):\n 1. mi_pre.les s s'", "by(clarsimp simp: bdd_sane_def comp_def apfst_def map_prod_def mi_pre.les_def Rmi_def ifmi_les_hlp split: if_splits prod.splits)"], ["", "lemma ifmi_notouch_dcl: \"ifmi v ni1 ni2 s = (ni, s') \\<Longrightarrow> dcl s' = dcl s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ifmi v ni1 ni2 s = (ni, s') \\<Longrightarrow> dcl s' = dcl s", "by(clarsimp split: if_splits prod.splits)"], ["", "lemma ifmi_saneI: \"bdd_sane s \\<Longrightarrow> ifmi v ni1 ni2 s = (ni, s') \\<Longrightarrow> bdd_sane s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdd_sane s; ifmi v ni1 ni2 s = (ni, s')\\<rbrakk>\n    \\<Longrightarrow> bdd_sane s'", "apply(subst bdd_sane_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdd_sane s; ifmi v ni1 ni2 s = (ni, s')\\<rbrakk>\n    \\<Longrightarrow> pointermap_sane (dpm s') \\<and>\n                      mi_pre.map_invar_impl (dcl s') s'", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>bdd_sane s; ifmi v ni1 ni2 s = (ni, s')\\<rbrakk>\n    \\<Longrightarrow> pointermap_sane (dpm s')\n 2. \\<lbrakk>bdd_sane s; ifmi v ni1 ni2 s = (ni, s')\\<rbrakk>\n    \\<Longrightarrow> mi_pre.map_invar_impl (dcl s') s'", "apply(clarsimp simp: comp_def apfst_def map_prod_def bdd_sane_def split: if_splits option.splits split: prod.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>ni1 \\<noteq> ni2; pointermap_sane (dpm s);\n        mi_pre.map_invar_impl (dcl s) s;\n        pointermap_getmk (v, ni1, ni2) (dpm s) = (x1, x2);\n        ni = Suc (Suc x1); s' = dpm_update (const x2) s\\<rbrakk>\n       \\<Longrightarrow> pointermap_sane x2\n 2. \\<lbrakk>bdd_sane s; ifmi v ni1 ni2 s = (ni, s')\\<rbrakk>\n    \\<Longrightarrow> mi_pre.map_invar_impl (dcl s') s'", "apply(rule conjunct1[OF pointermap_sane_getmkD, of \"dpm s\" \"(v, ni1, ni2)\" _])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>ni1 \\<noteq> ni2; pointermap_sane (dpm s);\n        mi_pre.map_invar_impl (dcl s) s;\n        pointermap_getmk (v, ni1, ni2) (dpm s) = (x1, x2);\n        ni = Suc (Suc x1); s' = dpm_update (const x2) s\\<rbrakk>\n       \\<Longrightarrow> pointermap_sane (dpm s)\n 2. \\<And>x1 x2.\n       \\<lbrakk>ni1 \\<noteq> ni2; pointermap_sane (dpm s);\n        mi_pre.map_invar_impl (dcl s) s;\n        pointermap_getmk (v, ni1, ni2) (dpm s) = (x1, x2);\n        ni = Suc (Suc x1); s' = dpm_update (const x2) s\\<rbrakk>\n       \\<Longrightarrow> pointermap_getmk (v, ni1, ni2) (dpm s) =\n                         (?p36 x1 x2, x2)\n 3. \\<lbrakk>bdd_sane s; ifmi v ni1 ni2 s = (ni, s')\\<rbrakk>\n    \\<Longrightarrow> mi_pre.map_invar_impl (dcl s') s'", "apply(simp_all)[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdd_sane s; ifmi v ni1 ni2 s = (ni, s')\\<rbrakk>\n    \\<Longrightarrow> mi_pre.map_invar_impl (dcl s') s'", "apply(frule (1) ifmi_les)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdd_sane s; ifmi v ni1 ni2 s = (ni, s');\n     mi_pre.les s s'\\<rbrakk>\n    \\<Longrightarrow> mi_pre.map_invar_impl (dcl s') s'", "apply(unfold bdd_sane_def, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifmi v ni1 ni2 s = (ni, s'); mi_pre.les s s';\n     pointermap_sane (dpm s); mi_pre.map_invar_impl (dcl s) s\\<rbrakk>\n    \\<Longrightarrow> mi_pre.map_invar_impl (dcl s') s'", "apply(rule mi_pre.map_invar_impl_les[rotated])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ifmi v ni1 ni2 s = (ni, s'); mi_pre.les s s';\n     pointermap_sane (dpm s); mi_pre.map_invar_impl (dcl s) s\\<rbrakk>\n    \\<Longrightarrow> mi_pre.les ?s46 s'\n 2. \\<lbrakk>ifmi v ni1 ni2 s = (ni, s'); mi_pre.les s s';\n     pointermap_sane (dpm s); mi_pre.map_invar_impl (dcl s) s\\<rbrakk>\n    \\<Longrightarrow> mi_pre.map_invar_impl (dcl s') ?s46", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ifmi v ni1 ni2 s = (ni, s'); mi_pre.les s s';\n     pointermap_sane (dpm s); mi_pre.map_invar_impl (dcl s) s\\<rbrakk>\n    \\<Longrightarrow> mi_pre.map_invar_impl (dcl s') s", "apply(drule ifmi_notouch_dcl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mi_pre.les s s'; pointermap_sane (dpm s);\n     mi_pre.map_invar_impl (dcl s) s; dcl s' = dcl s\\<rbrakk>\n    \\<Longrightarrow> mi_pre.map_invar_impl (dcl s') s", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rmigif: \"Rmi_g ni (IF v n1 n2) s \\<Longrightarrow> \\<exists>n. ni = Suc (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rmi_g ni (IF v n1 n2) s \\<Longrightarrow> \\<exists>n. ni = Suc (Suc n)", "apply(cases ni)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Rmi_g ni (IF v n1 n2) s; ni = 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n. ni = Suc (Suc n)\n 2. \\<And>nat.\n       \\<lbrakk>Rmi_g ni (IF v n1 n2) s; ni = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. ni = Suc (Suc n)", "apply(simp split: if_splits prod.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>Rmi_g ni (IF v n1 n2) s; ni = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. ni = Suc (Suc n)", "apply(rename_tac nis)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nis.\n       \\<lbrakk>Rmi_g ni (IF v n1 n2) s; ni = Suc nis\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. ni = Suc (Suc n)", "apply(case_tac nis)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>nis.\n       \\<lbrakk>Rmi_g ni (IF v n1 n2) s; ni = Suc nis; nis = 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. ni = Suc (Suc n)\n 2. \\<And>nis nat.\n       \\<lbrakk>Rmi_g ni (IF v n1 n2) s; ni = Suc nis;\n        nis = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. ni = Suc (Suc n)", "apply(simp split: if_splits prod.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nis nat.\n       \\<lbrakk>Rmi_g ni (IF v n1 n2) s; ni = Suc nis;\n        nis = Suc nat\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. ni = Suc (Suc n)", "apply(simp split: if_splits prod.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma in_lesI:\n  assumes \"mi_pre.les s s'\"\n    assumes \"(ni1, n1) \\<in> Rmi s\"\n    assumes \"(ni2, n2) \\<in> Rmi s\"\n    shows \"(ni1, n1) \\<in> Rmi s'\" \"(ni2, n2) \\<in> Rmi s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ni1, n1) \\<in> Rmi s' &&& (ni2, n2) \\<in> Rmi s'", "by (meson assms mi_pre.les_def)+"], ["", "lemma ifmi_modification_validI:\n  assumes sane: \"bdd_sane s\"\n  assumes ifm: \"ifmi v ni1 ni2 s = (ni, s')\"\n  assumes vld: \"bdd_node_valid s n\"\n  shows \"bdd_node_valid s' n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_node_valid s' n", "proof(cases \"ni1 = ni2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ni1 = ni2 \\<Longrightarrow> bdd_node_valid s' n\n 2. ni1 \\<noteq> ni2 \\<Longrightarrow> bdd_node_valid s' n", "case True"], ["proof (state)\nthis:\n  ni1 = ni2\n\ngoal (2 subgoals):\n 1. ni1 = ni2 \\<Longrightarrow> bdd_node_valid s' n\n 2. ni1 \\<noteq> ni2 \\<Longrightarrow> bdd_node_valid s' n", "with ifm vld"], ["proof (chain)\npicking this:\n  ifmi v ni1 ni2 s = (ni, s')\n  bdd_node_valid s n\n  ni1 = ni2", "show ?thesis"], ["proof (prove)\nusing this:\n  ifmi v ni1 ni2 s = (ni, s')\n  bdd_node_valid s n\n  ni1 = ni2\n\ngoal (1 subgoal):\n 1. bdd_node_valid s' n", "by simp"], ["proof (state)\nthis:\n  bdd_node_valid s' n\n\ngoal (1 subgoal):\n 1. ni1 \\<noteq> ni2 \\<Longrightarrow> bdd_node_valid s' n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ni1 \\<noteq> ni2 \\<Longrightarrow> bdd_node_valid s' n", "case False"], ["proof (state)\nthis:\n  ni1 \\<noteq> ni2\n\ngoal (1 subgoal):\n 1. ni1 \\<noteq> ni2 \\<Longrightarrow> bdd_node_valid s' n", "{"], ["proof (state)\nthis:\n  ni1 \\<noteq> ni2\n\ngoal (1 subgoal):\n 1. ni1 \\<noteq> ni2 \\<Longrightarrow> bdd_node_valid s' n", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. ni1 \\<noteq> ni2 \\<Longrightarrow> bdd_node_valid s' n", "from ifm"], ["proof (chain)\npicking this:\n  ifmi v ni1 ni2 s = (ni, s')", "have \"(n, b) \\<in> Rmi s \\<Longrightarrow> (n, b) \\<in> Rmi s'\""], ["proof (prove)\nusing this:\n  ifmi v ni1 ni2 s = (ni, s')\n\ngoal (1 subgoal):\n 1. (n, b) \\<in> Rmi s \\<Longrightarrow> (n, b) \\<in> Rmi s'", "by(induction n b _ rule: Rmi_g.induct) (auto dest: pointermap_p_pth_inv pointermap_p_valid_inv simp: apfst_def map_prod_def False Rmi_def split: prod.splits)"], ["proof (state)\nthis:\n  (n, b) \\<in> Rmi s \\<Longrightarrow> (n, b) \\<in> Rmi s'\n\ngoal (1 subgoal):\n 1. ni1 \\<noteq> ni2 \\<Longrightarrow> bdd_node_valid s' n", "}"], ["proof (state)\nthis:\n  (n, ?b2) \\<in> Rmi s \\<Longrightarrow> (n, ?b2) \\<in> Rmi s'\n\ngoal (1 subgoal):\n 1. ni1 \\<noteq> ni2 \\<Longrightarrow> bdd_node_valid s' n", "thus ?thesis"], ["proof (prove)\nusing this:\n  (n, ?b2) \\<in> Rmi s \\<Longrightarrow> (n, ?b2) \\<in> Rmi s'\n\ngoal (1 subgoal):\n 1. bdd_node_valid s' n", "using vld"], ["proof (prove)\nusing this:\n  (n, ?b2) \\<in> Rmi s \\<Longrightarrow> (n, ?b2) \\<in> Rmi s'\n  bdd_node_valid s n\n\ngoal (1 subgoal):\n 1. bdd_node_valid s' n", "unfolding bdd_node_valid_def"], ["proof (prove)\nusing this:\n  (n, ?b2) \\<in> Rmi s \\<Longrightarrow> (n, ?b2) \\<in> Rmi s'\n  n \\<in> Domain (Rmi s)\n\ngoal (1 subgoal):\n 1. n \\<in> Domain (Rmi s')", "by blast"], ["proof (state)\nthis:\n  bdd_node_valid s' n\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"tmi' s \\<equiv> do {oassert (bdd_sane s); Some (tmi s)}\""], ["", "definition \"fmi' s \\<equiv> do {oassert (bdd_sane s); Some (fmi s)}\""], ["", "definition \"ifmi' v ni1 ni2 s \\<equiv> do {oassert (bdd_sane s \\<and> bdd_node_valid s ni1 \\<and> bdd_node_valid s ni2); Some (ifmi v ni1 ni2 s)}\""], ["", "lemma ifmi'_spec: \"\\<lbrakk>bdd_sane s; bdd_node_valid s ni1; bdd_node_valid s ni2\\<rbrakk> \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s) (\\<lambda>r. r = ifmi v ni1 ni2 s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdd_sane s; bdd_node_valid s ni1; bdd_node_valid s ni2\\<rbrakk>\n    \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                       (\\<lambda>r. r = ifmi v ni1 ni2 s)", "unfolding ifmi'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdd_sane s; bdd_node_valid s ni1; bdd_node_valid s ni2\\<rbrakk>\n    \\<Longrightarrow> ospec\n                       (oassert\n                         (bdd_sane s \\<and>\n                          bdd_node_valid s ni1 \\<and>\n                          bdd_node_valid s ni2) \\<bind>\n                        (\\<lambda>_. Some (ifmi v ni1 ni2 s)))\n                       (\\<lambda>r. r = ifmi v ni1 ni2 s)", "by(simp split: Option.bind_splits)"], ["", "lemma ifmi'_ifmi: \"\\<lbrakk>bdd_sane s; bdd_node_valid s ni1; bdd_node_valid s ni2\\<rbrakk> \\<Longrightarrow> ifmi' v ni1 ni2 s = Some (ifmi v ni1 ni2 s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdd_sane s; bdd_node_valid s ni1; bdd_node_valid s ni2\\<rbrakk>\n    \\<Longrightarrow> ifmi' v ni1 ni2 s = Some (ifmi v ni1 ni2 s)", "unfolding ifmi'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdd_sane s; bdd_node_valid s ni1; bdd_node_valid s ni2\\<rbrakk>\n    \\<Longrightarrow> oassert\n                       (bdd_sane s \\<and>\n                        bdd_node_valid s ni1 \\<and>\n                        bdd_node_valid s ni2) \\<bind>\n                      (\\<lambda>_. Some (ifmi v ni1 ni2 s)) =\n                      Some (ifmi v ni1 ni2 s)", "by(simp split: Option.bind_splits)"], ["", "definition \"destrmi' ni s \\<equiv> do {oassert (bdd_sane s \\<and> bdd_node_valid s ni); Some (destrmi ni s)}\""], ["", "lemma destrmi_someD: \"destrmi' e bdd = Some x \\<Longrightarrow> bdd_sane bdd \\<and> bdd_node_valid bdd e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. destrmi' e bdd = Some x \\<Longrightarrow>\n    bdd_sane bdd \\<and> bdd_node_valid bdd e", "by(simp add: destrmi'_def split: Option.bind_splits)"], ["", "lemma Rmi_sv: \n  assumes \"bdd_sane s\" \"(ni,n) \\<in> Rmi s\" \"(ni',n') \\<in> Rmi s\"  \n  shows \"ni=ni' \\<Longrightarrow> n=n'\"\n  and \"ni\\<noteq>ni' \\<Longrightarrow> n\\<noteq>n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ni = ni' \\<Longrightarrow> n = n') &&&\n    (ni \\<noteq> ni' \\<Longrightarrow> n \\<noteq> n')", "using assms"], ["proof (prove)\nusing this:\n  bdd_sane s\n  (ni, n) \\<in> Rmi s\n  (ni', n') \\<in> Rmi s\n\ngoal (1 subgoal):\n 1. (ni = ni' \\<Longrightarrow> n = n') &&&\n    (ni \\<noteq> ni' \\<Longrightarrow> n \\<noteq> n')", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>bdd_sane s; (ni', n) \\<in> Rmi s; (ni', n') \\<in> Rmi s;\n     ni = ni'\\<rbrakk>\n    \\<Longrightarrow> n = n'\n 2. \\<lbrakk>ni \\<noteq> ni'; bdd_sane s; (ni, n') \\<in> Rmi s;\n     (ni', n') \\<in> Rmi s; n = n'\\<rbrakk>\n    \\<Longrightarrow> False", "apply (simp_all add: Rmi_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>bdd_sane s; Rmi_g ni' n s; Rmi_g ni' n' s; ni = ni'\\<rbrakk>\n    \\<Longrightarrow> n = n'\n 2. \\<lbrakk>ni \\<noteq> ni'; bdd_sane s; Rmi_g ni n' s; Rmi_g ni' n' s;\n     n = n'\\<rbrakk>\n    \\<Longrightarrow> False", "using rmigeq"], ["proof (prove)\nusing this:\n  \\<lbrakk>Rmi_g ?ni1.0 ?n1.0 ?s; Rmi_g ?ni2.0 ?n2.0 ?s;\n   ?ni1.0 = ?ni2.0\\<rbrakk>\n  \\<Longrightarrow> ?n1.0 = ?n2.0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>bdd_sane s; Rmi_g ni' n s; Rmi_g ni' n' s; ni = ni'\\<rbrakk>\n    \\<Longrightarrow> n = n'\n 2. \\<lbrakk>ni \\<noteq> ni'; bdd_sane s; Rmi_g ni n' s; Rmi_g ni' n' s;\n     n = n'\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ni \\<noteq> ni'; bdd_sane s; Rmi_g ni n' s; Rmi_g ni' n' s;\n     n = n'\\<rbrakk>\n    \\<Longrightarrow> False", "apply (drule (3) rmigneq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ni \\<noteq> ni'; Rmi_g ni n' s; Rmi_g ni' n' s; n = n';\n     n' \\<noteq> n'\\<rbrakk>\n    \\<Longrightarrow> False", "by clarify"], ["", "lemma True_rep[simp]: \"bdd_sane s \\<Longrightarrow> (ni,Trueif)\\<in>Rmi s \\<longleftrightarrow> ni=Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_sane s \\<Longrightarrow> ((ni, Trueif) \\<in> Rmi s) = (ni = Suc 0)", "using Rmi_def Rmi_g.simps(2) Rmi_sv(2)"], ["proof (prove)\nusing this:\n  Rmi ?s \\<equiv> {(a, b) |a b. Rmi_g a b ?s}\n  Rmi_g (Suc 0) Trueif ?bdd = True\n  \\<lbrakk>bdd_sane ?s; (?ni, ?n) \\<in> Rmi ?s; (?ni', ?n') \\<in> Rmi ?s;\n   ?ni \\<noteq> ?ni'\\<rbrakk>\n  \\<Longrightarrow> ?n \\<noteq> ?n'\n\ngoal (1 subgoal):\n 1. bdd_sane s \\<Longrightarrow> ((ni, Trueif) \\<in> Rmi s) = (ni = Suc 0)", "by blast"], ["", "lemma False_rep[simp]: \"bdd_sane s \\<Longrightarrow> (ni,Falseif)\\<in>Rmi s \\<longleftrightarrow> ni=0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_sane s \\<Longrightarrow> ((ni, Falseif) \\<in> Rmi s) = (ni = 0)", "using Rmi_def Rmi_g.simps(1) Rmi_sv(2)"], ["proof (prove)\nusing this:\n  Rmi ?s \\<equiv> {(a, b) |a b. Rmi_g a b ?s}\n  Rmi_g 0 Falseif ?bdd = True\n  \\<lbrakk>bdd_sane ?s; (?ni, ?n) \\<in> Rmi ?s; (?ni', ?n') \\<in> Rmi ?s;\n   ?ni \\<noteq> ?ni'\\<rbrakk>\n  \\<Longrightarrow> ?n \\<noteq> ?n'\n\ngoal (1 subgoal):\n 1. bdd_sane s \\<Longrightarrow> ((ni, Falseif) \\<in> Rmi s) = (ni = 0)", "by blast"], ["", "definition \"updS s x r = dcl_update (\\<lambda>m. m(x \\<mapsto> r)) s\""], ["", "thm Rmi_g.induct"], ["", "lemma updS_dpm: \"dpm (updS s x r) = dpm s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dpm (updS s x r) = dpm s", "unfolding updS_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dpm (dcl_update (\\<lambda>m. m(x \\<mapsto> r)) s) = dpm s", "by simp"], ["", "lemma updS_Rmi_g: \"Rmi_g n i (updS s x r) = Rmi_g n i s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rmi_g n i (updS s x r) = Rmi_g n i s", "apply(induction n i s rule: Rmi_g.induct)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>bdd. Rmi_g 0 Falseif (updS bdd x r) = Rmi_g 0 Falseif bdd\n 2. \\<And>bdd.\n       Rmi_g (Suc 0) Trueif (updS bdd x r) = Rmi_g (Suc 0) Trueif bdd\n 3. \\<And>n v t e bdd.\n       \\<lbrakk>\\<And>xa y xaa ya.\n                   \\<lbrakk>(xa, y) = pm_pth (dpm bdd) n;\n                    (xaa, ya) = y\\<rbrakk>\n                   \\<Longrightarrow> Rmi_g xaa t (updS bdd x r) =\n                                     Rmi_g xaa t bdd;\n        \\<And>xa y xaa ya.\n           \\<lbrakk>(xa, y) = pm_pth (dpm bdd) n; (xaa, ya) = y\\<rbrakk>\n           \\<Longrightarrow> Rmi_g ya e (updS bdd x r) =\n                             Rmi_g ya e bdd\\<rbrakk>\n       \\<Longrightarrow> Rmi_g (Suc (Suc n)) (IF v t e) (updS bdd x r) =\n                         Rmi_g (Suc (Suc n)) (IF v t e) bdd\n 4. \\<And>va uw_.\n       Rmi_g (Suc (Suc va)) Trueif (updS uw_ x r) =\n       Rmi_g (Suc (Suc va)) Trueif uw_\n 5. \\<And>va uw_.\n       Rmi_g (Suc (Suc va)) Falseif (updS uw_ x r) =\n       Rmi_g (Suc (Suc va)) Falseif uw_\n 6. \\<And>v uw_.\n       Rmi_g (Suc v) Falseif (updS uw_ x r) = Rmi_g (Suc v) Falseif uw_\n 7. \\<And>va vb vc uw_.\n       Rmi_g (Suc 0) (IF va vb vc) (updS uw_ x r) =\n       Rmi_g (Suc 0) (IF va vb vc) uw_\n 8. \\<And>uw_. Rmi_g 0 Trueif (updS uw_ x r) = Rmi_g 0 Trueif uw_\n 9. \\<And>va uw_.\n       Rmi_g (Suc (Suc va)) Trueif (updS uw_ x r) =\n       Rmi_g (Suc (Suc va)) Trueif uw_\n 10. \\<And>v va vb uw_.\n        Rmi_g 0 (IF v va vb) (updS uw_ x r) = Rmi_g 0 (IF v va vb) uw_\nA total of 11 subgoals...", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n v t e bdd.\n       \\<lbrakk>\\<And>xa y xaa ya.\n                   \\<lbrakk>(xa, y) = pm_pth (dpm bdd) n;\n                    (xaa, ya) = y\\<rbrakk>\n                   \\<Longrightarrow> Rmi_g xaa t (updS bdd x r) =\n                                     Rmi_g xaa t bdd;\n        \\<And>xa y xaa ya.\n           \\<lbrakk>(xa, y) = pm_pth (dpm bdd) n; (xaa, ya) = y\\<rbrakk>\n           \\<Longrightarrow> Rmi_g ya e (updS bdd x r) =\n                             Rmi_g ya e bdd\\<rbrakk>\n       \\<Longrightarrow> (pointermap_p_valid n (dpm (updS bdd x r)) \\<and>\n                          (case pm_pth (dpm (updS bdd x r)) n of\n                           (nv, ab) \\<Rightarrow>\n                             nv = v \\<and>\n                             (case ab of\n                              (nt, ne) \\<Rightarrow>\n                                Rmi_g nt t (updS bdd x r) \\<and>\n                                Rmi_g ne e (updS bdd x r)))) =\n                         (pointermap_p_valid n (dpm bdd) \\<and>\n                          (case pm_pth (dpm bdd) n of\n                           (nv, ab) \\<Rightarrow>\n                             nv = v \\<and>\n                             (case ab of\n                              (nt, ne) \\<Rightarrow>\n                                Rmi_g nt t bdd \\<and> Rmi_g ne e bdd)))", "unfolding updS_dpm"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n v t e bdd.\n       \\<lbrakk>\\<And>xa y xaa ya.\n                   \\<lbrakk>(xa, y) = pm_pth (dpm bdd) n;\n                    (xaa, ya) = y\\<rbrakk>\n                   \\<Longrightarrow> Rmi_g xaa t (updS bdd x r) =\n                                     Rmi_g xaa t bdd;\n        \\<And>xa y xaa ya.\n           \\<lbrakk>(xa, y) = pm_pth (dpm bdd) n; (xaa, ya) = y\\<rbrakk>\n           \\<Longrightarrow> Rmi_g ya e (updS bdd x r) =\n                             Rmi_g ya e bdd\\<rbrakk>\n       \\<Longrightarrow> (pointermap_p_valid n (dpm bdd) \\<and>\n                          (case pm_pth (dpm bdd) n of\n                           (nv, ab) \\<Rightarrow>\n                             nv = v \\<and>\n                             (case ab of\n                              (nt, ne) \\<Rightarrow>\n                                Rmi_g nt t (updS bdd x r) \\<and>\n                                Rmi_g ne e (updS bdd x r)))) =\n                         (pointermap_p_valid n (dpm bdd) \\<and>\n                          (case pm_pth (dpm bdd) n of\n                           (nv, ab) \\<Rightarrow>\n                             nv = v \\<and>\n                             (case ab of\n                              (nt, ne) \\<Rightarrow>\n                                Rmi_g nt t bdd \\<and> Rmi_g ne e bdd)))", "by auto"], ["", "lemma updS_Rmi: \"Rmi (updS s x r) = Rmi s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rmi (updS s x r) = Rmi s", "unfolding Rmi_def updS_Rmi_g"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(a, b) |a b. Rmi_g a b s} = {(a, b) |a b. Rmi_g a b s}", "by blast"], ["", "interpretation mi: bdd_impl_cmp bdd_sane Rmi tmi' fmi' ifmi' destrmi' dcl updS \"(=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_impl_cmp bdd_sane Rmi tmi' fmi' ifmi' destrmi' dcl updS (=)", "proof  -"], ["proof (state)\ngoal (1 subgoal):\n 1. bdd_impl_cmp bdd_sane Rmi tmi' fmi' ifmi' destrmi' dcl updS (=)", "note s = mi_pre.les_def[simp] Rmi_def"], ["proof (state)\nthis:\n  mi_pre.les ?s ?s' \\<equiv>\n  \\<forall>ni n.\n     (ni, n) \\<in> Rmi ?s \\<longrightarrow> (ni, n) \\<in> Rmi ?s'\n  Rmi ?s \\<equiv> {(a, b) |a b. Rmi_g a b ?s}\n\ngoal (1 subgoal):\n 1. bdd_impl_cmp bdd_sane Rmi tmi' fmi' ifmi' destrmi' dcl updS (=)", "note [simp] = tmi'_def fmi'_def ifmi'_def destrmi'_def apfst_def map_prod_def"], ["proof (state)\nthis:\n  tmi' ?s \\<equiv> oassert (bdd_sane ?s) \\<bind> (\\<lambda>_. Some (tmi ?s))\n  fmi' ?s \\<equiv> oassert (bdd_sane ?s) \\<bind> (\\<lambda>_. Some (fmi ?s))\n  ifmi' ?v ?ni1.0 ?ni2.0 ?s \\<equiv>\n  oassert\n   (bdd_sane ?s \\<and>\n    bdd_node_valid ?s ?ni1.0 \\<and> bdd_node_valid ?s ?ni2.0) \\<bind>\n  (\\<lambda>_. Some (ifmi ?v ?ni1.0 ?ni2.0 ?s))\n  destrmi' ?ni ?s \\<equiv>\n  oassert (bdd_sane ?s \\<and> bdd_node_valid ?s ?ni) \\<bind>\n  (\\<lambda>_. Some (destrmi ?ni ?s))\n  apfst ?f = map_prod ?f id\n  map_prod ?f ?g = (\\<lambda>(x, y). (?f x, ?g y))\n\ngoal (1 subgoal):\n 1. bdd_impl_cmp bdd_sane Rmi tmi' fmi' ifmi' destrmi' dcl updS (=)", "show \"bdd_impl_cmp bdd_sane Rmi tmi' fmi' ifmi' destrmi' dcl updS (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_impl_cmp bdd_sane Rmi tmi' fmi' ifmi' destrmi' dcl updS (=)", "proof(unfold_locales, goal_cases)"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>s.\n       bdd_sane s \\<Longrightarrow>\n       ospec (tmi' s)\n        (\\<lambda>(ni, s').\n            (ni, Trueif) \\<in> Rmi s' \\<and>\n            bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s.\n       bdd_sane s \\<Longrightarrow>\n       ospec (fmi' s)\n        (\\<lambda>(ni, s').\n            (ni, Falseif) \\<in> Rmi s' \\<and>\n            bdd_sane s' \\<and> mi_pre.les s s')\n 3. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 4. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 5. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 6. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 7. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 8. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 9. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 10. \\<And>s ii it ti tt ei et ri s'.\n        \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n         (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n         updS s (ii, ti, ei) ri = s'\\<rbrakk>\n        \\<Longrightarrow> bdd_sane s'\nA total of 11 subgoals...", "case 1"], ["proof (state)\nthis:\n  bdd_sane s_\n\ngoal (11 subgoals):\n 1. \\<And>s.\n       bdd_sane s \\<Longrightarrow>\n       ospec (tmi' s)\n        (\\<lambda>(ni, s').\n            (ni, Trueif) \\<in> Rmi s' \\<and>\n            bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s.\n       bdd_sane s \\<Longrightarrow>\n       ospec (fmi' s)\n        (\\<lambda>(ni, s').\n            (ni, Falseif) \\<in> Rmi s' \\<and>\n            bdd_sane s' \\<and> mi_pre.les s s')\n 3. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 4. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 5. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 6. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 7. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 8. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 9. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 10. \\<And>s ii it ti tt ei et ri s'.\n        \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n         (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n         updS s (ii, ti, ei) ri = s'\\<rbrakk>\n        \\<Longrightarrow> bdd_sane s'\nA total of 11 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane s_\n\ngoal (1 subgoal):\n 1. ospec (tmi' s_)\n     (\\<lambda>(ni, s').\n         (ni, Trueif) \\<in> Rmi s' \\<and>\n         bdd_sane s' \\<and> mi_pre.les s_ s')", "by(clarsimp split: if_splits simp: Rmi_def)"], ["proof (state)\nthis:\n  ospec (tmi' s_)\n   (\\<lambda>(ni, s').\n       (ni, Trueif) \\<in> Rmi s' \\<and> bdd_sane s' \\<and> mi_pre.les s_ s')\n\ngoal (10 subgoals):\n 1. \\<And>s.\n       bdd_sane s \\<Longrightarrow>\n       ospec (fmi' s)\n        (\\<lambda>(ni, s').\n            (ni, Falseif) \\<in> Rmi s' \\<and>\n            bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 4. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 5. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 6. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 7. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 8. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 9. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 10. \\<And>s ii ti ei ri.\n        bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>s.\n       bdd_sane s \\<Longrightarrow>\n       ospec (fmi' s)\n        (\\<lambda>(ni, s').\n            (ni, Falseif) \\<in> Rmi s' \\<and>\n            bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 4. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 5. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 6. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 7. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 8. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 9. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 10. \\<And>s ii ti ei ri.\n        bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "case 2"], ["proof (state)\nthis:\n  bdd_sane s_\n\ngoal (10 subgoals):\n 1. \\<And>s.\n       bdd_sane s \\<Longrightarrow>\n       ospec (fmi' s)\n        (\\<lambda>(ni, s').\n            (ni, Falseif) \\<in> Rmi s' \\<and>\n            bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 4. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 5. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 6. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 7. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 8. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 9. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 10. \\<And>s ii ti ei ri.\n        bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane s_\n\ngoal (1 subgoal):\n 1. ospec (fmi' s_)\n     (\\<lambda>(ni, s').\n         (ni, Falseif) \\<in> Rmi s' \\<and>\n         bdd_sane s' \\<and> mi_pre.les s_ s')", "by(clarsimp split: if_splits simp: Rmi_def)"], ["proof (state)\nthis:\n  ospec (fmi' s_)\n   (\\<lambda>(ni, s').\n       (ni, Falseif) \\<in> Rmi s' \\<and>\n       bdd_sane s' \\<and> mi_pre.les s_ s')\n\ngoal (9 subgoals):\n 1. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 4. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 5. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 6. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 7. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 8. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 9. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 4. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 5. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 6. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 7. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 8. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 9. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "case (3 s ni1 n1 ni2 n2 v)"], ["proof (state)\nthis:\n  bdd_sane s\n  (ni1, n1) \\<in> Rmi s\n  (ni2, n2) \\<in> Rmi s\n\ngoal (9 subgoals):\n 1. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 4. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 5. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 6. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 7. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 8. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 9. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "note goal3 = 3"], ["proof (state)\nthis:\n  bdd_sane s\n  (ni1, n1) \\<in> Rmi s\n  (ni2, n2) \\<in> Rmi s\n\ngoal (9 subgoals):\n 1. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 4. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 5. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 6. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 7. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 8. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 9. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "note [simp] = Rmi_sv[OF this]"], ["proof (state)\nthis:\n  ni1 = ni2 \\<Longrightarrow> n1 = n2\n  ni1 \\<noteq> ni2 \\<Longrightarrow> n1 \\<noteq> n2\n\ngoal (9 subgoals):\n 1. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 4. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 5. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 6. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 7. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 8. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 9. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "have e: \"n1 = n2 \\<Longrightarrow> ni1 = ni2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 = n2 \\<Longrightarrow> ni1 = ni2", "by(rule ccontr) simp"], ["proof (state)\nthis:\n  n1 = n2 \\<Longrightarrow> ni1 = ni2\n\ngoal (9 subgoals):\n 1. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 4. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 5. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 6. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 7. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 8. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 9. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "obtain ni s' where[simp]: \"(ifmi' v ni1 ni2 s) = Some (ni, s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ni s'.\n        ifmi' v ni1 ni2 s = Some (ni, s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding ifmi'_def bdd_node_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ni s'.\n        oassert\n         (bdd_sane s \\<and>\n          ni1 \\<in> Domain (Rmi s) \\<and> ni2 \\<in> Domain (Rmi s)) \\<bind>\n        (\\<lambda>_. Some (ifmi v ni1 ni2 s)) =\n        Some (ni, s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using goal3"], ["proof (prove)\nusing this:\n  bdd_sane s\n  (ni1, n1) \\<in> Rmi s\n  (ni2, n2) \\<in> Rmi s\n\ngoal (1 subgoal):\n 1. (\\<And>ni s'.\n        oassert\n         (bdd_sane s \\<and>\n          ni1 \\<in> Domain (Rmi s) \\<and> ni2 \\<in> Domain (Rmi s)) \\<bind>\n        (\\<lambda>_. Some (ifmi v ni1 ni2 s)) =\n        Some (ni, s') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(simp add: DomainI del: ifmi.simps) fastforce"], ["proof (state)\nthis:\n  ifmi' v ni1 ni2 s = Some (ni, s')\n\ngoal (9 subgoals):\n 1. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 4. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 5. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 6. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 7. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 8. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 9. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "hence ifm: \"ifmi v ni1 ni2 s = (ni, s')\""], ["proof (prove)\nusing this:\n  ifmi' v ni1 ni2 s = Some (ni, s')\n\ngoal (1 subgoal):\n 1. ifmi v ni1 ni2 s = (ni, s')", "using goal3"], ["proof (prove)\nusing this:\n  ifmi' v ni1 ni2 s = Some (ni, s')\n  bdd_sane s\n  (ni1, n1) \\<in> Rmi s\n  (ni2, n2) \\<in> Rmi s\n\ngoal (1 subgoal):\n 1. ifmi v ni1 ni2 s = (ni, s')", "unfolding ifmi'_def bdd_node_valid_def"], ["proof (prove)\nusing this:\n  oassert\n   (bdd_sane s \\<and>\n    ni1 \\<in> Domain (Rmi s) \\<and> ni2 \\<in> Domain (Rmi s)) \\<bind>\n  (\\<lambda>_. Some (ifmi v ni1 ni2 s)) =\n  Some (ni, s')\n  bdd_sane s\n  (ni1, n1) \\<in> Rmi s\n  (ni2, n2) \\<in> Rmi s\n\ngoal (1 subgoal):\n 1. ifmi v ni1 ni2 s = (ni, s')", "by(simp add: DomainI)"], ["proof (state)\nthis:\n  ifmi v ni1 ni2 s = (ni, s')\n\ngoal (9 subgoals):\n 1. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 4. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 5. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 6. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 7. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 8. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 9. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "have ifmi'_ospec: \"\\<And>P. ospec (ifmi' v ni1 ni2 s) P \\<longleftrightarrow> P (ifmi v ni1 ni2 s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P. ospec (ifmi' v ni1 ni2 s) P = P (ifmi v ni1 ni2 s)", "by(simp del: ifmi'_def ifmi.simps add: ifm)"], ["proof (state)\nthis:\n  ospec (ifmi' v ni1 ni2 s) ?P = ?P (ifmi v ni1 ni2 s)\n\ngoal (9 subgoals):\n 1. \\<And>s ni1 n1 ni2 n2 v.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s;\n        (ni2, n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (ifmi' v ni1 ni2 s)\n                          (\\<lambda>(ni, s').\n                              (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n                              bdd_sane s' \\<and> mi_pre.les s s')\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 3. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 4. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 5. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 6. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 7. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 8. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 9. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "from goal3"], ["proof (chain)\npicking this:\n  bdd_sane s\n  (ni1, n1) \\<in> Rmi s\n  (ni2, n2) \\<in> Rmi s", "show ?case"], ["proof (prove)\nusing this:\n  bdd_sane s\n  (ni1, n1) \\<in> Rmi s\n  (ni2, n2) \\<in> Rmi s\n\ngoal (1 subgoal):\n 1. ospec (ifmi' v ni1 ni2 s)\n     (\\<lambda>(ni, s').\n         (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n         bdd_sane s' \\<and> mi_pre.les s s')", "unfolding ifmi'_ospec"], ["proof (prove)\nusing this:\n  bdd_sane s\n  (ni1, n1) \\<in> Rmi s\n  (ni2, n2) \\<in> Rmi s\n\ngoal (1 subgoal):\n 1. case ifmi v ni1 ni2 s of\n    (ni, s') \\<Rightarrow>\n      (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n      bdd_sane s' \\<and> mi_pre.les s s'", "apply(split prod.splits; clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        ifmi v ni1 ni2 s = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> (x1, IFC v n1 n2) \\<in> Rmi x2 \\<and>\n                         bdd_sane x2 \\<and> mi_pre.les s x2", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        ifmi v ni1 ni2 s = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> (x1, IFC v n1 n2) \\<in> Rmi x2\n 2. \\<And>x1 x2.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        ifmi v ni1 ni2 s = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> bdd_sane x2 \\<and> mi_pre.les s x2", "(* for the first thing, we don't have a helper lemma *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        ifmi v ni1 ni2 s = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> (x1, IFC v n1 n2) \\<in> Rmi x2\n 2. \\<And>x1 x2.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        ifmi v ni1 ni2 s = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> bdd_sane x2 \\<and> mi_pre.les s x2", "apply(clarsimp simp: Rmi_def IFC_def bdd_sane_def ifmi_les_hlp pointermap_sane_getmkD pointermap_update_pthI split: if_splits prod.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        ifmi v ni1 ni2 s = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> bdd_sane x2 \\<and> mi_pre.les s x2", "(* for the rest, we do *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        ifmi v ni1 ni2 s = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> bdd_sane x2 \\<and> mi_pre.les s x2", "using ifmi_les[OF \\<open>bdd_sane s\\<close> ifm] ifmi_saneI[OF \\<open>bdd_sane s\\<close> ifm] ifm"], ["proof (prove)\nusing this:\n  mi_pre.les s s'\n  bdd_sane s'\n  ifmi v ni1 ni2 s = (ni, s')\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        bdd_sane s; (ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s;\n        ifmi v ni1 ni2 s = (x1, x2)\\<rbrakk>\n       \\<Longrightarrow> bdd_sane x2 \\<and> mi_pre.les s x2", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ospec (ifmi' v ni1 ni2 s)\n   (\\<lambda>(ni, s').\n       (ni, IFC v n1 n2) \\<in> Rmi s' \\<and>\n       bdd_sane s' \\<and> mi_pre.les s s')\n\ngoal (8 subgoals):\n 1. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 3. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 4. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 5. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 6. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 7. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 8. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 3. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 4. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 5. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 6. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 7. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 8. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "case 4"], ["proof (state)\nthis:\n  bdd_sane s_\n  (ni_, Trueif) \\<in> Rmi s_\n\ngoal (8 subgoals):\n 1. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Trueif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = TD)\n 2. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 3. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 4. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 5. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 6. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 7. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 8. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane s_\n  (ni_, Trueif) \\<in> Rmi s_\n\ngoal (1 subgoal):\n 1. ospec (destrmi' ni_ s_) (\\<lambda>r. r = TD)", "apply (clarsimp split: Option.bind_splits if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ospec (destrmi' ni_ s_) (\\<lambda>r. r = TD)\n\ngoal (7 subgoals):\n 1. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 2. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 3. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 4. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 5. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 6. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 7. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 2. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 3. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 4. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 5. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 6. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 7. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "case 5"], ["proof (state)\nthis:\n  bdd_sane s_\n  (ni_, Falseif) \\<in> Rmi s_\n\ngoal (7 subgoals):\n 1. \\<And>s ni.\n       \\<lbrakk>bdd_sane s; (ni, Falseif) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s) (\\<lambda>r. r = FD)\n 2. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 3. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 4. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 5. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 6. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 7. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane s_\n  (ni_, Falseif) \\<in> Rmi s_\n\ngoal (1 subgoal):\n 1. ospec (destrmi' ni_ s_) (\\<lambda>r. r = FD)", "by(clarsimp split: if_splits)"], ["proof (state)\nthis:\n  ospec (destrmi' ni_ s_) (\\<lambda>r. r = FD)\n\ngoal (6 subgoals):\n 1. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 2. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 3. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 4. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 5. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 6. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 2. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 3. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 4. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 5. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 6. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "case 6"], ["proof (state)\nthis:\n  bdd_sane s_\n  (ni_, IF v_ n1_ n2_) \\<in> Rmi s_\n\ngoal (6 subgoals):\n 1. \\<And>s ni v n1 n2.\n       \\<lbrakk>bdd_sane s; (ni, IF v n1 n2) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ospec (destrmi' ni s)\n                          (\\<lambda>r.\n                              \\<exists>ni1 ni2.\n                                 r = IFD v ni1 ni2 \\<and>\n                                 (ni1, n1) \\<in> Rmi s \\<and>\n                                 (ni2, n2) \\<in> Rmi s)\n 2. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 3. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 4. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 5. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 6. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane s_\n  (ni_, IF v_ n1_ n2_) \\<in> Rmi s_\n\ngoal (1 subgoal):\n 1. ospec (destrmi' ni_ s_)\n     (\\<lambda>r.\n         \\<exists>ni1 ni2.\n            r = IFD v_ ni1 ni2 \\<and>\n            (ni1, n1_) \\<in> Rmi s_ \\<and> (ni2, n2_) \\<in> Rmi s_)", "apply (clarsimp simp add: bdd_node_valid_def split: Option.bind_splits if_splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdd_sane s_; (ni_, IF v_ n1_ n2_) \\<in> Rmi s_\\<rbrakk>\n    \\<Longrightarrow> ni_ \\<in> Domain (Rmi s_) \\<and>\n                      (\\<exists>ni1 ni2.\n                          destrmi ni_ s_ = IFD v_ ni1 ni2 \\<and>\n                          (ni1, n1_) \\<in> Rmi s_ \\<and>\n                          (ni2, n2_) \\<in> Rmi s_)", "apply (auto simp: Rmi_def elim: Rmi_g.elims)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ospec (destrmi' ni_ s_)\n   (\\<lambda>r.\n       \\<exists>ni1 ni2.\n          r = IFD v_ ni1 ni2 \\<and>\n          (ni1, n1_) \\<in> Rmi s_ \\<and> (ni2, n2_) \\<in> Rmi s_)\n\ngoal (5 subgoals):\n 1. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 2. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 3. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 4. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 5. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 2. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 3. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 4. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 5. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "case 7"], ["proof (state)\nthis:\n  bdd_sane s_\n  (ni_, i_) \\<in> Rmi s_\n  (ni'_, i_) \\<in> Rmi s_\n\ngoal (5 subgoals):\n 1. \\<And>s ni i ni'.\n       \\<lbrakk>bdd_sane s; (ni, i) \\<in> Rmi s;\n        (ni', i) \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> ni = ni'\n 2. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 3. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 4. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 5. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane s_\n  (ni_, i_) \\<in> Rmi s_\n  (ni'_, i_) \\<in> Rmi s_\n\ngoal (1 subgoal):\n 1. ni_ = ni'_", "using Rmi_sv"], ["proof (prove)\nusing this:\n  bdd_sane s_\n  (ni_, i_) \\<in> Rmi s_\n  (ni'_, i_) \\<in> Rmi s_\n  \\<lbrakk>bdd_sane ?s; (?ni, ?n) \\<in> Rmi ?s; (?ni', ?n') \\<in> Rmi ?s;\n   ?ni = ?ni'\\<rbrakk>\n  \\<Longrightarrow> ?n = ?n'\n  \\<lbrakk>bdd_sane ?s; (?ni, ?n) \\<in> Rmi ?s; (?ni', ?n') \\<in> Rmi ?s;\n   ?ni \\<noteq> ?ni'\\<rbrakk>\n  \\<Longrightarrow> ?n \\<noteq> ?n'\n\ngoal (1 subgoal):\n 1. ni_ = ni'_", "by blast"], ["proof (state)\nthis:\n  ni_ = ni'_\n\ngoal (4 subgoals):\n 1. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 2. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 3. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 4. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 2. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 3. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 4. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "case 8"], ["proof (state)\nthis:\n  bdd_sane s_\n  ni_ = ni'_\n  (ni_, i_) \\<in> Rmi s_\n  (ni'_, i'_) \\<in> Rmi s_\n\ngoal (4 subgoals):\n 1. \\<And>s ni ni' i i'.\n       \\<lbrakk>bdd_sane s; ni = ni'; (ni, i) \\<in> Rmi s;\n        (ni', i') \\<in> Rmi s\\<rbrakk>\n       \\<Longrightarrow> i = i'\n 2. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 3. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 4. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane s_\n  ni_ = ni'_\n  (ni_, i_) \\<in> Rmi s_\n  (ni'_, i'_) \\<in> Rmi s_\n\ngoal (1 subgoal):\n 1. i_ = i'_", "using Rmi_sv"], ["proof (prove)\nusing this:\n  bdd_sane s_\n  ni_ = ni'_\n  (ni_, i_) \\<in> Rmi s_\n  (ni'_, i'_) \\<in> Rmi s_\n  \\<lbrakk>bdd_sane ?s; (?ni, ?n) \\<in> Rmi ?s; (?ni', ?n') \\<in> Rmi ?s;\n   ?ni = ?ni'\\<rbrakk>\n  \\<Longrightarrow> ?n = ?n'\n  \\<lbrakk>bdd_sane ?s; (?ni, ?n) \\<in> Rmi ?s; (?ni', ?n') \\<in> Rmi ?s;\n   ?ni \\<noteq> ?ni'\\<rbrakk>\n  \\<Longrightarrow> ?n \\<noteq> ?n'\n\ngoal (1 subgoal):\n 1. i_ = i'_", "by blast"], ["proof (state)\nthis:\n  i_ = i'_\n\ngoal (3 subgoals):\n 1. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 2. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 3. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 2. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 3. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "case 9"], ["proof (state)\nthis:\n  bdd_sane s_\n\ngoal (3 subgoals):\n 1. \\<And>s. bdd_sane s \\<Longrightarrow> mi_pre.map_invar_impl (dcl s) s\n 2. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 3. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane s_\n\ngoal (1 subgoal):\n 1. mi_pre.map_invar_impl (dcl s_) s_", "unfolding bdd_sane_def"], ["proof (prove)\nusing this:\n  pointermap_sane (dpm s_) \\<and> mi_pre.map_invar_impl (dcl s_) s_\n\ngoal (1 subgoal):\n 1. mi_pre.map_invar_impl (dcl s_) s_", "by simp"], ["proof (state)\nthis:\n  mi_pre.map_invar_impl (dcl s_) s_\n\ngoal (2 subgoals):\n 1. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 2. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 2. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "case 10"], ["proof (state)\nthis:\n  bdd_sane s_\n  (ii_, it_) \\<in> Rmi s_\n  (ti_, tt_) \\<in> Rmi s_\n  (ei_, et_) \\<in> Rmi s_\n  (ri_, ifex_ite_opt it_ tt_ et_) \\<in> Rmi s_\n  updS s_ (ii_, ti_, ei_) ri_ = s'_\n\ngoal (2 subgoals):\n 1. \\<And>s ii it ti tt ei et ri s'.\n       \\<lbrakk>bdd_sane s; (ii, it) \\<in> Rmi s; (ti, tt) \\<in> Rmi s;\n        (ei, et) \\<in> Rmi s; (ri, ifex_ite_opt it tt et) \\<in> Rmi s;\n        updS s (ii, ti, ei) ri = s'\\<rbrakk>\n       \\<Longrightarrow> bdd_sane s'\n 2. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane s_\n  (ii_, it_) \\<in> Rmi s_\n  (ti_, tt_) \\<in> Rmi s_\n  (ei_, et_) \\<in> Rmi s_\n  (ri_, ifex_ite_opt it_ tt_ et_) \\<in> Rmi s_\n  updS s_ (ii_, ti_, ei_) ri_ = s'_\n\ngoal (1 subgoal):\n 1. bdd_sane s'_", "unfolding bdd_sane_def mi_pre.map_invar_impl_def"], ["proof (prove)\nusing this:\n  pointermap_sane (dpm s_) \\<and>\n  (\\<forall>ii ti ei ri.\n      dcl s_ (ii, ti, ei) = Some ri \\<longrightarrow>\n      (\\<exists>i t e.\n          (ri, ifex_ite_opt i t e) \\<in> Rmi s_ \\<and>\n          (ii, i) \\<in> Rmi s_ \\<and>\n          (ti, t) \\<in> Rmi s_ \\<and> (ei, e) \\<in> Rmi s_))\n  (ii_, it_) \\<in> Rmi s_\n  (ti_, tt_) \\<in> Rmi s_\n  (ei_, et_) \\<in> Rmi s_\n  (ri_, ifex_ite_opt it_ tt_ et_) \\<in> Rmi s_\n  updS s_ (ii_, ti_, ei_) ri_ = s'_\n\ngoal (1 subgoal):\n 1. pointermap_sane (dpm s'_) \\<and>\n    (\\<forall>ii ti ei ri.\n        dcl s'_ (ii, ti, ei) = Some ri \\<longrightarrow>\n        (\\<exists>i t e.\n            (ri, ifex_ite_opt i t e) \\<in> Rmi s'_ \\<and>\n            (ii, i) \\<in> Rmi s'_ \\<and>\n            (ti, t) \\<in> Rmi s'_ \\<and> (ei, e) \\<in> Rmi s'_))", "using updS_Rmi"], ["proof (prove)\nusing this:\n  pointermap_sane (dpm s_) \\<and>\n  (\\<forall>ii ti ei ri.\n      dcl s_ (ii, ti, ei) = Some ri \\<longrightarrow>\n      (\\<exists>i t e.\n          (ri, ifex_ite_opt i t e) \\<in> Rmi s_ \\<and>\n          (ii, i) \\<in> Rmi s_ \\<and>\n          (ti, t) \\<in> Rmi s_ \\<and> (ei, e) \\<in> Rmi s_))\n  (ii_, it_) \\<in> Rmi s_\n  (ti_, tt_) \\<in> Rmi s_\n  (ei_, et_) \\<in> Rmi s_\n  (ri_, ifex_ite_opt it_ tt_ et_) \\<in> Rmi s_\n  updS s_ (ii_, ti_, ei_) ri_ = s'_\n  Rmi (updS ?s ?x ?r) = Rmi ?s\n\ngoal (1 subgoal):\n 1. pointermap_sane (dpm s'_) \\<and>\n    (\\<forall>ii ti ei ri.\n        dcl s'_ (ii, ti, ei) = Some ri \\<longrightarrow>\n        (\\<exists>i t e.\n            (ri, ifex_ite_opt i t e) \\<in> Rmi s'_ \\<and>\n            (ii, i) \\<in> Rmi s'_ \\<and>\n            (ti, t) \\<in> Rmi s'_ \\<and> (ei, e) \\<in> Rmi s'_))", "by(clarsimp simp add: updS_def simp del: ifex_ite_opt.simps) blast"], ["proof (state)\nthis:\n  bdd_sane s'_\n\ngoal (1 subgoal):\n 1. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "case 11"], ["proof (state)\nthis:\n  bdd_sane s_\n\ngoal (1 subgoal):\n 1. \\<And>s ii ti ei ri.\n       bdd_sane s \\<Longrightarrow> Rmi (updS s (ii, ti, ei) ri) = Rmi s", "thus ?case"], ["proof (prove)\nusing this:\n  bdd_sane s_\n\ngoal (1 subgoal):\n 1. Rmi (updS s_ (ii_, ti_, ei_) ri_) = Rmi s_", "using updS_Rmi"], ["proof (prove)\nusing this:\n  bdd_sane s_\n  Rmi (updS ?s ?x ?r) = Rmi ?s\n\ngoal (1 subgoal):\n 1. Rmi (updS s_ (ii_, ti_, ei_) ri_) = Rmi s_", "by auto"], ["proof (state)\nthis:\n  Rmi (updS s_ (ii_, ti_, ei_) ri_) = Rmi s_\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bdd_impl_cmp bdd_sane Rmi tmi' fmi' ifmi' destrmi' dcl updS (=)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma p_valid_RmiI: \"(Suc (Suc na), b) \\<in> Rmi bdd \\<Longrightarrow> pointermap_p_valid na (dpm bdd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc (Suc na), b) \\<in> Rmi bdd \\<Longrightarrow>\n    pointermap_p_valid na (dpm bdd)", "unfolding Rmi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Suc (Suc na), b) \\<in> {(a, b) |a b. Rmi_g a b bdd} \\<Longrightarrow>\n    pointermap_p_valid na (dpm bdd)", "by(cases b) (auto)"], ["", "lemma n_valid_RmiI: \"(na, b) \\<in> Rmi bdd \\<Longrightarrow> bdd_node_valid bdd na\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (na, b) \\<in> Rmi bdd \\<Longrightarrow> bdd_node_valid bdd na", "unfolding bdd_node_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (na, b) \\<in> Rmi bdd \\<Longrightarrow> na \\<in> Domain (Rmi bdd)", "by(intro DomainI, assumption)"], ["", "lemma n_valid_Rmi_alt: \"bdd_node_valid bdd na \\<longleftrightarrow> (\\<exists>b. (na, b) \\<in> Rmi bdd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_node_valid bdd na = (\\<exists>b. (na, b) \\<in> Rmi bdd)", "unfolding bdd_node_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (na \\<in> Domain (Rmi bdd)) = (\\<exists>b. (na, b) \\<in> Rmi bdd)", "by auto"], ["", "lemma ifmi_result_validI:\n  assumes sane: \"bdd_sane s\"\n  assumes vld: \"bdd_node_valid s ni1\" \"bdd_node_valid s ni2\"\n  assumes ifm: \"ifmi v ni1 ni2 s = (ni, s')\"\n  shows \"bdd_node_valid s' ni\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_node_valid s' ni", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bdd_node_valid s' ni", "from vld"], ["proof (chain)\npicking this:\n  bdd_node_valid s ni1\n  bdd_node_valid s ni2", "obtain n1 n2 where \"(ni1, n1) \\<in> Rmi s\" \"(ni2, n2) \\<in> Rmi s\""], ["proof (prove)\nusing this:\n  bdd_node_valid s ni1\n  bdd_node_valid s ni2\n\ngoal (1 subgoal):\n 1. (\\<And>n1 n2.\n        \\<lbrakk>(ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding bdd_node_valid_def"], ["proof (prove)\nusing this:\n  ni1 \\<in> Domain (Rmi s)\n  ni2 \\<in> Domain (Rmi s)\n\ngoal (1 subgoal):\n 1. (\\<And>n1 n2.\n        \\<lbrakk>(ni1, n1) \\<in> Rmi s; (ni2, n2) \\<in> Rmi s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (ni1, n1) \\<in> Rmi s\n  (ni2, n2) \\<in> Rmi s\n\ngoal (1 subgoal):\n 1. bdd_node_valid s' ni", "note mi.IFimpl_rule[OF sane this]"], ["proof (state)\nthis:\n  ospec (ifmi' ?v ni1 ni2 s)\n   (\\<lambda>(ni, s').\n       (ni, IFC ?v n1 n2) \\<in> Rmi s' \\<and>\n       bdd_sane s' \\<and> mi.les s s')\n\ngoal (1 subgoal):\n 1. bdd_node_valid s' ni", "note this[unfolded ifmi'_ifmi[OF sane vld] ospec.simps, of v, unfolded ifm, unfolded prod.simps]"], ["proof (state)\nthis:\n  (ni, IFC v n1 n2) \\<in> Rmi s' \\<and> bdd_sane s' \\<and> mi.les s s'\n\ngoal (1 subgoal):\n 1. bdd_node_valid s' ni", "thus ?thesis"], ["proof (prove)\nusing this:\n  (ni, IFC v n1 n2) \\<in> Rmi s' \\<and> bdd_sane s' \\<and> mi.les s s'\n\ngoal (1 subgoal):\n 1. bdd_node_valid s' ni", "unfolding bdd_node_valid_def"], ["proof (prove)\nusing this:\n  (ni, IFC v n1 n2) \\<in> Rmi s' \\<and> bdd_sane s' \\<and> mi.les s s'\n\ngoal (1 subgoal):\n 1. ni \\<in> Domain (Rmi s')", "by blast"], ["proof (state)\nthis:\n  bdd_node_valid s' ni\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}