{"file_name": "/home/qj213/afp-2021-10-22/thys/HOL-CSP/Bot.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/HOL-CSP", "problem_names": ["lemma is_process_REP_Bot : \n  \"is_process  ({(s,X). front_tickFree s}, {d. front_tickFree d})\"", "lemma Rep_Abs_Bot :\"Rep_process (Abs_process ({(s,X). front_tickFree s},{d. front_tickFree d})) = \n                    ({(s,X). front_tickFree s},{d. front_tickFree d})\"", "lemma F_Bot: \"F Bot = {(s,X). front_tickFree s}\"", "lemma D_Bot: \"D Bot = {d. front_tickFree d}\"", "lemma T_Bot: \"T Bot = {s. front_tickFree s}\"", "lemma Bot_is_UU[simp]: \"Bot = \\<bottom>\"", "lemma F_UU: \"F \\<bottom> = {(s,X). front_tickFree s}\"", "lemma D_UU: \"D \\<bottom> = {d. front_tickFree d}\"", "lemma T_UU: \"T \\<bottom> = {s. front_tickFree s}\""], "translations": [["", "lemma is_process_REP_Bot : \n  \"is_process  ({(s,X). front_tickFree s}, {d. front_tickFree d})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_process ({(s, X). front_tickFree s}, {d. front_tickFree d})", "by(auto simp: tickFree_implies_front_tickFree is_process_def \n              FAILURES_def DIVERGENCES_def\n        elim: Process.front_tickFree_dw_closed \n        elim: Process.front_tickFree_append)"], ["", "lemma Rep_Abs_Bot :\"Rep_process (Abs_process ({(s,X). front_tickFree s},{d. front_tickFree d})) = \n                    ({(s,X). front_tickFree s},{d. front_tickFree d})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_process\n     (Abs_process ({(s, X). front_tickFree s}, {d. front_tickFree d})) =\n    ({(s, X). front_tickFree s}, {d. front_tickFree d})", "by(subst Abs_process_inverse, simp_all only: CollectI Rep_process is_process_REP_Bot)"], ["", "lemma F_Bot: \"F Bot = {(s,X). front_tickFree s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F Bot = {(s, X). front_tickFree s}", "by(simp add: Bot_def FAILURES_def F_def Rep_Abs_Bot)"], ["", "lemma D_Bot: \"D Bot = {d. front_tickFree d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D Bot = {d. front_tickFree d}", "by(simp add: Bot_def DIVERGENCES_def D_def Rep_Abs_Bot)"], ["", "lemma T_Bot: \"T Bot = {s. front_tickFree s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T Bot = {s. front_tickFree s}", "by(simp add: Bot_def TRACES_def T_def FAILURES_def Rep_Abs_Bot)"], ["", "text\\<open> This is the key result: @{term \"\\<bottom>\"} --- which we know to exist \nfrom the process instantiation --- is equal Bot .\n\\<close>"], ["", "lemma Bot_is_UU[simp]: \"Bot = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bot = \\<bottom>", "apply(auto simp: Pcpo.eq_bottom_iff Process.le_approx_def Ra_def \n                 min_elems_Collect_ftF_is_Nil Process.Nil_elem_T \n                 F_Bot D_Bot T_Bot\n           elim: D_imp_front_tickFree)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s x.\n       \\<lbrakk>\\<not> front_tickFree s; (s, x) \\<in> F \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(metis Process.is_processT2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma F_UU: \"F \\<bottom> = {(s,X). front_tickFree s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<bottom> = {(s, X). front_tickFree s}", "using F_Bot"], ["proof (prove)\nusing this:\n  F Bot = {(s, X). front_tickFree s}\n\ngoal (1 subgoal):\n 1. F \\<bottom> = {(s, X). front_tickFree s}", "by auto"], ["", "lemma D_UU: \"D \\<bottom> = {d. front_tickFree d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<bottom> = {d. front_tickFree d}", "using D_Bot"], ["proof (prove)\nusing this:\n  D Bot = {d. front_tickFree d}\n\ngoal (1 subgoal):\n 1. D \\<bottom> = {d. front_tickFree d}", "by auto"], ["", "lemma T_UU: \"T \\<bottom> = {s. front_tickFree s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<bottom> = {s. front_tickFree s}", "using T_Bot"], ["proof (prove)\nusing this:\n  T Bot = {s. front_tickFree s}\n\ngoal (1 subgoal):\n 1. T \\<bottom> = {s. front_tickFree s}", "by auto"], ["", "end"]]}