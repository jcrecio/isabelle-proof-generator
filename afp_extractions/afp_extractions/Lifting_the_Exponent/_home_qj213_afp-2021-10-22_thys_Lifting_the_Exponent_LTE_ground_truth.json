{"file_name": "/home/qj213/afp-2021-10-22/thys/Lifting_the_Exponent/LTE.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Lifting_the_Exponent", "problem_names": ["lemma cong_sum_mono_neutral_right:\n  assumes \"finite T\"\n  assumes \"S \\<subseteq> T\"\n  assumes zeros: \"\\<forall>i \\<in> T - S. [g i = 0] (mod n)\"\n  shows \"[sum g T = sum g S] (mod n)\"", "lemma power_odd_inj:\n  fixes a b :: \"'a::linordered_idom\"\n  assumes \"odd k\" and \"a^k = b^k\"\n  shows \"a = b\"", "lemma power_eq_abs:\n  fixes a b :: \"'a::linordered_idom\"\n  assumes \"a^k = b^k\" and \"k > 0\"\n  shows \"\\<bar>a\\<bar> = \\<bar>b\\<bar>\"", "lemma cong_scale:\n  \"k \\<noteq> 0 \\<Longrightarrow> [a = b] (mod c) \\<longleftrightarrow> [k*a = k*b] (mod k*c)\"", "lemma odd_square_mod_4:\n  fixes x :: int\n  assumes \"odd x\"\n  shows \"[x^2 = 1] (mod 4)\"", "lemma decompose_mod_p:\n  \"[(\\<Sum>i<n. y^(n - Suc i) * x^i) = n*x^(n-1)] (mod p)\"", "lemma multiplicity_diff_pow_coprime:\n  assumes \"coprime p n\"\n  shows \"multiplicity p (x^n - y^n) = multiplicity p (x - y)\"", "lemma multiplicity_diff_self_pow:\n  assumes \"p > 2\" and \"x \\<noteq> y\"\n  shows \"multiplicity p (x^p - y^p) = Suc (multiplicity p (x - y))\"", "theorem multiplicity_diff_pow:\n  assumes \"p > 2\" and \"x \\<noteq> y\" and \"n > 0\"\n  shows \"multiplicity p (x^n - y^n) = multiplicity p (x - y) + multiplicity p n\"", "theorem multiplicity_2_diff_pow_4div:\n  fixes x y :: int\n  assumes \"odd x\"  \"odd y\" and \"4 dvd x - y\" and \"n > 0\"  \"x \\<noteq> y\"\n  shows \"multiplicity 2 (x^n - y^n) = multiplicity 2 (x - y) + multiplicity 2 n\"", "theorem multiplicity_2_diff_even_pow:\n  fixes x y :: int\n  assumes \"odd x\"  \"odd y\" and \"even n\" and \"n > 0\" and \"\\<bar>x\\<bar> \\<noteq> \\<bar>y\\<bar>\"\n  shows \"multiplicity 2 (x^n - y^n) = multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1\""], "translations": [["", "lemma cong_sum_mono_neutral_right:\n  assumes \"finite T\"\n  assumes \"S \\<subseteq> T\"\n  assumes zeros: \"\\<forall>i \\<in> T - S. [g i = 0] (mod n)\"\n  shows \"[sum g T = sum g S] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [sum g T = sum g S] (mod n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [sum g T = sum g S] (mod n)", "have \"[sum g T = (\\<Sum>x\\<in>T. if x \\<in> S then g x else 0)] (mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [sum g T = \\<Sum>x\\<in>T. if x \\<in> S then g x else (0::'b)] (mod n)", "using zeros"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>T - S. [g i = 0::'b] (mod n)\n\ngoal (1 subgoal):\n 1. [sum g T = \\<Sum>x\\<in>T. if x \\<in> S then g x else (0::'b)] (mod n)", "by (auto intro: cong_sum)"], ["proof (state)\nthis:\n  [sum g T = \\<Sum>x\\<in>T. if x \\<in> S then g x else (0::'b)] (mod n)\n\ngoal (1 subgoal):\n 1. [sum g T = sum g S] (mod n)", "also"], ["proof (state)\nthis:\n  [sum g T = \\<Sum>x\\<in>T. if x \\<in> S then g x else (0::'b)] (mod n)\n\ngoal (1 subgoal):\n 1. [sum g T = sum g S] (mod n)", "have \"(\\<Sum>x\\<in>T. if x \\<in> S then g x else 0) = (\\<Sum>x\\<in>S. if x \\<in> S then g x else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>T. if x \\<in> S then g x else (0::'b)) =\n    (\\<Sum>x\\<in>S. if x \\<in> S then g x else (0::'b))", "by (intro sum.mono_neutral_right; fact?; auto)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>T. if x \\<in> S then g x else (0::'b)) =\n  (\\<Sum>x\\<in>S. if x \\<in> S then g x else (0::'b))\n\ngoal (1 subgoal):\n 1. [sum g T = sum g S] (mod n)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>T. if x \\<in> S then g x else (0::'b)) =\n  (\\<Sum>x\\<in>S. if x \\<in> S then g x else (0::'b))\n\ngoal (1 subgoal):\n 1. [sum g T = sum g S] (mod n)", "have \"... = sum g S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>S. if x \\<in> S then g x else (0::'b)) = sum g S", "by (auto intro: sum.cong)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>S. if x \\<in> S then g x else (0::'b)) = sum g S\n\ngoal (1 subgoal):\n 1. [sum g T = sum g S] (mod n)", "finally"], ["proof (chain)\npicking this:\n  [sum g T = sum g S] (mod n)", "show ?thesis"], ["proof (prove)\nusing this:\n  [sum g T = sum g S] (mod n)\n\ngoal (1 subgoal):\n 1. [sum g T = sum g S] (mod n)", "."], ["proof (state)\nthis:\n  [sum g T = sum g S] (mod n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma power_odd_inj:\n  fixes a b :: \"'a::linordered_idom\"\n  assumes \"odd k\" and \"a^k = b^k\"\n  shows \"a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b", "proof (cases \"a \\<ge> 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (0::'a) \\<le> a \\<Longrightarrow> a = b\n 2. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "case True"], ["proof (state)\nthis:\n  (0::'a) \\<le> a\n\ngoal (2 subgoals):\n 1. (0::'a) \\<le> a \\<Longrightarrow> a = b\n 2. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "then"], ["proof (chain)\npicking this:\n  (0::'a) \\<le> a", "have \"b \\<ge> 0\""], ["proof (prove)\nusing this:\n  (0::'a) \\<le> a\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> b", "using assms zero_le_odd_power"], ["proof (prove)\nusing this:\n  (0::'a) \\<le> a\n  odd k\n  a ^ k = b ^ k\n  odd ?n \\<Longrightarrow> ((0::?'a) \\<le> ?a ^ ?n) = ((0::?'a) \\<le> ?a)\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> b", "by metis"], ["proof (state)\nthis:\n  (0::'a) \\<le> b\n\ngoal (2 subgoals):\n 1. (0::'a) \\<le> a \\<Longrightarrow> a = b\n 2. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "moreover"], ["proof (state)\nthis:\n  (0::'a) \\<le> b\n\ngoal (2 subgoals):\n 1. (0::'a) \\<le> a \\<Longrightarrow> a = b\n 2. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "from `odd k`"], ["proof (chain)\npicking this:\n  odd k", "have \"k > 0\""], ["proof (prove)\nusing this:\n  odd k\n\ngoal (1 subgoal):\n 1. 0 < k", "by presburger"], ["proof (state)\nthis:\n  0 < k\n\ngoal (2 subgoals):\n 1. (0::'a) \\<le> a \\<Longrightarrow> a = b\n 2. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b", "by (rule power_eq_imp_eq_base; fact)"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "case False"], ["proof (state)\nthis:\n  \\<not> (0::'a) \\<le> a\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "then"], ["proof (chain)\npicking this:\n  \\<not> (0::'a) \\<le> a", "have \"b < 0\""], ["proof (prove)\nusing this:\n  \\<not> (0::'a) \\<le> a\n\ngoal (1 subgoal):\n 1. b < (0::'a)", "using assms power_less_zero_eq not_less"], ["proof (prove)\nusing this:\n  \\<not> (0::'a) \\<le> a\n  odd k\n  a ^ k = b ^ k\n  (?a ^ ?n < (0::?'a)) = (odd ?n \\<and> ?a < (0::?'a))\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. b < (0::'a)", "by metis"], ["proof (state)\nthis:\n  b < (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "from `a^k = b^k`"], ["proof (chain)\npicking this:\n  a ^ k = b ^ k", "have \"(-a)^k = (-b)^k\""], ["proof (prove)\nusing this:\n  a ^ k = b ^ k\n\ngoal (1 subgoal):\n 1. (- a) ^ k = (- b) ^ k", "using `odd k` power_minus_odd"], ["proof (prove)\nusing this:\n  a ^ k = b ^ k\n  odd k\n  odd ?n \\<Longrightarrow> (- ?a) ^ ?n = - (?a ^ ?n)\n\ngoal (1 subgoal):\n 1. (- a) ^ k = (- b) ^ k", "by simp"], ["proof (state)\nthis:\n  (- a) ^ k = (- b) ^ k\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "moreover"], ["proof (state)\nthis:\n  (- a) ^ k = (- b) ^ k\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "have \"-a \\<ge> 0\" and \"-b \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> - a &&& (0::'a) \\<le> - b", "using `\\<not> a \\<ge> 0` and `b < 0`"], ["proof (prove)\nusing this:\n  \\<not> (0::'a) \\<le> a\n  b < (0::'a)\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> - a &&& (0::'a) \\<le> - b", "by auto"], ["proof (state)\nthis:\n  (0::'a) \\<le> - a\n  (0::'a) \\<le> - b\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "moreover"], ["proof (state)\nthis:\n  (0::'a) \\<le> - a\n  (0::'a) \\<le> - b\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "from `odd k`"], ["proof (chain)\npicking this:\n  odd k", "have \"k > 0\""], ["proof (prove)\nusing this:\n  odd k\n\ngoal (1 subgoal):\n 1. 0 < k", "by presburger"], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "ultimately"], ["proof (chain)\npicking this:\n  (- a) ^ k = (- b) ^ k\n  (0::'a) \\<le> - a\n  (0::'a) \\<le> - b\n  0 < k", "have \"-a = -b\""], ["proof (prove)\nusing this:\n  (- a) ^ k = (- b) ^ k\n  (0::'a) \\<le> - a\n  (0::'a) \\<le> - b\n  0 < k\n\ngoal (1 subgoal):\n 1. - a = - b", "by (rule power_eq_imp_eq_base)"], ["proof (state)\nthis:\n  - a = - b\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) \\<le> a \\<Longrightarrow> a = b", "then"], ["proof (chain)\npicking this:\n  - a = - b", "show ?thesis"], ["proof (prove)\nusing this:\n  - a = - b\n\ngoal (1 subgoal):\n 1. a = b", "by simp"], ["proof (state)\nthis:\n  a = b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma power_eq_abs:\n  fixes a b :: \"'a::linordered_idom\"\n  assumes \"a^k = b^k\" and \"k > 0\"\n  shows \"\\<bar>a\\<bar> = \\<bar>b\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> = \\<bar>b\\<bar>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> = \\<bar>b\\<bar>", "from `a^k = b^k`"], ["proof (chain)\npicking this:\n  a ^ k = b ^ k", "have \"\\<bar>a\\<bar>^k = \\<bar>b\\<bar>^k\""], ["proof (prove)\nusing this:\n  a ^ k = b ^ k\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> ^ k = \\<bar>b\\<bar> ^ k", "using power_abs"], ["proof (prove)\nusing this:\n  a ^ k = b ^ k\n  \\<bar>?a ^ ?n\\<bar> = \\<bar>?a\\<bar> ^ ?n\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> ^ k = \\<bar>b\\<bar> ^ k", "by metis"], ["proof (state)\nthis:\n  \\<bar>a\\<bar> ^ k = \\<bar>b\\<bar> ^ k\n\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> = \\<bar>b\\<bar>", "show \"\\<bar>a\\<bar> = \\<bar>b\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>a\\<bar> = \\<bar>b\\<bar>", "by (rule power_eq_imp_eq_base; fact?; auto)"], ["proof (state)\nthis:\n  \\<bar>a\\<bar> = \\<bar>b\\<bar>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cong_scale:\n  \"k \\<noteq> 0 \\<Longrightarrow> [a = b] (mod c) \\<longleftrightarrow> [k*a = k*b] (mod k*c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> (0::'a) \\<Longrightarrow>\n    [a = b] (mod c) = [k * a = k * b] (mod k * c)", "unfolding cong_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> (0::'a) \\<Longrightarrow>\n    (a mod c = b mod c) = (k * a mod (k * c) = k * b mod (k * c))", "by auto"], ["", "lemma odd_square_mod_4:\n  fixes x :: int\n  assumes \"odd x\"\n  shows \"[x^2 = 1] (mod 4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [x\\<^sup>2 = 1] (mod 4)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [x\\<^sup>2 = 1] (mod 4)", "have \"x^2 - 1 = (x - 1) * (x + 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>2 - 1 = (x - 1) * (x + 1)", "by (simp add: ring_distribs power2_eq_square)"], ["proof (state)\nthis:\n  x\\<^sup>2 - 1 = (x - 1) * (x + 1)\n\ngoal (1 subgoal):\n 1. [x\\<^sup>2 = 1] (mod 4)", "moreover"], ["proof (state)\nthis:\n  x\\<^sup>2 - 1 = (x - 1) * (x + 1)\n\ngoal (1 subgoal):\n 1. [x\\<^sup>2 = 1] (mod 4)", "from `odd x`"], ["proof (chain)\npicking this:\n  odd x", "have \"2 dvd x - 1\" and \"2 dvd x + 1\""], ["proof (prove)\nusing this:\n  odd x\n\ngoal (1 subgoal):\n 1. even (x - 1) &&& even (x + 1)", "by auto"], ["proof (state)\nthis:\n  even (x - 1)\n  even (x + 1)\n\ngoal (1 subgoal):\n 1. [x\\<^sup>2 = 1] (mod 4)", "ultimately"], ["proof (chain)\npicking this:\n  x\\<^sup>2 - 1 = (x - 1) * (x + 1)\n  even (x - 1)\n  even (x + 1)", "have \"4 dvd x^2 - 1\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 - 1 = (x - 1) * (x + 1)\n  even (x - 1)\n  even (x + 1)\n\ngoal (1 subgoal):\n 1. 4 dvd x\\<^sup>2 - 1", "by fastforce"], ["proof (state)\nthis:\n  4 dvd x\\<^sup>2 - 1\n\ngoal (1 subgoal):\n 1. [x\\<^sup>2 = 1] (mod 4)", "thus ?thesis"], ["proof (prove)\nusing this:\n  4 dvd x\\<^sup>2 - 1\n\ngoal (1 subgoal):\n 1. [x\\<^sup>2 = 1] (mod 4)", "by (simp add: cong_iff_dvd_diff)"], ["proof (state)\nthis:\n  [x\\<^sup>2 = 1] (mod 4)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>The \\<open>p > 2\\<close> case\\<close>"], ["", "context\n  fixes x y :: int and p :: nat\n  assumes \"prime p\"\n  assumes \"p dvd x - y\"\n  assumes \"\\<not>p dvd x\"   \"\\<not>p dvd y\"\nbegin"], ["", "lemma decompose_mod_p:\n  \"[(\\<Sum>i<n. y^(n - Suc i) * x^i) = n*x^(n-1)] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "assume \"i < n\""], ["proof (state)\nthis:\n  i < n\n\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "from `p dvd x - y`"], ["proof (chain)\npicking this:\n  int p dvd x - y", "have \"[x = y] (mod p)\""], ["proof (prove)\nusing this:\n  int p dvd x - y\n\ngoal (1 subgoal):\n 1. [x = y] (mod int p)", "by (simp add: cong_iff_dvd_diff)"], ["proof (state)\nthis:\n  [x = y] (mod int p)\n\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "hence \"[y^(n - Suc i) * x^i = x^(n - Suc i) * x^i] (mod p)\""], ["proof (prove)\nusing this:\n  [x = y] (mod int p)\n\ngoal (1 subgoal):\n 1. [y ^ (n - Suc i) * x ^ i = x ^ (n - Suc i) * x ^ i] (mod int p)", "by (intro cong_scalar_right cong_pow; rule cong_sym)"], ["proof (state)\nthis:\n  [y ^ (n - Suc i) * x ^ i = x ^ (n - Suc i) * x ^ i] (mod int p)\n\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "also"], ["proof (state)\nthis:\n  [y ^ (n - Suc i) * x ^ i = x ^ (n - Suc i) * x ^ i] (mod int p)\n\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "have \"x^(n - Suc i) * x^i = x^(n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ (n - Suc i) * x ^ i = x ^ (n - 1)", "using `i < n`"], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. x ^ (n - Suc i) * x ^ i = x ^ (n - 1)", "by (simp flip: power_add)"], ["proof (state)\nthis:\n  x ^ (n - Suc i) * x ^ i = x ^ (n - 1)\n\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "finally"], ["proof (chain)\npicking this:\n  [y ^ (n - Suc i) * x ^ i = x ^ (n - 1)] (mod int p)", "have \"[y^(n - Suc i) * x^i = x^(n - 1)] (mod p)\""], ["proof (prove)\nusing this:\n  [y ^ (n - Suc i) * x ^ i = x ^ (n - 1)] (mod int p)\n\ngoal (1 subgoal):\n 1. [y ^ (n - Suc i) * x ^ i = x ^ (n - 1)] (mod int p)", "by auto"], ["proof (state)\nthis:\n  [y ^ (n - Suc i) * x ^ i = x ^ (n - 1)] (mod int p)\n\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "}"], ["proof (state)\nthis:\n  ?i2 < n \\<Longrightarrow>\n  [y ^ (n - Suc ?i2) * x ^ ?i2 = x ^ (n - 1)] (mod int p)\n\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "hence \"[(\\<Sum>i<n. y^(n - Suc i) * x^i) = (\\<Sum>i<n. x^(n-1))] (mod p)\""], ["proof (prove)\nusing this:\n  ?i2 < n \\<Longrightarrow>\n  [y ^ (n - Suc ?i2) * x ^ ?i2 = x ^ (n - 1)] (mod int p)\n\ngoal (1 subgoal):\n 1. [\\<Sum>i<n.\n        y ^ (n - Suc i) * x ^ i = \\<Sum>i<n. x ^ (n - 1)] (mod int p)", "by (intro cong_sum; auto)"], ["proof (state)\nthis:\n  [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = \\<Sum>i<n. x ^ (n - 1)] (mod int p)\n\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "thus \"[(\\<Sum>i<n. y^(n - Suc i) * x^i) = n * x^(n-1)] (mod p)\""], ["proof (prove)\nusing this:\n  [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = \\<Sum>i<n. x ^ (n - 1)] (mod int p)\n\ngoal (1 subgoal):\n 1. [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)", "by simp"], ["proof (state)\nthis:\n  [\\<Sum>i<n. y ^ (n - Suc i) * x ^ i = int n * x ^ (n - 1)] (mod int p)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Lemma 1:\\<close>"], ["", "lemma multiplicity_diff_pow_coprime:\n  assumes \"coprime p n\"\n  shows \"multiplicity p (x^n - y^n) = multiplicity p (x - y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) = multiplicity (int p) (x - y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) = multiplicity (int p) (x - y)", "have factor: \"x^n - y^n = (\\<Sum>i<n. y^(n - Suc i) * x^i) * (x - y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ n - y ^ n = (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) * (x - y)", "by (simp add: power_diff_sumr2)"], ["proof (state)\nthis:\n  x ^ n - y ^ n = (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) * (x - y)\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) = multiplicity (int p) (x - y)", "moreover"], ["proof (state)\nthis:\n  x ^ n - y ^ n = (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) * (x - y)\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) = multiplicity (int p) (x - y)", "have \"\\<not> p dvd (\\<Sum>i<n. y^(n - Suc i) * x^i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) \\<Longrightarrow> False", "assume \"p dvd (\\<Sum>i<n. y^(n - Suc i) * x^i)\""], ["proof (state)\nthis:\n  int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i)\n\ngoal (1 subgoal):\n 1. int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) \\<Longrightarrow> False", "with decompose_mod_p"], ["proof (chain)\npicking this:\n  [\\<Sum>i<?n. y ^ (?n - Suc i) * x ^ i = int ?n * x ^ (?n - 1)] (mod int p)\n  int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i)", "have \"p dvd n * x^(n-1)\""], ["proof (prove)\nusing this:\n  [\\<Sum>i<?n. y ^ (?n - Suc i) * x ^ i = int ?n * x ^ (?n - 1)] (mod int p)\n  int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i)\n\ngoal (1 subgoal):\n 1. int p dvd int n * x ^ (n - 1)", "using cong_dvd_iff"], ["proof (prove)\nusing this:\n  [\\<Sum>i<?n. y ^ (?n - Suc i) * x ^ i = int ?n * x ^ (?n - 1)] (mod int p)\n  int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i)\n  [?b = ?c] (mod ?a) \\<Longrightarrow> (?a dvd ?b) = (?a dvd ?c)\n\ngoal (1 subgoal):\n 1. int p dvd int n * x ^ (n - 1)", "by blast"], ["proof (state)\nthis:\n  int p dvd int n * x ^ (n - 1)\n\ngoal (1 subgoal):\n 1. int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) \\<Longrightarrow> False", "with `prime p`"], ["proof (chain)\npicking this:\n  prime p\n  int p dvd int n * x ^ (n - 1)", "have \"p dvd n \\<or> p dvd x^(n-1)\""], ["proof (prove)\nusing this:\n  prime p\n  int p dvd int n * x ^ (n - 1)\n\ngoal (1 subgoal):\n 1. p dvd n \\<or> int p dvd x ^ (n - 1)", "by (simp add: prime_dvd_mult_eq_int)"], ["proof (state)\nthis:\n  p dvd n \\<or> int p dvd x ^ (n - 1)\n\ngoal (1 subgoal):\n 1. int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  p dvd n \\<or> int p dvd x ^ (n - 1)\n\ngoal (1 subgoal):\n 1. int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) \\<Longrightarrow> False", "from `coprime p n` and `prime p`"], ["proof (chain)\npicking this:\n  coprime p n\n  prime p", "have \"\\<not>p dvd n\""], ["proof (prove)\nusing this:\n  coprime p n\n  prime p\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n", "using coprime_absorb_right not_prime_unit"], ["proof (prove)\nusing this:\n  coprime p n\n  prime p\n  ?y dvd ?x \\<Longrightarrow> coprime ?x ?y = is_unit ?y\n  is_unit ?x \\<Longrightarrow> \\<not> prime ?x\n\ngoal (1 subgoal):\n 1. \\<not> p dvd n", "by auto"], ["proof (state)\nthis:\n  \\<not> p dvd n\n\ngoal (1 subgoal):\n 1. int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  p dvd n \\<or> int p dvd x ^ (n - 1)\n  \\<not> p dvd n", "have \"p dvd x^(n-1)\""], ["proof (prove)\nusing this:\n  p dvd n \\<or> int p dvd x ^ (n - 1)\n  \\<not> p dvd n\n\ngoal (1 subgoal):\n 1. int p dvd x ^ (n - 1)", "by simp"], ["proof (state)\nthis:\n  int p dvd x ^ (n - 1)\n\ngoal (1 subgoal):\n 1. int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) \\<Longrightarrow> False", "hence \"p dvd x\""], ["proof (prove)\nusing this:\n  int p dvd x ^ (n - 1)\n\ngoal (1 subgoal):\n 1. int p dvd x", "using `prime p` prime_dvd_power_int prime_nat_int_transfer"], ["proof (prove)\nusing this:\n  int p dvd x ^ (n - 1)\n  prime p\n  \\<lbrakk>prime ?p; ?p dvd ?x ^ ?n\\<rbrakk> \\<Longrightarrow> ?p dvd ?x\n  prime (int ?n) = prime ?n\n\ngoal (1 subgoal):\n 1. int p dvd x", "by blast"], ["proof (state)\nthis:\n  int p dvd x\n\ngoal (1 subgoal):\n 1. int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) \\<Longrightarrow> False", "with `\\<not>p dvd x`"], ["proof (chain)\npicking this:\n  \\<not> int p dvd x\n  int p dvd x", "show False"], ["proof (prove)\nusing this:\n  \\<not> int p dvd x\n  int p dvd x\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i)\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) = multiplicity (int p) (x - y)", "ultimately"], ["proof (chain)\npicking this:\n  x ^ n - y ^ n = (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) * (x - y)\n  \\<not> int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i)", "show \"multiplicity p (x^n - y^n) = multiplicity p (x - y)\""], ["proof (prove)\nusing this:\n  x ^ n - y ^ n = (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) * (x - y)\n  \\<not> int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i)\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) = multiplicity (int p) (x - y)", "using `prime p`"], ["proof (prove)\nusing this:\n  x ^ n - y ^ n = (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i) * (x - y)\n  \\<not> int p dvd (\\<Sum>i<n. y ^ (n - Suc i) * x ^ i)\n  prime p\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) = multiplicity (int p) (x - y)", "by (auto intro: multiplicity_prime_elem_times_other)"], ["proof (state)\nthis:\n  multiplicity (int p) (x ^ n - y ^ n) = multiplicity (int p) (x - y)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The inductive step:\\<close>"], ["", "lemma multiplicity_diff_self_pow:\n  assumes \"p > 2\" and \"x \\<noteq> y\"\n  shows \"multiplicity p (x^p - y^p) = Suc (multiplicity p (x - y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ p - y ^ p) =\n    Suc (multiplicity (int p) (x - y))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ p - y ^ p) =\n    Suc (multiplicity (int p) (x - y))", "have *: \"multiplicity p (\\<Sum>i<p. y^(p - Suc i) * x^i) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (int p) (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i) = 1", "proof (rule multiplicity_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. int p ^ 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)\n 2. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "have \"[(\\<Sum>t<p. y^(p - Suc t) * x^t) = p * x^(p-1)] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [\\<Sum>t<p. y ^ (p - Suc t) * x ^ t = int p * x ^ (p - 1)] (mod int p)", "by (rule decompose_mod_p)"], ["proof (state)\nthis:\n  [\\<Sum>t<p. y ^ (p - Suc t) * x ^ t = int p * x ^ (p - 1)] (mod int p)\n\ngoal (2 subgoals):\n 1. int p ^ 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)\n 2. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "also"], ["proof (state)\nthis:\n  [\\<Sum>t<p. y ^ (p - Suc t) * x ^ t = int p * x ^ (p - 1)] (mod int p)\n\ngoal (2 subgoals):\n 1. int p ^ 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)\n 2. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "have \"[p * x^(p-1) = 0] (mod p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [int p * x ^ (p - 1) = 0] (mod int p)", "by (simp add: cong_mult_self_left)"], ["proof (state)\nthis:\n  [int p * x ^ (p - 1) = 0] (mod int p)\n\ngoal (2 subgoals):\n 1. int p ^ 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)\n 2. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "finally"], ["proof (chain)\npicking this:\n  [\\<Sum>t<p. y ^ (p - Suc t) * x ^ t = 0] (mod int p)", "show \"(int p)^1 dvd (\\<Sum>i<p. y^(p - Suc i) * x^i)\""], ["proof (prove)\nusing this:\n  [\\<Sum>t<p. y ^ (p - Suc t) * x ^ t = 0] (mod int p)\n\ngoal (1 subgoal):\n 1. int p ^ 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "by (simp add: cong_0_iff)"], ["proof (state)\nthis:\n  int p ^ 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "from `p dvd x - y`"], ["proof (chain)\npicking this:\n  int p dvd x - y", "obtain k::int where kp: \"x = y + k * p\""], ["proof (prove)\nusing this:\n  int p dvd x - y\n\ngoal (1 subgoal):\n 1. (\\<And>k. x = y + k * int p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis add.commute diff_add_cancel dvd_def mult.commute)"], ["proof (state)\nthis:\n  x = y + k * int p\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "have \"[y^(p - Suc t) * x^t = y^(p-1) + t*k*p*y^(p-2)] (mod p^2)\" if \"t < p\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "proof (cases \"t = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "case False"], ["proof (state)\nthis:\n  t \\<noteq> 0\n\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "have \"y^(p - Suc t) * x^t = y^(p - Suc t) * (y + k*p)^t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y ^ (p - Suc t) * x ^ t = y ^ (p - Suc t) * (y + k * int p) ^ t", "unfolding kp"], ["proof (prove)\ngoal (1 subgoal):\n 1. y ^ (p - Suc t) * (y + k * int p) ^ t =\n    y ^ (p - Suc t) * (y + k * int p) ^ t", ".."], ["proof (state)\nthis:\n  y ^ (p - Suc t) * x ^ t = y ^ (p - Suc t) * (y + k * int p) ^ t\n\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "also"], ["proof (state)\nthis:\n  y ^ (p - Suc t) * x ^ t = y ^ (p - Suc t) * (y + k * int p) ^ t\n\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "have \"... = y^(p - Suc t) * (\\<Sum>i\\<le>t. (t choose i) * (k*p)^i * y^(t-i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y ^ (p - Suc t) * (y + k * int p) ^ t =\n    y ^ (p - Suc t) *\n    (\\<Sum>i\\<le>t. int (t choose i) * (k * int p) ^ i * y ^ (t - i))", "by (simp flip: binomial_ring add: add.commute)"], ["proof (state)\nthis:\n  y ^ (p - Suc t) * (y + k * int p) ^ t =\n  y ^ (p - Suc t) *\n  (\\<Sum>i\\<le>t. int (t choose i) * (k * int p) ^ i * y ^ (t - i))\n\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "also"], ["proof (state)\nthis:\n  y ^ (p - Suc t) * (y + k * int p) ^ t =\n  y ^ (p - Suc t) *\n  (\\<Sum>i\\<le>t. int (t choose i) * (k * int p) ^ i * y ^ (t - i))\n\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "have \"[... = y^(p - Suc t) * (\\<Sum>i\\<le>1. (t choose i) * (k*p)^i * y^(t-i))] (mod p^2)\"\n        \\<comment> \\<open>discard \\<open>i > 1\\<close>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. [y ^ (p - Suc t) *\n     (\\<Sum>i\\<le>t.\n         int (t choose i) * (k * int p) ^ i *\n         y ^\n         (t -\n          i)) = y ^ (p - Suc t) *\n                (\\<Sum>i\\<le>1.\n                    int (t choose i) * (k * int p) ^ i *\n                    y ^ (t - i))] (mod int (p\\<^sup>2))", "proof (intro cong_scalar_left cong_sum_mono_neutral_right; rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 \\<le> t\n 2. \\<And>i.\n       i \\<in> {..t} - {..1} \\<Longrightarrow>\n       [int (t choose i) * (k * int p) ^ i *\n        y ^ (t - i) = 0] (mod int (p\\<^sup>2))", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 \\<le> t\n 2. \\<And>i.\n       i \\<in> {..t} - {..1} \\<Longrightarrow>\n       [int (t choose i) * (k * int p) ^ i *\n        y ^ (t - i) = 0] (mod int (p\\<^sup>2))", "assume \"i \\<in> {..t} - {..1}\""], ["proof (state)\nthis:\n  i \\<in> {..t} - {..1}\n\ngoal (2 subgoals):\n 1. 1 \\<le> t\n 2. \\<And>i.\n       i \\<in> {..t} - {..1} \\<Longrightarrow>\n       [int (t choose i) * (k * int p) ^ i *\n        y ^ (t - i) = 0] (mod int (p\\<^sup>2))", "then"], ["proof (chain)\npicking this:\n  i \\<in> {..t} - {..1}", "have \"i \\<ge> 2\""], ["proof (prove)\nusing this:\n  i \\<in> {..t} - {..1}\n\ngoal (1 subgoal):\n 1. 2 \\<le> i", "by simp"], ["proof (state)\nthis:\n  2 \\<le> i\n\ngoal (2 subgoals):\n 1. 1 \\<le> t\n 2. \\<And>i.\n       i \\<in> {..t} - {..1} \\<Longrightarrow>\n       [int (t choose i) * (k * int p) ^ i *\n        y ^ (t - i) = 0] (mod int (p\\<^sup>2))", "then"], ["proof (chain)\npicking this:\n  2 \\<le> i", "obtain i' where \"i = i' + 2\""], ["proof (prove)\nusing this:\n  2 \\<le> i\n\ngoal (1 subgoal):\n 1. (\\<And>i'. i = i' + 2 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using add.commute le_Suc_ex"], ["proof (prove)\nusing this:\n  2 \\<le> i\n  ?a + ?b = ?b + ?a\n  ?k \\<le> ?l \\<Longrightarrow> \\<exists>n. ?l = ?k + n\n\ngoal (1 subgoal):\n 1. (\\<And>i'. i = i' + 2 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  i = i' + 2\n\ngoal (2 subgoals):\n 1. 1 \\<le> t\n 2. \\<And>i.\n       i \\<in> {..t} - {..1} \\<Longrightarrow>\n       [int (t choose i) * (k * int p) ^ i *\n        y ^ (t - i) = 0] (mod int (p\\<^sup>2))", "hence \"(k*p)^i = (k*p)^i' * k^2 * p^2\""], ["proof (prove)\nusing this:\n  i = i' + 2\n\ngoal (1 subgoal):\n 1. (k * int p) ^ i = (k * int p) ^ i' * k\\<^sup>2 * int (p\\<^sup>2)", "by (simp add: ac_simps power2_eq_square)"], ["proof (state)\nthis:\n  (k * int p) ^ i = (k * int p) ^ i' * k\\<^sup>2 * int (p\\<^sup>2)\n\ngoal (2 subgoals):\n 1. 1 \\<le> t\n 2. \\<And>i.\n       i \\<in> {..t} - {..1} \\<Longrightarrow>\n       [int (t choose i) * (k * int p) ^ i *\n        y ^ (t - i) = 0] (mod int (p\\<^sup>2))", "hence \"[(k*p)^i = 0] (mod p^2)\""], ["proof (prove)\nusing this:\n  (k * int p) ^ i = (k * int p) ^ i' * k\\<^sup>2 * int (p\\<^sup>2)\n\ngoal (1 subgoal):\n 1. [(k * int p) ^ i = 0] (mod int (p\\<^sup>2))", "by (simp add: cong_mult_self_right)"], ["proof (state)\nthis:\n  [(k * int p) ^ i = 0] (mod int (p\\<^sup>2))\n\ngoal (2 subgoals):\n 1. 1 \\<le> t\n 2. \\<And>i.\n       i \\<in> {..t} - {..1} \\<Longrightarrow>\n       [int (t choose i) * (k * int p) ^ i *\n        y ^ (t - i) = 0] (mod int (p\\<^sup>2))", "thus \"[(t choose i) * (k*p)^i * y^(t-i) = 0] (mod p^2)\""], ["proof (prove)\nusing this:\n  [(k * int p) ^ i = 0] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. [int (t choose i) * (k * int p) ^ i *\n     y ^ (t - i) = 0] (mod int (p\\<^sup>2))", "by (simp add: cong_0_iff)"], ["proof (state)\nthis:\n  [int (t choose i) * (k * int p) ^ i *\n   y ^ (t - i) = 0] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. 1 \\<le> t", "qed (use `t \\<noteq> 0` in auto)"], ["proof (state)\nthis:\n  [y ^ (p - Suc t) *\n   (\\<Sum>i\\<le>t.\n       int (t choose i) * (k * int p) ^ i *\n       y ^\n       (t -\n        i)) = y ^ (p - Suc t) *\n              (\\<Sum>i\\<le>1.\n                  int (t choose i) * (k * int p) ^ i *\n                  y ^ (t - i))] (mod int (p\\<^sup>2))\n\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "also"], ["proof (state)\nthis:\n  [y ^ (p - Suc t) *\n   (\\<Sum>i\\<le>t.\n       int (t choose i) * (k * int p) ^ i *\n       y ^\n       (t -\n        i)) = y ^ (p - Suc t) *\n              (\\<Sum>i\\<le>1.\n                  int (t choose i) * (k * int p) ^ i *\n                  y ^ (t - i))] (mod int (p\\<^sup>2))\n\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "have \"(\\<Sum>i\\<le>1. (t choose i) * (k*p)^i * y^(t-i)) = y^t + t*k*p*y^(t-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>1. int (t choose i) * (k * int p) ^ i * y ^ (t - i)) =\n    y ^ t + int t * k * int p * y ^ (t - 1)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>1. int (t choose i) * (k * int p) ^ i * y ^ (t - i)) =\n  y ^ t + int t * k * int p * y ^ (t - 1)\n\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>1. int (t choose i) * (k * int p) ^ i * y ^ (t - i)) =\n  y ^ t + int t * k * int p * y ^ (t - 1)\n\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "have \"y^(p - Suc t) * ... = y^(p-1) + t*k*p*y^(p-2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y ^ (p - Suc t) * (y ^ t + int t * k * int p * y ^ (t - 1)) =\n    y ^ (p - 1) + int t * k * int p * y ^ (p - 2)", "using `t < p` `t \\<noteq> 0`"], ["proof (prove)\nusing this:\n  t < p\n  t \\<noteq> 0\n\ngoal (1 subgoal):\n 1. y ^ (p - Suc t) * (y ^ t + int t * k * int p * y ^ (t - 1)) =\n    y ^ (p - 1) + int t * k * int p * y ^ (p - 2)", "by (auto simp add: algebra_simps numeral_eq_Suc simp flip: power_add)"], ["proof (state)\nthis:\n  y ^ (p - Suc t) * (y ^ t + int t * k * int p * y ^ (t - 1)) =\n  y ^ (p - 1) + int t * k * int p * y ^ (p - 2)\n\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "finally"], ["proof (chain)\npicking this:\n  [y ^ (p - Suc t) *\n   x ^\n   t = y ^ (p - 1) + int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  [y ^ (p - Suc t) *\n   x ^\n   t = y ^ (p - 1) + int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "."], ["proof (state)\nthis:\n  [y ^ (p - Suc t) *\n   x ^\n   t = y ^ (p - 1) + int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. t = 0 \\<Longrightarrow>\n    [y ^ (p - Suc t) *\n     x ^\n     t = y ^ (p - 1) +\n         int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "qed simp"], ["proof (state)\nthis:\n  ?t < p \\<Longrightarrow>\n  [y ^ (p - Suc ?t) *\n   x ^\n   ?t = y ^ (p - 1) +\n        int ?t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "hence \"[(\\<Sum>t<p. y^(p - Suc t) * x^t) = (\\<Sum>t<p. y^(p-1) + t*k*p*y^(p-2))] (mod p^2)\""], ["proof (prove)\nusing this:\n  ?t < p \\<Longrightarrow>\n  [y ^ (p - Suc ?t) *\n   x ^\n   ?t = y ^ (p - 1) +\n        int ?t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. [\\<Sum>t<p.\n        y ^ (p - Suc t) *\n        x ^\n        t = \\<Sum>t<p.\n               y ^ (p - 1) +\n               int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))", "by (auto intro: cong_sum)"], ["proof (state)\nthis:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) *\n      x ^\n      t = \\<Sum>t<p.\n             y ^ (p - 1) +\n             int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "also"], ["proof (state)\nthis:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) *\n      x ^\n      t = \\<Sum>t<p.\n             y ^ (p - 1) +\n             int t * k * int p * y ^ (p - 2)] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "have \"(\\<Sum>t<p. y^(p-1) + t*k*p*y^(p-2)) = p*y^(p-1) + (\\<Sum>t<p. t) * k*p*y^(p-2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>t<p. y ^ (p - 1) + int t * k * int p * y ^ (p - 2)) =\n    int p * y ^ (p - 1) + int (\\<Sum> {..<p}) * k * int p * y ^ (p - 2)", "by (simp add: sum.distrib sum_distrib_right)"], ["proof (state)\nthis:\n  (\\<Sum>t<p. y ^ (p - 1) + int t * k * int p * y ^ (p - 2)) =\n  int p * y ^ (p - 1) + int (\\<Sum> {..<p}) * k * int p * y ^ (p - 2)\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "also"], ["proof (state)\nthis:\n  (\\<Sum>t<p. y ^ (p - 1) + int t * k * int p * y ^ (p - 2)) =\n  int p * y ^ (p - 1) + int (\\<Sum> {..<p}) * k * int p * y ^ (p - 2)\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "have \"(\\<Sum>t<p. t) = p*(p - 1) div 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {..<p} = p * (p - 1) div 2", "by (simp add: Sum_Ico_nat lessThan_atLeast0)"], ["proof (state)\nthis:\n  \\<Sum> {..<p} = p * (p - 1) div 2\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "finally"], ["proof (chain)\npicking this:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) *\n      x ^\n      t = int p * y ^ (p - 1) +\n          int (p * (p - 1) div 2) * k * int p *\n          y ^ (p - 2)] (mod int (p\\<^sup>2))", "have \"[(\\<Sum>t<p. y^(p - Suc t) * x^t) = p*y^(p-1) + (p*(p - 1) div 2) * k*p*y^(p-2)] (mod p^2)\""], ["proof (prove)\nusing this:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) *\n      x ^\n      t = int p * y ^ (p - 1) +\n          int (p * (p - 1) div 2) * k * int p *\n          y ^ (p - 2)] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. [\\<Sum>t<p.\n        y ^ (p - Suc t) *\n        x ^\n        t = int p * y ^ (p - 1) +\n            int (p * (p - 1) div 2) * k * int p *\n            y ^ (p - 2)] (mod int (p\\<^sup>2))", "."], ["proof (state)\nthis:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) *\n      x ^\n      t = int p * y ^ (p - 1) +\n          int (p * (p - 1) div 2) * k * int p *\n          y ^ (p - 2)] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "moreover"], ["proof (state)\nthis:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) *\n      x ^\n      t = int p * y ^ (p - 1) +\n          int (p * (p - 1) div 2) * k * int p *\n          y ^ (p - 2)] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "have \"[(p*(p - 1) div 2) * k*p*y^(p-2) = 0] (mod p^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [int (p * (p - 1) div 2) * k * int p *\n     y ^ (p - 2) = 0] (mod int (p\\<^sup>2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [int (p * (p - 1) div 2) * k * int p *\n     y ^ (p - 2) = 0] (mod int (p\\<^sup>2))", "have \"[(p * (p - 1) div 2) * p = 0] (mod p^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [p * (p - 1) div 2 * p = 0] (mod p\\<^sup>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [p * (p - 1) div 2 * p = 0] (mod p\\<^sup>2)", "from `p > 2` and `prime p`"], ["proof (chain)\npicking this:\n  2 < p\n  prime p", "have \"odd p\""], ["proof (prove)\nusing this:\n  2 < p\n  prime p\n\ngoal (1 subgoal):\n 1. odd p", "using prime_odd_nat"], ["proof (prove)\nusing this:\n  2 < p\n  prime p\n  \\<lbrakk>prime ?p; 2 < ?p\\<rbrakk> \\<Longrightarrow> odd ?p\n\ngoal (1 subgoal):\n 1. odd p", "by blast"], ["proof (state)\nthis:\n  odd p\n\ngoal (1 subgoal):\n 1. [p * (p - 1) div 2 * p = 0] (mod p\\<^sup>2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  odd p\n\ngoal (1 subgoal):\n 1. [p * (p - 1) div 2 * p = 0] (mod p\\<^sup>2)", "by (metis (no_types, lifting) cong_0_iff div_mult_swap dvd_times_left_cancel_iff\n              dvd_triv_left le_0_eq linorder_not_less mult.commute odd_pos odd_two_times_div_two_nat\n              one_add_one power_add power_one_right)"], ["proof (state)\nthis:\n  [p * (p - 1) div 2 * p = 0] (mod p\\<^sup>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [p * (p - 1) div 2 * p = 0] (mod p\\<^sup>2)\n\ngoal (1 subgoal):\n 1. [int (p * (p - 1) div 2) * k * int p *\n     y ^ (p - 2) = 0] (mod int (p\\<^sup>2))", "hence \"[int ((p*(p - 1) div 2) * p)*k*y^(p-2) = 0] (mod p^2)\""], ["proof (prove)\nusing this:\n  [p * (p - 1) div 2 * p = 0] (mod p\\<^sup>2)\n\ngoal (1 subgoal):\n 1. [int (p * (p - 1) div 2 * p) * k *\n     y ^ (p - 2) = 0] (mod int (p\\<^sup>2))", "unfolding cong_0_iff"], ["proof (prove)\nusing this:\n  p\\<^sup>2 dvd p * (p - 1) div 2 * p\n\ngoal (1 subgoal):\n 1. int (p\\<^sup>2) dvd int (p * (p - 1) div 2 * p) * k * y ^ (p - 2)", "using int_dvd_int_iff"], ["proof (prove)\nusing this:\n  p\\<^sup>2 dvd p * (p - 1) div 2 * p\n  (int ?m dvd int ?n) = (?m dvd ?n)\n\ngoal (1 subgoal):\n 1. int (p\\<^sup>2) dvd int (p * (p - 1) div 2 * p) * k * y ^ (p - 2)", "by fastforce"], ["proof (state)\nthis:\n  [int (p * (p - 1) div 2 * p) * k * y ^ (p - 2) = 0] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. [int (p * (p - 1) div 2) * k * int p *\n     y ^ (p - 2) = 0] (mod int (p\\<^sup>2))", "thus ?thesis"], ["proof (prove)\nusing this:\n  [int (p * (p - 1) div 2 * p) * k * y ^ (p - 2) = 0] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. [int (p * (p - 1) div 2) * k * int p *\n     y ^ (p - 2) = 0] (mod int (p\\<^sup>2))", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  [int (p * (p - 1) div 2) * k * int p *\n   y ^ (p - 2) = 0] (mod int (p\\<^sup>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [int (p * (p - 1) div 2) * k * int p *\n   y ^ (p - 2) = 0] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "ultimately"], ["proof (chain)\npicking this:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) *\n      x ^\n      t = int p * y ^ (p - 1) +\n          int (p * (p - 1) div 2) * k * int p *\n          y ^ (p - 2)] (mod int (p\\<^sup>2))\n  [int (p * (p - 1) div 2) * k * int p *\n   y ^ (p - 2) = 0] (mod int (p\\<^sup>2))", "have \"[(\\<Sum>t<p. y^(p - Suc t) * x^t) = p*y^(p-1)] (mod p^2)\""], ["proof (prove)\nusing this:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) *\n      x ^\n      t = int p * y ^ (p - 1) +\n          int (p * (p - 1) div 2) * k * int p *\n          y ^ (p - 2)] (mod int (p\\<^sup>2))\n  [int (p * (p - 1) div 2) * k * int p *\n   y ^ (p - 2) = 0] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. [\\<Sum>t<p.\n        y ^ (p - Suc t) * x ^ t = int p * y ^ (p - 1)] (mod int (p\\<^sup>2))", "by (smt cong_add cong_iff_dvd_diff)"], ["proof (state)\nthis:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) * x ^ t = int p * y ^ (p - 1)] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "moreover"], ["proof (state)\nthis:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) * x ^ t = int p * y ^ (p - 1)] (mod int (p\\<^sup>2))\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "have \"\\<not> p^2 dvd p*y^(p-1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> int (p\\<^sup>2) dvd int p * y ^ (p - 1)", "using `p > 2` `prime p` `\\<not> p dvd y`"], ["proof (prove)\nusing this:\n  2 < p\n  prime p\n  \\<not> int p dvd y\n\ngoal (1 subgoal):\n 1. \\<not> int (p\\<^sup>2) dvd int p * y ^ (p - 1)", "by (simp add: power2_eq_square prime_dvd_power_int_iff)"], ["proof (state)\nthis:\n  \\<not> int (p\\<^sup>2) dvd int p * y ^ (p - 1)\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "ultimately"], ["proof (chain)\npicking this:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) * x ^ t = int p * y ^ (p - 1)] (mod int (p\\<^sup>2))\n  \\<not> int (p\\<^sup>2) dvd int p * y ^ (p - 1)", "show \"\\<not> int p^(Suc 1) dvd (\\<Sum>t<p. y^(p - Suc t) * x^t)\""], ["proof (prove)\nusing this:\n  [\\<Sum>t<p.\n      y ^ (p - Suc t) * x ^ t = int p * y ^ (p - 1)] (mod int (p\\<^sup>2))\n  \\<not> int (p\\<^sup>2) dvd int p * y ^ (p - 1)\n\ngoal (1 subgoal):\n 1. \\<not> int p ^ Suc 1 dvd (\\<Sum>t<p. y ^ (p - Suc t) * x ^ t)", "by (metis (no_types, lifting) Suc_1 of_nat_power cong_dvd_iff)"], ["proof (state)\nthis:\n  \\<not> int p ^ Suc 1 dvd (\\<Sum>t<p. y ^ (p - Suc t) * x ^ t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  multiplicity (int p) (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i) = 1\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ p - y ^ p) =\n    Suc (multiplicity (int p) (x - y))", "moreover"], ["proof (state)\nthis:\n  multiplicity (int p) (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i) = 1\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ p - y ^ p) =\n    Suc (multiplicity (int p) (x - y))", "have \"multiplicity p (x^p - y^p) = multiplicity p (x - y) + multiplicity p (\\<Sum>i<p. y^(p - Suc i) * x^i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ p - y ^ p) =\n    multiplicity (int p) (x - y) +\n    multiplicity (int p) (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "apply (unfold power_diff_sumr2, intro prime_elem_multiplicity_mult_distrib)"], ["proof (prove)\ngoal (3 subgoals):\n 1. prime_elem (int p)\n 2. x - y \\<noteq> 0\n 3. (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i) \\<noteq> 0", "using `prime p` `x \\<noteq> y` multiplicity_zero *"], ["proof (prove)\nusing this:\n  prime p\n  x \\<noteq> y\n  multiplicity ?p (0::?'a) = 0\n  multiplicity (int p) (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i) = 1\n\ngoal (3 subgoals):\n 1. prime_elem (int p)\n 2. x - y \\<noteq> 0\n 3. (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  multiplicity (int p) (x ^ p - y ^ p) =\n  multiplicity (int p) (x - y) +\n  multiplicity (int p) (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ p - y ^ p) =\n    Suc (multiplicity (int p) (x - y))", "ultimately"], ["proof (chain)\npicking this:\n  multiplicity (int p) (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i) = 1\n  multiplicity (int p) (x ^ p - y ^ p) =\n  multiplicity (int p) (x - y) +\n  multiplicity (int p) (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)", "show ?thesis"], ["proof (prove)\nusing this:\n  multiplicity (int p) (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i) = 1\n  multiplicity (int p) (x ^ p - y ^ p) =\n  multiplicity (int p) (x - y) +\n  multiplicity (int p) (\\<Sum>i<p. y ^ (p - Suc i) * x ^ i)\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ p - y ^ p) =\n    Suc (multiplicity (int p) (x - y))", "by simp"], ["proof (state)\nthis:\n  multiplicity (int p) (x ^ p - y ^ p) = Suc (multiplicity (int p) (x - y))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Theorem 1:\\<close>"], ["", "theorem multiplicity_diff_pow:\n  assumes \"p > 2\" and \"x \\<noteq> y\" and \"n > 0\"\n  shows \"multiplicity p (x^n - y^n) = multiplicity p (x - y) + multiplicity p n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) =\n    multiplicity (int p) (x - y) + multiplicity p n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) =\n    multiplicity (int p) (x - y) + multiplicity p n", "obtain k where n: \"n = p^multiplicity p n * k\" and \"\\<not> p dvd k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>n = p ^ multiplicity p n * k; \\<not> p dvd k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using `n > 0` `prime p`"], ["proof (prove)\nusing this:\n  0 < n\n  prime p\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>n = p ^ multiplicity p n * k; \\<not> p dvd k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis neq0_conv not_prime_unit multiplicity_decompose')"], ["proof (state)\nthis:\n  n = p ^ multiplicity p n * k\n  \\<not> p dvd k\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) =\n    multiplicity (int p) (x - y) + multiplicity p n", "have \"multiplicity p (x^(p^a * k) - y^(p^a * k)) = multiplicity p (x - y) + a\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n    multiplicity (int p) (x - y) + a", "proof (induction a)"], ["proof (state)\ngoal (2 subgoals):\n 1. multiplicity (int p) (x ^ (p ^ 0 * k) - y ^ (p ^ 0 * k)) =\n    multiplicity (int p) (x - y) + 0\n 2. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. multiplicity (int p) (x ^ (p ^ 0 * k) - y ^ (p ^ 0 * k)) =\n    multiplicity (int p) (x - y) + 0\n 2. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "from `\\<not> p dvd k`"], ["proof (chain)\npicking this:\n  \\<not> p dvd k", "have \"coprime p k\""], ["proof (prove)\nusing this:\n  \\<not> p dvd k\n\ngoal (1 subgoal):\n 1. coprime p k", "using `prime p`"], ["proof (prove)\nusing this:\n  \\<not> p dvd k\n  prime p\n\ngoal (1 subgoal):\n 1. coprime p k", "by (intro prime_imp_coprime)"], ["proof (state)\nthis:\n  coprime p k\n\ngoal (2 subgoals):\n 1. multiplicity (int p) (x ^ (p ^ 0 * k) - y ^ (p ^ 0 * k)) =\n    multiplicity (int p) (x - y) + 0\n 2. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "thus ?case"], ["proof (prove)\nusing this:\n  coprime p k\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ (p ^ 0 * k) - y ^ (p ^ 0 * k)) =\n    multiplicity (int p) (x - y) + 0", "by (simp add: multiplicity_diff_pow_coprime)"], ["proof (state)\nthis:\n  multiplicity (int p) (x ^ (p ^ 0 * k) - y ^ (p ^ 0 * k)) =\n  multiplicity (int p) (x - y) + 0\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "case (Suc a)"], ["proof (state)\nthis:\n  multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n  multiplicity (int p) (x - y) + a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "let ?x' = \"x^(p^a*k)\" and ?y' = \"y^(p^a*k)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "have \"\\<not> p dvd ?x'\" and \"\\<not> p dvd ?y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> int p dvd x ^ (p ^ a * k) &&& \\<not> int p dvd y ^ (p ^ a * k)", "using `\\<not> p dvd x`  `\\<not> p dvd y` and `prime p`"], ["proof (prove)\nusing this:\n  \\<not> int p dvd x\n  \\<not> int p dvd y\n  prime p\n\ngoal (1 subgoal):\n 1. \\<not> int p dvd x ^ (p ^ a * k) &&& \\<not> int p dvd y ^ (p ^ a * k)", "by (meson prime_dvd_power prime_nat_int_transfer)+"], ["proof (state)\nthis:\n  \\<not> int p dvd x ^ (p ^ a * k)\n  \\<not> int p dvd y ^ (p ^ a * k)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "moreover"], ["proof (state)\nthis:\n  \\<not> int p dvd x ^ (p ^ a * k)\n  \\<not> int p dvd y ^ (p ^ a * k)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "have \"p dvd ?x' - ?y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int p dvd x ^ (p ^ a * k) - y ^ (p ^ a * k)", "using `p dvd x - y`"], ["proof (prove)\nusing this:\n  int p dvd x - y\n\ngoal (1 subgoal):\n 1. int p dvd x ^ (p ^ a * k) - y ^ (p ^ a * k)", "by (simp add: power_diff_sumr2)"], ["proof (state)\nthis:\n  int p dvd x ^ (p ^ a * k) - y ^ (p ^ a * k)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "moreover"], ["proof (state)\nthis:\n  int p dvd x ^ (p ^ a * k) - y ^ (p ^ a * k)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "have \"?x' \\<noteq> ?y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ (p ^ a * k) \\<noteq> y ^ (p ^ a * k)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. x ^ (p ^ a * k) = y ^ (p ^ a * k) \\<Longrightarrow> False", "assume \"?x' = ?y'\""], ["proof (state)\nthis:\n  x ^ (p ^ a * k) = y ^ (p ^ a * k)\n\ngoal (1 subgoal):\n 1. x ^ (p ^ a * k) = y ^ (p ^ a * k) \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  x ^ (p ^ a * k) = y ^ (p ^ a * k)\n\ngoal (1 subgoal):\n 1. x ^ (p ^ a * k) = y ^ (p ^ a * k) \\<Longrightarrow> False", "have \"0 < p^a * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < p ^ a * k", "using `prime p` `n > 0` n"], ["proof (prove)\nusing this:\n  prime p\n  0 < n\n  n = p ^ multiplicity p n * k\n\ngoal (1 subgoal):\n 1. 0 < p ^ a * k", "by (metis gr0I mult_is_0 power_not_zero prime_gt_0_nat)"], ["proof (state)\nthis:\n  0 < p ^ a * k\n\ngoal (1 subgoal):\n 1. x ^ (p ^ a * k) = y ^ (p ^ a * k) \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  x ^ (p ^ a * k) = y ^ (p ^ a * k)\n  0 < p ^ a * k", "have \"\\<bar>x\\<bar> = \\<bar>y\\<bar>\""], ["proof (prove)\nusing this:\n  x ^ (p ^ a * k) = y ^ (p ^ a * k)\n  0 < p ^ a * k\n\ngoal (1 subgoal):\n 1. \\<bar>x\\<bar> = \\<bar>y\\<bar>", "by (intro power_eq_abs)"], ["proof (state)\nthis:\n  \\<bar>x\\<bar> = \\<bar>y\\<bar>\n\ngoal (1 subgoal):\n 1. x ^ (p ^ a * k) = y ^ (p ^ a * k) \\<Longrightarrow> False", "with `x \\<noteq> y`"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  \\<bar>x\\<bar> = \\<bar>y\\<bar>", "have \"x = -y\""], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  \\<bar>x\\<bar> = \\<bar>y\\<bar>\n\ngoal (1 subgoal):\n 1. x = - y", "using abs_eq_iff"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  \\<bar>x\\<bar> = \\<bar>y\\<bar>\n  (\\<bar>?x\\<bar> = \\<bar>?y\\<bar>) = (?x = ?y \\<or> ?x = - ?y)\n\ngoal (1 subgoal):\n 1. x = - y", "by simp"], ["proof (state)\nthis:\n  x = - y\n\ngoal (1 subgoal):\n 1. x ^ (p ^ a * k) = y ^ (p ^ a * k) \\<Longrightarrow> False", "with `p dvd x - y`"], ["proof (chain)\npicking this:\n  int p dvd x - y\n  x = - y", "have \"p dvd 2*x\""], ["proof (prove)\nusing this:\n  int p dvd x - y\n  x = - y\n\ngoal (1 subgoal):\n 1. int p dvd 2 * x", "by simp"], ["proof (state)\nthis:\n  int p dvd 2 * x\n\ngoal (1 subgoal):\n 1. x ^ (p ^ a * k) = y ^ (p ^ a * k) \\<Longrightarrow> False", "with `prime p`"], ["proof (chain)\npicking this:\n  prime p\n  int p dvd 2 * x", "have \"p dvd 2 \\<or> p dvd x\""], ["proof (prove)\nusing this:\n  prime p\n  int p dvd 2 * x\n\ngoal (1 subgoal):\n 1. p dvd 2 \\<or> int p dvd x", "by (metis int_dvd_int_iff of_nat_numeral prime_dvd_mult_iff prime_nat_int_transfer)"], ["proof (state)\nthis:\n  p dvd 2 \\<or> int p dvd x\n\ngoal (1 subgoal):\n 1. x ^ (p ^ a * k) = y ^ (p ^ a * k) \\<Longrightarrow> False", "with `p > 2`"], ["proof (chain)\npicking this:\n  2 < p\n  p dvd 2 \\<or> int p dvd x", "have \"p dvd x\""], ["proof (prove)\nusing this:\n  2 < p\n  p dvd 2 \\<or> int p dvd x\n\ngoal (1 subgoal):\n 1. int p dvd x", "by auto"], ["proof (state)\nthis:\n  int p dvd x\n\ngoal (1 subgoal):\n 1. x ^ (p ^ a * k) = y ^ (p ^ a * k) \\<Longrightarrow> False", "with `\\<not> p dvd x`"], ["proof (chain)\npicking this:\n  \\<not> int p dvd x\n  int p dvd x", "show False"], ["proof (prove)\nusing this:\n  \\<not> int p dvd x\n  int p dvd x\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x ^ (p ^ a * k) \\<noteq> y ^ (p ^ a * k)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "moreover"], ["proof (state)\nthis:\n  x ^ (p ^ a * k) \\<noteq> y ^ (p ^ a * k)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "have \"p^Suc a * k = p^a * k * p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p ^ Suc a * k = p ^ a * k * p", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  p ^ Suc a * k = p ^ a * k * p\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n       multiplicity (int p) (x - y) + a \\<Longrightarrow>\n       multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n       multiplicity (int p) (x - y) + Suc a", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> int p dvd x ^ (p ^ a * k)\n  \\<not> int p dvd y ^ (p ^ a * k)\n  int p dvd x ^ (p ^ a * k) - y ^ (p ^ a * k)\n  x ^ (p ^ a * k) \\<noteq> y ^ (p ^ a * k)\n  p ^ Suc a * k = p ^ a * k * p", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> int p dvd x ^ (p ^ a * k)\n  \\<not> int p dvd y ^ (p ^ a * k)\n  int p dvd x ^ (p ^ a * k) - y ^ (p ^ a * k)\n  x ^ (p ^ a * k) \\<noteq> y ^ (p ^ a * k)\n  p ^ Suc a * k = p ^ a * k * p\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n    multiplicity (int p) (x - y) + Suc a", "using LTE.multiplicity_diff_self_pow[where x=\"?x'\" and y=\"?y'\", OF `prime p`] `p > 2`\n        and Suc.IH"], ["proof (prove)\nusing this:\n  \\<not> int p dvd x ^ (p ^ a * k)\n  \\<not> int p dvd y ^ (p ^ a * k)\n  int p dvd x ^ (p ^ a * k) - y ^ (p ^ a * k)\n  x ^ (p ^ a * k) \\<noteq> y ^ (p ^ a * k)\n  p ^ Suc a * k = p ^ a * k * p\n  \\<lbrakk>int p dvd x ^ (p ^ a * k) - y ^ (p ^ a * k);\n   \\<not> int p dvd x ^ (p ^ a * k); \\<not> int p dvd y ^ (p ^ a * k);\n   2 < p; x ^ (p ^ a * k) \\<noteq> y ^ (p ^ a * k)\\<rbrakk>\n  \\<Longrightarrow> multiplicity (int p)\n                     ((x ^ (p ^ a * k)) ^ p - (y ^ (p ^ a * k)) ^ p) =\n                    Suc (multiplicity (int p)\n                          (x ^ (p ^ a * k) - y ^ (p ^ a * k)))\n  2 < p\n  multiplicity (int p) (x ^ (p ^ a * k) - y ^ (p ^ a * k)) =\n  multiplicity (int p) (x - y) + a\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n    multiplicity (int p) (x - y) + Suc a", "by (metis add_Suc_right power_mult)"], ["proof (state)\nthis:\n  multiplicity (int p) (x ^ (p ^ Suc a * k) - y ^ (p ^ Suc a * k)) =\n  multiplicity (int p) (x - y) + Suc a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  multiplicity (int p) (x ^ (p ^ ?a * k) - y ^ (p ^ ?a * k)) =\n  multiplicity (int p) (x - y) + ?a\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) =\n    multiplicity (int p) (x - y) + multiplicity p n", "with n"], ["proof (chain)\npicking this:\n  n = p ^ multiplicity p n * k\n  multiplicity (int p) (x ^ (p ^ ?a * k) - y ^ (p ^ ?a * k)) =\n  multiplicity (int p) (x - y) + ?a", "show ?thesis"], ["proof (prove)\nusing this:\n  n = p ^ multiplicity p n * k\n  multiplicity (int p) (x ^ (p ^ ?a * k) - y ^ (p ^ ?a * k)) =\n  multiplicity (int p) (x - y) + ?a\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n - y ^ n) =\n    multiplicity (int p) (x - y) + multiplicity p n", "by metis"], ["proof (state)\nthis:\n  multiplicity (int p) (x ^ n - y ^ n) =\n  multiplicity (int p) (x - y) + multiplicity p n\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>Theorem 2:\\<close>"], ["", "corollary multiplicity_add_pow:\n  fixes x y :: int and p n :: nat\n  assumes \"odd n\"\n    and \"prime p\" and \"p > 2\"\n    and \"p dvd x + y\" and \"\\<not> p dvd x\"  \"\\<not> p dvd y\"\n    and \"x \\<noteq> -y\"\n  shows \"multiplicity p (x^n + y^n) = multiplicity p (x + y) + multiplicity p n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n + y ^ n) =\n    multiplicity (int p) (x + y) + multiplicity p n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n + y ^ n) =\n    multiplicity (int p) (x + y) + multiplicity p n", "have [simp]: \"(-y)^n = -(y^n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- y) ^ n = - (y ^ n)", "using `odd n`"], ["proof (prove)\nusing this:\n  odd n\n\ngoal (1 subgoal):\n 1. (- y) ^ n = - (y ^ n)", "by (rule power_minus_odd)"], ["proof (state)\nthis:\n  (- y) ^ n = - (y ^ n)\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n + y ^ n) =\n    multiplicity (int p) (x + y) + multiplicity p n", "moreover"], ["proof (state)\nthis:\n  (- y) ^ n = - (y ^ n)\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n + y ^ n) =\n    multiplicity (int p) (x + y) + multiplicity p n", "have \"n > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n", "using `odd n`"], ["proof (prove)\nusing this:\n  odd n\n\ngoal (1 subgoal):\n 1. 0 < n", "by presburger"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n + y ^ n) =\n    multiplicity (int p) (x + y) + multiplicity p n", "with assms"], ["proof (chain)\npicking this:\n  odd n\n  prime p\n  2 < p\n  int p dvd x + y\n  \\<not> int p dvd x\n  \\<not> int p dvd y\n  x \\<noteq> - y\n  0 < n", "show ?thesis"], ["proof (prove)\nusing this:\n  odd n\n  prime p\n  2 < p\n  int p dvd x + y\n  \\<not> int p dvd x\n  \\<not> int p dvd y\n  x \\<noteq> - y\n  0 < n\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n + y ^ n) =\n    multiplicity (int p) (x + y) + multiplicity p n", "using multiplicity_diff_pow[where x=x and y=\"-y\" and n=n]"], ["proof (prove)\nusing this:\n  odd n\n  prime p\n  2 < p\n  int p dvd x + y\n  \\<not> int p dvd x\n  \\<not> int p dvd y\n  x \\<noteq> - y\n  0 < n\n  \\<lbrakk>prime ?p; int ?p dvd x - - y; \\<not> int ?p dvd x;\n   \\<not> int ?p dvd - y; 2 < ?p; x \\<noteq> - y; 0 < n\\<rbrakk>\n  \\<Longrightarrow> multiplicity (int ?p) (x ^ n - (- y) ^ n) =\n                    multiplicity (int ?p) (x - - y) + multiplicity ?p n\n\ngoal (1 subgoal):\n 1. multiplicity (int p) (x ^ n + y ^ n) =\n    multiplicity (int p) (x + y) + multiplicity p n", "by simp"], ["proof (state)\nthis:\n  multiplicity (int p) (x ^ n + y ^ n) =\n  multiplicity (int p) (x + y) + multiplicity p n\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>The \\<open>p = 2\\<close> case\\<close>"], ["", "text \\<open>Theorem 3:\\<close>"], ["", "theorem multiplicity_2_diff_pow_4div:\n  fixes x y :: int\n  assumes \"odd x\"  \"odd y\" and \"4 dvd x - y\" and \"n > 0\"  \"x \\<noteq> y\"\n  shows \"multiplicity 2 (x^n - y^n) = multiplicity 2 (x - y) + multiplicity 2 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "have \"prime (2::nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime 2", "by simp"], ["proof (state)\nthis:\n  prime 2\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "then"], ["proof (chain)\npicking this:\n  prime 2", "obtain k where n: \"n = 2^multiplicity 2 n * k\" and \"\\<not> 2 dvd k\""], ["proof (prove)\nusing this:\n  prime 2\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>n = 2 ^ multiplicity 2 n * k; odd k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using `n > 0`"], ["proof (prove)\nusing this:\n  prime 2\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>n = 2 ^ multiplicity 2 n * k; odd k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis neq0_conv not_prime_unit multiplicity_decompose')"], ["proof (state)\nthis:\n  n = 2 ^ multiplicity 2 n * k\n  odd k\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "have pow2: \"multiplicity 2 (x^(2^k) - y^(2^k)) = multiplicity 2 (x - y) + k\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) = multiplicity 2 (x - y) + k", "proof (induction k)"], ["proof (state)\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "case (Suc k)"], ["proof (state)\nthis:\n  multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) = multiplicity 2 (x - y) + k\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "have \"x^(2^Suc k) - y^(2^Suc k) = (x^2^k)^2 - (y^2^k)^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ 2 ^ Suc k - y ^ 2 ^ Suc k =\n    (x ^ 2 ^ k)\\<^sup>2 - (y ^ 2 ^ k)\\<^sup>2", "by (simp flip: power_mult algebra_simps)"], ["proof (state)\nthis:\n  x ^ 2 ^ Suc k - y ^ 2 ^ Suc k = (x ^ 2 ^ k)\\<^sup>2 - (y ^ 2 ^ k)\\<^sup>2\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "also"], ["proof (state)\nthis:\n  x ^ 2 ^ Suc k - y ^ 2 ^ Suc k = (x ^ 2 ^ k)\\<^sup>2 - (y ^ 2 ^ k)\\<^sup>2\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "have \"... = (x^2^k - y^2^k)*(x^2^k + y^2^k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x ^ 2 ^ k)\\<^sup>2 - (y ^ 2 ^ k)\\<^sup>2 =\n    (x ^ 2 ^ k - y ^ 2 ^ k) * (x ^ 2 ^ k + y ^ 2 ^ k)", "by (simp add: power2_eq_square algebra_simps)"], ["proof (state)\nthis:\n  (x ^ 2 ^ k)\\<^sup>2 - (y ^ 2 ^ k)\\<^sup>2 =\n  (x ^ 2 ^ k - y ^ 2 ^ k) * (x ^ 2 ^ k + y ^ 2 ^ k)\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "finally"], ["proof (chain)\npicking this:\n  x ^ 2 ^ Suc k - y ^ 2 ^ Suc k =\n  (x ^ 2 ^ k - y ^ 2 ^ k) * (x ^ 2 ^ k + y ^ 2 ^ k)", "have factor: \"x^(2^Suc k) - y^(2^Suc k) = (x^2^k - y^2^k)*(x^2^k + y^2^k)\""], ["proof (prove)\nusing this:\n  x ^ 2 ^ Suc k - y ^ 2 ^ Suc k =\n  (x ^ 2 ^ k - y ^ 2 ^ k) * (x ^ 2 ^ k + y ^ 2 ^ k)\n\ngoal (1 subgoal):\n 1. x ^ 2 ^ Suc k - y ^ 2 ^ Suc k =\n    (x ^ 2 ^ k - y ^ 2 ^ k) * (x ^ 2 ^ k + y ^ 2 ^ k)", "."], ["proof (state)\nthis:\n  x ^ 2 ^ Suc k - y ^ 2 ^ Suc k =\n  (x ^ 2 ^ k - y ^ 2 ^ k) * (x ^ 2 ^ k + y ^ 2 ^ k)\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "moreover"], ["proof (state)\nthis:\n  x ^ 2 ^ Suc k - y ^ 2 ^ Suc k =\n  (x ^ 2 ^ k - y ^ 2 ^ k) * (x ^ 2 ^ k + y ^ 2 ^ k)\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "have m_plus: \"multiplicity 2 (x^2^k + y^2^k) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k) = 1", "proof (rule multiplicity_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. 2 ^ 1 dvd x ^ 2 ^ k + y ^ 2 ^ k\n 2. \\<not> 2 ^ Suc 1 dvd x ^ 2 ^ k + y ^ 2 ^ k", "show \"2^1 dvd x^2^k + y^2^k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 ^ 1 dvd x ^ 2 ^ k + y ^ 2 ^ k", "using `odd x` and `odd y`"], ["proof (prove)\nusing this:\n  odd x\n  odd y\n\ngoal (1 subgoal):\n 1. 2 ^ 1 dvd x ^ 2 ^ k + y ^ 2 ^ k", "by simp"], ["proof (state)\nthis:\n  2 ^ 1 dvd x ^ 2 ^ k + y ^ 2 ^ k\n\ngoal (1 subgoal):\n 1. \\<not> 2 ^ Suc 1 dvd x ^ 2 ^ k + y ^ 2 ^ k", "have \"[x^2^k + y^2^k = 2] (mod 4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "proof (cases k)"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "case 0"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "from `odd y`"], ["proof (chain)\npicking this:\n  odd y", "have \"[y = 1] (mod 2)\""], ["proof (prove)\nusing this:\n  odd y\n\ngoal (1 subgoal):\n 1. [y = 1] (mod 2)", "using cong_def"], ["proof (prove)\nusing this:\n  odd y\n  [?b = ?c] (mod ?a) = (?b mod ?a = ?c mod ?a)\n\ngoal (1 subgoal):\n 1. [y = 1] (mod 2)", "by fastforce"], ["proof (state)\nthis:\n  [y = 1] (mod 2)\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "hence \"[2*y = 2] (mod 4)\""], ["proof (prove)\nusing this:\n  [y = 1] (mod 2)\n\ngoal (1 subgoal):\n 1. [2 * y = 2] (mod 4)", "using cong_scale[where k=2 and b=1 and c=2, simplified]"], ["proof (prove)\nusing this:\n  [y = 1] (mod 2)\n  (2::?'a1) \\<noteq> (0::?'a1) \\<Longrightarrow>\n  [?a = 1::?'a1] (mod 2::?'a1) = [(2::?'a1) * ?a = 2::?'a1] (mod 4::?'a1)\n\ngoal (1 subgoal):\n 1. [2 * y = 2] (mod 4)", "by force"], ["proof (state)\nthis:\n  [2 * y = 2] (mod 4)\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "moreover"], ["proof (state)\nthis:\n  [2 * y = 2] (mod 4)\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "from `4 dvd x - y`"], ["proof (chain)\npicking this:\n  4 dvd x - y", "have \"[x - y = 0] (mod 4)\""], ["proof (prove)\nusing this:\n  4 dvd x - y\n\ngoal (1 subgoal):\n 1. [x - y = 0] (mod 4)", "by (simp add: cong_0_iff)"], ["proof (state)\nthis:\n  [x - y = 0] (mod 4)\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "ultimately"], ["proof (chain)\npicking this:\n  [2 * y = 2] (mod 4)\n  [x - y = 0] (mod 4)", "have \"[x + y = 2] (mod 4)\""], ["proof (prove)\nusing this:\n  [2 * y = 2] (mod 4)\n  [x - y = 0] (mod 4)\n\ngoal (1 subgoal):\n 1. [x + y = 2] (mod 4)", "by (smt cong_add)"], ["proof (state)\nthis:\n  [x + y = 2] (mod 4)\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "with `k = 0`"], ["proof (chain)\npicking this:\n  k = 0\n  [x + y = 2] (mod 4)", "show ?thesis"], ["proof (prove)\nusing this:\n  k = 0\n  [x + y = 2] (mod 4)\n\ngoal (1 subgoal):\n 1. [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "by simp"], ["proof (state)\nthis:\n  [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "case (Suc k')"], ["proof (state)\nthis:\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "then"], ["proof (chain)\npicking this:\n  k = Suc k'", "have \"[x^2^k = 1] (mod 4)\" and \"[y^2^k = 1] (mod 4)\""], ["proof (prove)\nusing this:\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. [x ^ 2 ^ k = 1] (mod 4) &&& [y ^ 2 ^ k = 1] (mod 4)", "using `odd x` `odd y`"], ["proof (prove)\nusing this:\n  k = Suc k'\n  odd x\n  odd y\n\ngoal (1 subgoal):\n 1. [x ^ 2 ^ k = 1] (mod 4) &&& [y ^ 2 ^ k = 1] (mod 4)", "by (auto simp add: power_mult power_Suc2 simp del: power_Suc intro: odd_square_mod_4)"], ["proof (state)\nthis:\n  [x ^ 2 ^ k = 1] (mod 4)\n  [y ^ 2 ^ k = 1] (mod 4)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "thus \"[x^2^k + y^2^k = 2] (mod 4)\""], ["proof (prove)\nusing this:\n  [x ^ 2 ^ k = 1] (mod 4)\n  [y ^ 2 ^ k = 1] (mod 4)\n\ngoal (1 subgoal):\n 1. [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)", "by (smt cong_add)"], ["proof (state)\nthis:\n  [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)\n\ngoal (1 subgoal):\n 1. \\<not> 2 ^ Suc 1 dvd x ^ 2 ^ k + y ^ 2 ^ k", "thus \"\\<not> 2^Suc 1 dvd x^2^k + y^2^k\""], ["proof (prove)\nusing this:\n  [x ^ 2 ^ k + y ^ 2 ^ k = 2] (mod 4)\n\ngoal (1 subgoal):\n 1. \\<not> 2 ^ Suc 1 dvd x ^ 2 ^ k + y ^ 2 ^ k", "by (simp add: cong_dvd_iff)"], ["proof (state)\nthis:\n  \\<not> 2 ^ Suc 1 dvd x ^ 2 ^ k + y ^ 2 ^ k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k) = 1\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "moreover"], ["proof (state)\nthis:\n  multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k) = 1\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "have \"x^2^k + y^2^k \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ 2 ^ k + y ^ 2 ^ k \\<noteq> 0", "using m_plus multiplicity_zero"], ["proof (prove)\nusing this:\n  multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k) = 1\n  multiplicity ?p (0::?'a) = 0\n\ngoal (1 subgoal):\n 1. x ^ 2 ^ k + y ^ 2 ^ k \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  x ^ 2 ^ k + y ^ 2 ^ k \\<noteq> 0\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "moreover"], ["proof (state)\nthis:\n  x ^ 2 ^ k + y ^ 2 ^ k \\<noteq> 0\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "have \"x^2^k - y^2^k \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ 2 ^ k - y ^ 2 ^ k \\<noteq> 0", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. x ^ 2 ^ k - y ^ 2 ^ k = 0 \\<Longrightarrow> False", "assume \"x^2^k - y^2^k = 0\""], ["proof (state)\nthis:\n  x ^ 2 ^ k - y ^ 2 ^ k = 0\n\ngoal (1 subgoal):\n 1. x ^ 2 ^ k - y ^ 2 ^ k = 0 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  x ^ 2 ^ k - y ^ 2 ^ k = 0", "have \"\\<bar>x\\<bar> = \\<bar>y\\<bar>\""], ["proof (prove)\nusing this:\n  x ^ 2 ^ k - y ^ 2 ^ k = 0\n\ngoal (1 subgoal):\n 1. \\<bar>x\\<bar> = \\<bar>y\\<bar>", "by (intro power_eq_abs, simp, simp)"], ["proof (state)\nthis:\n  \\<bar>x\\<bar> = \\<bar>y\\<bar>\n\ngoal (1 subgoal):\n 1. x ^ 2 ^ k - y ^ 2 ^ k = 0 \\<Longrightarrow> False", "hence \"x = y \\<or> x = -y\""], ["proof (prove)\nusing this:\n  \\<bar>x\\<bar> = \\<bar>y\\<bar>\n\ngoal (1 subgoal):\n 1. x = y \\<or> x = - y", "using abs_eq_iff"], ["proof (prove)\nusing this:\n  \\<bar>x\\<bar> = \\<bar>y\\<bar>\n  (\\<bar>?x\\<bar> = \\<bar>?y\\<bar>) = (?x = ?y \\<or> ?x = - ?y)\n\ngoal (1 subgoal):\n 1. x = y \\<or> x = - y", "by auto"], ["proof (state)\nthis:\n  x = y \\<or> x = - y\n\ngoal (1 subgoal):\n 1. x ^ 2 ^ k - y ^ 2 ^ k = 0 \\<Longrightarrow> False", "with `x \\<noteq> y`"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  x = y \\<or> x = - y", "have \"x = -y\""], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  x = y \\<or> x = - y\n\ngoal (1 subgoal):\n 1. x = - y", "by simp"], ["proof (state)\nthis:\n  x = - y\n\ngoal (1 subgoal):\n 1. x ^ 2 ^ k - y ^ 2 ^ k = 0 \\<Longrightarrow> False", "with `4 dvd x - y`"], ["proof (chain)\npicking this:\n  4 dvd x - y\n  x = - y", "have \"4 dvd 2*x\""], ["proof (prove)\nusing this:\n  4 dvd x - y\n  x = - y\n\ngoal (1 subgoal):\n 1. 4 dvd 2 * x", "by simp"], ["proof (state)\nthis:\n  4 dvd 2 * x\n\ngoal (1 subgoal):\n 1. x ^ 2 ^ k - y ^ 2 ^ k = 0 \\<Longrightarrow> False", "hence \"2 dvd x\""], ["proof (prove)\nusing this:\n  4 dvd 2 * x\n\ngoal (1 subgoal):\n 1. even x", "by auto"], ["proof (state)\nthis:\n  even x\n\ngoal (1 subgoal):\n 1. x ^ 2 ^ k - y ^ 2 ^ k = 0 \\<Longrightarrow> False", "with `odd x`"], ["proof (chain)\npicking this:\n  odd x\n  even x", "show False"], ["proof (prove)\nusing this:\n  odd x\n  even x\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x ^ 2 ^ k - y ^ 2 ^ k \\<noteq> 0\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "ultimately"], ["proof (chain)\npicking this:\n  x ^ 2 ^ Suc k - y ^ 2 ^ Suc k =\n  (x ^ 2 ^ k - y ^ 2 ^ k) * (x ^ 2 ^ k + y ^ 2 ^ k)\n  multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k) = 1\n  x ^ 2 ^ k + y ^ 2 ^ k \\<noteq> 0\n  x ^ 2 ^ k - y ^ 2 ^ k \\<noteq> 0", "have \"multiplicity 2 (x^2^Suc k - y^2^Suc k) =\n            multiplicity 2 (x^2^k - y^2^k) + multiplicity 2 (x^2^k + y^2^k)\""], ["proof (prove)\nusing this:\n  x ^ 2 ^ Suc k - y ^ 2 ^ Suc k =\n  (x ^ 2 ^ k - y ^ 2 ^ k) * (x ^ 2 ^ k + y ^ 2 ^ k)\n  multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k) = 1\n  x ^ 2 ^ k + y ^ 2 ^ k \\<noteq> 0\n  x ^ 2 ^ k - y ^ 2 ^ k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n    multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) +\n    multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k)", "by (unfold factor; intro prime_elem_multiplicity_mult_distrib; auto)"], ["proof (state)\nthis:\n  multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n  multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) +\n  multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k)\n\ngoal (2 subgoals):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0\n 2. \\<And>k.\n       multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) =\n       multiplicity 2 (x - y) + k \\<Longrightarrow>\n       multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n       multiplicity 2 (x - y) + Suc k", "then"], ["proof (chain)\npicking this:\n  multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n  multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) +\n  multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k)", "show ?case"], ["proof (prove)\nusing this:\n  multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n  multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) +\n  multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k)\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n    multiplicity 2 (x - y) + Suc k", "using m_plus Suc.IH"], ["proof (prove)\nusing this:\n  multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n  multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) +\n  multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k)\n  multiplicity 2 (x ^ 2 ^ k + y ^ 2 ^ k) = 1\n  multiplicity 2 (x ^ 2 ^ k - y ^ 2 ^ k) = multiplicity 2 (x - y) + k\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n    multiplicity 2 (x - y) + Suc k", "by simp"], ["proof (state)\nthis:\n  multiplicity 2 (x ^ 2 ^ Suc k - y ^ 2 ^ Suc k) =\n  multiplicity 2 (x - y) + Suc k\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ 2 ^ 0 - y ^ 2 ^ 0) = multiplicity 2 (x - y) + 0", "qed simp"], ["proof (state)\nthis:\n  multiplicity 2 (x ^ 2 ^ ?k - y ^ 2 ^ ?k) = multiplicity 2 (x - y) + ?k\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "moreover"], ["proof (state)\nthis:\n  multiplicity 2 (x ^ 2 ^ ?k - y ^ 2 ^ ?k) = multiplicity 2 (x - y) + ?k\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "have even_diff: \"int 2 dvd x^2^multiplicity 2 n - y^2^multiplicity 2 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int 2 dvd x ^ 2 ^ multiplicity 2 n - y ^ 2 ^ multiplicity 2 n", "using `odd x` and `odd y`"], ["proof (prove)\nusing this:\n  odd x\n  odd y\n\ngoal (1 subgoal):\n 1. int 2 dvd x ^ 2 ^ multiplicity 2 n - y ^ 2 ^ multiplicity 2 n", "by simp"], ["proof (state)\nthis:\n  int 2 dvd x ^ 2 ^ multiplicity 2 n - y ^ 2 ^ multiplicity 2 n\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "moreover"], ["proof (state)\nthis:\n  int 2 dvd x ^ 2 ^ multiplicity 2 n - y ^ 2 ^ multiplicity 2 n\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "have odd_parts: \"\\<not> int 2 dvd x^2^multiplicity 2 n\"   \"\\<not> int 2 dvd y^2^multiplicity 2 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> int 2 dvd x ^ 2 ^ multiplicity 2 n &&&\n    \\<not> int 2 dvd y ^ 2 ^ multiplicity 2 n", "using `odd x` and `odd y`"], ["proof (prove)\nusing this:\n  odd x\n  odd y\n\ngoal (1 subgoal):\n 1. \\<not> int 2 dvd x ^ 2 ^ multiplicity 2 n &&&\n    \\<not> int 2 dvd y ^ 2 ^ multiplicity 2 n", "by simp+"], ["proof (state)\nthis:\n  \\<not> int 2 dvd x ^ 2 ^ multiplicity 2 n\n  \\<not> int 2 dvd y ^ 2 ^ multiplicity 2 n\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "moreover"], ["proof (state)\nthis:\n  \\<not> int 2 dvd x ^ 2 ^ multiplicity 2 n\n  \\<not> int 2 dvd y ^ 2 ^ multiplicity 2 n\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "have coprime: \"coprime 2 k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime 2 k", "using `\\<not> 2 dvd k`"], ["proof (prove)\nusing this:\n  odd k\n\ngoal (1 subgoal):\n 1. coprime 2 k", "by simp"], ["proof (state)\nthis:\n  coprime 2 k\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "apply (subst (1) n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ (2 ^ multiplicity 2 n * k) - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "apply (subst (2) n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2\n     (x ^ (2 ^ multiplicity 2 n * k) - y ^ (2 ^ multiplicity 2 n * k)) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "apply (simp only: power_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2\n     ((x ^ 2 ^ multiplicity 2 n) ^ k - (y ^ 2 ^ multiplicity 2 n) ^ k) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "apply (simp only: multiplicity_diff_pow_coprime[OF `prime 2` even_diff odd_parts coprime, simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ 2 ^ multiplicity 2 n - y ^ 2 ^ multiplicity 2 n) =\n    multiplicity 2 (x - y) + multiplicity 2 n", "by (rule pow2)"], ["proof (state)\nthis:\n  multiplicity 2 (x ^ n - y ^ n) = multiplicity 2 (x - y) + multiplicity 2 n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Theorem 4:\\<close>"], ["", "theorem multiplicity_2_diff_even_pow:\n  fixes x y :: int\n  assumes \"odd x\"  \"odd y\" and \"even n\" and \"n > 0\" and \"\\<bar>x\\<bar> \\<noteq> \\<bar>y\\<bar>\"\n  shows \"multiplicity 2 (x^n - y^n) = multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "obtain n' where \"n = 2*n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n'. n = 2 * n' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using `even n`"], ["proof (prove)\nusing this:\n  even n\n\ngoal (1 subgoal):\n 1. (\\<And>n'. n = 2 * n' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  n = 2 * n'\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "with `n > 0`"], ["proof (chain)\npicking this:\n  0 < n\n  n = 2 * n'", "have \"n' > 0\""], ["proof (prove)\nusing this:\n  0 < n\n  n = 2 * n'\n\ngoal (1 subgoal):\n 1. 0 < n'", "by simp"], ["proof (state)\nthis:\n  0 < n'\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "moreover"], ["proof (state)\nthis:\n  0 < n'\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "have \"4 dvd x^2 - y^2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 4 dvd x\\<^sup>2 - y\\<^sup>2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 4 dvd x\\<^sup>2 - y\\<^sup>2", "have \"x^2 - y^2 = (x + y) * (x - y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>2 - y\\<^sup>2 = (x + y) * (x - y)", "by (simp add: algebra_simps power2_eq_square)"], ["proof (state)\nthis:\n  x\\<^sup>2 - y\\<^sup>2 = (x + y) * (x - y)\n\ngoal (1 subgoal):\n 1. 4 dvd x\\<^sup>2 - y\\<^sup>2", "moreover"], ["proof (state)\nthis:\n  x\\<^sup>2 - y\\<^sup>2 = (x + y) * (x - y)\n\ngoal (1 subgoal):\n 1. 4 dvd x\\<^sup>2 - y\\<^sup>2", "have \"2 dvd x + y\" and \"2 dvd x - y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (x + y) &&& even (x - y)", "using `odd x` and `odd y`"], ["proof (prove)\nusing this:\n  odd x\n  odd y\n\ngoal (1 subgoal):\n 1. even (x + y) &&& even (x - y)", "by auto"], ["proof (state)\nthis:\n  even (x + y)\n  even (x - y)\n\ngoal (1 subgoal):\n 1. 4 dvd x\\<^sup>2 - y\\<^sup>2", "ultimately"], ["proof (chain)\npicking this:\n  x\\<^sup>2 - y\\<^sup>2 = (x + y) * (x - y)\n  even (x + y)\n  even (x - y)", "show \"4 dvd x^2 - y^2\""], ["proof (prove)\nusing this:\n  x\\<^sup>2 - y\\<^sup>2 = (x + y) * (x - y)\n  even (x + y)\n  even (x - y)\n\ngoal (1 subgoal):\n 1. 4 dvd x\\<^sup>2 - y\\<^sup>2", "by fastforce"], ["proof (state)\nthis:\n  4 dvd x\\<^sup>2 - y\\<^sup>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  4 dvd x\\<^sup>2 - y\\<^sup>2\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "moreover"], ["proof (state)\nthis:\n  4 dvd x\\<^sup>2 - y\\<^sup>2\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "have \"odd (x^2)\" and \"odd (y^2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (x\\<^sup>2) &&& odd (y\\<^sup>2)", "using `odd x` `odd y`"], ["proof (prove)\nusing this:\n  odd x\n  odd y\n\ngoal (1 subgoal):\n 1. odd (x\\<^sup>2) &&& odd (y\\<^sup>2)", "by auto"], ["proof (state)\nthis:\n  odd (x\\<^sup>2)\n  odd (y\\<^sup>2)\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "moreover"], ["proof (state)\nthis:\n  odd (x\\<^sup>2)\n  odd (y\\<^sup>2)\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "from `\\<bar>x\\<bar> \\<noteq> \\<bar>y\\<bar>`"], ["proof (chain)\npicking this:\n  \\<bar>x\\<bar> \\<noteq> \\<bar>y\\<bar>", "have \"x^2 \\<noteq> y^2\""], ["proof (prove)\nusing this:\n  \\<bar>x\\<bar> \\<noteq> \\<bar>y\\<bar>\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 \\<noteq> y\\<^sup>2", "using diff_0 diff_0_right power2_eq_iff"], ["proof (prove)\nusing this:\n  \\<bar>x\\<bar> \\<noteq> \\<bar>y\\<bar>\n  (0::?'a) - ?a = - ?a\n  ?a - (0::?'a) = ?a\n  (?x\\<^sup>2 = ?y\\<^sup>2) = (?x = ?y \\<or> ?x = - ?y)\n\ngoal (1 subgoal):\n 1. x\\<^sup>2 \\<noteq> y\\<^sup>2", "by fastforce"], ["proof (state)\nthis:\n  x\\<^sup>2 \\<noteq> y\\<^sup>2\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "ultimately"], ["proof (chain)\npicking this:\n  0 < n'\n  4 dvd x\\<^sup>2 - y\\<^sup>2\n  odd (x\\<^sup>2)\n  odd (y\\<^sup>2)\n  x\\<^sup>2 \\<noteq> y\\<^sup>2", "have \"multiplicity 2 ((x^2)^n' - (y^2)^n') = multiplicity 2 (x^2 - y^2) + multiplicity 2 n'\""], ["proof (prove)\nusing this:\n  0 < n'\n  4 dvd x\\<^sup>2 - y\\<^sup>2\n  odd (x\\<^sup>2)\n  odd (y\\<^sup>2)\n  x\\<^sup>2 \\<noteq> y\\<^sup>2\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x\\<^sup>2 ^ n' - y\\<^sup>2 ^ n') =\n    multiplicity 2 (x\\<^sup>2 - y\\<^sup>2) + multiplicity 2 n'", "by (intro multiplicity_2_diff_pow_4div)"], ["proof (state)\nthis:\n  multiplicity 2 (x\\<^sup>2 ^ n' - y\\<^sup>2 ^ n') =\n  multiplicity 2 (x\\<^sup>2 - y\\<^sup>2) + multiplicity 2 n'\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "also"], ["proof (state)\nthis:\n  multiplicity 2 (x\\<^sup>2 ^ n' - y\\<^sup>2 ^ n') =\n  multiplicity 2 (x\\<^sup>2 - y\\<^sup>2) + multiplicity 2 n'\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "have \"multiplicity 2 ((x^2)^n' - (y^2)^n') = multiplicity 2 (x^n - y^n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 (x\\<^sup>2 ^ n' - y\\<^sup>2 ^ n') =\n    multiplicity 2 (x ^ n - y ^ n)", "unfolding `n = 2*n'`"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 (x\\<^sup>2 ^ n' - y\\<^sup>2 ^ n') =\n    multiplicity 2 (x ^ (2 * n') - y ^ (2 * n'))", "by (simp add: power_mult)"], ["proof (state)\nthis:\n  multiplicity 2 (x\\<^sup>2 ^ n' - y\\<^sup>2 ^ n') =\n  multiplicity 2 (x ^ n - y ^ n)\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "also"], ["proof (state)\nthis:\n  multiplicity 2 (x\\<^sup>2 ^ n' - y\\<^sup>2 ^ n') =\n  multiplicity 2 (x ^ n - y ^ n)\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "have \"multiplicity 2 (x^2 - y^2) = multiplicity 2 ((x - y) * (x + y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 (x\\<^sup>2 - y\\<^sup>2) =\n    multiplicity 2 ((x - y) * (x + y))", "by (simp add: algebra_simps power2_eq_square)"], ["proof (state)\nthis:\n  multiplicity 2 (x\\<^sup>2 - y\\<^sup>2) =\n  multiplicity 2 ((x - y) * (x + y))\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "also"], ["proof (state)\nthis:\n  multiplicity 2 (x\\<^sup>2 - y\\<^sup>2) =\n  multiplicity 2 ((x - y) * (x + y))\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "have \"... = multiplicity 2 (x - y) + multiplicity 2 (x + y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 ((x - y) * (x + y)) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y)", "using `\\<bar>x\\<bar> \\<noteq> \\<bar>y\\<bar>`"], ["proof (prove)\nusing this:\n  \\<bar>x\\<bar> \\<noteq> \\<bar>y\\<bar>\n\ngoal (1 subgoal):\n 1. multiplicity 2 ((x - y) * (x + y)) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y)", "by (auto intro: prime_elem_multiplicity_mult_distrib)"], ["proof (state)\nthis:\n  multiplicity 2 ((x - y) * (x + y)) =\n  multiplicity 2 (x - y) + multiplicity 2 (x + y)\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "also"], ["proof (state)\nthis:\n  multiplicity 2 ((x - y) * (x + y)) =\n  multiplicity 2 (x - y) + multiplicity 2 (x + y)\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "have \"multiplicity 2 n = Suc (multiplicity 2 n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 n = Suc (multiplicity 2 n')", "unfolding `n = 2*n'`"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity 2 (2 * n') = Suc (multiplicity 2 n')", "using `n' > 0`"], ["proof (prove)\nusing this:\n  0 < n'\n\ngoal (1 subgoal):\n 1. multiplicity 2 (2 * n') = Suc (multiplicity 2 n')", "by (simp add: multiplicity_times_same)"], ["proof (state)\nthis:\n  multiplicity 2 n = Suc (multiplicity 2 n')\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "ultimately"], ["proof (chain)\npicking this:\n  multiplicity 2 (x ^ n - y ^ n) =\n  multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n'\n  multiplicity 2 n = Suc (multiplicity 2 n')", "show ?thesis"], ["proof (prove)\nusing this:\n  multiplicity 2 (x ^ n - y ^ n) =\n  multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n'\n  multiplicity 2 n = Suc (multiplicity 2 n')\n\ngoal (1 subgoal):\n 1. multiplicity 2 (x ^ n - y ^ n) =\n    multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1", "by simp"], ["proof (state)\nthis:\n  multiplicity 2 (x ^ n - y ^ n) =\n  multiplicity 2 (x - y) + multiplicity 2 (x + y) + multiplicity 2 n - 1\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}