{"file_name": "/home/qj213/afp-2021-10-22/thys/Launchbury/Env.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Launchbury", "problem_names": ["lemma bot_edom[simp]: \"edom \\<bottom> = {}\"", "lemma bot_edom2[simp]: \"edom (\\<lambda>_ . \\<bottom>) = {}\"", "lemma edomIff: \"(a \\<in> edom m) = (m a \\<noteq> \\<bottom>)\"", "lemma edom_iff2: \"(m a = \\<bottom>) \\<longleftrightarrow> (a \\<notin> edom m)\"", "lemma edom_empty_iff_bot: \"edom m = {} \\<longleftrightarrow> m = \\<bottom>\"", "lemma lookup_not_edom: \"x \\<notin> edom m \\<Longrightarrow> m x = \\<bottom>\"", "lemma lookup_edom[simp]: \"m x \\<noteq> \\<bottom> \\<Longrightarrow> x \\<in> edom m\"", "lemma edom_mono: \"x \\<sqsubseteq> y \\<Longrightarrow> edom x \\<subseteq> edom y\"", "lemma edom_subset_adm[simp]:\n  \"adm (\\<lambda>ae'. edom ae' \\<subseteq> S)\"", "lemma edom_fun_upd_subset: \"edom (h (x := v)) \\<subseteq> insert x (edom h)\"", "lemma env_restr_empty_iff[simp]: \"m f|` S = \\<bottom> \\<longleftrightarrow> edom m \\<inter> S = {}\"", "lemmas env_restr_empty = iffD2[OF env_restr_empty_iff, simp]", "lemma lookup_env_restr[simp]: \"x \\<in> S \\<Longrightarrow> (m f|` S) x = m x\"", "lemma lookup_env_restr_not_there[simp]: \"x \\<notin> S \\<Longrightarrow> (env_restr S m) x = \\<bottom>\"", "lemma lookup_env_restr_eq: \"(m f|` S) x = (if x \\<in> S then m x else \\<bottom>)\"", "lemma env_restr_eqI: \"(\\<And>x. x \\<in> S \\<Longrightarrow> m\\<^sub>1 x = m\\<^sub>2 x) \\<Longrightarrow> m\\<^sub>1 f|` S = m\\<^sub>2 f|` S\"", "lemma env_restr_eqD: \"m\\<^sub>1 f|` S = m\\<^sub>2 f|` S \\<Longrightarrow> x \\<in> S \\<Longrightarrow> m\\<^sub>1 x = m\\<^sub>2 x\"", "lemma env_restr_belowI: \"(\\<And>x. x \\<in> S \\<Longrightarrow> m\\<^sub>1 x \\<sqsubseteq> m\\<^sub>2 x) \\<Longrightarrow> m\\<^sub>1 f|` S \\<sqsubseteq> m\\<^sub>2 f|` S\"", "lemma env_restr_belowD: \"m\\<^sub>1 f|` S \\<sqsubseteq> m\\<^sub>2 f|` S \\<Longrightarrow> x \\<in> S \\<Longrightarrow> m\\<^sub>1 x \\<sqsubseteq> m\\<^sub>2 x\"", "lemma env_restr_env_restr[simp]:\n \"x f|` d2 f|` d1 = x f|` (d1 \\<inter> d2)\"", "lemma env_restr_env_restr_subset:\n \"d1 \\<subseteq> d2 \\<Longrightarrow> x f|` d2 f|` d1 = x f|` d1\"", "lemma env_restr_useless: \"edom m \\<subseteq> S \\<Longrightarrow> m f|` S = m\"", "lemma env_restr_UNIV[simp]: \"m f|` UNIV = m\"", "lemma env_restr_fun_upd[simp]: \"x \\<in> S \\<Longrightarrow> m1(x := v) f|` S = (m1 f|` S)(x := v)\"", "lemma env_restr_fun_upd_other[simp]: \"x \\<notin> S \\<Longrightarrow> m1(x := v) f|` S = m1 f|` S\"", "lemma env_restr_eq_subset:\n  assumes \"S \\<subseteq> S'\"\n  and \"m1 f|` S' = m2 f|` S'\"\n  shows \"m1 f|` S = m2 f|` S\"", "lemma env_restr_below_subset:\n  assumes \"S \\<subseteq> S'\"\n  and \"m1 f|` S' \\<sqsubseteq> m2 f|` S'\"\n  shows \"m1 f|` S \\<sqsubseteq> m2 f|` S\"", "lemma edom_env[simp]:\n  \"edom (m f|` S) = edom m \\<inter> S\"", "lemma env_restr_below_self: \"f f|` S \\<sqsubseteq> f\"", "lemma env_restr_below_trans:\n  \"m1 f|` S1 \\<sqsubseteq> m2 f|` S1 \\<Longrightarrow> m2 f|` S2 \\<sqsubseteq> m3 f|` S2 \\<Longrightarrow> m1 f|` (S1 \\<inter> S2) \\<sqsubseteq> m3 f|` (S1 \\<inter> S2)\"", "lemma env_restr_cont: \"cont (env_restr S)\"", "lemma env_restr_mono: \"m1 \\<sqsubseteq> m2 \\<Longrightarrow>  m1 f|` S \\<sqsubseteq> m2 f|` S\"", "lemma env_restr_mono2: \"S2 \\<subseteq> S1  \\<Longrightarrow> m f|` S2 \\<sqsubseteq> m f|` S1\"", "lemmas cont_compose[OF env_restr_cont, cont2cont, simp]", "lemma env_restr_cong: \"(\\<And>x. edom m \\<subseteq> S \\<inter> S' \\<union> -S \\<inter> -S')  \\<Longrightarrow> m f|` S = m f|` S'\"", "lemma lookup_env_delete[simp]:\n  \"x' \\<noteq> x \\<Longrightarrow> env_delete x m x' = m x'\"", "lemma lookup_env_delete_None[simp]:\n  \"env_delete x m x = \\<bottom>\"", "lemma edom_env_delete[simp]:\n  \"edom (env_delete x m) = edom m - {x}\"", "lemma edom_env_delete_subset:\n  \"edom (env_delete x m) \\<subseteq> edom m\"", "lemma env_delete_fun_upd[simp]:\n  \"env_delete x (m(x := v)) = env_delete x m\"", "lemma env_delete_fun_upd2[simp]:\n  \"(env_delete x m)(x := v) = m(x := v)\"", "lemma env_delete_fun_upd3[simp]:\n  \"x \\<noteq> y \\<Longrightarrow> env_delete x (m(y := v)) = (env_delete x m)(y := v)\"", "lemma env_delete_noop[simp]:\n  \"x \\<notin> edom m \\<Longrightarrow> env_delete x m = m\"", "lemma fun_upd_env_delete[simp]: \"x \\<in> edom \\<Gamma> \\<Longrightarrow> (env_delete x \\<Gamma>)(x := \\<Gamma> x) = \\<Gamma>\"", "lemma env_restr_env_delete_other[simp]: \"x \\<notin> S \\<Longrightarrow> env_delete x m f|` S = m f|` S\"", "lemma env_delete_restr: \"env_delete x m = m f|` (-{x})\"", "lemma below_env_deleteI: \"f x = \\<bottom> \\<Longrightarrow> f \\<sqsubseteq> g \\<Longrightarrow> f \\<sqsubseteq> env_delete x g\"", "lemma env_delete_below_cong[intro]:\n  assumes \"x \\<noteq> v \\<Longrightarrow> e1 x \\<sqsubseteq> e2 x\"\n  shows \"env_delete v e1 x \\<sqsubseteq> env_delete v e2 x\"", "lemma env_delete_env_restr_swap:\n  \"env_delete x (env_restr S e) = env_restr S (env_delete x e)\"", "lemma env_delete_mono:\n  \"m \\<sqsubseteq> m' \\<Longrightarrow> env_delete x m \\<sqsubseteq> env_delete x m'\"", "lemma env_delete_below_arg:\n  \"env_delete x m \\<sqsubseteq> m\"", "lemma override_on_bot[simp]:\n  \"\\<bottom> ++\\<^bsub>S\\<^esub> m = m f|` S\" \n  \"m ++\\<^bsub>S\\<^esub> \\<bottom> = m f|` (-S)\"", "lemma edom_override_on[simp]: \"edom (m1 ++\\<^bsub>S\\<^esub> m2) = (edom m1 - S) \\<union> (edom m2 \\<inter> S)\"", "lemma lookup_override_on_eq: \"(m1 ++\\<^bsub>S\\<^esub> m2) x = (if x \\<in> S then m2 x else m1 x)\"", "lemma override_on_upd_swap: \n  \"x \\<notin> S \\<Longrightarrow> \\<rho>(x := z) ++\\<^bsub>S\\<^esub> \\<rho>' = (\\<rho> ++\\<^bsub>S\\<^esub> \\<rho>')(x := z)\"", "lemma override_on_upd: \n  \"x \\<in> S \\<Longrightarrow> \\<rho> ++\\<^bsub>S\\<^esub> (\\<rho>'(x := z)) = (\\<rho> ++\\<^bsub>S - {x}\\<^esub> \\<rho>')(x := z)\"", "lemma env_restr_add: \"(m1 ++\\<^bsub>S2\\<^esub> m2) f|` S = m1 f|` S ++\\<^bsub>S2\\<^esub> m2 f|` S\"", "lemma env_delete_add: \"env_delete x (m1 ++\\<^bsub>S\\<^esub> m2) = env_delete x m1 ++\\<^bsub>S - {x}\\<^esub> env_delete x m2\"", "lemma edom_join[simp]: \"edom (f \\<squnion> (g::('a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}))) = edom f \\<union> edom g\"", "lemma env_delete_join[simp]: \"env_delete x (f \\<squnion> (g::('a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}))) = env_delete x f \\<squnion> env_delete x g\"", "lemma env_restr_join:\n  fixes m1 m2 :: \"'a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}\"\n  shows \"(m1 \\<squnion> m2) f|` S = (m1 f|` S) \\<squnion> (m2 f|` S )\"", "lemma env_restr_join2:\n  fixes m :: \"'a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}\"\n  shows \"m f|` S \\<squnion> m f|` S' = m f|` (S \\<union> S')\"", "lemma join_env_restr_UNIV:\n  fixes m :: \"'a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}\"\n  shows \"S1 \\<union> S2 = UNIV \\<Longrightarrow> (m f|` S1) \\<squnion> (m f|` S2) = m\"", "lemma env_restr_split:\n  fixes m :: \"'a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}\"\n  shows \"m = m f|` S \\<squnion> m f|` (- S)\"", "lemma env_restr_below_split:\n  \"m f|` S \\<sqsubseteq> m' \\<Longrightarrow> m f|` (- S) \\<sqsubseteq> m' \\<Longrightarrow> m \\<sqsubseteq> m'\"", "lemma esing_bot[simp]: \"esing x \\<cdot> \\<bottom> = \\<bottom>\"", "lemma esing_simps[simp]:\n  \"(esing x \\<cdot> n) x = n\"\n  \"x' \\<noteq> x \\<Longrightarrow> (esing x \\<cdot> n) x' = \\<bottom>\"", "lemma esing_eq_up_iff[simp]: \"(esing x\\<cdot>(up\\<cdot>a)) y = up\\<cdot>a' \\<longleftrightarrow> (x = y \\<and> a = a')\"", "lemma esing_below_iff[simp]: \"esing x \\<cdot> a \\<sqsubseteq> ae  \\<longleftrightarrow> a \\<sqsubseteq> ae x\"", "lemma edom_esing_subset: \"edom (esing x\\<cdot>n) \\<subseteq> {x}\"", "lemma edom_esing_up[simp]: \"edom (esing x \\<cdot> (up \\<cdot> n)) = {x}\"", "lemma env_delete_esing[simp]: \"env_delete x (esing x \\<cdot> n) = \\<bottom>\"", "lemma env_restr_esing[simp]:\n  \"x\\<in> S \\<Longrightarrow> esing x\\<cdot>v f|` S = esing x\\<cdot>v\"", "lemma env_restr_esing2[simp]:\n  \"x \\<notin> S \\<Longrightarrow> esing x\\<cdot>v f|` S = \\<bottom>\"", "lemma esing_eq_iff[simp]:\n  \"esing x\\<cdot>v = esing x\\<cdot>v' \\<longleftrightarrow> v = v'\""], "translations": [["", "lemma bot_edom[simp]: \"edom \\<bottom> = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom \\<bottom> = {}", "by (simp add: edom_def)"], ["", "lemma bot_edom2[simp]: \"edom (\\<lambda>_ . \\<bottom>) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (\\<lambda>_. \\<bottom>) = {}", "by (simp add: edom_def)"], ["", "lemma edomIff: \"(a \\<in> edom m) = (m a \\<noteq> \\<bottom>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> edom m) = (m a \\<noteq> \\<bottom>)", "by (simp add: edom_def)"], ["", "lemma edom_iff2: \"(m a = \\<bottom>) \\<longleftrightarrow> (a \\<notin> edom m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m a = \\<bottom>) = (a \\<notin> edom m)", "by (simp add: edom_def)"], ["", "lemma edom_empty_iff_bot: \"edom m = {} \\<longleftrightarrow> m = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (edom m = {}) = (m = \\<bottom>)", "by (metis below_bottom_iff bot_edom edomIff empty_iff fun_belowI)"], ["", "lemma lookup_not_edom: \"x \\<notin> edom m \\<Longrightarrow> m x = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> edom m \\<Longrightarrow> m x = \\<bottom>", "by (auto iff:edomIff)"], ["", "lemma lookup_edom[simp]: \"m x \\<noteq> \\<bottom> \\<Longrightarrow> x \\<in> edom m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m x \\<noteq> \\<bottom> \\<Longrightarrow> x \\<in> edom m", "by (auto iff:edomIff)"], ["", "lemma edom_mono: \"x \\<sqsubseteq> y \\<Longrightarrow> edom x \\<subseteq> edom y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<Longrightarrow> edom x \\<subseteq> edom y", "unfolding edom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqsubseteq> y \\<Longrightarrow>\n    {xa. x xa \\<noteq> \\<bottom>} \\<subseteq> {x. y x \\<noteq> \\<bottom>}", "by auto (metis below_bottom_iff fun_belowD)"], ["", "lemma edom_subset_adm[simp]:\n  \"adm (\\<lambda>ae'. edom ae' \\<subseteq> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adm (\\<lambda>ae'. edom ae' \\<subseteq> S)", "apply (rule admI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> edom (\\<Squnion>i. Y i) \\<subseteq> S", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        x \\<in> edom (\\<Squnion>i. Y i)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "apply (subst (asm) edom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>chain Y;\n        \\<forall>i. {x. Y i x \\<noteq> \\<bottom>} \\<subseteq> S;\n        x \\<in> edom (\\<Squnion>i. Y i)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        x \\<in> {x. (\\<Squnion>i. Y i) x \\<noteq> \\<bottom>}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        (\\<Squnion>x. Y x) x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "apply (subst (asm) lub_fun)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y x.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> chain Y\n 2. \\<And>Y x.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        (\\<Squnion>i. Y i x) \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        (\\<Squnion>i. Y i x) \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "apply (subst (asm) lub_eq_bottom_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y x.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> chain (\\<lambda>i. Y i x)\n 2. \\<And>Y x.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        \\<not> (\\<forall>i. Y i x = \\<bottom>)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "apply (erule ch2ch_fun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        \\<not> (\\<forall>i. Y i x = \\<bottom>)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "unfolding not_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        \\<exists>xa. Y xa x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y x xa.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        Y xa x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S", "apply (rule subsetD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y x xa.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        Y xa x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ?A12 Y x xa \\<subseteq> S\n 2. \\<And>Y x xa.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        Y xa x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ?A12 Y x xa", "apply (rule allE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Y x xa.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        Y xa x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xb. ?P15 Y x xa xb\n 2. \\<And>Y x xa.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        Y xa x \\<noteq> \\<bottom>; ?P15 Y x xa (?x15 Y x xa)\\<rbrakk>\n       \\<Longrightarrow> ?A12 Y x xa \\<subseteq> S\n 3. \\<And>Y x xa.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        Y xa x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ?A12 Y x xa", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y x xa.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        Y xa x \\<noteq> \\<bottom>;\n        edom (Y (?x15 Y x xa)) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> ?A12 Y x xa \\<subseteq> S\n 2. \\<And>Y x xa.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        Y xa x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ?A12 Y x xa", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y x xa.\n       \\<lbrakk>chain Y; \\<forall>i. edom (Y i) \\<subseteq> S;\n        Y xa x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<in> edom (Y (?x15 Y x xa))", "unfolding edom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y x xa.\n       \\<lbrakk>chain Y;\n        \\<forall>i. {x. Y i x \\<noteq> \\<bottom>} \\<subseteq> S;\n        Y xa x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {xb. Y (?x15 Y x xa) xb \\<noteq> \\<bottom>}", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Updates\\<close>"], ["", "lemma edom_fun_upd_subset: \"edom (h (x := v)) \\<subseteq> insert x (edom h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (h(x := v)) \\<subseteq> insert x (edom h)", "by (auto simp add: edom_def)"], ["", "declare fun_upd_same[simp] fun_upd_other[simp]"], ["", "subsubsection \\<open>Restriction\\<close>"], ["", "definition env_restr :: \"'a set \\<Rightarrow> ('a \\<Rightarrow> 'b::pcpo) \\<Rightarrow> ('a \\<Rightarrow> 'b)\"\n  where \"env_restr S m = (\\<lambda> x. if x \\<in> S then m x else \\<bottom>)\""], ["", "abbreviation env_restr_rev  (infixl \"f|`\"  110)\n  where \"env_restr_rev m S \\<equiv> env_restr S m\""], ["", "notation (latex output) env_restr_rev (\"_|\\<^bsub>_\\<^esub>\")"], ["", "lemma env_restr_empty_iff[simp]: \"m f|` S = \\<bottom> \\<longleftrightarrow> edom m \\<inter> S = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m f|` S = \\<bottom>) = (edom m \\<inter> S = {})", "apply (auto simp add: edom_def env_restr_def lambda_strict[symmetric]  split:if_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>(\\<lambda>x. if x \\<in> S then m x else \\<bottom>) =\n                (\\<lambda>x. \\<bottom>);\n        x \\<in> S; m x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. {x. m x \\<noteq> \\<bottom>} \\<inter> S = {} \\<Longrightarrow>\n    (\\<lambda>x. if x \\<in> S then m x else \\<bottom>) =\n    (\\<lambda>x. \\<bottom>)", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. m x \\<noteq> \\<bottom>} \\<inter> S = {} \\<Longrightarrow>\n    (\\<lambda>x. if x \\<in> S then m x else \\<bottom>) =\n    (\\<lambda>x. \\<bottom>)", "apply (fastforce simp add: edom_def env_restr_def lambda_strict[symmetric]  split:if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas env_restr_empty = iffD2[OF env_restr_empty_iff, simp]"], ["", "lemma lookup_env_restr[simp]: \"x \\<in> S \\<Longrightarrow> (m f|` S) x = m x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow> (m f|` S) x = m x", "by (fastforce simp add: env_restr_def)"], ["", "lemma lookup_env_restr_not_there[simp]: \"x \\<notin> S \\<Longrightarrow> (env_restr S m) x = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow> (m f|` S) x = \\<bottom>", "by (fastforce simp add: env_restr_def)"], ["", "lemma lookup_env_restr_eq: \"(m f|` S) x = (if x \\<in> S then m x else \\<bottom>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m f|` S) x = (if x \\<in> S then m x else \\<bottom>)", "by simp"], ["", "lemma env_restr_eqI: \"(\\<And>x. x \\<in> S \\<Longrightarrow> m\\<^sub>1 x = m\\<^sub>2 x) \\<Longrightarrow> m\\<^sub>1 f|` S = m\\<^sub>2 f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> S \\<Longrightarrow>\n        m\\<^sub>1 x = m\\<^sub>2 x) \\<Longrightarrow>\n    m\\<^sub>1 f|` S = m\\<^sub>2 f|` S", "by (auto simp add: lookup_env_restr_eq)"], ["", "lemma env_restr_eqD: \"m\\<^sub>1 f|` S = m\\<^sub>2 f|` S \\<Longrightarrow> x \\<in> S \\<Longrightarrow> m\\<^sub>1 x = m\\<^sub>2 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m\\<^sub>1 f|` S = m\\<^sub>2 f|` S; x \\<in> S\\<rbrakk>\n    \\<Longrightarrow> m\\<^sub>1 x = m\\<^sub>2 x", "by (auto dest!: fun_cong[where x = x])"], ["", "lemma env_restr_belowI: \"(\\<And>x. x \\<in> S \\<Longrightarrow> m\\<^sub>1 x \\<sqsubseteq> m\\<^sub>2 x) \\<Longrightarrow> m\\<^sub>1 f|` S \\<sqsubseteq> m\\<^sub>2 f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> S \\<Longrightarrow>\n        m\\<^sub>1 x \\<sqsubseteq> m\\<^sub>2 x) \\<Longrightarrow>\n    m\\<^sub>1 f|` S \\<sqsubseteq> m\\<^sub>2 f|` S", "by (auto intro: fun_belowI simp add: lookup_env_restr_eq)"], ["", "lemma env_restr_belowD: \"m\\<^sub>1 f|` S \\<sqsubseteq> m\\<^sub>2 f|` S \\<Longrightarrow> x \\<in> S \\<Longrightarrow> m\\<^sub>1 x \\<sqsubseteq> m\\<^sub>2 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m\\<^sub>1 f|` S \\<sqsubseteq> m\\<^sub>2 f|` S;\n     x \\<in> S\\<rbrakk>\n    \\<Longrightarrow> m\\<^sub>1 x \\<sqsubseteq> m\\<^sub>2 x", "by (auto dest!: fun_belowD[where x = x])"], ["", "lemma env_restr_env_restr[simp]:\n \"x f|` d2 f|` d1 = x f|` (d1 \\<inter> d2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x f|` d2 f|` d1 = x f|` (d1 \\<inter> d2)", "by (fastforce simp add: env_restr_def)"], ["", "lemma env_restr_env_restr_subset:\n \"d1 \\<subseteq> d2 \\<Longrightarrow> x f|` d2 f|` d1 = x f|` d1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d1 \\<subseteq> d2 \\<Longrightarrow> x f|` d2 f|` d1 = x f|` d1", "by (metis Int_absorb2 env_restr_env_restr)"], ["", "lemma env_restr_useless: \"edom m \\<subseteq> S \\<Longrightarrow> m f|` S = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom m \\<subseteq> S \\<Longrightarrow> m f|` S = m", "by (rule ext) (auto simp add: lookup_env_restr_eq dest!: subsetD)"], ["", "lemma env_restr_UNIV[simp]: \"m f|` UNIV = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m f|` UNIV = m", "by (rule env_restr_useless) simp"], ["", "lemma env_restr_fun_upd[simp]: \"x \\<in> S \\<Longrightarrow> m1(x := v) f|` S = (m1 f|` S)(x := v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow> m1(x := v) f|` S = (m1 f|` S)(x := v)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       x \\<in> S \\<Longrightarrow>\n       (m1(x := v) f|` S) xa = ((m1 f|` S)(x := v)) xa", "apply (case_tac \"xa = x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<in> S; xa = x\\<rbrakk>\n       \\<Longrightarrow> (m1(x := v) f|` S) xa = ((m1 f|` S)(x := v)) xa\n 2. \\<And>xa.\n       \\<lbrakk>x \\<in> S; xa \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> (m1(x := v) f|` S) xa = ((m1 f|` S)(x := v)) xa", "apply (auto simp add: lookup_env_restr_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma env_restr_fun_upd_other[simp]: \"x \\<notin> S \\<Longrightarrow> m1(x := v) f|` S = m1 f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow> m1(x := v) f|` S = m1 f|` S", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       x \\<notin> S \\<Longrightarrow> (m1(x := v) f|` S) xa = (m1 f|` S) xa", "apply (case_tac \"xa = x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<notin> S; xa = x\\<rbrakk>\n       \\<Longrightarrow> (m1(x := v) f|` S) xa = (m1 f|` S) xa\n 2. \\<And>xa.\n       \\<lbrakk>x \\<notin> S; xa \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> (m1(x := v) f|` S) xa = (m1 f|` S) xa", "apply (auto simp add: lookup_env_restr_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma env_restr_eq_subset:\n  assumes \"S \\<subseteq> S'\"\n  and \"m1 f|` S' = m2 f|` S'\"\n  shows \"m1 f|` S = m2 f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m1 f|` S = m2 f|` S", "using assms"], ["proof (prove)\nusing this:\n  S \\<subseteq> S'\n  m1 f|` S' = m2 f|` S'\n\ngoal (1 subgoal):\n 1. m1 f|` S = m2 f|` S", "by (metis env_restr_env_restr le_iff_inf)"], ["", "lemma env_restr_below_subset:\n  assumes \"S \\<subseteq> S'\"\n  and \"m1 f|` S' \\<sqsubseteq> m2 f|` S'\"\n  shows \"m1 f|` S \\<sqsubseteq> m2 f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m1 f|` S \\<sqsubseteq> m2 f|` S", "using assms"], ["proof (prove)\nusing this:\n  S \\<subseteq> S'\n  m1 f|` S' \\<sqsubseteq> m2 f|` S'\n\ngoal (1 subgoal):\n 1. m1 f|` S \\<sqsubseteq> m2 f|` S", "by (auto intro!: env_restr_belowI dest!: env_restr_belowD)"], ["", "lemma edom_env[simp]:\n  \"edom (m f|` S) = edom m \\<inter> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (m f|` S) = edom m \\<inter> S", "unfolding edom_def env_restr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. (if x \\<in> S then m x else \\<bottom>) \\<noteq> \\<bottom>} =\n    {x. m x \\<noteq> \\<bottom>} \\<inter> S", "by auto"], ["", "lemma env_restr_below_self: \"f f|` S \\<sqsubseteq> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f f|` S \\<sqsubseteq> f", "by (rule fun_belowI) (auto simp add: env_restr_def)"], ["", "lemma env_restr_below_trans:\n  \"m1 f|` S1 \\<sqsubseteq> m2 f|` S1 \\<Longrightarrow> m2 f|` S2 \\<sqsubseteq> m3 f|` S2 \\<Longrightarrow> m1 f|` (S1 \\<inter> S2) \\<sqsubseteq> m3 f|` (S1 \\<inter> S2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m1 f|` S1 \\<sqsubseteq> m2 f|` S1;\n     m2 f|` S2 \\<sqsubseteq> m3 f|` S2\\<rbrakk>\n    \\<Longrightarrow> m1 f|` (S1 \\<inter> S2) \\<sqsubseteq>\n                      m3 f|` (S1 \\<inter> S2)", "by (auto intro!: env_restr_belowI dest!: env_restr_belowD elim: below_trans)"], ["", "lemma env_restr_cont: \"cont (env_restr S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cont (env_restr S)", "apply (rule cont2cont_lambda)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y. cont (\\<lambda>x. (x f|` S) y)", "unfolding env_restr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y. cont (\\<lambda>x. if y \\<in> S then x y else \\<bottom>)", "apply (intro cont2cont cont_fun)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma env_restr_mono: \"m1 \\<sqsubseteq> m2 \\<Longrightarrow>  m1 f|` S \\<sqsubseteq> m2 f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m1 \\<sqsubseteq> m2 \\<Longrightarrow> m1 f|` S \\<sqsubseteq> m2 f|` S", "by (metis env_restr_belowI fun_belowD)"], ["", "lemma env_restr_mono2: \"S2 \\<subseteq> S1  \\<Longrightarrow> m f|` S2 \\<sqsubseteq> m f|` S1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S2 \\<subseteq> S1 \\<Longrightarrow> m f|` S2 \\<sqsubseteq> m f|` S1", "by (metis env_restr_below_self env_restr_env_restr_subset)"], ["", "lemmas cont_compose[OF env_restr_cont, cont2cont, simp]"], ["", "lemma env_restr_cong: \"(\\<And>x. edom m \\<subseteq> S \\<inter> S' \\<union> -S \\<inter> -S')  \\<Longrightarrow> m f|` S = m f|` S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        edom m\n        \\<subseteq> S \\<inter> S' \\<union>\n                    - S \\<inter> - S') \\<Longrightarrow>\n    m f|` S = m f|` S'", "by (rule ext)(auto simp add: lookup_env_restr_eq edom_def)"], ["", "subsubsection \\<open>Deleting\\<close>"], ["", "definition env_delete :: \"'a \\<Rightarrow> ('a \\<Rightarrow> 'b) \\<Rightarrow> ('a \\<Rightarrow> 'b::pcpo)\"\n  where \"env_delete x m = m(x := \\<bottom>)\""], ["", "lemma lookup_env_delete[simp]:\n  \"x' \\<noteq> x \\<Longrightarrow> env_delete x m x' = m x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<noteq> x \\<Longrightarrow> env_delete x m x' = m x'", "by (simp add: env_delete_def)"], ["", "lemma lookup_env_delete_None[simp]:\n  \"env_delete x m x = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_delete x m x = \\<bottom>", "by (simp add: env_delete_def)"], ["", "lemma edom_env_delete[simp]:\n  \"edom (env_delete x m) = edom m - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (env_delete x m) = edom m - {x}", "by (auto simp add: env_delete_def edom_def)"], ["", "lemma edom_env_delete_subset:\n  \"edom (env_delete x m) \\<subseteq> edom m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (env_delete x m) \\<subseteq> edom m", "by auto"], ["", "lemma env_delete_fun_upd[simp]:\n  \"env_delete x (m(x := v)) = env_delete x m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_delete x (m(x := v)) = env_delete x m", "by (auto simp add: env_delete_def)"], ["", "lemma env_delete_fun_upd2[simp]:\n  \"(env_delete x m)(x := v) = m(x := v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (env_delete x m)(x := v) = m(x := v)", "by (auto simp add: env_delete_def)"], ["", "lemma env_delete_fun_upd3[simp]:\n  \"x \\<noteq> y \\<Longrightarrow> env_delete x (m(y := v)) = (env_delete x m)(y := v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    env_delete x (m(y := v)) = (env_delete x m)(y := v)", "by (auto simp add: env_delete_def)"], ["", "lemma env_delete_noop[simp]:\n  \"x \\<notin> edom m \\<Longrightarrow> env_delete x m = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> edom m \\<Longrightarrow> env_delete x m = m", "by (auto simp add: env_delete_def edom_def)"], ["", "lemma fun_upd_env_delete[simp]: \"x \\<in> edom \\<Gamma> \\<Longrightarrow> (env_delete x \\<Gamma>)(x := \\<Gamma> x) = \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> edom \\<Gamma> \\<Longrightarrow>\n    (env_delete x \\<Gamma>)(x := \\<Gamma> x) = \\<Gamma>", "by (auto)"], ["", "lemma env_restr_env_delete_other[simp]: \"x \\<notin> S \\<Longrightarrow> env_delete x m f|` S = m f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow> env_delete x m f|` S = m f|` S", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       x \\<notin> S \\<Longrightarrow>\n       (env_delete x m f|` S) xa = (m f|` S) xa", "apply (auto simp add: lookup_env_restr_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<notin> S; xa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> env_delete x m xa = m xa", "by (metis lookup_env_delete)"], ["", "lemma env_delete_restr: \"env_delete x m = m f|` (-{x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_delete x m = m f|` (- {x})", "by (auto simp add: lookup_env_restr_eq)"], ["", "lemma below_env_deleteI: \"f x = \\<bottom> \\<Longrightarrow> f \\<sqsubseteq> g \\<Longrightarrow> f \\<sqsubseteq> env_delete x g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f x = \\<bottom>; f \\<sqsubseteq> g\\<rbrakk>\n    \\<Longrightarrow> f \\<sqsubseteq> env_delete x g", "by (metis env_delete_def env_delete_restr env_restr_mono fun_upd_triv)"], ["", "lemma env_delete_below_cong[intro]:\n  assumes \"x \\<noteq> v \\<Longrightarrow> e1 x \\<sqsubseteq> e2 x\"\n  shows \"env_delete v e1 x \\<sqsubseteq> env_delete v e2 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_delete v e1 x \\<sqsubseteq> env_delete v e2 x", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> v \\<Longrightarrow> e1 x \\<sqsubseteq> e2 x\n\ngoal (1 subgoal):\n 1. env_delete v e1 x \\<sqsubseteq> env_delete v e2 x", "unfolding env_delete_def"], ["proof (prove)\nusing this:\n  x \\<noteq> v \\<Longrightarrow> e1 x \\<sqsubseteq> e2 x\n\ngoal (1 subgoal):\n 1. (e1(v := \\<bottom>)) x \\<sqsubseteq> (e2(v := \\<bottom>)) x", "by auto"], ["", "lemma env_delete_env_restr_swap:\n  \"env_delete x (env_restr S e) = env_restr S (env_delete x e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_delete x (e f|` S) = env_delete x e f|` S", "by (metis (erased, hide_lams) env_delete_def env_restr_fun_upd env_restr_fun_upd_other fun_upd_triv lookup_env_restr_eq)"], ["", "lemma env_delete_mono:\n  \"m \\<sqsubseteq> m' \\<Longrightarrow> env_delete x m \\<sqsubseteq> env_delete x m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<sqsubseteq> m' \\<Longrightarrow>\n    env_delete x m \\<sqsubseteq> env_delete x m'", "unfolding env_delete_restr"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<sqsubseteq> m' \\<Longrightarrow>\n    m f|` (- {x}) \\<sqsubseteq> m' f|` (- {x})", "by (rule env_restr_mono)"], ["", "lemma env_delete_below_arg:\n  \"env_delete x m \\<sqsubseteq> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_delete x m \\<sqsubseteq> m", "unfolding env_delete_restr"], ["proof (prove)\ngoal (1 subgoal):\n 1. m f|` (- {x}) \\<sqsubseteq> m", "by (rule env_restr_below_self)"], ["", "subsubsection \\<open>Merging of two functions\\<close>"], ["", "text \\<open>\nWe'd like to have some nice syntax for @{term \"override_on\"}.\n\\<close>"], ["", "abbreviation override_on_syn (\"_ ++\\<^bsub>_\\<^esub> _\" [100, 0, 100] 100) where \"f1 ++\\<^bsub>S\\<^esub> f2 \\<equiv> override_on f1 f2 S\""], ["", "lemma override_on_bot[simp]:\n  \"\\<bottom> ++\\<^bsub>S\\<^esub> m = m f|` S\" \n  \"m ++\\<^bsub>S\\<^esub> \\<bottom> = m f|` (-S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> ++\\<^bsub>S\\<^esub> m = m f|` S &&&\n    m ++\\<^bsub>S\\<^esub> \\<bottom> = m f|` (- S)", "by (auto simp add: override_on_def env_restr_def)"], ["", "lemma edom_override_on[simp]: \"edom (m1 ++\\<^bsub>S\\<^esub> m2) = (edom m1 - S) \\<union> (edom m2 \\<inter> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (m1 ++\\<^bsub>S\\<^esub> m2) =\n    edom m1 - S \\<union> edom m2 \\<inter> S", "by (auto simp add: override_on_def edom_def)"], ["", "lemma lookup_override_on_eq: \"(m1 ++\\<^bsub>S\\<^esub> m2) x = (if x \\<in> S then m2 x else m1 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m1 ++\\<^bsub>S\\<^esub> m2) x = (if x \\<in> S then m2 x else m1 x)", "by (cases \"x \\<notin> S\") simp_all"], ["", "lemma override_on_upd_swap: \n  \"x \\<notin> S \\<Longrightarrow> \\<rho>(x := z) ++\\<^bsub>S\\<^esub> \\<rho>' = (\\<rho> ++\\<^bsub>S\\<^esub> \\<rho>')(x := z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<rho>(x := z) ++\\<^bsub>S\\<^esub> \\<rho>' =\n    (\\<rho> ++\\<^bsub>S\\<^esub> \\<rho>')(x := z)", "by (auto simp add: override_on_def  edom_def)"], ["", "lemma override_on_upd: \n  \"x \\<in> S \\<Longrightarrow> \\<rho> ++\\<^bsub>S\\<^esub> (\\<rho>'(x := z)) = (\\<rho> ++\\<^bsub>S - {x}\\<^esub> \\<rho>')(x := z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<rho> ++\\<^bsub>S\\<^esub> \\<rho>'(x := z) =\n    (\\<rho> ++\\<^bsub>S - {x}\\<^esub> \\<rho>')(x := z)", "by (auto simp add: override_on_def  edom_def)"], ["", "lemma env_restr_add: \"(m1 ++\\<^bsub>S2\\<^esub> m2) f|` S = m1 f|` S ++\\<^bsub>S2\\<^esub> m2 f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m1 ++\\<^bsub>S2\\<^esub> m2) f|` S =\n    m1 f|` S ++\\<^bsub>S2\\<^esub> m2 f|` S", "by (auto simp add: override_on_def  edom_def env_restr_def)"], ["", "lemma env_delete_add: \"env_delete x (m1 ++\\<^bsub>S\\<^esub> m2) = env_delete x m1 ++\\<^bsub>S - {x}\\<^esub> env_delete x m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_delete x (m1 ++\\<^bsub>S\\<^esub> m2) =\n    env_delete x m1 ++\\<^bsub>S - {x}\\<^esub> env_delete x m2", "by (auto simp add: override_on_def  edom_def env_restr_def env_delete_def)"], ["", "subsubsection \\<open>Environments with binary joins\\<close>"], ["", "lemma edom_join[simp]: \"edom (f \\<squnion> (g::('a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}))) = edom f \\<union> edom g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (f \\<squnion> g) = edom f \\<union> edom g", "unfolding edom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. (f \\<squnion> g) x \\<noteq> \\<bottom>} =\n    {x. f x \\<noteq> \\<bottom>} \\<union> {x. g x \\<noteq> \\<bottom>}", "by auto"], ["", "lemma env_delete_join[simp]: \"env_delete x (f \\<squnion> (g::('a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}))) = env_delete x f \\<squnion> env_delete x g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_delete x (f \\<squnion> g) = env_delete x f \\<squnion> env_delete x g", "by (metis env_delete_def fun_upd_meet_simp)"], ["", "lemma env_restr_join:\n  fixes m1 m2 :: \"'a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}\"\n  shows \"(m1 \\<squnion> m2) f|` S = (m1 f|` S) \\<squnion> (m2 f|` S )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m1 \\<squnion> m2) f|` S = m1 f|` S \\<squnion> m2 f|` S", "by (auto simp add: env_restr_def)"], ["", "lemma env_restr_join2:\n  fixes m :: \"'a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}\"\n  shows \"m f|` S \\<squnion> m f|` S' = m f|` (S \\<union> S')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m f|` S \\<squnion> m f|` S' = m f|` (S \\<union> S')", "by (auto simp add: env_restr_def)"], ["", "lemma join_env_restr_UNIV:\n  fixes m :: \"'a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}\"\n  shows \"S1 \\<union> S2 = UNIV \\<Longrightarrow> (m f|` S1) \\<squnion> (m f|` S2) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S1 \\<union> S2 = UNIV \\<Longrightarrow> m f|` S1 \\<squnion> m f|` S2 = m", "by (fastforce simp add: env_restr_def)"], ["", "lemma env_restr_split:\n  fixes m :: \"'a::type \\<Rightarrow> 'b::{Finite_Join_cpo,pcpo}\"\n  shows \"m = m f|` S \\<squnion> m f|` (- S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = m f|` S \\<squnion> m f|` (- S)", "by (simp add: env_restr_join2 Compl_partition)"], ["", "lemma env_restr_below_split:\n  \"m f|` S \\<sqsubseteq> m' \\<Longrightarrow> m f|` (- S) \\<sqsubseteq> m' \\<Longrightarrow> m \\<sqsubseteq> m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m f|` S \\<sqsubseteq> m'; m f|` (- S) \\<sqsubseteq> m'\\<rbrakk>\n    \\<Longrightarrow> m \\<sqsubseteq> m'", "by (metis ComplI fun_below_iff lookup_env_restr)"], ["", "subsubsection \\<open>Singleton environments\\<close>"], ["", "definition esing :: \"'a \\<Rightarrow> 'b::{pcpo} \\<rightarrow> ('a \\<Rightarrow> 'b)\"\n  where \"esing x = (\\<Lambda> a. (\\<lambda> y . (if x = y then a else \\<bottom>)))\""], ["", "lemma esing_bot[simp]: \"esing x \\<cdot> \\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. esing x\\<cdot>\\<bottom> = \\<bottom>", "by (rule ext)(simp add: esing_def)"], ["", "lemma esing_simps[simp]:\n  \"(esing x \\<cdot> n) x = n\"\n  \"x' \\<noteq> x \\<Longrightarrow> (esing x \\<cdot> n) x' = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (esing x\\<cdot>n) x = n &&&\n    (x' \\<noteq> x \\<Longrightarrow> (esing x\\<cdot>n) x' = \\<bottom>)", "by (simp_all add: esing_def)"], ["", "lemma esing_eq_up_iff[simp]: \"(esing x\\<cdot>(up\\<cdot>a)) y = up\\<cdot>a' \\<longleftrightarrow> (x = y \\<and> a = a')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((esing x\\<cdot>(up\\<cdot>a)) y = up\\<cdot>a') = (x = y \\<and> a = a')", "by (auto simp add: fun_below_iff esing_def)"], ["", "lemma esing_below_iff[simp]: \"esing x \\<cdot> a \\<sqsubseteq> ae  \\<longleftrightarrow> a \\<sqsubseteq> ae x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (esing x\\<cdot>a \\<sqsubseteq> ae) = (a \\<sqsubseteq> ae x)", "by (auto simp add: fun_below_iff esing_def)"], ["", "lemma edom_esing_subset: \"edom (esing x\\<cdot>n) \\<subseteq> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (esing x\\<cdot>n) \\<subseteq> {x}", "unfolding edom_def esing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xa.\n     ((\\<Lambda> a. (\\<lambda>y. if x = y then a else \\<bottom>))\\<cdot>n)\n      xa \\<noteq>\n     \\<bottom>}\n    \\<subseteq> {x}", "by auto"], ["", "lemma edom_esing_up[simp]: \"edom (esing x \\<cdot> (up \\<cdot> n)) = {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (esing x\\<cdot>(up\\<cdot>n)) = {x}", "unfolding edom_def esing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xa.\n     ((\\<Lambda> a. (\\<lambda>y. if x = y then a else \\<bottom>))\\<cdot>\n      (up\\<cdot>n))\n      xa \\<noteq>\n     \\<bottom>} =\n    {x}", "by auto"], ["", "lemma env_delete_esing[simp]: \"env_delete x (esing x \\<cdot> n) = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_delete x (esing x\\<cdot>n) = \\<bottom>", "unfolding env_delete_def esing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Lambda> a. (\\<lambda>y. if x = y then a else \\<bottom>))\\<cdot>n)\n    (x := \\<bottom>) = \\<bottom>", "by auto"], ["", "lemma env_restr_esing[simp]:\n  \"x\\<in> S \\<Longrightarrow> esing x\\<cdot>v f|` S = esing x\\<cdot>v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow> esing x\\<cdot>v f|` S = esing x\\<cdot>v", "by (auto intro: env_restr_useless dest: subsetD[OF edom_esing_subset])"], ["", "lemma env_restr_esing2[simp]:\n  \"x \\<notin> S \\<Longrightarrow> esing x\\<cdot>v f|` S = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow> esing x\\<cdot>v f|` S = \\<bottom>", "by (auto  dest: subsetD[OF edom_esing_subset])"], ["", "lemma esing_eq_iff[simp]:\n  \"esing x\\<cdot>v = esing x\\<cdot>v' \\<longleftrightarrow> v = v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (esing x\\<cdot>v = esing x\\<cdot>v') = (v = v')", "by (metis esing_simps(1))"], ["", "end"]]}