{"file_name": "/home/qj213/afp-2021-10-22/thys/Launchbury/AList-Utils-Nominal.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Launchbury", "problem_names": ["lemma domA_not_fresh:\n  \"x \\<in> domA \\<Gamma> \\<Longrightarrow> \\<not>(atom x \\<sharp> \\<Gamma>)\"", "lemma fresh_delete:\n  assumes \"a \\<sharp> \\<Gamma>\"\n  shows \"a \\<sharp> delete v \\<Gamma>\"", "lemma fresh_star_delete:\n  assumes \"S \\<sharp>* \\<Gamma>\"\n  shows \"S \\<sharp>* delete v \\<Gamma>\"", "lemma fv_delete_subset:\n  \"fv (delete v \\<Gamma>) \\<subseteq> fv \\<Gamma>\"", "lemma fresh_heap_expr:\n  assumes \"a \\<sharp> \\<Gamma>\"\n  and \"(x,e) \\<in> set \\<Gamma>\"\n  shows \"a \\<sharp> e\"", "lemma fresh_heap_expr':\n  assumes \"a \\<sharp> \\<Gamma>\"\n  and \"e \\<in> snd ` set \\<Gamma>\"\n  shows \"a \\<sharp> e\"", "lemma fresh_star_heap_expr':\n  assumes \"S \\<sharp>* \\<Gamma>\"\n  and \"e \\<in> snd ` set \\<Gamma>\"\n  shows \"S \\<sharp>* e\"", "lemma fresh_map_of:\n  assumes \"x \\<in> domA \\<Gamma>\"\n  assumes \"a \\<sharp> \\<Gamma>\"\n  shows \"a \\<sharp> the (map_of \\<Gamma> x)\"", "lemma fresh_star_map_of:\n  assumes \"x \\<in> domA \\<Gamma>\"\n  assumes \"a \\<sharp>* \\<Gamma>\"\n  shows \"a \\<sharp>* the (map_of \\<Gamma> x)\"", "lemma domA_fv_subset: \"domA \\<Gamma> \\<subseteq> fv \\<Gamma>\"", "lemma map_of_fv_subset: \"x \\<in> domA \\<Gamma> \\<Longrightarrow> fv (the (map_of \\<Gamma> x)) \\<subseteq> fv \\<Gamma>\"", "lemma map_of_Some_fv_subset: \"map_of \\<Gamma> x = Some e \\<Longrightarrow> fv e \\<subseteq> fv \\<Gamma>\"", "lemma domA[eqvt]:\n  \"\\<pi> \\<bullet> domA \\<Gamma> = domA (\\<pi> \\<bullet> \\<Gamma>)\"", "lemma mapCollect[eqvt]:\n  \"\\<pi> \\<bullet> mapCollect f m = mapCollect (\\<pi> \\<bullet> f) (\\<pi> \\<bullet> m)\"", "lemma fresh_distinct:\n assumes \"atom ` S \\<sharp>* \\<Gamma>\"\n shows \"S \\<inter> domA \\<Gamma> = {}\"", "lemma fresh_distinct_list:\n assumes \"atom ` S \\<sharp>* l\"\n shows \"S \\<inter> set l = {}\"", "lemma fresh_distinct_fv:\n assumes \"atom ` S \\<sharp>* l\"\n shows \"S \\<inter> fv l = {}\"", "lemma domA_fv_pure:\n  fixes \\<Gamma> :: \"('a::at_base \\<times> 'b::pure) list\"\n  shows  \"fv \\<Gamma> = domA \\<Gamma>\"", "lemma domA_fresh_pure:\n  fixes \\<Gamma> :: \"('a::at_base \\<times> 'b::pure) list\"\n  shows  \"x \\<in> domA \\<Gamma> \\<longleftrightarrow> \\<not>(atom x \\<sharp> \\<Gamma>)\""], "translations": [["", "lemma domA_not_fresh:\n  \"x \\<in> domA \\<Gamma> \\<Longrightarrow> \\<not>(atom x \\<sharp> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> domA \\<Gamma> \\<Longrightarrow> \\<not> atom x \\<sharp> \\<Gamma>", "by (induct \\<Gamma>, auto simp add: fresh_Cons fresh_Pair)"], ["", "lemma fresh_delete:\n  assumes \"a \\<sharp> \\<Gamma>\"\n  shows \"a \\<sharp> delete v \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> delete v \\<Gamma>", "using assms"], ["proof (prove)\nusing this:\n  a \\<sharp> \\<Gamma>\n\ngoal (1 subgoal):\n 1. a \\<sharp> delete v \\<Gamma>", "by(induct \\<Gamma>)(auto simp add: fresh_Cons)"], ["", "lemma fresh_star_delete:\n  assumes \"S \\<sharp>* \\<Gamma>\"\n  shows \"S \\<sharp>* delete v \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<sharp>* delete v \\<Gamma>", "using assms fresh_delete"], ["proof (prove)\nusing this:\n  S \\<sharp>* \\<Gamma>\n  ?a \\<sharp> ?\\<Gamma> \\<Longrightarrow> ?a \\<sharp> delete ?v ?\\<Gamma>\n\ngoal (1 subgoal):\n 1. S \\<sharp>* delete v \\<Gamma>", "unfolding fresh_star_def"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>S. a \\<sharp> \\<Gamma>\n  ?a \\<sharp> ?\\<Gamma> \\<Longrightarrow> ?a \\<sharp> delete ?v ?\\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>S. a \\<sharp> delete v \\<Gamma>", "by fastforce"], ["", "lemma fv_delete_subset:\n  \"fv (delete v \\<Gamma>) \\<subseteq> fv \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (delete v \\<Gamma>) \\<subseteq> fv \\<Gamma>", "using fresh_delete"], ["proof (prove)\nusing this:\n  ?a \\<sharp> ?\\<Gamma> \\<Longrightarrow> ?a \\<sharp> delete ?v ?\\<Gamma>\n\ngoal (1 subgoal):\n 1. fv (delete v \\<Gamma>) \\<subseteq> fv \\<Gamma>", "unfolding fresh_def fv_def"], ["proof (prove)\nusing this:\n  ?a \\<notin> supp ?\\<Gamma> \\<Longrightarrow>\n  ?a \\<notin> supp (delete ?v ?\\<Gamma>)\n\ngoal (1 subgoal):\n 1. {va. atom va \\<in> supp (delete v \\<Gamma>)}\n    \\<subseteq> {v. atom v \\<in> supp \\<Gamma>}", "by auto"], ["", "lemma fresh_heap_expr:\n  assumes \"a \\<sharp> \\<Gamma>\"\n  and \"(x,e) \\<in> set \\<Gamma>\"\n  shows \"a \\<sharp> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> e", "using assms"], ["proof (prove)\nusing this:\n  a \\<sharp> \\<Gamma>\n  (x, e) \\<in> set \\<Gamma>\n\ngoal (1 subgoal):\n 1. a \\<sharp> e", "by (metis fresh_list_elem fresh_Pair)"], ["", "lemma fresh_heap_expr':\n  assumes \"a \\<sharp> \\<Gamma>\"\n  and \"e \\<in> snd ` set \\<Gamma>\"\n  shows \"a \\<sharp> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> e", "using assms"], ["proof (prove)\nusing this:\n  a \\<sharp> \\<Gamma>\n  e \\<in> snd ` set \\<Gamma>\n\ngoal (1 subgoal):\n 1. a \\<sharp> e", "by (induct \\<Gamma>, auto simp add: fresh_Cons fresh_Pair)"], ["", "lemma fresh_star_heap_expr':\n  assumes \"S \\<sharp>* \\<Gamma>\"\n  and \"e \\<in> snd ` set \\<Gamma>\"\n  shows \"S \\<sharp>* e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<sharp>* e", "using assms"], ["proof (prove)\nusing this:\n  S \\<sharp>* \\<Gamma>\n  e \\<in> snd ` set \\<Gamma>\n\ngoal (1 subgoal):\n 1. S \\<sharp>* e", "by (metis fresh_star_def fresh_heap_expr')"], ["", "lemma fresh_map_of:\n  assumes \"x \\<in> domA \\<Gamma>\"\n  assumes \"a \\<sharp> \\<Gamma>\"\n  shows \"a \\<sharp> the (map_of \\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> the (map_of \\<Gamma> x)", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> domA \\<Gamma>\n  a \\<sharp> \\<Gamma>\n\ngoal (1 subgoal):\n 1. a \\<sharp> the (map_of \\<Gamma> x)", "by (induct \\<Gamma>)(auto simp add: fresh_Cons fresh_Pair)"], ["", "lemma fresh_star_map_of:\n  assumes \"x \\<in> domA \\<Gamma>\"\n  assumes \"a \\<sharp>* \\<Gamma>\"\n  shows \"a \\<sharp>* the (map_of \\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp>* the (map_of \\<Gamma> x)", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> domA \\<Gamma>\n  a \\<sharp>* \\<Gamma>\n\ngoal (1 subgoal):\n 1. a \\<sharp>* the (map_of \\<Gamma> x)", "by (simp add: fresh_star_def fresh_map_of)"], ["", "lemma domA_fv_subset: \"domA \\<Gamma> \\<subseteq> fv \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domA \\<Gamma> \\<subseteq> fv \\<Gamma>", "by (induction \\<Gamma>) auto"], ["", "lemma map_of_fv_subset: \"x \\<in> domA \\<Gamma> \\<Longrightarrow> fv (the (map_of \\<Gamma> x)) \\<subseteq> fv \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> domA \\<Gamma> \\<Longrightarrow>\n    fv (the (map_of \\<Gamma> x)) \\<subseteq> fv \\<Gamma>", "by (induction \\<Gamma>) auto"], ["", "lemma map_of_Some_fv_subset: \"map_of \\<Gamma> x = Some e \\<Longrightarrow> fv e \\<subseteq> fv \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of \\<Gamma> x = Some e \\<Longrightarrow>\n    fv e \\<subseteq> fv \\<Gamma>", "by (metis domA_from_set map_of_fv_subset map_of_SomeD option.sel)"], ["", "subsubsection \\<open>Equivariance lemmas\\<close>"], ["", "lemma domA[eqvt]:\n  \"\\<pi> \\<bullet> domA \\<Gamma> = domA (\\<pi> \\<bullet> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> domA \\<Gamma> = domA (\\<pi> \\<bullet> \\<Gamma>)", "by (simp add: domA_def)"], ["", "lemma mapCollect[eqvt]:\n  \"\\<pi> \\<bullet> mapCollect f m = mapCollect (\\<pi> \\<bullet> f) (\\<pi> \\<bullet> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> mapCollect f m =\n    mapCollect (\\<pi> \\<bullet> f) (\\<pi> \\<bullet> m)", "unfolding mapCollect_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> {f k v |k v. m k = Some v} =\n    {(\\<pi> \\<bullet> f) k v |k v. (\\<pi> \\<bullet> m) k = Some v}", "by perm_simp rule"], ["", "subsubsection \\<open>Freshness and distinctness\\<close>"], ["", "lemma fresh_distinct:\n assumes \"atom ` S \\<sharp>* \\<Gamma>\"\n shows \"S \\<inter> domA \\<Gamma> = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<inter> domA \\<Gamma> = {}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<inter> domA \\<Gamma> = {}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<inter> domA \\<Gamma> = {}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<inter> domA \\<Gamma> = {}", "assume \"x \\<in> S\""], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. S \\<inter> domA \\<Gamma> = {}", "moreover"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. S \\<inter> domA \\<Gamma> = {}", "assume \"x \\<in> domA \\<Gamma>\""], ["proof (state)\nthis:\n  x \\<in> domA \\<Gamma>\n\ngoal (1 subgoal):\n 1. S \\<inter> domA \\<Gamma> = {}", "hence \"atom x \\<in> supp \\<Gamma>\""], ["proof (prove)\nusing this:\n  x \\<in> domA \\<Gamma>\n\ngoal (1 subgoal):\n 1. atom x \\<in> supp \\<Gamma>", "by (induct \\<Gamma>)(auto simp add: supp_Cons domA_def supp_Pair supp_at_base)"], ["proof (state)\nthis:\n  atom x \\<in> supp \\<Gamma>\n\ngoal (1 subgoal):\n 1. S \\<inter> domA \\<Gamma> = {}", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> S\n  atom x \\<in> supp \\<Gamma>", "have False"], ["proof (prove)\nusing this:\n  x \\<in> S\n  atom x \\<in> supp \\<Gamma>\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> S\n  atom x \\<in> supp \\<Gamma>\n  atom ` S \\<sharp>* \\<Gamma>\n\ngoal (1 subgoal):\n 1. False", "by (simp add: fresh_star_def fresh_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. S \\<inter> domA \\<Gamma> = {}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> S; ?x2 \\<in> domA \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. S \\<inter> domA \\<Gamma> = {}", "thus \"S \\<inter> domA \\<Gamma> = {}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2 \\<in> S; ?x2 \\<in> domA \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. S \\<inter> domA \\<Gamma> = {}", "by auto"], ["proof (state)\nthis:\n  S \\<inter> domA \\<Gamma> = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fresh_distinct_list:\n assumes \"atom ` S \\<sharp>* l\"\n shows \"S \\<inter> set l = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<inter> set l = {}", "using assms"], ["proof (prove)\nusing this:\n  atom ` S \\<sharp>* l\n\ngoal (1 subgoal):\n 1. S \\<inter> set l = {}", "by (metis disjoint_iff_not_equal fresh_list_elem fresh_star_def image_eqI not_self_fresh)"], ["", "lemma fresh_distinct_fv:\n assumes \"atom ` S \\<sharp>* l\"\n shows \"S \\<inter> fv l = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<inter> fv l = {}", "using assms"], ["proof (prove)\nusing this:\n  atom ` S \\<sharp>* l\n\ngoal (1 subgoal):\n 1. S \\<inter> fv l = {}", "by (metis disjoint_iff_not_equal fresh_star_def fv_not_fresh image_eqI)"], ["", "subsubsection \\<open>Pure codomains\\<close>"], ["", "lemma domA_fv_pure:\n  fixes \\<Gamma> :: \"('a::at_base \\<times> 'b::pure) list\"\n  shows  \"fv \\<Gamma> = domA \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv \\<Gamma> = domA \\<Gamma>", "apply (induct \\<Gamma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. fv [] = domA []\n 2. \\<And>a \\<Gamma>.\n       fv \\<Gamma> = domA \\<Gamma> \\<Longrightarrow>\n       fv (a # \\<Gamma>) = domA (a # \\<Gamma>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a \\<Gamma>.\n       fv \\<Gamma> = domA \\<Gamma> \\<Longrightarrow>\n       fv (a # \\<Gamma>) = domA (a # \\<Gamma>)", "apply (case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a \\<Gamma> aa b.\n       \\<lbrakk>fv \\<Gamma> = domA \\<Gamma>; a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> fv (a # \\<Gamma>) = domA (a # \\<Gamma>)", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma domA_fresh_pure:\n  fixes \\<Gamma> :: \"('a::at_base \\<times> 'b::pure) list\"\n  shows  \"x \\<in> domA \\<Gamma> \\<longleftrightarrow> \\<not>(atom x \\<sharp> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> domA \\<Gamma>) = (\\<not> atom x \\<sharp> \\<Gamma>)", "unfolding domA_fv_pure[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> fv \\<Gamma>) = (\\<not> atom x \\<sharp> \\<Gamma>)", "by (auto simp add: fv_def fresh_def)"], ["", "end"]]}