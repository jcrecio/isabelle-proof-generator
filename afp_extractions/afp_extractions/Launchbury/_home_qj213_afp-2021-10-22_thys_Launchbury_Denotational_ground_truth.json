{"file_name": "/home/qj213/afp-2021-10-22/thys/Launchbury/Denotational.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Launchbury", "problem_names": ["lemma ESem_simps_as_defined:\n  \"\\<lbrakk> Lam [x]. e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =  Fn\\<cdot>(\\<Lambda> v. \\<lbrakk> e \\<rbrakk>\\<^bsub>(\\<rho> f|` (fv (Lam [x].e)))(x := v)\\<^esub>)\"\n  \"\\<lbrakk> App e x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>    =  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> \\<down>Fn \\<rho> x\"\n  \"\\<lbrakk> Var x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>      =  \\<rho>  x\"\n  \"\\<lbrakk> Bool b \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>     =  B\\<cdot>(Discr b)\"\n  \"\\<lbrakk> (scrut ? e\\<^sub>1 : e\\<^sub>2) \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = B_project\\<cdot>(\\<lbrakk> scrut \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>(\\<lbrakk> e\\<^sub>1 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>(\\<lbrakk> e\\<^sub>2 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\"\n  \"\\<lbrakk> Let \\<Gamma> body \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = \\<lbrakk>body\\<rbrakk>\\<^bsub>\\<lbrace>\\<Gamma>\\<rbrace>(\\<rho> f|` fv (Let \\<Gamma> body))\\<^esub>\"", "lemma ESem_simps:\n  \"\\<lbrakk> Lam [x]. e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =  Fn\\<cdot>(\\<Lambda> v. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<rho>(x := v)\\<^esub>)\"\n  \"\\<lbrakk> App e x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>    =  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> \\<down>Fn \\<rho> x\"\n  \"\\<lbrakk> Var x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>      =  \\<rho>  x\"\n  \"\\<lbrakk> Bool b \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>     =  B\\<cdot>(Discr b)\"\n  \"\\<lbrakk> (scrut ? e\\<^sub>1 : e\\<^sub>2) \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = B_project\\<cdot>(\\<lbrakk> scrut \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>(\\<lbrakk> e\\<^sub>1 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>(\\<lbrakk> e\\<^sub>2 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\"\n  \"\\<lbrakk> Let \\<Gamma> body \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = \\<lbrakk>body\\<rbrakk>\\<^bsub>\\<lbrace>\\<Gamma>\\<rbrace>\\<rho>\\<^esub>\"", "lemma HSem_subst_var_app:\n  assumes fresh: \"atom n \\<sharp> x\"\n  shows \"\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho> = \\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho> \"", "lemma HSem_subst_var_var:\n  assumes fresh: \"atom n \\<sharp> x\"\n  shows \"\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho> = \\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho> \""], "translations": [["", "lemma ESem_simps_as_defined:\n  \"\\<lbrakk> Lam [x]. e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =  Fn\\<cdot>(\\<Lambda> v. \\<lbrakk> e \\<rbrakk>\\<^bsub>(\\<rho> f|` (fv (Lam [x].e)))(x := v)\\<^esub>)\"\n  \"\\<lbrakk> App e x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>    =  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> \\<down>Fn \\<rho> x\"\n  \"\\<lbrakk> Var x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>      =  \\<rho>  x\"\n  \"\\<lbrakk> Bool b \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>     =  B\\<cdot>(Discr b)\"\n  \"\\<lbrakk> (scrut ? e\\<^sub>1 : e\\<^sub>2) \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = B_project\\<cdot>(\\<lbrakk> scrut \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>(\\<lbrakk> e\\<^sub>1 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>(\\<lbrakk> e\\<^sub>2 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\"\n  \"\\<lbrakk> Let \\<Gamma> body \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = \\<lbrakk>body\\<rbrakk>\\<^bsub>\\<lbrace>\\<Gamma>\\<rbrace>(\\<rho> f|` fv (Let \\<Gamma> body))\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk> Lam [x]. e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =\n     Fn\\<cdot>\n     (\\<Lambda> v. \\<lbrakk> e \\<rbrakk>\\<^bsub>(\\<rho> f|` fv (Lam [x]. e))\n         (x := v)\\<^esub>) &&&\n     \\<lbrakk> App e x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =\n     \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> \\<down>Fn \\<rho> x &&&\n     \\<lbrakk> Var x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = \\<rho> x) &&&\n    \\<lbrakk> Bool b \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = B\\<cdot>(Discr b) &&&\n    \\<lbrakk> (scrut ? e\\<^sub>1\n               : e\\<^sub>2) \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =\n    B_project\\<cdot>(\\<lbrakk> scrut \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>\n    (\\<lbrakk> e\\<^sub>1 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>\n    (\\<lbrakk> e\\<^sub>2 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>) &&&\n    \\<lbrakk> Terms.Let \\<Gamma> body \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =\n    \\<lbrakk> body \\<rbrakk>\\<^bsub>\\<lbrace>\\<Gamma>\\<rbrace>\\<rho> f|`\n                        fv (Terms.Let \\<Gamma> body)\\<^esub>", "by (simp_all del: ESem_Lam ESem_Let add: ESem.simps(1,4) )"], ["", "lemma ESem_simps:\n  \"\\<lbrakk> Lam [x]. e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =  Fn\\<cdot>(\\<Lambda> v. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<rho>(x := v)\\<^esub>)\"\n  \"\\<lbrakk> App e x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>    =  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> \\<down>Fn \\<rho> x\"\n  \"\\<lbrakk> Var x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>      =  \\<rho>  x\"\n  \"\\<lbrakk> Bool b \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>     =  B\\<cdot>(Discr b)\"\n  \"\\<lbrakk> (scrut ? e\\<^sub>1 : e\\<^sub>2) \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = B_project\\<cdot>(\\<lbrakk> scrut \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>(\\<lbrakk> e\\<^sub>1 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>(\\<lbrakk> e\\<^sub>2 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\"\n  \"\\<lbrakk> Let \\<Gamma> body \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = \\<lbrakk>body\\<rbrakk>\\<^bsub>\\<lbrace>\\<Gamma>\\<rbrace>\\<rho>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk> Lam [x]. e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =\n     Fn\\<cdot>\n     (\\<Lambda> v. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<rho>(x := v)\\<^esub>) &&&\n     \\<lbrakk> App e x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =\n     \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> \\<down>Fn \\<rho> x &&&\n     \\<lbrakk> Var x \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = \\<rho> x) &&&\n    \\<lbrakk> Bool b \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> = B\\<cdot>(Discr b) &&&\n    \\<lbrakk> (scrut ? e\\<^sub>1\n               : e\\<^sub>2) \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =\n    B_project\\<cdot>(\\<lbrakk> scrut \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>\n    (\\<lbrakk> e\\<^sub>1 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>)\\<cdot>\n    (\\<lbrakk> e\\<^sub>2 \\<rbrakk>\\<^bsub>\\<rho>\\<^esub>) &&&\n    \\<lbrakk> Terms.Let \\<Gamma> body \\<rbrakk>\\<^bsub>\\<rho>\\<^esub> =\n    \\<lbrakk> body \\<rbrakk>\\<^bsub>\\<lbrace>\\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "by simp_all"], ["", "(*<*)"], ["", "text \\<open>\nExcluded from the document, as these are unused in the current development.\n\\<close>"], ["", "subsubsection \\<open>Replacing subexpressions by variables\\<close>"], ["", "lemma HSem_subst_var_app:\n  assumes fresh: \"atom n \\<sharp> x\"\n  shows \"\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho> = \\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho> =\n    \\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>", "proof(rule HSem_subst_expr)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "from fresh"], ["proof (chain)\npicking this:\n  atom n \\<sharp> x", "have [simp]: \"n \\<noteq> x\""], ["proof (prove)\nusing this:\n  atom n \\<sharp> x\n\ngoal (1 subgoal):\n 1. n \\<noteq> x", "by (simp add: fresh_at_base)"], ["proof (state)\nthis:\n  n \\<noteq> x\n\ngoal (2 subgoals):\n 1. \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "have ne: \"(n,e) \\<in> set ((x, App e y) # (n, e) # \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n, e) \\<in> set ((x, App e y) # (n, e) # \\<Gamma>)", "by simp"], ["proof (state)\nthis:\n  (n, e) \\<in> set ((x, App e y) # (n, e) # \\<Gamma>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "have \"\\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> = (\\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n    (\\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  (\\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\n\ngoal (2 subgoals):\n 1. \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "also"], ["proof (state)\nthis:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  (\\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\n\ngoal (2 subgoals):\n 1. \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "have \"... = \\<lbrakk> e \\<rbrakk>\\<^bsub>(\\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>)\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n =\n    \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "by (subst HSem_eq, simp)"], ["proof (state)\nthis:\n  (\\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "show \"\\<lbrakk> App (Var n) y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq> \\<lbrakk> App e y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk> App (Var n)\n             y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n   (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n  \\<lbrakk> App e\n             y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App e y) #\n   (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "have \"\\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> = (\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n    (\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  (\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\n\ngoal (1 subgoal):\n 1. \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "also"], ["proof (state)\nthis:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  (\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\n\ngoal (1 subgoal):\n 1. \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "have \"... = \\<lbrakk> e \\<rbrakk>\\<^bsub>(\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>)\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n =\n    \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "by (subst HSem_eq, simp)"], ["proof (state)\nthis:\n  (\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "show \"\\<lbrakk> App e y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq> \\<lbrakk> App (Var n) y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk> App e\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> App (Var n)\n               y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n     (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk> App e\n             y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n   (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n  \\<lbrakk> App (Var n)\n             y \\<rbrakk>\\<^bsub>\\<lbrace>(x, App (Var n) y) #\n   (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HSem_subst_var_var:\n  assumes fresh: \"atom n \\<sharp> x\"\n  shows \"\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho> = \\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho> =\n    \\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>", "proof(rule HSem_subst_expr)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "from fresh"], ["proof (chain)\npicking this:\n  atom n \\<sharp> x", "have [simp]: \"n \\<noteq> x\""], ["proof (prove)\nusing this:\n  atom n \\<sharp> x\n\ngoal (1 subgoal):\n 1. n \\<noteq> x", "by (simp add: fresh_at_base)"], ["proof (state)\nthis:\n  n \\<noteq> x\n\ngoal (2 subgoals):\n 1. \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "have ne: \"(n,e) \\<in> set ((x, e) # (n, e) # \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n, e) \\<in> set ((x, e) # (n, e) # \\<Gamma>)", "by simp"], ["proof (state)\nthis:\n  (n, e) \\<in> set ((x, e) # (n, e) # \\<Gamma>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "have \"\\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> = (\\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n    (\\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  (\\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\n\ngoal (2 subgoals):\n 1. \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "also"], ["proof (state)\nthis:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  (\\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\n\ngoal (2 subgoals):\n 1. \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "have \"... = \\<lbrakk> e \\<rbrakk>\\<^bsub>(\\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>)\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n =\n    \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "by (subst HSem_eq, simp)"], ["proof (state)\nthis:\n  (\\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n 2. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "show \"\\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq> \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, e) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "have \"\\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> = (\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n    (\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  (\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\n\ngoal (1 subgoal):\n 1. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "also"], ["proof (state)\nthis:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  (\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n\n\ngoal (1 subgoal):\n 1. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "have \"... = \\<lbrakk> e \\<rbrakk>\\<^bsub>(\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>)\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n =\n    \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "by (subst HSem_eq, simp)"], ["proof (state)\nthis:\n  (\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>) n =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "show \"\\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq> \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) # (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\""], ["proof (prove)\nusing this:\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> =\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n    (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n    \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n        (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk> e \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n  (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub> \\<sqsubseteq>\n  \\<lbrakk> Var n \\<rbrakk>\\<^bsub>\\<lbrace>(x, Var n) #\n      (n, e) # \\<Gamma>\\<rbrace>\\<rho>\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "end"]]}