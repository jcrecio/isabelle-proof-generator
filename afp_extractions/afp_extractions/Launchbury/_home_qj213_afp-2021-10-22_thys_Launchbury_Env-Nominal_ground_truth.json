{"file_name": "/home/qj213/afp-2021-10-22/thys/Launchbury/Env-Nominal.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Launchbury", "problem_names": ["lemma edom_perm:\n  fixes f :: \"'a::pt \\<Rightarrow> 'b::{pcpo_pt}\"\n  shows \"edom (\\<pi> \\<bullet> f) = \\<pi> \\<bullet> (edom f)\"", "lemmas edom_perm_rev[simp,eqvt] = edom_perm[symmetric]", "lemma mem_edom_perm[simp]:\n  fixes \\<rho> :: \"'a::at_base \\<Rightarrow> 'b::{pcpo_pt}\"\n  shows \"xa \\<in> edom (p \\<bullet> \\<rho>) \\<longleftrightarrow> - p \\<bullet> xa \\<in> edom \\<rho>\"", "lemma env_restr_eqvt[eqvt]:\n  fixes m :: \"'a::pt \\<Rightarrow> 'b::{cont_pt,pcpo}\"\n  shows \"\\<pi> \\<bullet> m f|` d = (\\<pi> \\<bullet> m) f|` (\\<pi> \\<bullet> d)\"", "lemma env_delete_eqvt[eqvt]:\n  fixes m :: \"'a::pt \\<Rightarrow> 'b::{cont_pt,pcpo}\"\n  shows \"\\<pi> \\<bullet> env_delete x m = env_delete (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> m)\"", "lemma esing_eqvt[eqvt]: \"\\<pi> \\<bullet> (esing x) = esing (\\<pi> \\<bullet> x)\"", "lemma env_restr_perm:\n  fixes \\<rho> :: \"'a::at_base \\<Rightarrow> 'b::{pcpo_pt,pure}\"\n  assumes \"supp p \\<sharp>* S\" and [simp]: \"finite S\"\n  shows \"(p \\<bullet> \\<rho>) f|` S = \\<rho> f|` S\"", "lemma env_restr_perm':\n  fixes \\<rho> :: \"'a::at_base \\<Rightarrow> 'b::{pcpo_pt,pure}\"\n  assumes \"supp p \\<sharp>* S\" and [simp]: \"finite S\"\n  shows \"p \\<bullet> (\\<rho> f|` S) = \\<rho> f|` S\"", "lemma env_restr_flip:\n  fixes \\<rho> :: \"'a::at_base \\<Rightarrow> 'b::{pcpo_pt,pure}\"\n  assumes \"x \\<notin> S\" and \"x' \\<notin> S\"\n  shows \"((x' \\<leftrightarrow> x) \\<bullet> \\<rho>) f|` S = \\<rho> f|` S\"", "lemma env_restr_flip':\n  fixes \\<rho> :: \"'a::at_base \\<Rightarrow> 'b::{pcpo_pt,pure}\"\n  assumes \"x \\<notin> S\" and \"x' \\<notin> S\"\n  shows \"(x' \\<leftrightarrow> x) \\<bullet> (\\<rho> f|` S) = \\<rho> f|` S\"", "lemma edom_fv_pure:\n  fixes f :: \"('a::at_base \\<Rightarrow> 'b::{pcpo,pure})\"\n  assumes \"finite (edom f)\"\n  shows  \"fv f \\<subseteq> edom f\""], "translations": [["", "lemma edom_perm:\n  fixes f :: \"'a::pt \\<Rightarrow> 'b::{pcpo_pt}\"\n  shows \"edom (\\<pi> \\<bullet> f) = \\<pi> \\<bullet> (edom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (\\<pi> \\<bullet> f) = \\<pi> \\<bullet> edom f", "by (simp add: edom_def)"], ["", "lemmas edom_perm_rev[simp,eqvt] = edom_perm[symmetric]"], ["", "lemma mem_edom_perm[simp]:\n  fixes \\<rho> :: \"'a::at_base \\<Rightarrow> 'b::{pcpo_pt}\"\n  shows \"xa \\<in> edom (p \\<bullet> \\<rho>) \\<longleftrightarrow> - p \\<bullet> xa \\<in> edom \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xa \\<in> edom (p \\<bullet> \\<rho>)) =\n    (- p \\<bullet> xa \\<in> edom \\<rho>)", "by (metis (mono_tags) edom_perm_rev mem_Collect_eq permute_set_eq)"], ["", "lemma env_restr_eqvt[eqvt]:\n  fixes m :: \"'a::pt \\<Rightarrow> 'b::{cont_pt,pcpo}\"\n  shows \"\\<pi> \\<bullet> m f|` d = (\\<pi> \\<bullet> m) f|` (\\<pi> \\<bullet> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> m f|` d = (\\<pi> \\<bullet> m) f|` (\\<pi> \\<bullet> d)", "by (auto simp add: env_restr_def)"], ["", "lemma env_delete_eqvt[eqvt]:\n  fixes m :: \"'a::pt \\<Rightarrow> 'b::{cont_pt,pcpo}\"\n  shows \"\\<pi> \\<bullet> env_delete x m = env_delete (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> env_delete x m =\n    env_delete (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> m)", "by (auto simp add: env_delete_def)"], ["", "lemma esing_eqvt[eqvt]: \"\\<pi> \\<bullet> (esing x) = esing (\\<pi> \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> esing x = esing (\\<pi> \\<bullet> x)", "unfolding esing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> (\\<Lambda> a.\n                        (\\<lambda>y. if x = y then a else \\<bottom>)) =\n    (\\<Lambda> a.\n        (\\<lambda>y. if \\<pi> \\<bullet> x = y then a else \\<bottom>))", "apply perm_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<bullet> Abs_cfun)\n     (\\<lambda>xa xb. if \\<pi> \\<bullet> x = xb then xa else \\<bottom>) =\n    (\\<Lambda> a.\n        (\\<lambda>y. if \\<pi> \\<bullet> x = y then a else \\<bottom>))", "apply (simp add: Abs_cfun_eqvt)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Permutation and restriction\\<close>"], ["", "lemma env_restr_perm:\n  fixes \\<rho> :: \"'a::at_base \\<Rightarrow> 'b::{pcpo_pt,pure}\"\n  assumes \"supp p \\<sharp>* S\" and [simp]: \"finite S\"\n  shows \"(p \\<bullet> \\<rho>) f|` S = \\<rho> f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> \\<rho>) f|` S = \\<rho> f|` S", "using assms"], ["proof (prove)\nusing this:\n  supp p \\<sharp>* S\n  finite S\n\ngoal (1 subgoal):\n 1. (p \\<bullet> \\<rho>) f|` S = \\<rho> f|` S", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>supp p \\<sharp>* S; finite S\\<rbrakk>\n    \\<Longrightarrow> (p \\<bullet> \\<rho>) f|` S = \\<rho> f|` S", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; finite S\\<rbrakk>\n       \\<Longrightarrow> ((p \\<bullet> \\<rho>) f|` S) x = (\\<rho> f|` S) x", "apply (case_tac \"x \\<in> S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> ((p \\<bullet> \\<rho>) f|` S) x = (\\<rho> f|` S) x\n 2. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; x \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ((p \\<bullet> \\<rho>) f|` S) x = (\\<rho> f|` S) x", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (p \\<bullet> \\<rho>) x = \\<rho> x\n 2. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; x \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ((p \\<bullet> \\<rho>) f|` S) x = (\\<rho> f|` S) x", "apply (subst permute_fun_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet> \\<rho> (- p \\<bullet> x) = \\<rho> x\n 2. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; x \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ((p \\<bullet> \\<rho>) f|` S) x = (\\<rho> f|` S) x", "apply (simp add: permute_pure)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<rho> (- p \\<bullet> x) = \\<rho> x\n 2. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; x \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ((p \\<bullet> \\<rho>) f|` S) x = (\\<rho> f|` S) x", "apply (subst perm_supp_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> supp (- p) \\<sharp>* x\n 2. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<rho> x = \\<rho> x\n 3. \\<And>x.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; x \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ((p \\<bullet> \\<rho>) f|` S) x = (\\<rho> f|` S) x", "apply (auto simp add:perm_supp_eq supp_minus_perm fresh_star_def fresh_def supp_set_elem_finite)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma env_restr_perm':\n  fixes \\<rho> :: \"'a::at_base \\<Rightarrow> 'b::{pcpo_pt,pure}\"\n  assumes \"supp p \\<sharp>* S\" and [simp]: \"finite S\"\n  shows \"p \\<bullet> (\\<rho> f|` S) = \\<rho> f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> \\<rho> f|` S = \\<rho> f|` S", "by (simp add: perm_supp_eq[OF assms(1)]  env_restr_perm[OF assms])"], ["", "lemma env_restr_flip:\n  fixes \\<rho> :: \"'a::at_base \\<Rightarrow> 'b::{pcpo_pt,pure}\"\n  assumes \"x \\<notin> S\" and \"x' \\<notin> S\"\n  shows \"((x' \\<leftrightarrow> x) \\<bullet> \\<rho>) f|` S = \\<rho> f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x' \\<leftrightarrow> x) \\<bullet> \\<rho>) f|` S = \\<rho> f|` S", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> S\n  x' \\<notin> S\n\ngoal (1 subgoal):\n 1. ((x' \\<leftrightarrow> x) \\<bullet> \\<rho>) f|` S = \\<rho> f|` S", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> S; x' \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> ((x' \\<leftrightarrow> x) \\<bullet> \\<rho>) f|` S =\n                      \\<rho> f|` S", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<notin> S; x' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> (((x' \\<leftrightarrow> x) \\<bullet> \\<rho>) f|` S)\n                          xa =\n                         (\\<rho> f|` S) xa", "apply (auto  simp add: permute_flip_at env_restr_def split:if_splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x \\<notin> S; x' \\<notin> S; xa \\<in> S\\<rbrakk>\n       \\<Longrightarrow> ((x' \\<leftrightarrow> x) \\<bullet> \\<rho>) xa =\n                         \\<rho> xa", "by (metis eqvt_lambda flip_at_base_simps(3) minus_flip permute_pure unpermute_def)"], ["", "lemma env_restr_flip':\n  fixes \\<rho> :: \"'a::at_base \\<Rightarrow> 'b::{pcpo_pt,pure}\"\n  assumes \"x \\<notin> S\" and \"x' \\<notin> S\"\n  shows \"(x' \\<leftrightarrow> x) \\<bullet> (\\<rho> f|` S) = \\<rho> f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x' \\<leftrightarrow> x) \\<bullet> \\<rho> f|` S = \\<rho> f|` S", "by (simp add: flip_set_both_not_in[OF assms]  env_restr_flip[OF assms])"], ["", "subsubsection \\<open>Pure codomains\\<close>"], ["", "(*\nlemma edom_fv_pure:\n  fixes f :: \"('a::at_base \\<Rightarrow> 'b::{pcpo,pure})\"\n  assumes \"finite (edom f)\"\n  shows  \"fv f = edom f\"\nusing assms\nproof (induction \"edom f\" arbitrary: f)\n  case empty\n  hence \"f = \\<bottom>\" unfolding edom_def by auto\n  thus ?case by (auto simp add: fv_def fresh_def supp_def)\nnext\n  case (insert x S)\n  have \"f = (env_delete x f)(x := f x)\" by auto\n\n  from `insert x S = edom f`  and `x \\<notin> S`\n  have \"S = edom (env_delete x f)\" by auto\n  hence \"fv (env_delete x f) = edom (env_delete x f)\" by (rule insert)\n*)"], ["", "lemma edom_fv_pure:\n  fixes f :: \"('a::at_base \\<Rightarrow> 'b::{pcpo,pure})\"\n  assumes \"finite (edom f)\"\n  shows  \"fv f \\<subseteq> edom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv f \\<subseteq> edom f", "using assms"], ["proof (prove)\nusing this:\n  finite (edom f)\n\ngoal (1 subgoal):\n 1. fv f \\<subseteq> edom f", "proof (induction \"edom f\" arbitrary: f)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f. {} = edom f \\<Longrightarrow> fv f \\<subseteq> edom f\n 2. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "case empty"], ["proof (state)\nthis:\n  {} = edom f\n\ngoal (2 subgoals):\n 1. \\<And>f. {} = edom f \\<Longrightarrow> fv f \\<subseteq> edom f\n 2. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "hence \"f = \\<bottom>\""], ["proof (prove)\nusing this:\n  {} = edom f\n\ngoal (1 subgoal):\n 1. f = \\<bottom>", "unfolding edom_def"], ["proof (prove)\nusing this:\n  {} = {x. f x \\<noteq> \\<bottom>}\n\ngoal (1 subgoal):\n 1. f = \\<bottom>", "by auto"], ["proof (state)\nthis:\n  f = \\<bottom>\n\ngoal (2 subgoals):\n 1. \\<And>f. {} = edom f \\<Longrightarrow> fv f \\<subseteq> edom f\n 2. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "thus ?case"], ["proof (prove)\nusing this:\n  f = \\<bottom>\n\ngoal (1 subgoal):\n 1. fv f \\<subseteq> edom f", "by (auto simp add: fv_def fresh_def supp_def)"], ["proof (state)\nthis:\n  fv f \\<subseteq> edom f\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "case (insert x S)"], ["proof (state)\nthis:\n  finite S\n  x \\<notin> S\n  S = edom ?f \\<Longrightarrow> fv ?f \\<subseteq> edom ?f\n  insert x S = edom f\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "have \"f = (env_delete x f)(x := f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = (env_delete x f)(x := f x)", "by auto"], ["proof (state)\nthis:\n  f = (env_delete x f)(x := f x)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "hence \"fv f \\<subseteq> fv (env_delete x f) \\<union> fv x \\<union> fv (f x)\""], ["proof (prove)\nusing this:\n  f = (env_delete x f)(x := f x)\n\ngoal (1 subgoal):\n 1. fv f \\<subseteq> fv (env_delete x f) \\<union> fv x \\<union> fv (f x)", "using eqvt_fresh_cong3[where f = fun_upd and x = \"env_delete x f\" and y = x and z = \"f x\", OF fun_upd_eqvt]"], ["proof (prove)\nusing this:\n  f = (env_delete x f)(x := f x)\n  \\<lbrakk>?a \\<sharp> env_delete x f; ?a \\<sharp> x;\n   ?a \\<sharp> f x\\<rbrakk>\n  \\<Longrightarrow> ?a \\<sharp> (env_delete x f)(x := f x)\n\ngoal (1 subgoal):\n 1. fv f \\<subseteq> fv (env_delete x f) \\<union> fv x \\<union> fv (f x)", "apply (auto simp add: fv_def fresh_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>a \\<notin> supp (env_delete x f);\n                    a \\<notin> supp x; a \\<notin> supp (f x)\\<rbrakk>\n                   \\<Longrightarrow> a \\<notin> supp f;\n        atom xa \\<in> supp f; atom xa \\<notin> supp x\\<rbrakk>\n       \\<Longrightarrow> atom xa \\<in> supp (env_delete x f)", "by (metis fresh_def pure_fresh)"], ["proof (state)\nthis:\n  fv f \\<subseteq> fv (env_delete x f) \\<union> fv x \\<union> fv (f x)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "also"], ["proof (state)\nthis:\n  fv f \\<subseteq> fv (env_delete x f) \\<union> fv x \\<union> fv (f x)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "from \\<open>insert x S = edom f\\<close>  and \\<open>x \\<notin> S\\<close>"], ["proof (chain)\npicking this:\n  insert x S = edom f\n  x \\<notin> S", "have \"S = edom (env_delete x f)\""], ["proof (prove)\nusing this:\n  insert x S = edom f\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. S = edom (env_delete x f)", "by auto"], ["proof (state)\nthis:\n  S = edom (env_delete x f)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "hence \"fv (env_delete x f) \\<subseteq> edom (env_delete x f)\""], ["proof (prove)\nusing this:\n  S = edom (env_delete x f)\n\ngoal (1 subgoal):\n 1. fv (env_delete x f) \\<subseteq> edom (env_delete x f)", "by (rule insert)"], ["proof (state)\nthis:\n  fv (env_delete x f) \\<subseteq> edom (env_delete x f)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "also"], ["proof (state)\nthis:\n  fv (env_delete x f) \\<subseteq> edom (env_delete x f)\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "have \"fv (f x) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (f x) = {}", "by (rule fv_pure)"], ["proof (state)\nthis:\n  fv (f x) = {}\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "also"], ["proof (state)\nthis:\n  fv (f x) = {}\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "from \\<open>insert x S = edom f\\<close>"], ["proof (chain)\npicking this:\n  insert x S = edom f", "have \"x \\<in> edom f\""], ["proof (prove)\nusing this:\n  insert x S = edom f\n\ngoal (1 subgoal):\n 1. x \\<in> edom f", "by auto"], ["proof (state)\nthis:\n  x \\<in> edom f\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "hence \"edom (env_delete x f) \\<union> fv x \\<union> {} \\<subseteq> edom f\""], ["proof (prove)\nusing this:\n  x \\<in> edom f\n\ngoal (1 subgoal):\n 1. edom (env_delete x f) \\<union> fv x \\<union> {} \\<subseteq> edom f", "by auto"], ["proof (state)\nthis:\n  edom (env_delete x f) \\<union> fv x \\<union> {} \\<subseteq> edom f\n\ngoal (1 subgoal):\n 1. \\<And>x F f.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>f. F = edom f \\<Longrightarrow> fv f \\<subseteq> edom f;\n        insert x F = edom f\\<rbrakk>\n       \\<Longrightarrow> fv f \\<subseteq> edom f", "finally"], ["proof (chain)\npicking this:\n  (\\<And>xa y.\n      xa \\<subseteq> y \\<Longrightarrow>\n      xa \\<union> fv x \\<union> fv (f x)\n      \\<subseteq> y \\<union> fv x \\<union> fv (f x)) \\<Longrightarrow>\n  fv f \\<subseteq> edom f", "show ?case"], ["proof (prove)\nusing this:\n  (\\<And>xa y.\n      xa \\<subseteq> y \\<Longrightarrow>\n      xa \\<union> fv x \\<union> fv (f x)\n      \\<subseteq> y \\<union> fv x \\<union> fv (f x)) \\<Longrightarrow>\n  fv f \\<subseteq> edom f\n\ngoal (1 subgoal):\n 1. fv f \\<subseteq> edom f", "by this (intro Un_mono subset_refl)"], ["proof (state)\nthis:\n  fv f \\<subseteq> edom f\n\ngoal:\nNo subgoals!", "qed"], ["", "(*\nlemma domA_fresh_pure:\n  fixes \\<Gamma> :: \"('a::at_base \\<times> 'b::pure) list\"\n  shows  \"x \\<in> domA \\<Gamma> \\<longleftrightarrow> \\<not>(atom x \\<sharp> \\<Gamma>)\"\n  unfolding domA_fv_pure[symmetric]\n  by (auto simp add: fv_def fresh_def)\n*)"], ["", "end"]]}