{"file_name": "/home/qj213/afp-2021-10-22/thys/Launchbury/CValue.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Launchbury", "problem_names": ["lemma CFn_project_strict[simp]:\n  \"\\<bottom> \\<down>CFn v = \\<bottom>\"\n  \"CB\\<cdot>b \\<down>CFn v = \\<bottom>\"", "lemma CB_below[simp]: \"CB\\<cdot>b \\<sqsubseteq> v \\<longleftrightarrow> v = CB\\<cdot>b\"", "lemma [simp]:\n  \"CB_project\\<cdot>(CB\\<cdot>(Discr b))\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 = (if b then v\\<^sub>1 else v\\<^sub>2)\"\n  \"CB_project\\<cdot>\\<bottom>\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 = \\<bottom>\"\n  \"CB_project\\<cdot>(CFn\\<cdot>f)\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 = \\<bottom>\"", "lemma CB_project_not_bot:\n  \"CB_project\\<cdot>scrut\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 \\<noteq> \\<bottom> \\<longleftrightarrow> (\\<exists> b. scrut = CB\\<cdot>(Discr b) \\<and> (if b then v\\<^sub>1 else v\\<^sub>2) \\<noteq> \\<bottom>)\"", "lemma C_to_CValue_chain_take: \"chain C_to_CValue_take\"", "lemma C_to_CValue_reach: \"(\\<Squnion> n. C_to_CValue_take n\\<cdot>x) = x\""], "translations": [["", "lemma CFn_project_strict[simp]:\n  \"\\<bottom> \\<down>CFn v = \\<bottom>\"\n  \"CB\\<cdot>b \\<down>CFn v = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<down>CFn v = \\<bottom> &&&\n    CB\\<cdot>b \\<down>CFn v = \\<bottom>", "by (fixrec_simp)+"], ["", "lemma CB_below[simp]: \"CB\\<cdot>b \\<sqsubseteq> v \\<longleftrightarrow> v = CB\\<cdot>b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (CB\\<cdot>b \\<sqsubseteq> v) = (v = CB\\<cdot>b)", "by (cases v) auto"], ["", "fixrec CB_project :: \"CValue \\<rightarrow> CValue \\<rightarrow> CValue \\<rightarrow> CValue\" where\n  \"CB_project\\<cdot>(CB\\<cdot>db)\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 = (if undiscr db then v\\<^sub>1 else v\\<^sub>2)\""], ["", "lemma [simp]:\n  \"CB_project\\<cdot>(CB\\<cdot>(Discr b))\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 = (if b then v\\<^sub>1 else v\\<^sub>2)\"\n  \"CB_project\\<cdot>\\<bottom>\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 = \\<bottom>\"\n  \"CB_project\\<cdot>(CFn\\<cdot>f)\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CB_project\\<cdot>(CB\\<cdot>(Discr b))\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 =\n    (if b then v\\<^sub>1 else v\\<^sub>2) &&&\n    CB_project\\<cdot>\\<bottom>\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 =\n    \\<bottom> &&&\n    CB_project\\<cdot>(CFn\\<cdot>f)\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 =\n    \\<bottom>", "by fixrec_simp+"], ["", "lemma CB_project_not_bot:\n  \"CB_project\\<cdot>scrut\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 \\<noteq> \\<bottom> \\<longleftrightarrow> (\\<exists> b. scrut = CB\\<cdot>(Discr b) \\<and> (if b then v\\<^sub>1 else v\\<^sub>2) \\<noteq> \\<bottom>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (CB_project\\<cdot>scrut\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 \\<noteq>\n     \\<bottom>) =\n    (\\<exists>b.\n        scrut = CB\\<cdot>(Discr b) \\<and>\n        (if b then v\\<^sub>1 else v\\<^sub>2) \\<noteq> \\<bottom>)", "apply (cases scrut)"], ["proof (prove)\ngoal (3 subgoals):\n 1. scrut = \\<bottom> \\<Longrightarrow>\n    (CB_project\\<cdot>scrut\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 \\<noteq>\n     \\<bottom>) =\n    (\\<exists>b.\n        scrut = CB\\<cdot>(Discr b) \\<and>\n        (if b then v\\<^sub>1 else v\\<^sub>2) \\<noteq> \\<bottom>)\n 2. \\<And>cfun.\n       scrut = CFn\\<cdot>cfun \\<Longrightarrow>\n       (CB_project\\<cdot>scrut\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 \\<noteq>\n        \\<bottom>) =\n       (\\<exists>b.\n           scrut = CB\\<cdot>(Discr b) \\<and>\n           (if b then v\\<^sub>1 else v\\<^sub>2) \\<noteq> \\<bottom>)\n 3. \\<And>discr.\n       scrut = CB\\<cdot>discr \\<Longrightarrow>\n       (CB_project\\<cdot>scrut\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 \\<noteq>\n        \\<bottom>) =\n       (\\<exists>b.\n           scrut = CB\\<cdot>(Discr b) \\<and>\n           (if b then v\\<^sub>1 else v\\<^sub>2) \\<noteq> \\<bottom>)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>cfun.\n       scrut = CFn\\<cdot>cfun \\<Longrightarrow>\n       (CB_project\\<cdot>scrut\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 \\<noteq>\n        \\<bottom>) =\n       (\\<exists>b.\n           scrut = CB\\<cdot>(Discr b) \\<and>\n           (if b then v\\<^sub>1 else v\\<^sub>2) \\<noteq> \\<bottom>)\n 2. \\<And>discr.\n       scrut = CB\\<cdot>discr \\<Longrightarrow>\n       (CB_project\\<cdot>scrut\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 \\<noteq>\n        \\<bottom>) =\n       (\\<exists>b.\n           scrut = CB\\<cdot>(Discr b) \\<and>\n           (if b then v\\<^sub>1 else v\\<^sub>2) \\<noteq> \\<bottom>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>discr.\n       scrut = CB\\<cdot>discr \\<Longrightarrow>\n       (CB_project\\<cdot>scrut\\<cdot>v\\<^sub>1\\<cdot>v\\<^sub>2 \\<noteq>\n        \\<bottom>) =\n       (\\<exists>b.\n           scrut = CB\\<cdot>(Discr b) \\<and>\n           (if b then v\\<^sub>1 else v\\<^sub>2) \\<noteq> \\<bottom>)", "by (metis (poly_guards_query) CB_project.simps CValue.injects(2) discr.exhaust undiscr_Discr)"], ["", "text \\<open>HOLCF provides us @{const CValue_take}\\<open>::\\<close>@{typeof CValue_take};\nwe want a similar function for @{typ \"C \\<rightarrow> CValue\"}.\\<close>"], ["", "abbreviation C_to_CValue_take :: \"nat \\<Rightarrow> (C \\<rightarrow> CValue) \\<rightarrow> (C \\<rightarrow> CValue)\"\n   where \"C_to_CValue_take n \\<equiv> cfun_map\\<cdot>ID\\<cdot>(CValue_take n)\""], ["", "lemma C_to_CValue_chain_take: \"chain C_to_CValue_take\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain C_to_CValue_take", "by (auto intro: chainI cfun_belowI chainE[OF CValue.chain_take] monofun_cfun_fun)"], ["", "lemma C_to_CValue_reach: \"(\\<Squnion> n. C_to_CValue_take n\\<cdot>x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>n. C_to_CValue_take n\\<cdot>x) = x", "by (auto intro:  cfun_eqI simp add: contlub_cfun_fun[OF ch2ch_Rep_cfunL[OF C_to_CValue_chain_take]]  CValue.reach)"], ["", "end"]]}