{"file_name": "/home/qj213/afp-2021-10-22/thys/Topological_Semantics/sse_boolean_algebra.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Topological_Semantics", "problem_names": ["lemma \"a \\<^bold>\\<or> a \\<^bold>\\<approx> a\"", "lemma \"a \\<^bold>\\<and> a \\<^bold>\\<approx> a\"", "lemma \"a \\<^bold>\\<preceq> a \\<^bold>\\<or> b\"", "lemma \"a \\<^bold>\\<and> b \\<^bold>\\<preceq> a\"", "lemma \"(a \\<^bold>\\<and> b) \\<^bold>\\<or> b \\<^bold>\\<approx> b\"", "lemma \"a \\<^bold>\\<and> (a \\<^bold>\\<or> b) \\<^bold>\\<approx> a\"", "lemma \"a \\<^bold>\\<preceq> c \\<Longrightarrow> b \\<^bold>\\<preceq> c \\<Longrightarrow> a \\<^bold>\\<or> b \\<^bold>\\<preceq> c\"", "lemma \"c \\<^bold>\\<preceq> a \\<Longrightarrow> c \\<^bold>\\<preceq> b \\<Longrightarrow> c \\<^bold>\\<preceq> a \\<^bold>\\<and> b\"", "lemma \"a \\<^bold>\\<preceq> b \\<equiv> (a \\<^bold>\\<or> b) \\<^bold>\\<approx> b\"", "lemma \"b \\<^bold>\\<preceq> a \\<equiv> (a \\<^bold>\\<and> b) \\<^bold>\\<approx> b\"", "lemma \"a \\<^bold>\\<preceq> c \\<Longrightarrow> b \\<^bold>\\<preceq> d \\<Longrightarrow> (a \\<^bold>\\<or> b) \\<^bold>\\<preceq> (c \\<^bold>\\<or> d)\"", "lemma \"a \\<^bold>\\<preceq> c \\<Longrightarrow> b \\<^bold>\\<preceq> d \\<Longrightarrow> (a \\<^bold>\\<and> b) \\<^bold>\\<preceq> (c \\<^bold>\\<and> d)\"", "lemma comp_symm: \"\\<phi>\\<^sup>c = \\<psi> \\<Longrightarrow> \\<phi> = \\<psi>\\<^sup>c\"", "lemma comp_invol: \"\\<phi>\\<^sup>c\\<^sup>c = \\<phi>\"", "lemma dual_symm: \"(\\<phi> \\<equiv> \\<psi>\\<^sup>d) \\<Longrightarrow> (\\<psi> \\<equiv> \\<phi>\\<^sup>d)\"", "lemma dual_comp: \"\\<phi>\\<^sup>d\\<^sup>c = \\<phi>\\<^sup>c\\<^sup>d\"", "lemma \"id\\<^sup>d \\<^bold>\\<equiv> id\"", "lemma \"id\\<^sup>c \\<^bold>\\<equiv> compl\"", "lemma \"(A \\<^bold>\\<squnion> B)\\<^sup>d \\<^bold>\\<equiv> (A\\<^sup>d) \\<^bold>\\<sqinter> (B\\<^sup>d)\"", "lemma \"(A \\<^bold>\\<squnion> B)\\<^sup>c \\<^bold>\\<equiv> (A\\<^sup>c) \\<^bold>\\<sqinter> (B\\<^sup>c)\"", "lemma \"(A \\<^bold>\\<sqinter> B)\\<^sup>d \\<^bold>\\<equiv> (A\\<^sup>d) \\<^bold>\\<squnion> (B\\<^sup>d)\"", "lemma \"(A \\<^bold>\\<sqinter> B)\\<^sup>c \\<^bold>\\<equiv> (A\\<^sup>c) \\<^bold>\\<squnion> (B\\<^sup>c)\"", "lemma fp_d: \"(fp \\<phi>\\<^sup>d) X = (fp \\<phi>)(\\<^bold>\\<midarrow>X)\"", "lemma fp_c: \"(fp \\<phi>\\<^sup>c) X = (X \\<^bold>\\<approx> \\<^bold>\\<midarrow>(\\<phi> X))\"", "lemma fp_dc:\"(fp \\<phi>\\<^sup>d\\<^sup>c) X = (X \\<^bold>\\<approx> \\<phi>(\\<^bold>\\<midarrow>X))\"", "lemma ofp_c: \"(\\<phi>\\<^sup>c)\\<^sup>f\\<^sup>p \\<^bold>\\<equiv> (\\<phi>\\<^sup>f\\<^sup>p)\\<^sup>c\"", "lemma ofp_d: \"(\\<phi>\\<^sup>d)\\<^sup>f\\<^sup>p \\<^bold>\\<equiv> (\\<phi>\\<^sup>f\\<^sup>p)\\<^sup>d\\<^sup>c\"", "lemma ofp_dc:\"(\\<phi>\\<^sup>d\\<^sup>c)\\<^sup>f\\<^sup>p \\<^bold>\\<equiv> (\\<phi>\\<^sup>f\\<^sup>p)\\<^sup>d\"", "lemma ofp_decomp: \"\\<phi>\\<^sup>f\\<^sup>p \\<^bold>\\<equiv> (id \\<^bold>\\<sqinter> \\<phi>) \\<^bold>\\<squnion> ((id \\<^bold>\\<squnion> \\<phi>)\\<^sup>c)\"", "lemma ofp_invol: \"(\\<phi>\\<^sup>f\\<^sup>p)\\<^sup>f\\<^sup>p \\<^bold>\\<equiv> \\<phi>\"", "lemma fp_rel: \"((fp \\<phi>) X) = (\\<phi>\\<^sup>f\\<^sup>p X \\<^bold>\\<approx> \\<^bold>\\<top>)\"", "lemma fp_d_rel:  \"((fp \\<phi>\\<^sup>d) X) = (\\<phi>\\<^sup>f\\<^sup>p(\\<^bold>\\<midarrow>X) \\<^bold>\\<approx> \\<^bold>\\<top>)\"", "lemma fp_c_rel: \"((fp \\<phi>\\<^sup>c) X) = (\\<phi>\\<^sup>f\\<^sup>p  X  \\<^bold>\\<approx> \\<^bold>\\<bottom>)\"", "lemma fp_dc_rel: \"((fp \\<phi>\\<^sup>d\\<^sup>c) X) = (\\<phi>\\<^sup>f\\<^sup>p(\\<^bold>\\<midarrow>X) \\<^bold>\\<approx> \\<^bold>\\<bottom>)\"", "lemma eq_ext: \"a \\<^bold>\\<approx> b \\<Longrightarrow>  a = b\"", "lemma eq_ext': \"a \\<^bold>\\<equiv> b \\<Longrightarrow>  a = b\"", "lemma meet_char: \"a \\<^bold>\\<preceq> b \\<longleftrightarrow> a \\<^bold>\\<and> b \\<^bold>\\<approx> a\"", "lemma join_char: \"a \\<^bold>\\<preceq> b \\<longleftrightarrow> a \\<^bold>\\<or> b \\<^bold>\\<approx> b\"", "lemma atomic1: \"\\<forall>w. \\<exists>q. q w \\<and> (\\<forall>p. p w \\<longrightarrow> q \\<^bold>\\<preceq> p)\"", "lemma atomic2: \"\\<forall>w. \\<exists>q. q w \\<and> atom(q)\"", "lemma atomic3: \"\\<forall>p. \\<not>(p \\<^bold>\\<approx> \\<^bold>\\<bottom>) \\<longrightarrow> (\\<exists>q. atom(q) \\<and> q \\<^bold>\\<preceq> p)\""], "translations": [["", "lemma \"a \\<^bold>\\<or> a \\<^bold>\\<approx> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. (a \\<^bold>\\<or> a) w = a w", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. (a w \\<or> a w) = a w", "by simp"], ["", "lemma \"a \\<^bold>\\<and> a \\<^bold>\\<approx> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. (a \\<^bold>\\<and> a) w = a w", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. (a w \\<and> a w) = a w", "by simp"], ["", "lemma \"a \\<^bold>\\<preceq> a \\<^bold>\\<or> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<^bold>\\<or> b \\<^bold>\\<succeq> a", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. a w \\<or> b w) \\<^bold>\\<succeq> a", "by simp"], ["", "lemma \"a \\<^bold>\\<and> b \\<^bold>\\<preceq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<^bold>\\<succeq> a \\<^bold>\\<and> b", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<^bold>\\<succeq> (\\<lambda>w. a w \\<and> b w)", "by simp"], ["", "lemma \"(a \\<^bold>\\<and> b) \\<^bold>\\<or> b \\<^bold>\\<approx> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. (a \\<^bold>\\<and> b \\<^bold>\\<or> b) w = b w", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. (a w \\<and> b w \\<or> b w) = b w", "by auto"], ["", "(*absorption 1*)"], ["", "lemma \"a \\<^bold>\\<and> (a \\<^bold>\\<or> b) \\<^bold>\\<approx> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. (a \\<^bold>\\<and> (a \\<^bold>\\<or> b)) w = a w", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. (a w \\<and> (a w \\<or> b w)) = a w", "by auto"], ["", "(*absorption 2*)"], ["", "lemma \"a \\<^bold>\\<preceq> c \\<Longrightarrow> b \\<^bold>\\<preceq> c \\<Longrightarrow> a \\<^bold>\\<or> b \\<^bold>\\<preceq> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<^bold>\\<succeq> a; c \\<^bold>\\<succeq> b\\<rbrakk>\n    \\<Longrightarrow> c \\<^bold>\\<succeq> a \\<^bold>\\<or> b", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<^bold>\\<succeq> a; c \\<^bold>\\<succeq> b\\<rbrakk>\n    \\<Longrightarrow> c \\<^bold>\\<succeq> (\\<lambda>w. a w \\<or> b w)", "by simp"], ["", "lemma \"c \\<^bold>\\<preceq> a \\<Longrightarrow> c \\<^bold>\\<preceq> b \\<Longrightarrow> c \\<^bold>\\<preceq> a \\<^bold>\\<and> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<^bold>\\<succeq> c; b \\<^bold>\\<succeq> c\\<rbrakk>\n    \\<Longrightarrow> a \\<^bold>\\<and> b \\<^bold>\\<succeq> c", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<^bold>\\<succeq> c; b \\<^bold>\\<succeq> c\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>w. a w \\<and> b w) \\<^bold>\\<succeq> c", "by simp"], ["", "lemma \"a \\<^bold>\\<preceq> b \\<equiv> (a \\<^bold>\\<or> b) \\<^bold>\\<approx> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<^bold>\\<succeq> a \\<equiv> \\<forall>w. (a \\<^bold>\\<or> b) w = b w", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<^bold>\\<succeq> a \\<equiv> \\<forall>w. (a w \\<or> b w) = b w", "by smt"], ["", "lemma \"b \\<^bold>\\<preceq> a \\<equiv> (a \\<^bold>\\<and> b) \\<^bold>\\<approx> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<^bold>\\<succeq> b \\<equiv> \\<forall>w. (a \\<^bold>\\<and> b) w = b w", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<^bold>\\<succeq> b \\<equiv> \\<forall>w. (a w \\<and> b w) = b w", "by smt"], ["", "lemma \"a \\<^bold>\\<preceq> c \\<Longrightarrow> b \\<^bold>\\<preceq> d \\<Longrightarrow> (a \\<^bold>\\<or> b) \\<^bold>\\<preceq> (c \\<^bold>\\<or> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<^bold>\\<succeq> a; d \\<^bold>\\<succeq> b\\<rbrakk>\n    \\<Longrightarrow> c \\<^bold>\\<or> d \\<^bold>\\<succeq> a \\<^bold>\\<or> b", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<^bold>\\<succeq> a; d \\<^bold>\\<succeq> b\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>w. c w \\<or> d w) \\<^bold>\\<succeq>\n                      (\\<lambda>w. a w \\<or> b w)", "by simp"], ["", "lemma \"a \\<^bold>\\<preceq> c \\<Longrightarrow> b \\<^bold>\\<preceq> d \\<Longrightarrow> (a \\<^bold>\\<and> b) \\<^bold>\\<preceq> (c \\<^bold>\\<and> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<^bold>\\<succeq> a; d \\<^bold>\\<succeq> b\\<rbrakk>\n    \\<Longrightarrow> c \\<^bold>\\<and> d \\<^bold>\\<succeq>\n                      a \\<^bold>\\<and> b", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<^bold>\\<succeq> a; d \\<^bold>\\<succeq> b\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>w. c w \\<and> d w) \\<^bold>\\<succeq>\n                      (\\<lambda>w. a w \\<and> b w)", "by simp"], ["", "subsection \\<open>Second-order operations and fixed-points\\<close>"], ["", "text\\<open>\\noindent{We define equality for propositional functions as follows.}\\<close>"], ["", "definition equal_op::\"('t\\<Rightarrow>\\<sigma>)\\<Rightarrow>('t\\<Rightarrow>\\<sigma>)\\<Rightarrow>bool\" (infix \"\\<^bold>\\<equiv>\" 60) where \"\\<phi> \\<^bold>\\<equiv> \\<psi> \\<equiv> \\<forall>X. \\<phi> X \\<^bold>\\<approx> \\<psi> X\""], ["", "text\\<open>\\noindent{Moreover, we define some useful Boolean (2nd-order) operations on propositional functions,}\\<close>"], ["", "abbreviation unionOp::\"('t\\<Rightarrow>\\<sigma>)\\<Rightarrow>('t\\<Rightarrow>\\<sigma>)\\<Rightarrow>('t\\<Rightarrow>\\<sigma>)\" (infixr \"\\<^bold>\\<squnion>\" 61) where \"\\<phi> \\<^bold>\\<squnion> \\<psi> \\<equiv> \\<lambda>X. \\<phi> X \\<^bold>\\<or> \\<psi> X\""], ["", "abbreviation interOp::\"('t\\<Rightarrow>\\<sigma>)\\<Rightarrow>('t\\<Rightarrow>\\<sigma>)\\<Rightarrow>('t\\<Rightarrow>\\<sigma>)\" (infixr \"\\<^bold>\\<sqinter>\" 62) where \"\\<phi> \\<^bold>\\<sqinter> \\<psi> \\<equiv> \\<lambda>X. \\<phi> X \\<^bold>\\<and> \\<psi> X\""], ["", "abbreviation compOp::\"('t\\<Rightarrow>\\<sigma>)\\<Rightarrow>('t\\<Rightarrow>\\<sigma>)\" (\"(_\\<^sup>c)\") where \"\\<phi>\\<^sup>c \\<equiv> \\<lambda>X. \\<^bold>\\<midarrow>\\<phi> X\""], ["", "text\\<open>\\noindent{some of them explicitly targeting operations,}\\<close>"], ["", "definition dual::\"(\\<sigma>\\<Rightarrow>\\<sigma>)\\<Rightarrow>(\\<sigma>\\<Rightarrow>\\<sigma>)\" (\"(_\\<^sup>d)\") where \"\\<phi>\\<^sup>d \\<equiv> \\<lambda>X. \\<^bold>\\<midarrow>(\\<phi>(\\<^bold>\\<midarrow>X))\""], ["", "text\\<open>\\noindent{and also define an useful operation (for technical purposes).}\\<close>"], ["", "definition id::\"\\<sigma>\\<Rightarrow>\\<sigma>\" (\"id\") where \"id A \\<equiv> A\""], ["", "text\\<open>\\noindent{We now prove some useful lemmas (some of them may help the provers in their hard work).}\\<close>"], ["", "lemma comp_symm: \"\\<phi>\\<^sup>c = \\<psi> \\<Longrightarrow> \\<phi> = \\<psi>\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>\\<^sup>c = \\<psi> \\<Longrightarrow> \\<phi> = \\<psi>\\<^sup>c", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>X w. \\<not> \\<phi> X w) = \\<psi> \\<Longrightarrow>\n    \\<phi> = (\\<lambda>X w. \\<not> \\<psi> X w)", "by blast"], ["", "lemma comp_invol: \"\\<phi>\\<^sup>c\\<^sup>c = \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>X. compl\\<^sup>c (\\<phi> X)) = \\<phi>", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>X w. \\<not> \\<not> \\<phi> X w) = \\<phi>", "by blast"], ["", "lemma dual_symm: \"(\\<phi> \\<equiv> \\<psi>\\<^sup>d) \\<Longrightarrow> (\\<psi> \\<equiv> \\<phi>\\<^sup>d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<equiv> \\<psi>\\<^sup>d \\<Longrightarrow>\n    \\<psi> \\<equiv> \\<phi>\\<^sup>d", "unfolding dual_def conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<equiv>\n    \\<lambda>X w. \\<not> \\<psi> (\\<lambda>w. \\<not> X w) w \\<Longrightarrow>\n    \\<psi> \\<equiv>\n    \\<lambda>X w. \\<not> \\<not> \\<psi> (\\<lambda>w. \\<not> \\<not> X w) w", "by simp"], ["", "lemma dual_comp: \"\\<phi>\\<^sup>d\\<^sup>c = \\<phi>\\<^sup>c\\<^sup>d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>\\<^sup>d\\<^sup>c = \\<phi>\\<^sup>c\\<^sup>d", "unfolding dual_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>X. compl\\<^sup>c (\\<phi> (\\<^bold>\\<midarrow>X))) =\n    (\\<lambda>X. compl\\<^sup>c (\\<phi> (\\<^bold>\\<midarrow>X)))", "by simp"], ["", "lemma \"id\\<^sup>d \\<^bold>\\<equiv> id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id\\<^sup>d \\<^bold>\\<equiv> id", "by (simp add: id_def dual_def equal_op_def conn)"], ["", "lemma \"id\\<^sup>c \\<^bold>\\<equiv> compl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id\\<^sup>c \\<^bold>\\<equiv> compl", "by (simp add: id_def dual_def equal_op_def conn)"], ["", "lemma \"(A \\<^bold>\\<squnion> B)\\<^sup>d \\<^bold>\\<equiv> (A\\<^sup>d) \\<^bold>\\<sqinter> (B\\<^sup>d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<^bold>\\<squnion> B\\<^sup>d \\<^bold>\\<equiv>\n    A\\<^sup>d \\<^bold>\\<sqinter> B\\<^sup>d", "by (simp add: dual_def equal_op_def conn)"], ["", "lemma \"(A \\<^bold>\\<squnion> B)\\<^sup>c \\<^bold>\\<equiv> (A\\<^sup>c) \\<^bold>\\<sqinter> (B\\<^sup>c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>X. (\\<^bold>\\<or>) (A X)\\<^sup>c (B X)) \\<^bold>\\<equiv>\n    A\\<^sup>c \\<^bold>\\<sqinter> B\\<^sup>c", "by (simp add: equal_op_def conn)"], ["", "lemma \"(A \\<^bold>\\<sqinter> B)\\<^sup>d \\<^bold>\\<equiv> (A\\<^sup>d) \\<^bold>\\<squnion> (B\\<^sup>d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<^bold>\\<sqinter> B\\<^sup>d \\<^bold>\\<equiv>\n    A\\<^sup>d \\<^bold>\\<squnion> B\\<^sup>d", "by (simp add: dual_def equal_op_def conn)"], ["", "lemma \"(A \\<^bold>\\<sqinter> B)\\<^sup>c \\<^bold>\\<equiv> (A\\<^sup>c) \\<^bold>\\<squnion> (B\\<^sup>c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>X. (\\<^bold>\\<and>) (A X)\\<^sup>c (B X)) \\<^bold>\\<equiv>\n    A\\<^sup>c \\<^bold>\\<squnion> B\\<^sup>c", "by (simp add: equal_op_def conn)"], ["", "text\\<open>\\noindent{The notion of a fixed point is a fundamental one. We speak of propositions being fixed points of\noperations. For a given operation we define in the usual way a fixed-point predicate for propositions.}\\<close>"], ["", "abbreviation fixedpoint::\"(\\<sigma>\\<Rightarrow>\\<sigma>)\\<Rightarrow>(\\<sigma>\\<Rightarrow>bool)\" (\"fp\") where \"fp \\<phi> \\<equiv> \\<lambda>X. \\<phi> X \\<^bold>\\<approx> X\""], ["", "lemma fp_d: \"(fp \\<phi>\\<^sup>d) X = (fp \\<phi>)(\\<^bold>\\<midarrow>X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. \\<phi>\\<^sup>d X w = X w) =\n    (\\<forall>w. \\<phi> (\\<^bold>\\<midarrow>X) w = (\\<^bold>\\<midarrow>X) w)", "unfolding dual_def conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. (\\<not> \\<phi> (\\<lambda>w. \\<not> X w) w) = X w) =\n    (\\<forall>w. \\<phi> (\\<lambda>w. \\<not> X w) w = (\\<not> X w))", "by auto"], ["", "lemma fp_c: \"(fp \\<phi>\\<^sup>c) X = (X \\<^bold>\\<approx> \\<^bold>\\<midarrow>(\\<phi> X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. \\<phi>\\<^sup>c X w = X w) =\n    (\\<forall>w. X w = \\<phi>\\<^sup>c X w)", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. (\\<not> \\<phi> X w) = X w) =\n    (\\<forall>w. X w = (\\<not> \\<phi> X w))", "by auto"], ["", "lemma fp_dc:\"(fp \\<phi>\\<^sup>d\\<^sup>c) X = (X \\<^bold>\\<approx> \\<phi>(\\<^bold>\\<midarrow>X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. \\<phi>\\<^sup>d\\<^sup>c X w = X w) =\n    (\\<forall>w. X w = \\<phi> (\\<^bold>\\<midarrow>X) w)", "unfolding dual_def conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. (\\<not> \\<not> \\<phi> (\\<lambda>w. \\<not> X w) w) = X w) =\n    (\\<forall>w. X w = \\<phi> (\\<lambda>w. \\<not> X w) w)", "by auto"], ["", "text\\<open>\\noindent{Indeed, we can 'operationalize' this predicate by defining a fixed-point operator as follows:}\\<close>"], ["", "abbreviation fixedpoint_op::\"(\\<sigma>\\<Rightarrow>\\<sigma>)\\<Rightarrow>(\\<sigma>\\<Rightarrow>\\<sigma>)\" (\"(_\\<^sup>f\\<^sup>p)\") where \"\\<phi>\\<^sup>f\\<^sup>p  \\<equiv> \\<lambda>X. (\\<phi> X) \\<^bold>\\<leftrightarrow> X\""], ["", "lemma ofp_c: \"(\\<phi>\\<^sup>c)\\<^sup>f\\<^sup>p \\<^bold>\\<equiv> (\\<phi>\\<^sup>f\\<^sup>p)\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>\\<^sup>c\\<^sup>f\\<^sup>p \\<^bold>\\<equiv>\n    (\\<lambda>X. (\\<^bold>\\<leftrightarrow>) (\\<phi> X)\\<^sup>c X)", "unfolding conn equal_op_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X w. ((\\<not> \\<phi> X w) = X w) = (\\<phi> X w \\<noteq> X w)", "by auto"], ["", "lemma ofp_d: \"(\\<phi>\\<^sup>d)\\<^sup>f\\<^sup>p \\<^bold>\\<equiv> (\\<phi>\\<^sup>f\\<^sup>p)\\<^sup>d\\<^sup>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>\\<^sup>d\\<^sup>f\\<^sup>p \\<^bold>\\<equiv>\n    \\<phi>\\<^sup>f\\<^sup>p\\<^sup>d\\<^sup>c", "unfolding dual_def equal_op_def conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X w.\n       ((\\<not> \\<phi> (\\<lambda>w. \\<not> X w) w) = X w) =\n       (\\<not> \\<phi> (\\<lambda>w. \\<not> X w) w \\<noteq> (\\<not> X w))", "by auto"], ["", "lemma ofp_dc:\"(\\<phi>\\<^sup>d\\<^sup>c)\\<^sup>f\\<^sup>p \\<^bold>\\<equiv> (\\<phi>\\<^sup>f\\<^sup>p)\\<^sup>d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>\\<^sup>d\\<^sup>c\\<^sup>f\\<^sup>p \\<^bold>\\<equiv>\n    \\<phi>\\<^sup>f\\<^sup>p\\<^sup>d", "unfolding dual_def equal_op_def conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X w.\n       ((\\<not> \\<not> \\<phi> (\\<lambda>w. \\<not> X w) w) = X w) =\n       (\\<phi> (\\<lambda>w. \\<not> X w) w \\<noteq> (\\<not> X w))", "by auto"], ["", "lemma ofp_decomp: \"\\<phi>\\<^sup>f\\<^sup>p \\<^bold>\\<equiv> (id \\<^bold>\\<sqinter> \\<phi>) \\<^bold>\\<squnion> ((id \\<^bold>\\<squnion> \\<phi>)\\<^sup>c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi>\\<^sup>f\\<^sup>p \\<^bold>\\<equiv>\n    (\\<lambda>X.\n        (id \\<^bold>\\<sqinter> \\<phi>) X \\<^bold>\\<or>\n        (\\<^bold>\\<or>) (id X)\\<^sup>c (\\<phi> X))", "unfolding equal_op_def id_def conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X w.\n       (\\<phi> X w = X w) =\n       (X w \\<and> \\<phi> X w \\<or> \\<not> (X w \\<or> \\<phi> X w))", "by auto"], ["", "lemma ofp_invol: \"(\\<phi>\\<^sup>f\\<^sup>p)\\<^sup>f\\<^sup>p \\<^bold>\\<equiv> \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>X.\n        (\\<^bold>\\<leftrightarrow>) (\\<phi> X)\\<^sup>f\\<^sup>p\n         X) \\<^bold>\\<equiv>\n    \\<phi>", "unfolding conn equal_op_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X w. ((\\<phi> X w = X w) = X w) = \\<phi> X w", "by auto"], ["", "text\\<open>\\noindent{Fixed-point predicate and fixed-point operator are closely related.}\\<close>"], ["", "lemma fp_rel: \"((fp \\<phi>) X) = (\\<phi>\\<^sup>f\\<^sup>p X \\<^bold>\\<approx> \\<^bold>\\<top>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. \\<phi> X w = X w) =\n    (\\<forall>w. \\<phi>\\<^sup>f\\<^sup>p X w = \\<^bold>\\<top> w)", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. \\<phi> X w = X w) = (\\<forall>w. (\\<phi> X w = X w) = True)", "by auto"], ["", "lemma fp_d_rel:  \"((fp \\<phi>\\<^sup>d) X) = (\\<phi>\\<^sup>f\\<^sup>p(\\<^bold>\\<midarrow>X) \\<^bold>\\<approx> \\<^bold>\\<top>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. \\<phi>\\<^sup>d X w = X w) =\n    (\\<forall>w.\n        \\<phi>\\<^sup>f\\<^sup>p (\\<^bold>\\<midarrow>X) w = \\<^bold>\\<top> w)", "unfolding dual_def conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. (\\<not> \\<phi> (\\<lambda>w. \\<not> X w) w) = X w) =\n    (\\<forall>w. (\\<phi> (\\<lambda>w. \\<not> X w) w = (\\<not> X w)) = True)", "by auto"], ["", "lemma fp_c_rel: \"((fp \\<phi>\\<^sup>c) X) = (\\<phi>\\<^sup>f\\<^sup>p  X  \\<^bold>\\<approx> \\<^bold>\\<bottom>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. \\<phi>\\<^sup>c X w = X w) =\n    (\\<forall>w. \\<phi>\\<^sup>f\\<^sup>p X w = \\<^bold>\\<bottom> w)", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. (\\<not> \\<phi> X w) = X w) =\n    (\\<forall>w. (\\<phi> X w = X w) = False)", "by auto"], ["", "lemma fp_dc_rel: \"((fp \\<phi>\\<^sup>d\\<^sup>c) X) = (\\<phi>\\<^sup>f\\<^sup>p(\\<^bold>\\<midarrow>X) \\<^bold>\\<approx> \\<^bold>\\<bottom>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. \\<phi>\\<^sup>d\\<^sup>c X w = X w) =\n    (\\<forall>w.\n        \\<phi>\\<^sup>f\\<^sup>p (\\<^bold>\\<midarrow>X) w =\n        \\<^bold>\\<bottom> w)", "unfolding dual_def conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>w. (\\<not> \\<not> \\<phi> (\\<lambda>w. \\<not> X w) w) = X w) =\n    (\\<forall>w. (\\<phi> (\\<lambda>w. \\<not> X w) w = (\\<not> X w)) = False)", "by auto"], ["", "subsection \\<open>Equality and atomicity\\<close>"], ["", "text\\<open>\\noindent{We prove some facts about equality (which may help improve prover's performance).}\\<close>"], ["", "lemma eq_ext: \"a \\<^bold>\\<approx> b \\<Longrightarrow>  a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. a w = b w \\<Longrightarrow> a = b", "using ext"], ["proof (prove)\nusing this:\n  (\\<And>x. ?f x = ?g x) \\<Longrightarrow> ?f = ?g\n\ngoal (1 subgoal):\n 1. \\<forall>w. a w = b w \\<Longrightarrow> a = b", "by blast"], ["", "lemma eq_ext': \"a \\<^bold>\\<equiv> b \\<Longrightarrow>  a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<^bold>\\<equiv> b \\<Longrightarrow> a = b", "using ext"], ["proof (prove)\nusing this:\n  (\\<And>x. ?f x = ?g x) \\<Longrightarrow> ?f = ?g\n\ngoal (1 subgoal):\n 1. a \\<^bold>\\<equiv> b \\<Longrightarrow> a = b", "unfolding equal_op_def"], ["proof (prove)\nusing this:\n  (\\<And>x. ?f x = ?g x) \\<Longrightarrow> ?f = ?g\n\ngoal (1 subgoal):\n 1. \\<forall>X w. a X w = b X w \\<Longrightarrow> a = b", "by blast"], ["", "lemma meet_char: \"a \\<^bold>\\<preceq> b \\<longleftrightarrow> a \\<^bold>\\<and> b \\<^bold>\\<approx> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b \\<^bold>\\<succeq> a) = (\\<forall>w. (a \\<^bold>\\<and> b) w = a w)", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (b \\<^bold>\\<succeq> a) = (\\<forall>w. (a w \\<and> b w) = a w)", "by blast"], ["", "lemma join_char: \"a \\<^bold>\\<preceq> b \\<longleftrightarrow> a \\<^bold>\\<or> b \\<^bold>\\<approx> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b \\<^bold>\\<succeq> a) = (\\<forall>w. (a \\<^bold>\\<or> b) w = b w)", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. (b \\<^bold>\\<succeq> a) = (\\<forall>w. (a w \\<or> b w) = b w)", "by blast"], ["", "text\\<open>\\noindent{We can verify indeed that the algebra is atomic (in three different ways) by relying on the\npresence of primitive equality in HOL. A more general class of Boolean algebras could in principle\nbe obtained in systems without primitive equality or by suitably restricting quantification over\npropositions (e.g. defining a topology and restricting quantifiers to open/closed sets).}\\<close>"], ["", "definition \"atom a \\<equiv> \\<not>(a \\<^bold>\\<approx> \\<^bold>\\<bottom>) \\<and> (\\<forall>p. a \\<^bold>\\<preceq> p \\<or> a \\<^bold>\\<preceq> \\<^bold>\\<midarrow>p)\""], ["", "lemma atomic1: \"\\<forall>w. \\<exists>q. q w \\<and> (\\<forall>p. p w \\<longrightarrow> q \\<^bold>\\<preceq> p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       \\<exists>q.\n          q w \\<and>\n          (\\<forall>p. p w \\<longrightarrow> p \\<^bold>\\<succeq> q)", "using the_sym_eq_trivial"], ["proof (prove)\nusing this:\n  (THE y. ?x = y) = ?x\n\ngoal (1 subgoal):\n 1. \\<forall>w.\n       \\<exists>q.\n          q w \\<and>\n          (\\<forall>p. p w \\<longrightarrow> p \\<^bold>\\<succeq> q)", "by (metis (full_types))"], ["", "lemma atomic2: \"\\<forall>w. \\<exists>q. q w \\<and> atom(q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w. \\<exists>q. q w \\<and> atom q", "using the_sym_eq_trivial"], ["proof (prove)\nusing this:\n  (THE y. ?x = y) = ?x\n\ngoal (1 subgoal):\n 1. \\<forall>w. \\<exists>q. q w \\<and> atom q", "by (metis (full_types) atom_def compl_def bottom_def)"], ["", "lemma atomic3: \"\\<forall>p. \\<not>(p \\<^bold>\\<approx> \\<^bold>\\<bottom>) \\<longrightarrow> (\\<exists>q. atom(q) \\<and> q \\<^bold>\\<preceq> p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "(*using atom_def unfolding conn by fastforce*)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "assume \"\\<not>(p \\<^bold>\\<approx> \\<^bold>\\<bottom>)\""], ["proof (state)\nthis:\n  \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w)\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "hence \"\\<exists>v. p v\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w)\n\ngoal (1 subgoal):\n 1. \\<exists>v. p v", "unfolding conn"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>w. p w = False)\n\ngoal (1 subgoal):\n 1. \\<exists>v. p v", "by simp"], ["proof (state)\nthis:\n  \\<exists>v. p v\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "then"], ["proof (chain)\npicking this:\n  \\<exists>v. p v", "obtain w where 1:\"p w\""], ["proof (prove)\nusing this:\n  \\<exists>v. p v\n\ngoal (1 subgoal):\n 1. (\\<And>w. p w \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (rule exE)"], ["proof (state)\nthis:\n  p w\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "let ?q=\"\\<lambda>v. v = w\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "(*using HOL primitive equality*)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "have 2: \"atom ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom (\\<lambda>v. v = w)", "unfolding atom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>wa. (wa = w) = \\<^bold>\\<bottom> wa) \\<and>\n    (\\<forall>p.\n        p \\<^bold>\\<succeq> (\\<lambda>wa. wa = w) \\<or>\n        \\<^bold>\\<midarrow>p \\<^bold>\\<succeq> (\\<lambda>wa. wa = w))", "unfolding conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>wa. (wa = w) = False) \\<and>\n    (\\<forall>p.\n        p \\<^bold>\\<succeq> (\\<lambda>wa. wa = w) \\<or>\n        (\\<lambda>w. \\<not> p w) \\<^bold>\\<succeq> (\\<lambda>wa. wa = w))", "by simp"], ["proof (state)\nthis:\n  atom (\\<lambda>v. v = w)\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "have \"\\<forall>v. ?q v \\<longrightarrow> p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<^bold>\\<succeq> (\\<lambda>v. v = w)", "using 1"], ["proof (prove)\nusing this:\n  p w\n\ngoal (1 subgoal):\n 1. p \\<^bold>\\<succeq> (\\<lambda>v. v = w)", "by simp"], ["proof (state)\nthis:\n  p \\<^bold>\\<succeq> (\\<lambda>v. v = w)\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "hence 3: \"?q \\<^bold>\\<preceq> p\""], ["proof (prove)\nusing this:\n  p \\<^bold>\\<succeq> (\\<lambda>v. v = w)\n\ngoal (1 subgoal):\n 1. p \\<^bold>\\<succeq> (\\<lambda>wa. wa = w)", "by simp"], ["proof (state)\nthis:\n  p \\<^bold>\\<succeq> (\\<lambda>wa. wa = w)\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "from 2 3"], ["proof (chain)\npicking this:\n  atom (\\<lambda>v. v = w)\n  p \\<^bold>\\<succeq> (\\<lambda>wa. wa = w)", "have \"\\<exists>q. atom(q) \\<and> q \\<^bold>\\<preceq> p\""], ["proof (prove)\nusing this:\n  atom (\\<lambda>v. v = w)\n  p \\<^bold>\\<succeq> (\\<lambda>wa. wa = w)\n\ngoal (1 subgoal):\n 1. \\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q", "by blast"], ["proof (state)\nthis:\n  \\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "}"], ["proof (state)\nthis:\n  \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<Longrightarrow>\n  \\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "hence \"\\<not>(p \\<^bold>\\<approx> \\<^bold>\\<bottom>) \\<longrightarrow> (\\<exists>q. atom(q) \\<and> q \\<^bold>\\<preceq> p)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<Longrightarrow>\n  \\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n    (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "by (rule impI)"], ["proof (state)\nthis:\n  \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n  (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "}"], ["proof (state)\nthis:\n  \\<not> (\\<forall>w. ?p2 w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n  (\\<exists>q. atom q \\<and> ?p2 \\<^bold>\\<succeq> q)\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>w. ?p2 w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n  (\\<exists>q. atom q \\<and> ?p2 \\<^bold>\\<succeq> q)\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n       (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)", "by (rule allI)"], ["proof (state)\nthis:\n  \\<forall>p.\n     \\<not> (\\<forall>w. p w = \\<^bold>\\<bottom> w) \\<longrightarrow>\n     (\\<exists>q. atom q \\<and> p \\<^bold>\\<succeq> q)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}