{"file_name": "/home/qj213/afp-2021-10-22/thys/Topological_Semantics/sse_operation_positive_quantification.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Topological_Semantics", "problem_names": ["lemma iADDI_MULT_dual1: \"iADDI_a \\<phi> \\<Longrightarrow> iMULT_b \\<phi>\\<^sup>d\"", "lemma iADDI_MULT_dual2: \"iMULT_b \\<phi> \\<Longrightarrow> iADDI_a \\<phi>\\<^sup>d\"", "lemma iMULTa_rel: \"iMULT_a \\<phi> = MULT_a \\<phi>\"", "lemma iADDIb_rel: \"iADDI_b \\<phi> = ADDI_b \\<phi>\"", "lemma MONO_iADDIb: \"MONO \\<phi> = iADDI_b \\<phi>\"", "lemma MONO_iMULTa: \"MONO \\<phi> = iMULT_a \\<phi>\"", "lemma iADDI_b_iMULTa: \"iADDI_b \\<phi> = iMULT_a \\<phi>\"", "lemma PI_imult: \"MONO \\<phi> \\<Longrightarrow> iMULT_b \\<phi> \\<Longrightarrow> iMULT \\<phi>\"", "lemma PC_iaddi: \"MONO \\<phi> \\<Longrightarrow> iADDI_a \\<phi> \\<Longrightarrow> iADDI \\<phi>\"", "lemma fp_inf_closed: \"MONO \\<phi> \\<Longrightarrow> iMULT_b \\<phi> \\<Longrightarrow> infimum_closed (fp \\<phi>)\"", "lemma fp_sup_closed: \"MONO \\<phi> \\<Longrightarrow> iADDI_a \\<phi> \\<Longrightarrow> supremum_closed (fp \\<phi>)\"", "lemma CBarcan1: \"MONO \\<phi> \\<Longrightarrow> \\<forall>\\<pi>.  \\<phi>(\\<^bold>\\<forall>x. \\<pi> x)  \\<^bold>\\<preceq> (\\<^bold>\\<forall>x. \\<phi>(\\<pi> x))\"", "lemma CBarcan2: \"MONO \\<phi> \\<Longrightarrow> \\<forall>\\<pi>. (\\<^bold>\\<exists>x. \\<phi>(\\<pi> x)) \\<^bold>\\<preceq> \\<phi>(\\<^bold>\\<exists>x. \\<pi> x)\"", "lemma Barcan1: \"iMULT_b \\<phi> \\<Longrightarrow> \\<forall>\\<pi>. (\\<^bold>\\<forall>x. \\<phi>(\\<pi> x)) \\<^bold>\\<preceq> \\<phi>(\\<^bold>\\<forall>x. \\<pi> x)\"", "lemma Barcan2: \"iADDI_a \\<phi> \\<Longrightarrow> \\<forall>\\<pi>. \\<phi>(\\<^bold>\\<exists>x. \\<pi> x) \\<^bold>\\<preceq> (\\<^bold>\\<exists>x. \\<phi>(\\<pi> x))\""], "translations": [["", "lemma iADDI_MULT_dual1: \"iADDI_a \\<phi> \\<Longrightarrow> iMULT_b \\<phi>\\<^sup>d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow> iMULT_b \\<phi>\\<^sup>d", "unfolding iADDI_a_def iMULT_b_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>S.\n       contains \\<^bold>\\<Or>Ra[\\<phi>|S]\n        (\\<phi> \\<^bold>\\<Or>S) \\<Longrightarrow>\n    \\<forall>S.\n       contains (\\<phi>\\<^sup>d \\<^bold>\\<And>S)\n        \\<^bold>\\<And>Ra[\\<phi>\\<^sup>d|S]", "by (metis compl_def dual_def iDM_a iDM_b Ra_dual1)"], ["", "lemma iADDI_MULT_dual2: \"iMULT_b \\<phi> \\<Longrightarrow> iADDI_a \\<phi>\\<^sup>d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow> iADDI_a \\<phi>\\<^sup>d", "unfolding iADDI_a_def iMULT_b_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>S.\n       contains (\\<phi> \\<^bold>\\<And>S)\n        \\<^bold>\\<And>Ra[\\<phi>|S] \\<Longrightarrow>\n    \\<forall>S.\n       contains \\<^bold>\\<Or>Ra[\\<phi>\\<^sup>d|S]\n        (\\<phi>\\<^sup>d \\<^bold>\\<Or>S)", "by (metis compl_def dual_def iDM_b Ra_dual3)"], ["", "text\\<open>\\noindent{MULT-a and iMULT-a are equivalent.}\\<close>"], ["", "lemma iMULTa_rel: \"iMULT_a \\<phi> = MULT_a \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> = MULT_a \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> = MULT_a \\<phi>", "have lr: \"iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "assume imulta: \"iMULT_a \\<phi>\""], ["proof (state)\nthis:\n  iMULT_a \\<phi>\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "{"], ["proof (state)\nthis:\n  iMULT_a \\<phi>\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "fix A::\"\\<sigma>\" and B::\"\\<sigma>\""], ["proof (state)\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "let ?S=\"\\<lambda>Z. Z=A \\<or> Z=B\""], ["proof (state)\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "from imulta"], ["proof (chain)\npicking this:\n  iMULT_a \\<phi>", "have \"\\<phi>(\\<^bold>\\<And>?S) \\<^bold>\\<preceq> \\<^bold>\\<forall>\\<^sup>R\\<lparr>?S\\<rparr> \\<phi>\""], ["proof (prove)\nusing this:\n  iMULT_a \\<phi>\n\ngoal (1 subgoal):\n 1. contains\n     (\\<lambda>w.\n         contains (\\<lambda>X. \\<phi> X w) (\\<lambda>X. X = A \\<or> X = B))\n     (\\<phi> \\<^bold>\\<And>\\<lambda>Z. Z = A \\<or> Z = B)", "by (simp add: iMULT_a_def Ra_restr_all)"], ["proof (state)\nthis:\n  contains\n   (\\<lambda>w.\n       contains (\\<lambda>X. \\<phi> X w) (\\<lambda>X. X = A \\<or> X = B))\n   (\\<phi> \\<^bold>\\<And>\\<lambda>Z. Z = A \\<or> Z = B)\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "moreover"], ["proof (state)\nthis:\n  contains\n   (\\<lambda>w.\n       contains (\\<lambda>X. \\<phi> X w) (\\<lambda>X. X = A \\<or> X = B))\n   (\\<phi> \\<^bold>\\<And>\\<lambda>Z. Z = A \\<or> Z = B)\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "have \"\\<^bold>\\<And>?S = A \\<^bold>\\<and> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>\\<And>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<and> B", "using infimum_def meet_def"], ["proof (prove)\nusing this:\n  \\<^bold>\\<And>?S \\<equiv> \\<lambda>w. contains (\\<lambda>X. X w) ?S\n  ?A \\<^bold>\\<and> ?B \\<equiv> \\<lambda>w. ?A w \\<and> ?B w\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<And>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<and> B", "by auto"], ["proof (state)\nthis:\n  \\<^bold>\\<And>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<and> B\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "moreover"], ["proof (state)\nthis:\n  \\<^bold>\\<And>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<and> B\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "have \"\\<^bold>\\<forall>\\<^sup>R\\<lparr>?S\\<rparr> \\<phi> = (\\<phi> A) \\<^bold>\\<and> (\\<phi> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        contains (\\<lambda>X. \\<phi> X w) (\\<lambda>X. X = A \\<or> X = B)) =\n    \\<phi> A \\<^bold>\\<and> \\<phi> B", "using meet_def"], ["proof (prove)\nusing this:\n  ?A \\<^bold>\\<and> ?B \\<equiv> \\<lambda>w. ?A w \\<and> ?B w\n\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        contains (\\<lambda>X. \\<phi> X w) (\\<lambda>X. X = A \\<or> X = B)) =\n    \\<phi> A \\<^bold>\\<and> \\<phi> B", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>w.\n      contains (\\<lambda>X. \\<phi> X w) (\\<lambda>X. X = A \\<or> X = B)) =\n  \\<phi> A \\<^bold>\\<and> \\<phi> B\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  contains\n   (\\<lambda>w.\n       contains (\\<lambda>X. \\<phi> X w) (\\<lambda>X. X = A \\<or> X = B))\n   (\\<phi> \\<^bold>\\<And>\\<lambda>Z. Z = A \\<or> Z = B)\n  \\<^bold>\\<And>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<and> B\n  (\\<lambda>w.\n      contains (\\<lambda>X. \\<phi> X w) (\\<lambda>X. X = A \\<or> X = B)) =\n  \\<phi> A \\<^bold>\\<and> \\<phi> B", "have \"\\<phi>(A \\<^bold>\\<and> B) \\<^bold>\\<preceq> (\\<phi> A) \\<^bold>\\<and> (\\<phi> B)\""], ["proof (prove)\nusing this:\n  contains\n   (\\<lambda>w.\n       contains (\\<lambda>X. \\<phi> X w) (\\<lambda>X. X = A \\<or> X = B))\n   (\\<phi> \\<^bold>\\<And>\\<lambda>Z. Z = A \\<or> Z = B)\n  \\<^bold>\\<And>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<and> B\n  (\\<lambda>w.\n      contains (\\<lambda>X. \\<phi> X w) (\\<lambda>X. X = A \\<or> X = B)) =\n  \\<phi> A \\<^bold>\\<and> \\<phi> B\n\ngoal (1 subgoal):\n 1. contains (\\<phi> A \\<^bold>\\<and> \\<phi> B)\n     (\\<phi> (A \\<^bold>\\<and> B))", "by smt"], ["proof (state)\nthis:\n  contains (\\<phi> A \\<^bold>\\<and> \\<phi> B) (\\<phi> (A \\<^bold>\\<and> B))\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "}"], ["proof (state)\nthis:\n  contains (\\<phi> ?A2 \\<^bold>\\<and> \\<phi> ?B2)\n   (\\<phi> (?A2 \\<^bold>\\<and> ?B2))\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>", "thus ?thesis"], ["proof (prove)\nusing this:\n  contains (\\<phi> ?A2 \\<^bold>\\<and> \\<phi> ?B2)\n   (\\<phi> (?A2 \\<^bold>\\<and> ?B2))\n\ngoal (1 subgoal):\n 1. MULT_a \\<phi>", "by (simp add: MULT_a_def)"], ["proof (state)\nthis:\n  MULT_a \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> = MULT_a \\<phi>", "have rl: \"MULT_a \\<phi> \\<Longrightarrow> iMULT_a \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MULT_a \\<phi> \\<Longrightarrow> iMULT_a \\<phi>", "by (smt MONO_def MONO_MULTa Ra_restr_all iMULT_a_def inf_char)"], ["proof (state)\nthis:\n  MULT_a \\<phi> \\<Longrightarrow> iMULT_a \\<phi>\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> = MULT_a \\<phi>", "from lr rl"], ["proof (chain)\npicking this:\n  iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>\n  MULT_a \\<phi> \\<Longrightarrow> iMULT_a \\<phi>", "show ?thesis"], ["proof (prove)\nusing this:\n  iMULT_a \\<phi> \\<Longrightarrow> MULT_a \\<phi>\n  MULT_a \\<phi> \\<Longrightarrow> iMULT_a \\<phi>\n\ngoal (1 subgoal):\n 1. iMULT_a \\<phi> = MULT_a \\<phi>", "by auto"], ["proof (state)\nthis:\n  iMULT_a \\<phi> = MULT_a \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\\noindent{ADDI-b and iADDI-b are equivalent.}\\<close>"], ["", "lemma iADDIb_rel: \"iADDI_b \\<phi> = ADDI_b \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> = ADDI_b \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> = ADDI_b \\<phi>", "have lr: \"iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "assume iaddib: \"iADDI_b \\<phi>\""], ["proof (state)\nthis:\n  iADDI_b \\<phi>\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "{"], ["proof (state)\nthis:\n  iADDI_b \\<phi>\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "fix A::\"\\<sigma>\" and B::\"\\<sigma>\""], ["proof (state)\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "let ?S=\"\\<lambda>Z. Z=A \\<or> Z=B\""], ["proof (state)\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "from iaddib"], ["proof (chain)\npicking this:\n  iADDI_b \\<phi>", "have \"\\<phi>(\\<^bold>\\<Or>?S) \\<^bold>\\<succeq> \\<^bold>\\<exists>\\<^sup>R\\<lparr>?S\\<rparr>(\\<phi>)\""], ["proof (prove)\nusing this:\n  iADDI_b \\<phi>\n\ngoal (1 subgoal):\n 1. contains (\\<phi> \\<^bold>\\<Or>\\<lambda>Z. Z = A \\<or> Z = B)\n     (\\<lambda>w.\n         nonEmpty (\\<lambda>X. (X = A \\<or> X = B) \\<and> \\<phi> X w))", "by (simp add: iADDI_b_def Ra_restr_ex)"], ["proof (state)\nthis:\n  contains (\\<phi> \\<^bold>\\<Or>\\<lambda>Z. Z = A \\<or> Z = B)\n   (\\<lambda>w.\n       nonEmpty (\\<lambda>X. (X = A \\<or> X = B) \\<and> \\<phi> X w))\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "moreover"], ["proof (state)\nthis:\n  contains (\\<phi> \\<^bold>\\<Or>\\<lambda>Z. Z = A \\<or> Z = B)\n   (\\<lambda>w.\n       nonEmpty (\\<lambda>X. (X = A \\<or> X = B) \\<and> \\<phi> X w))\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "have \"\\<^bold>\\<Or>?S = A \\<^bold>\\<or> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>\\<Or>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<or> B", "using supremum_def join_def"], ["proof (prove)\nusing this:\n  \\<^bold>\\<Or>?S \\<equiv>\n  \\<lambda>w. nonEmpty (\\<lambda>X. ?S X \\<and> X w)\n  ?A \\<^bold>\\<or> ?B \\<equiv> \\<lambda>w. ?A w \\<or> ?B w\n\ngoal (1 subgoal):\n 1. \\<^bold>\\<Or>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<or> B", "by auto"], ["proof (state)\nthis:\n  \\<^bold>\\<Or>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<or> B\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "moreover"], ["proof (state)\nthis:\n  \\<^bold>\\<Or>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<or> B\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "have \"\\<^bold>\\<exists>\\<^sup>R\\<lparr>?S\\<rparr>(\\<phi>) = (\\<phi> A) \\<^bold>\\<or> (\\<phi> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        nonEmpty (\\<lambda>X. (X = A \\<or> X = B) \\<and> \\<phi> X w)) =\n    \\<phi> A \\<^bold>\\<or> \\<phi> B", "using join_def"], ["proof (prove)\nusing this:\n  ?A \\<^bold>\\<or> ?B \\<equiv> \\<lambda>w. ?A w \\<or> ?B w\n\ngoal (1 subgoal):\n 1. (\\<lambda>w.\n        nonEmpty (\\<lambda>X. (X = A \\<or> X = B) \\<and> \\<phi> X w)) =\n    \\<phi> A \\<^bold>\\<or> \\<phi> B", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>w.\n      nonEmpty (\\<lambda>X. (X = A \\<or> X = B) \\<and> \\<phi> X w)) =\n  \\<phi> A \\<^bold>\\<or> \\<phi> B\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "ultimately"], ["proof (chain)\npicking this:\n  contains (\\<phi> \\<^bold>\\<Or>\\<lambda>Z. Z = A \\<or> Z = B)\n   (\\<lambda>w.\n       nonEmpty (\\<lambda>X. (X = A \\<or> X = B) \\<and> \\<phi> X w))\n  \\<^bold>\\<Or>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<or> B\n  (\\<lambda>w.\n      nonEmpty (\\<lambda>X. (X = A \\<or> X = B) \\<and> \\<phi> X w)) =\n  \\<phi> A \\<^bold>\\<or> \\<phi> B", "have \"\\<phi>(A \\<^bold>\\<or> B) \\<^bold>\\<succeq> (\\<phi> A) \\<^bold>\\<or> (\\<phi> B)\""], ["proof (prove)\nusing this:\n  contains (\\<phi> \\<^bold>\\<Or>\\<lambda>Z. Z = A \\<or> Z = B)\n   (\\<lambda>w.\n       nonEmpty (\\<lambda>X. (X = A \\<or> X = B) \\<and> \\<phi> X w))\n  \\<^bold>\\<Or>\\<lambda>Z. Z = A \\<or> Z = B = A \\<^bold>\\<or> B\n  (\\<lambda>w.\n      nonEmpty (\\<lambda>X. (X = A \\<or> X = B) \\<and> \\<phi> X w)) =\n  \\<phi> A \\<^bold>\\<or> \\<phi> B\n\ngoal (1 subgoal):\n 1. contains (\\<phi> (A \\<^bold>\\<or> B)) (\\<phi> A \\<^bold>\\<or> \\<phi> B)", "by smt"], ["proof (state)\nthis:\n  contains (\\<phi> (A \\<^bold>\\<or> B)) (\\<phi> A \\<^bold>\\<or> \\<phi> B)\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "}"], ["proof (state)\nthis:\n  contains (\\<phi> (?A2 \\<^bold>\\<or> ?B2))\n   (\\<phi> ?A2 \\<^bold>\\<or> \\<phi> ?B2)\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>", "thus ?thesis"], ["proof (prove)\nusing this:\n  contains (\\<phi> (?A2 \\<^bold>\\<or> ?B2))\n   (\\<phi> ?A2 \\<^bold>\\<or> \\<phi> ?B2)\n\ngoal (1 subgoal):\n 1. ADDI_b \\<phi>", "by (simp add: ADDI_b_def)"], ["proof (state)\nthis:\n  ADDI_b \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> = ADDI_b \\<phi>", "have rl: \"ADDI_b \\<phi> \\<Longrightarrow> iADDI_b \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ADDI_b \\<phi> \\<Longrightarrow> iADDI_b \\<phi>", "by (smt MONO_def MONO_ADDIb Ra_restr_ex iADDI_b_def sup_char)"], ["proof (state)\nthis:\n  ADDI_b \\<phi> \\<Longrightarrow> iADDI_b \\<phi>\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> = ADDI_b \\<phi>", "from lr rl"], ["proof (chain)\npicking this:\n  iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>\n  ADDI_b \\<phi> \\<Longrightarrow> iADDI_b \\<phi>", "show ?thesis"], ["proof (prove)\nusing this:\n  iADDI_b \\<phi> \\<Longrightarrow> ADDI_b \\<phi>\n  ADDI_b \\<phi> \\<Longrightarrow> iADDI_b \\<phi>\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> = ADDI_b \\<phi>", "by auto"], ["proof (state)\nthis:\n  iADDI_b \\<phi> = ADDI_b \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\\noindent{Thus we have that MONO, MULT-a/iMULT-a and ADDI-b/iADDI-b are all equivalent.}\\<close>"], ["", "lemma MONO_iADDIb: \"MONO \\<phi> = iADDI_b \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MONO \\<phi> = iADDI_b \\<phi>", "using MONO_ADDIb iADDIb_rel"], ["proof (prove)\nusing this:\n  MONO ?\\<phi> = ADDI_b ?\\<phi>\n  iADDI_b ?\\<phi> = ADDI_b ?\\<phi>\n\ngoal (1 subgoal):\n 1. MONO \\<phi> = iADDI_b \\<phi>", "by simp"], ["", "lemma MONO_iMULTa: \"MONO \\<phi> = iMULT_a \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MONO \\<phi> = iMULT_a \\<phi>", "using MONO_MULTa iMULTa_rel"], ["proof (prove)\nusing this:\n  MONO ?\\<phi> = MULT_a ?\\<phi>\n  iMULT_a ?\\<phi> = MULT_a ?\\<phi>\n\ngoal (1 subgoal):\n 1. MONO \\<phi> = iMULT_a \\<phi>", "by simp"], ["", "lemma iADDI_b_iMULTa: \"iADDI_b \\<phi> = iMULT_a \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> = iMULT_a \\<phi>", "using MONO_iADDIb MONO_iMULTa"], ["proof (prove)\nusing this:\n  MONO ?\\<phi> = iADDI_b ?\\<phi>\n  MONO ?\\<phi> = iMULT_a ?\\<phi>\n\ngoal (1 subgoal):\n 1. iADDI_b \\<phi> = iMULT_a \\<phi>", "by auto"], ["", "lemma PI_imult: \"MONO \\<phi> \\<Longrightarrow> iMULT_b \\<phi> \\<Longrightarrow> iMULT \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>MONO \\<phi>; iMULT_b \\<phi>\\<rbrakk>\n    \\<Longrightarrow> iMULT \\<phi>", "using MONO_MULTa iMULT_a_def iMULT_b_def iMULT_def iMULTa_rel"], ["proof (prove)\nusing this:\n  MONO ?\\<phi> = MULT_a ?\\<phi>\n  iMULT_a ?\\<phi> \\<equiv>\n  \\<forall>S. contains \\<^bold>\\<And>Ra[?\\<phi>|S] (?\\<phi> \\<^bold>\\<And>S)\n  iMULT_b ?\\<phi> \\<equiv>\n  \\<forall>S. contains (?\\<phi> \\<^bold>\\<And>S) \\<^bold>\\<And>Ra[?\\<phi>|S]\n  iMULT ?\\<phi> \\<equiv>\n  \\<forall>S w. ?\\<phi> \\<^bold>\\<And>S w = \\<^bold>\\<And>Ra[?\\<phi>|S] w\n  iMULT_a ?\\<phi> = MULT_a ?\\<phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>MONO \\<phi>; iMULT_b \\<phi>\\<rbrakk>\n    \\<Longrightarrow> iMULT \\<phi>", "by auto"], ["", "lemma PC_iaddi: \"MONO \\<phi> \\<Longrightarrow> iADDI_a \\<phi> \\<Longrightarrow> iADDI \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>MONO \\<phi>; iADDI_a \\<phi>\\<rbrakk>\n    \\<Longrightarrow> iADDI \\<phi>", "using MONO_ADDIb iADDI_a_def iADDI_b_def iADDI_def iADDIb_rel"], ["proof (prove)\nusing this:\n  MONO ?\\<phi> = ADDI_b ?\\<phi>\n  iADDI_a ?\\<phi> \\<equiv>\n  \\<forall>S. contains \\<^bold>\\<Or>Ra[?\\<phi>|S] (?\\<phi> \\<^bold>\\<Or>S)\n  iADDI_b ?\\<phi> \\<equiv>\n  \\<forall>S. contains (?\\<phi> \\<^bold>\\<Or>S) \\<^bold>\\<Or>Ra[?\\<phi>|S]\n  iADDI ?\\<phi> \\<equiv>\n  \\<forall>S w. ?\\<phi> \\<^bold>\\<Or>S w = \\<^bold>\\<Or>Ra[?\\<phi>|S] w\n  iADDI_b ?\\<phi> = ADDI_b ?\\<phi>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>MONO \\<phi>; iADDI_a \\<phi>\\<rbrakk>\n    \\<Longrightarrow> iADDI \\<phi>", "by auto"], ["", "text\\<open>\\noindent{Interestingly, we can show that suitable (infinitary) conditions on an operation can make the set\nof its fixed points closed under infinite meets/joins.}\\<close>"], ["", "lemma fp_inf_closed: \"MONO \\<phi> \\<Longrightarrow> iMULT_b \\<phi> \\<Longrightarrow> infimum_closed (fp \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>MONO \\<phi>; iMULT_b \\<phi>\\<rbrakk>\n    \\<Longrightarrow> contains\n                       (\\<lambda>D.\n                           \\<forall>w.\n                              \\<phi> \\<^bold>\\<And>D w = \\<^bold>\\<And>D w)\n                       (\\<lambda>D.\n                           nonEmpty D \\<and>\n                           contains\n                            (\\<lambda>X. \\<forall>w. \\<phi> X w = X w) D)", "by (metis (full_types) PI_imult Ra_restr_all iMULT_def infimum_def)"], ["", "lemma fp_sup_closed: \"MONO \\<phi> \\<Longrightarrow> iADDI_a \\<phi> \\<Longrightarrow> supremum_closed (fp \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>MONO \\<phi>; iADDI_a \\<phi>\\<rbrakk>\n    \\<Longrightarrow> contains\n                       (\\<lambda>D.\n                           \\<forall>w.\n                              \\<phi> \\<^bold>\\<Or>D w = \\<^bold>\\<Or>D w)\n                       (\\<lambda>D.\n                           nonEmpty D \\<and>\n                           contains\n                            (\\<lambda>X. \\<forall>w. \\<phi> X w = X w) D)", "by (metis (full_types) PC_iaddi Ra_restr_ex iADDI_def supremum_def)"], ["", "subsection \\<open>Exploring the Barcan formula and its converse\\<close>"], ["", "text\\<open>\\noindent{The converse Barcan formula follows readily from monotonicity.}\\<close>"], ["", "lemma CBarcan1: \"MONO \\<phi> \\<Longrightarrow> \\<forall>\\<pi>.  \\<phi>(\\<^bold>\\<forall>x. \\<pi> x)  \\<^bold>\\<preceq> (\\<^bold>\\<forall>x. \\<phi>(\\<pi> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MONO \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)\n        (\\<phi> (mforallB \\<pi>))", "by (metis (mono_tags, lifting) MONO_def)"], ["", "lemma CBarcan2: \"MONO \\<phi> \\<Longrightarrow> \\<forall>\\<pi>. (\\<^bold>\\<exists>x. \\<phi>(\\<pi> x)) \\<^bold>\\<preceq> \\<phi>(\\<^bold>\\<exists>x. \\<pi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MONO \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mexistsB \\<pi>))\n        (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))", "by (metis (mono_tags, lifting) MONO_def)"], ["", "text\\<open>\\noindent{However, the Barcan formula requires a stronger assumption (of an infinitary character).}\\<close>"], ["", "lemma Barcan1: \"iMULT_b \\<phi> \\<Longrightarrow> \\<forall>\\<pi>. (\\<^bold>\\<forall>x. \\<phi>(\\<pi> x)) \\<^bold>\\<preceq> \\<phi>(\\<^bold>\\<forall>x. \\<pi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "assume imultb: \"iMULT_b \\<phi>\""], ["proof (state)\nthis:\n  iMULT_b \\<phi>\n\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "{"], ["proof (state)\nthis:\n  iMULT_b \\<phi>\n\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "fix \\<pi>::\"'a\\<Rightarrow>\\<sigma>\""], ["proof (state)\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "from imultb"], ["proof (chain)\npicking this:\n  iMULT_b \\<phi>", "have \"(\\<^bold>\\<And>Ra(\\<phi>\\<circ>\\<pi>)) \\<^bold>\\<preceq> \\<phi>(\\<^bold>\\<And>Ra(\\<pi>))\""], ["proof (prove)\nusing this:\n  iMULT_b \\<phi>\n\ngoal (1 subgoal):\n 1. contains (\\<phi> \\<^bold>\\<And>Ra\\<pi>)\n     \\<^bold>\\<And>Ra\\<phi> \\<circ> \\<pi>", "unfolding iMULT_b_def"], ["proof (prove)\nusing this:\n  \\<forall>S. contains (\\<phi> \\<^bold>\\<And>S) \\<^bold>\\<And>Ra[\\<phi>|S]\n\ngoal (1 subgoal):\n 1. contains (\\<phi> \\<^bold>\\<And>Ra\\<pi>)\n     \\<^bold>\\<And>Ra\\<phi> \\<circ> \\<pi>", "by (smt comp_apply infimum_def pfunRange_def pfunRange_restr_def)"], ["proof (state)\nthis:\n  contains (\\<phi> \\<^bold>\\<And>Ra\\<pi>)\n   \\<^bold>\\<And>Ra\\<phi> \\<circ> \\<pi>\n\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "moreover"], ["proof (state)\nthis:\n  contains (\\<phi> \\<^bold>\\<And>Ra\\<pi>)\n   \\<^bold>\\<And>Ra\\<phi> \\<circ> \\<pi>\n\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "have \"\\<^bold>\\<And>Ra(\\<pi>) = (\\<^bold>\\<forall>x. \\<pi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>\\<And>Ra\\<pi> = mforallB \\<pi>", "unfolding Ra_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. mforallB \\<pi> = mforallB \\<pi>", "by simp"], ["proof (state)\nthis:\n  \\<^bold>\\<And>Ra\\<pi> = mforallB \\<pi>\n\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "moreover"], ["proof (state)\nthis:\n  \\<^bold>\\<And>Ra\\<pi> = mforallB \\<pi>\n\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "have \"\\<^bold>\\<And>Ra(\\<phi>\\<circ>\\<pi>) = (\\<^bold>\\<forall>x. \\<phi>(\\<pi> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>\\<And>Ra\\<phi> \\<circ> \\<pi> =\n    (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "unfolding Ra_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. mforallB (\\<phi> \\<circ> \\<pi>) =\n    (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "by simp"], ["proof (state)\nthis:\n  \\<^bold>\\<And>Ra\\<phi> \\<circ> \\<pi> =\n  (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)\n\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "ultimately"], ["proof (chain)\npicking this:\n  contains (\\<phi> \\<^bold>\\<And>Ra\\<pi>)\n   \\<^bold>\\<And>Ra\\<phi> \\<circ> \\<pi>\n  \\<^bold>\\<And>Ra\\<pi> = mforallB \\<pi>\n  \\<^bold>\\<And>Ra\\<phi> \\<circ> \\<pi> =\n  (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "have \"(\\<^bold>\\<forall>x. \\<phi>(\\<pi> x)) \\<^bold>\\<preceq> \\<phi>(\\<^bold>\\<forall>x. \\<pi> x)\""], ["proof (prove)\nusing this:\n  contains (\\<phi> \\<^bold>\\<And>Ra\\<pi>)\n   \\<^bold>\\<And>Ra\\<phi> \\<circ> \\<pi>\n  \\<^bold>\\<And>Ra\\<pi> = mforallB \\<pi>\n  \\<^bold>\\<And>Ra\\<phi> \\<circ> \\<pi> =\n  (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)\n\ngoal (1 subgoal):\n 1. contains (\\<phi> (mforallB \\<pi>))\n     (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "by simp"], ["proof (state)\nthis:\n  contains (\\<phi> (mforallB \\<pi>))\n   (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)\n\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "}"], ["proof (state)\nthis:\n  contains (\\<phi> (mforallB ?\\<pi>2))\n   (\\<lambda>w. \\<forall>X. \\<phi> (?\\<pi>2 X) w)\n\ngoal (1 subgoal):\n 1. iMULT_b \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "thus ?thesis"], ["proof (prove)\nusing this:\n  contains (\\<phi> (mforallB ?\\<pi>2))\n   (\\<lambda>w. \\<forall>X. \\<phi> (?\\<pi>2 X) w)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<pi>.\n       contains (\\<phi> (mforallB \\<pi>))\n        (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)", "by simp"], ["proof (state)\nthis:\n  \\<forall>\\<pi>.\n     contains (\\<phi> (mforallB \\<pi>))\n      (\\<lambda>w. \\<forall>X. \\<phi> (\\<pi> X) w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Barcan2: \"iADDI_a \\<phi> \\<Longrightarrow> \\<forall>\\<pi>. \\<phi>(\\<^bold>\\<exists>x. \\<pi> x) \\<^bold>\\<preceq> (\\<^bold>\\<exists>x. \\<phi>(\\<pi> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "assume iaddia: \"iADDI_a \\<phi>\""], ["proof (state)\nthis:\n  iADDI_a \\<phi>\n\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "{"], ["proof (state)\nthis:\n  iADDI_a \\<phi>\n\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "fix \\<pi>::\"'a\\<Rightarrow>\\<sigma>\""], ["proof (state)\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "from iaddia"], ["proof (chain)\npicking this:\n  iADDI_a \\<phi>", "have \"\\<phi>(\\<^bold>\\<Or>Ra(\\<pi>)) \\<^bold>\\<preceq> (\\<^bold>\\<Or>Ra(\\<phi>\\<circ>\\<pi>))\""], ["proof (prove)\nusing this:\n  iADDI_a \\<phi>\n\ngoal (1 subgoal):\n 1. contains \\<^bold>\\<Or>Ra\\<phi> \\<circ> \\<pi>\n     (\\<phi> \\<^bold>\\<Or>Ra\\<pi>)", "unfolding iADDI_a_def Ra_restr_ex"], ["proof (prove)\nusing this:\n  \\<forall>S.\n     contains (\\<lambda>w. nonEmpty (\\<lambda>X. S X \\<and> \\<phi> X w))\n      (\\<phi> \\<^bold>\\<Or>S)\n\ngoal (1 subgoal):\n 1. contains \\<^bold>\\<Or>Ra\\<phi> \\<circ> \\<pi>\n     (\\<phi> \\<^bold>\\<Or>Ra\\<pi>)", "by (smt fcomp_comp fcomp_def pfunRange_def sup_char)"], ["proof (state)\nthis:\n  contains \\<^bold>\\<Or>Ra\\<phi> \\<circ> \\<pi> (\\<phi> \\<^bold>\\<Or>Ra\\<pi>)\n\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "moreover"], ["proof (state)\nthis:\n  contains \\<^bold>\\<Or>Ra\\<phi> \\<circ> \\<pi> (\\<phi> \\<^bold>\\<Or>Ra\\<pi>)\n\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "have \"\\<^bold>\\<Or>Ra(\\<pi>) = (\\<^bold>\\<exists>x. \\<pi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>\\<Or>Ra\\<pi> = mexistsB \\<pi>", "unfolding Ra_ex"], ["proof (prove)\ngoal (1 subgoal):\n 1. mexistsB \\<pi> = mexistsB \\<pi>", "by simp"], ["proof (state)\nthis:\n  \\<^bold>\\<Or>Ra\\<pi> = mexistsB \\<pi>\n\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "moreover"], ["proof (state)\nthis:\n  \\<^bold>\\<Or>Ra\\<pi> = mexistsB \\<pi>\n\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "have \"\\<^bold>\\<Or>Ra(\\<phi>\\<circ>\\<pi>) = (\\<^bold>\\<exists>x. \\<phi>(\\<pi> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<^bold>\\<Or>Ra\\<phi> \\<circ> \\<pi> =\n    (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))", "unfolding Ra_ex"], ["proof (prove)\ngoal (1 subgoal):\n 1. mexistsB (\\<phi> \\<circ> \\<pi>) =\n    (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))", "by simp"], ["proof (state)\nthis:\n  \\<^bold>\\<Or>Ra\\<phi> \\<circ> \\<pi> =\n  (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "ultimately"], ["proof (chain)\npicking this:\n  contains \\<^bold>\\<Or>Ra\\<phi> \\<circ> \\<pi> (\\<phi> \\<^bold>\\<Or>Ra\\<pi>)\n  \\<^bold>\\<Or>Ra\\<pi> = mexistsB \\<pi>\n  \\<^bold>\\<Or>Ra\\<phi> \\<circ> \\<pi> =\n  (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))", "have \"\\<phi>(\\<^bold>\\<exists>x. \\<pi> x) \\<^bold>\\<preceq> (\\<^bold>\\<exists>x. \\<phi>(\\<pi> x))\""], ["proof (prove)\nusing this:\n  contains \\<^bold>\\<Or>Ra\\<phi> \\<circ> \\<pi> (\\<phi> \\<^bold>\\<Or>Ra\\<pi>)\n  \\<^bold>\\<Or>Ra\\<pi> = mexistsB \\<pi>\n  \\<^bold>\\<Or>Ra\\<phi> \\<circ> \\<pi> =\n  (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n\ngoal (1 subgoal):\n 1. contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n     (\\<phi> (mexistsB \\<pi>))", "by simp"], ["proof (state)\nthis:\n  contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n   (\\<phi> (mexistsB \\<pi>))\n\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "}"], ["proof (state)\nthis:\n  contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (?\\<pi>2 X) w))\n   (\\<phi> (mexistsB ?\\<pi>2))\n\ngoal (1 subgoal):\n 1. iADDI_a \\<phi> \\<Longrightarrow>\n    \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "thus ?thesis"], ["proof (prove)\nusing this:\n  contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (?\\<pi>2 X) w))\n   (\\<phi> (mexistsB ?\\<pi>2))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<pi>.\n       contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n        (\\<phi> (mexistsB \\<pi>))", "by simp"], ["proof (state)\nthis:\n  \\<forall>\\<pi>.\n     contains (\\<lambda>w. nonEmpty (\\<lambda>X. \\<phi> (\\<pi> X) w))\n      (\\<phi> (mexistsB \\<pi>))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}