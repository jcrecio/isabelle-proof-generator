{"file_name": "/home/qj213/afp-2021-10-22/thys/Octonions/Octonions.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Octonions", "problem_names": ["lemma octo_eqI [intro?]:\n  \"\\<lbrakk>Ree x = Ree y; Im1 x = Im1 y; Im2 x = Im2 y; Im3 x = Im3 y;\n    Im4 x = Im4 y;Im5 x = Im5 y;  Im6 x = Im6 y; Im7 x = Im7 y\\<rbrakk> \\<Longrightarrow> x = y\"", "lemma octo_eq_iff:\n  \"x = y \\<longleftrightarrow> Ree x = Ree y \\<and> Im1 x = Im1 y \\<and> Im2 x = Im2 y \\<and> Im3 x = Im3 y \\<and>\n             Im4 x = Im4 y \\<and> Im5 x = Im5 y \\<and> Im6 x = Im6 y  \\<and> Im7 x = Im7 y\"", "lemma octo_eq_0_iff:\n  \"x = 0 \\<longleftrightarrow> Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2 +\n               Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^ 2  = 0\"", "lemma octo_proj_add:\n  assumes \"i \\<le> 7\"\n  shows \"octo_proj (x+y) i = octo_proj x i + octo_proj y i\"", "lemma norm_eq_L2: \"norm x = L2_set (octo_proj x) {..7}\"", "lemma norm_octo_squared:\n  \"norm x ^ 2 = Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2 +\n     Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^ 2\"", "lemma octo_inner_1 [simp]: \"inner 1 x = Ree x\"\n and octo_inner_1_right [simp]: \"inner x 1 = Ree x\"", "lemma octo_inner_e1_left [simp]: \"inner e1 x = Im1 x\"\n and octo_inner_e1_right [simp]: \"inner x e1 = Im1 x\"", "lemma octo_inner_e2_left [simp]: \"inner e2 x = Im2 x\"\n  and octo_inner_e2_right [simp]: \"inner x e2 = Im2 x\"", "lemma octo_inner_e3_left [simp]: \"inner e3 x = Im3 x\"\n and  octo_inner_e3_right [simp]: \"inner x e3 = Im3 x\"", "lemma octo_inner_e4_left [simp]: \"inner e4 x  = Im4 x\"\n and octo_inner_e4_right [simp]: \"inner x e4 = Im4 x\"", "lemma octo_inner_e5_left [simp]: \"inner e5 x  = Im5 x\"\n and  octo_inner_e5_right [simp]: \"inner x e5 = Im5 x\"", "lemma octo_inner_e6_left [simp]: \"inner e6 x  = Im6 x\"\n and octo_inner_e6_right [simp]: \"inner x e6 = Im6 x\"", "lemma octo_inner_e7_left [simp]: \"inner e7 x  = Im7 x\"\n and octo_inner_e7_right [simp]: \"inner x e7 = Im7 x\"", "lemma octo_norm_pow_2_inner: \"(norm x) ^ 2 = inner x x \" for x::octo", "lemma octo_norm_property:\n  \"inner x y = (1/2)* ((norm(x+y))^2 - (norm(x))^2 - (norm(y))^2) \" for x y ::octo", "lemma octo_mult_components: \n  \"Ree (x *  y ) =  Ree x *  Ree y - Im1 x * Im1 y -  Im2 x * Im2 y - Im3 x * Im3 y\n   - Im4 x * Im4 y - Im5 x * Im5 y - Im6 x * Im6 y-  Im7 x * Im7 y\"\n  \"Im1 (x  *  y )  =  Ree x * Im1 y +   Im1 x * Ree y + Im2 x * Im4 y +Im3 x * Im7 y -\n     Im4 x * Im2 y    +Im5 x * Im6 y - Im6 x * Im5 y - Im7 x * Im3 y \"    \n   \" Im2 (x  *  y )  =  Ree x *  Im2 y - Im1 x * Im4 y+ Im2 x  * Ree y + Im3 x * Im5 y \n          + Im4 x * Im1 y  - Im5 x * Im3 y + Im6 x * Im7 y - Im7 x *Im6 y  \"    \n   \" Im3 (x * y ) =  Ree x * Im3 y -Im1 x * Im7 y -Im2 x *Im5 y +Im3 x * Ree y + Im4 x * Im6 y\n         +  Im5 x *Im2 y  - Im6 x * Im4 y + Im7 x * Im1 y \"   \n   \"Im4  (x *y ) =  Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y -Im3 x * Im6 y + Im4 x * Ree y \n        +Im5 x * Im7 y +Im6 x * Im3 y -Im7 x * Im5 y  \"   \n   \"Im5  (x * y ) = Ree x * Im5 y - Im1 x * Im6 y +Im2 x * Im3 y -Im3 x * Im2 y -Im4 x * Im7 y\n         +Im5 x * Ree y  +Im6 x * Im1 y + Im7 x  * Im4 y  \"    \n   \" Im6  (x *  y) = Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y +Im3 x * Im4 y - Im4 x * Im3 y\n        -Im5 x * Im1 y + Im6 x * Ree y + Im7 x * Im2 y   \"    \n    \"Im7 (x * y)  = Ree x * Im7 y + Im1 x * Im3 y +Im2 x * Im6 y - Im3 x * Im1 y + Im4 x * Im5 y\n   -Im5 x * Im4 y - Im6 x * Im2 y +Im7 x * Ree y  \"", "lemma octo_distrib_left :\n  \"a * (b + c) = a * b + a * c\" for a b c ::octo", "lemma octo_distrib_right :\n  \"(b + c) * a = b * a + c * a\" for a b c ::octo", "lemma multiplicative_norm_octo: \"norm (x * y) = norm x * norm y\" for x y ::octo", "lemma mult_1_right_octo [simp]: \"x * 1 = (x :: octo)\"\n and mult_1_left_octo [simp]: \"1 * x = (x :: octo)\"", "lemma power2_eq_square_octo: \"x ^ 2 = (x * x :: octo)\"", "lemma octo_product_alternative_left: \"x * (x * y) = (x * x :: octo) * y\"", "lemma octo_product_alternative_right: \"x * (y * y) = (x * y :: octo) * y\"", "lemma octo_product_flexible: \"(x * y) * x = x * (y * x :: octo)\"", "lemma octo_power_commutes: \"x ^ y * x = x * (x ^ y :: octo)\"", "lemma octo_product_noncommutative: \"\\<not>(\\<forall>x y::octo. (x * y = y * x))\"", "lemma octo_product_nonassociative :\n  \"\\<not>(\\<forall> x y z::octo. x * (y * z) = (x * y) * z)\"", "lemma octo_of_nat_sel [simp]:\n  \"Ree (octo_of_nat x) = of_nat x\" \"Im1 (octo_of_nat x) = 0\" \"Im2 (octo_of_nat x) = 0\"\n  \"Im3 (octo_of_nat x) = 0\" \"Im4 (octo_of_nat x) = 0\" \"Im5 (octo_of_nat x) = 0\"\n  \"Im6 (octo_of_nat x) = 0\" \"Im7 (octo_of_nat x) = 0\"", "lemma octo_of_real_sel [simp]:\n  \"Ree (octo_of_real x) = x\" \"Im1 (octo_of_real x) = 0\" \"Im2 (octo_of_real x) = 0\"\n  \"Im3 (octo_of_real x) = 0\" \"Im4 (octo_of_real x) = 0\" \"Im5 (octo_of_real x) = 0\"\n  \"Im6 (octo_of_real x) = 0\" \"Im7 (octo_of_real x) = 0\"", "lemma octo_of_int_sel [simp]:\n  \"Ree (octo_of_int x) = of_int x\" \"Im1 (octo_of_int x) = 0\" \"Im2 (octo_of_int x) = 0\"\n  \"Im3 (octo_of_int x) = 0\" \"Im4 (octo_of_int x) = 0\" \"Im5 (octo_of_int x) = 0\"\n  \"Im6 (octo_of_int x) = 0\" \"Im7 (octo_of_int x) = 0\"", "lemma scaleR_conv_octo_of_real: \"scaleR r x = octo_of_real r * x\"", "lemma octo_of_real_0 [simp]: \"octo_of_real 0 = 0\"", "lemma octo_of_real_1 [simp]: \"octo_of_real 1 = 1\"", "lemma octo_of_real_add [simp]: \"octo_of_real (x + y) = octo_of_real x + octo_of_real y\"", "lemma octo_of_real_minus [simp]: \"octo_of_real (- x) = - octo_of_real x\"", "lemma octo_of_real_diff [simp]: \"octo_of_real (x - y) = octo_of_real x - octo_of_real y\"", "lemma octo_of_real_mult [simp]: \"octo_of_real (x * y) = octo_of_real x * octo_of_real y\"", "lemma octo_of_real_sum[simp]: \"octo_of_real (sum f s) = (\\<Sum>x\\<in>s. octo_of_real (f x))\"", "lemma octo_of_real_power [simp]:\n  \"octo_of_real (x ^ y) = (octo_of_real x :: octo) ^ y\"", "lemma octo_of_real_eq_iff [simp]: \"octo_of_real x = octo_of_real y \\<longleftrightarrow> x = y\"", "lemmas octo_of_real_eq_0_iff [simp] = octo_of_real_eq_iff [of _ 0, simplified]", "lemmas octo_of_real_eq_1_iff [simp] = octo_of_real_eq_iff [of _ 1, simplified]", "lemma minus_octo_of_real_eq_octo_of_real_iff [simp]: \"-octo_of_real x = octo_of_real y \\<longleftrightarrow> -x = y\"", "lemma octo_of_real_eq_minus_of_real_iff [simp]: \"octo_of_real x = -octo_of_real y \\<longleftrightarrow> x = -y\"", "lemma octo_of_real_of_nat_eq [simp]: \"octo_of_real (of_nat x) = octo_of_nat x\"", "lemma octo_of_real_of_int_eq [simp]: \"octo_of_real (of_int z) = octo_of_int z\"", "lemma octo_of_int_of_nat:  \"octo_of_int (of_nat n) = octo_of_nat n\"", "lemma octo_of_nat_add [simp]: \"octo_of_nat (a + b) = octo_of_nat a + octo_of_nat b\"\n  and octo_of_nat_mult [simp]: \"octo_of_nat (a * b) = octo_of_nat a * octo_of_nat b\"\n  and octo_of_nat_diff [simp]: \"b \\<le> a \\<Longrightarrow> octo_of_nat (a - b) = octo_of_nat a - octo_of_nat b\"\n  and octo_of_nat_0 [simp]: \"octo_of_nat 0 = 0\"\n  and octo_of_nat_1 [simp]: \"octo_of_nat 1 = 1\"\n  and octo_of_nat_Suc_0 [simp]: \"octo_of_nat (Suc 0) = 1\"", "lemma octo_of_int_add [simp]: \"octo_of_int (a + b) = octo_of_int a + octo_of_int b\"\n  and octo_of_int_mult [simp]: \"octo_of_int (a * b) = octo_of_int a * octo_of_int b\"\n  and octo_of_int_diff [simp]: \"b \\<le> a \\<Longrightarrow> octo_of_int (a - b) = octo_of_int a - octo_of_int b\"\n  and octo_of_int_0 [simp]: \"octo_of_int 0 = 0\"\n  and octo_of_int_1 [simp]: \"octo_of_int 1 = 1\"", "lemma numeral_octo_conv_of_nat: \"numeral x = octo_of_nat (numeral x)\"", "lemma numeral_octo_sel [simp]:\n  \"Ree (numeral n) = numeral n\" \"Im1 (numeral n) = 0\" \"Im2 (numeral n) = 0\"\n  \"Im3 (numeral n) = 0\" \"Im4 (numeral n) = 0\" \"Im5 (numeral n) = 0\"\n  \"Im6 (numeral n) = 0\" \"Im7 (numeral n) = 0\"", "lemma octo_of_real_numeral [simp]: \"octo_of_real (numeral w) = numeral w\"", "lemma octo_of_real_neg_numeral [simp]: \"octo_of_real (- numeral w) = - numeral w\"", "lemma octo_of_real_times_commute: \"octo_of_real r * q = q * octo_of_real r\"", "lemma octo_of_real_times_conv_scaleR: \"octo_of_real x * y = scaleR x y\"", "lemma octo_mult_scaleR_left: \"(r *\\<^sub>R x) * y = r *\\<^sub>R (x * y :: octo)\"", "lemma octo_mult_scaleR_right: \"x * (r *\\<^sub>R y) = r *\\<^sub>R (x * y :: octo)\"", "lemma scaleR_octo_of_real [simp]: \"scaleR r (octo_of_real s) = octo_of_real (r * s)\"", "lemma octo_of_real_times_left_commute: \"octo_of_real r * (x * q) = x * (octo_of_real r * q)\"", "lemma nonzero_octo_of_real_inverse:\n  \"x \\<noteq> 0 \\<Longrightarrow> octo_of_real (inverse x) = inverse (octo_of_real x :: octo)\"", "lemma octo_of_real_inverse [simp]:\n  \"octo_of_real (inverse x) = inverse (octo_of_real x )\"", "lemma nonzero_octo_of_real_divide:\n  \"y \\<noteq> 0 \\<Longrightarrow> octo_of_real (x / y) = (octo_of_real x / octo_of_real y ::octo)\"", "lemma octo_of_real_divide [simp]:\n  \"octo_of_real (x / y) = (octo_of_real x / octo_of_real y :: octo)\"", "lemma octo_of_real_inverse_collapse [simp]:\n  assumes \"c \\<noteq> 0\"\n  shows   \"octo_of_real c * octo_of_real (inverse c) = 1\"\n          \"octo_of_real (inverse c) * octo_of_real c = 1\"", "lemma octo_divide_numeral:\n  fixes x::octo shows \"x / numeral y = x /\\<^sub>R numeral y\"", "lemma octo_divide_numeral_sel [simp]:\n  \"Ree (x / numeral w) = Ree x / numeral w\"\n  \"Im1 (x / numeral w) = Im1 x / numeral w\"\n  \"Im2 (x / numeral w) = Im2 x / numeral w\"\n  \"Im3 (x / numeral w) = Im3 x / numeral w\"\n  \"Im4 (x / numeral w) = Im4 x / numeral w\"\n  \"Im5 (x / numeral w) = Im5 x / numeral w\"\n  \"Im6 (x / numeral w) = Im6 x / numeral w\"\n  \"Im7 (x / numeral w) = Im7 x / numeral w\"", "lemma octo_norm_units [simp]:\n  \"norm octo_e1 = 1\" \"norm (e2::octo) = 1\" \"norm (e3::octo) = 1\"\n  \"norm (e4::octo) = 1 \"  \"norm (e5::octo) = 1\"   \"norm (e6::octo) = 1\" \"norm (e7::octo) = 1\"", "lemma e1_nz [simp]: \"e1 \\<noteq> 0\"\n  and e2_nz [simp]: \"e2 \\<noteq> 0\"\n  and e3_nz [simp]: \"e3 \\<noteq> 0\"\n  and e4_nz [simp]: \"e4 \\<noteq> 0\"\n  and e5_nz [simp]: \"e5 \\<noteq> 0\"\n  and e6_nz [simp]: \"e6 \\<noteq> 0\"\n  and e7_nz [simp]: \"e7 \\<noteq> 0\"", "lemma octo_unfold:\n   \"q = (Ree q) *\\<^sub>R e0 + (Im1 q) *\\<^sub>R e1 + (Im2 q) *\\<^sub>R e2 + (Im3 q) *\\<^sub>R e3\n      + (Im4 q) *\\<^sub>R e4 + (Im5 q) *\\<^sub>R e5 + (Im6 q) *\\<^sub>R e6 + (Im7 q) *\\<^sub>R  e7\"", "lemma octo_trad: \"Octo x y z w u v q g =\n     x *\\<^sub>R e0 + y *\\<^sub>R e1 +  z *\\<^sub>R e2  +  w *\\<^sub>R e3  +  u *\\<^sub>R e4 +  v *\\<^sub>R e5 +  q *\\<^sub>R e6  +  g*\\<^sub>R e7 \"", "lemma octo_of_real_eq_Octo: \"octo_of_real a = Octo a 0 0 0 0 0 0 0 \"", "lemma e1_squared [simp]: \"e1 ^ 2 = -1\"\n  and e2_squared [simp]: \"e2 ^ 2 = -1\"\n  and e3_squared [simp]: \"e3 ^ 2 = -1\"\n  and e4_squared [simp]: \"e4 ^ 2 = -1\"\n  and e5_squared [simp]: \"e5 ^ 2 = -1\"\n  and e6_squared [simp]: \"e6 ^ 2 = -1\"\n  and e7_squared [simp]: \"e7 ^ 2 = -1\"", "lemma inverse_e1 [simp]: \"inverse e1 = -e1\"\n  and inverse_e2 [simp]: \"inverse e2 = -e2\"\n  and inverse_e3 [simp]: \"inverse e3 = -e3\"\n  and inverse_e4 [simp]: \"inverse e4 = -e4\"\n  and inverse_e5 [simp]: \"inverse e5 = -e5\"\n  and inverse_e6 [simp]: \"inverse e6 = -e6\"\n  and inverse_e7 [simp]: \"inverse e7 = -e7\"", "lemma cnj_cancel_iff [simp]: \"cnj x = cnj y \\<longleftrightarrow> x = y\"", "lemma cnj_cnj [simp]:\n   \"cnj(cnj q) = q\"", "lemma cnj_of_real [simp]: \"cnj(octo_of_real x) = octo_of_real x\"", "lemma cnj_zero [simp]: \"cnj 0 = 0\"", "lemma cnj_zero_iff [iff]: \"cnj z = 0 \\<longleftrightarrow> z = 0\"", "lemma cnj_one [simp]: \"cnj 1 = 1\"", "lemma cnj_one_iff [simp]: \"cnj z = 1 \\<longleftrightarrow> z = 1\"", "lemma octo_norm_cnj [simp]: \"norm(cnj q) = norm q\"", "lemma cnj_add [simp]: \"cnj (x + y) = cnj x + cnj y\"", "lemma cnj_sum [simp]: \"cnj (sum f S) = (\\<Sum>x\\<in>S. cnj (f x))\"", "lemma cnj_diff [simp]: \"cnj (x - y) = cnj x - cnj y\"", "lemma cnj_minus [simp]: \"cnj (- x) = - cnj x\"", "lemma cnj_inverse [simp]: \"cnj (inverse x) = inverse (cnj x)\" for x y ::octo", "lemma cnj_mult [simp]: \"cnj (x * y) = cnj y * cnj x\" for x y ::octo", "lemma cnj_divide [simp]: \"cnj (x / y) = (inverse (cnj y) ) *  cnj x\"\n  for x y ::octo", "lemma cnj_power [simp]: \"cnj (x ^ y) = (cnj x) ^ y\"  for x::octo", "lemma cnj_of_nat [simp]: \"cnj (octo_of_nat x) = octo_of_nat( x)\"", "lemma cnj_of_int [simp]: \"cnj (octo_of_int x) = octo_of_nat( x)\"", "lemma cnj_numeral [simp]: \"cnj (numeral x) = numeral x\"", "lemma cnj_neg_numeral [simp]: \"cnj (- numeral x) = - numeral x\"", "lemma cnj_scaleR [simp]: \"cnj (scaleR r x) = scaleR r (cnj x)\"", "lemma cnj_units [simp]: \"cnj e1 = -e1\" \"cnj e2 = -e2\" \"cnj e3 = -e3\"\n \"cnj e4 = -e4\"   \"cnj e5 = -e5\"   \"cnj e6 = -e6\"  \"cnj e7 = -e7\"", "lemma cnj_eq_of_real: \"cnj q = octo_of_real x \\<longleftrightarrow> q = octo_of_real x\"", "lemma octo_trad_cnj : \"cnj q = (Ree q) *\\<^sub>R e0 - (Im1 q) *\\<^sub>R e1 - (Im2 q)*\\<^sub>R e2  - (Im3 q) *\\<^sub>R e3  - \n (Im4 q) *\\<^sub>R e4 -  (Im5 q) *\\<^sub>R e5 -  (Im6 q) *\\<^sub>R e6  -  (Im7 q)*\\<^sub>R e7 \" for q::octo", "lemma octonion_conjugate_property:\n  \"cnj x = -(1/6) *\\<^sub>R (x + (e1 * x) *  e1  +  (e2 * x) * e2 +  (e3 * x) * e3 +\n     (e4 * x) * e4 + (e5 * x) * e5 +  ( e6 * x) * e6 + (e7 * x) * e7)\"", "lemma octo_add_cnj: \"q + cnj q = 2 *\\<^sub>R (Ree q) *\\<^sub>R e0\" \"cnj q + q = (2*\\<^sub>R (Ree q)*\\<^sub>R e0)\"", "lemma octo_add_cnj1: \"q + cnj q = octo_of_real (2*\\<^sub>R (Ree q))\" \n                     \"cnj q + q = octo_of_real (2*\\<^sub>R (Ree q))\"", "lemma octo_subtract_cnj:\n  \"q - cnj q = 2 *\\<^sub>R (Im1 q *\\<^sub>R e1 + Im2 q *\\<^sub>R e2 + Im3 q *\\<^sub>R e3 + \n                     Im4 q *\\<^sub>R e4 + Im5 q *\\<^sub>R e5 + Im6 q*\\<^sub>R e6 + Im7 q *\\<^sub>R e7)\"", "lemma octo_mult_cnj_commute: \"cnj x * x = x * cnj x\"", "lemma octo_cnj_mult_conv_norm: \"cnj x * x = octo_of_real (norm x) ^ 2\"", "lemma octo_mult_cnj_conv_norm: \"x * cnj x = octo_of_real (norm x) ^ 2\"", "lemma octo_mult_cnj_conv_norm_aux: \"octo_of_real (norm x ^ 2) = x * cnj x \"", "lemma octo_norm_conj: \"octo_of_real ( inner x y) = (1/2) *\\<^sub>R (x * (cnj y) + y * (cnj x))\"", "lemma octo_inverse_cnj: \"inverse x = cnj x /\\<^sub>R (norm x ^ 2)\"", "lemma inverse_octo_1: \"x \\<noteq> 0 \\<Longrightarrow> x * inverse x = (1 :: octo)\"", "lemma inverse_octo_1_sym: \"x \\<noteq> 0 \\<Longrightarrow> inverse x * x = (1 :: octo)\"", "lemma inverse_0_octo [simp]: \"inverse 0 = (0 :: octo)\"", "lemma inverse_octo_commutes: \"inverse x * x = x * (inverse x :: octo)\"", "lemma octo_inverse_mult: \"inverse (x * y) = inverse y * inverse x\" for x y::octo", "lemma octo_inverse_eq_cnj: \"norm q = 1 \\<Longrightarrow> inverse q = cnj q\" for q::octo", "lemma octo_in_Reals_if_Re: fixes q ::real shows \" Ree( octo_of_real(q)) = q\"", "lemma octo_in_Reals_if_Re_con: assumes \"Ree (octo_of_real q) = q\"\n  shows \"q \\<in> Reals\"", "lemma octo_in_Reals_if_cnj: fixes q:: real shows \" cnj( octo_of_real( q)) = octo_of_real q\"", "lemma octo_in_Reals_if_cnj_con: assumes \" cnj( octo_of_real( q)) = octo_of_real q\" \n  shows \"q \\<in> Reals \"", "lemma norm_power2: \"norm q ^ 2 = Ree (cnj q * q)\"", "lemma norm_power2_cnj: \"norm q ^ 2 = Ree (q * cnj q)\"", "lemma octo_norm_imaginary: \"Ree x = 0 \\<Longrightarrow> x * x = -(octo_of_real (norm x))\\<^sup>2\"", "lemma bounded_linear_Ree: \"bounded_linear Ree\"\n  and bounded_linear_Im1: \"bounded_linear Im1\"\n  and bounded_linear_Im2: \"bounded_linear Im2\"\n  and bounded_linear_Im3: \"bounded_linear Im3\"\n  and bounded_linear_Im4: \"bounded_linear Im4\"\n  and bounded_linear_Im5: \"bounded_linear Im5\"\n  and bounded_linear_Im6: \"bounded_linear Im6\"\n  and bounded_linear_Im7: \"bounded_linear Im7\"", "lemmas Cauchy_Ree = bounded_linear.Cauchy [OF bounded_linear_Ree]", "lemmas Cauchy_Im1 = bounded_linear.Cauchy [OF bounded_linear_Im1]", "lemmas Cauchy_Im2 = bounded_linear.Cauchy [OF bounded_linear_Im2]", "lemmas Cauchy_Im3 = bounded_linear.Cauchy [OF bounded_linear_Im3]", "lemmas Cauchy_Im4 = bounded_linear.Cauchy [OF bounded_linear_Im4]", "lemmas Cauchy_Im5 = bounded_linear.Cauchy [OF bounded_linear_Im5]", "lemmas Cauchy_Im6 = bounded_linear.Cauchy [OF bounded_linear_Im6]", "lemmas Cauchy_Im7 = bounded_linear.Cauchy [OF bounded_linear_Im7]", "lemmas tendsto_Re [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Ree]", "lemmas tendsto_Im1 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im1]", "lemmas tendsto_Im2 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im2]", "lemmas tendsto_Im3 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im3]", "lemmas tendsto_Im4 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im4]", "lemmas tendsto_Im5 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im5]", "lemmas tendsto_Im6 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im6]", "lemmas tendsto_Im7 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im7]", "lemmas isCont_Ree [simp] = bounded_linear.isCont [OF bounded_linear_Ree]", "lemmas isCont_Im1 [simp] = bounded_linear.isCont [OF bounded_linear_Im1]", "lemmas isCont_Im2 [simp] = bounded_linear.isCont [OF bounded_linear_Im2]", "lemmas isCont_Im3 [simp] = bounded_linear.isCont [OF bounded_linear_Im3]", "lemmas isCont_Im4 [simp] = bounded_linear.isCont [OF bounded_linear_Im4]", "lemmas isCont_Im5 [simp] = bounded_linear.isCont [OF bounded_linear_Im5]", "lemmas isCont_Im6 [simp] = bounded_linear.isCont [OF bounded_linear_Im6]", "lemmas isCont_Im7 [simp] = bounded_linear.isCont [OF bounded_linear_Im7]", "lemmas continuous_Ree [simp] = bounded_linear.continuous [OF bounded_linear_Ree]", "lemmas continuous_Im1 [simp] = bounded_linear.continuous [OF bounded_linear_Im1]", "lemmas continuous_Im2 [simp] = bounded_linear.continuous [OF bounded_linear_Im2]", "lemmas continuous_Im3 [simp] = bounded_linear.continuous [OF bounded_linear_Im3]", "lemmas continuous_Im4 [simp] = bounded_linear.continuous [OF bounded_linear_Im4]", "lemmas continuous_Im5 [simp] = bounded_linear.continuous [OF bounded_linear_Im5]", "lemmas continuous_Im6 [simp] = bounded_linear.continuous [OF bounded_linear_Im6]", "lemmas continuous_Im7 [simp] = bounded_linear.continuous [OF bounded_linear_Im7]", "lemmas continuous_on_Ree [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Ree]", "lemmas continuous_on_Im1 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im1]", "lemmas continuous_on_Im2 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im2]", "lemmas continuous_on_Im3 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im3]", "lemmas continuous_on_Im4 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im4]", "lemmas continuous_on_Im5 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im5]", "lemmas continuous_on_Im6 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im6]", "lemmas continuous_on_Im7 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im7]", "lemmas has_derivative_Ree [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Ree]", "lemmas has_derivative_Im1 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im1]", "lemmas has_derivative_Im2 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im2]", "lemmas has_derivative_Im3 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im3]", "lemmas has_derivative_Im4 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im4]", "lemmas has_derivative_Im5 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im5]", "lemmas has_derivative_Im6 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im6]", "lemmas has_derivative_Im7 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im7]", "lemmas sums_Ree = bounded_linear.sums [OF bounded_linear_Ree]", "lemmas sums_Im1 = bounded_linear.sums [OF bounded_linear_Im1]", "lemmas sums_Im2 = bounded_linear.sums [OF bounded_linear_Im2]", "lemmas sums_Im3 = bounded_linear.sums [OF bounded_linear_Im3]", "lemmas sums_Im4 = bounded_linear.sums [OF bounded_linear_Im4]", "lemmas sums_Im5 = bounded_linear.sums [OF bounded_linear_Im5]", "lemmas sums_Im6 = bounded_linear.sums [OF bounded_linear_Im6]", "lemmas sums_Im7 = bounded_linear.sums [OF bounded_linear_Im7]", "lemma Ree_sum [simp]: \"Ree (sum f S) = sum (\\<lambda>x.  Ree(f x)) S\"\n  and Im1_sum [simp]: \"Im1 (sum f S) = sum (\\<lambda>x. Im1 (f x)) S\"\n  and Im2_sum [simp]: \"Im2 (sum f S) = sum (\\<lambda>x. Im2 (f x)) S\"\n  and Im3_sum [simp]: \"Im3 (sum f S) = sum (\\<lambda>x. Im3 (f x)) S\"\n  and Im4_sum [simp]: \"Im4 (sum f S) = sum (\\<lambda>x. Im4 (f x)) S\"\n  and Im5_sum [simp]: \"Im5 (sum f S) = sum (\\<lambda>x. Im5 (f x)) S\"\n  and Im6_sum [simp]: \"Im6 (sum f S) = sum (\\<lambda>x. Im6 (f x)) S\"\n  and Im7_sum [simp]: \"Im7 (sum f S) = sum (\\<lambda>x. Im7 (f x)) S\"", "lemma Ree_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. octo.Ree (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Ree limit \\<le> b\"", "lemma Im1_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im1 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im1 limit \\<le> b\"", "lemma Im2_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im2 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im2 limit \\<le> b\"", "lemma Im3_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im3 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im3 limit \\<le> b\"", "lemma Im4_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im4 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im4 limit \\<le> b\"", "lemma Im5_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im5 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im5 limit \\<le> b\"", "lemma Im6_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im6 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im6 limit \\<le> b\"", "lemma Im7_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im7 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im7 limit \\<le> b\"", "lemma Ree_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> octo.Ree (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Ree limit\"", "lemma Im1_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im1 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im1 limit\"", "lemma Im2_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im2 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im2 limit\"", "lemma Im3_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im3 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im3 limit\"", "lemma Im4_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im4 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im4 limit\"", "lemma Im5_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im5 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im5 limit\"", "lemma Im6_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im6 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im6 limit\"", "lemma Im7_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im7 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im7 limit\"", "lemma octo_of_real_continuous [continuous_intros]:\n  \"continuous net f \\<Longrightarrow> continuous net (\\<lambda>x. octo_of_real (f x))\"", "lemma octo_of_real_continuous_on [continuous_intros]:\n  \"continuous_on S f \\<Longrightarrow> continuous_on S (\\<lambda>x. octo_of_real (f x))\"", "lemma of_real_continuous_iff: \"continuous net (\\<lambda>x. octo_of_real (f x)) \\<longleftrightarrow> continuous net f\"", "lemma of_real_continuous_on_iff:\n   \"continuous_on S (\\<lambda>x. octo_of_real(f x)) \\<longleftrightarrow> continuous_on S f\"", "lemma HIm_Octo: \"HIm (Octo w x y z u v q g) = vector[x,y,z, u, v, q, g]\"", "lemma him_eq: \"HIm a = HIm b \\<longleftrightarrow> Im1 a = Im1 b \\<and> Im2 a = Im2 b \\<and> Im3 a = Im3 b\n \\<and> Im4 a = Im4 b \\<and> Im5 a = Im5 b \\<and> Im6 a = Im6 b \\<and> Im7 a = Im7 b\"", "lemma him_of_real [simp]: \"HIm(octo_of_real a) = 0\"", "lemma him_0 [simp]: \"HIm 0 = 0\"", "lemma him_1 [simp]: \"HIm 1 = 0\"", "lemma him_cnj: \"HIm(cnj q) = - HIm q\"", "lemma him_mult_left [simp]: \"HIm (a *\\<^sub>R q) = a  *\\<^sub>R HIm q\"", "lemma him_mult_right [simp]: \"HIm (q * octo_of_real a) = HIm q * of_real a\"", "lemma him_add [simp]: \"HIm (x + y) = HIm x + HIm y\"\n and  him_minus [simp]: \"HIm (-x) = - HIm x\"\n and  him_diff [simp]: \"HIm (x - y) = HIm x - HIm y\"", "lemma him_sum [simp]: \"HIm (sum f S) = (\\<Sum>x\\<in>S. HIm (f x))\"", "lemma linear_him: \"linear HIm\"", "lemma Hv_sel [simp]:\n  \"Ree (Hv v) = 0\" \"Im1 (Hv v) = v $ 1\" \"Im2 (Hv v) = v $ 2\" \"Im3 (Hv v) = v $ 3\"\n  \"Im4 (Hv v) = v $ 4\" \"Im5 (Hv v) = v $ 5\" \"Im6 (Hv v) = v $ 6\" \"Im7 (Hv v) = v $ 7\"", "lemma hv_vec: \"Hv(vec r) = Octo 0 r r r r r r r \"", "lemma hv_eq_zero [simp]: \"Hv v = 0 \\<longleftrightarrow> v = 0\"", "lemma hv_zero [simp]: \"Hv 0 = 0\"", "lemma hv_vector [simp]: \"Hv(vector[x,y,z,u,v,q,g]) = Octo 0 x y z u v q g\"", "lemma hv_basis:\n  \"Hv(axis 1 1) = e1\" \"Hv(axis 2 1) = e2\" \"Hv(axis 3 1) = e3\"\n  \"Hv(axis 4 1) = e4\" \"Hv(axis 5 1) = e5\" \"Hv(axis 6 1) = e6\"  \"Hv(axis 7 1) = e7\"", "lemma hv_add [simp]: \"Hv(x + y) = Hv x + Hv y\"", "lemma hv_minus [simp]: \"Hv(-x) = -Hv x\"", "lemma hv_diff [simp]: \"Hv(x - y) = Hv x - Hv y\"", "lemma hv_cmult [simp]:\n \"Hv(scaleR a   x) = scaleR a  ( Hv x)\"", "lemma hv_sum [simp]: \"Hv (sum f S) = (\\<Sum>x\\<in>S. Hv (f x))\"", "lemma hv_inj: \"Hv x = Hv y \\<longleftrightarrow> x = y\"", "lemma linear_hv: \"linear Hv\"", "lemma him_hv [simp]: \"HIm(Hv x) = x\"", "lemma cnj_hv [simp]: \"cnj(Hv v) = -Hv v\"", "lemma hv_him: \"Hv(HIm q) = Octo 0 (Im1 q) (Im2 q) (Im3 q)  (Im4 q) (Im5 q) (Im6 q)  (Im7 q)  \"", "lemma hv_him_eq: \"Hv(HIm q) = q \\<longleftrightarrow> Ree q = 0\"", "lemma dot_hv [simp]: \"Hv u \\<bullet> Hv v = u \\<bullet> v\"", "lemma norm_hv [simp]: \"norm (Hv v) = norm v\"", "lemma mult_hv_eq_cross_dot: \"Hv x * Hv y = Hv(x  \\<times>\\<^sub>7 y) - octo_of_real (inner x y)\"", "lemma octonion_identity1_cross7 :\n  \"Hv (x \\<times>\\<^sub>7 y) = (1/2) *\\<^sub>R (Hv x * Hv y - Hv y * Hv x)\"", "lemma octonion_identity2_cross7:\n  \"Hv (x \\<times>\\<^sub>7 (y \\<times>\\<^sub>7 z) + y \\<times>\\<^sub>7 (z \\<times>\\<^sub>7 x) + z \\<times>\\<^sub>7 (x \\<times>\\<^sub>7 y)) =\n     -(3/2) *\\<^sub>R ((Hv x * Hv y) * Hv z - Hv x * (Hv y * Hv z))\"", "lemma HIm_nth [simp]:\n  \"HIm x $ 1 = Im1 x\" \"HIm x $ 2 = Im2 x\" \"HIm x $ 3 = Im3 x\"  \"HIm x $ 4 = Im4 x\"\n  \"HIm x $ 5 = Im5 x\" \"HIm x $ 6 = Im6 x\" \"HIm x $ 7 = Im7 x\"", "lemma orthogonal_transformation_octo_congruence:\n  assumes \"norm q = 1\"\n  shows \"orthogonal_transformation (\\<lambda>x. HIm(cnj q * Hv x * q))\"", "lemma orthogonal_transformation_octo_conjugation:\n  assumes \"q \\<noteq> 0\"\n  shows \"orthogonal_transformation (\\<lambda>x. HIm (inverse q * Hv x * q))\""], "translations": [["", "lemma octo_eqI [intro?]:\n  \"\\<lbrakk>Ree x = Ree y; Im1 x = Im1 y; Im2 x = Im2 y; Im3 x = Im3 y;\n    Im4 x = Im4 y;Im5 x = Im5 y;  Im6 x = Im6 y; Im7 x = Im7 y\\<rbrakk> \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ree x = Ree y; Im1 x = Im1 y; Im2 x = Im2 y; Im3 x = Im3 y;\n     Im4 x = Im4 y; Im5 x = Im5 y; Im6 x = Im6 y; Im7 x = Im7 y\\<rbrakk>\n    \\<Longrightarrow> x = y", "by (rule octo.expand) simp"], ["", "lemma octo_eq_iff:\n  \"x = y \\<longleftrightarrow> Ree x = Ree y \\<and> Im1 x = Im1 y \\<and> Im2 x = Im2 y \\<and> Im3 x = Im3 y \\<and>\n             Im4 x = Im4 y \\<and> Im5 x = Im5 y \\<and> Im6 x = Im6 y  \\<and> Im7 x = Im7 y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x = y) =\n    (Ree x = Ree y \\<and>\n     Im1 x = Im1 y \\<and>\n     Im2 x = Im2 y \\<and>\n     Im3 x = Im3 y \\<and>\n     Im4 x = Im4 y \\<and>\n     Im5 x = Im5 y \\<and> Im6 x = Im6 y \\<and> Im7 x = Im7 y)", "by (auto intro: octo.expand)"], ["", "context\nbegin"], ["", "primcorec octo_e0 :: octo (\"e0\")\nwhere \"Ree e0 = 1\" | \"Im1 e0 = 0\" | \"Im2 e0 = 0\" | \"Im3 e0 = 0\"\n  | \"Im4 e0 = 0\" | \"Im5 e0 = 0\" | \"Im6 e0 = 0\" | \"Im7 e0 = 0\""], ["", "primcorec octo_e1 :: octo  (\"e1\")\n  where \"Ree e1 = 0\" | \"Im1 e1 = 1\" | \"Im2 e1 = 0\" | \"Im3 e1 = 0\"\n  | \"Im4 e1 = 0\" | \"Im5 e1 = 0\" | \"Im6 e1 = 0\" | \"Im7 e1 = 0\""], ["", "primcorec octo_e2 :: octo  (\"e2\")\n  where \"Ree e2 = 0\" | \"Im1 e2 = 0\" | \"Im2 e2 = 1\" | \"Im3 e2 = 0\"\n  | \"Im4 e2 = 0\" | \"Im5 e2 = 0\" | \"Im6 e2 = 0\" | \"Im7 e2 = 0\""], ["", "primcorec octo_e3 :: octo (\"e3\")\n  where \"Ree e3 = 0\" | \"Im1 e3 = 0\" | \"Im2 e3 = 0\" | \"Im3 e3 = 1\"\n  | \"Im4 e3 = 0\" | \"Im5 e3 = 0\" | \"Im6 e3 = 0\" | \"Im7 e3 = 0\""], ["", "primcorec octo_e4 :: octo (\"e4\")\n  where \"Ree e4 = 0\" | \"Im1 e4 = 0\" | \"Im2 e4 = 0\" | \"Im3 e4 = 0\"\n  | \"Im4 e4 = 1\" | \"Im5 e4 = 0\" | \"Im6 e4 = 0\" | \"Im7 e4 = 0\""], ["", "primcorec octo_e5 :: octo (\"e5\")\n  where \"Ree e5 = 0\" | \"Im1 e5 = 0\" | \"Im2 e5 = 0\" | \"Im3 e5 = 0\"\n  | \"Im4 e5 = 0\" | \"Im5 e5 = 1\" | \"Im6 e5 = 0\" | \"Im7 e5 = 0\""], ["", "primcorec octo_e6 :: octo (\"e6\")\n  where \"Ree e6 = 0\" | \"Im1 e6 = 0\" | \"Im2 e6 = 0\" | \"Im3 e6 = 0\"\n  | \"Im4 e6 = 0\" | \"Im5 e6 = 0\" | \"Im6 e6 = 1\" | \"Im7 e6 = 0\""], ["", "primcorec octo_e7 :: octo (\"e7\")\n  where \"Ree e7 = 0\" | \"Im1 e7 = 0\" | \"Im2 e7 = 0\" | \"Im3 e7 = 0\"\n  | \"Im4 e7 = 0\" | \"Im5 e7 = 0\" | \"Im6 e7 = 0\" | \"Im7 e7 = 1\""], ["", "end"], ["", "subsection \\<open>Addition and Subtraction: An Abelian Group\\<close>"], ["", "instantiation octo :: ab_group_add\n\nbegin"], ["", "primcorec zero_octo\n  where \"Ree 0 = 0\" |\"Im1 0 = 0\" | \"Im2 0 = 0\" | \"Im3 0 = 0\"\n |\"Im4 0 = 0\" | \"Im5 0 = 0\" | \"Im6 0 = 0\" | \"Im7 0 = 0\""], ["", "primcorec plus_octo\n  where\n    \"Ree (x + y) = Ree x + Ree y\"\n  | \"Im1 (x + y) = Im1 x + Im1 y\"\n  | \"Im2 (x + y) = Im2 x + Im2 y\"\n  | \"Im3 (x + y) = Im3 x + Im3 y\"\n  | \"Im4 (x + y) = Im4 x + Im4 y\"\n  | \"Im5 (x + y) = Im5 x + Im5 y\"\n  | \"Im6 (x + y) = Im6 x + Im6 y\"\n  | \"Im7 (x + y) = Im7 x + Im7 y\""], ["", "primcorec uminus_octo\n  where\n    \"Ree (- x) = - Ree x\"\n  | \"Im1 (- x) = - Im1 x\"\n  | \"Im2 (- x) = - Im2 x\"\n  | \"Im3 (- x) = - Im3 x\"\n  | \"Im4 (- x) = - Im4 x\"\n  | \"Im5 (- x) = - Im5 x\"\n  | \"Im6 (- x) = - Im6 x\"\n  | \"Im7 (- x) = - Im7 x\""], ["", "primcorec minus_octo\n  where\n    \"Ree (x - y) = Ree x - Ree y\"\n  | \"Im1 (x - y) = Im1 x - Im1 y\"\n  | \"Im2 (x - y) = Im2 x - Im2 y\"\n  | \"Im3 (x - y) = Im3 x - Im3 y\"\n  | \"Im4 (x - y) = Im4 x - Im4 y\"\n  | \"Im5 (x - y) = Im5 x - Im5 y\"\n  | \"Im6 (x - y) = Im6 x - Im6 y\"\n  | \"Im7 (x - y) = Im7 x - Im7 y\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(octo, ab_group_add_class)", "by standard (simp_all add: octo_eq_iff)"], ["", "end"], ["", "lemma octo_eq_0_iff:\n  \"x = 0 \\<longleftrightarrow> Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2 +\n               Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^ 2  = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x = 0) =\n    ((Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n     (Im4 x)\\<^sup>2 +\n     (Im5 x)\\<^sup>2 +\n     (Im6 x)\\<^sup>2 +\n     (Im7 x)\\<^sup>2 =\n     0)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow>\n    (Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n    (Im4 x)\\<^sup>2 +\n    (Im5 x)\\<^sup>2 +\n    (Im6 x)\\<^sup>2 +\n    (Im7 x)\\<^sup>2 =\n    0\n 2. (Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n    (Im4 x)\\<^sup>2 +\n    (Im5 x)\\<^sup>2 +\n    (Im6 x)\\<^sup>2 +\n    (Im7 x)\\<^sup>2 =\n    0 \\<Longrightarrow>\n    x = 0", "assume \"(octo.Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 + (Im4 x)\\<^sup>2 + (Im5 x)\\<^sup>2 + (Im6 x)\\<^sup>2\n + (Im7 x)\\<^sup>2 = 0\""], ["proof (state)\nthis:\n  (Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n  (Im4 x)\\<^sup>2 +\n  (Im5 x)\\<^sup>2 +\n  (Im6 x)\\<^sup>2 +\n  (Im7 x)\\<^sup>2 =\n  0\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow>\n    (Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n    (Im4 x)\\<^sup>2 +\n    (Im5 x)\\<^sup>2 +\n    (Im6 x)\\<^sup>2 +\n    (Im7 x)\\<^sup>2 =\n    0\n 2. (Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n    (Im4 x)\\<^sup>2 +\n    (Im5 x)\\<^sup>2 +\n    (Im6 x)\\<^sup>2 +\n    (Im7 x)\\<^sup>2 =\n    0 \\<Longrightarrow>\n    x = 0", "then"], ["proof (chain)\npicking this:\n  (Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n  (Im4 x)\\<^sup>2 +\n  (Im5 x)\\<^sup>2 +\n  (Im6 x)\\<^sup>2 +\n  (Im7 x)\\<^sup>2 =\n  0", "have \"\\<forall>qa. qa - x = qa\""], ["proof (prove)\nusing this:\n  (Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n  (Im4 x)\\<^sup>2 +\n  (Im5 x)\\<^sup>2 +\n  (Im6 x)\\<^sup>2 +\n  (Im7 x)\\<^sup>2 =\n  0\n\ngoal (1 subgoal):\n 1. \\<forall>qa. qa - x = qa", "by (simp add: add_nonneg_eq_0_iff minus_octo.ctr)"], ["proof (state)\nthis:\n  \\<forall>qa. qa - x = qa\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow>\n    (Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n    (Im4 x)\\<^sup>2 +\n    (Im5 x)\\<^sup>2 +\n    (Im6 x)\\<^sup>2 +\n    (Im7 x)\\<^sup>2 =\n    0\n 2. (Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n    (Im4 x)\\<^sup>2 +\n    (Im5 x)\\<^sup>2 +\n    (Im6 x)\\<^sup>2 +\n    (Im7 x)\\<^sup>2 =\n    0 \\<Longrightarrow>\n    x = 0", "then"], ["proof (chain)\npicking this:\n  \\<forall>qa. qa - x = qa", "show \"x = 0\""], ["proof (prove)\nusing this:\n  \\<forall>qa. qa - x = qa\n\ngoal (1 subgoal):\n 1. x = 0", "by simp"], ["proof (state)\nthis:\n  x = 0\n\ngoal (1 subgoal):\n 1. x = 0 \\<Longrightarrow>\n    (Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n    (Im4 x)\\<^sup>2 +\n    (Im5 x)\\<^sup>2 +\n    (Im6 x)\\<^sup>2 +\n    (Im7 x)\\<^sup>2 =\n    0", "qed auto"], ["", "subsection \\<open>A Normed Vector Space\\<close>"], ["", "instantiation octo :: real_vector\n\nbegin"], ["", "primcorec scaleR_octo\n  where\n    \"Ree (scaleR r x) = r * Ree x\"\n  | \"Im1 (scaleR r x) = r * Im1 x\"\n  | \"Im2 (scaleR r x) = r * Im2 x\"\n  | \"Im3 (scaleR r x) = r * Im3 x\"\n  | \"Im4 (scaleR r x) = r * Im4 x\"\n  | \"Im5 (scaleR r x) = r * Im5 x\"\n  | \"Im6 (scaleR r x) = r * Im6 x\"\n  | \"Im7 (scaleR r x) = r * Im7 x\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(octo, real_vector_class)", "by standard (auto simp: octo_eq_iff distrib_left distrib_right  scaleR_add_right)"], ["", "end"], ["", "instantiation octo::one\nbegin"], ["", "primcorec one_octo\n\n  where\n   \"Ree 1 = 1\" |  \"Im1 1 = 0\"  | \"Im2 1 = 0\" |  \"Im3 1 = 0\" |\n   \"Im4 1 = 0\" |  \"Im5 1 = 0\"  | \"Im6 1 = 0\" | \"Im7 1 = 0\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(octo, one_class)", "by standard"], ["", "end"], ["", "fun octo_proj\n  where\n    \"octo_proj x 0 = ( Ree (x))\"\n  | \"octo_proj x (Suc 0) = ( Im1(x))\"\n  | \"octo_proj x (Suc (Suc 0)) = ( Im2 ( x))\"\n  | \"octo_proj x (Suc (Suc (Suc 0))) = ( Im3( x))\"\n  | \"octo_proj x (Suc (Suc (Suc (Suc 0)))) = ( Im4( x))\"\n  | \"octo_proj x (Suc(Suc (Suc (Suc (Suc 0))))) = ( Im5( x))\"\n  | \"octo_proj x (Suc(Suc (Suc (Suc (Suc (Suc 0)))))) = ( Im6( x))\"\n  | \"octo_proj x (Suc( Suc(Suc (Suc (Suc (Suc (Suc 0))))))) = ( Im7( x))\""], ["", "lemma octo_proj_add:\n  assumes \"i \\<le> 7\"\n  shows \"octo_proj (x+y) i = octo_proj x i + octo_proj y i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_proj (x + y) i = octo_proj x i + octo_proj y i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. octo_proj (x + y) i = octo_proj x i + octo_proj y i", "consider \"i = 0\" | \"i = 1\" | \"i = 2\" | \"i = 3\" | \"i = 4\" | \"i = 5\" | \"i = 6\" | \"i = 7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = 0 \\<Longrightarrow> thesis; i = 1 \\<Longrightarrow> thesis;\n     i = 2 \\<Longrightarrow> thesis; i = 3 \\<Longrightarrow> thesis;\n     i = 4 \\<Longrightarrow> thesis; i = 5 \\<Longrightarrow> thesis;\n     i = 6 \\<Longrightarrow> thesis; i = 7 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using  assms"], ["proof (prove)\nusing this:\n  i \\<le> 7\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = 0 \\<Longrightarrow> thesis; i = 1 \\<Longrightarrow> thesis;\n     i = 2 \\<Longrightarrow> thesis; i = 3 \\<Longrightarrow> thesis;\n     i = 4 \\<Longrightarrow> thesis; i = 5 \\<Longrightarrow> thesis;\n     i = 6 \\<Longrightarrow> thesis; i = 7 \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>i = 0 \\<Longrightarrow> ?thesis; i = 1 \\<Longrightarrow> ?thesis;\n   i = 2 \\<Longrightarrow> ?thesis; i = 3 \\<Longrightarrow> ?thesis;\n   i = 4 \\<Longrightarrow> ?thesis; i = 5 \\<Longrightarrow> ?thesis;\n   i = 6 \\<Longrightarrow> ?thesis; i = 7 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. octo_proj (x + y) i = octo_proj x i + octo_proj y i", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>i = 0 \\<Longrightarrow> ?thesis; i = 1 \\<Longrightarrow> ?thesis;\n   i = 2 \\<Longrightarrow> ?thesis; i = 3 \\<Longrightarrow> ?thesis;\n   i = 4 \\<Longrightarrow> ?thesis; i = 5 \\<Longrightarrow> ?thesis;\n   i = 6 \\<Longrightarrow> ?thesis; i = 7 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>i = 0 \\<Longrightarrow> ?thesis; i = 1 \\<Longrightarrow> ?thesis;\n   i = 2 \\<Longrightarrow> ?thesis; i = 3 \\<Longrightarrow> ?thesis;\n   i = 4 \\<Longrightarrow> ?thesis; i = 5 \\<Longrightarrow> ?thesis;\n   i = 6 \\<Longrightarrow> ?thesis; i = 7 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. octo_proj (x + y) i = octo_proj x i + octo_proj y i", "by cases (auto simp:  numeral_2_eq_2 numeral_3_eq_3 numeral_4_eq_4 numeral_5_eq_5 \n numeral_6_eq_6  numeral_7_eq_7 numeral_7_eq_7)"], ["proof (state)\nthis:\n  octo_proj (x + y) i = octo_proj x i + octo_proj y i\n\ngoal:\nNo subgoals!", "qed"], ["", "instantiation octo ::real_normed_vector\nbegin"], ["", "definition  \"norm x = sqrt ((Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2  +\n  (Im4 x)\\<^sup>2 + (Im5 x)\\<^sup>2 + (Im6 x)\\<^sup>2+ (Im7 x)\\<^sup>2  )\" for x::octo"], ["", "definition \"sgn x = x /\\<^sub>R norm x\" for x :: octo"], ["", "definition \"dist x y = norm (x - y)\" for x y :: octo"], ["", "definition [code del]:\n  \"(uniformity :: (octo \\<times> octo) filter) = (INF e\\<in>{0 <..}. principal {(x, y). dist x y < e})\""], ["", "definition [code del]:\n  \"open (U :: octo set) \\<longleftrightarrow> (\\<forall>x\\<in>U. eventually (\\<lambda>(x', y). x' = x \\<longrightarrow> y \\<in> U) uniformity)\""], ["", "lemma norm_eq_L2: \"norm x = L2_set (octo_proj x) {..7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm x = L2_set (octo_proj x) {..7}", "by (simp add: norm_octo_def L2_set_def eval_nat_numeral)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(octo, real_normed_vector_class)", "proof"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x y. dist x y = norm (x - y)\n 2. \\<And>x. sgn x = x /\\<^sub>R norm x\n 3. uniformity = (INF e\\<in>{0<..}. principal {(x, y). dist x y < e})\n 4. \\<And>U.\n       open U =\n       (\\<forall>x\\<in>U.\n           \\<forall>\\<^sub>F (x', y) in uniformity.\n              x' = x \\<longrightarrow> y \\<in> U)\n 5. \\<And>x. (norm x = 0) = (x = 0)\n 6. \\<And>x y. norm (x + y) \\<le> norm x + norm y\n 7. \\<And>a x. norm (a *\\<^sub>R x) = \\<bar>a\\<bar> * norm x", "fix r :: real and x y :: octo and S :: \"octo set\""], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x y. dist x y = norm (x - y)\n 2. \\<And>x. sgn x = x /\\<^sub>R norm x\n 3. uniformity = (INF e\\<in>{0<..}. principal {(x, y). dist x y < e})\n 4. \\<And>U.\n       open U =\n       (\\<forall>x\\<in>U.\n           \\<forall>\\<^sub>F (x', y) in uniformity.\n              x' = x \\<longrightarrow> y \\<in> U)\n 5. \\<And>x. (norm x = 0) = (x = 0)\n 6. \\<And>x y. norm (x + y) \\<le> norm x + norm y\n 7. \\<And>a x. norm (a *\\<^sub>R x) = \\<bar>a\\<bar> * norm x", "show \"(norm x = 0) \\<longleftrightarrow> (x = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (norm x = 0) = (x = 0)", "by (simp add: norm_octo_def octo_eq_iff add_nonneg_eq_0_iff)"], ["proof (state)\nthis:\n  (norm x = 0) = (x = 0)\n\ngoal (6 subgoals):\n 1. \\<And>x y. dist x y = norm (x - y)\n 2. \\<And>x. sgn x = x /\\<^sub>R norm x\n 3. uniformity = (INF e\\<in>{0<..}. principal {(x, y). dist x y < e})\n 4. \\<And>U.\n       open U =\n       (\\<forall>x\\<in>U.\n           \\<forall>\\<^sub>F (x', y) in uniformity.\n              x' = x \\<longrightarrow> y \\<in> U)\n 5. \\<And>x y. norm (x + y) \\<le> norm x + norm y\n 6. \\<And>a x. norm (a *\\<^sub>R x) = \\<bar>a\\<bar> * norm x", "have eq: \"L2_set (octo_proj (x + y)) {..7} = L2_set (\\<lambda>i. octo_proj x i + octo_proj y i) {..7}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L2_set (octo_proj (x + y)) {..7} =\n    L2_set (\\<lambda>i. octo_proj x i + octo_proj y i) {..7}", "by (rule L2_set_cong) (auto simp: octo_proj_add)"], ["proof (state)\nthis:\n  L2_set (octo_proj (x + y)) {..7} =\n  L2_set (\\<lambda>i. octo_proj x i + octo_proj y i) {..7}\n\ngoal (6 subgoals):\n 1. \\<And>x y. dist x y = norm (x - y)\n 2. \\<And>x. sgn x = x /\\<^sub>R norm x\n 3. uniformity = (INF e\\<in>{0<..}. principal {(x, y). dist x y < e})\n 4. \\<And>U.\n       open U =\n       (\\<forall>x\\<in>U.\n           \\<forall>\\<^sub>F (x', y) in uniformity.\n              x' = x \\<longrightarrow> y \\<in> U)\n 5. \\<And>x y. norm (x + y) \\<le> norm x + norm y\n 6. \\<And>a x. norm (a *\\<^sub>R x) = \\<bar>a\\<bar> * norm x", "show \"norm (x + y) \\<le> norm x + norm y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (x + y) \\<le> norm x + norm y", "by (simp add: norm_eq_L2 eq L2_set_triangle_ineq)"], ["proof (state)\nthis:\n  norm (x + y) \\<le> norm x + norm y\n\ngoal (5 subgoals):\n 1. \\<And>x y. dist x y = norm (x - y)\n 2. \\<And>x. sgn x = x /\\<^sub>R norm x\n 3. uniformity = (INF e\\<in>{0<..}. principal {(x, y). dist x y < e})\n 4. \\<And>U.\n       open U =\n       (\\<forall>x\\<in>U.\n           \\<forall>\\<^sub>F (x', y) in uniformity.\n              x' = x \\<longrightarrow> y \\<in> U)\n 5. \\<And>a x. norm (a *\\<^sub>R x) = \\<bar>a\\<bar> * norm x", "show \"norm (scaleR r x) = \\<bar>r\\<bar> * norm x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (r *\\<^sub>R x) = \\<bar>r\\<bar> * norm x", "by (simp add: norm_octo_def octo_eq_iff \n                  power_mult_distrib distrib_left [symmetric] real_sqrt_mult)"], ["proof (state)\nthis:\n  norm (r *\\<^sub>R x) = \\<bar>r\\<bar> * norm x\n\ngoal (4 subgoals):\n 1. \\<And>x y. dist x y = norm (x - y)\n 2. \\<And>x. sgn x = x /\\<^sub>R norm x\n 3. uniformity = (INF e\\<in>{0<..}. principal {(x, y). dist x y < e})\n 4. \\<And>U.\n       open U =\n       (\\<forall>x\\<in>U.\n           \\<forall>\\<^sub>F (x', y) in uniformity.\n              x' = x \\<longrightarrow> y \\<in> U)", "qed (rule sgn_octo_def dist_octo_def open_octo_def uniformity_octo_def)+"], ["", "end"], ["", "lemma norm_octo_squared:\n  \"norm x ^ 2 = Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2 +\n     Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (norm x)\\<^sup>2 =\n    (Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n    (Im4 x)\\<^sup>2 +\n    (Im5 x)\\<^sup>2 +\n    (Im6 x)\\<^sup>2 +\n    (Im7 x)\\<^sup>2", "by (simp add: norm_octo_def)"], ["", "instantiation octo :: real_inner\nbegin"], ["", "definition inner_octo where\n  \"inner_octo x y = Ree x * Ree y + Im1 x * Im1 y + Im2 x * Im2 y + Im3 x * Im3 y\n      + Im4 x * Im4 y + Im5 x * Im5 y + Im6 x * Im6 y +  Im7 x * Im7 y \" for x y::octo"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(octo, real_inner_class)", "by standard (auto simp: inner_octo_def algebra_simps norm_octo_def \n                          power2_eq_square octo_eq_iff add_nonneg_eq_0_iff)"], ["", "end"], ["", "lemma octo_inner_1 [simp]: \"inner 1 x = Ree x\"\n and octo_inner_1_right [simp]: \"inner x 1 = Ree x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<bullet> x = Ree x &&& x \\<bullet> 1 = Ree x", "unfolding inner_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree 1 * Ree x + Im1 1 * Im1 x + Im2 1 * Im2 x + Im3 1 * Im3 x +\n    Im4 1 * Im4 x +\n    Im5 1 * Im5 x +\n    Im6 1 * Im6 x +\n    Im7 1 * Im7 x =\n    Ree x &&&\n    Ree x * Ree 1 + Im1 x * Im1 1 + Im2 x * Im2 1 + Im3 x * Im3 1 +\n    Im4 x * Im4 1 +\n    Im5 x * Im5 1 +\n    Im6 x * Im6 1 +\n    Im7 x * Im7 1 =\n    Ree x", "by simp_all"], ["", "lemma octo_inner_e1_left [simp]: \"inner e1 x = Im1 x\"\n and octo_inner_e1_right [simp]: \"inner x e1 = Im1 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 \\<bullet> x = Im1 x &&& x \\<bullet> e1 = Im1 x", "unfolding inner_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree e1 * Ree x + Im1 e1 * Im1 x + Im2 e1 * Im2 x + Im3 e1 * Im3 x +\n    Im4 e1 * Im4 x +\n    Im5 e1 * Im5 x +\n    Im6 e1 * Im6 x +\n    Im7 e1 * Im7 x =\n    Im1 x &&&\n    Ree x * Ree e1 + Im1 x * Im1 e1 + Im2 x * Im2 e1 + Im3 x * Im3 e1 +\n    Im4 x * Im4 e1 +\n    Im5 x * Im5 e1 +\n    Im6 x * Im6 e1 +\n    Im7 x * Im7 e1 =\n    Im1 x", "by simp_all"], ["", "lemma octo_inner_e2_left [simp]: \"inner e2 x = Im2 x\"\n  and octo_inner_e2_right [simp]: \"inner x e2 = Im2 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e2 \\<bullet> x = Im2 x &&& x \\<bullet> e2 = Im2 x", "unfolding inner_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree e2 * Ree x + Im1 e2 * Im1 x + Im2 e2 * Im2 x + Im3 e2 * Im3 x +\n    Im4 e2 * Im4 x +\n    Im5 e2 * Im5 x +\n    Im6 e2 * Im6 x +\n    Im7 e2 * Im7 x =\n    Im2 x &&&\n    Ree x * Ree e2 + Im1 x * Im1 e2 + Im2 x * Im2 e2 + Im3 x * Im3 e2 +\n    Im4 x * Im4 e2 +\n    Im5 x * Im5 e2 +\n    Im6 x * Im6 e2 +\n    Im7 x * Im7 e2 =\n    Im2 x", "by simp_all"], ["", "lemma octo_inner_e3_left [simp]: \"inner e3 x = Im3 x\"\n and  octo_inner_e3_right [simp]: \"inner x e3 = Im3 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e3 \\<bullet> x = Im3 x &&& x \\<bullet> e3 = Im3 x", "unfolding inner_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree e3 * Ree x + Im1 e3 * Im1 x + Im2 e3 * Im2 x + Im3 e3 * Im3 x +\n    Im4 e3 * Im4 x +\n    Im5 e3 * Im5 x +\n    Im6 e3 * Im6 x +\n    Im7 e3 * Im7 x =\n    Im3 x &&&\n    Ree x * Ree e3 + Im1 x * Im1 e3 + Im2 x * Im2 e3 + Im3 x * Im3 e3 +\n    Im4 x * Im4 e3 +\n    Im5 x * Im5 e3 +\n    Im6 x * Im6 e3 +\n    Im7 x * Im7 e3 =\n    Im3 x", "by simp_all"], ["", "lemma octo_inner_e4_left [simp]: \"inner e4 x  = Im4 x\"\n and octo_inner_e4_right [simp]: \"inner x e4 = Im4 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e4 \\<bullet> x = Im4 x &&& x \\<bullet> e4 = Im4 x", "unfolding inner_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree e4 * Ree x + Im1 e4 * Im1 x + Im2 e4 * Im2 x + Im3 e4 * Im3 x +\n    Im4 e4 * Im4 x +\n    Im5 e4 * Im5 x +\n    Im6 e4 * Im6 x +\n    Im7 e4 * Im7 x =\n    Im4 x &&&\n    Ree x * Ree e4 + Im1 x * Im1 e4 + Im2 x * Im2 e4 + Im3 x * Im3 e4 +\n    Im4 x * Im4 e4 +\n    Im5 x * Im5 e4 +\n    Im6 x * Im6 e4 +\n    Im7 x * Im7 e4 =\n    Im4 x", "by simp_all"], ["", "lemma octo_inner_e5_left [simp]: \"inner e5 x  = Im5 x\"\n and  octo_inner_e5_right [simp]: \"inner x e5 = Im5 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e5 \\<bullet> x = Im5 x &&& x \\<bullet> e5 = Im5 x", "unfolding inner_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree e5 * Ree x + Im1 e5 * Im1 x + Im2 e5 * Im2 x + Im3 e5 * Im3 x +\n    Im4 e5 * Im4 x +\n    Im5 e5 * Im5 x +\n    Im6 e5 * Im6 x +\n    Im7 e5 * Im7 x =\n    Im5 x &&&\n    Ree x * Ree e5 + Im1 x * Im1 e5 + Im2 x * Im2 e5 + Im3 x * Im3 e5 +\n    Im4 x * Im4 e5 +\n    Im5 x * Im5 e5 +\n    Im6 x * Im6 e5 +\n    Im7 x * Im7 e5 =\n    Im5 x", "by simp_all"], ["", "lemma octo_inner_e6_left [simp]: \"inner e6 x  = Im6 x\"\n and octo_inner_e6_right [simp]: \"inner x e6 = Im6 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e6 \\<bullet> x = Im6 x &&& x \\<bullet> e6 = Im6 x", "unfolding inner_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree e6 * Ree x + Im1 e6 * Im1 x + Im2 e6 * Im2 x + Im3 e6 * Im3 x +\n    Im4 e6 * Im4 x +\n    Im5 e6 * Im5 x +\n    Im6 e6 * Im6 x +\n    Im7 e6 * Im7 x =\n    Im6 x &&&\n    Ree x * Ree e6 + Im1 x * Im1 e6 + Im2 x * Im2 e6 + Im3 x * Im3 e6 +\n    Im4 x * Im4 e6 +\n    Im5 x * Im5 e6 +\n    Im6 x * Im6 e6 +\n    Im7 x * Im7 e6 =\n    Im6 x", "by simp_all"], ["", "lemma octo_inner_e7_left [simp]: \"inner e7 x  = Im7 x\"\n and octo_inner_e7_right [simp]: \"inner x e7 = Im7 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e7 \\<bullet> x = Im7 x &&& x \\<bullet> e7 = Im7 x", "unfolding inner_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree e7 * Ree x + Im1 e7 * Im1 x + Im2 e7 * Im2 x + Im3 e7 * Im3 x +\n    Im4 e7 * Im4 x +\n    Im5 e7 * Im5 x +\n    Im6 e7 * Im6 x +\n    Im7 e7 * Im7 x =\n    Im7 x &&&\n    Ree x * Ree e7 + Im1 x * Im1 e7 + Im2 x * Im2 e7 + Im3 x * Im3 e7 +\n    Im4 x * Im4 e7 +\n    Im5 x * Im5 e7 +\n    Im6 x * Im6 e7 +\n    Im7 x * Im7 e7 =\n    Im7 x", "by simp_all"], ["", "lemma octo_norm_pow_2_inner: \"(norm x) ^ 2 = inner x x \" for x::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. (norm x)\\<^sup>2 = x \\<bullet> x", "by (simp add: dot_square_norm)"], ["", "lemma octo_norm_property:\n  \"inner x y = (1/2)* ((norm(x+y))^2 - (norm(x))^2 - (norm(y))^2) \" for x y ::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<bullet> y =\n    1 / 2 * ((norm (x + y))\\<^sup>2 - (norm x)\\<^sup>2 - (norm y)\\<^sup>2)", "by (simp add: dot_norm norm_octo_def)"], ["", "subsection \\<open>The Octonionic product and related properties and lemmas\\<close>"], ["", "text\\<open>The multiplication is defined following one of the 480 equivalent multiplication tables\nin an analogy to the definition of the 7D cross product. \\<close>"], ["", "instantiation octo :: times\nbegin"], ["", "definition times_octo :: \"[octo, octo] \\<Rightarrow> octo\" \n  where \n    \"(a * b) =  (let \n    t0 = Ree a * Ree b - Im1 a * Im1 b - Im2 a * Im2 b- Im3 a * Im3 b \n          - Im4 a * Im4 b  - Im5 a * Im5 b - Im6 a * Im6 b  -Im7 a * Im7 b ; \n    t1 =  Ree a * Im1 b +   Im1 a * Ree b + Im2 a * Im4 b +Im3 a * Im7 b -\n          Im4 a * Im2  b  +Im5 a * Im6 b - Im6 a * Im5 b - Im7 a * Im3 b ;\n    t2 =  Ree a *  Im2 b - Im1 a * Im4 b+ Im2 a  * Ree b + Im3 a * Im5 b \n          + Im4 a * Im1 b  - Im5 a * Im3 b + Im6 a * Im7 b - Im7 a *Im6 b  ;\n    t3 =  Ree a * Im3 b -Im1 a * Im7 b -Im2 a *Im5 b +Im3 a * Ree b + Im4 a * Im6 b\n         +  Im5 a *Im2 b  - Im6 a * Im4 b + Im7 a * Im1 b ;\n    t4 = Ree a * Im4 b + Im1 a * Im2 b - Im2 a * Im1 b -Im3 a * Im6 b + Im4 a * Ree b \n        +Im5 a * Im7 b +Im6 a * Im3 b -Im7 a * Im5 b ;\n    t5 = Ree a * Im5 b - Im1 a * Im6 b +Im2 a * Im3 b -Im3 a * Im2 b -Im4 a * Im7 b\n         +Im5 a * Ree b  +Im6 a * Im1 b + Im7 a  * Im4 b;\n    t6 = Ree a * Im6 b + Im1 a * Im5 b - Im2 a * Im7 b +Im3 a * Im4 b - Im4 a * Im3 b\n        -Im5 a * Im1 b + Im6 a * Ree b + Im7 a * Im2 b  ;\n    t7 = Ree a * Im7 b + Im1 a * Im3 b +Im2 a * Im6 b - Im3 a * Im1 b + Im4 a * Im5 b\n          -Im5 a * Im4 b - Im6 a * Im2 b +Im7 a * Ree b \n  in Octo t0 t1 t2 t3 t4 t5 t6 t7)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(octo, times_class)", "by standard"], ["", "end"], ["", "instantiation octo ::inverse\nbegin"], ["", "primcorec inverse_octo\n  where\n    \"Ree (inverse x) = Ree x / (Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2\n      +Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^2   )\"\n  | \"Im1 (inverse x) = - (Im1 x) / (Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2\n             +Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^2)\"\n  | \"Im2 (inverse x) = - (Im2 x) / (Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2\n   +Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^2 )\"\n  | \"Im3 (inverse x) = - (Im3 x) / (Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2\n     +Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^2    )\"\n  | \"Im4 (inverse x) = - (Im4 x) / (Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2\n        +Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^2    )\"\n  | \"Im5 (inverse x) = - (Im5 x) / (Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2\n   +Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^2)\"\n  | \"Im6 (inverse x) = - (Im6 x) / (Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2\n       +Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^2    )\"\n  | \"Im7 (inverse x) = - (Im7 x) / (Ree x ^ 2 + Im1 x ^ 2 + Im2 x ^ 2 + Im3 x ^ 2\n     +Im4 x ^ 2 + Im5 x ^ 2 + Im6 x ^ 2 + Im7 x ^2    )\""], ["", "definition \"x div y = x  * ( inverse y)\" for x y :: octo"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(octo, inverse_class)", "by standard"], ["", "end"], ["", "lemma octo_mult_components: \n  \"Ree (x *  y ) =  Ree x *  Ree y - Im1 x * Im1 y -  Im2 x * Im2 y - Im3 x * Im3 y\n   - Im4 x * Im4 y - Im5 x * Im5 y - Im6 x * Im6 y-  Im7 x * Im7 y\"\n  \"Im1 (x  *  y )  =  Ree x * Im1 y +   Im1 x * Ree y + Im2 x * Im4 y +Im3 x * Im7 y -\n     Im4 x * Im2 y    +Im5 x * Im6 y - Im6 x * Im5 y - Im7 x * Im3 y \"    \n   \" Im2 (x  *  y )  =  Ree x *  Im2 y - Im1 x * Im4 y+ Im2 x  * Ree y + Im3 x * Im5 y \n          + Im4 x * Im1 y  - Im5 x * Im3 y + Im6 x * Im7 y - Im7 x *Im6 y  \"    \n   \" Im3 (x * y ) =  Ree x * Im3 y -Im1 x * Im7 y -Im2 x *Im5 y +Im3 x * Ree y + Im4 x * Im6 y\n         +  Im5 x *Im2 y  - Im6 x * Im4 y + Im7 x * Im1 y \"   \n   \"Im4  (x *y ) =  Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y -Im3 x * Im6 y + Im4 x * Ree y \n        +Im5 x * Im7 y +Im6 x * Im3 y -Im7 x * Im5 y  \"   \n   \"Im5  (x * y ) = Ree x * Im5 y - Im1 x * Im6 y +Im2 x * Im3 y -Im3 x * Im2 y -Im4 x * Im7 y\n         +Im5 x * Ree y  +Im6 x * Im1 y + Im7 x  * Im4 y  \"    \n   \" Im6  (x *  y) = Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y +Im3 x * Im4 y - Im4 x * Im3 y\n        -Im5 x * Im1 y + Im6 x * Ree y + Im7 x * Im2 y   \"    \n    \"Im7 (x * y)  = Ree x * Im7 y + Im1 x * Im3 y +Im2 x * Im6 y - Im3 x * Im1 y + Im4 x * Im5 y\n   -Im5 x * Im4 y - Im6 x * Im2 y +Im7 x * Ree y  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Ree (x * y) =\n      Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n      Im4 x * Im4 y -\n      Im5 x * Im5 y -\n      Im6 x * Im6 y -\n      Im7 x * Im7 y &&&\n      Im1 (x * y) =\n      Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n      Im4 x * Im2 y +\n      Im5 x * Im6 y -\n      Im6 x * Im5 y -\n      Im7 x * Im3 y) &&&\n     Im2 (x * y) =\n     Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y &&&\n     Im3 (x * y) =\n     Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) &&&\n    (Im4 (x * y) =\n     Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y &&&\n     Im5 (x * y) =\n     Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) &&&\n    Im6 (x * y) =\n    Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n    Im4 x * Im3 y -\n    Im5 x * Im1 y +\n    Im6 x * Ree y +\n    Im7 x * Im2 y &&&\n    Im7 (x * y) =\n    Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n    Im4 x * Im5 y -\n    Im5 x * Im4 y -\n    Im6 x * Im2 y +\n    Im7 x * Ree y", "unfolding times_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Ree (let t0 = Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y -\n                    Im3 x * Im3 y -\n                    Im4 x * Im4 y -\n                    Im5 x * Im5 y -\n                    Im6 x * Im6 y -\n                    Im7 x * Im7 y;\n               t1 = Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y +\n                    Im3 x * Im7 y -\n                    Im4 x * Im2 y +\n                    Im5 x * Im6 y -\n                    Im6 x * Im5 y -\n                    Im7 x * Im3 y;\n               t2 = Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y +\n                    Im3 x * Im5 y +\n                    Im4 x * Im1 y -\n                    Im5 x * Im3 y +\n                    Im6 x * Im7 y -\n                    Im7 x * Im6 y;\n               t3 = Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y +\n                    Im3 x * Ree y +\n                    Im4 x * Im6 y +\n                    Im5 x * Im2 y -\n                    Im6 x * Im4 y +\n                    Im7 x * Im1 y;\n               t4 = Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y -\n                    Im3 x * Im6 y +\n                    Im4 x * Ree y +\n                    Im5 x * Im7 y +\n                    Im6 x * Im3 y -\n                    Im7 x * Im5 y;\n               t5 = Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y -\n                    Im3 x * Im2 y -\n                    Im4 x * Im7 y +\n                    Im5 x * Ree y +\n                    Im6 x * Im1 y +\n                    Im7 x * Im4 y;\n               t6 = Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y +\n                    Im3 x * Im4 y -\n                    Im4 x * Im3 y -\n                    Im5 x * Im1 y +\n                    Im6 x * Ree y +\n                    Im7 x * Im2 y\n           in Let (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y -\n                   Im3 x * Im1 y +\n                   Im4 x * Im5 y -\n                   Im5 x * Im4 y -\n                   Im6 x * Im2 y +\n                   Im7 x * Ree y)\n               (Octo t0 t1 t2 t3 t4 t5 t6)) =\n      Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n      Im4 x * Im4 y -\n      Im5 x * Im5 y -\n      Im6 x * Im6 y -\n      Im7 x * Im7 y &&&\n      Im1 (let t0 = Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y -\n                    Im3 x * Im3 y -\n                    Im4 x * Im4 y -\n                    Im5 x * Im5 y -\n                    Im6 x * Im6 y -\n                    Im7 x * Im7 y;\n               t1 = Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y +\n                    Im3 x * Im7 y -\n                    Im4 x * Im2 y +\n                    Im5 x * Im6 y -\n                    Im6 x * Im5 y -\n                    Im7 x * Im3 y;\n               t2 = Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y +\n                    Im3 x * Im5 y +\n                    Im4 x * Im1 y -\n                    Im5 x * Im3 y +\n                    Im6 x * Im7 y -\n                    Im7 x * Im6 y;\n               t3 = Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y +\n                    Im3 x * Ree y +\n                    Im4 x * Im6 y +\n                    Im5 x * Im2 y -\n                    Im6 x * Im4 y +\n                    Im7 x * Im1 y;\n               t4 = Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y -\n                    Im3 x * Im6 y +\n                    Im4 x * Ree y +\n                    Im5 x * Im7 y +\n                    Im6 x * Im3 y -\n                    Im7 x * Im5 y;\n               t5 = Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y -\n                    Im3 x * Im2 y -\n                    Im4 x * Im7 y +\n                    Im5 x * Ree y +\n                    Im6 x * Im1 y +\n                    Im7 x * Im4 y;\n               t6 = Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y +\n                    Im3 x * Im4 y -\n                    Im4 x * Im3 y -\n                    Im5 x * Im1 y +\n                    Im6 x * Ree y +\n                    Im7 x * Im2 y\n           in Let (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y -\n                   Im3 x * Im1 y +\n                   Im4 x * Im5 y -\n                   Im5 x * Im4 y -\n                   Im6 x * Im2 y +\n                   Im7 x * Ree y)\n               (Octo t0 t1 t2 t3 t4 t5 t6)) =\n      Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n      Im4 x * Im2 y +\n      Im5 x * Im6 y -\n      Im6 x * Im5 y -\n      Im7 x * Im3 y) &&&\n     Im2 (let t0 = Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y -\n                   Im3 x * Im3 y -\n                   Im4 x * Im4 y -\n                   Im5 x * Im5 y -\n                   Im6 x * Im6 y -\n                   Im7 x * Im7 y;\n              t1 = Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y +\n                   Im3 x * Im7 y -\n                   Im4 x * Im2 y +\n                   Im5 x * Im6 y -\n                   Im6 x * Im5 y -\n                   Im7 x * Im3 y;\n              t2 = Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y +\n                   Im3 x * Im5 y +\n                   Im4 x * Im1 y -\n                   Im5 x * Im3 y +\n                   Im6 x * Im7 y -\n                   Im7 x * Im6 y;\n              t3 = Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y +\n                   Im3 x * Ree y +\n                   Im4 x * Im6 y +\n                   Im5 x * Im2 y -\n                   Im6 x * Im4 y +\n                   Im7 x * Im1 y;\n              t4 = Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y -\n                   Im3 x * Im6 y +\n                   Im4 x * Ree y +\n                   Im5 x * Im7 y +\n                   Im6 x * Im3 y -\n                   Im7 x * Im5 y;\n              t5 = Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y -\n                   Im3 x * Im2 y -\n                   Im4 x * Im7 y +\n                   Im5 x * Ree y +\n                   Im6 x * Im1 y +\n                   Im7 x * Im4 y;\n              t6 = Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y +\n                   Im3 x * Im4 y -\n                   Im4 x * Im3 y -\n                   Im5 x * Im1 y +\n                   Im6 x * Ree y +\n                   Im7 x * Im2 y\n          in Let (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y -\n                  Im3 x * Im1 y +\n                  Im4 x * Im5 y -\n                  Im5 x * Im4 y -\n                  Im6 x * Im2 y +\n                  Im7 x * Ree y)\n              (Octo t0 t1 t2 t3 t4 t5 t6)) =\n     Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y &&&\n     Im3 (let t0 = Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y -\n                   Im3 x * Im3 y -\n                   Im4 x * Im4 y -\n                   Im5 x * Im5 y -\n                   Im6 x * Im6 y -\n                   Im7 x * Im7 y;\n              t1 = Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y +\n                   Im3 x * Im7 y -\n                   Im4 x * Im2 y +\n                   Im5 x * Im6 y -\n                   Im6 x * Im5 y -\n                   Im7 x * Im3 y;\n              t2 = Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y +\n                   Im3 x * Im5 y +\n                   Im4 x * Im1 y -\n                   Im5 x * Im3 y +\n                   Im6 x * Im7 y -\n                   Im7 x * Im6 y;\n              t3 = Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y +\n                   Im3 x * Ree y +\n                   Im4 x * Im6 y +\n                   Im5 x * Im2 y -\n                   Im6 x * Im4 y +\n                   Im7 x * Im1 y;\n              t4 = Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y -\n                   Im3 x * Im6 y +\n                   Im4 x * Ree y +\n                   Im5 x * Im7 y +\n                   Im6 x * Im3 y -\n                   Im7 x * Im5 y;\n              t5 = Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y -\n                   Im3 x * Im2 y -\n                   Im4 x * Im7 y +\n                   Im5 x * Ree y +\n                   Im6 x * Im1 y +\n                   Im7 x * Im4 y;\n              t6 = Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y +\n                   Im3 x * Im4 y -\n                   Im4 x * Im3 y -\n                   Im5 x * Im1 y +\n                   Im6 x * Ree y +\n                   Im7 x * Im2 y\n          in Let (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y -\n                  Im3 x * Im1 y +\n                  Im4 x * Im5 y -\n                  Im5 x * Im4 y -\n                  Im6 x * Im2 y +\n                  Im7 x * Ree y)\n              (Octo t0 t1 t2 t3 t4 t5 t6)) =\n     Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) &&&\n    (Im4 (let t0 = Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y -\n                   Im3 x * Im3 y -\n                   Im4 x * Im4 y -\n                   Im5 x * Im5 y -\n                   Im6 x * Im6 y -\n                   Im7 x * Im7 y;\n              t1 = Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y +\n                   Im3 x * Im7 y -\n                   Im4 x * Im2 y +\n                   Im5 x * Im6 y -\n                   Im6 x * Im5 y -\n                   Im7 x * Im3 y;\n              t2 = Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y +\n                   Im3 x * Im5 y +\n                   Im4 x * Im1 y -\n                   Im5 x * Im3 y +\n                   Im6 x * Im7 y -\n                   Im7 x * Im6 y;\n              t3 = Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y +\n                   Im3 x * Ree y +\n                   Im4 x * Im6 y +\n                   Im5 x * Im2 y -\n                   Im6 x * Im4 y +\n                   Im7 x * Im1 y;\n              t4 = Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y -\n                   Im3 x * Im6 y +\n                   Im4 x * Ree y +\n                   Im5 x * Im7 y +\n                   Im6 x * Im3 y -\n                   Im7 x * Im5 y;\n              t5 = Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y -\n                   Im3 x * Im2 y -\n                   Im4 x * Im7 y +\n                   Im5 x * Ree y +\n                   Im6 x * Im1 y +\n                   Im7 x * Im4 y;\n              t6 = Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y +\n                   Im3 x * Im4 y -\n                   Im4 x * Im3 y -\n                   Im5 x * Im1 y +\n                   Im6 x * Ree y +\n                   Im7 x * Im2 y\n          in Let (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y -\n                  Im3 x * Im1 y +\n                  Im4 x * Im5 y -\n                  Im5 x * Im4 y -\n                  Im6 x * Im2 y +\n                  Im7 x * Ree y)\n              (Octo t0 t1 t2 t3 t4 t5 t6)) =\n     Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y &&&\n     Im5 (let t0 = Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y -\n                   Im3 x * Im3 y -\n                   Im4 x * Im4 y -\n                   Im5 x * Im5 y -\n                   Im6 x * Im6 y -\n                   Im7 x * Im7 y;\n              t1 = Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y +\n                   Im3 x * Im7 y -\n                   Im4 x * Im2 y +\n                   Im5 x * Im6 y -\n                   Im6 x * Im5 y -\n                   Im7 x * Im3 y;\n              t2 = Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y +\n                   Im3 x * Im5 y +\n                   Im4 x * Im1 y -\n                   Im5 x * Im3 y +\n                   Im6 x * Im7 y -\n                   Im7 x * Im6 y;\n              t3 = Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y +\n                   Im3 x * Ree y +\n                   Im4 x * Im6 y +\n                   Im5 x * Im2 y -\n                   Im6 x * Im4 y +\n                   Im7 x * Im1 y;\n              t4 = Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y -\n                   Im3 x * Im6 y +\n                   Im4 x * Ree y +\n                   Im5 x * Im7 y +\n                   Im6 x * Im3 y -\n                   Im7 x * Im5 y;\n              t5 = Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y -\n                   Im3 x * Im2 y -\n                   Im4 x * Im7 y +\n                   Im5 x * Ree y +\n                   Im6 x * Im1 y +\n                   Im7 x * Im4 y;\n              t6 = Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y +\n                   Im3 x * Im4 y -\n                   Im4 x * Im3 y -\n                   Im5 x * Im1 y +\n                   Im6 x * Ree y +\n                   Im7 x * Im2 y\n          in Let (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y -\n                  Im3 x * Im1 y +\n                  Im4 x * Im5 y -\n                  Im5 x * Im4 y -\n                  Im6 x * Im2 y +\n                  Im7 x * Ree y)\n              (Octo t0 t1 t2 t3 t4 t5 t6)) =\n     Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) &&&\n    Im6 (let t0 = Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y -\n                  Im3 x * Im3 y -\n                  Im4 x * Im4 y -\n                  Im5 x * Im5 y -\n                  Im6 x * Im6 y -\n                  Im7 x * Im7 y;\n             t1 = Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y +\n                  Im3 x * Im7 y -\n                  Im4 x * Im2 y +\n                  Im5 x * Im6 y -\n                  Im6 x * Im5 y -\n                  Im7 x * Im3 y;\n             t2 = Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y +\n                  Im3 x * Im5 y +\n                  Im4 x * Im1 y -\n                  Im5 x * Im3 y +\n                  Im6 x * Im7 y -\n                  Im7 x * Im6 y;\n             t3 = Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y +\n                  Im3 x * Ree y +\n                  Im4 x * Im6 y +\n                  Im5 x * Im2 y -\n                  Im6 x * Im4 y +\n                  Im7 x * Im1 y;\n             t4 = Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y -\n                  Im3 x * Im6 y +\n                  Im4 x * Ree y +\n                  Im5 x * Im7 y +\n                  Im6 x * Im3 y -\n                  Im7 x * Im5 y;\n             t5 = Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y -\n                  Im3 x * Im2 y -\n                  Im4 x * Im7 y +\n                  Im5 x * Ree y +\n                  Im6 x * Im1 y +\n                  Im7 x * Im4 y;\n             t6 = Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y +\n                  Im3 x * Im4 y -\n                  Im4 x * Im3 y -\n                  Im5 x * Im1 y +\n                  Im6 x * Ree y +\n                  Im7 x * Im2 y\n         in Let (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y -\n                 Im3 x * Im1 y +\n                 Im4 x * Im5 y -\n                 Im5 x * Im4 y -\n                 Im6 x * Im2 y +\n                 Im7 x * Ree y)\n             (Octo t0 t1 t2 t3 t4 t5 t6)) =\n    Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n    Im4 x * Im3 y -\n    Im5 x * Im1 y +\n    Im6 x * Ree y +\n    Im7 x * Im2 y &&&\n    Im7 (let t0 = Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y -\n                  Im3 x * Im3 y -\n                  Im4 x * Im4 y -\n                  Im5 x * Im5 y -\n                  Im6 x * Im6 y -\n                  Im7 x * Im7 y;\n             t1 = Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y +\n                  Im3 x * Im7 y -\n                  Im4 x * Im2 y +\n                  Im5 x * Im6 y -\n                  Im6 x * Im5 y -\n                  Im7 x * Im3 y;\n             t2 = Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y +\n                  Im3 x * Im5 y +\n                  Im4 x * Im1 y -\n                  Im5 x * Im3 y +\n                  Im6 x * Im7 y -\n                  Im7 x * Im6 y;\n             t3 = Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y +\n                  Im3 x * Ree y +\n                  Im4 x * Im6 y +\n                  Im5 x * Im2 y -\n                  Im6 x * Im4 y +\n                  Im7 x * Im1 y;\n             t4 = Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y -\n                  Im3 x * Im6 y +\n                  Im4 x * Ree y +\n                  Im5 x * Im7 y +\n                  Im6 x * Im3 y -\n                  Im7 x * Im5 y;\n             t5 = Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y -\n                  Im3 x * Im2 y -\n                  Im4 x * Im7 y +\n                  Im5 x * Ree y +\n                  Im6 x * Im1 y +\n                  Im7 x * Im4 y;\n             t6 = Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y +\n                  Im3 x * Im4 y -\n                  Im4 x * Im3 y -\n                  Im5 x * Im1 y +\n                  Im6 x * Ree y +\n                  Im7 x * Im2 y\n         in Let (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y -\n                 Im3 x * Im1 y +\n                 Im4 x * Im5 y -\n                 Im5 x * Im4 y -\n                 Im6 x * Im2 y +\n                 Im7 x * Ree y)\n             (Octo t0 t1 t2 t3 t4 t5 t6)) =\n    Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n    Im4 x * Im5 y -\n    Im5 x * Im4 y -\n    Im6 x * Im2 y +\n    Im7 x * Ree y", "by auto"], ["", "lemma octo_distrib_left :\n  \"a * (b + c) = a * b + a * c\" for a b c ::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. a * (b + c) = a * b + a * c", "unfolding times_octo_def  plus_octo_def minus_octo_def uminus_octo_def scaleR_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let t0 = Ree a *\n              Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im1 a *\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im2 a *\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im3 a *\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im4 a *\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im5 a *\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im6 a *\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im7 a *\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c));\n         t1 = Ree a *\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im1 a *\n              Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im2 a *\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im3 a *\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im4 a *\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im5 a *\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im6 a *\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im7 a *\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c));\n         t2 = Ree a *\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im1 a *\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im2 a *\n              Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im3 a *\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im4 a *\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im5 a *\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im6 a *\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im7 a *\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c));\n         t3 = Ree a *\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im1 a *\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im2 a *\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im3 a *\n              Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im4 a *\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im5 a *\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im6 a *\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im7 a *\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c));\n         t4 = Ree a *\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im1 a *\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im2 a *\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im3 a *\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im4 a *\n              Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im5 a *\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im6 a *\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im7 a *\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c));\n         t5 = Ree a *\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im1 a *\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im2 a *\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im3 a *\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im4 a *\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im5 a *\n              Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im6 a *\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im7 a *\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c));\n         t6 = Ree a *\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im1 a *\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im2 a *\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im3 a *\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im4 a *\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n              Im5 a *\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im6 a *\n              Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n              Im7 a *\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c))\n     in Let (Ree a *\n             Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n             Im1 a *\n             Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n             Im2 a *\n             Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n             Im3 a *\n             Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n             Im4 a *\n             Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n             Im5 a *\n             Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) -\n             Im6 a *\n             Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) +\n             Im7 a *\n             Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)))\n         (Octo t0 t1 t2 t3 t4 t5 t6)) =\n    corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n     (\\<lambda>(x, y). Im1 x + Im1 y) (\\<lambda>(x, y). Im2 x + Im2 y)\n     (\\<lambda>(x, y). Im3 x + Im3 y) (\\<lambda>(x, y). Im4 x + Im4 y)\n     (\\<lambda>(x, y). Im5 x + Im5 y) (\\<lambda>(x, y). Im6 x + Im6 y)\n     (\\<lambda>(x, y). Im7 x + Im7 y)\n     (let t0 = Ree a * Ree b - Im1 a * Im1 b - Im2 a * Im2 b -\n               Im3 a * Im3 b -\n               Im4 a * Im4 b -\n               Im5 a * Im5 b -\n               Im6 a * Im6 b -\n               Im7 a * Im7 b;\n          t1 = Ree a * Im1 b + Im1 a * Ree b + Im2 a * Im4 b +\n               Im3 a * Im7 b -\n               Im4 a * Im2 b +\n               Im5 a * Im6 b -\n               Im6 a * Im5 b -\n               Im7 a * Im3 b;\n          t2 = Ree a * Im2 b - Im1 a * Im4 b + Im2 a * Ree b +\n               Im3 a * Im5 b +\n               Im4 a * Im1 b -\n               Im5 a * Im3 b +\n               Im6 a * Im7 b -\n               Im7 a * Im6 b;\n          t3 = Ree a * Im3 b - Im1 a * Im7 b - Im2 a * Im5 b +\n               Im3 a * Ree b +\n               Im4 a * Im6 b +\n               Im5 a * Im2 b -\n               Im6 a * Im4 b +\n               Im7 a * Im1 b;\n          t4 = Ree a * Im4 b + Im1 a * Im2 b - Im2 a * Im1 b -\n               Im3 a * Im6 b +\n               Im4 a * Ree b +\n               Im5 a * Im7 b +\n               Im6 a * Im3 b -\n               Im7 a * Im5 b;\n          t5 = Ree a * Im5 b - Im1 a * Im6 b + Im2 a * Im3 b -\n               Im3 a * Im2 b -\n               Im4 a * Im7 b +\n               Im5 a * Ree b +\n               Im6 a * Im1 b +\n               Im7 a * Im4 b;\n          t6 = Ree a * Im6 b + Im1 a * Im5 b - Im2 a * Im7 b +\n               Im3 a * Im4 b -\n               Im4 a * Im3 b -\n               Im5 a * Im1 b +\n               Im6 a * Ree b +\n               Im7 a * Im2 b\n      in Let (Ree a * Im7 b + Im1 a * Im3 b + Im2 a * Im6 b -\n              Im3 a * Im1 b +\n              Im4 a * Im5 b -\n              Im5 a * Im4 b -\n              Im6 a * Im2 b +\n              Im7 a * Ree b)\n          (Octo t0 t1 t2 t3 t4 t5 t6),\n      let t0 = Ree a * Ree c - Im1 a * Im1 c - Im2 a * Im2 c -\n               Im3 a * Im3 c -\n               Im4 a * Im4 c -\n               Im5 a * Im5 c -\n               Im6 a * Im6 c -\n               Im7 a * Im7 c;\n          t1 = Ree a * Im1 c + Im1 a * Ree c + Im2 a * Im4 c +\n               Im3 a * Im7 c -\n               Im4 a * Im2 c +\n               Im5 a * Im6 c -\n               Im6 a * Im5 c -\n               Im7 a * Im3 c;\n          t2 = Ree a * Im2 c - Im1 a * Im4 c + Im2 a * Ree c +\n               Im3 a * Im5 c +\n               Im4 a * Im1 c -\n               Im5 a * Im3 c +\n               Im6 a * Im7 c -\n               Im7 a * Im6 c;\n          t3 = Ree a * Im3 c - Im1 a * Im7 c - Im2 a * Im5 c +\n               Im3 a * Ree c +\n               Im4 a * Im6 c +\n               Im5 a * Im2 c -\n               Im6 a * Im4 c +\n               Im7 a * Im1 c;\n          t4 = Ree a * Im4 c + Im1 a * Im2 c - Im2 a * Im1 c -\n               Im3 a * Im6 c +\n               Im4 a * Ree c +\n               Im5 a * Im7 c +\n               Im6 a * Im3 c -\n               Im7 a * Im5 c;\n          t5 = Ree a * Im5 c - Im1 a * Im6 c + Im2 a * Im3 c -\n               Im3 a * Im2 c -\n               Im4 a * Im7 c +\n               Im5 a * Ree c +\n               Im6 a * Im1 c +\n               Im7 a * Im4 c;\n          t6 = Ree a * Im6 c + Im1 a * Im5 c - Im2 a * Im7 c +\n               Im3 a * Im4 c -\n               Im4 a * Im3 c -\n               Im5 a * Im1 c +\n               Im6 a * Ree c +\n               Im7 a * Im2 c\n      in Let (Ree a * Im7 c + Im1 a * Im3 c + Im2 a * Im6 c -\n              Im3 a * Im1 c +\n              Im4 a * Im5 c -\n              Im5 a * Im4 c -\n              Im6 a * Im2 c +\n              Im7 a * Ree c)\n          (Octo t0 t1 t2 t3 t4 t5 t6))", "by (simp add: octo_eq_iff octo_mult_components algebra_simps)"], ["", "lemma octo_distrib_right :\n  \"(b + c) * a = b * a + c * a\" for a b c ::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. (b + c) * a = b * a + c * a", "unfolding times_octo_def  plus_octo_def minus_octo_def uminus_octo_def scaleR_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let t0 = Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Ree a -\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im1 a -\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im2 a -\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im3 a -\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im4 a -\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im5 a -\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im6 a -\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im7 a;\n         t1 = Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im1 a +\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Ree a +\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im4 a +\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im7 a -\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im2 a +\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im6 a -\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im5 a -\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im3 a;\n         t2 = Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im2 a -\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im4 a +\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Ree a +\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im5 a +\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im1 a -\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im3 a +\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im7 a -\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im6 a;\n         t3 = Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im3 a -\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im7 a -\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im5 a +\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Ree a +\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im6 a +\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im2 a -\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im4 a +\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im1 a;\n         t4 = Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im4 a +\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im2 a -\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im1 a -\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im6 a +\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Ree a +\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im7 a +\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im3 a -\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im5 a;\n         t5 = Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im5 a -\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im6 a +\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im3 a -\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im2 a -\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im7 a +\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Ree a +\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im1 a +\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im4 a;\n         t6 = Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im6 a +\n              Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im5 a -\n              Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im7 a +\n              Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im4 a -\n              Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im3 a -\n              Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im1 a +\n              Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Ree a +\n              Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                    (\\<lambda>(x, y). Im1 x + Im1 y)\n                    (\\<lambda>(x, y). Im2 x + Im2 y)\n                    (\\<lambda>(x, y). Im3 x + Im3 y)\n                    (\\<lambda>(x, y). Im4 x + Im4 y)\n                    (\\<lambda>(x, y). Im5 x + Im5 y)\n                    (\\<lambda>(x, y). Im6 x + Im6 y)\n                    (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n              Im2 a\n     in Let (Ree (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n             Im7 a +\n             Im1 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n             Im3 a +\n             Im2 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n             Im6 a -\n             Im3 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n             Im1 a +\n             Im4 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n             Im5 a -\n             Im5 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n             Im4 a -\n             Im6 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n             Im2 a +\n             Im7 (corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n                   (\\<lambda>(x, y). Im1 x + Im1 y)\n                   (\\<lambda>(x, y). Im2 x + Im2 y)\n                   (\\<lambda>(x, y). Im3 x + Im3 y)\n                   (\\<lambda>(x, y). Im4 x + Im4 y)\n                   (\\<lambda>(x, y). Im5 x + Im5 y)\n                   (\\<lambda>(x, y). Im6 x + Im6 y)\n                   (\\<lambda>(x, y). Im7 x + Im7 y) (b, c)) *\n             Ree a)\n         (Octo t0 t1 t2 t3 t4 t5 t6)) =\n    corec_octo (\\<lambda>(x, y). Ree x + Ree y)\n     (\\<lambda>(x, y). Im1 x + Im1 y) (\\<lambda>(x, y). Im2 x + Im2 y)\n     (\\<lambda>(x, y). Im3 x + Im3 y) (\\<lambda>(x, y). Im4 x + Im4 y)\n     (\\<lambda>(x, y). Im5 x + Im5 y) (\\<lambda>(x, y). Im6 x + Im6 y)\n     (\\<lambda>(x, y). Im7 x + Im7 y)\n     (let t0 = Ree b * Ree a - Im1 b * Im1 a - Im2 b * Im2 a -\n               Im3 b * Im3 a -\n               Im4 b * Im4 a -\n               Im5 b * Im5 a -\n               Im6 b * Im6 a -\n               Im7 b * Im7 a;\n          t1 = Ree b * Im1 a + Im1 b * Ree a + Im2 b * Im4 a +\n               Im3 b * Im7 a -\n               Im4 b * Im2 a +\n               Im5 b * Im6 a -\n               Im6 b * Im5 a -\n               Im7 b * Im3 a;\n          t2 = Ree b * Im2 a - Im1 b * Im4 a + Im2 b * Ree a +\n               Im3 b * Im5 a +\n               Im4 b * Im1 a -\n               Im5 b * Im3 a +\n               Im6 b * Im7 a -\n               Im7 b * Im6 a;\n          t3 = Ree b * Im3 a - Im1 b * Im7 a - Im2 b * Im5 a +\n               Im3 b * Ree a +\n               Im4 b * Im6 a +\n               Im5 b * Im2 a -\n               Im6 b * Im4 a +\n               Im7 b * Im1 a;\n          t4 = Ree b * Im4 a + Im1 b * Im2 a - Im2 b * Im1 a -\n               Im3 b * Im6 a +\n               Im4 b * Ree a +\n               Im5 b * Im7 a +\n               Im6 b * Im3 a -\n               Im7 b * Im5 a;\n          t5 = Ree b * Im5 a - Im1 b * Im6 a + Im2 b * Im3 a -\n               Im3 b * Im2 a -\n               Im4 b * Im7 a +\n               Im5 b * Ree a +\n               Im6 b * Im1 a +\n               Im7 b * Im4 a;\n          t6 = Ree b * Im6 a + Im1 b * Im5 a - Im2 b * Im7 a +\n               Im3 b * Im4 a -\n               Im4 b * Im3 a -\n               Im5 b * Im1 a +\n               Im6 b * Ree a +\n               Im7 b * Im2 a\n      in Let (Ree b * Im7 a + Im1 b * Im3 a + Im2 b * Im6 a -\n              Im3 b * Im1 a +\n              Im4 b * Im5 a -\n              Im5 b * Im4 a -\n              Im6 b * Im2 a +\n              Im7 b * Ree a)\n          (Octo t0 t1 t2 t3 t4 t5 t6),\n      let t0 = Ree c * Ree a - Im1 c * Im1 a - Im2 c * Im2 a -\n               Im3 c * Im3 a -\n               Im4 c * Im4 a -\n               Im5 c * Im5 a -\n               Im6 c * Im6 a -\n               Im7 c * Im7 a;\n          t1 = Ree c * Im1 a + Im1 c * Ree a + Im2 c * Im4 a +\n               Im3 c * Im7 a -\n               Im4 c * Im2 a +\n               Im5 c * Im6 a -\n               Im6 c * Im5 a -\n               Im7 c * Im3 a;\n          t2 = Ree c * Im2 a - Im1 c * Im4 a + Im2 c * Ree a +\n               Im3 c * Im5 a +\n               Im4 c * Im1 a -\n               Im5 c * Im3 a +\n               Im6 c * Im7 a -\n               Im7 c * Im6 a;\n          t3 = Ree c * Im3 a - Im1 c * Im7 a - Im2 c * Im5 a +\n               Im3 c * Ree a +\n               Im4 c * Im6 a +\n               Im5 c * Im2 a -\n               Im6 c * Im4 a +\n               Im7 c * Im1 a;\n          t4 = Ree c * Im4 a + Im1 c * Im2 a - Im2 c * Im1 a -\n               Im3 c * Im6 a +\n               Im4 c * Ree a +\n               Im5 c * Im7 a +\n               Im6 c * Im3 a -\n               Im7 c * Im5 a;\n          t5 = Ree c * Im5 a - Im1 c * Im6 a + Im2 c * Im3 a -\n               Im3 c * Im2 a -\n               Im4 c * Im7 a +\n               Im5 c * Ree a +\n               Im6 c * Im1 a +\n               Im7 c * Im4 a;\n          t6 = Ree c * Im6 a + Im1 c * Im5 a - Im2 c * Im7 a +\n               Im3 c * Im4 a -\n               Im4 c * Im3 a -\n               Im5 c * Im1 a +\n               Im6 c * Ree a +\n               Im7 c * Im2 a\n      in Let (Ree c * Im7 a + Im1 c * Im3 a + Im2 c * Im6 a -\n              Im3 c * Im1 a +\n              Im4 c * Im5 a -\n              Im5 c * Im4 a -\n              Im6 c * Im2 a +\n              Im7 c * Ree a)\n          (Octo t0 t1 t2 t3 t4 t5 t6))", "by (simp add: octo_eq_iff octo_mult_components algebra_simps)"], ["", "lemma multiplicative_norm_octo: \"norm (x * y) = norm x * norm y\" for x y ::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (x * y) = norm x * norm y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. norm (x * y) = norm x * norm y", "have \"norm (x * y) ^ 2 = norm x ^ 2 * norm y ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (norm (x * y))\\<^sup>2 = (norm x)\\<^sup>2 * (norm y)\\<^sup>2", "unfolding norm_octo_squared octo_mult_components"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y)\\<^sup>2 +\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y)\\<^sup>2 +\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y)\\<^sup>2 +\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y)\\<^sup>2 +\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y)\\<^sup>2 +\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y)\\<^sup>2 +\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y)\\<^sup>2 +\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y)\\<^sup>2 =\n    ((Ree x)\\<^sup>2 + (Im1 x)\\<^sup>2 + (Im2 x)\\<^sup>2 + (Im3 x)\\<^sup>2 +\n     (Im4 x)\\<^sup>2 +\n     (Im5 x)\\<^sup>2 +\n     (Im6 x)\\<^sup>2 +\n     (Im7 x)\\<^sup>2) *\n    ((Ree y)\\<^sup>2 + (Im1 y)\\<^sup>2 + (Im2 y)\\<^sup>2 + (Im3 y)\\<^sup>2 +\n     (Im4 y)\\<^sup>2 +\n     (Im5 y)\\<^sup>2 +\n     (Im6 y)\\<^sup>2 +\n     (Im7 y)\\<^sup>2)", "by algebra"], ["proof (state)\nthis:\n  (norm (x * y))\\<^sup>2 = (norm x)\\<^sup>2 * (norm y)\\<^sup>2\n\ngoal (1 subgoal):\n 1. norm (x * y) = norm x * norm y", "also"], ["proof (state)\nthis:\n  (norm (x * y))\\<^sup>2 = (norm x)\\<^sup>2 * (norm y)\\<^sup>2\n\ngoal (1 subgoal):\n 1. norm (x * y) = norm x * norm y", "have \"... = (norm x * norm y) ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (norm x)\\<^sup>2 * (norm y)\\<^sup>2 = (norm x * norm y)\\<^sup>2", "by (simp add: power_mult_distrib)"], ["proof (state)\nthis:\n  (norm x)\\<^sup>2 * (norm y)\\<^sup>2 = (norm x * norm y)\\<^sup>2\n\ngoal (1 subgoal):\n 1. norm (x * y) = norm x * norm y", "finally"], ["proof (chain)\npicking this:\n  (norm (x * y))\\<^sup>2 = (norm x * norm y)\\<^sup>2", "show ?thesis"], ["proof (prove)\nusing this:\n  (norm (x * y))\\<^sup>2 = (norm x * norm y)\\<^sup>2\n\ngoal (1 subgoal):\n 1. norm (x * y) = norm x * norm y", "by simp"], ["proof (state)\nthis:\n  norm (x * y) = norm x * norm y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_1_right_octo [simp]: \"x * 1 = (x :: octo)\"\n and mult_1_left_octo [simp]: \"1 * x = (x :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * 1 = x &&& 1 * x = x", "by (simp_all add: times_octo_def)"], ["", "instance octo :: power"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(octo, power_class)", ".."], ["", "lemma power2_eq_square_octo: \"x ^ 2 = (x * x :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x\\<^sup>2 = x * x", "by (simp add: numeral_2_eq_2 times_octo_def)"], ["", "lemma octo_product_alternative_left: \"x * (x * y) = (x * x :: octo) * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * (x * y) = x * x * y", "unfolding octo_eq_iff octo_mult_components"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree x *\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) -\n    Im1 x *\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) -\n    Im2 x *\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) -\n    Im3 x *\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) -\n    Im4 x *\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) -\n    Im5 x *\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) -\n    Im6 x *\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) -\n    Im7 x *\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) =\n    (Ree x * Ree x - Im1 x * Im1 x - Im2 x * Im2 x - Im3 x * Im3 x -\n     Im4 x * Im4 x -\n     Im5 x * Im5 x -\n     Im6 x * Im6 x -\n     Im7 x * Im7 x) *\n    Ree y -\n    (Ree x * Im1 x + Im1 x * Ree x + Im2 x * Im4 x + Im3 x * Im7 x -\n     Im4 x * Im2 x +\n     Im5 x * Im6 x -\n     Im6 x * Im5 x -\n     Im7 x * Im3 x) *\n    Im1 y -\n    (Ree x * Im2 x - Im1 x * Im4 x + Im2 x * Ree x + Im3 x * Im5 x +\n     Im4 x * Im1 x -\n     Im5 x * Im3 x +\n     Im6 x * Im7 x -\n     Im7 x * Im6 x) *\n    Im2 y -\n    (Ree x * Im3 x - Im1 x * Im7 x - Im2 x * Im5 x + Im3 x * Ree x +\n     Im4 x * Im6 x +\n     Im5 x * Im2 x -\n     Im6 x * Im4 x +\n     Im7 x * Im1 x) *\n    Im3 y -\n    (Ree x * Im4 x + Im1 x * Im2 x - Im2 x * Im1 x - Im3 x * Im6 x +\n     Im4 x * Ree x +\n     Im5 x * Im7 x +\n     Im6 x * Im3 x -\n     Im7 x * Im5 x) *\n    Im4 y -\n    (Ree x * Im5 x - Im1 x * Im6 x + Im2 x * Im3 x - Im3 x * Im2 x -\n     Im4 x * Im7 x +\n     Im5 x * Ree x +\n     Im6 x * Im1 x +\n     Im7 x * Im4 x) *\n    Im5 y -\n    (Ree x * Im6 x + Im1 x * Im5 x - Im2 x * Im7 x + Im3 x * Im4 x -\n     Im4 x * Im3 x -\n     Im5 x * Im1 x +\n     Im6 x * Ree x +\n     Im7 x * Im2 x) *\n    Im6 y -\n    (Ree x * Im7 x + Im1 x * Im3 x + Im2 x * Im6 x - Im3 x * Im1 x +\n     Im4 x * Im5 x -\n     Im5 x * Im4 x -\n     Im6 x * Im2 x +\n     Im7 x * Ree x) *\n    Im7 y \\<and>\n    Ree x *\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) +\n    Im1 x *\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) +\n    Im2 x *\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) +\n    Im3 x *\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) -\n    Im4 x *\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) +\n    Im5 x *\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) -\n    Im6 x *\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) -\n    Im7 x *\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) =\n    (Ree x * Ree x - Im1 x * Im1 x - Im2 x * Im2 x - Im3 x * Im3 x -\n     Im4 x * Im4 x -\n     Im5 x * Im5 x -\n     Im6 x * Im6 x -\n     Im7 x * Im7 x) *\n    Im1 y +\n    (Ree x * Im1 x + Im1 x * Ree x + Im2 x * Im4 x + Im3 x * Im7 x -\n     Im4 x * Im2 x +\n     Im5 x * Im6 x -\n     Im6 x * Im5 x -\n     Im7 x * Im3 x) *\n    Ree y +\n    (Ree x * Im2 x - Im1 x * Im4 x + Im2 x * Ree x + Im3 x * Im5 x +\n     Im4 x * Im1 x -\n     Im5 x * Im3 x +\n     Im6 x * Im7 x -\n     Im7 x * Im6 x) *\n    Im4 y +\n    (Ree x * Im3 x - Im1 x * Im7 x - Im2 x * Im5 x + Im3 x * Ree x +\n     Im4 x * Im6 x +\n     Im5 x * Im2 x -\n     Im6 x * Im4 x +\n     Im7 x * Im1 x) *\n    Im7 y -\n    (Ree x * Im4 x + Im1 x * Im2 x - Im2 x * Im1 x - Im3 x * Im6 x +\n     Im4 x * Ree x +\n     Im5 x * Im7 x +\n     Im6 x * Im3 x -\n     Im7 x * Im5 x) *\n    Im2 y +\n    (Ree x * Im5 x - Im1 x * Im6 x + Im2 x * Im3 x - Im3 x * Im2 x -\n     Im4 x * Im7 x +\n     Im5 x * Ree x +\n     Im6 x * Im1 x +\n     Im7 x * Im4 x) *\n    Im6 y -\n    (Ree x * Im6 x + Im1 x * Im5 x - Im2 x * Im7 x + Im3 x * Im4 x -\n     Im4 x * Im3 x -\n     Im5 x * Im1 x +\n     Im6 x * Ree x +\n     Im7 x * Im2 x) *\n    Im5 y -\n    (Ree x * Im7 x + Im1 x * Im3 x + Im2 x * Im6 x - Im3 x * Im1 x +\n     Im4 x * Im5 x -\n     Im5 x * Im4 x -\n     Im6 x * Im2 x +\n     Im7 x * Ree x) *\n    Im3 y \\<and>\n    Ree x *\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) -\n    Im1 x *\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) +\n    Im2 x *\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) +\n    Im3 x *\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) +\n    Im4 x *\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) -\n    Im5 x *\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) +\n    Im6 x *\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) -\n    Im7 x *\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) =\n    (Ree x * Ree x - Im1 x * Im1 x - Im2 x * Im2 x - Im3 x * Im3 x -\n     Im4 x * Im4 x -\n     Im5 x * Im5 x -\n     Im6 x * Im6 x -\n     Im7 x * Im7 x) *\n    Im2 y -\n    (Ree x * Im1 x + Im1 x * Ree x + Im2 x * Im4 x + Im3 x * Im7 x -\n     Im4 x * Im2 x +\n     Im5 x * Im6 x -\n     Im6 x * Im5 x -\n     Im7 x * Im3 x) *\n    Im4 y +\n    (Ree x * Im2 x - Im1 x * Im4 x + Im2 x * Ree x + Im3 x * Im5 x +\n     Im4 x * Im1 x -\n     Im5 x * Im3 x +\n     Im6 x * Im7 x -\n     Im7 x * Im6 x) *\n    Ree y +\n    (Ree x * Im3 x - Im1 x * Im7 x - Im2 x * Im5 x + Im3 x * Ree x +\n     Im4 x * Im6 x +\n     Im5 x * Im2 x -\n     Im6 x * Im4 x +\n     Im7 x * Im1 x) *\n    Im5 y +\n    (Ree x * Im4 x + Im1 x * Im2 x - Im2 x * Im1 x - Im3 x * Im6 x +\n     Im4 x * Ree x +\n     Im5 x * Im7 x +\n     Im6 x * Im3 x -\n     Im7 x * Im5 x) *\n    Im1 y -\n    (Ree x * Im5 x - Im1 x * Im6 x + Im2 x * Im3 x - Im3 x * Im2 x -\n     Im4 x * Im7 x +\n     Im5 x * Ree x +\n     Im6 x * Im1 x +\n     Im7 x * Im4 x) *\n    Im3 y +\n    (Ree x * Im6 x + Im1 x * Im5 x - Im2 x * Im7 x + Im3 x * Im4 x -\n     Im4 x * Im3 x -\n     Im5 x * Im1 x +\n     Im6 x * Ree x +\n     Im7 x * Im2 x) *\n    Im7 y -\n    (Ree x * Im7 x + Im1 x * Im3 x + Im2 x * Im6 x - Im3 x * Im1 x +\n     Im4 x * Im5 x -\n     Im5 x * Im4 x -\n     Im6 x * Im2 x +\n     Im7 x * Ree x) *\n    Im6 y \\<and>\n    Ree x *\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) -\n    Im1 x *\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) -\n    Im2 x *\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) +\n    Im3 x *\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) +\n    Im4 x *\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) +\n    Im5 x *\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) -\n    Im6 x *\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) +\n    Im7 x *\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) =\n    (Ree x * Ree x - Im1 x * Im1 x - Im2 x * Im2 x - Im3 x * Im3 x -\n     Im4 x * Im4 x -\n     Im5 x * Im5 x -\n     Im6 x * Im6 x -\n     Im7 x * Im7 x) *\n    Im3 y -\n    (Ree x * Im1 x + Im1 x * Ree x + Im2 x * Im4 x + Im3 x * Im7 x -\n     Im4 x * Im2 x +\n     Im5 x * Im6 x -\n     Im6 x * Im5 x -\n     Im7 x * Im3 x) *\n    Im7 y -\n    (Ree x * Im2 x - Im1 x * Im4 x + Im2 x * Ree x + Im3 x * Im5 x +\n     Im4 x * Im1 x -\n     Im5 x * Im3 x +\n     Im6 x * Im7 x -\n     Im7 x * Im6 x) *\n    Im5 y +\n    (Ree x * Im3 x - Im1 x * Im7 x - Im2 x * Im5 x + Im3 x * Ree x +\n     Im4 x * Im6 x +\n     Im5 x * Im2 x -\n     Im6 x * Im4 x +\n     Im7 x * Im1 x) *\n    Ree y +\n    (Ree x * Im4 x + Im1 x * Im2 x - Im2 x * Im1 x - Im3 x * Im6 x +\n     Im4 x * Ree x +\n     Im5 x * Im7 x +\n     Im6 x * Im3 x -\n     Im7 x * Im5 x) *\n    Im6 y +\n    (Ree x * Im5 x - Im1 x * Im6 x + Im2 x * Im3 x - Im3 x * Im2 x -\n     Im4 x * Im7 x +\n     Im5 x * Ree x +\n     Im6 x * Im1 x +\n     Im7 x * Im4 x) *\n    Im2 y -\n    (Ree x * Im6 x + Im1 x * Im5 x - Im2 x * Im7 x + Im3 x * Im4 x -\n     Im4 x * Im3 x -\n     Im5 x * Im1 x +\n     Im6 x * Ree x +\n     Im7 x * Im2 x) *\n    Im4 y +\n    (Ree x * Im7 x + Im1 x * Im3 x + Im2 x * Im6 x - Im3 x * Im1 x +\n     Im4 x * Im5 x -\n     Im5 x * Im4 x -\n     Im6 x * Im2 x +\n     Im7 x * Ree x) *\n    Im1 y \\<and>\n    Ree x *\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) +\n    Im1 x *\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) -\n    Im2 x *\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) -\n    Im3 x *\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) +\n    Im4 x *\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) +\n    Im5 x *\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) +\n    Im6 x *\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) -\n    Im7 x *\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) =\n    (Ree x * Ree x - Im1 x * Im1 x - Im2 x * Im2 x - Im3 x * Im3 x -\n     Im4 x * Im4 x -\n     Im5 x * Im5 x -\n     Im6 x * Im6 x -\n     Im7 x * Im7 x) *\n    Im4 y +\n    (Ree x * Im1 x + Im1 x * Ree x + Im2 x * Im4 x + Im3 x * Im7 x -\n     Im4 x * Im2 x +\n     Im5 x * Im6 x -\n     Im6 x * Im5 x -\n     Im7 x * Im3 x) *\n    Im2 y -\n    (Ree x * Im2 x - Im1 x * Im4 x + Im2 x * Ree x + Im3 x * Im5 x +\n     Im4 x * Im1 x -\n     Im5 x * Im3 x +\n     Im6 x * Im7 x -\n     Im7 x * Im6 x) *\n    Im1 y -\n    (Ree x * Im3 x - Im1 x * Im7 x - Im2 x * Im5 x + Im3 x * Ree x +\n     Im4 x * Im6 x +\n     Im5 x * Im2 x -\n     Im6 x * Im4 x +\n     Im7 x * Im1 x) *\n    Im6 y +\n    (Ree x * Im4 x + Im1 x * Im2 x - Im2 x * Im1 x - Im3 x * Im6 x +\n     Im4 x * Ree x +\n     Im5 x * Im7 x +\n     Im6 x * Im3 x -\n     Im7 x * Im5 x) *\n    Ree y +\n    (Ree x * Im5 x - Im1 x * Im6 x + Im2 x * Im3 x - Im3 x * Im2 x -\n     Im4 x * Im7 x +\n     Im5 x * Ree x +\n     Im6 x * Im1 x +\n     Im7 x * Im4 x) *\n    Im7 y +\n    (Ree x * Im6 x + Im1 x * Im5 x - Im2 x * Im7 x + Im3 x * Im4 x -\n     Im4 x * Im3 x -\n     Im5 x * Im1 x +\n     Im6 x * Ree x +\n     Im7 x * Im2 x) *\n    Im3 y -\n    (Ree x * Im7 x + Im1 x * Im3 x + Im2 x * Im6 x - Im3 x * Im1 x +\n     Im4 x * Im5 x -\n     Im5 x * Im4 x -\n     Im6 x * Im2 x +\n     Im7 x * Ree x) *\n    Im5 y \\<and>\n    Ree x *\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) -\n    Im1 x *\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) +\n    Im2 x *\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) -\n    Im3 x *\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) -\n    Im4 x *\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) +\n    Im5 x *\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) +\n    Im6 x *\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) +\n    Im7 x *\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) =\n    (Ree x * Ree x - Im1 x * Im1 x - Im2 x * Im2 x - Im3 x * Im3 x -\n     Im4 x * Im4 x -\n     Im5 x * Im5 x -\n     Im6 x * Im6 x -\n     Im7 x * Im7 x) *\n    Im5 y -\n    (Ree x * Im1 x + Im1 x * Ree x + Im2 x * Im4 x + Im3 x * Im7 x -\n     Im4 x * Im2 x +\n     Im5 x * Im6 x -\n     Im6 x * Im5 x -\n     Im7 x * Im3 x) *\n    Im6 y +\n    (Ree x * Im2 x - Im1 x * Im4 x + Im2 x * Ree x + Im3 x * Im5 x +\n     Im4 x * Im1 x -\n     Im5 x * Im3 x +\n     Im6 x * Im7 x -\n     Im7 x * Im6 x) *\n    Im3 y -\n    (Ree x * Im3 x - Im1 x * Im7 x - Im2 x * Im5 x + Im3 x * Ree x +\n     Im4 x * Im6 x +\n     Im5 x * Im2 x -\n     Im6 x * Im4 x +\n     Im7 x * Im1 x) *\n    Im2 y -\n    (Ree x * Im4 x + Im1 x * Im2 x - Im2 x * Im1 x - Im3 x * Im6 x +\n     Im4 x * Ree x +\n     Im5 x * Im7 x +\n     Im6 x * Im3 x -\n     Im7 x * Im5 x) *\n    Im7 y +\n    (Ree x * Im5 x - Im1 x * Im6 x + Im2 x * Im3 x - Im3 x * Im2 x -\n     Im4 x * Im7 x +\n     Im5 x * Ree x +\n     Im6 x * Im1 x +\n     Im7 x * Im4 x) *\n    Ree y +\n    (Ree x * Im6 x + Im1 x * Im5 x - Im2 x * Im7 x + Im3 x * Im4 x -\n     Im4 x * Im3 x -\n     Im5 x * Im1 x +\n     Im6 x * Ree x +\n     Im7 x * Im2 x) *\n    Im1 y +\n    (Ree x * Im7 x + Im1 x * Im3 x + Im2 x * Im6 x - Im3 x * Im1 x +\n     Im4 x * Im5 x -\n     Im5 x * Im4 x -\n     Im6 x * Im2 x +\n     Im7 x * Ree x) *\n    Im4 y \\<and>\n    Ree x *\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) +\n    Im1 x *\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) -\n    Im2 x *\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) +\n    Im3 x *\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) -\n    Im4 x *\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) -\n    Im5 x *\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) +\n    Im6 x *\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) +\n    Im7 x *\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) =\n    (Ree x * Ree x - Im1 x * Im1 x - Im2 x * Im2 x - Im3 x * Im3 x -\n     Im4 x * Im4 x -\n     Im5 x * Im5 x -\n     Im6 x * Im6 x -\n     Im7 x * Im7 x) *\n    Im6 y +\n    (Ree x * Im1 x + Im1 x * Ree x + Im2 x * Im4 x + Im3 x * Im7 x -\n     Im4 x * Im2 x +\n     Im5 x * Im6 x -\n     Im6 x * Im5 x -\n     Im7 x * Im3 x) *\n    Im5 y -\n    (Ree x * Im2 x - Im1 x * Im4 x + Im2 x * Ree x + Im3 x * Im5 x +\n     Im4 x * Im1 x -\n     Im5 x * Im3 x +\n     Im6 x * Im7 x -\n     Im7 x * Im6 x) *\n    Im7 y +\n    (Ree x * Im3 x - Im1 x * Im7 x - Im2 x * Im5 x + Im3 x * Ree x +\n     Im4 x * Im6 x +\n     Im5 x * Im2 x -\n     Im6 x * Im4 x +\n     Im7 x * Im1 x) *\n    Im4 y -\n    (Ree x * Im4 x + Im1 x * Im2 x - Im2 x * Im1 x - Im3 x * Im6 x +\n     Im4 x * Ree x +\n     Im5 x * Im7 x +\n     Im6 x * Im3 x -\n     Im7 x * Im5 x) *\n    Im3 y -\n    (Ree x * Im5 x - Im1 x * Im6 x + Im2 x * Im3 x - Im3 x * Im2 x -\n     Im4 x * Im7 x +\n     Im5 x * Ree x +\n     Im6 x * Im1 x +\n     Im7 x * Im4 x) *\n    Im1 y +\n    (Ree x * Im6 x + Im1 x * Im5 x - Im2 x * Im7 x + Im3 x * Im4 x -\n     Im4 x * Im3 x -\n     Im5 x * Im1 x +\n     Im6 x * Ree x +\n     Im7 x * Im2 x) *\n    Ree y +\n    (Ree x * Im7 x + Im1 x * Im3 x + Im2 x * Im6 x - Im3 x * Im1 x +\n     Im4 x * Im5 x -\n     Im5 x * Im4 x -\n     Im6 x * Im2 x +\n     Im7 x * Ree x) *\n    Im2 y \\<and>\n    Ree x *\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) +\n    Im1 x *\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) +\n    Im2 x *\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) -\n    Im3 x *\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) +\n    Im4 x *\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) -\n    Im5 x *\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) -\n    Im6 x *\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) +\n    Im7 x *\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) =\n    (Ree x * Ree x - Im1 x * Im1 x - Im2 x * Im2 x - Im3 x * Im3 x -\n     Im4 x * Im4 x -\n     Im5 x * Im5 x -\n     Im6 x * Im6 x -\n     Im7 x * Im7 x) *\n    Im7 y +\n    (Ree x * Im1 x + Im1 x * Ree x + Im2 x * Im4 x + Im3 x * Im7 x -\n     Im4 x * Im2 x +\n     Im5 x * Im6 x -\n     Im6 x * Im5 x -\n     Im7 x * Im3 x) *\n    Im3 y +\n    (Ree x * Im2 x - Im1 x * Im4 x + Im2 x * Ree x + Im3 x * Im5 x +\n     Im4 x * Im1 x -\n     Im5 x * Im3 x +\n     Im6 x * Im7 x -\n     Im7 x * Im6 x) *\n    Im6 y -\n    (Ree x * Im3 x - Im1 x * Im7 x - Im2 x * Im5 x + Im3 x * Ree x +\n     Im4 x * Im6 x +\n     Im5 x * Im2 x -\n     Im6 x * Im4 x +\n     Im7 x * Im1 x) *\n    Im1 y +\n    (Ree x * Im4 x + Im1 x * Im2 x - Im2 x * Im1 x - Im3 x * Im6 x +\n     Im4 x * Ree x +\n     Im5 x * Im7 x +\n     Im6 x * Im3 x -\n     Im7 x * Im5 x) *\n    Im5 y -\n    (Ree x * Im5 x - Im1 x * Im6 x + Im2 x * Im3 x - Im3 x * Im2 x -\n     Im4 x * Im7 x +\n     Im5 x * Ree x +\n     Im6 x * Im1 x +\n     Im7 x * Im4 x) *\n    Im4 y -\n    (Ree x * Im6 x + Im1 x * Im5 x - Im2 x * Im7 x + Im3 x * Im4 x -\n     Im4 x * Im3 x -\n     Im5 x * Im1 x +\n     Im6 x * Ree x +\n     Im7 x * Im2 x) *\n    Im2 y +\n    (Ree x * Im7 x + Im1 x * Im3 x + Im2 x * Im6 x - Im3 x * Im1 x +\n     Im4 x * Im5 x -\n     Im5 x * Im4 x -\n     Im6 x * Im2 x +\n     Im7 x * Ree x) *\n    Ree y", "by algebra"], ["", "lemma octo_product_alternative_right: \"x * (y * y) = (x * y :: octo) * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * (y * y) = x * y * y", "unfolding octo_eq_iff octo_mult_components"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree x *\n    (Ree y * Ree y - Im1 y * Im1 y - Im2 y * Im2 y - Im3 y * Im3 y -\n     Im4 y * Im4 y -\n     Im5 y * Im5 y -\n     Im6 y * Im6 y -\n     Im7 y * Im7 y) -\n    Im1 x *\n    (Ree y * Im1 y + Im1 y * Ree y + Im2 y * Im4 y + Im3 y * Im7 y -\n     Im4 y * Im2 y +\n     Im5 y * Im6 y -\n     Im6 y * Im5 y -\n     Im7 y * Im3 y) -\n    Im2 x *\n    (Ree y * Im2 y - Im1 y * Im4 y + Im2 y * Ree y + Im3 y * Im5 y +\n     Im4 y * Im1 y -\n     Im5 y * Im3 y +\n     Im6 y * Im7 y -\n     Im7 y * Im6 y) -\n    Im3 x *\n    (Ree y * Im3 y - Im1 y * Im7 y - Im2 y * Im5 y + Im3 y * Ree y +\n     Im4 y * Im6 y +\n     Im5 y * Im2 y -\n     Im6 y * Im4 y +\n     Im7 y * Im1 y) -\n    Im4 x *\n    (Ree y * Im4 y + Im1 y * Im2 y - Im2 y * Im1 y - Im3 y * Im6 y +\n     Im4 y * Ree y +\n     Im5 y * Im7 y +\n     Im6 y * Im3 y -\n     Im7 y * Im5 y) -\n    Im5 x *\n    (Ree y * Im5 y - Im1 y * Im6 y + Im2 y * Im3 y - Im3 y * Im2 y -\n     Im4 y * Im7 y +\n     Im5 y * Ree y +\n     Im6 y * Im1 y +\n     Im7 y * Im4 y) -\n    Im6 x *\n    (Ree y * Im6 y + Im1 y * Im5 y - Im2 y * Im7 y + Im3 y * Im4 y -\n     Im4 y * Im3 y -\n     Im5 y * Im1 y +\n     Im6 y * Ree y +\n     Im7 y * Im2 y) -\n    Im7 x *\n    (Ree y * Im7 y + Im1 y * Im3 y + Im2 y * Im6 y - Im3 y * Im1 y +\n     Im4 y * Im5 y -\n     Im5 y * Im4 y -\n     Im6 y * Im2 y +\n     Im7 y * Ree y) =\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Ree y -\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im1 y -\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im2 y -\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im3 y -\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im4 y -\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im5 y -\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im6 y -\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im7 y \\<and>\n    Ree x *\n    (Ree y * Im1 y + Im1 y * Ree y + Im2 y * Im4 y + Im3 y * Im7 y -\n     Im4 y * Im2 y +\n     Im5 y * Im6 y -\n     Im6 y * Im5 y -\n     Im7 y * Im3 y) +\n    Im1 x *\n    (Ree y * Ree y - Im1 y * Im1 y - Im2 y * Im2 y - Im3 y * Im3 y -\n     Im4 y * Im4 y -\n     Im5 y * Im5 y -\n     Im6 y * Im6 y -\n     Im7 y * Im7 y) +\n    Im2 x *\n    (Ree y * Im4 y + Im1 y * Im2 y - Im2 y * Im1 y - Im3 y * Im6 y +\n     Im4 y * Ree y +\n     Im5 y * Im7 y +\n     Im6 y * Im3 y -\n     Im7 y * Im5 y) +\n    Im3 x *\n    (Ree y * Im7 y + Im1 y * Im3 y + Im2 y * Im6 y - Im3 y * Im1 y +\n     Im4 y * Im5 y -\n     Im5 y * Im4 y -\n     Im6 y * Im2 y +\n     Im7 y * Ree y) -\n    Im4 x *\n    (Ree y * Im2 y - Im1 y * Im4 y + Im2 y * Ree y + Im3 y * Im5 y +\n     Im4 y * Im1 y -\n     Im5 y * Im3 y +\n     Im6 y * Im7 y -\n     Im7 y * Im6 y) +\n    Im5 x *\n    (Ree y * Im6 y + Im1 y * Im5 y - Im2 y * Im7 y + Im3 y * Im4 y -\n     Im4 y * Im3 y -\n     Im5 y * Im1 y +\n     Im6 y * Ree y +\n     Im7 y * Im2 y) -\n    Im6 x *\n    (Ree y * Im5 y - Im1 y * Im6 y + Im2 y * Im3 y - Im3 y * Im2 y -\n     Im4 y * Im7 y +\n     Im5 y * Ree y +\n     Im6 y * Im1 y +\n     Im7 y * Im4 y) -\n    Im7 x *\n    (Ree y * Im3 y - Im1 y * Im7 y - Im2 y * Im5 y + Im3 y * Ree y +\n     Im4 y * Im6 y +\n     Im5 y * Im2 y -\n     Im6 y * Im4 y +\n     Im7 y * Im1 y) =\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im1 y +\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Ree y +\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im4 y +\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im7 y -\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im2 y +\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im6 y -\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im5 y -\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im3 y \\<and>\n    Ree x *\n    (Ree y * Im2 y - Im1 y * Im4 y + Im2 y * Ree y + Im3 y * Im5 y +\n     Im4 y * Im1 y -\n     Im5 y * Im3 y +\n     Im6 y * Im7 y -\n     Im7 y * Im6 y) -\n    Im1 x *\n    (Ree y * Im4 y + Im1 y * Im2 y - Im2 y * Im1 y - Im3 y * Im6 y +\n     Im4 y * Ree y +\n     Im5 y * Im7 y +\n     Im6 y * Im3 y -\n     Im7 y * Im5 y) +\n    Im2 x *\n    (Ree y * Ree y - Im1 y * Im1 y - Im2 y * Im2 y - Im3 y * Im3 y -\n     Im4 y * Im4 y -\n     Im5 y * Im5 y -\n     Im6 y * Im6 y -\n     Im7 y * Im7 y) +\n    Im3 x *\n    (Ree y * Im5 y - Im1 y * Im6 y + Im2 y * Im3 y - Im3 y * Im2 y -\n     Im4 y * Im7 y +\n     Im5 y * Ree y +\n     Im6 y * Im1 y +\n     Im7 y * Im4 y) +\n    Im4 x *\n    (Ree y * Im1 y + Im1 y * Ree y + Im2 y * Im4 y + Im3 y * Im7 y -\n     Im4 y * Im2 y +\n     Im5 y * Im6 y -\n     Im6 y * Im5 y -\n     Im7 y * Im3 y) -\n    Im5 x *\n    (Ree y * Im3 y - Im1 y * Im7 y - Im2 y * Im5 y + Im3 y * Ree y +\n     Im4 y * Im6 y +\n     Im5 y * Im2 y -\n     Im6 y * Im4 y +\n     Im7 y * Im1 y) +\n    Im6 x *\n    (Ree y * Im7 y + Im1 y * Im3 y + Im2 y * Im6 y - Im3 y * Im1 y +\n     Im4 y * Im5 y -\n     Im5 y * Im4 y -\n     Im6 y * Im2 y +\n     Im7 y * Ree y) -\n    Im7 x *\n    (Ree y * Im6 y + Im1 y * Im5 y - Im2 y * Im7 y + Im3 y * Im4 y -\n     Im4 y * Im3 y -\n     Im5 y * Im1 y +\n     Im6 y * Ree y +\n     Im7 y * Im2 y) =\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im2 y -\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im4 y +\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Ree y +\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im5 y +\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im1 y -\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im3 y +\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im7 y -\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im6 y \\<and>\n    Ree x *\n    (Ree y * Im3 y - Im1 y * Im7 y - Im2 y * Im5 y + Im3 y * Ree y +\n     Im4 y * Im6 y +\n     Im5 y * Im2 y -\n     Im6 y * Im4 y +\n     Im7 y * Im1 y) -\n    Im1 x *\n    (Ree y * Im7 y + Im1 y * Im3 y + Im2 y * Im6 y - Im3 y * Im1 y +\n     Im4 y * Im5 y -\n     Im5 y * Im4 y -\n     Im6 y * Im2 y +\n     Im7 y * Ree y) -\n    Im2 x *\n    (Ree y * Im5 y - Im1 y * Im6 y + Im2 y * Im3 y - Im3 y * Im2 y -\n     Im4 y * Im7 y +\n     Im5 y * Ree y +\n     Im6 y * Im1 y +\n     Im7 y * Im4 y) +\n    Im3 x *\n    (Ree y * Ree y - Im1 y * Im1 y - Im2 y * Im2 y - Im3 y * Im3 y -\n     Im4 y * Im4 y -\n     Im5 y * Im5 y -\n     Im6 y * Im6 y -\n     Im7 y * Im7 y) +\n    Im4 x *\n    (Ree y * Im6 y + Im1 y * Im5 y - Im2 y * Im7 y + Im3 y * Im4 y -\n     Im4 y * Im3 y -\n     Im5 y * Im1 y +\n     Im6 y * Ree y +\n     Im7 y * Im2 y) +\n    Im5 x *\n    (Ree y * Im2 y - Im1 y * Im4 y + Im2 y * Ree y + Im3 y * Im5 y +\n     Im4 y * Im1 y -\n     Im5 y * Im3 y +\n     Im6 y * Im7 y -\n     Im7 y * Im6 y) -\n    Im6 x *\n    (Ree y * Im4 y + Im1 y * Im2 y - Im2 y * Im1 y - Im3 y * Im6 y +\n     Im4 y * Ree y +\n     Im5 y * Im7 y +\n     Im6 y * Im3 y -\n     Im7 y * Im5 y) +\n    Im7 x *\n    (Ree y * Im1 y + Im1 y * Ree y + Im2 y * Im4 y + Im3 y * Im7 y -\n     Im4 y * Im2 y +\n     Im5 y * Im6 y -\n     Im6 y * Im5 y -\n     Im7 y * Im3 y) =\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im3 y -\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im7 y -\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im5 y +\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Ree y +\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im6 y +\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im2 y -\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im4 y +\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im1 y \\<and>\n    Ree x *\n    (Ree y * Im4 y + Im1 y * Im2 y - Im2 y * Im1 y - Im3 y * Im6 y +\n     Im4 y * Ree y +\n     Im5 y * Im7 y +\n     Im6 y * Im3 y -\n     Im7 y * Im5 y) +\n    Im1 x *\n    (Ree y * Im2 y - Im1 y * Im4 y + Im2 y * Ree y + Im3 y * Im5 y +\n     Im4 y * Im1 y -\n     Im5 y * Im3 y +\n     Im6 y * Im7 y -\n     Im7 y * Im6 y) -\n    Im2 x *\n    (Ree y * Im1 y + Im1 y * Ree y + Im2 y * Im4 y + Im3 y * Im7 y -\n     Im4 y * Im2 y +\n     Im5 y * Im6 y -\n     Im6 y * Im5 y -\n     Im7 y * Im3 y) -\n    Im3 x *\n    (Ree y * Im6 y + Im1 y * Im5 y - Im2 y * Im7 y + Im3 y * Im4 y -\n     Im4 y * Im3 y -\n     Im5 y * Im1 y +\n     Im6 y * Ree y +\n     Im7 y * Im2 y) +\n    Im4 x *\n    (Ree y * Ree y - Im1 y * Im1 y - Im2 y * Im2 y - Im3 y * Im3 y -\n     Im4 y * Im4 y -\n     Im5 y * Im5 y -\n     Im6 y * Im6 y -\n     Im7 y * Im7 y) +\n    Im5 x *\n    (Ree y * Im7 y + Im1 y * Im3 y + Im2 y * Im6 y - Im3 y * Im1 y +\n     Im4 y * Im5 y -\n     Im5 y * Im4 y -\n     Im6 y * Im2 y +\n     Im7 y * Ree y) +\n    Im6 x *\n    (Ree y * Im3 y - Im1 y * Im7 y - Im2 y * Im5 y + Im3 y * Ree y +\n     Im4 y * Im6 y +\n     Im5 y * Im2 y -\n     Im6 y * Im4 y +\n     Im7 y * Im1 y) -\n    Im7 x *\n    (Ree y * Im5 y - Im1 y * Im6 y + Im2 y * Im3 y - Im3 y * Im2 y -\n     Im4 y * Im7 y +\n     Im5 y * Ree y +\n     Im6 y * Im1 y +\n     Im7 y * Im4 y) =\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im4 y +\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im2 y -\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im1 y -\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im6 y +\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Ree y +\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im7 y +\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im3 y -\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im5 y \\<and>\n    Ree x *\n    (Ree y * Im5 y - Im1 y * Im6 y + Im2 y * Im3 y - Im3 y * Im2 y -\n     Im4 y * Im7 y +\n     Im5 y * Ree y +\n     Im6 y * Im1 y +\n     Im7 y * Im4 y) -\n    Im1 x *\n    (Ree y * Im6 y + Im1 y * Im5 y - Im2 y * Im7 y + Im3 y * Im4 y -\n     Im4 y * Im3 y -\n     Im5 y * Im1 y +\n     Im6 y * Ree y +\n     Im7 y * Im2 y) +\n    Im2 x *\n    (Ree y * Im3 y - Im1 y * Im7 y - Im2 y * Im5 y + Im3 y * Ree y +\n     Im4 y * Im6 y +\n     Im5 y * Im2 y -\n     Im6 y * Im4 y +\n     Im7 y * Im1 y) -\n    Im3 x *\n    (Ree y * Im2 y - Im1 y * Im4 y + Im2 y * Ree y + Im3 y * Im5 y +\n     Im4 y * Im1 y -\n     Im5 y * Im3 y +\n     Im6 y * Im7 y -\n     Im7 y * Im6 y) -\n    Im4 x *\n    (Ree y * Im7 y + Im1 y * Im3 y + Im2 y * Im6 y - Im3 y * Im1 y +\n     Im4 y * Im5 y -\n     Im5 y * Im4 y -\n     Im6 y * Im2 y +\n     Im7 y * Ree y) +\n    Im5 x *\n    (Ree y * Ree y - Im1 y * Im1 y - Im2 y * Im2 y - Im3 y * Im3 y -\n     Im4 y * Im4 y -\n     Im5 y * Im5 y -\n     Im6 y * Im6 y -\n     Im7 y * Im7 y) +\n    Im6 x *\n    (Ree y * Im1 y + Im1 y * Ree y + Im2 y * Im4 y + Im3 y * Im7 y -\n     Im4 y * Im2 y +\n     Im5 y * Im6 y -\n     Im6 y * Im5 y -\n     Im7 y * Im3 y) +\n    Im7 x *\n    (Ree y * Im4 y + Im1 y * Im2 y - Im2 y * Im1 y - Im3 y * Im6 y +\n     Im4 y * Ree y +\n     Im5 y * Im7 y +\n     Im6 y * Im3 y -\n     Im7 y * Im5 y) =\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im5 y -\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im6 y +\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im3 y -\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im2 y -\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im7 y +\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Ree y +\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im1 y +\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im4 y \\<and>\n    Ree x *\n    (Ree y * Im6 y + Im1 y * Im5 y - Im2 y * Im7 y + Im3 y * Im4 y -\n     Im4 y * Im3 y -\n     Im5 y * Im1 y +\n     Im6 y * Ree y +\n     Im7 y * Im2 y) +\n    Im1 x *\n    (Ree y * Im5 y - Im1 y * Im6 y + Im2 y * Im3 y - Im3 y * Im2 y -\n     Im4 y * Im7 y +\n     Im5 y * Ree y +\n     Im6 y * Im1 y +\n     Im7 y * Im4 y) -\n    Im2 x *\n    (Ree y * Im7 y + Im1 y * Im3 y + Im2 y * Im6 y - Im3 y * Im1 y +\n     Im4 y * Im5 y -\n     Im5 y * Im4 y -\n     Im6 y * Im2 y +\n     Im7 y * Ree y) +\n    Im3 x *\n    (Ree y * Im4 y + Im1 y * Im2 y - Im2 y * Im1 y - Im3 y * Im6 y +\n     Im4 y * Ree y +\n     Im5 y * Im7 y +\n     Im6 y * Im3 y -\n     Im7 y * Im5 y) -\n    Im4 x *\n    (Ree y * Im3 y - Im1 y * Im7 y - Im2 y * Im5 y + Im3 y * Ree y +\n     Im4 y * Im6 y +\n     Im5 y * Im2 y -\n     Im6 y * Im4 y +\n     Im7 y * Im1 y) -\n    Im5 x *\n    (Ree y * Im1 y + Im1 y * Ree y + Im2 y * Im4 y + Im3 y * Im7 y -\n     Im4 y * Im2 y +\n     Im5 y * Im6 y -\n     Im6 y * Im5 y -\n     Im7 y * Im3 y) +\n    Im6 x *\n    (Ree y * Ree y - Im1 y * Im1 y - Im2 y * Im2 y - Im3 y * Im3 y -\n     Im4 y * Im4 y -\n     Im5 y * Im5 y -\n     Im6 y * Im6 y -\n     Im7 y * Im7 y) +\n    Im7 x *\n    (Ree y * Im2 y - Im1 y * Im4 y + Im2 y * Ree y + Im3 y * Im5 y +\n     Im4 y * Im1 y -\n     Im5 y * Im3 y +\n     Im6 y * Im7 y -\n     Im7 y * Im6 y) =\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im6 y +\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im5 y -\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im7 y +\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im4 y -\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im3 y -\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im1 y +\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Ree y +\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im2 y \\<and>\n    Ree x *\n    (Ree y * Im7 y + Im1 y * Im3 y + Im2 y * Im6 y - Im3 y * Im1 y +\n     Im4 y * Im5 y -\n     Im5 y * Im4 y -\n     Im6 y * Im2 y +\n     Im7 y * Ree y) +\n    Im1 x *\n    (Ree y * Im3 y - Im1 y * Im7 y - Im2 y * Im5 y + Im3 y * Ree y +\n     Im4 y * Im6 y +\n     Im5 y * Im2 y -\n     Im6 y * Im4 y +\n     Im7 y * Im1 y) +\n    Im2 x *\n    (Ree y * Im6 y + Im1 y * Im5 y - Im2 y * Im7 y + Im3 y * Im4 y -\n     Im4 y * Im3 y -\n     Im5 y * Im1 y +\n     Im6 y * Ree y +\n     Im7 y * Im2 y) -\n    Im3 x *\n    (Ree y * Im1 y + Im1 y * Ree y + Im2 y * Im4 y + Im3 y * Im7 y -\n     Im4 y * Im2 y +\n     Im5 y * Im6 y -\n     Im6 y * Im5 y -\n     Im7 y * Im3 y) +\n    Im4 x *\n    (Ree y * Im5 y - Im1 y * Im6 y + Im2 y * Im3 y - Im3 y * Im2 y -\n     Im4 y * Im7 y +\n     Im5 y * Ree y +\n     Im6 y * Im1 y +\n     Im7 y * Im4 y) -\n    Im5 x *\n    (Ree y * Im4 y + Im1 y * Im2 y - Im2 y * Im1 y - Im3 y * Im6 y +\n     Im4 y * Ree y +\n     Im5 y * Im7 y +\n     Im6 y * Im3 y -\n     Im7 y * Im5 y) -\n    Im6 x *\n    (Ree y * Im2 y - Im1 y * Im4 y + Im2 y * Ree y + Im3 y * Im5 y +\n     Im4 y * Im1 y -\n     Im5 y * Im3 y +\n     Im6 y * Im7 y -\n     Im7 y * Im6 y) +\n    Im7 x *\n    (Ree y * Ree y - Im1 y * Im1 y - Im2 y * Im2 y - Im3 y * Im3 y -\n     Im4 y * Im4 y -\n     Im5 y * Im5 y -\n     Im6 y * Im6 y -\n     Im7 y * Im7 y) =\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im7 y +\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im3 y +\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im6 y -\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im1 y +\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im5 y -\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im4 y -\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im2 y +\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Ree y", "by algebra"], ["", "lemma octo_product_flexible: \"(x * y) * x = x * (y * x :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * y * x = x * (y * x)", "unfolding octo_eq_iff octo_mult_components"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Ree x -\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im1 x -\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im2 x -\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im3 x -\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im4 x -\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im5 x -\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im6 x -\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im7 x =\n    Ree x *\n    (Ree y * Ree x - Im1 y * Im1 x - Im2 y * Im2 x - Im3 y * Im3 x -\n     Im4 y * Im4 x -\n     Im5 y * Im5 x -\n     Im6 y * Im6 x -\n     Im7 y * Im7 x) -\n    Im1 x *\n    (Ree y * Im1 x + Im1 y * Ree x + Im2 y * Im4 x + Im3 y * Im7 x -\n     Im4 y * Im2 x +\n     Im5 y * Im6 x -\n     Im6 y * Im5 x -\n     Im7 y * Im3 x) -\n    Im2 x *\n    (Ree y * Im2 x - Im1 y * Im4 x + Im2 y * Ree x + Im3 y * Im5 x +\n     Im4 y * Im1 x -\n     Im5 y * Im3 x +\n     Im6 y * Im7 x -\n     Im7 y * Im6 x) -\n    Im3 x *\n    (Ree y * Im3 x - Im1 y * Im7 x - Im2 y * Im5 x + Im3 y * Ree x +\n     Im4 y * Im6 x +\n     Im5 y * Im2 x -\n     Im6 y * Im4 x +\n     Im7 y * Im1 x) -\n    Im4 x *\n    (Ree y * Im4 x + Im1 y * Im2 x - Im2 y * Im1 x - Im3 y * Im6 x +\n     Im4 y * Ree x +\n     Im5 y * Im7 x +\n     Im6 y * Im3 x -\n     Im7 y * Im5 x) -\n    Im5 x *\n    (Ree y * Im5 x - Im1 y * Im6 x + Im2 y * Im3 x - Im3 y * Im2 x -\n     Im4 y * Im7 x +\n     Im5 y * Ree x +\n     Im6 y * Im1 x +\n     Im7 y * Im4 x) -\n    Im6 x *\n    (Ree y * Im6 x + Im1 y * Im5 x - Im2 y * Im7 x + Im3 y * Im4 x -\n     Im4 y * Im3 x -\n     Im5 y * Im1 x +\n     Im6 y * Ree x +\n     Im7 y * Im2 x) -\n    Im7 x *\n    (Ree y * Im7 x + Im1 y * Im3 x + Im2 y * Im6 x - Im3 y * Im1 x +\n     Im4 y * Im5 x -\n     Im5 y * Im4 x -\n     Im6 y * Im2 x +\n     Im7 y * Ree x) \\<and>\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im1 x +\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Ree x +\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im4 x +\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im7 x -\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im2 x +\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im6 x -\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im5 x -\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im3 x =\n    Ree x *\n    (Ree y * Im1 x + Im1 y * Ree x + Im2 y * Im4 x + Im3 y * Im7 x -\n     Im4 y * Im2 x +\n     Im5 y * Im6 x -\n     Im6 y * Im5 x -\n     Im7 y * Im3 x) +\n    Im1 x *\n    (Ree y * Ree x - Im1 y * Im1 x - Im2 y * Im2 x - Im3 y * Im3 x -\n     Im4 y * Im4 x -\n     Im5 y * Im5 x -\n     Im6 y * Im6 x -\n     Im7 y * Im7 x) +\n    Im2 x *\n    (Ree y * Im4 x + Im1 y * Im2 x - Im2 y * Im1 x - Im3 y * Im6 x +\n     Im4 y * Ree x +\n     Im5 y * Im7 x +\n     Im6 y * Im3 x -\n     Im7 y * Im5 x) +\n    Im3 x *\n    (Ree y * Im7 x + Im1 y * Im3 x + Im2 y * Im6 x - Im3 y * Im1 x +\n     Im4 y * Im5 x -\n     Im5 y * Im4 x -\n     Im6 y * Im2 x +\n     Im7 y * Ree x) -\n    Im4 x *\n    (Ree y * Im2 x - Im1 y * Im4 x + Im2 y * Ree x + Im3 y * Im5 x +\n     Im4 y * Im1 x -\n     Im5 y * Im3 x +\n     Im6 y * Im7 x -\n     Im7 y * Im6 x) +\n    Im5 x *\n    (Ree y * Im6 x + Im1 y * Im5 x - Im2 y * Im7 x + Im3 y * Im4 x -\n     Im4 y * Im3 x -\n     Im5 y * Im1 x +\n     Im6 y * Ree x +\n     Im7 y * Im2 x) -\n    Im6 x *\n    (Ree y * Im5 x - Im1 y * Im6 x + Im2 y * Im3 x - Im3 y * Im2 x -\n     Im4 y * Im7 x +\n     Im5 y * Ree x +\n     Im6 y * Im1 x +\n     Im7 y * Im4 x) -\n    Im7 x *\n    (Ree y * Im3 x - Im1 y * Im7 x - Im2 y * Im5 x + Im3 y * Ree x +\n     Im4 y * Im6 x +\n     Im5 y * Im2 x -\n     Im6 y * Im4 x +\n     Im7 y * Im1 x) \\<and>\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im2 x -\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im4 x +\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Ree x +\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im5 x +\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im1 x -\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im3 x +\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im7 x -\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im6 x =\n    Ree x *\n    (Ree y * Im2 x - Im1 y * Im4 x + Im2 y * Ree x + Im3 y * Im5 x +\n     Im4 y * Im1 x -\n     Im5 y * Im3 x +\n     Im6 y * Im7 x -\n     Im7 y * Im6 x) -\n    Im1 x *\n    (Ree y * Im4 x + Im1 y * Im2 x - Im2 y * Im1 x - Im3 y * Im6 x +\n     Im4 y * Ree x +\n     Im5 y * Im7 x +\n     Im6 y * Im3 x -\n     Im7 y * Im5 x) +\n    Im2 x *\n    (Ree y * Ree x - Im1 y * Im1 x - Im2 y * Im2 x - Im3 y * Im3 x -\n     Im4 y * Im4 x -\n     Im5 y * Im5 x -\n     Im6 y * Im6 x -\n     Im7 y * Im7 x) +\n    Im3 x *\n    (Ree y * Im5 x - Im1 y * Im6 x + Im2 y * Im3 x - Im3 y * Im2 x -\n     Im4 y * Im7 x +\n     Im5 y * Ree x +\n     Im6 y * Im1 x +\n     Im7 y * Im4 x) +\n    Im4 x *\n    (Ree y * Im1 x + Im1 y * Ree x + Im2 y * Im4 x + Im3 y * Im7 x -\n     Im4 y * Im2 x +\n     Im5 y * Im6 x -\n     Im6 y * Im5 x -\n     Im7 y * Im3 x) -\n    Im5 x *\n    (Ree y * Im3 x - Im1 y * Im7 x - Im2 y * Im5 x + Im3 y * Ree x +\n     Im4 y * Im6 x +\n     Im5 y * Im2 x -\n     Im6 y * Im4 x +\n     Im7 y * Im1 x) +\n    Im6 x *\n    (Ree y * Im7 x + Im1 y * Im3 x + Im2 y * Im6 x - Im3 y * Im1 x +\n     Im4 y * Im5 x -\n     Im5 y * Im4 x -\n     Im6 y * Im2 x +\n     Im7 y * Ree x) -\n    Im7 x *\n    (Ree y * Im6 x + Im1 y * Im5 x - Im2 y * Im7 x + Im3 y * Im4 x -\n     Im4 y * Im3 x -\n     Im5 y * Im1 x +\n     Im6 y * Ree x +\n     Im7 y * Im2 x) \\<and>\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im3 x -\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im7 x -\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im5 x +\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Ree x +\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im6 x +\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im2 x -\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im4 x +\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im1 x =\n    Ree x *\n    (Ree y * Im3 x - Im1 y * Im7 x - Im2 y * Im5 x + Im3 y * Ree x +\n     Im4 y * Im6 x +\n     Im5 y * Im2 x -\n     Im6 y * Im4 x +\n     Im7 y * Im1 x) -\n    Im1 x *\n    (Ree y * Im7 x + Im1 y * Im3 x + Im2 y * Im6 x - Im3 y * Im1 x +\n     Im4 y * Im5 x -\n     Im5 y * Im4 x -\n     Im6 y * Im2 x +\n     Im7 y * Ree x) -\n    Im2 x *\n    (Ree y * Im5 x - Im1 y * Im6 x + Im2 y * Im3 x - Im3 y * Im2 x -\n     Im4 y * Im7 x +\n     Im5 y * Ree x +\n     Im6 y * Im1 x +\n     Im7 y * Im4 x) +\n    Im3 x *\n    (Ree y * Ree x - Im1 y * Im1 x - Im2 y * Im2 x - Im3 y * Im3 x -\n     Im4 y * Im4 x -\n     Im5 y * Im5 x -\n     Im6 y * Im6 x -\n     Im7 y * Im7 x) +\n    Im4 x *\n    (Ree y * Im6 x + Im1 y * Im5 x - Im2 y * Im7 x + Im3 y * Im4 x -\n     Im4 y * Im3 x -\n     Im5 y * Im1 x +\n     Im6 y * Ree x +\n     Im7 y * Im2 x) +\n    Im5 x *\n    (Ree y * Im2 x - Im1 y * Im4 x + Im2 y * Ree x + Im3 y * Im5 x +\n     Im4 y * Im1 x -\n     Im5 y * Im3 x +\n     Im6 y * Im7 x -\n     Im7 y * Im6 x) -\n    Im6 x *\n    (Ree y * Im4 x + Im1 y * Im2 x - Im2 y * Im1 x - Im3 y * Im6 x +\n     Im4 y * Ree x +\n     Im5 y * Im7 x +\n     Im6 y * Im3 x -\n     Im7 y * Im5 x) +\n    Im7 x *\n    (Ree y * Im1 x + Im1 y * Ree x + Im2 y * Im4 x + Im3 y * Im7 x -\n     Im4 y * Im2 x +\n     Im5 y * Im6 x -\n     Im6 y * Im5 x -\n     Im7 y * Im3 x) \\<and>\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im4 x +\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im2 x -\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im1 x -\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im6 x +\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Ree x +\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im7 x +\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im3 x -\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im5 x =\n    Ree x *\n    (Ree y * Im4 x + Im1 y * Im2 x - Im2 y * Im1 x - Im3 y * Im6 x +\n     Im4 y * Ree x +\n     Im5 y * Im7 x +\n     Im6 y * Im3 x -\n     Im7 y * Im5 x) +\n    Im1 x *\n    (Ree y * Im2 x - Im1 y * Im4 x + Im2 y * Ree x + Im3 y * Im5 x +\n     Im4 y * Im1 x -\n     Im5 y * Im3 x +\n     Im6 y * Im7 x -\n     Im7 y * Im6 x) -\n    Im2 x *\n    (Ree y * Im1 x + Im1 y * Ree x + Im2 y * Im4 x + Im3 y * Im7 x -\n     Im4 y * Im2 x +\n     Im5 y * Im6 x -\n     Im6 y * Im5 x -\n     Im7 y * Im3 x) -\n    Im3 x *\n    (Ree y * Im6 x + Im1 y * Im5 x - Im2 y * Im7 x + Im3 y * Im4 x -\n     Im4 y * Im3 x -\n     Im5 y * Im1 x +\n     Im6 y * Ree x +\n     Im7 y * Im2 x) +\n    Im4 x *\n    (Ree y * Ree x - Im1 y * Im1 x - Im2 y * Im2 x - Im3 y * Im3 x -\n     Im4 y * Im4 x -\n     Im5 y * Im5 x -\n     Im6 y * Im6 x -\n     Im7 y * Im7 x) +\n    Im5 x *\n    (Ree y * Im7 x + Im1 y * Im3 x + Im2 y * Im6 x - Im3 y * Im1 x +\n     Im4 y * Im5 x -\n     Im5 y * Im4 x -\n     Im6 y * Im2 x +\n     Im7 y * Ree x) +\n    Im6 x *\n    (Ree y * Im3 x - Im1 y * Im7 x - Im2 y * Im5 x + Im3 y * Ree x +\n     Im4 y * Im6 x +\n     Im5 y * Im2 x -\n     Im6 y * Im4 x +\n     Im7 y * Im1 x) -\n    Im7 x *\n    (Ree y * Im5 x - Im1 y * Im6 x + Im2 y * Im3 x - Im3 y * Im2 x -\n     Im4 y * Im7 x +\n     Im5 y * Ree x +\n     Im6 y * Im1 x +\n     Im7 y * Im4 x) \\<and>\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im5 x -\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im6 x +\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im3 x -\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im2 x -\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im7 x +\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Ree x +\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im1 x +\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im4 x =\n    Ree x *\n    (Ree y * Im5 x - Im1 y * Im6 x + Im2 y * Im3 x - Im3 y * Im2 x -\n     Im4 y * Im7 x +\n     Im5 y * Ree x +\n     Im6 y * Im1 x +\n     Im7 y * Im4 x) -\n    Im1 x *\n    (Ree y * Im6 x + Im1 y * Im5 x - Im2 y * Im7 x + Im3 y * Im4 x -\n     Im4 y * Im3 x -\n     Im5 y * Im1 x +\n     Im6 y * Ree x +\n     Im7 y * Im2 x) +\n    Im2 x *\n    (Ree y * Im3 x - Im1 y * Im7 x - Im2 y * Im5 x + Im3 y * Ree x +\n     Im4 y * Im6 x +\n     Im5 y * Im2 x -\n     Im6 y * Im4 x +\n     Im7 y * Im1 x) -\n    Im3 x *\n    (Ree y * Im2 x - Im1 y * Im4 x + Im2 y * Ree x + Im3 y * Im5 x +\n     Im4 y * Im1 x -\n     Im5 y * Im3 x +\n     Im6 y * Im7 x -\n     Im7 y * Im6 x) -\n    Im4 x *\n    (Ree y * Im7 x + Im1 y * Im3 x + Im2 y * Im6 x - Im3 y * Im1 x +\n     Im4 y * Im5 x -\n     Im5 y * Im4 x -\n     Im6 y * Im2 x +\n     Im7 y * Ree x) +\n    Im5 x *\n    (Ree y * Ree x - Im1 y * Im1 x - Im2 y * Im2 x - Im3 y * Im3 x -\n     Im4 y * Im4 x -\n     Im5 y * Im5 x -\n     Im6 y * Im6 x -\n     Im7 y * Im7 x) +\n    Im6 x *\n    (Ree y * Im1 x + Im1 y * Ree x + Im2 y * Im4 x + Im3 y * Im7 x -\n     Im4 y * Im2 x +\n     Im5 y * Im6 x -\n     Im6 y * Im5 x -\n     Im7 y * Im3 x) +\n    Im7 x *\n    (Ree y * Im4 x + Im1 y * Im2 x - Im2 y * Im1 x - Im3 y * Im6 x +\n     Im4 y * Ree x +\n     Im5 y * Im7 x +\n     Im6 y * Im3 x -\n     Im7 y * Im5 x) \\<and>\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im6 x +\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im5 x -\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im7 x +\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im4 x -\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im3 x -\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im1 x +\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Ree x +\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Im2 x =\n    Ree x *\n    (Ree y * Im6 x + Im1 y * Im5 x - Im2 y * Im7 x + Im3 y * Im4 x -\n     Im4 y * Im3 x -\n     Im5 y * Im1 x +\n     Im6 y * Ree x +\n     Im7 y * Im2 x) +\n    Im1 x *\n    (Ree y * Im5 x - Im1 y * Im6 x + Im2 y * Im3 x - Im3 y * Im2 x -\n     Im4 y * Im7 x +\n     Im5 y * Ree x +\n     Im6 y * Im1 x +\n     Im7 y * Im4 x) -\n    Im2 x *\n    (Ree y * Im7 x + Im1 y * Im3 x + Im2 y * Im6 x - Im3 y * Im1 x +\n     Im4 y * Im5 x -\n     Im5 y * Im4 x -\n     Im6 y * Im2 x +\n     Im7 y * Ree x) +\n    Im3 x *\n    (Ree y * Im4 x + Im1 y * Im2 x - Im2 y * Im1 x - Im3 y * Im6 x +\n     Im4 y * Ree x +\n     Im5 y * Im7 x +\n     Im6 y * Im3 x -\n     Im7 y * Im5 x) -\n    Im4 x *\n    (Ree y * Im3 x - Im1 y * Im7 x - Im2 y * Im5 x + Im3 y * Ree x +\n     Im4 y * Im6 x +\n     Im5 y * Im2 x -\n     Im6 y * Im4 x +\n     Im7 y * Im1 x) -\n    Im5 x *\n    (Ree y * Im1 x + Im1 y * Ree x + Im2 y * Im4 x + Im3 y * Im7 x -\n     Im4 y * Im2 x +\n     Im5 y * Im6 x -\n     Im6 y * Im5 x -\n     Im7 y * Im3 x) +\n    Im6 x *\n    (Ree y * Ree x - Im1 y * Im1 x - Im2 y * Im2 x - Im3 y * Im3 x -\n     Im4 y * Im4 x -\n     Im5 y * Im5 x -\n     Im6 y * Im6 x -\n     Im7 y * Im7 x) +\n    Im7 x *\n    (Ree y * Im2 x - Im1 y * Im4 x + Im2 y * Ree x + Im3 y * Im5 x +\n     Im4 y * Im1 x -\n     Im5 y * Im3 x +\n     Im6 y * Im7 x -\n     Im7 y * Im6 x) \\<and>\n    (Ree x * Ree y - Im1 x * Im1 y - Im2 x * Im2 y - Im3 x * Im3 y -\n     Im4 x * Im4 y -\n     Im5 x * Im5 y -\n     Im6 x * Im6 y -\n     Im7 x * Im7 y) *\n    Im7 x +\n    (Ree x * Im1 y + Im1 x * Ree y + Im2 x * Im4 y + Im3 x * Im7 y -\n     Im4 x * Im2 y +\n     Im5 x * Im6 y -\n     Im6 x * Im5 y -\n     Im7 x * Im3 y) *\n    Im3 x +\n    (Ree x * Im2 y - Im1 x * Im4 y + Im2 x * Ree y + Im3 x * Im5 y +\n     Im4 x * Im1 y -\n     Im5 x * Im3 y +\n     Im6 x * Im7 y -\n     Im7 x * Im6 y) *\n    Im6 x -\n    (Ree x * Im3 y - Im1 x * Im7 y - Im2 x * Im5 y + Im3 x * Ree y +\n     Im4 x * Im6 y +\n     Im5 x * Im2 y -\n     Im6 x * Im4 y +\n     Im7 x * Im1 y) *\n    Im1 x +\n    (Ree x * Im4 y + Im1 x * Im2 y - Im2 x * Im1 y - Im3 x * Im6 y +\n     Im4 x * Ree y +\n     Im5 x * Im7 y +\n     Im6 x * Im3 y -\n     Im7 x * Im5 y) *\n    Im5 x -\n    (Ree x * Im5 y - Im1 x * Im6 y + Im2 x * Im3 y - Im3 x * Im2 y -\n     Im4 x * Im7 y +\n     Im5 x * Ree y +\n     Im6 x * Im1 y +\n     Im7 x * Im4 y) *\n    Im4 x -\n    (Ree x * Im6 y + Im1 x * Im5 y - Im2 x * Im7 y + Im3 x * Im4 y -\n     Im4 x * Im3 y -\n     Im5 x * Im1 y +\n     Im6 x * Ree y +\n     Im7 x * Im2 y) *\n    Im2 x +\n    (Ree x * Im7 y + Im1 x * Im3 y + Im2 x * Im6 y - Im3 x * Im1 y +\n     Im4 x * Im5 y -\n     Im5 x * Im4 y -\n     Im6 x * Im2 y +\n     Im7 x * Ree y) *\n    Ree x =\n    Ree x *\n    (Ree y * Im7 x + Im1 y * Im3 x + Im2 y * Im6 x - Im3 y * Im1 x +\n     Im4 y * Im5 x -\n     Im5 y * Im4 x -\n     Im6 y * Im2 x +\n     Im7 y * Ree x) +\n    Im1 x *\n    (Ree y * Im3 x - Im1 y * Im7 x - Im2 y * Im5 x + Im3 y * Ree x +\n     Im4 y * Im6 x +\n     Im5 y * Im2 x -\n     Im6 y * Im4 x +\n     Im7 y * Im1 x) +\n    Im2 x *\n    (Ree y * Im6 x + Im1 y * Im5 x - Im2 y * Im7 x + Im3 y * Im4 x -\n     Im4 y * Im3 x -\n     Im5 y * Im1 x +\n     Im6 y * Ree x +\n     Im7 y * Im2 x) -\n    Im3 x *\n    (Ree y * Im1 x + Im1 y * Ree x + Im2 y * Im4 x + Im3 y * Im7 x -\n     Im4 y * Im2 x +\n     Im5 y * Im6 x -\n     Im6 y * Im5 x -\n     Im7 y * Im3 x) +\n    Im4 x *\n    (Ree y * Im5 x - Im1 y * Im6 x + Im2 y * Im3 x - Im3 y * Im2 x -\n     Im4 y * Im7 x +\n     Im5 y * Ree x +\n     Im6 y * Im1 x +\n     Im7 y * Im4 x) -\n    Im5 x *\n    (Ree y * Im4 x + Im1 y * Im2 x - Im2 y * Im1 x - Im3 y * Im6 x +\n     Im4 y * Ree x +\n     Im5 y * Im7 x +\n     Im6 y * Im3 x -\n     Im7 y * Im5 x) -\n    Im6 x *\n    (Ree y * Im2 x - Im1 y * Im4 x + Im2 y * Ree x + Im3 y * Im5 x +\n     Im4 y * Im1 x -\n     Im5 y * Im3 x +\n     Im6 y * Im7 x -\n     Im7 y * Im6 x) +\n    Im7 x *\n    (Ree y * Ree x - Im1 y * Im1 x - Im2 y * Im2 x - Im3 y * Im3 x -\n     Im4 y * Im4 x -\n     Im5 y * Im5 x -\n     Im6 y * Im6 x -\n     Im7 y * Im7 x)", "by algebra"], ["", "lemma octo_power_commutes: \"x ^ y * x = x * (x ^ y :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ y * x = x * x ^ y", "by (induction y) (simp_all add: octo_product_flexible)"], ["", "lemma octo_product_noncommutative: \"\\<not>(\\<forall>x y::octo. (x * y = y * x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x y. x * y = y * x)", "using inverse_1 left_inverse mult_not_zero octo.sel(8) octo_e4.sel(2)\n  octo_e4.sel(3)   octo_e4.sel(5)  octo_e5.sel(1) octo_e5.sel(2)\n  octo_e5.sel(3) octo_e5.sel(5) octo_e5.sel(6) octo_e5.sel(8) times_octo_def"], ["proof (prove)\nusing this:\n  inverse (1::?'a) = (1::?'a)\n  ?a \\<noteq> (0::?'a) \\<Longrightarrow> inverse ?a * ?a = (1::?'a)\n  ?a * ?b \\<noteq> (0::?'a) \\<Longrightarrow>\n  ?a \\<noteq> (0::?'a) \\<and> ?b \\<noteq> (0::?'a)\n  Im7 (Octo ?x1.0 ?x2.0 ?x3.0 ?x4.0 ?x5.0 ?x6.0 ?x7.0 ?x8.0) = ?x8.0\n  Im1 e4 = 0\n  Im2 e4 = 0\n  Im4 e4 = 1\n  Ree e5 = 0\n  Im1 e5 = 0\n  Im2 e5 = 0\n  Im4 e5 = 0\n  Im5 e5 = 1\n  Im7 e5 = 0\n  ?a * ?b =\n  (let t0 = Ree ?a * Ree ?b - Im1 ?a * Im1 ?b - Im2 ?a * Im2 ?b -\n            Im3 ?a * Im3 ?b -\n            Im4 ?a * Im4 ?b -\n            Im5 ?a * Im5 ?b -\n            Im6 ?a * Im6 ?b -\n            Im7 ?a * Im7 ?b;\n       t1 = Ree ?a * Im1 ?b + Im1 ?a * Ree ?b + Im2 ?a * Im4 ?b +\n            Im3 ?a * Im7 ?b -\n            Im4 ?a * Im2 ?b +\n            Im5 ?a * Im6 ?b -\n            Im6 ?a * Im5 ?b -\n            Im7 ?a * Im3 ?b;\n       t2 = Ree ?a * Im2 ?b - Im1 ?a * Im4 ?b + Im2 ?a * Ree ?b +\n            Im3 ?a * Im5 ?b +\n            Im4 ?a * Im1 ?b -\n            Im5 ?a * Im3 ?b +\n            Im6 ?a * Im7 ?b -\n            Im7 ?a * Im6 ?b;\n       t3 = Ree ?a * Im3 ?b - Im1 ?a * Im7 ?b - Im2 ?a * Im5 ?b +\n            Im3 ?a * Ree ?b +\n            Im4 ?a * Im6 ?b +\n            Im5 ?a * Im2 ?b -\n            Im6 ?a * Im4 ?b +\n            Im7 ?a * Im1 ?b;\n       t4 = Ree ?a * Im4 ?b + Im1 ?a * Im2 ?b - Im2 ?a * Im1 ?b -\n            Im3 ?a * Im6 ?b +\n            Im4 ?a * Ree ?b +\n            Im5 ?a * Im7 ?b +\n            Im6 ?a * Im3 ?b -\n            Im7 ?a * Im5 ?b;\n       t5 = Ree ?a * Im5 ?b - Im1 ?a * Im6 ?b + Im2 ?a * Im3 ?b -\n            Im3 ?a * Im2 ?b -\n            Im4 ?a * Im7 ?b +\n            Im5 ?a * Ree ?b +\n            Im6 ?a * Im1 ?b +\n            Im7 ?a * Im4 ?b;\n       t6 = Ree ?a * Im6 ?b + Im1 ?a * Im5 ?b - Im2 ?a * Im7 ?b +\n            Im3 ?a * Im4 ?b -\n            Im4 ?a * Im3 ?b -\n            Im5 ?a * Im1 ?b +\n            Im6 ?a * Ree ?b +\n            Im7 ?a * Im2 ?b\n   in Let (Ree ?a * Im7 ?b + Im1 ?a * Im3 ?b + Im2 ?a * Im6 ?b -\n           Im3 ?a * Im1 ?b +\n           Im4 ?a * Im5 ?b -\n           Im5 ?a * Im4 ?b -\n           Im6 ?a * Im2 ?b +\n           Im7 ?a * Ree ?b)\n       (Octo t0 t1 t2 t3 t4 t5 t6))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x y. x * y = y * x)", "by smt"], ["", "lemma octo_product_nonassociative :\n  \"\\<not>(\\<forall> x y z::octo. x * (y * z) = (x * y) * z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x y z. x * (y * z) = x * y * z)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x y z. x * (y * z) = x * y * z)", "define x where \"x = Octo 1 0 0 0 1 0 0 0\""], ["proof (state)\nthis:\n  x = Octo 1 0 0 0 1 0 0 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x y z. x * (y * z) = x * y * z)", "define y where \"y = Octo 1 3 0 0 0 1 0 0\""], ["proof (state)\nthis:\n  y = Octo 1 3 0 0 0 1 0 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x y z. x * (y * z) = x * y * z)", "define z where \"z = Octo 0 1 0 1 1 1 0 0\""], ["proof (state)\nthis:\n  z = Octo 0 1 0 1 1 1 0 0\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x y z. x * (y * z) = x * y * z)", "have \"x * (y * z) \\<noteq> (x * y) * z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * (y * z) \\<noteq> x * y * z", "by (simp add: octo_eq_iff octo_mult_components x_def y_def z_def)"], ["proof (state)\nthis:\n  x * (y * z) \\<noteq> x * y * z\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x y z. x * (y * z) = x * y * z)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x * (y * z) \\<noteq> x * y * z\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>x y z. x * (y * z) = x * y * z)", "by blast"], ["proof (state)\nthis:\n  \\<not> (\\<forall>x y z. x * (y * z) = x * y * z)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Embedding of the Reals into the Octonions\\<close>"], ["", "definition octo_of_real :: \"real \\<Rightarrow>  octo\"\n  where \"octo_of_real r = scaleR r 1\""], ["", "definition octo_of_nat :: \"nat \\<Rightarrow>  octo\"\n  where \"octo_of_nat r = scaleR r 1\""], ["", "definition octo_of_int :: \"int \\<Rightarrow>  octo\"\n  where \"octo_of_int r = scaleR r 1\""], ["", "lemma octo_of_nat_sel [simp]:\n  \"Ree (octo_of_nat x) = of_nat x\" \"Im1 (octo_of_nat x) = 0\" \"Im2 (octo_of_nat x) = 0\"\n  \"Im3 (octo_of_nat x) = 0\" \"Im4 (octo_of_nat x) = 0\" \"Im5 (octo_of_nat x) = 0\"\n  \"Im6 (octo_of_nat x) = 0\" \"Im7 (octo_of_nat x) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Ree (octo_of_nat x) = real x &&& Im1 (octo_of_nat x) = 0) &&&\n     Im2 (octo_of_nat x) = 0 &&& Im3 (octo_of_nat x) = 0) &&&\n    (Im4 (octo_of_nat x) = 0 &&& Im5 (octo_of_nat x) = 0) &&&\n    Im6 (octo_of_nat x) = 0 &&& Im7 (octo_of_nat x) = 0", "by (simp_all add: octo_of_nat_def)"], ["", "lemma octo_of_real_sel [simp]:\n  \"Ree (octo_of_real x) = x\" \"Im1 (octo_of_real x) = 0\" \"Im2 (octo_of_real x) = 0\"\n  \"Im3 (octo_of_real x) = 0\" \"Im4 (octo_of_real x) = 0\" \"Im5 (octo_of_real x) = 0\"\n  \"Im6 (octo_of_real x) = 0\" \"Im7 (octo_of_real x) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Ree (octo_of_real x) = x &&& Im1 (octo_of_real x) = 0) &&&\n     Im2 (octo_of_real x) = 0 &&& Im3 (octo_of_real x) = 0) &&&\n    (Im4 (octo_of_real x) = 0 &&& Im5 (octo_of_real x) = 0) &&&\n    Im6 (octo_of_real x) = 0 &&& Im7 (octo_of_real x) = 0", "by (simp_all add: octo_of_real_def)"], ["", "lemma octo_of_int_sel [simp]:\n  \"Ree (octo_of_int x) = of_int x\" \"Im1 (octo_of_int x) = 0\" \"Im2 (octo_of_int x) = 0\"\n  \"Im3 (octo_of_int x) = 0\" \"Im4 (octo_of_int x) = 0\" \"Im5 (octo_of_int x) = 0\"\n  \"Im6 (octo_of_int x) = 0\" \"Im7 (octo_of_int x) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Ree (octo_of_int x) = real_of_int x &&& Im1 (octo_of_int x) = 0) &&&\n     Im2 (octo_of_int x) = 0 &&& Im3 (octo_of_int x) = 0) &&&\n    (Im4 (octo_of_int x) = 0 &&& Im5 (octo_of_int x) = 0) &&&\n    Im6 (octo_of_int x) = 0 &&& Im7 (octo_of_int x) = 0", "by (simp_all add: octo_of_int_def)"], ["", "lemma scaleR_conv_octo_of_real: \"scaleR r x = octo_of_real r * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r *\\<^sub>R x = octo_of_real r * x", "by (simp add: octo_eq_iff octo_mult_components octo_of_real_def)"], ["", "lemma octo_of_real_0 [simp]: \"octo_of_real 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real 0 = 0", "by (simp add: octo_of_real_def)"], ["", "lemma octo_of_real_1 [simp]: \"octo_of_real 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real 1 = 1", "by (simp add: octo_of_real_def)"], ["", "lemma octo_of_real_add [simp]: \"octo_of_real (x + y) = octo_of_real x + octo_of_real y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (x + y) = octo_of_real x + octo_of_real y", "by (simp add: octo_of_real_def scaleR_left_distrib)"], ["", "lemma octo_of_real_minus [simp]: \"octo_of_real (- x) = - octo_of_real x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (- x) = - octo_of_real x", "by (simp add: octo_of_real_def)"], ["", "lemma octo_of_real_diff [simp]: \"octo_of_real (x - y) = octo_of_real x - octo_of_real y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (x - y) = octo_of_real x - octo_of_real y", "by (simp add: octo_of_real_def scaleR_left_diff_distrib)"], ["", "lemma octo_of_real_mult [simp]: \"octo_of_real (x * y) = octo_of_real x * octo_of_real y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (x * y) = octo_of_real x * octo_of_real y", "using octo_of_real_def"], ["proof (prove)\nusing this:\n  octo_of_real ?r = ?r *\\<^sub>R 1\n\ngoal (1 subgoal):\n 1. octo_of_real (x * y) = octo_of_real x * octo_of_real y", "by (metis scaleR_conv_octo_of_real scaleR_scaleR)"], ["", "lemma octo_of_real_sum[simp]: \"octo_of_real (sum f s) = (\\<Sum>x\\<in>s. octo_of_real (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (sum f s) = (\\<Sum>x\\<in>s. octo_of_real (f x))", "by (induct s rule: infinite_finite_induct) auto"], ["", "lemma octo_of_real_power [simp]:\n  \"octo_of_real (x ^ y) = (octo_of_real x :: octo) ^ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (x ^ y) = octo_of_real x ^ y", "by (induct y)(simp_all)"], ["", "lemma octo_of_real_eq_iff [simp]: \"octo_of_real x = octo_of_real y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (octo_of_real x = octo_of_real y) = (x = y)", "using octo_of_real_def"], ["proof (prove)\nusing this:\n  octo_of_real ?r = ?r *\\<^sub>R 1\n\ngoal (1 subgoal):\n 1. (octo_of_real x = octo_of_real y) = (x = y)", "by (simp add: octo_of_real_def one_octo.code zero_octo.code)"], ["", "lemmas octo_of_real_eq_0_iff [simp] = octo_of_real_eq_iff [of _ 0, simplified]"], ["", "lemmas octo_of_real_eq_1_iff [simp] = octo_of_real_eq_iff [of _ 1, simplified]"], ["", "lemma minus_octo_of_real_eq_octo_of_real_iff [simp]: \"-octo_of_real x = octo_of_real y \\<longleftrightarrow> -x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- octo_of_real x = octo_of_real y) = (- x = y)", "using octo_of_real_eq_iff[of \"-x\" y]"], ["proof (prove)\nusing this:\n  (octo_of_real (- x) = octo_of_real y) = (- x = y)\n\ngoal (1 subgoal):\n 1. (- octo_of_real x = octo_of_real y) = (- x = y)", "by (simp only: octo_of_real_minus)"], ["", "lemma octo_of_real_eq_minus_of_real_iff [simp]: \"octo_of_real x = -octo_of_real y \\<longleftrightarrow> x = -y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (octo_of_real x = - octo_of_real y) = (x = - y)", "using octo_of_real_eq_iff[of x \"-y\"]"], ["proof (prove)\nusing this:\n  (octo_of_real x = octo_of_real (- y)) = (x = - y)\n\ngoal (1 subgoal):\n 1. (octo_of_real x = - octo_of_real y) = (x = - y)", "by (simp only: octo_of_real_minus)"], ["", "lemma octo_of_real_of_nat_eq [simp]: \"octo_of_real (of_nat x) = octo_of_nat x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (real x) = octo_of_nat x", "unfolding octo_of_real_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. real x *\\<^sub>R 1 = octo_of_nat x", "by (simp add: octo_of_nat_def)"], ["", "lemma octo_of_real_of_int_eq [simp]: \"octo_of_real (of_int z) = octo_of_int z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (real_of_int z) = octo_of_int z", "unfolding octo_of_real_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int z *\\<^sub>R 1 = octo_of_int z", "by (simp add: octo_of_int_def)"], ["", "lemma octo_of_int_of_nat:  \"octo_of_int (of_nat n) = octo_of_nat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_int (int n) = octo_of_nat n", "by (simp add: octo_eq_iff)"], ["", "lemma octo_of_nat_add [simp]: \"octo_of_nat (a + b) = octo_of_nat a + octo_of_nat b\"\n  and octo_of_nat_mult [simp]: \"octo_of_nat (a * b) = octo_of_nat a * octo_of_nat b\"\n  and octo_of_nat_diff [simp]: \"b \\<le> a \\<Longrightarrow> octo_of_nat (a - b) = octo_of_nat a - octo_of_nat b\"\n  and octo_of_nat_0 [simp]: \"octo_of_nat 0 = 0\"\n  and octo_of_nat_1 [simp]: \"octo_of_nat 1 = 1\"\n  and octo_of_nat_Suc_0 [simp]: \"octo_of_nat (Suc 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (octo_of_nat (a + b) = octo_of_nat a + octo_of_nat b &&&\n     octo_of_nat (a * b) = octo_of_nat a * octo_of_nat b &&&\n     (b \\<le> a \\<Longrightarrow>\n      octo_of_nat (a - b) = octo_of_nat a - octo_of_nat b)) &&&\n    octo_of_nat 0 = 0 &&& octo_of_nat 1 = 1 &&& octo_of_nat (Suc 0) = 1", "by (simp_all add: octo_eq_iff octo_mult_components)"], ["", "lemma octo_of_int_add [simp]: \"octo_of_int (a + b) = octo_of_int a + octo_of_int b\"\n  and octo_of_int_mult [simp]: \"octo_of_int (a * b) = octo_of_int a * octo_of_int b\"\n  and octo_of_int_diff [simp]: \"b \\<le> a \\<Longrightarrow> octo_of_int (a - b) = octo_of_int a - octo_of_int b\"\n  and octo_of_int_0 [simp]: \"octo_of_int 0 = 0\"\n  and octo_of_int_1 [simp]: \"octo_of_int 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (octo_of_int (a + b) = octo_of_int a + octo_of_int b &&&\n     octo_of_int (a * b) = octo_of_int a * octo_of_int b) &&&\n    (b \\<le> a \\<Longrightarrow>\n     octo_of_int (a - b) = octo_of_int a - octo_of_int b) &&&\n    octo_of_int 0 = 0 &&& octo_of_int 1 = 1", "by (simp_all add: octo_eq_iff octo_mult_components)"], ["", "instance octo :: numeral"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(octo, numeral_class)", ".."], ["", "lemma numeral_octo_conv_of_nat: \"numeral x = octo_of_nat (numeral x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. numeral x = octo_of_nat (numeral x)", "proof (induction x)"], ["proof (state)\ngoal (3 subgoals):\n 1. Numeral1 = octo_of_nat Numeral1\n 2. \\<And>x.\n       numeral x = octo_of_nat (numeral x) \\<Longrightarrow>\n       numeral (num.Bit0 x) = octo_of_nat (numeral (num.Bit0 x))\n 3. \\<And>x.\n       numeral x = octo_of_nat (numeral x) \\<Longrightarrow>\n       numeral (num.Bit1 x) = octo_of_nat (numeral (num.Bit1 x))", "case(Bit0 x)"], ["proof (state)\nthis:\n  numeral x = octo_of_nat (numeral x)\n\ngoal (3 subgoals):\n 1. Numeral1 = octo_of_nat Numeral1\n 2. \\<And>x.\n       numeral x = octo_of_nat (numeral x) \\<Longrightarrow>\n       numeral (num.Bit0 x) = octo_of_nat (numeral (num.Bit0 x))\n 3. \\<And>x.\n       numeral x = octo_of_nat (numeral x) \\<Longrightarrow>\n       numeral (num.Bit1 x) = octo_of_nat (numeral (num.Bit1 x))", "have \"numeral x+ numeral x = octo_of_nat(numeral x+ numeral x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. numeral x + numeral x = octo_of_nat (numeral x + numeral x)", "unfolding Bit0.IH octo_of_nat_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_nat (numeral x) + octo_of_nat (numeral x) =\n    octo_of_nat (numeral x) + octo_of_nat (numeral x)", ".."], ["proof (state)\nthis:\n  numeral x + numeral x = octo_of_nat (numeral x + numeral x)\n\ngoal (3 subgoals):\n 1. Numeral1 = octo_of_nat Numeral1\n 2. \\<And>x.\n       numeral x = octo_of_nat (numeral x) \\<Longrightarrow>\n       numeral (num.Bit0 x) = octo_of_nat (numeral (num.Bit0 x))\n 3. \\<And>x.\n       numeral x = octo_of_nat (numeral x) \\<Longrightarrow>\n       numeral (num.Bit1 x) = octo_of_nat (numeral (num.Bit1 x))", "thus ?case"], ["proof (prove)\nusing this:\n  numeral x + numeral x = octo_of_nat (numeral x + numeral x)\n\ngoal (1 subgoal):\n 1. numeral (num.Bit0 x) = octo_of_nat (numeral (num.Bit0 x))", "by (simp add: numeral_Bit0)"], ["proof (state)\nthis:\n  numeral (num.Bit0 x) = octo_of_nat (numeral (num.Bit0 x))\n\ngoal (2 subgoals):\n 1. Numeral1 = octo_of_nat Numeral1\n 2. \\<And>x.\n       numeral x = octo_of_nat (numeral x) \\<Longrightarrow>\n       numeral (num.Bit1 x) = octo_of_nat (numeral (num.Bit1 x))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. Numeral1 = octo_of_nat Numeral1\n 2. \\<And>x.\n       numeral x = octo_of_nat (numeral x) \\<Longrightarrow>\n       numeral (num.Bit1 x) = octo_of_nat (numeral (num.Bit1 x))", "case(Bit1 x)"], ["proof (state)\nthis:\n  numeral x = octo_of_nat (numeral x)\n\ngoal (2 subgoals):\n 1. Numeral1 = octo_of_nat Numeral1\n 2. \\<And>x.\n       numeral x = octo_of_nat (numeral x) \\<Longrightarrow>\n       numeral (num.Bit1 x) = octo_of_nat (numeral (num.Bit1 x))", "have \"numeral x+ numeral x + numeral num.One=\nocto_of_nat (numeral x + numeral x + numeral num.One)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. numeral x + numeral x + Numeral1 =\n    octo_of_nat (numeral x + numeral x + Numeral1)", "unfolding Bit1.IH octo_of_nat_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_nat (numeral x) + octo_of_nat (numeral x) + Numeral1 =\n    octo_of_nat (numeral x) + octo_of_nat (numeral x) + octo_of_nat Numeral1", "by simp"], ["proof (state)\nthis:\n  numeral x + numeral x + Numeral1 =\n  octo_of_nat (numeral x + numeral x + Numeral1)\n\ngoal (2 subgoals):\n 1. Numeral1 = octo_of_nat Numeral1\n 2. \\<And>x.\n       numeral x = octo_of_nat (numeral x) \\<Longrightarrow>\n       numeral (num.Bit1 x) = octo_of_nat (numeral (num.Bit1 x))", "thus ?case"], ["proof (prove)\nusing this:\n  numeral x + numeral x + Numeral1 =\n  octo_of_nat (numeral x + numeral x + Numeral1)\n\ngoal (1 subgoal):\n 1. numeral (num.Bit1 x) = octo_of_nat (numeral (num.Bit1 x))", "by (simp add: numeral_Bit1)"], ["proof (state)\nthis:\n  numeral (num.Bit1 x) = octo_of_nat (numeral (num.Bit1 x))\n\ngoal (1 subgoal):\n 1. Numeral1 = octo_of_nat Numeral1", "qed auto"], ["", "lemma numeral_octo_sel [simp]:\n  \"Ree (numeral n) = numeral n\" \"Im1 (numeral n) = 0\" \"Im2 (numeral n) = 0\"\n  \"Im3 (numeral n) = 0\" \"Im4 (numeral n) = 0\" \"Im5 (numeral n) = 0\"\n  \"Im6 (numeral n) = 0\" \"Im7 (numeral n) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Ree (numeral n) = numeral n &&& Im1 (numeral n) = 0) &&&\n     Im2 (numeral n) = 0 &&& Im3 (numeral n) = 0) &&&\n    (Im4 (numeral n) = 0 &&& Im5 (numeral n) = 0) &&&\n    Im6 (numeral n) = 0 &&& Im7 (numeral n) = 0", "by (simp_all add: numeral_octo_conv_of_nat)"], ["", "lemma octo_of_real_numeral [simp]: \"octo_of_real (numeral w) = numeral w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (numeral w) = numeral w", "by (simp add: numeral_octo_conv_of_nat octo_of_real_def octo_of_nat_def)"], ["", "lemma octo_of_real_neg_numeral [simp]: \"octo_of_real (- numeral w) = - numeral w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (- numeral w) = - numeral w", "by simp"], ["", "lemma octo_of_real_times_commute: \"octo_of_real r * q = q * octo_of_real r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real r * q = q * octo_of_real r", "using octo_of_real_def times_octo_def"], ["proof (prove)\nusing this:\n  octo_of_real ?r = ?r *\\<^sub>R 1\n  ?a * ?b =\n  (let t0 = Ree ?a * Ree ?b - Im1 ?a * Im1 ?b - Im2 ?a * Im2 ?b -\n            Im3 ?a * Im3 ?b -\n            Im4 ?a * Im4 ?b -\n            Im5 ?a * Im5 ?b -\n            Im6 ?a * Im6 ?b -\n            Im7 ?a * Im7 ?b;\n       t1 = Ree ?a * Im1 ?b + Im1 ?a * Ree ?b + Im2 ?a * Im4 ?b +\n            Im3 ?a * Im7 ?b -\n            Im4 ?a * Im2 ?b +\n            Im5 ?a * Im6 ?b -\n            Im6 ?a * Im5 ?b -\n            Im7 ?a * Im3 ?b;\n       t2 = Ree ?a * Im2 ?b - Im1 ?a * Im4 ?b + Im2 ?a * Ree ?b +\n            Im3 ?a * Im5 ?b +\n            Im4 ?a * Im1 ?b -\n            Im5 ?a * Im3 ?b +\n            Im6 ?a * Im7 ?b -\n            Im7 ?a * Im6 ?b;\n       t3 = Ree ?a * Im3 ?b - Im1 ?a * Im7 ?b - Im2 ?a * Im5 ?b +\n            Im3 ?a * Ree ?b +\n            Im4 ?a * Im6 ?b +\n            Im5 ?a * Im2 ?b -\n            Im6 ?a * Im4 ?b +\n            Im7 ?a * Im1 ?b;\n       t4 = Ree ?a * Im4 ?b + Im1 ?a * Im2 ?b - Im2 ?a * Im1 ?b -\n            Im3 ?a * Im6 ?b +\n            Im4 ?a * Ree ?b +\n            Im5 ?a * Im7 ?b +\n            Im6 ?a * Im3 ?b -\n            Im7 ?a * Im5 ?b;\n       t5 = Ree ?a * Im5 ?b - Im1 ?a * Im6 ?b + Im2 ?a * Im3 ?b -\n            Im3 ?a * Im2 ?b -\n            Im4 ?a * Im7 ?b +\n            Im5 ?a * Ree ?b +\n            Im6 ?a * Im1 ?b +\n            Im7 ?a * Im4 ?b;\n       t6 = Ree ?a * Im6 ?b + Im1 ?a * Im5 ?b - Im2 ?a * Im7 ?b +\n            Im3 ?a * Im4 ?b -\n            Im4 ?a * Im3 ?b -\n            Im5 ?a * Im1 ?b +\n            Im6 ?a * Ree ?b +\n            Im7 ?a * Im2 ?b\n   in Let (Ree ?a * Im7 ?b + Im1 ?a * Im3 ?b + Im2 ?a * Im6 ?b -\n           Im3 ?a * Im1 ?b +\n           Im4 ?a * Im5 ?b -\n           Im5 ?a * Im4 ?b -\n           Im6 ?a * Im2 ?b +\n           Im7 ?a * Ree ?b)\n       (Octo t0 t1 t2 t3 t4 t5 t6))\n\ngoal (1 subgoal):\n 1. octo_of_real r * q = q * octo_of_real r", "by simp"], ["", "lemma octo_of_real_times_conv_scaleR: \"octo_of_real x * y = scaleR x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real x * y = x *\\<^sub>R y", "by (simp add: octo_eq_iff octo_mult_components)"], ["", "lemma octo_mult_scaleR_left: \"(r *\\<^sub>R x) * y = r *\\<^sub>R (x * y :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r *\\<^sub>R x * y = r *\\<^sub>R (x * y)", "by (simp add: octo_eq_iff octo_mult_components algebra_simps)"], ["", "lemma octo_mult_scaleR_right: \"x * (r *\\<^sub>R y) = r *\\<^sub>R (x * y :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * r *\\<^sub>R y = r *\\<^sub>R (x * y)", "by (simp add: octo_eq_iff octo_mult_components algebra_simps)"], ["", "lemma scaleR_octo_of_real [simp]: \"scaleR r (octo_of_real s) = octo_of_real (r * s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r *\\<^sub>R octo_of_real s = octo_of_real (r * s)", "by (simp add: octo_of_real_def)"], ["", "lemma octo_of_real_times_left_commute: \"octo_of_real r * (x * q) = x * (octo_of_real r * q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real r * (x * q) = x * (octo_of_real r * q)", "unfolding octo_of_real_times_conv_scaleR"], ["proof (prove)\ngoal (1 subgoal):\n 1. r *\\<^sub>R (x * q) = x * r *\\<^sub>R q", "by (simp add: octo_mult_scaleR_right)"], ["", "lemma nonzero_octo_of_real_inverse:\n  \"x \\<noteq> 0 \\<Longrightarrow> octo_of_real (inverse x) = inverse (octo_of_real x :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow>\n    octo_of_real (inverse x) = inverse (octo_of_real x)", "by (simp add: octo_eq_iff power2_eq_square divide_simps)"], ["", "lemma octo_of_real_inverse [simp]:\n  \"octo_of_real (inverse x) = inverse (octo_of_real x )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (inverse x) = inverse (octo_of_real x)", "by (simp add: octo_eq_iff power2_eq_square divide_simps)"], ["", "lemma nonzero_octo_of_real_divide:\n  \"y \\<noteq> 0 \\<Longrightarrow> octo_of_real (x / y) = (octo_of_real x / octo_of_real y ::octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> 0 \\<Longrightarrow>\n    octo_of_real (x / y) = octo_of_real x / octo_of_real y", "by (simp add: divide_inverse divide_octo_def)"], ["", "lemma octo_of_real_divide [simp]:\n  \"octo_of_real (x / y) = (octo_of_real x / octo_of_real y :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (x / y) = octo_of_real x / octo_of_real y", "using divide_inverse divide_octo_def octo_of_real_def octo_of_real_inverse"], ["proof (prove)\nusing this:\n  ?a / ?b = ?a * inverse ?b\n  ?x / ?y = ?x * inverse ?y\n  octo_of_real ?r = ?r *\\<^sub>R 1\n  octo_of_real (inverse ?x) = inverse (octo_of_real ?x)\n\ngoal (1 subgoal):\n 1. octo_of_real (x / y) = octo_of_real x / octo_of_real y", "by (metis octo_of_real_mult)"], ["", "lemma octo_of_real_inverse_collapse [simp]:\n  assumes \"c \\<noteq> 0\"\n  shows   \"octo_of_real c * octo_of_real (inverse c) = 1\"\n          \"octo_of_real (inverse c) * octo_of_real c = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real c * octo_of_real (inverse c) = 1 &&&\n    octo_of_real (inverse c) * octo_of_real c = 1", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. octo_of_real c * octo_of_real (inverse c) = 1 &&&\n    octo_of_real (inverse c) * octo_of_real c = 1", "by (simp_all add: octo_eq_iff octo_mult_components power2_eq_square)"], ["", "lemma octo_divide_numeral:\n  fixes x::octo shows \"x / numeral y = x /\\<^sub>R numeral y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x / numeral y = x /\\<^sub>R numeral y", "using octo_of_real_times_commute[of \"inverse (numeral y)\"]"], ["proof (prove)\nusing this:\n  octo_of_real (inverse (numeral y)) * ?q =\n  ?q * octo_of_real (inverse (numeral y))\n\ngoal (1 subgoal):\n 1. x / numeral y = x /\\<^sub>R numeral y", "by (simp add: scaleR_conv_octo_of_real divide_octo_def flip: octo_of_real_numeral)"], ["", "lemma octo_divide_numeral_sel [simp]:\n  \"Ree (x / numeral w) = Ree x / numeral w\"\n  \"Im1 (x / numeral w) = Im1 x / numeral w\"\n  \"Im2 (x / numeral w) = Im2 x / numeral w\"\n  \"Im3 (x / numeral w) = Im3 x / numeral w\"\n  \"Im4 (x / numeral w) = Im4 x / numeral w\"\n  \"Im5 (x / numeral w) = Im5 x / numeral w\"\n  \"Im6 (x / numeral w) = Im6 x / numeral w\"\n  \"Im7 (x / numeral w) = Im7 x / numeral w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Ree (x / numeral w) = Ree x / numeral w &&&\n      Im1 (x / numeral w) = Im1 x / numeral w) &&&\n     Im2 (x / numeral w) = Im2 x / numeral w &&&\n     Im3 (x / numeral w) = Im3 x / numeral w) &&&\n    (Im4 (x / numeral w) = Im4 x / numeral w &&&\n     Im5 (x / numeral w) = Im5 x / numeral w) &&&\n    Im6 (x / numeral w) = Im6 x / numeral w &&&\n    Im7 (x / numeral w) = Im7 x / numeral w", "unfolding octo_divide_numeral"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Ree (x /\\<^sub>R numeral w) = Ree x / numeral w &&&\n      Im1 (x /\\<^sub>R numeral w) = Im1 x / numeral w) &&&\n     Im2 (x /\\<^sub>R numeral w) = Im2 x / numeral w &&&\n     Im3 (x /\\<^sub>R numeral w) = Im3 x / numeral w) &&&\n    (Im4 (x /\\<^sub>R numeral w) = Im4 x / numeral w &&&\n     Im5 (x /\\<^sub>R numeral w) = Im5 x / numeral w) &&&\n    Im6 (x /\\<^sub>R numeral w) = Im6 x / numeral w &&&\n    Im7 (x /\\<^sub>R numeral w) = Im7 x / numeral w", "by simp_all"], ["", "lemma octo_norm_units [simp]:\n  \"norm octo_e1 = 1\" \"norm (e2::octo) = 1\" \"norm (e3::octo) = 1\"\n  \"norm (e4::octo) = 1 \"  \"norm (e5::octo) = 1\"   \"norm (e6::octo) = 1\" \"norm (e7::octo) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (norm e1 = 1 &&& norm e2 = 1 &&& norm e3 = 1) &&&\n    (norm e4 = 1 &&& norm e5 = 1) &&& norm e6 = 1 &&& norm e7 = 1", "by (auto simp: norm_octo_def)"], ["", "lemma e1_nz [simp]: \"e1 \\<noteq> 0\"\n  and e2_nz [simp]: \"e2 \\<noteq> 0\"\n  and e3_nz [simp]: \"e3 \\<noteq> 0\"\n  and e4_nz [simp]: \"e4 \\<noteq> 0\"\n  and e5_nz [simp]: \"e5 \\<noteq> 0\"\n  and e6_nz [simp]: \"e6 \\<noteq> 0\"\n  and e7_nz [simp]: \"e7 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (e1 \\<noteq> 0 &&& e2 \\<noteq> 0 &&& e3 \\<noteq> 0) &&&\n    (e4 \\<noteq> 0 &&& e5 \\<noteq> 0) &&& e6 \\<noteq> 0 &&& e7 \\<noteq> 0", "by (simp_all add: octo_eq_iff)"], ["", "subsection \\<open>\"Expansion\" into the traditional notation\\<close>"], ["", "lemma octo_unfold:\n   \"q = (Ree q) *\\<^sub>R e0 + (Im1 q) *\\<^sub>R e1 + (Im2 q) *\\<^sub>R e2 + (Im3 q) *\\<^sub>R e3\n      + (Im4 q) *\\<^sub>R e4 + (Im5 q) *\\<^sub>R e5 + (Im6 q) *\\<^sub>R e6 + (Im7 q) *\\<^sub>R  e7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q =\n    Ree q *\\<^sub>R e0 + Im1 q *\\<^sub>R e1 + Im2 q *\\<^sub>R e2 +\n    Im3 q *\\<^sub>R e3 +\n    Im4 q *\\<^sub>R e4 +\n    Im5 q *\\<^sub>R e5 +\n    Im6 q *\\<^sub>R e6 +\n    Im7 q *\\<^sub>R e7", "by (simp add: octo_eq_iff)"], ["", "lemma octo_trad: \"Octo x y z w u v q g =\n     x *\\<^sub>R e0 + y *\\<^sub>R e1 +  z *\\<^sub>R e2  +  w *\\<^sub>R e3  +  u *\\<^sub>R e4 +  v *\\<^sub>R e5 +  q *\\<^sub>R e6  +  g*\\<^sub>R e7 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octo x y z w u v q g =\n    x *\\<^sub>R e0 + y *\\<^sub>R e1 + z *\\<^sub>R e2 + w *\\<^sub>R e3 +\n    u *\\<^sub>R e4 +\n    v *\\<^sub>R e5 +\n    q *\\<^sub>R e6 +\n    g *\\<^sub>R e7", "by (simp add: octo_eq_iff)"], ["", "lemma octo_of_real_eq_Octo: \"octo_of_real a = Octo a 0 0 0 0 0 0 0 \""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real a = Octo a 0 0 0 0 0 0 0", "by (simp add: octo_eq_iff)"], ["", "lemma e1_squared [simp]: \"e1 ^ 2 = -1\"\n  and e2_squared [simp]: \"e2 ^ 2 = -1\"\n  and e3_squared [simp]: \"e3 ^ 2 = -1\"\n  and e4_squared [simp]: \"e4 ^ 2 = -1\"\n  and e5_squared [simp]: \"e5 ^ 2 = -1\"\n  and e6_squared [simp]: \"e6 ^ 2 = -1\"\n  and e7_squared [simp]: \"e7 ^ 2 = -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (e1\\<^sup>2 = - 1 &&& e2\\<^sup>2 = - 1 &&& e3\\<^sup>2 = - 1) &&&\n    (e4\\<^sup>2 = - 1 &&& e5\\<^sup>2 = - 1) &&&\n    e6\\<^sup>2 = - 1 &&& e7\\<^sup>2 = - 1", "by (simp_all add: octo_eq_iff power2_eq_square_octo octo_mult_components)"], ["", "lemma inverse_e1 [simp]: \"inverse e1 = -e1\"\n  and inverse_e2 [simp]: \"inverse e2 = -e2\"\n  and inverse_e3 [simp]: \"inverse e3 = -e3\"\n  and inverse_e4 [simp]: \"inverse e4 = -e4\"\n  and inverse_e5 [simp]: \"inverse e5 = -e5\"\n  and inverse_e6 [simp]: \"inverse e6 = -e6\"\n  and inverse_e7 [simp]: \"inverse e7 = -e7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inverse e1 = - e1 &&& inverse e2 = - e2 &&& inverse e3 = - e3) &&&\n    (inverse e4 = - e4 &&& inverse e5 = - e5) &&&\n    inverse e6 = - e6 &&& inverse e7 = - e7", "by (simp_all add: octo_eq_iff)"], ["", "subsection \\<open>Conjugate of an octonion and related properties.\\<close>"], ["", "primcorec cnj :: \"octo \\<Rightarrow> octo\"\n  where\n    \"Ree (cnj z) = Ree z\"\n  | \"Im1 (cnj z) = - Im1 z\"\n  | \"Im2 (cnj z) = - Im2 z\"\n  | \"Im3 (cnj z) = - Im3 z\"\n  | \"Im4 (cnj z) = - Im4 z\"\n  | \"Im5 (cnj z) = - Im5 z\"\n  | \"Im6 (cnj z) = - Im6 z\"\n  | \"Im7 (cnj z) = - Im7 z\""], ["", "lemma cnj_cancel_iff [simp]: \"cnj x = cnj y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Octonions.cnj x = Octonions.cnj y) = (x = y)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Octonions.cnj x = Octonions.cnj y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> Octonions.cnj x = Octonions.cnj y", "show \"cnj x = cnj y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj x = Octonions.cnj y \\<Longrightarrow> x = y", "by (simp add: octo_eq_iff)"], ["proof (state)\nthis:\n  Octonions.cnj x = Octonions.cnj y \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> Octonions.cnj x = Octonions.cnj y", "qed auto"], ["", "lemma cnj_cnj [simp]:\n   \"cnj(cnj q) = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (Octonions.cnj q) = q", "by (simp add: octo_eq_iff)"], ["", "lemma cnj_of_real [simp]: \"cnj(octo_of_real x) = octo_of_real x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (octo_of_real x) = octo_of_real x", "using  octo_eq_iff"], ["proof (prove)\nusing this:\n  (?x = ?y) =\n  (Ree ?x = Ree ?y \\<and>\n   Im1 ?x = Im1 ?y \\<and>\n   Im2 ?x = Im2 ?y \\<and>\n   Im3 ?x = Im3 ?y \\<and>\n   Im4 ?x = Im4 ?y \\<and>\n   Im5 ?x = Im5 ?y \\<and> Im6 ?x = Im6 ?y \\<and> Im7 ?x = Im7 ?y)\n\ngoal (1 subgoal):\n 1. Octonions.cnj (octo_of_real x) = octo_of_real x", "by (simp add: octo_of_real_eq_Octo)"], ["", "lemma cnj_zero [simp]: \"cnj 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj 0 = 0", "by (simp add: octo_eq_iff)"], ["", "lemma cnj_zero_iff [iff]: \"cnj z = 0 \\<longleftrightarrow> z = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Octonions.cnj z = 0) = (z = 0)", "using cnj_cnj"], ["proof (prove)\nusing this:\n  Octonions.cnj (Octonions.cnj ?q) = ?q\n\ngoal (1 subgoal):\n 1. (Octonions.cnj z = 0) = (z = 0)", "by (metis cnj_zero)"], ["", "lemma cnj_one [simp]: \"cnj 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj 1 = 1", "by (simp add: octo_eq_iff)"], ["", "lemma cnj_one_iff [simp]: \"cnj z = 1 \\<longleftrightarrow> z = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Octonions.cnj z = 1) = (z = 1)", "by (simp add: octo_eq_iff)"], ["", "lemma octo_norm_cnj [simp]: \"norm(cnj q) = norm q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (Octonions.cnj q) = norm q", "by (simp add: norm_octo_def)"], ["", "lemma cnj_add [simp]: \"cnj (x + y) = cnj x + cnj y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (x + y) = Octonions.cnj x + Octonions.cnj y", "using  octo_eq_iff inner_real_def of_real_0 of_real_inner_1"], ["proof (prove)\nusing this:\n  (?x = ?y) =\n  (Ree ?x = Ree ?y \\<and>\n   Im1 ?x = Im1 ?y \\<and>\n   Im2 ?x = Im2 ?y \\<and>\n   Im3 ?x = Im3 ?y \\<and>\n   Im4 ?x = Im4 ?y \\<and>\n   Im5 ?x = Im5 ?y \\<and> Im6 ?x = Im6 ?y \\<and> Im7 ?x = Im7 ?y)\n  (\\<bullet>) = (*)\n  of_real 0 = (0::?'a)\n  of_real ?x \\<bullet> (1::?'a) = ?x\n\ngoal (1 subgoal):\n 1. Octonions.cnj (x + y) = Octonions.cnj x + Octonions.cnj y", "by simp"], ["", "lemma cnj_sum [simp]: \"cnj (sum f S) = (\\<Sum>x\\<in>S. cnj (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (sum f S) = (\\<Sum>x\\<in>S. Octonions.cnj (f x))", "by (induct S rule: infinite_finite_induct) auto"], ["", "lemma cnj_diff [simp]: \"cnj (x - y) = cnj x - cnj y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (x - y) = Octonions.cnj x - Octonions.cnj y", "using  octo_eq_iff"], ["proof (prove)\nusing this:\n  (?x = ?y) =\n  (Ree ?x = Ree ?y \\<and>\n   Im1 ?x = Im1 ?y \\<and>\n   Im2 ?x = Im2 ?y \\<and>\n   Im3 ?x = Im3 ?y \\<and>\n   Im4 ?x = Im4 ?y \\<and>\n   Im5 ?x = Im5 ?y \\<and> Im6 ?x = Im6 ?y \\<and> Im7 ?x = Im7 ?y)\n\ngoal (1 subgoal):\n 1. Octonions.cnj (x - y) = Octonions.cnj x - Octonions.cnj y", "by (metis add.commute add_left_cancel cnj_add diff_add_cancel)"], ["", "lemma cnj_minus [simp]: \"cnj (- x) = - cnj x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (- x) = - Octonions.cnj x", "using  octo_eq_iff  cnj_cnj"], ["proof (prove)\nusing this:\n  (?x = ?y) =\n  (Ree ?x = Ree ?y \\<and>\n   Im1 ?x = Im1 ?y \\<and>\n   Im2 ?x = Im2 ?y \\<and>\n   Im3 ?x = Im3 ?y \\<and>\n   Im4 ?x = Im4 ?y \\<and>\n   Im5 ?x = Im5 ?y \\<and> Im6 ?x = Im6 ?y \\<and> Im7 ?x = Im7 ?y)\n  Octonions.cnj (Octonions.cnj ?q) = ?q\n\ngoal (1 subgoal):\n 1. Octonions.cnj (- x) = - Octonions.cnj x", "by auto"], ["", "lemma cnj_inverse [simp]: \"cnj (inverse x) = inverse (cnj x)\" for x y ::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (inverse x) = inverse (Octonions.cnj x)", "using  octo_eq_iff inner_real_def real_inner_1_right"], ["proof (prove)\nusing this:\n  (?x = ?y) =\n  (Ree ?x = Ree ?y \\<and>\n   Im1 ?x = Im1 ?y \\<and>\n   Im2 ?x = Im2 ?y \\<and>\n   Im3 ?x = Im3 ?y \\<and>\n   Im4 ?x = Im4 ?y \\<and>\n   Im5 ?x = Im5 ?y \\<and> Im6 ?x = Im6 ?y \\<and> Im7 ?x = Im7 ?y)\n  (\\<bullet>) = (*)\n  ?x \\<bullet> 1 = ?x\n\ngoal (1 subgoal):\n 1. Octonions.cnj (inverse x) = inverse (Octonions.cnj x)", "by auto"], ["", "lemma cnj_mult [simp]: \"cnj (x * y) = cnj y * cnj x\" for x y ::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (x * y) = Octonions.cnj y * Octonions.cnj x", "using octo_eq_iff  times_octo_def octo_mult_components cnj_cnj\n mult_not_zero nonzero_inverse_mult_distrib"], ["proof (prove)\nusing this:\n  (?x = ?y) =\n  (Ree ?x = Ree ?y \\<and>\n   Im1 ?x = Im1 ?y \\<and>\n   Im2 ?x = Im2 ?y \\<and>\n   Im3 ?x = Im3 ?y \\<and>\n   Im4 ?x = Im4 ?y \\<and>\n   Im5 ?x = Im5 ?y \\<and> Im6 ?x = Im6 ?y \\<and> Im7 ?x = Im7 ?y)\n  ?a * ?b =\n  (let t0 = Ree ?a * Ree ?b - Im1 ?a * Im1 ?b - Im2 ?a * Im2 ?b -\n            Im3 ?a * Im3 ?b -\n            Im4 ?a * Im4 ?b -\n            Im5 ?a * Im5 ?b -\n            Im6 ?a * Im6 ?b -\n            Im7 ?a * Im7 ?b;\n       t1 = Ree ?a * Im1 ?b + Im1 ?a * Ree ?b + Im2 ?a * Im4 ?b +\n            Im3 ?a * Im7 ?b -\n            Im4 ?a * Im2 ?b +\n            Im5 ?a * Im6 ?b -\n            Im6 ?a * Im5 ?b -\n            Im7 ?a * Im3 ?b;\n       t2 = Ree ?a * Im2 ?b - Im1 ?a * Im4 ?b + Im2 ?a * Ree ?b +\n            Im3 ?a * Im5 ?b +\n            Im4 ?a * Im1 ?b -\n            Im5 ?a * Im3 ?b +\n            Im6 ?a * Im7 ?b -\n            Im7 ?a * Im6 ?b;\n       t3 = Ree ?a * Im3 ?b - Im1 ?a * Im7 ?b - Im2 ?a * Im5 ?b +\n            Im3 ?a * Ree ?b +\n            Im4 ?a * Im6 ?b +\n            Im5 ?a * Im2 ?b -\n            Im6 ?a * Im4 ?b +\n            Im7 ?a * Im1 ?b;\n       t4 = Ree ?a * Im4 ?b + Im1 ?a * Im2 ?b - Im2 ?a * Im1 ?b -\n            Im3 ?a * Im6 ?b +\n            Im4 ?a * Ree ?b +\n            Im5 ?a * Im7 ?b +\n            Im6 ?a * Im3 ?b -\n            Im7 ?a * Im5 ?b;\n       t5 = Ree ?a * Im5 ?b - Im1 ?a * Im6 ?b + Im2 ?a * Im3 ?b -\n            Im3 ?a * Im2 ?b -\n            Im4 ?a * Im7 ?b +\n            Im5 ?a * Ree ?b +\n            Im6 ?a * Im1 ?b +\n            Im7 ?a * Im4 ?b;\n       t6 = Ree ?a * Im6 ?b + Im1 ?a * Im5 ?b - Im2 ?a * Im7 ?b +\n            Im3 ?a * Im4 ?b -\n            Im4 ?a * Im3 ?b -\n            Im5 ?a * Im1 ?b +\n            Im6 ?a * Ree ?b +\n            Im7 ?a * Im2 ?b\n   in Let (Ree ?a * Im7 ?b + Im1 ?a * Im3 ?b + Im2 ?a * Im6 ?b -\n           Im3 ?a * Im1 ?b +\n           Im4 ?a * Im5 ?b -\n           Im5 ?a * Im4 ?b -\n           Im6 ?a * Im2 ?b +\n           Im7 ?a * Ree ?b)\n       (Octo t0 t1 t2 t3 t4 t5 t6))\n  Ree (?x * ?y) =\n  Ree ?x * Ree ?y - Im1 ?x * Im1 ?y - Im2 ?x * Im2 ?y - Im3 ?x * Im3 ?y -\n  Im4 ?x * Im4 ?y -\n  Im5 ?x * Im5 ?y -\n  Im6 ?x * Im6 ?y -\n  Im7 ?x * Im7 ?y\n  Im1 (?x * ?y) =\n  Ree ?x * Im1 ?y + Im1 ?x * Ree ?y + Im2 ?x * Im4 ?y + Im3 ?x * Im7 ?y -\n  Im4 ?x * Im2 ?y +\n  Im5 ?x * Im6 ?y -\n  Im6 ?x * Im5 ?y -\n  Im7 ?x * Im3 ?y\n  Im2 (?x * ?y) =\n  Ree ?x * Im2 ?y - Im1 ?x * Im4 ?y + Im2 ?x * Ree ?y + Im3 ?x * Im5 ?y +\n  Im4 ?x * Im1 ?y -\n  Im5 ?x * Im3 ?y +\n  Im6 ?x * Im7 ?y -\n  Im7 ?x * Im6 ?y\n  Im3 (?x * ?y) =\n  Ree ?x * Im3 ?y - Im1 ?x * Im7 ?y - Im2 ?x * Im5 ?y + Im3 ?x * Ree ?y +\n  Im4 ?x * Im6 ?y +\n  Im5 ?x * Im2 ?y -\n  Im6 ?x * Im4 ?y +\n  Im7 ?x * Im1 ?y\n  Im4 (?x * ?y) =\n  Ree ?x * Im4 ?y + Im1 ?x * Im2 ?y - Im2 ?x * Im1 ?y - Im3 ?x * Im6 ?y +\n  Im4 ?x * Ree ?y +\n  Im5 ?x * Im7 ?y +\n  Im6 ?x * Im3 ?y -\n  Im7 ?x * Im5 ?y\n  Im5 (?x * ?y) =\n  Ree ?x * Im5 ?y - Im1 ?x * Im6 ?y + Im2 ?x * Im3 ?y - Im3 ?x * Im2 ?y -\n  Im4 ?x * Im7 ?y +\n  Im5 ?x * Ree ?y +\n  Im6 ?x * Im1 ?y +\n  Im7 ?x * Im4 ?y\n  Im6 (?x * ?y) =\n  Ree ?x * Im6 ?y + Im1 ?x * Im5 ?y - Im2 ?x * Im7 ?y + Im3 ?x * Im4 ?y -\n  Im4 ?x * Im3 ?y -\n  Im5 ?x * Im1 ?y +\n  Im6 ?x * Ree ?y +\n  Im7 ?x * Im2 ?y\n  Im7 (?x * ?y) =\n  Ree ?x * Im7 ?y + Im1 ?x * Im3 ?y + Im2 ?x * Im6 ?y - Im3 ?x * Im1 ?y +\n  Im4 ?x * Im5 ?y -\n  Im5 ?x * Im4 ?y -\n  Im6 ?x * Im2 ?y +\n  Im7 ?x * Ree ?y\n  Octonions.cnj (Octonions.cnj ?q) = ?q\n  ?a * ?b \\<noteq> (0::?'a) \\<Longrightarrow>\n  ?a \\<noteq> (0::?'a) \\<and> ?b \\<noteq> (0::?'a)\n  \\<lbrakk>?a \\<noteq> (0::?'a); ?b \\<noteq> (0::?'a)\\<rbrakk>\n  \\<Longrightarrow> inverse (?a * ?b) = inverse ?b * inverse ?a\n\ngoal (1 subgoal):\n 1. Octonions.cnj (x * y) = Octonions.cnj y * Octonions.cnj x", "by simp"], ["", "lemma cnj_divide [simp]: \"cnj (x / y) = (inverse (cnj y) ) *  cnj x\"\n  for x y ::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (x / y) = inverse (Octonions.cnj y) * Octonions.cnj x", "unfolding  divide_octo_def times_octo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj\n     (let t0 = Ree x * Ree (inverse y) - Im1 x * Im1 (inverse y) -\n               Im2 x * Im2 (inverse y) -\n               Im3 x * Im3 (inverse y) -\n               Im4 x * Im4 (inverse y) -\n               Im5 x * Im5 (inverse y) -\n               Im6 x * Im6 (inverse y) -\n               Im7 x * Im7 (inverse y);\n          t1 = Ree x * Im1 (inverse y) + Im1 x * Ree (inverse y) +\n               Im2 x * Im4 (inverse y) +\n               Im3 x * Im7 (inverse y) -\n               Im4 x * Im2 (inverse y) +\n               Im5 x * Im6 (inverse y) -\n               Im6 x * Im5 (inverse y) -\n               Im7 x * Im3 (inverse y);\n          t2 = Ree x * Im2 (inverse y) - Im1 x * Im4 (inverse y) +\n               Im2 x * Ree (inverse y) +\n               Im3 x * Im5 (inverse y) +\n               Im4 x * Im1 (inverse y) -\n               Im5 x * Im3 (inverse y) +\n               Im6 x * Im7 (inverse y) -\n               Im7 x * Im6 (inverse y);\n          t3 = Ree x * Im3 (inverse y) - Im1 x * Im7 (inverse y) -\n               Im2 x * Im5 (inverse y) +\n               Im3 x * Ree (inverse y) +\n               Im4 x * Im6 (inverse y) +\n               Im5 x * Im2 (inverse y) -\n               Im6 x * Im4 (inverse y) +\n               Im7 x * Im1 (inverse y);\n          t4 = Ree x * Im4 (inverse y) + Im1 x * Im2 (inverse y) -\n               Im2 x * Im1 (inverse y) -\n               Im3 x * Im6 (inverse y) +\n               Im4 x * Ree (inverse y) +\n               Im5 x * Im7 (inverse y) +\n               Im6 x * Im3 (inverse y) -\n               Im7 x * Im5 (inverse y);\n          t5 = Ree x * Im5 (inverse y) - Im1 x * Im6 (inverse y) +\n               Im2 x * Im3 (inverse y) -\n               Im3 x * Im2 (inverse y) -\n               Im4 x * Im7 (inverse y) +\n               Im5 x * Ree (inverse y) +\n               Im6 x * Im1 (inverse y) +\n               Im7 x * Im4 (inverse y);\n          t6 = Ree x * Im6 (inverse y) + Im1 x * Im5 (inverse y) -\n               Im2 x * Im7 (inverse y) +\n               Im3 x * Im4 (inverse y) -\n               Im4 x * Im3 (inverse y) -\n               Im5 x * Im1 (inverse y) +\n               Im6 x * Ree (inverse y) +\n               Im7 x * Im2 (inverse y)\n      in Let (Ree x * Im7 (inverse y) + Im1 x * Im3 (inverse y) +\n              Im2 x * Im6 (inverse y) -\n              Im3 x * Im1 (inverse y) +\n              Im4 x * Im5 (inverse y) -\n              Im5 x * Im4 (inverse y) -\n              Im6 x * Im2 (inverse y) +\n              Im7 x * Ree (inverse y))\n          (Octo t0 t1 t2 t3 t4 t5 t6)) =\n    (let t0 = Ree (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) -\n              Im1 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) -\n              Im2 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) -\n              Im3 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) -\n              Im4 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) -\n              Im5 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) -\n              Im6 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) -\n              Im7 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x);\n         t1 = Ree (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) +\n              Im1 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im2 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) +\n              Im3 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) -\n              Im4 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) +\n              Im5 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) -\n              Im6 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) -\n              Im7 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x);\n         t2 = Ree (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) -\n              Im1 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) +\n              Im2 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im3 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) +\n              Im4 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) -\n              Im5 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) +\n              Im6 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) -\n              Im7 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x);\n         t3 = Ree (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) -\n              Im1 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) -\n              Im2 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) +\n              Im3 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im4 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) +\n              Im5 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) -\n              Im6 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) +\n              Im7 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x);\n         t4 = Ree (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) +\n              Im1 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) -\n              Im2 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) -\n              Im3 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) +\n              Im4 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im5 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) +\n              Im6 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) -\n              Im7 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x);\n         t5 = Ree (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) -\n              Im1 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) +\n              Im2 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) -\n              Im3 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) -\n              Im4 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) +\n              Im5 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im6 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) +\n              Im7 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x);\n         t6 = Ree (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) +\n              Im1 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) -\n              Im2 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) +\n              Im3 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) -\n              Im4 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) -\n              Im5 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) +\n              Im6 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im7 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x)\n     in Let (Ree (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) +\n             Im1 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) +\n             Im2 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) -\n             Im3 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) +\n             Im4 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) -\n             Im5 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) -\n             Im6 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) +\n             Im7 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x))\n         (Octo t0 t1 t2 t3 t4 t5 t6))", "using cnj_inverse cnj_mult octo_mult_components"], ["proof (prove)\nusing this:\n  Octonions.cnj (inverse ?x) = inverse (Octonions.cnj ?x)\n  Octonions.cnj (?x * ?y) = Octonions.cnj ?y * Octonions.cnj ?x\n  Ree (?x * ?y) =\n  Ree ?x * Ree ?y - Im1 ?x * Im1 ?y - Im2 ?x * Im2 ?y - Im3 ?x * Im3 ?y -\n  Im4 ?x * Im4 ?y -\n  Im5 ?x * Im5 ?y -\n  Im6 ?x * Im6 ?y -\n  Im7 ?x * Im7 ?y\n  Im1 (?x * ?y) =\n  Ree ?x * Im1 ?y + Im1 ?x * Ree ?y + Im2 ?x * Im4 ?y + Im3 ?x * Im7 ?y -\n  Im4 ?x * Im2 ?y +\n  Im5 ?x * Im6 ?y -\n  Im6 ?x * Im5 ?y -\n  Im7 ?x * Im3 ?y\n  Im2 (?x * ?y) =\n  Ree ?x * Im2 ?y - Im1 ?x * Im4 ?y + Im2 ?x * Ree ?y + Im3 ?x * Im5 ?y +\n  Im4 ?x * Im1 ?y -\n  Im5 ?x * Im3 ?y +\n  Im6 ?x * Im7 ?y -\n  Im7 ?x * Im6 ?y\n  Im3 (?x * ?y) =\n  Ree ?x * Im3 ?y - Im1 ?x * Im7 ?y - Im2 ?x * Im5 ?y + Im3 ?x * Ree ?y +\n  Im4 ?x * Im6 ?y +\n  Im5 ?x * Im2 ?y -\n  Im6 ?x * Im4 ?y +\n  Im7 ?x * Im1 ?y\n  Im4 (?x * ?y) =\n  Ree ?x * Im4 ?y + Im1 ?x * Im2 ?y - Im2 ?x * Im1 ?y - Im3 ?x * Im6 ?y +\n  Im4 ?x * Ree ?y +\n  Im5 ?x * Im7 ?y +\n  Im6 ?x * Im3 ?y -\n  Im7 ?x * Im5 ?y\n  Im5 (?x * ?y) =\n  Ree ?x * Im5 ?y - Im1 ?x * Im6 ?y + Im2 ?x * Im3 ?y - Im3 ?x * Im2 ?y -\n  Im4 ?x * Im7 ?y +\n  Im5 ?x * Ree ?y +\n  Im6 ?x * Im1 ?y +\n  Im7 ?x * Im4 ?y\n  Im6 (?x * ?y) =\n  Ree ?x * Im6 ?y + Im1 ?x * Im5 ?y - Im2 ?x * Im7 ?y + Im3 ?x * Im4 ?y -\n  Im4 ?x * Im3 ?y -\n  Im5 ?x * Im1 ?y +\n  Im6 ?x * Ree ?y +\n  Im7 ?x * Im2 ?y\n  Im7 (?x * ?y) =\n  Ree ?x * Im7 ?y + Im1 ?x * Im3 ?y + Im2 ?x * Im6 ?y - Im3 ?x * Im1 ?y +\n  Im4 ?x * Im5 ?y -\n  Im5 ?x * Im4 ?y -\n  Im6 ?x * Im2 ?y +\n  Im7 ?x * Ree ?y\n\ngoal (1 subgoal):\n 1. Octonions.cnj\n     (let t0 = Ree x * Ree (inverse y) - Im1 x * Im1 (inverse y) -\n               Im2 x * Im2 (inverse y) -\n               Im3 x * Im3 (inverse y) -\n               Im4 x * Im4 (inverse y) -\n               Im5 x * Im5 (inverse y) -\n               Im6 x * Im6 (inverse y) -\n               Im7 x * Im7 (inverse y);\n          t1 = Ree x * Im1 (inverse y) + Im1 x * Ree (inverse y) +\n               Im2 x * Im4 (inverse y) +\n               Im3 x * Im7 (inverse y) -\n               Im4 x * Im2 (inverse y) +\n               Im5 x * Im6 (inverse y) -\n               Im6 x * Im5 (inverse y) -\n               Im7 x * Im3 (inverse y);\n          t2 = Ree x * Im2 (inverse y) - Im1 x * Im4 (inverse y) +\n               Im2 x * Ree (inverse y) +\n               Im3 x * Im5 (inverse y) +\n               Im4 x * Im1 (inverse y) -\n               Im5 x * Im3 (inverse y) +\n               Im6 x * Im7 (inverse y) -\n               Im7 x * Im6 (inverse y);\n          t3 = Ree x * Im3 (inverse y) - Im1 x * Im7 (inverse y) -\n               Im2 x * Im5 (inverse y) +\n               Im3 x * Ree (inverse y) +\n               Im4 x * Im6 (inverse y) +\n               Im5 x * Im2 (inverse y) -\n               Im6 x * Im4 (inverse y) +\n               Im7 x * Im1 (inverse y);\n          t4 = Ree x * Im4 (inverse y) + Im1 x * Im2 (inverse y) -\n               Im2 x * Im1 (inverse y) -\n               Im3 x * Im6 (inverse y) +\n               Im4 x * Ree (inverse y) +\n               Im5 x * Im7 (inverse y) +\n               Im6 x * Im3 (inverse y) -\n               Im7 x * Im5 (inverse y);\n          t5 = Ree x * Im5 (inverse y) - Im1 x * Im6 (inverse y) +\n               Im2 x * Im3 (inverse y) -\n               Im3 x * Im2 (inverse y) -\n               Im4 x * Im7 (inverse y) +\n               Im5 x * Ree (inverse y) +\n               Im6 x * Im1 (inverse y) +\n               Im7 x * Im4 (inverse y);\n          t6 = Ree x * Im6 (inverse y) + Im1 x * Im5 (inverse y) -\n               Im2 x * Im7 (inverse y) +\n               Im3 x * Im4 (inverse y) -\n               Im4 x * Im3 (inverse y) -\n               Im5 x * Im1 (inverse y) +\n               Im6 x * Ree (inverse y) +\n               Im7 x * Im2 (inverse y)\n      in Let (Ree x * Im7 (inverse y) + Im1 x * Im3 (inverse y) +\n              Im2 x * Im6 (inverse y) -\n              Im3 x * Im1 (inverse y) +\n              Im4 x * Im5 (inverse y) -\n              Im5 x * Im4 (inverse y) -\n              Im6 x * Im2 (inverse y) +\n              Im7 x * Ree (inverse y))\n          (Octo t0 t1 t2 t3 t4 t5 t6)) =\n    (let t0 = Ree (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) -\n              Im1 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) -\n              Im2 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) -\n              Im3 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) -\n              Im4 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) -\n              Im5 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) -\n              Im6 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) -\n              Im7 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x);\n         t1 = Ree (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) +\n              Im1 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im2 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) +\n              Im3 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) -\n              Im4 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) +\n              Im5 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) -\n              Im6 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) -\n              Im7 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x);\n         t2 = Ree (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) -\n              Im1 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) +\n              Im2 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im3 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) +\n              Im4 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) -\n              Im5 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) +\n              Im6 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) -\n              Im7 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x);\n         t3 = Ree (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) -\n              Im1 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) -\n              Im2 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) +\n              Im3 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im4 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) +\n              Im5 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) -\n              Im6 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) +\n              Im7 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x);\n         t4 = Ree (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) +\n              Im1 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) -\n              Im2 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) -\n              Im3 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) +\n              Im4 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im5 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) +\n              Im6 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) -\n              Im7 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x);\n         t5 = Ree (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) -\n              Im1 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) +\n              Im2 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) -\n              Im3 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) -\n              Im4 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) +\n              Im5 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im6 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) +\n              Im7 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x);\n         t6 = Ree (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) +\n              Im1 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) -\n              Im2 (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) +\n              Im3 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) -\n              Im4 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) -\n              Im5 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) +\n              Im6 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x) +\n              Im7 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x)\n     in Let (Ree (inverse (Octonions.cnj y)) * Im7 (Octonions.cnj x) +\n             Im1 (inverse (Octonions.cnj y)) * Im3 (Octonions.cnj x) +\n             Im2 (inverse (Octonions.cnj y)) * Im6 (Octonions.cnj x) -\n             Im3 (inverse (Octonions.cnj y)) * Im1 (Octonions.cnj x) +\n             Im4 (inverse (Octonions.cnj y)) * Im5 (Octonions.cnj x) -\n             Im5 (inverse (Octonions.cnj y)) * Im4 (Octonions.cnj x) -\n             Im6 (inverse (Octonions.cnj y)) * Im2 (Octonions.cnj x) +\n             Im7 (inverse (Octonions.cnj y)) * Ree (Octonions.cnj x))\n         (Octo t0 t1 t2 t3 t4 t5 t6))", "by (metis times_octo_def)"], ["", "lemma cnj_power [simp]: \"cnj (x ^ y) = (cnj x) ^ y\"  for x::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (x ^ y) = Octonions.cnj x ^ y", "by (induction y) (simp_all add: octo_power_commutes)"], ["", "lemma cnj_of_nat [simp]: \"cnj (octo_of_nat x) = octo_of_nat( x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (octo_of_nat x) = octo_of_nat x", "using cnj_of_real octo_of_real_of_nat_eq"], ["proof (prove)\nusing this:\n  Octonions.cnj (octo_of_real ?x) = octo_of_real ?x\n  octo_of_real (real ?x) = octo_of_nat ?x\n\ngoal (1 subgoal):\n 1. Octonions.cnj (octo_of_nat x) = octo_of_nat x", "by metis"], ["", "lemma cnj_of_int [simp]: \"cnj (octo_of_int x) = octo_of_nat( x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (octo_of_int (int x)) = octo_of_nat x", "using  octo_of_real_def  octo_of_real_of_int_eq  octo_of_int_def octo_of_nat_def\n   cnj_of_real"], ["proof (prove)\nusing this:\n  octo_of_real ?r = ?r *\\<^sub>R 1\n  octo_of_real (real_of_int ?z) = octo_of_int ?z\n  octo_of_int ?r = real_of_int ?r *\\<^sub>R 1\n  octo_of_nat ?r = real ?r *\\<^sub>R 1\n  Octonions.cnj (octo_of_real ?x) = octo_of_real ?x\n\ngoal (1 subgoal):\n 1. Octonions.cnj (octo_of_int (int x)) = octo_of_nat x", "by auto"], ["", "lemma cnj_numeral [simp]: \"cnj (numeral x) = numeral x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (numeral x) = numeral x", "by (simp add: numeral_octo_conv_of_nat)"], ["", "lemma cnj_neg_numeral [simp]: \"cnj (- numeral x) = - numeral x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (- numeral x) = - numeral x", "by (simp add: numeral_octo_conv_of_nat)"], ["", "lemma cnj_scaleR [simp]: \"cnj (scaleR r x) = scaleR r (cnj x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (r *\\<^sub>R x) = r *\\<^sub>R Octonions.cnj x", "using octo_eq_iff inner_real_def ln_one of_real_inner_1"], ["proof (prove)\nusing this:\n  (?x = ?y) =\n  (Ree ?x = Ree ?y \\<and>\n   Im1 ?x = Im1 ?y \\<and>\n   Im2 ?x = Im2 ?y \\<and>\n   Im3 ?x = Im3 ?y \\<and>\n   Im4 ?x = Im4 ?y \\<and>\n   Im5 ?x = Im5 ?y \\<and> Im6 ?x = Im6 ?y \\<and> Im7 ?x = Im7 ?y)\n  (\\<bullet>) = (*)\n  ln (1::?'a) = (0::?'a)\n  of_real ?x \\<bullet> (1::?'a) = ?x\n\ngoal (1 subgoal):\n 1. Octonions.cnj (r *\\<^sub>R x) = r *\\<^sub>R Octonions.cnj x", "by simp"], ["", "lemma cnj_units [simp]: \"cnj e1 = -e1\" \"cnj e2 = -e2\" \"cnj e3 = -e3\"\n \"cnj e4 = -e4\"   \"cnj e5 = -e5\"   \"cnj e6 = -e6\"  \"cnj e7 = -e7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Octonions.cnj e1 = - e1 &&&\n     Octonions.cnj e2 = - e2 &&& Octonions.cnj e3 = - e3) &&&\n    (Octonions.cnj e4 = - e4 &&& Octonions.cnj e5 = - e5) &&&\n    Octonions.cnj e6 = - e6 &&& Octonions.cnj e7 = - e7", "by (simp_all add: octo_eq_iff)"], ["", "lemma cnj_eq_of_real: \"cnj q = octo_of_real x \\<longleftrightarrow> q = octo_of_real x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Octonions.cnj q = octo_of_real x) = (q = octo_of_real x)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Octonions.cnj q = octo_of_real x \\<Longrightarrow> q = octo_of_real x\n 2. q = octo_of_real x \\<Longrightarrow> Octonions.cnj q = octo_of_real x", "show \"cnj q = octo_of_real x \\<Longrightarrow> q = octo_of_real x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj q = octo_of_real x \\<Longrightarrow> q = octo_of_real x", "by (metis cnj_of_real cnj_cnj)"], ["proof (state)\nthis:\n  Octonions.cnj q = octo_of_real x \\<Longrightarrow> q = octo_of_real x\n\ngoal (1 subgoal):\n 1. q = octo_of_real x \\<Longrightarrow> Octonions.cnj q = octo_of_real x", "qed auto"], ["", "lemma octo_trad_cnj : \"cnj q = (Ree q) *\\<^sub>R e0 - (Im1 q) *\\<^sub>R e1 - (Im2 q)*\\<^sub>R e2  - (Im3 q) *\\<^sub>R e3  - \n (Im4 q) *\\<^sub>R e4 -  (Im5 q) *\\<^sub>R e5 -  (Im6 q) *\\<^sub>R e6  -  (Im7 q)*\\<^sub>R e7 \" for q::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj q =\n    Ree q *\\<^sub>R e0 - Im1 q *\\<^sub>R e1 - Im2 q *\\<^sub>R e2 -\n    Im3 q *\\<^sub>R e3 -\n    Im4 q *\\<^sub>R e4 -\n    Im5 q *\\<^sub>R e5 -\n    Im6 q *\\<^sub>R e6 -\n    Im7 q *\\<^sub>R e7", "using cnj_cnj octo_unfold octo_trad cnj_def Octonions.cnj.code"], ["proof (prove)\nusing this:\n  Octonions.cnj (Octonions.cnj ?q) = ?q\n  ?q =\n  Ree ?q *\\<^sub>R e0 + Im1 ?q *\\<^sub>R e1 + Im2 ?q *\\<^sub>R e2 +\n  Im3 ?q *\\<^sub>R e3 +\n  Im4 ?q *\\<^sub>R e4 +\n  Im5 ?q *\\<^sub>R e5 +\n  Im6 ?q *\\<^sub>R e6 +\n  Im7 ?q *\\<^sub>R e7\n  Octo ?x ?y ?z ?w ?u ?v ?q ?g =\n  ?x *\\<^sub>R e0 + ?y *\\<^sub>R e1 + ?z *\\<^sub>R e2 + ?w *\\<^sub>R e3 +\n  ?u *\\<^sub>R e4 +\n  ?v *\\<^sub>R e5 +\n  ?q *\\<^sub>R e6 +\n  ?g *\\<^sub>R e7\n  Octonions.cnj \\<equiv>\n  corec_octo Ree (\\<lambda>z. - Im1 z) (\\<lambda>z. - Im2 z)\n   (\\<lambda>z. - Im3 z) (\\<lambda>z. - Im4 z) (\\<lambda>z. - Im5 z)\n   (\\<lambda>z. - Im6 z) (\\<lambda>z. - Im7 z)\n  Octonions.cnj ?z =\n  Octo (Ree ?z) (- Im1 ?z) (- Im2 ?z) (- Im3 ?z) (- Im4 ?z) (- Im5 ?z)\n   (- Im6 ?z) (- Im7 ?z)\n\ngoal (1 subgoal):\n 1. Octonions.cnj q =\n    Ree q *\\<^sub>R e0 - Im1 q *\\<^sub>R e1 - Im2 q *\\<^sub>R e2 -\n    Im3 q *\\<^sub>R e3 -\n    Im4 q *\\<^sub>R e4 -\n    Im5 q *\\<^sub>R e5 -\n    Im6 q *\\<^sub>R e6 -\n    Im7 q *\\<^sub>R e7", "by auto"], ["", "lemma octonion_conjugate_property:\n  \"cnj x = -(1/6) *\\<^sub>R (x + (e1 * x) *  e1  +  (e2 * x) * e2 +  (e3 * x) * e3 +\n     (e4 * x) * e4 + (e5 * x) * e5 +  ( e6 * x) * e6 + (e7 * x) * e7)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj x =\n    - (1 / 6) *\\<^sub>R\n    (x + e1 * x * e1 + e2 * x * e2 + e3 * x * e3 + e4 * x * e4 +\n     e5 * x * e5 +\n     e6 * x * e6 +\n     e7 * x * e7)", "by (simp add: octo_eq_iff octo_mult_components)"], ["", "lemma octo_add_cnj: \"q + cnj q = 2 *\\<^sub>R (Ree q) *\\<^sub>R e0\" \"cnj q + q = (2*\\<^sub>R (Ree q)*\\<^sub>R e0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q + Octonions.cnj q = 2 *\\<^sub>R Ree q *\\<^sub>R e0 &&&\n    Octonions.cnj q + q = 2 *\\<^sub>R Ree q *\\<^sub>R e0", "by (simp_all add: octo_eq_iff)"], ["", "lemma octo_add_cnj1: \"q + cnj q = octo_of_real (2*\\<^sub>R (Ree q))\" \n                     \"cnj q + q = octo_of_real (2*\\<^sub>R (Ree q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q + Octonions.cnj q = octo_of_real (2 *\\<^sub>R Ree q) &&&\n    Octonions.cnj q + q = octo_of_real (2 *\\<^sub>R Ree q)", "by (auto simp: octo_eq_iff octo_mult_components)"], ["", "lemma octo_subtract_cnj:\n  \"q - cnj q = 2 *\\<^sub>R (Im1 q *\\<^sub>R e1 + Im2 q *\\<^sub>R e2 + Im3 q *\\<^sub>R e3 + \n                     Im4 q *\\<^sub>R e4 + Im5 q *\\<^sub>R e5 + Im6 q*\\<^sub>R e6 + Im7 q *\\<^sub>R e7)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q - Octonions.cnj q =\n    2 *\\<^sub>R\n    (Im1 q *\\<^sub>R e1 + Im2 q *\\<^sub>R e2 + Im3 q *\\<^sub>R e3 +\n     Im4 q *\\<^sub>R e4 +\n     Im5 q *\\<^sub>R e5 +\n     Im6 q *\\<^sub>R e6 +\n     Im7 q *\\<^sub>R e7)", "by (simp add: octo_eq_iff)"], ["", "lemma octo_mult_cnj_commute: \"cnj x * x = x * cnj x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj x * x = x * Octonions.cnj x", "using times_octo_def"], ["proof (prove)\nusing this:\n  ?a * ?b =\n  (let t0 = Ree ?a * Ree ?b - Im1 ?a * Im1 ?b - Im2 ?a * Im2 ?b -\n            Im3 ?a * Im3 ?b -\n            Im4 ?a * Im4 ?b -\n            Im5 ?a * Im5 ?b -\n            Im6 ?a * Im6 ?b -\n            Im7 ?a * Im7 ?b;\n       t1 = Ree ?a * Im1 ?b + Im1 ?a * Ree ?b + Im2 ?a * Im4 ?b +\n            Im3 ?a * Im7 ?b -\n            Im4 ?a * Im2 ?b +\n            Im5 ?a * Im6 ?b -\n            Im6 ?a * Im5 ?b -\n            Im7 ?a * Im3 ?b;\n       t2 = Ree ?a * Im2 ?b - Im1 ?a * Im4 ?b + Im2 ?a * Ree ?b +\n            Im3 ?a * Im5 ?b +\n            Im4 ?a * Im1 ?b -\n            Im5 ?a * Im3 ?b +\n            Im6 ?a * Im7 ?b -\n            Im7 ?a * Im6 ?b;\n       t3 = Ree ?a * Im3 ?b - Im1 ?a * Im7 ?b - Im2 ?a * Im5 ?b +\n            Im3 ?a * Ree ?b +\n            Im4 ?a * Im6 ?b +\n            Im5 ?a * Im2 ?b -\n            Im6 ?a * Im4 ?b +\n            Im7 ?a * Im1 ?b;\n       t4 = Ree ?a * Im4 ?b + Im1 ?a * Im2 ?b - Im2 ?a * Im1 ?b -\n            Im3 ?a * Im6 ?b +\n            Im4 ?a * Ree ?b +\n            Im5 ?a * Im7 ?b +\n            Im6 ?a * Im3 ?b -\n            Im7 ?a * Im5 ?b;\n       t5 = Ree ?a * Im5 ?b - Im1 ?a * Im6 ?b + Im2 ?a * Im3 ?b -\n            Im3 ?a * Im2 ?b -\n            Im4 ?a * Im7 ?b +\n            Im5 ?a * Ree ?b +\n            Im6 ?a * Im1 ?b +\n            Im7 ?a * Im4 ?b;\n       t6 = Ree ?a * Im6 ?b + Im1 ?a * Im5 ?b - Im2 ?a * Im7 ?b +\n            Im3 ?a * Im4 ?b -\n            Im4 ?a * Im3 ?b -\n            Im5 ?a * Im1 ?b +\n            Im6 ?a * Ree ?b +\n            Im7 ?a * Im2 ?b\n   in Let (Ree ?a * Im7 ?b + Im1 ?a * Im3 ?b + Im2 ?a * Im6 ?b -\n           Im3 ?a * Im1 ?b +\n           Im4 ?a * Im5 ?b -\n           Im5 ?a * Im4 ?b -\n           Im6 ?a * Im2 ?b +\n           Im7 ?a * Ree ?b)\n       (Octo t0 t1 t2 t3 t4 t5 t6))\n\ngoal (1 subgoal):\n 1. Octonions.cnj x * x = x * Octonions.cnj x", "by auto"], ["", "lemma octo_cnj_mult_conv_norm: \"cnj x * x = octo_of_real (norm x) ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj x * x = (octo_of_real (norm x))\\<^sup>2", "by (simp add: octo_eq_iff octo_mult_components norm_octo_def power2_eq_square\n           flip: octo_of_real_power)"], ["", "lemma octo_mult_cnj_conv_norm: \"x * cnj x = octo_of_real (norm x) ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * Octonions.cnj x = (octo_of_real (norm x))\\<^sup>2", "by (simp add: octo_eq_iff octo_mult_components norm_octo_def power2_eq_square \n           flip: octo_of_real_power)"], ["", "lemma octo_mult_cnj_conv_norm_aux: \"octo_of_real (norm x ^ 2) = x * cnj x \""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real ((norm x)\\<^sup>2) = x * Octonions.cnj x", "using octo_mult_cnj_conv_norm[of x]"], ["proof (prove)\nusing this:\n  x * Octonions.cnj x = (octo_of_real (norm x))\\<^sup>2\n\ngoal (1 subgoal):\n 1. octo_of_real ((norm x)\\<^sup>2) = x * Octonions.cnj x", "by (simp add: octo_mult_cnj_commute)"], ["", "lemma octo_norm_conj: \"octo_of_real ( inner x y) = (1/2) *\\<^sub>R (x * (cnj y) + y * (cnj x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. octo_of_real (x \\<bullet> y) =\n    (1 / 2) *\\<^sub>R (x * Octonions.cnj y + y * Octonions.cnj x)", "by (simp add: octo_eq_iff octo_mult_components inner_octo_def)"], ["", "lemma octo_inverse_cnj: \"inverse x = cnj x /\\<^sub>R (norm x ^ 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse x = Octonions.cnj x /\\<^sub>R (norm x)\\<^sup>2", "by (auto simp: octo_eq_iff norm_octo_def field_simps)"], ["", "lemma inverse_octo_1: \"x \\<noteq> 0 \\<Longrightarrow> x * inverse x = (1 :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> x * inverse x = 1", "by (simp add: octo_mult_scaleR_right octo_mult_cnj_conv_norm_aux [symmetric] \n                divide_simps octo_inverse_cnj\n           del: octo_of_real_power)"], ["", "lemma inverse_octo_1_sym: \"x \\<noteq> 0 \\<Longrightarrow> inverse x * x = (1 :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> 0 \\<Longrightarrow> inverse x * x = 1", "by (metis cnj_cnj cnj_inverse cnj_mult cnj_one cnj_zero inverse_octo_1)"], ["", "lemma inverse_0_octo [simp]: \"inverse 0 = (0 :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse 0 = 0", "by (simp add: octo_eq_iff)"], ["", "lemma inverse_octo_commutes: \"inverse x * x = x * (inverse x :: octo)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse x * x = x * inverse x", "by (cases \"x = 0\") (simp_all add: inverse_octo_1 inverse_octo_1_sym)"], ["", "lemma octo_inverse_mult: \"inverse (x * y) = inverse y * inverse x\" for x y::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (x * y) = inverse y * inverse x", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse (x * y) = inverse y * inverse x", "have \"inverse (x * y) = (cnj y * cnj x) /\\<^sub>R (norm (x * y) ^ 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (x * y) =\n    Octonions.cnj y * Octonions.cnj x /\\<^sub>R (norm (x * y))\\<^sup>2", "by (simp add: octo_inverse_cnj)"], ["proof (state)\nthis:\n  inverse (x * y) =\n  Octonions.cnj y * Octonions.cnj x /\\<^sub>R (norm (x * y))\\<^sup>2\n\ngoal (1 subgoal):\n 1. inverse (x * y) = inverse y * inverse x", "also"], ["proof (state)\nthis:\n  inverse (x * y) =\n  Octonions.cnj y * Octonions.cnj x /\\<^sub>R (norm (x * y))\\<^sup>2\n\ngoal (1 subgoal):\n 1. inverse (x * y) = inverse y * inverse x", "have \"\\<dots> = (cnj y /\\<^sub>R norm y ^ 2) * (cnj x /\\<^sub>R norm x ^ 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj y * Octonions.cnj x /\\<^sub>R (norm (x * y))\\<^sup>2 =\n    Octonions.cnj y /\\<^sub>R (norm y)\\<^sup>2 *\n    (Octonions.cnj x /\\<^sub>R (norm x)\\<^sup>2)", "by (simp add: octo_mult_scaleR_left octo_mult_scaleR_right multiplicative_norm_octo\n                   power2_eq_square)"], ["proof (state)\nthis:\n  Octonions.cnj y * Octonions.cnj x /\\<^sub>R (norm (x * y))\\<^sup>2 =\n  Octonions.cnj y /\\<^sub>R (norm y)\\<^sup>2 *\n  (Octonions.cnj x /\\<^sub>R (norm x)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. inverse (x * y) = inverse y * inverse x", "also"], ["proof (state)\nthis:\n  Octonions.cnj y * Octonions.cnj x /\\<^sub>R (norm (x * y))\\<^sup>2 =\n  Octonions.cnj y /\\<^sub>R (norm y)\\<^sup>2 *\n  (Octonions.cnj x /\\<^sub>R (norm x)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. inverse (x * y) = inverse y * inverse x", "have \"\\<dots> = inverse y * inverse x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj y /\\<^sub>R (norm y)\\<^sup>2 *\n    (Octonions.cnj x /\\<^sub>R (norm x)\\<^sup>2) =\n    inverse y * inverse x", "by (simp add: octo_inverse_cnj)"], ["proof (state)\nthis:\n  Octonions.cnj y /\\<^sub>R (norm y)\\<^sup>2 *\n  (Octonions.cnj x /\\<^sub>R (norm x)\\<^sup>2) =\n  inverse y * inverse x\n\ngoal (1 subgoal):\n 1. inverse (x * y) = inverse y * inverse x", "finally"], ["proof (chain)\npicking this:\n  inverse (x * y) = inverse y * inverse x", "show ?thesis"], ["proof (prove)\nusing this:\n  inverse (x * y) = inverse y * inverse x\n\ngoal (1 subgoal):\n 1. inverse (x * y) = inverse y * inverse x", "."], ["proof (state)\nthis:\n  inverse (x * y) = inverse y * inverse x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma octo_inverse_eq_cnj: \"norm q = 1 \\<Longrightarrow> inverse q = cnj q\" for q::octo"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm q = 1 \\<Longrightarrow> inverse q = Octonions.cnj q", "by (simp add: octo_inverse_cnj)"], ["", "lemma octo_in_Reals_if_Re: fixes q ::real shows \" Ree( octo_of_real(q)) = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree (octo_of_real q) = q", "by simp"], ["", "lemma octo_in_Reals_if_Re_con: assumes \"Ree (octo_of_real q) = q\"\n  shows \"q \\<in> Reals\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> \\<real>", "by (metis Reals_of_real inner_real_def mult.right_neutral of_real_inner_1)"], ["", "lemma octo_in_Reals_if_cnj: fixes q:: real shows \" cnj( octo_of_real( q)) = octo_of_real q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (octo_of_real q) = octo_of_real q", "by simp"], ["", "lemma octo_in_Reals_if_cnj_con: assumes \" cnj( octo_of_real( q)) = octo_of_real q\" \n  shows \"q \\<in> Reals \""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> \\<real>", "by (metis Reals_of_real inner_real_def mult.right_neutral of_real_inner_1)"], ["", "lemma norm_power2: \"norm q ^ 2 = Ree (cnj q * q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (norm q)\\<^sup>2 = Ree (Octonions.cnj q * q)", "by (simp add: octo_mult_components norm_octo_def power2_eq_square)"], ["", "lemma norm_power2_cnj: \"norm q ^ 2 = Ree (q * cnj q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (norm q)\\<^sup>2 = Ree (q * Octonions.cnj q)", "by (simp add: octo_mult_components norm_octo_def power2_eq_square)"], ["", "lemma octo_norm_imaginary: \"Ree x = 0 \\<Longrightarrow> x * x = -(octo_of_real (norm x))\\<^sup>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ree x = 0 \\<Longrightarrow> x * x = - (octo_of_real (norm x))\\<^sup>2", "by (simp add: octo_eq_iff octo_mult_components norm_octo_def power2_eq_square\n           flip: octo_of_real_power octo_of_real_mult)"], ["", "subsection\\<open> Linearity and continuity of the components.\\<close>"], ["", "lemma bounded_linear_Ree: \"bounded_linear Ree\"\n  and bounded_linear_Im1: \"bounded_linear Im1\"\n  and bounded_linear_Im2: \"bounded_linear Im2\"\n  and bounded_linear_Im3: \"bounded_linear Im3\"\n  and bounded_linear_Im4: \"bounded_linear Im4\"\n  and bounded_linear_Im5: \"bounded_linear Im5\"\n  and bounded_linear_Im6: \"bounded_linear Im6\"\n  and bounded_linear_Im7: \"bounded_linear Im7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((bounded_linear Ree &&& bounded_linear Im1) &&&\n     bounded_linear Im2 &&& bounded_linear Im3) &&&\n    (bounded_linear Im4 &&& bounded_linear Im5) &&&\n    bounded_linear Im6 &&& bounded_linear Im7", "by (simp_all add: bounded_linear_intro [where K=1] norm_octo_def real_le_rsqrt add.assoc)"], ["", "lemmas Cauchy_Ree = bounded_linear.Cauchy [OF bounded_linear_Ree]"], ["", "lemmas Cauchy_Im1 = bounded_linear.Cauchy [OF bounded_linear_Im1]"], ["", "lemmas Cauchy_Im2 = bounded_linear.Cauchy [OF bounded_linear_Im2]"], ["", "lemmas Cauchy_Im3 = bounded_linear.Cauchy [OF bounded_linear_Im3]"], ["", "lemmas Cauchy_Im4 = bounded_linear.Cauchy [OF bounded_linear_Im4]"], ["", "lemmas Cauchy_Im5 = bounded_linear.Cauchy [OF bounded_linear_Im5]"], ["", "lemmas Cauchy_Im6 = bounded_linear.Cauchy [OF bounded_linear_Im6]"], ["", "lemmas Cauchy_Im7 = bounded_linear.Cauchy [OF bounded_linear_Im7]"], ["", "lemmas tendsto_Re [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Ree]"], ["", "lemmas tendsto_Im1 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im1]"], ["", "lemmas tendsto_Im2 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im2]"], ["", "lemmas tendsto_Im3 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im3]"], ["", "lemmas tendsto_Im4 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im4]"], ["", "lemmas tendsto_Im5 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im5]"], ["", "lemmas tendsto_Im6 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im6]"], ["", "lemmas tendsto_Im7 [tendsto_intros] = bounded_linear.tendsto [OF bounded_linear_Im7]"], ["", "lemmas isCont_Ree [simp] = bounded_linear.isCont [OF bounded_linear_Ree]"], ["", "lemmas isCont_Im1 [simp] = bounded_linear.isCont [OF bounded_linear_Im1]"], ["", "lemmas isCont_Im2 [simp] = bounded_linear.isCont [OF bounded_linear_Im2]"], ["", "lemmas isCont_Im3 [simp] = bounded_linear.isCont [OF bounded_linear_Im3]"], ["", "lemmas isCont_Im4 [simp] = bounded_linear.isCont [OF bounded_linear_Im4]"], ["", "lemmas isCont_Im5 [simp] = bounded_linear.isCont [OF bounded_linear_Im5]"], ["", "lemmas isCont_Im6 [simp] = bounded_linear.isCont [OF bounded_linear_Im6]"], ["", "lemmas isCont_Im7 [simp] = bounded_linear.isCont [OF bounded_linear_Im7]"], ["", "lemmas continuous_Ree [simp] = bounded_linear.continuous [OF bounded_linear_Ree]"], ["", "lemmas continuous_Im1 [simp] = bounded_linear.continuous [OF bounded_linear_Im1]"], ["", "lemmas continuous_Im2 [simp] = bounded_linear.continuous [OF bounded_linear_Im2]"], ["", "lemmas continuous_Im3 [simp] = bounded_linear.continuous [OF bounded_linear_Im3]"], ["", "lemmas continuous_Im4 [simp] = bounded_linear.continuous [OF bounded_linear_Im4]"], ["", "lemmas continuous_Im5 [simp] = bounded_linear.continuous [OF bounded_linear_Im5]"], ["", "lemmas continuous_Im6 [simp] = bounded_linear.continuous [OF bounded_linear_Im6]"], ["", "lemmas continuous_Im7 [simp] = bounded_linear.continuous [OF bounded_linear_Im7]"], ["", "lemmas continuous_on_Ree [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Ree]"], ["", "lemmas continuous_on_Im1 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im1]"], ["", "lemmas continuous_on_Im2 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im2]"], ["", "lemmas continuous_on_Im3 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im3]"], ["", "lemmas continuous_on_Im4 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im4]"], ["", "lemmas continuous_on_Im5 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im5]"], ["", "lemmas continuous_on_Im6 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im6]"], ["", "lemmas continuous_on_Im7 [continuous_intros] = bounded_linear.continuous_on[OF bounded_linear_Im7]"], ["", "lemmas has_derivative_Ree [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Ree]"], ["", "lemmas has_derivative_Im1 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im1]"], ["", "lemmas has_derivative_Im2 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im2]"], ["", "lemmas has_derivative_Im3 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im3]"], ["", "lemmas has_derivative_Im4 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im4]"], ["", "lemmas has_derivative_Im5 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im5]"], ["", "lemmas has_derivative_Im6 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im6]"], ["", "lemmas has_derivative_Im7 [derivative_intros] = bounded_linear.has_derivative[OF bounded_linear_Im7]"], ["", "lemmas sums_Ree = bounded_linear.sums [OF bounded_linear_Ree]"], ["", "lemmas sums_Im1 = bounded_linear.sums [OF bounded_linear_Im1]"], ["", "lemmas sums_Im2 = bounded_linear.sums [OF bounded_linear_Im2]"], ["", "lemmas sums_Im3 = bounded_linear.sums [OF bounded_linear_Im3]"], ["", "lemmas sums_Im4 = bounded_linear.sums [OF bounded_linear_Im4]"], ["", "lemmas sums_Im5 = bounded_linear.sums [OF bounded_linear_Im5]"], ["", "lemmas sums_Im6 = bounded_linear.sums [OF bounded_linear_Im6]"], ["", "lemmas sums_Im7 = bounded_linear.sums [OF bounded_linear_Im7]"], ["", "subsubsection\\<open> Octonionic-specific theorems about sums.                                \\<close>"], ["", "lemma Ree_sum [simp]: \"Ree (sum f S) = sum (\\<lambda>x.  Ree(f x)) S\"\n  and Im1_sum [simp]: \"Im1 (sum f S) = sum (\\<lambda>x. Im1 (f x)) S\"\n  and Im2_sum [simp]: \"Im2 (sum f S) = sum (\\<lambda>x. Im2 (f x)) S\"\n  and Im3_sum [simp]: \"Im3 (sum f S) = sum (\\<lambda>x. Im3 (f x)) S\"\n  and Im4_sum [simp]: \"Im4 (sum f S) = sum (\\<lambda>x. Im4 (f x)) S\"\n  and Im5_sum [simp]: \"Im5 (sum f S) = sum (\\<lambda>x. Im5 (f x)) S\"\n  and Im6_sum [simp]: \"Im6 (sum f S) = sum (\\<lambda>x. Im6 (f x)) S\"\n  and Im7_sum [simp]: \"Im7 (sum f S) = sum (\\<lambda>x. Im7 (f x)) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Ree (sum f S) = (\\<Sum>x\\<in>S. Ree (f x)) &&&\n      Im1 (sum f S) = (\\<Sum>x\\<in>S. Im1 (f x))) &&&\n     Im2 (sum f S) = (\\<Sum>x\\<in>S. Im2 (f x)) &&&\n     Im3 (sum f S) = (\\<Sum>x\\<in>S. Im3 (f x))) &&&\n    (Im4 (sum f S) = (\\<Sum>x\\<in>S. Im4 (f x)) &&&\n     Im5 (sum f S) = (\\<Sum>x\\<in>S. Im5 (f x))) &&&\n    Im6 (sum f S) = (\\<Sum>x\\<in>S. Im6 (f x)) &&&\n    Im7 (sum f S) = (\\<Sum>x\\<in>S. Im7 (f x))", "by (induct S rule: infinite_finite_induct; simp)+"], ["", "subsubsection\\<open> Bound results for real and imaginary components of limits.                \\<close>"], ["", "lemma Ree_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. octo.Ree (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Ree limit \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. Ree (f x) \\<le> b;\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> Ree limit \\<le> b", "by (blast intro: tendsto_upperbound [OF tendsto_Re])"], ["", "lemma Im1_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im1 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im1 limit \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. Im1 (f x) \\<le> b;\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> Im1 limit \\<le> b", "by (blast intro: tendsto_upperbound [OF tendsto_Im1])"], ["", "lemma Im2_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im2 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im2 limit \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. Im2 (f x) \\<le> b;\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> Im2 limit \\<le> b", "by (blast intro: tendsto_upperbound [OF tendsto_Im2])"], ["", "lemma Im3_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im3 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im3 limit \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. Im3 (f x) \\<le> b;\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> Im3 limit \\<le> b", "by (blast intro: tendsto_upperbound [OF tendsto_Im3])"], ["", "lemma Im4_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im4 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im4 limit \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. Im4 (f x) \\<le> b;\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> Im4 limit \\<le> b", "by (blast intro: tendsto_upperbound [OF tendsto_Im4])"], ["", "lemma Im5_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im5 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im5 limit \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. Im5 (f x) \\<le> b;\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> Im5 limit \\<le> b", "by (blast intro: tendsto_upperbound [OF tendsto_Im5])"], ["", "lemma Im6_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im6 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im6 limit \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. Im6 (f x) \\<le> b;\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> Im6 limit \\<le> b", "by (blast intro: tendsto_upperbound [OF tendsto_Im6])"], ["", "lemma Im7_tendsto_upperbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. Im7 (f x) \\<le> b; net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> Im7 limit \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. Im7 (f x) \\<le> b;\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> Im7 limit \\<le> b", "by (blast intro: tendsto_upperbound [OF tendsto_Im7])"], ["", "lemma Ree_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> octo.Ree (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Ree limit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. b \\<le> Ree (f x);\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> b \\<le> Ree limit", "by (blast intro: tendsto_lowerbound [OF tendsto_Re])"], ["", "lemma Im1_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im1 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im1 limit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. b \\<le> Im1 (f x);\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> b \\<le> Im1 limit", "by (blast intro: tendsto_lowerbound [OF tendsto_Im1])"], ["", "lemma Im2_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im2 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im2 limit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. b \\<le> Im2 (f x);\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> b \\<le> Im2 limit", "by (blast intro: tendsto_lowerbound [OF tendsto_Im2])"], ["", "lemma Im3_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im3 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im3 limit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. b \\<le> Im3 (f x);\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> b \\<le> Im3 limit", "by (blast intro: tendsto_lowerbound [OF tendsto_Im3])"], ["", "lemma Im4_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im4 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im4 limit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. b \\<le> Im4 (f x);\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> b \\<le> Im4 limit", "by (blast intro: tendsto_lowerbound [OF tendsto_Im4])"], ["", "lemma Im5_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im5 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im5 limit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. b \\<le> Im5 (f x);\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> b \\<le> Im5 limit", "by (blast intro: tendsto_lowerbound [OF tendsto_Im5])"], ["", "lemma Im6_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im6 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im6 limit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. b \\<le> Im6 (f x);\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> b \\<le> Im6 limit", "by (blast intro: tendsto_lowerbound [OF tendsto_Im6])"], ["", "lemma Im7_tendsto_lowerbound:\n   \"\\<lbrakk>(f \\<longlongrightarrow> limit) net; \\<forall>\\<^sub>F x in net. b \\<le> Im7 (f x); net \\<noteq> bot\\<rbrakk> \\<Longrightarrow> b \\<le> Im7 limit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f \\<longlongrightarrow> limit) net;\n     \\<forall>\\<^sub>F x in net. b \\<le> Im7 (f x);\n     net \\<noteq> bot\\<rbrakk>\n    \\<Longrightarrow> b \\<le> Im7 limit", "by (blast intro: tendsto_lowerbound [OF tendsto_Im7])"], ["", "lemma octo_of_real_continuous [continuous_intros]:\n  \"continuous net f \\<Longrightarrow> continuous net (\\<lambda>x. octo_of_real (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous net f \\<Longrightarrow>\n    continuous net (\\<lambda>x. octo_of_real (f x))", "by (auto simp: octo_of_real_def intro: continuous_intros)"], ["", "lemma octo_of_real_continuous_on [continuous_intros]:\n  \"continuous_on S f \\<Longrightarrow> continuous_on S (\\<lambda>x. octo_of_real (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on S f \\<Longrightarrow>\n    continuous_on S (\\<lambda>x. octo_of_real (f x))", "by (auto simp: octo_of_real_def intro: continuous_intros)"], ["", "lemma of_real_continuous_iff: \"continuous net (\\<lambda>x. octo_of_real (f x)) \\<longleftrightarrow> continuous net f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous net (\\<lambda>x. octo_of_real (f x)) = continuous net f", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. continuous net (\\<lambda>x. octo_of_real (f x)) \\<Longrightarrow>\n    continuous net f\n 2. continuous net f \\<Longrightarrow>\n    continuous net (\\<lambda>x. octo_of_real (f x))", "assume \"continuous net (\\<lambda>x. octo_of_real (f x))\""], ["proof (state)\nthis:\n  continuous net (\\<lambda>x. octo_of_real (f x))\n\ngoal (2 subgoals):\n 1. continuous net (\\<lambda>x. octo_of_real (f x)) \\<Longrightarrow>\n    continuous net f\n 2. continuous net f \\<Longrightarrow>\n    continuous net (\\<lambda>x. octo_of_real (f x))", "hence \"continuous net (\\<lambda>x. Ree (octo_of_real (f x)))\""], ["proof (prove)\nusing this:\n  continuous net (\\<lambda>x. octo_of_real (f x))\n\ngoal (1 subgoal):\n 1. continuous net (\\<lambda>x. Ree (octo_of_real (f x)))", "by (rule continuous_Ree)"], ["proof (state)\nthis:\n  continuous net (\\<lambda>x. Ree (octo_of_real (f x)))\n\ngoal (2 subgoals):\n 1. continuous net (\\<lambda>x. octo_of_real (f x)) \\<Longrightarrow>\n    continuous net f\n 2. continuous net f \\<Longrightarrow>\n    continuous net (\\<lambda>x. octo_of_real (f x))", "thus \"continuous net f\""], ["proof (prove)\nusing this:\n  continuous net (\\<lambda>x. Ree (octo_of_real (f x)))\n\ngoal (1 subgoal):\n 1. continuous net f", "by simp"], ["proof (state)\nthis:\n  continuous net f\n\ngoal (1 subgoal):\n 1. continuous net f \\<Longrightarrow>\n    continuous net (\\<lambda>x. octo_of_real (f x))", "qed (auto intro: continuous_intros)"], ["", "lemma of_real_continuous_on_iff:\n   \"continuous_on S (\\<lambda>x. octo_of_real(f x)) \\<longleftrightarrow> continuous_on S f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on S (\\<lambda>x. octo_of_real (f x)) = continuous_on S f", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. continuous_on S (\\<lambda>x. octo_of_real (f x)) \\<Longrightarrow>\n    continuous_on S f\n 2. continuous_on S f \\<Longrightarrow>\n    continuous_on S (\\<lambda>x. octo_of_real (f x))", "assume \"continuous_on S (\\<lambda>x. octo_of_real (f x))\""], ["proof (state)\nthis:\n  continuous_on S (\\<lambda>x. octo_of_real (f x))\n\ngoal (2 subgoals):\n 1. continuous_on S (\\<lambda>x. octo_of_real (f x)) \\<Longrightarrow>\n    continuous_on S f\n 2. continuous_on S f \\<Longrightarrow>\n    continuous_on S (\\<lambda>x. octo_of_real (f x))", "hence \"continuous_on S (\\<lambda>x. Ree (octo_of_real (f x)))\""], ["proof (prove)\nusing this:\n  continuous_on S (\\<lambda>x. octo_of_real (f x))\n\ngoal (1 subgoal):\n 1. continuous_on S (\\<lambda>x. Ree (octo_of_real (f x)))", "by (rule continuous_on_Ree)"], ["proof (state)\nthis:\n  continuous_on S (\\<lambda>x. Ree (octo_of_real (f x)))\n\ngoal (2 subgoals):\n 1. continuous_on S (\\<lambda>x. octo_of_real (f x)) \\<Longrightarrow>\n    continuous_on S f\n 2. continuous_on S f \\<Longrightarrow>\n    continuous_on S (\\<lambda>x. octo_of_real (f x))", "thus \"continuous_on S f\""], ["proof (prove)\nusing this:\n  continuous_on S (\\<lambda>x. Ree (octo_of_real (f x)))\n\ngoal (1 subgoal):\n 1. continuous_on S f", "by simp"], ["proof (state)\nthis:\n  continuous_on S f\n\ngoal (1 subgoal):\n 1. continuous_on S f \\<Longrightarrow>\n    continuous_on S (\\<lambda>x. octo_of_real (f x))", "qed (auto intro: continuous_intros)"], ["", "subsection\\<open>Octonions for describing 7D isometries\\<close>"], ["", "subsubsection\\<open>The \\<open>HIm\\<close> operator\\<close>"], ["", "definition HIm :: \"octo \\<Rightarrow> real^7\" where\n  \"HIm q \\<equiv> vector[Im1 q, Im2 q, Im3 q, Im4 q, Im5 q, Im6 q, Im7 q]\""], ["", "lemma HIm_Octo: \"HIm (Octo w x y z u v q g) = vector[x,y,z, u, v, q, g]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HIm (Octo w x y z u v q g) = vector [x, y, z, u, v, q, g]", "by (simp add: HIm_def)"], ["", "lemma him_eq: \"HIm a = HIm b \\<longleftrightarrow> Im1 a = Im1 b \\<and> Im2 a = Im2 b \\<and> Im3 a = Im3 b\n \\<and> Im4 a = Im4 b \\<and> Im5 a = Im5 b \\<and> Im6 a = Im6 b \\<and> Im7 a = Im7 b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (HIm a = HIm b) =\n    (Im1 a = Im1 b \\<and>\n     Im2 a = Im2 b \\<and>\n     Im3 a = Im3 b \\<and>\n     Im4 a = Im4 b \\<and>\n     Im5 a = Im5 b \\<and> Im6 a = Im6 b \\<and> Im7 a = Im7 b)", "by (metis HIm_def vector_7)"], ["", "lemma him_of_real [simp]: \"HIm(octo_of_real a) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HIm (octo_of_real a) = 0", "by (simp add:octo_of_real_eq_Octo HIm_Octo vec_eq_iff vector_def)"], ["", "lemma him_0 [simp]: \"HIm 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HIm 0 = 0", "by (metis him_of_real octo_of_real_0)"], ["", "lemma him_1 [simp]: \"HIm 1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HIm 1 = 0", "using HIm_def him_0"], ["proof (prove)\nusing this:\n  HIm ?q \\<equiv>\n  vector [Im1 ?q, Im2 ?q, Im3 ?q, Im4 ?q, Im5 ?q, Im6 ?q, Im7 ?q]\n  HIm 0 = 0\n\ngoal (1 subgoal):\n 1. HIm 1 = 0", "by auto"], ["", "lemma him_cnj: \"HIm(cnj q) = - HIm q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HIm (Octonions.cnj q) = - HIm q", "by (simp add: HIm_def vec_eq_iff vector_def)"], ["", "lemma him_mult_left [simp]: \"HIm (a *\\<^sub>R q) = a  *\\<^sub>R HIm q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HIm (a *\\<^sub>R q) = a *\\<^sub>R HIm q", "by (simp add: HIm_def vec_eq_iff vector_def)"], ["", "lemma him_mult_right [simp]: \"HIm (q * octo_of_real a) = HIm q * of_real a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HIm (q * octo_of_real a) = HIm q * of_real a", "by (metis Octonions.scaleR_conv_octo_of_real Real_Vector_Spaces.scaleR_conv_of_real\n him_mult_left octo_of_real_times_commute semiring_normalization_rules(7))"], ["", "lemma him_add [simp]: \"HIm (x + y) = HIm x + HIm y\"\n and  him_minus [simp]: \"HIm (-x) = - HIm x\"\n and  him_diff [simp]: \"HIm (x - y) = HIm x - HIm y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HIm (x + y) = HIm x + HIm y &&&\n    HIm (- x) = - HIm x &&& HIm (x - y) = HIm x - HIm y", "by (simp_all add: HIm_def vec_eq_iff vector_def)"], ["", "lemma him_sum [simp]: \"HIm (sum f S) = (\\<Sum>x\\<in>S. HIm (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HIm (sum f S) = (\\<Sum>x\\<in>S. HIm (f x))", "by (induct S rule: infinite_finite_induct) auto"], ["", "lemma linear_him: \"linear HIm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear HIm", "by (simp add: linearI)"], ["", "subsubsection\\<open>The \\<open>Hv\\<close> operator\\<close>"], ["", "definition Hv :: \"real^7 \\<Rightarrow> octo\" where\n  \"Hv v \\<equiv> Octo 0 (v$1) (v$2) (v$3) (v$4) (v$5) (v$6) (v$7)  \""], ["", "lemma Hv_sel [simp]:\n  \"Ree (Hv v) = 0\" \"Im1 (Hv v) = v $ 1\" \"Im2 (Hv v) = v $ 2\" \"Im3 (Hv v) = v $ 3\"\n  \"Im4 (Hv v) = v $ 4\" \"Im5 (Hv v) = v $ 5\" \"Im6 (Hv v) = v $ 6\" \"Im7 (Hv v) = v $ 7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Ree (Hv v) = 0 &&& Im1 (Hv v) = v $ 1) &&&\n     Im2 (Hv v) = v $ 2 &&& Im3 (Hv v) = v $ 3) &&&\n    (Im4 (Hv v) = v $ 4 &&& Im5 (Hv v) = v $ 5) &&&\n    Im6 (Hv v) = v $ 6 &&& Im7 (Hv v) = v $ 7", "by (simp_all add: Hv_def)"], ["", "lemma hv_vec: \"Hv(vec r) = Octo 0 r r r r r r r \""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv (vec r) = Octo 0 r r r r r r r", "by (simp add: Hv_def)"], ["", "lemma hv_eq_zero [simp]: \"Hv v = 0 \\<longleftrightarrow> v = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Hv v = 0) = (v = 0)", "by (simp add: octo_eq_iff vec_eq_iff) (metis exhaust_7)"], ["", "lemma hv_zero [simp]: \"Hv 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv 0 = 0", "by simp"], ["", "lemma hv_vector [simp]: \"Hv(vector[x,y,z,u,v,q,g]) = Octo 0 x y z u v q g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv (vector [x, y, z, u, v, q, g]) = Octo 0 x y z u v q g", "by (simp add: Hv_def)"], ["", "lemma hv_basis:\n  \"Hv(axis 1 1) = e1\" \"Hv(axis 2 1) = e2\" \"Hv(axis 3 1) = e3\"\n  \"Hv(axis 4 1) = e4\" \"Hv(axis 5 1) = e5\" \"Hv(axis 6 1) = e6\"  \"Hv(axis 7 1) = e7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Hv (axis 1 1) = e1 &&& Hv (axis 2 1) = e2 &&& Hv (axis 3 1) = e3) &&&\n    (Hv (axis 4 1) = e4 &&& Hv (axis 5 1) = e5) &&&\n    Hv (axis 6 1) = e6 &&& Hv (axis 7 1) = e7", "by (simp_all add: octo_eq_iff)"], ["", "lemma hv_add [simp]: \"Hv(x + y) = Hv x + Hv y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv (x + y) = Hv x + Hv y", "by (simp add: Hv_def octo_eq_iff)"], ["", "lemma hv_minus [simp]: \"Hv(-x) = -Hv x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv (- x) = - Hv x", "by (simp add: Hv_def octo_eq_iff)"], ["", "lemma hv_diff [simp]: \"Hv(x - y) = Hv x - Hv y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv (x - y) = Hv x - Hv y", "by (simp add: Hv_def octo_eq_iff)"], ["", "lemma hv_cmult [simp]:\n \"Hv(scaleR a   x) = scaleR a  ( Hv x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv (a *\\<^sub>R x) = a *\\<^sub>R Hv x", "by (simp add: Hv_def octo_eq_iff)"], ["", "lemma hv_sum [simp]: \"Hv (sum f S) = (\\<Sum>x\\<in>S. Hv (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv (sum f S) = (\\<Sum>x\\<in>S. Hv (f x))", "by (induct S rule: infinite_finite_induct) auto"], ["", "lemma hv_inj: \"Hv x = Hv y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Hv x = Hv y) = (x = y)", "by (simp add: Hv_def octo_eq_iff vec_eq_iff) (metis (full_types) exhaust_7)"], ["", "lemma linear_hv: \"linear Hv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linear Hv", "using octo_of_real_def"], ["proof (prove)\nusing this:\n  octo_of_real ?r = ?r *\\<^sub>R 1\n\ngoal (1 subgoal):\n 1. linear Hv", "by (simp add: linearI)"], ["", "lemma him_hv [simp]: \"HIm(Hv x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HIm (Hv x) = x", "using HIm_def hv_inj octo_eq_iff"], ["proof (prove)\nusing this:\n  HIm ?q \\<equiv>\n  vector [Im1 ?q, Im2 ?q, Im3 ?q, Im4 ?q, Im5 ?q, Im6 ?q, Im7 ?q]\n  (Hv ?x = Hv ?y) = (?x = ?y)\n  (?x = ?y) =\n  (Ree ?x = Ree ?y \\<and>\n   Im1 ?x = Im1 ?y \\<and>\n   Im2 ?x = Im2 ?y \\<and>\n   Im3 ?x = Im3 ?y \\<and>\n   Im4 ?x = Im4 ?y \\<and>\n   Im5 ?x = Im5 ?y \\<and> Im6 ?x = Im6 ?y \\<and> Im7 ?x = Im7 ?y)\n\ngoal (1 subgoal):\n 1. HIm (Hv x) = x", "by fastforce"], ["", "lemma cnj_hv [simp]: \"cnj(Hv v) = -Hv v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Octonions.cnj (Hv v) = - Hv v", "by (simp add: octo_eq_iff)"], ["", "lemma hv_him: \"Hv(HIm q) = Octo 0 (Im1 q) (Im2 q) (Im3 q)  (Im4 q) (Im5 q) (Im6 q)  (Im7 q)  \""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv (HIm q) =\n    Octo 0 (Im1 q) (Im2 q) (Im3 q) (Im4 q) (Im5 q) (Im6 q) (Im7 q)", "by (simp add: HIm_def)"], ["", "lemma hv_him_eq: \"Hv(HIm q) = q \\<longleftrightarrow> Ree q = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Hv (HIm q) = q) = (Ree q = 0)", "by (simp add: hv_him octo_eq_iff)"], ["", "lemma dot_hv [simp]: \"Hv u \\<bullet> Hv v = u \\<bullet> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv u \\<bullet> Hv v = u \\<bullet> v", "by (simp add: Hv_def inner_octo_def inner_vec_def sum_7)"], ["", "lemma norm_hv [simp]: \"norm (Hv v) = norm v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (Hv v) = norm v", "by (simp add: norm_eq)"], ["", "subsubsection\\<open>Related basic identities \\<close>"], ["", "lemma mult_hv_eq_cross_dot: \"Hv x * Hv y = Hv(x  \\<times>\\<^sub>7 y) - octo_of_real (inner x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv x * Hv y = Hv (x \\<times>\\<^sub>7 y) - octo_of_real (x \\<bullet> y)", "by (simp add: octo_eq_iff inner_octo_def cross7_components octo_mult_components\n                inner_vec_def sum_7)"], ["", "lemma octonion_identity1_cross7 :\n  \"Hv (x \\<times>\\<^sub>7 y) = (1/2) *\\<^sub>R (Hv x * Hv y - Hv y * Hv x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv (x \\<times>\\<^sub>7 y) =\n    (1 / 2) *\\<^sub>R (Hv x * Hv y - Hv y * Hv x)", "by (simp add: octo_eq_iff octo_mult_components cross7_components)"], ["", "lemma octonion_identity2_cross7:\n  \"Hv (x \\<times>\\<^sub>7 (y \\<times>\\<^sub>7 z) + y \\<times>\\<^sub>7 (z \\<times>\\<^sub>7 x) + z \\<times>\\<^sub>7 (x \\<times>\\<^sub>7 y)) =\n     -(3/2) *\\<^sub>R ((Hv x * Hv y) * Hv z - Hv x * (Hv y * Hv z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hv (x \\<times>\\<^sub>7 y \\<times>\\<^sub>7 z +\n        y \\<times>\\<^sub>7 z \\<times>\\<^sub>7 x +\n        z \\<times>\\<^sub>7 x \\<times>\\<^sub>7 y) =\n    - (3 / 2) *\\<^sub>R (Hv x * Hv y * Hv z - Hv x * (Hv y * Hv z))", "unfolding octo_eq_iff octo_mult_components cross7_components Hv_sel scaleR_octo.sel\n            vector_add_component minus_octo.sel mult_zero_left mult_zero_right add_0_left\n            add_0_right diff_0 diff_0_right"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 =\n    - (3 / 2) *\n    (- ((x $ 2 * y $ 4 + x $ 3 * y $ 7 - x $ 4 * y $ 2 + x $ 5 * y $ 6 -\n         x $ 6 * y $ 5 -\n         x $ 7 * y $ 3) *\n        z $ 1) -\n     (- (x $ 1 * y $ 4) + x $ 3 * y $ 5 + x $ 4 * y $ 1 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) *\n     z $ 2 -\n     (- (x $ 1 * y $ 7) - x $ 2 * y $ 5 + x $ 4 * y $ 6 + x $ 5 * y $ 2 -\n      x $ 6 * y $ 4 +\n      x $ 7 * y $ 1) *\n     z $ 3 -\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 - x $ 3 * y $ 6 + x $ 5 * y $ 7 +\n      x $ 6 * y $ 3 -\n      x $ 7 * y $ 5) *\n     z $ 4 -\n     (- (x $ 1 * y $ 6) + x $ 2 * y $ 3 - x $ 3 * y $ 2 - x $ 4 * y $ 7 +\n      x $ 6 * y $ 1 +\n      x $ 7 * y $ 4) *\n     z $ 5 -\n     (x $ 1 * y $ 5 - x $ 2 * y $ 7 + x $ 3 * y $ 4 - x $ 4 * y $ 3 -\n      x $ 5 * y $ 1 +\n      x $ 7 * y $ 2) *\n     z $ 6 -\n     (x $ 1 * y $ 3 + x $ 2 * y $ 6 - x $ 3 * y $ 1 + x $ 4 * y $ 5 -\n      x $ 5 * y $ 4 -\n      x $ 6 * y $ 2) *\n     z $ 7 -\n     (- (x $ 1 *\n         (y $ 2 * z $ 4 + y $ 3 * z $ 7 - y $ 4 * z $ 2 + y $ 5 * z $ 6 -\n          y $ 6 * z $ 5 -\n          y $ 7 * z $ 3)) -\n      x $ 2 *\n      (- (y $ 1 * z $ 4) + y $ 3 * z $ 5 + y $ 4 * z $ 1 - y $ 5 * z $ 3 +\n       y $ 6 * z $ 7 -\n       y $ 7 * z $ 6) -\n      x $ 3 *\n      (- (y $ 1 * z $ 7) - y $ 2 * z $ 5 + y $ 4 * z $ 6 + y $ 5 * z $ 2 -\n       y $ 6 * z $ 4 +\n       y $ 7 * z $ 1) -\n      x $ 4 *\n      (y $ 1 * z $ 2 - y $ 2 * z $ 1 - y $ 3 * z $ 6 + y $ 5 * z $ 7 +\n       y $ 6 * z $ 3 -\n       y $ 7 * z $ 5) -\n      x $ 5 *\n      (- (y $ 1 * z $ 6) + y $ 2 * z $ 3 - y $ 3 * z $ 2 - y $ 4 * z $ 7 +\n       y $ 6 * z $ 1 +\n       y $ 7 * z $ 4) -\n      x $ 6 *\n      (y $ 1 * z $ 5 - y $ 2 * z $ 7 + y $ 3 * z $ 4 - y $ 4 * z $ 3 -\n       y $ 5 * z $ 1 +\n       y $ 7 * z $ 2) -\n      x $ 7 *\n      (y $ 1 * z $ 3 + y $ 2 * z $ 6 - y $ 3 * z $ 1 + y $ 4 * z $ 5 -\n       y $ 5 * z $ 4 -\n       y $ 6 * z $ 2))) \\<and>\n    x $ 2 *\n    (y $ 1 * z $ 2 - y $ 2 * z $ 1 + y $ 6 * z $ 3 - y $ 3 * z $ 6 +\n     y $ 5 * z $ 7 -\n     y $ 7 * z $ 5) -\n    x $ 4 *\n    (y $ 4 * z $ 1 - y $ 1 * z $ 4 + y $ 3 * z $ 5 - y $ 5 * z $ 3 +\n     y $ 6 * z $ 7 -\n     y $ 7 * z $ 6) +\n    x $ 3 *\n    (y $ 1 * z $ 3 - y $ 3 * z $ 1 + y $ 4 * z $ 5 - y $ 5 * z $ 4 +\n     y $ 2 * z $ 6 -\n     y $ 6 * z $ 2) -\n    x $ 7 *\n    (y $ 5 * z $ 2 - y $ 2 * z $ 5 + y $ 4 * z $ 6 - y $ 6 * z $ 4 +\n     y $ 7 * z $ 1 -\n     y $ 1 * z $ 7) +\n    x $ 5 *\n    (y $ 1 * z $ 5 - y $ 5 * z $ 1 + y $ 7 * z $ 2 - y $ 2 * z $ 7 +\n     y $ 3 * z $ 4 -\n     y $ 4 * z $ 3) -\n    x $ 6 *\n    (y $ 6 * z $ 1 - y $ 1 * z $ 6 + y $ 2 * z $ 3 - y $ 3 * z $ 2 +\n     y $ 7 * z $ 4 -\n     y $ 4 * z $ 7) +\n    (y $ 2 *\n     (z $ 1 * x $ 2 - z $ 2 * x $ 1 + z $ 6 * x $ 3 - z $ 3 * x $ 6 +\n      z $ 5 * x $ 7 -\n      z $ 7 * x $ 5) -\n     y $ 4 *\n     (z $ 4 * x $ 1 - z $ 1 * x $ 4 + z $ 3 * x $ 5 - z $ 5 * x $ 3 +\n      z $ 6 * x $ 7 -\n      z $ 7 * x $ 6) +\n     y $ 3 *\n     (z $ 1 * x $ 3 - z $ 3 * x $ 1 + z $ 4 * x $ 5 - z $ 5 * x $ 4 +\n      z $ 2 * x $ 6 -\n      z $ 6 * x $ 2) -\n     y $ 7 *\n     (z $ 5 * x $ 2 - z $ 2 * x $ 5 + z $ 4 * x $ 6 - z $ 6 * x $ 4 +\n      z $ 7 * x $ 1 -\n      z $ 1 * x $ 7) +\n     y $ 5 *\n     (z $ 1 * x $ 5 - z $ 5 * x $ 1 + z $ 7 * x $ 2 - z $ 2 * x $ 7 +\n      z $ 3 * x $ 4 -\n      z $ 4 * x $ 3) -\n     y $ 6 *\n     (z $ 6 * x $ 1 - z $ 1 * x $ 6 + z $ 2 * x $ 3 - z $ 3 * x $ 2 +\n      z $ 7 * x $ 4 -\n      z $ 4 * x $ 7)) +\n    (z $ 2 *\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 + x $ 6 * y $ 3 - x $ 3 * y $ 6 +\n      x $ 5 * y $ 7 -\n      x $ 7 * y $ 5) -\n     z $ 4 *\n     (x $ 4 * y $ 1 - x $ 1 * y $ 4 + x $ 3 * y $ 5 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) +\n     z $ 3 *\n     (x $ 1 * y $ 3 - x $ 3 * y $ 1 + x $ 4 * y $ 5 - x $ 5 * y $ 4 +\n      x $ 2 * y $ 6 -\n      x $ 6 * y $ 2) -\n     z $ 7 *\n     (x $ 5 * y $ 2 - x $ 2 * y $ 5 + x $ 4 * y $ 6 - x $ 6 * y $ 4 +\n      x $ 7 * y $ 1 -\n      x $ 1 * y $ 7) +\n     z $ 5 *\n     (x $ 1 * y $ 5 - x $ 5 * y $ 1 + x $ 7 * y $ 2 - x $ 2 * y $ 7 +\n      x $ 3 * y $ 4 -\n      x $ 4 * y $ 3) -\n     z $ 6 *\n     (x $ 6 * y $ 1 - x $ 1 * y $ 6 + x $ 2 * y $ 3 - x $ 3 * y $ 2 +\n      x $ 7 * y $ 4 -\n      x $ 4 * y $ 7)) =\n    - (3 / 2) *\n    ((- (x $ 1 * y $ 1) - x $ 2 * y $ 2 - x $ 3 * y $ 3 - x $ 4 * y $ 4 -\n      x $ 5 * y $ 5 -\n      x $ 6 * y $ 6 -\n      x $ 7 * y $ 7) *\n     z $ 1 +\n     (- (x $ 1 * y $ 4) + x $ 3 * y $ 5 + x $ 4 * y $ 1 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) *\n     z $ 4 +\n     (- (x $ 1 * y $ 7) - x $ 2 * y $ 5 + x $ 4 * y $ 6 + x $ 5 * y $ 2 -\n      x $ 6 * y $ 4 +\n      x $ 7 * y $ 1) *\n     z $ 7 -\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 - x $ 3 * y $ 6 + x $ 5 * y $ 7 +\n      x $ 6 * y $ 3 -\n      x $ 7 * y $ 5) *\n     z $ 2 +\n     (- (x $ 1 * y $ 6) + x $ 2 * y $ 3 - x $ 3 * y $ 2 - x $ 4 * y $ 7 +\n      x $ 6 * y $ 1 +\n      x $ 7 * y $ 4) *\n     z $ 6 -\n     (x $ 1 * y $ 5 - x $ 2 * y $ 7 + x $ 3 * y $ 4 - x $ 4 * y $ 3 -\n      x $ 5 * y $ 1 +\n      x $ 7 * y $ 2) *\n     z $ 5 -\n     (x $ 1 * y $ 3 + x $ 2 * y $ 6 - x $ 3 * y $ 1 + x $ 4 * y $ 5 -\n      x $ 5 * y $ 4 -\n      x $ 6 * y $ 2) *\n     z $ 3 -\n     (x $ 1 *\n      (- (y $ 1 * z $ 1) - y $ 2 * z $ 2 - y $ 3 * z $ 3 - y $ 4 * z $ 4 -\n       y $ 5 * z $ 5 -\n       y $ 6 * z $ 6 -\n       y $ 7 * z $ 7) +\n      x $ 2 *\n      (y $ 1 * z $ 2 - y $ 2 * z $ 1 - y $ 3 * z $ 6 + y $ 5 * z $ 7 +\n       y $ 6 * z $ 3 -\n       y $ 7 * z $ 5) +\n      x $ 3 *\n      (y $ 1 * z $ 3 + y $ 2 * z $ 6 - y $ 3 * z $ 1 + y $ 4 * z $ 5 -\n       y $ 5 * z $ 4 -\n       y $ 6 * z $ 2) -\n      x $ 4 *\n      (- (y $ 1 * z $ 4) + y $ 3 * z $ 5 + y $ 4 * z $ 1 - y $ 5 * z $ 3 +\n       y $ 6 * z $ 7 -\n       y $ 7 * z $ 6) +\n      x $ 5 *\n      (y $ 1 * z $ 5 - y $ 2 * z $ 7 + y $ 3 * z $ 4 - y $ 4 * z $ 3 -\n       y $ 5 * z $ 1 +\n       y $ 7 * z $ 2) -\n      x $ 6 *\n      (- (y $ 1 * z $ 6) + y $ 2 * z $ 3 - y $ 3 * z $ 2 - y $ 4 * z $ 7 +\n       y $ 6 * z $ 1 +\n       y $ 7 * z $ 4) -\n      x $ 7 *\n      (- (y $ 1 * z $ 7) - y $ 2 * z $ 5 + y $ 4 * z $ 6 + y $ 5 * z $ 2 -\n       y $ 6 * z $ 4 +\n       y $ 7 * z $ 1))) \\<and>\n    x $ 4 *\n    (y $ 2 * z $ 4 - y $ 4 * z $ 2 + y $ 3 * z $ 7 - y $ 7 * z $ 3 +\n     y $ 5 * z $ 6 -\n     y $ 6 * z $ 5) -\n    x $ 1 *\n    (y $ 1 * z $ 2 - y $ 2 * z $ 1 + y $ 6 * z $ 3 - y $ 3 * z $ 6 +\n     y $ 5 * z $ 7 -\n     y $ 7 * z $ 5) +\n    x $ 3 *\n    (y $ 6 * z $ 1 - y $ 1 * z $ 6 + y $ 2 * z $ 3 - y $ 3 * z $ 2 +\n     y $ 7 * z $ 4 -\n     y $ 4 * z $ 7) -\n    x $ 5 *\n    (y $ 5 * z $ 2 - y $ 2 * z $ 5 + y $ 4 * z $ 6 - y $ 6 * z $ 4 +\n     y $ 7 * z $ 1 -\n     y $ 1 * z $ 7) +\n    x $ 6 *\n    (y $ 1 * z $ 3 - y $ 3 * z $ 1 + y $ 4 * z $ 5 - y $ 5 * z $ 4 +\n     y $ 2 * z $ 6 -\n     y $ 6 * z $ 2) -\n    x $ 7 *\n    (y $ 1 * z $ 5 - y $ 5 * z $ 1 + y $ 7 * z $ 2 - y $ 2 * z $ 7 +\n     y $ 3 * z $ 4 -\n     y $ 4 * z $ 3) +\n    (y $ 4 *\n     (z $ 2 * x $ 4 - z $ 4 * x $ 2 + z $ 3 * x $ 7 - z $ 7 * x $ 3 +\n      z $ 5 * x $ 6 -\n      z $ 6 * x $ 5) -\n     y $ 1 *\n     (z $ 1 * x $ 2 - z $ 2 * x $ 1 + z $ 6 * x $ 3 - z $ 3 * x $ 6 +\n      z $ 5 * x $ 7 -\n      z $ 7 * x $ 5) +\n     y $ 3 *\n     (z $ 6 * x $ 1 - z $ 1 * x $ 6 + z $ 2 * x $ 3 - z $ 3 * x $ 2 +\n      z $ 7 * x $ 4 -\n      z $ 4 * x $ 7) -\n     y $ 5 *\n     (z $ 5 * x $ 2 - z $ 2 * x $ 5 + z $ 4 * x $ 6 - z $ 6 * x $ 4 +\n      z $ 7 * x $ 1 -\n      z $ 1 * x $ 7) +\n     y $ 6 *\n     (z $ 1 * x $ 3 - z $ 3 * x $ 1 + z $ 4 * x $ 5 - z $ 5 * x $ 4 +\n      z $ 2 * x $ 6 -\n      z $ 6 * x $ 2) -\n     y $ 7 *\n     (z $ 1 * x $ 5 - z $ 5 * x $ 1 + z $ 7 * x $ 2 - z $ 2 * x $ 7 +\n      z $ 3 * x $ 4 -\n      z $ 4 * x $ 3)) +\n    (z $ 4 *\n     (x $ 2 * y $ 4 - x $ 4 * y $ 2 + x $ 3 * y $ 7 - x $ 7 * y $ 3 +\n      x $ 5 * y $ 6 -\n      x $ 6 * y $ 5) -\n     z $ 1 *\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 + x $ 6 * y $ 3 - x $ 3 * y $ 6 +\n      x $ 5 * y $ 7 -\n      x $ 7 * y $ 5) +\n     z $ 3 *\n     (x $ 6 * y $ 1 - x $ 1 * y $ 6 + x $ 2 * y $ 3 - x $ 3 * y $ 2 +\n      x $ 7 * y $ 4 -\n      x $ 4 * y $ 7) -\n     z $ 5 *\n     (x $ 5 * y $ 2 - x $ 2 * y $ 5 + x $ 4 * y $ 6 - x $ 6 * y $ 4 +\n      x $ 7 * y $ 1 -\n      x $ 1 * y $ 7) +\n     z $ 6 *\n     (x $ 1 * y $ 3 - x $ 3 * y $ 1 + x $ 4 * y $ 5 - x $ 5 * y $ 4 +\n      x $ 2 * y $ 6 -\n      x $ 6 * y $ 2) -\n     z $ 7 *\n     (x $ 1 * y $ 5 - x $ 5 * y $ 1 + x $ 7 * y $ 2 - x $ 2 * y $ 7 +\n      x $ 3 * y $ 4 -\n      x $ 4 * y $ 3)) =\n    - (3 / 2) *\n    ((- (x $ 1 * y $ 1) - x $ 2 * y $ 2 - x $ 3 * y $ 3 - x $ 4 * y $ 4 -\n      x $ 5 * y $ 5 -\n      x $ 6 * y $ 6 -\n      x $ 7 * y $ 7) *\n     z $ 2 -\n     (x $ 2 * y $ 4 + x $ 3 * y $ 7 - x $ 4 * y $ 2 + x $ 5 * y $ 6 -\n      x $ 6 * y $ 5 -\n      x $ 7 * y $ 3) *\n     z $ 4 +\n     (- (x $ 1 * y $ 7) - x $ 2 * y $ 5 + x $ 4 * y $ 6 + x $ 5 * y $ 2 -\n      x $ 6 * y $ 4 +\n      x $ 7 * y $ 1) *\n     z $ 5 +\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 - x $ 3 * y $ 6 + x $ 5 * y $ 7 +\n      x $ 6 * y $ 3 -\n      x $ 7 * y $ 5) *\n     z $ 1 -\n     (- (x $ 1 * y $ 6) + x $ 2 * y $ 3 - x $ 3 * y $ 2 - x $ 4 * y $ 7 +\n      x $ 6 * y $ 1 +\n      x $ 7 * y $ 4) *\n     z $ 3 +\n     (x $ 1 * y $ 5 - x $ 2 * y $ 7 + x $ 3 * y $ 4 - x $ 4 * y $ 3 -\n      x $ 5 * y $ 1 +\n      x $ 7 * y $ 2) *\n     z $ 7 -\n     (x $ 1 * y $ 3 + x $ 2 * y $ 6 - x $ 3 * y $ 1 + x $ 4 * y $ 5 -\n      x $ 5 * y $ 4 -\n      x $ 6 * y $ 2) *\n     z $ 6 -\n     (- (x $ 1 *\n         (y $ 1 * z $ 2 - y $ 2 * z $ 1 - y $ 3 * z $ 6 + y $ 5 * z $ 7 +\n          y $ 6 * z $ 3 -\n          y $ 7 * z $ 5)) +\n      x $ 2 *\n      (- (y $ 1 * z $ 1) - y $ 2 * z $ 2 - y $ 3 * z $ 3 - y $ 4 * z $ 4 -\n       y $ 5 * z $ 5 -\n       y $ 6 * z $ 6 -\n       y $ 7 * z $ 7) +\n      x $ 3 *\n      (- (y $ 1 * z $ 6) + y $ 2 * z $ 3 - y $ 3 * z $ 2 - y $ 4 * z $ 7 +\n       y $ 6 * z $ 1 +\n       y $ 7 * z $ 4) +\n      x $ 4 *\n      (y $ 2 * z $ 4 + y $ 3 * z $ 7 - y $ 4 * z $ 2 + y $ 5 * z $ 6 -\n       y $ 6 * z $ 5 -\n       y $ 7 * z $ 3) -\n      x $ 5 *\n      (- (y $ 1 * z $ 7) - y $ 2 * z $ 5 + y $ 4 * z $ 6 + y $ 5 * z $ 2 -\n       y $ 6 * z $ 4 +\n       y $ 7 * z $ 1) +\n      x $ 6 *\n      (y $ 1 * z $ 3 + y $ 2 * z $ 6 - y $ 3 * z $ 1 + y $ 4 * z $ 5 -\n       y $ 5 * z $ 4 -\n       y $ 6 * z $ 2) -\n      x $ 7 *\n      (y $ 1 * z $ 5 - y $ 2 * z $ 7 + y $ 3 * z $ 4 - y $ 4 * z $ 3 -\n       y $ 5 * z $ 1 +\n       y $ 7 * z $ 2))) \\<and>\n    x $ 5 *\n    (y $ 4 * z $ 1 - y $ 1 * z $ 4 + y $ 3 * z $ 5 - y $ 5 * z $ 3 +\n     y $ 6 * z $ 7 -\n     y $ 7 * z $ 6) -\n    x $ 2 *\n    (y $ 6 * z $ 1 - y $ 1 * z $ 6 + y $ 2 * z $ 3 - y $ 3 * z $ 2 +\n     y $ 7 * z $ 4 -\n     y $ 4 * z $ 7) +\n    x $ 4 *\n    (y $ 1 * z $ 5 - y $ 5 * z $ 1 + y $ 7 * z $ 2 - y $ 2 * z $ 7 +\n     y $ 3 * z $ 4 -\n     y $ 4 * z $ 3) -\n    x $ 6 *\n    (y $ 1 * z $ 2 - y $ 2 * z $ 1 + y $ 6 * z $ 3 - y $ 3 * z $ 6 +\n     y $ 5 * z $ 7 -\n     y $ 7 * z $ 5) +\n    x $ 7 *\n    (y $ 2 * z $ 4 - y $ 4 * z $ 2 + y $ 3 * z $ 7 - y $ 7 * z $ 3 +\n     y $ 5 * z $ 6 -\n     y $ 6 * z $ 5) -\n    x $ 1 *\n    (y $ 1 * z $ 3 - y $ 3 * z $ 1 + y $ 4 * z $ 5 - y $ 5 * z $ 4 +\n     y $ 2 * z $ 6 -\n     y $ 6 * z $ 2) +\n    (y $ 5 *\n     (z $ 4 * x $ 1 - z $ 1 * x $ 4 + z $ 3 * x $ 5 - z $ 5 * x $ 3 +\n      z $ 6 * x $ 7 -\n      z $ 7 * x $ 6) -\n     y $ 2 *\n     (z $ 6 * x $ 1 - z $ 1 * x $ 6 + z $ 2 * x $ 3 - z $ 3 * x $ 2 +\n      z $ 7 * x $ 4 -\n      z $ 4 * x $ 7) +\n     y $ 4 *\n     (z $ 1 * x $ 5 - z $ 5 * x $ 1 + z $ 7 * x $ 2 - z $ 2 * x $ 7 +\n      z $ 3 * x $ 4 -\n      z $ 4 * x $ 3) -\n     y $ 6 *\n     (z $ 1 * x $ 2 - z $ 2 * x $ 1 + z $ 6 * x $ 3 - z $ 3 * x $ 6 +\n      z $ 5 * x $ 7 -\n      z $ 7 * x $ 5) +\n     y $ 7 *\n     (z $ 2 * x $ 4 - z $ 4 * x $ 2 + z $ 3 * x $ 7 - z $ 7 * x $ 3 +\n      z $ 5 * x $ 6 -\n      z $ 6 * x $ 5) -\n     y $ 1 *\n     (z $ 1 * x $ 3 - z $ 3 * x $ 1 + z $ 4 * x $ 5 - z $ 5 * x $ 4 +\n      z $ 2 * x $ 6 -\n      z $ 6 * x $ 2)) +\n    (z $ 5 *\n     (x $ 4 * y $ 1 - x $ 1 * y $ 4 + x $ 3 * y $ 5 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) -\n     z $ 2 *\n     (x $ 6 * y $ 1 - x $ 1 * y $ 6 + x $ 2 * y $ 3 - x $ 3 * y $ 2 +\n      x $ 7 * y $ 4 -\n      x $ 4 * y $ 7) +\n     z $ 4 *\n     (x $ 1 * y $ 5 - x $ 5 * y $ 1 + x $ 7 * y $ 2 - x $ 2 * y $ 7 +\n      x $ 3 * y $ 4 -\n      x $ 4 * y $ 3) -\n     z $ 6 *\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 + x $ 6 * y $ 3 - x $ 3 * y $ 6 +\n      x $ 5 * y $ 7 -\n      x $ 7 * y $ 5) +\n     z $ 7 *\n     (x $ 2 * y $ 4 - x $ 4 * y $ 2 + x $ 3 * y $ 7 - x $ 7 * y $ 3 +\n      x $ 5 * y $ 6 -\n      x $ 6 * y $ 5) -\n     z $ 1 *\n     (x $ 1 * y $ 3 - x $ 3 * y $ 1 + x $ 4 * y $ 5 - x $ 5 * y $ 4 +\n      x $ 2 * y $ 6 -\n      x $ 6 * y $ 2)) =\n    - (3 / 2) *\n    ((- (x $ 1 * y $ 1) - x $ 2 * y $ 2 - x $ 3 * y $ 3 - x $ 4 * y $ 4 -\n      x $ 5 * y $ 5 -\n      x $ 6 * y $ 6 -\n      x $ 7 * y $ 7) *\n     z $ 3 -\n     (x $ 2 * y $ 4 + x $ 3 * y $ 7 - x $ 4 * y $ 2 + x $ 5 * y $ 6 -\n      x $ 6 * y $ 5 -\n      x $ 7 * y $ 3) *\n     z $ 7 -\n     (- (x $ 1 * y $ 4) + x $ 3 * y $ 5 + x $ 4 * y $ 1 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) *\n     z $ 5 +\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 - x $ 3 * y $ 6 + x $ 5 * y $ 7 +\n      x $ 6 * y $ 3 -\n      x $ 7 * y $ 5) *\n     z $ 6 +\n     (- (x $ 1 * y $ 6) + x $ 2 * y $ 3 - x $ 3 * y $ 2 - x $ 4 * y $ 7 +\n      x $ 6 * y $ 1 +\n      x $ 7 * y $ 4) *\n     z $ 2 -\n     (x $ 1 * y $ 5 - x $ 2 * y $ 7 + x $ 3 * y $ 4 - x $ 4 * y $ 3 -\n      x $ 5 * y $ 1 +\n      x $ 7 * y $ 2) *\n     z $ 4 +\n     (x $ 1 * y $ 3 + x $ 2 * y $ 6 - x $ 3 * y $ 1 + x $ 4 * y $ 5 -\n      x $ 5 * y $ 4 -\n      x $ 6 * y $ 2) *\n     z $ 1 -\n     (- (x $ 1 *\n         (y $ 1 * z $ 3 + y $ 2 * z $ 6 - y $ 3 * z $ 1 + y $ 4 * z $ 5 -\n          y $ 5 * z $ 4 -\n          y $ 6 * z $ 2)) -\n      x $ 2 *\n      (- (y $ 1 * z $ 6) + y $ 2 * z $ 3 - y $ 3 * z $ 2 - y $ 4 * z $ 7 +\n       y $ 6 * z $ 1 +\n       y $ 7 * z $ 4) +\n      x $ 3 *\n      (- (y $ 1 * z $ 1) - y $ 2 * z $ 2 - y $ 3 * z $ 3 - y $ 4 * z $ 4 -\n       y $ 5 * z $ 5 -\n       y $ 6 * z $ 6 -\n       y $ 7 * z $ 7) +\n      x $ 4 *\n      (y $ 1 * z $ 5 - y $ 2 * z $ 7 + y $ 3 * z $ 4 - y $ 4 * z $ 3 -\n       y $ 5 * z $ 1 +\n       y $ 7 * z $ 2) +\n      x $ 5 *\n      (- (y $ 1 * z $ 4) + y $ 3 * z $ 5 + y $ 4 * z $ 1 - y $ 5 * z $ 3 +\n       y $ 6 * z $ 7 -\n       y $ 7 * z $ 6) -\n      x $ 6 *\n      (y $ 1 * z $ 2 - y $ 2 * z $ 1 - y $ 3 * z $ 6 + y $ 5 * z $ 7 +\n       y $ 6 * z $ 3 -\n       y $ 7 * z $ 5) +\n      x $ 7 *\n      (y $ 2 * z $ 4 + y $ 3 * z $ 7 - y $ 4 * z $ 2 + y $ 5 * z $ 6 -\n       y $ 6 * z $ 5 -\n       y $ 7 * z $ 3))) \\<and>\n    x $ 1 *\n    (y $ 4 * z $ 1 - y $ 1 * z $ 4 + y $ 3 * z $ 5 - y $ 5 * z $ 3 +\n     y $ 6 * z $ 7 -\n     y $ 7 * z $ 6) -\n    x $ 2 *\n    (y $ 2 * z $ 4 - y $ 4 * z $ 2 + y $ 3 * z $ 7 - y $ 7 * z $ 3 +\n     y $ 5 * z $ 6 -\n     y $ 6 * z $ 5) +\n    x $ 6 *\n    (y $ 5 * z $ 2 - y $ 2 * z $ 5 + y $ 4 * z $ 6 - y $ 6 * z $ 4 +\n     y $ 7 * z $ 1 -\n     y $ 1 * z $ 7) -\n    x $ 3 *\n    (y $ 1 * z $ 5 - y $ 5 * z $ 1 + y $ 7 * z $ 2 - y $ 2 * z $ 7 +\n     y $ 3 * z $ 4 -\n     y $ 4 * z $ 3) +\n    x $ 5 *\n    (y $ 1 * z $ 3 - y $ 3 * z $ 1 + y $ 4 * z $ 5 - y $ 5 * z $ 4 +\n     y $ 2 * z $ 6 -\n     y $ 6 * z $ 2) -\n    x $ 7 *\n    (y $ 6 * z $ 1 - y $ 1 * z $ 6 + y $ 2 * z $ 3 - y $ 3 * z $ 2 +\n     y $ 7 * z $ 4 -\n     y $ 4 * z $ 7) +\n    (y $ 1 *\n     (z $ 4 * x $ 1 - z $ 1 * x $ 4 + z $ 3 * x $ 5 - z $ 5 * x $ 3 +\n      z $ 6 * x $ 7 -\n      z $ 7 * x $ 6) -\n     y $ 2 *\n     (z $ 2 * x $ 4 - z $ 4 * x $ 2 + z $ 3 * x $ 7 - z $ 7 * x $ 3 +\n      z $ 5 * x $ 6 -\n      z $ 6 * x $ 5) +\n     y $ 6 *\n     (z $ 5 * x $ 2 - z $ 2 * x $ 5 + z $ 4 * x $ 6 - z $ 6 * x $ 4 +\n      z $ 7 * x $ 1 -\n      z $ 1 * x $ 7) -\n     y $ 3 *\n     (z $ 1 * x $ 5 - z $ 5 * x $ 1 + z $ 7 * x $ 2 - z $ 2 * x $ 7 +\n      z $ 3 * x $ 4 -\n      z $ 4 * x $ 3) +\n     y $ 5 *\n     (z $ 1 * x $ 3 - z $ 3 * x $ 1 + z $ 4 * x $ 5 - z $ 5 * x $ 4 +\n      z $ 2 * x $ 6 -\n      z $ 6 * x $ 2) -\n     y $ 7 *\n     (z $ 6 * x $ 1 - z $ 1 * x $ 6 + z $ 2 * x $ 3 - z $ 3 * x $ 2 +\n      z $ 7 * x $ 4 -\n      z $ 4 * x $ 7)) +\n    (z $ 1 *\n     (x $ 4 * y $ 1 - x $ 1 * y $ 4 + x $ 3 * y $ 5 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) -\n     z $ 2 *\n     (x $ 2 * y $ 4 - x $ 4 * y $ 2 + x $ 3 * y $ 7 - x $ 7 * y $ 3 +\n      x $ 5 * y $ 6 -\n      x $ 6 * y $ 5) +\n     z $ 6 *\n     (x $ 5 * y $ 2 - x $ 2 * y $ 5 + x $ 4 * y $ 6 - x $ 6 * y $ 4 +\n      x $ 7 * y $ 1 -\n      x $ 1 * y $ 7) -\n     z $ 3 *\n     (x $ 1 * y $ 5 - x $ 5 * y $ 1 + x $ 7 * y $ 2 - x $ 2 * y $ 7 +\n      x $ 3 * y $ 4 -\n      x $ 4 * y $ 3) +\n     z $ 5 *\n     (x $ 1 * y $ 3 - x $ 3 * y $ 1 + x $ 4 * y $ 5 - x $ 5 * y $ 4 +\n      x $ 2 * y $ 6 -\n      x $ 6 * y $ 2) -\n     z $ 7 *\n     (x $ 6 * y $ 1 - x $ 1 * y $ 6 + x $ 2 * y $ 3 - x $ 3 * y $ 2 +\n      x $ 7 * y $ 4 -\n      x $ 4 * y $ 7)) =\n    - (3 / 2) *\n    ((- (x $ 1 * y $ 1) - x $ 2 * y $ 2 - x $ 3 * y $ 3 - x $ 4 * y $ 4 -\n      x $ 5 * y $ 5 -\n      x $ 6 * y $ 6 -\n      x $ 7 * y $ 7) *\n     z $ 4 +\n     (x $ 2 * y $ 4 + x $ 3 * y $ 7 - x $ 4 * y $ 2 + x $ 5 * y $ 6 -\n      x $ 6 * y $ 5 -\n      x $ 7 * y $ 3) *\n     z $ 2 -\n     (- (x $ 1 * y $ 4) + x $ 3 * y $ 5 + x $ 4 * y $ 1 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) *\n     z $ 1 -\n     (- (x $ 1 * y $ 7) - x $ 2 * y $ 5 + x $ 4 * y $ 6 + x $ 5 * y $ 2 -\n      x $ 6 * y $ 4 +\n      x $ 7 * y $ 1) *\n     z $ 6 +\n     (- (x $ 1 * y $ 6) + x $ 2 * y $ 3 - x $ 3 * y $ 2 - x $ 4 * y $ 7 +\n      x $ 6 * y $ 1 +\n      x $ 7 * y $ 4) *\n     z $ 7 +\n     (x $ 1 * y $ 5 - x $ 2 * y $ 7 + x $ 3 * y $ 4 - x $ 4 * y $ 3 -\n      x $ 5 * y $ 1 +\n      x $ 7 * y $ 2) *\n     z $ 3 -\n     (x $ 1 * y $ 3 + x $ 2 * y $ 6 - x $ 3 * y $ 1 + x $ 4 * y $ 5 -\n      x $ 5 * y $ 4 -\n      x $ 6 * y $ 2) *\n     z $ 5 -\n     (x $ 1 *\n      (- (y $ 1 * z $ 4) + y $ 3 * z $ 5 + y $ 4 * z $ 1 - y $ 5 * z $ 3 +\n       y $ 6 * z $ 7 -\n       y $ 7 * z $ 6) -\n      x $ 2 *\n      (y $ 2 * z $ 4 + y $ 3 * z $ 7 - y $ 4 * z $ 2 + y $ 5 * z $ 6 -\n       y $ 6 * z $ 5 -\n       y $ 7 * z $ 3) -\n      x $ 3 *\n      (y $ 1 * z $ 5 - y $ 2 * z $ 7 + y $ 3 * z $ 4 - y $ 4 * z $ 3 -\n       y $ 5 * z $ 1 +\n       y $ 7 * z $ 2) +\n      x $ 4 *\n      (- (y $ 1 * z $ 1) - y $ 2 * z $ 2 - y $ 3 * z $ 3 - y $ 4 * z $ 4 -\n       y $ 5 * z $ 5 -\n       y $ 6 * z $ 6 -\n       y $ 7 * z $ 7) +\n      x $ 5 *\n      (y $ 1 * z $ 3 + y $ 2 * z $ 6 - y $ 3 * z $ 1 + y $ 4 * z $ 5 -\n       y $ 5 * z $ 4 -\n       y $ 6 * z $ 2) +\n      x $ 6 *\n      (- (y $ 1 * z $ 7) - y $ 2 * z $ 5 + y $ 4 * z $ 6 + y $ 5 * z $ 2 -\n       y $ 6 * z $ 4 +\n       y $ 7 * z $ 1) -\n      x $ 7 *\n      (- (y $ 1 * z $ 6) + y $ 2 * z $ 3 - y $ 3 * z $ 2 - y $ 4 * z $ 7 +\n       y $ 6 * z $ 1 +\n       y $ 7 * z $ 4))) \\<and>\n    x $ 6 *\n    (y $ 2 * z $ 4 - y $ 4 * z $ 2 + y $ 3 * z $ 7 - y $ 7 * z $ 3 +\n     y $ 5 * z $ 6 -\n     y $ 6 * z $ 5) -\n    x $ 1 *\n    (y $ 1 * z $ 5 - y $ 5 * z $ 1 + y $ 7 * z $ 2 - y $ 2 * z $ 7 +\n     y $ 3 * z $ 4 -\n     y $ 4 * z $ 3) +\n    x $ 2 *\n    (y $ 5 * z $ 2 - y $ 2 * z $ 5 + y $ 4 * z $ 6 - y $ 6 * z $ 4 +\n     y $ 7 * z $ 1 -\n     y $ 1 * z $ 7) -\n    x $ 3 *\n    (y $ 4 * z $ 1 - y $ 1 * z $ 4 + y $ 3 * z $ 5 - y $ 5 * z $ 3 +\n     y $ 6 * z $ 7 -\n     y $ 7 * z $ 6) +\n    x $ 7 *\n    (y $ 1 * z $ 2 - y $ 2 * z $ 1 + y $ 6 * z $ 3 - y $ 3 * z $ 6 +\n     y $ 5 * z $ 7 -\n     y $ 7 * z $ 5) -\n    x $ 4 *\n    (y $ 1 * z $ 3 - y $ 3 * z $ 1 + y $ 4 * z $ 5 - y $ 5 * z $ 4 +\n     y $ 2 * z $ 6 -\n     y $ 6 * z $ 2) +\n    (y $ 6 *\n     (z $ 2 * x $ 4 - z $ 4 * x $ 2 + z $ 3 * x $ 7 - z $ 7 * x $ 3 +\n      z $ 5 * x $ 6 -\n      z $ 6 * x $ 5) -\n     y $ 1 *\n     (z $ 1 * x $ 5 - z $ 5 * x $ 1 + z $ 7 * x $ 2 - z $ 2 * x $ 7 +\n      z $ 3 * x $ 4 -\n      z $ 4 * x $ 3) +\n     y $ 2 *\n     (z $ 5 * x $ 2 - z $ 2 * x $ 5 + z $ 4 * x $ 6 - z $ 6 * x $ 4 +\n      z $ 7 * x $ 1 -\n      z $ 1 * x $ 7) -\n     y $ 3 *\n     (z $ 4 * x $ 1 - z $ 1 * x $ 4 + z $ 3 * x $ 5 - z $ 5 * x $ 3 +\n      z $ 6 * x $ 7 -\n      z $ 7 * x $ 6) +\n     y $ 7 *\n     (z $ 1 * x $ 2 - z $ 2 * x $ 1 + z $ 6 * x $ 3 - z $ 3 * x $ 6 +\n      z $ 5 * x $ 7 -\n      z $ 7 * x $ 5) -\n     y $ 4 *\n     (z $ 1 * x $ 3 - z $ 3 * x $ 1 + z $ 4 * x $ 5 - z $ 5 * x $ 4 +\n      z $ 2 * x $ 6 -\n      z $ 6 * x $ 2)) +\n    (z $ 6 *\n     (x $ 2 * y $ 4 - x $ 4 * y $ 2 + x $ 3 * y $ 7 - x $ 7 * y $ 3 +\n      x $ 5 * y $ 6 -\n      x $ 6 * y $ 5) -\n     z $ 1 *\n     (x $ 1 * y $ 5 - x $ 5 * y $ 1 + x $ 7 * y $ 2 - x $ 2 * y $ 7 +\n      x $ 3 * y $ 4 -\n      x $ 4 * y $ 3) +\n     z $ 2 *\n     (x $ 5 * y $ 2 - x $ 2 * y $ 5 + x $ 4 * y $ 6 - x $ 6 * y $ 4 +\n      x $ 7 * y $ 1 -\n      x $ 1 * y $ 7) -\n     z $ 3 *\n     (x $ 4 * y $ 1 - x $ 1 * y $ 4 + x $ 3 * y $ 5 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) +\n     z $ 7 *\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 + x $ 6 * y $ 3 - x $ 3 * y $ 6 +\n      x $ 5 * y $ 7 -\n      x $ 7 * y $ 5) -\n     z $ 4 *\n     (x $ 1 * y $ 3 - x $ 3 * y $ 1 + x $ 4 * y $ 5 - x $ 5 * y $ 4 +\n      x $ 2 * y $ 6 -\n      x $ 6 * y $ 2)) =\n    - (3 / 2) *\n    ((- (x $ 1 * y $ 1) - x $ 2 * y $ 2 - x $ 3 * y $ 3 - x $ 4 * y $ 4 -\n      x $ 5 * y $ 5 -\n      x $ 6 * y $ 6 -\n      x $ 7 * y $ 7) *\n     z $ 5 -\n     (x $ 2 * y $ 4 + x $ 3 * y $ 7 - x $ 4 * y $ 2 + x $ 5 * y $ 6 -\n      x $ 6 * y $ 5 -\n      x $ 7 * y $ 3) *\n     z $ 6 +\n     (- (x $ 1 * y $ 4) + x $ 3 * y $ 5 + x $ 4 * y $ 1 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) *\n     z $ 3 -\n     (- (x $ 1 * y $ 7) - x $ 2 * y $ 5 + x $ 4 * y $ 6 + x $ 5 * y $ 2 -\n      x $ 6 * y $ 4 +\n      x $ 7 * y $ 1) *\n     z $ 2 -\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 - x $ 3 * y $ 6 + x $ 5 * y $ 7 +\n      x $ 6 * y $ 3 -\n      x $ 7 * y $ 5) *\n     z $ 7 +\n     (x $ 1 * y $ 5 - x $ 2 * y $ 7 + x $ 3 * y $ 4 - x $ 4 * y $ 3 -\n      x $ 5 * y $ 1 +\n      x $ 7 * y $ 2) *\n     z $ 1 +\n     (x $ 1 * y $ 3 + x $ 2 * y $ 6 - x $ 3 * y $ 1 + x $ 4 * y $ 5 -\n      x $ 5 * y $ 4 -\n      x $ 6 * y $ 2) *\n     z $ 4 -\n     (- (x $ 1 *\n         (y $ 1 * z $ 5 - y $ 2 * z $ 7 + y $ 3 * z $ 4 - y $ 4 * z $ 3 -\n          y $ 5 * z $ 1 +\n          y $ 7 * z $ 2)) +\n      x $ 2 *\n      (- (y $ 1 * z $ 7) - y $ 2 * z $ 5 + y $ 4 * z $ 6 + y $ 5 * z $ 2 -\n       y $ 6 * z $ 4 +\n       y $ 7 * z $ 1) -\n      x $ 3 *\n      (- (y $ 1 * z $ 4) + y $ 3 * z $ 5 + y $ 4 * z $ 1 - y $ 5 * z $ 3 +\n       y $ 6 * z $ 7 -\n       y $ 7 * z $ 6) -\n      x $ 4 *\n      (y $ 1 * z $ 3 + y $ 2 * z $ 6 - y $ 3 * z $ 1 + y $ 4 * z $ 5 -\n       y $ 5 * z $ 4 -\n       y $ 6 * z $ 2) +\n      x $ 5 *\n      (- (y $ 1 * z $ 1) - y $ 2 * z $ 2 - y $ 3 * z $ 3 - y $ 4 * z $ 4 -\n       y $ 5 * z $ 5 -\n       y $ 6 * z $ 6 -\n       y $ 7 * z $ 7) +\n      x $ 6 *\n      (y $ 2 * z $ 4 + y $ 3 * z $ 7 - y $ 4 * z $ 2 + y $ 5 * z $ 6 -\n       y $ 6 * z $ 5 -\n       y $ 7 * z $ 3) +\n      x $ 7 *\n      (y $ 1 * z $ 2 - y $ 2 * z $ 1 - y $ 3 * z $ 6 + y $ 5 * z $ 7 +\n       y $ 6 * z $ 3 -\n       y $ 7 * z $ 5))) \\<and>\n    x $ 1 *\n    (y $ 6 * z $ 1 - y $ 1 * z $ 6 + y $ 2 * z $ 3 - y $ 3 * z $ 2 +\n     y $ 7 * z $ 4 -\n     y $ 4 * z $ 7) -\n    x $ 5 *\n    (y $ 2 * z $ 4 - y $ 4 * z $ 2 + y $ 3 * z $ 7 - y $ 7 * z $ 3 +\n     y $ 5 * z $ 6 -\n     y $ 6 * z $ 5) +\n    x $ 7 *\n    (y $ 4 * z $ 1 - y $ 1 * z $ 4 + y $ 3 * z $ 5 - y $ 5 * z $ 3 +\n     y $ 6 * z $ 7 -\n     y $ 7 * z $ 6) -\n    x $ 2 *\n    (y $ 1 * z $ 3 - y $ 3 * z $ 1 + y $ 4 * z $ 5 - y $ 5 * z $ 4 +\n     y $ 2 * z $ 6 -\n     y $ 6 * z $ 2) +\n    x $ 3 *\n    (y $ 1 * z $ 2 - y $ 2 * z $ 1 + y $ 6 * z $ 3 - y $ 3 * z $ 6 +\n     y $ 5 * z $ 7 -\n     y $ 7 * z $ 5) -\n    x $ 4 *\n    (y $ 5 * z $ 2 - y $ 2 * z $ 5 + y $ 4 * z $ 6 - y $ 6 * z $ 4 +\n     y $ 7 * z $ 1 -\n     y $ 1 * z $ 7) +\n    (y $ 1 *\n     (z $ 6 * x $ 1 - z $ 1 * x $ 6 + z $ 2 * x $ 3 - z $ 3 * x $ 2 +\n      z $ 7 * x $ 4 -\n      z $ 4 * x $ 7) -\n     y $ 5 *\n     (z $ 2 * x $ 4 - z $ 4 * x $ 2 + z $ 3 * x $ 7 - z $ 7 * x $ 3 +\n      z $ 5 * x $ 6 -\n      z $ 6 * x $ 5) +\n     y $ 7 *\n     (z $ 4 * x $ 1 - z $ 1 * x $ 4 + z $ 3 * x $ 5 - z $ 5 * x $ 3 +\n      z $ 6 * x $ 7 -\n      z $ 7 * x $ 6) -\n     y $ 2 *\n     (z $ 1 * x $ 3 - z $ 3 * x $ 1 + z $ 4 * x $ 5 - z $ 5 * x $ 4 +\n      z $ 2 * x $ 6 -\n      z $ 6 * x $ 2) +\n     y $ 3 *\n     (z $ 1 * x $ 2 - z $ 2 * x $ 1 + z $ 6 * x $ 3 - z $ 3 * x $ 6 +\n      z $ 5 * x $ 7 -\n      z $ 7 * x $ 5) -\n     y $ 4 *\n     (z $ 5 * x $ 2 - z $ 2 * x $ 5 + z $ 4 * x $ 6 - z $ 6 * x $ 4 +\n      z $ 7 * x $ 1 -\n      z $ 1 * x $ 7)) +\n    (z $ 1 *\n     (x $ 6 * y $ 1 - x $ 1 * y $ 6 + x $ 2 * y $ 3 - x $ 3 * y $ 2 +\n      x $ 7 * y $ 4 -\n      x $ 4 * y $ 7) -\n     z $ 5 *\n     (x $ 2 * y $ 4 - x $ 4 * y $ 2 + x $ 3 * y $ 7 - x $ 7 * y $ 3 +\n      x $ 5 * y $ 6 -\n      x $ 6 * y $ 5) +\n     z $ 7 *\n     (x $ 4 * y $ 1 - x $ 1 * y $ 4 + x $ 3 * y $ 5 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) -\n     z $ 2 *\n     (x $ 1 * y $ 3 - x $ 3 * y $ 1 + x $ 4 * y $ 5 - x $ 5 * y $ 4 +\n      x $ 2 * y $ 6 -\n      x $ 6 * y $ 2) +\n     z $ 3 *\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 + x $ 6 * y $ 3 - x $ 3 * y $ 6 +\n      x $ 5 * y $ 7 -\n      x $ 7 * y $ 5) -\n     z $ 4 *\n     (x $ 5 * y $ 2 - x $ 2 * y $ 5 + x $ 4 * y $ 6 - x $ 6 * y $ 4 +\n      x $ 7 * y $ 1 -\n      x $ 1 * y $ 7)) =\n    - (3 / 2) *\n    ((- (x $ 1 * y $ 1) - x $ 2 * y $ 2 - x $ 3 * y $ 3 - x $ 4 * y $ 4 -\n      x $ 5 * y $ 5 -\n      x $ 6 * y $ 6 -\n      x $ 7 * y $ 7) *\n     z $ 6 +\n     (x $ 2 * y $ 4 + x $ 3 * y $ 7 - x $ 4 * y $ 2 + x $ 5 * y $ 6 -\n      x $ 6 * y $ 5 -\n      x $ 7 * y $ 3) *\n     z $ 5 -\n     (- (x $ 1 * y $ 4) + x $ 3 * y $ 5 + x $ 4 * y $ 1 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) *\n     z $ 7 +\n     (- (x $ 1 * y $ 7) - x $ 2 * y $ 5 + x $ 4 * y $ 6 + x $ 5 * y $ 2 -\n      x $ 6 * y $ 4 +\n      x $ 7 * y $ 1) *\n     z $ 4 -\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 - x $ 3 * y $ 6 + x $ 5 * y $ 7 +\n      x $ 6 * y $ 3 -\n      x $ 7 * y $ 5) *\n     z $ 3 -\n     (- (x $ 1 * y $ 6) + x $ 2 * y $ 3 - x $ 3 * y $ 2 - x $ 4 * y $ 7 +\n      x $ 6 * y $ 1 +\n      x $ 7 * y $ 4) *\n     z $ 1 +\n     (x $ 1 * y $ 3 + x $ 2 * y $ 6 - x $ 3 * y $ 1 + x $ 4 * y $ 5 -\n      x $ 5 * y $ 4 -\n      x $ 6 * y $ 2) *\n     z $ 2 -\n     (x $ 1 *\n      (- (y $ 1 * z $ 6) + y $ 2 * z $ 3 - y $ 3 * z $ 2 - y $ 4 * z $ 7 +\n       y $ 6 * z $ 1 +\n       y $ 7 * z $ 4) -\n      x $ 2 *\n      (y $ 1 * z $ 3 + y $ 2 * z $ 6 - y $ 3 * z $ 1 + y $ 4 * z $ 5 -\n       y $ 5 * z $ 4 -\n       y $ 6 * z $ 2) +\n      x $ 3 *\n      (y $ 1 * z $ 2 - y $ 2 * z $ 1 - y $ 3 * z $ 6 + y $ 5 * z $ 7 +\n       y $ 6 * z $ 3 -\n       y $ 7 * z $ 5) -\n      x $ 4 *\n      (- (y $ 1 * z $ 7) - y $ 2 * z $ 5 + y $ 4 * z $ 6 + y $ 5 * z $ 2 -\n       y $ 6 * z $ 4 +\n       y $ 7 * z $ 1) -\n      x $ 5 *\n      (y $ 2 * z $ 4 + y $ 3 * z $ 7 - y $ 4 * z $ 2 + y $ 5 * z $ 6 -\n       y $ 6 * z $ 5 -\n       y $ 7 * z $ 3) +\n      x $ 6 *\n      (- (y $ 1 * z $ 1) - y $ 2 * z $ 2 - y $ 3 * z $ 3 - y $ 4 * z $ 4 -\n       y $ 5 * z $ 5 -\n       y $ 6 * z $ 6 -\n       y $ 7 * z $ 7) +\n      x $ 7 *\n      (- (y $ 1 * z $ 4) + y $ 3 * z $ 5 + y $ 4 * z $ 1 - y $ 5 * z $ 3 +\n       y $ 6 * z $ 7 -\n       y $ 7 * z $ 6))) \\<and>\n    x $ 1 *\n    (y $ 5 * z $ 2 - y $ 2 * z $ 5 + y $ 4 * z $ 6 - y $ 6 * z $ 4 +\n     y $ 7 * z $ 1 -\n     y $ 1 * z $ 7) -\n    x $ 3 *\n    (y $ 2 * z $ 4 - y $ 4 * z $ 2 + y $ 3 * z $ 7 - y $ 7 * z $ 3 +\n     y $ 5 * z $ 6 -\n     y $ 6 * z $ 5) +\n    x $ 4 *\n    (y $ 6 * z $ 1 - y $ 1 * z $ 6 + y $ 2 * z $ 3 - y $ 3 * z $ 2 +\n     y $ 7 * z $ 4 -\n     y $ 4 * z $ 7) -\n    x $ 5 *\n    (y $ 1 * z $ 2 - y $ 2 * z $ 1 + y $ 6 * z $ 3 - y $ 3 * z $ 6 +\n     y $ 5 * z $ 7 -\n     y $ 7 * z $ 5) +\n    x $ 2 *\n    (y $ 1 * z $ 5 - y $ 5 * z $ 1 + y $ 7 * z $ 2 - y $ 2 * z $ 7 +\n     y $ 3 * z $ 4 -\n     y $ 4 * z $ 3) -\n    x $ 6 *\n    (y $ 4 * z $ 1 - y $ 1 * z $ 4 + y $ 3 * z $ 5 - y $ 5 * z $ 3 +\n     y $ 6 * z $ 7 -\n     y $ 7 * z $ 6) +\n    (y $ 1 *\n     (z $ 5 * x $ 2 - z $ 2 * x $ 5 + z $ 4 * x $ 6 - z $ 6 * x $ 4 +\n      z $ 7 * x $ 1 -\n      z $ 1 * x $ 7) -\n     y $ 3 *\n     (z $ 2 * x $ 4 - z $ 4 * x $ 2 + z $ 3 * x $ 7 - z $ 7 * x $ 3 +\n      z $ 5 * x $ 6 -\n      z $ 6 * x $ 5) +\n     y $ 4 *\n     (z $ 6 * x $ 1 - z $ 1 * x $ 6 + z $ 2 * x $ 3 - z $ 3 * x $ 2 +\n      z $ 7 * x $ 4 -\n      z $ 4 * x $ 7) -\n     y $ 5 *\n     (z $ 1 * x $ 2 - z $ 2 * x $ 1 + z $ 6 * x $ 3 - z $ 3 * x $ 6 +\n      z $ 5 * x $ 7 -\n      z $ 7 * x $ 5) +\n     y $ 2 *\n     (z $ 1 * x $ 5 - z $ 5 * x $ 1 + z $ 7 * x $ 2 - z $ 2 * x $ 7 +\n      z $ 3 * x $ 4 -\n      z $ 4 * x $ 3) -\n     y $ 6 *\n     (z $ 4 * x $ 1 - z $ 1 * x $ 4 + z $ 3 * x $ 5 - z $ 5 * x $ 3 +\n      z $ 6 * x $ 7 -\n      z $ 7 * x $ 6)) +\n    (z $ 1 *\n     (x $ 5 * y $ 2 - x $ 2 * y $ 5 + x $ 4 * y $ 6 - x $ 6 * y $ 4 +\n      x $ 7 * y $ 1 -\n      x $ 1 * y $ 7) -\n     z $ 3 *\n     (x $ 2 * y $ 4 - x $ 4 * y $ 2 + x $ 3 * y $ 7 - x $ 7 * y $ 3 +\n      x $ 5 * y $ 6 -\n      x $ 6 * y $ 5) +\n     z $ 4 *\n     (x $ 6 * y $ 1 - x $ 1 * y $ 6 + x $ 2 * y $ 3 - x $ 3 * y $ 2 +\n      x $ 7 * y $ 4 -\n      x $ 4 * y $ 7) -\n     z $ 5 *\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 + x $ 6 * y $ 3 - x $ 3 * y $ 6 +\n      x $ 5 * y $ 7 -\n      x $ 7 * y $ 5) +\n     z $ 2 *\n     (x $ 1 * y $ 5 - x $ 5 * y $ 1 + x $ 7 * y $ 2 - x $ 2 * y $ 7 +\n      x $ 3 * y $ 4 -\n      x $ 4 * y $ 3) -\n     z $ 6 *\n     (x $ 4 * y $ 1 - x $ 1 * y $ 4 + x $ 3 * y $ 5 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6)) =\n    - (3 / 2) *\n    ((- (x $ 1 * y $ 1) - x $ 2 * y $ 2 - x $ 3 * y $ 3 - x $ 4 * y $ 4 -\n      x $ 5 * y $ 5 -\n      x $ 6 * y $ 6 -\n      x $ 7 * y $ 7) *\n     z $ 7 +\n     (x $ 2 * y $ 4 + x $ 3 * y $ 7 - x $ 4 * y $ 2 + x $ 5 * y $ 6 -\n      x $ 6 * y $ 5 -\n      x $ 7 * y $ 3) *\n     z $ 3 +\n     (- (x $ 1 * y $ 4) + x $ 3 * y $ 5 + x $ 4 * y $ 1 - x $ 5 * y $ 3 +\n      x $ 6 * y $ 7 -\n      x $ 7 * y $ 6) *\n     z $ 6 -\n     (- (x $ 1 * y $ 7) - x $ 2 * y $ 5 + x $ 4 * y $ 6 + x $ 5 * y $ 2 -\n      x $ 6 * y $ 4 +\n      x $ 7 * y $ 1) *\n     z $ 1 +\n     (x $ 1 * y $ 2 - x $ 2 * y $ 1 - x $ 3 * y $ 6 + x $ 5 * y $ 7 +\n      x $ 6 * y $ 3 -\n      x $ 7 * y $ 5) *\n     z $ 5 -\n     (- (x $ 1 * y $ 6) + x $ 2 * y $ 3 - x $ 3 * y $ 2 - x $ 4 * y $ 7 +\n      x $ 6 * y $ 1 +\n      x $ 7 * y $ 4) *\n     z $ 4 -\n     (x $ 1 * y $ 5 - x $ 2 * y $ 7 + x $ 3 * y $ 4 - x $ 4 * y $ 3 -\n      x $ 5 * y $ 1 +\n      x $ 7 * y $ 2) *\n     z $ 2 -\n     (x $ 1 *\n      (- (y $ 1 * z $ 7) - y $ 2 * z $ 5 + y $ 4 * z $ 6 + y $ 5 * z $ 2 -\n       y $ 6 * z $ 4 +\n       y $ 7 * z $ 1) +\n      x $ 2 *\n      (y $ 1 * z $ 5 - y $ 2 * z $ 7 + y $ 3 * z $ 4 - y $ 4 * z $ 3 -\n       y $ 5 * z $ 1 +\n       y $ 7 * z $ 2) -\n      x $ 3 *\n      (y $ 2 * z $ 4 + y $ 3 * z $ 7 - y $ 4 * z $ 2 + y $ 5 * z $ 6 -\n       y $ 6 * z $ 5 -\n       y $ 7 * z $ 3) +\n      x $ 4 *\n      (- (y $ 1 * z $ 6) + y $ 2 * z $ 3 - y $ 3 * z $ 2 - y $ 4 * z $ 7 +\n       y $ 6 * z $ 1 +\n       y $ 7 * z $ 4) -\n      x $ 5 *\n      (y $ 1 * z $ 2 - y $ 2 * z $ 1 - y $ 3 * z $ 6 + y $ 5 * z $ 7 +\n       y $ 6 * z $ 3 -\n       y $ 7 * z $ 5) -\n      x $ 6 *\n      (- (y $ 1 * z $ 4) + y $ 3 * z $ 5 + y $ 4 * z $ 1 - y $ 5 * z $ 3 +\n       y $ 6 * z $ 7 -\n       y $ 7 * z $ 6) +\n      x $ 7 *\n      (- (y $ 1 * z $ 1) - y $ 2 * z $ 2 - y $ 3 * z $ 3 - y $ 4 * z $ 4 -\n       y $ 5 * z $ 5 -\n       y $ 6 * z $ 6 -\n       y $ 7 * z $ 7)))", "by algebra"], ["", "subsection\\<open> Representing orthogonal transformations as conjugation or congruence with an octonion.\\<close>"], ["", "lemma HIm_nth [simp]:\n  \"HIm x $ 1 = Im1 x\" \"HIm x $ 2 = Im2 x\" \"HIm x $ 3 = Im3 x\"  \"HIm x $ 4 = Im4 x\"\n  \"HIm x $ 5 = Im5 x\" \"HIm x $ 6 = Im6 x\" \"HIm x $ 7 = Im7 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (HIm x $ 1 = Im1 x &&& HIm x $ 2 = Im2 x &&& HIm x $ 3 = Im3 x) &&&\n    (HIm x $ 4 = Im4 x &&& HIm x $ 5 = Im5 x) &&&\n    HIm x $ 6 = Im6 x &&& HIm x $ 7 = Im7 x", "by (simp_all add: HIm_def)"], ["", "lemma orthogonal_transformation_octo_congruence:\n  assumes \"norm q = 1\"\n  shows \"orthogonal_transformation (\\<lambda>x. HIm(cnj q * Hv x * q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))", "have nq: \"(Ree q)\\<^sup>2 + (Im1 q)\\<^sup>2 + (Im2 q)\\<^sup>2 + (Im3 q)\\<^sup>2 + (Im4 q)\\<^sup>2 + (Im5 q)\\<^sup>2 + (Im6 q)\\<^sup>2 + (Im7 q)\\<^sup>2 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Ree q)\\<^sup>2 + (Im1 q)\\<^sup>2 + (Im2 q)\\<^sup>2 + (Im3 q)\\<^sup>2 +\n    (Im4 q)\\<^sup>2 +\n    (Im5 q)\\<^sup>2 +\n    (Im6 q)\\<^sup>2 +\n    (Im7 q)\\<^sup>2 =\n    1", "using assms norm_octo_def"], ["proof (prove)\nusing this:\n  norm q = 1\n  norm ?x =\n  sqrt\n   ((Ree ?x)\\<^sup>2 + (Im1 ?x)\\<^sup>2 + (Im2 ?x)\\<^sup>2 +\n    (Im3 ?x)\\<^sup>2 +\n    (Im4 ?x)\\<^sup>2 +\n    (Im5 ?x)\\<^sup>2 +\n    (Im6 ?x)\\<^sup>2 +\n    (Im7 ?x)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (Ree q)\\<^sup>2 + (Im1 q)\\<^sup>2 + (Im2 q)\\<^sup>2 + (Im3 q)\\<^sup>2 +\n    (Im4 q)\\<^sup>2 +\n    (Im5 q)\\<^sup>2 +\n    (Im6 q)\\<^sup>2 +\n    (Im7 q)\\<^sup>2 =\n    1", "by auto"], ["proof (state)\nthis:\n  (Ree q)\\<^sup>2 + (Im1 q)\\<^sup>2 + (Im2 q)\\<^sup>2 + (Im3 q)\\<^sup>2 +\n  (Im4 q)\\<^sup>2 +\n  (Im5 q)\\<^sup>2 +\n  (Im6 q)\\<^sup>2 +\n  (Im7 q)\\<^sup>2 =\n  1\n\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))", "have \"Vector_Spaces.linear (*\\<^sub>R) (*\\<^sub>R) (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vector_Spaces.linear (*\\<^sub>R) (*\\<^sub>R)\n     (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))", "by unfold_locales (simp_all add: octo_distrib_left octo_distrib_right\n                                     octo_mult_scaleR_left octo_mult_scaleR_right)"], ["proof (state)\nthis:\n  Vector_Spaces.linear (*\\<^sub>R) (*\\<^sub>R)\n   (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))\n\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))", "moreover"], ["proof (state)\nthis:\n  Vector_Spaces.linear (*\\<^sub>R) (*\\<^sub>R)\n   (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))\n\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))", "have \"HIm (Octonions.cnj q * Hv v * q) \\<bullet> HIm (Octonions.cnj q * Hv w * q) =\n                   ((Ree q)\\<^sup>2 + (Im1 q)\\<^sup>2 + (Im2 q)\\<^sup>2 + (Im3 q)\\<^sup>2+ (Im4 q)\\<^sup>2 + (Im5 q)\\<^sup>2 + (Im6 q)\\<^sup>2 +\n                   (Im7 q)\\<^sup>2)^2 * (v \\<bullet> w)\" for v w"], ["proof (prove)\ngoal (1 subgoal):\n 1. HIm (Octonions.cnj q * Hv v * q) \\<bullet>\n    HIm (Octonions.cnj q * Hv w * q) =\n    ((Ree q)\\<^sup>2 + (Im1 q)\\<^sup>2 + (Im2 q)\\<^sup>2 + (Im3 q)\\<^sup>2 +\n     (Im4 q)\\<^sup>2 +\n     (Im5 q)\\<^sup>2 +\n     (Im6 q)\\<^sup>2 +\n     (Im7 q)\\<^sup>2)\\<^sup>2 *\n    (v \\<bullet> w)", "unfolding octo_mult_components cnj.sel Hv_sel inner_vec_def sum_7 HIm_nth inner_real_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Ree q * 0 - - Im1 q * v $ 1 - - Im2 q * v $ 2 - - Im3 q * v $ 3 -\n      - Im4 q * v $ 4 -\n      - Im5 q * v $ 5 -\n      - Im6 q * v $ 6 -\n      - Im7 q * v $ 7) *\n     Im1 q +\n     (Ree q * v $ 1 + - Im1 q * 0 + - Im2 q * v $ 4 + - Im3 q * v $ 7 -\n      - Im4 q * v $ 2 +\n      - Im5 q * v $ 6 -\n      - Im6 q * v $ 5 -\n      - Im7 q * v $ 3) *\n     Ree q +\n     (Ree q * v $ 2 - - Im1 q * v $ 4 + - Im2 q * 0 + - Im3 q * v $ 5 +\n      - Im4 q * v $ 1 -\n      - Im5 q * v $ 3 +\n      - Im6 q * v $ 7 -\n      - Im7 q * v $ 6) *\n     Im4 q +\n     (Ree q * v $ 3 - - Im1 q * v $ 7 - - Im2 q * v $ 5 + - Im3 q * 0 +\n      - Im4 q * v $ 6 +\n      - Im5 q * v $ 2 -\n      - Im6 q * v $ 4 +\n      - Im7 q * v $ 1) *\n     Im7 q -\n     (Ree q * v $ 4 + - Im1 q * v $ 2 - - Im2 q * v $ 1 - - Im3 q * v $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * v $ 7 +\n      - Im6 q * v $ 3 -\n      - Im7 q * v $ 5) *\n     Im2 q +\n     (Ree q * v $ 5 - - Im1 q * v $ 6 + - Im2 q * v $ 3 - - Im3 q * v $ 2 -\n      - Im4 q * v $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * v $ 1 +\n      - Im7 q * v $ 4) *\n     Im6 q -\n     (Ree q * v $ 6 + - Im1 q * v $ 5 - - Im2 q * v $ 7 + - Im3 q * v $ 4 -\n      - Im4 q * v $ 3 -\n      - Im5 q * v $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * v $ 2) *\n     Im5 q -\n     (Ree q * v $ 7 + - Im1 q * v $ 3 + - Im2 q * v $ 6 - - Im3 q * v $ 1 +\n      - Im4 q * v $ 5 -\n      - Im5 q * v $ 4 -\n      - Im6 q * v $ 2 +\n      - Im7 q * 0) *\n     Im3 q) *\n    ((Ree q * 0 - - Im1 q * w $ 1 - - Im2 q * w $ 2 - - Im3 q * w $ 3 -\n      - Im4 q * w $ 4 -\n      - Im5 q * w $ 5 -\n      - Im6 q * w $ 6 -\n      - Im7 q * w $ 7) *\n     Im1 q +\n     (Ree q * w $ 1 + - Im1 q * 0 + - Im2 q * w $ 4 + - Im3 q * w $ 7 -\n      - Im4 q * w $ 2 +\n      - Im5 q * w $ 6 -\n      - Im6 q * w $ 5 -\n      - Im7 q * w $ 3) *\n     Ree q +\n     (Ree q * w $ 2 - - Im1 q * w $ 4 + - Im2 q * 0 + - Im3 q * w $ 5 +\n      - Im4 q * w $ 1 -\n      - Im5 q * w $ 3 +\n      - Im6 q * w $ 7 -\n      - Im7 q * w $ 6) *\n     Im4 q +\n     (Ree q * w $ 3 - - Im1 q * w $ 7 - - Im2 q * w $ 5 + - Im3 q * 0 +\n      - Im4 q * w $ 6 +\n      - Im5 q * w $ 2 -\n      - Im6 q * w $ 4 +\n      - Im7 q * w $ 1) *\n     Im7 q -\n     (Ree q * w $ 4 + - Im1 q * w $ 2 - - Im2 q * w $ 1 - - Im3 q * w $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * w $ 7 +\n      - Im6 q * w $ 3 -\n      - Im7 q * w $ 5) *\n     Im2 q +\n     (Ree q * w $ 5 - - Im1 q * w $ 6 + - Im2 q * w $ 3 - - Im3 q * w $ 2 -\n      - Im4 q * w $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * w $ 1 +\n      - Im7 q * w $ 4) *\n     Im6 q -\n     (Ree q * w $ 6 + - Im1 q * w $ 5 - - Im2 q * w $ 7 + - Im3 q * w $ 4 -\n      - Im4 q * w $ 3 -\n      - Im5 q * w $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * w $ 2) *\n     Im5 q -\n     (Ree q * w $ 7 + - Im1 q * w $ 3 + - Im2 q * w $ 6 - - Im3 q * w $ 1 +\n      - Im4 q * w $ 5 -\n      - Im5 q * w $ 4 -\n      - Im6 q * w $ 2 +\n      - Im7 q * 0) *\n     Im3 q) +\n    ((Ree q * 0 - - Im1 q * v $ 1 - - Im2 q * v $ 2 - - Im3 q * v $ 3 -\n      - Im4 q * v $ 4 -\n      - Im5 q * v $ 5 -\n      - Im6 q * v $ 6 -\n      - Im7 q * v $ 7) *\n     Im2 q -\n     (Ree q * v $ 1 + - Im1 q * 0 + - Im2 q * v $ 4 + - Im3 q * v $ 7 -\n      - Im4 q * v $ 2 +\n      - Im5 q * v $ 6 -\n      - Im6 q * v $ 5 -\n      - Im7 q * v $ 3) *\n     Im4 q +\n     (Ree q * v $ 2 - - Im1 q * v $ 4 + - Im2 q * 0 + - Im3 q * v $ 5 +\n      - Im4 q * v $ 1 -\n      - Im5 q * v $ 3 +\n      - Im6 q * v $ 7 -\n      - Im7 q * v $ 6) *\n     Ree q +\n     (Ree q * v $ 3 - - Im1 q * v $ 7 - - Im2 q * v $ 5 + - Im3 q * 0 +\n      - Im4 q * v $ 6 +\n      - Im5 q * v $ 2 -\n      - Im6 q * v $ 4 +\n      - Im7 q * v $ 1) *\n     Im5 q +\n     (Ree q * v $ 4 + - Im1 q * v $ 2 - - Im2 q * v $ 1 - - Im3 q * v $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * v $ 7 +\n      - Im6 q * v $ 3 -\n      - Im7 q * v $ 5) *\n     Im1 q -\n     (Ree q * v $ 5 - - Im1 q * v $ 6 + - Im2 q * v $ 3 - - Im3 q * v $ 2 -\n      - Im4 q * v $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * v $ 1 +\n      - Im7 q * v $ 4) *\n     Im3 q +\n     (Ree q * v $ 6 + - Im1 q * v $ 5 - - Im2 q * v $ 7 + - Im3 q * v $ 4 -\n      - Im4 q * v $ 3 -\n      - Im5 q * v $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * v $ 2) *\n     Im7 q -\n     (Ree q * v $ 7 + - Im1 q * v $ 3 + - Im2 q * v $ 6 - - Im3 q * v $ 1 +\n      - Im4 q * v $ 5 -\n      - Im5 q * v $ 4 -\n      - Im6 q * v $ 2 +\n      - Im7 q * 0) *\n     Im6 q) *\n    ((Ree q * 0 - - Im1 q * w $ 1 - - Im2 q * w $ 2 - - Im3 q * w $ 3 -\n      - Im4 q * w $ 4 -\n      - Im5 q * w $ 5 -\n      - Im6 q * w $ 6 -\n      - Im7 q * w $ 7) *\n     Im2 q -\n     (Ree q * w $ 1 + - Im1 q * 0 + - Im2 q * w $ 4 + - Im3 q * w $ 7 -\n      - Im4 q * w $ 2 +\n      - Im5 q * w $ 6 -\n      - Im6 q * w $ 5 -\n      - Im7 q * w $ 3) *\n     Im4 q +\n     (Ree q * w $ 2 - - Im1 q * w $ 4 + - Im2 q * 0 + - Im3 q * w $ 5 +\n      - Im4 q * w $ 1 -\n      - Im5 q * w $ 3 +\n      - Im6 q * w $ 7 -\n      - Im7 q * w $ 6) *\n     Ree q +\n     (Ree q * w $ 3 - - Im1 q * w $ 7 - - Im2 q * w $ 5 + - Im3 q * 0 +\n      - Im4 q * w $ 6 +\n      - Im5 q * w $ 2 -\n      - Im6 q * w $ 4 +\n      - Im7 q * w $ 1) *\n     Im5 q +\n     (Ree q * w $ 4 + - Im1 q * w $ 2 - - Im2 q * w $ 1 - - Im3 q * w $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * w $ 7 +\n      - Im6 q * w $ 3 -\n      - Im7 q * w $ 5) *\n     Im1 q -\n     (Ree q * w $ 5 - - Im1 q * w $ 6 + - Im2 q * w $ 3 - - Im3 q * w $ 2 -\n      - Im4 q * w $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * w $ 1 +\n      - Im7 q * w $ 4) *\n     Im3 q +\n     (Ree q * w $ 6 + - Im1 q * w $ 5 - - Im2 q * w $ 7 + - Im3 q * w $ 4 -\n      - Im4 q * w $ 3 -\n      - Im5 q * w $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * w $ 2) *\n     Im7 q -\n     (Ree q * w $ 7 + - Im1 q * w $ 3 + - Im2 q * w $ 6 - - Im3 q * w $ 1 +\n      - Im4 q * w $ 5 -\n      - Im5 q * w $ 4 -\n      - Im6 q * w $ 2 +\n      - Im7 q * 0) *\n     Im6 q) +\n    ((Ree q * 0 - - Im1 q * v $ 1 - - Im2 q * v $ 2 - - Im3 q * v $ 3 -\n      - Im4 q * v $ 4 -\n      - Im5 q * v $ 5 -\n      - Im6 q * v $ 6 -\n      - Im7 q * v $ 7) *\n     Im3 q -\n     (Ree q * v $ 1 + - Im1 q * 0 + - Im2 q * v $ 4 + - Im3 q * v $ 7 -\n      - Im4 q * v $ 2 +\n      - Im5 q * v $ 6 -\n      - Im6 q * v $ 5 -\n      - Im7 q * v $ 3) *\n     Im7 q -\n     (Ree q * v $ 2 - - Im1 q * v $ 4 + - Im2 q * 0 + - Im3 q * v $ 5 +\n      - Im4 q * v $ 1 -\n      - Im5 q * v $ 3 +\n      - Im6 q * v $ 7 -\n      - Im7 q * v $ 6) *\n     Im5 q +\n     (Ree q * v $ 3 - - Im1 q * v $ 7 - - Im2 q * v $ 5 + - Im3 q * 0 +\n      - Im4 q * v $ 6 +\n      - Im5 q * v $ 2 -\n      - Im6 q * v $ 4 +\n      - Im7 q * v $ 1) *\n     Ree q +\n     (Ree q * v $ 4 + - Im1 q * v $ 2 - - Im2 q * v $ 1 - - Im3 q * v $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * v $ 7 +\n      - Im6 q * v $ 3 -\n      - Im7 q * v $ 5) *\n     Im6 q +\n     (Ree q * v $ 5 - - Im1 q * v $ 6 + - Im2 q * v $ 3 - - Im3 q * v $ 2 -\n      - Im4 q * v $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * v $ 1 +\n      - Im7 q * v $ 4) *\n     Im2 q -\n     (Ree q * v $ 6 + - Im1 q * v $ 5 - - Im2 q * v $ 7 + - Im3 q * v $ 4 -\n      - Im4 q * v $ 3 -\n      - Im5 q * v $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * v $ 2) *\n     Im4 q +\n     (Ree q * v $ 7 + - Im1 q * v $ 3 + - Im2 q * v $ 6 - - Im3 q * v $ 1 +\n      - Im4 q * v $ 5 -\n      - Im5 q * v $ 4 -\n      - Im6 q * v $ 2 +\n      - Im7 q * 0) *\n     Im1 q) *\n    ((Ree q * 0 - - Im1 q * w $ 1 - - Im2 q * w $ 2 - - Im3 q * w $ 3 -\n      - Im4 q * w $ 4 -\n      - Im5 q * w $ 5 -\n      - Im6 q * w $ 6 -\n      - Im7 q * w $ 7) *\n     Im3 q -\n     (Ree q * w $ 1 + - Im1 q * 0 + - Im2 q * w $ 4 + - Im3 q * w $ 7 -\n      - Im4 q * w $ 2 +\n      - Im5 q * w $ 6 -\n      - Im6 q * w $ 5 -\n      - Im7 q * w $ 3) *\n     Im7 q -\n     (Ree q * w $ 2 - - Im1 q * w $ 4 + - Im2 q * 0 + - Im3 q * w $ 5 +\n      - Im4 q * w $ 1 -\n      - Im5 q * w $ 3 +\n      - Im6 q * w $ 7 -\n      - Im7 q * w $ 6) *\n     Im5 q +\n     (Ree q * w $ 3 - - Im1 q * w $ 7 - - Im2 q * w $ 5 + - Im3 q * 0 +\n      - Im4 q * w $ 6 +\n      - Im5 q * w $ 2 -\n      - Im6 q * w $ 4 +\n      - Im7 q * w $ 1) *\n     Ree q +\n     (Ree q * w $ 4 + - Im1 q * w $ 2 - - Im2 q * w $ 1 - - Im3 q * w $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * w $ 7 +\n      - Im6 q * w $ 3 -\n      - Im7 q * w $ 5) *\n     Im6 q +\n     (Ree q * w $ 5 - - Im1 q * w $ 6 + - Im2 q * w $ 3 - - Im3 q * w $ 2 -\n      - Im4 q * w $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * w $ 1 +\n      - Im7 q * w $ 4) *\n     Im2 q -\n     (Ree q * w $ 6 + - Im1 q * w $ 5 - - Im2 q * w $ 7 + - Im3 q * w $ 4 -\n      - Im4 q * w $ 3 -\n      - Im5 q * w $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * w $ 2) *\n     Im4 q +\n     (Ree q * w $ 7 + - Im1 q * w $ 3 + - Im2 q * w $ 6 - - Im3 q * w $ 1 +\n      - Im4 q * w $ 5 -\n      - Im5 q * w $ 4 -\n      - Im6 q * w $ 2 +\n      - Im7 q * 0) *\n     Im1 q) +\n    ((Ree q * 0 - - Im1 q * v $ 1 - - Im2 q * v $ 2 - - Im3 q * v $ 3 -\n      - Im4 q * v $ 4 -\n      - Im5 q * v $ 5 -\n      - Im6 q * v $ 6 -\n      - Im7 q * v $ 7) *\n     Im4 q +\n     (Ree q * v $ 1 + - Im1 q * 0 + - Im2 q * v $ 4 + - Im3 q * v $ 7 -\n      - Im4 q * v $ 2 +\n      - Im5 q * v $ 6 -\n      - Im6 q * v $ 5 -\n      - Im7 q * v $ 3) *\n     Im2 q -\n     (Ree q * v $ 2 - - Im1 q * v $ 4 + - Im2 q * 0 + - Im3 q * v $ 5 +\n      - Im4 q * v $ 1 -\n      - Im5 q * v $ 3 +\n      - Im6 q * v $ 7 -\n      - Im7 q * v $ 6) *\n     Im1 q -\n     (Ree q * v $ 3 - - Im1 q * v $ 7 - - Im2 q * v $ 5 + - Im3 q * 0 +\n      - Im4 q * v $ 6 +\n      - Im5 q * v $ 2 -\n      - Im6 q * v $ 4 +\n      - Im7 q * v $ 1) *\n     Im6 q +\n     (Ree q * v $ 4 + - Im1 q * v $ 2 - - Im2 q * v $ 1 - - Im3 q * v $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * v $ 7 +\n      - Im6 q * v $ 3 -\n      - Im7 q * v $ 5) *\n     Ree q +\n     (Ree q * v $ 5 - - Im1 q * v $ 6 + - Im2 q * v $ 3 - - Im3 q * v $ 2 -\n      - Im4 q * v $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * v $ 1 +\n      - Im7 q * v $ 4) *\n     Im7 q +\n     (Ree q * v $ 6 + - Im1 q * v $ 5 - - Im2 q * v $ 7 + - Im3 q * v $ 4 -\n      - Im4 q * v $ 3 -\n      - Im5 q * v $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * v $ 2) *\n     Im3 q -\n     (Ree q * v $ 7 + - Im1 q * v $ 3 + - Im2 q * v $ 6 - - Im3 q * v $ 1 +\n      - Im4 q * v $ 5 -\n      - Im5 q * v $ 4 -\n      - Im6 q * v $ 2 +\n      - Im7 q * 0) *\n     Im5 q) *\n    ((Ree q * 0 - - Im1 q * w $ 1 - - Im2 q * w $ 2 - - Im3 q * w $ 3 -\n      - Im4 q * w $ 4 -\n      - Im5 q * w $ 5 -\n      - Im6 q * w $ 6 -\n      - Im7 q * w $ 7) *\n     Im4 q +\n     (Ree q * w $ 1 + - Im1 q * 0 + - Im2 q * w $ 4 + - Im3 q * w $ 7 -\n      - Im4 q * w $ 2 +\n      - Im5 q * w $ 6 -\n      - Im6 q * w $ 5 -\n      - Im7 q * w $ 3) *\n     Im2 q -\n     (Ree q * w $ 2 - - Im1 q * w $ 4 + - Im2 q * 0 + - Im3 q * w $ 5 +\n      - Im4 q * w $ 1 -\n      - Im5 q * w $ 3 +\n      - Im6 q * w $ 7 -\n      - Im7 q * w $ 6) *\n     Im1 q -\n     (Ree q * w $ 3 - - Im1 q * w $ 7 - - Im2 q * w $ 5 + - Im3 q * 0 +\n      - Im4 q * w $ 6 +\n      - Im5 q * w $ 2 -\n      - Im6 q * w $ 4 +\n      - Im7 q * w $ 1) *\n     Im6 q +\n     (Ree q * w $ 4 + - Im1 q * w $ 2 - - Im2 q * w $ 1 - - Im3 q * w $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * w $ 7 +\n      - Im6 q * w $ 3 -\n      - Im7 q * w $ 5) *\n     Ree q +\n     (Ree q * w $ 5 - - Im1 q * w $ 6 + - Im2 q * w $ 3 - - Im3 q * w $ 2 -\n      - Im4 q * w $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * w $ 1 +\n      - Im7 q * w $ 4) *\n     Im7 q +\n     (Ree q * w $ 6 + - Im1 q * w $ 5 - - Im2 q * w $ 7 + - Im3 q * w $ 4 -\n      - Im4 q * w $ 3 -\n      - Im5 q * w $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * w $ 2) *\n     Im3 q -\n     (Ree q * w $ 7 + - Im1 q * w $ 3 + - Im2 q * w $ 6 - - Im3 q * w $ 1 +\n      - Im4 q * w $ 5 -\n      - Im5 q * w $ 4 -\n      - Im6 q * w $ 2 +\n      - Im7 q * 0) *\n     Im5 q) +\n    ((Ree q * 0 - - Im1 q * v $ 1 - - Im2 q * v $ 2 - - Im3 q * v $ 3 -\n      - Im4 q * v $ 4 -\n      - Im5 q * v $ 5 -\n      - Im6 q * v $ 6 -\n      - Im7 q * v $ 7) *\n     Im5 q -\n     (Ree q * v $ 1 + - Im1 q * 0 + - Im2 q * v $ 4 + - Im3 q * v $ 7 -\n      - Im4 q * v $ 2 +\n      - Im5 q * v $ 6 -\n      - Im6 q * v $ 5 -\n      - Im7 q * v $ 3) *\n     Im6 q +\n     (Ree q * v $ 2 - - Im1 q * v $ 4 + - Im2 q * 0 + - Im3 q * v $ 5 +\n      - Im4 q * v $ 1 -\n      - Im5 q * v $ 3 +\n      - Im6 q * v $ 7 -\n      - Im7 q * v $ 6) *\n     Im3 q -\n     (Ree q * v $ 3 - - Im1 q * v $ 7 - - Im2 q * v $ 5 + - Im3 q * 0 +\n      - Im4 q * v $ 6 +\n      - Im5 q * v $ 2 -\n      - Im6 q * v $ 4 +\n      - Im7 q * v $ 1) *\n     Im2 q -\n     (Ree q * v $ 4 + - Im1 q * v $ 2 - - Im2 q * v $ 1 - - Im3 q * v $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * v $ 7 +\n      - Im6 q * v $ 3 -\n      - Im7 q * v $ 5) *\n     Im7 q +\n     (Ree q * v $ 5 - - Im1 q * v $ 6 + - Im2 q * v $ 3 - - Im3 q * v $ 2 -\n      - Im4 q * v $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * v $ 1 +\n      - Im7 q * v $ 4) *\n     Ree q +\n     (Ree q * v $ 6 + - Im1 q * v $ 5 - - Im2 q * v $ 7 + - Im3 q * v $ 4 -\n      - Im4 q * v $ 3 -\n      - Im5 q * v $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * v $ 2) *\n     Im1 q +\n     (Ree q * v $ 7 + - Im1 q * v $ 3 + - Im2 q * v $ 6 - - Im3 q * v $ 1 +\n      - Im4 q * v $ 5 -\n      - Im5 q * v $ 4 -\n      - Im6 q * v $ 2 +\n      - Im7 q * 0) *\n     Im4 q) *\n    ((Ree q * 0 - - Im1 q * w $ 1 - - Im2 q * w $ 2 - - Im3 q * w $ 3 -\n      - Im4 q * w $ 4 -\n      - Im5 q * w $ 5 -\n      - Im6 q * w $ 6 -\n      - Im7 q * w $ 7) *\n     Im5 q -\n     (Ree q * w $ 1 + - Im1 q * 0 + - Im2 q * w $ 4 + - Im3 q * w $ 7 -\n      - Im4 q * w $ 2 +\n      - Im5 q * w $ 6 -\n      - Im6 q * w $ 5 -\n      - Im7 q * w $ 3) *\n     Im6 q +\n     (Ree q * w $ 2 - - Im1 q * w $ 4 + - Im2 q * 0 + - Im3 q * w $ 5 +\n      - Im4 q * w $ 1 -\n      - Im5 q * w $ 3 +\n      - Im6 q * w $ 7 -\n      - Im7 q * w $ 6) *\n     Im3 q -\n     (Ree q * w $ 3 - - Im1 q * w $ 7 - - Im2 q * w $ 5 + - Im3 q * 0 +\n      - Im4 q * w $ 6 +\n      - Im5 q * w $ 2 -\n      - Im6 q * w $ 4 +\n      - Im7 q * w $ 1) *\n     Im2 q -\n     (Ree q * w $ 4 + - Im1 q * w $ 2 - - Im2 q * w $ 1 - - Im3 q * w $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * w $ 7 +\n      - Im6 q * w $ 3 -\n      - Im7 q * w $ 5) *\n     Im7 q +\n     (Ree q * w $ 5 - - Im1 q * w $ 6 + - Im2 q * w $ 3 - - Im3 q * w $ 2 -\n      - Im4 q * w $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * w $ 1 +\n      - Im7 q * w $ 4) *\n     Ree q +\n     (Ree q * w $ 6 + - Im1 q * w $ 5 - - Im2 q * w $ 7 + - Im3 q * w $ 4 -\n      - Im4 q * w $ 3 -\n      - Im5 q * w $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * w $ 2) *\n     Im1 q +\n     (Ree q * w $ 7 + - Im1 q * w $ 3 + - Im2 q * w $ 6 - - Im3 q * w $ 1 +\n      - Im4 q * w $ 5 -\n      - Im5 q * w $ 4 -\n      - Im6 q * w $ 2 +\n      - Im7 q * 0) *\n     Im4 q) +\n    ((Ree q * 0 - - Im1 q * v $ 1 - - Im2 q * v $ 2 - - Im3 q * v $ 3 -\n      - Im4 q * v $ 4 -\n      - Im5 q * v $ 5 -\n      - Im6 q * v $ 6 -\n      - Im7 q * v $ 7) *\n     Im6 q +\n     (Ree q * v $ 1 + - Im1 q * 0 + - Im2 q * v $ 4 + - Im3 q * v $ 7 -\n      - Im4 q * v $ 2 +\n      - Im5 q * v $ 6 -\n      - Im6 q * v $ 5 -\n      - Im7 q * v $ 3) *\n     Im5 q -\n     (Ree q * v $ 2 - - Im1 q * v $ 4 + - Im2 q * 0 + - Im3 q * v $ 5 +\n      - Im4 q * v $ 1 -\n      - Im5 q * v $ 3 +\n      - Im6 q * v $ 7 -\n      - Im7 q * v $ 6) *\n     Im7 q +\n     (Ree q * v $ 3 - - Im1 q * v $ 7 - - Im2 q * v $ 5 + - Im3 q * 0 +\n      - Im4 q * v $ 6 +\n      - Im5 q * v $ 2 -\n      - Im6 q * v $ 4 +\n      - Im7 q * v $ 1) *\n     Im4 q -\n     (Ree q * v $ 4 + - Im1 q * v $ 2 - - Im2 q * v $ 1 - - Im3 q * v $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * v $ 7 +\n      - Im6 q * v $ 3 -\n      - Im7 q * v $ 5) *\n     Im3 q -\n     (Ree q * v $ 5 - - Im1 q * v $ 6 + - Im2 q * v $ 3 - - Im3 q * v $ 2 -\n      - Im4 q * v $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * v $ 1 +\n      - Im7 q * v $ 4) *\n     Im1 q +\n     (Ree q * v $ 6 + - Im1 q * v $ 5 - - Im2 q * v $ 7 + - Im3 q * v $ 4 -\n      - Im4 q * v $ 3 -\n      - Im5 q * v $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * v $ 2) *\n     Ree q +\n     (Ree q * v $ 7 + - Im1 q * v $ 3 + - Im2 q * v $ 6 - - Im3 q * v $ 1 +\n      - Im4 q * v $ 5 -\n      - Im5 q * v $ 4 -\n      - Im6 q * v $ 2 +\n      - Im7 q * 0) *\n     Im2 q) *\n    ((Ree q * 0 - - Im1 q * w $ 1 - - Im2 q * w $ 2 - - Im3 q * w $ 3 -\n      - Im4 q * w $ 4 -\n      - Im5 q * w $ 5 -\n      - Im6 q * w $ 6 -\n      - Im7 q * w $ 7) *\n     Im6 q +\n     (Ree q * w $ 1 + - Im1 q * 0 + - Im2 q * w $ 4 + - Im3 q * w $ 7 -\n      - Im4 q * w $ 2 +\n      - Im5 q * w $ 6 -\n      - Im6 q * w $ 5 -\n      - Im7 q * w $ 3) *\n     Im5 q -\n     (Ree q * w $ 2 - - Im1 q * w $ 4 + - Im2 q * 0 + - Im3 q * w $ 5 +\n      - Im4 q * w $ 1 -\n      - Im5 q * w $ 3 +\n      - Im6 q * w $ 7 -\n      - Im7 q * w $ 6) *\n     Im7 q +\n     (Ree q * w $ 3 - - Im1 q * w $ 7 - - Im2 q * w $ 5 + - Im3 q * 0 +\n      - Im4 q * w $ 6 +\n      - Im5 q * w $ 2 -\n      - Im6 q * w $ 4 +\n      - Im7 q * w $ 1) *\n     Im4 q -\n     (Ree q * w $ 4 + - Im1 q * w $ 2 - - Im2 q * w $ 1 - - Im3 q * w $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * w $ 7 +\n      - Im6 q * w $ 3 -\n      - Im7 q * w $ 5) *\n     Im3 q -\n     (Ree q * w $ 5 - - Im1 q * w $ 6 + - Im2 q * w $ 3 - - Im3 q * w $ 2 -\n      - Im4 q * w $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * w $ 1 +\n      - Im7 q * w $ 4) *\n     Im1 q +\n     (Ree q * w $ 6 + - Im1 q * w $ 5 - - Im2 q * w $ 7 + - Im3 q * w $ 4 -\n      - Im4 q * w $ 3 -\n      - Im5 q * w $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * w $ 2) *\n     Ree q +\n     (Ree q * w $ 7 + - Im1 q * w $ 3 + - Im2 q * w $ 6 - - Im3 q * w $ 1 +\n      - Im4 q * w $ 5 -\n      - Im5 q * w $ 4 -\n      - Im6 q * w $ 2 +\n      - Im7 q * 0) *\n     Im2 q) +\n    ((Ree q * 0 - - Im1 q * v $ 1 - - Im2 q * v $ 2 - - Im3 q * v $ 3 -\n      - Im4 q * v $ 4 -\n      - Im5 q * v $ 5 -\n      - Im6 q * v $ 6 -\n      - Im7 q * v $ 7) *\n     Im7 q +\n     (Ree q * v $ 1 + - Im1 q * 0 + - Im2 q * v $ 4 + - Im3 q * v $ 7 -\n      - Im4 q * v $ 2 +\n      - Im5 q * v $ 6 -\n      - Im6 q * v $ 5 -\n      - Im7 q * v $ 3) *\n     Im3 q +\n     (Ree q * v $ 2 - - Im1 q * v $ 4 + - Im2 q * 0 + - Im3 q * v $ 5 +\n      - Im4 q * v $ 1 -\n      - Im5 q * v $ 3 +\n      - Im6 q * v $ 7 -\n      - Im7 q * v $ 6) *\n     Im6 q -\n     (Ree q * v $ 3 - - Im1 q * v $ 7 - - Im2 q * v $ 5 + - Im3 q * 0 +\n      - Im4 q * v $ 6 +\n      - Im5 q * v $ 2 -\n      - Im6 q * v $ 4 +\n      - Im7 q * v $ 1) *\n     Im1 q +\n     (Ree q * v $ 4 + - Im1 q * v $ 2 - - Im2 q * v $ 1 - - Im3 q * v $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * v $ 7 +\n      - Im6 q * v $ 3 -\n      - Im7 q * v $ 5) *\n     Im5 q -\n     (Ree q * v $ 5 - - Im1 q * v $ 6 + - Im2 q * v $ 3 - - Im3 q * v $ 2 -\n      - Im4 q * v $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * v $ 1 +\n      - Im7 q * v $ 4) *\n     Im4 q -\n     (Ree q * v $ 6 + - Im1 q * v $ 5 - - Im2 q * v $ 7 + - Im3 q * v $ 4 -\n      - Im4 q * v $ 3 -\n      - Im5 q * v $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * v $ 2) *\n     Im2 q +\n     (Ree q * v $ 7 + - Im1 q * v $ 3 + - Im2 q * v $ 6 - - Im3 q * v $ 1 +\n      - Im4 q * v $ 5 -\n      - Im5 q * v $ 4 -\n      - Im6 q * v $ 2 +\n      - Im7 q * 0) *\n     Ree q) *\n    ((Ree q * 0 - - Im1 q * w $ 1 - - Im2 q * w $ 2 - - Im3 q * w $ 3 -\n      - Im4 q * w $ 4 -\n      - Im5 q * w $ 5 -\n      - Im6 q * w $ 6 -\n      - Im7 q * w $ 7) *\n     Im7 q +\n     (Ree q * w $ 1 + - Im1 q * 0 + - Im2 q * w $ 4 + - Im3 q * w $ 7 -\n      - Im4 q * w $ 2 +\n      - Im5 q * w $ 6 -\n      - Im6 q * w $ 5 -\n      - Im7 q * w $ 3) *\n     Im3 q +\n     (Ree q * w $ 2 - - Im1 q * w $ 4 + - Im2 q * 0 + - Im3 q * w $ 5 +\n      - Im4 q * w $ 1 -\n      - Im5 q * w $ 3 +\n      - Im6 q * w $ 7 -\n      - Im7 q * w $ 6) *\n     Im6 q -\n     (Ree q * w $ 3 - - Im1 q * w $ 7 - - Im2 q * w $ 5 + - Im3 q * 0 +\n      - Im4 q * w $ 6 +\n      - Im5 q * w $ 2 -\n      - Im6 q * w $ 4 +\n      - Im7 q * w $ 1) *\n     Im1 q +\n     (Ree q * w $ 4 + - Im1 q * w $ 2 - - Im2 q * w $ 1 - - Im3 q * w $ 6 +\n      - Im4 q * 0 +\n      - Im5 q * w $ 7 +\n      - Im6 q * w $ 3 -\n      - Im7 q * w $ 5) *\n     Im5 q -\n     (Ree q * w $ 5 - - Im1 q * w $ 6 + - Im2 q * w $ 3 - - Im3 q * w $ 2 -\n      - Im4 q * w $ 7 +\n      - Im5 q * 0 +\n      - Im6 q * w $ 1 +\n      - Im7 q * w $ 4) *\n     Im4 q -\n     (Ree q * w $ 6 + - Im1 q * w $ 5 - - Im2 q * w $ 7 + - Im3 q * w $ 4 -\n      - Im4 q * w $ 3 -\n      - Im5 q * w $ 1 +\n      - Im6 q * 0 +\n      - Im7 q * w $ 2) *\n     Im2 q +\n     (Ree q * w $ 7 + - Im1 q * w $ 3 + - Im2 q * w $ 6 - - Im3 q * w $ 1 +\n      - Im4 q * w $ 5 -\n      - Im5 q * w $ 4 -\n      - Im6 q * w $ 2 +\n      - Im7 q * 0) *\n     Ree q) =\n    ((Ree q)\\<^sup>2 + (Im1 q)\\<^sup>2 + (Im2 q)\\<^sup>2 + (Im3 q)\\<^sup>2 +\n     (Im4 q)\\<^sup>2 +\n     (Im5 q)\\<^sup>2 +\n     (Im6 q)\\<^sup>2 +\n     (Im7 q)\\<^sup>2)\\<^sup>2 *\n    (v $ 1 * w $ 1 + v $ 2 * w $ 2 + v $ 3 * w $ 3 + v $ 4 * w $ 4 +\n     v $ 5 * w $ 5 +\n     v $ 6 * w $ 6 +\n     v $ 7 * w $ 7)", "by algebra"], ["proof (state)\nthis:\n  HIm (Octonions.cnj q * Hv ?v * q) \\<bullet>\n  HIm (Octonions.cnj q * Hv ?w * q) =\n  ((Ree q)\\<^sup>2 + (Im1 q)\\<^sup>2 + (Im2 q)\\<^sup>2 + (Im3 q)\\<^sup>2 +\n   (Im4 q)\\<^sup>2 +\n   (Im5 q)\\<^sup>2 +\n   (Im6 q)\\<^sup>2 +\n   (Im7 q)\\<^sup>2)\\<^sup>2 *\n  (?v \\<bullet> ?w)\n\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))", "ultimately"], ["proof (chain)\npicking this:\n  Vector_Spaces.linear (*\\<^sub>R) (*\\<^sub>R)\n   (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))\n  HIm (Octonions.cnj q * Hv ?v * q) \\<bullet>\n  HIm (Octonions.cnj q * Hv ?w * q) =\n  ((Ree q)\\<^sup>2 + (Im1 q)\\<^sup>2 + (Im2 q)\\<^sup>2 + (Im3 q)\\<^sup>2 +\n   (Im4 q)\\<^sup>2 +\n   (Im5 q)\\<^sup>2 +\n   (Im6 q)\\<^sup>2 +\n   (Im7 q)\\<^sup>2)\\<^sup>2 *\n  (?v \\<bullet> ?w)", "show ?thesis"], ["proof (prove)\nusing this:\n  Vector_Spaces.linear (*\\<^sub>R) (*\\<^sub>R)\n   (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))\n  HIm (Octonions.cnj q * Hv ?v * q) \\<bullet>\n  HIm (Octonions.cnj q * Hv ?w * q) =\n  ((Ree q)\\<^sup>2 + (Im1 q)\\<^sup>2 + (Im2 q)\\<^sup>2 + (Im3 q)\\<^sup>2 +\n   (Im4 q)\\<^sup>2 +\n   (Im5 q)\\<^sup>2 +\n   (Im6 q)\\<^sup>2 +\n   (Im7 q)\\<^sup>2)\\<^sup>2 *\n  (?v \\<bullet> ?w)\n\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))", "by (simp add: orthogonal_transformation_def linear_def nq)"], ["proof (state)\nthis:\n  orthogonal_transformation (\\<lambda>x. HIm (Octonions.cnj q * Hv x * q))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma orthogonal_transformation_octo_conjugation:\n  assumes \"q \\<noteq> 0\"\n  shows \"orthogonal_transformation (\\<lambda>x. HIm (inverse q * Hv x * q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (inverse q * Hv x * q))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (inverse q * Hv x * q))", "obtain c d where eq: \"q = octo_of_real c * d\" and 1: \"norm d = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c d.\n        \\<lbrakk>q = octo_of_real c * d; norm d = 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>c d.\n        \\<lbrakk>q = octo_of_real c * d; norm d = 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    q = octo_of_real ?c2 * ?d2\n 2. (\\<And>c d.\n        \\<lbrakk>q = octo_of_real c * d; norm d = 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    norm ?d2 = 1", "show 1: \"q = octo_of_real (norm q) * (inverse (octo_of_real (norm q)) * q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = octo_of_real (norm q) * (inverse (octo_of_real (norm q)) * q)", "using assms norm_eq_zero right_inverse multiplicative_norm_octo"], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  (norm ?x = 0) = (?x = (0::?'a))\n  ?a \\<noteq> (0::?'a) \\<Longrightarrow> ?a * inverse ?a = (1::?'a)\n  norm (?x * ?y) = norm ?x * norm ?y\n\ngoal (1 subgoal):\n 1. q = octo_of_real (norm q) * (inverse (octo_of_real (norm q)) * q)", "by (metis Octonions.scaleR_conv_octo_of_real octo_of_real_inverse scaleR_one scaleR_scaleR)"], ["proof (state)\nthis:\n  q = octo_of_real (norm q) * (inverse (octo_of_real (norm q)) * q)\n\ngoal (1 subgoal):\n 1. (\\<And>c d.\n        \\<lbrakk>q = octo_of_real c * d; norm d = 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    norm (inverse (octo_of_real (norm q)) * q) = 1", "show \"norm (inverse (octo_of_real (norm q)) * q) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (inverse (octo_of_real (norm q)) * q) = 1", "using assms 1  norm_octo_def norm_mult inverse_octo_1 inverse_octo_1_sym\n      nonzero_octo_of_real_inverse  octo_inverse_eq_cnj\n      cnj_of_real mult_cancel_left2 multiplicative_norm_octo\n      norm_eq_zero norm_octo_squared norm_power2_cnj octo_mult_cnj_conv_norm power2_eq_square_octo"], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  q = octo_of_real (norm q) * (inverse (octo_of_real (norm q)) * q)\n  norm ?x =\n  sqrt\n   ((Ree ?x)\\<^sup>2 + (Im1 ?x)\\<^sup>2 + (Im2 ?x)\\<^sup>2 +\n    (Im3 ?x)\\<^sup>2 +\n    (Im4 ?x)\\<^sup>2 +\n    (Im5 ?x)\\<^sup>2 +\n    (Im6 ?x)\\<^sup>2 +\n    (Im7 ?x)\\<^sup>2)\n  norm (?x * ?y) = norm ?x * norm ?y\n  ?x \\<noteq> 0 \\<Longrightarrow> ?x * inverse ?x = 1\n  ?x \\<noteq> 0 \\<Longrightarrow> inverse ?x * ?x = 1\n  ?x \\<noteq> 0 \\<Longrightarrow>\n  octo_of_real (inverse ?x) = inverse (octo_of_real ?x)\n  norm ?q = 1 \\<Longrightarrow> inverse ?q = Octonions.cnj ?q\n  Octonions.cnj (octo_of_real ?x) = octo_of_real ?x\n  (?c * ?a = ?c) = (?c = (0::?'a) \\<or> ?a = (1::?'a))\n  norm (?x * ?y) = norm ?x * norm ?y\n  (norm ?x = 0) = (?x = (0::?'a))\n  (norm ?x)\\<^sup>2 =\n  (Ree ?x)\\<^sup>2 + (Im1 ?x)\\<^sup>2 + (Im2 ?x)\\<^sup>2 +\n  (Im3 ?x)\\<^sup>2 +\n  (Im4 ?x)\\<^sup>2 +\n  (Im5 ?x)\\<^sup>2 +\n  (Im6 ?x)\\<^sup>2 +\n  (Im7 ?x)\\<^sup>2\n  (norm ?q)\\<^sup>2 = Ree (?q * Octonions.cnj ?q)\n  ?x * Octonions.cnj ?x = (octo_of_real (norm ?x))\\<^sup>2\n  ?x\\<^sup>2 = ?x * ?x\n\ngoal (1 subgoal):\n 1. norm (inverse (octo_of_real (norm q)) * q) = 1", "by metis"], ["proof (state)\nthis:\n  norm (inverse (octo_of_real (norm q)) * q) = 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  q = octo_of_real c * d\n  norm d = 1\n\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (inverse q * Hv x * q))", "have \"c \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "using assms eq"], ["proof (prove)\nusing this:\n  q \\<noteq> 0\n  q = octo_of_real c * d\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0", "by (metis Octonions.scaleR_conv_octo_of_real scale_zero_left)"], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (inverse q * Hv x * q))", "then"], ["proof (chain)\npicking this:\n  c \\<noteq> 0", "have \"HIm (Octonions.cnj d * Hv x * d) =\n               HIm (inverse (octo_of_real c * d) * Hv x * (octo_of_real c * d))\" for x"], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. HIm (Octonions.cnj d * Hv x * d) =\n    HIm (inverse (octo_of_real c * d) * Hv x * (octo_of_real c * d))", "proof(simp add: flip: octo_inverse_eq_cnj [OF 1] of_real_inverse)"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow>\n    HIm (inverse d * Hv x * d) =\n    HIm (inverse (octo_of_real c * d) * Hv x * (octo_of_real c * d))", "assume \"c \\<noteq> 0\""], ["proof (state)\nthis:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow>\n    HIm (inverse d * Hv x * d) =\n    HIm (inverse (octo_of_real c * d) * Hv x * (octo_of_real c * d))", "then"], ["proof (chain)\npicking this:\n  c \\<noteq> 0", "have \"inverse d = inverse d * inverse (c *\\<^sub>R 1) * c *\\<^sub>R 1\""], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. inverse d = inverse d * inverse (c *\\<^sub>R 1) * c *\\<^sub>R 1", "using octo_of_real_def octo_of_real_inverse octo_of_real_inverse_collapse(1)\n            octo_of_real_times_commute octo_of_real_times_left_commute"], ["proof (prove)\nusing this:\n  c \\<noteq> 0\n  octo_of_real ?r = ?r *\\<^sub>R 1\n  octo_of_real (inverse ?x) = inverse (octo_of_real ?x)\n  ?c \\<noteq> 0 \\<Longrightarrow>\n  octo_of_real ?c * octo_of_real (inverse ?c) = 1\n  octo_of_real ?r * ?q = ?q * octo_of_real ?r\n  octo_of_real ?r * (?x * ?q) = ?x * (octo_of_real ?r * ?q)\n\ngoal (1 subgoal):\n 1. inverse d = inverse d * inverse (c *\\<^sub>R 1) * c *\\<^sub>R 1", "by force"], ["proof (state)\nthis:\n  inverse d = inverse d * inverse (c *\\<^sub>R 1) * c *\\<^sub>R 1\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow>\n    HIm (inverse d * Hv x * d) =\n    HIm (inverse (octo_of_real c * d) * Hv x * (octo_of_real c * d))", "then"], ["proof (chain)\npicking this:\n  inverse d = inverse d * inverse (c *\\<^sub>R 1) * c *\\<^sub>R 1", "have \"inverse d * Hv x * d = inverse (c *\\<^sub>R 1 * d) * Hv x * c *\\<^sub>R (d * 1)\""], ["proof (prove)\nusing this:\n  inverse d = inverse d * inverse (c *\\<^sub>R 1) * c *\\<^sub>R 1\n\ngoal (1 subgoal):\n 1. inverse d * Hv x * d =\n    inverse (c *\\<^sub>R 1 * d) * Hv x * c *\\<^sub>R (d * 1)", "by (metis (no_types) mult_1_right_octo octo_inverse_mult octo_mult_scaleR_left\n                           octo_mult_scaleR_right)"], ["proof (state)\nthis:\n  inverse d * Hv x * d =\n  inverse (c *\\<^sub>R 1 * d) * Hv x * c *\\<^sub>R (d * 1)\n\ngoal (1 subgoal):\n 1. c \\<noteq> 0 \\<Longrightarrow>\n    HIm (inverse d * Hv x * d) =\n    HIm (inverse (octo_of_real c * d) * Hv x * (octo_of_real c * d))", "then"], ["proof (chain)\npicking this:\n  inverse d * Hv x * d =\n  inverse (c *\\<^sub>R 1 * d) * Hv x * c *\\<^sub>R (d * 1)", "show\n      \"HIm (inverse d * Hv x * d) = HIm (inverse (octo_of_real c * d) * Hv x * (octo_of_real c * d))\""], ["proof (prove)\nusing this:\n  inverse d * Hv x * d =\n  inverse (c *\\<^sub>R 1 * d) * Hv x * c *\\<^sub>R (d * 1)\n\ngoal (1 subgoal):\n 1. HIm (inverse d * Hv x * d) =\n    HIm (inverse (octo_of_real c * d) * Hv x * (octo_of_real c * d))", "using octo_mult_scaleR_right octo_of_real_def octo_of_real_times_commute"], ["proof (prove)\nusing this:\n  inverse d * Hv x * d =\n  inverse (c *\\<^sub>R 1 * d) * Hv x * c *\\<^sub>R (d * 1)\n  ?x * ?r *\\<^sub>R ?y = ?r *\\<^sub>R (?x * ?y)\n  octo_of_real ?r = ?r *\\<^sub>R 1\n  octo_of_real ?r * ?q = ?q * octo_of_real ?r\n\ngoal (1 subgoal):\n 1. HIm (inverse d * Hv x * d) =\n    HIm (inverse (octo_of_real c * d) * Hv x * (octo_of_real c * d))", "by presburger"], ["proof (state)\nthis:\n  HIm (inverse d * Hv x * d) =\n  HIm (inverse (octo_of_real c * d) * Hv x * (octo_of_real c * d))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  HIm (Octonions.cnj d * Hv ?x * d) =\n  HIm (inverse (octo_of_real c * d) * Hv ?x * (octo_of_real c * d))\n\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (inverse q * Hv x * q))", "then"], ["proof (chain)\npicking this:\n  HIm (Octonions.cnj d * Hv ?x * d) =\n  HIm (inverse (octo_of_real c * d) * Hv ?x * (octo_of_real c * d))", "show ?thesis"], ["proof (prove)\nusing this:\n  HIm (Octonions.cnj d * Hv ?x * d) =\n  HIm (inverse (octo_of_real c * d) * Hv ?x * (octo_of_real c * d))\n\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (inverse q * Hv x * q))", "using orthogonal_transformation_octo_congruence [OF 1]"], ["proof (prove)\nusing this:\n  HIm (Octonions.cnj d * Hv ?x * d) =\n  HIm (inverse (octo_of_real c * d) * Hv ?x * (octo_of_real c * d))\n  orthogonal_transformation (\\<lambda>x. HIm (Octonions.cnj d * Hv x * d))\n\ngoal (1 subgoal):\n 1. orthogonal_transformation (\\<lambda>x. HIm (inverse q * Hv x * q))", "by (simp add: eq)"], ["proof (state)\nthis:\n  orthogonal_transformation (\\<lambda>x. HIm (inverse q * Hv x * q))\n\ngoal:\nNo subgoals!", "qed"], ["", "unbundle no_cross7_syntax"], ["", "bundle octonion_syntax\nbegin"], ["", "notation octo_e0 (\"e0\")"], ["", "notation octo_e1 (\"e1\")"], ["", "notation octo_e2 (\"e2\")"], ["", "notation octo_e3 (\"e3\")"], ["", "notation octo_e4 (\"e4\")"], ["", "notation octo_e5 (\"e5\")"], ["", "notation octo_e6 (\"e6\")"], ["", "notation octo_e7 (\"e7\")"], ["", "end"], ["", "bundle no_octonion_syntax\nbegin"], ["", "no_notation octo_e0 (\"e0\")"], ["", "no_notation octo_e1 (\"e1\")"], ["", "no_notation octo_e2 (\"e2\")"], ["", "no_notation octo_e3 (\"e3\")"], ["", "no_notation octo_e4 (\"e4\")"], ["", "no_notation octo_e5 (\"e5\")"], ["", "no_notation octo_e6 (\"e6\")"], ["", "no_notation octo_e7 (\"e7\")"], ["", "end"], ["", "unbundle no_octonion_syntax"], ["", "hide_const (open) Octonions.cnj"], ["", "end"]]}