{"file_name": "/home/qj213/afp-2021-10-22/thys/LinearQuantifierElim/Thys/DLO.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LinearQuantifierElim", "problem_names": ["lemma is_Less_iff: \"is_Less a = (\\<exists>i j. a = Less i j)\"", "lemma is_Eq_iff: \"(\\<forall>i j. a \\<noteq> Less i j) = (\\<exists>i j. a = Eq i j)\"", "lemma not_is_Eq_iff: \"(\\<forall>i j. a \\<noteq> Eq i j) = (\\<exists>i j. a = Less i j)\"", "lemmas DLO_code_lemmas = nnf_def qelim_def lift_dnf_qe_def lift_nnf_qe_def", "lemmas [folded DLO_code_lemmas, code] =\n  DLO.nnf.simps DLO.qelim_def DLO.lift_dnf_qe.simps DLO.lift_dnf_qe.simps", "lemma set_lbounds: \"set(lbounds as) = {i. Less (Suc i) 0 \\<in> set as}\"", "lemma set_ubounds: \"set(ubounds as) = {i. Less 0 (Suc i) \\<in> set as}\"", "lemma set_ebounds:\n  \"set(ebounds as) = {k. Eq (Suc k) 0 \\<in> set as \\<or> Eq 0 (Suc k) \\<in> set as}\"", "lemma EQ_And[simp]: \"EQ (And f g) xs = (EQ f xs \\<union> EQ g xs)\"", "lemma EQ_Or[simp]: \"EQ (Or f g) xs = (EQ f xs \\<union> EQ g xs)\"", "lemma EQ_conv_set_ebounds:\n  \"x \\<in> EQ f xs = (\\<exists>e\\<in>set(ebounds(DLO.atoms\\<^sub>0 f)). x = xs!e)\"", "lemma I_subst:\n \"qfree f \\<Longrightarrow> DLO.I (subst f k) xs = DLO.I f (xs!k # xs)\"", "lemma min_inf:\n  \"nqfree f \\<Longrightarrow> \\<exists>x. \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs)\"\n  (is \"_ \\<Longrightarrow> \\<exists>x. ?P f x\")", "lemma plus_inf:\n  \"nqfree f \\<Longrightarrow> \\<exists>x.\\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs)\"\n  (is \"_ \\<Longrightarrow> \\<exists>x. ?P f x\")", "lemma LBex:\n \"\\<lbrakk> nqfree f; DLO.I f (x#xs); \\<not>DLO.I (inf\\<^sub>- f) xs; x \\<notin> EQ f xs \\<rbrakk>\n  \\<Longrightarrow> \\<exists>l\\<in> LB f xs. l < x\"", "lemma UBex:\n \"\\<lbrakk> nqfree f; DLO.I f (x#xs); \\<not>DLO.I (inf\\<^sub>+ f) xs; x \\<notin> EQ f xs \\<rbrakk>\n  \\<Longrightarrow> \\<exists>u \\<in> UB f xs. x < u\"", "lemma finite_LB: \"finite(LB f xs)\"", "lemma finite_UB: \"finite(UB f xs)\"", "lemma qfree_amin_inf: \"qfree (amin_inf a)\"", "lemma qfree_min_inf: \"nqfree \\<phi> \\<Longrightarrow> qfree(inf\\<^sub>- \\<phi>)\"", "lemma qfree_aplus_inf: \"qfree (aplus_inf a)\"", "lemma qfree_plus_inf: \"nqfree \\<phi> \\<Longrightarrow> qfree(inf\\<^sub>+ \\<phi>)\""], "translations": [["", "lemma is_Less_iff: \"is_Less a = (\\<exists>i j. a = Less i j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Less a = (\\<exists>i j. a = Less i j)", "by(cases a) auto"], ["", "lemma is_Eq_iff: \"(\\<forall>i j. a \\<noteq> Less i j) = (\\<exists>i j. a = Eq i j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i j. a \\<noteq> Less i j) = (\\<exists>i j. a = Eq i j)", "by(cases a) auto"], ["", "lemma not_is_Eq_iff: \"(\\<forall>i j. a \\<noteq> Eq i j) = (\\<exists>i j. a = Less i j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i j. a \\<noteq> Eq i j) = (\\<exists>i j. a = Less i j)", "by(cases a) auto"], ["", "fun neg\\<^sub>d\\<^sub>l\\<^sub>o :: \"atom \\<Rightarrow> atom fm\" where\n\"neg\\<^sub>d\\<^sub>l\\<^sub>o (Less i j) = Or (Atom(Less j i)) (Atom(Eq i j))\" |\n\"neg\\<^sub>d\\<^sub>l\\<^sub>o (Eq i j) = Or (Atom(Less i j)) (Atom(Less j i))\""], ["", "fun I\\<^sub>d\\<^sub>l\\<^sub>o :: \"atom \\<Rightarrow> 'a::dlo list \\<Rightarrow> bool\" where\n\"I\\<^sub>d\\<^sub>l\\<^sub>o (Eq i j) xs = (xs!i = xs!j)\" |\n\"I\\<^sub>d\\<^sub>l\\<^sub>o (Less i j) xs = (xs!i < xs!j)\""], ["", "fun depends\\<^sub>d\\<^sub>l\\<^sub>o :: \"atom \\<Rightarrow> bool\" where\n\"depends\\<^sub>d\\<^sub>l\\<^sub>o(Eq i j) = (i=0 | j=0)\" |\n\"depends\\<^sub>d\\<^sub>l\\<^sub>o(Less i j) = (i=0 | j=0)\""], ["", "fun decr\\<^sub>d\\<^sub>l\\<^sub>o :: \"atom \\<Rightarrow> atom\" where\n\"decr\\<^sub>d\\<^sub>l\\<^sub>o (Less i j) = Less (i - 1) (j - 1)\" |\n\"decr\\<^sub>d\\<^sub>l\\<^sub>o (Eq i j) = Eq (i - 1) (j - 1)\""], ["", "(* needed for code generation *)"], ["", "definition [code del]: \"nnf = ATOM.nnf neg\\<^sub>d\\<^sub>l\\<^sub>o\""], ["", "definition [code del]: \"qelim = ATOM.qelim depends\\<^sub>d\\<^sub>l\\<^sub>o decr\\<^sub>d\\<^sub>l\\<^sub>o\""], ["", "definition [code del]: \"lift_dnf_qe = ATOM.lift_dnf_qe neg\\<^sub>d\\<^sub>l\\<^sub>o depends\\<^sub>d\\<^sub>l\\<^sub>o decr\\<^sub>d\\<^sub>l\\<^sub>o\""], ["", "definition [code del]: \"lift_nnf_qe = ATOM.lift_nnf_qe neg\\<^sub>d\\<^sub>l\\<^sub>o\""], ["", "hide_const nnf qelim lift_dnf_qe lift_nnf_qe"], ["", "lemmas DLO_code_lemmas = nnf_def qelim_def lift_dnf_qe_def lift_nnf_qe_def"], ["", "interpretation DLO:\n  ATOM neg\\<^sub>d\\<^sub>l\\<^sub>o \"(\\<lambda>a. True)\" I\\<^sub>d\\<^sub>l\\<^sub>o depends\\<^sub>d\\<^sub>l\\<^sub>o decr\\<^sub>d\\<^sub>l\\<^sub>o"], ["proof (prove)\ngoal (1 subgoal):\n 1. ATOM neg\\<^sub>d\\<^sub>l\\<^sub>o (\\<lambda>a. True)\n     I\\<^sub>d\\<^sub>l\\<^sub>o depends\\<^sub>d\\<^sub>l\\<^sub>o\n     decr\\<^sub>d\\<^sub>l\\<^sub>o", "apply(unfold_locales)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a. nqfree (neg\\<^sub>d\\<^sub>l\\<^sub>o a)\n 2. \\<And>a.\n       True \\<Longrightarrow>\n       \\<forall>b\\<in>atoms (neg\\<^sub>d\\<^sub>l\\<^sub>o a). True\n 3. \\<And>a xs.\n       interpret I\\<^sub>d\\<^sub>l\\<^sub>o (neg\\<^sub>d\\<^sub>l\\<^sub>o a)\n        xs =\n       (\\<not> I\\<^sub>d\\<^sub>l\\<^sub>o a xs)\n 4. \\<And>a x xs.\n       \\<not> depends\\<^sub>d\\<^sub>l\\<^sub>o a \\<Longrightarrow>\n       I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) =\n       I\\<^sub>d\\<^sub>l\\<^sub>o (decr\\<^sub>d\\<^sub>l\\<^sub>o a) xs\n 5. \\<And>a.\n       \\<lbrakk>\\<not> depends\\<^sub>d\\<^sub>l\\<^sub>o a; True\\<rbrakk>\n       \\<Longrightarrow> True", "apply(case_tac a)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a x11 x12.\n       a = Less x11 x12 \\<Longrightarrow>\n       nqfree (neg\\<^sub>d\\<^sub>l\\<^sub>o a)\n 2. \\<And>a x21 x22.\n       a = Eq x21 x22 \\<Longrightarrow>\n       nqfree (neg\\<^sub>d\\<^sub>l\\<^sub>o a)\n 3. \\<And>a.\n       True \\<Longrightarrow>\n       \\<forall>b\\<in>atoms (neg\\<^sub>d\\<^sub>l\\<^sub>o a). True\n 4. \\<And>a xs.\n       interpret I\\<^sub>d\\<^sub>l\\<^sub>o (neg\\<^sub>d\\<^sub>l\\<^sub>o a)\n        xs =\n       (\\<not> I\\<^sub>d\\<^sub>l\\<^sub>o a xs)\n 5. \\<And>a x xs.\n       \\<not> depends\\<^sub>d\\<^sub>l\\<^sub>o a \\<Longrightarrow>\n       I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) =\n       I\\<^sub>d\\<^sub>l\\<^sub>o (decr\\<^sub>d\\<^sub>l\\<^sub>o a) xs\n 6. \\<And>a.\n       \\<lbrakk>\\<not> depends\\<^sub>d\\<^sub>l\\<^sub>o a; True\\<rbrakk>\n       \\<Longrightarrow> True", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs.\n       interpret I\\<^sub>d\\<^sub>l\\<^sub>o (neg\\<^sub>d\\<^sub>l\\<^sub>o a)\n        xs =\n       (\\<not> I\\<^sub>d\\<^sub>l\\<^sub>o a xs)\n 2. \\<And>a x xs.\n       \\<not> depends\\<^sub>d\\<^sub>l\\<^sub>o a \\<Longrightarrow>\n       I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) =\n       I\\<^sub>d\\<^sub>l\\<^sub>o (decr\\<^sub>d\\<^sub>l\\<^sub>o a) xs", "apply(case_tac a)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs x11 x12.\n       a = Less x11 x12 \\<Longrightarrow>\n       interpret I\\<^sub>d\\<^sub>l\\<^sub>o (neg\\<^sub>d\\<^sub>l\\<^sub>o a)\n        xs =\n       (\\<not> I\\<^sub>d\\<^sub>l\\<^sub>o a xs)\n 2. \\<And>a xs x21 x22.\n       a = Eq x21 x22 \\<Longrightarrow>\n       interpret I\\<^sub>d\\<^sub>l\\<^sub>o (neg\\<^sub>d\\<^sub>l\\<^sub>o a)\n        xs =\n       (\\<not> I\\<^sub>d\\<^sub>l\\<^sub>o a xs)\n 3. \\<And>a x xs.\n       \\<not> depends\\<^sub>d\\<^sub>l\\<^sub>o a \\<Longrightarrow>\n       I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) =\n       I\\<^sub>d\\<^sub>l\\<^sub>o (decr\\<^sub>d\\<^sub>l\\<^sub>o a) xs", "apply (simp_all add:linorder_class.not_less_iff_gr_or_eq\n                    linorder_not_less linorder_neq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a x xs.\n       \\<not> depends\\<^sub>d\\<^sub>l\\<^sub>o a \\<Longrightarrow>\n       I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) =\n       I\\<^sub>d\\<^sub>l\\<^sub>o (decr\\<^sub>d\\<^sub>l\\<^sub>o a) xs", "apply(case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x xs x11 x12.\n       \\<lbrakk>\\<not> depends\\<^sub>d\\<^sub>l\\<^sub>o a;\n        a = Less x11 x12\\<rbrakk>\n       \\<Longrightarrow> I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) =\n                         I\\<^sub>d\\<^sub>l\\<^sub>o\n                          (decr\\<^sub>d\\<^sub>l\\<^sub>o a) xs\n 2. \\<And>a x xs x21 x22.\n       \\<lbrakk>\\<not> depends\\<^sub>d\\<^sub>l\\<^sub>o a;\n        a = Eq x21 x22\\<rbrakk>\n       \\<Longrightarrow> I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) =\n                         I\\<^sub>d\\<^sub>l\\<^sub>o\n                          (decr\\<^sub>d\\<^sub>l\\<^sub>o a) xs", "apply(simp_all add:nth_Cons')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas [folded DLO_code_lemmas, code] =\n  DLO.nnf.simps DLO.qelim_def DLO.lift_dnf_qe.simps DLO.lift_dnf_qe.simps"], ["", "setup \\<open>Sign.revert_abbrev \"\" @{const_abbrev DLO.I}\\<close>"], ["", "definition lbounds where \"lbounds as = [i. Less (Suc i) 0 \\<leftarrow> as]\""], ["", "definition ubounds where \"ubounds as = [i. Less 0 (Suc i) \\<leftarrow> as]\""], ["", "definition ebounds where\n \"ebounds as = [i. Eq (Suc i) 0 \\<leftarrow> as] @ [i. Eq 0 (Suc i) \\<leftarrow> as]\""], ["", "lemma set_lbounds: \"set(lbounds as) = {i. Less (Suc i) 0 \\<in> set as}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (lbounds as) = {i. Less (Suc i) 0 \\<in> set as}", "by(auto simp: lbounds_def split:nat.splits atom.splits)"], ["", "lemma set_ubounds: \"set(ubounds as) = {i. Less 0 (Suc i) \\<in> set as}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ubounds as) = {i. Less 0 (Suc i) \\<in> set as}", "by(auto simp: ubounds_def split:nat.splits atom.splits)"], ["", "lemma set_ebounds:\n  \"set(ebounds as) = {k. Eq (Suc k) 0 \\<in> set as \\<or> Eq 0 (Suc k) \\<in> set as}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ebounds as) =\n    {k. Eq (Suc k) 0 \\<in> set as \\<or> Eq 0 (Suc k) \\<in> set as}", "by(auto simp: ebounds_def split: atom.splits nat.splits)"], ["", "abbreviation \"LB f xs \\<equiv> {xs!i|i. Less (Suc i) 0 \\<in> set(DLO.atoms\\<^sub>0 f)}\""], ["", "abbreviation \"UB f xs \\<equiv> {xs!i|i. Less 0 (Suc i) \\<in> set(DLO.atoms\\<^sub>0 f)}\""], ["", "definition \"EQ f xs = {xs!k|k.\n  Eq (Suc k) 0 \\<in> set(DLO.atoms\\<^sub>0 f) \\<or> Eq 0 (Suc k) \\<in> set(DLO.atoms\\<^sub>0 f)}\""], ["", "lemma EQ_And[simp]: \"EQ (And f g) xs = (EQ f xs \\<union> EQ g xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EQ (And f g) xs = EQ f xs \\<union> EQ g xs", "by(auto simp:EQ_def)"], ["", "lemma EQ_Or[simp]: \"EQ (Or f g) xs = (EQ f xs \\<union> EQ g xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. EQ (Or f g) xs = EQ f xs \\<union> EQ g xs", "by(auto simp:EQ_def)"], ["", "lemma EQ_conv_set_ebounds:\n  \"x \\<in> EQ f xs = (\\<exists>e\\<in>set(ebounds(DLO.atoms\\<^sub>0 f)). x = xs!e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> EQ f xs) =\n    (\\<exists>e\\<in>set (ebounds (DLO.atoms\\<^sub>0 f)). x = xs ! e)", "by(auto simp: EQ_def set_ebounds)"], ["", "fun isubst where \"isubst k 0 = k\" | \"isubst k (Suc i) = i\""], ["", "fun asubst :: \"nat \\<Rightarrow> atom \\<Rightarrow> atom\" where\n\"asubst k (Less i j) = Less (isubst k i) (isubst k j)\"|\n\"asubst k (Eq i j) = Eq (isubst k i) (isubst k j)\""], ["", "abbreviation \"subst \\<phi> k \\<equiv> map\\<^sub>f\\<^sub>m (asubst k) \\<phi>\""], ["", "lemma I_subst:\n \"qfree f \\<Longrightarrow> DLO.I (subst f k) xs = DLO.I f (xs!k # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qfree f \\<Longrightarrow> DLO.I (subst f k) xs = DLO.I f (xs ! k # xs)", "apply(induct f)"], ["proof (prove)\ngoal (7 subgoals):\n 1. qfree TrueF \\<Longrightarrow>\n    DLO.I (subst TrueF k) xs = DLO.I TrueF (xs ! k # xs)\n 2. qfree FalseF \\<Longrightarrow>\n    DLO.I (subst FalseF k) xs = DLO.I FalseF (xs ! k # xs)\n 3. \\<And>x.\n       qfree (Atom x) \\<Longrightarrow>\n       DLO.I (subst (Atom x) k) xs = DLO.I (Atom x) (xs ! k # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>qfree f1 \\<Longrightarrow>\n                DLO.I (subst f1 k) xs = DLO.I f1 (xs ! k # xs);\n        qfree f2 \\<Longrightarrow>\n        DLO.I (subst f2 k) xs = DLO.I f2 (xs ! k # xs);\n        qfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> DLO.I (subst (And f1 f2) k) xs =\n                         DLO.I (And f1 f2) (xs ! k # xs)\n 5. \\<And>f1 f2.\n       \\<lbrakk>qfree f1 \\<Longrightarrow>\n                DLO.I (subst f1 k) xs = DLO.I f1 (xs ! k # xs);\n        qfree f2 \\<Longrightarrow>\n        DLO.I (subst f2 k) xs = DLO.I f2 (xs ! k # xs);\n        qfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> DLO.I (subst (Or f1 f2) k) xs =\n                         DLO.I (Or f1 f2) (xs ! k # xs)\n 6. \\<And>f.\n       \\<lbrakk>qfree f \\<Longrightarrow>\n                DLO.I (subst f k) xs = DLO.I f (xs ! k # xs);\n        qfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> DLO.I (subst (Neg f) k) xs =\n                         DLO.I (Neg f) (xs ! k # xs)\n 7. \\<And>f.\n       \\<lbrakk>qfree f \\<Longrightarrow>\n                DLO.I (subst f k) xs = DLO.I f (xs ! k # xs);\n        qfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> DLO.I (subst (ExQ f) k) xs =\n                         DLO.I (ExQ f) (xs ! k # xs)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       I\\<^sub>d\\<^sub>l\\<^sub>o (asubst k x) xs =\n       I\\<^sub>d\\<^sub>l\\<^sub>o x (xs ! k # xs)", "apply(rename_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       I\\<^sub>d\\<^sub>l\\<^sub>o (asubst k a) xs =\n       I\\<^sub>d\\<^sub>l\\<^sub>o a (xs ! k # xs)", "apply(case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x11 x12.\n       a = Less x11 x12 \\<Longrightarrow>\n       I\\<^sub>d\\<^sub>l\\<^sub>o (asubst k a) xs =\n       I\\<^sub>d\\<^sub>l\\<^sub>o a (xs ! k # xs)\n 2. \\<And>a x21 x22.\n       a = Eq x21 x22 \\<Longrightarrow>\n       I\\<^sub>d\\<^sub>l\\<^sub>o (asubst k a) xs =\n       I\\<^sub>d\\<^sub>l\\<^sub>o a (xs ! k # xs)", "apply(simp_all add:nth.simps split:nat.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "fun amin_inf :: \"atom \\<Rightarrow> atom fm\" where\n\"amin_inf (Less _ 0) = FalseF\" |\n\"amin_inf (Less 0 _) = TrueF\" |\n\"amin_inf (Less (Suc i) (Suc j)) = Atom(Less i j)\" |\n\"amin_inf (Eq 0 0) = TrueF\" |\n\"amin_inf (Eq 0 _) = FalseF\" |\n\"amin_inf (Eq _ 0) = FalseF\" |\n\"amin_inf (Eq (Suc i) (Suc j)) = Atom(Eq i j)\""], ["", "abbreviation min_inf :: \"atom fm \\<Rightarrow> atom fm\" (\"inf\\<^sub>-\") where\n\"inf\\<^sub>- \\<equiv> amap\\<^sub>f\\<^sub>m amin_inf\""], ["", "fun aplus_inf :: \"atom \\<Rightarrow> atom fm\" where\n\"aplus_inf (Less 0 _) = FalseF\" |\n\"aplus_inf (Less _ 0) = TrueF\" |\n\"aplus_inf (Less (Suc i) (Suc j)) = Atom(Less i j)\" |\n\"aplus_inf (Eq 0 0) = TrueF\" |\n\"aplus_inf (Eq 0 _) = FalseF\" |\n\"aplus_inf (Eq _ 0) = FalseF\" |\n\"aplus_inf (Eq (Suc i) (Suc j)) = Atom(Eq i j)\""], ["", "abbreviation plus_inf :: \"atom fm \\<Rightarrow> atom fm\" (\"inf\\<^sub>+\") where\n\"inf\\<^sub>+ \\<equiv> amap\\<^sub>f\\<^sub>m aplus_inf\""], ["", "lemma min_inf:\n  \"nqfree f \\<Longrightarrow> \\<exists>x. \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs)\"\n  (is \"_ \\<Longrightarrow> \\<exists>x. ?P f x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. nqfree f \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs)", "proof(induct f)"], ["proof (state)\ngoal (7 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>x.\n       nqfree (Atom x) \\<Longrightarrow>\n       \\<exists>xa.\n          \\<forall>y\\<le>xa.\n             DLO.I (inf\\<^sub>- (Atom x)) xs = DLO.I (Atom x) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 5. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 7. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "case (Atom a)"], ["proof (state)\nthis:\n  nqfree (Atom a)\n\ngoal (7 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>x.\n       nqfree (Atom x) \\<Longrightarrow>\n       \\<exists>xa.\n          \\<forall>y\\<le>xa.\n             DLO.I (inf\\<^sub>- (Atom x)) xs = DLO.I (Atom x) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 5. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 7. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "proof (cases a rule: amin_inf.cases)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       a = Less uu_ 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. \\<And>v.\n       a = Less 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 6. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 7. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "case 1"], ["proof (state)\nthis:\n  a = Less uu_ 0\n\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       a = Less uu_ 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. \\<And>v.\n       a = Less 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 6. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 7. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = Less uu_ 0\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "by(auto simp add:nth_Cons' linorder_not_less)"], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<le>x.\n        DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n\ngoal (6 subgoals):\n 1. \\<And>v.\n       a = Less 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 6. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>v.\n       a = Less 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 6. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "case 2"], ["proof (state)\nthis:\n  a = Less 0 (Suc v_)\n\ngoal (6 subgoals):\n 1. \\<And>v.\n       a = Less 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 6. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = Less 0 (Suc v_)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "by (simp) (metis no_lb linorder_not_less order_less_le_trans)"], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<le>x.\n        DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n\ngoal (5 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "case 5"], ["proof (state)\nthis:\n  a = Eq 0 (Suc v_)\n\ngoal (5 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = Eq 0 (Suc v_)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "by(simp add:nth_Cons') (metis no_lb linorder_not_less)"], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<le>x.\n        DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n\ngoal (4 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "case 6"], ["proof (state)\nthis:\n  a = Eq (Suc v_) 0\n\ngoal (4 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = Eq (Suc v_) 0\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "by simp (metis no_lb linorder_not_less)"], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<le>x.\n        DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<le>x.\n             DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)", "qed simp_all"], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<le>x.\n        DLO.I (inf\\<^sub>- (Atom a)) xs = DLO.I (Atom a) (y # xs)\n\ngoal (6 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "case (And f1 f2)"], ["proof (state)\nthis:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\n  nqfree (And f1 f2)\n\ngoal (6 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "then"], ["proof (chain)\npicking this:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\n  nqfree (And f1 f2)", "obtain x1 x2 where \"?P f1 x1\" \"?P f2 x2\""], ["proof (prove)\nusing this:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\n  nqfree (And f1 f2)\n\ngoal (1 subgoal):\n 1. (\\<And>x1 x2.\n        \\<lbrakk>\\<forall>y\\<le>x1.\n                    DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n         \\<forall>y\\<le>x2.\n            DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce+"], ["proof (state)\nthis:\n  \\<forall>y\\<le>x1. DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs)\n  \\<forall>y\\<le>x2. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\n\ngoal (6 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "hence \"?P (And f1 f2) (min x1 x2)\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<le>x1. DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs)\n  \\<forall>y\\<le>x2. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<le>min x1 x2.\n       DLO.I (inf\\<^sub>- (And f1 f2)) xs = DLO.I (And f1 f2) (y # xs)", "by(force simp:and_def)"], ["proof (state)\nthis:\n  \\<forall>y\\<le>min x1 x2.\n     DLO.I (inf\\<^sub>- (And f1 f2)) xs = DLO.I (And f1 f2) (y # xs)\n\ngoal (6 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>y\\<le>min x1 x2.\n     DLO.I (inf\\<^sub>- (And f1 f2)) xs = DLO.I (And f1 f2) (y # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (And f1 f2)) xs = DLO.I (And f1 f2) (y # xs)", ".."], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<le>x.\n        DLO.I (inf\\<^sub>- (And f1 f2)) xs = DLO.I (And f1 f2) (y # xs)\n\ngoal (5 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "case (Or f1 f2)"], ["proof (state)\nthis:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\n  nqfree (Or f1 f2)\n\ngoal (5 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "then"], ["proof (chain)\npicking this:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\n  nqfree (Or f1 f2)", "obtain x1 x2 where \"?P f1 x1\" \"?P f2 x2\""], ["proof (prove)\nusing this:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\n  nqfree (Or f1 f2)\n\ngoal (1 subgoal):\n 1. (\\<And>x1 x2.\n        \\<lbrakk>\\<forall>y\\<le>x1.\n                    DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n         \\<forall>y\\<le>x2.\n            DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce+"], ["proof (state)\nthis:\n  \\<forall>y\\<le>x1. DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs)\n  \\<forall>y\\<le>x2. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\n\ngoal (5 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "hence \"?P (Or f1 f2) (min x1 x2)\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<le>x1. DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs)\n  \\<forall>y\\<le>x2. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs)\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<le>min x1 x2.\n       DLO.I (inf\\<^sub>- (Or f1 f2)) xs = DLO.I (Or f1 f2) (y # xs)", "by(force simp:or_def)"], ["proof (state)\nthis:\n  \\<forall>y\\<le>min x1 x2.\n     DLO.I (inf\\<^sub>- (Or f1 f2)) xs = DLO.I (Or f1 f2) (y # xs)\n\ngoal (5 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>y\\<le>min x1 x2.\n     DLO.I (inf\\<^sub>- (Or f1 f2)) xs = DLO.I (Or f1 f2) (y # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- (Or f1 f2)) xs = DLO.I (Or f1 f2) (y # xs)", ".."], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<le>x.\n        DLO.I (inf\\<^sub>- (Or f1 f2)) xs = DLO.I (Or f1 f2) (y # xs)\n\ngoal (4 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x. DLO.I (inf\\<^sub>- TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<le>x.\n          DLO.I (inf\\<^sub>- FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<le>x.\n                      DLO.I (inf\\<^sub>- f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<le>x.\n                               DLO.I (inf\\<^sub>- (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "qed simp_all"], ["", "lemma plus_inf:\n  \"nqfree f \\<Longrightarrow> \\<exists>x.\\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs)\"\n  (is \"_ \\<Longrightarrow> \\<exists>x. ?P f x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. nqfree f \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs)", "proof (induct f)"], ["proof (state)\ngoal (7 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>x.\n       nqfree (Atom x) \\<Longrightarrow>\n       \\<exists>xa.\n          \\<forall>y\\<ge>xa.\n             DLO.I (inf\\<^sub>+ (Atom x)) xs = DLO.I (Atom x) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 5. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 7. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "have dlo_bound: \"\\<And>z::'a. \\<exists>x. \\<forall>y\\<ge>x. y > z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z. \\<exists>x. \\<forall>y\\<ge>x. z < y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z. \\<exists>x. \\<forall>y\\<ge>x. z < y", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z. \\<exists>x. \\<forall>y\\<ge>x. z < y", "from no_ub"], ["proof (chain)\npicking this:\n  \\<exists>u. ?x < u", "obtain w :: 'a where \"w > z\""], ["proof (prove)\nusing this:\n  \\<exists>u. ?x < u\n\ngoal (1 subgoal):\n 1. (\\<And>w. z < w \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  z < w\n\ngoal (1 subgoal):\n 1. \\<And>z. \\<exists>x. \\<forall>y\\<ge>x. z < y", "then"], ["proof (chain)\npicking this:\n  z < w", "have \"\\<forall>y\\<ge>w. y > z\""], ["proof (prove)\nusing this:\n  z < w\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<ge>w. z < y", "by auto"], ["proof (state)\nthis:\n  \\<forall>y\\<ge>w. z < y\n\ngoal (1 subgoal):\n 1. \\<And>z. \\<exists>x. \\<forall>y\\<ge>x. z < y", "then"], ["proof (chain)\npicking this:\n  \\<forall>y\\<ge>w. z < y", "show \"?thesis z\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<ge>w. z < y\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>y\\<ge>x. z < y", ".."], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>y\\<ge>x. z < y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>y\\<ge>x. ?z < y\n\ngoal (7 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>x.\n       nqfree (Atom x) \\<Longrightarrow>\n       \\<exists>xa.\n          \\<forall>y\\<ge>xa.\n             DLO.I (inf\\<^sub>+ (Atom x)) xs = DLO.I (Atom x) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 5. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 7. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "case (Atom a)"], ["proof (state)\nthis:\n  nqfree (Atom a)\n\ngoal (7 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>x.\n       nqfree (Atom x) \\<Longrightarrow>\n       \\<exists>xa.\n          \\<forall>y\\<ge>xa.\n             DLO.I (inf\\<^sub>+ (Atom x)) xs = DLO.I (Atom x) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 5. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 7. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "proof (cases a rule: aplus_inf.cases)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       a = Less 0 uu_ \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. \\<And>v.\n       a = Less (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 6. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 7. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "case 1"], ["proof (state)\nthis:\n  a = Less 0 uu_\n\ngoal (7 subgoals):\n 1. \\<And>uu_.\n       a = Less 0 uu_ \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. \\<And>v.\n       a = Less (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 6. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 7. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = Less 0 uu_\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "by (simp add: nth_Cons') (metis linorder_not_less)"], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<ge>x.\n        DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n\ngoal (6 subgoals):\n 1. \\<And>v.\n       a = Less (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 6. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>v.\n       a = Less (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 6. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "case 2"], ["proof (state)\nthis:\n  a = Less (Suc v_) 0\n\ngoal (6 subgoals):\n 1. \\<And>v.\n       a = Less (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 6. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = Less (Suc v_) 0\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "by (auto intro: dlo_bound)"], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<ge>x.\n        DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n\ngoal (5 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "case 5"], ["proof (state)\nthis:\n  a = Eq 0 (Suc v_)\n\ngoal (5 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq 0 (Suc v) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 5. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = Eq 0 (Suc v_)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "by simp (metis dlo_bound less_imp_neq)"], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<ge>x.\n        DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n\ngoal (4 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "case 6"], ["proof (state)\nthis:\n  a = Eq (Suc v_) 0\n\ngoal (4 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>v.\n       a = Eq (Suc v) 0 \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 4. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = Eq (Suc v_) 0\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "by simp (metis dlo_bound less_imp_neq)"], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<ge>x.\n        DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       a = Less (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 2. a = Eq 0 0 \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n 3. \\<And>i j.\n       a = Eq (Suc i) (Suc j) \\<Longrightarrow>\n       \\<exists>x.\n          \\<forall>y\\<ge>x.\n             DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)", "qed simp_all"], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<ge>x.\n        DLO.I (inf\\<^sub>+ (Atom a)) xs = DLO.I (Atom a) (y # xs)\n\ngoal (6 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "case (And f1 f2)"], ["proof (state)\nthis:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\n  nqfree (And f1 f2)\n\ngoal (6 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "then"], ["proof (chain)\npicking this:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\n  nqfree (And f1 f2)", "obtain x1 x2 where \"?P f1 x1\" \"?P f2 x2\""], ["proof (prove)\nusing this:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\n  nqfree (And f1 f2)\n\ngoal (1 subgoal):\n 1. (\\<And>x1 x2.\n        \\<lbrakk>\\<forall>y\\<ge>x1.\n                    DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n         \\<forall>y\\<ge>x2.\n            DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce+"], ["proof (state)\nthis:\n  \\<forall>y\\<ge>x1. DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs)\n  \\<forall>y\\<ge>x2. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\n\ngoal (6 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "hence \"?P (And f1 f2) (max x1 x2)\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<ge>x1. DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs)\n  \\<forall>y\\<ge>x2. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<ge>max x1 x2.\n       DLO.I (inf\\<^sub>+ (And f1 f2)) xs = DLO.I (And f1 f2) (y # xs)", "by(force simp:and_def)"], ["proof (state)\nthis:\n  \\<forall>y\\<ge>max x1 x2.\n     DLO.I (inf\\<^sub>+ (And f1 f2)) xs = DLO.I (And f1 f2) (y # xs)\n\ngoal (6 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (And f1 f2)) xs =\n                               DLO.I (And f1 f2) (y # xs)\n 4. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 6. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>y\\<ge>max x1 x2.\n     DLO.I (inf\\<^sub>+ (And f1 f2)) xs = DLO.I (And f1 f2) (y # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (And f1 f2)) xs = DLO.I (And f1 f2) (y # xs)", ".."], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<ge>x.\n        DLO.I (inf\\<^sub>+ (And f1 f2)) xs = DLO.I (And f1 f2) (y # xs)\n\ngoal (5 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "case (Or f1 f2)"], ["proof (state)\nthis:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\n  nqfree (Or f1 f2)\n\ngoal (5 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "then"], ["proof (chain)\npicking this:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\n  nqfree (Or f1 f2)", "obtain x1 x2 where \"?P f1 x1\" \"?P f2 x2\""], ["proof (prove)\nusing this:\n  nqfree f1 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs)\n  nqfree f2 \\<Longrightarrow>\n  \\<exists>x.\n     \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\n  nqfree (Or f1 f2)\n\ngoal (1 subgoal):\n 1. (\\<And>x1 x2.\n        \\<lbrakk>\\<forall>y\\<ge>x1.\n                    DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n         \\<forall>y\\<ge>x2.\n            DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce+"], ["proof (state)\nthis:\n  \\<forall>y\\<ge>x1. DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs)\n  \\<forall>y\\<ge>x2. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\n\ngoal (5 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "hence \"?P (Or f1 f2) (max x1 x2)\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<ge>x1. DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs)\n  \\<forall>y\\<ge>x2. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs)\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<ge>max x1 x2.\n       DLO.I (inf\\<^sub>+ (Or f1 f2)) xs = DLO.I (Or f1 f2) (y # xs)", "by(force simp:or_def)"], ["proof (state)\nthis:\n  \\<forall>y\\<ge>max x1 x2.\n     DLO.I (inf\\<^sub>+ (Or f1 f2)) xs = DLO.I (Or f1 f2) (y # xs)\n\ngoal (5 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f1 f2.\n       \\<lbrakk>nqfree f1 \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f1) xs = DLO.I f1 (y # xs);\n        nqfree f2 \\<Longrightarrow>\n        \\<exists>x.\n           \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ f2) xs = DLO.I f2 (y # xs);\n        nqfree (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Or f1 f2)) xs =\n                               DLO.I (Or f1 f2) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 5. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>y\\<ge>max x1 x2.\n     DLO.I (inf\\<^sub>+ (Or f1 f2)) xs = DLO.I (Or f1 f2) (y # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ (Or f1 f2)) xs = DLO.I (Or f1 f2) (y # xs)", ".."], ["proof (state)\nthis:\n  \\<exists>x.\n     \\<forall>y\\<ge>x.\n        DLO.I (inf\\<^sub>+ (Or f1 f2)) xs = DLO.I (Or f1 f2) (y # xs)\n\ngoal (4 subgoals):\n 1. nqfree TrueF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x. DLO.I (inf\\<^sub>+ TrueF) xs = DLO.I TrueF (y # xs)\n 2. nqfree FalseF \\<Longrightarrow>\n    \\<exists>x.\n       \\<forall>y\\<ge>x.\n          DLO.I (inf\\<^sub>+ FalseF) xs = DLO.I FalseF (y # xs)\n 3. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (Neg f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (Neg f)) xs =\n                               DLO.I (Neg f) (y # xs)\n 4. \\<And>f.\n       \\<lbrakk>nqfree f \\<Longrightarrow>\n                \\<exists>x.\n                   \\<forall>y\\<ge>x.\n                      DLO.I (inf\\<^sub>+ f) xs = DLO.I f (y # xs);\n        nqfree (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            \\<forall>y\\<ge>x.\n                               DLO.I (inf\\<^sub>+ (ExQ f)) xs =\n                               DLO.I (ExQ f) (y # xs)", "qed simp_all"], ["", "context notes [[simp_depth_limit=2]]\nbegin"], ["", "lemma LBex:\n \"\\<lbrakk> nqfree f; DLO.I f (x#xs); \\<not>DLO.I (inf\\<^sub>- f) xs; x \\<notin> EQ f xs \\<rbrakk>\n  \\<Longrightarrow> \\<exists>l\\<in> LB f xs. l < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nqfree f; DLO.I f (x # xs); \\<not> DLO.I (inf\\<^sub>- f) xs;\n     x \\<notin> EQ f xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l\\<in>LB f xs. l < x", "proof(induct f)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<lbrakk>nqfree TrueF; DLO.I TrueF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>- TrueF) xs; x \\<notin> EQ TrueF xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l\\<in>LB TrueF xs. l < x\n 2. \\<lbrakk>nqfree FalseF; DLO.I FalseF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>- FalseF) xs; x \\<notin> EQ FalseF xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l\\<in>LB FalseF xs. l < x\n 3. \\<And>xa.\n       \\<lbrakk>nqfree (Atom xa); DLO.I (Atom xa) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (Atom xa)) xs;\n        x \\<notin> EQ (Atom xa) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (Atom xa) xs. l < x\n 4. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f1 xs. l < x;\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>- f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l\\<in>LB f2 xs. l < x;\n        nqfree (And f1 f2); DLO.I (And f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (And f1 f2)) xs;\n        x \\<notin> EQ (And f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (And f1 f2) xs. l < x\n 5. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f1 xs. l < x;\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>- f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l\\<in>LB f2 xs. l < x;\n        nqfree (Or f1 f2); DLO.I (Or f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (Or f1 f2)) xs;\n        x \\<notin> EQ (Or f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (Or f1 f2) xs. l < x\n 6. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f xs. l < x;\n        nqfree (Neg f); DLO.I (Neg f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (Neg f)) xs;\n        x \\<notin> EQ (Neg f) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (Neg f) xs. l < x\n 7. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f xs. l < x;\n        nqfree (ExQ f); DLO.I (ExQ f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (ExQ f)) xs;\n        x \\<notin> EQ (ExQ f) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (ExQ f) xs. l < x", "case (Atom a)"], ["proof (state)\nthis:\n  nqfree (Atom a)\n  DLO.I (Atom a) (x # xs)\n  \\<not> DLO.I (inf\\<^sub>- (Atom a)) xs\n  x \\<notin> EQ (Atom a) xs\n\ngoal (7 subgoals):\n 1. \\<lbrakk>nqfree TrueF; DLO.I TrueF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>- TrueF) xs; x \\<notin> EQ TrueF xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l\\<in>LB TrueF xs. l < x\n 2. \\<lbrakk>nqfree FalseF; DLO.I FalseF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>- FalseF) xs; x \\<notin> EQ FalseF xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l\\<in>LB FalseF xs. l < x\n 3. \\<And>xa.\n       \\<lbrakk>nqfree (Atom xa); DLO.I (Atom xa) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (Atom xa)) xs;\n        x \\<notin> EQ (Atom xa) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (Atom xa) xs. l < x\n 4. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f1 xs. l < x;\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>- f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l\\<in>LB f2 xs. l < x;\n        nqfree (And f1 f2); DLO.I (And f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (And f1 f2)) xs;\n        x \\<notin> EQ (And f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (And f1 f2) xs. l < x\n 5. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f1 xs. l < x;\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>- f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l\\<in>LB f2 xs. l < x;\n        nqfree (Or f1 f2); DLO.I (Or f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (Or f1 f2)) xs;\n        x \\<notin> EQ (Or f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (Or f1 f2) xs. l < x\n 6. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f xs. l < x;\n        nqfree (Neg f); DLO.I (Neg f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (Neg f)) xs;\n        x \\<notin> EQ (Neg f) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (Neg f) xs. l < x\n 7. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f xs. l < x;\n        nqfree (ExQ f); DLO.I (ExQ f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (ExQ f)) xs;\n        x \\<notin> EQ (ExQ f) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (ExQ f) xs. l < x", "thus ?case"], ["proof (prove)\nusing this:\n  nqfree (Atom a)\n  DLO.I (Atom a) (x # xs)\n  \\<not> DLO.I (inf\\<^sub>- (Atom a)) xs\n  x \\<notin> EQ (Atom a) xs\n\ngoal (1 subgoal):\n 1. \\<exists>l\\<in>LB (Atom a) xs. l < x", "by (cases a rule: amin_inf.cases)\n       (simp_all add: nth.simps EQ_def split: nat.splits)"], ["proof (state)\nthis:\n  \\<exists>l\\<in>LB (Atom a) xs. l < x\n\ngoal (6 subgoals):\n 1. \\<lbrakk>nqfree TrueF; DLO.I TrueF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>- TrueF) xs; x \\<notin> EQ TrueF xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l\\<in>LB TrueF xs. l < x\n 2. \\<lbrakk>nqfree FalseF; DLO.I FalseF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>- FalseF) xs; x \\<notin> EQ FalseF xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l\\<in>LB FalseF xs. l < x\n 3. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f1 xs. l < x;\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>- f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l\\<in>LB f2 xs. l < x;\n        nqfree (And f1 f2); DLO.I (And f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (And f1 f2)) xs;\n        x \\<notin> EQ (And f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (And f1 f2) xs. l < x\n 4. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f1 xs. l < x;\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>- f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> \\<exists>l\\<in>LB f2 xs. l < x;\n        nqfree (Or f1 f2); DLO.I (Or f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (Or f1 f2)) xs;\n        x \\<notin> EQ (Or f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (Or f1 f2) xs. l < x\n 5. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f xs. l < x;\n        nqfree (Neg f); DLO.I (Neg f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (Neg f)) xs;\n        x \\<notin> EQ (Neg f) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (Neg f) xs. l < x\n 6. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>- f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> \\<exists>l\\<in>LB f xs. l < x;\n        nqfree (ExQ f); DLO.I (ExQ f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>- (ExQ f)) xs;\n        x \\<notin> EQ (ExQ f) xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l\\<in>LB (ExQ f) xs. l < x", "qed auto"], ["", "lemma UBex:\n \"\\<lbrakk> nqfree f; DLO.I f (x#xs); \\<not>DLO.I (inf\\<^sub>+ f) xs; x \\<notin> EQ f xs \\<rbrakk>\n  \\<Longrightarrow> \\<exists>u \\<in> UB f xs. x < u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nqfree f; DLO.I f (x # xs); \\<not> DLO.I (inf\\<^sub>+ f) xs;\n     x \\<notin> EQ f xs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u\\<in>UB f xs. x < u", "proof(induct f)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<lbrakk>nqfree TrueF; DLO.I TrueF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>+ TrueF) xs; x \\<notin> EQ TrueF xs\\<rbrakk>\n    \\<Longrightarrow> Bex (UB TrueF xs) ((<) x)\n 2. \\<lbrakk>nqfree FalseF; DLO.I FalseF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>+ FalseF) xs; x \\<notin> EQ FalseF xs\\<rbrakk>\n    \\<Longrightarrow> Bex (UB FalseF xs) ((<) x)\n 3. \\<And>xa.\n       \\<lbrakk>nqfree (Atom xa); DLO.I (Atom xa) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (Atom xa)) xs;\n        x \\<notin> EQ (Atom xa) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (Atom xa) xs) ((<) x)\n 4. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f1 xs) ((<) x);\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>+ f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> Bex (UB f2 xs) ((<) x);\n        nqfree (And f1 f2); DLO.I (And f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (And f1 f2)) xs;\n        x \\<notin> EQ (And f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (And f1 f2) xs) ((<) x)\n 5. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f1 xs) ((<) x);\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>+ f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> Bex (UB f2 xs) ((<) x);\n        nqfree (Or f1 f2); DLO.I (Or f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (Or f1 f2)) xs;\n        x \\<notin> EQ (Or f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (Or f1 f2) xs) ((<) x)\n 6. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f xs) ((<) x);\n        nqfree (Neg f); DLO.I (Neg f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (Neg f)) xs;\n        x \\<notin> EQ (Neg f) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (Neg f) xs) ((<) x)\n 7. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f xs) ((<) x);\n        nqfree (ExQ f); DLO.I (ExQ f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (ExQ f)) xs;\n        x \\<notin> EQ (ExQ f) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (ExQ f) xs) ((<) x)", "case (Atom a)"], ["proof (state)\nthis:\n  nqfree (Atom a)\n  DLO.I (Atom a) (x # xs)\n  \\<not> DLO.I (inf\\<^sub>+ (Atom a)) xs\n  x \\<notin> EQ (Atom a) xs\n\ngoal (7 subgoals):\n 1. \\<lbrakk>nqfree TrueF; DLO.I TrueF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>+ TrueF) xs; x \\<notin> EQ TrueF xs\\<rbrakk>\n    \\<Longrightarrow> Bex (UB TrueF xs) ((<) x)\n 2. \\<lbrakk>nqfree FalseF; DLO.I FalseF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>+ FalseF) xs; x \\<notin> EQ FalseF xs\\<rbrakk>\n    \\<Longrightarrow> Bex (UB FalseF xs) ((<) x)\n 3. \\<And>xa.\n       \\<lbrakk>nqfree (Atom xa); DLO.I (Atom xa) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (Atom xa)) xs;\n        x \\<notin> EQ (Atom xa) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (Atom xa) xs) ((<) x)\n 4. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f1 xs) ((<) x);\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>+ f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> Bex (UB f2 xs) ((<) x);\n        nqfree (And f1 f2); DLO.I (And f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (And f1 f2)) xs;\n        x \\<notin> EQ (And f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (And f1 f2) xs) ((<) x)\n 5. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f1 xs) ((<) x);\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>+ f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> Bex (UB f2 xs) ((<) x);\n        nqfree (Or f1 f2); DLO.I (Or f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (Or f1 f2)) xs;\n        x \\<notin> EQ (Or f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (Or f1 f2) xs) ((<) x)\n 6. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f xs) ((<) x);\n        nqfree (Neg f); DLO.I (Neg f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (Neg f)) xs;\n        x \\<notin> EQ (Neg f) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (Neg f) xs) ((<) x)\n 7. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f xs) ((<) x);\n        nqfree (ExQ f); DLO.I (ExQ f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (ExQ f)) xs;\n        x \\<notin> EQ (ExQ f) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (ExQ f) xs) ((<) x)", "thus ?case"], ["proof (prove)\nusing this:\n  nqfree (Atom a)\n  DLO.I (Atom a) (x # xs)\n  \\<not> DLO.I (inf\\<^sub>+ (Atom a)) xs\n  x \\<notin> EQ (Atom a) xs\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>UB (Atom a) xs. x < a", "by (cases a rule: aplus_inf.cases)\n       (simp_all add: nth.simps EQ_def split: nat.splits)"], ["proof (state)\nthis:\n  \\<exists>a\\<in>UB (Atom a) xs. x < a\n\ngoal (6 subgoals):\n 1. \\<lbrakk>nqfree TrueF; DLO.I TrueF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>+ TrueF) xs; x \\<notin> EQ TrueF xs\\<rbrakk>\n    \\<Longrightarrow> Bex (UB TrueF xs) ((<) x)\n 2. \\<lbrakk>nqfree FalseF; DLO.I FalseF (x # xs);\n     \\<not> DLO.I (inf\\<^sub>+ FalseF) xs; x \\<notin> EQ FalseF xs\\<rbrakk>\n    \\<Longrightarrow> Bex (UB FalseF xs) ((<) x)\n 3. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f1 xs) ((<) x);\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>+ f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> Bex (UB f2 xs) ((<) x);\n        nqfree (And f1 f2); DLO.I (And f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (And f1 f2)) xs;\n        x \\<notin> EQ (And f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (And f1 f2) xs) ((<) x)\n 4. \\<And>f1 f2.\n       \\<lbrakk>\\<lbrakk>nqfree f1; DLO.I f1 (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f1) xs;\n                 x \\<notin> EQ f1 xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f1 xs) ((<) x);\n        \\<lbrakk>nqfree f2; DLO.I f2 (x # xs);\n         \\<not> DLO.I (inf\\<^sub>+ f2) xs; x \\<notin> EQ f2 xs\\<rbrakk>\n        \\<Longrightarrow> Bex (UB f2 xs) ((<) x);\n        nqfree (Or f1 f2); DLO.I (Or f1 f2) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (Or f1 f2)) xs;\n        x \\<notin> EQ (Or f1 f2) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (Or f1 f2) xs) ((<) x)\n 5. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f xs) ((<) x);\n        nqfree (Neg f); DLO.I (Neg f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (Neg f)) xs;\n        x \\<notin> EQ (Neg f) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (Neg f) xs) ((<) x)\n 6. \\<And>f.\n       \\<lbrakk>\\<lbrakk>nqfree f; DLO.I f (x # xs);\n                 \\<not> DLO.I (inf\\<^sub>+ f) xs;\n                 x \\<notin> EQ f xs\\<rbrakk>\n                \\<Longrightarrow> Bex (UB f xs) ((<) x);\n        nqfree (ExQ f); DLO.I (ExQ f) (x # xs);\n        \\<not> DLO.I (inf\\<^sub>+ (ExQ f)) xs;\n        x \\<notin> EQ (ExQ f) xs\\<rbrakk>\n       \\<Longrightarrow> Bex (UB (ExQ f) xs) ((<) x)", "qed auto"], ["", "end"], ["", "lemma finite_LB: \"finite(LB f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (LB f xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (LB f xs)", "have \"LB f xs = (\\<lambda>k. xs!k) ` set(lbounds(DLO.atoms\\<^sub>0 f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LB f xs = (!) xs ` set (lbounds (DLO.atoms\\<^sub>0 f))", "by (auto simp:set_lbounds image_def)"], ["proof (state)\nthis:\n  LB f xs = (!) xs ` set (lbounds (DLO.atoms\\<^sub>0 f))\n\ngoal (1 subgoal):\n 1. finite (LB f xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  LB f xs = (!) xs ` set (lbounds (DLO.atoms\\<^sub>0 f))\n\ngoal (1 subgoal):\n 1. finite (LB f xs)", "by simp"], ["proof (state)\nthis:\n  finite (LB f xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_UB: \"finite(UB f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (UB f xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (UB f xs)", "have \"UB f xs = (\\<lambda>k.  xs!k) ` set(ubounds(DLO.atoms\\<^sub>0 f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UB f xs = (!) xs ` set (ubounds (DLO.atoms\\<^sub>0 f))", "by (auto simp:set_ubounds image_def)"], ["proof (state)\nthis:\n  UB f xs = (!) xs ` set (ubounds (DLO.atoms\\<^sub>0 f))\n\ngoal (1 subgoal):\n 1. finite (UB f xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  UB f xs = (!) xs ` set (ubounds (DLO.atoms\\<^sub>0 f))\n\ngoal (1 subgoal):\n 1. finite (UB f xs)", "by simp"], ["proof (state)\nthis:\n  finite (UB f xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma qfree_amin_inf: \"qfree (amin_inf a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qfree (amin_inf a)", "by(cases a rule:amin_inf.cases) simp_all"], ["", "lemma qfree_min_inf: \"nqfree \\<phi> \\<Longrightarrow> qfree(inf\\<^sub>- \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nqfree \\<phi> \\<Longrightarrow> qfree (inf\\<^sub>- \\<phi>)", "by(induct \\<phi>)(simp_all add:qfree_amin_inf)"], ["", "lemma qfree_aplus_inf: \"qfree (aplus_inf a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qfree (aplus_inf a)", "by(cases a rule:aplus_inf.cases) simp_all"], ["", "lemma qfree_plus_inf: \"nqfree \\<phi> \\<Longrightarrow> qfree(inf\\<^sub>+ \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nqfree \\<phi> \\<Longrightarrow> qfree (inf\\<^sub>+ \\<phi>)", "by(induct \\<phi>)(simp_all add:qfree_aplus_inf)"], ["", "end"]]}