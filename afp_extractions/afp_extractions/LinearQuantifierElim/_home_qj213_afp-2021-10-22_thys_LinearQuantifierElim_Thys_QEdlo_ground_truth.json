{"file_name": "/home/qj213/afp-2021-10-22/thys/LinearQuantifierElim/Thys/QEdlo.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LinearQuantifierElim", "problem_names": ["theorem I_qe_dlo\\<^sub>1:\nassumes less: \"\\<forall>a \\<in> set as. is_Less a\" and dep: \"\\<forall>a \\<in> set as. depends\\<^sub>d\\<^sub>l\\<^sub>o a\"\nshows \"DLO.I (qe_dlo\\<^sub>1 as) xs = (\\<exists>x. \\<forall>a \\<in> set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x#xs))\"\n  (is \"?L = ?R\")", "lemma I_qe_dlo\\<^sub>1_pretty:\n  \"\\<forall>a \\<in> set as. is_Less a \\<and> depends\\<^sub>d\\<^sub>l\\<^sub>o a \\<Longrightarrow> DLO.is_dnf_qe _ qe_dlo\\<^sub>1 as\"", "lemma subst\\<^sub>0_pretty:\n  \"subst\\<^sub>0 (Eq i j) (Less m n) = Less (subst i j m) (subst i j n)\"\n  \"subst\\<^sub>0 (Eq i j) (Eq m n) = Eq (subst i j m) (subst i j n)\"", "lemmas DLOe_code_lemmas = DLO_code_lemmas lift_dnfeq_qe_def lift_eq_qe_def", "lemmas [folded DLOe_code_lemmas, code] =\n  DLO\\<^sub>e.lift_dnfeq_qe_def DLO\\<^sub>e.lift_eq_qe_def", "lemmas [folded DLOe_code_lemmas, code] = qe_dlo_def", "lemma qfree_qe_dlo\\<^sub>1: \"qfree (qe_dlo\\<^sub>1 as)\"", "theorem I_qe_dlo: \"DLO.I (qe_dlo \\<phi>) xs = DLO.I \\<phi> xs\"", "theorem qfree_qe_dlo: \"qfree (qe_dlo \\<phi>)\""], "translations": [["", "theorem I_qe_dlo\\<^sub>1:\nassumes less: \"\\<forall>a \\<in> set as. is_Less a\" and dep: \"\\<forall>a \\<in> set as. depends\\<^sub>d\\<^sub>l\\<^sub>o a\"\nshows \"DLO.I (qe_dlo\\<^sub>1 as) xs = (\\<exists>x. \\<forall>a \\<in> set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x#xs))\"\n  (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs =\n    (\\<exists>x.\n        \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "let ?lbs = \"[i. Less (Suc i) 0 \\<leftarrow> as]\""], ["proof (state)\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "let ?ubs = \"[j. Less 0 (Suc j) \\<leftarrow> as]\""], ["proof (state)\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "let ?Ls = \"set ?lbs\""], ["proof (state)\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "let ?Us = \"set ?ubs\""], ["proof (state)\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "let ?lb = \"Max (\\<Union>x\\<in>?Ls. {xs!x})\""], ["proof (state)\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "let ?ub = \"Min (\\<Union>x\\<in>?Us. {xs!x})\""], ["proof (state)\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "have 2: \"Less 0 0 \\<notin> set as \\<Longrightarrow> \\<forall>a \\<in> set as.\n      (\\<exists>i \\<in> ?Ls. a = Less (Suc i) 0) \\<or> (\\<exists>i \\<in> ?Us. a = Less 0 (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Less 0 0 \\<notin> set as \\<Longrightarrow>\n    \\<forall>a\\<in>set as.\n       (\\<exists>i\\<in>set (concat\n                             (map (\\<lambda>x.\ncase x of Less 0 nat2 \\<Rightarrow> [] | Less (Suc i) 0 \\<Rightarrow> [i]\n| Less (Suc i) (Suc nata) \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                               as)).\n           a = Less (Suc i) 0) \\<or>\n       (\\<exists>i\\<in>set (concat\n                             (map (\\<lambda>x.\ncase x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n| Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                               as)).\n           a = Less 0 (Suc i))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Less 0 0 \\<notin> set as; a \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 nat2 \\<Rightarrow> []\n               | Less (Suc i) 0 \\<Rightarrow> [i]\n               | Less (Suc i) (Suc nata) \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less (Suc i) 0) \\<or>\n                         (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 0 \\<Rightarrow> []\n               | Less 0 (Suc j) \\<Rightarrow> [j]\n               | Less (Suc nat) nat2 \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less 0 (Suc i))", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Less 0 0 \\<notin> set as; a \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 nat2 \\<Rightarrow> []\n               | Less (Suc i) 0 \\<Rightarrow> [i]\n               | Less (Suc i) (Suc nata) \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less (Suc i) 0) \\<or>\n                         (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 0 \\<Rightarrow> []\n               | Less 0 (Suc j) \\<Rightarrow> [j]\n               | Less (Suc nat) nat2 \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less 0 (Suc i))", "assume \"Less 0 0 \\<notin> set as\" \"a \\<in> set as\""], ["proof (state)\nthis:\n  Less 0 0 \\<notin> set as\n  a \\<in> set as\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Less 0 0 \\<notin> set as; a \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 nat2 \\<Rightarrow> []\n               | Less (Suc i) 0 \\<Rightarrow> [i]\n               | Less (Suc i) (Suc nata) \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less (Suc i) 0) \\<or>\n                         (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 0 \\<Rightarrow> []\n               | Less 0 (Suc j) \\<Rightarrow> [j]\n               | Less (Suc nat) nat2 \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less 0 (Suc i))", "then"], ["proof (chain)\npicking this:\n  Less 0 0 \\<notin> set as\n  a \\<in> set as", "obtain i j where [simp]: \"a = Less i j\""], ["proof (prove)\nusing this:\n  Less 0 0 \\<notin> set as\n  a \\<in> set as\n\ngoal (1 subgoal):\n 1. (\\<And>i j. a = Less i j \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using less"], ["proof (prove)\nusing this:\n  Less 0 0 \\<notin> set as\n  a \\<in> set as\n  \\<forall>a\\<in>set as. is_Less a\n\ngoal (1 subgoal):\n 1. (\\<And>i j. a = Less i j \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force simp:is_Less_iff)"], ["proof (state)\nthis:\n  a = Less i j\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Less 0 0 \\<notin> set as; a \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 nat2 \\<Rightarrow> []\n               | Less (Suc i) 0 \\<Rightarrow> [i]\n               | Less (Suc i) (Suc nata) \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less (Suc i) 0) \\<or>\n                         (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 0 \\<Rightarrow> []\n               | Less 0 (Suc j) \\<Rightarrow> [j]\n               | Less (Suc nat) nat2 \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less 0 (Suc i))", "with dep"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>set as. depends\\<^sub>d\\<^sub>l\\<^sub>o a\n  a = Less i j", "obtain k where \"i = 0 \\<and> j = Suc k \\<or> i = Suc k \\<and> j = 0\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set as. depends\\<^sub>d\\<^sub>l\\<^sub>o a\n  a = Less i j\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        i = 0 \\<and> j = Suc k \\<or>\n        i = Suc k \\<and> j = 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<open>Less 0 0 \\<notin> set as\\<close> \\<open>a \\<in> set as\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set as. depends\\<^sub>d\\<^sub>l\\<^sub>o a\n  a = Less i j\n  Less 0 0 \\<notin> set as\n  a \\<in> set as\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        i = 0 \\<and> j = Suc k \\<or>\n        i = Suc k \\<and> j = 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto (metis Nat.nat.nchotomy depends\\<^sub>d\\<^sub>l\\<^sub>o.simps(2))"], ["proof (state)\nthis:\n  i = 0 \\<and> j = Suc k \\<or> i = Suc k \\<and> j = 0\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Less 0 0 \\<notin> set as; a \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 nat2 \\<Rightarrow> []\n               | Less (Suc i) 0 \\<Rightarrow> [i]\n               | Less (Suc i) (Suc nata) \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less (Suc i) 0) \\<or>\n                         (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 0 \\<Rightarrow> []\n               | Less 0 (Suc j) \\<Rightarrow> [j]\n               | Less (Suc nat) nat2 \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less 0 (Suc i))", "moreover"], ["proof (state)\nthis:\n  i = 0 \\<and> j = Suc k \\<or> i = Suc k \\<and> j = 0\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Less 0 0 \\<notin> set as; a \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 nat2 \\<Rightarrow> []\n               | Less (Suc i) 0 \\<Rightarrow> [i]\n               | Less (Suc i) (Suc nata) \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less (Suc i) 0) \\<or>\n                         (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 0 \\<Rightarrow> []\n               | Less 0 (Suc j) \\<Rightarrow> [j]\n               | Less (Suc nat) nat2 \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less 0 (Suc i))", "hence \"i=0 \\<and> k \\<in> ?Us \\<or> j=0 \\<and> k \\<in> ?Ls\""], ["proof (prove)\nusing this:\n  i = 0 \\<and> j = Suc k \\<or> i = Suc k \\<and> j = 0\n\ngoal (1 subgoal):\n 1. i = 0 \\<and>\n    k \\<in> set (concat\n                  (map (\\<lambda>x.\n                           case x of Less 0 0 \\<Rightarrow> []\n                           | Less 0 (Suc j) \\<Rightarrow> [j]\n                           | Less (Suc nat) nat2 \\<Rightarrow> []\n                           | Eq nat1 nat2 \\<Rightarrow> [])\n                    as)) \\<or>\n    j = 0 \\<and>\n    k \\<in> set (concat\n                  (map (\\<lambda>x.\n                           case x of Less 0 nat2 \\<Rightarrow> []\n                           | Less (Suc i) 0 \\<Rightarrow> [i]\n                           | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                           | Eq nat1 nat2 \\<Rightarrow> [])\n                    as))", "using \\<open>a \\<in> set as\\<close>"], ["proof (prove)\nusing this:\n  i = 0 \\<and> j = Suc k \\<or> i = Suc k \\<and> j = 0\n  a \\<in> set as\n\ngoal (1 subgoal):\n 1. i = 0 \\<and>\n    k \\<in> set (concat\n                  (map (\\<lambda>x.\n                           case x of Less 0 0 \\<Rightarrow> []\n                           | Less 0 (Suc j) \\<Rightarrow> [j]\n                           | Less (Suc nat) nat2 \\<Rightarrow> []\n                           | Eq nat1 nat2 \\<Rightarrow> [])\n                    as)) \\<or>\n    j = 0 \\<and>\n    k \\<in> set (concat\n                  (map (\\<lambda>x.\n                           case x of Less 0 nat2 \\<Rightarrow> []\n                           | Less (Suc i) 0 \\<Rightarrow> [i]\n                           | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                           | Eq nat1 nat2 \\<Rightarrow> [])\n                    as))", "by force"], ["proof (state)\nthis:\n  i = 0 \\<and>\n  k \\<in> set (concat\n                (map (\\<lambda>x.\n                         case x of Less 0 0 \\<Rightarrow> []\n                         | Less 0 (Suc j) \\<Rightarrow> [j]\n                         | Less (Suc nat) nat2 \\<Rightarrow> []\n                         | Eq nat1 nat2 \\<Rightarrow> [])\n                  as)) \\<or>\n  j = 0 \\<and>\n  k \\<in> set (concat\n                (map (\\<lambda>x.\n                         case x of Less 0 nat2 \\<Rightarrow> []\n                         | Less (Suc i) 0 \\<Rightarrow> [i]\n                         | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                         | Eq nat1 nat2 \\<Rightarrow> [])\n                  as))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>Less 0 0 \\<notin> set as; a \\<in> set as\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 nat2 \\<Rightarrow> []\n               | Less (Suc i) 0 \\<Rightarrow> [i]\n               | Less (Suc i) (Suc nata) \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less (Suc i) 0) \\<or>\n                         (\\<exists>i\\<in>set\n    (concat\n      (map (\\<lambda>x.\n               case x of Less 0 0 \\<Rightarrow> []\n               | Less 0 (Suc j) \\<Rightarrow> [j]\n               | Less (Suc nat) nat2 \\<Rightarrow> []\n               | Eq nat1 nat2 \\<Rightarrow> [])\n        as)).\n                             a = Less 0 (Suc i))", "ultimately"], ["proof (chain)\npicking this:\n  i = 0 \\<and> j = Suc k \\<or> i = Suc k \\<and> j = 0\n  i = 0 \\<and>\n  k \\<in> set (concat\n                (map (\\<lambda>x.\n                         case x of Less 0 0 \\<Rightarrow> []\n                         | Less 0 (Suc j) \\<Rightarrow> [j]\n                         | Less (Suc nat) nat2 \\<Rightarrow> []\n                         | Eq nat1 nat2 \\<Rightarrow> [])\n                  as)) \\<or>\n  j = 0 \\<and>\n  k \\<in> set (concat\n                (map (\\<lambda>x.\n                         case x of Less 0 nat2 \\<Rightarrow> []\n                         | Less (Suc i) 0 \\<Rightarrow> [i]\n                         | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                         | Eq nat1 nat2 \\<Rightarrow> [])\n                  as))", "show \"(\\<exists>i\\<in>?Ls. a=Less (Suc i) 0) \\<or> (\\<exists>i\\<in>?Us. a=Less 0 (Suc i))\""], ["proof (prove)\nusing this:\n  i = 0 \\<and> j = Suc k \\<or> i = Suc k \\<and> j = 0\n  i = 0 \\<and>\n  k \\<in> set (concat\n                (map (\\<lambda>x.\n                         case x of Less 0 0 \\<Rightarrow> []\n                         | Less 0 (Suc j) \\<Rightarrow> [j]\n                         | Less (Suc nat) nat2 \\<Rightarrow> []\n                         | Eq nat1 nat2 \\<Rightarrow> [])\n                  as)) \\<or>\n  j = 0 \\<and>\n  k \\<in> set (concat\n                (map (\\<lambda>x.\n                         case x of Less 0 nat2 \\<Rightarrow> []\n                         | Less (Suc i) 0 \\<Rightarrow> [i]\n                         | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                         | Eq nat1 nat2 \\<Rightarrow> [])\n                  as))\n\ngoal (1 subgoal):\n 1. (\\<exists>i\\<in>set (concat\n                          (map (\\<lambda>x.\n                                   case x of Less 0 nat2 \\<Rightarrow> []\n                                   | Less (Suc i) 0 \\<Rightarrow> [i]\n                                   | Less (Suc i) (Suc nata) \\<Rightarrow>\n []\n                                   | Eq nat1 nat2 \\<Rightarrow> [])\n                            as)).\n        a = Less (Suc i) 0) \\<or>\n    (\\<exists>i\\<in>set (concat\n                          (map (\\<lambda>x.\n                                   case x of Less 0 0 \\<Rightarrow> []\n                                   | Less 0 (Suc j) \\<Rightarrow> [j]\n                                   | Less (Suc nat) nat2 \\<Rightarrow> []\n                                   | Eq nat1 nat2 \\<Rightarrow> [])\n                            as)).\n        a = Less 0 (Suc i))", "by force"], ["proof (state)\nthis:\n  (\\<exists>i\\<in>set (concat\n                        (map (\\<lambda>x.\n                                 case x of Less 0 nat2 \\<Rightarrow> []\n                                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                                 | Eq nat1 nat2 \\<Rightarrow> [])\n                          as)).\n      a = Less (Suc i) 0) \\<or>\n  (\\<exists>i\\<in>set (concat\n                        (map (\\<lambda>x.\n                                 case x of Less 0 0 \\<Rightarrow> []\n                                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                                 | Eq nat1 nat2 \\<Rightarrow> [])\n                          as)).\n      a = Less 0 (Suc i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Less 0 0 \\<notin> set as \\<Longrightarrow>\n  \\<forall>a\\<in>set as.\n     (\\<exists>i\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n         a = Less (Suc i) 0) \\<or>\n     (\\<exists>i\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 0 \\<Rightarrow> []\n                                    | Less 0 (Suc j) \\<Rightarrow> [j]\n                                    | Less (Suc nat) nat2 \\<Rightarrow> []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n         a = Less 0 (Suc i))\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "assume qe1: ?L"], ["proof (state)\nthis:\n  DLO.I (qe_dlo\\<^sub>1 as) xs\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence 0: \"Less 0 0 \\<notin> set as\""], ["proof (prove)\nusing this:\n  DLO.I (qe_dlo\\<^sub>1 as) xs\n\ngoal (1 subgoal):\n 1. Less 0 0 \\<notin> set as", "by (auto simp:qe_dlo\\<^sub>1_def)"], ["proof (state)\nthis:\n  Less 0 0 \\<notin> set as\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "with qe1"], ["proof (chain)\npicking this:\n  DLO.I (qe_dlo\\<^sub>1 as) xs\n  Less 0 0 \\<notin> set as", "have 1: \"\\<forall>x\\<in>?Ls. \\<forall>y\\<in>?Us. xs ! x < xs ! y\""], ["proof (prove)\nusing this:\n  DLO.I (qe_dlo\\<^sub>1 as) xs\n  Less 0 0 \\<notin> set as\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (concat\n                         (map (\\<lambda>x.\n                                  case x of Less 0 nat2 \\<Rightarrow> []\n                                  | Less (Suc i) 0 \\<Rightarrow> [i]\n                                  | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                                  | Eq nat1 nat2 \\<Rightarrow> [])\n                           as)).\n       \\<forall>y\\<in>set (concat\n                            (map (\\<lambda>x.\n                                     case x of Less 0 0 \\<Rightarrow> []\n                                     | Less 0 (Suc j) \\<Rightarrow> [j]\n                                     | Less (Suc nat) nat2 \\<Rightarrow> []\n                                     | Eq nat1 nat2 \\<Rightarrow> [])\n                              as)).\n          xs ! x < xs ! y", "by (fastforce simp:qe_dlo\\<^sub>1_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (concat\n                       (map (\\<lambda>x.\n                                case x of Less 0 nat2 \\<Rightarrow> []\n                                | Less (Suc i) 0 \\<Rightarrow> [i]\n                                | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                                | Eq nat1 nat2 \\<Rightarrow> [])\n                         as)).\n     \\<forall>y\\<in>set (concat\n                          (map (\\<lambda>x.\n                                   case x of Less 0 0 \\<Rightarrow> []\n                                   | Less 0 (Suc j) \\<Rightarrow> [j]\n                                   | Less (Suc nat) nat2 \\<Rightarrow> []\n                                   | Eq nat1 nat2 \\<Rightarrow> [])\n                            as)).\n        xs ! x < xs ! y\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "have finite: \"finite ?Ls\" \"finite ?Us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (set (concat\n            (map (\\<lambda>x.\n                     case x of Less 0 nat2 \\<Rightarrow> []\n                     | Less (Suc i) 0 \\<Rightarrow> [i]\n                     | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                     | Eq nat1 nat2 \\<Rightarrow> [])\n              as))) &&&\n    finite\n     (set (concat\n            (map (\\<lambda>x.\n                     case x of Less 0 0 \\<Rightarrow> []\n                     | Less 0 (Suc j) \\<Rightarrow> [j]\n                     | Less (Suc nat) nat2 \\<Rightarrow> []\n                     | Eq nat1 nat2 \\<Rightarrow> [])\n              as)))", "by (rule finite_set)+"], ["proof (state)\nthis:\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 nat2 \\<Rightarrow> []\n                   | Less (Suc i) 0 \\<Rightarrow> [i]\n                   | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 0 \\<Rightarrow> []\n                   | Less 0 (Suc j) \\<Rightarrow> [j]\n                   | Less (Suc nat) nat2 \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "{"], ["proof (state)\nthis:\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 nat2 \\<Rightarrow> []\n                   | Less (Suc i) 0 \\<Rightarrow> [i]\n                   | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 0 \\<Rightarrow> []\n                   | Less 0 (Suc j) \\<Rightarrow> [j]\n                   | Less (Suc nat) nat2 \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "fix i x"], ["proof (state)\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "assume \"Less i 0 \\<in> set as | Less 0 i \\<in> set as\""], ["proof (state)\nthis:\n  Less i 0 \\<in> set as \\<or> Less 0 i \\<in> set as\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "moreover"], ["proof (state)\nthis:\n  Less i 0 \\<in> set as \\<or> Less 0 i \\<in> set as\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence \"i \\<noteq> 0\""], ["proof (prove)\nusing this:\n  Less i 0 \\<in> set as \\<or> Less 0 i \\<in> set as\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0", "using 0"], ["proof (prove)\nusing this:\n  Less i 0 \\<in> set as \\<or> Less 0 i \\<in> set as\n  Less 0 0 \\<notin> set as\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0", "by iprover"], ["proof (state)\nthis:\n  i \\<noteq> 0\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "ultimately"], ["proof (chain)\npicking this:\n  Less i 0 \\<in> set as \\<or> Less 0 i \\<in> set as\n  i \\<noteq> 0", "have \"(x#xs) ! i = xs!(i - 1)\""], ["proof (prove)\nusing this:\n  Less i 0 \\<in> set as \\<or> Less 0 i \\<in> set as\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (x # xs) ! i = xs ! (i - 1)", "by (simp add: nth_Cons')"], ["proof (state)\nthis:\n  (x # xs) ! i = xs ! (i - 1)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "}"], ["proof (state)\nthis:\n  Less ?i2 0 \\<in> set as \\<or> Less 0 ?i2 \\<in> set as \\<Longrightarrow>\n  (?x2 # xs) ! ?i2 = xs ! (?i2 - 1)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "note this[simp]"], ["proof (state)\nthis:\n  Less ?i2 0 \\<in> set as \\<or> Less 0 ?i2 \\<in> set as \\<Longrightarrow>\n  (?x2 # xs) ! ?i2 = xs ! (?i2 - 1)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "{"], ["proof (state)\nthis:\n  Less ?i2 0 \\<in> set as \\<or> Less 0 ?i2 \\<in> set as \\<Longrightarrow>\n  (?x2 # xs) ! ?i2 = xs ! (?i2 - 1)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "assume nonempty: \"?Ls \\<noteq> {} \\<and> ?Us \\<noteq> {}\""], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {}\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence \"Max (\\<Union>x\\<in>?Ls. {xs!x}) < Min (\\<Union>x\\<in>?Us. {xs!x})\""], ["proof (prove)\nusing this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. Max (\\<Union>x\\<in>set (concat\n                             (map (\\<lambda>x.\ncase x of Less 0 nat2 \\<Rightarrow> [] | Less (Suc i) 0 \\<Rightarrow> [i]\n| Less (Suc i) (Suc nata) \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                               as)).\n            {xs ! x})\n    < Min (\\<Union>x\\<in>set (concat\n                               (map (\\<lambda>x.\n  case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n  | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                                 as)).\n              {xs ! x})", "using 1 finite"], ["proof (prove)\nusing this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {}\n  \\<forall>x\\<in>set (concat\n                       (map (\\<lambda>x.\n                                case x of Less 0 nat2 \\<Rightarrow> []\n                                | Less (Suc i) 0 \\<Rightarrow> [i]\n                                | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                                | Eq nat1 nat2 \\<Rightarrow> [])\n                         as)).\n     \\<forall>y\\<in>set (concat\n                          (map (\\<lambda>x.\n                                   case x of Less 0 0 \\<Rightarrow> []\n                                   | Less 0 (Suc j) \\<Rightarrow> [j]\n                                   | Less (Suc nat) nat2 \\<Rightarrow> []\n                                   | Eq nat1 nat2 \\<Rightarrow> [])\n                            as)).\n        xs ! x < xs ! y\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 nat2 \\<Rightarrow> []\n                   | Less (Suc i) 0 \\<Rightarrow> [i]\n                   | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 0 \\<Rightarrow> []\n                   | Less 0 (Suc j) \\<Rightarrow> [j]\n                   | Less (Suc nat) nat2 \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n\ngoal (1 subgoal):\n 1. Max (\\<Union>x\\<in>set (concat\n                             (map (\\<lambda>x.\ncase x of Less 0 nat2 \\<Rightarrow> [] | Less (Suc i) 0 \\<Rightarrow> [i]\n| Less (Suc i) (Suc nata) \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                               as)).\n            {xs ! x})\n    < Min (\\<Union>x\\<in>set (concat\n                               (map (\\<lambda>x.\n  case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n  | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                                 as)).\n              {xs ! x})", "by auto"], ["proof (state)\nthis:\n  Max (\\<Union>x\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n          {xs ! x})\n  < Min (\\<Union>x\\<in>set (concat\n                             (map (\\<lambda>x.\ncase x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n| Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                               as)).\n            {xs ! x})\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "then"], ["proof (chain)\npicking this:\n  Max (\\<Union>x\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n          {xs ! x})\n  < Min (\\<Union>x\\<in>set (concat\n                             (map (\\<lambda>x.\ncase x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n| Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                               as)).\n            {xs ! x})", "obtain m where \"?lb < m \\<and> m < ?ub\""], ["proof (prove)\nusing this:\n  Max (\\<Union>x\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n          {xs ! x})\n  < Min (\\<Union>x\\<in>set (concat\n                             (map (\\<lambda>x.\ncase x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n| Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                               as)).\n            {xs ! x})\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        Max (\\<Union>x\\<in>set (concat\n                                 (map (\\<lambda>x.\n    case x of Less 0 nat2 \\<Rightarrow> []\n    | Less (Suc i) 0 \\<Rightarrow> [i]\n    | Less (Suc i) (Suc nata) \\<Rightarrow> []\n    | Eq nat1 nat2 \\<Rightarrow> [])\n                                   as)).\n                {xs ! x})\n        < m \\<and>\n        m < Min (\\<Union>x\\<in>set (concat\n                                     (map\n (\\<lambda>x.\n     case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n     | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n as)).\n                    {xs ! x}) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using dense"], ["proof (prove)\nusing this:\n  Max (\\<Union>x\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n          {xs ! x})\n  < Min (\\<Union>x\\<in>set (concat\n                             (map (\\<lambda>x.\ncase x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n| Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                               as)).\n            {xs ! x})\n  ?x < ?z \\<Longrightarrow> \\<exists>y>?x. y < ?z\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        Max (\\<Union>x\\<in>set (concat\n                                 (map (\\<lambda>x.\n    case x of Less 0 nat2 \\<Rightarrow> []\n    | Less (Suc i) 0 \\<Rightarrow> [i]\n    | Less (Suc i) (Suc nata) \\<Rightarrow> []\n    | Eq nat1 nat2 \\<Rightarrow> [])\n                                   as)).\n                {xs ! x})\n        < m \\<and>\n        m < Min (\\<Union>x\\<in>set (concat\n                                     (map\n (\\<lambda>x.\n     case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n     | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n as)).\n                    {xs ! x}) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Max (\\<Union>x\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n          {xs ! x})\n  < m \\<and>\n  m < Min (\\<Union>x\\<in>set (concat\n                               (map (\\<lambda>x.\n  case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n  | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                                 as)).\n              {xs ! x})\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence \"\\<forall>i\\<in>?Ls. xs!i < m\" and \"\\<forall>j\\<in>?Us. m < xs!j\""], ["proof (prove)\nusing this:\n  Max (\\<Union>x\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n          {xs ! x})\n  < m \\<and>\n  m < Min (\\<Union>x\\<in>set (concat\n                               (map (\\<lambda>x.\n  case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n  | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                                 as)).\n              {xs ! x})\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>set (concat\n                         (map (\\<lambda>x.\n                                  case x of Less 0 nat2 \\<Rightarrow> []\n                                  | Less (Suc i) 0 \\<Rightarrow> [i]\n                                  | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                                  | Eq nat1 nat2 \\<Rightarrow> [])\n                           as)).\n       xs ! i < m &&&\n    \\<forall>j\\<in>set (concat\n                         (map (\\<lambda>x.\n                                  case x of Less 0 0 \\<Rightarrow> []\n                                  | Less 0 (Suc j) \\<Rightarrow> [j]\n                                  | Less (Suc nat) nat2 \\<Rightarrow> []\n                                  | Eq nat1 nat2 \\<Rightarrow> [])\n                           as)).\n       m < xs ! j", "using nonempty finite"], ["proof (prove)\nusing this:\n  Max (\\<Union>x\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n          {xs ! x})\n  < m \\<and>\n  m < Min (\\<Union>x\\<in>set (concat\n                               (map (\\<lambda>x.\n  case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n  | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                                 as)).\n              {xs ! x})\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {}\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 nat2 \\<Rightarrow> []\n                   | Less (Suc i) 0 \\<Rightarrow> [i]\n                   | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 0 \\<Rightarrow> []\n                   | Less 0 (Suc j) \\<Rightarrow> [j]\n                   | Less (Suc nat) nat2 \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>set (concat\n                         (map (\\<lambda>x.\n                                  case x of Less 0 nat2 \\<Rightarrow> []\n                                  | Less (Suc i) 0 \\<Rightarrow> [i]\n                                  | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                                  | Eq nat1 nat2 \\<Rightarrow> [])\n                           as)).\n       xs ! i < m &&&\n    \\<forall>j\\<in>set (concat\n                         (map (\\<lambda>x.\n                                  case x of Less 0 0 \\<Rightarrow> []\n                                  | Less 0 (Suc j) \\<Rightarrow> [j]\n                                  | Less (Suc nat) nat2 \\<Rightarrow> []\n                                  | Eq nat1 nat2 \\<Rightarrow> [])\n                           as)).\n       m < xs ! j", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<in>set (concat\n                       (map (\\<lambda>x.\n                                case x of Less 0 nat2 \\<Rightarrow> []\n                                | Less (Suc i) 0 \\<Rightarrow> [i]\n                                | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                                | Eq nat1 nat2 \\<Rightarrow> [])\n                         as)).\n     xs ! i < m\n  \\<forall>j\\<in>set (concat\n                       (map (\\<lambda>x.\n                                case x of Less 0 0 \\<Rightarrow> []\n                                | Less 0 (Suc j) \\<Rightarrow> [j]\n                                | Less (Suc nat) nat2 \\<Rightarrow> []\n                                | Eq nat1 nat2 \\<Rightarrow> [])\n                         as)).\n     m < xs ! j\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence \"\\<forall>a \\<in> set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>set (concat\n                       (map (\\<lambda>x.\n                                case x of Less 0 nat2 \\<Rightarrow> []\n                                | Less (Suc i) 0 \\<Rightarrow> [i]\n                                | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                                | Eq nat1 nat2 \\<Rightarrow> [])\n                         as)).\n     xs ! i < m\n  \\<forall>j\\<in>set (concat\n                       (map (\\<lambda>x.\n                                case x of Less 0 0 \\<Rightarrow> []\n                                | Less 0 (Suc j) \\<Rightarrow> [j]\n                                | Less (Suc nat) nat2 \\<Rightarrow> []\n                                | Eq nat1 nat2 \\<Rightarrow> [])\n                         as)).\n     m < xs ! j\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)", "using 2[OF 0]"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>set (concat\n                       (map (\\<lambda>x.\n                                case x of Less 0 nat2 \\<Rightarrow> []\n                                | Less (Suc i) 0 \\<Rightarrow> [i]\n                                | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                                | Eq nat1 nat2 \\<Rightarrow> [])\n                         as)).\n     xs ! i < m\n  \\<forall>j\\<in>set (concat\n                       (map (\\<lambda>x.\n                                case x of Less 0 0 \\<Rightarrow> []\n                                | Less 0 (Suc j) \\<Rightarrow> [j]\n                                | Less (Suc nat) nat2 \\<Rightarrow> []\n                                | Eq nat1 nat2 \\<Rightarrow> [])\n                         as)).\n     m < xs ! j\n  \\<forall>a\\<in>set as.\n     (\\<exists>i\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n         a = Less (Suc i) 0) \\<or>\n     (\\<exists>i\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 0 \\<Rightarrow> []\n                                    | Less 0 (Suc j) \\<Rightarrow> [j]\n                                    | Less (Suc nat) nat2 \\<Rightarrow> []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n         a = Less 0 (Suc i))\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)", "by(auto simp:less)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence ?R"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)", ".."], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "}"], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "moreover"], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "{"], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "assume asm: \"?Ls \\<noteq> {} \\<and> ?Us = {}\""], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {}\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "then"], ["proof (chain)\npicking this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {}", "obtain m where \"?lb < m\""], ["proof (prove)\nusing this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {}\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        Max (\\<Union>x\\<in>set (concat\n                                 (map (\\<lambda>x.\n    case x of Less 0 nat2 \\<Rightarrow> []\n    | Less (Suc i) 0 \\<Rightarrow> [i]\n    | Less (Suc i) (Suc nata) \\<Rightarrow> []\n    | Eq nat1 nat2 \\<Rightarrow> [])\n                                   as)).\n                {xs ! x})\n        < m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using no_ub"], ["proof (prove)\nusing this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {}\n  \\<exists>u. ?x < u\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        Max (\\<Union>x\\<in>set (concat\n                                 (map (\\<lambda>x.\n    case x of Less 0 nat2 \\<Rightarrow> []\n    | Less (Suc i) 0 \\<Rightarrow> [i]\n    | Less (Suc i) (Suc nata) \\<Rightarrow> []\n    | Eq nat1 nat2 \\<Rightarrow> [])\n                                   as)).\n                {xs ! x})\n        < m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Max (\\<Union>x\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n          {xs ! x})\n  < m\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence \"\\<forall>a\\<in> set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)\""], ["proof (prove)\nusing this:\n  Max (\\<Union>x\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n          {xs ! x})\n  < m\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)", "using 2[OF 0] asm finite"], ["proof (prove)\nusing this:\n  Max (\\<Union>x\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n          {xs ! x})\n  < m\n  \\<forall>a\\<in>set as.\n     (\\<exists>i\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n         a = Less (Suc i) 0) \\<or>\n     (\\<exists>i\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 0 \\<Rightarrow> []\n                                    | Less 0 (Suc j) \\<Rightarrow> [j]\n                                    | Less (Suc nat) nat2 \\<Rightarrow> []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n         a = Less 0 (Suc i))\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {}\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 nat2 \\<Rightarrow> []\n                   | Less (Suc i) 0 \\<Rightarrow> [i]\n                   | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 0 \\<Rightarrow> []\n                   | Less 0 (Suc j) \\<Rightarrow> [j]\n                   | Less (Suc nat) nat2 \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence ?R"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)", ".."], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "}"], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "moreover"], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "{"], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "assume asm: \"?Ls = {} \\<and> ?Us \\<noteq> {}\""], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {}\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "then"], ["proof (chain)\npicking this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {}", "obtain m where \"m < ?ub\""], ["proof (prove)\nusing this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        m < Min (\\<Union>x\\<in>set (concat\n                                     (map\n (\\<lambda>x.\n     case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n     | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n as)).\n                    {xs ! x}) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using no_lb"], ["proof (prove)\nusing this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {}\n  \\<exists>l. l < ?x\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        m < Min (\\<Union>x\\<in>set (concat\n                                     (map\n (\\<lambda>x.\n     case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n     | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n as)).\n                    {xs ! x}) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m < Min (\\<Union>x\\<in>set (concat\n                               (map (\\<lambda>x.\n  case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n  | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                                 as)).\n              {xs ! x})\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence \"\\<forall>a\\<in> set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)\""], ["proof (prove)\nusing this:\n  m < Min (\\<Union>x\\<in>set (concat\n                               (map (\\<lambda>x.\n  case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n  | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                                 as)).\n              {xs ! x})\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)", "using 2[OF 0] asm finite"], ["proof (prove)\nusing this:\n  m < Min (\\<Union>x\\<in>set (concat\n                               (map (\\<lambda>x.\n  case x of Less 0 0 \\<Rightarrow> [] | Less 0 (Suc j) \\<Rightarrow> [j]\n  | Less (Suc nat) nat2 \\<Rightarrow> [] | Eq nat1 nat2 \\<Rightarrow> [])\n                                 as)).\n              {xs ! x})\n  \\<forall>a\\<in>set as.\n     (\\<exists>i\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n         a = Less (Suc i) 0) \\<or>\n     (\\<exists>i\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 0 \\<Rightarrow> []\n                                    | Less 0 (Suc j) \\<Rightarrow> [j]\n                                    | Less (Suc nat) nat2 \\<Rightarrow> []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n         a = Less 0 (Suc i))\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {}\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 nat2 \\<Rightarrow> []\n                   | Less (Suc i) 0 \\<Rightarrow> [i]\n                   | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n  finite\n   (set (concat\n          (map (\\<lambda>x.\n                   case x of Less 0 0 \\<Rightarrow> []\n                   | Less 0 (Suc j) \\<Rightarrow> [j]\n                   | Less (Suc nat) nat2 \\<Rightarrow> []\n                   | Eq nat1 nat2 \\<Rightarrow> [])\n            as)))\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)", "by auto"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence ?R"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (m # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)", ".."], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "}"], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "moreover"], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "{"], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "assume \"?Ls = {} \\<and> ?Us = {}\""], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {}\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence ?R"], ["proof (prove)\nusing this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {}\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)", "using 2[OF 0]"], ["proof (prove)\nusing this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {}\n  \\<forall>a\\<in>set as.\n     (\\<exists>i\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 nat2 \\<Rightarrow> []\n                                    | Less (Suc i) 0 \\<Rightarrow> [i]\n                                    | Less (Suc i) (Suc nata) \\<Rightarrow>\n  []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n         a = Less (Suc i) 0) \\<or>\n     (\\<exists>i\\<in>set (concat\n                           (map (\\<lambda>x.\n                                    case x of Less 0 0 \\<Rightarrow> []\n                                    | Less 0 (Suc j) \\<Rightarrow> [j]\n                                    | Less (Suc nat) nat2 \\<Rightarrow> []\n                                    | Eq nat1 nat2 \\<Rightarrow> [])\n                             as)).\n         a = Less 0 (Suc i))\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)", "by (auto simp add:less)"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "}"], ["proof (state)\nthis:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (2 subgoals):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs \\<Longrightarrow>\n    \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "ultimately"], ["proof (chain)\npicking this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)", "show ?R"], ["proof (prove)\nusing this:\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) \\<noteq>\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 nat2 \\<Rightarrow> []\n                 | Less (Suc i) 0 \\<Rightarrow> [i]\n                 | Less (Suc i) (Suc nata) \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<and>\n  set (concat\n        (map (\\<lambda>x.\n                 case x of Less 0 0 \\<Rightarrow> []\n                 | Less 0 (Suc j) \\<Rightarrow> [j]\n                 | Less (Suc nat) nat2 \\<Rightarrow> []\n                 | Eq nat1 nat2 \\<Rightarrow> [])\n          as)) =\n  {} \\<Longrightarrow>\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "assume ?R"], ["proof (state)\nthis:\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)", "obtain x where 1: \"\\<forall>a\\<in> set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\""], ["proof (prove)\nusing this:\n  \\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<forall>a\\<in>set as.\n           I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence 0: \"Less 0 0 \\<notin> set as\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (1 subgoal):\n 1. Less 0 0 \\<notin> set as", "by auto"], ["proof (state)\nthis:\n  Less 0 0 \\<notin> set as\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "{"], ["proof (state)\nthis:\n  Less 0 0 \\<notin> set as\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "assume asm: \"Less i 0 \\<in> set as\" \"Less 0 j \\<in> set as\""], ["proof (state)\nthis:\n  Less i 0 \\<in> set as\n  Less 0 j \\<in> set as\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence \"(x#xs)!i < x\" \"x < (x#xs)!j\""], ["proof (prove)\nusing this:\n  Less i 0 \\<in> set as\n  Less 0 j \\<in> set as\n\ngoal (1 subgoal):\n 1. (x # xs) ! i < x &&& x < (x # xs) ! j", "using 1"], ["proof (prove)\nusing this:\n  Less i 0 \\<in> set as\n  Less 0 j \\<in> set as\n  \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n\ngoal (1 subgoal):\n 1. (x # xs) ! i < x &&& x < (x # xs) ! j", "by auto+"], ["proof (state)\nthis:\n  (x # xs) ! i < x\n  x < (x # xs) ! j\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "hence \"(x#xs)!i < (x#xs)!j\""], ["proof (prove)\nusing this:\n  (x # xs) ! i < x\n  x < (x # xs) ! j\n\ngoal (1 subgoal):\n 1. (x # xs) ! i < (x # xs) ! j", "by(rule order_less_trans)"], ["proof (state)\nthis:\n  (x # xs) ! i < (x # xs) ! j\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "moreover"], ["proof (state)\nthis:\n  (x # xs) ! i < (x # xs) ! j\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "have \"\\<not>(i = 0 | j = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> j = 0)", "using 0 asm"], ["proof (prove)\nusing this:\n  Less 0 0 \\<notin> set as\n  Less i 0 \\<in> set as\n  Less 0 j \\<in> set as\n\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> j = 0)", "by blast"], ["proof (state)\nthis:\n  \\<not> (i = 0 \\<or> j = 0)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "ultimately"], ["proof (chain)\npicking this:\n  (x # xs) ! i < (x # xs) ! j\n  \\<not> (i = 0 \\<or> j = 0)", "have \"xs ! (i - 1) < xs ! (j - 1)\""], ["proof (prove)\nusing this:\n  (x # xs) ! i < (x # xs) ! j\n  \\<not> (i = 0 \\<or> j = 0)\n\ngoal (1 subgoal):\n 1. xs ! (i - 1) < xs ! (j - 1)", "by (simp add: nth_Cons')"], ["proof (state)\nthis:\n  xs ! (i - 1) < xs ! (j - 1)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>Less ?i2 0 \\<in> set as; Less 0 ?j2 \\<in> set as\\<rbrakk>\n  \\<Longrightarrow> xs ! (?i2 - 1) < xs ! (?j2 - 1)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       \\<forall>a\\<in>set as.\n          I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs) \\<Longrightarrow>\n    DLO.I (qe_dlo\\<^sub>1 as) xs", "thus ?L"], ["proof (prove)\nusing this:\n  \\<lbrakk>Less ?i2 0 \\<in> set as; Less 0 ?j2 \\<in> set as\\<rbrakk>\n  \\<Longrightarrow> xs ! (?i2 - 1) < xs ! (?j2 - 1)\n\ngoal (1 subgoal):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs", "using 0 less"], ["proof (prove)\nusing this:\n  \\<lbrakk>Less ?i2 0 \\<in> set as; Less 0 ?j2 \\<in> set as\\<rbrakk>\n  \\<Longrightarrow> xs ! (?i2 - 1) < xs ! (?j2 - 1)\n  Less 0 0 \\<notin> set as\n  \\<forall>a\\<in>set as. is_Less a\n\ngoal (1 subgoal):\n 1. DLO.I (qe_dlo\\<^sub>1 as) xs", "by (fastforce simp: qe_dlo\\<^sub>1_def is_Less_iff split:atom.splits nat.splits)"], ["proof (state)\nthis:\n  DLO.I (qe_dlo\\<^sub>1 as) xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma I_qe_dlo\\<^sub>1_pretty:\n  \"\\<forall>a \\<in> set as. is_Less a \\<and> depends\\<^sub>d\\<^sub>l\\<^sub>o a \\<Longrightarrow> DLO.is_dnf_qe _ qe_dlo\\<^sub>1 as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set as.\n       is_Less a \\<and> depends\\<^sub>d\\<^sub>l\\<^sub>o a \\<Longrightarrow>\n    \\<forall>xs.\n       DLO.I (qe_dlo\\<^sub>1 as) xs =\n       (\\<exists>x.\n           \\<forall>a\\<in>set as. I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs))", "by(metis I_qe_dlo\\<^sub>1)"], ["", "definition subst :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat\" where\n\"subst i j k = (if k=0 then if i=0 then j else i else k) - 1\""], ["", "fun subst\\<^sub>0 :: \"atom \\<Rightarrow> atom \\<Rightarrow> atom\" where\n\"subst\\<^sub>0 (Eq i j) a = (case a of\n   Less m n \\<Rightarrow> Less (subst i j m) (subst i j n)\n | Eq m n \\<Rightarrow> Eq (subst i j m) (subst i j n))\""], ["", "lemma subst\\<^sub>0_pretty:\n  \"subst\\<^sub>0 (Eq i j) (Less m n) = Less (subst i j m) (subst i j n)\"\n  \"subst\\<^sub>0 (Eq i j) (Eq m n) = Eq (subst i j m) (subst i j n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst\\<^sub>0 (Eq i j) (Less m n) =\n    Less (QEdlo.subst i j m) (QEdlo.subst i j n) &&&\n    subst\\<^sub>0 (Eq i j) (Eq m n) =\n    Eq (QEdlo.subst i j m) (QEdlo.subst i j n)", "by auto"], ["", "(*<*)\n(* needed for code generation *)"], ["", "definition [code del]: \"lift_dnfeq_qe = ATOM_EQ.lift_dnfeq_qe neg\\<^sub>d\\<^sub>l\\<^sub>o depends\\<^sub>d\\<^sub>l\\<^sub>o decr\\<^sub>d\\<^sub>l\\<^sub>o (\\<lambda>Eq i j \\<Rightarrow> i=0 \\<or> j=0 | a \\<Rightarrow> False)\n          (\\<lambda>Eq i j \\<Rightarrow> i=j | a \\<Rightarrow> False) subst\\<^sub>0\""], ["", "definition [code del]:\n  \"lift_eq_qe = ATOM_EQ.lift_eq_qe (\\<lambda>Eq i j \\<Rightarrow> i=0 \\<or> j=0 | a \\<Rightarrow> False)\n                                   (\\<lambda>Eq i j \\<Rightarrow> i=j | a \\<Rightarrow> False) subst\\<^sub>0\""], ["", "lemmas DLOe_code_lemmas = DLO_code_lemmas lift_dnfeq_qe_def lift_eq_qe_def"], ["", "hide_const lift_dnfeq_qe lift_eq_qe"], ["", "(*>*)"], ["", "interpretation DLO\\<^sub>e:\n  ATOM_EQ neg\\<^sub>d\\<^sub>l\\<^sub>o \"(\\<lambda>a. True)\" I\\<^sub>d\\<^sub>l\\<^sub>o depends\\<^sub>d\\<^sub>l\\<^sub>o decr\\<^sub>d\\<^sub>l\\<^sub>o\n          \"(\\<lambda>Eq i j \\<Rightarrow> i=0 \\<or> j=0 | a \\<Rightarrow> False)\"\n          \"(\\<lambda>Eq i j \\<Rightarrow> i=j | a \\<Rightarrow> False)\" subst\\<^sub>0"], ["proof (prove)\ngoal (1 subgoal):\n 1. ATOM_EQ neg\\<^sub>d\\<^sub>l\\<^sub>o (\\<lambda>a. True)\n     I\\<^sub>d\\<^sub>l\\<^sub>o depends\\<^sub>d\\<^sub>l\\<^sub>o\n     decr\\<^sub>d\\<^sub>l\\<^sub>o\n     (\\<lambda>x.\n         case x of Less nat1 nat2 \\<Rightarrow> False\n         | Eq i j \\<Rightarrow> i = 0 \\<or> j = 0)\n     (\\<lambda>x.\n         case x of Less nat1 nat2 \\<Rightarrow> False\n         | Eq i j \\<Rightarrow> i = j)\n     subst\\<^sub>0", "apply(unfold_locales)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>eqa x xs a.\n       \\<lbrakk>case eqa of Less nat1 nat2 \\<Rightarrow> False\n                | Eq i j \\<Rightarrow> i = 0 \\<or> j = 0;\n        \\<not> (case eqa of Less nat1 nat2 \\<Rightarrow> False\n                | Eq i j \\<Rightarrow> i = j);\n        I\\<^sub>d\\<^sub>l\\<^sub>o eqa (x # xs);\n        depends\\<^sub>d\\<^sub>l\\<^sub>o a\\<rbrakk>\n       \\<Longrightarrow> I\\<^sub>d\\<^sub>l\\<^sub>o (subst\\<^sub>0 eqa a)\n                          xs =\n                         I\\<^sub>d\\<^sub>l\\<^sub>o a (x # xs)\n 2. \\<And>eqa xs.\n       case eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = j \\<Longrightarrow>\n       I\\<^sub>d\\<^sub>l\\<^sub>o eqa xs\n 3. \\<And>eqa xs.\n       case eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = 0 \\<or> j = 0 \\<Longrightarrow>\n       \\<exists>x. I\\<^sub>d\\<^sub>l\\<^sub>o eqa (x # xs)\n 4. \\<And>eqa.\n       case eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = 0 \\<or> j = 0 \\<Longrightarrow>\n       case subst\\<^sub>0 eqa eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = j", "apply(fastforce simp:subst_def nth_Cons' split:atom.splits if_split_asm)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>eqa xs.\n       case eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = j \\<Longrightarrow>\n       I\\<^sub>d\\<^sub>l\\<^sub>o eqa xs\n 2. \\<And>eqa xs.\n       case eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = 0 \\<or> j = 0 \\<Longrightarrow>\n       \\<exists>x. I\\<^sub>d\\<^sub>l\\<^sub>o eqa (x # xs)\n 3. \\<And>eqa.\n       case eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = 0 \\<or> j = 0 \\<Longrightarrow>\n       case subst\\<^sub>0 eqa eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = j", "apply(simp add:subst_def split:atom.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>eqa xs.\n       case eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = 0 \\<or> j = 0 \\<Longrightarrow>\n       \\<exists>x. I\\<^sub>d\\<^sub>l\\<^sub>o eqa (x # xs)\n 2. \\<And>eqa.\n       case eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = 0 \\<or> j = 0 \\<Longrightarrow>\n       case subst\\<^sub>0 eqa eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = j", "apply(fastforce simp:subst_def nth_Cons' split:atom.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>eqa.\n       case eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = 0 \\<or> j = 0 \\<Longrightarrow>\n       case subst\\<^sub>0 eqa eqa of Less nat1 nat2 \\<Rightarrow> False\n       | Eq i j \\<Rightarrow> i = j", "apply(fastforce simp add:subst_def split:atom.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*<*)"], ["", "lemmas [folded DLOe_code_lemmas, code] =\n  DLO\\<^sub>e.lift_dnfeq_qe_def DLO\\<^sub>e.lift_eq_qe_def"], ["", "(*>*)"], ["", "setup \\<open>Sign.revert_abbrev \"\" @{const_abbrev DLO\\<^sub>e.lift_dnfeq_qe}\\<close>"], ["", "definition \"qe_dlo = DLO\\<^sub>e.lift_dnfeq_qe qe_dlo\\<^sub>1\""], ["", "(*<*)"], ["", "lemmas [folded DLOe_code_lemmas, code] = qe_dlo_def"], ["", "(*>*)"], ["", "lemma qfree_qe_dlo\\<^sub>1: \"qfree (qe_dlo\\<^sub>1 as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qfree (qe_dlo\\<^sub>1 as)", "by(auto simp:qe_dlo\\<^sub>1_def intro!:qfree_list_conj)"], ["", "theorem I_qe_dlo: \"DLO.I (qe_dlo \\<phi>) xs = DLO.I \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I (qe_dlo \\<phi>) xs = DLO.I \\<phi> xs", "unfolding qe_dlo_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I (DLO\\<^sub>e.lift_dnfeq_qe qe_dlo\\<^sub>1 \\<phi>) xs =\n    DLO.I \\<phi> xs", "by(fastforce intro!: I_qe_dlo\\<^sub>1 qfree_qe_dlo\\<^sub>1 DLO\\<^sub>e.I_lift_dnfeq_qe\n        simp: is_Less_iff not_is_Eq_iff split:atom.splits cong:conj_cong)"], ["", "theorem qfree_qe_dlo: \"qfree (qe_dlo \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qfree (qe_dlo \\<phi>)", "by(simp add:qe_dlo_def DLO\\<^sub>e.qfree_lift_dnfeq_qe qfree_qe_dlo\\<^sub>1)"], ["", "end"]]}