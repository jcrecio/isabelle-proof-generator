{"file_name": "/home/qj213/afp-2021-10-22/thys/LinearQuantifierElim/Thys/QEdlo_ex.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LinearQuantifierElim", "problem_names": ["lemma interpret_Atoms:\n  \"interpret (Atom (Eq i j)) xs = (xs!i = xs!j)\" \n  \"interpret (Atom (Less i j)) xs = (xs!i < xs!j)\"", "lemma interpret_others:\n  \"interpret (Neg(ExQ (Neg f))) xs = (\\<forall>x. interpret f (x#xs))\"\n  \"interpret (Or (Neg f1) f2) xs = (interpret f1 xs \\<longrightarrow> interpret f2 xs)\"", "lemmas reify_eqs =\n  Logic.interpret.simps(1,2,4-7)[of I\\<^sub>d\\<^sub>l\\<^sub>o, folded interpret_def]\n  interpret_others interpret_Atoms", "lemma \"\\<forall>x::real. \\<not> x < x\"", "lemma \"\\<forall>x y::real. \\<exists>z. x < y \\<longrightarrow> x < z \\<and> z < y\"", "lemma \"\\<exists> x::real. a+b < x \\<and> x < c*d\"", "lemma \"\\<forall>x::real. \\<not> x < x\"", "lemma \"\\<forall>x y::real. \\<exists>z. x < y \\<longrightarrow> x < z \\<and> z < y\"", "lemma \"\\<not>(\\<exists>x y z. \\<forall>u::real. x < x \\<or> \\<not> x<u \\<or> x<y \\<and> y<z \\<and> \\<not> x<z)\"", "lemma \"qe_dlo(AllQ (Imp (Atom(Less 0 1)) (Atom(Less 1 0)))) = FalseF\"", "lemma \"qe_dlo(AllQ(AllQ (Imp (Atom(Less 0 1)) (Atom(Less 0 1))))) = TrueF\"", "lemma\n  \"qe_dlo(AllQ(ExQ(AllQ (And (Atom(Less 2 1)) (Atom(Less 1 0)))))) = FalseF\"", "lemma \"qe_dlo(AllQ(ExQ(ExQ (And (Atom(Less 1 2)) (Atom(Less 2 0)))))) = TrueF\"", "lemma\n  \"qe_dlo(AllQ(AllQ(ExQ (And (Atom(Less 1 0)) (Atom(Less 0 2)))))) = FalseF\"", "lemma \"qe_dlo(AllQ(AllQ(ExQ (Imp (Atom(Less 1 2)) (And (Atom(Less 1 0)) (Atom(Less 0 2))))))) = TrueF\""], "translations": [["", "lemma interpret_Atoms:\n  \"interpret (Atom (Eq i j)) xs = (xs!i = xs!j)\" \n  \"interpret (Atom (Less i j)) xs = (xs!i < xs!j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. QEdlo_ex.interpret (Atom (Eq i j)) xs = (xs ! i = xs ! j) &&&\n    QEdlo_ex.interpret (Atom (Less i j)) xs = (xs ! i < xs ! j)", "by(simp_all add:interpret_def)"], ["", "lemma interpret_others:\n  \"interpret (Neg(ExQ (Neg f))) xs = (\\<forall>x. interpret f (x#xs))\"\n  \"interpret (Or (Neg f1) f2) xs = (interpret f1 xs \\<longrightarrow> interpret f2 xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. QEdlo_ex.interpret (AllQ f) xs =\n    (\\<forall>x. QEdlo_ex.interpret f (x # xs)) &&&\n    QEdlo_ex.interpret (Imp f1 f2) xs =\n    (QEdlo_ex.interpret f1 xs \\<longrightarrow> QEdlo_ex.interpret f2 xs)", "by(simp_all add:interpret_def)"], ["", "lemmas reify_eqs =\n  Logic.interpret.simps(1,2,4-7)[of I\\<^sub>d\\<^sub>l\\<^sub>o, folded interpret_def]\n  interpret_others interpret_Atoms"], ["", "method_setup dlo_reify = \\<open>\n  Scan.succeed\n  (fn ctxt =>\n    Method.SIMPLE_METHOD' (Reification.tac ctxt @{thms reify_eqs} NONE\n     THEN' simp_tac (put_simpset HOL_basic_ss ctxt addsimps [@{thm\"interpret_def\"}])))\n\\<close> \"dlo reification\""], ["", "(* leave just enough equations in to convert back to True/False by eval *)"], ["", "declare I\\<^sub>d\\<^sub>l\\<^sub>o.simps(1)[code]"], ["", "declare Logic.interpret.simps[code del]"], ["", "declare Logic.interpret.simps(1-2)[code]"], ["", "subsection\\<open>Examples\\<close>"], ["", "lemma \"\\<forall>x::real. \\<not> x < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<not> x < x", "apply dlo_reify"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I (AllQ (Neg (Atom (Less 0 0)))) []", "apply (subst I_qe_dlo [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I (qe_dlo (AllQ (Neg (Atom (Less 0 0))))) []", "by eval"], ["", "lemma \"\\<forall>x y::real. \\<exists>z. x < y \\<longrightarrow> x < z \\<and> z < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. \\<exists>z. x < y \\<longrightarrow> x < z \\<and> z < y", "apply dlo_reify"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I\n     (AllQ\n       (AllQ\n         (ExQ (Imp (Atom (Less (Suc (Suc 0)) (Suc 0)))\n                (And (Atom (Less (Suc (Suc 0)) 0))\n                  (Atom (Less 0 (Suc 0))))))))\n     []", "apply (subst I_qe_dlo [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I\n     (qe_dlo\n       (AllQ\n         (AllQ\n           (ExQ (Imp (Atom (Less (Suc (Suc 0)) (Suc 0)))\n                  (And (Atom (Less (Suc (Suc 0)) 0))\n                    (Atom (Less 0 (Suc 0)))))))))\n     []", "by eval"], ["", "lemma \"\\<exists> x::real. a+b < x \\<and> x < c*d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x>a + b. x < c * d", "apply dlo_reify"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I (ExQ (And (Atom (Less (Suc (Suc 0)) 0)) (Atom (Less 0 (Suc 0)))))\n     [c * d, a + b]", "apply (subst I_qe_dlo [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I\n     (qe_dlo\n       (ExQ (And (Atom (Less (Suc (Suc 0)) 0)) (Atom (Less 0 (Suc 0))))))\n     [c * d, a + b]", "apply normalization"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I (Atom (Less 1 0)) [c * d, a + b]", "oops"], ["", "lemma \"\\<forall>x::real. \\<not> x < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<not> x < x", "apply dlo_reify"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I (AllQ (Neg (Atom (Less 0 0)))) []", "apply (subst I_qe_dlo [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I (qe_dlo (AllQ (Neg (Atom (Less 0 0))))) []", "by eval"], ["", "lemma \"\\<forall>x y::real. \\<exists>z. x < y \\<longrightarrow> x < z \\<and> z < y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. \\<exists>z. x < y \\<longrightarrow> x < z \\<and> z < y", "apply dlo_reify"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I\n     (AllQ\n       (AllQ\n         (ExQ (Imp (Atom (Less (Suc (Suc 0)) (Suc 0)))\n                (And (Atom (Less (Suc (Suc 0)) 0))\n                  (Atom (Less 0 (Suc 0))))))))\n     []", "apply (subst I_qe_dlo [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I\n     (qe_dlo\n       (AllQ\n         (AllQ\n           (ExQ (Imp (Atom (Less (Suc (Suc 0)) (Suc 0)))\n                  (And (Atom (Less (Suc (Suc 0)) 0))\n                    (Atom (Less 0 (Suc 0)))))))))\n     []", "by eval"], ["", "(* 160 secs *)"], ["", "lemma \"\\<not>(\\<exists>x y z. \\<forall>u::real. x < x \\<or> \\<not> x<u \\<or> x<y \\<and> y<z \\<and> \\<not> x<z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>x y z.\n       \\<forall>u.\n          x < x \\<or>\n          \\<not> x < u \\<or> x < y \\<and> y < z \\<and> \\<not> x < z", "apply dlo_reify"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I\n     (Neg (ExQ (ExQ (ExQ (AllQ\n                           (Or (Atom\n                                 (Less (Suc (Suc (Suc 0)))\n                                   (Suc (Suc (Suc 0)))))\n                             (Imp (Atom (Less (Suc (Suc (Suc 0))) 0))\n                               (And (Atom\n(Less (Suc (Suc (Suc 0))) (Suc (Suc 0))))\n                                 (And (Atom (Less (Suc (Suc 0)) (Suc 0)))\n                                   (Neg (Atom\n    (Less (Suc (Suc (Suc 0))) (Suc 0)))))))))))))\n     []", "apply (subst I_qe_dlo [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. DLO.I\n     (qe_dlo\n       (Neg (ExQ (ExQ (ExQ (AllQ\n                             (Or (Atom\n                                   (Less (Suc (Suc (Suc 0)))\n                                     (Suc (Suc (Suc 0)))))\n                               (Imp (Atom (Less (Suc (Suc (Suc 0))) 0))\n                                 (And (Atom\n  (Less (Suc (Suc (Suc 0))) (Suc (Suc 0))))\n                                   (And (Atom (Less (Suc (Suc 0)) (Suc 0)))\n                                     (Neg\n (Atom (Less (Suc (Suc (Suc 0))) (Suc 0))))))))))))))\n     []", "by eval"], ["", "lemma \"qe_dlo(AllQ (Imp (Atom(Less 0 1)) (Atom(Less 1 0)))) = FalseF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qe_dlo (AllQ (Imp (Atom (Less 0 1)) (Atom (Less 1 0)))) = FalseF", "by eval"], ["", "lemma \"qe_dlo(AllQ(AllQ (Imp (Atom(Less 0 1)) (Atom(Less 0 1))))) = TrueF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qe_dlo (AllQ (AllQ (Imp (Atom (Less 0 1)) (Atom (Less 0 1))))) = TrueF", "by eval"], ["", "lemma\n  \"qe_dlo(AllQ(ExQ(AllQ (And (Atom(Less 2 1)) (Atom(Less 1 0)))))) = FalseF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qe_dlo (AllQ (ExQ (AllQ (And (Atom (Less 2 1)) (Atom (Less 1 0)))))) =\n    FalseF", "by eval"], ["", "lemma \"qe_dlo(AllQ(ExQ(ExQ (And (Atom(Less 1 2)) (Atom(Less 2 0)))))) = TrueF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qe_dlo (AllQ (ExQ (ExQ (And (Atom (Less 1 2)) (Atom (Less 2 0)))))) =\n    TrueF", "by eval"], ["", "lemma\n  \"qe_dlo(AllQ(AllQ(ExQ (And (Atom(Less 1 0)) (Atom(Less 0 2)))))) = FalseF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qe_dlo (AllQ (AllQ (ExQ (And (Atom (Less 1 0)) (Atom (Less 0 2)))))) =\n    FalseF", "by eval"], ["", "lemma \"qe_dlo(AllQ(AllQ(ExQ (Imp (Atom(Less 1 2)) (And (Atom(Less 1 0)) (Atom(Less 0 2))))))) = TrueF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qe_dlo\n     (AllQ\n       (AllQ\n         (ExQ (Imp (Atom (Less 1 2))\n                (And (Atom (Less 1 0)) (Atom (Less 0 2))))))) =\n    TrueF", "by eval"], ["", "value \"qe_dlo(AllQ (Imp (Atom(Less 0 1)) (Atom(Less 0 2))))\""], ["", "end"]]}