{"file_name": "/home/qj213/afp-2021-10-22/thys/LinearQuantifierElim/Thys/QE.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LinearQuantifierElim", "problem_names": ["lemma I_qelim:\nassumes qe: \"\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a) \\<Longrightarrow> is_dnf_qe qe as\"\nshows \"is_dnf_qe (qelim qe) as\" (is \"\\<forall>xs. ?P xs\")", "lemma qfree_lift_dnf_qe: \"(\\<And>as. (\\<forall>a\\<in>set as. depends\\<^sub>0 a) \\<Longrightarrow> qfree(qe as))\n \\<Longrightarrow> qfree(lift_dnf_qe qe \\<phi>)\"", "lemma qfree_lift_dnf_qe2: \"qe \\<in> lists |depends\\<^sub>0| \\<rightarrow> |qfree|\n \\<Longrightarrow> qfree(lift_dnf_qe qe \\<phi>)\"", "lemma lem: \"\\<forall>P A. (\\<exists>x\\<in>A. \\<exists>y. P x y) = (\\<exists>y. \\<exists>x\\<in>A. P x y)\"", "lemma I_lift_dnf_qe:\nassumes  \"\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a) \\<Longrightarrow> qfree(qe as)\"\nand \"\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a) \\<Longrightarrow> is_dnf_qe qe as\"\nshows \"I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs\"", "lemma I_lift_dnf_qe2:\nassumes  \"qe \\<in> lists |depends\\<^sub>0| \\<rightarrow> |qfree|\"\nand \"\\<forall>as \\<in> lists |depends\\<^sub>0|. is_dnf_qe qe as\"\nshows \"I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs\"", "lemma I_qelim_anormal:\nassumes qe: \"\\<And>xs as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow> is_dnf_qe qe as\"\nand nm: \"\\<forall>a \\<in> set as. anormal a\"\nshows \"I (qelim qe as) xs = (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x#xs))\"", "lemma anormal_atoms_qelim:\n  \"(\\<And>as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow> normal(qe as)) \\<Longrightarrow>\n   \\<forall>a \\<in> set as. anormal a \\<Longrightarrow> a \\<in> atoms(qelim qe as) \\<Longrightarrow> anormal a\"", "lemma normal_lift_dnf_qe:\nassumes \"\\<And>as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<Longrightarrow> qfree(qe as)\"\nand \"\\<And>as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow> normal(qe as)\"\nshows  \"normal \\<phi> \\<Longrightarrow> normal(lift_dnf_qe qe \\<phi>)\"", "lemma I_lift_dnf_qe_anormal:\nassumes \"\\<And>as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<Longrightarrow> qfree(qe as)\"\nand \"\\<And>as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow> normal(qe as)\"\nand \"\\<And>xs as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow> is_dnf_qe qe as\"\nshows \"normal f \\<Longrightarrow> I (lift_dnf_qe qe f) xs = I f xs\"", "lemma I_lift_dnf_qe_anormal2:\nassumes \"qe \\<in> lists |depends\\<^sub>0| \\<rightarrow> |qfree|\"\nand \"qe \\<in> lists ( |depends\\<^sub>0| \\<inter> |anormal| ) \\<rightarrow> |normal|\"\nand \"\\<forall>as \\<in> lists( |depends\\<^sub>0| \\<inter> |anormal| ). is_dnf_qe qe as\"\nshows \"normal f \\<Longrightarrow> I (lift_dnf_qe qe f) xs = I f xs\"", "lemma qfree_lift_nnf_qe: \"(\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> qfree(qe \\<phi>))\n \\<Longrightarrow> qfree(lift_nnf_qe qe \\<phi>)\"", "lemma qfree_lift_nnf_qe2:\n  \"qe \\<in> |nqfree| \\<rightarrow> |qfree| \\<Longrightarrow> qfree(lift_nnf_qe qe \\<phi>)\"", "lemma I_lift_nnf_qe:\nassumes  \"\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> qfree(qe \\<phi>)\"\nand \"\\<And>xs \\<phi>. nqfree \\<phi> \\<Longrightarrow> I (qe \\<phi>) xs = (\\<exists>x. I \\<phi> (x#xs))\"\nshows \"I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs\"", "lemma I_lift_nnf_qe2:\nassumes  \"qe \\<in> |nqfree| \\<rightarrow> |qfree|\"\nand \"\\<forall>\\<phi> \\<in> |nqfree|. \\<forall>xs. I (qe \\<phi>) xs = (\\<exists>x. I \\<phi> (x#xs))\"\nshows \"I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs\"", "lemma normal_lift_nnf_qe:\nassumes \"\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> qfree(qe \\<phi>)\"\nand     \"\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> normal \\<phi> \\<Longrightarrow> normal(qe \\<phi>)\"\nshows \"normal \\<phi> \\<Longrightarrow> normal(lift_nnf_qe qe \\<phi>)\"", "lemma I_lift_nnf_qe_normal:\nassumes  \"\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> qfree(qe \\<phi>)\"\nand \"\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> normal \\<phi> \\<Longrightarrow> normal(qe \\<phi>)\"\nand \"\\<And>xs \\<phi>. normal \\<phi> \\<Longrightarrow> nqfree \\<phi> \\<Longrightarrow> I (qe \\<phi>) xs = (\\<exists>x. I \\<phi> (x#xs))\"\nshows \"normal \\<phi> \\<Longrightarrow> I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs\"", "lemma I_lift_nnf_qe_normal2:\nassumes  \"qe \\<in> |nqfree| \\<rightarrow> |qfree|\"\nand \"qe \\<in> |nqfree| \\<inter> |normal| \\<rightarrow> |normal|\"\nand \"\\<forall>\\<phi> \\<in> |normal| \\<inter> |nqfree|. \\<forall>xs. I (qe \\<phi>) xs = (\\<exists>x. I \\<phi> (x#xs))\"\nshows \"normal \\<phi> \\<Longrightarrow> I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs\"", "theorem I_lift_eq_qe:\nassumes dep: \"\\<forall>a\\<in>set as. depends\\<^sub>0 a\"\nassumes qe: \"\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> \\<not> solvable\\<^sub>0 a) \\<Longrightarrow>\n   I (qe as) xs = (\\<exists>x. \\<forall>a \\<in> set as. I\\<^sub>a a (x#xs))\"\nshows \"I (lift_eq_qe qe as) xs = (\\<exists>x. \\<forall>a \\<in> set as. I\\<^sub>a a (x#xs))\"\n  (is \"?L = ?R\")", "lemma qfree_lift_eq_qe:\n  \"(\\<And>as. \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<Longrightarrow> qfree (qe as)) \\<Longrightarrow>\n   \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<Longrightarrow> qfree(lift_eq_qe qe as)\"", "lemma qfree_lift_dnfeq_qe: \"(\\<And>as. (\\<forall>a\\<in>set as. depends\\<^sub>0 a) \\<Longrightarrow> qfree(qe as))\n  \\<Longrightarrow> qfree(lift_dnfeq_qe qe \\<phi>)\"", "lemma I_lift_dnfeq_qe:\n  \"(\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a) \\<Longrightarrow> qfree(qe as)) \\<Longrightarrow>\n   (\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> \\<not> solvable\\<^sub>0 a) \\<Longrightarrow> is_dnf_qe qe as) \\<Longrightarrow>\n   I (lift_dnfeq_qe qe \\<phi>) xs = I \\<phi> xs\"", "lemma I_lift_dnfeq_qe2:\n  \"qe \\<in> lists |depends\\<^sub>0| \\<rightarrow> |qfree| \\<Longrightarrow>\n   (\\<forall>as \\<in> lists( |depends\\<^sub>0| \\<inter> - |solvable\\<^sub>0| ). is_dnf_qe qe as) \\<Longrightarrow>\n   I (lift_dnfeq_qe qe \\<phi>) xs = I \\<phi> xs\""], "translations": [["", "lemma I_qelim:\nassumes qe: \"\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a) \\<Longrightarrow> is_dnf_qe qe as\"\nshows \"is_dnf_qe (qelim qe) as\" (is \"\\<forall>xs. ?P xs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_dnf_qe (qelim qe) as", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "fix  xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "let ?as0 = \"filter depends\\<^sub>0 as\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "let ?as1 = \"filter (Not \\<circ> depends\\<^sub>0) as\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"I (qelim qe as) xs =\n        (I (qe ?as0) xs \\<and> (\\<forall>a\\<in>set(map decr ?as1). I\\<^sub>a a xs))\"\n    (is \"_ = (_ \\<and> ?B)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n     (\\<forall>a\\<in>set (map decr\n                           (filter (Not \\<circ> depends\\<^sub>0) as)).\n         I\\<^sub>a a xs))", "by(force simp add:qelim_def)"], ["proof (state)\nthis:\n  I (qelim qe as) xs =\n  (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  I (qelim qe as) xs =\n  (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"\\<dots> = ((\\<exists>x. \\<forall>a \\<in> set ?as0. I\\<^sub>a a (x#xs)) \\<and> ?B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n     (\\<forall>a\\<in>set (map decr\n                           (filter (Not \\<circ> depends\\<^sub>0) as)).\n         I\\<^sub>a a xs)) =\n    ((\\<exists>x.\n         \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n     (\\<forall>a\\<in>set (map decr\n                           (filter (Not \\<circ> depends\\<^sub>0) as)).\n         I\\<^sub>a a xs))", "by(simp add:qe not_dep_decr)"], ["proof (state)\nthis:\n  (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs)) =\n  ((\\<exists>x.\n       \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs)) =\n  ((\\<exists>x.\n       \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"\\<dots> = (\\<exists>x. (\\<forall>a \\<in> set ?as0. I\\<^sub>a a (x#xs)) \\<and> ?B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>x.\n         \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n     (\\<forall>a\\<in>set (map decr\n                           (filter (Not \\<circ> depends\\<^sub>0) as)).\n         I\\<^sub>a a xs)) =\n    (\\<exists>x.\n        (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n        (\\<forall>a\\<in>set (map decr\n                              (filter (Not \\<circ> depends\\<^sub>0) as)).\n            I\\<^sub>a a xs))", "by blast"], ["proof (state)\nthis:\n  ((\\<exists>x.\n       \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs)) =\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (map decr\n                            (filter (Not \\<circ> depends\\<^sub>0) as)).\n          I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  ((\\<exists>x.\n       \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs)) =\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (map decr\n                            (filter (Not \\<circ> depends\\<^sub>0) as)).\n          I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"?B = (\\<forall>a \\<in> set ?as1. I\\<^sub>a (decr a) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set (map decr\n                          (filter (Not \\<circ> depends\\<^sub>0) as)).\n        I\\<^sub>a a xs) =\n    (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n        I\\<^sub>a (decr a) xs)", "by simp"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n      I\\<^sub>a a xs) =\n  (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n      I\\<^sub>a (decr a) xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n      I\\<^sub>a a xs) =\n  (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n      I\\<^sub>a (decr a) xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"(\\<exists>x. (\\<forall>a \\<in> set ?as0. I\\<^sub>a a (x#xs)) \\<and> \\<dots>) =\n             (\\<exists>x. (\\<forall>a \\<in> set ?as0. I\\<^sub>a a (x#xs)) \\<and>\n                  (\\<forall>a \\<in> set ?as1. I\\<^sub>a a (x#xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n        (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n            I\\<^sub>a (decr a) xs)) =\n    (\\<exists>x.\n        (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n        (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n            I\\<^sub>a a (x # xs)))", "by(simp add: not_dep_decr)"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a (decr a) xs)) =\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a a (x # xs)))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a (decr a) xs)) =\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a a (x # xs)))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"\\<dots> = (\\<exists>x. \\<forall>a \\<in> set(?as0 @ ?as1). I\\<^sub>a a (x#xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n        (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n            I\\<^sub>a a (x # xs))) =\n    (\\<exists>x.\n        \\<forall>a\\<in>set (filter depends\\<^sub>0 as @\n                            filter (Not \\<circ> depends\\<^sub>0) as).\n           I\\<^sub>a a (x # xs))", "by (simp add:ball_Un)"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a a (x # xs))) =\n  (\\<exists>x.\n      \\<forall>a\\<in>set (filter depends\\<^sub>0 as @\n                          filter (Not \\<circ> depends\\<^sub>0) as).\n         I\\<^sub>a a (x # xs))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a a (x # xs))) =\n  (\\<exists>x.\n      \\<forall>a\\<in>set (filter depends\\<^sub>0 as @\n                          filter (Not \\<circ> depends\\<^sub>0) as).\n         I\\<^sub>a a (x # xs))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"\\<dots> = (\\<exists>x. \\<forall>a \\<in> set(as). I\\<^sub>a a (x#xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        \\<forall>a\\<in>set (filter depends\\<^sub>0 as @\n                            filter (Not \\<circ> depends\\<^sub>0) as).\n           I\\<^sub>a a (x # xs)) =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "by simp blast"], ["proof (state)\nthis:\n  (\\<exists>x.\n      \\<forall>a\\<in>set (filter depends\\<^sub>0 as @\n                          filter (Not \\<circ> depends\\<^sub>0) as).\n         I\\<^sub>a a (x # xs)) =\n  (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       I (qelim qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "finally"], ["proof (chain)\npicking this:\n  I (qelim qe as) xs =\n  (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "show \"?P xs\""], ["proof (prove)\nusing this:\n  I (qelim qe as) xs =\n  (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "."], ["proof (state)\nthis:\n  I (qelim qe as) xs =\n  (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\\noindent The generic DNF-based quantifier elimination procedure:\\<close>"], ["", "fun lift_dnf_qe :: \"('a list \\<Rightarrow> 'a fm) \\<Rightarrow> 'a fm \\<Rightarrow> 'a fm\" where\n\"lift_dnf_qe qe (And \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = and (lift_dnf_qe qe \\<phi>\\<^sub>1) (lift_dnf_qe qe \\<phi>\\<^sub>2)\" |\n\"lift_dnf_qe qe (Or \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = or (lift_dnf_qe qe \\<phi>\\<^sub>1) (lift_dnf_qe qe \\<phi>\\<^sub>2)\" |\n\"lift_dnf_qe qe (Neg \\<phi>) = neg(lift_dnf_qe qe \\<phi>)\" |\n\"lift_dnf_qe qe (ExQ \\<phi>) = Disj (dnf(nnf(lift_dnf_qe qe \\<phi>))) (qelim qe)\" |\n\"lift_dnf_qe qe \\<phi> = \\<phi>\""], ["", "lemma qfree_lift_dnf_qe: \"(\\<And>as. (\\<forall>a\\<in>set as. depends\\<^sub>0 a) \\<Longrightarrow> qfree(qe as))\n \\<Longrightarrow> qfree(lift_dnf_qe qe \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<Longrightarrow>\n        qfree (qe as)) \\<Longrightarrow>\n    qfree (lift_dnf_qe qe \\<phi>)", "by (induct \\<phi>) (simp_all add:qelim_def)"], ["", "lemma qfree_lift_dnf_qe2: \"qe \\<in> lists |depends\\<^sub>0| \\<rightarrow> |qfree|\n \\<Longrightarrow> qfree(lift_dnf_qe qe \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qe \\<in> lists (Collect depends\\<^sub>0) \\<rightarrow>\n             Collect qfree \\<Longrightarrow>\n    qfree (lift_dnf_qe qe \\<phi>)", "using in_lists_conv_set[where ?'a = 'a]"], ["proof (prove)\nusing this:\n  (?xs \\<in> lists ?A) = (\\<forall>x\\<in>set ?xs. x \\<in> ?A)\n\ngoal (1 subgoal):\n 1. qe \\<in> lists (Collect depends\\<^sub>0) \\<rightarrow>\n             Collect qfree \\<Longrightarrow>\n    qfree (lift_dnf_qe qe \\<phi>)", "by (simp add:Pi_def qfree_lift_dnf_qe)"], ["", "lemma lem: \"\\<forall>P A. (\\<exists>x\\<in>A. \\<exists>y. P x y) = (\\<exists>y. \\<exists>x\\<in>A. P x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P A.\n       (\\<exists>x\\<in>A. \\<exists>y. P x y) =\n       (\\<exists>y. \\<exists>x\\<in>A. P x y)", "by blast"], ["", "lemma I_lift_dnf_qe:\nassumes  \"\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a) \\<Longrightarrow> qfree(qe as)\"\nand \"\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a) \\<Longrightarrow> is_dnf_qe qe as\"\nshows \"I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs", "proof(induct \\<phi> arbitrary:xs)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>xs. I (lift_dnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs. I (lift_dnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs. I (lift_dnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_dnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_dnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (And \\<phi>1 \\<phi>2)) xs =\n                         I (And \\<phi>1 \\<phi>2) xs\n 5. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_dnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_dnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (Or \\<phi>1 \\<phi>2)) xs =\n                         I (Or \\<phi>1 \\<phi>2) xs\n 6. \\<And>\\<phi> xs.\n       (\\<And>xs.\n           I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs) \\<Longrightarrow>\n       I (lift_dnf_qe qe (Neg \\<phi>)) xs = I (Neg \\<phi>) xs\n 7. \\<And>\\<phi> xs.\n       (\\<And>xs.\n           I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs) \\<Longrightarrow>\n       I (lift_dnf_qe qe (ExQ \\<phi>)) xs = I (ExQ \\<phi>) xs", "case ExQ"], ["proof (state)\nthis:\n  I (lift_dnf_qe qe \\<phi>_) ?xs = I \\<phi>_ ?xs\n\ngoal (7 subgoals):\n 1. \\<And>xs. I (lift_dnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs. I (lift_dnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs. I (lift_dnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_dnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_dnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (And \\<phi>1 \\<phi>2)) xs =\n                         I (And \\<phi>1 \\<phi>2) xs\n 5. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_dnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_dnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (Or \\<phi>1 \\<phi>2)) xs =\n                         I (Or \\<phi>1 \\<phi>2) xs\n 6. \\<And>\\<phi> xs.\n       (\\<And>xs.\n           I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs) \\<Longrightarrow>\n       I (lift_dnf_qe qe (Neg \\<phi>)) xs = I (Neg \\<phi>) xs\n 7. \\<And>\\<phi> xs.\n       (\\<And>xs.\n           I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs) \\<Longrightarrow>\n       I (lift_dnf_qe qe (ExQ \\<phi>)) xs = I (ExQ \\<phi>) xs", "thus ?case"], ["proof (prove)\nusing this:\n  I (lift_dnf_qe qe \\<phi>_) ?xs = I \\<phi>_ ?xs\n\ngoal (1 subgoal):\n 1. I (lift_dnf_qe qe (ExQ \\<phi>_)) xs = I (ExQ \\<phi>_) xs", "by (simp add: assms I_qelim lem I_dnf nqfree_nnf qfree_lift_dnf_qe\n                  I_nnf)"], ["proof (state)\nthis:\n  I (lift_dnf_qe qe (ExQ \\<phi>_)) xs = I (ExQ \\<phi>_) xs\n\ngoal (6 subgoals):\n 1. \\<And>xs. I (lift_dnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs. I (lift_dnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs. I (lift_dnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_dnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_dnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (And \\<phi>1 \\<phi>2)) xs =\n                         I (And \\<phi>1 \\<phi>2) xs\n 5. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_dnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_dnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (Or \\<phi>1 \\<phi>2)) xs =\n                         I (Or \\<phi>1 \\<phi>2) xs\n 6. \\<And>\\<phi> xs.\n       (\\<And>xs.\n           I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs) \\<Longrightarrow>\n       I (lift_dnf_qe qe (Neg \\<phi>)) xs = I (Neg \\<phi>) xs", "qed simp_all"], ["", "lemma I_lift_dnf_qe2:\nassumes  \"qe \\<in> lists |depends\\<^sub>0| \\<rightarrow> |qfree|\"\nand \"\\<forall>as \\<in> lists |depends\\<^sub>0|. is_dnf_qe qe as\"\nshows \"I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs", "using assms in_lists_conv_set[where ?'a = 'a]"], ["proof (prove)\nusing this:\n  qe \\<in> lists (Collect depends\\<^sub>0) \\<rightarrow> Collect qfree\n  \\<forall>as\\<in>lists (Collect depends\\<^sub>0). is_dnf_qe qe as\n  (?xs \\<in> lists ?A) = (\\<forall>x\\<in>set ?xs. x \\<in> ?A)\n\ngoal (1 subgoal):\n 1. I (lift_dnf_qe qe \\<phi>) xs = I \\<phi> xs", "by(simp add:Pi_def I_lift_dnf_qe)"], ["", "text\\<open>\\noindent Quantifier elimination with invariant (needed for Presburger):\\<close>"], ["", "lemma I_qelim_anormal:\nassumes qe: \"\\<And>xs as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow> is_dnf_qe qe as\"\nand nm: \"\\<forall>a \\<in> set as. anormal a\"\nshows \"I (qelim qe as) xs = (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x#xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "let ?as0 = \"filter depends\\<^sub>0 as\""], ["proof (state)\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "let ?as1 = \"filter (Not \\<circ> depends\\<^sub>0) as\""], ["proof (state)\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"I (qelim qe as) xs =\n        (I (qe ?as0) xs \\<and> (\\<forall>a\\<in>set(map decr ?as1). I\\<^sub>a a xs))\"\n    (is \"_ = (_ \\<and> ?B)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n     (\\<forall>a\\<in>set (map decr\n                           (filter (Not \\<circ> depends\\<^sub>0) as)).\n         I\\<^sub>a a xs))", "by(force simp add:qelim_def)"], ["proof (state)\nthis:\n  I (qelim qe as) xs =\n  (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  I (qelim qe as) xs =\n  (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"\\<dots> = ((\\<exists>x. \\<forall>a \\<in> set ?as0. I\\<^sub>a a (x#xs)) \\<and> ?B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n     (\\<forall>a\\<in>set (map decr\n                           (filter (Not \\<circ> depends\\<^sub>0) as)).\n         I\\<^sub>a a xs)) =\n    ((\\<exists>x.\n         \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n     (\\<forall>a\\<in>set (map decr\n                           (filter (Not \\<circ> depends\\<^sub>0) as)).\n         I\\<^sub>a a xs))", "by(simp add:qe nm not_dep_decr)"], ["proof (state)\nthis:\n  (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs)) =\n  ((\\<exists>x.\n       \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  (I (qe (filter depends\\<^sub>0 as)) xs \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs)) =\n  ((\\<exists>x.\n       \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"\\<dots> = (\\<exists>x. (\\<forall>a \\<in> set ?as0. I\\<^sub>a a (x#xs)) \\<and> ?B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>x.\n         \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n     (\\<forall>a\\<in>set (map decr\n                           (filter (Not \\<circ> depends\\<^sub>0) as)).\n         I\\<^sub>a a xs)) =\n    (\\<exists>x.\n        (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n        (\\<forall>a\\<in>set (map decr\n                              (filter (Not \\<circ> depends\\<^sub>0) as)).\n            I\\<^sub>a a xs))", "by blast"], ["proof (state)\nthis:\n  ((\\<exists>x.\n       \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs)) =\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (map decr\n                            (filter (Not \\<circ> depends\\<^sub>0) as)).\n          I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  ((\\<exists>x.\n       \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n   (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n       I\\<^sub>a a xs)) =\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (map decr\n                            (filter (Not \\<circ> depends\\<^sub>0) as)).\n          I\\<^sub>a a xs))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"?B = (\\<forall>a \\<in> set ?as1. I\\<^sub>a (decr a) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set (map decr\n                          (filter (Not \\<circ> depends\\<^sub>0) as)).\n        I\\<^sub>a a xs) =\n    (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n        I\\<^sub>a (decr a) xs)", "by simp"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n      I\\<^sub>a a xs) =\n  (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n      I\\<^sub>a (decr a) xs)\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  (\\<forall>a\\<in>set (map decr (filter (Not \\<circ> depends\\<^sub>0) as)).\n      I\\<^sub>a a xs) =\n  (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n      I\\<^sub>a (decr a) xs)\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"(\\<exists>x. (\\<forall>a \\<in> set ?as0. I\\<^sub>a a (x#xs)) \\<and> \\<dots>) =\n             (\\<exists>x. (\\<forall>a \\<in> set ?as0. I\\<^sub>a a (x#xs)) \\<and>\n                  (\\<forall>a \\<in> set ?as1. I\\<^sub>a a (x#xs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n        (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n            I\\<^sub>a (decr a) xs)) =\n    (\\<exists>x.\n        (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n        (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n            I\\<^sub>a a (x # xs)))", "by(simp add: not_dep_decr)"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a (decr a) xs)) =\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a a (x # xs)))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a (decr a) xs)) =\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a a (x # xs)))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"\\<dots> = (\\<exists>x. \\<forall>a \\<in> set(?as0 @ ?as1). I\\<^sub>a a (x#xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n            I\\<^sub>a a (x # xs)) \\<and>\n        (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n            I\\<^sub>a a (x # xs))) =\n    (\\<exists>x.\n        \\<forall>a\\<in>set (filter depends\\<^sub>0 as @\n                            filter (Not \\<circ> depends\\<^sub>0) as).\n           I\\<^sub>a a (x # xs))", "by (simp add:ball_Un)"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a a (x # xs))) =\n  (\\<exists>x.\n      \\<forall>a\\<in>set (filter depends\\<^sub>0 as @\n                          filter (Not \\<circ> depends\\<^sub>0) as).\n         I\\<^sub>a a (x # xs))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "also"], ["proof (state)\nthis:\n  (\\<exists>x.\n      (\\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n          I\\<^sub>a a (x # xs)) \\<and>\n      (\\<forall>a\\<in>set (filter (Not \\<circ> depends\\<^sub>0) as).\n          I\\<^sub>a a (x # xs))) =\n  (\\<exists>x.\n      \\<forall>a\\<in>set (filter depends\\<^sub>0 as @\n                          filter (Not \\<circ> depends\\<^sub>0) as).\n         I\\<^sub>a a (x # xs))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"\\<dots> = (\\<exists>x. \\<forall>a \\<in> set(as). I\\<^sub>a a (x#xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x.\n        \\<forall>a\\<in>set (filter depends\\<^sub>0 as @\n                            filter (Not \\<circ> depends\\<^sub>0) as).\n           I\\<^sub>a a (x # xs)) =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "by simp blast"], ["proof (state)\nthis:\n  (\\<exists>x.\n      \\<forall>a\\<in>set (filter depends\\<^sub>0 as @\n                          filter (Not \\<circ> depends\\<^sub>0) as).\n         I\\<^sub>a a (x # xs)) =\n  (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "finally"], ["proof (chain)\npicking this:\n  I (qelim qe as) xs =\n  (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "show ?thesis"], ["proof (prove)\nusing this:\n  I (qelim qe as) xs =\n  (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n\ngoal (1 subgoal):\n 1. I (qelim qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "."], ["proof (state)\nthis:\n  I (qelim qe as) xs =\n  (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "context notes [[simp_depth_limit = 5]]\nbegin"], ["", "lemma anormal_atoms_qelim:\n  \"(\\<And>as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow> normal(qe as)) \\<Longrightarrow>\n   \\<forall>a \\<in> set as. anormal a \\<Longrightarrow> a \\<in> atoms(qelim qe as) \\<Longrightarrow> anormal a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>as.\n                \\<forall>a\\<in>set as.\n                   depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n                normal (qe as);\n     \\<forall>a\\<in>set as. anormal a; a \\<in> atoms (qelim qe as)\\<rbrakk>\n    \\<Longrightarrow> anormal a", "apply(auto simp add:qelim_def and_def normal_def split:if_split_asm)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>as.\n                \\<forall>a\\<in>set as.\n                   depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n                \\<forall>a\\<in>atoms (qe as). anormal a;\n     \\<forall>a\\<in>set as. anormal a;\n     qe (filter depends\\<^sub>0 as) = TrueF;\n     a \\<in> atoms\n              (list_conj\n                (concat\n                  (map (\\<lambda>a.\n                           if \\<not> depends\\<^sub>0 a then [Atom (decr a)]\n                           else [])\n                    as)))\\<rbrakk>\n    \\<Longrightarrow> anormal a\n 2. \\<lbrakk>\\<And>as.\n                \\<forall>a\\<in>set as.\n                   depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n                \\<forall>a\\<in>atoms (qe as). anormal a;\n     \\<forall>a\\<in>set as. anormal a;\n     qe (filter depends\\<^sub>0 as) \\<noteq> TrueF;\n     list_conj\n      (concat\n        (map (\\<lambda>a.\n                 if \\<not> depends\\<^sub>0 a then [Atom (decr a)] else [])\n          as)) =\n     TrueF;\n     a \\<in> atoms (qe (filter depends\\<^sub>0 as))\\<rbrakk>\n    \\<Longrightarrow> anormal a\n 3. \\<lbrakk>list_conj\n              (concat\n                (map (\\<lambda>a.\n                         if \\<not> depends\\<^sub>0 a then [Atom (decr a)]\n                         else [])\n                  as)) \\<noteq>\n             TrueF;\n     \\<And>as.\n        \\<forall>a\\<in>set as.\n           depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n        \\<forall>a\\<in>atoms (qe as). anormal a;\n     \\<forall>a\\<in>set as. anormal a;\n     qe (filter depends\\<^sub>0 as) \\<noteq> TrueF;\n     qe (filter depends\\<^sub>0 as) \\<noteq> FalseF;\n     list_conj\n      (concat\n        (map (\\<lambda>a.\n                 if \\<not> depends\\<^sub>0 a then [Atom (decr a)] else [])\n          as)) \\<noteq>\n     FalseF;\n     a \\<in> atoms (qe (filter depends\\<^sub>0 as))\\<rbrakk>\n    \\<Longrightarrow> anormal a\n 4. \\<lbrakk>list_conj\n              (concat\n                (map (\\<lambda>a.\n                         if \\<not> depends\\<^sub>0 a then [Atom (decr a)]\n                         else [])\n                  as)) \\<noteq>\n             TrueF;\n     \\<And>as.\n        \\<forall>a\\<in>set as.\n           depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n        \\<forall>a\\<in>atoms (qe as). anormal a;\n     \\<forall>a\\<in>set as. anormal a;\n     qe (filter depends\\<^sub>0 as) \\<noteq> TrueF;\n     qe (filter depends\\<^sub>0 as) \\<noteq> FalseF;\n     list_conj\n      (concat\n        (map (\\<lambda>a.\n                 if \\<not> depends\\<^sub>0 a then [Atom (decr a)] else [])\n          as)) \\<noteq>\n     FalseF;\n     a \\<in> atoms\n              (list_conj\n                (concat\n                  (map (\\<lambda>a.\n                           if \\<not> depends\\<^sub>0 a then [Atom (decr a)]\n                           else [])\n                    as)))\\<rbrakk>\n    \\<Longrightarrow> anormal a", "apply(auto simp add:anormal_decr dest!: atoms_list_conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>as.\n                \\<forall>a\\<in>set as.\n                   depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n                \\<forall>a\\<in>atoms (qe as). anormal a;\n     \\<forall>a\\<in>set as. anormal a;\n     qe (filter depends\\<^sub>0 as) \\<noteq> TrueF;\n     list_conj\n      (concat\n        (map (\\<lambda>a.\n                 if \\<not> depends\\<^sub>0 a then [Atom (decr a)] else [])\n          as)) =\n     TrueF;\n     a \\<in> atoms (qe (filter depends\\<^sub>0 as))\\<rbrakk>\n    \\<Longrightarrow> anormal a\n 2. \\<lbrakk>list_conj\n              (concat\n                (map (\\<lambda>a.\n                         if \\<not> depends\\<^sub>0 a then [Atom (decr a)]\n                         else [])\n                  as)) \\<noteq>\n             TrueF;\n     \\<And>as.\n        \\<forall>a\\<in>set as.\n           depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n        \\<forall>a\\<in>atoms (qe as). anormal a;\n     \\<forall>a\\<in>set as. anormal a;\n     qe (filter depends\\<^sub>0 as) \\<noteq> TrueF;\n     qe (filter depends\\<^sub>0 as) \\<noteq> FalseF;\n     list_conj\n      (concat\n        (map (\\<lambda>a.\n                 if \\<not> depends\\<^sub>0 a then [Atom (decr a)] else [])\n          as)) \\<noteq>\n     FalseF;\n     a \\<in> atoms (qe (filter depends\\<^sub>0 as))\\<rbrakk>\n    \\<Longrightarrow> anormal a", "apply(erule_tac x = \"filter depends\\<^sub>0 as\" in meta_allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>a\\<in>set as. anormal a;\n     qe (filter depends\\<^sub>0 as) \\<noteq> TrueF;\n     list_conj\n      (concat\n        (map (\\<lambda>a.\n                 if \\<not> depends\\<^sub>0 a then [Atom (decr a)] else [])\n          as)) =\n     TrueF;\n     a \\<in> atoms (qe (filter depends\\<^sub>0 as));\n     \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n        depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n     \\<forall>a\\<in>atoms (qe (filter depends\\<^sub>0 as)).\n        anormal a\\<rbrakk>\n    \\<Longrightarrow> anormal a\n 2. \\<lbrakk>list_conj\n              (concat\n                (map (\\<lambda>a.\n                         if \\<not> depends\\<^sub>0 a then [Atom (decr a)]\n                         else [])\n                  as)) \\<noteq>\n             TrueF;\n     \\<And>as.\n        \\<forall>a\\<in>set as.\n           depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n        \\<forall>a\\<in>atoms (qe as). anormal a;\n     \\<forall>a\\<in>set as. anormal a;\n     qe (filter depends\\<^sub>0 as) \\<noteq> TrueF;\n     qe (filter depends\\<^sub>0 as) \\<noteq> FalseF;\n     list_conj\n      (concat\n        (map (\\<lambda>a.\n                 if \\<not> depends\\<^sub>0 a then [Atom (decr a)] else [])\n          as)) \\<noteq>\n     FalseF;\n     a \\<in> atoms (qe (filter depends\\<^sub>0 as))\\<rbrakk>\n    \\<Longrightarrow> anormal a", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_conj\n              (concat\n                (map (\\<lambda>a.\n                         if \\<not> depends\\<^sub>0 a then [Atom (decr a)]\n                         else [])\n                  as)) \\<noteq>\n             TrueF;\n     \\<And>as.\n        \\<forall>a\\<in>set as.\n           depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n        \\<forall>a\\<in>atoms (qe as). anormal a;\n     \\<forall>a\\<in>set as. anormal a;\n     qe (filter depends\\<^sub>0 as) \\<noteq> TrueF;\n     qe (filter depends\\<^sub>0 as) \\<noteq> FalseF;\n     list_conj\n      (concat\n        (map (\\<lambda>a.\n                 if \\<not> depends\\<^sub>0 a then [Atom (decr a)] else [])\n          as)) \\<noteq>\n     FalseF;\n     a \\<in> atoms (qe (filter depends\\<^sub>0 as))\\<rbrakk>\n    \\<Longrightarrow> anormal a", "apply(erule_tac x = \"filter depends\\<^sub>0 as\" in meta_allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_conj\n              (concat\n                (map (\\<lambda>a.\n                         if \\<not> depends\\<^sub>0 a then [Atom (decr a)]\n                         else [])\n                  as)) \\<noteq>\n             TrueF;\n     \\<forall>a\\<in>set as. anormal a;\n     qe (filter depends\\<^sub>0 as) \\<noteq> TrueF;\n     qe (filter depends\\<^sub>0 as) \\<noteq> FalseF;\n     list_conj\n      (concat\n        (map (\\<lambda>a.\n                 if \\<not> depends\\<^sub>0 a then [Atom (decr a)] else [])\n          as)) \\<noteq>\n     FalseF;\n     a \\<in> atoms (qe (filter depends\\<^sub>0 as));\n     \\<forall>a\\<in>set (filter depends\\<^sub>0 as).\n        depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n     \\<forall>a\\<in>atoms (qe (filter depends\\<^sub>0 as)).\n        anormal a\\<rbrakk>\n    \\<Longrightarrow> anormal a", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma normal_lift_dnf_qe:\nassumes \"\\<And>as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<Longrightarrow> qfree(qe as)\"\nand \"\\<And>as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow> normal(qe as)\"\nshows  \"normal \\<phi> \\<Longrightarrow> normal(lift_dnf_qe qe \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal \\<phi> \\<Longrightarrow> normal (lift_dnf_qe qe \\<phi>)", "proof(simp add:normal_def, induct \\<phi>)"], ["proof (state)\ngoal (7 subgoals):\n 1. Ball (atoms TrueF) anormal \\<Longrightarrow>\n    Ball (atoms (lift_dnf_qe qe TrueF)) anormal\n 2. Ball (atoms FalseF) anormal \\<Longrightarrow>\n    Ball (atoms (lift_dnf_qe qe FalseF)) anormal\n 3. \\<And>x.\n       Ball (atoms (Atom x)) anormal \\<Longrightarrow>\n       Ball (atoms (lift_dnf_qe qe (Atom x))) anormal\n 4. \\<And>\\<phi>1 \\<phi>2.\n       \\<lbrakk>Ball (atoms \\<phi>1) anormal \\<Longrightarrow>\n                Ball (atoms (lift_dnf_qe qe \\<phi>1)) anormal;\n        Ball (atoms \\<phi>2) anormal \\<Longrightarrow>\n        Ball (atoms (lift_dnf_qe qe \\<phi>2)) anormal;\n        Ball (atoms (And \\<phi>1 \\<phi>2)) anormal\\<rbrakk>\n       \\<Longrightarrow> Ball (atoms (lift_dnf_qe qe (And \\<phi>1 \\<phi>2)))\n                          anormal\n 5. \\<And>\\<phi>1 \\<phi>2.\n       \\<lbrakk>Ball (atoms \\<phi>1) anormal \\<Longrightarrow>\n                Ball (atoms (lift_dnf_qe qe \\<phi>1)) anormal;\n        Ball (atoms \\<phi>2) anormal \\<Longrightarrow>\n        Ball (atoms (lift_dnf_qe qe \\<phi>2)) anormal;\n        Ball (atoms (Or \\<phi>1 \\<phi>2)) anormal\\<rbrakk>\n       \\<Longrightarrow> Ball (atoms (lift_dnf_qe qe (Or \\<phi>1 \\<phi>2)))\n                          anormal\n 6. \\<And>\\<phi>.\n       \\<lbrakk>Ball (atoms \\<phi>) anormal \\<Longrightarrow>\n                Ball (atoms (lift_dnf_qe qe \\<phi>)) anormal;\n        Ball (atoms (Neg \\<phi>)) anormal\\<rbrakk>\n       \\<Longrightarrow> Ball (atoms (lift_dnf_qe qe (Neg \\<phi>))) anormal\n 7. \\<And>\\<phi>.\n       \\<lbrakk>Ball (atoms \\<phi>) anormal \\<Longrightarrow>\n                Ball (atoms (lift_dnf_qe qe \\<phi>)) anormal;\n        Ball (atoms (ExQ \\<phi>)) anormal\\<rbrakk>\n       \\<Longrightarrow> Ball (atoms (lift_dnf_qe qe (ExQ \\<phi>))) anormal", "case ExQ"], ["proof (state)\nthis:\n  \\<forall>a\\<in>atoms \\<phi>_. anormal a \\<Longrightarrow>\n  \\<forall>a\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal a\n  \\<forall>a\\<in>atoms (ExQ \\<phi>_). anormal a\n\ngoal (7 subgoals):\n 1. Ball (atoms TrueF) anormal \\<Longrightarrow>\n    Ball (atoms (lift_dnf_qe qe TrueF)) anormal\n 2. Ball (atoms FalseF) anormal \\<Longrightarrow>\n    Ball (atoms (lift_dnf_qe qe FalseF)) anormal\n 3. \\<And>x.\n       Ball (atoms (Atom x)) anormal \\<Longrightarrow>\n       Ball (atoms (lift_dnf_qe qe (Atom x))) anormal\n 4. \\<And>\\<phi>1 \\<phi>2.\n       \\<lbrakk>Ball (atoms \\<phi>1) anormal \\<Longrightarrow>\n                Ball (atoms (lift_dnf_qe qe \\<phi>1)) anormal;\n        Ball (atoms \\<phi>2) anormal \\<Longrightarrow>\n        Ball (atoms (lift_dnf_qe qe \\<phi>2)) anormal;\n        Ball (atoms (And \\<phi>1 \\<phi>2)) anormal\\<rbrakk>\n       \\<Longrightarrow> Ball (atoms (lift_dnf_qe qe (And \\<phi>1 \\<phi>2)))\n                          anormal\n 5. \\<And>\\<phi>1 \\<phi>2.\n       \\<lbrakk>Ball (atoms \\<phi>1) anormal \\<Longrightarrow>\n                Ball (atoms (lift_dnf_qe qe \\<phi>1)) anormal;\n        Ball (atoms \\<phi>2) anormal \\<Longrightarrow>\n        Ball (atoms (lift_dnf_qe qe \\<phi>2)) anormal;\n        Ball (atoms (Or \\<phi>1 \\<phi>2)) anormal\\<rbrakk>\n       \\<Longrightarrow> Ball (atoms (lift_dnf_qe qe (Or \\<phi>1 \\<phi>2)))\n                          anormal\n 6. \\<And>\\<phi>.\n       \\<lbrakk>Ball (atoms \\<phi>) anormal \\<Longrightarrow>\n                Ball (atoms (lift_dnf_qe qe \\<phi>)) anormal;\n        Ball (atoms (Neg \\<phi>)) anormal\\<rbrakk>\n       \\<Longrightarrow> Ball (atoms (lift_dnf_qe qe (Neg \\<phi>))) anormal\n 7. \\<And>\\<phi>.\n       \\<lbrakk>Ball (atoms \\<phi>) anormal \\<Longrightarrow>\n                Ball (atoms (lift_dnf_qe qe \\<phi>)) anormal;\n        Ball (atoms (ExQ \\<phi>)) anormal\\<rbrakk>\n       \\<Longrightarrow> Ball (atoms (lift_dnf_qe qe (ExQ \\<phi>))) anormal", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>atoms \\<phi>_. anormal a \\<Longrightarrow>\n  \\<forall>a\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal a\n  \\<forall>a\\<in>atoms (ExQ \\<phi>_). anormal a\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>atoms (lift_dnf_qe qe (ExQ \\<phi>_)). anormal a", "apply (auto dest!: atoms_list_disjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>x\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal x;\n        \\<forall>x\\<in>atoms \\<phi>_. anormal x;\n        x \\<in> atoms (qelim qe xa);\n        xa \\<in> set (dnf (nnf (lift_dnf_qe qe \\<phi>_)))\\<rbrakk>\n       \\<Longrightarrow> anormal x", "apply(rule anormal_atoms_qelim)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa as.\n       \\<lbrakk>\\<forall>x\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal x;\n        \\<forall>x\\<in>atoms \\<phi>_. anormal x;\n        x \\<in> atoms (qelim qe xa);\n        xa \\<in> set (dnf (nnf (lift_dnf_qe qe \\<phi>_)));\n        \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<and> anormal a\\<rbrakk>\n       \\<Longrightarrow> normal (?qe14 x xa as)\n 2. \\<And>x xa.\n       \\<lbrakk>\\<forall>x\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal x;\n        \\<forall>x\\<in>atoms \\<phi>_. anormal x;\n        x \\<in> atoms (qelim qe xa);\n        xa \\<in> set (dnf (nnf (lift_dnf_qe qe \\<phi>_)))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set (?as14 x xa). anormal a\n 3. \\<And>x xa.\n       \\<lbrakk>\\<forall>x\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal x;\n        \\<forall>x\\<in>atoms \\<phi>_. anormal x;\n        x \\<in> atoms (qelim qe xa);\n        xa \\<in> set (dnf (nnf (lift_dnf_qe qe \\<phi>_)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> atoms (qelim (?qe14 x xa) (?as14 x xa))", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>x\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal x;\n        \\<forall>x\\<in>atoms \\<phi>_. anormal x;\n        x \\<in> atoms (qelim qe xa);\n        xa \\<in> set (dnf (nnf (lift_dnf_qe qe \\<phi>_)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> atoms (qelim (?qe14 x xa) (?as14 x xa))\n 2. \\<And>x xa as.\n       \\<lbrakk>\\<forall>x\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal x;\n        \\<forall>x\\<in>atoms \\<phi>_. anormal x;\n        x \\<in> atoms (qelim qe xa);\n        xa \\<in> set (dnf (nnf (lift_dnf_qe qe \\<phi>_)));\n        \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<and> anormal a\\<rbrakk>\n       \\<Longrightarrow> normal (?qe14 x xa as)\n 3. \\<And>x xa.\n       \\<lbrakk>\\<forall>x\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal x;\n        \\<forall>x\\<in>atoms \\<phi>_. anormal x;\n        x \\<in> atoms (qelim qe xa);\n        xa \\<in> set (dnf (nnf (lift_dnf_qe qe \\<phi>_)))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set (?as14 x xa). anormal a", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa as.\n       \\<lbrakk>\\<forall>x\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal x;\n        \\<forall>x\\<in>atoms \\<phi>_. anormal x;\n        x \\<in> atoms (qelim qe xa);\n        xa \\<in> set (dnf (nnf (lift_dnf_qe qe \\<phi>_)));\n        \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<and> anormal a\\<rbrakk>\n       \\<Longrightarrow> normal (qe as)\n 2. \\<And>x xa.\n       \\<lbrakk>\\<forall>x\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal x;\n        \\<forall>x\\<in>atoms \\<phi>_. anormal x;\n        x \\<in> atoms (qelim qe xa);\n        xa \\<in> set (dnf (nnf (lift_dnf_qe qe \\<phi>_)))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set xa. anormal a", "apply(simp add:assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>x\\<in>atoms (lift_dnf_qe qe \\<phi>_). anormal x;\n        \\<forall>x\\<in>atoms \\<phi>_. anormal x;\n        x \\<in> atoms (qelim qe xa);\n        xa \\<in> set (dnf (nnf (lift_dnf_qe qe \\<phi>_)))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set xa. anormal a", "apply (simp add:normal_def qfree_lift_dnf_qe anormal_dnf_nnf assms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>a\\<in>atoms (lift_dnf_qe qe (ExQ \\<phi>_)). anormal a\n\ngoal (6 subgoals):\n 1. Ball (atoms TrueF) anormal \\<Longrightarrow>\n    Ball (atoms (lift_dnf_qe qe TrueF)) anormal\n 2. Ball (atoms FalseF) anormal \\<Longrightarrow>\n    Ball (atoms (lift_dnf_qe qe FalseF)) anormal\n 3. \\<And>x.\n       Ball (atoms (Atom x)) anormal \\<Longrightarrow>\n       Ball (atoms (lift_dnf_qe qe (Atom x))) anormal\n 4. \\<And>\\<phi>1 \\<phi>2.\n       \\<lbrakk>Ball (atoms \\<phi>1) anormal \\<Longrightarrow>\n                Ball (atoms (lift_dnf_qe qe \\<phi>1)) anormal;\n        Ball (atoms \\<phi>2) anormal \\<Longrightarrow>\n        Ball (atoms (lift_dnf_qe qe \\<phi>2)) anormal;\n        Ball (atoms (And \\<phi>1 \\<phi>2)) anormal\\<rbrakk>\n       \\<Longrightarrow> Ball (atoms (lift_dnf_qe qe (And \\<phi>1 \\<phi>2)))\n                          anormal\n 5. \\<And>\\<phi>1 \\<phi>2.\n       \\<lbrakk>Ball (atoms \\<phi>1) anormal \\<Longrightarrow>\n                Ball (atoms (lift_dnf_qe qe \\<phi>1)) anormal;\n        Ball (atoms \\<phi>2) anormal \\<Longrightarrow>\n        Ball (atoms (lift_dnf_qe qe \\<phi>2)) anormal;\n        Ball (atoms (Or \\<phi>1 \\<phi>2)) anormal\\<rbrakk>\n       \\<Longrightarrow> Ball (atoms (lift_dnf_qe qe (Or \\<phi>1 \\<phi>2)))\n                          anormal\n 6. \\<And>\\<phi>.\n       \\<lbrakk>Ball (atoms \\<phi>) anormal \\<Longrightarrow>\n                Ball (atoms (lift_dnf_qe qe \\<phi>)) anormal;\n        Ball (atoms (Neg \\<phi>)) anormal\\<rbrakk>\n       \\<Longrightarrow> Ball (atoms (lift_dnf_qe qe (Neg \\<phi>))) anormal", "qed (simp_all add:and_def or_def neg_def Ball_def)"], ["", "end"], ["", "context notes [[simp_depth_limit = 9]]\nbegin"], ["", "lemma I_lift_dnf_qe_anormal:\nassumes \"\\<And>as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<Longrightarrow> qfree(qe as)\"\nand \"\\<And>as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow> normal(qe as)\"\nand \"\\<And>xs as. \\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow> is_dnf_qe qe as\"\nshows \"normal f \\<Longrightarrow> I (lift_dnf_qe qe f) xs = I f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal f \\<Longrightarrow> I (lift_dnf_qe qe f) xs = I f xs", "proof(induct f arbitrary:xs)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>xs.\n       normal TrueF \\<Longrightarrow>\n       I (lift_dnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs.\n       normal FalseF \\<Longrightarrow>\n       I (lift_dnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs.\n       normal (Atom x) \\<Longrightarrow>\n       I (lift_dnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>f1 f2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal f1 \\<Longrightarrow>\n                   I (lift_dnf_qe qe f1) xs = I f1 xs;\n        \\<And>xs.\n           normal f2 \\<Longrightarrow> I (lift_dnf_qe qe f2) xs = I f2 xs;\n        normal (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (And f1 f2)) xs =\n                         I (And f1 f2) xs\n 5. \\<And>f1 f2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal f1 \\<Longrightarrow>\n                   I (lift_dnf_qe qe f1) xs = I f1 xs;\n        \\<And>xs.\n           normal f2 \\<Longrightarrow> I (lift_dnf_qe qe f2) xs = I f2 xs;\n        normal (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (Or f1 f2)) xs = I (Or f1 f2) xs\n 6. \\<And>f xs.\n       \\<lbrakk>\\<And>xs.\n                   normal f \\<Longrightarrow>\n                   I (lift_dnf_qe qe f) xs = I f xs;\n        normal (Neg f)\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (Neg f)) xs = I (Neg f) xs\n 7. \\<And>f xs.\n       \\<lbrakk>\\<And>xs.\n                   normal f \\<Longrightarrow>\n                   I (lift_dnf_qe qe f) xs = I f xs;\n        normal (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (ExQ f)) xs = I (ExQ f) xs", "case ExQ"], ["proof (state)\nthis:\n  normal f_ \\<Longrightarrow> I (lift_dnf_qe qe f_) ?xs = I f_ ?xs\n  normal (ExQ f_)\n\ngoal (7 subgoals):\n 1. \\<And>xs.\n       normal TrueF \\<Longrightarrow>\n       I (lift_dnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs.\n       normal FalseF \\<Longrightarrow>\n       I (lift_dnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs.\n       normal (Atom x) \\<Longrightarrow>\n       I (lift_dnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>f1 f2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal f1 \\<Longrightarrow>\n                   I (lift_dnf_qe qe f1) xs = I f1 xs;\n        \\<And>xs.\n           normal f2 \\<Longrightarrow> I (lift_dnf_qe qe f2) xs = I f2 xs;\n        normal (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (And f1 f2)) xs =\n                         I (And f1 f2) xs\n 5. \\<And>f1 f2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal f1 \\<Longrightarrow>\n                   I (lift_dnf_qe qe f1) xs = I f1 xs;\n        \\<And>xs.\n           normal f2 \\<Longrightarrow> I (lift_dnf_qe qe f2) xs = I f2 xs;\n        normal (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (Or f1 f2)) xs = I (Or f1 f2) xs\n 6. \\<And>f xs.\n       \\<lbrakk>\\<And>xs.\n                   normal f \\<Longrightarrow>\n                   I (lift_dnf_qe qe f) xs = I f xs;\n        normal (Neg f)\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (Neg f)) xs = I (Neg f) xs\n 7. \\<And>f xs.\n       \\<lbrakk>\\<And>xs.\n                   normal f \\<Longrightarrow>\n                   I (lift_dnf_qe qe f) xs = I f xs;\n        normal (ExQ f)\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (ExQ f)) xs = I (ExQ f) xs", "thus ?case"], ["proof (prove)\nusing this:\n  normal f_ \\<Longrightarrow> I (lift_dnf_qe qe f_) ?xs = I f_ ?xs\n  normal (ExQ f_)\n\ngoal (1 subgoal):\n 1. I (lift_dnf_qe qe (ExQ f_)) xs = I (ExQ f_) xs", "using normal_lift_dnf_qe[of qe]"], ["proof (prove)\nusing this:\n  normal f_ \\<Longrightarrow> I (lift_dnf_qe qe f_) ?xs = I f_ ?xs\n  normal (ExQ f_)\n  \\<lbrakk>\\<And>as.\n              \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<Longrightarrow>\n              qfree (qe as);\n   \\<And>as.\n      \\<forall>a\\<in>set as.\n         depends\\<^sub>0 a \\<and> anormal a \\<Longrightarrow>\n      normal (qe as);\n   normal ?\\<phi>\\<rbrakk>\n  \\<Longrightarrow> normal (lift_dnf_qe qe ?\\<phi>)\n\ngoal (1 subgoal):\n 1. I (lift_dnf_qe qe (ExQ f_)) xs = I (ExQ f_) xs", "by (simp add: assms[simplified normal_def] anormal_dnf_nnf I_qelim_anormal lem I_dnf nqfree_nnf qfree_lift_dnf_qe I_nnf normal_def)"], ["proof (state)\nthis:\n  I (lift_dnf_qe qe (ExQ f_)) xs = I (ExQ f_) xs\n\ngoal (6 subgoals):\n 1. \\<And>xs.\n       normal TrueF \\<Longrightarrow>\n       I (lift_dnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs.\n       normal FalseF \\<Longrightarrow>\n       I (lift_dnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs.\n       normal (Atom x) \\<Longrightarrow>\n       I (lift_dnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>f1 f2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal f1 \\<Longrightarrow>\n                   I (lift_dnf_qe qe f1) xs = I f1 xs;\n        \\<And>xs.\n           normal f2 \\<Longrightarrow> I (lift_dnf_qe qe f2) xs = I f2 xs;\n        normal (And f1 f2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (And f1 f2)) xs =\n                         I (And f1 f2) xs\n 5. \\<And>f1 f2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal f1 \\<Longrightarrow>\n                   I (lift_dnf_qe qe f1) xs = I f1 xs;\n        \\<And>xs.\n           normal f2 \\<Longrightarrow> I (lift_dnf_qe qe f2) xs = I f2 xs;\n        normal (Or f1 f2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (Or f1 f2)) xs = I (Or f1 f2) xs\n 6. \\<And>f xs.\n       \\<lbrakk>\\<And>xs.\n                   normal f \\<Longrightarrow>\n                   I (lift_dnf_qe qe f) xs = I f xs;\n        normal (Neg f)\\<rbrakk>\n       \\<Longrightarrow> I (lift_dnf_qe qe (Neg f)) xs = I (Neg f) xs", "qed (simp_all add:normal_def)"], ["", "end"], ["", "lemma I_lift_dnf_qe_anormal2:\nassumes \"qe \\<in> lists |depends\\<^sub>0| \\<rightarrow> |qfree|\"\nand \"qe \\<in> lists ( |depends\\<^sub>0| \\<inter> |anormal| ) \\<rightarrow> |normal|\"\nand \"\\<forall>as \\<in> lists( |depends\\<^sub>0| \\<inter> |anormal| ). is_dnf_qe qe as\"\nshows \"normal f \\<Longrightarrow> I (lift_dnf_qe qe f) xs = I f xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal f \\<Longrightarrow> I (lift_dnf_qe qe f) xs = I f xs", "using assms in_lists_conv_set[where ?'a = 'a]"], ["proof (prove)\nusing this:\n  qe \\<in> lists (Collect depends\\<^sub>0) \\<rightarrow> Collect qfree\n  qe \\<in> lists\n            (Collect depends\\<^sub>0 \\<inter> Collect anormal) \\<rightarrow>\n           Collect normal\n  \\<forall>as\\<in>lists (Collect depends\\<^sub>0 \\<inter> Collect anormal).\n     is_dnf_qe qe as\n  (?xs \\<in> lists ?A) = (\\<forall>x\\<in>set ?xs. x \\<in> ?A)\n\ngoal (1 subgoal):\n 1. normal f \\<Longrightarrow> I (lift_dnf_qe qe f) xs = I f xs", "by(simp add:Pi_def I_lift_dnf_qe_anormal Int_def)"], ["", "subsubsection\\<open>NNF-based\\<close>"], ["", "fun lift_nnf_qe :: \"('a fm \\<Rightarrow> 'a fm) \\<Rightarrow> 'a fm \\<Rightarrow> 'a fm\" where\n\"lift_nnf_qe qe (And \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = and (lift_nnf_qe qe \\<phi>\\<^sub>1) (lift_nnf_qe qe \\<phi>\\<^sub>2)\" |\n\"lift_nnf_qe qe (Or \\<phi>\\<^sub>1 \\<phi>\\<^sub>2) = or (lift_nnf_qe qe \\<phi>\\<^sub>1) (lift_nnf_qe qe \\<phi>\\<^sub>2)\" |\n\"lift_nnf_qe qe (Neg \\<phi>) = neg(lift_nnf_qe qe \\<phi>)\" |\n\"lift_nnf_qe qe (ExQ \\<phi>) = qe(nnf(lift_nnf_qe qe \\<phi>))\" |\n\"lift_nnf_qe qe \\<phi> = \\<phi>\""], ["", "lemma qfree_lift_nnf_qe: \"(\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> qfree(qe \\<phi>))\n \\<Longrightarrow> qfree(lift_nnf_qe qe \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>.\n        nqfree \\<phi> \\<Longrightarrow> qfree (qe \\<phi>)) \\<Longrightarrow>\n    qfree (lift_nnf_qe qe \\<phi>)", "by (induct \\<phi>) (simp_all add:nqfree_nnf)"], ["", "lemma qfree_lift_nnf_qe2:\n  \"qe \\<in> |nqfree| \\<rightarrow> |qfree| \\<Longrightarrow> qfree(lift_nnf_qe qe \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qe \\<in> Collect nqfree \\<rightarrow> Collect qfree \\<Longrightarrow>\n    qfree (lift_nnf_qe qe \\<phi>)", "by(simp add:Pi_def qfree_lift_nnf_qe)"], ["", "lemma I_lift_nnf_qe:\nassumes  \"\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> qfree(qe \\<phi>)\"\nand \"\\<And>xs \\<phi>. nqfree \\<phi> \\<Longrightarrow> I (qe \\<phi>) xs = (\\<exists>x. I \\<phi> (x#xs))\"\nshows \"I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs", "proof(induct \"\\<phi>\" arbitrary:xs)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>xs. I (lift_nnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs. I (lift_nnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs. I (lift_nnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (And \\<phi>1 \\<phi>2)) xs =\n                         I (And \\<phi>1 \\<phi>2) xs\n 5. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (Or \\<phi>1 \\<phi>2)) xs =\n                         I (Or \\<phi>1 \\<phi>2) xs\n 6. \\<And>\\<phi> xs.\n       (\\<And>xs.\n           I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs) \\<Longrightarrow>\n       I (lift_nnf_qe qe (Neg \\<phi>)) xs = I (Neg \\<phi>) xs\n 7. \\<And>\\<phi> xs.\n       (\\<And>xs.\n           I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs) \\<Longrightarrow>\n       I (lift_nnf_qe qe (ExQ \\<phi>)) xs = I (ExQ \\<phi>) xs", "case ExQ"], ["proof (state)\nthis:\n  I (lift_nnf_qe qe \\<phi>_) ?xs = I \\<phi>_ ?xs\n\ngoal (7 subgoals):\n 1. \\<And>xs. I (lift_nnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs. I (lift_nnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs. I (lift_nnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (And \\<phi>1 \\<phi>2)) xs =\n                         I (And \\<phi>1 \\<phi>2) xs\n 5. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (Or \\<phi>1 \\<phi>2)) xs =\n                         I (Or \\<phi>1 \\<phi>2) xs\n 6. \\<And>\\<phi> xs.\n       (\\<And>xs.\n           I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs) \\<Longrightarrow>\n       I (lift_nnf_qe qe (Neg \\<phi>)) xs = I (Neg \\<phi>) xs\n 7. \\<And>\\<phi> xs.\n       (\\<And>xs.\n           I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs) \\<Longrightarrow>\n       I (lift_nnf_qe qe (ExQ \\<phi>)) xs = I (ExQ \\<phi>) xs", "thus ?case"], ["proof (prove)\nusing this:\n  I (lift_nnf_qe qe \\<phi>_) ?xs = I \\<phi>_ ?xs\n\ngoal (1 subgoal):\n 1. I (lift_nnf_qe qe (ExQ \\<phi>_)) xs = I (ExQ \\<phi>_) xs", "by (simp add: assms nqfree_nnf qfree_lift_nnf_qe I_nnf)"], ["proof (state)\nthis:\n  I (lift_nnf_qe qe (ExQ \\<phi>_)) xs = I (ExQ \\<phi>_) xs\n\ngoal (6 subgoals):\n 1. \\<And>xs. I (lift_nnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs. I (lift_nnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs. I (lift_nnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (And \\<phi>1 \\<phi>2)) xs =\n                         I (And \\<phi>1 \\<phi>2) xs\n 5. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs. I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs. I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (Or \\<phi>1 \\<phi>2)) xs =\n                         I (Or \\<phi>1 \\<phi>2) xs\n 6. \\<And>\\<phi> xs.\n       (\\<And>xs.\n           I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs) \\<Longrightarrow>\n       I (lift_nnf_qe qe (Neg \\<phi>)) xs = I (Neg \\<phi>) xs", "qed simp_all"], ["", "lemma I_lift_nnf_qe2:\nassumes  \"qe \\<in> |nqfree| \\<rightarrow> |qfree|\"\nand \"\\<forall>\\<phi> \\<in> |nqfree|. \\<forall>xs. I (qe \\<phi>) xs = (\\<exists>x. I \\<phi> (x#xs))\"\nshows \"I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs", "using assms"], ["proof (prove)\nusing this:\n  qe \\<in> Collect nqfree \\<rightarrow> Collect qfree\n  \\<forall>\\<phi>\\<in>Collect nqfree.\n     \\<forall>xs. I (qe \\<phi>) xs = (\\<exists>x. I \\<phi> (x # xs))\n\ngoal (1 subgoal):\n 1. I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs", "by(simp add:Pi_def I_lift_nnf_qe)"], ["", "lemma normal_lift_nnf_qe:\nassumes \"\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> qfree(qe \\<phi>)\"\nand     \"\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> normal \\<phi> \\<Longrightarrow> normal(qe \\<phi>)\"\nshows \"normal \\<phi> \\<Longrightarrow> normal(lift_nnf_qe qe \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal \\<phi> \\<Longrightarrow> normal (lift_nnf_qe qe \\<phi>)", "by (induct \\<phi>)\n   (simp_all add: assms Logic.neg_def normal_nnf\n                  nqfree_nnf qfree_lift_nnf_qe)"], ["", "lemma I_lift_nnf_qe_normal:\nassumes  \"\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> qfree(qe \\<phi>)\"\nand \"\\<And>\\<phi>. nqfree \\<phi> \\<Longrightarrow> normal \\<phi> \\<Longrightarrow> normal(qe \\<phi>)\"\nand \"\\<And>xs \\<phi>. normal \\<phi> \\<Longrightarrow> nqfree \\<phi> \\<Longrightarrow> I (qe \\<phi>) xs = (\\<exists>x. I \\<phi> (x#xs))\"\nshows \"normal \\<phi> \\<Longrightarrow> I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal \\<phi> \\<Longrightarrow>\n    I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs", "proof(induct \"\\<phi>\" arbitrary:xs)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>xs.\n       normal TrueF \\<Longrightarrow>\n       I (lift_nnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs.\n       normal FalseF \\<Longrightarrow>\n       I (lift_nnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs.\n       normal (Atom x) \\<Longrightarrow>\n       I (lift_nnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal \\<phi>1 \\<Longrightarrow>\n                   I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs.\n           normal \\<phi>2 \\<Longrightarrow>\n           I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs;\n        normal (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (And \\<phi>1 \\<phi>2)) xs =\n                         I (And \\<phi>1 \\<phi>2) xs\n 5. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal \\<phi>1 \\<Longrightarrow>\n                   I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs.\n           normal \\<phi>2 \\<Longrightarrow>\n           I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs;\n        normal (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (Or \\<phi>1 \\<phi>2)) xs =\n                         I (Or \\<phi>1 \\<phi>2) xs\n 6. \\<And>\\<phi> xs.\n       \\<lbrakk>\\<And>xs.\n                   normal \\<phi> \\<Longrightarrow>\n                   I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs;\n        normal (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (Neg \\<phi>)) xs =\n                         I (Neg \\<phi>) xs\n 7. \\<And>\\<phi> xs.\n       \\<lbrakk>\\<And>xs.\n                   normal \\<phi> \\<Longrightarrow>\n                   I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs;\n        normal (ExQ \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (ExQ \\<phi>)) xs =\n                         I (ExQ \\<phi>) xs", "case ExQ"], ["proof (state)\nthis:\n  normal \\<phi>_ \\<Longrightarrow>\n  I (lift_nnf_qe qe \\<phi>_) ?xs = I \\<phi>_ ?xs\n  normal (ExQ \\<phi>_)\n\ngoal (7 subgoals):\n 1. \\<And>xs.\n       normal TrueF \\<Longrightarrow>\n       I (lift_nnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs.\n       normal FalseF \\<Longrightarrow>\n       I (lift_nnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs.\n       normal (Atom x) \\<Longrightarrow>\n       I (lift_nnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal \\<phi>1 \\<Longrightarrow>\n                   I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs.\n           normal \\<phi>2 \\<Longrightarrow>\n           I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs;\n        normal (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (And \\<phi>1 \\<phi>2)) xs =\n                         I (And \\<phi>1 \\<phi>2) xs\n 5. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal \\<phi>1 \\<Longrightarrow>\n                   I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs.\n           normal \\<phi>2 \\<Longrightarrow>\n           I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs;\n        normal (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (Or \\<phi>1 \\<phi>2)) xs =\n                         I (Or \\<phi>1 \\<phi>2) xs\n 6. \\<And>\\<phi> xs.\n       \\<lbrakk>\\<And>xs.\n                   normal \\<phi> \\<Longrightarrow>\n                   I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs;\n        normal (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (Neg \\<phi>)) xs =\n                         I (Neg \\<phi>) xs\n 7. \\<And>\\<phi> xs.\n       \\<lbrakk>\\<And>xs.\n                   normal \\<phi> \\<Longrightarrow>\n                   I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs;\n        normal (ExQ \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (ExQ \\<phi>)) xs =\n                         I (ExQ \\<phi>) xs", "thus ?case"], ["proof (prove)\nusing this:\n  normal \\<phi>_ \\<Longrightarrow>\n  I (lift_nnf_qe qe \\<phi>_) ?xs = I \\<phi>_ ?xs\n  normal (ExQ \\<phi>_)\n\ngoal (1 subgoal):\n 1. I (lift_nnf_qe qe (ExQ \\<phi>_)) xs = I (ExQ \\<phi>_) xs", "by (simp add: assms nqfree_nnf qfree_lift_nnf_qe I_nnf\n                  normal_lift_nnf_qe normal_nnf)"], ["proof (state)\nthis:\n  I (lift_nnf_qe qe (ExQ \\<phi>_)) xs = I (ExQ \\<phi>_) xs\n\ngoal (6 subgoals):\n 1. \\<And>xs.\n       normal TrueF \\<Longrightarrow>\n       I (lift_nnf_qe qe TrueF) xs = I TrueF xs\n 2. \\<And>xs.\n       normal FalseF \\<Longrightarrow>\n       I (lift_nnf_qe qe FalseF) xs = I FalseF xs\n 3. \\<And>x xs.\n       normal (Atom x) \\<Longrightarrow>\n       I (lift_nnf_qe qe (Atom x)) xs = I (Atom x) xs\n 4. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal \\<phi>1 \\<Longrightarrow>\n                   I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs.\n           normal \\<phi>2 \\<Longrightarrow>\n           I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs;\n        normal (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (And \\<phi>1 \\<phi>2)) xs =\n                         I (And \\<phi>1 \\<phi>2) xs\n 5. \\<And>\\<phi>1 \\<phi>2 xs.\n       \\<lbrakk>\\<And>xs.\n                   normal \\<phi>1 \\<Longrightarrow>\n                   I (lift_nnf_qe qe \\<phi>1) xs = I \\<phi>1 xs;\n        \\<And>xs.\n           normal \\<phi>2 \\<Longrightarrow>\n           I (lift_nnf_qe qe \\<phi>2) xs = I \\<phi>2 xs;\n        normal (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (Or \\<phi>1 \\<phi>2)) xs =\n                         I (Or \\<phi>1 \\<phi>2) xs\n 6. \\<And>\\<phi> xs.\n       \\<lbrakk>\\<And>xs.\n                   normal \\<phi> \\<Longrightarrow>\n                   I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs;\n        normal (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> I (lift_nnf_qe qe (Neg \\<phi>)) xs =\n                         I (Neg \\<phi>) xs", "qed auto"], ["", "lemma I_lift_nnf_qe_normal2:\nassumes  \"qe \\<in> |nqfree| \\<rightarrow> |qfree|\"\nand \"qe \\<in> |nqfree| \\<inter> |normal| \\<rightarrow> |normal|\"\nand \"\\<forall>\\<phi> \\<in> |normal| \\<inter> |nqfree|. \\<forall>xs. I (qe \\<phi>) xs = (\\<exists>x. I \\<phi> (x#xs))\"\nshows \"normal \\<phi> \\<Longrightarrow> I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. normal \\<phi> \\<Longrightarrow>\n    I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs", "using assms"], ["proof (prove)\nusing this:\n  qe \\<in> Collect nqfree \\<rightarrow> Collect qfree\n  qe \\<in> Collect nqfree \\<inter> Collect normal \\<rightarrow>\n           Collect normal\n  \\<forall>\\<phi>\\<in>Collect normal \\<inter> Collect nqfree.\n     \\<forall>xs. I (qe \\<phi>) xs = (\\<exists>x. I \\<phi> (x # xs))\n\ngoal (1 subgoal):\n 1. normal \\<phi> \\<Longrightarrow>\n    I (lift_nnf_qe qe \\<phi>) xs = I \\<phi> xs", "by(simp add:Pi_def I_lift_nnf_qe_normal Int_def)"], ["", "end"], ["", "subsection\\<open>With equality\\<close>"], ["", "text\\<open>DNF-based quantifier elimination can accommodate equality atoms\nin a generic fashion.\\<close>"], ["", "locale ATOM_EQ = ATOM +\nfixes solvable\\<^sub>0 :: \"'a \\<Rightarrow> bool\"\nand trivial :: \"'a \\<Rightarrow> bool\" \nand subst\\<^sub>0 :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\"\nassumes subst\\<^sub>0:\n  \"\\<lbrakk> solvable\\<^sub>0 eq;  \\<not>trivial eq;  I\\<^sub>a eq (x#xs);  depends\\<^sub>0 a \\<rbrakk>\n   \\<Longrightarrow> I\\<^sub>a (subst\\<^sub>0 eq a) xs = I\\<^sub>a a (x#xs)\"\nand trivial: \"trivial eq \\<Longrightarrow> I\\<^sub>a eq xs\"\nand solvable: \"solvable\\<^sub>0 eq \\<Longrightarrow> \\<exists>x. I\\<^sub>a eq (x#xs)\"\nand is_triv_self_subst: \"solvable\\<^sub>0 eq \\<Longrightarrow> trivial (subst\\<^sub>0 eq eq)\"\n\nbegin"], ["", "definition lift_eq_qe :: \"('a list \\<Rightarrow> 'a fm) \\<Rightarrow> 'a list \\<Rightarrow> 'a fm\" where\n\"lift_eq_qe qe as =\n (let as = [a\\<leftarrow>as. \\<not> trivial a]\n  in case [a\\<leftarrow>as. solvable\\<^sub>0 a] of\n    [] \\<Rightarrow> qe as\n  | eq # eqs \\<Rightarrow>\n        (let ineqs = [a\\<leftarrow>as. \\<not> solvable\\<^sub>0 a]\n         in list_conj (map (Atom \\<circ> (subst\\<^sub>0 eq)) (eqs @ ineqs))))\""], ["", "theorem I_lift_eq_qe:\nassumes dep: \"\\<forall>a\\<in>set as. depends\\<^sub>0 a\"\nassumes qe: \"\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> \\<not> solvable\\<^sub>0 a) \\<Longrightarrow>\n   I (qe as) xs = (\\<exists>x. \\<forall>a \\<in> set as. I\\<^sub>a a (x#xs))\"\nshows \"I (lift_eq_qe qe as) xs = (\\<exists>x. \\<forall>a \\<in> set as. I\\<^sub>a a (x#xs))\"\n  (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. I (lift_eq_qe qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. I (lift_eq_qe qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "let ?as = \"[a\\<leftarrow>as. \\<not> trivial a]\""], ["proof (state)\ngoal (1 subgoal):\n 1. I (lift_eq_qe qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. I (lift_eq_qe qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "proof (cases \"[a\\<leftarrow>?as. solvable\\<^sub>0 a]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n    [] \\<Longrightarrow>\n    I (lift_eq_qe qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n 2. \\<And>a list.\n       filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n       a # list \\<Longrightarrow>\n       I (lift_eq_qe qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "case Nil"], ["proof (state)\nthis:\n  filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) = []\n\ngoal (2 subgoals):\n 1. filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n    [] \\<Longrightarrow>\n    I (lift_eq_qe qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n 2. \\<And>a list.\n       filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n       a # list \\<Longrightarrow>\n       I (lift_eq_qe qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "hence \"\\<forall>a\\<in>set as. \\<not> trivial a \\<longrightarrow> \\<not> solvable\\<^sub>0 a\""], ["proof (prove)\nusing this:\n  filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) = []\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set as.\n       \\<not> trivial a \\<longrightarrow> \\<not> solvable\\<^sub>0 a", "by(auto simp: filter_empty_conv)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set as.\n     \\<not> trivial a \\<longrightarrow> \\<not> solvable\\<^sub>0 a\n\ngoal (2 subgoals):\n 1. filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n    [] \\<Longrightarrow>\n    I (lift_eq_qe qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n 2. \\<And>a list.\n       filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n       a # list \\<Longrightarrow>\n       I (lift_eq_qe qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "thus \"?L = ?R\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set as.\n     \\<not> trivial a \\<longrightarrow> \\<not> solvable\\<^sub>0 a\n\ngoal (1 subgoal):\n 1. I (lift_eq_qe qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "by(simp add:lift_eq_qe_def dep qe cong:conj_cong) (metis trivial)"], ["proof (state)\nthis:\n  I (lift_eq_qe qe as) xs =\n  (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n       a # list \\<Longrightarrow>\n       I (lift_eq_qe qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n       a # list \\<Longrightarrow>\n       I (lift_eq_qe qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "case (Cons eq _)"], ["proof (state)\nthis:\n  filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n  eq # list_\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n       a # list \\<Longrightarrow>\n       I (lift_eq_qe qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "then"], ["proof (chain)\npicking this:\n  filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n  eq # list_", "have \"eq \\<in> set as\" \"solvable\\<^sub>0 eq\" \"\\<not> trivial eq\""], ["proof (prove)\nusing this:\n  filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n  eq # list_\n\ngoal (1 subgoal):\n 1. eq \\<in> set as &&& solvable\\<^sub>0 eq &&& \\<not> trivial eq", "by (auto simp: filter_eq_Cons_iff)"], ["proof (state)\nthis:\n  eq \\<in> set as\n  solvable\\<^sub>0 eq\n  \\<not> trivial eq\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n       a # list \\<Longrightarrow>\n       I (lift_eq_qe qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "then"], ["proof (chain)\npicking this:\n  eq \\<in> set as\n  solvable\\<^sub>0 eq\n  \\<not> trivial eq", "obtain e where \"I\\<^sub>a eq (e#xs)\""], ["proof (prove)\nusing this:\n  eq \\<in> set as\n  solvable\\<^sub>0 eq\n  \\<not> trivial eq\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        I\\<^sub>a eq (e # xs) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(metis solvable)"], ["proof (state)\nthis:\n  I\\<^sub>a eq (e # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n       a # list \\<Longrightarrow>\n       I (lift_eq_qe qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "have \"\\<forall>a \\<in> set as. I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set as.\n       I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs", "by(simp add: subst\\<^sub>0[OF \\<open>solvable\\<^sub>0 eq\\<close> \\<open>\\<not> trivial eq\\<close> \\<open>I\\<^sub>a eq (e#xs)\\<close>] dep)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set as.\n     I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n       a # list \\<Longrightarrow>\n       I (lift_eq_qe qe as) xs =\n       (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set as.\n     I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs\n\ngoal (1 subgoal):\n 1. I (lift_eq_qe qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "using Cons dep"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set as.\n     I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs\n  filter solvable\\<^sub>0 (filter (\\<lambda>a. \\<not> trivial a) as) =\n  eq # list_\n  \\<forall>a\\<in>set as. depends\\<^sub>0 a\n\ngoal (1 subgoal):\n 1. I (lift_eq_qe qe as) xs =\n    (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))", "apply(simp add: lift_eq_qe_def,\n            clarsimp simp: filter_eq_Cons_iff ball_Un)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>us vs.\n       \\<lbrakk>as = us @ eq # vs;\n        \\<forall>u\\<in>set us. trivial u \\<or> \\<not> solvable\\<^sub>0 u;\n        \\<not> trivial eq; solvable\\<^sub>0 eq;\n        list_ =\n        filter (\\<lambda>x. \\<not> trivial x \\<and> solvable\\<^sub>0 x) vs;\n        I\\<^sub>a eq (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq eq) xs;\n        depends\\<^sub>0 eq;\n        \\<forall>a\\<in>set us.\n           I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs;\n        \\<forall>a\\<in>set vs.\n           I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs;\n        \\<forall>x\\<in>set us. depends\\<^sub>0 x;\n        \\<forall>x\\<in>set vs. depends\\<^sub>0 x\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>\\<phi>.\n                              \\<phi> \\<in> set vs \\<and>\n                              \\<not> trivial \\<phi> \\<and>\n                              solvable\\<^sub>0 \\<phi> \\<longrightarrow>\n                              I\\<^sub>a (subst\\<^sub>0 eq \\<phi>) xs) \\<and>\n                          (\\<forall>\\<phi>.\n                              (\\<phi> = eq \\<or>\n                               \\<phi> \\<in> set us \\<or>\n                               \\<phi> \\<in> set vs) \\<and>\n                              \\<not> trivial \\<phi> \\<and>\n                              \\<not> solvable\\<^sub>0\n\\<phi> \\<longrightarrow>\n                              I\\<^sub>a (subst\\<^sub>0 eq \\<phi>) xs)) =\n                         (\\<exists>x.\n                             I\\<^sub>a eq (x # xs) \\<and>\n                             (\\<forall>a\\<in>set us.\n                                 I\\<^sub>a a (x # xs)) \\<and>\n                             (\\<forall>a\\<in>set vs. I\\<^sub>a a (x # xs)))", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>us vs.\n       \\<lbrakk>as = us @ eq # vs;\n        \\<forall>u\\<in>set us. trivial u \\<or> \\<not> solvable\\<^sub>0 u;\n        \\<not> trivial eq; solvable\\<^sub>0 eq;\n        list_ =\n        filter (\\<lambda>x. \\<not> trivial x \\<and> solvable\\<^sub>0 x) vs;\n        I\\<^sub>a eq (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq eq) xs;\n        depends\\<^sub>0 eq;\n        \\<forall>a\\<in>set us.\n           I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs;\n        \\<forall>a\\<in>set vs.\n           I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs;\n        \\<forall>x\\<in>set us. depends\\<^sub>0 x;\n        \\<forall>x\\<in>set vs. depends\\<^sub>0 x;\n        (\\<forall>\\<phi>.\n            \\<phi> \\<in> set vs \\<and>\n            \\<not> trivial \\<phi> \\<and>\n            solvable\\<^sub>0 \\<phi> \\<longrightarrow>\n            I\\<^sub>a (subst\\<^sub>0 eq \\<phi>) xs) \\<and>\n        (\\<forall>\\<phi>.\n            (\\<phi> = eq \\<or>\n             \\<phi> \\<in> set us \\<or> \\<phi> \\<in> set vs) \\<and>\n            \\<not> trivial \\<phi> \\<and>\n            \\<not> solvable\\<^sub>0 \\<phi> \\<longrightarrow>\n            I\\<^sub>a (subst\\<^sub>0 eq \\<phi>) xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            I\\<^sub>a eq (x # xs) \\<and>\n                            (\\<forall>a\\<in>set us.\n                                I\\<^sub>a a (x # xs)) \\<and>\n                            (\\<forall>a\\<in>set vs. I\\<^sub>a a (x # xs))\n 2. \\<And>us vs.\n       \\<lbrakk>as = us @ eq # vs;\n        \\<forall>u\\<in>set us. trivial u \\<or> \\<not> solvable\\<^sub>0 u;\n        \\<not> trivial eq; solvable\\<^sub>0 eq;\n        list_ =\n        filter (\\<lambda>x. \\<not> trivial x \\<and> solvable\\<^sub>0 x) vs;\n        I\\<^sub>a eq (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq eq) xs;\n        depends\\<^sub>0 eq;\n        \\<forall>a\\<in>set us.\n           I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs;\n        \\<forall>a\\<in>set vs.\n           I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs;\n        \\<forall>x\\<in>set us. depends\\<^sub>0 x;\n        \\<forall>x\\<in>set vs. depends\\<^sub>0 x;\n        \\<exists>x.\n           I\\<^sub>a eq (x # xs) \\<and>\n           (\\<forall>a\\<in>set us. I\\<^sub>a a (x # xs)) \\<and>\n           (\\<forall>a\\<in>set vs. I\\<^sub>a a (x # xs))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>\\<phi>.\n                             \\<phi> \\<in> set vs \\<and>\n                             \\<not> trivial \\<phi> \\<and>\n                             solvable\\<^sub>0 \\<phi> \\<longrightarrow>\n                             I\\<^sub>a (subst\\<^sub>0 eq \\<phi>) xs) \\<and>\n                         (\\<forall>\\<phi>.\n                             (\\<phi> = eq \\<or>\n                              \\<phi> \\<in> set us \\<or>\n                              \\<phi> \\<in> set vs) \\<and>\n                             \\<not> trivial \\<phi> \\<and>\n                             \\<not> solvable\\<^sub>0\n                                     \\<phi> \\<longrightarrow>\n                             I\\<^sub>a (subst\\<^sub>0 eq \\<phi>) xs)", "apply(fastforce intro!:exI[of _ e] simp: trivial is_triv_self_subst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>us vs.\n       \\<lbrakk>as = us @ eq # vs;\n        \\<forall>u\\<in>set us. trivial u \\<or> \\<not> solvable\\<^sub>0 u;\n        \\<not> trivial eq; solvable\\<^sub>0 eq;\n        list_ =\n        filter (\\<lambda>x. \\<not> trivial x \\<and> solvable\\<^sub>0 x) vs;\n        I\\<^sub>a eq (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq eq) xs;\n        depends\\<^sub>0 eq;\n        \\<forall>a\\<in>set us.\n           I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs;\n        \\<forall>a\\<in>set vs.\n           I\\<^sub>a a (e # xs) = I\\<^sub>a (subst\\<^sub>0 eq a) xs;\n        \\<forall>x\\<in>set us. depends\\<^sub>0 x;\n        \\<forall>x\\<in>set vs. depends\\<^sub>0 x;\n        \\<exists>x.\n           I\\<^sub>a eq (x # xs) \\<and>\n           (\\<forall>a\\<in>set us. I\\<^sub>a a (x # xs)) \\<and>\n           (\\<forall>a\\<in>set vs. I\\<^sub>a a (x # xs))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>\\<phi>.\n                             \\<phi> \\<in> set vs \\<and>\n                             \\<not> trivial \\<phi> \\<and>\n                             solvable\\<^sub>0 \\<phi> \\<longrightarrow>\n                             I\\<^sub>a (subst\\<^sub>0 eq \\<phi>) xs) \\<and>\n                         (\\<forall>\\<phi>.\n                             (\\<phi> = eq \\<or>\n                              \\<phi> \\<in> set us \\<or>\n                              \\<phi> \\<in> set vs) \\<and>\n                             \\<not> trivial \\<phi> \\<and>\n                             \\<not> solvable\\<^sub>0\n                                     \\<phi> \\<longrightarrow>\n                             I\\<^sub>a (subst\\<^sub>0 eq \\<phi>) xs)", "apply (metis subst\\<^sub>0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  I (lift_eq_qe qe as) xs =\n  (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  I (lift_eq_qe qe as) xs =\n  (\\<exists>x. \\<forall>a\\<in>set as. I\\<^sub>a a (x # xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"lift_dnfeq_qe = lift_dnf_qe \\<circ> lift_eq_qe\""], ["", "lemma qfree_lift_eq_qe:\n  \"(\\<And>as. \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<Longrightarrow> qfree (qe as)) \\<Longrightarrow>\n   \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<Longrightarrow> qfree(lift_eq_qe qe as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>as.\n                \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<Longrightarrow>\n                qfree (qe as);\n     \\<forall>a\\<in>set as. depends\\<^sub>0 a\\<rbrakk>\n    \\<Longrightarrow> qfree (lift_eq_qe qe as)", "by(simp add:lift_eq_qe_def ball_Un split:list.split)"], ["", "lemma qfree_lift_dnfeq_qe: \"(\\<And>as. (\\<forall>a\\<in>set as. depends\\<^sub>0 a) \\<Longrightarrow> qfree(qe as))\n  \\<Longrightarrow> qfree(lift_dnfeq_qe qe \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<Longrightarrow>\n        qfree (qe as)) \\<Longrightarrow>\n    qfree (lift_dnfeq_qe qe \\<phi>)", "by(simp add: lift_dnfeq_qe_def qfree_lift_dnf_qe qfree_lift_eq_qe)"], ["", "lemma I_lift_dnfeq_qe:\n  \"(\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a) \\<Longrightarrow> qfree(qe as)) \\<Longrightarrow>\n   (\\<And>as. (\\<forall>a \\<in> set as. depends\\<^sub>0 a \\<and> \\<not> solvable\\<^sub>0 a) \\<Longrightarrow> is_dnf_qe qe as) \\<Longrightarrow>\n   I (lift_dnfeq_qe qe \\<phi>) xs = I \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>as.\n                \\<forall>a\\<in>set as. depends\\<^sub>0 a \\<Longrightarrow>\n                qfree (qe as);\n     \\<And>as.\n        \\<forall>a\\<in>set as.\n           depends\\<^sub>0 a \\<and>\n           \\<not> solvable\\<^sub>0 a \\<Longrightarrow>\n        is_dnf_qe qe as\\<rbrakk>\n    \\<Longrightarrow> I (lift_dnfeq_qe qe \\<phi>) xs = I \\<phi> xs", "by(simp add:lift_dnfeq_qe_def I_lift_dnf_qe qfree_lift_eq_qe I_lift_eq_qe)"], ["", "lemma I_lift_dnfeq_qe2:\n  \"qe \\<in> lists |depends\\<^sub>0| \\<rightarrow> |qfree| \\<Longrightarrow>\n   (\\<forall>as \\<in> lists( |depends\\<^sub>0| \\<inter> - |solvable\\<^sub>0| ). is_dnf_qe qe as) \\<Longrightarrow>\n   I (lift_dnfeq_qe qe \\<phi>) xs = I \\<phi> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>qe \\<in> lists (Collect depends\\<^sub>0) \\<rightarrow>\n                      Collect qfree;\n     \\<forall>as\\<in>lists\n                      (Collect depends\\<^sub>0 \\<inter>\n                       - Collect solvable\\<^sub>0).\n        is_dnf_qe qe as\\<rbrakk>\n    \\<Longrightarrow> I (lift_dnfeq_qe qe \\<phi>) xs = I \\<phi> xs", "using in_lists_conv_set[where ?'a = 'a]"], ["proof (prove)\nusing this:\n  (?xs \\<in> lists ?A) = (\\<forall>x\\<in>set ?xs. x \\<in> ?A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>qe \\<in> lists (Collect depends\\<^sub>0) \\<rightarrow>\n                      Collect qfree;\n     \\<forall>as\\<in>lists\n                      (Collect depends\\<^sub>0 \\<inter>\n                       - Collect solvable\\<^sub>0).\n        is_dnf_qe qe as\\<rbrakk>\n    \\<Longrightarrow> I (lift_dnfeq_qe qe \\<phi>) xs = I \\<phi> xs", "by(simp add:Pi_def I_lift_dnfeq_qe Int_def Compl_eq)"], ["", "end"], ["", "end"]]}