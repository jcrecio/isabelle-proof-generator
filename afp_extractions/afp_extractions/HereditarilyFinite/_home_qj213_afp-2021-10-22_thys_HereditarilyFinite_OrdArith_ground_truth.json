{"file_name": "/home/qj213/afp-2021-10-22/thys/HereditarilyFinite/OrdArith.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/HereditarilyFinite", "problem_names": ["lemma hadd: \"x @+ y = x \\<squnion> RepFun y (\\<lambda>z. x @+ z)\"", "lemma hmem_hadd_E:\n  assumes l: \"l \\<^bold>\\<in> x @+ y\"\n  obtains \"l \\<^bold>\\<in> x\" | z where \"z \\<^bold>\\<in> y\" \"l = x @+ z\"", "lemma hadd_0_right [simp]: \"x @+ 0 = x\"", "lemma hadd_hinsert_right: \"x @+ hinsert y z = hinsert (x @+ y) (x @+ z)\"", "lemma hadd_succ_right [simp]: \"x @+ succ y = succ (x @+ y)\"", "lemma not_add_less_right: \"\\<not> (x @+ y < x)\"", "lemma not_add_mem_right: \"\\<not> (x @+ y \\<^bold>\\<in> x)\"", "lemma hadd_0_left [simp]: \"0 @+ x = x\"", "lemma hadd_succ_left [simp]: \"Ord y \\<Longrightarrow> succ x @+ y = succ (x @+ y)\"", "lemma hadd_assoc: \"(x @+ y) @+ z = x @+ (y @+ z)\"", "lemma RepFun_hadd_disjoint: \"x \\<sqinter> RepFun y ((@+) x) = 0\"", "lemma Rep_le_Cancel: \"x \\<squnion> RepFun y ((@+) x) \\<le> x \\<squnion> RepFun z ((@+) x)\n                      \\<Longrightarrow> RepFun y ((@+) x) \\<le> RepFun z ((@+) x)\"", "lemma hadd_cancel_right [simp]: \"x @+ y = x @+ z \\<longleftrightarrow> y=z\"", "lemma RepFun_hadd_cancel: \"RepFun y (\\<lambda>z. x @+ z) = RepFun z (\\<lambda>z. x @+ z) \\<longleftrightarrow> y=z\"", "lemma hadd_hmem_cancel [simp]: \"x @+ y \\<^bold>\\<in> x @+ z \\<longleftrightarrow> y \\<^bold>\\<in> z\"", "lemma ord_of_add: \"ord_of (i+j) = ord_of i @+ ord_of j\"", "lemma Ord_hadd: \"Ord x \\<Longrightarrow> Ord y \\<Longrightarrow> Ord (x @+ y)\"", "lemma hmem_self_hadd [simp]: \"k1 \\<^bold>\\<in> k1 @+ k2 \\<longleftrightarrow> 0 \\<^bold>\\<in> k2\"", "lemma hadd_commute: \"Ord x \\<Longrightarrow> Ord y \\<Longrightarrow> x @+ y = y @+ x\"", "lemma hadd_cancel_left [simp]: \"Ord x \\<Longrightarrow> y @+ x = z @+ x \\<longleftrightarrow> y=z\"", "lemma pred_succ [simp]: \"pred (succ x) = x\"", "lemma pred_0 [simp]: \"pred 0 = 0\"", "lemma succ_pred [simp]: \"Ord x \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> succ (pred x) = x\"", "lemma pred_mem [simp]: \"Ord x \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> pred x \\<^bold>\\<in> x\"", "lemma Ord_pred [simp]: \"Ord x \\<Longrightarrow> Ord (pred x)\"", "lemma hadd_pred_right: \"Ord y \\<Longrightarrow> y \\<noteq> 0 \\<Longrightarrow> x @+ pred y = pred (x @+ y)\"", "lemma Ord_pred_HUnion: \"Ord(k) \\<Longrightarrow> pred k = \\<Squnion>k\"", "lemma shiftD: \"x \\<^bold>\\<in> shift f delta \\<Longrightarrow> \\<exists>u. u \\<^bold>\\<in> f \\<and> x = \\<langle>delta @+ hfst u, hsnd u\\<rangle>\"", "lemma hmem_shift_iff: \"\\<langle>m, y\\<rangle> \\<^bold>\\<in> shift f delta \\<longleftrightarrow> (\\<exists>n. m = delta @+ n \\<and> \\<langle>n, y\\<rangle> \\<^bold>\\<in> f)\"", "lemma hmem_shift_add_iff [simp]: \"\\<langle>delta @+ n, y\\<rangle> \\<^bold>\\<in> shift f delta \\<longleftrightarrow> \\<langle>n, y\\<rangle> \\<^bold>\\<in> f\"", "lemma hrelation_shift [simp]: \"hrelation (shift f delta)\"", "lemma app_shift [simp]: \"app (shift f k) (k @+ j) = app f j\"", "lemma hfunction_shift_iff [simp]: \"hfunction (shift f delta) = hfunction f\"", "lemma hdomain_shift_add: \"hdomain (shift f delta) = \\<lbrace>delta @+ n . n \\<^bold>\\<in> hdomain f\\<rbrace>\"", "lemma hdomain_shift_disjoint: \"delta \\<sqinter> hdomain (shift f delta) = 0\"", "lemma hrelation_seq_append [simp]: \"hrelation (seq_append k f g)\"", "lemma Seq_append: \"Seq s1 k1 \\<Longrightarrow> Seq s2 k2 \\<Longrightarrow> Seq (seq_append k1 s1 s2) (k1 @+ k2)\"", "lemma app_hunion1: \"x \\<^bold>\\<notin> hdomain g \\<Longrightarrow> app (f \\<squnion> g) x = app f x\"", "lemma app_hunion2: \"x \\<^bold>\\<notin> hdomain f \\<Longrightarrow> app (f \\<squnion> g) x = app g x\"", "lemma Seq_append_app1: \"Seq s k \\<Longrightarrow> l \\<^bold>\\<in> k \\<Longrightarrow> app (seq_append k s s') l = app s l\"", "lemma Seq_append_app2: \"Seq s1 k1 \\<Longrightarrow> Seq s2 k2 \\<Longrightarrow> l = k1 @+ j \\<Longrightarrow> app (seq_append k1 s1 s2) l = app s2 j\"", "lemma OrdDom_insf: \"\\<lbrakk>OrdDom s; Ord k\\<rbrakk> \\<Longrightarrow> OrdDom (insf s (succ k) y)\"", "lemma OrdDom_hunion [simp]: \"OrdDom (s1 \\<squnion> s2) \\<longleftrightarrow> OrdDom s1 \\<and> OrdDom s2\"", "lemma OrdDom_hrestrict: \"OrdDom s \\<Longrightarrow> OrdDom (hrestrict s A)\"", "lemma OrdDom_shift: \"\\<lbrakk>OrdDom s; Ord k\\<rbrakk> \\<Longrightarrow> OrdDom (shift s k)\"", "lemma LstSeq_imp_Seq_succ: \"LstSeq s k y \\<Longrightarrow> Seq s (succ k)\"", "lemma LstSeq_imp_Seq_same: \"LstSeq s k y \\<Longrightarrow> Seq s k\"", "lemma LstSeq_imp_Ord: \"LstSeq s k y \\<Longrightarrow> Ord k\"", "lemma LstSeq_trunc: \"LstSeq s k y \\<Longrightarrow> l \\<^bold>\\<in> k \\<Longrightarrow> LstSeq s l (app s l)\"", "lemma LstSeq_insf: \"LstSeq s k z \\<Longrightarrow> LstSeq (insf s (succ k) y) (succ k) y\"", "lemma app_insf_LstSeq: \"LstSeq s k z \\<Longrightarrow> app (insf s (succ k) y) (succ k) = y\"", "lemma app_insf2_LstSeq: \"LstSeq s k z \\<Longrightarrow> k' \\<noteq> succ k \\<Longrightarrow> app (insf s (succ k) y) k' = app s k'\"", "lemma app_insf_LstSeq_if: \"LstSeq s k z \\<Longrightarrow> app (insf s (succ k) y) k' = (if k' = succ k then y else app s k')\"", "lemma LstSeq_append_app1:\n  \"LstSeq s k y \\<Longrightarrow> l \\<^bold>\\<in> succ k \\<Longrightarrow> app (seq_append (succ k) s s') l = app s l\"", "lemma LstSeq_append_app2:\n  \"\\<lbrakk>LstSeq s1 k1 y1; LstSeq s2 k2 y2; l = succ k1 @+ j\\<rbrakk>\n   \\<Longrightarrow> app (seq_append (succ k1) s1 s2) l = app s2 j\"", "lemma Seq_append_pair:\n  \"\\<lbrakk>Seq s1 k1; Seq s2 (succ n);  \\<langle>n, y\\<rangle> \\<^bold>\\<in> s2; Ord n\\<rbrakk> \\<Longrightarrow> \\<langle>k1 @+ n, y\\<rangle> \\<^bold>\\<in> (seq_append k1 s1 s2)\"", "lemma Seq_append_OrdDom: \"\\<lbrakk>Ord k; OrdDom s1; OrdDom s2\\<rbrakk> \\<Longrightarrow> OrdDom (seq_append k s1 s2)\"", "lemma LstSeq_append:\n  \"\\<lbrakk>LstSeq s1 k1 y1; LstSeq s2 k2 y2\\<rbrakk> \\<Longrightarrow> LstSeq (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2\"", "lemma LstSeq_app [simp]: \"LstSeq s k y \\<Longrightarrow> app s k = y\"", "lemma BuildSeqI: \"LstSeq s k y \\<Longrightarrow> (\\<And>l. l \\<^bold>\\<in> succ k \\<Longrightarrow> Builds B C s l) \\<Longrightarrow> BuildSeq B C s k y\"", "lemma BuildSeq_imp_LstSeq: \"BuildSeq B C s k y \\<Longrightarrow> LstSeq s k y\"", "lemma BuildSeq_imp_Seq: \"BuildSeq B C s k y \\<Longrightarrow> Seq s (succ k)\"", "lemma BuildSeq_conj_distrib:\n \"BuildSeq (\\<lambda>x. B x \\<and> P x) (\\<lambda>x y z. C x y z \\<and> P x) s k y \\<longleftrightarrow>\n  BuildSeq B C s k y \\<and> (\\<forall>l \\<^bold>\\<in> succ k. P (app s l))\"", "lemma BuildSeq_mono:\n  assumes y: \"BuildSeq B C s k y\"\n      and B: \"\\<And>x. B x \\<Longrightarrow> B' x\" and C: \"\\<And>x y z. C x y z \\<Longrightarrow> C' x y z\"\n  shows \"BuildSeq B' C' s k y\"", "lemma BuildSeq_trunc:\n  assumes b: \"BuildSeq B C s k y\"\n      and l: \"l \\<^bold>\\<in> k\"\n  shows \"BuildSeq B C s l (app s l)\"", "lemma Builds_insf: \"Builds B C s l \\<Longrightarrow> LstSeq s k z \\<Longrightarrow> l \\<^bold>\\<in> succ k \\<Longrightarrow> Builds B C (insf s (succ k) y) l\"", "lemma BuildSeq_insf:\n  assumes b: \"BuildSeq B C s k z\"\n      and m: \"m \\<^bold>\\<in> succ k\"\n      and n: \"n \\<^bold>\\<in> succ k\"\n      and y: \"B y \\<or> C y (app s m) (app s n)\"\nshows \"BuildSeq B C (insf s (succ k) y) (succ k) y\"", "lemma BuildSeq_insf1:\n  assumes b: \"BuildSeq B C s k z\"\n      and y: \"B y\"\n  shows \"BuildSeq B C (insf s (succ k) y) (succ k) y\"", "lemma BuildSeq_insf2:\n  assumes b: \"BuildSeq B C s k z\"\n      and m: \"m \\<^bold>\\<in> k\"\n      and n: \"n \\<^bold>\\<in> k\"\n      and y: \"C y (app s m) (app s n)\"\n  shows \"BuildSeq B C (insf s (succ k) y) (succ k) y\"", "lemma BuildSeq_append:\n  assumes s1: \"BuildSeq B C s1 k1 y1\" and s2: \"BuildSeq B C s2 k2 y2\"\n  shows \"BuildSeq B C (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2\"", "lemma BuildSeq_combine:\n  assumes b1: \"BuildSeq B C s1 k1 y1\" and b2: \"BuildSeq B C s2 k2 y2\"\n      and y: \"C y y1 y2\"\n  shows \"BuildSeq B C (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2))) y) (succ (succ (k1 @+ k2))) y\"", "lemma LstSeq_1: \"LstSeq \\<lbrace>\\<langle>0, y\\<rangle>\\<rbrace> 0 y\"", "lemma BuildSeq_1: \"B y \\<Longrightarrow> BuildSeq B C \\<lbrace>\\<langle>0, y\\<rangle>\\<rbrace> 0 y\"", "lemma BuildSeq_exI: \"B t \\<Longrightarrow> \\<exists>s k. BuildSeq B C s k t\"", "lemma BuildSeq_succ_E:\n    assumes s: \"BuildSeq B C s k y\"\n      obtains \"B y\" |  m n where \"m \\<^bold>\\<in> k\" \"n \\<^bold>\\<in> k\" \"C y (app s m) (app s n)\"", "lemma BuildSeq_induct [consumes 1, case_names B C]:\n  assumes major: \"BuildSeq B C s k a\"\n      and B: \"\\<And>x. B x \\<Longrightarrow> P x\"\n      and C: \"\\<And>x y z. C x y z \\<Longrightarrow> P y \\<Longrightarrow> P z \\<Longrightarrow> P x\"\n  shows \"P a\"", "lemma BuildSeq2_combine:\n  assumes b1: \"BuildSeq2 B C s1 k1 y1 y1'\" and b2: \"BuildSeq2 B C s2 k2 y2 y2'\"\n      and y: \"C y y' y1 y1' y2 y2'\"\n  shows \"BuildSeq2 B C (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2))) \\<langle>y, y'\\<rangle>)\n                       (succ (succ (k1 @+ k2))) y y'\"", "lemma BuildSeq2_1: \"B y y' \\<Longrightarrow> BuildSeq2 B C \\<lbrace>\\<langle>0, y, y'\\<rangle>\\<rbrace> 0 y y'\"", "lemma BuildSeq2_exI: \"B t t' \\<Longrightarrow> \\<exists>s k. BuildSeq2 B C s k t t'\"", "lemma BuildSeq2_induct [consumes 1, case_names B C]:\n  assumes \"BuildSeq2 B C s k a a'\"\n      and B: \"\\<And>x x'. B x x' \\<Longrightarrow> P x x'\"\n      and C: \"\\<And>x x' y y' z z'. C x x' y y' z z' \\<Longrightarrow> P y y' \\<Longrightarrow> P z z' \\<Longrightarrow> P x x'\"\n  shows \"P a a'\"", "lemma BuildSeq3_combine:\n  assumes b1: \"BuildSeq3 B C s1 k1 y1 y1' y1''\" and b2: \"BuildSeq3 B C s2 k2 y2 y2' y2''\"\n      and y: \"C y y' y'' y1 y1' y1'' y2 y2' y2''\"\n  shows \"BuildSeq3 B C (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2))) \\<langle>y, y', y''\\<rangle>)\n                       (succ (succ (k1 @+ k2))) y y' y''\"", "lemma BuildSeq3_1: \"B y y' y'' \\<Longrightarrow> BuildSeq3 B C \\<lbrace>\\<langle>0, y, y', y''\\<rangle>\\<rbrace> 0 y y' y''\"", "lemma BuildSeq3_exI: \"B t t' t'' \\<Longrightarrow> \\<exists>s k. BuildSeq3 B C s k t t' t''\"", "lemma BuildSeq3_induct [consumes 1, case_names B C]:\n  assumes \"BuildSeq3 B C s k a a' a''\"\n      and B: \"\\<And>x x' x''. B x x' x'' \\<Longrightarrow> P x x' x''\"\n      and C: \"\\<And>x x' x'' y y' y'' z z' z''. C x x' x'' y y' y'' z z' z'' \\<Longrightarrow> P y y' y'' \\<Longrightarrow> P z z' z'' \\<Longrightarrow> P x x' x''\"\n  shows \"P a a' a''\"", "lemma Rep_hf_0 [simp]: \"Rep_hf 0 = 0\"", "lemma hmem_imp_less: \"x \\<^bold>\\<in> y \\<Longrightarrow> Rep_hf x < Rep_hf y\"", "lemma hsubset_imp_le: \"x \\<le> y \\<Longrightarrow> Rep_hf x \\<le> Rep_hf y\"", "lemma diff_hmem_imp_less: assumes \"x \\<^bold>\\<in> y\" shows \"Rep_hf (y - \\<lbrace>x\\<rbrace>) < Rep_hf y\"", "lemma least_equality:\n  assumes \"x \\<^bold>\\<in> a\" and \"\\<And>y. y \\<^bold>\\<in> a \\<Longrightarrow> Rep_hf x \\<le> Rep_hf y\"\n  shows \"least a = x\"", "lemma leastI2_order:\n  assumes \"x \\<^bold>\\<in> a\"\n    and \"\\<And>y. y \\<^bold>\\<in> a \\<Longrightarrow> Rep_hf x \\<le> Rep_hf y\"\n    and \"\\<And>z. z \\<^bold>\\<in> a \\<Longrightarrow> \\<forall>y. y \\<^bold>\\<in> a \\<longrightarrow> Rep_hf z \\<le> Rep_hf y \\<Longrightarrow> Q z\"\n  shows \"Q (least a)\"", "lemma nonempty_imp_ex_least: \"a \\<noteq> 0 \\<Longrightarrow> \\<exists>x. x \\<^bold>\\<in> a \\<and> (\\<forall>y. y \\<^bold>\\<in> a \\<longrightarrow> Rep_hf x \\<le> Rep_hf y)\"", "lemma least_hmem: \"a \\<noteq> 0 \\<Longrightarrow> least a \\<^bold>\\<in> a\""], "translations": [["", "lemma hadd: \"x @+ y = x \\<squnion> RepFun y (\\<lambda>z. x @+ z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x @+ y = x \\<squnion> RepFun y ((@+) x)", "by (metis def_hmemrec RepFun_ecut hadd_def order_refl)"], ["", "lemma hmem_hadd_E:\n  assumes l: \"l \\<^bold>\\<in> x @+ y\"\n  obtains \"l \\<^bold>\\<in> x\" | z where \"z \\<^bold>\\<in> y\" \"l = x @+ z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<^bold>\\<in> x \\<Longrightarrow> thesis;\n     \\<And>z.\n        \\<lbrakk>z \\<^bold>\\<in> y; l = x @+ z\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using l"], ["proof (prove)\nusing this:\n  l \\<^bold>\\<in> x @+ y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<^bold>\\<in> x \\<Longrightarrow> thesis;\n     \\<And>z.\n        \\<lbrakk>z \\<^bold>\\<in> y; l = x @+ z\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (auto simp: hadd [of x y])"], ["", "lemma hadd_0_right [simp]: \"x @+ 0 = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x @+ 0 = x", "by (subst hadd) simp"], ["", "lemma hadd_hinsert_right: \"x @+ hinsert y z = hinsert (x @+ y) (x @+ z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x @+ (z \\<triangleleft> y) = x @+ z \\<triangleleft> x @+ y", "by (metis hadd hunion_hinsert_right RepFun_hinsert)"], ["", "lemma hadd_succ_right [simp]: \"x @+ succ y = succ (x @+ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x @+ succ y = succ (x @+ y)", "by (metis hadd_hinsert_right succ_def)"], ["", "lemma not_add_less_right: \"\\<not> (x @+ y < x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x @+ y < x", "apply (induct y, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y1 y2.\n       \\<lbrakk>\\<not> x @+ y1 < x; \\<not> x @+ y2 < x;\n        y1 \\<^bold>\\<notin> y2; x @+ (y2 \\<triangleleft> y1) < x\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis less_supI1 hadd order_less_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma not_add_mem_right: \"\\<not> (x @+ y \\<^bold>\\<in> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x @+ y \\<^bold>\\<notin> x", "by (metis hadd hmem_not_refl hunion_iff)"], ["", "lemma hadd_0_left [simp]: \"0 @+ x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 @+ x = x", "by (induct x) (auto simp: hadd_hinsert_right)"], ["", "lemma hadd_succ_left [simp]: \"Ord y \\<Longrightarrow> succ x @+ y = succ (x @+ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord y \\<Longrightarrow> succ x @+ y = succ (x @+ y)", "by (induct y rule: Ord_induct2) auto"], ["", "lemma hadd_assoc: \"(x @+ y) @+ z = x @+ (y @+ z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x @+ y @+ z = x @+ (y @+ z)", "by (induct z) (auto simp: hadd_hinsert_right)"], ["", "lemma RepFun_hadd_disjoint: \"x \\<sqinter> RepFun y ((@+) x) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sqinter> RepFun y ((@+) x) = 0", "by (metis hf_equalityI RepFun_iff hinter_iff not_add_mem_right hmem_hempty)"], ["", "subsection \\<open>Cancellation laws for addition\\<close>"], ["", "lemma Rep_le_Cancel: \"x \\<squnion> RepFun y ((@+) x) \\<le> x \\<squnion> RepFun z ((@+) x)\n                      \\<Longrightarrow> RepFun y ((@+) x) \\<le> RepFun z ((@+) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<squnion> RepFun y ((@+) x)\n    \\<le> x \\<squnion> RepFun z ((@+) x) \\<Longrightarrow>\n    RepFun y ((@+) x) \\<le> RepFun z ((@+) x)", "by (auto simp add: not_add_mem_right)"], ["", "lemma hadd_cancel_right [simp]: \"x @+ y = x @+ z \\<longleftrightarrow> y=z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x @+ y = x @+ z) = (y = z)", "proof (induct y arbitrary: z rule: hmem_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa z.\n       (\\<And>y z.\n           y \\<^bold>\\<in> xa \\<Longrightarrow>\n           (x @+ y = x @+ z) = (y = z)) \\<Longrightarrow>\n       (x @+ xa = x @+ z) = (xa = z)", "case (step y z)"], ["proof (state)\nthis:\n  ?y \\<^bold>\\<in> y \\<Longrightarrow> (x @+ ?y = x @+ ?z) = (?y = ?z)\n\ngoal (1 subgoal):\n 1. \\<And>xa z.\n       (\\<And>y z.\n           y \\<^bold>\\<in> xa \\<Longrightarrow>\n           (x @+ y = x @+ z) = (y = z)) \\<Longrightarrow>\n       (x @+ xa = x @+ z) = (xa = z)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x @+ y = x @+ z) = (y = z)", "proof auto"], ["proof (state)\ngoal (1 subgoal):\n 1. x @+ y = x @+ z \\<Longrightarrow> y = z", "assume eq: \"x @+ y = x @+ z\""], ["proof (state)\nthis:\n  x @+ y = x @+ z\n\ngoal (1 subgoal):\n 1. x @+ y = x @+ z \\<Longrightarrow> y = z", "hence  \"RepFun y ((@+) x) = RepFun z ((@+) x)\""], ["proof (prove)\nusing this:\n  x @+ y = x @+ z\n\ngoal (1 subgoal):\n 1. RepFun y ((@+) x) = RepFun z ((@+) x)", "by (metis hadd Rep_le_Cancel order_antisym order_refl)"], ["proof (state)\nthis:\n  RepFun y ((@+) x) = RepFun z ((@+) x)\n\ngoal (1 subgoal):\n 1. x @+ y = x @+ z \\<Longrightarrow> y = z", "thus  \"y = z\""], ["proof (prove)\nusing this:\n  RepFun y ((@+) x) = RepFun z ((@+) x)\n\ngoal (1 subgoal):\n 1. y = z", "by (metis hf_equalityI RepFun_iff step)"], ["proof (state)\nthis:\n  y = z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x @+ y = x @+ z) = (y = z)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma RepFun_hadd_cancel: \"RepFun y (\\<lambda>z. x @+ z) = RepFun z (\\<lambda>z. x @+ z) \\<longleftrightarrow> y=z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (RepFun y ((@+) x) = RepFun z ((@+) x)) = (y = z)", "by (metis hadd hadd_cancel_right)"], ["", "lemma hadd_hmem_cancel [simp]: \"x @+ y \\<^bold>\\<in> x @+ z \\<longleftrightarrow> y \\<^bold>\\<in> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x @+ y \\<^bold>\\<in> x @+ z) = (y \\<^bold>\\<in> z)", "apply (auto simp: hadd [of _ y] hadd [of _ z] not_add_mem_right)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<squnion> RepFun y ((@+) x) \\<^bold>\\<in> x \\<Longrightarrow>\n    y \\<^bold>\\<in> z\n 2. \\<And>u.\n       \\<lbrakk>u \\<^bold>\\<in> z;\n        x \\<squnion> RepFun y ((@+) x) = x @+ u\\<rbrakk>\n       \\<Longrightarrow> y \\<^bold>\\<in> z", "apply (metis hmem_not_refl hunion_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>u \\<^bold>\\<in> z;\n        x \\<squnion> RepFun y ((@+) x) = x @+ u\\<rbrakk>\n       \\<Longrightarrow> y \\<^bold>\\<in> z", "apply (metis hadd hadd_cancel_right)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ord_of_add: \"ord_of (i+j) = ord_of i @+ ord_of j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_of (i + j) = ord_of i @+ ord_of j", "by (induct j) auto"], ["", "lemma Ord_hadd: \"Ord x \\<Longrightarrow> Ord y \\<Longrightarrow> Ord (x @+ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord x; Ord y\\<rbrakk> \\<Longrightarrow> Ord (x @+ y)", "by (induct x rule: Ord_induct2) auto"], ["", "lemma hmem_self_hadd [simp]: \"k1 \\<^bold>\\<in> k1 @+ k2 \\<longleftrightarrow> 0 \\<^bold>\\<in> k2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (k1 \\<^bold>\\<in> k1 @+ k2) = (0 \\<^bold>\\<in> k2)", "by (metis hadd_0_right hadd_hmem_cancel)"], ["", "lemma hadd_commute: \"Ord x \\<Longrightarrow> Ord y \\<Longrightarrow> x @+ y = y @+ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord x; Ord y\\<rbrakk> \\<Longrightarrow> x @+ y = y @+ x", "by (induct x rule: Ord_induct2) auto"], ["", "lemma hadd_cancel_left [simp]: \"Ord x \\<Longrightarrow> y @+ x = z @+ x \\<longleftrightarrow> y=z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord x \\<Longrightarrow> (y @+ x = z @+ x) = (y = z)", "by (induct x rule: Ord_induct2) auto"], ["", "subsection \\<open>The predecessor function\\<close>"], ["", "definition pred :: \"hf \\<Rightarrow> hf\"\n  where \"pred x \\<equiv> (THE y. succ y = x \\<or> x=0 \\<and> y=0)\""], ["", "lemma pred_succ [simp]: \"pred (succ x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred (succ x) = x", "by (simp add: pred_def)"], ["", "lemma pred_0 [simp]: \"pred 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pred 0 = 0", "by (simp add: pred_def)"], ["", "lemma succ_pred [simp]: \"Ord x \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> succ (pred x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord x; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> succ (pred x) = x", "by (metis Ord_cases pred_succ)"], ["", "lemma pred_mem [simp]: \"Ord x \\<Longrightarrow> x \\<noteq> 0 \\<Longrightarrow> pred x \\<^bold>\\<in> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord x; x \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> pred x \\<^bold>\\<in> x", "by (metis succ_iff succ_pred)"], ["", "lemma Ord_pred [simp]: \"Ord x \\<Longrightarrow> Ord (pred x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord x \\<Longrightarrow> Ord (pred x)", "by (metis Ord_in_Ord pred_0 pred_mem)"], ["", "lemma hadd_pred_right: \"Ord y \\<Longrightarrow> y \\<noteq> 0 \\<Longrightarrow> x @+ pred y = pred (x @+ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord y; y \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> x @+ pred y = pred (x @+ y)", "by (metis hadd_succ_right pred_succ succ_pred)"], ["", "lemma Ord_pred_HUnion: \"Ord(k) \\<Longrightarrow> pred k = \\<Squnion>k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord k \\<Longrightarrow> pred k = \\<Squnion>k", "by (metis HUnion_hempty Ordinal.Ord_pred pred_0 pred_succ)"], ["", "section \\<open>A Concatentation Operation for Sequences\\<close>"], ["", "definition shift :: \"hf \\<Rightarrow> hf \\<Rightarrow> hf\"\n  where \"shift f delta = \\<lbrace>v . u \\<^bold>\\<in> f, \\<exists>n y. u = \\<langle>n, y\\<rangle> \\<and> v = \\<langle>delta @+ n, y\\<rangle>\\<rbrace>\""], ["", "lemma shiftD: \"x \\<^bold>\\<in> shift f delta \\<Longrightarrow> \\<exists>u. u \\<^bold>\\<in> f \\<and> x = \\<langle>delta @+ hfst u, hsnd u\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<^bold>\\<in> shift f delta \\<Longrightarrow>\n    \\<exists>u.\n       u \\<^bold>\\<in> f \\<and>\n       x = \\<langle>delta @+ hfst u, hsnd u\\<rangle>", "by (auto simp: shift_def hsplit_def)"], ["", "lemma hmem_shift_iff: \"\\<langle>m, y\\<rangle> \\<^bold>\\<in> shift f delta \\<longleftrightarrow> (\\<exists>n. m = delta @+ n \\<and> \\<langle>n, y\\<rangle> \\<^bold>\\<in> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<langle>m, y\\<rangle> \\<^bold>\\<in> shift f delta) =\n    (\\<exists>n.\n        m = delta @+ n \\<and> \\<langle>n, y\\<rangle> \\<^bold>\\<in> f)", "by (auto simp: shift_def hrelation_def is_hpair_def)"], ["", "lemma hmem_shift_add_iff [simp]: \"\\<langle>delta @+ n, y\\<rangle> \\<^bold>\\<in> shift f delta \\<longleftrightarrow> \\<langle>n, y\\<rangle> \\<^bold>\\<in> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<langle>delta @+ n, y\\<rangle> \\<^bold>\\<in> shift f delta) =\n    (\\<langle>n, y\\<rangle> \\<^bold>\\<in> f)", "by (metis hadd_cancel_right hmem_shift_iff)"], ["", "lemma hrelation_shift [simp]: \"hrelation (shift f delta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hrelation (shift f delta)", "by (auto simp: shift_def hrelation_def hsplit_def)"], ["", "lemma app_shift [simp]: \"app (shift f k) (k @+ j) = app f j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. app (shift f k) (k @+ j) = app f j", "by (simp add: app_def)"], ["", "lemma hfunction_shift_iff [simp]: \"hfunction (shift f delta) = hfunction f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hfunction (shift f delta) = hfunction f", "by (auto simp: hfunction_def hmem_shift_iff)"], ["", "lemma hdomain_shift_add: \"hdomain (shift f delta) = \\<lbrace>delta @+ n . n \\<^bold>\\<in> hdomain f\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hdomain (shift f delta) = RepFun (hdomain f) ((@+) delta)", "by  (rule hf_equalityI) (force simp add: hdomain_def hmem_shift_iff)"], ["", "lemma hdomain_shift_disjoint: \"delta \\<sqinter> hdomain (shift f delta) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delta \\<sqinter> hdomain (shift f delta) = 0", "by (auto simp: hdomain_def intro!: hf_equalityI)\n     (metis shiftD hpair_inject not_add_mem_right)"], ["", "definition seq_append :: \"hf \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> hf\"\n  where \"seq_append k f g \\<equiv> hrestrict f k \\<squnion> shift g k\""], ["", "lemma hrelation_seq_append [simp]: \"hrelation (seq_append k f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hrelation (seq_append k f g)", "by (simp add: seq_append_def)"], ["", "lemma Seq_append: \"Seq s1 k1 \\<Longrightarrow> Seq s2 k2 \\<Longrightarrow> Seq (seq_append k1 s1 s2) (k1 @+ k2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s1 k1; Seq s2 k2\\<rbrakk>\n    \\<Longrightarrow> Seq (seq_append k1 s1 s2) (k1 @+ k2)", "apply (auto simp: Seq_def seq_append_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>hrelation s1; hrelation s2; hfunction s1; k1 \\<le> hdomain s1;\n     hfunction s2; k2 \\<le> hdomain s2\\<rbrakk>\n    \\<Longrightarrow> hfunction (hrestrict s1 k1 \\<squnion> shift s2 k1)\n 2. \\<And>x.\n       \\<lbrakk>hrelation s1; hrelation s2; hfunction s1;\n        k1 \\<le> hdomain s1; hfunction s2; k2 \\<le> hdomain s2;\n        x \\<^bold>\\<in> k1 @+ k2;\n        x \\<^bold>\\<notin> hdomain (shift s2 k1)\\<rbrakk>\n       \\<Longrightarrow> x \\<^bold>\\<in> hdomain s1\n 3. \\<And>x.\n       \\<lbrakk>hrelation s1; hrelation s2; hfunction s1;\n        k1 \\<le> hdomain s1; hfunction s2; k2 \\<le> hdomain s2;\n        x \\<^bold>\\<in> k1 @+ k2;\n        x \\<^bold>\\<notin> hdomain (shift s2 k1)\\<rbrakk>\n       \\<Longrightarrow> x \\<^bold>\\<in> k1", "apply (metis hdomain_restr hdomain_shift_disjoint hfunction_hunion hfunction_restr hfunction_shift_iff inf_absorb2 seq_append_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>hrelation s1; hrelation s2; hfunction s1;\n        k1 \\<le> hdomain s1; hfunction s2; k2 \\<le> hdomain s2;\n        x \\<^bold>\\<in> k1 @+ k2;\n        x \\<^bold>\\<notin> hdomain (shift s2 k1)\\<rbrakk>\n       \\<Longrightarrow> x \\<^bold>\\<in> hdomain s1\n 2. \\<And>x.\n       \\<lbrakk>hrelation s1; hrelation s2; hfunction s1;\n        k1 \\<le> hdomain s1; hfunction s2; k2 \\<le> hdomain s2;\n        x \\<^bold>\\<in> k1 @+ k2;\n        x \\<^bold>\\<notin> hdomain (shift s2 k1)\\<rbrakk>\n       \\<Longrightarrow> x \\<^bold>\\<in> k1", "apply (simp add: hdomain_shift_add)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>hrelation s1; hrelation s2; hfunction s1;\n        k1 \\<le> hdomain s1; hfunction s2; k2 \\<le> hdomain s2;\n        x \\<^bold>\\<in> k1 @+ k2;\n        \\<forall>u.\n           u \\<^bold>\\<in> hdomain s2 \\<longrightarrow>\n           x \\<noteq> k1 @+ u\\<rbrakk>\n       \\<Longrightarrow> x \\<^bold>\\<in> hdomain s1\n 2. \\<And>x.\n       \\<lbrakk>hrelation s1; hrelation s2; hfunction s1;\n        k1 \\<le> hdomain s1; hfunction s2; k2 \\<le> hdomain s2;\n        x \\<^bold>\\<in> k1 @+ k2;\n        x \\<^bold>\\<notin> hdomain (shift s2 k1)\\<rbrakk>\n       \\<Longrightarrow> x \\<^bold>\\<in> k1", "apply (metis hmem_hadd_E rev_hsubsetD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>hrelation s1; hrelation s2; hfunction s1;\n        k1 \\<le> hdomain s1; hfunction s2; k2 \\<le> hdomain s2;\n        x \\<^bold>\\<in> k1 @+ k2;\n        x \\<^bold>\\<notin> hdomain (shift s2 k1)\\<rbrakk>\n       \\<Longrightarrow> x \\<^bold>\\<in> k1", "apply (erule hmem_hadd_E, assumption, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>hrelation s1; hrelation s2; hfunction s1;\n        k1 \\<le> hdomain s1; hfunction s2; k2 \\<le> hdomain s2;\n        k1 @+ z \\<^bold>\\<notin> hdomain (shift s2 k1);\n        z \\<^bold>\\<in> k2\\<rbrakk>\n       \\<Longrightarrow> k1 @+ z \\<^bold>\\<in> k1", "apply (metis Seq_def Seq_iff_app hdomainI hmem_shift_add_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma app_hunion1: \"x \\<^bold>\\<notin> hdomain g \\<Longrightarrow> app (f \\<squnion> g) x = app f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<^bold>\\<notin> hdomain g \\<Longrightarrow>\n    app (f \\<squnion> g) x = app f x", "by (auto simp: app_def) (metis hdomainI)"], ["", "lemma app_hunion2: \"x \\<^bold>\\<notin> hdomain f \\<Longrightarrow> app (f \\<squnion> g) x = app g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<^bold>\\<notin> hdomain f \\<Longrightarrow>\n    app (f \\<squnion> g) x = app g x", "by (auto simp: app_def) (metis hdomainI)"], ["", "lemma Seq_append_app1: \"Seq s k \\<Longrightarrow> l \\<^bold>\\<in> k \\<Longrightarrow> app (seq_append k s s') l = app s l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s k; l \\<^bold>\\<in> k\\<rbrakk>\n    \\<Longrightarrow> app (seq_append k s s') l = app s l", "apply (auto simp: Seq_def seq_append_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<^bold>\\<in> k; hrelation s; hfunction s;\n     k \\<le> hdomain s\\<rbrakk>\n    \\<Longrightarrow> app (hrestrict s k \\<squnion> shift s' k) l = app s l", "apply (metis app_hunion1 hdomain_shift_disjoint hemptyE hinter_iff app_hrestrict)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Seq_append_app2: \"Seq s1 k1 \\<Longrightarrow> Seq s2 k2 \\<Longrightarrow> l = k1 @+ j \\<Longrightarrow> app (seq_append k1 s1 s2) l = app s2 j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s1 k1; Seq s2 k2; l = k1 @+ j\\<rbrakk>\n    \\<Longrightarrow> app (seq_append k1 s1 s2) l = app s2 j", "by (metis seq_append_def app_hunion2 app_shift hdomain_restr hinter_iff not_add_mem_right)"], ["", "section \\<open>Nonempty sequences indexed by ordinals\\<close>"], ["", "definition OrdDom where\n \"OrdDom r \\<equiv> \\<forall>x y. \\<langle>x,y\\<rangle> \\<^bold>\\<in> r \\<longrightarrow> Ord x\""], ["", "lemma OrdDom_insf: \"\\<lbrakk>OrdDom s; Ord k\\<rbrakk> \\<Longrightarrow> OrdDom (insf s (succ k) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>OrdDom s; Ord k\\<rbrakk>\n    \\<Longrightarrow> OrdDom (insf s (succ k) y)", "by (auto simp: insf_def OrdDom_def)"], ["", "lemma OrdDom_hunion [simp]: \"OrdDom (s1 \\<squnion> s2) \\<longleftrightarrow> OrdDom s1 \\<and> OrdDom s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdDom (s1 \\<squnion> s2) = (OrdDom s1 \\<and> OrdDom s2)", "by (auto simp: OrdDom_def)"], ["", "lemma OrdDom_hrestrict: \"OrdDom s \\<Longrightarrow> OrdDom (hrestrict s A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OrdDom s \\<Longrightarrow> OrdDom (hrestrict s A)", "by (auto simp: OrdDom_def)"], ["", "lemma OrdDom_shift: \"\\<lbrakk>OrdDom s; Ord k\\<rbrakk> \\<Longrightarrow> OrdDom (shift s k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>OrdDom s; Ord k\\<rbrakk> \\<Longrightarrow> OrdDom (shift s k)", "by (auto simp: OrdDom_def shift_def Ord_hadd)"], ["", "text \\<open>A sequence of positive length ending with @{term y}\\<close>"], ["", "definition LstSeq :: \"hf \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> bool\"\n  where \"LstSeq s k y \\<equiv> Seq s (succ k) \\<and> Ord k \\<and> \\<langle>k,y\\<rangle> \\<^bold>\\<in> s \\<and> OrdDom s\""], ["", "lemma LstSeq_imp_Seq_succ: \"LstSeq s k y \\<Longrightarrow> Seq s (succ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LstSeq s k y \\<Longrightarrow> Seq s (succ k)", "by (metis LstSeq_def)"], ["", "lemma LstSeq_imp_Seq_same: \"LstSeq s k y \\<Longrightarrow> Seq s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LstSeq s k y \\<Longrightarrow> Seq s k", "by (metis LstSeq_imp_Seq_succ Seq_succ_D)"], ["", "lemma LstSeq_imp_Ord: \"LstSeq s k y \\<Longrightarrow> Ord k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LstSeq s k y \\<Longrightarrow> Ord k", "by (metis LstSeq_def)"], ["", "lemma LstSeq_trunc: \"LstSeq s k y \\<Longrightarrow> l \\<^bold>\\<in> k \\<Longrightarrow> LstSeq s l (app s l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LstSeq s k y; l \\<^bold>\\<in> k\\<rbrakk>\n    \\<Longrightarrow> LstSeq s l (app s l)", "apply (auto simp: LstSeq_def Seq_iff_app)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>l \\<^bold>\\<in> k; Seq s (succ k); Ord k; OrdDom s;\n     y = app s k\\<rbrakk>\n    \\<Longrightarrow> Seq s (succ l)\n 2. \\<lbrakk>l \\<^bold>\\<in> k; Seq s (succ k); Ord k; OrdDom s;\n     y = app s k\\<rbrakk>\n    \\<Longrightarrow> Ord l", "apply (metis Ord_succ Seq_Ord_D mem_succ_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<^bold>\\<in> k; Seq s (succ k); Ord k; OrdDom s;\n     y = app s k\\<rbrakk>\n    \\<Longrightarrow> Ord l", "apply (metis Ord_in_Ord)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma LstSeq_insf: \"LstSeq s k z \\<Longrightarrow> LstSeq (insf s (succ k) y) (succ k) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LstSeq s k z \\<Longrightarrow> LstSeq (insf s (succ k) y) (succ k) y", "by (metis OrdDom_insf LstSeq_def Ord_succ_iff Seq_imp_eq_app Seq_insf Seq_succ_iff app_insf_Seq)"], ["", "lemma app_insf_LstSeq: \"LstSeq s k z \\<Longrightarrow> app (insf s (succ k) y) (succ k) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LstSeq s k z \\<Longrightarrow> app (insf s (succ k) y) (succ k) = y", "by (metis LstSeq_imp_Seq_succ app_insf_Seq)"], ["", "lemma app_insf2_LstSeq: \"LstSeq s k z \\<Longrightarrow> k' \\<noteq> succ k \\<Longrightarrow> app (insf s (succ k) y) k' = app s k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LstSeq s k z; k' \\<noteq> succ k\\<rbrakk>\n    \\<Longrightarrow> app (insf s (succ k) y) k' = app s k'", "by (metis LstSeq_imp_Seq_succ app_insf2_Seq)"], ["", "lemma app_insf_LstSeq_if: \"LstSeq s k z \\<Longrightarrow> app (insf s (succ k) y) k' = (if k' = succ k then y else app s k')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LstSeq s k z \\<Longrightarrow>\n    app (insf s (succ k) y) k' = (if k' = succ k then y else app s k')", "by (metis app_insf2_LstSeq app_insf_LstSeq)"], ["", "lemma LstSeq_append_app1:\n  \"LstSeq s k y \\<Longrightarrow> l \\<^bold>\\<in> succ k \\<Longrightarrow> app (seq_append (succ k) s s') l = app s l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LstSeq s k y; l \\<^bold>\\<in> succ k\\<rbrakk>\n    \\<Longrightarrow> app (seq_append (succ k) s s') l = app s l", "by (metis LstSeq_imp_Seq_succ Seq_append_app1)"], ["", "lemma LstSeq_append_app2:\n  \"\\<lbrakk>LstSeq s1 k1 y1; LstSeq s2 k2 y2; l = succ k1 @+ j\\<rbrakk>\n   \\<Longrightarrow> app (seq_append (succ k1) s1 s2) l = app s2 j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LstSeq s1 k1 y1; LstSeq s2 k2 y2; l = succ k1 @+ j\\<rbrakk>\n    \\<Longrightarrow> app (seq_append (succ k1) s1 s2) l = app s2 j", "by (metis LstSeq_imp_Seq_succ Seq_append_app2)"], ["", "lemma Seq_append_pair:\n  \"\\<lbrakk>Seq s1 k1; Seq s2 (succ n);  \\<langle>n, y\\<rangle> \\<^bold>\\<in> s2; Ord n\\<rbrakk> \\<Longrightarrow> \\<langle>k1 @+ n, y\\<rangle> \\<^bold>\\<in> (seq_append k1 s1 s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s1 k1; Seq s2 (succ n);\n     \\<langle>n, y\\<rangle> \\<^bold>\\<in> s2; Ord n\\<rbrakk>\n    \\<Longrightarrow> \\<langle>k1 @+ n, y\\<rangle> \\<^bold>\\<in>\n                      seq_append k1 s1 s2", "by (metis hmem_shift_add_iff hunion_iff seq_append_def)"], ["", "lemma Seq_append_OrdDom: \"\\<lbrakk>Ord k; OrdDom s1; OrdDom s2\\<rbrakk> \\<Longrightarrow> OrdDom (seq_append k s1 s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord k; OrdDom s1; OrdDom s2\\<rbrakk>\n    \\<Longrightarrow> OrdDom (seq_append k s1 s2)", "by (auto simp: seq_append_def OrdDom_hrestrict OrdDom_shift)"], ["", "lemma LstSeq_append:\n  \"\\<lbrakk>LstSeq s1 k1 y1; LstSeq s2 k2 y2\\<rbrakk> \\<Longrightarrow> LstSeq (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LstSeq s1 k1 y1; LstSeq s2 k2 y2\\<rbrakk>\n    \\<Longrightarrow> LstSeq (seq_append (succ k1) s1 s2) (succ (k1 @+ k2))\n                       y2", "apply (auto simp: LstSeq_def Seq_append Ord_hadd Seq_append_pair)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Seq s1 (succ k1); Seq s2 (succ k2); Ord k1; Ord k2;\n     \\<langle>k1, y1\\<rangle> \\<^bold>\\<in> s1; OrdDom s1;\n     \\<langle>k2, y2\\<rangle> \\<^bold>\\<in> s2; OrdDom s2\\<rbrakk>\n    \\<Longrightarrow> Seq (seq_append (succ k1) s1 s2)\n                       (succ (succ (k1 @+ k2)))\n 2. \\<lbrakk>Seq s1 (succ k1); Seq s2 (succ k2); Ord k1; Ord k2;\n     \\<langle>k1, y1\\<rangle> \\<^bold>\\<in> s1; OrdDom s1;\n     \\<langle>k2, y2\\<rangle> \\<^bold>\\<in> s2; OrdDom s2\\<rbrakk>\n    \\<Longrightarrow> \\<langle>succ (k1 @+ k2), y2\\<rangle> \\<^bold>\\<in>\n                      seq_append (succ k1) s1 s2\n 3. \\<lbrakk>Seq s1 (succ k1); Seq s2 (succ k2); Ord k1; Ord k2;\n     \\<langle>k1, y1\\<rangle> \\<^bold>\\<in> s1; OrdDom s1;\n     \\<langle>k2, y2\\<rangle> \\<^bold>\\<in> s2; OrdDom s2\\<rbrakk>\n    \\<Longrightarrow> OrdDom (seq_append (succ k1) s1 s2)", "apply (metis Seq_append hadd_succ_left hadd_succ_right)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Seq s1 (succ k1); Seq s2 (succ k2); Ord k1; Ord k2;\n     \\<langle>k1, y1\\<rangle> \\<^bold>\\<in> s1; OrdDom s1;\n     \\<langle>k2, y2\\<rangle> \\<^bold>\\<in> s2; OrdDom s2\\<rbrakk>\n    \\<Longrightarrow> \\<langle>succ (k1 @+ k2), y2\\<rangle> \\<^bold>\\<in>\n                      seq_append (succ k1) s1 s2\n 2. \\<lbrakk>Seq s1 (succ k1); Seq s2 (succ k2); Ord k1; Ord k2;\n     \\<langle>k1, y1\\<rangle> \\<^bold>\\<in> s1; OrdDom s1;\n     \\<langle>k2, y2\\<rangle> \\<^bold>\\<in> s2; OrdDom s2\\<rbrakk>\n    \\<Longrightarrow> OrdDom (seq_append (succ k1) s1 s2)", "apply (metis Seq_append_pair hadd_succ_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s1 (succ k1); Seq s2 (succ k2); Ord k1; Ord k2;\n     \\<langle>k1, y1\\<rangle> \\<^bold>\\<in> s1; OrdDom s1;\n     \\<langle>k2, y2\\<rangle> \\<^bold>\\<in> s2; OrdDom s2\\<rbrakk>\n    \\<Longrightarrow> OrdDom (seq_append (succ k1) s1 s2)", "apply (metis Ord_succ Seq_append_OrdDom)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma LstSeq_app [simp]: \"LstSeq s k y \\<Longrightarrow> app s k = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LstSeq s k y \\<Longrightarrow> app s k = y", "by (metis LstSeq_def Seq_imp_eq_app)"], ["", "subsection \\<open>Sequence-building operators\\<close>"], ["", "definition Builds :: \"(hf \\<Rightarrow> bool) \\<Rightarrow> (hf \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> bool) \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> bool\"\n  where \"Builds B C s l \\<equiv> B (app s l) \\<or> (\\<exists>m \\<^bold>\\<in> l. \\<exists>n \\<^bold>\\<in> l. C (app s l) (app s m) (app s n))\""], ["", "definition BuildSeq :: \"(hf \\<Rightarrow> bool) \\<Rightarrow> (hf \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> bool) \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> bool\"\n  where \"BuildSeq B C s k y \\<equiv> LstSeq s k y \\<and> (\\<forall>l \\<^bold>\\<in> succ k. Builds B C s l)\""], ["", "lemma BuildSeqI: \"LstSeq s k y \\<Longrightarrow> (\\<And>l. l \\<^bold>\\<in> succ k \\<Longrightarrow> Builds B C s l) \\<Longrightarrow> BuildSeq B C s k y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LstSeq s k y;\n     \\<And>l.\n        l \\<^bold>\\<in> succ k \\<Longrightarrow> Builds B C s l\\<rbrakk>\n    \\<Longrightarrow> BuildSeq B C s k y", "by (simp add: BuildSeq_def)"], ["", "lemma BuildSeq_imp_LstSeq: \"BuildSeq B C s k y \\<Longrightarrow> LstSeq s k y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq B C s k y \\<Longrightarrow> LstSeq s k y", "by (metis BuildSeq_def)"], ["", "lemma BuildSeq_imp_Seq: \"BuildSeq B C s k y \\<Longrightarrow> Seq s (succ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq B C s k y \\<Longrightarrow> Seq s (succ k)", "by (metis LstSeq_imp_Seq_succ BuildSeq_imp_LstSeq)"], ["", "lemma BuildSeq_conj_distrib:\n \"BuildSeq (\\<lambda>x. B x \\<and> P x) (\\<lambda>x y z. C x y z \\<and> P x) s k y \\<longleftrightarrow>\n  BuildSeq B C s k y \\<and> (\\<forall>l \\<^bold>\\<in> succ k. P (app s l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq (\\<lambda>x. B x \\<and> P x)\n     (\\<lambda>x y z. C x y z \\<and> P x) s k y =\n    (BuildSeq B C s k y \\<and> (\\<forall>l\\<^bold>\\<in>succ k. P (app s l)))", "by (auto simp: BuildSeq_def Builds_def)"], ["", "lemma BuildSeq_mono:\n  assumes y: \"BuildSeq B C s k y\"\n      and B: \"\\<And>x. B x \\<Longrightarrow> B' x\" and C: \"\\<And>x y z. C x y z \\<Longrightarrow> C' x y z\"\n  shows \"BuildSeq B' C' s k y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq B' C' s k y", "using y"], ["proof (prove)\nusing this:\n  BuildSeq B C s k y\n\ngoal (1 subgoal):\n 1. BuildSeq B' C' s k y", "by (auto simp: BuildSeq_def Builds_def intro!: B C)"], ["", "lemma BuildSeq_trunc:\n  assumes b: \"BuildSeq B C s k y\"\n      and l: \"l \\<^bold>\\<in> k\"\n  shows \"BuildSeq B C s l (app s l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq B C s l (app s l)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BuildSeq B C s l (app s l)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. BuildSeq B C s l (app s l)", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. BuildSeq B C s l (app s l)", "assume j: \"j \\<^bold>\\<in> succ l\""], ["proof (state)\nthis:\n  j \\<^bold>\\<in> succ l\n\ngoal (1 subgoal):\n 1. BuildSeq B C s l (app s l)", "have k: \"Ord k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord k", "by (metis BuildSeq_imp_LstSeq LstSeq_def b)"], ["proof (state)\nthis:\n  Ord k\n\ngoal (1 subgoal):\n 1. BuildSeq B C s l (app s l)", "hence \"Builds B C s j\""], ["proof (prove)\nusing this:\n  Ord k\n\ngoal (1 subgoal):\n 1. Builds B C s j", "by (metis BuildSeq_def OrdmemD b hballE hsubsetD j l succ_iff)"], ["proof (state)\nthis:\n  Builds B C s j\n\ngoal (1 subgoal):\n 1. BuildSeq B C s l (app s l)", "}"], ["proof (state)\nthis:\n  ?j2 \\<^bold>\\<in> succ l \\<Longrightarrow> Builds B C s ?j2\n\ngoal (1 subgoal):\n 1. BuildSeq B C s l (app s l)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?j2 \\<^bold>\\<in> succ l \\<Longrightarrow> Builds B C s ?j2\n\ngoal (1 subgoal):\n 1. BuildSeq B C s l (app s l)", "using b l"], ["proof (prove)\nusing this:\n  ?j2 \\<^bold>\\<in> succ l \\<Longrightarrow> Builds B C s ?j2\n  BuildSeq B C s k y\n  l \\<^bold>\\<in> k\n\ngoal (1 subgoal):\n 1. BuildSeq B C s l (app s l)", "by (auto simp: BuildSeq_def LstSeq_trunc)"], ["proof (state)\nthis:\n  BuildSeq B C s l (app s l)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Showing that Sequences can be Constructed\\<close>"], ["", "lemma Builds_insf: \"Builds B C s l \\<Longrightarrow> LstSeq s k z \\<Longrightarrow> l \\<^bold>\\<in> succ k \\<Longrightarrow> Builds B C (insf s (succ k) y) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Builds B C s l; LstSeq s k z; l \\<^bold>\\<in> succ k\\<rbrakk>\n    \\<Longrightarrow> Builds B C (insf s (succ k) y) l", "by (auto simp: HBall_def hmem_not_refl Builds_def app_insf_LstSeq_if simp del: succ_iff)\n   (metis hmem_not_sym)"], ["", "lemma BuildSeq_insf:\n  assumes b: \"BuildSeq B C s k z\"\n      and m: \"m \\<^bold>\\<in> succ k\"\n      and n: \"n \\<^bold>\\<in> succ k\"\n      and y: \"B y \\<or> C y (app s m) (app s n)\"\nshows \"BuildSeq B C (insf s (succ k) y) (succ k) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq B C (insf s (succ k) y) (succ k) y", "proof (rule BuildSeqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. LstSeq (insf s (succ k) y) (succ k) y\n 2. \\<And>l.\n       l \\<^bold>\\<in> succ (succ k) \\<Longrightarrow>\n       Builds B C (insf s (succ k) y) l", "show \"LstSeq (insf s (succ k) y) (succ k) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LstSeq (insf s (succ k) y) (succ k) y", "by (metis BuildSeq_imp_LstSeq LstSeq_insf b)"], ["proof (state)\nthis:\n  LstSeq (insf s (succ k) y) (succ k) y\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<^bold>\\<in> succ (succ k) \\<Longrightarrow>\n       Builds B C (insf s (succ k) y) l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<^bold>\\<in> succ (succ k) \\<Longrightarrow>\n       Builds B C (insf s (succ k) y) l", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<^bold>\\<in> succ (succ k) \\<Longrightarrow>\n       Builds B C (insf s (succ k) y) l", "assume l: \"l \\<^bold>\\<in> succ (succ k)\""], ["proof (state)\nthis:\n  l \\<^bold>\\<in> succ (succ k)\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<^bold>\\<in> succ (succ k) \\<Longrightarrow>\n       Builds B C (insf s (succ k) y) l", "thus \"Builds B C (insf s (succ k) y) l\""], ["proof (prove)\nusing this:\n  l \\<^bold>\\<in> succ (succ k)\n\ngoal (1 subgoal):\n 1. Builds B C (insf s (succ k) y) l", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. l = succ k \\<Longrightarrow> Builds B C (insf s (succ k) y) l\n 2. l \\<^bold>\\<in> succ k \\<Longrightarrow>\n    Builds B C (insf s (succ k) y) l", "assume l: \"l = succ k\""], ["proof (state)\nthis:\n  l = succ k\n\ngoal (2 subgoals):\n 1. l = succ k \\<Longrightarrow> Builds B C (insf s (succ k) y) l\n 2. l \\<^bold>\\<in> succ k \\<Longrightarrow>\n    Builds B C (insf s (succ k) y) l", "have \"B (app (insf s l y) l) \\<or> C (app (insf s l y) l) (app (insf s l y) m) (app (insf s l y) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B (app (insf s l y) l) \\<or>\n    C (app (insf s l y) l) (app (insf s l y) m) (app (insf s l y) n)", "by (metis BuildSeq_imp_Seq app_insf_Seq_if b hmem_not_refl l m n y)"], ["proof (state)\nthis:\n  B (app (insf s l y) l) \\<or>\n  C (app (insf s l y) l) (app (insf s l y) m) (app (insf s l y) n)\n\ngoal (2 subgoals):\n 1. l = succ k \\<Longrightarrow> Builds B C (insf s (succ k) y) l\n 2. l \\<^bold>\\<in> succ k \\<Longrightarrow>\n    Builds B C (insf s (succ k) y) l", "thus \"Builds B C (insf s (succ k) y) l\""], ["proof (prove)\nusing this:\n  B (app (insf s l y) l) \\<or>\n  C (app (insf s l y) l) (app (insf s l y) m) (app (insf s l y) n)\n\ngoal (1 subgoal):\n 1. Builds B C (insf s (succ k) y) l", "using m n"], ["proof (prove)\nusing this:\n  B (app (insf s l y) l) \\<or>\n  C (app (insf s l y) l) (app (insf s l y) m) (app (insf s l y) n)\n  m \\<^bold>\\<in> succ k\n  n \\<^bold>\\<in> succ k\n\ngoal (1 subgoal):\n 1. Builds B C (insf s (succ k) y) l", "by (auto simp: Builds_def l)"], ["proof (state)\nthis:\n  Builds B C (insf s (succ k) y) l\n\ngoal (1 subgoal):\n 1. l \\<^bold>\\<in> succ k \\<Longrightarrow>\n    Builds B C (insf s (succ k) y) l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<^bold>\\<in> succ k \\<Longrightarrow>\n    Builds B C (insf s (succ k) y) l", "assume l: \"l \\<^bold>\\<in> succ k\""], ["proof (state)\nthis:\n  l \\<^bold>\\<in> succ k\n\ngoal (1 subgoal):\n 1. l \\<^bold>\\<in> succ k \\<Longrightarrow>\n    Builds B C (insf s (succ k) y) l", "have  \"LstSeq s k z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LstSeq s k z", "by (metis BuildSeq_imp_LstSeq b)"], ["proof (state)\nthis:\n  LstSeq s k z\n\ngoal (1 subgoal):\n 1. l \\<^bold>\\<in> succ k \\<Longrightarrow>\n    Builds B C (insf s (succ k) y) l", "thus \"Builds B C (insf s (succ k) y) l\""], ["proof (prove)\nusing this:\n  LstSeq s k z\n\ngoal (1 subgoal):\n 1. Builds B C (insf s (succ k) y) l", "using b l"], ["proof (prove)\nusing this:\n  LstSeq s k z\n  BuildSeq B C s k z\n  l \\<^bold>\\<in> succ k\n\ngoal (1 subgoal):\n 1. Builds B C (insf s (succ k) y) l", "by (metis hballE Builds_insf BuildSeq_def)"], ["proof (state)\nthis:\n  Builds B C (insf s (succ k) y) l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Builds B C (insf s (succ k) y) l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma BuildSeq_insf1:\n  assumes b: \"BuildSeq B C s k z\"\n      and y: \"B y\"\n  shows \"BuildSeq B C (insf s (succ k) y) (succ k) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq B C (insf s (succ k) y) (succ k) y", "by (metis BuildSeq_insf b succ_iff y)"], ["", "lemma BuildSeq_insf2:\n  assumes b: \"BuildSeq B C s k z\"\n      and m: \"m \\<^bold>\\<in> k\"\n      and n: \"n \\<^bold>\\<in> k\"\n      and y: \"C y (app s m) (app s n)\"\n  shows \"BuildSeq B C (insf s (succ k) y) (succ k) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq B C (insf s (succ k) y) (succ k) y", "by (metis BuildSeq_insf b m n succ_iff y)"], ["", "lemma BuildSeq_append:\n  assumes s1: \"BuildSeq B C s1 k1 y1\" and s2: \"BuildSeq B C s2 k2 y2\"\n  shows \"BuildSeq B C (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq B C (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2", "proof (rule BuildSeqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. LstSeq (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2\n 2. \\<And>l.\n       l \\<^bold>\\<in> succ (succ (k1 @+ k2)) \\<Longrightarrow>\n       Builds B C (seq_append (succ k1) s1 s2) l", "show \"LstSeq (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LstSeq (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2", "using assms"], ["proof (prove)\nusing this:\n  BuildSeq B C s1 k1 y1\n  BuildSeq B C s2 k2 y2\n\ngoal (1 subgoal):\n 1. LstSeq (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2", "by (metis BuildSeq_imp_LstSeq LstSeq_append)"], ["proof (state)\nthis:\n  LstSeq (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<^bold>\\<in> succ (succ (k1 @+ k2)) \\<Longrightarrow>\n       Builds B C (seq_append (succ k1) s1 s2) l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<^bold>\\<in> succ (succ (k1 @+ k2)) \\<Longrightarrow>\n       Builds B C (seq_append (succ k1) s1 s2) l", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<^bold>\\<in> succ (succ (k1 @+ k2)) \\<Longrightarrow>\n       Builds B C (seq_append (succ k1) s1 s2) l", "have s1L: \"LstSeq s1 k1 y1\"\n   and s1BC: \"\\<And>l. l \\<^bold>\\<in> succ k1 \\<Longrightarrow> Builds B C s1 l\"\n   and s2L: \"LstSeq s2 k2 y2\"\n   and s2BC: \"\\<And>l. l \\<^bold>\\<in> succ k2 \\<Longrightarrow> Builds B C s2 l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LstSeq s1 k1 y1 &&&\n     (\\<And>l.\n         l \\<^bold>\\<in> succ k1 \\<Longrightarrow> Builds B C s1 l)) &&&\n    LstSeq s2 k2 y2 &&&\n    (\\<And>l. l \\<^bold>\\<in> succ k2 \\<Longrightarrow> Builds B C s2 l)", "using s1 s2"], ["proof (prove)\nusing this:\n  BuildSeq B C s1 k1 y1\n  BuildSeq B C s2 k2 y2\n\ngoal (1 subgoal):\n 1. (LstSeq s1 k1 y1 &&&\n     (\\<And>l.\n         l \\<^bold>\\<in> succ k1 \\<Longrightarrow> Builds B C s1 l)) &&&\n    LstSeq s2 k2 y2 &&&\n    (\\<And>l. l \\<^bold>\\<in> succ k2 \\<Longrightarrow> Builds B C s2 l)", "by (auto simp: BuildSeq_def)"], ["proof (state)\nthis:\n  LstSeq s1 k1 y1\n  ?l \\<^bold>\\<in> succ k1 \\<Longrightarrow> Builds B C s1 ?l\n  LstSeq s2 k2 y2\n  ?l \\<^bold>\\<in> succ k2 \\<Longrightarrow> Builds B C s2 ?l\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<^bold>\\<in> succ (succ (k1 @+ k2)) \\<Longrightarrow>\n       Builds B C (seq_append (succ k1) s1 s2) l", "assume l: \"l \\<^bold>\\<in> succ (succ (k1 @+ k2))\""], ["proof (state)\nthis:\n  l \\<^bold>\\<in> succ (succ (k1 @+ k2))\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<^bold>\\<in> succ (succ (k1 @+ k2)) \\<Longrightarrow>\n       Builds B C (seq_append (succ k1) s1 s2) l", "hence  \"l \\<^bold>\\<in> succ k1 @+ succ k2\""], ["proof (prove)\nusing this:\n  l \\<^bold>\\<in> succ (succ (k1 @+ k2))\n\ngoal (1 subgoal):\n 1. l \\<^bold>\\<in> succ k1 @+ succ k2", "by (metis LstSeq_imp_Ord hadd_succ_left hadd_succ_right s2L)"], ["proof (state)\nthis:\n  l \\<^bold>\\<in> succ k1 @+ succ k2\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<^bold>\\<in> succ (succ (k1 @+ k2)) \\<Longrightarrow>\n       Builds B C (seq_append (succ k1) s1 s2) l", "thus \"Builds B C (seq_append (succ k1) s1 s2) l\""], ["proof (prove)\nusing this:\n  l \\<^bold>\\<in> succ k1 @+ succ k2\n\ngoal (1 subgoal):\n 1. Builds B C (seq_append (succ k1) s1 s2) l", "proof (rule hmem_hadd_E)"], ["proof (state)\ngoal (2 subgoals):\n 1. l \\<^bold>\\<in> succ k1 \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l\n 2. \\<And>z.\n       \\<lbrakk>z \\<^bold>\\<in> succ k2; l = succ k1 @+ z\\<rbrakk>\n       \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l", "assume l1: \"l \\<^bold>\\<in> succ k1\""], ["proof (state)\nthis:\n  l \\<^bold>\\<in> succ k1\n\ngoal (2 subgoals):\n 1. l \\<^bold>\\<in> succ k1 \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l\n 2. \\<And>z.\n       \\<lbrakk>z \\<^bold>\\<in> succ k2; l = succ k1 @+ z\\<rbrakk>\n       \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l", "hence \"B (app s1 l) \\<or> (\\<exists>m\\<^bold>\\<in>l. \\<exists>n\\<^bold>\\<in>l. C (app s1 l) (app s1 m) (app s1 n))\""], ["proof (prove)\nusing this:\n  l \\<^bold>\\<in> succ k1\n\ngoal (1 subgoal):\n 1. B (app s1 l) \\<or>\n    (\\<exists>m\\<^bold>\\<in>l.\n        \\<exists>n\\<^bold>\\<in>l. C (app s1 l) (app s1 m) (app s1 n))", "using s1BC"], ["proof (prove)\nusing this:\n  l \\<^bold>\\<in> succ k1\n  ?l \\<^bold>\\<in> succ k1 \\<Longrightarrow> Builds B C s1 ?l\n\ngoal (1 subgoal):\n 1. B (app s1 l) \\<or>\n    (\\<exists>m\\<^bold>\\<in>l.\n        \\<exists>n\\<^bold>\\<in>l. C (app s1 l) (app s1 m) (app s1 n))", "by (simp add: Builds_def)"], ["proof (state)\nthis:\n  B (app s1 l) \\<or>\n  (\\<exists>m\\<^bold>\\<in>l.\n      \\<exists>n\\<^bold>\\<in>l. C (app s1 l) (app s1 m) (app s1 n))\n\ngoal (2 subgoals):\n 1. l \\<^bold>\\<in> succ k1 \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l\n 2. \\<And>z.\n       \\<lbrakk>z \\<^bold>\\<in> succ k2; l = succ k1 @+ z\\<rbrakk>\n       \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l", "thus ?thesis"], ["proof (prove)\nusing this:\n  B (app s1 l) \\<or>\n  (\\<exists>m\\<^bold>\\<in>l.\n      \\<exists>n\\<^bold>\\<in>l. C (app s1 l) (app s1 m) (app s1 n))\n\ngoal (1 subgoal):\n 1. Builds B C (seq_append (succ k1) s1 s2) l", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. B (app s1 l) \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l\n 2. \\<exists>m\\<^bold>\\<in>l.\n       \\<exists>n\\<^bold>\\<in>l.\n          C (app s1 l) (app s1 m) (app s1 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "assume \"B (app s1 l)\""], ["proof (state)\nthis:\n  B (app s1 l)\n\ngoal (2 subgoals):\n 1. B (app s1 l) \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l\n 2. \\<exists>m\\<^bold>\\<in>l.\n       \\<exists>n\\<^bold>\\<in>l.\n          C (app s1 l) (app s1 m) (app s1 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "thus ?thesis"], ["proof (prove)\nusing this:\n  B (app s1 l)\n\ngoal (1 subgoal):\n 1. Builds B C (seq_append (succ k1) s1 s2) l", "by (metis Builds_def LstSeq_append_app1 l1 s1L)"], ["proof (state)\nthis:\n  Builds B C (seq_append (succ k1) s1 s2) l\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>l.\n       \\<exists>n\\<^bold>\\<in>l.\n          C (app s1 l) (app s1 m) (app s1 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>l.\n       \\<exists>n\\<^bold>\\<in>l.\n          C (app s1 l) (app s1 m) (app s1 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "assume \"\\<exists>m\\<^bold>\\<in>l. \\<exists>n\\<^bold>\\<in>l. C (app s1 l) (app s1 m) (app s1 n)\""], ["proof (state)\nthis:\n  \\<exists>m\\<^bold>\\<in>l.\n     \\<exists>n\\<^bold>\\<in>l. C (app s1 l) (app s1 m) (app s1 n)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>l.\n       \\<exists>n\\<^bold>\\<in>l.\n          C (app s1 l) (app s1 m) (app s1 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<^bold>\\<in>l.\n     \\<exists>n\\<^bold>\\<in>l. C (app s1 l) (app s1 m) (app s1 n)", "obtain m n where mn: \"m \\<^bold>\\<in> l\" \"n \\<^bold>\\<in> l\" and C: \"C (app s1 l) (app s1 m) (app s1 n)\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<^bold>\\<in>l.\n     \\<exists>n\\<^bold>\\<in>l. C (app s1 l) (app s1 m) (app s1 n)\n\ngoal (1 subgoal):\n 1. (\\<And>m n.\n        \\<lbrakk>m \\<^bold>\\<in> l; n \\<^bold>\\<in> l;\n         C (app s1 l) (app s1 m) (app s1 n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m \\<^bold>\\<in> l\n  n \\<^bold>\\<in> l\n  C (app s1 l) (app s1 m) (app s1 n)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>l.\n       \\<exists>n\\<^bold>\\<in>l.\n          C (app s1 l) (app s1 m) (app s1 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "also"], ["proof (state)\nthis:\n  m \\<^bold>\\<in> l\n  n \\<^bold>\\<in> l\n  C (app s1 l) (app s1 m) (app s1 n)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>l.\n       \\<exists>n\\<^bold>\\<in>l.\n          C (app s1 l) (app s1 m) (app s1 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "have \"m \\<^bold>\\<in> succ k1\" \"n \\<^bold>\\<in> succ k1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<^bold>\\<in> succ k1 &&& n \\<^bold>\\<in> succ k1", "by (metis LstSeq_def Ord_trans l1 mn s1L succ_iff)+"], ["proof (state)\nthis:\n  m \\<^bold>\\<in> succ k1\n  n \\<^bold>\\<in> succ k1\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>l.\n       \\<exists>n\\<^bold>\\<in>l.\n          C (app s1 l) (app s1 m) (app s1 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "ultimately"], ["proof (chain)\npicking this:\n  m \\<^bold>\\<in> l\n  n \\<^bold>\\<in> l\n  C (app s1 l) (app s1 m) (app s1 n)\n  m \\<^bold>\\<in> succ k1\n  n \\<^bold>\\<in> succ k1", "have \"C (app (seq_append (succ k1) s1 s2) l)\n                         (app (seq_append (succ k1) s1 s2) m)\n                         (app (seq_append (succ k1) s1 s2) n)\""], ["proof (prove)\nusing this:\n  m \\<^bold>\\<in> l\n  n \\<^bold>\\<in> l\n  C (app s1 l) (app s1 m) (app s1 n)\n  m \\<^bold>\\<in> succ k1\n  n \\<^bold>\\<in> succ k1\n\ngoal (1 subgoal):\n 1. C (app (seq_append (succ k1) s1 s2) l)\n     (app (seq_append (succ k1) s1 s2) m)\n     (app (seq_append (succ k1) s1 s2) n)", "using s1L l1"], ["proof (prove)\nusing this:\n  m \\<^bold>\\<in> l\n  n \\<^bold>\\<in> l\n  C (app s1 l) (app s1 m) (app s1 n)\n  m \\<^bold>\\<in> succ k1\n  n \\<^bold>\\<in> succ k1\n  LstSeq s1 k1 y1\n  l \\<^bold>\\<in> succ k1\n\ngoal (1 subgoal):\n 1. C (app (seq_append (succ k1) s1 s2) l)\n     (app (seq_append (succ k1) s1 s2) m)\n     (app (seq_append (succ k1) s1 s2) n)", "by (simp add: LstSeq_append_app1)"], ["proof (state)\nthis:\n  C (app (seq_append (succ k1) s1 s2) l)\n   (app (seq_append (succ k1) s1 s2) m) (app (seq_append (succ k1) s1 s2) n)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>l.\n       \\<exists>n\\<^bold>\\<in>l.\n          C (app s1 l) (app s1 m) (app s1 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "thus \"Builds B C (seq_append (succ k1) s1 s2) l\""], ["proof (prove)\nusing this:\n  C (app (seq_append (succ k1) s1 s2) l)\n   (app (seq_append (succ k1) s1 s2) m) (app (seq_append (succ k1) s1 s2) n)\n\ngoal (1 subgoal):\n 1. Builds B C (seq_append (succ k1) s1 s2) l", "using mn"], ["proof (prove)\nusing this:\n  C (app (seq_append (succ k1) s1 s2) l)\n   (app (seq_append (succ k1) s1 s2) m) (app (seq_append (succ k1) s1 s2) n)\n  m \\<^bold>\\<in> l\n  n \\<^bold>\\<in> l\n\ngoal (1 subgoal):\n 1. Builds B C (seq_append (succ k1) s1 s2) l", "by (auto simp: Builds_def)"], ["proof (state)\nthis:\n  Builds B C (seq_append (succ k1) s1 s2) l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Builds B C (seq_append (succ k1) s1 s2) l\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<^bold>\\<in> succ k2; l = succ k1 @+ z\\<rbrakk>\n       \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<^bold>\\<in> succ k2; l = succ k1 @+ z\\<rbrakk>\n       \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<^bold>\\<in> succ k2; l = succ k1 @+ z\\<rbrakk>\n       \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l", "assume z: \"z \\<^bold>\\<in> succ k2\" and l2: \"l = succ k1 @+ z\""], ["proof (state)\nthis:\n  z \\<^bold>\\<in> succ k2\n  l = succ k1 @+ z\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<^bold>\\<in> succ k2; l = succ k1 @+ z\\<rbrakk>\n       \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l", "hence \"B (app s2 z) \\<or> (\\<exists>m\\<^bold>\\<in>z. \\<exists>n\\<^bold>\\<in>z. C (app s2 z) (app s2 m) (app s2 n))\""], ["proof (prove)\nusing this:\n  z \\<^bold>\\<in> succ k2\n  l = succ k1 @+ z\n\ngoal (1 subgoal):\n 1. B (app s2 z) \\<or>\n    (\\<exists>m\\<^bold>\\<in>z.\n        \\<exists>n\\<^bold>\\<in>z. C (app s2 z) (app s2 m) (app s2 n))", "using s2BC"], ["proof (prove)\nusing this:\n  z \\<^bold>\\<in> succ k2\n  l = succ k1 @+ z\n  ?l \\<^bold>\\<in> succ k2 \\<Longrightarrow> Builds B C s2 ?l\n\ngoal (1 subgoal):\n 1. B (app s2 z) \\<or>\n    (\\<exists>m\\<^bold>\\<in>z.\n        \\<exists>n\\<^bold>\\<in>z. C (app s2 z) (app s2 m) (app s2 n))", "by (simp add: Builds_def)"], ["proof (state)\nthis:\n  B (app s2 z) \\<or>\n  (\\<exists>m\\<^bold>\\<in>z.\n      \\<exists>n\\<^bold>\\<in>z. C (app s2 z) (app s2 m) (app s2 n))\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>z \\<^bold>\\<in> succ k2; l = succ k1 @+ z\\<rbrakk>\n       \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l", "thus ?thesis"], ["proof (prove)\nusing this:\n  B (app s2 z) \\<or>\n  (\\<exists>m\\<^bold>\\<in>z.\n      \\<exists>n\\<^bold>\\<in>z. C (app s2 z) (app s2 m) (app s2 n))\n\ngoal (1 subgoal):\n 1. Builds B C (seq_append (succ k1) s1 s2) l", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. B (app s2 z) \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l\n 2. \\<exists>m\\<^bold>\\<in>z.\n       \\<exists>n\\<^bold>\\<in>z.\n          C (app s2 z) (app s2 m) (app s2 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "assume \"B (app s2 z)\""], ["proof (state)\nthis:\n  B (app s2 z)\n\ngoal (2 subgoals):\n 1. B (app s2 z) \\<Longrightarrow> Builds B C (seq_append (succ k1) s1 s2) l\n 2. \\<exists>m\\<^bold>\\<in>z.\n       \\<exists>n\\<^bold>\\<in>z.\n          C (app s2 z) (app s2 m) (app s2 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "thus ?thesis"], ["proof (prove)\nusing this:\n  B (app s2 z)\n\ngoal (1 subgoal):\n 1. Builds B C (seq_append (succ k1) s1 s2) l", "by (metis Builds_def LstSeq_append_app2 l2 s1L s2L)"], ["proof (state)\nthis:\n  Builds B C (seq_append (succ k1) s1 s2) l\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>z.\n       \\<exists>n\\<^bold>\\<in>z.\n          C (app s2 z) (app s2 m) (app s2 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>z.\n       \\<exists>n\\<^bold>\\<in>z.\n          C (app s2 z) (app s2 m) (app s2 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "assume \"\\<exists>m\\<^bold>\\<in>z. \\<exists>n\\<^bold>\\<in>z. C (app s2 z) (app s2 m) (app s2 n)\""], ["proof (state)\nthis:\n  \\<exists>m\\<^bold>\\<in>z.\n     \\<exists>n\\<^bold>\\<in>z. C (app s2 z) (app s2 m) (app s2 n)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>z.\n       \\<exists>n\\<^bold>\\<in>z.\n          C (app s2 z) (app s2 m) (app s2 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "then"], ["proof (chain)\npicking this:\n  \\<exists>m\\<^bold>\\<in>z.\n     \\<exists>n\\<^bold>\\<in>z. C (app s2 z) (app s2 m) (app s2 n)", "obtain m n where mn: \"m \\<^bold>\\<in> z\" \"n \\<^bold>\\<in> z\" and C: \"C (app s2 z) (app s2 m) (app s2 n)\""], ["proof (prove)\nusing this:\n  \\<exists>m\\<^bold>\\<in>z.\n     \\<exists>n\\<^bold>\\<in>z. C (app s2 z) (app s2 m) (app s2 n)\n\ngoal (1 subgoal):\n 1. (\\<And>m n.\n        \\<lbrakk>m \\<^bold>\\<in> z; n \\<^bold>\\<in> z;\n         C (app s2 z) (app s2 m) (app s2 n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m \\<^bold>\\<in> z\n  n \\<^bold>\\<in> z\n  C (app s2 z) (app s2 m) (app s2 n)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>z.\n       \\<exists>n\\<^bold>\\<in>z.\n          C (app s2 z) (app s2 m) (app s2 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "also"], ["proof (state)\nthis:\n  m \\<^bold>\\<in> z\n  n \\<^bold>\\<in> z\n  C (app s2 z) (app s2 m) (app s2 n)\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>z.\n       \\<exists>n\\<^bold>\\<in>z.\n          C (app s2 z) (app s2 m) (app s2 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "have \"m \\<^bold>\\<in> succ k2\" \"n \\<^bold>\\<in> succ k2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<^bold>\\<in> succ k2 &&& n \\<^bold>\\<in> succ k2", "using mn"], ["proof (prove)\nusing this:\n  m \\<^bold>\\<in> z\n  n \\<^bold>\\<in> z\n\ngoal (1 subgoal):\n 1. m \\<^bold>\\<in> succ k2 &&& n \\<^bold>\\<in> succ k2", "by (metis LstSeq_def Ord_trans z s2L succ_iff)+"], ["proof (state)\nthis:\n  m \\<^bold>\\<in> succ k2\n  n \\<^bold>\\<in> succ k2\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>z.\n       \\<exists>n\\<^bold>\\<in>z.\n          C (app s2 z) (app s2 m) (app s2 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "ultimately"], ["proof (chain)\npicking this:\n  m \\<^bold>\\<in> z\n  n \\<^bold>\\<in> z\n  C (app s2 z) (app s2 m) (app s2 n)\n  m \\<^bold>\\<in> succ k2\n  n \\<^bold>\\<in> succ k2", "have \"C (app (seq_append (succ k1) s1 s2) l)\n                         (app (seq_append (succ k1) s1 s2) (succ k1 @+ m))\n                         (app (seq_append (succ k1) s1 s2) (succ k1 @+ n))\""], ["proof (prove)\nusing this:\n  m \\<^bold>\\<in> z\n  n \\<^bold>\\<in> z\n  C (app s2 z) (app s2 m) (app s2 n)\n  m \\<^bold>\\<in> succ k2\n  n \\<^bold>\\<in> succ k2\n\ngoal (1 subgoal):\n 1. C (app (seq_append (succ k1) s1 s2) l)\n     (app (seq_append (succ k1) s1 s2) (succ k1 @+ m))\n     (app (seq_append (succ k1) s1 s2) (succ k1 @+ n))", "using s1L s2L l2 z"], ["proof (prove)\nusing this:\n  m \\<^bold>\\<in> z\n  n \\<^bold>\\<in> z\n  C (app s2 z) (app s2 m) (app s2 n)\n  m \\<^bold>\\<in> succ k2\n  n \\<^bold>\\<in> succ k2\n  LstSeq s1 k1 y1\n  LstSeq s2 k2 y2\n  l = succ k1 @+ z\n  z \\<^bold>\\<in> succ k2\n\ngoal (1 subgoal):\n 1. C (app (seq_append (succ k1) s1 s2) l)\n     (app (seq_append (succ k1) s1 s2) (succ k1 @+ m))\n     (app (seq_append (succ k1) s1 s2) (succ k1 @+ n))", "by (simp add: LstSeq_append_app2)"], ["proof (state)\nthis:\n  C (app (seq_append (succ k1) s1 s2) l)\n   (app (seq_append (succ k1) s1 s2) (succ k1 @+ m))\n   (app (seq_append (succ k1) s1 s2) (succ k1 @+ n))\n\ngoal (1 subgoal):\n 1. \\<exists>m\\<^bold>\\<in>z.\n       \\<exists>n\\<^bold>\\<in>z.\n          C (app s2 z) (app s2 m) (app s2 n) \\<Longrightarrow>\n    Builds B C (seq_append (succ k1) s1 s2) l", "thus \"Builds B C (seq_append (succ k1) s1 s2) l\""], ["proof (prove)\nusing this:\n  C (app (seq_append (succ k1) s1 s2) l)\n   (app (seq_append (succ k1) s1 s2) (succ k1 @+ m))\n   (app (seq_append (succ k1) s1 s2) (succ k1 @+ n))\n\ngoal (1 subgoal):\n 1. Builds B C (seq_append (succ k1) s1 s2) l", "using mn l2"], ["proof (prove)\nusing this:\n  C (app (seq_append (succ k1) s1 s2) l)\n   (app (seq_append (succ k1) s1 s2) (succ k1 @+ m))\n   (app (seq_append (succ k1) s1 s2) (succ k1 @+ n))\n  m \\<^bold>\\<in> z\n  n \\<^bold>\\<in> z\n  l = succ k1 @+ z\n\ngoal (1 subgoal):\n 1. Builds B C (seq_append (succ k1) s1 s2) l", "by (auto simp: Builds_def HBall_def)"], ["proof (state)\nthis:\n  Builds B C (seq_append (succ k1) s1 s2) l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Builds B C (seq_append (succ k1) s1 s2) l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Builds B C (seq_append (succ k1) s1 s2) l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma BuildSeq_combine:\n  assumes b1: \"BuildSeq B C s1 k1 y1\" and b2: \"BuildSeq B C s2 k2 y2\"\n      and y: \"C y y1 y2\"\n  shows \"BuildSeq B C (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2))) y) (succ (succ (k1 @+ k2))) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq B C\n     (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2))) y)\n     (succ (succ (k1 @+ k2))) y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. BuildSeq B C\n     (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2))) y)\n     (succ (succ (k1 @+ k2))) y", "have k2: \"Ord k2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord k2", "using b2"], ["proof (prove)\nusing this:\n  BuildSeq B C s2 k2 y2\n\ngoal (1 subgoal):\n 1. Ord k2", "by (auto simp: BuildSeq_def LstSeq_def)"], ["proof (state)\nthis:\n  Ord k2\n\ngoal (1 subgoal):\n 1. BuildSeq B C\n     (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2))) y)\n     (succ (succ (k1 @+ k2))) y", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq B C\n     (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2))) y)\n     (succ (succ (k1 @+ k2))) y", "proof (rule BuildSeq_insf [where m=k1 and n=\"succ(k1@+k2)\"])"], ["proof (state)\ngoal (4 subgoals):\n 1. BuildSeq B C (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) ?z\n 2. k1 \\<^bold>\\<in> succ (succ (k1 @+ k2))\n 3. succ (k1 @+ k2) \\<^bold>\\<in> succ (succ (k1 @+ k2))\n 4. B y \\<or>\n    C y (app (seq_append (succ k1) s1 s2) k1)\n     (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))", "show \"BuildSeq B C (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq B C (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2", "by (rule BuildSeq_append [OF b1 b2])"], ["proof (state)\nthis:\n  BuildSeq B C (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) y2\n\ngoal (3 subgoals):\n 1. k1 \\<^bold>\\<in> succ (succ (k1 @+ k2))\n 2. succ (k1 @+ k2) \\<^bold>\\<in> succ (succ (k1 @+ k2))\n 3. B y \\<or>\n    C y (app (seq_append (succ k1) s1 s2) k1)\n     (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. k1 \\<^bold>\\<in> succ (succ (k1 @+ k2))\n 2. succ (k1 @+ k2) \\<^bold>\\<in> succ (succ (k1 @+ k2))\n 3. B y \\<or>\n    C y (app (seq_append (succ k1) s1 s2) k1)\n     (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))", "show \"k1 \\<^bold>\\<in> succ (succ (k1 @+ k2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k1 \\<^bold>\\<in> succ (succ (k1 @+ k2))", "using k2"], ["proof (prove)\nusing this:\n  Ord k2\n\ngoal (1 subgoal):\n 1. k1 \\<^bold>\\<in> succ (succ (k1 @+ k2))", "by (metis hadd_0_right hmem_0_Ord hmem_self_hadd succ_iff)"], ["proof (state)\nthis:\n  k1 \\<^bold>\\<in> succ (succ (k1 @+ k2))\n\ngoal (2 subgoals):\n 1. succ (k1 @+ k2) \\<^bold>\\<in> succ (succ (k1 @+ k2))\n 2. B y \\<or>\n    C y (app (seq_append (succ k1) s1 s2) k1)\n     (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. succ (k1 @+ k2) \\<^bold>\\<in> succ (succ (k1 @+ k2))\n 2. B y \\<or>\n    C y (app (seq_append (succ k1) s1 s2) k1)\n     (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))", "show \"succ (k1 @+ k2) \\<^bold>\\<in> succ (succ (k1 @+ k2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ (k1 @+ k2) \\<^bold>\\<in> succ (succ (k1 @+ k2))", "by (metis succ_iff)"], ["proof (state)\nthis:\n  succ (k1 @+ k2) \\<^bold>\\<in> succ (succ (k1 @+ k2))\n\ngoal (1 subgoal):\n 1. B y \\<or>\n    C y (app (seq_append (succ k1) s1 s2) k1)\n     (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. B y \\<or>\n    C y (app (seq_append (succ k1) s1 s2) k1)\n     (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))", "have [simp]: \"app (seq_append (succ k1) s1 s2) k1 = y1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. app (seq_append (succ k1) s1 s2) k1 = y1", "by (metis b1 BuildSeq_imp_LstSeq LstSeq_app LstSeq_append_app1 succ_iff)"], ["proof (state)\nthis:\n  app (seq_append (succ k1) s1 s2) k1 = y1\n\ngoal (1 subgoal):\n 1. B y \\<or>\n    C y (app (seq_append (succ k1) s1 s2) k1)\n     (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))", "have [simp]: \"app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) = y2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) = y2", "by (metis b1 b2 k2 BuildSeq_imp_LstSeq LstSeq_app LstSeq_append_app2 hadd_succ_left)"], ["proof (state)\nthis:\n  app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)) = y2\n\ngoal (1 subgoal):\n 1. B y \\<or>\n    C y (app (seq_append (succ k1) s1 s2) k1)\n     (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))", "show \"B y \\<or>\n          C y (app (seq_append (succ k1) s1 s2) k1)\n              (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B y \\<or>\n    C y (app (seq_append (succ k1) s1 s2) k1)\n     (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))", "using y"], ["proof (prove)\nusing this:\n  C y y1 y2\n\ngoal (1 subgoal):\n 1. B y \\<or>\n    C y (app (seq_append (succ k1) s1 s2) k1)\n     (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))", "by simp"], ["proof (state)\nthis:\n  B y \\<or>\n  C y (app (seq_append (succ k1) s1 s2) k1)\n   (app (seq_append (succ k1) s1 s2) (succ (k1 @+ k2)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  BuildSeq B C\n   (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2))) y)\n   (succ (succ (k1 @+ k2))) y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LstSeq_1: \"LstSeq \\<lbrace>\\<langle>0, y\\<rangle>\\<rbrace> 0 y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LstSeq \\<lbrace>\\<langle>0, y\\<rangle>\\<rbrace> 0 y", "by (auto simp: LstSeq_def One_hf_eq_succ Seq_ins OrdDom_def)"], ["", "lemma BuildSeq_1: \"B y \\<Longrightarrow> BuildSeq B C \\<lbrace>\\<langle>0, y\\<rangle>\\<rbrace> 0 y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B y \\<Longrightarrow>\n    BuildSeq B C \\<lbrace>\\<langle>0, y\\<rangle>\\<rbrace> 0 y", "by (auto simp: BuildSeq_def Builds_def LstSeq_1)"], ["", "lemma BuildSeq_exI: \"B t \\<Longrightarrow> \\<exists>s k. BuildSeq B C s k t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B t \\<Longrightarrow> \\<exists>s k. BuildSeq B C s k t", "by (metis BuildSeq_1)"], ["", "subsection \\<open>Proving Properties of Given Sequences\\<close>"], ["", "lemma BuildSeq_succ_E:\n    assumes s: \"BuildSeq B C s k y\"\n      obtains \"B y\" |  m n where \"m \\<^bold>\\<in> k\" \"n \\<^bold>\\<in> k\" \"C y (app s m) (app s n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>B y \\<Longrightarrow> thesis;\n     \\<And>m n.\n        \\<lbrakk>m \\<^bold>\\<in> k; n \\<^bold>\\<in> k;\n         C y (app s m) (app s n)\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>B y \\<Longrightarrow> thesis;\n     \\<And>m n.\n        \\<lbrakk>m \\<^bold>\\<in> k; n \\<^bold>\\<in> k;\n         C y (app s m) (app s n)\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "have Bs: \"Builds B C s k\" and apps: \"app s k = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Builds B C s k &&& app s k = y", "using s"], ["proof (prove)\nusing this:\n  BuildSeq B C s k y\n\ngoal (1 subgoal):\n 1. Builds B C s k &&& app s k = y", "by (auto simp: BuildSeq_def)"], ["proof (state)\nthis:\n  Builds B C s k\n  app s k = y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>B y \\<Longrightarrow> thesis;\n     \\<And>m n.\n        \\<lbrakk>m \\<^bold>\\<in> k; n \\<^bold>\\<in> k;\n         C y (app s m) (app s n)\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"B y \\<or> (\\<exists>m \\<^bold>\\<in> k. \\<exists>n \\<^bold>\\<in> k. C y (app s m) (app s n))\""], ["proof (prove)\nusing this:\n  Builds B C s k\n  app s k = y\n\ngoal (1 subgoal):\n 1. B y \\<or>\n    (\\<exists>m\\<^bold>\\<in>k.\n        \\<exists>n\\<^bold>\\<in>k. C y (app s m) (app s n))", "by (metis Builds_def apps Bs)"], ["proof (state)\nthis:\n  B y \\<or>\n  (\\<exists>m\\<^bold>\\<in>k.\n      \\<exists>n\\<^bold>\\<in>k. C y (app s m) (app s n))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>B y \\<Longrightarrow> thesis;\n     \\<And>m n.\n        \\<lbrakk>m \\<^bold>\\<in> k; n \\<^bold>\\<in> k;\n         C y (app s m) (app s n)\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  B y \\<or>\n  (\\<exists>m\\<^bold>\\<in>k.\n      \\<exists>n\\<^bold>\\<in>k. C y (app s m) (app s n))\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  B y \\<or>\n  (\\<exists>m\\<^bold>\\<in>k.\n      \\<exists>n\\<^bold>\\<in>k. C y (app s m) (app s n))\n  B y \\<Longrightarrow> thesis\n  \\<lbrakk>?m \\<^bold>\\<in> k; ?n \\<^bold>\\<in> k;\n   C y (app s ?m) (app s ?n)\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma BuildSeq_induct [consumes 1, case_names B C]:\n  assumes major: \"BuildSeq B C s k a\"\n      and B: \"\\<And>x. B x \\<Longrightarrow> P x\"\n      and C: \"\\<And>x y z. C x y z \\<Longrightarrow> P y \\<Longrightarrow> P z \\<Longrightarrow> P x\"\n  shows \"P a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P a", "have \"Ord k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord k", "using assms"], ["proof (prove)\nusing this:\n  BuildSeq B C s k a\n  B ?x \\<Longrightarrow> P ?x\n  \\<lbrakk>C ?x ?y ?z; P ?y; P ?z\\<rbrakk> \\<Longrightarrow> P ?x\n\ngoal (1 subgoal):\n 1. Ord k", "by (auto simp: BuildSeq_def LstSeq_def)"], ["proof (state)\nthis:\n  Ord k\n\ngoal (1 subgoal):\n 1. P a", "hence \"\\<And>a s. BuildSeq B C s k a \\<Longrightarrow> P a\""], ["proof (prove)\nusing this:\n  Ord k\n\ngoal (1 subgoal):\n 1. \\<And>a s. BuildSeq B C s k a \\<Longrightarrow> P a", "by (induction k rule: Ord_induct) (metis BuildSeq_trunc BuildSeq_succ_E B C)"], ["proof (state)\nthis:\n  BuildSeq B C ?s k ?a \\<Longrightarrow> P ?a\n\ngoal (1 subgoal):\n 1. P a", "thus ?thesis"], ["proof (prove)\nusing this:\n  BuildSeq B C ?s k ?a \\<Longrightarrow> P ?a\n\ngoal (1 subgoal):\n 1. P a", "by (metis major)"], ["proof (state)\nthis:\n  P a\n\ngoal:\nNo subgoals!", "qed"], ["", "definition BuildSeq2 :: \"[[hf,hf] \\<Rightarrow> bool, [hf,hf,hf,hf,hf,hf] \\<Rightarrow> bool, hf, hf, hf, hf] \\<Rightarrow> bool\"\n  where \"BuildSeq2 B C s k y y' \\<equiv>\n         BuildSeq (\\<lambda>p. \\<exists>x x'. p = \\<langle>x,x'\\<rangle> \\<and> B x x')\n                  (\\<lambda>p q r. \\<exists>x x' y y' z z'. p = \\<langle>x,x'\\<rangle> \\<and> q = \\<langle>y,y'\\<rangle> \\<and> r = \\<langle>z,z'\\<rangle> \\<and> C x x' y y' z z')\n                  s k \\<langle>y,y'\\<rangle>\""], ["", "lemma BuildSeq2_combine:\n  assumes b1: \"BuildSeq2 B C s1 k1 y1 y1'\" and b2: \"BuildSeq2 B C s2 k2 y2 y2'\"\n      and y: \"C y y' y1 y1' y2 y2'\"\n  shows \"BuildSeq2 B C (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2))) \\<langle>y, y'\\<rangle>)\n                       (succ (succ (k1 @+ k2))) y y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq2 B C\n     (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2)))\n       \\<langle>y, y'\\<rangle>)\n     (succ (succ (k1 @+ k2))) y y'", "using assms"], ["proof (prove)\nusing this:\n  BuildSeq2 B C s1 k1 y1 y1'\n  BuildSeq2 B C s2 k2 y2 y2'\n  C y y' y1 y1' y2 y2'\n\ngoal (1 subgoal):\n 1. BuildSeq2 B C\n     (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2)))\n       \\<langle>y, y'\\<rangle>)\n     (succ (succ (k1 @+ k2))) y y'", "apply (unfold BuildSeq2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>BuildSeq\n              (\\<lambda>p.\n                  \\<exists>x x'. p = \\<langle>x, x'\\<rangle> \\<and> B x x')\n              (\\<lambda>p q r.\n                  \\<exists>x x' y y' z z'.\n                     p = \\<langle>x, x'\\<rangle> \\<and>\n                     q = \\<langle>y, y'\\<rangle> \\<and>\n                     r = \\<langle>z, z'\\<rangle> \\<and> C x x' y y' z z')\n              s1 k1 \\<langle>y1, y1'\\<rangle>;\n     BuildSeq\n      (\\<lambda>p. \\<exists>x x'. p = \\<langle>x, x'\\<rangle> \\<and> B x x')\n      (\\<lambda>p q r.\n          \\<exists>x x' y y' z z'.\n             p = \\<langle>x, x'\\<rangle> \\<and>\n             q = \\<langle>y, y'\\<rangle> \\<and>\n             r = \\<langle>z, z'\\<rangle> \\<and> C x x' y y' z z')\n      s2 k2 \\<langle>y2, y2'\\<rangle>;\n     C y y' y1 y1' y2 y2'\\<rbrakk>\n    \\<Longrightarrow> BuildSeq\n                       (\\<lambda>p.\n                           \\<exists>x x'.\n                              p = \\<langle>x, x'\\<rangle> \\<and> B x x')\n                       (\\<lambda>p q r.\n                           \\<exists>x x' y y' z z'.\n                              p = \\<langle>x, x'\\<rangle> \\<and>\n                              q = \\<langle>y, y'\\<rangle> \\<and>\n                              r = \\<langle>z, z'\\<rangle> \\<and>\n                              C x x' y y' z z')\n                       (insf (seq_append (succ k1) s1 s2)\n                         (succ (succ (k1 @+ k2))) \\<langle>y, y'\\<rangle>)\n                       (succ (succ (k1 @+ k2))) \\<langle>y, y'\\<rangle>", "apply (blast intro: BuildSeq_combine)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma BuildSeq2_1: \"B y y' \\<Longrightarrow> BuildSeq2 B C \\<lbrace>\\<langle>0, y, y'\\<rangle>\\<rbrace> 0 y y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B y y' \\<Longrightarrow>\n    BuildSeq2 B C \\<lbrace>\\<langle>0, y, y'\\<rangle>\\<rbrace> 0 y y'", "by (auto simp: BuildSeq2_def BuildSeq_1)"], ["", "lemma BuildSeq2_exI: \"B t t' \\<Longrightarrow> \\<exists>s k. BuildSeq2 B C s k t t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B t t' \\<Longrightarrow> \\<exists>s k. BuildSeq2 B C s k t t'", "by (metis BuildSeq2_1)"], ["", "lemma BuildSeq2_induct [consumes 1, case_names B C]:\n  assumes \"BuildSeq2 B C s k a a'\"\n      and B: \"\\<And>x x'. B x x' \\<Longrightarrow> P x x'\"\n      and C: \"\\<And>x x' y y' z z'. C x x' y y' z z' \\<Longrightarrow> P y y' \\<Longrightarrow> P z z' \\<Longrightarrow> P x x'\"\n  shows \"P a a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P a a'", "using assms"], ["proof (prove)\nusing this:\n  BuildSeq2 B C s k a a'\n  B ?x ?x' \\<Longrightarrow> P ?x ?x'\n  \\<lbrakk>C ?x ?x' ?y ?y' ?z ?z'; P ?y ?y'; P ?z ?z'\\<rbrakk>\n  \\<Longrightarrow> P ?x ?x'\n\ngoal (1 subgoal):\n 1. P a a'", "apply (simp add: BuildSeq2_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>BuildSeq\n              (\\<lambda>p.\n                  \\<exists>x x'. p = \\<langle>x, x'\\<rangle> \\<and> B x x')\n              (\\<lambda>p q r.\n                  \\<exists>x x'.\n                     p = \\<langle>x, x'\\<rangle> \\<and>\n                     (\\<exists>y y'.\n                         q = \\<langle>y, y'\\<rangle> \\<and>\n                         (\\<exists>z z'.\n                             r = \\<langle>z, z'\\<rangle> \\<and>\n                             C x x' y y' z z')))\n              s k \\<langle>a, a'\\<rangle>;\n     \\<And>x x'. B x x' \\<Longrightarrow> P x x';\n     \\<And>x x' y y' z z'.\n        \\<lbrakk>C x x' y y' z z'; P y y'; P z z'\\<rbrakk>\n        \\<Longrightarrow> P x x'\\<rbrakk>\n    \\<Longrightarrow> P a a'", "apply (drule BuildSeq_induct [where P = \"\\<lambda>\\<langle>x,x'\\<rangle>. P x x'\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x x'. B x x' \\<Longrightarrow> P x x';\n        \\<And>x x' y y' z z'.\n           \\<lbrakk>C x x' y y' z z'; P y y'; P z z'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<exists>xa x'. x = \\<langle>xa, x'\\<rangle> \\<and> B xa x'\\<rbrakk>\n       \\<Longrightarrow> hsplit P x\n 2. \\<And>x y z.\n       \\<lbrakk>\\<And>x x'. B x x' \\<Longrightarrow> P x x';\n        \\<And>x x' y y' z z'.\n           \\<lbrakk>C x x' y y' z z'; P y y'; P z z'\\<rbrakk>\n           \\<Longrightarrow> P x x';\n        \\<exists>xa x'.\n           x = \\<langle>xa, x'\\<rangle> \\<and>\n           (\\<exists>ya y'.\n               y = \\<langle>ya, y'\\<rangle> \\<and>\n               (\\<exists>za z'.\n                   z = \\<langle>za, z'\\<rangle> \\<and>\n                   C xa x' ya y' za z'));\n        hsplit P y; hsplit P z\\<rbrakk>\n       \\<Longrightarrow> hsplit P x\n 3. \\<lbrakk>\\<And>x x'. B x x' \\<Longrightarrow> P x x';\n     \\<And>x x' y y' z z'.\n        \\<lbrakk>C x x' y y' z z'; P y y'; P z z'\\<rbrakk>\n        \\<Longrightarrow> P x x';\n     hsplit P \\<langle>a, a'\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> P a a'", "apply (auto intro: B C)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition BuildSeq3\n   :: \"[[hf,hf,hf] \\<Rightarrow> bool, [hf,hf,hf,hf,hf,hf,hf,hf,hf] \\<Rightarrow> bool, hf, hf, hf, hf, hf] \\<Rightarrow> bool\"\n  where \"BuildSeq3 B C s k y y' y'' \\<equiv>\n         BuildSeq (\\<lambda>p. \\<exists>x x' x''. p = \\<langle>x,x',x''\\<rangle> \\<and> B x x' x'')\n                  (\\<lambda>p q r. \\<exists>x x' x'' y y' y'' z z' z''.\n                           p = \\<langle>x,x',x''\\<rangle> \\<and> q = \\<langle>y,y',y''\\<rangle> \\<and> r = \\<langle>z,z',z''\\<rangle> \\<and>\n                           C x x' x'' y y' y'' z z' z'')\n                  s k \\<langle>y,y',y''\\<rangle>\""], ["", "lemma BuildSeq3_combine:\n  assumes b1: \"BuildSeq3 B C s1 k1 y1 y1' y1''\" and b2: \"BuildSeq3 B C s2 k2 y2 y2' y2''\"\n      and y: \"C y y' y'' y1 y1' y1'' y2 y2' y2''\"\n  shows \"BuildSeq3 B C (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2))) \\<langle>y, y', y''\\<rangle>)\n                       (succ (succ (k1 @+ k2))) y y' y''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. BuildSeq3 B C\n     (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2)))\n       \\<langle>y, y', y''\\<rangle>)\n     (succ (succ (k1 @+ k2))) y y' y''", "using assms"], ["proof (prove)\nusing this:\n  BuildSeq3 B C s1 k1 y1 y1' y1''\n  BuildSeq3 B C s2 k2 y2 y2' y2''\n  C y y' y'' y1 y1' y1'' y2 y2' y2''\n\ngoal (1 subgoal):\n 1. BuildSeq3 B C\n     (insf (seq_append (succ k1) s1 s2) (succ (succ (k1 @+ k2)))\n       \\<langle>y, y', y''\\<rangle>)\n     (succ (succ (k1 @+ k2))) y y' y''", "apply (unfold BuildSeq3_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>BuildSeq\n              (\\<lambda>p.\n                  \\<exists>x x' x''.\n                     p = \\<langle>x, x', x''\\<rangle> \\<and> B x x' x'')\n              (\\<lambda>p q r.\n                  \\<exists>x x' x'' y y' y'' z z' z''.\n                     p = \\<langle>x, x', x''\\<rangle> \\<and>\n                     q = \\<langle>y, y', y''\\<rangle> \\<and>\n                     r = \\<langle>z, z', z''\\<rangle> \\<and>\n                     C x x' x'' y y' y'' z z' z'')\n              s1 k1 \\<langle>y1, y1', y1''\\<rangle>;\n     BuildSeq\n      (\\<lambda>p.\n          \\<exists>x x' x''.\n             p = \\<langle>x, x', x''\\<rangle> \\<and> B x x' x'')\n      (\\<lambda>p q r.\n          \\<exists>x x' x'' y y' y'' z z' z''.\n             p = \\<langle>x, x', x''\\<rangle> \\<and>\n             q = \\<langle>y, y', y''\\<rangle> \\<and>\n             r = \\<langle>z, z', z''\\<rangle> \\<and>\n             C x x' x'' y y' y'' z z' z'')\n      s2 k2 \\<langle>y2, y2', y2''\\<rangle>;\n     C y y' y'' y1 y1' y1'' y2 y2' y2''\\<rbrakk>\n    \\<Longrightarrow> BuildSeq\n                       (\\<lambda>p.\n                           \\<exists>x x' x''.\n                              p = \\<langle>x, x', x''\\<rangle> \\<and>\n                              B x x' x'')\n                       (\\<lambda>p q r.\n                           \\<exists>x x' x'' y y' y'' z z' z''.\n                              p = \\<langle>x, x', x''\\<rangle> \\<and>\n                              q = \\<langle>y, y', y''\\<rangle> \\<and>\n                              r = \\<langle>z, z', z''\\<rangle> \\<and>\n                              C x x' x'' y y' y'' z z' z'')\n                       (insf (seq_append (succ k1) s1 s2)\n                         (succ (succ (k1 @+ k2)))\n                         \\<langle>y, y', y''\\<rangle>)\n                       (succ (succ (k1 @+ k2))) \\<langle>y, y', y''\\<rangle>", "apply (blast intro: BuildSeq_combine)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma BuildSeq3_1: \"B y y' y'' \\<Longrightarrow> BuildSeq3 B C \\<lbrace>\\<langle>0, y, y', y''\\<rangle>\\<rbrace> 0 y y' y''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B y y' y'' \\<Longrightarrow>\n    BuildSeq3 B C \\<lbrace>\\<langle>0, y, y', y''\\<rangle>\\<rbrace> 0 y y'\n     y''", "by (auto simp: BuildSeq3_def BuildSeq_1)"], ["", "lemma BuildSeq3_exI: \"B t t' t'' \\<Longrightarrow> \\<exists>s k. BuildSeq3 B C s k t t' t''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B t t' t'' \\<Longrightarrow> \\<exists>s k. BuildSeq3 B C s k t t' t''", "by (metis BuildSeq3_1)"], ["", "lemma BuildSeq3_induct [consumes 1, case_names B C]:\n  assumes \"BuildSeq3 B C s k a a' a''\"\n      and B: \"\\<And>x x' x''. B x x' x'' \\<Longrightarrow> P x x' x''\"\n      and C: \"\\<And>x x' x'' y y' y'' z z' z''. C x x' x'' y y' y'' z z' z'' \\<Longrightarrow> P y y' y'' \\<Longrightarrow> P z z' z'' \\<Longrightarrow> P x x' x''\"\n  shows \"P a a' a''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P a a' a''", "using assms"], ["proof (prove)\nusing this:\n  BuildSeq3 B C s k a a' a''\n  B ?x ?x' ?x'' \\<Longrightarrow> P ?x ?x' ?x''\n  \\<lbrakk>C ?x ?x' ?x'' ?y ?y' ?y'' ?z ?z' ?z''; P ?y ?y' ?y'';\n   P ?z ?z' ?z''\\<rbrakk>\n  \\<Longrightarrow> P ?x ?x' ?x''\n\ngoal (1 subgoal):\n 1. P a a' a''", "apply (simp add: BuildSeq3_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>BuildSeq\n              (\\<lambda>p.\n                  \\<exists>x x' x''.\n                     p = \\<langle>x, x', x''\\<rangle> \\<and> B x x' x'')\n              (\\<lambda>p q r.\n                  \\<exists>x x' x''.\n                     p = \\<langle>x, x', x''\\<rangle> \\<and>\n                     (\\<exists>y y' y''.\n                         q = \\<langle>y, y', y''\\<rangle> \\<and>\n                         (\\<exists>z z' z''.\n                             r = \\<langle>z, z', z''\\<rangle> \\<and>\n                             C x x' x'' y y' y'' z z' z'')))\n              s k \\<langle>a, a', a''\\<rangle>;\n     \\<And>x x' x''. B x x' x'' \\<Longrightarrow> P x x' x'';\n     \\<And>x x' x'' y y' y'' z z' z''.\n        \\<lbrakk>C x x' x'' y y' y'' z z' z''; P y y' y'';\n         P z z' z''\\<rbrakk>\n        \\<Longrightarrow> P x x' x''\\<rbrakk>\n    \\<Longrightarrow> P a a' a''", "apply (drule BuildSeq_induct [where P = \"\\<lambda>\\<langle>x,x',x''\\<rangle>. P x x' x''\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x x' x''. B x x' x'' \\<Longrightarrow> P x x' x'';\n        \\<And>x x' x'' y y' y'' z z' z''.\n           \\<lbrakk>C x x' x'' y y' y'' z z' z''; P y y' y'';\n            P z z' z''\\<rbrakk>\n           \\<Longrightarrow> P x x' x'';\n        \\<exists>xa x' x''.\n           x = \\<langle>xa, x', x''\\<rangle> \\<and> B xa x' x''\\<rbrakk>\n       \\<Longrightarrow> hsplit (\\<lambda>x. hsplit (P x)) x\n 2. \\<And>x y z.\n       \\<lbrakk>\\<And>x x' x''. B x x' x'' \\<Longrightarrow> P x x' x'';\n        \\<And>x x' x'' y y' y'' z z' z''.\n           \\<lbrakk>C x x' x'' y y' y'' z z' z''; P y y' y'';\n            P z z' z''\\<rbrakk>\n           \\<Longrightarrow> P x x' x'';\n        \\<exists>xa x' x''.\n           x = \\<langle>xa, x', x''\\<rangle> \\<and>\n           (\\<exists>ya y' y''.\n               y = \\<langle>ya, y', y''\\<rangle> \\<and>\n               (\\<exists>za z' z''.\n                   z = \\<langle>za, z', z''\\<rangle> \\<and>\n                   C xa x' x'' ya y' y'' za z' z''));\n        hsplit (\\<lambda>x. hsplit (P x)) y;\n        hsplit (\\<lambda>x. hsplit (P x)) z\\<rbrakk>\n       \\<Longrightarrow> hsplit (\\<lambda>x. hsplit (P x)) x\n 3. \\<lbrakk>\\<And>x x' x''. B x x' x'' \\<Longrightarrow> P x x' x'';\n     \\<And>x x' x'' y y' y'' z z' z''.\n        \\<lbrakk>C x x' x'' y y' y'' z z' z''; P y y' y'';\n         P z z' z''\\<rbrakk>\n        \\<Longrightarrow> P x x' x'';\n     hsplit (\\<lambda>x. hsplit (P x)) \\<langle>a, a', a''\\<rangle>\\<rbrakk>\n    \\<Longrightarrow> P a a' a''", "apply (auto intro: B C)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section \\<open>A Unique Predecessor for every non-empty set\\<close>"], ["", "lemma Rep_hf_0 [simp]: \"Rep_hf 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_hf 0 = 0", "by (metis Abs_hf_inverse HF.HF_def UNIV_I Zero_hf_def image_empty set_encode_empty)"], ["", "lemma hmem_imp_less: \"x \\<^bold>\\<in> y \\<Longrightarrow> Rep_hf x < Rep_hf y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<^bold>\\<in> y \\<Longrightarrow> Rep_hf x < Rep_hf y", "apply (auto simp: hmem_def hfset_def set_decode_def Abs_hf_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = Abs_hf xa; odd (Rep_hf y div 2 ^ xa)\\<rbrakk>\n       \\<Longrightarrow> xa < Rep_hf y", "apply (metis div_less even_zero le_less_trans less_two_power not_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma hsubset_imp_le: \"x \\<le> y \\<Longrightarrow> Rep_hf x \\<le> Rep_hf y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> Rep_hf x \\<le> Rep_hf y", "apply (auto simp: less_eq_hf_def hmem_def hfset_def Abs_hf_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xa.\n       xa \\<in> Abs_hf ` set_decode (Rep_hf x) \\<longrightarrow>\n       xa \\<in> Abs_hf ` set_decode (Rep_hf y) \\<Longrightarrow>\n    Rep_hf x \\<le> Rep_hf y", "apply (cases x rule: Abs_hf_cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ya.\n       \\<lbrakk>\\<forall>xa.\n                   xa \\<in> Abs_hf ` set_decode (Rep_hf x) \\<longrightarrow>\n                   xa \\<in> Abs_hf ` set_decode (Rep_hf y);\n        x = Abs_hf ya; ya \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> Rep_hf x \\<le> Rep_hf y", "apply (cases y rule: Abs_hf_cases, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> Abs_hf `\n                           set_decode (Rep_hf (Abs_hf ya)) \\<longrightarrow>\n                   x \\<in> Abs_hf ` set_decode (Rep_hf (Abs_hf yaa));\n        x = Abs_hf ya; y = Abs_hf yaa\\<rbrakk>\n       \\<Longrightarrow> Rep_hf (Abs_hf ya) \\<le> Rep_hf (Abs_hf yaa)", "apply (rule subset_decode_imp_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ya yaa.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> Abs_hf `\n                           set_decode (Rep_hf (Abs_hf ya)) \\<longrightarrow>\n                   x \\<in> Abs_hf ` set_decode (Rep_hf (Abs_hf yaa));\n        x = Abs_hf ya; y = Abs_hf yaa\\<rbrakk>\n       \\<Longrightarrow> set_decode (Rep_hf (Abs_hf ya))\n                         \\<subseteq> set_decode (Rep_hf (Abs_hf yaa))", "apply (auto simp: Abs_hf_inverse [OF UNIV_I])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ya yaa xa.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> Abs_hf ` set_decode ya \\<longrightarrow>\n                   x \\<in> Abs_hf ` set_decode yaa;\n        x = Abs_hf ya; y = Abs_hf yaa; xa \\<in> set_decode ya\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> set_decode yaa", "apply (metis Abs_hf_inverse UNIV_I imageE imageI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma diff_hmem_imp_less: assumes \"x \\<^bold>\\<in> y\" shows \"Rep_hf (y - \\<lbrace>x\\<rbrace>) < Rep_hf y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_hf (y - \\<lbrace>x\\<rbrace>) < Rep_hf y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Rep_hf (y - \\<lbrace>x\\<rbrace>) < Rep_hf y", "have  \"Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<le> Rep_hf y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<le> Rep_hf y", "by (metis hdiff_iff hsubsetI hsubset_imp_le)"], ["proof (state)\nthis:\n  Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<le> Rep_hf y\n\ngoal (1 subgoal):\n 1. Rep_hf (y - \\<lbrace>x\\<rbrace>) < Rep_hf y", "moreover"], ["proof (state)\nthis:\n  Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<le> Rep_hf y\n\ngoal (1 subgoal):\n 1. Rep_hf (y - \\<lbrace>x\\<rbrace>) < Rep_hf y", "have \"Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<noteq> Rep_hf y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<noteq> Rep_hf y", "using assms"], ["proof (prove)\nusing this:\n  x \\<^bold>\\<in> y\n\ngoal (1 subgoal):\n 1. Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<noteq> Rep_hf y", "by (metis Rep_hf_inject hdiff_iff hinsert_iff)"], ["proof (state)\nthis:\n  Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<noteq> Rep_hf y\n\ngoal (1 subgoal):\n 1. Rep_hf (y - \\<lbrace>x\\<rbrace>) < Rep_hf y", "ultimately"], ["proof (chain)\npicking this:\n  Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<le> Rep_hf y\n  Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<noteq> Rep_hf y", "show ?thesis"], ["proof (prove)\nusing this:\n  Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<le> Rep_hf y\n  Rep_hf (y - \\<lbrace>x\\<rbrace>) \\<noteq> Rep_hf y\n\ngoal (1 subgoal):\n 1. Rep_hf (y - \\<lbrace>x\\<rbrace>) < Rep_hf y", "by (metis le_neq_implies_less)"], ["proof (state)\nthis:\n  Rep_hf (y - \\<lbrace>x\\<rbrace>) < Rep_hf y\n\ngoal:\nNo subgoals!", "qed"], ["", "definition least :: \"hf \\<Rightarrow> hf\"\n  where \"least a \\<equiv> (THE x. x \\<^bold>\\<in> a \\<and> (\\<forall>y. y \\<^bold>\\<in> a \\<longrightarrow> Rep_hf x \\<le> Rep_hf y))\""], ["", "lemma least_equality:\n  assumes \"x \\<^bold>\\<in> a\" and \"\\<And>y. y \\<^bold>\\<in> a \\<Longrightarrow> Rep_hf x \\<le> Rep_hf y\"\n  shows \"least a = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. least a = x", "unfolding least_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE x.\n        x \\<^bold>\\<in> a \\<and>\n        (\\<forall>y.\n            y \\<^bold>\\<in> a \\<longrightarrow> Rep_hf x \\<le> Rep_hf y)) =\n    x", "apply (rule the_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<^bold>\\<in> a \\<and>\n    (\\<forall>y.\n        y \\<^bold>\\<in> a \\<longrightarrow> Rep_hf x \\<le> Rep_hf y)\n 2. \\<And>xa.\n       xa \\<^bold>\\<in> a \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> a \\<longrightarrow>\n           Rep_hf xa \\<le> Rep_hf y) \\<Longrightarrow>\n       xa = x", "apply (metis assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<^bold>\\<in> a \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> a \\<longrightarrow>\n           Rep_hf xa \\<le> Rep_hf y) \\<Longrightarrow>\n       xa = x", "apply (metis Rep_hf_inverse assms eq_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma leastI2_order:\n  assumes \"x \\<^bold>\\<in> a\"\n    and \"\\<And>y. y \\<^bold>\\<in> a \\<Longrightarrow> Rep_hf x \\<le> Rep_hf y\"\n    and \"\\<And>z. z \\<^bold>\\<in> a \\<Longrightarrow> \\<forall>y. y \\<^bold>\\<in> a \\<longrightarrow> Rep_hf z \\<le> Rep_hf y \\<Longrightarrow> Q z\"\n  shows \"Q (least a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q (least a)", "by (metis assms least_equality)"], ["", "lemma nonempty_imp_ex_least: \"a \\<noteq> 0 \\<Longrightarrow> \\<exists>x. x \\<^bold>\\<in> a \\<and> (\\<forall>y. y \\<^bold>\\<in> a \\<longrightarrow> Rep_hf x \\<le> Rep_hf y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>x.\n       x \\<^bold>\\<in> a \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> a \\<longrightarrow> Rep_hf x \\<le> Rep_hf y)", "proof (induction a rule: hf_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>x.\n       x \\<^bold>\\<in> 0 \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> 0 \\<longrightarrow> Rep_hf x \\<le> Rep_hf y)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> 0 \\<Longrightarrow>\n                \\<exists>xa.\n                   xa \\<^bold>\\<in> x \\<and>\n                   (\\<forall>y.\n                       y \\<^bold>\\<in> x \\<longrightarrow>\n                       Rep_hf xa \\<le> Rep_hf y);\n        y \\<noteq> 0 \\<Longrightarrow>\n        \\<exists>x.\n           x \\<^bold>\\<in> y \\<and>\n           (\\<forall>ya.\n               ya \\<^bold>\\<in> y \\<longrightarrow>\n               Rep_hf x \\<le> Rep_hf ya);\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<^bold>\\<in> y \\<triangleleft> x \\<and>\n                            (\\<forall>ya.\n                                ya \\<^bold>\\<in>\n                                y \\<triangleleft> x \\<longrightarrow>\n                                Rep_hf xa \\<le> Rep_hf ya)", "case 0"], ["proof (state)\nthis:\n  0 \\<noteq> 0\n\ngoal (2 subgoals):\n 1. 0 \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>x.\n       x \\<^bold>\\<in> 0 \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> 0 \\<longrightarrow> Rep_hf x \\<le> Rep_hf y)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> 0 \\<Longrightarrow>\n                \\<exists>xa.\n                   xa \\<^bold>\\<in> x \\<and>\n                   (\\<forall>y.\n                       y \\<^bold>\\<in> x \\<longrightarrow>\n                       Rep_hf xa \\<le> Rep_hf y);\n        y \\<noteq> 0 \\<Longrightarrow>\n        \\<exists>x.\n           x \\<^bold>\\<in> y \\<and>\n           (\\<forall>ya.\n               ya \\<^bold>\\<in> y \\<longrightarrow>\n               Rep_hf x \\<le> Rep_hf ya);\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<^bold>\\<in> y \\<triangleleft> x \\<and>\n                            (\\<forall>ya.\n                                ya \\<^bold>\\<in>\n                                y \\<triangleleft> x \\<longrightarrow>\n                                Rep_hf xa \\<le> Rep_hf ya)", "thus ?case"], ["proof (prove)\nusing this:\n  0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<^bold>\\<in> 0 \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> 0 \\<longrightarrow> Rep_hf x \\<le> Rep_hf y)", "by simp"], ["proof (state)\nthis:\n  \\<exists>x.\n     x \\<^bold>\\<in> 0 \\<and>\n     (\\<forall>y.\n         y \\<^bold>\\<in> 0 \\<longrightarrow> Rep_hf x \\<le> Rep_hf y)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> 0 \\<Longrightarrow>\n                \\<exists>xa.\n                   xa \\<^bold>\\<in> x \\<and>\n                   (\\<forall>y.\n                       y \\<^bold>\\<in> x \\<longrightarrow>\n                       Rep_hf xa \\<le> Rep_hf y);\n        y \\<noteq> 0 \\<Longrightarrow>\n        \\<exists>x.\n           x \\<^bold>\\<in> y \\<and>\n           (\\<forall>ya.\n               ya \\<^bold>\\<in> y \\<longrightarrow>\n               Rep_hf x \\<le> Rep_hf ya);\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<^bold>\\<in> y \\<triangleleft> x \\<and>\n                            (\\<forall>ya.\n                                ya \\<^bold>\\<in>\n                                y \\<triangleleft> x \\<longrightarrow>\n                                Rep_hf xa \\<le> Rep_hf ya)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> 0 \\<Longrightarrow>\n                \\<exists>xa.\n                   xa \\<^bold>\\<in> x \\<and>\n                   (\\<forall>y.\n                       y \\<^bold>\\<in> x \\<longrightarrow>\n                       Rep_hf xa \\<le> Rep_hf y);\n        y \\<noteq> 0 \\<Longrightarrow>\n        \\<exists>x.\n           x \\<^bold>\\<in> y \\<and>\n           (\\<forall>ya.\n               ya \\<^bold>\\<in> y \\<longrightarrow>\n               Rep_hf x \\<le> Rep_hf ya);\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<^bold>\\<in> y \\<triangleleft> x \\<and>\n                            (\\<forall>ya.\n                                ya \\<^bold>\\<in>\n                                y \\<triangleleft> x \\<longrightarrow>\n                                Rep_hf xa \\<le> Rep_hf ya)", "case (hinsert u v)"], ["proof (state)\nthis:\n  u \\<noteq> 0 \\<Longrightarrow>\n  \\<exists>x.\n     x \\<^bold>\\<in> u \\<and>\n     (\\<forall>y.\n         y \\<^bold>\\<in> u \\<longrightarrow> Rep_hf x \\<le> Rep_hf y)\n  v \\<noteq> 0 \\<Longrightarrow>\n  \\<exists>x.\n     x \\<^bold>\\<in> v \\<and>\n     (\\<forall>y.\n         y \\<^bold>\\<in> v \\<longrightarrow> Rep_hf x \\<le> Rep_hf y)\n  u \\<^bold>\\<notin> v\n  v \\<triangleleft> u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> 0 \\<Longrightarrow>\n                \\<exists>xa.\n                   xa \\<^bold>\\<in> x \\<and>\n                   (\\<forall>y.\n                       y \\<^bold>\\<in> x \\<longrightarrow>\n                       Rep_hf xa \\<le> Rep_hf y);\n        y \\<noteq> 0 \\<Longrightarrow>\n        \\<exists>x.\n           x \\<^bold>\\<in> y \\<and>\n           (\\<forall>ya.\n               ya \\<^bold>\\<in> y \\<longrightarrow>\n               Rep_hf x \\<le> Rep_hf ya);\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            xa \\<^bold>\\<in> y \\<triangleleft> x \\<and>\n                            (\\<forall>ya.\n                                ya \\<^bold>\\<in>\n                                y \\<triangleleft> x \\<longrightarrow>\n                                Rep_hf xa \\<le> Rep_hf ya)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n           Rep_hf x \\<le> Rep_hf y)", "proof (cases \"v=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = 0 \\<Longrightarrow>\n    \\<exists>x.\n       x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n           Rep_hf x \\<le> Rep_hf y)\n 2. v \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>x.\n       x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n           Rep_hf x \\<le> Rep_hf y)", "case True"], ["proof (state)\nthis:\n  v = 0\n\ngoal (2 subgoals):\n 1. v = 0 \\<Longrightarrow>\n    \\<exists>x.\n       x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n           Rep_hf x \\<le> Rep_hf y)\n 2. v \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>x.\n       x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n           Rep_hf x \\<le> Rep_hf y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  v = 0\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n           Rep_hf x \\<le> Rep_hf y)", "by (rule_tac x=u in exI, simp)"], ["proof (state)\nthis:\n  \\<exists>x.\n     x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n     (\\<forall>y.\n         y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n         Rep_hf x \\<le> Rep_hf y)\n\ngoal (1 subgoal):\n 1. v \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>x.\n       x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n           Rep_hf x \\<le> Rep_hf y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>x.\n       x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n           Rep_hf x \\<le> Rep_hf y)", "case False"], ["proof (state)\nthis:\n  v \\<noteq> 0\n\ngoal (1 subgoal):\n 1. v \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>x.\n       x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n           Rep_hf x \\<le> Rep_hf y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n       (\\<forall>y.\n           y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n           Rep_hf x \\<le> Rep_hf y)", "by (metis dual_order.trans eq_iff hinsert.IH(2) hmem_hinsert\n                  less_eq_insert1_iff linear)"], ["proof (state)\nthis:\n  \\<exists>x.\n     x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n     (\\<forall>y.\n         y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n         Rep_hf x \\<le> Rep_hf y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x.\n     x \\<^bold>\\<in> v \\<triangleleft> u \\<and>\n     (\\<forall>y.\n         y \\<^bold>\\<in> v \\<triangleleft> u \\<longrightarrow>\n         Rep_hf x \\<le> Rep_hf y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma least_hmem: \"a \\<noteq> 0 \\<Longrightarrow> least a \\<^bold>\\<in> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow> least a \\<^bold>\\<in> a", "apply (frule nonempty_imp_ex_least, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>a \\<noteq> 0; x \\<^bold>\\<in> a;\n        \\<forall>y.\n           y \\<^bold>\\<in> a \\<longrightarrow>\n           Rep_hf x \\<le> Rep_hf y\\<rbrakk>\n       \\<Longrightarrow> least a \\<^bold>\\<in> a", "apply (rule leastI2_order, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}