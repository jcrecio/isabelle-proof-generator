{"file_name": "/home/qj213/afp-2021-10-22/thys/HereditarilyFinite/Ordinal.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/HereditarilyFinite", "problem_names": ["lemma Transset_sup: \"Transset x \\<Longrightarrow> Transset y \\<Longrightarrow> Transset (x \\<squnion> y)\"", "lemma Transset_inf: \"Transset x \\<Longrightarrow> Transset y \\<Longrightarrow> Transset (x \\<sqinter> y)\"", "lemma Transset_hinsert: \"Transset x \\<Longrightarrow> y \\<le> x \\<Longrightarrow> Transset (x \\<triangleleft> y)\"", "lemma succ_iff [simp]: \"x \\<^bold>\\<in> succ y \\<longleftrightarrow> x=y \\<or> x \\<^bold>\\<in> y\"", "lemma succ_ne_self [simp]: \"i \\<noteq> succ i\"", "lemma succ_notin_self: \"succ i \\<^bold>\\<notin> i\"", "lemma succE [elim?]: assumes \"x \\<^bold>\\<in> succ y\" obtains \"x=y\" | \"x \\<^bold>\\<in> y\"", "lemma hmem_succ_ne: \"succ x \\<^bold>\\<in> y \\<Longrightarrow> x \\<noteq> y\"", "lemma hball_succ [simp]: \"(\\<forall>x \\<^bold>\\<in> succ k. P x) \\<longleftrightarrow> P k \\<and> (\\<forall>x \\<^bold>\\<in> k. P x)\"", "lemma hbex_succ [simp]: \"(\\<exists>x \\<^bold>\\<in> succ k. P x) \\<longleftrightarrow> P k \\<or> (\\<exists>x \\<^bold>\\<in> k. P x)\"", "lemma One_hf_eq_succ: \"1 = succ 0\"", "lemma zero_hmem_one [iff]: \"x \\<^bold>\\<in> 1 \\<longleftrightarrow> x = 0\"", "lemma hball_One [simp]: \"(\\<forall>x\\<^bold>\\<in>1. P x) = P 0\"", "lemma hbex_One [simp]: \"(\\<exists>x\\<^bold>\\<in>1. P x) = P 0\"", "lemma hpair_neq_succ [simp]: \"\\<langle>x,y\\<rangle> \\<noteq> succ k\"", "lemma succ_neq_hpair [simp]: \"succ k \\<noteq> \\<langle>x,y\\<rangle> \"", "lemma hpair_neq_one [simp]: \"\\<langle>x,y\\<rangle> \\<noteq> 1\"", "lemma one_neq_hpair [simp]: \"1 \\<noteq> \\<langle>x,y\\<rangle>\"", "lemma hmem_succ_self [simp]: \"k \\<^bold>\\<in> succ k\"", "lemma hmem_succ: \"l \\<^bold>\\<in> k \\<Longrightarrow> l \\<^bold>\\<in> succ k\"", "lemma Ord_0 [iff]: \"Ord 0\"", "lemma Ord_succ: \"Ord(k) \\<Longrightarrow> Ord(succ(k))\"", "lemma Ord_1 [iff]: \"Ord 1\"", "lemma OrdmemD: \"Ord(k) \\<Longrightarrow> j \\<^bold>\\<in> k \\<Longrightarrow> j \\<le> k\"", "lemma Ord_trans: \"\\<lbrakk> i\\<^bold>\\<in>j;  j\\<^bold>\\<in>k;  Ord(k) \\<rbrakk>  \\<Longrightarrow> i\\<^bold>\\<in>k\"", "lemma hmem_0_Ord:\n  assumes k: \"Ord(k)\" and knz: \"k \\<noteq> 0\" shows \"0 \\<^bold>\\<in> k\"", "lemma Ord_in_Ord: \"\\<lbrakk> Ord(k);  m \\<^bold>\\<in> k \\<rbrakk>  \\<Longrightarrow> Ord(m)\"", "lemma Ord_induct [consumes 1, case_names step]:\n  assumes k: \"Ord(k)\"\n      and step: \"\\<And>x.\\<lbrakk> Ord(x);  \\<And>y. y \\<^bold>\\<in> x \\<Longrightarrow> P(y) \\<rbrakk>  \\<Longrightarrow> P(x)\"\n  shows \"P(k)\"", "lemma Ord_linear: \"Ord(k) \\<Longrightarrow> Ord(l) \\<Longrightarrow> k\\<^bold>\\<in>l \\<or> k=l \\<or> l\\<^bold>\\<in>k\"", "lemma Ord_linear_lt:\n  assumes o: \"Ord(k)\" \"Ord(l)\"\n  obtains (lt) \"k\\<^bold>\\<in>l\" | (eq) \"k=l\" | (gt) \"l\\<^bold>\\<in>k\"", "lemma Ord_linear2:\n  assumes o: \"Ord(k)\" \"Ord(l)\"\n  obtains (lt) \"k\\<^bold>\\<in>l\" | (ge) \"l \\<le> k\"", "lemma Ord_linear_le:\n  assumes o: \"Ord(k)\" \"Ord(l)\"\n  obtains (le) \"k \\<le> l\" | (ge) \"l \\<le> k\"", "lemma hunion_less_iff [simp]: \"\\<lbrakk>Ord i; Ord j\\<rbrakk> \\<Longrightarrow> i \\<squnion> j < k \\<longleftrightarrow> i<k \\<and> j<k\"", "lemma Ord_mem_iff_lt: \"Ord(k) \\<Longrightarrow> Ord(l) \\<Longrightarrow> k\\<^bold>\\<in>l \\<longleftrightarrow> k < l\"", "lemma le_succE: \"succ i \\<le> succ j \\<Longrightarrow> i \\<le> j\"", "lemma le_succ_iff: \"Ord i \\<Longrightarrow> Ord j \\<Longrightarrow> succ i \\<le> succ j \\<longleftrightarrow> i \\<le> j\"", "lemma succ_inject_iff [iff]: \"succ i = succ j \\<longleftrightarrow> i = j\"", "lemma mem_succ_iff [simp]: \"Ord j \\<Longrightarrow> succ i \\<^bold>\\<in> succ j \\<longleftrightarrow> i \\<^bold>\\<in> j\"", "lemma Ord_mem_succ_cases:\n  assumes \"Ord(k)\" \"l \\<^bold>\\<in> k\"\n  shows \"succ l = k \\<or> succ l \\<^bold>\\<in> k\"", "lemma Ord_Union [intro,simp]: \"\\<lbrakk> \\<And>i. i\\<^bold>\\<in>A \\<Longrightarrow> Ord(i) \\<rbrakk>  \\<Longrightarrow> Ord(\\<Squnion> A)\"", "lemma Ord_Inter [intro,simp]: \"\\<lbrakk> \\<And>i. i\\<^bold>\\<in>A \\<Longrightarrow> Ord(i) \\<rbrakk>  \\<Longrightarrow> Ord(\\<Sqinter> A)\"", "lemma hmem_Sup_Ords: \"\\<lbrakk>A\\<noteq>0; \\<And>i. i\\<^bold>\\<in>A \\<Longrightarrow> Ord(i)\\<rbrakk> \\<Longrightarrow> \\<Squnion>A \\<^bold>\\<in> A\"", "lemma hmem_Inf_Ords: \"\\<lbrakk>A\\<noteq>0; \\<And>i. i\\<^bold>\\<in>A \\<Longrightarrow> Ord(i)\\<rbrakk> \\<Longrightarrow> \\<Sqinter>A \\<^bold>\\<in> A\"", "lemma Ord_pred: \"\\<lbrakk>Ord(k); k \\<noteq> 0\\<rbrakk> \\<Longrightarrow> succ(\\<Squnion>k) = k\"", "lemma Ord_cases [cases type: hf, case_names 0 succ]:\n  assumes Ok: \"Ord(k)\"\n  obtains \"k = 0\" | l where \"Ord l\" \"succ l = k\"", "lemma Ord_induct2 [consumes 1, case_names 0 succ, induct type: hf]:\n  assumes k: \"Ord(k)\"\n      and P: \"P 0\" \"\\<And>k. Ord k \\<Longrightarrow> P k \\<Longrightarrow> P (succ k)\"\n  shows \"P k\"", "lemma Ord_succ_iff [iff]: \"Ord (succ k) = Ord k\"", "lemma [simp]: \"succ k \\<noteq> 0\"", "lemma Ord_Sup_succ_eq [simp]: \"Ord k \\<Longrightarrow> \\<Squnion>(succ k) = k\"", "lemma Ord_lt_succ_iff_le: \"Ord k \\<Longrightarrow> Ord l \\<Longrightarrow> k < succ l \\<longleftrightarrow> k \\<le> l\"", "lemma zero_in_Ord: \"Ord k \\<Longrightarrow> k=0 \\<or> 0 \\<^bold>\\<in> k\"", "lemma hpair_neq_Ord: \"Ord k \\<Longrightarrow> \\<langle>x,y\\<rangle> \\<noteq> k\"", "lemma hpair_neq_Ord': assumes k: \"Ord k\" shows \"k \\<noteq> \\<langle>x,y\\<rangle>\"", "lemma Not_Ord_hpair [iff]: \"\\<not> Ord \\<langle>x,y\\<rangle>\"", "lemma is_hpair [simp]: \"is_hpair \\<langle>x,y\\<rangle>\"", "lemma Ord_not_hpair: \"Ord x \\<Longrightarrow> \\<not> is_hpair x\"", "lemma zero_in_succ [simp,intro]: \"Ord i \\<Longrightarrow> 0 \\<^bold>\\<in> succ i\"", "lemma Ord_ord_of [simp]: \"Ord (ord_of k)\"", "lemma ord_of_inject [iff]: \"ord_of i = ord_of j \\<longleftrightarrow> i=j\"", "lemma ord_of_minus_1: \"n > 0 \\<Longrightarrow> ord_of n = succ (ord_of (n - 1))\"", "lemma nat_of_ord_ord_of [simp]: \"nat_of_ord (ord_of n) = n\"", "lemma nat_of_ord_0 [simp]: \"nat_of_ord 0 = 0\"", "lemma ord_of_nat_of_ord [simp]: \"Ord x \\<Longrightarrow> ord_of (nat_of_ord x) = x\"", "lemma nat_of_ord_inject: \"Ord x \\<Longrightarrow> Ord y \\<Longrightarrow> nat_of_ord x = nat_of_ord y \\<longleftrightarrow> x = y\"", "lemma nat_of_ord_succ [simp]: \"Ord x \\<Longrightarrow> nat_of_ord (succ x) = Suc (nat_of_ord x)\"", "lemma inj_ord_of: \"inj_on ord_of A\"", "lemma hfset_ord_of: \"hfset (ord_of n) = ord_of ` {0..<n}\"", "lemma bij_betw_ord_of: \"bij_betw ord_of {0..<n} (hfset (ord_of n))\"", "lemma bij_betw_ord_ofI: \"bij_betw h A {0..<n} \\<Longrightarrow> bij_betw (ord_of \\<circ> h) A (hfset (ord_of n))\"", "lemma Seq_0 [iff]: \"Seq 0 0\"", "lemma Seq_succ_D: \"Seq s (succ k) \\<Longrightarrow> Seq s k\"", "lemma Seq_Ord_D: \"Seq s k \\<Longrightarrow> l \\<^bold>\\<in> k \\<Longrightarrow> Ord k \\<Longrightarrow> Seq s l\"", "lemma Seq_restr: \"Seq s (succ k) \\<Longrightarrow> Seq (hrestrict s k) k\"", "lemma Seq_Ord_restr: \"\\<lbrakk>Seq s k; l \\<^bold>\\<in> k; Ord k\\<rbrakk> \\<Longrightarrow> Seq (hrestrict s l) l\"", "lemma Seq_ins: \"\\<lbrakk>Seq s k; k \\<^bold>\\<notin> hdomain s\\<rbrakk> \\<Longrightarrow> Seq (s \\<triangleleft> \\<langle>k, y\\<rangle>) (succ k)\"", "lemma hfunction_insf: \"hfunction s \\<Longrightarrow> hfunction (insf s k y)\"", "lemma Seq_insf: \"Seq s k \\<Longrightarrow> Seq (insf s k y) (succ k)\"", "lemma Seq_succ_iff: \"Seq s (succ k) \\<longleftrightarrow> Seq s k \\<and> (\\<exists>y. \\<langle>k, y\\<rangle> \\<^bold>\\<in> s)\"", "lemma nonrestrictD: \"a \\<^bold>\\<in> nonrestrict s X \\<Longrightarrow> a \\<^bold>\\<in> s\"", "lemma hpair_in_nonrestrict_iff [simp]: \"\\<langle>a,b\\<rangle> \\<^bold>\\<in> nonrestrict s X \\<longleftrightarrow> \\<langle>a,b\\<rangle> \\<^bold>\\<in> s \\<and> \\<not> a \\<^bold>\\<in> X\"", "lemma app_nonrestrict_Seq: \"Seq s k \\<Longrightarrow> z \\<^bold>\\<notin> X \\<Longrightarrow> app (nonrestrict s X) z = app s z\"", "lemma app_insf_Seq: \"Seq s k \\<Longrightarrow> app (insf s k y) k = y\"", "lemma app_insf2_Seq: \"Seq s k \\<Longrightarrow> k' \\<noteq> k \\<Longrightarrow> app (insf s k y) k' = app s k'\"", "lemma app_insf_Seq_if: \"Seq s k \\<Longrightarrow> app (insf s k y) k' = (if k' = k then y else app s k')\"", "lemma Seq_imp_eq_app: \"\\<lbrakk>Seq s d; \\<langle>x,y\\<rangle> \\<^bold>\\<in> s\\<rbrakk> \\<Longrightarrow> app s x = y\"", "lemma Seq_iff_app: \"\\<lbrakk>Seq s d; x \\<^bold>\\<in> d\\<rbrakk> \\<Longrightarrow> \\<langle>x,y\\<rangle> \\<^bold>\\<in> s \\<longleftrightarrow> app s x = y\"", "lemma Exists_iff_app: \"Seq s d \\<Longrightarrow> x \\<^bold>\\<in> d \\<Longrightarrow> (\\<exists>y. \\<langle>x, y\\<rangle> \\<^bold>\\<in> s \\<and> P y) = P (app s x)\"", "lemma Ord_trans2: \"\\<lbrakk>i2 \\<^bold>\\<in> i; i \\<^bold>\\<in> j;  j \\<^bold>\\<in> k;  Ord k\\<rbrakk> \\<Longrightarrow> i2\\<^bold>\\<in>k\"", "lemma Seq_succ_insf:\n  assumes s: \"Seq s (succ k)\"  shows \"\\<exists> y. s = insf s k y\"", "lemma ord_rec_Seq_succ_iff:\n  assumes k: \"Ord k\" and knz: \"k \\<noteq> 0\"\n  shows \"ord_rec_Seq T G s (succ k) z \\<longleftrightarrow> (\\<exists> s' y. ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y)\"", "lemma ord_rec_Seq_functional:\n   \"Ord k \\<Longrightarrow> k \\<noteq> 0 \\<Longrightarrow> ord_rec_Seq T G s k y \\<Longrightarrow> ord_rec_Seq T G s' k y' \\<Longrightarrow> y' = y\"", "lemma ord_recp_functional: \"ord_recp T G H x y \\<Longrightarrow> ord_recp T G H x y' \\<Longrightarrow> y' = y\"", "lemma ord_recp_succ_iff:\n  assumes k: \"Ord k\" shows \"ord_recp T G H (succ k) z \\<longleftrightarrow> (\\<exists>y. z = G y \\<and> ord_recp T G H k y)\"", "lemma ord_rec_0 [simp]: \"ord_rec T G H 0 = T\"", "lemma ord_recp_total: \"\\<exists>y. ord_recp T G H x y\"", "lemma ord_rec_succ [simp]:\n  assumes k: \"Ord k\" shows \"ord_rec T G H (succ k) = G (ord_rec T G H k)\"", "lemma ord_rec_non [simp]: \"\\<not> Ord x \\<Longrightarrow> ord_rec T G H x = H x\""], "translations": [["", "lemma Transset_sup: \"Transset x \\<Longrightarrow> Transset y \\<Longrightarrow> Transset (x \\<squnion> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Transset x; Transset y\\<rbrakk>\n    \\<Longrightarrow> Transset (x \\<squnion> y)", "by (auto simp: Transset_def)"], ["", "lemma Transset_inf: \"Transset x \\<Longrightarrow> Transset y \\<Longrightarrow> Transset (x \\<sqinter> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Transset x; Transset y\\<rbrakk>\n    \\<Longrightarrow> Transset (x \\<sqinter> y)", "by (auto simp: Transset_def)"], ["", "lemma Transset_hinsert: \"Transset x \\<Longrightarrow> y \\<le> x \\<Longrightarrow> Transset (x \\<triangleleft> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Transset x; y \\<le> x\\<rbrakk>\n    \\<Longrightarrow> Transset (x \\<triangleleft> y)", "by (auto simp: Transset_def)"], ["", "text \\<open>In HF, the ordinals are simply the natural numbers. But the definitions are the same\n      as for transfinite ordinals.\\<close>"], ["", "definition\n  Ord  :: \"hf \\<Rightarrow> bool\"  where\n    \"Ord(k)      \\<equiv> Transset(k) \\<and> (\\<forall>x \\<^bold>\\<in> k. Transset(x))\""], ["", "subsection \\<open>Definition 2.2 (Successor).\\<close>"], ["", "definition\n  succ  :: \"hf \\<Rightarrow> hf\"  where\n    \"succ(x)      \\<equiv> hinsert x x\""], ["", "lemma succ_iff [simp]: \"x \\<^bold>\\<in> succ y \\<longleftrightarrow> x=y \\<or> x \\<^bold>\\<in> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<^bold>\\<in> succ y) = (x = y \\<or> x \\<^bold>\\<in> y)", "by (simp add: succ_def)"], ["", "lemma succ_ne_self [simp]: \"i \\<noteq> succ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> succ i", "by (metis hmem_ne succ_iff)"], ["", "lemma succ_notin_self: \"succ i \\<^bold>\\<notin> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ i \\<^bold>\\<notin> i", "by (metis hmem_ne succ_iff)"], ["", "lemma succE [elim?]: assumes \"x \\<^bold>\\<in> succ y\" obtains \"x=y\" | \"x \\<^bold>\\<in> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = y \\<Longrightarrow> thesis;\n     x \\<^bold>\\<in> y \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (metis assms succ_iff)"], ["", "lemma hmem_succ_ne: \"succ x \\<^bold>\\<in> y \\<Longrightarrow> x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ x \\<^bold>\\<in> y \\<Longrightarrow> x \\<noteq> y", "by (metis hmem_not_refl succ_iff)"], ["", "lemma hball_succ [simp]: \"(\\<forall>x \\<^bold>\\<in> succ k. P x) \\<longleftrightarrow> P k \\<and> (\\<forall>x \\<^bold>\\<in> k. P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HBall (succ k) P = (P k \\<and> HBall k P)", "by (auto simp: HBall_def)"], ["", "lemma hbex_succ [simp]: \"(\\<exists>x \\<^bold>\\<in> succ k. P x) \\<longleftrightarrow> P k \\<or> (\\<exists>x \\<^bold>\\<in> k. P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HBex (succ k) P = (P k \\<or> HBex k P)", "by (auto simp: HBex_def)"], ["", "lemma One_hf_eq_succ: \"1 = succ 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = succ 0", "by (metis One_hf_def succ_def)"], ["", "lemma zero_hmem_one [iff]: \"x \\<^bold>\\<in> 1 \\<longleftrightarrow> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<^bold>\\<in> 1) = (x = 0)", "by (metis One_hf_eq_succ hmem_hempty succ_iff)"], ["", "lemma hball_One [simp]: \"(\\<forall>x\\<^bold>\\<in>1. P x) = P 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HBall 1 P = P 0", "by (simp add: One_hf_eq_succ)"], ["", "lemma hbex_One [simp]: \"(\\<exists>x\\<^bold>\\<in>1. P x) = P 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HBex 1 P = P 0", "by (simp add: One_hf_eq_succ)"], ["", "lemma hpair_neq_succ [simp]: \"\\<langle>x,y\\<rangle> \\<noteq> succ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>x, y\\<rangle> \\<noteq> succ k", "by (auto simp: succ_def hpair_def) (metis hemptyE hmem_hinsert hmem_ne)"], ["", "lemma succ_neq_hpair [simp]: \"succ k \\<noteq> \\<langle>x,y\\<rangle> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ k \\<noteq> \\<langle>x, y\\<rangle>", "by (metis hpair_neq_succ)"], ["", "lemma hpair_neq_one [simp]: \"\\<langle>x,y\\<rangle> \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>x, y\\<rangle> \\<noteq> 1", "by (metis One_hf_eq_succ hpair_neq_succ)"], ["", "lemma one_neq_hpair [simp]: \"1 \\<noteq> \\<langle>x,y\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 \\<noteq> \\<langle>x, y\\<rangle>", "by (metis hpair_neq_one)"], ["", "lemma hmem_succ_self [simp]: \"k \\<^bold>\\<in> succ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<^bold>\\<in> succ k", "by (metis succ_iff)"], ["", "lemma hmem_succ: \"l \\<^bold>\\<in> k \\<Longrightarrow> l \\<^bold>\\<in> succ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<^bold>\\<in> k \\<Longrightarrow> l \\<^bold>\\<in> succ k", "by (metis succ_iff)"], ["", "text \\<open>Theorem 2.3.\\<close>"], ["", "lemma Ord_0 [iff]: \"Ord 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord 0", "by (simp add: Ord_def Transset_def)"], ["", "lemma Ord_succ: \"Ord(k) \\<Longrightarrow> Ord(succ(k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord k \\<Longrightarrow> Ord (succ k)", "by (simp add: Ord_def Transset_def succ_def less_eq_insert2_iff HBall_def)"], ["", "lemma Ord_1 [iff]: \"Ord 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord 1", "by (metis One_hf_def Ord_0 Ord_succ succ_def)"], ["", "lemma OrdmemD: \"Ord(k) \\<Longrightarrow> j \\<^bold>\\<in> k \\<Longrightarrow> j \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord k; j \\<^bold>\\<in> k\\<rbrakk> \\<Longrightarrow> j \\<le> k", "by (simp add: Ord_def Transset_def HBall_def)"], ["", "lemma Ord_trans: \"\\<lbrakk> i\\<^bold>\\<in>j;  j\\<^bold>\\<in>k;  Ord(k) \\<rbrakk>  \\<Longrightarrow> i\\<^bold>\\<in>k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<^bold>\\<in> j; j \\<^bold>\\<in> k; Ord k\\<rbrakk>\n    \\<Longrightarrow> i \\<^bold>\\<in> k", "by (blast dest: OrdmemD)"], ["", "lemma hmem_0_Ord:\n  assumes k: \"Ord(k)\" and knz: \"k \\<noteq> 0\" shows \"0 \\<^bold>\\<in> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<^bold>\\<in> k", "by (metis foundation [OF knz] Ord_trans hempty_iff hinter_iff k)"], ["", "lemma Ord_in_Ord: \"\\<lbrakk> Ord(k);  m \\<^bold>\\<in> k \\<rbrakk>  \\<Longrightarrow> Ord(m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord k; m \\<^bold>\\<in> k\\<rbrakk> \\<Longrightarrow> Ord m", "by (auto simp: Ord_def Transset_def)"], ["", "subsection \\<open>Induction, Linearity, etc.\\<close>"], ["", "lemma Ord_induct [consumes 1, case_names step]:\n  assumes k: \"Ord(k)\"\n      and step: \"\\<And>x.\\<lbrakk> Ord(x);  \\<And>y. y \\<^bold>\\<in> x \\<Longrightarrow> P(y) \\<rbrakk>  \\<Longrightarrow> P(x)\"\n  shows \"P(k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P k", "have \"\\<forall>m \\<^bold>\\<in> k. Ord(m) \\<longrightarrow> P(m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m\\<^bold>\\<in>k. Ord m \\<longrightarrow> P m", "proof (induct k rule: hf_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>m\\<^bold>\\<in>0. Ord m \\<longrightarrow> P m\n 2. \\<And>x y.\n       \\<lbrakk>\\<forall>m\\<^bold>\\<in>x. Ord m \\<longrightarrow> P m;\n        \\<forall>m\\<^bold>\\<in>y. Ord m \\<longrightarrow> P m;\n        x \\<^bold>\\<notin> y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m\\<^bold>\\<in>y \\<triangleleft> x.\n                            Ord m \\<longrightarrow> P m", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<forall>m\\<^bold>\\<in>0. Ord m \\<longrightarrow> P m\n 2. \\<And>x y.\n       \\<lbrakk>\\<forall>m\\<^bold>\\<in>x. Ord m \\<longrightarrow> P m;\n        \\<forall>m\\<^bold>\\<in>y. Ord m \\<longrightarrow> P m;\n        x \\<^bold>\\<notin> y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m\\<^bold>\\<in>y \\<triangleleft> x.\n                            Ord m \\<longrightarrow> P m", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m\\<^bold>\\<in>0. Ord m \\<longrightarrow> P m", "by simp"], ["proof (state)\nthis:\n  \\<forall>m\\<^bold>\\<in>0. Ord m \\<longrightarrow> P m\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>m\\<^bold>\\<in>x. Ord m \\<longrightarrow> P m;\n        \\<forall>m\\<^bold>\\<in>y. Ord m \\<longrightarrow> P m;\n        x \\<^bold>\\<notin> y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m\\<^bold>\\<in>y \\<triangleleft> x.\n                            Ord m \\<longrightarrow> P m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>m\\<^bold>\\<in>x. Ord m \\<longrightarrow> P m;\n        \\<forall>m\\<^bold>\\<in>y. Ord m \\<longrightarrow> P m;\n        x \\<^bold>\\<notin> y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m\\<^bold>\\<in>y \\<triangleleft> x.\n                            Ord m \\<longrightarrow> P m", "case (hinsert a b)"], ["proof (state)\nthis:\n  \\<forall>m\\<^bold>\\<in>a. Ord m \\<longrightarrow> P m\n  \\<forall>m\\<^bold>\\<in>b. Ord m \\<longrightarrow> P m\n  a \\<^bold>\\<notin> b\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<forall>m\\<^bold>\\<in>x. Ord m \\<longrightarrow> P m;\n        \\<forall>m\\<^bold>\\<in>y. Ord m \\<longrightarrow> P m;\n        x \\<^bold>\\<notin> y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m\\<^bold>\\<in>y \\<triangleleft> x.\n                            Ord m \\<longrightarrow> P m", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>m\\<^bold>\\<in>a. Ord m \\<longrightarrow> P m\n  \\<forall>m\\<^bold>\\<in>b. Ord m \\<longrightarrow> P m\n  a \\<^bold>\\<notin> b\n\ngoal (1 subgoal):\n 1. \\<forall>m\\<^bold>\\<in>b \\<triangleleft> a. Ord m \\<longrightarrow> P m", "by (auto intro: Ord_in_Ord step)"], ["proof (state)\nthis:\n  \\<forall>m\\<^bold>\\<in>b \\<triangleleft> a. Ord m \\<longrightarrow> P m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>m\\<^bold>\\<in>k. Ord m \\<longrightarrow> P m\n\ngoal (1 subgoal):\n 1. P k", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>m\\<^bold>\\<in>k. Ord m \\<longrightarrow> P m\n\ngoal (1 subgoal):\n 1. P k", "using k"], ["proof (prove)\nusing this:\n  \\<forall>m\\<^bold>\\<in>k. Ord m \\<longrightarrow> P m\n  Ord k\n\ngoal (1 subgoal):\n 1. P k", "by (auto intro: Ord_in_Ord step)"], ["proof (state)\nthis:\n  P k\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Theorem 2.4 (Comparability of ordinals).\\<close>"], ["", "lemma Ord_linear: \"Ord(k) \\<Longrightarrow> Ord(l) \\<Longrightarrow> k\\<^bold>\\<in>l \\<or> k=l \\<or> l\\<^bold>\\<in>k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord k; Ord l\\<rbrakk>\n    \\<Longrightarrow> k \\<^bold>\\<in> l \\<or> k = l \\<or> l \\<^bold>\\<in> k", "proof (induct k arbitrary: l rule: Ord_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>Ord x;\n        \\<And>y l.\n           \\<lbrakk>y \\<^bold>\\<in> x; Ord l\\<rbrakk>\n           \\<Longrightarrow> y \\<^bold>\\<in> l \\<or>\n                             y = l \\<or> l \\<^bold>\\<in> y;\n        Ord l\\<rbrakk>\n       \\<Longrightarrow> x \\<^bold>\\<in> l \\<or>\n                         x = l \\<or> l \\<^bold>\\<in> x", "case (step k)"], ["proof (state)\nthis:\n  Ord k\n  \\<lbrakk>?y \\<^bold>\\<in> k; Ord ?l\\<rbrakk>\n  \\<Longrightarrow> ?y \\<^bold>\\<in> ?l \\<or>\n                    ?y = ?l \\<or> ?l \\<^bold>\\<in> ?y\n  Ord l\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>Ord x;\n        \\<And>y l.\n           \\<lbrakk>y \\<^bold>\\<in> x; Ord l\\<rbrakk>\n           \\<Longrightarrow> y \\<^bold>\\<in> l \\<or>\n                             y = l \\<or> l \\<^bold>\\<in> y;\n        Ord l\\<rbrakk>\n       \\<Longrightarrow> x \\<^bold>\\<in> l \\<or>\n                         x = l \\<or> l \\<^bold>\\<in> x", "note step_k = step"], ["proof (state)\nthis:\n  Ord k\n  \\<lbrakk>?y \\<^bold>\\<in> k; Ord ?l\\<rbrakk>\n  \\<Longrightarrow> ?y \\<^bold>\\<in> ?l \\<or>\n                    ?y = ?l \\<or> ?l \\<^bold>\\<in> ?y\n  Ord l\n\ngoal (1 subgoal):\n 1. \\<And>x l.\n       \\<lbrakk>Ord x;\n        \\<And>y l.\n           \\<lbrakk>y \\<^bold>\\<in> x; Ord l\\<rbrakk>\n           \\<Longrightarrow> y \\<^bold>\\<in> l \\<or>\n                             y = l \\<or> l \\<^bold>\\<in> y;\n        Ord l\\<rbrakk>\n       \\<Longrightarrow> x \\<^bold>\\<in> l \\<or>\n                         x = l \\<or> l \\<^bold>\\<in> x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<^bold>\\<in> l \\<or> k = l \\<or> l \\<^bold>\\<in> k", "using \\<open>Ord(l)\\<close>"], ["proof (prove)\nusing this:\n  Ord l\n\ngoal (1 subgoal):\n 1. k \\<^bold>\\<in> l \\<or> k = l \\<or> l \\<^bold>\\<in> k", "proof (induct l rule: Ord_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Ord x;\n        \\<And>y.\n           y \\<^bold>\\<in> x \\<Longrightarrow>\n           k \\<^bold>\\<in> y \\<or> k = y \\<or> y \\<^bold>\\<in> k\\<rbrakk>\n       \\<Longrightarrow> k \\<^bold>\\<in> x \\<or>\n                         k = x \\<or> x \\<^bold>\\<in> k", "case (step l)"], ["proof (state)\nthis:\n  Ord l\n  ?y \\<^bold>\\<in> l \\<Longrightarrow>\n  k \\<^bold>\\<in> ?y \\<or> k = ?y \\<or> ?y \\<^bold>\\<in> k\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Ord x;\n        \\<And>y.\n           y \\<^bold>\\<in> x \\<Longrightarrow>\n           k \\<^bold>\\<in> y \\<or> k = y \\<or> y \\<^bold>\\<in> k\\<rbrakk>\n       \\<Longrightarrow> k \\<^bold>\\<in> x \\<or>\n                         k = x \\<or> x \\<^bold>\\<in> k", "thus ?case"], ["proof (prove)\nusing this:\n  Ord l\n  ?y \\<^bold>\\<in> l \\<Longrightarrow>\n  k \\<^bold>\\<in> ?y \\<or> k = ?y \\<or> ?y \\<^bold>\\<in> k\n\ngoal (1 subgoal):\n 1. k \\<^bold>\\<in> l \\<or> k = l \\<or> l \\<^bold>\\<in> k", "using step_k"], ["proof (prove)\nusing this:\n  Ord l\n  ?y \\<^bold>\\<in> l \\<Longrightarrow>\n  k \\<^bold>\\<in> ?y \\<or> k = ?y \\<or> ?y \\<^bold>\\<in> k\n  Ord k\n  \\<lbrakk>?y \\<^bold>\\<in> k; Ord ?l\\<rbrakk>\n  \\<Longrightarrow> ?y \\<^bold>\\<in> ?l \\<or>\n                    ?y = ?l \\<or> ?l \\<^bold>\\<in> ?y\n  Ord la__\n\ngoal (1 subgoal):\n 1. k \\<^bold>\\<in> l \\<or> k = l \\<or> l \\<^bold>\\<in> k", "by (metis Ord_trans hf_equalityI)"], ["proof (state)\nthis:\n  k \\<^bold>\\<in> l \\<or> k = l \\<or> l \\<^bold>\\<in> k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  k \\<^bold>\\<in> l \\<or> k = l \\<or> l \\<^bold>\\<in> k\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The trichotomy law for ordinals\\<close>"], ["", "lemma Ord_linear_lt:\n  assumes o: \"Ord(k)\" \"Ord(l)\"\n  obtains (lt) \"k\\<^bold>\\<in>l\" | (eq) \"k=l\" | (gt) \"l\\<^bold>\\<in>k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<^bold>\\<in> l \\<Longrightarrow> thesis;\n     k = l \\<Longrightarrow> thesis;\n     l \\<^bold>\\<in> k \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (metis Ord_linear o)"], ["", "lemma Ord_linear2:\n  assumes o: \"Ord(k)\" \"Ord(l)\"\n  obtains (lt) \"k\\<^bold>\\<in>l\" | (ge) \"l \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<^bold>\\<in> l \\<Longrightarrow> thesis;\n     l \\<le> k \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (metis Ord_linear OrdmemD order_eq_refl o)"], ["", "lemma Ord_linear_le:\n  assumes o: \"Ord(k)\" \"Ord(l)\"\n  obtains (le) \"k \\<le> l\" | (ge) \"l \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<le> l \\<Longrightarrow> thesis;\n     l \\<le> k \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (metis Ord_linear2 OrdmemD o)"], ["", "lemma hunion_less_iff [simp]: \"\\<lbrakk>Ord i; Ord j\\<rbrakk> \\<Longrightarrow> i \\<squnion> j < k \\<longleftrightarrow> i<k \\<and> j<k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord i; Ord j\\<rbrakk>\n    \\<Longrightarrow> (i \\<squnion> j < k) = (i < k \\<and> j < k)", "by (metis Ord_linear_le le_iff_sup sup.order_iff sup.strict_boundedE)"], ["", "text \\<open>Theorem 2.5\\<close>"], ["", "lemma Ord_mem_iff_lt: \"Ord(k) \\<Longrightarrow> Ord(l) \\<Longrightarrow> k\\<^bold>\\<in>l \\<longleftrightarrow> k < l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord k; Ord l\\<rbrakk>\n    \\<Longrightarrow> (k \\<^bold>\\<in> l) = (k < l)", "by (metis Ord_linear OrdmemD hmem_not_refl less_hf_def less_le_not_le)"], ["", "lemma le_succE: \"succ i \\<le> succ j \\<Longrightarrow> i \\<le> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ i \\<le> succ j \\<Longrightarrow> i \\<le> j", "by (simp add: less_eq_hf_def) (metis hmem_not_sym)"], ["", "lemma le_succ_iff: \"Ord i \\<Longrightarrow> Ord j \\<Longrightarrow> succ i \\<le> succ j \\<longleftrightarrow> i \\<le> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord i; Ord j\\<rbrakk>\n    \\<Longrightarrow> (succ i \\<le> succ j) = (i \\<le> j)", "by (metis Ord_linear_le Ord_succ le_succE order_antisym)"], ["", "lemma succ_inject_iff [iff]: \"succ i = succ j \\<longleftrightarrow> i = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (succ i = succ j) = (i = j)", "by (metis succ_def hmem_hinsert hmem_not_sym)"], ["", "lemma mem_succ_iff [simp]: \"Ord j \\<Longrightarrow> succ i \\<^bold>\\<in> succ j \\<longleftrightarrow> i \\<^bold>\\<in> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord j \\<Longrightarrow>\n    (succ i \\<^bold>\\<in> succ j) = (i \\<^bold>\\<in> j)", "by (metis Ord_in_Ord Ord_mem_iff_lt Ord_succ succ_def less_eq_insert1_iff less_hf_def succ_iff)"], ["", "lemma Ord_mem_succ_cases:\n  assumes \"Ord(k)\" \"l \\<^bold>\\<in> k\"\n  shows \"succ l = k \\<or> succ l \\<^bold>\\<in> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ l = k \\<or> succ l \\<^bold>\\<in> k", "by (metis assms mem_succ_iff succ_iff)"], ["", "subsection \\<open>Supremum and Infimum\\<close>"], ["", "lemma Ord_Union [intro,simp]: \"\\<lbrakk> \\<And>i. i\\<^bold>\\<in>A \\<Longrightarrow> Ord(i) \\<rbrakk>  \\<Longrightarrow> Ord(\\<Squnion> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i. i \\<^bold>\\<in> A \\<Longrightarrow> Ord i) \\<Longrightarrow>\n    Ord (\\<Squnion>A)", "by (auto simp: Ord_def Transset_def) blast"], ["", "lemma Ord_Inter [intro,simp]: \"\\<lbrakk> \\<And>i. i\\<^bold>\\<in>A \\<Longrightarrow> Ord(i) \\<rbrakk>  \\<Longrightarrow> Ord(\\<Sqinter> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i. i \\<^bold>\\<in> A \\<Longrightarrow> Ord i) \\<Longrightarrow>\n    Ord (\\<Sqinter>A)", "apply (case_tac \"A=0\", auto simp: Ord_def Transset_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y x ya.\n       \\<lbrakk>\\<And>i.\n                   i \\<^bold>\\<in> A \\<Longrightarrow>\n                   (\\<forall>y.\n                       y \\<^bold>\\<in> i \\<longrightarrow> y \\<le> i) \\<and>\n                   (\\<forall>x\\<^bold>\\<in>i.\n                       \\<forall>y.\n                          y \\<^bold>\\<in> x \\<longrightarrow> y \\<le> x);\n        A \\<noteq> 0;\n        \\<forall>ya.\n           ya \\<^bold>\\<in> A \\<longrightarrow> y \\<^bold>\\<in> ya;\n        x \\<^bold>\\<in> y; ya \\<^bold>\\<in> A\\<rbrakk>\n       \\<Longrightarrow> x \\<^bold>\\<in> ya\n 2. \\<And>x y xa.\n       \\<lbrakk>\\<And>i.\n                   i \\<^bold>\\<in> A \\<Longrightarrow>\n                   (\\<forall>y.\n                       y \\<^bold>\\<in> i \\<longrightarrow> y \\<le> i) \\<and>\n                   (\\<forall>x\\<^bold>\\<in>i.\n                       \\<forall>y.\n                          y \\<^bold>\\<in> x \\<longrightarrow> y \\<le> x);\n        A \\<noteq> 0;\n        \\<forall>y. y \\<^bold>\\<in> A \\<longrightarrow> x \\<^bold>\\<in> y;\n        y \\<^bold>\\<in> x; xa \\<^bold>\\<in> y\\<rbrakk>\n       \\<Longrightarrow> xa \\<^bold>\\<in> x", "apply (force simp add: hf_ext)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Theorem 2.7. Every set x of ordinals is ordered by the binary relation <.\n      Moreover if x = 0 then x has a smallest and a largest element.\\<close>"], ["", "lemma hmem_Sup_Ords: \"\\<lbrakk>A\\<noteq>0; \\<And>i. i\\<^bold>\\<in>A \\<Longrightarrow> Ord(i)\\<rbrakk> \\<Longrightarrow> \\<Squnion>A \\<^bold>\\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> 0;\n     \\<And>i. i \\<^bold>\\<in> A \\<Longrightarrow> Ord i\\<rbrakk>\n    \\<Longrightarrow> \\<Squnion>A \\<^bold>\\<in> A", "proof (induction A rule: hf_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<noteq> 0;\n     \\<And>i. i \\<^bold>\\<in> 0 \\<Longrightarrow> Ord i\\<rbrakk>\n    \\<Longrightarrow> \\<Squnion>0 \\<^bold>\\<in> 0\n 2. \\<And>x y.\n       \\<lbrakk>\\<lbrakk>x \\<noteq> 0;\n                 \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n                \\<Longrightarrow> \\<Squnion>x \\<^bold>\\<in> x;\n        \\<lbrakk>y \\<noteq> 0;\n         \\<And>i. i \\<^bold>\\<in> y \\<Longrightarrow> Ord i\\<rbrakk>\n        \\<Longrightarrow> \\<Squnion>y \\<^bold>\\<in> y;\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0;\n        \\<And>i.\n           i \\<^bold>\\<in> y \\<triangleleft> x \\<Longrightarrow>\n           Ord i\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(y \\<triangleleft> x) \\<^bold>\\<in>\n                         y \\<triangleleft> x", "case 0"], ["proof (state)\nthis:\n  0 \\<noteq> 0\n  ?i \\<^bold>\\<in> 0 \\<Longrightarrow> Ord ?i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<noteq> 0;\n     \\<And>i. i \\<^bold>\\<in> 0 \\<Longrightarrow> Ord i\\<rbrakk>\n    \\<Longrightarrow> \\<Squnion>0 \\<^bold>\\<in> 0\n 2. \\<And>x y.\n       \\<lbrakk>\\<lbrakk>x \\<noteq> 0;\n                 \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n                \\<Longrightarrow> \\<Squnion>x \\<^bold>\\<in> x;\n        \\<lbrakk>y \\<noteq> 0;\n         \\<And>i. i \\<^bold>\\<in> y \\<Longrightarrow> Ord i\\<rbrakk>\n        \\<Longrightarrow> \\<Squnion>y \\<^bold>\\<in> y;\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0;\n        \\<And>i.\n           i \\<^bold>\\<in> y \\<triangleleft> x \\<Longrightarrow>\n           Ord i\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(y \\<triangleleft> x) \\<^bold>\\<in>\n                         y \\<triangleleft> x", "thus ?case"], ["proof (prove)\nusing this:\n  0 \\<noteq> 0\n  ?i \\<^bold>\\<in> 0 \\<Longrightarrow> Ord ?i\n\ngoal (1 subgoal):\n 1. \\<Squnion>0 \\<^bold>\\<in> 0", "by simp"], ["proof (state)\nthis:\n  \\<Squnion>0 \\<^bold>\\<in> 0\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<lbrakk>x \\<noteq> 0;\n                 \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n                \\<Longrightarrow> \\<Squnion>x \\<^bold>\\<in> x;\n        \\<lbrakk>y \\<noteq> 0;\n         \\<And>i. i \\<^bold>\\<in> y \\<Longrightarrow> Ord i\\<rbrakk>\n        \\<Longrightarrow> \\<Squnion>y \\<^bold>\\<in> y;\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0;\n        \\<And>i.\n           i \\<^bold>\\<in> y \\<triangleleft> x \\<Longrightarrow>\n           Ord i\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(y \\<triangleleft> x) \\<^bold>\\<in>\n                         y \\<triangleleft> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<lbrakk>x \\<noteq> 0;\n                 \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n                \\<Longrightarrow> \\<Squnion>x \\<^bold>\\<in> x;\n        \\<lbrakk>y \\<noteq> 0;\n         \\<And>i. i \\<^bold>\\<in> y \\<Longrightarrow> Ord i\\<rbrakk>\n        \\<Longrightarrow> \\<Squnion>y \\<^bold>\\<in> y;\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0;\n        \\<And>i.\n           i \\<^bold>\\<in> y \\<triangleleft> x \\<Longrightarrow>\n           Ord i\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(y \\<triangleleft> x) \\<^bold>\\<in>\n                         y \\<triangleleft> x", "case (hinsert x A)"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<noteq> 0;\n   \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n  \\<Longrightarrow> \\<Squnion>x \\<^bold>\\<in> x\n  \\<lbrakk>A \\<noteq> 0;\n   \\<And>i. i \\<^bold>\\<in> A \\<Longrightarrow> Ord i\\<rbrakk>\n  \\<Longrightarrow> \\<Squnion>A \\<^bold>\\<in> A\n  x \\<^bold>\\<notin> A\n  A \\<triangleleft> x \\<noteq> 0\n  ?i \\<^bold>\\<in> A \\<triangleleft> x \\<Longrightarrow> Ord ?i\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<lbrakk>x \\<noteq> 0;\n                 \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n                \\<Longrightarrow> \\<Squnion>x \\<^bold>\\<in> x;\n        \\<lbrakk>y \\<noteq> 0;\n         \\<And>i. i \\<^bold>\\<in> y \\<Longrightarrow> Ord i\\<rbrakk>\n        \\<Longrightarrow> \\<Squnion>y \\<^bold>\\<in> y;\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0;\n        \\<And>i.\n           i \\<^bold>\\<in> y \\<triangleleft> x \\<Longrightarrow>\n           Ord i\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(y \\<triangleleft> x) \\<^bold>\\<in>\n                         y \\<triangleleft> x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x", "proof (cases A rule: hf_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. A = 0 \\<Longrightarrow>\n    \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x\n 2. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "case 0"], ["proof (state)\nthis:\n  A = 0\n\ngoal (2 subgoals):\n 1. A = 0 \\<Longrightarrow>\n    \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x\n 2. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "thus ?thesis"], ["proof (prove)\nusing this:\n  A = 0\n\ngoal (1 subgoal):\n 1. \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x", "by simp"], ["proof (state)\nthis:\n  \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "case (hinsert y A')"], ["proof (state)\nthis:\n  A = A' \\<triangleleft> y\n  y \\<^bold>\\<notin> A'\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "hence UA: \"\\<Squnion>A \\<^bold>\\<in> A\""], ["proof (prove)\nusing this:\n  A = A' \\<triangleleft> y\n  y \\<^bold>\\<notin> A'\n\ngoal (1 subgoal):\n 1. \\<Squnion>A \\<^bold>\\<in> A", "by (metis hinsert.IH(2) hinsert.prems(2) hinsert_nonempty hmem_hinsert)"], ["proof (state)\nthis:\n  \\<Squnion>A \\<^bold>\\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "hence \"\\<Squnion>A \\<le> x \\<or> x \\<le> \\<Squnion>A\""], ["proof (prove)\nusing this:\n  \\<Squnion>A \\<^bold>\\<in> A\n\ngoal (1 subgoal):\n 1. \\<Squnion>A \\<le> x \\<or> x \\<le> \\<Squnion>A", "by (metis Ord_linear2 OrdmemD hinsert.prems(2) hmem_hinsert)"], ["proof (state)\nthis:\n  \\<Squnion>A \\<le> x \\<or> x \\<le> \\<Squnion>A\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Squnion>A \\<le> x \\<or> x \\<le> \\<Squnion>A\n\ngoal (1 subgoal):\n 1. \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x", "by (metis HUnion_hinsert UA le_iff_sup less_eq_insert1_iff order_refl sup.commute)"], ["proof (state)\nthis:\n  \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Squnion>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma hmem_Inf_Ords: \"\\<lbrakk>A\\<noteq>0; \\<And>i. i\\<^bold>\\<in>A \\<Longrightarrow> Ord(i)\\<rbrakk> \\<Longrightarrow> \\<Sqinter>A \\<^bold>\\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> 0;\n     \\<And>i. i \\<^bold>\\<in> A \\<Longrightarrow> Ord i\\<rbrakk>\n    \\<Longrightarrow> \\<Sqinter>A \\<^bold>\\<in> A", "proof (induction A rule: hf_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<noteq> 0;\n     \\<And>i. i \\<^bold>\\<in> 0 \\<Longrightarrow> Ord i\\<rbrakk>\n    \\<Longrightarrow> \\<Sqinter>0 \\<^bold>\\<in> 0\n 2. \\<And>x y.\n       \\<lbrakk>\\<lbrakk>x \\<noteq> 0;\n                 \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n                \\<Longrightarrow> \\<Sqinter>x \\<^bold>\\<in> x;\n        \\<lbrakk>y \\<noteq> 0;\n         \\<And>i. i \\<^bold>\\<in> y \\<Longrightarrow> Ord i\\<rbrakk>\n        \\<Longrightarrow> \\<Sqinter>y \\<^bold>\\<in> y;\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0;\n        \\<And>i.\n           i \\<^bold>\\<in> y \\<triangleleft> x \\<Longrightarrow>\n           Ord i\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(y \\<triangleleft> x) \\<^bold>\\<in>\n                         y \\<triangleleft> x", "case 0"], ["proof (state)\nthis:\n  0 \\<noteq> 0\n  ?i \\<^bold>\\<in> 0 \\<Longrightarrow> Ord ?i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<noteq> 0;\n     \\<And>i. i \\<^bold>\\<in> 0 \\<Longrightarrow> Ord i\\<rbrakk>\n    \\<Longrightarrow> \\<Sqinter>0 \\<^bold>\\<in> 0\n 2. \\<And>x y.\n       \\<lbrakk>\\<lbrakk>x \\<noteq> 0;\n                 \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n                \\<Longrightarrow> \\<Sqinter>x \\<^bold>\\<in> x;\n        \\<lbrakk>y \\<noteq> 0;\n         \\<And>i. i \\<^bold>\\<in> y \\<Longrightarrow> Ord i\\<rbrakk>\n        \\<Longrightarrow> \\<Sqinter>y \\<^bold>\\<in> y;\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0;\n        \\<And>i.\n           i \\<^bold>\\<in> y \\<triangleleft> x \\<Longrightarrow>\n           Ord i\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(y \\<triangleleft> x) \\<^bold>\\<in>\n                         y \\<triangleleft> x", "thus ?case"], ["proof (prove)\nusing this:\n  0 \\<noteq> 0\n  ?i \\<^bold>\\<in> 0 \\<Longrightarrow> Ord ?i\n\ngoal (1 subgoal):\n 1. \\<Sqinter>0 \\<^bold>\\<in> 0", "by simp"], ["proof (state)\nthis:\n  \\<Sqinter>0 \\<^bold>\\<in> 0\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<lbrakk>x \\<noteq> 0;\n                 \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n                \\<Longrightarrow> \\<Sqinter>x \\<^bold>\\<in> x;\n        \\<lbrakk>y \\<noteq> 0;\n         \\<And>i. i \\<^bold>\\<in> y \\<Longrightarrow> Ord i\\<rbrakk>\n        \\<Longrightarrow> \\<Sqinter>y \\<^bold>\\<in> y;\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0;\n        \\<And>i.\n           i \\<^bold>\\<in> y \\<triangleleft> x \\<Longrightarrow>\n           Ord i\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(y \\<triangleleft> x) \\<^bold>\\<in>\n                         y \\<triangleleft> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<lbrakk>x \\<noteq> 0;\n                 \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n                \\<Longrightarrow> \\<Sqinter>x \\<^bold>\\<in> x;\n        \\<lbrakk>y \\<noteq> 0;\n         \\<And>i. i \\<^bold>\\<in> y \\<Longrightarrow> Ord i\\<rbrakk>\n        \\<Longrightarrow> \\<Sqinter>y \\<^bold>\\<in> y;\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0;\n        \\<And>i.\n           i \\<^bold>\\<in> y \\<triangleleft> x \\<Longrightarrow>\n           Ord i\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(y \\<triangleleft> x) \\<^bold>\\<in>\n                         y \\<triangleleft> x", "case (hinsert x A)"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<noteq> 0;\n   \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n  \\<Longrightarrow> \\<Sqinter>x \\<^bold>\\<in> x\n  \\<lbrakk>A \\<noteq> 0;\n   \\<And>i. i \\<^bold>\\<in> A \\<Longrightarrow> Ord i\\<rbrakk>\n  \\<Longrightarrow> \\<Sqinter>A \\<^bold>\\<in> A\n  x \\<^bold>\\<notin> A\n  A \\<triangleleft> x \\<noteq> 0\n  ?i \\<^bold>\\<in> A \\<triangleleft> x \\<Longrightarrow> Ord ?i\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>\\<lbrakk>x \\<noteq> 0;\n                 \\<And>i. i \\<^bold>\\<in> x \\<Longrightarrow> Ord i\\<rbrakk>\n                \\<Longrightarrow> \\<Sqinter>x \\<^bold>\\<in> x;\n        \\<lbrakk>y \\<noteq> 0;\n         \\<And>i. i \\<^bold>\\<in> y \\<Longrightarrow> Ord i\\<rbrakk>\n        \\<Longrightarrow> \\<Sqinter>y \\<^bold>\\<in> y;\n        x \\<^bold>\\<notin> y; y \\<triangleleft> x \\<noteq> 0;\n        \\<And>i.\n           i \\<^bold>\\<in> y \\<triangleleft> x \\<Longrightarrow>\n           Ord i\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(y \\<triangleleft> x) \\<^bold>\\<in>\n                         y \\<triangleleft> x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x", "proof (cases A rule: hf_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. A = 0 \\<Longrightarrow>\n    \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x\n 2. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "case 0"], ["proof (state)\nthis:\n  A = 0\n\ngoal (2 subgoals):\n 1. A = 0 \\<Longrightarrow>\n    \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x\n 2. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "thus ?thesis"], ["proof (prove)\nusing this:\n  A = 0\n\ngoal (1 subgoal):\n 1. \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x", "by auto"], ["proof (state)\nthis:\n  \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "case (hinsert y A')"], ["proof (state)\nthis:\n  A = A' \\<triangleleft> y\n  y \\<^bold>\\<notin> A'\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "hence IA: \"\\<Sqinter>A \\<^bold>\\<in> A\""], ["proof (prove)\nusing this:\n  A = A' \\<triangleleft> y\n  y \\<^bold>\\<notin> A'\n\ngoal (1 subgoal):\n 1. \\<Sqinter>A \\<^bold>\\<in> A", "by (metis hinsert.IH(2) hinsert.prems(2) hinsert_nonempty hmem_hinsert)"], ["proof (state)\nthis:\n  \\<Sqinter>A \\<^bold>\\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "hence \"\\<Sqinter>A \\<le> x \\<or> x \\<le> \\<Sqinter>A\""], ["proof (prove)\nusing this:\n  \\<Sqinter>A \\<^bold>\\<in> A\n\ngoal (1 subgoal):\n 1. \\<Sqinter>A \\<le> x \\<or> x \\<le> \\<Sqinter>A", "by (metis Ord_linear2 OrdmemD hinsert.prems(2) hmem_hinsert)"], ["proof (state)\nthis:\n  \\<Sqinter>A \\<le> x \\<or> x \\<le> \\<Sqinter>A\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>A = b \\<triangleleft> a; a \\<^bold>\\<notin> b\\<rbrakk>\n       \\<Longrightarrow> \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in>\n                         A \\<triangleleft> x", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Sqinter>A \\<le> x \\<or> x \\<le> \\<Sqinter>A\n\ngoal (1 subgoal):\n 1. \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x", "by (metis HInter_hinsert IA hmem_hempty hmem_hinsert inf_absorb2 le_iff_inf)"], ["proof (state)\nthis:\n  \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Sqinter>(A \\<triangleleft> x) \\<^bold>\\<in> A \\<triangleleft> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Ord_pred: \"\\<lbrakk>Ord(k); k \\<noteq> 0\\<rbrakk> \\<Longrightarrow> succ(\\<Squnion>k) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> succ (\\<Squnion>k) = k", "by (metis (full_types) HUnion_iff Ord_in_Ord Ord_mem_succ_cases hmem_Sup_Ords hmem_ne succ_iff)"], ["", "lemma Ord_cases [cases type: hf, case_names 0 succ]:\n  assumes Ok: \"Ord(k)\"\n  obtains \"k = 0\" | l where \"Ord l\" \"succ l = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k = 0 \\<Longrightarrow> thesis;\n     \\<And>l.\n        \\<lbrakk>Ord l; succ l = k\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (metis Ok Ord_in_Ord Ord_pred succ_iff)"], ["", "lemma Ord_induct2 [consumes 1, case_names 0 succ, induct type: hf]:\n  assumes k: \"Ord(k)\"\n      and P: \"P 0\" \"\\<And>k. Ord k \\<Longrightarrow> P k \\<Longrightarrow> P (succ k)\"\n  shows \"P k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P k", "using k"], ["proof (prove)\nusing this:\n  Ord k\n\ngoal (1 subgoal):\n 1. P k", "proof (induction k rule: Ord_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Ord x;\n        \\<And>y. y \\<^bold>\\<in> x \\<Longrightarrow> P y\\<rbrakk>\n       \\<Longrightarrow> P x", "case (step k)"], ["proof (state)\nthis:\n  Ord k\n  ?y \\<^bold>\\<in> k \\<Longrightarrow> P ?y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Ord x;\n        \\<And>y. y \\<^bold>\\<in> x \\<Longrightarrow> P y\\<rbrakk>\n       \\<Longrightarrow> P x", "thus ?case"], ["proof (prove)\nusing this:\n  Ord k\n  ?y \\<^bold>\\<in> k \\<Longrightarrow> P ?y\n\ngoal (1 subgoal):\n 1. P k", "by (metis Ord_cases P hmem_succ_self)"], ["proof (state)\nthis:\n  P k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Ord_succ_iff [iff]: \"Ord (succ k) = Ord k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord (succ k) = Ord k", "by (metis Ord_in_Ord Ord_succ less_eq_insert1_iff order_refl succ_def)"], ["", "lemma [simp]: \"succ k \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ k \\<noteq> 0", "by (metis hinsert_nonempty succ_def)"], ["", "lemma Ord_Sup_succ_eq [simp]: \"Ord k \\<Longrightarrow> \\<Squnion>(succ k) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord k \\<Longrightarrow> \\<Squnion>succ k = k", "by (metis Ord_pred Ord_succ_iff succ_inject_iff hinsert_nonempty succ_def)"], ["", "lemma Ord_lt_succ_iff_le: \"Ord k \\<Longrightarrow> Ord l \\<Longrightarrow> k < succ l \\<longleftrightarrow> k \\<le> l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord k; Ord l\\<rbrakk>\n    \\<Longrightarrow> (k < succ l) = (k \\<le> l)", "by (metis Ord_mem_iff_lt Ord_succ_iff less_le_not_le order_eq_iff succ_iff)"], ["", "lemma zero_in_Ord: \"Ord k \\<Longrightarrow> k=0 \\<or> 0 \\<^bold>\\<in> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord k \\<Longrightarrow> k = 0 \\<or> 0 \\<^bold>\\<in> k", "by (induct k) auto"], ["", "lemma hpair_neq_Ord: \"Ord k \\<Longrightarrow> \\<langle>x,y\\<rangle> \\<noteq> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord k \\<Longrightarrow> \\<langle>x, y\\<rangle> \\<noteq> k", "by (cases k) auto"], ["", "lemma hpair_neq_Ord': assumes k: \"Ord k\" shows \"k \\<noteq> \\<langle>x,y\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> \\<langle>x, y\\<rangle>", "by (metis k hpair_neq_Ord)"], ["", "lemma Not_Ord_hpair [iff]: \"\\<not> Ord \\<langle>x,y\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Ord \\<langle>x, y\\<rangle>", "by (metis hpair_neq_Ord)"], ["", "lemma is_hpair [simp]: \"is_hpair \\<langle>x,y\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_hpair \\<langle>x, y\\<rangle>", "by (force simp add: is_hpair_def)"], ["", "lemma Ord_not_hpair: \"Ord x \\<Longrightarrow> \\<not> is_hpair x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord x \\<Longrightarrow> \\<not> is_hpair x", "by (metis Not_Ord_hpair is_hpair_def)"], ["", "lemma zero_in_succ [simp,intro]: \"Ord i \\<Longrightarrow> 0 \\<^bold>\\<in> succ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord i \\<Longrightarrow> 0 \\<^bold>\\<in> succ i", "by (metis succ_iff zero_in_Ord)"], ["", "subsection \\<open>Converting Between Ordinals and Natural Numbers\\<close>"], ["", "fun ord_of :: \"nat \\<Rightarrow> hf\"\n  where\n   \"ord_of 0 = 0\"\n | \"ord_of (Suc k) = succ (ord_of k)\""], ["", "lemma Ord_ord_of [simp]: \"Ord (ord_of k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord (ord_of k)", "by (induct k, auto)"], ["", "lemma ord_of_inject [iff]: \"ord_of i = ord_of j \\<longleftrightarrow> i=j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord_of i = ord_of j) = (i = j)", "proof (induct i arbitrary: j)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>j. (ord_of 0 = ord_of j) = (0 = j)\n 2. \\<And>i j.\n       (\\<And>j. (ord_of i = ord_of j) = (i = j)) \\<Longrightarrow>\n       (ord_of (Suc i) = ord_of j) = (Suc i = j)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>j. (ord_of 0 = ord_of j) = (0 = j)\n 2. \\<And>i j.\n       (\\<And>j. (ord_of i = ord_of j) = (i = j)) \\<Longrightarrow>\n       (ord_of (Suc i) = ord_of j) = (Suc i = j)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord_of 0 = ord_of j) = (0 = j)", "by (metis Zero_neq_Suc hempty_iff hmem_succ_self ord_of.elims)"], ["proof (state)\nthis:\n  (ord_of 0 = ord_of j) = (0 = j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       (\\<And>j. (ord_of i = ord_of j) = (i = j)) \\<Longrightarrow>\n       (ord_of (Suc i) = ord_of j) = (Suc i = j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       (\\<And>j. (ord_of i = ord_of j) = (i = j)) \\<Longrightarrow>\n       (ord_of (Suc i) = ord_of j) = (Suc i = j)", "case (Suc i)"], ["proof (state)\nthis:\n  (ord_of i = ord_of ?j) = (i = ?j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       (\\<And>j. (ord_of i = ord_of j) = (i = j)) \\<Longrightarrow>\n       (ord_of (Suc i) = ord_of j) = (Suc i = j)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord_of (Suc i) = ord_of j) = (Suc i = j)", "by (cases j) (auto simp: Suc)"], ["proof (state)\nthis:\n  (ord_of (Suc i) = ord_of j) = (Suc i = j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_of_minus_1: \"n > 0 \\<Longrightarrow> ord_of n = succ (ord_of (n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> ord_of n = succ (ord_of (n - 1))", "by (metis Suc_diff_1 ord_of.simps(2))"], ["", "definition nat_of_ord :: \"hf \\<Rightarrow> nat\"\n  where \"nat_of_ord x = (THE n. x = ord_of n)\""], ["", "lemma nat_of_ord_ord_of [simp]: \"nat_of_ord (ord_of n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_of_ord (ord_of n) = n", "by (auto simp: nat_of_ord_def)"], ["", "lemma nat_of_ord_0 [simp]: \"nat_of_ord 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_of_ord 0 = 0", "by (metis (mono_tags) nat_of_ord_ord_of ord_of.simps(1))"], ["", "lemma ord_of_nat_of_ord [simp]: \"Ord x \\<Longrightarrow> ord_of (nat_of_ord x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord x \\<Longrightarrow> ord_of (nat_of_ord x) = x", "apply (erule Ord_induct2, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>Ord k; ord_of (nat_of_ord k) = k\\<rbrakk>\n       \\<Longrightarrow> ord_of (nat_of_ord (succ k)) = succ k", "apply (metis nat_of_ord_ord_of ord_of.simps(2))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nat_of_ord_inject: \"Ord x \\<Longrightarrow> Ord y \\<Longrightarrow> nat_of_ord x = nat_of_ord y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord x; Ord y\\<rbrakk>\n    \\<Longrightarrow> (nat_of_ord x = nat_of_ord y) = (x = y)", "by (metis ord_of_nat_of_ord)"], ["", "lemma nat_of_ord_succ [simp]: \"Ord x \\<Longrightarrow> nat_of_ord (succ x) = Suc (nat_of_ord x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ord x \\<Longrightarrow> nat_of_ord (succ x) = Suc (nat_of_ord x)", "by (metis nat_of_ord_ord_of ord_of.simps(2) ord_of_nat_of_ord)"], ["", "lemma inj_ord_of: \"inj_on ord_of A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ord_of A", "by (simp add: inj_on_def)"], ["", "lemma hfset_ord_of: \"hfset (ord_of n) = ord_of ` {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hfset (ord_of n) = ord_of ` {0..<n}", "by (induct n) (auto simp: hfset_hinsert succ_def)"], ["", "lemma bij_betw_ord_of: \"bij_betw ord_of {0..<n} (hfset (ord_of n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw ord_of {0..<n} (hfset (ord_of n))", "by (simp add: bij_betw_def inj_ord_of hfset_ord_of)"], ["", "lemma bij_betw_ord_ofI: \"bij_betw h A {0..<n} \\<Longrightarrow> bij_betw (ord_of \\<circ> h) A (hfset (ord_of n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw h A {0..<n} \\<Longrightarrow>\n    bij_betw (ord_of \\<circ> h) A (hfset (ord_of n))", "by (blast intro: bij_betw_ord_of bij_betw_trans)"], ["", "section \\<open>Sequences and Ordinal Recursion\\<close>"], ["", "text \\<open>Definition 3.2 (Sequence).\\<close>"], ["", "definition Seq :: \"hf \\<Rightarrow> hf \\<Rightarrow> bool\"\n  where \"Seq s k \\<longleftrightarrow> hrelation s \\<and> hfunction s \\<and> k \\<le> hdomain s\""], ["", "lemma Seq_0 [iff]: \"Seq 0 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Seq 0 0", "by (auto simp: Seq_def hrelation_def hfunction_def)"], ["", "lemma Seq_succ_D: \"Seq s (succ k) \\<Longrightarrow> Seq s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Seq s (succ k) \\<Longrightarrow> Seq s k", "by (simp add: Seq_def succ_def)"], ["", "lemma Seq_Ord_D: \"Seq s k \\<Longrightarrow> l \\<^bold>\\<in> k \\<Longrightarrow> Ord k \\<Longrightarrow> Seq s l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s k; l \\<^bold>\\<in> k; Ord k\\<rbrakk>\n    \\<Longrightarrow> Seq s l", "by (auto simp: Seq_def intro: Ord_trans)"], ["", "lemma Seq_restr: \"Seq s (succ k) \\<Longrightarrow> Seq (hrestrict s k) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Seq s (succ k) \\<Longrightarrow> Seq (hrestrict s k) k", "by (simp add: Seq_def hfunction_restr succ_def)"], ["", "lemma Seq_Ord_restr: \"\\<lbrakk>Seq s k; l \\<^bold>\\<in> k; Ord k\\<rbrakk> \\<Longrightarrow> Seq (hrestrict s l) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s k; l \\<^bold>\\<in> k; Ord k\\<rbrakk>\n    \\<Longrightarrow> Seq (hrestrict s l) l", "by (auto simp: Seq_def hfunction_restr intro: Ord_trans)"], ["", "lemma Seq_ins: \"\\<lbrakk>Seq s k; k \\<^bold>\\<notin> hdomain s\\<rbrakk> \\<Longrightarrow> Seq (s \\<triangleleft> \\<langle>k, y\\<rangle>) (succ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s k; k \\<^bold>\\<notin> hdomain s\\<rbrakk>\n    \\<Longrightarrow> Seq (s \\<triangleleft> \\<langle>k, y\\<rangle>)\n                       (succ k)", "by (auto simp: Seq_def hrelation_def succ_def hfunction_def hdomainI)"], ["", "definition insf :: \"hf \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> hf\"\n  where \"insf s k y \\<equiv> nonrestrict s \\<lbrace>k\\<rbrace> \\<triangleleft> \\<langle>k, y\\<rangle>\""], ["", "lemma hfunction_insf: \"hfunction s \\<Longrightarrow> hfunction (insf s k y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hfunction s \\<Longrightarrow> hfunction (insf s k y)", "by (auto simp: insf_def hfunction_def nonrestrict_def hmem_not_refl)"], ["", "lemma Seq_insf: \"Seq s k \\<Longrightarrow> Seq (insf s k y) (succ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Seq s k \\<Longrightarrow> Seq (insf s k y) (succ k)", "apply (auto simp: Seq_def hrelation_def insf_def hfunction_def nonrestrict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>z. z \\<^bold>\\<in> s \\<longrightarrow> is_hpair z;\n        \\<forall>x y.\n           \\<langle>x, y\\<rangle> \\<^bold>\\<in> s \\<longrightarrow>\n           (\\<forall>y'.\n               \\<langle>x, y'\\<rangle> \\<^bold>\\<in> s \\<longrightarrow>\n               y = y');\n        k \\<le> hdomain s;\n        x \\<^bold>\\<notin>\n        hdomain\n         \\<lbrace>z \\<^bold>\\<in> s.\n          \\<forall>y. z \\<noteq> \\<langle>k, y\\<rangle>\\<rbrace>;\n        x \\<^bold>\\<in> k\\<rbrakk>\n       \\<Longrightarrow> x = k", "apply (force simp add: hdomain_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Seq_succ_iff: \"Seq s (succ k) \\<longleftrightarrow> Seq s k \\<and> (\\<exists>y. \\<langle>k, y\\<rangle> \\<^bold>\\<in> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Seq s (succ k) =\n    (Seq s k \\<and> (\\<exists>y. \\<langle>k, y\\<rangle> \\<^bold>\\<in> s))", "apply (auto simp: Seq_def hdomain_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>hrelation s; hfunction s;\n        k \\<le> \\<lbrace>x .\n                 w \\<^bold>\\<in> s, \\<exists>y.\n w = \\<langle>x, y\\<rangle>\\<rbrace>;\n        \\<langle>k, y\\<rangle> \\<^bold>\\<in> s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<^bold>\\<in> s \\<and>\n                            (\\<exists>y. u = \\<langle>k, y\\<rangle>) \\<and>\n                            (\\<forall>y.\n                                (\\<exists>ya.\n                                    u =\n                                    \\<langle>y,\n       ya\\<rangle>) \\<longrightarrow>\n                                y = k)\n 2. \\<And>y x.\n       \\<lbrakk>hrelation s; hfunction s;\n        k \\<le> \\<lbrace>x .\n                 w \\<^bold>\\<in> s, \\<exists>y.\n w = \\<langle>x, y\\<rangle>\\<rbrace>;\n        \\<langle>k, y\\<rangle> \\<^bold>\\<in> s; x \\<^bold>\\<in> k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>u.\n                            u \\<^bold>\\<in> s \\<and>\n                            (\\<exists>y. u = \\<langle>x, y\\<rangle>) \\<and>\n                            (\\<forall>y.\n                                (\\<exists>ya.\n                                    u =\n                                    \\<langle>y,\n       ya\\<rangle>) \\<longrightarrow>\n                                y = x)", "apply (metis hfst_conv, blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nonrestrictD: \"a \\<^bold>\\<in> nonrestrict s X \\<Longrightarrow> a \\<^bold>\\<in> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<^bold>\\<in> nonrestrict s X \\<Longrightarrow> a \\<^bold>\\<in> s", "by (auto simp: nonrestrict_def)"], ["", "lemma hpair_in_nonrestrict_iff [simp]: \"\\<langle>a,b\\<rangle> \\<^bold>\\<in> nonrestrict s X \\<longleftrightarrow> \\<langle>a,b\\<rangle> \\<^bold>\\<in> s \\<and> \\<not> a \\<^bold>\\<in> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<langle>a, b\\<rangle> \\<^bold>\\<in> nonrestrict s X) =\n    (\\<langle>a, b\\<rangle> \\<^bold>\\<in> s \\<and> a \\<^bold>\\<notin> X)", "by (auto simp: nonrestrict_def)"], ["", "lemma app_nonrestrict_Seq: \"Seq s k \\<Longrightarrow> z \\<^bold>\\<notin> X \\<Longrightarrow> app (nonrestrict s X) z = app s z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s k; z \\<^bold>\\<notin> X\\<rbrakk>\n    \\<Longrightarrow> app (nonrestrict s X) z = app s z", "by (auto simp: Seq_def nonrestrict_def app_def HBall_def) (metis)"], ["", "lemma app_insf_Seq: \"Seq s k \\<Longrightarrow> app (insf s k y) k = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Seq s k \\<Longrightarrow> app (insf s k y) k = y", "by (metis Seq_def hfunction_insf app_equality hmem_hinsert insf_def)"], ["", "lemma app_insf2_Seq: \"Seq s k \\<Longrightarrow> k' \\<noteq> k \\<Longrightarrow> app (insf s k y) k' = app s k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s k; k' \\<noteq> k\\<rbrakk>\n    \\<Longrightarrow> app (insf s k y) k' = app s k'", "by (simp add: app_nonrestrict_Seq insf_def app_ins2)"], ["", "lemma app_insf_Seq_if: \"Seq s k \\<Longrightarrow> app (insf s k y) k' = (if k' = k then y else app s k')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Seq s k \\<Longrightarrow>\n    app (insf s k y) k' = (if k' = k then y else app s k')", "by (metis app_insf2_Seq app_insf_Seq)"], ["", "lemma Seq_imp_eq_app: \"\\<lbrakk>Seq s d; \\<langle>x,y\\<rangle> \\<^bold>\\<in> s\\<rbrakk> \\<Longrightarrow> app s x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s d; \\<langle>x, y\\<rangle> \\<^bold>\\<in> s\\<rbrakk>\n    \\<Longrightarrow> app s x = y", "by (metis Seq_def app_equality)"], ["", "lemma Seq_iff_app: \"\\<lbrakk>Seq s d; x \\<^bold>\\<in> d\\<rbrakk> \\<Longrightarrow> \\<langle>x,y\\<rangle> \\<^bold>\\<in> s \\<longleftrightarrow> app s x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s d; x \\<^bold>\\<in> d\\<rbrakk>\n    \\<Longrightarrow> (\\<langle>x, y\\<rangle> \\<^bold>\\<in> s) =\n                      (app s x = y)", "by (auto simp: Seq_def hdomain_def app_equality)"], ["", "lemma Exists_iff_app: \"Seq s d \\<Longrightarrow> x \\<^bold>\\<in> d \\<Longrightarrow> (\\<exists>y. \\<langle>x, y\\<rangle> \\<^bold>\\<in> s \\<and> P y) = P (app s x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Seq s d; x \\<^bold>\\<in> d\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>y.\n                          \\<langle>x, y\\<rangle> \\<^bold>\\<in> s \\<and>\n                          P y) =\n                      P (app s x)", "by (metis Seq_iff_app)"], ["", "lemma Ord_trans2: \"\\<lbrakk>i2 \\<^bold>\\<in> i; i \\<^bold>\\<in> j;  j \\<^bold>\\<in> k;  Ord k\\<rbrakk> \\<Longrightarrow> i2\\<^bold>\\<in>k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i2 \\<^bold>\\<in> i; i \\<^bold>\\<in> j; j \\<^bold>\\<in> k;\n     Ord k\\<rbrakk>\n    \\<Longrightarrow> i2 \\<^bold>\\<in> k", "by (metis Ord_trans)"], ["", "definition ord_rec_Seq :: \"hf \\<Rightarrow> (hf \\<Rightarrow> hf) \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> bool\"\n  where\n   \"ord_rec_Seq T G s k y \\<longleftrightarrow>\n        (Seq s k \\<and> y = G (app s (\\<Squnion>k)) \\<and> app s 0 = T \\<and>\n                   (\\<forall>n. succ n \\<^bold>\\<in> k \\<longrightarrow> app s (succ n) = G (app s n)))\""], ["", "lemma Seq_succ_insf:\n  assumes s: \"Seq s (succ k)\"  shows \"\\<exists> y. s = insf s k y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "obtain y where y: \"\\<langle>k, y\\<rangle> \\<^bold>\\<in> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<langle>k, y\\<rangle> \\<^bold>\\<in> s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis Seq_succ_iff s)"], ["proof (state)\nthis:\n  \\<langle>k, y\\<rangle> \\<^bold>\\<in> s\n\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "hence yuniq: \"\\<forall> y'. \\<langle>k, y'\\<rangle> \\<^bold>\\<in> s \\<longrightarrow> y' = y\""], ["proof (prove)\nusing this:\n  \\<langle>k, y\\<rangle> \\<^bold>\\<in> s\n\ngoal (1 subgoal):\n 1. \\<forall>y'.\n       \\<langle>k, y'\\<rangle> \\<^bold>\\<in> s \\<longrightarrow> y' = y", "using s"], ["proof (prove)\nusing this:\n  \\<langle>k, y\\<rangle> \\<^bold>\\<in> s\n  Seq s (succ k)\n\ngoal (1 subgoal):\n 1. \\<forall>y'.\n       \\<langle>k, y'\\<rangle> \\<^bold>\\<in> s \\<longrightarrow> y' = y", "by (simp add: Seq_def hfunction_def)"], ["proof (state)\nthis:\n  \\<forall>y'.\n     \\<langle>k, y'\\<rangle> \\<^bold>\\<in> s \\<longrightarrow> y' = y\n\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "{"], ["proof (state)\nthis:\n  \\<forall>y'.\n     \\<langle>k, y'\\<rangle> \\<^bold>\\<in> s \\<longrightarrow> y' = y\n\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "assume z: \"z \\<^bold>\\<in> s\""], ["proof (state)\nthis:\n  z \\<^bold>\\<in> s\n\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "then"], ["proof (chain)\npicking this:\n  z \\<^bold>\\<in> s", "obtain u v where uv: \"z = \\<langle>u, v\\<rangle>\""], ["proof (prove)\nusing this:\n  z \\<^bold>\\<in> s\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        z = \\<langle>u, v\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using s"], ["proof (prove)\nusing this:\n  z \\<^bold>\\<in> s\n  Seq s (succ k)\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        z = \\<langle>u, v\\<rangle> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis Seq_def hrelation_def is_hpair_def)"], ["proof (state)\nthis:\n  z = \\<langle>u, v\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "hence \"z \\<^bold>\\<in> insf s k y\""], ["proof (prove)\nusing this:\n  z = \\<langle>u, v\\<rangle>\n\ngoal (1 subgoal):\n 1. z \\<^bold>\\<in> insf s k y", "by (metis hemptyE hmem_hinsert hpair_in_nonrestrict_iff insf_def yuniq z)"], ["proof (state)\nthis:\n  z \\<^bold>\\<in> insf s k y\n\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "}"], ["proof (state)\nthis:\n  ?z2 \\<^bold>\\<in> s \\<Longrightarrow> ?z2 \\<^bold>\\<in> insf s k y\n\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "note left2right = this"], ["proof (state)\nthis:\n  ?z2 \\<^bold>\\<in> s \\<Longrightarrow> ?z2 \\<^bold>\\<in> insf s k y\n\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. s = insf s k y", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. s = insf s k ?y", "show \"s = insf s k y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = insf s k y", "by (rule hf_equalityI) (metis hmem_hinsert insf_def left2right nonrestrictD y)"], ["proof (state)\nthis:\n  s = insf s k y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y. s = insf s k y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_rec_Seq_succ_iff:\n  assumes k: \"Ord k\" and knz: \"k \\<noteq> 0\"\n  shows \"ord_rec_Seq T G s (succ k) z \\<longleftrightarrow> (\\<exists> s' y. ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_rec_Seq T G s (succ k) z =\n    (\\<exists>s' y.\n        ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ord_rec_Seq T G s (succ k) z \\<Longrightarrow>\n    \\<exists>s' y.\n       ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y\n 2. \\<exists>s' y.\n       ord_rec_Seq T G s' k y \\<and>\n       z = G y \\<and> s = insf s' k y \\<Longrightarrow>\n    ord_rec_Seq T G s (succ k) z", "assume os: \"ord_rec_Seq T G s (succ k) z\""], ["proof (state)\nthis:\n  ord_rec_Seq T G s (succ k) z\n\ngoal (2 subgoals):\n 1. ord_rec_Seq T G s (succ k) z \\<Longrightarrow>\n    \\<exists>s' y.\n       ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y\n 2. \\<exists>s' y.\n       ord_rec_Seq T G s' k y \\<and>\n       z = G y \\<and> s = insf s' k y \\<Longrightarrow>\n    ord_rec_Seq T G s (succ k) z", "show \"\\<exists>s' y. ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' y.\n       ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y", "apply (rule_tac x=s in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. ord_rec_Seq T G s k y \\<and> z = G y \\<and> s = insf s k y", "using os k knz"], ["proof (prove)\nusing this:\n  ord_rec_Seq T G s (succ k) z\n  Ord k\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>y. ord_rec_Seq T G s k y \\<and> z = G y \\<and> s = insf s k y", "apply (auto simp: Seq_insf ord_rec_Seq_def app_insf_Seq app_insf2_Seq\n                          hmem_succ_ne hmem_ne hmem_Sup_ne Seq_succ_iff hmem_0_Ord)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>Ord k; k \\<noteq> 0; Seq s k;\n        \\<langle>k, y\\<rangle> \\<^bold>\\<in> s; z = G (app s k);\n        \\<forall>n.\n           (succ n = k \\<longrightarrow> app s k = G (app s n)) \\<and>\n           (succ n \\<^bold>\\<in> k \\<longrightarrow>\n            app s (succ n) = G (app s n));\n        T = app s 0\\<rbrakk>\n       \\<Longrightarrow> G (app s k) = G (G (app s (\\<Squnion>k)))\n 2. \\<And>y.\n       \\<lbrakk>Ord k; k \\<noteq> 0; Seq s k;\n        \\<langle>k, y\\<rangle> \\<^bold>\\<in> s; z = G (app s k);\n        \\<forall>n.\n           (succ n = k \\<longrightarrow> app s k = G (app s n)) \\<and>\n           (succ n \\<^bold>\\<in> k \\<longrightarrow>\n            app s (succ n) = G (app s n));\n        T = app s 0\\<rbrakk>\n       \\<Longrightarrow> s = insf s k (G (app s (\\<Squnion>k)))", "apply (metis Ord_pred)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>Ord k; k \\<noteq> 0; Seq s k;\n        \\<langle>k, y\\<rangle> \\<^bold>\\<in> s; z = G (app s k);\n        \\<forall>n.\n           (succ n = k \\<longrightarrow> app s k = G (app s n)) \\<and>\n           (succ n \\<^bold>\\<in> k \\<longrightarrow>\n            app s (succ n) = G (app s n));\n        T = app s 0\\<rbrakk>\n       \\<Longrightarrow> s = insf s k (G (app s (\\<Squnion>k)))", "apply (metis Ord_pred Seq_succ_iff Seq_succ_insf app_insf_Seq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>s' y.\n     ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y\n\ngoal (1 subgoal):\n 1. \\<exists>s' y.\n       ord_rec_Seq T G s' k y \\<and>\n       z = G y \\<and> s = insf s' k y \\<Longrightarrow>\n    ord_rec_Seq T G s (succ k) z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s' y.\n       ord_rec_Seq T G s' k y \\<and>\n       z = G y \\<and> s = insf s' k y \\<Longrightarrow>\n    ord_rec_Seq T G s (succ k) z", "assume ok: \"\\<exists>s' y. ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y\""], ["proof (state)\nthis:\n  \\<exists>s' y.\n     ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y\n\ngoal (1 subgoal):\n 1. \\<exists>s' y.\n       ord_rec_Seq T G s' k y \\<and>\n       z = G y \\<and> s = insf s' k y \\<Longrightarrow>\n    ord_rec_Seq T G s (succ k) z", "thus \"ord_rec_Seq T G s (succ k) z\""], ["proof (prove)\nusing this:\n  \\<exists>s' y.\n     ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y\n\ngoal (1 subgoal):\n 1. ord_rec_Seq T G s (succ k) z", "using ok k knz"], ["proof (prove)\nusing this:\n  \\<exists>s' y.\n     ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y\n  \\<exists>s' y.\n     ord_rec_Seq T G s' k y \\<and> z = G y \\<and> s = insf s' k y\n  Ord k\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ord_rec_Seq T G s (succ k) z", "by (auto simp: ord_rec_Seq_def app_insf_Seq_if hmem_ne hmem_succ_ne Seq_insf)"], ["proof (state)\nthis:\n  ord_rec_Seq T G s (succ k) z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_rec_Seq_functional:\n   \"Ord k \\<Longrightarrow> k \\<noteq> 0 \\<Longrightarrow> ord_rec_Seq T G s k y \\<Longrightarrow> ord_rec_Seq T G s' k y' \\<Longrightarrow> y' = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ord k; k \\<noteq> 0; ord_rec_Seq T G s k y;\n     ord_rec_Seq T G s' k y'\\<rbrakk>\n    \\<Longrightarrow> y' = y", "proof (induct k arbitrary: y y' s s' rule: Ord_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y y' s s'.\n       \\<lbrakk>0 \\<noteq> 0; ord_rec_Seq T G s 0 y;\n        ord_rec_Seq T G s' 0 y'\\<rbrakk>\n       \\<Longrightarrow> y' = y\n 2. \\<And>k y y' s s'.\n       \\<lbrakk>Ord k;\n        \\<And>y y' s s'.\n           \\<lbrakk>k \\<noteq> 0; ord_rec_Seq T G s k y;\n            ord_rec_Seq T G s' k y'\\<rbrakk>\n           \\<Longrightarrow> y' = y;\n        succ k \\<noteq> 0; ord_rec_Seq T G s (succ k) y;\n        ord_rec_Seq T G s' (succ k) y'\\<rbrakk>\n       \\<Longrightarrow> y' = y", "case 0"], ["proof (state)\nthis:\n  0 \\<noteq> 0\n  ord_rec_Seq T G s 0 y\n  ord_rec_Seq T G s' 0 y'\n\ngoal (2 subgoals):\n 1. \\<And>y y' s s'.\n       \\<lbrakk>0 \\<noteq> 0; ord_rec_Seq T G s 0 y;\n        ord_rec_Seq T G s' 0 y'\\<rbrakk>\n       \\<Longrightarrow> y' = y\n 2. \\<And>k y y' s s'.\n       \\<lbrakk>Ord k;\n        \\<And>y y' s s'.\n           \\<lbrakk>k \\<noteq> 0; ord_rec_Seq T G s k y;\n            ord_rec_Seq T G s' k y'\\<rbrakk>\n           \\<Longrightarrow> y' = y;\n        succ k \\<noteq> 0; ord_rec_Seq T G s (succ k) y;\n        ord_rec_Seq T G s' (succ k) y'\\<rbrakk>\n       \\<Longrightarrow> y' = y", "thus ?case"], ["proof (prove)\nusing this:\n  0 \\<noteq> 0\n  ord_rec_Seq T G s 0 y\n  ord_rec_Seq T G s' 0 y'\n\ngoal (1 subgoal):\n 1. y' = y", "by (simp add: ord_rec_Seq_def)"], ["proof (state)\nthis:\n  y' = y\n\ngoal (1 subgoal):\n 1. \\<And>k y y' s s'.\n       \\<lbrakk>Ord k;\n        \\<And>y y' s s'.\n           \\<lbrakk>k \\<noteq> 0; ord_rec_Seq T G s k y;\n            ord_rec_Seq T G s' k y'\\<rbrakk>\n           \\<Longrightarrow> y' = y;\n        succ k \\<noteq> 0; ord_rec_Seq T G s (succ k) y;\n        ord_rec_Seq T G s' (succ k) y'\\<rbrakk>\n       \\<Longrightarrow> y' = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k y y' s s'.\n       \\<lbrakk>Ord k;\n        \\<And>y y' s s'.\n           \\<lbrakk>k \\<noteq> 0; ord_rec_Seq T G s k y;\n            ord_rec_Seq T G s' k y'\\<rbrakk>\n           \\<Longrightarrow> y' = y;\n        succ k \\<noteq> 0; ord_rec_Seq T G s (succ k) y;\n        ord_rec_Seq T G s' (succ k) y'\\<rbrakk>\n       \\<Longrightarrow> y' = y", "case (succ k)"], ["proof (state)\nthis:\n  Ord k\n  \\<lbrakk>k \\<noteq> 0; ord_rec_Seq T G ?s k ?y;\n   ord_rec_Seq T G ?s' k ?y'\\<rbrakk>\n  \\<Longrightarrow> ?y' = ?y\n  succ k \\<noteq> 0\n  ord_rec_Seq T G s (succ k) y\n  ord_rec_Seq T G s' (succ k) y'\n\ngoal (1 subgoal):\n 1. \\<And>k y y' s s'.\n       \\<lbrakk>Ord k;\n        \\<And>y y' s s'.\n           \\<lbrakk>k \\<noteq> 0; ord_rec_Seq T G s k y;\n            ord_rec_Seq T G s' k y'\\<rbrakk>\n           \\<Longrightarrow> y' = y;\n        succ k \\<noteq> 0; ord_rec_Seq T G s (succ k) y;\n        ord_rec_Seq T G s' (succ k) y'\\<rbrakk>\n       \\<Longrightarrow> y' = y", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. y' = y", "proof (cases \"k=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> y' = y\n 2. k \\<noteq> 0 \\<Longrightarrow> y' = y", "case True"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> y' = y\n 2. k \\<noteq> 0 \\<Longrightarrow> y' = y", "thus ?thesis"], ["proof (prove)\nusing this:\n  k = 0\n\ngoal (1 subgoal):\n 1. y' = y", "using succ"], ["proof (prove)\nusing this:\n  k = 0\n  Ord k\n  \\<lbrakk>k \\<noteq> 0; ord_rec_Seq T G ?s k ?y;\n   ord_rec_Seq T G ?s' k ?y'\\<rbrakk>\n  \\<Longrightarrow> ?y' = ?y\n  succ k \\<noteq> 0\n  ord_rec_Seq T G s (succ k) y\n  ord_rec_Seq T G s' (succ k) y'\n\ngoal (1 subgoal):\n 1. y' = y", "by (auto simp: ord_rec_Seq_def)"], ["proof (state)\nthis:\n  y' = y\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> y' = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> y' = y", "case False"], ["proof (state)\nthis:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> y' = y", "thus ?thesis"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. y' = y", "using succ"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n  Ord k\n  \\<lbrakk>k \\<noteq> 0; ord_rec_Seq T G ?s k ?y;\n   ord_rec_Seq T G ?s' k ?y'\\<rbrakk>\n  \\<Longrightarrow> ?y' = ?y\n  succ k \\<noteq> 0\n  ord_rec_Seq T G s (succ k) y\n  ord_rec_Seq T G s' (succ k) y'\n\ngoal (1 subgoal):\n 1. y' = y", "by (auto simp: ord_rec_Seq_succ_iff)"], ["proof (state)\nthis:\n  y' = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y' = y\n\ngoal:\nNo subgoals!", "qed"], ["", "definition ord_recp :: \"hf \\<Rightarrow> (hf \\<Rightarrow> hf) \\<Rightarrow> (hf \\<Rightarrow> hf) \\<Rightarrow> hf \\<Rightarrow> hf \\<Rightarrow> bool\"\n  where\n   \"ord_recp T G H x y =\n    (if x=0 then y = T\n     else\n       if Ord(x) then \\<exists> s. ord_rec_Seq T G s x y\n       else y = H x)\""], ["", "lemma ord_recp_functional: \"ord_recp T G H x y \\<Longrightarrow> ord_recp T G H x y' \\<Longrightarrow> y' = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ord_recp T G H x y; ord_recp T G H x y'\\<rbrakk>\n    \\<Longrightarrow> y' = y", "by (auto simp: ord_recp_def ord_rec_Seq_functional split: if_split_asm)"], ["", "lemma ord_recp_succ_iff:\n  assumes k: \"Ord k\" shows \"ord_recp T G H (succ k) z \\<longleftrightarrow> (\\<exists>y. z = G y \\<and> ord_recp T G H k y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_recp T G H (succ k) z =\n    (\\<exists>y. z = G y \\<and> ord_recp T G H k y)", "proof (cases \"k=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    ord_recp T G H (succ k) z =\n    (\\<exists>y. z = G y \\<and> ord_recp T G H k y)\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    ord_recp T G H (succ k) z =\n    (\\<exists>y. z = G y \\<and> ord_recp T G H k y)", "case True"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    ord_recp T G H (succ k) z =\n    (\\<exists>y. z = G y \\<and> ord_recp T G H k y)\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    ord_recp T G H (succ k) z =\n    (\\<exists>y. z = G y \\<and> ord_recp T G H k y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  k = 0\n\ngoal (1 subgoal):\n 1. ord_recp T G H (succ k) z =\n    (\\<exists>y. z = G y \\<and> ord_recp T G H k y)", "by (simp add: ord_recp_def ord_rec_Seq_def) (metis Seq_0 Seq_insf app_insf_Seq)"], ["proof (state)\nthis:\n  ord_recp T G H (succ k) z =\n  (\\<exists>y. z = G y \\<and> ord_recp T G H k y)\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    ord_recp T G H (succ k) z =\n    (\\<exists>y. z = G y \\<and> ord_recp T G H k y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    ord_recp T G H (succ k) z =\n    (\\<exists>y. z = G y \\<and> ord_recp T G H k y)", "case False"], ["proof (state)\nthis:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    ord_recp T G H (succ k) z =\n    (\\<exists>y. z = G y \\<and> ord_recp T G H k y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ord_recp T G H (succ k) z =\n    (\\<exists>y. z = G y \\<and> ord_recp T G H k y)", "using k"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n  Ord k\n\ngoal (1 subgoal):\n 1. ord_recp T G H (succ k) z =\n    (\\<exists>y. z = G y \\<and> ord_recp T G H k y)", "by (auto simp: ord_recp_def ord_rec_Seq_succ_iff)"], ["proof (state)\nthis:\n  ord_recp T G H (succ k) z =\n  (\\<exists>y. z = G y \\<and> ord_recp T G H k y)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition ord_rec :: \"hf \\<Rightarrow> (hf \\<Rightarrow> hf) \\<Rightarrow> (hf \\<Rightarrow> hf) \\<Rightarrow> hf \\<Rightarrow> hf\"\n  where\n   \"ord_rec T G H x = (THE y. ord_recp T G H x y)\""], ["", "lemma ord_rec_0 [simp]: \"ord_rec T G H 0 = T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_rec T G H 0 = T", "by (simp add: ord_recp_def ord_rec_def)"], ["", "lemma ord_recp_total: \"\\<exists>y. ord_recp T G H x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. ord_recp T G H x y", "proof (cases \"Ord x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Ord x \\<Longrightarrow> \\<exists>y. ord_recp T G H x y\n 2. \\<not> Ord x \\<Longrightarrow> \\<exists>y. ord_recp T G H x y", "case True"], ["proof (state)\nthis:\n  Ord x\n\ngoal (2 subgoals):\n 1. Ord x \\<Longrightarrow> \\<exists>y. ord_recp T G H x y\n 2. \\<not> Ord x \\<Longrightarrow> \\<exists>y. ord_recp T G H x y", "thus ?thesis"], ["proof (prove)\nusing this:\n  Ord x\n\ngoal (1 subgoal):\n 1. \\<exists>y. ord_recp T G H x y", "proof (induct x rule: Ord_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>y. ord_recp T G H 0 y\n 2. \\<And>k.\n       \\<lbrakk>Ord k; \\<exists>y. ord_recp T G H k y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. ord_recp T G H (succ k) y", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>y. ord_recp T G H 0 y\n 2. \\<And>k.\n       \\<lbrakk>Ord k; \\<exists>y. ord_recp T G H k y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. ord_recp T G H (succ k) y", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. ord_recp T G H 0 y", "by (simp add: ord_recp_def)"], ["proof (state)\nthis:\n  \\<exists>y. ord_recp T G H 0 y\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>Ord k; \\<exists>y. ord_recp T G H k y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. ord_recp T G H (succ k) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>Ord k; \\<exists>y. ord_recp T G H k y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. ord_recp T G H (succ k) y", "case (succ x)"], ["proof (state)\nthis:\n  Ord x\n  \\<exists>y. ord_recp T G H x y\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>Ord k; \\<exists>y. ord_recp T G H k y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. ord_recp T G H (succ k) y", "thus ?case"], ["proof (prove)\nusing this:\n  Ord x\n  \\<exists>y. ord_recp T G H x y\n\ngoal (1 subgoal):\n 1. \\<exists>y. ord_recp T G H (succ x) y", "by (metis ord_recp_succ_iff)"], ["proof (state)\nthis:\n  \\<exists>y. ord_recp T G H (succ x) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y. ord_recp T G H x y\n\ngoal (1 subgoal):\n 1. \\<not> Ord x \\<Longrightarrow> \\<exists>y. ord_recp T G H x y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Ord x \\<Longrightarrow> \\<exists>y. ord_recp T G H x y", "case False"], ["proof (state)\nthis:\n  \\<not> Ord x\n\ngoal (1 subgoal):\n 1. \\<not> Ord x \\<Longrightarrow> \\<exists>y. ord_recp T G H x y", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> Ord x\n\ngoal (1 subgoal):\n 1. \\<exists>y. ord_recp T G H x y", "by (auto simp: ord_recp_def)"], ["proof (state)\nthis:\n  \\<exists>y. ord_recp T G H x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_rec_succ [simp]:\n  assumes k: \"Ord k\" shows \"ord_rec T G H (succ k) = G (ord_rec T G H k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord_rec T G H (succ k) = G (ord_rec T G H k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ord_rec T G H (succ k) = G (ord_rec T G H k)", "from ord_recp_total [of T G H k]"], ["proof (chain)\npicking this:\n  \\<exists>y. ord_recp T G H k y", "obtain y where \"ord_recp T G H k y\""], ["proof (prove)\nusing this:\n  \\<exists>y. ord_recp T G H k y\n\ngoal (1 subgoal):\n 1. (\\<And>y. ord_recp T G H k y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ord_recp T G H k y\n\ngoal (1 subgoal):\n 1. ord_rec T G H (succ k) = G (ord_rec T G H k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ord_recp T G H k y\n\ngoal (1 subgoal):\n 1. ord_rec T G H (succ k) = G (ord_rec T G H k)", "using k"], ["proof (prove)\nusing this:\n  ord_recp T G H k y\n  Ord k\n\ngoal (1 subgoal):\n 1. ord_rec T G H (succ k) = G (ord_rec T G H k)", "apply (simp add: ord_rec_def ord_recp_succ_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ord_recp T G H k y; Ord k\\<rbrakk>\n    \\<Longrightarrow> (THE y.\n                          \\<exists>ya.\n                             y = G ya \\<and> ord_recp T G H k ya) =\n                      G (THE y. ord_recp T G H k y)", "apply (rule theI2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ord_recp T G H k y; Ord k\\<rbrakk>\n    \\<Longrightarrow> ord_recp T G H k ?a2\n 2. \\<And>x.\n       \\<lbrakk>ord_recp T G H k y; Ord k; ord_recp T G H k x\\<rbrakk>\n       \\<Longrightarrow> x = ?a2\n 3. \\<And>x.\n       \\<lbrakk>ord_recp T G H k y; Ord k; ord_recp T G H k x\\<rbrakk>\n       \\<Longrightarrow> (THE y.\n                             \\<exists>ya.\n                                y = G ya \\<and> ord_recp T G H k ya) =\n                         G x", "apply (auto dest: ord_recp_functional)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ord_rec T G H (succ k) = G (ord_rec T G H k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ord_rec_non [simp]: \"\\<not> Ord x \\<Longrightarrow> ord_rec T G H x = H x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Ord x \\<Longrightarrow> ord_rec T G H x = H x", "by (metis Ord_0 ord_rec_def ord_recp_def the_equality)"], ["", "end"]]}