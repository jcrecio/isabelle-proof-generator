{"file_name": "/home/qj213/afp-2021-10-22/thys/Multi_Party_Computation/ETP_OT.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Multi_Party_Computation", "problem_names": ["lemma if_False_True: \"(if x then False else \\<not> False) \\<longleftrightarrow> (if x then False else True)\"", "lemma if_then_True [simp]: \"(if b then True else x) \\<longleftrightarrow> (\\<not> b \\<longrightarrow> x)\"", "lemma if_else_True [simp]: \"(if b then x else True) \\<longleftrightarrow> (b \\<longrightarrow> x)\"", "lemma inj_on_Not [simp]: \"inj_on Not A\"", "lemma correctness: \"protocol (m0,m1) c = funct_OT_12 (m0,m1) c\"", "lemma lossless_R1: \"lossless_spmf (R1 msgs \\<sigma>)\"", "lemma lossless_S1: \"lossless_spmf (S1 msgs ())\"", "lemma lossless_R2: \"lossless_spmf (R2 msgs \\<sigma>)\"", "lemma lossless_S2: \"lossless_spmf (S2 \\<sigma> b\\<^sub>\\<sigma>)\"", "lemma P1_security: \"R1 input\\<^sub>1 \\<sigma> = funct_OT_12 x y \\<bind> (\\<lambda> (s1, s2). S1 input\\<^sub>1 s1)\"", "lemma lossless_\\<A>: \n  assumes \"\\<forall> view. lossless_spmf (D2 view)\"\n  shows \"y \\<in> set_spmf I \\<longrightarrow>  lossless_spmf (\\<A> (fst y) \\<sigma> b\\<^sub>\\<sigma> D2 x)\"", "lemma assm_bound_funct_OT_12: \n  assumes \"etp.HCP_adv \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D \\<le> HCP_ad\"\n  shows \"\\<bar>spmf (funct_OT_12 (b0,b1) \\<sigma> \\<bind> (\\<lambda> (out1,out2). \n              etp.HCP_game \\<A> \\<sigma> out2 D)) True - 1/2\\<bar> \\<le> HCP_ad\"\n(is \"?lhs \\<le> HCP_ad\")", "lemma assm_bound_funct_OT_12_collapse: \n  assumes \"\\<forall> b\\<^sub>\\<sigma>. etp.HCP_adv \\<A> \\<sigma> b\\<^sub>\\<sigma> D \\<le> HCP_ad\"\n  shows \"\\<bar>spmf (funct_OT_12 m1 \\<sigma> \\<bind> (\\<lambda> (out1,out2). etp.HCP_game \\<A> \\<sigma> out2 D)) True - 1/2\\<bar> \\<le> HCP_ad\"", "lemma R2_S2_False:\n  assumes \"((if \\<sigma> then b0 else b1) = False)\" \n  shows \"spmf (R2 (b0,b1) \\<sigma> \\<bind> (D2 :: (bool \\<times> 'index \\<times> bool \\<times> bool) \\<Rightarrow> bool spmf)) True \n                = spmf (funct_OT_12 (b0,b1) \\<sigma> \\<bind> (\\<lambda> (out1,out2). S2 \\<sigma> out2 \\<bind> D2)) True\"", "lemma R2_S2_True:\n  assumes \"((if \\<sigma> then b0 else b1) = True)\" \n    and lossless_D: \"\\<forall> a. lossless_spmf (D2 a)\"\n  shows \"\\<bar>(spmf (bind_spmf (R2 (b0,b1) \\<sigma>) D2) True) - spmf (funct_OT_12 (b0,b1) \\<sigma> \\<bind> (\\<lambda> (out1, out2). S2 \\<sigma> out2 \\<bind> (\\<lambda> view. D2 view))) True\\<bar>\n                         = \\<bar>2*((spmf (etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2) True) - 1/2)\\<bar>\"", "lemma P2_adv_bound:\n  assumes lossless_D: \"\\<forall> a. lossless_spmf (D2 a)\"\n  shows \"\\<bar>(spmf (bind_spmf (R2 (b0,b1) \\<sigma>) D2) True) - spmf (funct_OT_12 (b0,b1) \\<sigma> \\<bind> (\\<lambda> (out1, out2). S2 \\<sigma> out2 \\<bind> (\\<lambda> view. D2 view))) True\\<bar>\n                         \\<le> \\<bar>2*((spmf (etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2) True) - 1/2)\\<bar>\"", "lemma correct: \"OT_12.correctness m1 m2\"", "lemma P1_security_inf_the: \"OT_12.perfect_sec_P1 m1 m2\"", "lemma P2_security:\n  assumes \"\\<forall> a. lossless_spmf (D a)\"\n  and \"\\<forall> b\\<^sub>\\<sigma>. etp.HCP_adv \\<A> m2 b\\<^sub>\\<sigma> D \\<le> HCP_ad\"\n  shows \"OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad\"", "lemma correct_asym: \"OT_12.correctness n m1 m2\"", "lemma P1_sec_asym: \"OT_12.perfect_sec_P1 n m1 m2\"", "lemma P2_sec_asym: \n  assumes \"\\<forall> a. lossless_spmf (D a)\" \n    and HCP_adv_neg: \"negligible (\\<lambda> n. etp_advantage n)\"\n    and etp_adv_bound: \"\\<forall> b\\<^sub>\\<sigma> n. etp.HCP_adv n \\<A> m2 b\\<^sub>\\<sigma> D \\<le> etp_advantage n\"\n  shows \"negligible (\\<lambda> n. OT_12.adv_P2 n m1 m2 D)\""], "translations": [["", "lemma if_False_True: \"(if x then False else \\<not> False) \\<longleftrightarrow> (if x then False else True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if x then False else \\<not> False) = (if x then False else True)", "by simp"], ["", "lemma if_then_True [simp]: \"(if b then True else x) \\<longleftrightarrow> (\\<not> b \\<longrightarrow> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if b then True else x) = (\\<not> b \\<longrightarrow> x)", "by simp"], ["", "lemma if_else_True [simp]: \"(if b then x else True) \\<longleftrightarrow> (b \\<longrightarrow> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if b then x else True) = (b \\<longrightarrow> x)", "by simp"], ["", "lemma inj_on_Not [simp]: \"inj_on Not A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on Not A", "by(auto simp add: inj_on_def)"], ["", "locale ETP_base = etp: etp I domain range F F\\<^sub>i\\<^sub>n\\<^sub>v B\n  for I :: \"('index \\<times> 'trap) spmf\" \\<comment> \\<open>samples index and trapdoor\\<close>\n    and domain :: \"'index \\<Rightarrow> 'range set\" \n    and range :: \"'index \\<Rightarrow> 'range set\"\n    and B :: \"'index \\<Rightarrow> 'range \\<Rightarrow> bool\" \\<comment> \\<open>hard core predicate\\<close>\n    and F :: \"'index \\<Rightarrow> 'range \\<Rightarrow> 'range\"\n    and F\\<^sub>i\\<^sub>n\\<^sub>v :: \"'index \\<Rightarrow> 'trap \\<Rightarrow> 'range \\<Rightarrow> 'range\"\nbegin"], ["", "text\\<open>The probabilistic program that defines the protocol.\\<close>"], ["", "definition protocol :: \"(bool \\<times> bool) \\<Rightarrow> bool \\<Rightarrow> (unit \\<times> bool) spmf\"\n  where \"protocol input\\<^sub>1 \\<sigma> = do {  \n    let (b\\<^sub>\\<sigma>, b\\<^sub>\\<sigma>') = input\\<^sub>1;\n    (\\<alpha> :: 'index, \\<tau> :: 'trap) \\<leftarrow> I;\n    x\\<^sub>\\<sigma> :: 'range \\<leftarrow> etp.S \\<alpha>;\n    y\\<^sub>\\<sigma>' :: 'range \\<leftarrow> etp.S \\<alpha>;\n    let (y\\<^sub>\\<sigma> :: 'range) = F \\<alpha> x\\<^sub>\\<sigma>;\n    let (x\\<^sub>\\<sigma> :: 'range) = F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>;\n    let (x\\<^sub>\\<sigma>' :: 'range) = F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>';\n    let (\\<beta>\\<^sub>\\<sigma> :: bool) = xor (B \\<alpha> x\\<^sub>\\<sigma>) b\\<^sub>\\<sigma>;\n    let (\\<beta>\\<^sub>\\<sigma>' :: bool) = xor (B \\<alpha> x\\<^sub>\\<sigma>') b\\<^sub>\\<sigma>';\n    return_spmf ((), if \\<sigma> then xor (B \\<alpha> x\\<^sub>\\<sigma>') \\<beta>\\<^sub>\\<sigma>' else xor (B \\<alpha> x\\<^sub>\\<sigma>) \\<beta>\\<^sub>\\<sigma>)}\""], ["", "lemma correctness: \"protocol (m0,m1) c = funct_OT_12 (m0,m1) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. protocol (m0, m1) c = funct_OT_12 (m0, m1) c", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. protocol (m0, m1) c = funct_OT_12 (m0, m1) c", "have \"(B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>') = (B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>') = m1)) = m1\" \n    for \\<alpha> \\<tau> y\\<^sub>\\<sigma>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (B \\<alpha>\n      (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>') =\n     (B \\<alpha>\n       (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>') =\n      m1)) =\n    m1", "by auto"], ["proof (state)\nthis:\n  (B ?\\<alpha>\n    (F\\<^sub>i\\<^sub>n\\<^sub>v ?\\<alpha> ?\\<tau> ?y\\<^sub>\\<sigma>') =\n   (B ?\\<alpha>\n     (F\\<^sub>i\\<^sub>n\\<^sub>v ?\\<alpha> ?\\<tau> ?y\\<^sub>\\<sigma>') =\n    m1)) =\n  m1\n\ngoal (1 subgoal):\n 1. protocol (m0, m1) c = funct_OT_12 (m0, m1) c", "then"], ["proof (chain)\npicking this:\n  (B ?\\<alpha>\n    (F\\<^sub>i\\<^sub>n\\<^sub>v ?\\<alpha> ?\\<tau> ?y\\<^sub>\\<sigma>') =\n   (B ?\\<alpha>\n     (F\\<^sub>i\\<^sub>n\\<^sub>v ?\\<alpha> ?\\<tau> ?y\\<^sub>\\<sigma>') =\n    m1)) =\n  m1", "show ?thesis"], ["proof (prove)\nusing this:\n  (B ?\\<alpha>\n    (F\\<^sub>i\\<^sub>n\\<^sub>v ?\\<alpha> ?\\<tau> ?y\\<^sub>\\<sigma>') =\n   (B ?\\<alpha>\n     (F\\<^sub>i\\<^sub>n\\<^sub>v ?\\<alpha> ?\\<tau> ?y\\<^sub>\\<sigma>') =\n    m1)) =\n  m1\n\ngoal (1 subgoal):\n 1. protocol (m0, m1) c = funct_OT_12 (m0, m1) c", "by(auto simp add: protocol_def funct_OT_12_def Let_def etp.B_F_inv_rewrite bind_spmf_const etp.lossless_S local.etp.lossless_I lossless_weight_spmfD split_def cong: bind_spmf_cong)"], ["proof (state)\nthis:\n  protocol (m0, m1) c = funct_OT_12 (m0, m1) c\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> Party 1 views \\<close>"], ["", "definition R1 :: \"(bool \\<times> bool) \\<Rightarrow> bool \\<Rightarrow> 'range viewP1\"\n  where \"R1 input\\<^sub>1 \\<sigma> = do {\n    let (b\\<^sub>0, b\\<^sub>1) = input\\<^sub>1;\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    x\\<^sub>\\<sigma> \\<leftarrow> etp.S \\<alpha>;\n    y\\<^sub>\\<sigma>' \\<leftarrow> etp.S \\<alpha>;\n    let y\\<^sub>\\<sigma> = F \\<alpha> x\\<^sub>\\<sigma>;\n    return_spmf ((b\\<^sub>0, b\\<^sub>1), if \\<sigma> then y\\<^sub>\\<sigma>' else y\\<^sub>\\<sigma>, if \\<sigma> then y\\<^sub>\\<sigma> else y\\<^sub>\\<sigma>')}\""], ["", "lemma lossless_R1: \"lossless_spmf (R1 msgs \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (R1 msgs \\<sigma>)", "by(simp add: R1_def local.etp.lossless_I split_def etp.lossless_S Let_def)"], ["", "definition S1 :: \"(bool \\<times> bool) \\<Rightarrow> unit \\<Rightarrow> 'range viewP1\"\n  where \"S1 == (\\<lambda> input\\<^sub>1 (). do {\n    let (b\\<^sub>0, b\\<^sub>1) = input\\<^sub>1;\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    y\\<^sub>0 :: 'range \\<leftarrow> etp.S \\<alpha>;\n    y\\<^sub>1 \\<leftarrow> etp.S \\<alpha>;\n    return_spmf ((b\\<^sub>0, b\\<^sub>1), y\\<^sub>0, y\\<^sub>1)})\""], ["", "lemma lossless_S1: \"lossless_spmf (S1 msgs ())\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (S1 msgs ())", "by(simp add: S1_def local.etp.lossless_I split_def etp.lossless_S)"], ["", "text \\<open> Party 2 views \\<close>"], ["", "definition R2 :: \"(bool \\<times> bool) \\<Rightarrow> bool \\<Rightarrow> 'index viewP2\"\n  where \"R2 msgs \\<sigma> = do {\n    let (b0,b1) = msgs;\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    x\\<^sub>\\<sigma> \\<leftarrow> etp.S \\<alpha>;\n    y\\<^sub>\\<sigma>' \\<leftarrow> etp.S \\<alpha>;\n    let y\\<^sub>\\<sigma> = F \\<alpha> x\\<^sub>\\<sigma>;\n    let x\\<^sub>\\<sigma> = F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>;\n    let x\\<^sub>\\<sigma>' = F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>';\n    let \\<beta>\\<^sub>\\<sigma> = (B \\<alpha> x\\<^sub>\\<sigma>) \\<oplus> (if \\<sigma> then b1 else b0) ;\n    let \\<beta>\\<^sub>\\<sigma>' = (B \\<alpha> x\\<^sub>\\<sigma>') \\<oplus> (if \\<sigma> then b0 else b1);\n    return_spmf (\\<sigma>, \\<alpha>,(\\<beta>\\<^sub>\\<sigma>, \\<beta>\\<^sub>\\<sigma>'))}\""], ["", "lemma lossless_R2: \"lossless_spmf (R2 msgs \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (R2 msgs \\<sigma>)", "by(simp add: R2_def split_def local.etp.lossless_I etp.lossless_S)"], ["", "definition S2 :: \"bool \\<Rightarrow> bool \\<Rightarrow> 'index viewP2\"\n  where \"S2 \\<sigma> b\\<^sub>\\<sigma> = do {\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    x\\<^sub>\\<sigma> \\<leftarrow> etp.S \\<alpha>;\n    y\\<^sub>\\<sigma>' \\<leftarrow> etp.S \\<alpha>;\n    let x\\<^sub>\\<sigma>' = F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>';\n    let \\<beta>\\<^sub>\\<sigma> = (B \\<alpha> x\\<^sub>\\<sigma>) \\<oplus> b\\<^sub>\\<sigma>;\n    let \\<beta>\\<^sub>\\<sigma>' = B \\<alpha> x\\<^sub>\\<sigma>';\n    return_spmf (\\<sigma>, \\<alpha>, (\\<beta>\\<^sub>\\<sigma>, \\<beta>\\<^sub>\\<sigma>'))}\""], ["", "lemma lossless_S2: \"lossless_spmf (S2 \\<sigma> b\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (S2 \\<sigma> b\\<^sub>\\<sigma>)", "by(simp add: S2_def local.etp.lossless_I etp.lossless_S split_def)"], ["", "text \\<open> Security for Party 1 \\<close>"], ["", "text\\<open>We have information theoretic security for Party 1.\\<close>"], ["", "lemma P1_security: \"R1 input\\<^sub>1 \\<sigma> = funct_OT_12 x y \\<bind> (\\<lambda> (s1, s2). S1 input\\<^sub>1 s1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R1 input\\<^sub>1 \\<sigma> =\n    funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)", "including monad_normalisation"], ["proof (prove)\ngoal (1 subgoal):\n 1. R1 input\\<^sub>1 \\<sigma> =\n    funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. R1 input\\<^sub>1 \\<sigma> =\n    funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)", "have \"R1 input\\<^sub>1 \\<sigma> =  do {\n    let (b0,b1) = input\\<^sub>1;\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    y\\<^sub>\\<sigma>' :: 'range \\<leftarrow> etp.S \\<alpha>;\n    y\\<^sub>\\<sigma> \\<leftarrow> map_spmf (\\<lambda> x\\<^sub>\\<sigma>. F \\<alpha> x\\<^sub>\\<sigma>) (etp.S \\<alpha>);\n    return_spmf ((b0,b1), if \\<sigma> then y\\<^sub>\\<sigma>' else y\\<^sub>\\<sigma>, if \\<sigma> then y\\<^sub>\\<sigma> else y\\<^sub>\\<sigma>')}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R1 input\\<^sub>1 \\<sigma> =\n    (let (b0, b1) = input\\<^sub>1\n     in I \\<bind>\n        (\\<lambda>(\\<alpha>, \\<tau>).\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>y\\<^sub>\\<sigma>'.\n                map_spmf (F \\<alpha>) (local.etp.S \\<alpha>) \\<bind>\n                (\\<lambda>y\\<^sub>\\<sigma>.\n                    return_spmf\n                     ((b0, b1),\n                      if \\<sigma> then y\\<^sub>\\<sigma>'\n                      else y\\<^sub>\\<sigma>,\n                      if \\<sigma> then y\\<^sub>\\<sigma>\n                      else y\\<^sub>\\<sigma>')))))", "by(simp add: bind_map_spmf o_def Let_def R1_def)"], ["proof (state)\nthis:\n  R1 input\\<^sub>1 \\<sigma> =\n  (let (b0, b1) = input\\<^sub>1\n   in I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>y\\<^sub>\\<sigma>'.\n              map_spmf (F \\<alpha>) (local.etp.S \\<alpha>) \\<bind>\n              (\\<lambda>y\\<^sub>\\<sigma>.\n                  return_spmf\n                   ((b0, b1),\n                    if \\<sigma> then y\\<^sub>\\<sigma>'\n                    else y\\<^sub>\\<sigma>,\n                    if \\<sigma> then y\\<^sub>\\<sigma>\n                    else y\\<^sub>\\<sigma>')))))\n\ngoal (1 subgoal):\n 1. R1 input\\<^sub>1 \\<sigma> =\n    funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)", "also"], ["proof (state)\nthis:\n  R1 input\\<^sub>1 \\<sigma> =\n  (let (b0, b1) = input\\<^sub>1\n   in I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>y\\<^sub>\\<sigma>'.\n              map_spmf (F \\<alpha>) (local.etp.S \\<alpha>) \\<bind>\n              (\\<lambda>y\\<^sub>\\<sigma>.\n                  return_spmf\n                   ((b0, b1),\n                    if \\<sigma> then y\\<^sub>\\<sigma>'\n                    else y\\<^sub>\\<sigma>,\n                    if \\<sigma> then y\\<^sub>\\<sigma>\n                    else y\\<^sub>\\<sigma>')))))\n\ngoal (1 subgoal):\n 1. R1 input\\<^sub>1 \\<sigma> =\n    funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)", "have \"... = do {\n    let (b0,b1) = input\\<^sub>1;\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    y\\<^sub>\\<sigma>' :: 'range \\<leftarrow> etp.S \\<alpha>;\n    y\\<^sub>\\<sigma> \\<leftarrow> etp.S \\<alpha>;\n    return_spmf ((b0,b1), if \\<sigma> then y\\<^sub>\\<sigma>' else y\\<^sub>\\<sigma>, if \\<sigma> then y\\<^sub>\\<sigma> else y\\<^sub>\\<sigma>')}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (let (b0, b1) = input\\<^sub>1\n     in I \\<bind>\n        (\\<lambda>(\\<alpha>, \\<tau>).\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>y\\<^sub>\\<sigma>'.\n                map_spmf (F \\<alpha>) (local.etp.S \\<alpha>) \\<bind>\n                (\\<lambda>y\\<^sub>\\<sigma>.\n                    return_spmf\n                     ((b0, b1),\n                      if \\<sigma> then y\\<^sub>\\<sigma>'\n                      else y\\<^sub>\\<sigma>,\n                      if \\<sigma> then y\\<^sub>\\<sigma>\n                      else y\\<^sub>\\<sigma>'))))) =\n    (let (b0, b1) = input\\<^sub>1\n     in I \\<bind>\n        (\\<lambda>(\\<alpha>, \\<tau>).\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>y\\<^sub>\\<sigma>'.\n                local.etp.S \\<alpha> \\<bind>\n                (\\<lambda>y\\<^sub>\\<sigma>.\n                    return_spmf\n                     ((b0, b1),\n                      if \\<sigma> then y\\<^sub>\\<sigma>'\n                      else y\\<^sub>\\<sigma>,\n                      if \\<sigma> then y\\<^sub>\\<sigma>\n                      else y\\<^sub>\\<sigma>')))))", "by(simp add: etp.uni_set_samp Let_def split_def cong: bind_spmf_cong)"], ["proof (state)\nthis:\n  (let (b0, b1) = input\\<^sub>1\n   in I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>y\\<^sub>\\<sigma>'.\n              map_spmf (F \\<alpha>) (local.etp.S \\<alpha>) \\<bind>\n              (\\<lambda>y\\<^sub>\\<sigma>.\n                  return_spmf\n                   ((b0, b1),\n                    if \\<sigma> then y\\<^sub>\\<sigma>'\n                    else y\\<^sub>\\<sigma>,\n                    if \\<sigma> then y\\<^sub>\\<sigma>\n                    else y\\<^sub>\\<sigma>'))))) =\n  (let (b0, b1) = input\\<^sub>1\n   in I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>y\\<^sub>\\<sigma>'.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>y\\<^sub>\\<sigma>.\n                  return_spmf\n                   ((b0, b1),\n                    if \\<sigma> then y\\<^sub>\\<sigma>'\n                    else y\\<^sub>\\<sigma>,\n                    if \\<sigma> then y\\<^sub>\\<sigma>\n                    else y\\<^sub>\\<sigma>')))))\n\ngoal (1 subgoal):\n 1. R1 input\\<^sub>1 \\<sigma> =\n    funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)", "also"], ["proof (state)\nthis:\n  (let (b0, b1) = input\\<^sub>1\n   in I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>y\\<^sub>\\<sigma>'.\n              map_spmf (F \\<alpha>) (local.etp.S \\<alpha>) \\<bind>\n              (\\<lambda>y\\<^sub>\\<sigma>.\n                  return_spmf\n                   ((b0, b1),\n                    if \\<sigma> then y\\<^sub>\\<sigma>'\n                    else y\\<^sub>\\<sigma>,\n                    if \\<sigma> then y\\<^sub>\\<sigma>\n                    else y\\<^sub>\\<sigma>'))))) =\n  (let (b0, b1) = input\\<^sub>1\n   in I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>y\\<^sub>\\<sigma>'.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>y\\<^sub>\\<sigma>.\n                  return_spmf\n                   ((b0, b1),\n                    if \\<sigma> then y\\<^sub>\\<sigma>'\n                    else y\\<^sub>\\<sigma>,\n                    if \\<sigma> then y\\<^sub>\\<sigma>\n                    else y\\<^sub>\\<sigma>')))))\n\ngoal (1 subgoal):\n 1. R1 input\\<^sub>1 \\<sigma> =\n    funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)", "have \"... = funct_OT_12 x y \\<bind> (\\<lambda> (s1, s2). S1 input\\<^sub>1 s1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (let (b0, b1) = input\\<^sub>1\n     in I \\<bind>\n        (\\<lambda>(\\<alpha>, \\<tau>).\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>y\\<^sub>\\<sigma>'.\n                local.etp.S \\<alpha> \\<bind>\n                (\\<lambda>y\\<^sub>\\<sigma>.\n                    return_spmf\n                     ((b0, b1),\n                      if \\<sigma> then y\\<^sub>\\<sigma>'\n                      else y\\<^sub>\\<sigma>,\n                      if \\<sigma> then y\\<^sub>\\<sigma>\n                      else y\\<^sub>\\<sigma>'))))) =\n    funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)", "by(cases \\<sigma>; simp add: S1_def R1_def Let_def funct_OT_12_def)"], ["proof (state)\nthis:\n  (let (b0, b1) = input\\<^sub>1\n   in I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>y\\<^sub>\\<sigma>'.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>y\\<^sub>\\<sigma>.\n                  return_spmf\n                   ((b0, b1),\n                    if \\<sigma> then y\\<^sub>\\<sigma>'\n                    else y\\<^sub>\\<sigma>,\n                    if \\<sigma> then y\\<^sub>\\<sigma>\n                    else y\\<^sub>\\<sigma>'))))) =\n  funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)\n\ngoal (1 subgoal):\n 1. R1 input\\<^sub>1 \\<sigma> =\n    funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)", "ultimately"], ["proof (chain)\npicking this:\n  R1 input\\<^sub>1 \\<sigma> =\n  (let (b0, b1) = input\\<^sub>1\n   in I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>y\\<^sub>\\<sigma>'.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>y\\<^sub>\\<sigma>.\n                  return_spmf\n                   ((b0, b1),\n                    if \\<sigma> then y\\<^sub>\\<sigma>'\n                    else y\\<^sub>\\<sigma>,\n                    if \\<sigma> then y\\<^sub>\\<sigma>\n                    else y\\<^sub>\\<sigma>')))))\n  (let (b0, b1) = input\\<^sub>1\n   in I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>y\\<^sub>\\<sigma>'.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>y\\<^sub>\\<sigma>.\n                  return_spmf\n                   ((b0, b1),\n                    if \\<sigma> then y\\<^sub>\\<sigma>'\n                    else y\\<^sub>\\<sigma>,\n                    if \\<sigma> then y\\<^sub>\\<sigma>\n                    else y\\<^sub>\\<sigma>'))))) =\n  funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)", "show ?thesis"], ["proof (prove)\nusing this:\n  R1 input\\<^sub>1 \\<sigma> =\n  (let (b0, b1) = input\\<^sub>1\n   in I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>y\\<^sub>\\<sigma>'.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>y\\<^sub>\\<sigma>.\n                  return_spmf\n                   ((b0, b1),\n                    if \\<sigma> then y\\<^sub>\\<sigma>'\n                    else y\\<^sub>\\<sigma>,\n                    if \\<sigma> then y\\<^sub>\\<sigma>\n                    else y\\<^sub>\\<sigma>')))))\n  (let (b0, b1) = input\\<^sub>1\n   in I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>y\\<^sub>\\<sigma>'.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>y\\<^sub>\\<sigma>.\n                  return_spmf\n                   ((b0, b1),\n                    if \\<sigma> then y\\<^sub>\\<sigma>'\n                    else y\\<^sub>\\<sigma>,\n                    if \\<sigma> then y\\<^sub>\\<sigma>\n                    else y\\<^sub>\\<sigma>'))))) =\n  funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)\n\ngoal (1 subgoal):\n 1. R1 input\\<^sub>1 \\<sigma> =\n    funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)", "by auto"], ["proof (state)\nthis:\n  R1 input\\<^sub>1 \\<sigma> =\n  funct_OT_12 x y \\<bind> (\\<lambda>(s1, s2). S1 input\\<^sub>1 s1)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open> The adversary used in proof of security for party 2 \\<close>"], ["", "definition \\<A> :: \"('index, 'range) advP2\"\n  where \"\\<A> \\<alpha> \\<sigma> b\\<^sub>\\<sigma> D2 x = do {\n    \\<beta>\\<^sub>\\<sigma>' \\<leftarrow> coin_spmf;\n    x\\<^sub>\\<sigma> \\<leftarrow> etp.S \\<alpha>;\n    let \\<beta>\\<^sub>\\<sigma> = (B \\<alpha> x\\<^sub>\\<sigma>) \\<oplus> b\\<^sub>\\<sigma>;\n    d \\<leftarrow> D2(\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>, \\<beta>\\<^sub>\\<sigma>');\n    return_spmf(if d then \\<beta>\\<^sub>\\<sigma>' else \\<not> \\<beta>\\<^sub>\\<sigma>')}\""], ["", "lemma lossless_\\<A>: \n  assumes \"\\<forall> view. lossless_spmf (D2 view)\"\n  shows \"y \\<in> set_spmf I \\<longrightarrow>  lossless_spmf (\\<A> (fst y) \\<sigma> b\\<^sub>\\<sigma> D2 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> set_spmf I \\<longrightarrow>\n    lossless_spmf (\\<A> (fst y) \\<sigma> b\\<^sub>\\<sigma> D2 x)", "by(simp add: \\<A>_def etp.lossless_S assms)"], ["", "lemma assm_bound_funct_OT_12: \n  assumes \"etp.HCP_adv \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D \\<le> HCP_ad\"\n  shows \"\\<bar>spmf (funct_OT_12 (b0,b1) \\<sigma> \\<bind> (\\<lambda> (out1,out2). \n              etp.HCP_game \\<A> \\<sigma> out2 D)) True - 1/2\\<bar> \\<le> HCP_ad\"\n(is \"?lhs \\<le> HCP_ad\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>spmf\n           (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2).\n                local.etp.HCP_game \\<A> \\<sigma> out2 D))\n           True -\n          1 / 2\\<bar>\n    \\<le> HCP_ad", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>spmf\n           (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2).\n                local.etp.HCP_game \\<A> \\<sigma> out2 D))\n           True -\n          1 / 2\\<bar>\n    \\<le> HCP_ad", "have \"?lhs = \\<bar>spmf (etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D) True - 1/2\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>spmf\n           (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2).\n                local.etp.HCP_game \\<A> \\<sigma> out2 D))\n           True -\n          1 / 2\\<bar> =\n    \\<bar>spmf\n           (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0)\n             D)\n           True -\n          1 / 2\\<bar>", "by(simp add: funct_OT_12_def)"], ["proof (state)\nthis:\n  \\<bar>spmf\n         (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n          (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> \\<sigma> out2 D))\n         True -\n        1 / 2\\<bar> =\n  \\<bar>spmf\n         (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D)\n         True -\n        1 / 2\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>spmf\n           (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2).\n                local.etp.HCP_game \\<A> \\<sigma> out2 D))\n           True -\n          1 / 2\\<bar>\n    \\<le> HCP_ad", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<bar>spmf\n         (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n          (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> \\<sigma> out2 D))\n         True -\n        1 / 2\\<bar> =\n  \\<bar>spmf\n         (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D)\n         True -\n        1 / 2\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>spmf\n           (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2).\n                local.etp.HCP_game \\<A> \\<sigma> out2 D))\n           True -\n          1 / 2\\<bar>\n    \\<le> HCP_ad", "using assms etp.HCP_adv_def"], ["proof (prove)\nusing this:\n  \\<bar>spmf\n         (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n          (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> \\<sigma> out2 D))\n         True -\n        1 / 2\\<bar> =\n  \\<bar>spmf\n         (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D)\n         True -\n        1 / 2\\<bar>\n  local.etp.HCP_adv \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D\n  \\<le> HCP_ad\n  local.etp.HCP_adv ?A ?\\<sigma> ?b\\<^sub>\\<sigma> ?D =\n  \\<bar>spmf (local.etp.HCP_game ?A ?\\<sigma> ?b\\<^sub>\\<sigma> ?D) True -\n        1 / 2\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>spmf\n           (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2).\n                local.etp.HCP_game \\<A> \\<sigma> out2 D))\n           True -\n          1 / 2\\<bar>\n    \\<le> HCP_ad", "by simp"], ["proof (state)\nthis:\n  \\<bar>spmf\n         (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n          (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> \\<sigma> out2 D))\n         True -\n        1 / 2\\<bar>\n  \\<le> HCP_ad\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assm_bound_funct_OT_12_collapse: \n  assumes \"\\<forall> b\\<^sub>\\<sigma>. etp.HCP_adv \\<A> \\<sigma> b\\<^sub>\\<sigma> D \\<le> HCP_ad\"\n  shows \"\\<bar>spmf (funct_OT_12 m1 \\<sigma> \\<bind> (\\<lambda> (out1,out2). etp.HCP_game \\<A> \\<sigma> out2 D)) True - 1/2\\<bar> \\<le> HCP_ad\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>spmf\n           (funct_OT_12 m1 \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2).\n                local.etp.HCP_game \\<A> \\<sigma> out2 D))\n           True -\n          1 / 2\\<bar>\n    \\<le> HCP_ad", "using assm_bound_funct_OT_12 surj_pair assms"], ["proof (prove)\nusing this:\n  local.etp.HCP_adv \\<A> ?\\<sigma> (if ?\\<sigma> then ?b1.0 else ?b0.0) ?D\n  \\<le> ?HCP_ad \\<Longrightarrow>\n  \\<bar>spmf\n         (funct_OT_12 (?b0.0, ?b1.0) ?\\<sigma> \\<bind>\n          (\\<lambda>(out1, out2).\n              local.etp.HCP_game \\<A> ?\\<sigma> out2 ?D))\n         True -\n        1 / 2\\<bar>\n  \\<le> ?HCP_ad\n  \\<exists>x y. ?p = (x, y)\n  \\<forall>b\\<^sub>\\<sigma>.\n     local.etp.HCP_adv \\<A> \\<sigma> b\\<^sub>\\<sigma> D \\<le> HCP_ad\n\ngoal (1 subgoal):\n 1. \\<bar>spmf\n           (funct_OT_12 m1 \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2).\n                local.etp.HCP_game \\<A> \\<sigma> out2 D))\n           True -\n          1 / 2\\<bar>\n    \\<le> HCP_ad", "by metis"], ["", "text \\<open> To prove security for party 2 we split the proof on the cases on party 2's input \\<close>"], ["", "lemma R2_S2_False:\n  assumes \"((if \\<sigma> then b0 else b1) = False)\" \n  shows \"spmf (R2 (b0,b1) \\<sigma> \\<bind> (D2 :: (bool \\<times> 'index \\<times> bool \\<times> bool) \\<Rightarrow> bool spmf)) True \n                = spmf (funct_OT_12 (b0,b1) \\<sigma> \\<bind> (\\<lambda> (out1,out2). S2 \\<sigma> out2 \\<bind> D2)) True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n    spmf\n     (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n      (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n     True", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n    spmf\n     (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n      (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n     True", "have \"\\<sigma> \\<Longrightarrow> \\<not> b0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Longrightarrow> \\<not> b0", "using assms"], ["proof (prove)\nusing this:\n  (if \\<sigma> then b0 else b1) = False\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<Longrightarrow> \\<not> b0", "by simp"], ["proof (state)\nthis:\n  \\<sigma> \\<Longrightarrow> \\<not> b0\n\ngoal (1 subgoal):\n 1. spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n    spmf\n     (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n      (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n     True", "moreover"], ["proof (state)\nthis:\n  \\<sigma> \\<Longrightarrow> \\<not> b0\n\ngoal (1 subgoal):\n 1. spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n    spmf\n     (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n      (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n     True", "have \"\\<not> \\<sigma> \\<Longrightarrow> \\<not> b1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow> \\<not> b1", "using assms"], ["proof (prove)\nusing this:\n  (if \\<sigma> then b0 else b1) = False\n\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow> \\<not> b1", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<sigma> \\<Longrightarrow> \\<not> b1\n\ngoal (1 subgoal):\n 1. spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n    spmf\n     (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n      (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n     True", "ultimately"], ["proof (chain)\npicking this:\n  \\<sigma> \\<Longrightarrow> \\<not> b0\n  \\<not> \\<sigma> \\<Longrightarrow> \\<not> b1", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<sigma> \\<Longrightarrow> \\<not> b0\n  \\<not> \\<sigma> \\<Longrightarrow> \\<not> b1\n\ngoal (1 subgoal):\n 1. spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n    spmf\n     (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n      (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n     True", "by(auto simp add: R2_def S2_def split_def local.etp.F_f_inv assms funct_OT_12_def cong: bind_spmf_cong_simp)"], ["proof (state)\nthis:\n  spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n  spmf\n   (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n    (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n   True\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma R2_S2_True:\n  assumes \"((if \\<sigma> then b0 else b1) = True)\" \n    and lossless_D: \"\\<forall> a. lossless_spmf (D2 a)\"\n  shows \"\\<bar>(spmf (bind_spmf (R2 (b0,b1) \\<sigma>) D2) True) - spmf (funct_OT_12 (b0,b1) \\<sigma> \\<bind> (\\<lambda> (out1, out2). S2 \\<sigma> out2 \\<bind> (\\<lambda> view. D2 view))) True\\<bar>\n                         = \\<bar>2*((spmf (etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2) True) - 1/2)\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True -\n          spmf\n           (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n           True\\<bar> =\n    \\<bar>2 *\n          (spmf\n            (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0)\n              D2)\n            True -\n           1 / 2)\\<bar>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True -\n          spmf\n           (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n           True\\<bar> =\n    \\<bar>2 *\n          (spmf\n            (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0)\n              D2)\n            True -\n           1 / 2)\\<bar>", "have  \"(spmf (funct_OT_12 (b0,b1) \\<sigma> \\<bind> (\\<lambda> (out1, out2). S2 \\<sigma> out2 \\<bind> D2)) True\n              - spmf (bind_spmf (R2 (b0,b1) \\<sigma>) D2) True) \n                    = 2 * ((spmf (etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2) True) - 1/2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf\n     (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n      (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n     True -\n    spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n    2 *\n    (spmf\n      (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n      True -\n     1 / 2)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. spmf\n     (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n      (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n     True -\n    spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n    2 *\n    (spmf\n      (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n      True -\n     1 / 2)", "have  \"((spmf (etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2) True) - 1/2)  = \n                  1/2*(spmf (bind_spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0)) D2) True\n                        - spmf (bind_spmf (R2 (b0,b1) \\<sigma>) D2) True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "including monad_normalisation"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "have \\<sigma>_true_b0_true: \"\\<sigma> \\<Longrightarrow> b0 = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<Longrightarrow> b0 = True", "using assms(1)"], ["proof (prove)\nusing this:\n  (if \\<sigma> then b0 else b1) = True\n\ngoal (1 subgoal):\n 1. \\<sigma> \\<Longrightarrow> b0 = True", "by simp"], ["proof (state)\nthis:\n  \\<sigma> \\<Longrightarrow> b0 = True\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "have \\<sigma>_false_b1_true: \"\\<not> \\<sigma> \\<Longrightarrow> b1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow> b1", "using assms(1)"], ["proof (prove)\nusing this:\n  (if \\<sigma> then b0 else b1) = True\n\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow> b1", "by simp"], ["proof (state)\nthis:\n  \\<not> \\<sigma> \\<Longrightarrow> b1\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "have return_True_False: \"spmf (return_spmf (\\<not> d)) True = spmf (return_spmf d) False\"\n        for d"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf (return_spmf (\\<not> d)) True = spmf (return_spmf d) False", "by(cases d; simp)"], ["proof (state)\nthis:\n  spmf (return_spmf (\\<not> ?d)) True = spmf (return_spmf ?d) False\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "define HCP_game_true where \"HCP_game_true == \\<lambda> \\<sigma> b\\<^sub>\\<sigma>. do {\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    x\\<^sub>\\<sigma> \\<leftarrow> etp.S \\<alpha>;\n    x \\<leftarrow> (etp.S \\<alpha>);\n    let \\<beta>\\<^sub>\\<sigma> = (B \\<alpha> x\\<^sub>\\<sigma>) \\<oplus> b\\<^sub>\\<sigma>;\n    let \\<beta>\\<^sub>\\<sigma>' = B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x); \n    d \\<leftarrow> D2(\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>, \\<beta>\\<^sub>\\<sigma>');\n    let b' = (if d then \\<beta>\\<^sub>\\<sigma>' else \\<not> \\<beta>\\<^sub>\\<sigma>');\n    let b = B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x);\n    return_spmf (b = b')}\""], ["proof (state)\nthis:\n  HCP_game_true \\<equiv>\n  \\<lambda>\\<sigma> b\\<^sub>\\<sigma>.\n     I \\<bind>\n     (\\<lambda>(\\<alpha>, \\<tau>).\n         local.etp.S \\<alpha> \\<bind>\n         (\\<lambda>x\\<^sub>\\<sigma>.\n             local.etp.S \\<alpha> \\<bind>\n             (\\<lambda>x.\n                 let \\<beta>\\<^sub>\\<sigma> =\n                       B \\<alpha> x\\<^sub>\\<sigma> \\<oplus>\n                       b\\<^sub>\\<sigma>;\n                     \\<beta>\\<^sub>\\<sigma>' =\n                       B \\<alpha>\n                        (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)\n                 in D2 (\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>,\n                        \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                    (\\<lambda>d.\n                        let b' = if d then \\<beta>\\<^sub>\\<sigma>'\n                                 else \\<not> \\<beta>\\<^sub>\\<sigma>';\n                            b = B \\<alpha>\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                   x)\n                        in return_spmf (b = b')))))\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "define HCP_game_false where \"HCP_game_false == \\<lambda> \\<sigma> b\\<^sub>\\<sigma>. do {\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    x\\<^sub>\\<sigma> \\<leftarrow> etp.S \\<alpha>;\n    x \\<leftarrow> (etp.S \\<alpha>);\n    let \\<beta>\\<^sub>\\<sigma> = (B \\<alpha> x\\<^sub>\\<sigma>) \\<oplus> b\\<^sub>\\<sigma>;\n    let \\<beta>\\<^sub>\\<sigma>' = \\<not> B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x); \n    d \\<leftarrow> D2(\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>, \\<beta>\\<^sub>\\<sigma>');\n    let b' = (if d then \\<beta>\\<^sub>\\<sigma>' else \\<not> \\<beta>\\<^sub>\\<sigma>');\n    let b = B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x);\n    return_spmf (b = b')}\""], ["proof (state)\nthis:\n  HCP_game_false \\<equiv>\n  \\<lambda>\\<sigma> b\\<^sub>\\<sigma>.\n     I \\<bind>\n     (\\<lambda>(\\<alpha>, \\<tau>).\n         local.etp.S \\<alpha> \\<bind>\n         (\\<lambda>x\\<^sub>\\<sigma>.\n             local.etp.S \\<alpha> \\<bind>\n             (\\<lambda>x.\n                 let \\<beta>\\<^sub>\\<sigma> =\n                       B \\<alpha> x\\<^sub>\\<sigma> \\<oplus>\n                       b\\<^sub>\\<sigma>;\n                     \\<beta>\\<^sub>\\<sigma>' =\n                       \\<not> B \\<alpha>\n                               (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)\n                 in D2 (\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>,\n                        \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                    (\\<lambda>d.\n                        let b' = if d then \\<beta>\\<^sub>\\<sigma>'\n                                 else \\<not> \\<beta>\\<^sub>\\<sigma>';\n                            b = B \\<alpha>\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                   x)\n                        in return_spmf (b = b')))))\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "define HCP_game_\\<A> where \"HCP_game_\\<A> == \\<lambda> \\<sigma> b\\<^sub>\\<sigma>. do {\n    \\<beta>\\<^sub>\\<sigma>' \\<leftarrow> coin_spmf;\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    x \\<leftarrow> etp.S \\<alpha>;\n    x' \\<leftarrow> etp.S \\<alpha>;\n    d \\<leftarrow> D2 (\\<sigma>, \\<alpha>, (B \\<alpha> x) \\<oplus> b\\<^sub>\\<sigma>, \\<beta>\\<^sub>\\<sigma>');\n    let b' = (if d then  \\<beta>\\<^sub>\\<sigma>' else \\<not> \\<beta>\\<^sub>\\<sigma>');\n    return_spmf (B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x') = b')}\""], ["proof (state)\nthis:\n  HCP_game_\\<A> \\<equiv>\n  \\<lambda>\\<sigma> b\\<^sub>\\<sigma>.\n     coin_spmf \\<bind>\n     (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n         I \\<bind>\n         (\\<lambda>(\\<alpha>, \\<tau>).\n             local.etp.S \\<alpha> \\<bind>\n             (\\<lambda>x.\n                 local.etp.S \\<alpha> \\<bind>\n                 (\\<lambda>x'.\n                     D2 (\\<sigma>, \\<alpha>,\n                         B \\<alpha> x \\<oplus> b\\<^sub>\\<sigma>,\n                         \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                     (\\<lambda>d.\n                         let b' = if d then \\<beta>\\<^sub>\\<sigma>'\n                                  else \\<not> \\<beta>\\<^sub>\\<sigma>'\n                         in return_spmf\n                             (B \\<alpha>\n                               (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                 x') =\n                              b'))))))\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "define S2D where \"S2D == \\<lambda> \\<sigma> b\\<^sub>\\<sigma> . do {\n      (\\<alpha>, \\<tau>) \\<leftarrow> I;\n      x\\<^sub>\\<sigma> \\<leftarrow> etp.S \\<alpha>;\n      y\\<^sub>\\<sigma>' \\<leftarrow> etp.S \\<alpha>;\n      let x\\<^sub>\\<sigma>' = F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>';\n      let \\<beta>\\<^sub>\\<sigma> = (B \\<alpha> x\\<^sub>\\<sigma>) \\<oplus> b\\<^sub>\\<sigma>;\n      let \\<beta>\\<^sub>\\<sigma>' = B \\<alpha> x\\<^sub>\\<sigma>';\n      d :: bool \\<leftarrow> D2(\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>, \\<beta>\\<^sub>\\<sigma>');\n      return_spmf d}\""], ["proof (state)\nthis:\n  S2D \\<equiv>\n  \\<lambda>\\<sigma> b\\<^sub>\\<sigma>.\n     I \\<bind>\n     (\\<lambda>(\\<alpha>, \\<tau>).\n         local.etp.S \\<alpha> \\<bind>\n         (\\<lambda>x\\<^sub>\\<sigma>.\n             local.etp.S \\<alpha> \\<bind>\n             (\\<lambda>y\\<^sub>\\<sigma>'.\n                 let x\\<^sub>\\<sigma>' =\n                       F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                        y\\<^sub>\\<sigma>';\n                     \\<beta>\\<^sub>\\<sigma> =\n                       B \\<alpha> x\\<^sub>\\<sigma> \\<oplus>\n                       b\\<^sub>\\<sigma>;\n                     \\<beta>\\<^sub>\\<sigma>' = B \\<alpha> x\\<^sub>\\<sigma>'\n                 in D2 (\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>,\n                        \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                    return_spmf)))\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "define R2D where \"R2D == \\<lambda> msgs \\<sigma>.  do {\n      let (b0,b1) = msgs;\n      (\\<alpha>, \\<tau>) \\<leftarrow> I;\n      x\\<^sub>\\<sigma> \\<leftarrow> etp.S \\<alpha>;\n      y\\<^sub>\\<sigma>' \\<leftarrow> etp.S \\<alpha>;\n      let y\\<^sub>\\<sigma> = F \\<alpha> x\\<^sub>\\<sigma>;\n      let x\\<^sub>\\<sigma> = F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>;\n      let x\\<^sub>\\<sigma>' = F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>';\n      let \\<beta>\\<^sub>\\<sigma> = (B \\<alpha> x\\<^sub>\\<sigma>) \\<oplus> (if \\<sigma> then b1 else b0) ;\n      let \\<beta>\\<^sub>\\<sigma>' = (B \\<alpha> x\\<^sub>\\<sigma>') \\<oplus> (if \\<sigma> then b0 else b1);\n      b :: bool \\<leftarrow> D2(\\<sigma>, \\<alpha>,(\\<beta>\\<^sub>\\<sigma>, \\<beta>\\<^sub>\\<sigma>'));\n      return_spmf b}\""], ["proof (state)\nthis:\n  R2D \\<equiv>\n  \\<lambda>msgs \\<sigma>.\n     let (b0, b1) = msgs\n     in I \\<bind>\n        (\\<lambda>(\\<alpha>, \\<tau>).\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x\\<^sub>\\<sigma>.\n                local.etp.S \\<alpha> \\<bind>\n                (\\<lambda>y\\<^sub>\\<sigma>'.\n                    let y\\<^sub>\\<sigma> = F \\<alpha> x\\<^sub>\\<sigma>;\n                        x\\<^sub>\\<sigma> =\n                          F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                           y\\<^sub>\\<sigma>;\n                        x\\<^sub>\\<sigma>' =\n                          F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                           y\\<^sub>\\<sigma>';\n                        \\<beta>\\<^sub>\\<sigma> =\n                          B \\<alpha> x\\<^sub>\\<sigma> \\<oplus>\n                          (if \\<sigma> then b1 else b0);\n                        \\<beta>\\<^sub>\\<sigma>' =\n                          B \\<alpha> x\\<^sub>\\<sigma>' \\<oplus>\n                          (if \\<sigma> then b0 else b1)\n                    in D2 (\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>,\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       return_spmf)))\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "define D_true where \"D_true  == \\<lambda>\\<sigma> b\\<^sub>\\<sigma>. do {\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    x\\<^sub>\\<sigma> \\<leftarrow> etp.S \\<alpha>;\n    x \\<leftarrow> (etp.S \\<alpha>);\n    let \\<beta>\\<^sub>\\<sigma> = (B \\<alpha> x\\<^sub>\\<sigma>) \\<oplus> b\\<^sub>\\<sigma>;\n    let \\<beta>\\<^sub>\\<sigma>' = B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x);\n    d :: bool \\<leftarrow> D2(\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>, \\<beta>\\<^sub>\\<sigma>');\n    return_spmf d}\""], ["proof (state)\nthis:\n  D_true \\<equiv>\n  \\<lambda>\\<sigma> b\\<^sub>\\<sigma>.\n     I \\<bind>\n     (\\<lambda>(\\<alpha>, \\<tau>).\n         local.etp.S \\<alpha> \\<bind>\n         (\\<lambda>x\\<^sub>\\<sigma>.\n             local.etp.S \\<alpha> \\<bind>\n             (\\<lambda>x.\n                 let \\<beta>\\<^sub>\\<sigma> =\n                       B \\<alpha> x\\<^sub>\\<sigma> \\<oplus>\n                       b\\<^sub>\\<sigma>;\n                     \\<beta>\\<^sub>\\<sigma>' =\n                       B \\<alpha>\n                        (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)\n                 in D2 (\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>,\n                        \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                    return_spmf)))\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "define D_false where \"D_false == \\<lambda> \\<sigma> b\\<^sub>\\<sigma>. do {\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    x\\<^sub>\\<sigma> \\<leftarrow> etp.S \\<alpha>;\n    x \\<leftarrow> etp.S \\<alpha>;\n    let \\<beta>\\<^sub>\\<sigma> = (B \\<alpha> x\\<^sub>\\<sigma>) \\<oplus> b\\<^sub>\\<sigma>;\n    let \\<beta>\\<^sub>\\<sigma>' = \\<not> B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x);\n    d :: bool \\<leftarrow> D2(\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>, \\<beta>\\<^sub>\\<sigma>');\n    return_spmf d}\""], ["proof (state)\nthis:\n  D_false \\<equiv>\n  \\<lambda>\\<sigma> b\\<^sub>\\<sigma>.\n     I \\<bind>\n     (\\<lambda>(\\<alpha>, \\<tau>).\n         local.etp.S \\<alpha> \\<bind>\n         (\\<lambda>x\\<^sub>\\<sigma>.\n             local.etp.S \\<alpha> \\<bind>\n             (\\<lambda>x.\n                 let \\<beta>\\<^sub>\\<sigma> =\n                       B \\<alpha> x\\<^sub>\\<sigma> \\<oplus>\n                       b\\<^sub>\\<sigma>;\n                     \\<beta>\\<^sub>\\<sigma>' =\n                       \\<not> B \\<alpha>\n                               (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)\n                 in D2 (\\<sigma>, \\<alpha>, \\<beta>\\<^sub>\\<sigma>,\n                        \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                    return_spmf)))\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "have lossless_D_false: \"lossless_spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lossless_spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0))", "apply(auto simp add: D_false_def lossless_D local.etp.lossless_I)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<sigma>; (a, b) \\<in> set_spmf I\\<rbrakk>\n       \\<Longrightarrow> lossless_spmf (local.etp.S a)\n 2. \\<And>a b x.\n       \\<lbrakk>\\<sigma>; (a, b) \\<in> set_spmf I;\n        x \\<in> set_spmf (local.etp.S a)\\<rbrakk>\n       \\<Longrightarrow> lossless_spmf (local.etp.S a)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> \\<sigma>; (a, b) \\<in> set_spmf I\\<rbrakk>\n       \\<Longrightarrow> lossless_spmf (local.etp.S a)\n 4. \\<And>a b x.\n       \\<lbrakk>\\<not> \\<sigma>; (a, b) \\<in> set_spmf I;\n        x \\<in> set_spmf (local.etp.S a)\\<rbrakk>\n       \\<Longrightarrow> lossless_spmf (local.etp.S a)", "using local.etp.lossless_S"], ["proof (prove)\nusing this:\n  ?y \\<in> set_spmf I \\<longrightarrow> lossless_spmf (local.etp.S (fst ?y))\n\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<sigma>; (a, b) \\<in> set_spmf I\\<rbrakk>\n       \\<Longrightarrow> lossless_spmf (local.etp.S a)\n 2. \\<And>a b x.\n       \\<lbrakk>\\<sigma>; (a, b) \\<in> set_spmf I;\n        x \\<in> set_spmf (local.etp.S a)\\<rbrakk>\n       \\<Longrightarrow> lossless_spmf (local.etp.S a)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> \\<sigma>; (a, b) \\<in> set_spmf I\\<rbrakk>\n       \\<Longrightarrow> lossless_spmf (local.etp.S a)\n 4. \\<And>a b x.\n       \\<lbrakk>\\<not> \\<sigma>; (a, b) \\<in> set_spmf I;\n        x \\<in> set_spmf (local.etp.S a)\\<rbrakk>\n       \\<Longrightarrow> lossless_spmf (local.etp.S a)", "by auto"], ["proof (state)\nthis:\n  lossless_spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0))\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "have \"spmf (etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2) True =  spmf (HCP_game_\\<A> \\<sigma> (if \\<sigma> then b1 else b0)) True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True =\n    spmf (HCP_game_\\<A> \\<sigma> (if \\<sigma> then b1 else b0)) True", "apply(simp add: etp.HCP_game_def HCP_game_\\<A>_def \\<A>_def split_def etp.F_f_inv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<longrightarrow>\n     spmf\n      (I \\<bind>\n       (\\<lambda>p.\n           local.etp.S (fst p) \\<bind>\n           (\\<lambda>y.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   coin_spmf \\<bind>\n                   (\\<lambda>ya.\n                       D2 (True, fst p, B (fst p) y = (\\<not> b1),\n                           ya) \\<bind>\n                       (\\<lambda>y.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x) =\n                             (if y then ya else \\<not> ya))))))))\n      True =\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (True, fst p, B (fst p) x = (\\<not> b1),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True) \\<and>\n    (\\<not> \\<sigma> \\<longrightarrow>\n     spmf\n      (I \\<bind>\n       (\\<lambda>p.\n           local.etp.S (fst p) \\<bind>\n           (\\<lambda>y.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   coin_spmf \\<bind>\n                   (\\<lambda>ya.\n                       D2 (False, fst p, B (fst p) y = (\\<not> b0),\n                           ya) \\<bind>\n                       (\\<lambda>y.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x) =\n                             (if y then ya else \\<not> ya))))))))\n      True =\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True)", "by(rewrite bind_commute_spmf[where q = \"coin_spmf\"]; rewrite bind_commute_spmf[where q = \"coin_spmf\"]; rewrite bind_commute_spmf[where q = \"coin_spmf\"]; auto)+"], ["proof (state)\nthis:\n  spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n   True =\n  spmf (HCP_game_\\<A> \\<sigma> (if \\<sigma> then b1 else b0)) True\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "also"], ["proof (state)\nthis:\n  spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n   True =\n  spmf (HCP_game_\\<A> \\<sigma> (if \\<sigma> then b1 else b0)) True\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "have \"... = spmf (bind_spmf (map_spmf Not coin_spmf) (\\<lambda>b. if b then HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0) else HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0))) True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf (HCP_game_\\<A> \\<sigma> (if \\<sigma> then b1 else b0)) True =\n    spmf\n     (map_spmf Not coin_spmf \\<bind>\n      (\\<lambda>b.\n          if b then HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)\n          else HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)))\n     True", "unfolding HCP_game_\\<A>_def HCP_game_true_def HCP_game_false_def \\<A>_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf\n     (coin_spmf \\<bind>\n      (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n          I \\<bind>\n          (\\<lambda>(\\<alpha>, \\<tau>).\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>x.\n                  local.etp.S \\<alpha> \\<bind>\n                  (\\<lambda>x'.\n                      D2 (\\<sigma>, \\<alpha>,\n                          B \\<alpha> x \\<oplus>\n                          (if \\<sigma> then b1 else b0),\n                          \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                      (\\<lambda>d.\n                          return_spmf\n                           (B \\<alpha>\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                               x') =\n                            (if d then \\<beta>\\<^sub>\\<sigma>'\n                             else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n     True =\n    spmf\n     (map_spmf Not coin_spmf \\<bind>\n      (\\<lambda>b.\n          if b\n          then I \\<bind>\n               (\\<lambda>(\\<alpha>, \\<tau>).\n                   local.etp.S \\<alpha> \\<bind>\n                   (\\<lambda>x\\<^sub>\\<sigma>.\n                       local.etp.S \\<alpha> \\<bind>\n                       (\\<lambda>x.\n                           D2 (\\<sigma>, \\<alpha>,\n                               B \\<alpha> x\\<^sub>\\<sigma> \\<oplus>\n                               (if \\<sigma> then b1 else b0),\n                               B \\<alpha>\n                                (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                  x)) \\<bind>\n                           (\\<lambda>d.\n                               return_spmf\n                                (B \\<alpha>\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                    x) =\n                                 (if d\n                                  then B \\<alpha>\n  (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)\n                                  else \\<not> B \\<alpha>\n         (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)))))))\n          else I \\<bind>\n               (\\<lambda>(\\<alpha>, \\<tau>).\n                   local.etp.S \\<alpha> \\<bind>\n                   (\\<lambda>x\\<^sub>\\<sigma>.\n                       local.etp.S \\<alpha> \\<bind>\n                       (\\<lambda>x.\n                           D2 (\\<sigma>, \\<alpha>,\n                               B \\<alpha> x\\<^sub>\\<sigma> \\<oplus>\n                               (if \\<sigma> then b1 else b0),\n                               \\<not> B \\<alpha>\n (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)) \\<bind>\n                           (\\<lambda>d.\n                               return_spmf\n                                (B \\<alpha>\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                    x) =\n                                 (if d\n                                  then \\<not> B \\<alpha>\n         (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)\n                                  else \\<not> \\<not> B \\<alpha>\n                (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)))))))))\n     True", "apply(simp add: split_def cong: if_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (True, fst p, B (fst p) x = (\\<not> b1),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>b.\n           if b\n           then I \\<bind>\n                (\\<lambda>p.\n                    local.etp.S (fst p) \\<bind>\n                    (\\<lambda>x\\<^sub>\\<sigma>.\n                        local.etp.S (fst p) \\<bind>\n                        (\\<lambda>x.\n                            D2 (True, fst p,\n                                B (fst p) x\\<^sub>\\<sigma> = (\\<not> b1),\n                                B (fst p)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                   x)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst p)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p)\n                                     (snd p) x) =\n                                  (if d\n                                   then B (fst p)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)\n                                   else \\<not> B (fst p)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)))))))\n           else I \\<bind>\n                (\\<lambda>p.\n                    local.etp.S (fst p) \\<bind>\n                    (\\<lambda>x\\<^sub>\\<sigma>.\n                        local.etp.S (fst p) \\<bind>\n                        (\\<lambda>x.\n                            D2 (True, fst p,\n                                B (fst p) x\\<^sub>\\<sigma> = (\\<not> b1),\n                                \\<not> B (fst p)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst p)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p)\n                                     (snd p) x) =\n                                  (if d\n                                   then \\<not> B (fst p)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)\n                                   else B (fst p)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)))))))))\n      True) \\<and>\n    (\\<not> \\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>b.\n           if b\n           then I \\<bind>\n                (\\<lambda>p.\n                    local.etp.S (fst p) \\<bind>\n                    (\\<lambda>x\\<^sub>\\<sigma>.\n                        local.etp.S (fst p) \\<bind>\n                        (\\<lambda>x.\n                            D2 (False, fst p,\n                                B (fst p) x\\<^sub>\\<sigma> = (\\<not> b0),\n                                B (fst p)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                   x)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst p)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p)\n                                     (snd p) x) =\n                                  (if d\n                                   then B (fst p)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)\n                                   else \\<not> B (fst p)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)))))))\n           else I \\<bind>\n                (\\<lambda>p.\n                    local.etp.S (fst p) \\<bind>\n                    (\\<lambda>x\\<^sub>\\<sigma>.\n                        local.etp.S (fst p) \\<bind>\n                        (\\<lambda>x.\n                            D2 (False, fst p,\n                                B (fst p) x\\<^sub>\\<sigma> = (\\<not> b0),\n                                \\<not> B (fst p)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst p)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p)\n                                     (snd p) x) =\n                                  (if d\n                                   then \\<not> B (fst p)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)\n                                   else B (fst p)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)))))))))\n      True)", "supply [[simproc del: monad_normalisation]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (True, fst p, B (fst p) x = (\\<not> b1),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>b.\n           if b\n           then I \\<bind>\n                (\\<lambda>p.\n                    local.etp.S (fst p) \\<bind>\n                    (\\<lambda>x\\<^sub>\\<sigma>.\n                        local.etp.S (fst p) \\<bind>\n                        (\\<lambda>x.\n                            D2 (True, fst p,\n                                B (fst p) x\\<^sub>\\<sigma> = (\\<not> b1),\n                                B (fst p)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                   x)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst p)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p)\n                                     (snd p) x) =\n                                  (if d\n                                   then B (fst p)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)\n                                   else \\<not> B (fst p)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)))))))\n           else I \\<bind>\n                (\\<lambda>p.\n                    local.etp.S (fst p) \\<bind>\n                    (\\<lambda>x\\<^sub>\\<sigma>.\n                        local.etp.S (fst p) \\<bind>\n                        (\\<lambda>x.\n                            D2 (True, fst p,\n                                B (fst p) x\\<^sub>\\<sigma> = (\\<not> b1),\n                                \\<not> B (fst p)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst p)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p)\n                                     (snd p) x) =\n                                  (if d\n                                   then \\<not> B (fst p)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)\n                                   else B (fst p)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)))))))))\n      True) \\<and>\n    (\\<not> \\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>b.\n           if b\n           then I \\<bind>\n                (\\<lambda>p.\n                    local.etp.S (fst p) \\<bind>\n                    (\\<lambda>x\\<^sub>\\<sigma>.\n                        local.etp.S (fst p) \\<bind>\n                        (\\<lambda>x.\n                            D2 (False, fst p,\n                                B (fst p) x\\<^sub>\\<sigma> = (\\<not> b0),\n                                B (fst p)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                   x)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst p)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p)\n                                     (snd p) x) =\n                                  (if d\n                                   then B (fst p)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)\n                                   else \\<not> B (fst p)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)))))))\n           else I \\<bind>\n                (\\<lambda>p.\n                    local.etp.S (fst p) \\<bind>\n                    (\\<lambda>x\\<^sub>\\<sigma>.\n                        local.etp.S (fst p) \\<bind>\n                        (\\<lambda>x.\n                            D2 (False, fst p,\n                                B (fst p) x\\<^sub>\\<sigma> = (\\<not> b0),\n                                \\<not> B (fst p)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst p)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p)\n                                     (snd p) x) =\n                                  (if d\n                                   then \\<not> B (fst p)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)\n                                   else B (fst p)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p) x)))))))))\n      True)", "apply(subst if_distrib[where f = \"bind_spmf _\" for f, symmetric]; simp cong: bind_spmf_cong add: if_distribR )+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (True, fst p, B (fst p) x = (\\<not> b1),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>x.\n           I \\<bind>\n           (\\<lambda>xa.\n               local.etp.S (fst xa) \\<bind>\n               (\\<lambda>xb.\n                   local.etp.S (fst xa) \\<bind>\n                   (\\<lambda>xc.\n                       if x\n                       then D2 (True, fst xa, B (fst xa) xb = (\\<not> b1),\n                                B (fst xa)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                   (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                       else D2 (True, fst xa, B (fst xa) xb = (\\<not> b1),\n                                \\<not> B (fst xa)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)))))))))\n      True) \\<and>\n    (\\<not> \\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>x.\n           I \\<bind>\n           (\\<lambda>xa.\n               local.etp.S (fst xa) \\<bind>\n               (\\<lambda>xb.\n                   local.etp.S (fst xa) \\<bind>\n                   (\\<lambda>xc.\n                       if x\n                       then D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                B (fst xa)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                   (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                       else D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                \\<not> B (fst xa)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)))))))))\n      True)", "apply(rewrite in \"_ = \\<hole>\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (True, fst p, B (fst p) x = (\\<not> b1),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (I \\<bind>\n       (\\<lambda>y.\n           spmf_of_set (range Not) \\<bind>\n           (\\<lambda>x.\n               local.etp.S (fst y) \\<bind>\n               (\\<lambda>xa.\n                   local.etp.S (fst y) \\<bind>\n                   (\\<lambda>xb.\n                       if x\n                       then D2 (True, fst y, B (fst y) xa = (\\<not> b1),\n                                B (fst y)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                   xb)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) xb) =\n                                  (if d\n                                   then B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xb)\n                                   else \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xb))))\n                       else D2 (True, fst y, B (fst y) xa = (\\<not> b1),\n                                \\<not> B (fst y)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xb)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) xb) =\n                                  (if d\n                                   then \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xb)\n                                   else B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xb)))))))))\n      True) \\<and>\n    (\\<not> \\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>x.\n           I \\<bind>\n           (\\<lambda>xa.\n               local.etp.S (fst xa) \\<bind>\n               (\\<lambda>xb.\n                   local.etp.S (fst xa) \\<bind>\n                   (\\<lambda>xc.\n                       if x\n                       then D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                B (fst xa)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                   (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                       else D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                \\<not> B (fst xa)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)))))))))\n      True)", "apply(rewrite in \"bind_spmf _ \\<hole>\"  in \"_ = \\<hole>\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (True, fst p, B (fst p) x = (\\<not> b1),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (I \\<bind>\n       (\\<lambda>y.\n           local.etp.S (fst y) \\<bind>\n           (\\<lambda>ya.\n               spmf_of_set (range Not) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst y) \\<bind>\n                   (\\<lambda>xa.\n                       if x\n                       then D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                B (fst y)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                   xa)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) xa) =\n                                  (if d\n                                   then B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xa)\n                                   else \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xa))))\n                       else D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                \\<not> B (fst y)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xa)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) xa) =\n                                  (if d\n                                   then \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xa)\n                                   else B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xa)))))))))\n      True) \\<and>\n    (\\<not> \\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>x.\n           I \\<bind>\n           (\\<lambda>xa.\n               local.etp.S (fst xa) \\<bind>\n               (\\<lambda>xb.\n                   local.etp.S (fst xa) \\<bind>\n                   (\\<lambda>xc.\n                       if x\n                       then D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                B (fst xa)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                   (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                       else D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                \\<not> B (fst xa)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)))))))))\n      True)", "apply(rewrite in \"bind_spmf _ \\<hole>\" in \"bind_spmf _ \\<hole>\" in \"_ = \\<hole>\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (True, fst p, B (fst p) x = (\\<not> b1),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (I \\<bind>\n       (\\<lambda>y.\n           local.etp.S (fst y) \\<bind>\n           (\\<lambda>ya.\n               local.etp.S (fst y) \\<bind>\n               (\\<lambda>yb.\n                   spmf_of_set (range Not) \\<bind>\n                   (\\<lambda>x.\n                       if x\n                       then D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                B (fst y)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                   yb)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) yb) =\n                                  (if d\n                                   then B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)\n                                   else \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))\n                       else D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                \\<not> B (fst y)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) yb) =\n                                  (if d\n                                   then \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)\n                                   else B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)))))))))\n      True) \\<and>\n    (\\<not> \\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>x.\n           I \\<bind>\n           (\\<lambda>xa.\n               local.etp.S (fst xa) \\<bind>\n               (\\<lambda>xb.\n                   local.etp.S (fst xa) \\<bind>\n                   (\\<lambda>xc.\n                       if x\n                       then D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                B (fst xa)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                   (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                       else D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                \\<not> B (fst xa)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)))))))))\n      True)", "apply(rewrite in \"\\<hole> = _\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<longrightarrow>\n     spmf\n      (I \\<bind>\n       (\\<lambda>y.\n           coin_spmf \\<bind>\n           (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n               local.etp.S (fst y) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst y) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (True, fst y, B (fst y) x = (\\<not> b1),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst y)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (I \\<bind>\n       (\\<lambda>y.\n           local.etp.S (fst y) \\<bind>\n           (\\<lambda>ya.\n               local.etp.S (fst y) \\<bind>\n               (\\<lambda>yb.\n                   spmf_of_set (range Not) \\<bind>\n                   (\\<lambda>x.\n                       if x\n                       then D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                B (fst y)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                   yb)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) yb) =\n                                  (if d\n                                   then B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)\n                                   else \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))\n                       else D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                \\<not> B (fst y)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) yb) =\n                                  (if d\n                                   then \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)\n                                   else B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)))))))))\n      True) \\<and>\n    (\\<not> \\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>x.\n           I \\<bind>\n           (\\<lambda>xa.\n               local.etp.S (fst xa) \\<bind>\n               (\\<lambda>xb.\n                   local.etp.S (fst xa) \\<bind>\n                   (\\<lambda>xc.\n                       if x\n                       then D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                B (fst xa)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                   (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                       else D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                \\<not> B (fst xa)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)))))))))\n      True)", "apply(rewrite in \"bind_spmf _ \\<hole>\" in \"\\<hole> = _\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<longrightarrow>\n     spmf\n      (I \\<bind>\n       (\\<lambda>y.\n           local.etp.S (fst y) \\<bind>\n           (\\<lambda>ya.\n               coin_spmf \\<bind>\n               (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n                   local.etp.S (fst y) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst y)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (I \\<bind>\n       (\\<lambda>y.\n           local.etp.S (fst y) \\<bind>\n           (\\<lambda>ya.\n               local.etp.S (fst y) \\<bind>\n               (\\<lambda>yb.\n                   spmf_of_set (range Not) \\<bind>\n                   (\\<lambda>x.\n                       if x\n                       then D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                B (fst y)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                   yb)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) yb) =\n                                  (if d\n                                   then B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)\n                                   else \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))\n                       else D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                \\<not> B (fst y)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) yb) =\n                                  (if d\n                                   then \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)\n                                   else B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)))))))))\n      True) \\<and>\n    (\\<not> \\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>x.\n           I \\<bind>\n           (\\<lambda>xa.\n               local.etp.S (fst xa) \\<bind>\n               (\\<lambda>xb.\n                   local.etp.S (fst xa) \\<bind>\n                   (\\<lambda>xc.\n                       if x\n                       then D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                B (fst xa)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                   (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                       else D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                \\<not> B (fst xa)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)))))))))\n      True)", "apply(rewrite in \"bind_spmf _ \\<hole>\" in \"bind_spmf _ \\<hole>\" in \"\\<hole> = _\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<longrightarrow>\n     spmf\n      (I \\<bind>\n       (\\<lambda>y.\n           local.etp.S (fst y) \\<bind>\n           (\\<lambda>ya.\n               local.etp.S (fst y) \\<bind>\n               (\\<lambda>yb.\n                   coin_spmf \\<bind>\n                   (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n                       D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst y)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                yb) =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (I \\<bind>\n       (\\<lambda>y.\n           local.etp.S (fst y) \\<bind>\n           (\\<lambda>ya.\n               local.etp.S (fst y) \\<bind>\n               (\\<lambda>yb.\n                   spmf_of_set (range Not) \\<bind>\n                   (\\<lambda>x.\n                       if x\n                       then D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                B (fst y)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                   yb)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) yb) =\n                                  (if d\n                                   then B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)\n                                   else \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))\n                       else D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                \\<not> B (fst y)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) yb) =\n                                  (if d\n                                   then \\<not> B (fst y)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)\n                                   else B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)))))))))\n      True) \\<and>\n    (\\<not> \\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                           \\<beta>\\<^sub>\\<sigma>') \\<bind>\n                       (\\<lambda>d.\n                           return_spmf\n                            (B (fst p)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                                x') =\n                             (if d then \\<beta>\\<^sub>\\<sigma>'\n                              else \\<not> \\<beta>\\<^sub>\\<sigma>'))))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>x.\n           I \\<bind>\n           (\\<lambda>xa.\n               local.etp.S (fst xa) \\<bind>\n               (\\<lambda>xb.\n                   local.etp.S (fst xa) \\<bind>\n                   (\\<lambda>xc.\n                       if x\n                       then D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                B (fst xa)\n                                 (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                   (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                       else D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                \\<not> B (fst xa)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)) \\<bind>\n                            (\\<lambda>d.\n                                return_spmf\n                                 (B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc) =\n                                  (if d\n                                   then \\<not> B (fst xa)\n          (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                   else B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)))))))))\n      True)", "apply(fold map_spmf_conv_bind_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma> \\<longrightarrow>\n     spmf\n      (I \\<bind>\n       (\\<lambda>y.\n           local.etp.S (fst y) \\<bind>\n           (\\<lambda>ya.\n               local.etp.S (fst y) \\<bind>\n               (\\<lambda>yb.\n                   coin_spmf \\<bind>\n                   (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n                       map_spmf\n                        (\\<lambda>d.\n                            B (fst y)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                               yb) =\n                            (if d then \\<beta>\\<^sub>\\<sigma>'\n                             else \\<not> \\<beta>\\<^sub>\\<sigma>'))\n                        (D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                             \\<beta>\\<^sub>\\<sigma>')))))))\n      True =\n     spmf\n      (I \\<bind>\n       (\\<lambda>y.\n           local.etp.S (fst y) \\<bind>\n           (\\<lambda>ya.\n               local.etp.S (fst y) \\<bind>\n               (\\<lambda>yb.\n                   spmf_of_set (range Not) \\<bind>\n                   (\\<lambda>x.\n                       if x\n                       then map_spmf\n                             (\\<lambda>d.\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (if d\n                                  then B (fst y)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)\n                                  else \\<not> B (fst y)\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)))\n                             (D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                  B (fst y)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y)\n                                     (snd y) yb)))\n                       else map_spmf\n                             (\\<lambda>d.\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (if d\n                                  then \\<not> B (fst y)\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)\n                                  else B (fst y)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb)))\n                             (D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                  \\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))))))\n      True) \\<and>\n    (\\<not> \\<sigma> \\<longrightarrow>\n     spmf\n      (coin_spmf \\<bind>\n       (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n           I \\<bind>\n           (\\<lambda>p.\n               local.etp.S (fst p) \\<bind>\n               (\\<lambda>x.\n                   local.etp.S (fst p) \\<bind>\n                   (\\<lambda>x'.\n                       map_spmf\n                        (\\<lambda>d.\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            (if d then \\<beta>\\<^sub>\\<sigma>'\n                             else \\<not> \\<beta>\\<^sub>\\<sigma>'))\n                        (D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                             \\<beta>\\<^sub>\\<sigma>')))))))\n      True =\n     spmf\n      (spmf_of_set (range Not) \\<bind>\n       (\\<lambda>x.\n           I \\<bind>\n           (\\<lambda>xa.\n               local.etp.S (fst xa) \\<bind>\n               (\\<lambda>xb.\n                   local.etp.S (fst xa) \\<bind>\n                   (\\<lambda>xc.\n                       if x\n                       then map_spmf\n                             (\\<lambda>d.\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (if d\n                                  then B (fst xa)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                  else \\<not> B (fst xa)\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)))\n                             (D2 (False, fst xa,\n                                  B (fst xa) xb = (\\<not> b0),\n                                  B (fst xa)\n                                   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                     (snd xa) xc)))\n                       else map_spmf\n                             (\\<lambda>d.\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (if d\n                                  then \\<not> B (fst xa)\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)\n                                  else B (fst xa)\n  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc)))\n                             (D2 (False, fst xa,\n                                  B (fst xa) xb = (\\<not> b0),\n                                  \\<not> B (fst xa)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))))))\n      True)", "apply(rule conjI; rule impI; simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<sigma> \\<Longrightarrow>\n    spmf\n     (I \\<bind>\n      (\\<lambda>y.\n          local.etp.S (fst y) \\<bind>\n          (\\<lambda>ya.\n              local.etp.S (fst y) \\<bind>\n              (\\<lambda>yb.\n                  coin_spmf \\<bind>\n                  (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst y)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                               yb) =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst y)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                               yb) =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>y.\n          local.etp.S (fst y) \\<bind>\n          (\\<lambda>ya.\n              local.etp.S (fst y) \\<bind>\n              (\\<lambda>yb.\n                  spmf_of_set (range Not) \\<bind>\n                  (\\<lambda>x.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))\n                            (D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)))\n                            (D2 (True, fst y, B (fst y) ya = (\\<not> b1),\n                                 \\<not> B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))))))\n     True\n 2. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (coin_spmf \\<bind>\n      (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n          I \\<bind>\n          (\\<lambda>p.\n              local.etp.S (fst p) \\<bind>\n              (\\<lambda>x.\n                  local.etp.S (fst p) \\<bind>\n                  (\\<lambda>x'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (spmf_of_set (range Not) \\<bind>\n      (\\<lambda>x.\n          I \\<bind>\n          (\\<lambda>xa.\n              local.etp.S (fst xa) \\<bind>\n              (\\<lambda>xb.\n                  local.etp.S (fst xa) \\<bind>\n                  (\\<lambda>xc.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (\\<not> B (fst xa)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                            (D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (\\<not> B (fst xa)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)))\n                            (D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                 \\<not> B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))))))\n     True", "apply(simp only: spmf_bind)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<sigma> \\<Longrightarrow>\n    LINT x|measure_spmf I.\n       LINT xa|measure_spmf (local.etp.S (fst x)).\n          LINT xb|measure_spmf (local.etp.S (fst x)).\n             LINT xc|measure_spmf coin_spmf.\n                spmf\n                 (map_spmf\n                   (\\<lambda>d.\n                       (d \\<longrightarrow>\n                        B (fst x)\n                         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n                        xc) \\<and>\n                       (\\<not> d \\<longrightarrow>\n                        B (fst x)\n                         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n                        (\\<not> xc)))\n                   (D2 (True, fst x, B (fst x) xa = (\\<not> b1), xc)))\n                 True =\n    LINT x|measure_spmf I.\n       LINT xa|measure_spmf (local.etp.S (fst x)).\n          LINT xb|measure_spmf (local.etp.S (fst x)).\n             LINT xc|measure_spmf (spmf_of_set (range Not)).\n                spmf\n                 (if xc\n                  then map_spmf\n                        (\\<lambda>d.\n                            (d \\<longrightarrow>\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb) =\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb)) \\<and>\n                            (\\<not> d \\<longrightarrow>\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb) =\n                             (\\<not> B (fst x)\n(F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb))))\n                        (D2 (True, fst x, B (fst x) xa = (\\<not> b1),\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb)))\n                  else map_spmf\n                        (\\<lambda>d.\n                            (d \\<longrightarrow>\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb) =\n                             (\\<not> B (fst x)\n(F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb))) \\<and>\n                            (\\<not> d \\<longrightarrow>\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb) =\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb)))\n                        (D2 (True, fst x, B (fst x) xa = (\\<not> b1),\n                             \\<not> B (fst x)\n                                     (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x)\n (snd x) xb))))\n                 True\n 2. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (coin_spmf \\<bind>\n      (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n          I \\<bind>\n          (\\<lambda>p.\n              local.etp.S (fst p) \\<bind>\n              (\\<lambda>x.\n                  local.etp.S (fst p) \\<bind>\n                  (\\<lambda>x'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (spmf_of_set (range Not) \\<bind>\n      (\\<lambda>x.\n          I \\<bind>\n          (\\<lambda>xa.\n              local.etp.S (fst xa) \\<bind>\n              (\\<lambda>xb.\n                  local.etp.S (fst xa) \\<bind>\n                  (\\<lambda>xc.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (\\<not> B (fst xa)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                            (D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (\\<not> B (fst xa)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)))\n                            (D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                 \\<not> B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))))))\n     True", "apply(rule Bochner_Integration.integral_cong[OF refl])+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa xb.\n       \\<lbrakk>\\<sigma>; x \\<in> space (measure_spmf I);\n        xa \\<in> space (measure_spmf (local.etp.S (fst x)));\n        xb \\<in> space (measure_spmf (local.etp.S (fst x)))\\<rbrakk>\n       \\<Longrightarrow> LINT xc|measure_spmf coin_spmf.\n                            spmf\n                             (map_spmf\n                               (\\<lambda>d.\n                                   (d \\<longrightarrow>\n                                    B (fst x)\n                                     (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x)\n (snd x) xb) =\n                                    xc) \\<and>\n                                   (\\<not> d \\<longrightarrow>\n                                    B (fst x)\n                                     (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x)\n (snd x) xb) =\n                                    (\\<not> xc)))\n                               (D2 (True, fst x, B (fst x) xa = (\\<not> b1),\n                                    xc)))\n                             True =\n                         LINT xc|measure_spmf (spmf_of_set (range Not)).\n                            spmf\n                             (if xc\n                              then map_spmf\n                                    (\\<lambda>d.\n  (d \\<longrightarrow>\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb)) \\<and>\n  (\\<not> d \\<longrightarrow>\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n   (\\<not> B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb))))\n                                    (D2\n(True, fst x, B (fst x) xa = (\\<not> b1),\n B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb)))\n                              else map_spmf\n                                    (\\<lambda>d.\n  (d \\<longrightarrow>\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n   (\\<not> B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb))) \\<and>\n  (\\<not> d \\<longrightarrow>\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb)))\n                                    (D2\n(True, fst x, B (fst x) xa = (\\<not> b1),\n \\<not> B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb))))\n                             True\n 2. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (coin_spmf \\<bind>\n      (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n          I \\<bind>\n          (\\<lambda>p.\n              local.etp.S (fst p) \\<bind>\n              (\\<lambda>x.\n                  local.etp.S (fst p) \\<bind>\n                  (\\<lambda>x'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (spmf_of_set (range Not) \\<bind>\n      (\\<lambda>x.\n          I \\<bind>\n          (\\<lambda>xa.\n              local.etp.S (fst xa) \\<bind>\n              (\\<lambda>xb.\n                  local.etp.S (fst xa) \\<bind>\n                  (\\<lambda>xc.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (\\<not> B (fst xa)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                            (D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (\\<not> B (fst xa)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)))\n                            (D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                 \\<not> B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))))))\n     True", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b xa xb.\n       \\<lbrakk>\\<sigma>; (a, b) \\<in> space (measure_spmf I);\n        xa \\<in> space (measure_spmf (local.etp.S (fst (a, b))));\n        xb \\<in> space (measure_spmf (local.etp.S (fst (a, b))))\\<rbrakk>\n       \\<Longrightarrow> LINT x|measure_spmf coin_spmf.\n                            spmf\n                             (map_spmf\n                               (\\<lambda>d.\n                                   (d \\<longrightarrow>\n                                    B (fst (a, b))\n                                     (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b))\n (snd (a, b)) xb) =\n                                    x) \\<and>\n                                   (\\<not> d \\<longrightarrow>\n                                    B (fst (a, b))\n                                     (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b))\n (snd (a, b)) xb) =\n                                    (\\<not> x)))\n                               (D2 (True, fst (a, b),\n                                    B (fst (a, b)) xa = (\\<not> b1), x)))\n                             True =\n                         LINT x|measure_spmf (spmf_of_set (range Not)).\n                            spmf\n                             (if x\n                              then map_spmf\n                                    (\\<lambda>d.\n  (d \\<longrightarrow>\n   B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb) =\n   B (fst (a, b))\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb)) \\<and>\n  (\\<not> d \\<longrightarrow>\n   B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb) =\n   (\\<not> B (fst (a, b))\n            (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb))))\n                                    (D2\n(True, fst (a, b), B (fst (a, b)) xa = (\\<not> b1),\n B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb)))\n                              else map_spmf\n                                    (\\<lambda>d.\n  (d \\<longrightarrow>\n   B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb) =\n   (\\<not> B (fst (a, b))\n            (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b))\n              xb))) \\<and>\n  (\\<not> d \\<longrightarrow>\n   B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb) =\n   B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb)))\n                                    (D2\n(True, fst (a, b), B (fst (a, b)) xa = (\\<not> b1),\n \\<not> B (fst (a, b))\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb))))\n                             True\n 2. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (coin_spmf \\<bind>\n      (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n          I \\<bind>\n          (\\<lambda>p.\n              local.etp.S (fst p) \\<bind>\n              (\\<lambda>x.\n                  local.etp.S (fst p) \\<bind>\n                  (\\<lambda>x'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (spmf_of_set (range Not) \\<bind>\n      (\\<lambda>x.\n          I \\<bind>\n          (\\<lambda>xa.\n              local.etp.S (fst xa) \\<bind>\n              (\\<lambda>xb.\n                  local.etp.S (fst xa) \\<bind>\n                  (\\<lambda>xc.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (\\<not> B (fst xa)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                            (D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (\\<not> B (fst xa)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)))\n                            (D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                 \\<not> B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))))))\n     True", "subgoal for r r\\<^sub>\\<sigma> \\<alpha> \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma>; (r, r\\<^sub>\\<sigma>) \\<in> space (measure_spmf I);\n     \\<alpha>\n     \\<in> space (measure_spmf (local.etp.S (fst (r, r\\<^sub>\\<sigma>))));\n     \\<tau>\n     \\<in> space\n            (measure_spmf\n              (local.etp.S (fst (r, r\\<^sub>\\<sigma>))))\\<rbrakk>\n    \\<Longrightarrow> LINT x|measure_spmf coin_spmf.\n                         spmf\n                          (map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst (r, r\\<^sub>\\<sigma>))\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v\n                                    (fst (r, r\\<^sub>\\<sigma>))\n                                    (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n                                 x) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst (r, r\\<^sub>\\<sigma>))\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v\n                                    (fst (r, r\\<^sub>\\<sigma>))\n                                    (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n                                 (\\<not> x)))\n                            (D2 (True, fst (r, r\\<^sub>\\<sigma>),\n                                 B (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> =\n                                 (\\<not> b1),\n                                 x)))\n                          True =\n                      LINT x|measure_spmf (spmf_of_set (range Not)).\n                         spmf\n                          (if x\n                           then map_spmf\n                                 (\\<lambda>d.\n                                     (d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)) \\<and>\n                                     (\\<not> d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n(\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n           (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))))\n                                 (D2 (True, fst (r, r\\<^sub>\\<sigma>),\nB (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> = (\\<not> b1),\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)))\n                           else map_spmf\n                                 (\\<lambda>d.\n                                     (d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n(\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n           (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))) \\<and>\n                                     (\\<not> d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)))\n                                 (D2 (True, fst (r, r\\<^sub>\\<sigma>),\nB (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> = (\\<not> b1),\n\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n        (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n          (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))))\n                          True", "apply(simp only: UNIV_bool spmf_of_set integral_spmf_of_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma>; (r, r\\<^sub>\\<sigma>) \\<in> space (measure_spmf I);\n     \\<alpha>\n     \\<in> space (measure_spmf (local.etp.S (fst (r, r\\<^sub>\\<sigma>))));\n     \\<tau>\n     \\<in> space\n            (measure_spmf\n              (local.etp.S (fst (r, r\\<^sub>\\<sigma>))))\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>x\\<in>{False, True}.\n                         spmf\n                          (map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst (r, r\\<^sub>\\<sigma>))\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v\n                                    (fst (r, r\\<^sub>\\<sigma>))\n                                    (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n                                 x) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst (r, r\\<^sub>\\<sigma>))\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v\n                                    (fst (r, r\\<^sub>\\<sigma>))\n                                    (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n                                 (\\<not> x)))\n                            (D2 (True, fst (r, r\\<^sub>\\<sigma>),\n                                 B (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> =\n                                 (\\<not> b1),\n                                 x)))\n                          True) /\n                      real (card {False, True}) =\n                      (\\<Sum>x\\<in>Not ` {False, True}.\n                         spmf\n                          (if x\n                           then map_spmf\n                                 (\\<lambda>d.\n                                     (d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)) \\<and>\n                                     (\\<not> d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n(\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n           (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))))\n                                 (D2 (True, fst (r, r\\<^sub>\\<sigma>),\nB (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> = (\\<not> b1),\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)))\n                           else map_spmf\n                                 (\\<lambda>d.\n                                     (d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n(\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n           (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))) \\<and>\n                                     (\\<not> d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)))\n                                 (D2 (True, fst (r, r\\<^sub>\\<sigma>),\nB (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> = (\\<not> b1),\n\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n        (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n          (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))))\n                          True) /\n                      real (card (Not ` {False, True}))", "apply(simp cong: if_cong split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<sigma>; (r, r\\<^sub>\\<sigma>) \\<in> space (measure_spmf I);\n     \\<alpha> \\<in> space (measure_spmf (local.etp.S r));\n     \\<tau> \\<in> space (measure_spmf (local.etp.S r))\\<rbrakk>\n    \\<Longrightarrow> spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (True, r, B r \\<alpha> = (\\<not> b1), False)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (True, r, B r \\<alpha> = (\\<not> b1), True)))\n                       True *\n                      2 =\n                      spmf\n                       (D2 (True, r, B r \\<alpha> = (\\<not> b1),\n                            B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                  r\\<^sub>\\<sigma> \\<tau>)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf Not\n                         (D2 (True, r, B r \\<alpha> = (\\<not> b1),\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>))))\n                       True *\n                      2", "apply(cases \"B r (F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<sigma>; (r, r\\<^sub>\\<sigma>) \\<in> space (measure_spmf I);\n     \\<alpha> \\<in> space (measure_spmf (local.etp.S r));\n     \\<tau> \\<in> space (measure_spmf (local.etp.S r));\n     B r (F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)\\<rbrakk>\n    \\<Longrightarrow> spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (True, r, B r \\<alpha> = (\\<not> b1), False)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (True, r, B r \\<alpha> = (\\<not> b1), True)))\n                       True *\n                      2 =\n                      spmf\n                       (D2 (True, r, B r \\<alpha> = (\\<not> b1),\n                            B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                  r\\<^sub>\\<sigma> \\<tau>)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf Not\n                         (D2 (True, r, B r \\<alpha> = (\\<not> b1),\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>))))\n                       True *\n                      2\n 2. \\<lbrakk>\\<sigma>; (r, r\\<^sub>\\<sigma>) \\<in> space (measure_spmf I);\n     \\<alpha> \\<in> space (measure_spmf (local.etp.S r));\n     \\<tau> \\<in> space (measure_spmf (local.etp.S r));\n     \\<not> B r (F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma>\n                  \\<tau>)\\<rbrakk>\n    \\<Longrightarrow> spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (True, r, B r \\<alpha> = (\\<not> b1), False)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (True, r, B r \\<alpha> = (\\<not> b1), True)))\n                       True *\n                      2 =\n                      spmf\n                       (D2 (True, r, B r \\<alpha> = (\\<not> b1),\n                            B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                  r\\<^sub>\\<sigma> \\<tau>)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf Not\n                         (D2 (True, r, B r \\<alpha> = (\\<not> b1),\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>))))\n                       True *\n                      2", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (coin_spmf \\<bind>\n      (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n          I \\<bind>\n          (\\<lambda>p.\n              local.etp.S (fst p) \\<bind>\n              (\\<lambda>x.\n                  local.etp.S (fst p) \\<bind>\n                  (\\<lambda>x'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (spmf_of_set (range Not) \\<bind>\n      (\\<lambda>x.\n          I \\<bind>\n          (\\<lambda>xa.\n              local.etp.S (fst xa) \\<bind>\n              (\\<lambda>xb.\n                  local.etp.S (fst xa) \\<bind>\n                  (\\<lambda>xc.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (\\<not> B (fst xa)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))\n                            (D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 (\\<not> B (fst xa)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc) =\n                                 B (fst xa)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa)\n                                    (snd xa) xc)))\n                            (D2 (False, fst xa, B (fst xa) xb = (\\<not> b0),\n                                 \\<not> B (fst xa)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst xa) (snd xa) xc))))))))\n     True", "apply(rewrite in \"_ = \\<hole>\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (coin_spmf \\<bind>\n      (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n          I \\<bind>\n          (\\<lambda>p.\n              local.etp.S (fst p) \\<bind>\n              (\\<lambda>x.\n                  local.etp.S (fst p) \\<bind>\n                  (\\<lambda>x'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>y.\n          spmf_of_set (range Not) \\<bind>\n          (\\<lambda>x.\n              local.etp.S (fst y) \\<bind>\n              (\\<lambda>xa.\n                  local.etp.S (fst y) \\<bind>\n                  (\\<lambda>xb.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xb)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xb))))\n                            (D2 (False, fst y, B (fst y) xa = (\\<not> b0),\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xb)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xb))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xb)))\n                            (D2 (False, fst y, B (fst y) xa = (\\<not> b0),\n                                 \\<not> B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xb))))))))\n     True", "apply(rewrite in \"bind_spmf _ \\<hole>\"  in \"_ = \\<hole>\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (coin_spmf \\<bind>\n      (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n          I \\<bind>\n          (\\<lambda>p.\n              local.etp.S (fst p) \\<bind>\n              (\\<lambda>x.\n                  local.etp.S (fst p) \\<bind>\n                  (\\<lambda>x'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>y.\n          local.etp.S (fst y) \\<bind>\n          (\\<lambda>ya.\n              spmf_of_set (range Not) \\<bind>\n              (\\<lambda>x.\n                  local.etp.S (fst y) \\<bind>\n                  (\\<lambda>xa.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xa) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xa)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xa) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xa))))\n                            (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xa)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xa) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xa))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xa) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    xa)))\n                            (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                                 \\<not> B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) xa))))))))\n     True", "apply(rewrite in \"bind_spmf _ \\<hole>\" in \"bind_spmf _ \\<hole>\" in \"_ = \\<hole>\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (coin_spmf \\<bind>\n      (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n          I \\<bind>\n          (\\<lambda>p.\n              local.etp.S (fst p) \\<bind>\n              (\\<lambda>x.\n                  local.etp.S (fst p) \\<bind>\n                  (\\<lambda>x'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst p)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst p) (snd p)\n                               x') =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (False, fst p, B (fst p) x = (\\<not> b0),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>y.\n          local.etp.S (fst y) \\<bind>\n          (\\<lambda>ya.\n              local.etp.S (fst y) \\<bind>\n              (\\<lambda>yb.\n                  spmf_of_set (range Not) \\<bind>\n                  (\\<lambda>x.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))\n                            (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)))\n                            (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                                 \\<not> B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))))))\n     True", "apply(rewrite in \"\\<hole> = _\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (I \\<bind>\n      (\\<lambda>y.\n          coin_spmf \\<bind>\n          (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n              local.etp.S (fst y) \\<bind>\n              (\\<lambda>x.\n                  local.etp.S (fst y) \\<bind>\n                  (\\<lambda>x'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst y)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                               x') =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst y)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                               x') =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (False, fst y, B (fst y) x = (\\<not> b0),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>y.\n          local.etp.S (fst y) \\<bind>\n          (\\<lambda>ya.\n              local.etp.S (fst y) \\<bind>\n              (\\<lambda>yb.\n                  spmf_of_set (range Not) \\<bind>\n                  (\\<lambda>x.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))\n                            (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)))\n                            (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                                 \\<not> B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))))))\n     True", "apply(rewrite in \"bind_spmf _ \\<hole>\" in \"\\<hole> = _\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (I \\<bind>\n      (\\<lambda>y.\n          local.etp.S (fst y) \\<bind>\n          (\\<lambda>ya.\n              coin_spmf \\<bind>\n              (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n                  local.etp.S (fst y) \\<bind>\n                  (\\<lambda>x'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst y)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                               x') =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst y)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                               x') =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>y.\n          local.etp.S (fst y) \\<bind>\n          (\\<lambda>ya.\n              local.etp.S (fst y) \\<bind>\n              (\\<lambda>yb.\n                  spmf_of_set (range Not) \\<bind>\n                  (\\<lambda>x.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))\n                            (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)))\n                            (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                                 \\<not> B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))))))\n     True", "apply(rewrite in \"bind_spmf _ \\<hole>\" in \"bind_spmf _ \\<hole>\" in \"\\<hole> = _\" bind_commute_spmf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (I \\<bind>\n      (\\<lambda>y.\n          local.etp.S (fst y) \\<bind>\n          (\\<lambda>ya.\n              local.etp.S (fst y) \\<bind>\n              (\\<lambda>yb.\n                  coin_spmf \\<bind>\n                  (\\<lambda>\\<beta>\\<^sub>\\<sigma>'.\n                      map_spmf\n                       (\\<lambda>d.\n                           (d \\<longrightarrow>\n                            B (fst y)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                               yb) =\n                            \\<beta>\\<^sub>\\<sigma>') \\<and>\n                           (\\<not> d \\<longrightarrow>\n                            B (fst y)\n                             (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                               yb) =\n                            (\\<not> \\<beta>\\<^sub>\\<sigma>')))\n                       (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                            \\<beta>\\<^sub>\\<sigma>')))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>y.\n          local.etp.S (fst y) \\<bind>\n          (\\<lambda>ya.\n              local.etp.S (fst y) \\<bind>\n              (\\<lambda>yb.\n                  spmf_of_set (range Not) \\<bind>\n                  (\\<lambda>x.\n                      if x\n                      then map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))\n                            (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)))\n                      else map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 (\\<not> B (fst y)\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb) =\n                                 B (fst y)\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y)\n                                    yb)))\n                            (D2 (False, fst y, B (fst y) ya = (\\<not> b0),\n                                 \\<not> B (fst y)\n   (F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) yb))))))))\n     True", "apply(simp only: spmf_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow>\n    LINT x|measure_spmf I.\n       LINT xa|measure_spmf (local.etp.S (fst x)).\n          LINT xb|measure_spmf (local.etp.S (fst x)).\n             LINT xc|measure_spmf coin_spmf.\n                spmf\n                 (map_spmf\n                   (\\<lambda>d.\n                       (d \\<longrightarrow>\n                        B (fst x)\n                         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n                        xc) \\<and>\n                       (\\<not> d \\<longrightarrow>\n                        B (fst x)\n                         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n                        (\\<not> xc)))\n                   (D2 (False, fst x, B (fst x) xa = (\\<not> b0), xc)))\n                 True =\n    LINT x|measure_spmf I.\n       LINT xa|measure_spmf (local.etp.S (fst x)).\n          LINT xb|measure_spmf (local.etp.S (fst x)).\n             LINT xc|measure_spmf (spmf_of_set (range Not)).\n                spmf\n                 (if xc\n                  then map_spmf\n                        (\\<lambda>d.\n                            (d \\<longrightarrow>\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb) =\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb)) \\<and>\n                            (\\<not> d \\<longrightarrow>\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb) =\n                             (\\<not> B (fst x)\n(F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb))))\n                        (D2 (False, fst x, B (fst x) xa = (\\<not> b0),\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb)))\n                  else map_spmf\n                        (\\<lambda>d.\n                            (d \\<longrightarrow>\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb) =\n                             (\\<not> B (fst x)\n(F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb))) \\<and>\n                            (\\<not> d \\<longrightarrow>\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb) =\n                             B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb)))\n                        (D2 (False, fst x, B (fst x) xa = (\\<not> b0),\n                             \\<not> B (fst x)\n                                     (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x)\n (snd x) xb))))\n                 True", "apply(rule Bochner_Integration.integral_cong[OF refl])+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb.\n       \\<lbrakk>\\<not> \\<sigma>; x \\<in> space (measure_spmf I);\n        xa \\<in> space (measure_spmf (local.etp.S (fst x)));\n        xb \\<in> space (measure_spmf (local.etp.S (fst x)))\\<rbrakk>\n       \\<Longrightarrow> LINT xc|measure_spmf coin_spmf.\n                            spmf\n                             (map_spmf\n                               (\\<lambda>d.\n                                   (d \\<longrightarrow>\n                                    B (fst x)\n                                     (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x)\n (snd x) xb) =\n                                    xc) \\<and>\n                                   (\\<not> d \\<longrightarrow>\n                                    B (fst x)\n                                     (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x)\n (snd x) xb) =\n                                    (\\<not> xc)))\n                               (D2 (False, fst x,\n                                    B (fst x) xa = (\\<not> b0), xc)))\n                             True =\n                         LINT xc|measure_spmf (spmf_of_set (range Not)).\n                            spmf\n                             (if xc\n                              then map_spmf\n                                    (\\<lambda>d.\n  (d \\<longrightarrow>\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb)) \\<and>\n  (\\<not> d \\<longrightarrow>\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n   (\\<not> B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb))))\n                                    (D2\n(False, fst x, B (fst x) xa = (\\<not> b0),\n B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb)))\n                              else map_spmf\n                                    (\\<lambda>d.\n  (d \\<longrightarrow>\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n   (\\<not> B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb))) \\<and>\n  (\\<not> d \\<longrightarrow>\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n   B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb)))\n                                    (D2\n(False, fst x, B (fst x) xa = (\\<not> b0),\n \\<not> B (fst x) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb))))\n                             True", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b xa xb.\n       \\<lbrakk>\\<not> \\<sigma>; (a, b) \\<in> space (measure_spmf I);\n        xa \\<in> space (measure_spmf (local.etp.S (fst (a, b))));\n        xb \\<in> space (measure_spmf (local.etp.S (fst (a, b))))\\<rbrakk>\n       \\<Longrightarrow> LINT x|measure_spmf coin_spmf.\n                            spmf\n                             (map_spmf\n                               (\\<lambda>d.\n                                   (d \\<longrightarrow>\n                                    B (fst (a, b))\n                                     (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b))\n (snd (a, b)) xb) =\n                                    x) \\<and>\n                                   (\\<not> d \\<longrightarrow>\n                                    B (fst (a, b))\n                                     (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b))\n (snd (a, b)) xb) =\n                                    (\\<not> x)))\n                               (D2 (False, fst (a, b),\n                                    B (fst (a, b)) xa = (\\<not> b0), x)))\n                             True =\n                         LINT x|measure_spmf (spmf_of_set (range Not)).\n                            spmf\n                             (if x\n                              then map_spmf\n                                    (\\<lambda>d.\n  (d \\<longrightarrow>\n   B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb) =\n   B (fst (a, b))\n    (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb)) \\<and>\n  (\\<not> d \\<longrightarrow>\n   B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb) =\n   (\\<not> B (fst (a, b))\n            (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb))))\n                                    (D2\n(False, fst (a, b), B (fst (a, b)) xa = (\\<not> b0),\n B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb)))\n                              else map_spmf\n                                    (\\<lambda>d.\n  (d \\<longrightarrow>\n   B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb) =\n   (\\<not> B (fst (a, b))\n            (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b))\n              xb))) \\<and>\n  (\\<not> d \\<longrightarrow>\n   B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb) =\n   B (fst (a, b)) (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb)))\n                                    (D2\n(False, fst (a, b), B (fst (a, b)) xa = (\\<not> b0),\n \\<not> B (fst (a, b))\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (a, b)) (snd (a, b)) xb))))\n                             True", "subgoal for r r\\<^sub>\\<sigma> \\<alpha> \\<tau>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> \\<sigma>;\n     (r, r\\<^sub>\\<sigma>) \\<in> space (measure_spmf I);\n     \\<alpha>\n     \\<in> space (measure_spmf (local.etp.S (fst (r, r\\<^sub>\\<sigma>))));\n     \\<tau>\n     \\<in> space\n            (measure_spmf\n              (local.etp.S (fst (r, r\\<^sub>\\<sigma>))))\\<rbrakk>\n    \\<Longrightarrow> LINT x|measure_spmf coin_spmf.\n                         spmf\n                          (map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst (r, r\\<^sub>\\<sigma>))\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v\n                                    (fst (r, r\\<^sub>\\<sigma>))\n                                    (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n                                 x) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst (r, r\\<^sub>\\<sigma>))\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v\n                                    (fst (r, r\\<^sub>\\<sigma>))\n                                    (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n                                 (\\<not> x)))\n                            (D2 (False, fst (r, r\\<^sub>\\<sigma>),\n                                 B (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> =\n                                 (\\<not> b0),\n                                 x)))\n                          True =\n                      LINT x|measure_spmf (spmf_of_set (range Not)).\n                         spmf\n                          (if x\n                           then map_spmf\n                                 (\\<lambda>d.\n                                     (d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)) \\<and>\n                                     (\\<not> d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n(\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n           (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))))\n                                 (D2 (False, fst (r, r\\<^sub>\\<sigma>),\nB (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> = (\\<not> b0),\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)))\n                           else map_spmf\n                                 (\\<lambda>d.\n                                     (d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n(\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n           (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))) \\<and>\n                                     (\\<not> d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)))\n                                 (D2 (False, fst (r, r\\<^sub>\\<sigma>),\nB (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> = (\\<not> b0),\n\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n        (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n          (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))))\n                          True", "apply(simp only: UNIV_bool spmf_of_set integral_spmf_of_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> \\<sigma>;\n     (r, r\\<^sub>\\<sigma>) \\<in> space (measure_spmf I);\n     \\<alpha>\n     \\<in> space (measure_spmf (local.etp.S (fst (r, r\\<^sub>\\<sigma>))));\n     \\<tau>\n     \\<in> space\n            (measure_spmf\n              (local.etp.S (fst (r, r\\<^sub>\\<sigma>))))\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>x\\<in>{False, True}.\n                         spmf\n                          (map_spmf\n                            (\\<lambda>d.\n                                (d \\<longrightarrow>\n                                 B (fst (r, r\\<^sub>\\<sigma>))\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v\n                                    (fst (r, r\\<^sub>\\<sigma>))\n                                    (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n                                 x) \\<and>\n                                (\\<not> d \\<longrightarrow>\n                                 B (fst (r, r\\<^sub>\\<sigma>))\n                                  (F\\<^sub>i\\<^sub>n\\<^sub>v\n                                    (fst (r, r\\<^sub>\\<sigma>))\n                                    (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n                                 (\\<not> x)))\n                            (D2 (False, fst (r, r\\<^sub>\\<sigma>),\n                                 B (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> =\n                                 (\\<not> b0),\n                                 x)))\n                          True) /\n                      real (card {False, True}) =\n                      (\\<Sum>x\\<in>Not ` {False, True}.\n                         spmf\n                          (if x\n                           then map_spmf\n                                 (\\<lambda>d.\n                                     (d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)) \\<and>\n                                     (\\<not> d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n(\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n           (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))))\n                                 (D2 (False, fst (r, r\\<^sub>\\<sigma>),\nB (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> = (\\<not> b0),\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)))\n                           else map_spmf\n                                 (\\<lambda>d.\n                                     (d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\n(\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n         (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n           (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))) \\<and>\n                                     (\\<not> d \\<longrightarrow>\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>) =\nB (fst (r, r\\<^sub>\\<sigma>))\n (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n   (snd (r, r\\<^sub>\\<sigma>)) \\<tau>)))\n                                 (D2 (False, fst (r, r\\<^sub>\\<sigma>),\nB (fst (r, r\\<^sub>\\<sigma>)) \\<alpha> = (\\<not> b0),\n\\<not> B (fst (r, r\\<^sub>\\<sigma>))\n        (F\\<^sub>i\\<^sub>n\\<^sub>v (fst (r, r\\<^sub>\\<sigma>))\n          (snd (r, r\\<^sub>\\<sigma>)) \\<tau>))))\n                          True) /\n                      real (card (Not ` {False, True}))", "apply(simp cong: if_cong split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> \\<sigma>;\n     (r, r\\<^sub>\\<sigma>) \\<in> space (measure_spmf I);\n     \\<alpha> \\<in> space (measure_spmf (local.etp.S r));\n     \\<tau> \\<in> space (measure_spmf (local.etp.S r))\\<rbrakk>\n    \\<Longrightarrow> spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (False, r, B r \\<alpha> = (\\<not> b0), False)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (False, r, B r \\<alpha> = (\\<not> b0), True)))\n                       True *\n                      2 =\n                      spmf\n                       (D2 (False, r, B r \\<alpha> = (\\<not> b0),\n                            B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                  r\\<^sub>\\<sigma> \\<tau>)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf Not\n                         (D2 (False, r, B r \\<alpha> = (\\<not> b0),\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>))))\n                       True *\n                      2", "apply(cases \" B r (F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> \\<sigma>;\n     (r, r\\<^sub>\\<sigma>) \\<in> space (measure_spmf I);\n     \\<alpha> \\<in> space (measure_spmf (local.etp.S r));\n     \\<tau> \\<in> space (measure_spmf (local.etp.S r));\n     B r (F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)\\<rbrakk>\n    \\<Longrightarrow> spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (False, r, B r \\<alpha> = (\\<not> b0), False)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (False, r, B r \\<alpha> = (\\<not> b0), True)))\n                       True *\n                      2 =\n                      spmf\n                       (D2 (False, r, B r \\<alpha> = (\\<not> b0),\n                            B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                  r\\<^sub>\\<sigma> \\<tau>)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf Not\n                         (D2 (False, r, B r \\<alpha> = (\\<not> b0),\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>))))\n                       True *\n                      2\n 2. \\<lbrakk>\\<not> \\<sigma>;\n     (r, r\\<^sub>\\<sigma>) \\<in> space (measure_spmf I);\n     \\<alpha> \\<in> space (measure_spmf (local.etp.S r));\n     \\<tau> \\<in> space (measure_spmf (local.etp.S r));\n     \\<not> B r (F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma>\n                  \\<tau>)\\<rbrakk>\n    \\<Longrightarrow> spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (False, r, B r \\<alpha> = (\\<not> b0), False)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf\n                         (\\<lambda>d.\n                             (d \\<longrightarrow>\n                              B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                    r\\<^sub>\\<sigma> \\<tau>)) \\<and>\n                             (\\<not> d \\<longrightarrow>\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>)))\n                         (D2 (False, r, B r \\<alpha> = (\\<not> b0), True)))\n                       True *\n                      2 =\n                      spmf\n                       (D2 (False, r, B r \\<alpha> = (\\<not> b0),\n                            B r (F\\<^sub>i\\<^sub>n\\<^sub>v r\n                                  r\\<^sub>\\<sigma> \\<tau>)))\n                       True *\n                      2 +\n                      spmf\n                       (map_spmf Not\n                         (D2 (False, r, B r \\<alpha> = (\\<not> b0),\n                              \\<not> B r\n(F\\<^sub>i\\<^sub>n\\<^sub>v r r\\<^sub>\\<sigma> \\<tau>))))\n                       True *\n                      2", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  spmf (HCP_game_\\<A> \\<sigma> (if \\<sigma> then b1 else b0)) True =\n  spmf\n   (map_spmf Not coin_spmf \\<bind>\n    (\\<lambda>b.\n        if b then HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)\n        else HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)))\n   True\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "also"], ["proof (state)\nthis:\n  spmf (HCP_game_\\<A> \\<sigma> (if \\<sigma> then b1 else b0)) True =\n  spmf\n   (map_spmf Not coin_spmf \\<bind>\n    (\\<lambda>b.\n        if b then HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)\n        else HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)))\n   True\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "have \"... = 1/2*(spmf (HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)) True) + 1/2*(spmf (HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)) True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf\n     (map_spmf Not coin_spmf \\<bind>\n      (\\<lambda>b.\n          if b then HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)\n          else HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)))\n     True =\n    1 / 2 *\n    spmf (HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n    1 / 2 *\n    spmf (HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)) True", "by(simp add: spmf_bind UNIV_bool spmf_of_set integral_spmf_of_set)"], ["proof (state)\nthis:\n  spmf\n   (map_spmf Not coin_spmf \\<bind>\n    (\\<lambda>b.\n        if b then HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)\n        else HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)))\n   True =\n  1 / 2 * spmf (HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n  1 / 2 * spmf (HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)) True\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "also"], ["proof (state)\nthis:\n  spmf\n   (map_spmf Not coin_spmf \\<bind>\n    (\\<lambda>b.\n        if b then HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)\n        else HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)))\n   True =\n  1 / 2 * spmf (HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n  1 / 2 * spmf (HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)) True\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "have \"... = 1/2*(spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True) + 1/2*(spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / 2 *\n    spmf (HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n    1 / 2 *\n    spmf (HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)) True =\n    1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n    1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) False", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 / 2 *\n    spmf (HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n    1 / 2 *\n    spmf (HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)) True =\n    1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n    1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) False", "have \"spmf (I \\<bind> (\\<lambda>(\\<alpha>, \\<tau>). etp.S \\<alpha> \\<bind> (\\<lambda>x\\<^sub>\\<sigma>. etp.S \\<alpha> \\<bind> (\\<lambda>x. D2 (\\<sigma>, \\<alpha>, B \\<alpha> x\\<^sub>\\<sigma> = (\\<not> (if \\<sigma> then b1 else b0)), \\<not> B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)) \\<bind> (\\<lambda>d. return_spmf (\\<not> d)))))) True \n                = spmf (I \\<bind> (\\<lambda>(\\<alpha>, \\<tau>). etp.S \\<alpha> \\<bind> (\\<lambda>x\\<^sub>\\<sigma>. etp.S \\<alpha> \\<bind> (\\<lambda>x. D2 (\\<sigma>, \\<alpha>, B \\<alpha> x\\<^sub>\\<sigma> = (\\<not> (if \\<sigma> then b1 else b0)), \\<not> B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)))))) False\"\n          (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf\n     (I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>x\\<^sub>\\<sigma>.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>x.\n                  D2 (\\<sigma>, \\<alpha>,\n                      B \\<alpha> x\\<^sub>\\<sigma> =\n                      (\\<not> (if \\<sigma> then b1 else b0)),\n                      \\<not> B \\<alpha>\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                x)) \\<bind>\n                  (\\<lambda>d. return_spmf (\\<not> d))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>x\\<^sub>\\<sigma>.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>x.\n                  D2 (\\<sigma>, \\<alpha>,\n                      B \\<alpha> x\\<^sub>\\<sigma> =\n                      (\\<not> (if \\<sigma> then b1 else b0)),\n                      \\<not> B \\<alpha>\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                x))))))\n     False", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. spmf\n     (I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>x\\<^sub>\\<sigma>.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>x.\n                  D2 (\\<sigma>, \\<alpha>,\n                      B \\<alpha> x\\<^sub>\\<sigma> =\n                      (\\<not> (if \\<sigma> then b1 else b0)),\n                      \\<not> B \\<alpha>\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                x)) \\<bind>\n                  (\\<lambda>d. return_spmf (\\<not> d))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>x\\<^sub>\\<sigma>.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>x.\n                  D2 (\\<sigma>, \\<alpha>,\n                      B \\<alpha> x\\<^sub>\\<sigma> =\n                      (\\<not> (if \\<sigma> then b1 else b0)),\n                      \\<not> B \\<alpha>\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                x))))))\n     False", "have \"?lhs = spmf (I \\<bind> (\\<lambda>(\\<alpha>, \\<tau>). etp.S \\<alpha> \\<bind> (\\<lambda>x\\<^sub>\\<sigma>. etp.S \\<alpha> \\<bind> (\\<lambda>x. D2 (\\<sigma>, \\<alpha>, B \\<alpha> x\\<^sub>\\<sigma> = (\\<not> (if \\<sigma> then b1 else b0)), \\<not> B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x)) \\<bind> (\\<lambda>d. return_spmf (d)))))) False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf\n     (I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>x\\<^sub>\\<sigma>.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>x.\n                  D2 (\\<sigma>, \\<alpha>,\n                      B \\<alpha> x\\<^sub>\\<sigma> =\n                      (\\<not> (if \\<sigma> then b1 else b0)),\n                      \\<not> B \\<alpha>\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                x)) \\<bind>\n                  (\\<lambda>d. return_spmf (\\<not> d))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>x\\<^sub>\\<sigma>.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>x.\n                  D2 (\\<sigma>, \\<alpha>,\n                      B \\<alpha> x\\<^sub>\\<sigma> =\n                      (\\<not> (if \\<sigma> then b1 else b0)),\n                      \\<not> B \\<alpha>\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                x)) \\<bind>\n                  return_spmf))))\n     False", "by(simp only: split_def return_True_False spmf_bind)"], ["proof (state)\nthis:\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x)) \\<bind>\n                (\\<lambda>d. return_spmf (\\<not> d))))))\n   True =\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x)) \\<bind>\n                return_spmf))))\n   False\n\ngoal (1 subgoal):\n 1. spmf\n     (I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>x\\<^sub>\\<sigma>.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>x.\n                  D2 (\\<sigma>, \\<alpha>,\n                      B \\<alpha> x\\<^sub>\\<sigma> =\n                      (\\<not> (if \\<sigma> then b1 else b0)),\n                      \\<not> B \\<alpha>\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                x)) \\<bind>\n                  (\\<lambda>d. return_spmf (\\<not> d))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>x\\<^sub>\\<sigma>.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>x.\n                  D2 (\\<sigma>, \\<alpha>,\n                      B \\<alpha> x\\<^sub>\\<sigma> =\n                      (\\<not> (if \\<sigma> then b1 else b0)),\n                      \\<not> B \\<alpha>\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                x))))))\n     False", "then"], ["proof (chain)\npicking this:\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x)) \\<bind>\n                (\\<lambda>d. return_spmf (\\<not> d))))))\n   True =\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x)) \\<bind>\n                return_spmf))))\n   False", "show ?thesis"], ["proof (prove)\nusing this:\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x)) \\<bind>\n                (\\<lambda>d. return_spmf (\\<not> d))))))\n   True =\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x)) \\<bind>\n                return_spmf))))\n   False\n\ngoal (1 subgoal):\n 1. spmf\n     (I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>x\\<^sub>\\<sigma>.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>x.\n                  D2 (\\<sigma>, \\<alpha>,\n                      B \\<alpha> x\\<^sub>\\<sigma> =\n                      (\\<not> (if \\<sigma> then b1 else b0)),\n                      \\<not> B \\<alpha>\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                x)) \\<bind>\n                  (\\<lambda>d. return_spmf (\\<not> d))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>(\\<alpha>, \\<tau>).\n          local.etp.S \\<alpha> \\<bind>\n          (\\<lambda>x\\<^sub>\\<sigma>.\n              local.etp.S \\<alpha> \\<bind>\n              (\\<lambda>x.\n                  D2 (\\<sigma>, \\<alpha>,\n                      B \\<alpha> x\\<^sub>\\<sigma> =\n                      (\\<not> (if \\<sigma> then b1 else b0)),\n                      \\<not> B \\<alpha>\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                                x))))))\n     False", "by simp"], ["proof (state)\nthis:\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x)) \\<bind>\n                (\\<lambda>d. return_spmf (\\<not> d))))))\n   True =\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x))))))\n   False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x)) \\<bind>\n                (\\<lambda>d. return_spmf (\\<not> d))))))\n   True =\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x))))))\n   False\n\ngoal (1 subgoal):\n 1. 1 / 2 *\n    spmf (HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n    1 / 2 *\n    spmf (HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)) True =\n    1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n    1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) False", "then"], ["proof (chain)\npicking this:\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x)) \\<bind>\n                (\\<lambda>d. return_spmf (\\<not> d))))))\n   True =\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x))))))\n   False", "show ?thesis"], ["proof (prove)\nusing this:\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x)) \\<bind>\n                (\\<lambda>d. return_spmf (\\<not> d))))))\n   True =\n  spmf\n   (I \\<bind>\n    (\\<lambda>(\\<alpha>, \\<tau>).\n        local.etp.S \\<alpha> \\<bind>\n        (\\<lambda>x\\<^sub>\\<sigma>.\n            local.etp.S \\<alpha> \\<bind>\n            (\\<lambda>x.\n                D2 (\\<sigma>, \\<alpha>,\n                    B \\<alpha> x\\<^sub>\\<sigma> =\n                    (\\<not> (if \\<sigma> then b1 else b0)),\n                    \\<not> B \\<alpha>\n                            (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau>\n                              x))))))\n   False\n\ngoal (1 subgoal):\n 1. 1 / 2 *\n    spmf (HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n    1 / 2 *\n    spmf (HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)) True =\n    1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n    1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) False", "by(simp add: HCP_game_true_def HCP_game_false_def Let_def D_true_def D_false_def if_distrib[where f=\"(=) _\"] cong: if_cong)"], ["proof (state)\nthis:\n  1 / 2 * spmf (HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n  1 / 2 *\n  spmf (HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)) True =\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 / 2 * spmf (HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n  1 / 2 *\n  spmf (HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)) True =\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) False\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "also"], ["proof (state)\nthis:\n  1 / 2 * spmf (HCP_game_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n  1 / 2 *\n  spmf (HCP_game_false \\<sigma> (if \\<sigma> then b1 else b0)) True =\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) False\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "have \"... =  1/2*((spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0) ) True) + (1 - spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0) ) True))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n    1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) False =\n    1 / 2 *\n    (spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n     (1 - spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True))", "by(simp add: spmf_False_conv_True lossless_D_false)"], ["proof (state)\nthis:\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) False =\n  1 / 2 *\n  (spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n   (1 - spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True))\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "also"], ["proof (state)\nthis:\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) False =\n  1 / 2 *\n  (spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n   (1 - spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True))\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "have \"... = 1/2 + 1/2* (spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True) - 1/2*(spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / 2 *\n    (spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n     (1 - spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True)) =\n    1 / 2 +\n    1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True -\n    1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True", "by(simp)"], ["proof (state)\nthis:\n  1 / 2 *\n  (spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n   (1 - spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True)) =\n  1 / 2 +\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True -\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "also"], ["proof (state)\nthis:\n  1 / 2 *\n  (spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True +\n   (1 - spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True)) =\n  1 / 2 +\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True -\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "have \"... =  1/2 + 1/2* (spmf (S2D \\<sigma> (if \\<sigma> then b1 else b0) ) True) - 1/2*(spmf (R2D (b0,b1) \\<sigma> ) True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / 2 +\n    1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True -\n    1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True =\n    1 / 2 + 1 / 2 * spmf (S2D \\<sigma> (if \\<sigma> then b1 else b0)) True -\n    1 / 2 * spmf (R2D (b0, b1) \\<sigma>) True", "apply(auto  simp add: local.etp.F_f_inv S2D_def R2D_def D_true_def D_false_def  assms split_def cong: bind_spmf_cong_simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<sigma> \\<Longrightarrow>\n    spmf\n     (I \\<bind>\n      (\\<lambda>x.\n          local.etp.S (fst x) \\<bind>\n          (\\<lambda>xa.\n              local.etp.S (fst x) \\<bind>\n              (\\<lambda>xb.\n                  D2 (True, fst x, B (fst x) xa = (\\<not> b1),\n                      \\<not> B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>x.\n          local.etp.S (fst x) \\<bind>\n          (\\<lambda>xa.\n              local.etp.S (fst x) \\<bind>\n              (\\<lambda>xb.\n                  D2 (True, fst x, B (fst x) xa = (\\<not> b1),\n                      B (fst x)\n                       (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n                      (\\<not> b0))))))\n     True\n 2. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (I \\<bind>\n      (\\<lambda>x.\n          local.etp.S (fst x) \\<bind>\n          (\\<lambda>xa.\n              local.etp.S (fst x) \\<bind>\n              (\\<lambda>xb.\n                  D2 (False, fst x, B (fst x) xa = (\\<not> b0),\n                      \\<not> B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>x.\n          local.etp.S (fst x) \\<bind>\n          (\\<lambda>xa.\n              local.etp.S (fst x) \\<bind>\n              (\\<lambda>xb.\n                  D2 (False, fst x, B (fst x) xa = (\\<not> b0),\n                      B (fst x)\n                       (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n                      (\\<not> b1))))))\n     True", "apply(simp add: \\<sigma>_true_b0_true)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<sigma> \\<Longrightarrow>\n    spmf\n     (I \\<bind>\n      (\\<lambda>x.\n          local.etp.S (fst x) \\<bind>\n          (\\<lambda>xa.\n              local.etp.S (fst x) \\<bind>\n              (\\<lambda>xb.\n                  D2 (False, fst x, B (fst x) xa = (\\<not> b0),\n                      \\<not> B (fst x)\n                              (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x)\n                                xb))))))\n     True =\n    spmf\n     (I \\<bind>\n      (\\<lambda>x.\n          local.etp.S (fst x) \\<bind>\n          (\\<lambda>xa.\n              local.etp.S (fst x) \\<bind>\n              (\\<lambda>xb.\n                  D2 (False, fst x, B (fst x) xa = (\\<not> b0),\n                      B (fst x)\n                       (F\\<^sub>i\\<^sub>n\\<^sub>v (fst x) (snd x) xb) =\n                      (\\<not> b1))))))\n     True", "by(simp add: \\<sigma>_false_b1_true)"], ["proof (state)\nthis:\n  1 / 2 +\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True -\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True =\n  1 / 2 + 1 / 2 * spmf (S2D \\<sigma> (if \\<sigma> then b1 else b0)) True -\n  1 / 2 * spmf (R2D (b0, b1) \\<sigma>) True\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "ultimately"], ["proof (chain)\npicking this:\n  spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n   True =\n  1 / 2 +\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True -\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True\n  1 / 2 +\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True -\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True =\n  1 / 2 + 1 / 2 * spmf (S2D \\<sigma> (if \\<sigma> then b1 else b0)) True -\n  1 / 2 * spmf (R2D (b0, b1) \\<sigma>) True", "show ?thesis"], ["proof (prove)\nusing this:\n  spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n   True =\n  1 / 2 +\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True -\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True\n  1 / 2 +\n  1 / 2 * spmf (D_true \\<sigma> (if \\<sigma> then b1 else b0)) True -\n  1 / 2 * spmf (D_false \\<sigma> (if \\<sigma> then b1 else b0)) True =\n  1 / 2 + 1 / 2 * spmf (S2D \\<sigma> (if \\<sigma> then b1 else b0)) True -\n  1 / 2 * spmf (R2D (b0, b1) \\<sigma>) True\n\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n     True -\n    1 / 2 =\n    1 / 2 *\n    (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n     spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "by(simp add: S2D_def R2D_def R2_def S2_def split_def)"], ["proof (state)\nthis:\n  spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n   True -\n  1 / 2 =\n  1 / 2 *\n  (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n   spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n   True -\n  1 / 2 =\n  1 / 2 *\n  (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n   spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)\n\ngoal (1 subgoal):\n 1. spmf\n     (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n      (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n     True -\n    spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n    2 *\n    (spmf\n      (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n      True -\n     1 / 2)", "then"], ["proof (chain)\npicking this:\n  spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n   True -\n  1 / 2 =\n  1 / 2 *\n  (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n   spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)", "show ?thesis"], ["proof (prove)\nusing this:\n  spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n   True -\n  1 / 2 =\n  1 / 2 *\n  (spmf (S2 \\<sigma> (if \\<sigma> then b1 else b0) \\<bind> D2) True -\n   spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True)\n\ngoal (1 subgoal):\n 1. spmf\n     (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n      (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n     True -\n    spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n    2 *\n    (spmf\n      (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n      True -\n     1 / 2)", "by(auto simp add: funct_OT_12_def)"], ["proof (state)\nthis:\n  spmf\n   (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n    (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n   True -\n  spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n  2 *\n  (spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n    True -\n   1 / 2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  spmf\n   (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n    (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n   True -\n  spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n  2 *\n  (spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n    True -\n   1 / 2)\n\ngoal (1 subgoal):\n 1. \\<bar>spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True -\n          spmf\n           (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n           True\\<bar> =\n    \\<bar>2 *\n          (spmf\n            (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0)\n              D2)\n            True -\n           1 / 2)\\<bar>", "thus ?thesis"], ["proof (prove)\nusing this:\n  spmf\n   (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n    (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n   True -\n  spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True =\n  2 *\n  (spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2)\n    True -\n   1 / 2)\n\ngoal (1 subgoal):\n 1. \\<bar>spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True -\n          spmf\n           (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n           True\\<bar> =\n    \\<bar>2 *\n          (spmf\n            (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0)\n              D2)\n            True -\n           1 / 2)\\<bar>", "by simp"], ["proof (state)\nthis:\n  \\<bar>spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True -\n        spmf\n         (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n          (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n         True\\<bar> =\n  \\<bar>2 *\n        (spmf\n          (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0)\n            D2)\n          True -\n         1 / 2)\\<bar>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma P2_adv_bound:\n  assumes lossless_D: \"\\<forall> a. lossless_spmf (D2 a)\"\n  shows \"\\<bar>(spmf (bind_spmf (R2 (b0,b1) \\<sigma>) D2) True) - spmf (funct_OT_12 (b0,b1) \\<sigma> \\<bind> (\\<lambda> (out1, out2). S2 \\<sigma> out2 \\<bind> (\\<lambda> view. D2 view))) True\\<bar>\n                         \\<le> \\<bar>2*((spmf (etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D2) True) - 1/2)\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>spmf (R2 (b0, b1) \\<sigma> \\<bind> D2) True -\n          spmf\n           (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n            (\\<lambda>(out1, out2). S2 \\<sigma> out2 \\<bind> D2))\n           True\\<bar>\n    \\<le> \\<bar>2 *\n                (spmf\n                  (local.etp.HCP_game \\<A> \\<sigma>\n                    (if \\<sigma> then b1 else b0) D2)\n                  True -\n                 1 / 2)\\<bar>", "by(cases \"(if \\<sigma> then b0 else b1)\"; auto simp add: R2_S2_False R2_S2_True assms)"], ["", "sublocale OT_12: sim_det_def R1 S1 R2 S2 funct_OT_12 protocol"], ["proof (prove)\ngoal (1 subgoal):\n 1. sim_det_def R1 S1 R2 S2 funct_OT_12", "unfolding sim_det_def_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>m1 m2. lossless_spmf (R1 m1 m2)) \\<and>\n     (\\<forall>m1 out1. lossless_spmf (S1 m1 out1))) \\<and>\n    (\\<forall>m1 m2. lossless_spmf (R2 m1 m2)) \\<and>\n    (\\<forall>m2 out2. lossless_spmf (S2 m2 out2)) \\<and>\n    (\\<forall>m1 m2. lossless_spmf (funct_OT_12 m1 m2))", "by(simp add: lossless_R1 lossless_S1 lossless_R2 lossless_S2 funct_OT_12_def)"], ["", "lemma correct: \"OT_12.correctness m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OT_12.correctness m1 m2", "unfolding OT_12.correctness_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. protocol m1 m2 = funct_OT_12 m1 m2", "by (metis prod.collapse correctness)"], ["", "lemma P1_security_inf_the: \"OT_12.perfect_sec_P1 m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OT_12.perfect_sec_P1 m1 m2", "unfolding OT_12.perfect_sec_P1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R1 m1 m2 = funct_OT_12 m1 m2 \\<bind> (\\<lambda>(s1, s2). S1 m1 s1)", "using P1_security"], ["proof (prove)\nusing this:\n  R1 ?input\\<^sub>1 ?\\<sigma> =\n  funct_OT_12 ?x ?y \\<bind> (\\<lambda>(s1, s2). S1 ?input\\<^sub>1 s1)\n\ngoal (1 subgoal):\n 1. R1 m1 m2 = funct_OT_12 m1 m2 \\<bind> (\\<lambda>(s1, s2). S1 m1 s1)", "by simp"], ["", "lemma P2_security:\n  assumes \"\\<forall> a. lossless_spmf (D a)\"\n  and \"\\<forall> b\\<^sub>\\<sigma>. etp.HCP_adv \\<A> m2 b\\<^sub>\\<sigma> D \\<le> HCP_ad\"\n  shows \"OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad", "have \"spmf (etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D) True = spmf (funct_OT_12 (b0,b1) \\<sigma> \\<bind> (\\<lambda> (out1, out2). etp.HCP_game \\<A> \\<sigma> out2 D)) True\"\n    for \\<sigma> b0 b1"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf (local.etp.HCP_game \\<A> \\<sigma> (if \\<sigma> then b1 else b0) D)\n     True =\n    spmf\n     (funct_OT_12 (b0, b1) \\<sigma> \\<bind>\n      (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> \\<sigma> out2 D))\n     True", "by(simp add: funct_OT_12_def)"], ["proof (state)\nthis:\n  spmf\n   (local.etp.HCP_game \\<A> ?\\<sigma> (if ?\\<sigma> then ?b1.0 else ?b0.0)\n     D)\n   True =\n  spmf\n   (funct_OT_12 (?b0.0, ?b1.0) ?\\<sigma> \\<bind>\n    (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> ?\\<sigma> out2 D))\n   True\n\ngoal (1 subgoal):\n 1. OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad", "hence \"OT_12.adv_P2 m1 m2 D \\<le> \\<bar>2*((spmf (funct_OT_12 m1 m2 \\<bind> (\\<lambda> (out1, out2). etp.HCP_game \\<A> m2 out2 D)) True) - 1/2)\\<bar>\""], ["proof (prove)\nusing this:\n  spmf\n   (local.etp.HCP_game \\<A> ?\\<sigma> (if ?\\<sigma> then ?b1.0 else ?b0.0)\n     D)\n   True =\n  spmf\n   (funct_OT_12 (?b0.0, ?b1.0) ?\\<sigma> \\<bind>\n    (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> ?\\<sigma> out2 D))\n   True\n\ngoal (1 subgoal):\n 1. OT_12.adv_P2 m1 m2 D\n    \\<le> \\<bar>2 *\n                (spmf\n                  (funct_OT_12 m1 m2 \\<bind>\n                   (\\<lambda>(out1, out2).\n                       local.etp.HCP_game \\<A> m2 out2 D))\n                  True -\n                 1 / 2)\\<bar>", "unfolding OT_12.adv_P2_def"], ["proof (prove)\nusing this:\n  spmf\n   (local.etp.HCP_game \\<A> ?\\<sigma> (if ?\\<sigma> then ?b1.0 else ?b0.0)\n     D)\n   True =\n  spmf\n   (funct_OT_12 (?b0.0, ?b1.0) ?\\<sigma> \\<bind>\n    (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> ?\\<sigma> out2 D))\n   True\n\ngoal (1 subgoal):\n 1. \\<bar>spmf (R2 m1 m2 \\<bind> D) True -\n          spmf\n           (funct_OT_12 m1 m2 \\<bind>\n            (\\<lambda>(o1, o2). S2 m2 o2 \\<bind> D))\n           True\\<bar>\n    \\<le> \\<bar>2 *\n                (spmf\n                  (funct_OT_12 m1 m2 \\<bind>\n                   (\\<lambda>(out1, out2).\n                       local.etp.HCP_game \\<A> m2 out2 D))\n                  True -\n                 1 / 2)\\<bar>", "using P2_adv_bound assms surj_pair prod.collapse"], ["proof (prove)\nusing this:\n  spmf\n   (local.etp.HCP_game \\<A> ?\\<sigma> (if ?\\<sigma> then ?b1.0 else ?b0.0)\n     D)\n   True =\n  spmf\n   (funct_OT_12 (?b0.0, ?b1.0) ?\\<sigma> \\<bind>\n    (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> ?\\<sigma> out2 D))\n   True\n  \\<forall>a. lossless_spmf (?D2.0 a) \\<Longrightarrow>\n  \\<bar>spmf (R2 (?b0.0, ?b1.0) ?\\<sigma> \\<bind> ?D2.0) True -\n        spmf\n         (funct_OT_12 (?b0.0, ?b1.0) ?\\<sigma> \\<bind>\n          (\\<lambda>(out1, out2). S2 ?\\<sigma> out2 \\<bind> ?D2.0))\n         True\\<bar>\n  \\<le> \\<bar>2 *\n              (spmf\n                (local.etp.HCP_game \\<A> ?\\<sigma>\n                  (if ?\\<sigma> then ?b1.0 else ?b0.0) ?D2.0)\n                True -\n               1 / 2)\\<bar>\n  \\<forall>a. lossless_spmf (D a)\n  \\<forall>b\\<^sub>\\<sigma>.\n     local.etp.HCP_adv \\<A> m2 b\\<^sub>\\<sigma> D \\<le> HCP_ad\n  \\<exists>x y. ?p = (x, y)\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. \\<bar>spmf (R2 m1 m2 \\<bind> D) True -\n          spmf\n           (funct_OT_12 m1 m2 \\<bind>\n            (\\<lambda>(o1, o2). S2 m2 o2 \\<bind> D))\n           True\\<bar>\n    \\<le> \\<bar>2 *\n                (spmf\n                  (funct_OT_12 m1 m2 \\<bind>\n                   (\\<lambda>(out1, out2).\n                       local.etp.HCP_game \\<A> m2 out2 D))\n                  True -\n                 1 / 2)\\<bar>", "by metis"], ["proof (state)\nthis:\n  OT_12.adv_P2 m1 m2 D\n  \\<le> \\<bar>2 *\n              (spmf\n                (funct_OT_12 m1 m2 \\<bind>\n                 (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n                True -\n               1 / 2)\\<bar>\n\ngoal (1 subgoal):\n 1. OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad", "moreover"], ["proof (state)\nthis:\n  OT_12.adv_P2 m1 m2 D\n  \\<le> \\<bar>2 *\n              (spmf\n                (funct_OT_12 m1 m2 \\<bind>\n                 (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n                True -\n               1 / 2)\\<bar>\n\ngoal (1 subgoal):\n 1. OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad", "have \"\\<bar>2*((spmf (funct_OT_12 m1 m2 \\<bind> (\\<lambda> (out1, out2). etp.HCP_game \\<A> m2 out2 D)) True) - 1/2)\\<bar> \\<le> \\<bar>2*HCP_ad\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>2 *\n          (spmf\n            (funct_OT_12 m1 m2 \\<bind>\n             (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n            True -\n           1 / 2)\\<bar>\n    \\<le> \\<bar>2 * HCP_ad\\<bar>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>2 *\n          (spmf\n            (funct_OT_12 m1 m2 \\<bind>\n             (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n            True -\n           1 / 2)\\<bar>\n    \\<le> \\<bar>2 * HCP_ad\\<bar>", "have \"(\\<exists>r. \\<bar>(1::real) / r\\<bar> \\<noteq> 1 / \\<bar>r\\<bar>) \\<or> 2 / \\<bar>1 / (spmf (funct_OT_12 m1 m2 \n                \\<bind> (\\<lambda>(x, y). ((\\<lambda>u b. etp.HCP_game \\<A> m2 b D)::unit \\<Rightarrow> bool \\<Rightarrow> bool spmf) x y)) True - 1 / 2)\\<bar> \n                      \\<le> HCP_ad / (1 / 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r. \\<bar>1 / r\\<bar> \\<noteq> 1 / \\<bar>r\\<bar>) \\<or>\n    2 /\n    \\<bar>1 /\n          (spmf\n            (funct_OT_12 m1 m2 \\<bind>\n             (\\<lambda>(x, y). local.etp.HCP_game \\<A> m2 y D))\n            True -\n           1 / 2)\\<bar>\n    \\<le> HCP_ad / (1 / 2)", "using assm_bound_funct_OT_12_collapse assms"], ["proof (prove)\nusing this:\n  \\<forall>b\\<^sub>\\<sigma>.\n     local.etp.HCP_adv \\<A> ?\\<sigma> b\\<^sub>\\<sigma> ?D\n     \\<le> ?HCP_ad \\<Longrightarrow>\n  \\<bar>spmf\n         (funct_OT_12 ?m1.0 ?\\<sigma> \\<bind>\n          (\\<lambda>(out1, out2).\n              local.etp.HCP_game \\<A> ?\\<sigma> out2 ?D))\n         True -\n        1 / 2\\<bar>\n  \\<le> ?HCP_ad\n  \\<forall>a. lossless_spmf (D a)\n  \\<forall>b\\<^sub>\\<sigma>.\n     local.etp.HCP_adv \\<A> m2 b\\<^sub>\\<sigma> D \\<le> HCP_ad\n\ngoal (1 subgoal):\n 1. (\\<exists>r. \\<bar>1 / r\\<bar> \\<noteq> 1 / \\<bar>r\\<bar>) \\<or>\n    2 /\n    \\<bar>1 /\n          (spmf\n            (funct_OT_12 m1 m2 \\<bind>\n             (\\<lambda>(x, y). local.etp.HCP_game \\<A> m2 y D))\n            True -\n           1 / 2)\\<bar>\n    \\<le> HCP_ad / (1 / 2)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>r. \\<bar>1 / r\\<bar> \\<noteq> 1 / \\<bar>r\\<bar>) \\<or>\n  2 /\n  \\<bar>1 /\n        (spmf\n          (funct_OT_12 m1 m2 \\<bind>\n           (\\<lambda>(x, y). local.etp.HCP_game \\<A> m2 y D))\n          True -\n         1 / 2)\\<bar>\n  \\<le> HCP_ad / (1 / 2)\n\ngoal (1 subgoal):\n 1. \\<bar>2 *\n          (spmf\n            (funct_OT_12 m1 m2 \\<bind>\n             (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n            True -\n           1 / 2)\\<bar>\n    \\<le> \\<bar>2 * HCP_ad\\<bar>", "then"], ["proof (chain)\npicking this:\n  (\\<exists>r. \\<bar>1 / r\\<bar> \\<noteq> 1 / \\<bar>r\\<bar>) \\<or>\n  2 /\n  \\<bar>1 /\n        (spmf\n          (funct_OT_12 m1 m2 \\<bind>\n           (\\<lambda>(x, y). local.etp.HCP_game \\<A> m2 y D))\n          True -\n         1 / 2)\\<bar>\n  \\<le> HCP_ad / (1 / 2)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>r. \\<bar>1 / r\\<bar> \\<noteq> 1 / \\<bar>r\\<bar>) \\<or>\n  2 /\n  \\<bar>1 /\n        (spmf\n          (funct_OT_12 m1 m2 \\<bind>\n           (\\<lambda>(x, y). local.etp.HCP_game \\<A> m2 y D))\n          True -\n         1 / 2)\\<bar>\n  \\<le> HCP_ad / (1 / 2)\n\ngoal (1 subgoal):\n 1. \\<bar>2 *\n          (spmf\n            (funct_OT_12 m1 m2 \\<bind>\n             (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n            True -\n           1 / 2)\\<bar>\n    \\<le> \\<bar>2 * HCP_ad\\<bar>", "by fastforce"], ["proof (state)\nthis:\n  \\<bar>2 *\n        (spmf\n          (funct_OT_12 m1 m2 \\<bind>\n           (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n          True -\n         1 / 2)\\<bar>\n  \\<le> \\<bar>2 * HCP_ad\\<bar>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<bar>2 *\n        (spmf\n          (funct_OT_12 m1 m2 \\<bind>\n           (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n          True -\n         1 / 2)\\<bar>\n  \\<le> \\<bar>2 * HCP_ad\\<bar>\n\ngoal (1 subgoal):\n 1. OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad", "moreover"], ["proof (state)\nthis:\n  \\<bar>2 *\n        (spmf\n          (funct_OT_12 m1 m2 \\<bind>\n           (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n          True -\n         1 / 2)\\<bar>\n  \\<le> \\<bar>2 * HCP_ad\\<bar>\n\ngoal (1 subgoal):\n 1. OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad", "have \"HCP_ad \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> HCP_ad", "using assms(2)  local.etp.HCP_adv_def"], ["proof (prove)\nusing this:\n  \\<forall>b\\<^sub>\\<sigma>.\n     local.etp.HCP_adv \\<A> m2 b\\<^sub>\\<sigma> D \\<le> HCP_ad\n  local.etp.HCP_adv ?A ?\\<sigma> ?b\\<^sub>\\<sigma> ?D =\n  \\<bar>spmf (local.etp.HCP_game ?A ?\\<sigma> ?b\\<^sub>\\<sigma> ?D) True -\n        1 / 2\\<bar>\n\ngoal (1 subgoal):\n 1. 0 \\<le> HCP_ad", "by auto"], ["proof (state)\nthis:\n  0 \\<le> HCP_ad\n\ngoal (1 subgoal):\n 1. OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad", "ultimately"], ["proof (chain)\npicking this:\n  OT_12.adv_P2 m1 m2 D\n  \\<le> \\<bar>2 *\n              (spmf\n                (funct_OT_12 m1 m2 \\<bind>\n                 (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n                True -\n               1 / 2)\\<bar>\n  \\<bar>2 *\n        (spmf\n          (funct_OT_12 m1 m2 \\<bind>\n           (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n          True -\n         1 / 2)\\<bar>\n  \\<le> \\<bar>2 * HCP_ad\\<bar>\n  0 \\<le> HCP_ad", "show ?thesis"], ["proof (prove)\nusing this:\n  OT_12.adv_P2 m1 m2 D\n  \\<le> \\<bar>2 *\n              (spmf\n                (funct_OT_12 m1 m2 \\<bind>\n                 (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n                True -\n               1 / 2)\\<bar>\n  \\<bar>2 *\n        (spmf\n          (funct_OT_12 m1 m2 \\<bind>\n           (\\<lambda>(out1, out2). local.etp.HCP_game \\<A> m2 out2 D))\n          True -\n         1 / 2)\\<bar>\n  \\<le> \\<bar>2 * HCP_ad\\<bar>\n  0 \\<le> HCP_ad\n\ngoal (1 subgoal):\n 1. OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad", "by argo"], ["proof (state)\nthis:\n  OT_12.adv_P2 m1 m2 D \\<le> 2 * HCP_ad\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open> We also consider the asymptotic case for security proofs \\<close>"], ["", "locale ETP_sec_para = \n  fixes I :: \"nat \\<Rightarrow> ('index \\<times> 'trap) spmf\"\n    and domain ::  \"'index \\<Rightarrow> 'range set\"\n    and range ::  \"'index \\<Rightarrow> 'range set\"\n    and f :: \"'index \\<Rightarrow> ('range \\<Rightarrow> 'range)\"\n    and F :: \"'index \\<Rightarrow> 'range \\<Rightarrow> 'range\"\n    and F\\<^sub>i\\<^sub>n\\<^sub>v :: \"'index \\<Rightarrow> 'trap \\<Rightarrow> 'range \\<Rightarrow> 'range\"\n    and B :: \"'index \\<Rightarrow> 'range \\<Rightarrow> bool\"\n  assumes ETP_base: \"\\<And> n. ETP_base (I n) domain range F F\\<^sub>i\\<^sub>n\\<^sub>v\"\nbegin"], ["", "sublocale ETP_base \"(I n)\" domain range"], ["proof (prove)\ngoal (1 subgoal):\n 1. ETP_base (I n) domain range F F\\<^sub>i\\<^sub>n\\<^sub>v", "using ETP_base"], ["proof (prove)\nusing this:\n  ETP_base (I ?n) domain range F F\\<^sub>i\\<^sub>n\\<^sub>v\n\ngoal (1 subgoal):\n 1. ETP_base (I n) domain range F F\\<^sub>i\\<^sub>n\\<^sub>v", "by simp"], ["", "lemma correct_asym: \"OT_12.correctness n m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OT_12.correctness n m1 m2", "by(simp add: correct)"], ["", "lemma P1_sec_asym: \"OT_12.perfect_sec_P1 n m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OT_12.perfect_sec_P1 n m1 m2", "using P1_security_inf_the"], ["proof (prove)\nusing this:\n  OT_12.perfect_sec_P1 ?n ?m1.0 ?m2.0\n\ngoal (1 subgoal):\n 1. OT_12.perfect_sec_P1 n m1 m2", "by simp"], ["", "lemma P2_sec_asym: \n  assumes \"\\<forall> a. lossless_spmf (D a)\" \n    and HCP_adv_neg: \"negligible (\\<lambda> n. etp_advantage n)\"\n    and etp_adv_bound: \"\\<forall> b\\<^sub>\\<sigma> n. etp.HCP_adv n \\<A> m2 b\\<^sub>\\<sigma> D \\<le> etp_advantage n\"\n  shows \"negligible (\\<lambda> n. OT_12.adv_P2 n m1 m2 D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Negligible.negligible (\\<lambda>n. OT_12.adv_P2 n m1 m2 D)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. Negligible.negligible (\\<lambda>n. OT_12.adv_P2 n m1 m2 D)", "have \"negligible (\\<lambda> n. 2 * etp_advantage n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Negligible.negligible (\\<lambda>n. 2 * etp_advantage n)", "using HCP_adv_neg"], ["proof (prove)\nusing this:\n  Negligible.negligible etp_advantage\n\ngoal (1 subgoal):\n 1. Negligible.negligible (\\<lambda>n. 2 * etp_advantage n)", "by (simp add: negligible_cmultI)"], ["proof (state)\nthis:\n  Negligible.negligible (\\<lambda>n. 2 * etp_advantage n)\n\ngoal (1 subgoal):\n 1. Negligible.negligible (\\<lambda>n. OT_12.adv_P2 n m1 m2 D)", "moreover"], ["proof (state)\nthis:\n  Negligible.negligible (\\<lambda>n. 2 * etp_advantage n)\n\ngoal (1 subgoal):\n 1. Negligible.negligible (\\<lambda>n. OT_12.adv_P2 n m1 m2 D)", "have \"\\<bar>OT_12.adv_P2 n m1 m2 D\\<bar> = OT_12.adv_P2 n m1 m2 D\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>OT_12.adv_P2 n m1 m2 D\\<bar> = OT_12.adv_P2 n m1 m2 D", "unfolding OT_12.adv_P2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>\\<bar>spmf (R2 n m1 m2 \\<bind> D) True -\n                spmf\n                 (funct_OT_12 m1 m2 \\<bind>\n                  (\\<lambda>(o1, o2). S2 n m2 o2 \\<bind> D))\n                 True\\<bar>\\<bar> =\n    \\<bar>spmf (R2 n m1 m2 \\<bind> D) True -\n          spmf\n           (funct_OT_12 m1 m2 \\<bind>\n            (\\<lambda>(o1, o2). S2 n m2 o2 \\<bind> D))\n           True\\<bar>", "by simp"], ["proof (state)\nthis:\n  \\<bar>OT_12.adv_P2 ?n m1 m2 D\\<bar> = OT_12.adv_P2 ?n m1 m2 D\n\ngoal (1 subgoal):\n 1. Negligible.negligible (\\<lambda>n. OT_12.adv_P2 n m1 m2 D)", "moreover"], ["proof (state)\nthis:\n  \\<bar>OT_12.adv_P2 ?n m1 m2 D\\<bar> = OT_12.adv_P2 ?n m1 m2 D\n\ngoal (1 subgoal):\n 1. Negligible.negligible (\\<lambda>n. OT_12.adv_P2 n m1 m2 D)", "have  \"OT_12.adv_P2 n m1 m2 D \\<le> 2 * etp_advantage n\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. OT_12.adv_P2 n m1 m2 D \\<le> 2 * etp_advantage n", "using assms P2_security"], ["proof (prove)\nusing this:\n  \\<forall>a. lossless_spmf (D a)\n  Negligible.negligible etp_advantage\n  \\<forall>b\\<^sub>\\<sigma> n.\n     local.etp.HCP_adv n \\<A> m2 b\\<^sub>\\<sigma> D \\<le> etp_advantage n\n  \\<lbrakk>\\<forall>a. lossless_spmf (?D a);\n   \\<forall>b\\<^sub>\\<sigma>.\n      local.etp.HCP_adv ?n \\<A> ?m2.0 b\\<^sub>\\<sigma> ?D\n      \\<le> ?HCP_ad\\<rbrakk>\n  \\<Longrightarrow> OT_12.adv_P2 ?n ?m1.0 ?m2.0 ?D \\<le> 2 * ?HCP_ad\n\ngoal (1 subgoal):\n 1. OT_12.adv_P2 n m1 m2 D \\<le> 2 * etp_advantage n", "by blast"], ["proof (state)\nthis:\n  OT_12.adv_P2 ?n m1 m2 D \\<le> 2 * etp_advantage ?n\n\ngoal (1 subgoal):\n 1. Negligible.negligible (\\<lambda>n. OT_12.adv_P2 n m1 m2 D)", "ultimately"], ["proof (chain)\npicking this:\n  Negligible.negligible (\\<lambda>n. 2 * etp_advantage n)\n  \\<bar>OT_12.adv_P2 ?n m1 m2 D\\<bar> = OT_12.adv_P2 ?n m1 m2 D\n  OT_12.adv_P2 ?n m1 m2 D \\<le> 2 * etp_advantage ?n", "show ?thesis"], ["proof (prove)\nusing this:\n  Negligible.negligible (\\<lambda>n. 2 * etp_advantage n)\n  \\<bar>OT_12.adv_P2 ?n m1 m2 D\\<bar> = OT_12.adv_P2 ?n m1 m2 D\n  OT_12.adv_P2 ?n m1 m2 D \\<le> 2 * etp_advantage ?n\n\ngoal (1 subgoal):\n 1. Negligible.negligible (\\<lambda>n. OT_12.adv_P2 n m1 m2 D)", "using assms negligible_le HCP_adv_neg P2_security"], ["proof (prove)\nusing this:\n  Negligible.negligible (\\<lambda>n. 2 * etp_advantage n)\n  \\<bar>OT_12.adv_P2 ?n m1 m2 D\\<bar> = OT_12.adv_P2 ?n m1 m2 D\n  OT_12.adv_P2 ?n m1 m2 D \\<le> 2 * etp_advantage ?n\n  \\<forall>a. lossless_spmf (D a)\n  Negligible.negligible etp_advantage\n  \\<forall>b\\<^sub>\\<sigma> n.\n     local.etp.HCP_adv n \\<A> m2 b\\<^sub>\\<sigma> D \\<le> etp_advantage n\n  \\<lbrakk>Negligible.negligible ?g;\n   \\<And>\\<eta>. \\<bar>?f \\<eta>\\<bar> \\<le> ?g \\<eta>\\<rbrakk>\n  \\<Longrightarrow> Negligible.negligible ?f\n  Negligible.negligible etp_advantage\n  \\<lbrakk>\\<forall>a. lossless_spmf (?D a);\n   \\<forall>b\\<^sub>\\<sigma>.\n      local.etp.HCP_adv ?n \\<A> ?m2.0 b\\<^sub>\\<sigma> ?D\n      \\<le> ?HCP_ad\\<rbrakk>\n  \\<Longrightarrow> OT_12.adv_P2 ?n ?m1.0 ?m2.0 ?D \\<le> 2 * ?HCP_ad\n\ngoal (1 subgoal):\n 1. Negligible.negligible (\\<lambda>n. OT_12.adv_P2 n m1 m2 D)", "by presburger"], ["proof (state)\nthis:\n  Negligible.negligible (\\<lambda>n. OT_12.adv_P2 n m1 m2 D)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}