{"file_name": "/home/qj213/afp-2021-10-22/thys/Multi_Party_Computation/ETP.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Multi_Party_Computation", "problem_names": ["lemma lossless_S: \"y \\<in> set_spmf I \\<longrightarrow>  lossless_spmf (S (fst y))\"", "lemma set_spmf_S [simp]: \"y \\<in> set_spmf I \\<longrightarrow> set_spmf (S (fst y)) = range (fst y)\"", "lemma f_inj_on: \"y \\<in> set_spmf I \\<longrightarrow> inj_on (F (fst y)) (range (fst y))\"", "lemma range_f: \"y \\<in> set_spmf I \\<longrightarrow>  x \\<in> range (fst y) \\<longrightarrow> F (fst y) x \\<in> range (fst y)\"", "lemma f_inv_f [simp]: \"y \\<in> set_spmf I \\<longrightarrow> x \\<in> range (fst y) \\<longrightarrow> F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) (F (fst y) x) = x\"", "lemma f_inv_f' [simp]: \"y \\<in> set_spmf I \\<longrightarrow> x \\<in> range (fst y) \\<longrightarrow> Hilbert_Choice.inv_into (range (fst y)) (F (fst y)) (F (fst y) x) = x\"", "lemma B_F_inv_rewrite: \"(B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>') = (B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>') = m1)) = m1\"", "lemma uni_set_samp: \n  assumes \"y \\<in> set_spmf I\"\n  shows \"map_spmf (\\<lambda> x. F (fst y) x) (S (fst y)) = (S (fst y))\" \n(is \"?lhs = ?rhs\")"], "translations": [["", "lemma lossless_S: \"y \\<in> set_spmf I \\<longrightarrow>  lossless_spmf (S (fst y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> set_spmf I \\<longrightarrow> lossless_spmf (S (fst y))", "by(simp add: lossless_spmf_def S_def finite_range non_empty_range)"], ["", "lemma set_spmf_S [simp]: \"y \\<in> set_spmf I \\<longrightarrow> set_spmf (S (fst y)) = range (fst y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> set_spmf I \\<longrightarrow>\n    set_spmf (S (fst y)) = range (fst y)", "by (simp add: S_def finite_range)"], ["", "lemma f_inj_on: \"y \\<in> set_spmf I \\<longrightarrow> inj_on (F (fst y)) (range (fst y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> set_spmf I \\<longrightarrow> inj_on (F (fst y)) (range (fst y))", "by(metis bij_betw_def bij_betw dom_eq_ran bij_betw_def bij_betw dom_eq_ran)"], ["", "lemma range_f: \"y \\<in> set_spmf I \\<longrightarrow>  x \\<in> range (fst y) \\<longrightarrow> F (fst y) x \\<in> range (fst y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> set_spmf I \\<longrightarrow>\n    x \\<in> range (fst y) \\<longrightarrow> F (fst y) x \\<in> range (fst y)", "by (metis bij_betw bij_betw dom_eq_ran bij_betwE)"], ["", "lemma f_inv_f [simp]: \"y \\<in> set_spmf I \\<longrightarrow> x \\<in> range (fst y) \\<longrightarrow> F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) (F (fst y) x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> set_spmf I \\<longrightarrow>\n    x \\<in> range (fst y) \\<longrightarrow>\n    F\\<^sub>i\\<^sub>n\\<^sub>v (fst y) (snd y) (F (fst y) x) = x", "by (metis bij_betw bij_betw_inv_into_left dom_eq_ran F_f_inv)"], ["", "lemma f_inv_f' [simp]: \"y \\<in> set_spmf I \\<longrightarrow> x \\<in> range (fst y) \\<longrightarrow> Hilbert_Choice.inv_into (range (fst y)) (F (fst y)) (F (fst y) x) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> set_spmf I \\<longrightarrow>\n    x \\<in> range (fst y) \\<longrightarrow>\n    inv_into (range (fst y)) (F (fst y)) (F (fst y) x) = x", "by (metis bij_betw bij_betw_inv_into_left bij_betw dom_eq_ran)"], ["", "lemma B_F_inv_rewrite: \"(B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>') = (B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>') = m1)) = m1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (B \\<alpha>\n      (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>') =\n     (B \\<alpha>\n       (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> y\\<^sub>\\<sigma>') =\n      m1)) =\n    m1", "by auto"], ["", "lemma uni_set_samp: \n  assumes \"y \\<in> set_spmf I\"\n  shows \"map_spmf (\\<lambda> x. F (fst y) x) (S (fst y)) = (S (fst y))\" \n(is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_spmf (F (fst y)) (S (fst y)) = S (fst y)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. map_spmf (F (fst y)) (S (fst y)) = S (fst y)", "have rhs: \"?rhs = spmf_of_set (range (fst y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S (fst y) = spmf_of_set (range (fst y))", "unfolding S_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. spmf_of_set (range (fst y)) = spmf_of_set (range (fst y))", "by(simp)"], ["proof (state)\nthis:\n  S (fst y) = spmf_of_set (range (fst y))\n\ngoal (1 subgoal):\n 1. map_spmf (F (fst y)) (S (fst y)) = S (fst y)", "also"], ["proof (state)\nthis:\n  S (fst y) = spmf_of_set (range (fst y))\n\ngoal (1 subgoal):\n 1. map_spmf (F (fst y)) (S (fst y)) = S (fst y)", "have \"map_spmf (\\<lambda> x. F (fst y) x) (spmf_of_set (range (fst y))) = spmf_of_set ((\\<lambda> x. F (fst y) x) ` (range (fst y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_spmf (F (fst y)) (spmf_of_set (range (fst y))) =\n    spmf_of_set (F (fst y) ` range (fst y))", "using f_inj_on assms"], ["proof (prove)\nusing this:\n  ?y \\<in> set_spmf I \\<longrightarrow> inj_on (F (fst ?y)) (range (fst ?y))\n  y \\<in> set_spmf I\n\ngoal (1 subgoal):\n 1. map_spmf (F (fst y)) (spmf_of_set (range (fst y))) =\n    spmf_of_set (F (fst y) ` range (fst y))", "by (metis map_spmf_of_set_inj_on)"], ["proof (state)\nthis:\n  map_spmf (F (fst y)) (spmf_of_set (range (fst y))) =\n  spmf_of_set (F (fst y) ` range (fst y))\n\ngoal (1 subgoal):\n 1. map_spmf (F (fst y)) (S (fst y)) = S (fst y)", "also"], ["proof (state)\nthis:\n  map_spmf (F (fst y)) (spmf_of_set (range (fst y))) =\n  spmf_of_set (F (fst y) ` range (fst y))\n\ngoal (1 subgoal):\n 1. map_spmf (F (fst y)) (S (fst y)) = S (fst y)", "have \"(\\<lambda> x. F (fst y) x) ` (range (fst y)) = range (fst y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F (fst y) ` range (fst y) = range (fst y)", "apply(rule endo_inj_surj)"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite (range (fst y))\n 2. F (fst y) ` range (fst y) \\<subseteq> range (fst y)\n 3. inj_on (F (fst y)) (range (fst y))", "using bij_betw"], ["proof (prove)\nusing this:\n  ?y \\<in> set_spmf I \\<longrightarrow>\n  bij_betw (F (fst ?y)) (domain (fst ?y)) (range (fst ?y))\n\ngoal (3 subgoals):\n 1. finite (range (fst y))\n 2. F (fst y) ` range (fst y) \\<subseteq> range (fst y)\n 3. inj_on (F (fst y)) (range (fst y))", "by (auto simp add: bij_betw_def dom_eq_ran f_inj_on bij_betw finite_range assms)"], ["proof (state)\nthis:\n  F (fst y) ` range (fst y) = range (fst y)\n\ngoal (1 subgoal):\n 1. map_spmf (F (fst y)) (S (fst y)) = S (fst y)", "finally"], ["proof (chain)\npicking this:\n  map_spmf (F (fst y)) (S (fst y)) = spmf_of_set (range (fst y))", "show ?thesis"], ["proof (prove)\nusing this:\n  map_spmf (F (fst y)) (S (fst y)) = spmf_of_set (range (fst y))\n\ngoal (1 subgoal):\n 1. map_spmf (F (fst y)) (S (fst y)) = S (fst y)", "by(simp add: rhs)"], ["proof (state)\nthis:\n  map_spmf (F (fst y)) (S (fst y)) = S (fst y)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>We define the security property of the hard core predicate (HCP) using a game.\\<close>"], ["", "definition HCP_game :: \"('index,'range) advP2 \\<Rightarrow>  bool \\<Rightarrow> bool \\<Rightarrow> ('index,'range) dist2 \\<Rightarrow> bool spmf\"\n  where \"HCP_game A = (\\<lambda> \\<sigma> b\\<^sub>\\<sigma> D. do {\n    (\\<alpha>, \\<tau>) \\<leftarrow> I;\n    x \\<leftarrow> S \\<alpha>;\n    b' \\<leftarrow> A \\<alpha> \\<sigma> b\\<^sub>\\<sigma> D x;\n    let b = B \\<alpha> (F\\<^sub>i\\<^sub>n\\<^sub>v \\<alpha> \\<tau> x);\n    return_spmf (b = b')})\""], ["", "definition \"HCP_adv A \\<sigma> b\\<^sub>\\<sigma> D = \\<bar>((spmf (HCP_game A \\<sigma> b\\<^sub>\\<sigma> D) True) - 1/2)\\<bar>\""], ["", "end"], ["", "end"]]}