{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_System_Zoo/Vardi_Counterexample.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_System_Zoo", "problem_names": ["lemma Z_eq_Z': \"Z = Z'\"", "lemma False"], "translations": [["", "lemma Z_eq_Z': \"Z = Z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Z = Z'", "by transfer auto"], ["", "lemma False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "have [simp]: \"\\<And>x. pmf_of_set {(True, undefined), (False, undefined)} \\<noteq> return_pmf x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       pmf_of_set {(True, undefined), (False, undefined)} \\<noteq>\n       return_pmf x", "by (auto simp: pmf_eq_iff split: split_indicator)"], ["proof (state)\nthis:\n  pmf_of_set {(True, undefined), (False, undefined)} \\<noteq> return_pmf ?x\n\ngoal (1 subgoal):\n 1. False", "have [simp]: \"\\<And>x. binsert (True, undefined) (binsert (False, undefined) bempty) \\<noteq> bsingleton x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       binsert (True, undefined)\n        (binsert (False, undefined) bempty) \\<noteq>\n       bsingleton x", "unfolding bsingleton_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       binsert (True, undefined)\n        (binsert (False, undefined) bempty) \\<noteq>\n       binsert x bempty", "by transfer auto"], ["proof (state)\nthis:\n  binsert (True, undefined) (binsert (False, undefined) bempty) \\<noteq>\n  bsingleton ?x1\n\ngoal (1 subgoal):\n 1. False", "define R where \"R a b = b\" for a b :: bool"], ["proof (state)\nthis:\n  R ?a ?b = ?b\n\ngoal (1 subgoal):\n 1. False", "have \"rel_var R (=) X Z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_var R (=) X Z'", "unfolding R_def var.in_rel mem_Collect_eq subset_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       ((\\<forall>(a, b)\\<in>set1_var z. b) \\<and>\n        (\\<forall>(x, y)\\<in>set2_var z. x = y)) \\<and>\n       map_var fst fst z = X \\<and> map_var snd snd z = Z'", "apply (intro exI[of _ C])"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>(a, b)\\<in>set1_var C. b) \\<and>\n     (\\<forall>(x, y)\\<in>set2_var C. x = y)) \\<and>\n    map_var fst fst C = X \\<and> map_var snd snd C = Z'", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>(a, b)\n               \\<in>set1_var0\n                     (BPS (binsert ((True, True), undefined, undefined)\n                            (binsert ((False, True), undefined, undefined)\n                              bempty))).\n         b) \\<and>\n     (\\<forall>(x, y)\n               \\<in>set2_var0\n                     (BPS (binsert ((True, True), undefined, undefined)\n                            (binsert ((False, True), undefined, undefined)\n                              bempty))).\n         x = y)) \\<and>\n    map_var0 fst fst\n     (BPS (binsert ((True, True), undefined, undefined)\n            (binsert ((False, True), undefined, undefined) bempty))) \\<sim>\n    BPS (binsert (True, undefined)\n          (binsert (False, undefined) bempty)) \\<and>\n    map_var0 snd snd\n     (BPS (binsert ((True, True), undefined, undefined)\n            (binsert ((False, True), undefined, undefined) bempty))) \\<sim>\n    BPS (bsingleton (True, undefined))", "apply (auto simp: set_bset binsert.rep_eq fsts.simps snds.simps bempty.rep_eq bsingleton_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rel_var R (=) X Z'\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  rel_var R (=) X Z'\n\ngoal (1 subgoal):\n 1. False", "define S where \"S a b = a\" for a b :: bool"], ["proof (state)\nthis:\n  S ?a ?b = ?a\n\ngoal (1 subgoal):\n 1. False", "have \"rel_var S (=) Z Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_var S (=) Z Y", "unfolding S_def var.in_rel mem_Collect_eq subset_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z.\n       ((\\<forall>(a, b)\\<in>set1_var z. a) \\<and>\n        (\\<forall>(x, y)\\<in>set2_var z. x = y)) \\<and>\n       map_var fst fst z = Z \\<and> map_var snd snd z = Y", "apply (intro exI[of _ C'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>(a, b)\\<in>set1_var C'. a) \\<and>\n     (\\<forall>(x, y)\\<in>set2_var C'. x = y)) \\<and>\n    map_var fst fst C' = Z \\<and> map_var snd snd C' = Y", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>(a, b)\n               \\<in>set1_var0\n                     (PMF (map_pmf (\\<lambda>((a, b), c, d). ((a, c), b, d))\n                            (pair_pmf (return_pmf (True, undefined))\n                              (pmf_of_set\n                                {(True, undefined), (False, undefined)})))).\n         a) \\<and>\n     (\\<forall>(x, y)\n               \\<in>set2_var0\n                     (PMF (map_pmf (\\<lambda>((a, b), c, d). ((a, c), b, d))\n                            (pair_pmf (return_pmf (True, undefined))\n                              (pmf_of_set\n                                {(True, undefined), (False, undefined)})))).\n         x = y)) \\<and>\n    map_var0 fst fst\n     (PMF (map_pmf (\\<lambda>((a, b), c, d). ((a, c), b, d))\n            (pair_pmf (return_pmf (True, undefined))\n              (pmf_of_set {(True, undefined), (False, undefined)})))) \\<sim>\n    PMF (return_pmf (True, undefined)) \\<and>\n    map_var0 snd snd\n     (PMF (map_pmf (\\<lambda>((a, b), c, d). ((a, c), b, d))\n            (pair_pmf (return_pmf (True, undefined))\n              (pmf_of_set {(True, undefined), (False, undefined)})))) \\<sim>\n    PMF (pmf_of_set {(True, undefined), (False, undefined)})", "apply (auto simp: fsts.simps snds.simps pmf.map_comp comp_def split_beta map_fst_pair_pmf map_snd_pair_pmf)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rel_var S (=) Z Y\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  rel_var R (=) X Z'\n  rel_var S (=) Z Y", "have \"rel_var (R OO S) ((=) OO (=)) X Y\" (is \"rel_var ?R ?S X Y\")"], ["proof (prove)\nusing this:\n  rel_var R (=) X Z'\n  rel_var S (=) Z Y\n\ngoal (1 subgoal):\n 1. rel_var (R OO S) ((=) OO (=)) X Y", "unfolding var.rel_compp"], ["proof (prove)\nusing this:\n  rel_var R (=) X Z'\n  rel_var S (=) Z Y\n\ngoal (1 subgoal):\n 1. (rel_var R (=) OO rel_var S (=)) X Y", "unfolding Z_eq_Z'"], ["proof (prove)\nusing this:\n  rel_var R (=) X Z'\n  rel_var S (=) Z' Y\n\ngoal (1 subgoal):\n 1. (rel_var R (=) OO rel_var S (=)) X Y", "by blast"], ["proof (state)\nthis:\n  rel_var (R OO S) ((=) OO (=)) X Y\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  rel_var (R OO S) ((=) OO (=)) X Y\n\ngoal (1 subgoal):\n 1. False", "have \"\\<not> rel_var ?R ?S X Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> rel_var (R OO S) ((=) OO (=)) X Y", "unfolding var.in_rel mem_Collect_eq subset_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>z.\n       ((\\<forall>(x, y)\\<in>set1_var z. (R OO S) x y) \\<and>\n        (\\<forall>(x, y)\\<in>set2_var z. ((=) OO (=)) x y)) \\<and>\n       map_var fst fst z = X \\<and> map_var snd snd z = Y", "apply (auto simp: split_beta)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>map_var fst fst z = X;\n        \\<forall>x\\<in>set1_var z. (R OO S) (fst x) (snd x);\n        \\<forall>x\\<in>set2_var z. ((=) OO (=)) (fst x) (snd x);\n        map_var snd snd z = Y\\<rbrakk>\n       \\<Longrightarrow> False", "apply transfer'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z R S.\n       \\<lbrakk>map_var0 fst fst z \\<sim>\n                BPS (binsert (True, undefined)\n                      (binsert (False, undefined) bempty));\n        \\<forall>x\\<in>set1_var0 z. (R OO S) (fst x) (snd x);\n        \\<forall>x\\<in>set2_var0 z. ((=) OO (=)) (fst x) (snd x);\n        map_var0 snd snd z \\<sim>\n        PMF (pmf_of_set {(True, undefined), (False, undefined)})\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto elim!: var_eq.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z R S.\n       \\<lbrakk>\\<forall>x\\<in>set1_var0 z. (R OO S) (fst x) (snd x);\n        \\<forall>x\\<in>set2_var0 z. ((=) OO (=)) (fst x) (snd x);\n        BPS (binsert (True, undefined)\n              (binsert (False, undefined) bempty)) =\n        map_var0 fst fst z;\n        PMF (pmf_of_set {(True, undefined), (False, undefined)}) =\n        map_var0 snd snd z\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac [!] z)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z R S x1.\n       \\<lbrakk>\\<forall>x\\<in>set1_var0 z. (R OO S) (fst x) (snd x);\n        \\<forall>x\\<in>set2_var0 z. ((=) OO (=)) (fst x) (snd x);\n        BPS (binsert (True, undefined)\n              (binsert (False, undefined) bempty)) =\n        map_var0 fst fst z;\n        PMF (pmf_of_set {(True, undefined), (False, undefined)}) =\n        map_var0 snd snd z;\n        z = PMF x1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>z R S x2.\n       \\<lbrakk>\\<forall>x\\<in>set1_var0 z. (R OO S) (fst x) (snd x);\n        \\<forall>x\\<in>set2_var0 z. ((=) OO (=)) (fst x) (snd x);\n        BPS (binsert (True, undefined)\n              (binsert (False, undefined) bempty)) =\n        map_var0 fst fst z;\n        PMF (pmf_of_set {(True, undefined), (False, undefined)}) =\n        map_var0 snd snd z;\n        z = BPS x2\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto simp add: snds.simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<not> rel_var (R OO S) ((=) OO (=)) X Y\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  rel_var (R OO S) ((=) OO (=)) X Y\n  \\<not> rel_var (R OO S) ((=) OO (=)) X Y", "show False"], ["proof (prove)\nusing this:\n  rel_var (R OO S) ((=) OO (=)) X Y\n  \\<not> rel_var (R OO S) ((=) OO (=)) X Y\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}