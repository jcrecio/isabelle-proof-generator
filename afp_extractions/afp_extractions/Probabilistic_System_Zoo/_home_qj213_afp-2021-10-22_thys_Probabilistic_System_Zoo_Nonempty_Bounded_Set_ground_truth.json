{"file_name": "/home/qj213/afp-2021-10-22/thys/Probabilistic_System_Zoo/Nonempty_Bounded_Set.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Probabilistic_System_Zoo", "problem_names": ["lemma set_nebset_to_set_nebset: \"A \\<noteq> {} \\<Longrightarrow> |A| <o natLeq +c |UNIV :: 'k set| \\<Longrightarrow>\n  set_nebset (the_inv set_nebset A :: 'a set!['k]) = A\"", "lemma rel_nebset_aux_infinite:\n  fixes a :: \"'a set!['k]\" and b :: \"'b set!['k]\"\n  shows \"(\\<forall>t \\<in> set_nebset a. \\<exists>u \\<in> set_nebset b. R t u) \\<and> (\\<forall>u \\<in> set_nebset b. \\<exists>t \\<in> set_nebset a. R t u) \\<longleftrightarrow>\n   ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}} (map_nebset fst))\\<inverse>\\<inverse> OO\n    BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}} (map_nebset snd)) a b\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma map_nebset_nebinsert[simp]: \"map_nebset f (nebinsert x X) = nebinsert (f x) (map_nebset f X)\"", "lemma map_nebset_nebsingleton: \"map_nebset f (nebsingleton x) = nebsingleton (f x)\"", "lemma nebsingleton_inj[simp]: \"nebsingleton x = nebsingleton y \\<longleftrightarrow> x = y\"", "lemma rel_nebsingleton[simp]:\n  \"rel_nebset R (nebsingleton x1) (nebsingleton x2) = R x1 x2\"", "lemma rel_nebset_nebsingleton[simp]:\n  \"rel_nebset R (nebsingleton x1) X = (\\<forall>x2\\<in>set_nebset X. R x1 x2)\"\n  \"rel_nebset R X (nebsingleton x2) = (\\<forall>x1\\<in>set_nebset X. R x1 x2)\"", "lemma rel_nebset_False[simp]: \"rel_nebset (\\<lambda>x y. False) x y = False\"", "lemmas set_nebset_nebsingleton[simp] = nebsingleton.rep_eq", "lemma nebinsert_absorb[simp]: \"nebinsert a (nebinsert a x) = nebinsert a x\"", "lemma rel_bset_bset_of_nebset[simp]:\n  \"rel_bset R (bset_of_nebset X) (bset_of_nebset Y) = rel_nebset R X Y\"", "lemma rel_nebset_conj[simp]:\n  \"rel_nebset (\\<lambda>x y. P \\<and> Q x y) x y \\<longleftrightarrow> P \\<and> rel_nebset Q x y\"\n  \"rel_nebset (\\<lambda>x y. Q x y \\<and> P) x y \\<longleftrightarrow> P \\<and> rel_nebset Q x y\"", "lemma set_bset_empty[simp]: \"set_bset X = {} \\<longleftrightarrow> X = bempty\""], "translations": [["", "lemma set_nebset_to_set_nebset: \"A \\<noteq> {} \\<Longrightarrow> |A| <o natLeq +c |UNIV :: 'k set| \\<Longrightarrow>\n  set_nebset (the_inv set_nebset A :: 'a set!['k]) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; |A| <o natLeq +c |UNIV|\\<rbrakk>\n    \\<Longrightarrow> set_nebset (the_inv set_nebset A) = A", "apply (rule f_the_inv_into_f[unfolded inj_on_def])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>A \\<noteq> {}; |A| <o natLeq +c |UNIV|\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>UNIV.\n                         \\<forall>y\\<in>UNIV.\n                            set_nebset x = set_nebset y \\<longrightarrow>\n                            x = y\n 2. \\<lbrakk>A \\<noteq> {}; |A| <o natLeq +c |UNIV|\\<rbrakk>\n    \\<Longrightarrow> A \\<in> range set_nebset", "apply (simp add: set_nebset_inject range_eqI Abs_nebset_inverse[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; |A| <o natLeq +c |UNIV|\\<rbrakk>\n    \\<Longrightarrow> A \\<in> range set_nebset", "apply (rule range_eqI Abs_nebset_inverse[symmetric] CollectI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; |A| <o natLeq +c |UNIV|\\<rbrakk>\n    \\<Longrightarrow> A \\<noteq> {} \\<and> |A| <o natLeq +c |UNIV|", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rel_nebset_aux_infinite:\n  fixes a :: \"'a set!['k]\" and b :: \"'b set!['k]\"\n  shows \"(\\<forall>t \\<in> set_nebset a. \\<exists>u \\<in> set_nebset b. R t u) \\<and> (\\<forall>u \\<in> set_nebset b. \\<exists>t \\<in> set_nebset a. R t u) \\<longleftrightarrow>\n   ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}} (map_nebset fst))\\<inverse>\\<inverse> OO\n    BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}} (map_nebset snd)) a b\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>t\\<in>set_nebset a.\n         \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n     (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)) =\n    ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b.\n        \\<exists>t\\<in>set_nebset a. R t u) \\<Longrightarrow>\n    ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b\n 2. ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b \\<Longrightarrow>\n    (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "assume ?L"], ["proof (state)\nthis:\n  (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n  (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)\n\ngoal (2 subgoals):\n 1. (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b.\n        \\<exists>t\\<in>set_nebset a. R t u) \\<Longrightarrow>\n    ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b\n 2. ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b \\<Longrightarrow>\n    (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "define R' :: \"('a \\<times> 'b) set!['k]\"\n    where \"R' = the_inv set_nebset (Collect (case_prod R) \\<inter> (set_nebset a \\<times> set_nebset b))\"\n    (is \"_ = the_inv set_nebset ?L'\")"], ["proof (state)\nthis:\n  R' =\n  the_inv set_nebset\n   ({(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b)\n\ngoal (2 subgoals):\n 1. (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b.\n        \\<exists>t\\<in>set_nebset a. R t u) \\<Longrightarrow>\n    ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b\n 2. ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b \\<Longrightarrow>\n    (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "from \\<open>?L\\<close>"], ["proof (chain)\npicking this:\n  (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n  (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "have \"?L' \\<noteq> {}\""], ["proof (prove)\nusing this:\n  (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n  (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)\n\ngoal (1 subgoal):\n 1. {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b \\<noteq> {}", "by transfer auto"], ["proof (state)\nthis:\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b \\<noteq> {}\n\ngoal (2 subgoals):\n 1. (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b.\n        \\<exists>t\\<in>set_nebset a. R t u) \\<Longrightarrow>\n    ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b\n 2. ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b \\<Longrightarrow>\n    (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "moreover"], ["proof (state)\nthis:\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b \\<noteq> {}\n\ngoal (2 subgoals):\n 1. (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b.\n        \\<exists>t\\<in>set_nebset a. R t u) \\<Longrightarrow>\n    ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b\n 2. ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b \\<Longrightarrow>\n    (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "have \"|?L'| <o natLeq +c |UNIV :: 'k set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |{(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b| <o\n    natLeq +c |UNIV|", "unfolding csum_def Field_natLeq"], ["proof (prove)\ngoal (1 subgoal):\n 1. |{(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b| <o\n    |UNIV <+> Field |UNIV||", "by (intro ordLeq_ordLess_trans[OF card_of_mono1[OF Int_lower2]]\n      card_of_Times_ordLess_infinite)\n      (simp, (transfer, simp add: csum_def Field_natLeq)+)"], ["proof (state)\nthis:\n  |{(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b| <o\n  natLeq +c |UNIV|\n\ngoal (2 subgoals):\n 1. (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b.\n        \\<exists>t\\<in>set_nebset a. R t u) \\<Longrightarrow>\n    ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b\n 2. ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b \\<Longrightarrow>\n    (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "ultimately"], ["proof (chain)\npicking this:\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b \\<noteq> {}\n  |{(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b| <o\n  natLeq +c |UNIV|", "have *: \"set_nebset R' = ?L'\""], ["proof (prove)\nusing this:\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b \\<noteq> {}\n  |{(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b| <o\n  natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. set_nebset R' =\n    {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b", "unfolding R'_def"], ["proof (prove)\nusing this:\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b \\<noteq> {}\n  |{(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b| <o\n  natLeq +c |UNIV|\n\ngoal (1 subgoal):\n 1. set_nebset\n     (the_inv set_nebset\n       ({(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b)) =\n    {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b", "by (intro set_nebset_to_set_nebset)"], ["proof (state)\nthis:\n  set_nebset R' =\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b\n\ngoal (2 subgoals):\n 1. (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b.\n        \\<exists>t\\<in>set_nebset a. R t u) \\<Longrightarrow>\n    ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b\n 2. ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b \\<Longrightarrow>\n    (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b", "unfolding Grp_def relcompp.simps conversep.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>aa ba c.\n       a = aa \\<and>\n       b = c \\<and>\n       (\\<exists>a b.\n           aa = b \\<and>\n           ba = a \\<and>\n           b = map_nebset fst a \\<and>\n           a \\<in> {a. set_nebset a \\<subseteq> {(x, y). R x y}}) \\<and>\n       c = map_nebset snd ba \\<and>\n       ba \\<in> {a. set_nebset a \\<subseteq> {(x, y). R x y}}", "proof (intro CollectI case_prodI exI[of _ a] exI[of _ b] exI[of _ R'] conjI refl)"], ["proof (state)\ngoal (4 subgoals):\n 1. a = map_nebset fst R'\n 2. set_nebset R' \\<subseteq> {(x, y). R x y}\n 3. b = map_nebset snd R'\n 4. set_nebset R' \\<subseteq> {(x, y). R x y}", "from *"], ["proof (chain)\npicking this:\n  set_nebset R' =\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b", "show \"a = map_nebset fst R'\""], ["proof (prove)\nusing this:\n  set_nebset R' =\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b\n\ngoal (1 subgoal):\n 1. a = map_nebset fst R'", "using conjunct1[OF \\<open>?L\\<close>]"], ["proof (prove)\nusing this:\n  set_nebset R' =\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b\n  \\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u\n\ngoal (1 subgoal):\n 1. a = map_nebset fst R'", "by (transfer, auto simp add: image_def Int_def split: prod.splits)"], ["proof (state)\nthis:\n  a = map_nebset fst R'\n\ngoal (3 subgoals):\n 1. set_nebset R' \\<subseteq> {(x, y). R x y}\n 2. b = map_nebset snd R'\n 3. set_nebset R' \\<subseteq> {(x, y). R x y}", "from *"], ["proof (chain)\npicking this:\n  set_nebset R' =\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b", "show \"b = map_nebset snd R'\""], ["proof (prove)\nusing this:\n  set_nebset R' =\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b\n\ngoal (1 subgoal):\n 1. b = map_nebset snd R'", "using conjunct2[OF \\<open>?L\\<close>]"], ["proof (prove)\nusing this:\n  set_nebset R' =\n  {(x, y). R x y} \\<inter> set_nebset a \\<times> set_nebset b\n  \\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u\n\ngoal (1 subgoal):\n 1. b = map_nebset snd R'", "by (transfer, auto simp add: image_def Int_def split: prod.splits)"], ["proof (state)\nthis:\n  b = map_nebset snd R'\n\ngoal (2 subgoals):\n 1. set_nebset R' \\<subseteq> {(x, y). R x y}\n 2. set_nebset R' \\<subseteq> {(x, y). R x y}", "qed (auto simp add: *)"], ["proof (state)\nthis:\n  ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n     (map_nebset fst))\\<inverse>\\<inverse> OO\n   BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n    (map_nebset snd))\n   a b\n\ngoal (1 subgoal):\n 1. ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b \\<Longrightarrow>\n    (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b \\<Longrightarrow>\n    (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "assume ?R"], ["proof (state)\nthis:\n  ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n     (map_nebset fst))\\<inverse>\\<inverse> OO\n   BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n    (map_nebset snd))\n   a b\n\ngoal (1 subgoal):\n 1. ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n       (map_nebset fst))\\<inverse>\\<inverse> OO\n     BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n      (map_nebset snd))\n     a b \\<Longrightarrow>\n    (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "thus ?L"], ["proof (prove)\nusing this:\n  ((BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n     (map_nebset fst))\\<inverse>\\<inverse> OO\n   BNF_Def.Grp {a. set_nebset a \\<subseteq> {(a, b). R a b}}\n    (map_nebset snd))\n   a b\n\ngoal (1 subgoal):\n 1. (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "unfolding Grp_def relcompp.simps conversep.simps"], ["proof (prove)\nusing this:\n  \\<exists>aa ba c.\n     a = aa \\<and>\n     b = c \\<and>\n     (\\<exists>a b.\n         aa = b \\<and>\n         ba = a \\<and>\n         b = map_nebset fst a \\<and>\n         a \\<in> {a. set_nebset a \\<subseteq> {(x, y). R x y}}) \\<and>\n     c = map_nebset snd ba \\<and>\n     ba \\<in> {a. set_nebset a \\<subseteq> {(x, y). R x y}}\n\ngoal (1 subgoal):\n 1. (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n    (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)", "by transfer force"], ["proof (state)\nthis:\n  (\\<forall>t\\<in>set_nebset a. \\<exists>u\\<in>set_nebset b. R t u) \\<and>\n  (\\<forall>u\\<in>set_nebset b. \\<exists>t\\<in>set_nebset a. R t u)\n\ngoal:\nNo subgoals!", "qed"], ["", "bnf \"'a set!['k]\"\n  map: map_nebset\n  sets: set_nebset\n  bd: \"natLeq +c |UNIV :: 'k set|\"\n  rel: rel_nebset"], ["proof (prove)\ngoal (9 subgoals):\n 1. map_nebset id = id\n 2. \\<And>f g. map_nebset (g \\<circ> f) = map_nebset g \\<circ> map_nebset f\n 3. \\<And>x f g.\n       (\\<And>z.\n           z \\<in> set_nebset x \\<Longrightarrow>\n           f z = g z) \\<Longrightarrow>\n       map_nebset f x = map_nebset g x\n 4. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 5. card_order (natLeq +c |UNIV|)\n 6. cinfinite (natLeq +c |UNIV|)\n 7. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 8. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 9. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "proof -"], ["proof (state)\ngoal (9 subgoals):\n 1. map_nebset id = id\n 2. \\<And>f g. map_nebset (g \\<circ> f) = map_nebset g \\<circ> map_nebset f\n 3. \\<And>x f g.\n       (\\<And>z.\n           z \\<in> set_nebset x \\<Longrightarrow>\n           f z = g z) \\<Longrightarrow>\n       map_nebset f x = map_nebset g x\n 4. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 5. card_order (natLeq +c |UNIV|)\n 6. cinfinite (natLeq +c |UNIV|)\n 7. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 8. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 9. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "show \"map_nebset id = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_nebset id = id", "by (rule ext, transfer) simp"], ["proof (state)\nthis:\n  map_nebset id = id\n\ngoal (8 subgoals):\n 1. \\<And>f g. map_nebset (g \\<circ> f) = map_nebset g \\<circ> map_nebset f\n 2. \\<And>x f g.\n       (\\<And>z.\n           z \\<in> set_nebset x \\<Longrightarrow>\n           f z = g z) \\<Longrightarrow>\n       map_nebset f x = map_nebset g x\n 3. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 4. card_order (natLeq +c |UNIV|)\n 5. cinfinite (natLeq +c |UNIV|)\n 6. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 7. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 8. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>f g. map_nebset (g \\<circ> f) = map_nebset g \\<circ> map_nebset f\n 2. \\<And>x f g.\n       (\\<And>z.\n           z \\<in> set_nebset x \\<Longrightarrow>\n           f z = g z) \\<Longrightarrow>\n       map_nebset f x = map_nebset g x\n 3. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 4. card_order (natLeq +c |UNIV|)\n 5. cinfinite (natLeq +c |UNIV|)\n 6. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 7. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 8. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "fix f g"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>f g. map_nebset (g \\<circ> f) = map_nebset g \\<circ> map_nebset f\n 2. \\<And>x f g.\n       (\\<And>z.\n           z \\<in> set_nebset x \\<Longrightarrow>\n           f z = g z) \\<Longrightarrow>\n       map_nebset f x = map_nebset g x\n 3. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 4. card_order (natLeq +c |UNIV|)\n 5. cinfinite (natLeq +c |UNIV|)\n 6. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 7. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 8. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "show \"map_nebset (f o g) = map_nebset f o map_nebset g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_nebset (f \\<circ> g) = map_nebset f \\<circ> map_nebset g", "by (rule ext, transfer) auto"], ["proof (state)\nthis:\n  map_nebset (f \\<circ> g) = map_nebset f \\<circ> map_nebset g\n\ngoal (7 subgoals):\n 1. \\<And>x f g.\n       (\\<And>z.\n           z \\<in> set_nebset x \\<Longrightarrow>\n           f z = g z) \\<Longrightarrow>\n       map_nebset f x = map_nebset g x\n 2. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 3. card_order (natLeq +c |UNIV|)\n 4. cinfinite (natLeq +c |UNIV|)\n 5. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 6. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 7. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x f g.\n       (\\<And>z.\n           z \\<in> set_nebset x \\<Longrightarrow>\n           f z = g z) \\<Longrightarrow>\n       map_nebset f x = map_nebset g x\n 2. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 3. card_order (natLeq +c |UNIV|)\n 4. cinfinite (natLeq +c |UNIV|)\n 5. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 6. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 7. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "fix X f g"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x f g.\n       (\\<And>z.\n           z \\<in> set_nebset x \\<Longrightarrow>\n           f z = g z) \\<Longrightarrow>\n       map_nebset f x = map_nebset g x\n 2. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 3. card_order (natLeq +c |UNIV|)\n 4. cinfinite (natLeq +c |UNIV|)\n 5. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 6. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 7. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "assume \"\\<And>z. z \\<in> set_nebset X \\<Longrightarrow> f z = g z\""], ["proof (state)\nthis:\n  ?z \\<in> set_nebset X \\<Longrightarrow> f ?z = g ?z\n\ngoal (7 subgoals):\n 1. \\<And>x f g.\n       (\\<And>z.\n           z \\<in> set_nebset x \\<Longrightarrow>\n           f z = g z) \\<Longrightarrow>\n       map_nebset f x = map_nebset g x\n 2. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 3. card_order (natLeq +c |UNIV|)\n 4. cinfinite (natLeq +c |UNIV|)\n 5. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 6. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 7. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "then"], ["proof (chain)\npicking this:\n  ?z \\<in> set_nebset X \\<Longrightarrow> f ?z = g ?z", "show \"map_nebset f X = map_nebset g X\""], ["proof (prove)\nusing this:\n  ?z \\<in> set_nebset X \\<Longrightarrow> f ?z = g ?z\n\ngoal (1 subgoal):\n 1. map_nebset f X = map_nebset g X", "by transfer force"], ["proof (state)\nthis:\n  map_nebset f X = map_nebset g X\n\ngoal (6 subgoals):\n 1. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 2. card_order (natLeq +c |UNIV|)\n 3. cinfinite (natLeq +c |UNIV|)\n 4. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 5. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 6. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 2. card_order (natLeq +c |UNIV|)\n 3. cinfinite (natLeq +c |UNIV|)\n 4. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 5. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 6. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "fix f"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n 2. card_order (natLeq +c |UNIV|)\n 3. cinfinite (natLeq +c |UNIV|)\n 4. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 5. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 6. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "show \"set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset", "by (rule ext, transfer) auto"], ["proof (state)\nthis:\n  set_nebset \\<circ> map_nebset f = (`) f \\<circ> set_nebset\n\ngoal (5 subgoals):\n 1. card_order (natLeq +c |UNIV|)\n 2. cinfinite (natLeq +c |UNIV|)\n 3. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 4. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 5. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. card_order (natLeq +c |UNIV|)\n 2. cinfinite (natLeq +c |UNIV|)\n 3. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 4. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 5. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "fix X :: \"'a set!['k]\""], ["proof (state)\ngoal (5 subgoals):\n 1. card_order (natLeq +c |UNIV|)\n 2. cinfinite (natLeq +c |UNIV|)\n 3. \\<And>x. |set_nebset x| \\<le>o natLeq +c |UNIV|\n 4. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 5. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "show \"|set_nebset X| \\<le>o natLeq +c |UNIV :: 'k set|\""], ["proof (prove)\ngoal (1 subgoal):\n 1. |set_nebset X| \\<le>o natLeq +c |UNIV|", "by transfer (blast dest: ordLess_imp_ordLeq)"], ["proof (state)\nthis:\n  |set_nebset X| \\<le>o natLeq +c |UNIV|\n\ngoal (4 subgoals):\n 1. card_order (natLeq +c |UNIV|)\n 2. cinfinite (natLeq +c |UNIV|)\n 3. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 4. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. card_order (natLeq +c |UNIV|)\n 2. cinfinite (natLeq +c |UNIV|)\n 3. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 4. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "fix R S"], ["proof (state)\ngoal (4 subgoals):\n 1. card_order (natLeq +c |UNIV|)\n 2. cinfinite (natLeq +c |UNIV|)\n 3. \\<And>R S. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n 4. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "show \"rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)", "by (rule predicate2I, transfer) (auto simp: rel_set_OO[symmetric])"], ["proof (state)\nthis:\n  rel_nebset R OO rel_nebset S \\<le> rel_nebset (R OO S)\n\ngoal (3 subgoals):\n 1. card_order (natLeq +c |UNIV|)\n 2. cinfinite (natLeq +c |UNIV|)\n 3. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. card_order (natLeq +c |UNIV|)\n 2. cinfinite (natLeq +c |UNIV|)\n 3. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "fix R :: \"'a \\<Rightarrow> 'b \\<Rightarrow> bool\""], ["proof (state)\ngoal (3 subgoals):\n 1. card_order (natLeq +c |UNIV|)\n 2. cinfinite (natLeq +c |UNIV|)\n 3. \\<And>R.\n       rel_nebset R =\n       (\\<lambda>x y.\n           \\<exists>z.\n              set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n              map_nebset fst z = x \\<and> map_nebset snd z = y)", "show \"rel_nebset R = ((\\<lambda>x y. \\<exists>z. set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n    map_nebset fst z = x \\<and> map_nebset snd z = y) :: 'a set!['k] \\<Rightarrow> 'b set!['k] \\<Rightarrow> bool)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_nebset R =\n    (\\<lambda>x y.\n        \\<exists>z.\n           set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n           map_nebset fst z = x \\<and> map_nebset snd z = y)", "by (simp add: rel_nebset_def map_fun_def o_def rel_set_def\n      rel_nebset_aux_infinite[unfolded OO_Grp_alt])"], ["proof (state)\nthis:\n  rel_nebset R =\n  (\\<lambda>x y.\n      \\<exists>z.\n         set_nebset z \\<subseteq> {(x, y). R x y} \\<and>\n         map_nebset fst z = x \\<and> map_nebset snd z = y)\n\ngoal (2 subgoals):\n 1. card_order (natLeq +c |UNIV|)\n 2. cinfinite (natLeq +c |UNIV|)", "qed (simp_all add: card_order_csum natLeq_card_order cinfinite_csum natLeq_cinfinite)"], ["", "lemma map_nebset_nebinsert[simp]: \"map_nebset f (nebinsert x X) = nebinsert (f x) (map_nebset f X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_nebset f (nebinsert x X) = nebinsert (f x) (map_nebset f X)", "by transfer auto"], ["", "lemma map_nebset_nebsingleton: \"map_nebset f (nebsingleton x) = nebsingleton (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_nebset f (nebsingleton x) = nebsingleton (f x)", "by transfer auto"], ["", "lemma nebsingleton_inj[simp]: \"nebsingleton x = nebsingleton y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (nebsingleton x = nebsingleton y) = (x = y)", "by transfer auto"], ["", "lemma rel_nebsingleton[simp]:\n  \"rel_nebset R (nebsingleton x1) (nebsingleton x2) = R x1 x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_nebset R (nebsingleton x1) (nebsingleton x2) = R x1 x2", "by transfer (auto simp: rel_set_def)"], ["", "lemma rel_nebset_nebsingleton[simp]:\n  \"rel_nebset R (nebsingleton x1) X = (\\<forall>x2\\<in>set_nebset X. R x1 x2)\"\n  \"rel_nebset R X (nebsingleton x2) = (\\<forall>x1\\<in>set_nebset X. R x1 x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_nebset R (nebsingleton x1) X =\n    (\\<forall>x2\\<in>set_nebset X. R x1 x2) &&&\n    rel_nebset R X (nebsingleton x2) =\n    (\\<forall>x1\\<in>set_nebset X. R x1 x2)", "by (transfer, force simp add: rel_set_def)+"], ["", "lemma rel_nebset_False[simp]: \"rel_nebset (\\<lambda>x y. False) x y = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_nebset (\\<lambda>x y. False) x y = False", "by transfer (auto simp: rel_set_def)"], ["", "lemmas set_nebset_nebsingleton[simp] = nebsingleton.rep_eq"], ["", "lemma nebinsert_absorb[simp]: \"nebinsert a (nebinsert a x) = nebinsert a x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nebinsert a (nebinsert a x) = nebinsert a x", "by transfer simp"], ["", "lift_definition bset_of_nebset :: \"'a set!['k] \\<Rightarrow> 'a set['k]\" is \"\\<lambda>X. X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set.\n       set \\<noteq> {} \\<and> |set| <o natLeq +c |UNIV| \\<Longrightarrow>\n       |set| <o natLeq +c |UNIV|", "by (rule conjunct2)"], ["", "lemma rel_bset_bset_of_nebset[simp]:\n  \"rel_bset R (bset_of_nebset X) (bset_of_nebset Y) = rel_nebset R X Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_bset R (bset_of_nebset X) (bset_of_nebset Y) = rel_nebset R X Y", "by transfer (rule refl)"], ["", "lemma rel_nebset_conj[simp]:\n  \"rel_nebset (\\<lambda>x y. P \\<and> Q x y) x y \\<longleftrightarrow> P \\<and> rel_nebset Q x y\"\n  \"rel_nebset (\\<lambda>x y. Q x y \\<and> P) x y \\<longleftrightarrow> P \\<and> rel_nebset Q x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_nebset (\\<lambda>x y. P \\<and> Q x y) x y =\n    (P \\<and> rel_nebset Q x y) &&&\n    rel_nebset (\\<lambda>x y. Q x y \\<and> P) x y =\n    (P \\<and> rel_nebset Q x y)", "by (transfer, auto simp: rel_set_def)+"], ["", "lemma set_bset_empty[simp]: \"set_bset X = {} \\<longleftrightarrow> X = bempty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (set_bset X = {}) = (X = bempty)", "by transfer simp"], ["", "(* FIXME for ONDRA*)\n(*\ndeclare nebset.rel_eq[relator_eq]\ndeclare nebset.rel_mono[relator_mono]\ndeclare nebset.rel_compp[symmetric, relator_distr]\ndeclare nebset.rel_transfer[transfer_rule]\n\nlemma nebset_quot_map[quot_map]: \"Quotient R Abs Rep T \\<Longrightarrow>\n  Quotient (rel_nebset R) (map_nebset Abs) (map_nebset Rep) (rel_nebset T)\"\n  unfolding Quotient_alt_def5 nebset.rel_Grp[of UNIV, simplified, symmetric]\n    nebset.rel_conversep[symmetric] nebset.rel_compp[symmetric]\n    by (auto elim: nebset.rel_mono_strong)\n\nlemma set_relator_eq_onp [relator_eq_onp]:\n  \"rel_nebset (eq_onp P) = eq_onp (\\<lambda>A. Ball (set_nebset A) P)\"\n  unfolding fun_eq_iff eq_onp_def by transfer (auto simp: rel_set_def)\n*)"], ["", "end"]]}