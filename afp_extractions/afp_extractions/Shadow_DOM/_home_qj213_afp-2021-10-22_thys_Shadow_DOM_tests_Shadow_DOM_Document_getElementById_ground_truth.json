{"file_name": "/home/qj213/afp-2021-10-22/thys/Shadow_DOM/tests/Shadow_DOM_Document_getElementById.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Shadow_DOM", "problem_names": ["lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test2'';\n  test \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  test . setAttribute(''id'', TEST_ID);\n  gBody . appendChild(test);\n  result \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_not_equals(result, None, ''should not be null.'');\n  tmp0 \\<leftarrow> result . tagName;\n  assert_equals(tmp0, ''div'', ''should have appended element's tag name'');\n  gBody . removeChild(test);\n  removed \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(removed, None, ''should not get removed element.'')\n}) Document_getElementById_heap\"", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test3'';\n  test \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  test . setAttribute(''id'', TEST_ID);\n  gBody . appendChild(test);\n  UPDATED_ID \\<leftarrow> return ''test3-updated'';\n  test . setAttribute(''id'', UPDATED_ID);\n  e \\<leftarrow> Document_getElementById_document . getElementById(UPDATED_ID);\n  assert_equals(e, test, ''should get the element with id.'');\n  old \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(old, None, ''shouldn't get the element by the old id.'');\n  test . removeAttribute(''id'');\n  e2 \\<leftarrow> Document_getElementById_document . getElementById(UPDATED_ID);\n  assert_equals(e2, None, ''should return null when the passed id is none in document.'')\n}) Document_getElementById_heap\"", "lemma \"test (do {\n  TEST_ID \\<leftarrow> return ''test4-should-not-exist'';\n  e \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  e . setAttribute(''id'', TEST_ID);\n  tmp0 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(tmp0, None, ''should be null'');\n  tmp1 \\<leftarrow> Document_getElementById_document . body;\n  tmp1 . appendChild(e);\n  tmp2 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(tmp2, e, ''should be the appended element'')\n}) Document_getElementById_heap\"", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test5'';\n  target \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_not_equals(target, None, ''should not be null'');\n  tmp0 \\<leftarrow> target . getAttribute(''data-name'');\n  assert_equals(tmp0, ''1st'', ''should return the 1st'');\n  element4 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element4 . setAttribute(''id'', TEST_ID);\n  element4 . setAttribute(''data-name'', ''4th'');\n  gBody . appendChild(element4);\n  target2 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_not_equals(target2, None, ''should not be null'');\n  tmp1 \\<leftarrow> target2 . getAttribute(''data-name'');\n  assert_equals(tmp1, ''1st'', ''should be the 1st'');\n  tmp2 \\<leftarrow> target2 . parentNode;\n  tmp2 . removeChild(target2);\n  target3 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_not_equals(target3, None, ''should not be null'');\n  tmp3 \\<leftarrow> target3 . getAttribute(''data-name'');\n  assert_equals(tmp3, ''4th'', ''should be the 4th'')\n}) Document_getElementById_heap\"", "lemma \"test (do {\n  TEST_ID \\<leftarrow> return ''test6'';\n  s \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  s . setAttribute(''id'', TEST_ID);\n  tmp0 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  tmp0 . appendChild(s);\n  tmp1 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(tmp1, None, ''should be null'')\n}) Document_getElementById_heap\"", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test7'';\n  element \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element . setAttribute(''id'', TEST_ID);\n  gBody . appendChild(element);\n  target \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(target, element, ''should return the element before changing the value'');\n  element . setAttribute(''id'', (TEST_ID @ ''-updated''));\n  target2 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(target2, None, ''should return null after updated id via Attr.value'');\n  target3 \\<leftarrow> Document_getElementById_document . getElementById((TEST_ID @ ''-updated''));\n  assert_equals(target3, element, ''should be equal to the updated element.'')\n}) Document_getElementById_heap\"", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test12'';\n  test \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  test . setAttribute(''id'', TEST_ID);\n  gBody . appendChild(test);\n  UPDATED_ID \\<leftarrow> return (TEST_ID @ ''-updated'');\n  test . setAttribute(''id'', UPDATED_ID);\n  e \\<leftarrow> Document_getElementById_document . getElementById(UPDATED_ID);\n  assert_equals(e, test, ''should get the element with id.'');\n  old \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(old, None, ''shouldn't get the element by the old id.'');\n  test . setAttribute(''id'', '''');\n  e2 \\<leftarrow> Document_getElementById_document . getElementById(UPDATED_ID);\n  assert_equals(e2, None, ''should return null when the passed id is none in document.'')\n}) Document_getElementById_heap\"", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test13'';\n  container \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  container . setAttribute(''id'', (TEST_ID @ ''-fixture''));\n  gBody . appendChild(container);\n  element1 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element1 . setAttribute(''id'', TEST_ID);\n  element2 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element2 . setAttribute(''id'', TEST_ID);\n  element3 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element3 . setAttribute(''id'', TEST_ID);\n  element4 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element4 . setAttribute(''id'', TEST_ID);\n  container . appendChild(element2);\n  container . appendChild(element4);\n  container . insertBefore(element3, element4);\n  container . insertBefore(element1, element2);\n  test \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(test, element1, ''should return 1st element'');\n  container . removeChild(element1);\n  test \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(test, element2, ''should return 2nd element'');\n  container . removeChild(element2);\n  test \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(test, element3, ''should return 3rd element'');\n  container . removeChild(element3);\n  test \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(test, element4, ''should return 4th element'');\n  container . removeChild(element4)\n}) Document_getElementById_heap\"", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test14'';\n  a \\<leftarrow> Document_getElementById_document . createElement(''a'');\n  b \\<leftarrow> Document_getElementById_document . createElement(''b'');\n  a . appendChild(b);\n  b . setAttribute(''id'', TEST_ID);\n  tmp0 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(tmp0, None);\n  gBody . appendChild(a);\n  tmp1 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(tmp1, b)\n}) Document_getElementById_heap\"", "lemma \"test (do {\n  TEST_ID \\<leftarrow> return ''test15'';\n  outer \\<leftarrow> Document_getElementById_document . getElementById(''outer'');\n  middle \\<leftarrow> Document_getElementById_document . getElementById(''middle'');\n  inner \\<leftarrow> Document_getElementById_document . getElementById(''inner'');\n  tmp0 \\<leftarrow> Document_getElementById_document . getElementById(''middle'');\n  outer . removeChild(tmp0);\n  new_el \\<leftarrow> Document_getElementById_document . createElement(''h1'');\n  new_el . setAttribute(''id'', ''heading'');\n  inner . appendChild(new_el);\n  tmp1 \\<leftarrow> Document_getElementById_document . getElementById(''heading'');\n  assert_equals(tmp1, None)\n}) Document_getElementById_heap\""], "translations": [["", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test2'';\n  test \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  test . setAttribute(''id'', TEST_ID);\n  gBody . appendChild(test);\n  result \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_not_equals(result, None, ''should not be null.'');\n  tmp0 \\<leftarrow> result . tagName;\n  assert_equals(tmp0, ''div'', ''should have appended element's tag name'');\n  gBody . removeChild(test);\n  removed \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(removed, None, ''should not get removed element.'')\n}) Document_getElementById_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind Document_getElementById_document . body\n       (\\<lambda>gBody.\n           Heap_Error_Monad.bind (return ''test2'')\n            (\\<lambda>TEST_ID.\n                Heap_Error_Monad.bind\n                 Document_getElementById_document . createElement(''div'')\n                 (\\<lambda>test.\n                     Heap_Error_Monad.bind\n                      test . setAttribute(''id'', TEST_ID)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind gBody . appendChild(test)\n                           (\\<lambda>_.\n                               Heap_Error_Monad.bind\n                                Document_getElementById_document . getElementById(TEST_ID)\n                                (\\<lambda>result.\n                                    Heap_Error_Monad.bind\n                                     assert_array_not_equals(result, None, ''should not be null.'')\n                                     (\\<lambda>_.\n   Heap_Error_Monad.bind result . tagName\n    (\\<lambda>tmp0.\n        Heap_Error_Monad.bind\n         assert_array_equals(tmp0, ''div'', [CHR ''s'', CHR ''h'',\n       CHR ''o'', CHR ''u'', CHR ''l'', CHR ''d'', CHR '' '', CHR ''h'',\n       CHR ''a'', CHR ''v'', CHR ''e'', CHR '' '', CHR ''a'', CHR ''p'',\n       CHR ''p'', CHR ''e'', CHR ''n'', CHR ''d'', CHR ''e'', CHR ''d'',\n       CHR '' '', CHR ''e'', CHR ''l'', CHR ''e'', CHR ''m'', CHR ''e'',\n       CHR ''n'', CHR ''t'', CHR 0x27, CHR ''s'', CHR '' '', CHR ''t'',\n       CHR ''a'', CHR ''g'', CHR '' '', CHR ''n'', CHR ''a'', CHR ''m'',\n       CHR ''e''])\n         (\\<lambda>_.\n             Heap_Error_Monad.bind (gBody . removeChild test)\n              (\\<lambda>_.\n                  Heap_Error_Monad.bind\n                   Document_getElementById_document . getElementById(TEST_ID)\n                   (\\<lambda>removed.\n                       assert_array_equals(removed, None, ''should not get removed element.'')))))))))))))\n     Document_getElementById_heap", "by eval"], ["", "text \\<open>\"update `id` attribute via setAttribute/removeAttribute\"\\<close>"], ["", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test3'';\n  test \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  test . setAttribute(''id'', TEST_ID);\n  gBody . appendChild(test);\n  UPDATED_ID \\<leftarrow> return ''test3-updated'';\n  test . setAttribute(''id'', UPDATED_ID);\n  e \\<leftarrow> Document_getElementById_document . getElementById(UPDATED_ID);\n  assert_equals(e, test, ''should get the element with id.'');\n  old \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(old, None, ''shouldn't get the element by the old id.'');\n  test . removeAttribute(''id'');\n  e2 \\<leftarrow> Document_getElementById_document . getElementById(UPDATED_ID);\n  assert_equals(e2, None, ''should return null when the passed id is none in document.'')\n}) Document_getElementById_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind Document_getElementById_document . body\n       (\\<lambda>gBody.\n           Heap_Error_Monad.bind (return ''test3'')\n            (\\<lambda>TEST_ID.\n                Heap_Error_Monad.bind\n                 Document_getElementById_document . createElement(''div'')\n                 (\\<lambda>test.\n                     Heap_Error_Monad.bind\n                      test . setAttribute(''id'', TEST_ID)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind gBody . appendChild(test)\n                           (\\<lambda>_.\n                               Heap_Error_Monad.bind\n                                (return ''test3-updated'')\n                                (\\<lambda>UPDATED_ID.\n                                    Heap_Error_Monad.bind\n                                     test . setAttribute(''id'', UPDATED_ID)\n                                     (\\<lambda>_.\n   Heap_Error_Monad.bind\n    Document_getElementById_document . getElementById(UPDATED_ID)\n    (\\<lambda>e.\n        Heap_Error_Monad.bind\n         assert_array_equals(e, test, ''should get the element with id.'')\n         (\\<lambda>_.\n             Heap_Error_Monad.bind\n              Document_getElementById_document . getElementById(TEST_ID)\n              (\\<lambda>old.\n                  Heap_Error_Monad.bind\n                   assert_array_equals(old, None, [CHR ''s'', CHR ''h'',\n             CHR ''o'', CHR ''u'', CHR ''l'', CHR ''d'', CHR ''n'',\n             CHR 0x27, CHR ''t'', CHR '' '', CHR ''g'', CHR ''e'',\n             CHR ''t'', CHR '' '', CHR ''t'', CHR ''h'', CHR ''e'',\n             CHR '' '', CHR ''e'', CHR ''l'', CHR ''e'', CHR ''m'',\n             CHR ''e'', CHR ''n'', CHR ''t'', CHR '' '', CHR ''b'',\n             CHR ''y'', CHR '' '', CHR ''t'', CHR ''h'', CHR ''e'',\n             CHR '' '', CHR ''o'', CHR ''l'', CHR ''d'', CHR '' '',\n             CHR ''i'', CHR ''d'', CHR ''.''])\n                   (\\<lambda>_.\n                       Heap_Error_Monad.bind test . removeAttribute(''id'')\n                        (\\<lambda>_.\n                            Heap_Error_Monad.bind\n                             Document_getElementById_document . getElementById(UPDATED_ID)\n                             (\\<lambda>e2.\n                                 assert_array_equals(e2, None, ''should return null when the passed id is none in document.'')))))))))))))))\n     Document_getElementById_heap", "by eval"], ["", "text \\<open>\"Ensure that the id attribute only affects elements present in a document\"\\<close>"], ["", "lemma \"test (do {\n  TEST_ID \\<leftarrow> return ''test4-should-not-exist'';\n  e \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  e . setAttribute(''id'', TEST_ID);\n  tmp0 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(tmp0, None, ''should be null'');\n  tmp1 \\<leftarrow> Document_getElementById_document . body;\n  tmp1 . appendChild(e);\n  tmp2 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(tmp2, e, ''should be the appended element'')\n}) Document_getElementById_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind (return ''test4-should-not-exist'')\n       (\\<lambda>TEST_ID.\n           Heap_Error_Monad.bind\n            Document_getElementById_document . createElement(''div'')\n            (\\<lambda>e.\n                Heap_Error_Monad.bind e . setAttribute(''id'', TEST_ID)\n                 (\\<lambda>_.\n                     Heap_Error_Monad.bind\n                      Document_getElementById_document . getElementById(TEST_ID)\n                      (\\<lambda>tmp0.\n                          Heap_Error_Monad.bind\n                           assert_array_equals(tmp0, None, ''should be null'')\n                           (\\<lambda>_.\n                               Heap_Error_Monad.bind\n                                Document_getElementById_document . body\n                                (\\<lambda>tmp1.\n                                    Heap_Error_Monad.bind\n                                     tmp1 . appendChild(e)\n                                     (\\<lambda>_.\n   Heap_Error_Monad.bind\n    Document_getElementById_document . getElementById(TEST_ID)\n    (\\<lambda>tmp2.\n        assert_array_equals(tmp2, e, ''should be the appended element''))))))))))\n     Document_getElementById_heap", "by eval"], ["", "text \\<open>\"in tree order, within the context object's tree\"\\<close>"], ["", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test5'';\n  target \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_not_equals(target, None, ''should not be null'');\n  tmp0 \\<leftarrow> target . getAttribute(''data-name'');\n  assert_equals(tmp0, ''1st'', ''should return the 1st'');\n  element4 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element4 . setAttribute(''id'', TEST_ID);\n  element4 . setAttribute(''data-name'', ''4th'');\n  gBody . appendChild(element4);\n  target2 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_not_equals(target2, None, ''should not be null'');\n  tmp1 \\<leftarrow> target2 . getAttribute(''data-name'');\n  assert_equals(tmp1, ''1st'', ''should be the 1st'');\n  tmp2 \\<leftarrow> target2 . parentNode;\n  tmp2 . removeChild(target2);\n  target3 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_not_equals(target3, None, ''should not be null'');\n  tmp3 \\<leftarrow> target3 . getAttribute(''data-name'');\n  assert_equals(tmp3, ''4th'', ''should be the 4th'')\n}) Document_getElementById_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind Document_getElementById_document . body\n       (\\<lambda>gBody.\n           Heap_Error_Monad.bind (return ''test5'')\n            (\\<lambda>TEST_ID.\n                Heap_Error_Monad.bind\n                 Document_getElementById_document . getElementById(TEST_ID)\n                 (\\<lambda>target.\n                     Heap_Error_Monad.bind\n                      assert_array_not_equals(target, None, ''should not be null'')\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind\n                           target . getAttribute(''data-name'')\n                           (\\<lambda>tmp0.\n                               Heap_Error_Monad.bind\n                                assert_array_equals(tmp0, ''1st'', ''should return the 1st'')\n                                (\\<lambda>_.\n                                    Heap_Error_Monad.bind\n                                     Document_getElementById_document . createElement(''div'')\n                                     (\\<lambda>element4.\n   Heap_Error_Monad.bind element4 . setAttribute(''id'', TEST_ID)\n    (\\<lambda>_.\n        Heap_Error_Monad.bind\n         element4 . setAttribute(''data-name'', ''4th'')\n         (\\<lambda>_.\n             Heap_Error_Monad.bind gBody . appendChild(element4)\n              (\\<lambda>_.\n                  Heap_Error_Monad.bind\n                   Document_getElementById_document . getElementById(TEST_ID)\n                   (\\<lambda>target2.\n                       Heap_Error_Monad.bind\n                        assert_array_not_equals(target2, None, ''should not be null'')\n                        (\\<lambda>_.\n                            Heap_Error_Monad.bind\n                             target2 . getAttribute(''data-name'')\n                             (\\<lambda>tmp1.\n                                 Heap_Error_Monad.bind\n                                  assert_array_equals(tmp1, ''1st'', ''should be the 1st'')\n                                  (\\<lambda>_.\nHeap_Error_Monad.bind target2 . parentNode\n (\\<lambda>tmp2.\n     Heap_Error_Monad.bind (tmp2 . removeChild target2)\n      (\\<lambda>_.\n          Heap_Error_Monad.bind\n           Document_getElementById_document . getElementById(TEST_ID)\n           (\\<lambda>target3.\n               Heap_Error_Monad.bind\n                assert_array_not_equals(target3, None, ''should not be null'')\n                (\\<lambda>_.\n                    Heap_Error_Monad.bind\n                     target3 . getAttribute(''data-name'')\n                     (\\<lambda>tmp3.\n                         assert_array_equals(tmp3, ''4th'', ''should be the 4th'')))))))))))))))))))))\n     Document_getElementById_heap", "by eval"], ["", "text \\<open>\"Modern browsers optimize this method with using internal id cache. This test checks that their optimization should effect only append to `Document`, not append to `Node`.\"\\<close>"], ["", "lemma \"test (do {\n  TEST_ID \\<leftarrow> return ''test6'';\n  s \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  s . setAttribute(''id'', TEST_ID);\n  tmp0 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  tmp0 . appendChild(s);\n  tmp1 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(tmp1, None, ''should be null'')\n}) Document_getElementById_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind (return ''test6'')\n       (\\<lambda>TEST_ID.\n           Heap_Error_Monad.bind\n            Document_getElementById_document . createElement(''div'')\n            (\\<lambda>s.\n                Heap_Error_Monad.bind s . setAttribute(''id'', TEST_ID)\n                 (\\<lambda>_.\n                     Heap_Error_Monad.bind\n                      Document_getElementById_document . createElement(''div'')\n                      (\\<lambda>tmp0.\n                          Heap_Error_Monad.bind tmp0 . appendChild(s)\n                           (\\<lambda>_.\n                               Heap_Error_Monad.bind\n                                Document_getElementById_document . getElementById(TEST_ID)\n                                (\\<lambda>tmp1.\n                                    assert_array_equals(tmp1, None, ''should be null''))))))))\n     Document_getElementById_heap", "by eval"], ["", "text \\<open>\"changing attribute's value via `Attr` gotten from `Element.attribute`.\"\\<close>"], ["", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test7'';\n  element \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element . setAttribute(''id'', TEST_ID);\n  gBody . appendChild(element);\n  target \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(target, element, ''should return the element before changing the value'');\n  element . setAttribute(''id'', (TEST_ID @ ''-updated''));\n  target2 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(target2, None, ''should return null after updated id via Attr.value'');\n  target3 \\<leftarrow> Document_getElementById_document . getElementById((TEST_ID @ ''-updated''));\n  assert_equals(target3, element, ''should be equal to the updated element.'')\n}) Document_getElementById_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind Document_getElementById_document . body\n       (\\<lambda>gBody.\n           Heap_Error_Monad.bind (return ''test7'')\n            (\\<lambda>TEST_ID.\n                Heap_Error_Monad.bind\n                 Document_getElementById_document . createElement(''div'')\n                 (\\<lambda>element.\n                     Heap_Error_Monad.bind\n                      element . setAttribute(''id'', TEST_ID)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind gBody . appendChild(element)\n                           (\\<lambda>_.\n                               Heap_Error_Monad.bind\n                                Document_getElementById_document . getElementById(TEST_ID)\n                                (\\<lambda>target.\n                                    Heap_Error_Monad.bind\n                                     assert_array_equals(target, element, ''should return the element before changing the value'')\n                                     (\\<lambda>_.\n   Heap_Error_Monad.bind\n    element . setAttribute(''id'', TEST_ID @ ''-updated'')\n    (\\<lambda>_.\n        Heap_Error_Monad.bind\n         Document_getElementById_document . getElementById(TEST_ID)\n         (\\<lambda>target2.\n             Heap_Error_Monad.bind\n              assert_array_equals(target2, None, ''should return null after updated id via Attr.value'')\n              (\\<lambda>_.\n                  Heap_Error_Monad.bind\n                   Document_getElementById_document . getElementById(TEST_ID @\n                               ''-updated'')\n                   (\\<lambda>target3.\n                       assert_array_equals(target3, element, ''should be equal to the updated element.'')))))))))))))\n     Document_getElementById_heap", "by eval"], ["", "text \\<open>\"update `id` attribute via element.id\"\\<close>"], ["", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test12'';\n  test \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  test . setAttribute(''id'', TEST_ID);\n  gBody . appendChild(test);\n  UPDATED_ID \\<leftarrow> return (TEST_ID @ ''-updated'');\n  test . setAttribute(''id'', UPDATED_ID);\n  e \\<leftarrow> Document_getElementById_document . getElementById(UPDATED_ID);\n  assert_equals(e, test, ''should get the element with id.'');\n  old \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(old, None, ''shouldn't get the element by the old id.'');\n  test . setAttribute(''id'', '''');\n  e2 \\<leftarrow> Document_getElementById_document . getElementById(UPDATED_ID);\n  assert_equals(e2, None, ''should return null when the passed id is none in document.'')\n}) Document_getElementById_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind Document_getElementById_document . body\n       (\\<lambda>gBody.\n           Heap_Error_Monad.bind (return ''test12'')\n            (\\<lambda>TEST_ID.\n                Heap_Error_Monad.bind\n                 Document_getElementById_document . createElement(''div'')\n                 (\\<lambda>test.\n                     Heap_Error_Monad.bind\n                      test . setAttribute(''id'', TEST_ID)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind gBody . appendChild(test)\n                           (\\<lambda>_.\n                               Heap_Error_Monad.bind\n                                (return (TEST_ID @ ''-updated''))\n                                (\\<lambda>UPDATED_ID.\n                                    Heap_Error_Monad.bind\n                                     test . setAttribute(''id'', UPDATED_ID)\n                                     (\\<lambda>_.\n   Heap_Error_Monad.bind\n    Document_getElementById_document . getElementById(UPDATED_ID)\n    (\\<lambda>e.\n        Heap_Error_Monad.bind\n         assert_array_equals(e, test, ''should get the element with id.'')\n         (\\<lambda>_.\n             Heap_Error_Monad.bind\n              Document_getElementById_document . getElementById(TEST_ID)\n              (\\<lambda>old.\n                  Heap_Error_Monad.bind\n                   assert_array_equals(old, None, [CHR ''s'', CHR ''h'',\n             CHR ''o'', CHR ''u'', CHR ''l'', CHR ''d'', CHR ''n'',\n             CHR 0x27, CHR ''t'', CHR '' '', CHR ''g'', CHR ''e'',\n             CHR ''t'', CHR '' '', CHR ''t'', CHR ''h'', CHR ''e'',\n             CHR '' '', CHR ''e'', CHR ''l'', CHR ''e'', CHR ''m'',\n             CHR ''e'', CHR ''n'', CHR ''t'', CHR '' '', CHR ''b'',\n             CHR ''y'', CHR '' '', CHR ''t'', CHR ''h'', CHR ''e'',\n             CHR '' '', CHR ''o'', CHR ''l'', CHR ''d'', CHR '' '',\n             CHR ''i'', CHR ''d'', CHR ''.''])\n                   (\\<lambda>_.\n                       Heap_Error_Monad.bind test . setAttribute(''id'', [])\n                        (\\<lambda>_.\n                            Heap_Error_Monad.bind\n                             Document_getElementById_document . getElementById(UPDATED_ID)\n                             (\\<lambda>e2.\n                                 assert_array_equals(e2, None, ''should return null when the passed id is none in document.'')))))))))))))))\n     Document_getElementById_heap", "by eval"], ["", "text \\<open>\"where insertion order and tree order don't match\"\\<close>"], ["", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test13'';\n  container \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  container . setAttribute(''id'', (TEST_ID @ ''-fixture''));\n  gBody . appendChild(container);\n  element1 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element1 . setAttribute(''id'', TEST_ID);\n  element2 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element2 . setAttribute(''id'', TEST_ID);\n  element3 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element3 . setAttribute(''id'', TEST_ID);\n  element4 \\<leftarrow> Document_getElementById_document . createElement(''div'');\n  element4 . setAttribute(''id'', TEST_ID);\n  container . appendChild(element2);\n  container . appendChild(element4);\n  container . insertBefore(element3, element4);\n  container . insertBefore(element1, element2);\n  test \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(test, element1, ''should return 1st element'');\n  container . removeChild(element1);\n  test \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(test, element2, ''should return 2nd element'');\n  container . removeChild(element2);\n  test \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(test, element3, ''should return 3rd element'');\n  container . removeChild(element3);\n  test \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(test, element4, ''should return 4th element'');\n  container . removeChild(element4)\n}) Document_getElementById_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind Document_getElementById_document . body\n       (\\<lambda>gBody.\n           Heap_Error_Monad.bind (return ''test13'')\n            (\\<lambda>TEST_ID.\n                Heap_Error_Monad.bind\n                 Document_getElementById_document . createElement(''div'')\n                 (\\<lambda>container.\n                     Heap_Error_Monad.bind\n                      container . setAttribute(''id'', TEST_ID @\n                 ''-fixture'')\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind\n                           gBody . appendChild(container)\n                           (\\<lambda>_.\n                               Heap_Error_Monad.bind\n                                Document_getElementById_document . createElement(''div'')\n                                (\\<lambda>element1.\n                                    Heap_Error_Monad.bind\n                                     element1 . setAttribute(''id'', TEST_ID)\n                                     (\\<lambda>_.\n   Heap_Error_Monad.bind\n    Document_getElementById_document . createElement(''div'')\n    (\\<lambda>element2.\n        Heap_Error_Monad.bind element2 . setAttribute(''id'', TEST_ID)\n         (\\<lambda>_.\n             Heap_Error_Monad.bind\n              Document_getElementById_document . createElement(''div'')\n              (\\<lambda>element3.\n                  Heap_Error_Monad.bind\n                   element3 . setAttribute(''id'', TEST_ID)\n                   (\\<lambda>_.\n                       Heap_Error_Monad.bind\n                        Document_getElementById_document . createElement(''div'')\n                        (\\<lambda>element4.\n                            Heap_Error_Monad.bind\n                             element4 . setAttribute(''id'', TEST_ID)\n                             (\\<lambda>_.\n                                 Heap_Error_Monad.bind\n                                  container . appendChild(element2)\n                                  (\\<lambda>_.\nHeap_Error_Monad.bind container . appendChild(element4)\n (\\<lambda>_.\n     Heap_Error_Monad.bind container . insertBefore(element3, element4)\n      (\\<lambda>_.\n          Heap_Error_Monad.bind container . insertBefore(element1, element2)\n           (\\<lambda>_.\n               Heap_Error_Monad.bind\n                Document_getElementById_document . getElementById(TEST_ID)\n                (\\<lambda>test.\n                    Heap_Error_Monad.bind\n                     assert_array_equals(test, element1, ''should return 1st element'')\n                     (\\<lambda>_.\n                         Heap_Error_Monad.bind\n                          (container . removeChild element1)\n                          (\\<lambda>_.\n                              Heap_Error_Monad.bind\n                               Document_getElementById_document . getElementById(TEST_ID)\n                               (\\<lambda>test.\n                                   Heap_Error_Monad.bind\n                                    assert_array_equals(test, element2, ''should return 2nd element'')\n                                    (\\<lambda>_.\n  Heap_Error_Monad.bind (container . removeChild element2)\n   (\\<lambda>_.\n       Heap_Error_Monad.bind\n        Document_getElementById_document . getElementById(TEST_ID)\n        (\\<lambda>test.\n            Heap_Error_Monad.bind\n             assert_array_equals(test, element3, ''should return 3rd element'')\n             (\\<lambda>_.\n                 Heap_Error_Monad.bind (container . removeChild element3)\n                  (\\<lambda>_.\n                      Heap_Error_Monad.bind\n                       Document_getElementById_document . getElementById(TEST_ID)\n                       (\\<lambda>test.\n                           Heap_Error_Monad.bind\n                            assert_array_equals(test, element4, ''should return 4th element'')\n                            (\\<lambda>_.\n                                container . removeChild\n                                 element4)))))))))))))))))))))))))))))\n     Document_getElementById_heap", "by eval"], ["", "text \\<open>\"Inserting an id by inserting its parent node\"\\<close>"], ["", "lemma \"test (do {\n  gBody \\<leftarrow> Document_getElementById_document . body;\n  TEST_ID \\<leftarrow> return ''test14'';\n  a \\<leftarrow> Document_getElementById_document . createElement(''a'');\n  b \\<leftarrow> Document_getElementById_document . createElement(''b'');\n  a . appendChild(b);\n  b . setAttribute(''id'', TEST_ID);\n  tmp0 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(tmp0, None);\n  gBody . appendChild(a);\n  tmp1 \\<leftarrow> Document_getElementById_document . getElementById(TEST_ID);\n  assert_equals(tmp1, b)\n}) Document_getElementById_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind Document_getElementById_document . body\n       (\\<lambda>gBody.\n           Heap_Error_Monad.bind (return ''test14'')\n            (\\<lambda>TEST_ID.\n                Heap_Error_Monad.bind\n                 Document_getElementById_document . createElement(''a'')\n                 (\\<lambda>a.\n                     Heap_Error_Monad.bind\n                      Document_getElementById_document . createElement(''b'')\n                      (\\<lambda>b.\n                          Heap_Error_Monad.bind a . appendChild(b)\n                           (\\<lambda>_.\n                               Heap_Error_Monad.bind\n                                b . setAttribute(''id'', TEST_ID)\n                                (\\<lambda>_.\n                                    Heap_Error_Monad.bind\n                                     Document_getElementById_document . getElementById(TEST_ID)\n                                     (\\<lambda>tmp0.\n   Heap_Error_Monad.bind assert_array_equals(tmp0, None)\n    (\\<lambda>_.\n        Heap_Error_Monad.bind gBody . appendChild(a)\n         (\\<lambda>_.\n             Heap_Error_Monad.bind\n              Document_getElementById_document . getElementById(TEST_ID)\n              (\\<lambda>tmp1. assert_array_equals(tmp1, b))))))))))))\n     Document_getElementById_heap", "by eval"], ["", "text \\<open>\"Document.getElementById must not return nodes not present in document\"\\<close>"], ["", "lemma \"test (do {\n  TEST_ID \\<leftarrow> return ''test15'';\n  outer \\<leftarrow> Document_getElementById_document . getElementById(''outer'');\n  middle \\<leftarrow> Document_getElementById_document . getElementById(''middle'');\n  inner \\<leftarrow> Document_getElementById_document . getElementById(''inner'');\n  tmp0 \\<leftarrow> Document_getElementById_document . getElementById(''middle'');\n  outer . removeChild(tmp0);\n  new_el \\<leftarrow> Document_getElementById_document . createElement(''h1'');\n  new_el . setAttribute(''id'', ''heading'');\n  inner . appendChild(new_el);\n  tmp1 \\<leftarrow> Document_getElementById_document . getElementById(''heading'');\n  assert_equals(tmp1, None)\n}) Document_getElementById_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind (return ''test15'')\n       (\\<lambda>TEST_ID.\n           Heap_Error_Monad.bind\n            Document_getElementById_document . getElementById(''outer'')\n            (\\<lambda>outer.\n                Heap_Error_Monad.bind\n                 Document_getElementById_document . getElementById(''middle'')\n                 (\\<lambda>middle.\n                     Heap_Error_Monad.bind\n                      Document_getElementById_document . getElementById(''inner'')\n                      (\\<lambda>inner.\n                          Heap_Error_Monad.bind\n                           Document_getElementById_document . getElementById(''middle'')\n                           (\\<lambda>tmp0.\n                               Heap_Error_Monad.bind\n                                (outer . removeChild tmp0)\n                                (\\<lambda>_.\n                                    Heap_Error_Monad.bind\n                                     Document_getElementById_document . createElement(''h1'')\n                                     (\\<lambda>new_el.\n   Heap_Error_Monad.bind new_el . setAttribute(''id'', ''heading'')\n    (\\<lambda>_.\n        Heap_Error_Monad.bind inner . appendChild(new_el)\n         (\\<lambda>_.\n             Heap_Error_Monad.bind\n              Document_getElementById_document . getElementById(''heading'')\n              (\\<lambda>tmp1. assert_array_equals(tmp1, None))))))))))))\n     Document_getElementById_heap", "by eval"], ["", "end"]]}