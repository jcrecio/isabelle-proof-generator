{"file_name": "/home/qj213/afp-2021-10-22/thys/Shadow_DOM/tests/Shadow_DOM_Document_adoptNode.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Shadow_DOM", "problem_names": ["lemma \"test (do {\n  tmp0 \\<leftarrow> Document_adoptNode_document . getElementsByTagName(''x<'');\n  y \\<leftarrow> return (tmp0 ! 0);\n  child \\<leftarrow> y . firstChild;\n  tmp1 \\<leftarrow> y . parentNode;\n  tmp2 \\<leftarrow> Document_adoptNode_document . body;\n  assert_equals(tmp1, tmp2);\n  tmp3 \\<leftarrow> y . ownerDocument;\n  assert_equals(tmp3, Document_adoptNode_document);\n  tmp4 \\<leftarrow> Document_adoptNode_document . adoptNode(y);\n  assert_equals(tmp4, y);\n  tmp5 \\<leftarrow> y . parentNode;\n  assert_equals(tmp5, None);\n  tmp6 \\<leftarrow> y . firstChild;\n  assert_equals(tmp6, child);\n  tmp7 \\<leftarrow> y . ownerDocument;\n  assert_equals(tmp7, Document_adoptNode_document);\n  tmp8 \\<leftarrow> child . ownerDocument;\n  assert_equals(tmp8, Document_adoptNode_document);\n  doc \\<leftarrow> createDocument(None, None, None);\n  tmp9 \\<leftarrow> doc . adoptNode(y);\n  assert_equals(tmp9, y);\n  tmp10 \\<leftarrow> y . parentNode;\n  assert_equals(tmp10, None);\n  tmp11 \\<leftarrow> y . firstChild;\n  assert_equals(tmp11, child);\n  tmp12 \\<leftarrow> y . ownerDocument;\n  assert_equals(tmp12, doc);\n  tmp13 \\<leftarrow> child . ownerDocument;\n  assert_equals(tmp13, doc)\n}) Document_adoptNode_heap\"", "lemma \"test (do {\n  x \\<leftarrow> Document_adoptNode_document . createElement('':good:times:'');\n  tmp0 \\<leftarrow> Document_adoptNode_document . adoptNode(x);\n  assert_equals(tmp0, x);\n  doc \\<leftarrow> createDocument(None, None, None);\n  tmp1 \\<leftarrow> doc . adoptNode(x);\n  assert_equals(tmp1, x);\n  tmp2 \\<leftarrow> x . parentNode;\n  assert_equals(tmp2, None);\n  tmp3 \\<leftarrow> x . ownerDocument;\n  assert_equals(tmp3, doc)\n}) Document_adoptNode_heap\""], "translations": [["", "lemma \"test (do {\n  tmp0 \\<leftarrow> Document_adoptNode_document . getElementsByTagName(''x<'');\n  y \\<leftarrow> return (tmp0 ! 0);\n  child \\<leftarrow> y . firstChild;\n  tmp1 \\<leftarrow> y . parentNode;\n  tmp2 \\<leftarrow> Document_adoptNode_document . body;\n  assert_equals(tmp1, tmp2);\n  tmp3 \\<leftarrow> y . ownerDocument;\n  assert_equals(tmp3, Document_adoptNode_document);\n  tmp4 \\<leftarrow> Document_adoptNode_document . adoptNode(y);\n  assert_equals(tmp4, y);\n  tmp5 \\<leftarrow> y . parentNode;\n  assert_equals(tmp5, None);\n  tmp6 \\<leftarrow> y . firstChild;\n  assert_equals(tmp6, child);\n  tmp7 \\<leftarrow> y . ownerDocument;\n  assert_equals(tmp7, Document_adoptNode_document);\n  tmp8 \\<leftarrow> child . ownerDocument;\n  assert_equals(tmp8, Document_adoptNode_document);\n  doc \\<leftarrow> createDocument(None, None, None);\n  tmp9 \\<leftarrow> doc . adoptNode(y);\n  assert_equals(tmp9, y);\n  tmp10 \\<leftarrow> y . parentNode;\n  assert_equals(tmp10, None);\n  tmp11 \\<leftarrow> y . firstChild;\n  assert_equals(tmp11, child);\n  tmp12 \\<leftarrow> y . ownerDocument;\n  assert_equals(tmp12, doc);\n  tmp13 \\<leftarrow> child . ownerDocument;\n  assert_equals(tmp13, doc)\n}) Document_adoptNode_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       Document_adoptNode_document . getElementsByTagName(''x<'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (return (tmp0 ! 0))\n            (\\<lambda>y.\n                Heap_Error_Monad.bind y . firstChild\n                 (\\<lambda>child.\n                     Heap_Error_Monad.bind y . parentNode\n                      (\\<lambda>tmp1.\n                          Heap_Error_Monad.bind\n                           Document_adoptNode_document . body\n                           (\\<lambda>tmp2.\n                               Heap_Error_Monad.bind\n                                assert_array_equals(tmp1, tmp2)\n                                (\\<lambda>_.\n                                    Heap_Error_Monad.bind y . ownerDocument\n                                     (\\<lambda>tmp3.\n   Heap_Error_Monad.bind\n    assert_array_equals(tmp3, Document_adoptNode_document)\n    (\\<lambda>_.\n        Heap_Error_Monad.bind Document_adoptNode_document . adoptNode(y)\n         (\\<lambda>tmp4.\n             Heap_Error_Monad.bind assert_array_equals(tmp4, y)\n              (\\<lambda>_.\n                  Heap_Error_Monad.bind y . parentNode\n                   (\\<lambda>tmp5.\n                       Heap_Error_Monad.bind assert_array_equals(tmp5, None)\n                        (\\<lambda>_.\n                            Heap_Error_Monad.bind y . firstChild\n                             (\\<lambda>tmp6.\n                                 Heap_Error_Monad.bind\n                                  assert_array_equals(tmp6, child)\n                                  (\\<lambda>_.\nHeap_Error_Monad.bind y . ownerDocument\n (\\<lambda>tmp7.\n     Heap_Error_Monad.bind\n      assert_array_equals(tmp7, Document_adoptNode_document)\n      (\\<lambda>_.\n          Heap_Error_Monad.bind child . ownerDocument\n           (\\<lambda>tmp8.\n               Heap_Error_Monad.bind\n                assert_array_equals(tmp8, Document_adoptNode_document)\n                (\\<lambda>_.\n                    Heap_Error_Monad.bind createDocument([])\n                     (\\<lambda>doc.\n                         Heap_Error_Monad.bind doc . adoptNode(y)\n                          (\\<lambda>tmp9.\n                              Heap_Error_Monad.bind\n                               assert_array_equals(tmp9, y)\n                               (\\<lambda>_.\n                                   Heap_Error_Monad.bind y . parentNode\n                                    (\\<lambda>tmp10.\n  Heap_Error_Monad.bind assert_array_equals(tmp10, None)\n   (\\<lambda>_.\n       Heap_Error_Monad.bind y . firstChild\n        (\\<lambda>tmp11.\n            Heap_Error_Monad.bind assert_array_equals(tmp11, child)\n             (\\<lambda>_.\n                 Heap_Error_Monad.bind y . ownerDocument\n                  (\\<lambda>tmp12.\n                      Heap_Error_Monad.bind assert_array_equals(tmp12, doc)\n                       (\\<lambda>_.\n                           Heap_Error_Monad.bind child . ownerDocument\n                            (\\<lambda>tmp13.\n                                assert_array_equals(tmp13, doc))))))))))))))))))))))))))))))\n     Document_adoptNode_heap", "by eval"], ["", "text \\<open>\"Adopting an Element called ':good:times:' should work.\"\\<close>"], ["", "lemma \"test (do {\n  x \\<leftarrow> Document_adoptNode_document . createElement('':good:times:'');\n  tmp0 \\<leftarrow> Document_adoptNode_document . adoptNode(x);\n  assert_equals(tmp0, x);\n  doc \\<leftarrow> createDocument(None, None, None);\n  tmp1 \\<leftarrow> doc . adoptNode(x);\n  assert_equals(tmp1, x);\n  tmp2 \\<leftarrow> x . parentNode;\n  assert_equals(tmp2, None);\n  tmp3 \\<leftarrow> x . ownerDocument;\n  assert_equals(tmp3, doc)\n}) Document_adoptNode_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       Document_adoptNode_document . createElement('':good:times:'')\n       (\\<lambda>x.\n           Heap_Error_Monad.bind Document_adoptNode_document . adoptNode(x)\n            (\\<lambda>tmp0.\n                Heap_Error_Monad.bind assert_array_equals(tmp0, x)\n                 (\\<lambda>_.\n                     Heap_Error_Monad.bind createDocument([])\n                      (\\<lambda>doc.\n                          Heap_Error_Monad.bind doc . adoptNode(x)\n                           (\\<lambda>tmp1.\n                               Heap_Error_Monad.bind\n                                assert_array_equals(tmp1, x)\n                                (\\<lambda>_.\n                                    Heap_Error_Monad.bind x . parentNode\n                                     (\\<lambda>tmp2.\n   Heap_Error_Monad.bind assert_array_equals(tmp2, None)\n    (\\<lambda>_.\n        Heap_Error_Monad.bind x . ownerDocument\n         (\\<lambda>tmp3. assert_array_equals(tmp3, doc)))))))))))\n     Document_adoptNode_heap", "by eval"], ["", "end"]]}