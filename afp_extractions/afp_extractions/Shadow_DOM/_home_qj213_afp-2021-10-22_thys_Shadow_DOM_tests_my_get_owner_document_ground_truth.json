{"file_name": "/home/qj213/afp-2021-10-22/thys/Shadow_DOM/tests/my_get_owner_document.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Shadow_DOM", "problem_names": ["lemma \"test (do {\n  tmp0 \\<leftarrow> my_get_owner_document_document . getElementById(''test'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''s1'';\n  tmp2 \\<leftarrow> tmp1 . ownerDocument;\n  assert_equals(tmp2, my_get_owner_document_document)\n}) my_get_owner_document_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> my_get_owner_document_document . getElementById(''test'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''c1'';\n  tmp2 \\<leftarrow> tmp1 . ownerDocument;\n  assert_equals(tmp2, my_get_owner_document_document)\n}) my_get_owner_document_heap\""], "translations": [["", "lemma \"test (do {\n  tmp0 \\<leftarrow> my_get_owner_document_document . getElementById(''test'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''s1'';\n  tmp2 \\<leftarrow> tmp1 . ownerDocument;\n  assert_equals(tmp2, my_get_owner_document_document)\n}) my_get_owner_document_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       my_get_owner_document_document . getElementById(''test'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''s1'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind tmp1 . ownerDocument\n                      (\\<lambda>tmp2.\n                          assert_array_equals(tmp2, my_get_owner_document_document))))))\n     my_get_owner_document_heap", "by eval"], ["", "text \\<open>'ownerDocument outside shadow tree returns the outer document.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> my_get_owner_document_document . getElementById(''test'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''c1'';\n  tmp2 \\<leftarrow> tmp1 . ownerDocument;\n  assert_equals(tmp2, my_get_owner_document_document)\n}) my_get_owner_document_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       my_get_owner_document_document . getElementById(''test'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''c1'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind tmp1 . ownerDocument\n                      (\\<lambda>tmp2.\n                          assert_array_equals(tmp2, my_get_owner_document_document))))))\n     my_get_owner_document_heap", "by eval"], ["", "end"]]}