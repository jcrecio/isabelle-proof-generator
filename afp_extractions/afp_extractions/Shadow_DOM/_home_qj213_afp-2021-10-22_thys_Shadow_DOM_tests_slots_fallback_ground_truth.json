{"file_name": "/home/qj213/afp-2021-10-22/thys/Shadow_DOM/tests/slots_fallback.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Shadow_DOM", "problem_names": ["lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test1'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test1'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''f1'';\n  tmp3 \\<leftarrow> tmp2 . assignedSlot;\n  assert_equals(tmp3, None);\n  tmp4 \\<leftarrow> n . ''s1'';\n  tmp5 \\<leftarrow> tmp4 . assignedNodes();\n  assert_array_equals(tmp5, []);\n  tmp6 \\<leftarrow> n . ''s1'';\n  tmp7 \\<leftarrow> tmp6 . assignedNodes(True);\n  tmp8 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp7, [tmp8])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test1'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''s1'';\n  tmp2 \\<leftarrow> tmp1 . assignedElements();\n  assert_array_equals(tmp2, []);\n  tmp3 \\<leftarrow> n . ''s1'';\n  tmp4 \\<leftarrow> tmp3 . assignedElements(True);\n  tmp5 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp4, [tmp5])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test2'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test2'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''f1'';\n  tmp3 \\<leftarrow> tmp2 . assignedSlot;\n  assert_equals(tmp3, None);\n  tmp4 \\<leftarrow> n . ''s1'';\n  tmp5 \\<leftarrow> tmp4 . assignedNodes();\n  assert_array_equals(tmp5, []);\n  tmp6 \\<leftarrow> n . ''s2'';\n  tmp7 \\<leftarrow> tmp6 . assignedNodes();\n  assert_array_equals(tmp7, []);\n  tmp8 \\<leftarrow> n . ''s1'';\n  tmp9 \\<leftarrow> tmp8 . assignedNodes(True);\n  tmp10 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp9, [tmp10]);\n  tmp11 \\<leftarrow> n . ''s2'';\n  tmp12 \\<leftarrow> tmp11 . assignedNodes(True);\n  tmp13 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp12, [tmp13])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test2'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''s1'';\n  tmp2 \\<leftarrow> tmp1 . assignedElements();\n  assert_array_equals(tmp2, []);\n  tmp3 \\<leftarrow> n . ''s2'';\n  tmp4 \\<leftarrow> tmp3 . assignedElements();\n  assert_array_equals(tmp4, []);\n  tmp5 \\<leftarrow> n . ''s1'';\n  tmp6 \\<leftarrow> tmp5 . assignedElements(True);\n  tmp7 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp6, [tmp7]);\n  tmp8 \\<leftarrow> n . ''s2'';\n  tmp9 \\<leftarrow> tmp8 . assignedElements(True);\n  tmp10 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp9, [tmp10])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test3'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test3'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''c1'';\n  tmp3 \\<leftarrow> tmp2 . assignedSlot;\n  tmp4 \\<leftarrow> n . ''s1'';\n  assert_equals(tmp3, tmp4);\n  tmp5 \\<leftarrow> n . ''f1'';\n  tmp6 \\<leftarrow> tmp5 . assignedSlot;\n  assert_equals(tmp6, None);\n  tmp7 \\<leftarrow> n . ''s1'';\n  tmp8 \\<leftarrow> tmp7 . assignedNodes();\n  tmp9 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp8, [tmp9]);\n  tmp10 \\<leftarrow> n . ''s2'';\n  tmp11 \\<leftarrow> tmp10 . assignedNodes();\n  assert_array_equals(tmp11, []);\n  tmp12 \\<leftarrow> n . ''s1'';\n  tmp13 \\<leftarrow> tmp12 . assignedNodes(True);\n  tmp14 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp13, [tmp14]);\n  tmp15 \\<leftarrow> n . ''s2'';\n  tmp16 \\<leftarrow> tmp15 . assignedNodes(True);\n  tmp17 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp16, [tmp17])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test4'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test4'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''c1'';\n  tmp3 \\<leftarrow> tmp2 . assignedSlot;\n  tmp4 \\<leftarrow> n . ''s2'';\n  assert_equals(tmp3, tmp4);\n  tmp5 \\<leftarrow> n . ''f1'';\n  tmp6 \\<leftarrow> tmp5 . assignedSlot;\n  assert_equals(tmp6, None);\n  tmp7 \\<leftarrow> n . ''s1'';\n  tmp8 \\<leftarrow> tmp7 . assignedNodes();\n  assert_array_equals(tmp8, []);\n  tmp9 \\<leftarrow> n . ''s2'';\n  tmp10 \\<leftarrow> tmp9 . assignedNodes();\n  tmp11 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp10, [tmp11]);\n  tmp12 \\<leftarrow> n . ''s1'';\n  tmp13 \\<leftarrow> tmp12 . assignedNodes(True);\n  tmp14 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp13, [tmp14]);\n  tmp15 \\<leftarrow> n . ''s2'';\n  tmp16 \\<leftarrow> tmp15 . assignedNodes(True);\n  tmp17 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp16, [tmp17])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''s1'';\n  tmp3 \\<leftarrow> tmp2 . assignedNodes();\n  tmp4 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp3, [tmp4]);\n  tmp5 \\<leftarrow> n . ''s2'';\n  tmp6 \\<leftarrow> tmp5 . assignedNodes();\n  assert_array_equals(tmp6, []);\n  tmp7 \\<leftarrow> n . ''s3'';\n  tmp8 \\<leftarrow> tmp7 . assignedNodes();\n  tmp9 \\<leftarrow> n . ''s2'';\n  assert_array_equals(tmp8, [tmp9]);\n  tmp10 \\<leftarrow> n . ''s4'';\n  tmp11 \\<leftarrow> tmp10 . assignedNodes();\n  assert_array_equals(tmp11, []);\n  tmp12 \\<leftarrow> n . ''s1'';\n  tmp13 \\<leftarrow> tmp12 . assignedNodes(True);\n  tmp14 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp13, [tmp14]);\n  tmp15 \\<leftarrow> n . ''s2'';\n  tmp16 \\<leftarrow> tmp15 . assignedNodes(True);\n  tmp17 \\<leftarrow> n . ''c1'';\n  tmp18 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp16, [tmp17, tmp18]);\n  tmp19 \\<leftarrow> n . ''s3'';\n  tmp20 \\<leftarrow> tmp19 . assignedNodes(True);\n  tmp21 \\<leftarrow> n . ''c1'';\n  tmp22 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp20, [tmp21, tmp22]);\n  tmp23 \\<leftarrow> n . ''s4'';\n  tmp24 \\<leftarrow> tmp23 . assignedNodes(True);\n  tmp25 \\<leftarrow> n . ''c1'';\n  tmp26 \\<leftarrow> n . ''f2'';\n  tmp27 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp24, [tmp25, tmp26, tmp27])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''s1'';\n  tmp2 \\<leftarrow> tmp1 . assignedElements();\n  tmp3 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp2, [tmp3]);\n  tmp4 \\<leftarrow> n . ''s2'';\n  tmp5 \\<leftarrow> tmp4 . assignedElements();\n  assert_array_equals(tmp5, []);\n  tmp6 \\<leftarrow> n . ''s3'';\n  tmp7 \\<leftarrow> tmp6 . assignedElements();\n  tmp8 \\<leftarrow> n . ''s2'';\n  assert_array_equals(tmp7, [tmp8]);\n  tmp9 \\<leftarrow> n . ''s4'';\n  tmp10 \\<leftarrow> tmp9 . assignedElements();\n  assert_array_equals(tmp10, []);\n  tmp11 \\<leftarrow> n . ''s1'';\n  tmp12 \\<leftarrow> tmp11 . assignedElements(True);\n  tmp13 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp12, [tmp13]);\n  tmp14 \\<leftarrow> n . ''s2'';\n  tmp15 \\<leftarrow> tmp14 . assignedElements(True);\n  tmp16 \\<leftarrow> n . ''c1'';\n  tmp17 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp15, [tmp16, tmp17]);\n  tmp18 \\<leftarrow> n . ''s3'';\n  tmp19 \\<leftarrow> tmp18 . assignedElements(True);\n  tmp20 \\<leftarrow> n . ''c1'';\n  tmp21 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp19, [tmp20, tmp21]);\n  tmp22 \\<leftarrow> n . ''s4'';\n  tmp23 \\<leftarrow> tmp22 . assignedElements(True);\n  tmp24 \\<leftarrow> n . ''c1'';\n  tmp25 \\<leftarrow> n . ''f2'';\n  tmp26 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp23, [tmp24, tmp25, tmp26])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  d1 \\<leftarrow> slots_fallback_document . createElement(''div'');\n  tmp2 \\<leftarrow> n . ''s2'';\n  tmp2 . appendChild(d1);\n  tmp3 \\<leftarrow> n . ''s1'';\n  tmp4 \\<leftarrow> tmp3 . assignedNodes(True);\n  tmp5 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp4, [tmp5]);\n  tmp6 \\<leftarrow> n . ''s2'';\n  tmp7 \\<leftarrow> tmp6 . assignedNodes(True);\n  tmp8 \\<leftarrow> n . ''c1'';\n  tmp9 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp7, [tmp8, tmp9, d1]);\n  tmp10 \\<leftarrow> n . ''s3'';\n  tmp11 \\<leftarrow> tmp10 . assignedNodes(True);\n  tmp12 \\<leftarrow> n . ''c1'';\n  tmp13 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp11, [tmp12, tmp13, d1]);\n  tmp14 \\<leftarrow> n . ''s4'';\n  tmp15 \\<leftarrow> tmp14 . assignedNodes(True);\n  tmp16 \\<leftarrow> n . ''c1'';\n  tmp17 \\<leftarrow> n . ''f2'';\n  tmp18 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp15, [tmp16, tmp17, d1, tmp18])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''f2'';\n  tmp2 . remove();\n  tmp3 \\<leftarrow> n . ''s1'';\n  tmp4 \\<leftarrow> tmp3 . assignedNodes(True);\n  tmp5 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp4, [tmp5]);\n  tmp6 \\<leftarrow> n . ''s2'';\n  tmp7 \\<leftarrow> tmp6 . assignedNodes(True);\n  tmp8 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp7, [tmp8]);\n  tmp9 \\<leftarrow> n . ''s3'';\n  tmp10 \\<leftarrow> tmp9 . assignedNodes(True);\n  tmp11 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp10, [tmp11]);\n  tmp12 \\<leftarrow> n . ''s4'';\n  tmp13 \\<leftarrow> tmp12 . assignedNodes(True);\n  tmp14 \\<leftarrow> n . ''c1'';\n  tmp15 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp13, [tmp14, tmp15])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  d2 \\<leftarrow> slots_fallback_document . createElement(''div'');\n  d2 . setAttribute(''slot'', ''slot2'');\n  tmp2 \\<leftarrow> n . ''host1'';\n  tmp2 . appendChild(d2);\n  tmp3 \\<leftarrow> n . ''s2'';\n  tmp4 \\<leftarrow> tmp3 . assignedNodes();\n  assert_array_equals(tmp4, [d2]);\n  tmp5 \\<leftarrow> n . ''s2'';\n  tmp6 \\<leftarrow> tmp5 . assignedNodes(True);\n  assert_array_equals(tmp6, [d2]);\n  tmp7 \\<leftarrow> n . ''s3'';\n  tmp8 \\<leftarrow> tmp7 . assignedNodes(True);\n  assert_array_equals(tmp8, [d2]);\n  tmp9 \\<leftarrow> n . ''s4'';\n  tmp10 \\<leftarrow> tmp9 . assignedNodes(True);\n  tmp11 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp10, [d2, tmp11])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''c1'';\n  tmp2 . remove();\n  tmp3 \\<leftarrow> n . ''s1'';\n  tmp4 \\<leftarrow> tmp3 . assignedNodes();\n  assert_array_equals(tmp4, []);\n  tmp5 \\<leftarrow> n . ''s1'';\n  tmp6 \\<leftarrow> tmp5 . assignedNodes(True);\n  tmp7 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp6, [tmp7]);\n  tmp8 \\<leftarrow> n . ''s2'';\n  tmp9 \\<leftarrow> tmp8 . assignedNodes(True);\n  tmp10 \\<leftarrow> n . ''f1'';\n  tmp11 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp9, [tmp10, tmp11]);\n  tmp12 \\<leftarrow> n . ''s3'';\n  tmp13 \\<leftarrow> tmp12 . assignedNodes(True);\n  tmp14 \\<leftarrow> n . ''f1'';\n  tmp15 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp13, [tmp14, tmp15]);\n  tmp16 \\<leftarrow> n . ''s4'';\n  tmp17 \\<leftarrow> tmp16 . assignedNodes(True);\n  tmp18 \\<leftarrow> n . ''f1'';\n  tmp19 \\<leftarrow> n . ''f2'';\n  tmp20 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp17, [tmp18, tmp19, tmp20])\n}) slots_fallback_heap\"", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''s1'';\n  tmp2 . remove();\n  tmp3 \\<leftarrow> n . ''s1'';\n  tmp4 \\<leftarrow> tmp3 . assignedNodes();\n  assert_array_equals(tmp4, []);\n  tmp5 \\<leftarrow> n . ''s1'';\n  tmp6 \\<leftarrow> tmp5 . assignedNodes(True);\n  assert_array_equals(tmp6, [], ''fall back contents should be empty because s1 is not in a shadow tree.'');\n  tmp7 \\<leftarrow> n . ''s2'';\n  tmp8 \\<leftarrow> tmp7 . assignedNodes(True);\n  tmp9 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp8, [tmp9]);\n  tmp10 \\<leftarrow> n . ''s3'';\n  tmp11 \\<leftarrow> tmp10 . assignedNodes(True);\n  tmp12 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp11, [tmp12]);\n  tmp13 \\<leftarrow> n . ''s4'';\n  tmp14 \\<leftarrow> tmp13 . assignedNodes(True);\n  tmp15 \\<leftarrow> n . ''f2'';\n  tmp16 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp14, [tmp15, tmp16])\n}) slots_fallback_heap\""], "translations": [["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test1'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test1'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''f1'';\n  tmp3 \\<leftarrow> tmp2 . assignedSlot;\n  assert_equals(tmp3, None);\n  tmp4 \\<leftarrow> n . ''s1'';\n  tmp5 \\<leftarrow> tmp4 . assignedNodes();\n  assert_array_equals(tmp5, []);\n  tmp6 \\<leftarrow> n . ''s1'';\n  tmp7 \\<leftarrow> tmp6 . assignedNodes(True);\n  tmp8 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp7, [tmp8])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test1'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''test1'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind\n                      (removeWhiteSpaceOnlyTextNodes tmp1)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind (n . ''f1'')\n                           (\\<lambda>tmp2.\n                               Heap_Error_Monad.bind tmp2 . assignedSlot\n                                (\\<lambda>tmp3.\n                                    Heap_Error_Monad.bind\n                                     assert_array_equals(tmp3, None)\n                                     (\\<lambda>_.\n   Heap_Error_Monad.bind (n . ''s1'')\n    (\\<lambda>tmp4.\n        Heap_Error_Monad.bind tmp4 . assignedNodes()\n         (\\<lambda>tmp5.\n             Heap_Error_Monad.bind assert_array_equals(tmp5, [])\n              (\\<lambda>_.\n                  Heap_Error_Monad.bind (n . ''s1'')\n                   (\\<lambda>tmp6.\n                       Heap_Error_Monad.bind tmp6 . assignedNodes(True)\n                        (\\<lambda>tmp7.\n                            Heap_Error_Monad.bind (n . ''f1'')\n                             (\\<lambda>tmp8.\n                                 assert_array_equals(tmp7, [tmp8])))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Basic, elements only.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test1'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''s1'';\n  tmp2 \\<leftarrow> tmp1 . assignedElements();\n  assert_array_equals(tmp2, []);\n  tmp3 \\<leftarrow> n . ''s1'';\n  tmp4 \\<leftarrow> tmp3 . assignedElements(True);\n  tmp5 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp4, [tmp5])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test1'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''s1'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind tmp1 . assignedElements()\n                      (\\<lambda>tmp2.\n                          Heap_Error_Monad.bind\n                           assert_array_equals(tmp2, [])\n                           (\\<lambda>_.\n                               Heap_Error_Monad.bind (n . ''s1'')\n                                (\\<lambda>tmp3.\n                                    Heap_Error_Monad.bind\n                                     tmp3 . assignedElements(True)\n                                     (\\<lambda>tmp4.\n   Heap_Error_Monad.bind (n . ''f1'')\n    (\\<lambda>tmp5. assert_array_equals(tmp4, [tmp5]))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Slots in Slots.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test2'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test2'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''f1'';\n  tmp3 \\<leftarrow> tmp2 . assignedSlot;\n  assert_equals(tmp3, None);\n  tmp4 \\<leftarrow> n . ''s1'';\n  tmp5 \\<leftarrow> tmp4 . assignedNodes();\n  assert_array_equals(tmp5, []);\n  tmp6 \\<leftarrow> n . ''s2'';\n  tmp7 \\<leftarrow> tmp6 . assignedNodes();\n  assert_array_equals(tmp7, []);\n  tmp8 \\<leftarrow> n . ''s1'';\n  tmp9 \\<leftarrow> tmp8 . assignedNodes(True);\n  tmp10 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp9, [tmp10]);\n  tmp11 \\<leftarrow> n . ''s2'';\n  tmp12 \\<leftarrow> tmp11 . assignedNodes(True);\n  tmp13 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp12, [tmp13])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test2'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''test2'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind\n                      (removeWhiteSpaceOnlyTextNodes tmp1)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind (n . ''f1'')\n                           (\\<lambda>tmp2.\n                               Heap_Error_Monad.bind tmp2 . assignedSlot\n                                (\\<lambda>tmp3.\n                                    Heap_Error_Monad.bind\n                                     assert_array_equals(tmp3, None)\n                                     (\\<lambda>_.\n   Heap_Error_Monad.bind (n . ''s1'')\n    (\\<lambda>tmp4.\n        Heap_Error_Monad.bind tmp4 . assignedNodes()\n         (\\<lambda>tmp5.\n             Heap_Error_Monad.bind assert_array_equals(tmp5, [])\n              (\\<lambda>_.\n                  Heap_Error_Monad.bind (n . ''s2'')\n                   (\\<lambda>tmp6.\n                       Heap_Error_Monad.bind tmp6 . assignedNodes()\n                        (\\<lambda>tmp7.\n                            Heap_Error_Monad.bind\n                             assert_array_equals(tmp7, [])\n                             (\\<lambda>_.\n                                 Heap_Error_Monad.bind (n . ''s1'')\n                                  (\\<lambda>tmp8.\nHeap_Error_Monad.bind tmp8 . assignedNodes(True)\n (\\<lambda>tmp9.\n     Heap_Error_Monad.bind (n . ''f1'')\n      (\\<lambda>tmp10.\n          Heap_Error_Monad.bind assert_array_equals(tmp9, [tmp10])\n           (\\<lambda>_.\n               Heap_Error_Monad.bind (n . ''s2'')\n                (\\<lambda>tmp11.\n                    Heap_Error_Monad.bind tmp11 . assignedNodes(True)\n                     (\\<lambda>tmp12.\n                         Heap_Error_Monad.bind (n . ''f1'')\n                          (\\<lambda>tmp13.\n                              assert_array_equals(tmp12, [tmp13]))))))))))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Slots in Slots, elements only.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test2'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''s1'';\n  tmp2 \\<leftarrow> tmp1 . assignedElements();\n  assert_array_equals(tmp2, []);\n  tmp3 \\<leftarrow> n . ''s2'';\n  tmp4 \\<leftarrow> tmp3 . assignedElements();\n  assert_array_equals(tmp4, []);\n  tmp5 \\<leftarrow> n . ''s1'';\n  tmp6 \\<leftarrow> tmp5 . assignedElements(True);\n  tmp7 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp6, [tmp7]);\n  tmp8 \\<leftarrow> n . ''s2'';\n  tmp9 \\<leftarrow> tmp8 . assignedElements(True);\n  tmp10 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp9, [tmp10])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test2'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''s1'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind tmp1 . assignedElements()\n                      (\\<lambda>tmp2.\n                          Heap_Error_Monad.bind\n                           assert_array_equals(tmp2, [])\n                           (\\<lambda>_.\n                               Heap_Error_Monad.bind (n . ''s2'')\n                                (\\<lambda>tmp3.\n                                    Heap_Error_Monad.bind\n                                     tmp3 . assignedElements()\n                                     (\\<lambda>tmp4.\n   Heap_Error_Monad.bind assert_array_equals(tmp4, [])\n    (\\<lambda>_.\n        Heap_Error_Monad.bind (n . ''s1'')\n         (\\<lambda>tmp5.\n             Heap_Error_Monad.bind tmp5 . assignedElements(True)\n              (\\<lambda>tmp6.\n                  Heap_Error_Monad.bind (n . ''f1'')\n                   (\\<lambda>tmp7.\n                       Heap_Error_Monad.bind\n                        assert_array_equals(tmp6, [tmp7])\n                        (\\<lambda>_.\n                            Heap_Error_Monad.bind (n . ''s2'')\n                             (\\<lambda>tmp8.\n                                 Heap_Error_Monad.bind\n                                  tmp8 . assignedElements(True)\n                                  (\\<lambda>tmp9.\nHeap_Error_Monad.bind (n . ''f1'')\n (\\<lambda>tmp10. assert_array_equals(tmp9, [tmp10])))))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Fallback contents should not be used if a node is assigned.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test3'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test3'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''c1'';\n  tmp3 \\<leftarrow> tmp2 . assignedSlot;\n  tmp4 \\<leftarrow> n . ''s1'';\n  assert_equals(tmp3, tmp4);\n  tmp5 \\<leftarrow> n . ''f1'';\n  tmp6 \\<leftarrow> tmp5 . assignedSlot;\n  assert_equals(tmp6, None);\n  tmp7 \\<leftarrow> n . ''s1'';\n  tmp8 \\<leftarrow> tmp7 . assignedNodes();\n  tmp9 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp8, [tmp9]);\n  tmp10 \\<leftarrow> n . ''s2'';\n  tmp11 \\<leftarrow> tmp10 . assignedNodes();\n  assert_array_equals(tmp11, []);\n  tmp12 \\<leftarrow> n . ''s1'';\n  tmp13 \\<leftarrow> tmp12 . assignedNodes(True);\n  tmp14 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp13, [tmp14]);\n  tmp15 \\<leftarrow> n . ''s2'';\n  tmp16 \\<leftarrow> tmp15 . assignedNodes(True);\n  tmp17 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp16, [tmp17])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test3'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''test3'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind\n                      (removeWhiteSpaceOnlyTextNodes tmp1)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind (n . ''c1'')\n                           (\\<lambda>tmp2.\n                               Heap_Error_Monad.bind tmp2 . assignedSlot\n                                (\\<lambda>tmp3.\n                                    Heap_Error_Monad.bind (n . ''s1'')\n                                     (\\<lambda>tmp4.\n   Heap_Error_Monad.bind assert_array_equals(tmp3, tmp4)\n    (\\<lambda>_.\n        Heap_Error_Monad.bind (n . ''f1'')\n         (\\<lambda>tmp5.\n             Heap_Error_Monad.bind tmp5 . assignedSlot\n              (\\<lambda>tmp6.\n                  Heap_Error_Monad.bind assert_array_equals(tmp6, None)\n                   (\\<lambda>_.\n                       Heap_Error_Monad.bind (n . ''s1'')\n                        (\\<lambda>tmp7.\n                            Heap_Error_Monad.bind tmp7 . assignedNodes()\n                             (\\<lambda>tmp8.\n                                 Heap_Error_Monad.bind (n . ''c1'')\n                                  (\\<lambda>tmp9.\nHeap_Error_Monad.bind assert_array_equals(tmp8, [tmp9])\n (\\<lambda>_.\n     Heap_Error_Monad.bind (n . ''s2'')\n      (\\<lambda>tmp10.\n          Heap_Error_Monad.bind tmp10 . assignedNodes()\n           (\\<lambda>tmp11.\n               Heap_Error_Monad.bind assert_array_equals(tmp11, [])\n                (\\<lambda>_.\n                    Heap_Error_Monad.bind (n . ''s1'')\n                     (\\<lambda>tmp12.\n                         Heap_Error_Monad.bind tmp12 . assignedNodes(True)\n                          (\\<lambda>tmp13.\n                              Heap_Error_Monad.bind (n . ''c1'')\n                               (\\<lambda>tmp14.\n                                   Heap_Error_Monad.bind\n                                    assert_array_equals(tmp13, [tmp14])\n                                    (\\<lambda>_.\n  Heap_Error_Monad.bind (n . ''s2'')\n   (\\<lambda>tmp15.\n       Heap_Error_Monad.bind tmp15 . assignedNodes(True)\n        (\\<lambda>tmp16.\n            Heap_Error_Monad.bind (n . ''f1'')\n             (\\<lambda>tmp17.\n                 assert_array_equals(tmp16, [tmp17])))))))))))))))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Slots in Slots: Assigned nodes should be used as fallback contents of another slot'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test4'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test4'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''c1'';\n  tmp3 \\<leftarrow> tmp2 . assignedSlot;\n  tmp4 \\<leftarrow> n . ''s2'';\n  assert_equals(tmp3, tmp4);\n  tmp5 \\<leftarrow> n . ''f1'';\n  tmp6 \\<leftarrow> tmp5 . assignedSlot;\n  assert_equals(tmp6, None);\n  tmp7 \\<leftarrow> n . ''s1'';\n  tmp8 \\<leftarrow> tmp7 . assignedNodes();\n  assert_array_equals(tmp8, []);\n  tmp9 \\<leftarrow> n . ''s2'';\n  tmp10 \\<leftarrow> tmp9 . assignedNodes();\n  tmp11 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp10, [tmp11]);\n  tmp12 \\<leftarrow> n . ''s1'';\n  tmp13 \\<leftarrow> tmp12 . assignedNodes(True);\n  tmp14 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp13, [tmp14]);\n  tmp15 \\<leftarrow> n . ''s2'';\n  tmp16 \\<leftarrow> tmp15 . assignedNodes(True);\n  tmp17 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp16, [tmp17])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test4'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''test4'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind\n                      (removeWhiteSpaceOnlyTextNodes tmp1)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind (n . ''c1'')\n                           (\\<lambda>tmp2.\n                               Heap_Error_Monad.bind tmp2 . assignedSlot\n                                (\\<lambda>tmp3.\n                                    Heap_Error_Monad.bind (n . ''s2'')\n                                     (\\<lambda>tmp4.\n   Heap_Error_Monad.bind assert_array_equals(tmp3, tmp4)\n    (\\<lambda>_.\n        Heap_Error_Monad.bind (n . ''f1'')\n         (\\<lambda>tmp5.\n             Heap_Error_Monad.bind tmp5 . assignedSlot\n              (\\<lambda>tmp6.\n                  Heap_Error_Monad.bind assert_array_equals(tmp6, None)\n                   (\\<lambda>_.\n                       Heap_Error_Monad.bind (n . ''s1'')\n                        (\\<lambda>tmp7.\n                            Heap_Error_Monad.bind tmp7 . assignedNodes()\n                             (\\<lambda>tmp8.\n                                 Heap_Error_Monad.bind\n                                  assert_array_equals(tmp8, [])\n                                  (\\<lambda>_.\nHeap_Error_Monad.bind (n . ''s2'')\n (\\<lambda>tmp9.\n     Heap_Error_Monad.bind tmp9 . assignedNodes()\n      (\\<lambda>tmp10.\n          Heap_Error_Monad.bind (n . ''c1'')\n           (\\<lambda>tmp11.\n               Heap_Error_Monad.bind assert_array_equals(tmp10, [tmp11])\n                (\\<lambda>_.\n                    Heap_Error_Monad.bind (n . ''s1'')\n                     (\\<lambda>tmp12.\n                         Heap_Error_Monad.bind tmp12 . assignedNodes(True)\n                          (\\<lambda>tmp13.\n                              Heap_Error_Monad.bind (n . ''c1'')\n                               (\\<lambda>tmp14.\n                                   Heap_Error_Monad.bind\n                                    assert_array_equals(tmp13, [tmp14])\n                                    (\\<lambda>_.\n  Heap_Error_Monad.bind (n . ''s2'')\n   (\\<lambda>tmp15.\n       Heap_Error_Monad.bind tmp15 . assignedNodes(True)\n        (\\<lambda>tmp16.\n            Heap_Error_Monad.bind (n . ''c1'')\n             (\\<lambda>tmp17.\n                 assert_array_equals(tmp16, [tmp17])))))))))))))))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Complex case.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''s1'';\n  tmp3 \\<leftarrow> tmp2 . assignedNodes();\n  tmp4 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp3, [tmp4]);\n  tmp5 \\<leftarrow> n . ''s2'';\n  tmp6 \\<leftarrow> tmp5 . assignedNodes();\n  assert_array_equals(tmp6, []);\n  tmp7 \\<leftarrow> n . ''s3'';\n  tmp8 \\<leftarrow> tmp7 . assignedNodes();\n  tmp9 \\<leftarrow> n . ''s2'';\n  assert_array_equals(tmp8, [tmp9]);\n  tmp10 \\<leftarrow> n . ''s4'';\n  tmp11 \\<leftarrow> tmp10 . assignedNodes();\n  assert_array_equals(tmp11, []);\n  tmp12 \\<leftarrow> n . ''s1'';\n  tmp13 \\<leftarrow> tmp12 . assignedNodes(True);\n  tmp14 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp13, [tmp14]);\n  tmp15 \\<leftarrow> n . ''s2'';\n  tmp16 \\<leftarrow> tmp15 . assignedNodes(True);\n  tmp17 \\<leftarrow> n . ''c1'';\n  tmp18 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp16, [tmp17, tmp18]);\n  tmp19 \\<leftarrow> n . ''s3'';\n  tmp20 \\<leftarrow> tmp19 . assignedNodes(True);\n  tmp21 \\<leftarrow> n . ''c1'';\n  tmp22 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp20, [tmp21, tmp22]);\n  tmp23 \\<leftarrow> n . ''s4'';\n  tmp24 \\<leftarrow> tmp23 . assignedNodes(True);\n  tmp25 \\<leftarrow> n . ''c1'';\n  tmp26 \\<leftarrow> n . ''f2'';\n  tmp27 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp24, [tmp25, tmp26, tmp27])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test5'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''test5'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind\n                      (removeWhiteSpaceOnlyTextNodes tmp1)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind (n . ''s1'')\n                           (\\<lambda>tmp2.\n                               Heap_Error_Monad.bind tmp2 . assignedNodes()\n                                (\\<lambda>tmp3.\n                                    Heap_Error_Monad.bind (n . ''c1'')\n                                     (\\<lambda>tmp4.\n   Heap_Error_Monad.bind assert_array_equals(tmp3, [tmp4])\n    (\\<lambda>_.\n        Heap_Error_Monad.bind (n . ''s2'')\n         (\\<lambda>tmp5.\n             Heap_Error_Monad.bind tmp5 . assignedNodes()\n              (\\<lambda>tmp6.\n                  Heap_Error_Monad.bind assert_array_equals(tmp6, [])\n                   (\\<lambda>_.\n                       Heap_Error_Monad.bind (n . ''s3'')\n                        (\\<lambda>tmp7.\n                            Heap_Error_Monad.bind tmp7 . assignedNodes()\n                             (\\<lambda>tmp8.\n                                 Heap_Error_Monad.bind (n . ''s2'')\n                                  (\\<lambda>tmp9.\nHeap_Error_Monad.bind assert_array_equals(tmp8, [tmp9])\n (\\<lambda>_.\n     Heap_Error_Monad.bind (n . ''s4'')\n      (\\<lambda>tmp10.\n          Heap_Error_Monad.bind tmp10 . assignedNodes()\n           (\\<lambda>tmp11.\n               Heap_Error_Monad.bind assert_array_equals(tmp11, [])\n                (\\<lambda>_.\n                    Heap_Error_Monad.bind (n . ''s1'')\n                     (\\<lambda>tmp12.\n                         Heap_Error_Monad.bind tmp12 . assignedNodes(True)\n                          (\\<lambda>tmp13.\n                              Heap_Error_Monad.bind (n . ''c1'')\n                               (\\<lambda>tmp14.\n                                   Heap_Error_Monad.bind\n                                    assert_array_equals(tmp13, [tmp14])\n                                    (\\<lambda>_.\n  Heap_Error_Monad.bind (n . ''s2'')\n   (\\<lambda>tmp15.\n       Heap_Error_Monad.bind tmp15 . assignedNodes(True)\n        (\\<lambda>tmp16.\n            Heap_Error_Monad.bind (n . ''c1'')\n             (\\<lambda>tmp17.\n                 Heap_Error_Monad.bind (n . ''f2'')\n                  (\\<lambda>tmp18.\n                      Heap_Error_Monad.bind\n                       assert_array_equals(tmp16, [tmp17, tmp18])\n                       (\\<lambda>_.\n                           Heap_Error_Monad.bind (n . ''s3'')\n                            (\\<lambda>tmp19.\n                                Heap_Error_Monad.bind\n                                 tmp19 . assignedNodes(True)\n                                 (\\<lambda>tmp20.\n                                     Heap_Error_Monad.bind (n . ''c1'')\n(\\<lambda>tmp21.\n    Heap_Error_Monad.bind (n . ''f2'')\n     (\\<lambda>tmp22.\n         Heap_Error_Monad.bind assert_array_equals(tmp20, [tmp21, tmp22])\n          (\\<lambda>_.\n              Heap_Error_Monad.bind (n . ''s4'')\n               (\\<lambda>tmp23.\n                   Heap_Error_Monad.bind tmp23 . assignedNodes(True)\n                    (\\<lambda>tmp24.\n                        Heap_Error_Monad.bind (n . ''c1'')\n                         (\\<lambda>tmp25.\n                             Heap_Error_Monad.bind (n . ''f2'')\n                              (\\<lambda>tmp26.\n                                  Heap_Error_Monad.bind (n . ''f4'')\n                                   (\\<lambda>tmp27.\n assert_array_equals(tmp24, [tmp25, tmp26,\n                             tmp27])))))))))))))))))))))))))))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Complex case, elements only.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''s1'';\n  tmp2 \\<leftarrow> tmp1 . assignedElements();\n  tmp3 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp2, [tmp3]);\n  tmp4 \\<leftarrow> n . ''s2'';\n  tmp5 \\<leftarrow> tmp4 . assignedElements();\n  assert_array_equals(tmp5, []);\n  tmp6 \\<leftarrow> n . ''s3'';\n  tmp7 \\<leftarrow> tmp6 . assignedElements();\n  tmp8 \\<leftarrow> n . ''s2'';\n  assert_array_equals(tmp7, [tmp8]);\n  tmp9 \\<leftarrow> n . ''s4'';\n  tmp10 \\<leftarrow> tmp9 . assignedElements();\n  assert_array_equals(tmp10, []);\n  tmp11 \\<leftarrow> n . ''s1'';\n  tmp12 \\<leftarrow> tmp11 . assignedElements(True);\n  tmp13 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp12, [tmp13]);\n  tmp14 \\<leftarrow> n . ''s2'';\n  tmp15 \\<leftarrow> tmp14 . assignedElements(True);\n  tmp16 \\<leftarrow> n . ''c1'';\n  tmp17 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp15, [tmp16, tmp17]);\n  tmp18 \\<leftarrow> n . ''s3'';\n  tmp19 \\<leftarrow> tmp18 . assignedElements(True);\n  tmp20 \\<leftarrow> n . ''c1'';\n  tmp21 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp19, [tmp20, tmp21]);\n  tmp22 \\<leftarrow> n . ''s4'';\n  tmp23 \\<leftarrow> tmp22 . assignedElements(True);\n  tmp24 \\<leftarrow> n . ''c1'';\n  tmp25 \\<leftarrow> n . ''f2'';\n  tmp26 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp23, [tmp24, tmp25, tmp26])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test5'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''s1'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind tmp1 . assignedElements()\n                      (\\<lambda>tmp2.\n                          Heap_Error_Monad.bind (n . ''c1'')\n                           (\\<lambda>tmp3.\n                               Heap_Error_Monad.bind\n                                assert_array_equals(tmp2, [tmp3])\n                                (\\<lambda>_.\n                                    Heap_Error_Monad.bind (n . ''s2'')\n                                     (\\<lambda>tmp4.\n   Heap_Error_Monad.bind tmp4 . assignedElements()\n    (\\<lambda>tmp5.\n        Heap_Error_Monad.bind assert_array_equals(tmp5, [])\n         (\\<lambda>_.\n             Heap_Error_Monad.bind (n . ''s3'')\n              (\\<lambda>tmp6.\n                  Heap_Error_Monad.bind tmp6 . assignedElements()\n                   (\\<lambda>tmp7.\n                       Heap_Error_Monad.bind (n . ''s2'')\n                        (\\<lambda>tmp8.\n                            Heap_Error_Monad.bind\n                             assert_array_equals(tmp7, [tmp8])\n                             (\\<lambda>_.\n                                 Heap_Error_Monad.bind (n . ''s4'')\n                                  (\\<lambda>tmp9.\nHeap_Error_Monad.bind tmp9 . assignedElements()\n (\\<lambda>tmp10.\n     Heap_Error_Monad.bind assert_array_equals(tmp10, [])\n      (\\<lambda>_.\n          Heap_Error_Monad.bind (n . ''s1'')\n           (\\<lambda>tmp11.\n               Heap_Error_Monad.bind tmp11 . assignedElements(True)\n                (\\<lambda>tmp12.\n                    Heap_Error_Monad.bind (n . ''c1'')\n                     (\\<lambda>tmp13.\n                         Heap_Error_Monad.bind\n                          assert_array_equals(tmp12, [tmp13])\n                          (\\<lambda>_.\n                              Heap_Error_Monad.bind (n . ''s2'')\n                               (\\<lambda>tmp14.\n                                   Heap_Error_Monad.bind\n                                    tmp14 . assignedElements(True)\n                                    (\\<lambda>tmp15.\n  Heap_Error_Monad.bind (n . ''c1'')\n   (\\<lambda>tmp16.\n       Heap_Error_Monad.bind (n . ''f2'')\n        (\\<lambda>tmp17.\n            Heap_Error_Monad.bind assert_array_equals(tmp15, [tmp16, tmp17])\n             (\\<lambda>_.\n                 Heap_Error_Monad.bind (n . ''s3'')\n                  (\\<lambda>tmp18.\n                      Heap_Error_Monad.bind tmp18 . assignedElements(True)\n                       (\\<lambda>tmp19.\n                           Heap_Error_Monad.bind (n . ''c1'')\n                            (\\<lambda>tmp20.\n                                Heap_Error_Monad.bind (n . ''f2'')\n                                 (\\<lambda>tmp21.\n                                     Heap_Error_Monad.bind\nassert_array_equals(tmp19, [tmp20, tmp21])\n(\\<lambda>_.\n    Heap_Error_Monad.bind (n . ''s4'')\n     (\\<lambda>tmp22.\n         Heap_Error_Monad.bind tmp22 . assignedElements(True)\n          (\\<lambda>tmp23.\n              Heap_Error_Monad.bind (n . ''c1'')\n               (\\<lambda>tmp24.\n                   Heap_Error_Monad.bind (n . ''f2'')\n                    (\\<lambda>tmp25.\n                        Heap_Error_Monad.bind (n . ''f4'')\n                         (\\<lambda>tmp26.\n                             assert_array_equals(tmp23, [tmp24, tmp25,\n                   tmp26])))))))))))))))))))))))))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Mutation. Append fallback contents.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  d1 \\<leftarrow> slots_fallback_document . createElement(''div'');\n  tmp2 \\<leftarrow> n . ''s2'';\n  tmp2 . appendChild(d1);\n  tmp3 \\<leftarrow> n . ''s1'';\n  tmp4 \\<leftarrow> tmp3 . assignedNodes(True);\n  tmp5 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp4, [tmp5]);\n  tmp6 \\<leftarrow> n . ''s2'';\n  tmp7 \\<leftarrow> tmp6 . assignedNodes(True);\n  tmp8 \\<leftarrow> n . ''c1'';\n  tmp9 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp7, [tmp8, tmp9, d1]);\n  tmp10 \\<leftarrow> n . ''s3'';\n  tmp11 \\<leftarrow> tmp10 . assignedNodes(True);\n  tmp12 \\<leftarrow> n . ''c1'';\n  tmp13 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp11, [tmp12, tmp13, d1]);\n  tmp14 \\<leftarrow> n . ''s4'';\n  tmp15 \\<leftarrow> tmp14 . assignedNodes(True);\n  tmp16 \\<leftarrow> n . ''c1'';\n  tmp17 \\<leftarrow> n . ''f2'';\n  tmp18 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp15, [tmp16, tmp17, d1, tmp18])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test5'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''test5'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind\n                      (removeWhiteSpaceOnlyTextNodes tmp1)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind\n                           slots_fallback_document . createElement(''div'')\n                           (\\<lambda>d1.\n                               Heap_Error_Monad.bind (n . ''s2'')\n                                (\\<lambda>tmp2.\n                                    Heap_Error_Monad.bind\n                                     tmp2 . appendChild(d1)\n                                     (\\<lambda>_.\n   Heap_Error_Monad.bind (n . ''s1'')\n    (\\<lambda>tmp3.\n        Heap_Error_Monad.bind tmp3 . assignedNodes(True)\n         (\\<lambda>tmp4.\n             Heap_Error_Monad.bind (n . ''c1'')\n              (\\<lambda>tmp5.\n                  Heap_Error_Monad.bind assert_array_equals(tmp4, [tmp5])\n                   (\\<lambda>_.\n                       Heap_Error_Monad.bind (n . ''s2'')\n                        (\\<lambda>tmp6.\n                            Heap_Error_Monad.bind tmp6 . assignedNodes(True)\n                             (\\<lambda>tmp7.\n                                 Heap_Error_Monad.bind (n . ''c1'')\n                                  (\\<lambda>tmp8.\nHeap_Error_Monad.bind (n . ''f2'')\n (\\<lambda>tmp9.\n     Heap_Error_Monad.bind assert_array_equals(tmp7, [tmp8, tmp9, d1])\n      (\\<lambda>_.\n          Heap_Error_Monad.bind (n . ''s3'')\n           (\\<lambda>tmp10.\n               Heap_Error_Monad.bind tmp10 . assignedNodes(True)\n                (\\<lambda>tmp11.\n                    Heap_Error_Monad.bind (n . ''c1'')\n                     (\\<lambda>tmp12.\n                         Heap_Error_Monad.bind (n . ''f2'')\n                          (\\<lambda>tmp13.\n                              Heap_Error_Monad.bind\n                               assert_array_equals(tmp11, [tmp12, tmp13,\n                     d1])\n                               (\\<lambda>_.\n                                   Heap_Error_Monad.bind (n . ''s4'')\n                                    (\\<lambda>tmp14.\n  Heap_Error_Monad.bind tmp14 . assignedNodes(True)\n   (\\<lambda>tmp15.\n       Heap_Error_Monad.bind (n . ''c1'')\n        (\\<lambda>tmp16.\n            Heap_Error_Monad.bind (n . ''f2'')\n             (\\<lambda>tmp17.\n                 Heap_Error_Monad.bind (n . ''f4'')\n                  (\\<lambda>tmp18.\n                      assert_array_equals(tmp15, [tmp16, tmp17, d1,\n            tmp18]))))))))))))))))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Mutation. Remove fallback contents.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''f2'';\n  tmp2 . remove();\n  tmp3 \\<leftarrow> n . ''s1'';\n  tmp4 \\<leftarrow> tmp3 . assignedNodes(True);\n  tmp5 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp4, [tmp5]);\n  tmp6 \\<leftarrow> n . ''s2'';\n  tmp7 \\<leftarrow> tmp6 . assignedNodes(True);\n  tmp8 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp7, [tmp8]);\n  tmp9 \\<leftarrow> n . ''s3'';\n  tmp10 \\<leftarrow> tmp9 . assignedNodes(True);\n  tmp11 \\<leftarrow> n . ''c1'';\n  assert_array_equals(tmp10, [tmp11]);\n  tmp12 \\<leftarrow> n . ''s4'';\n  tmp13 \\<leftarrow> tmp12 . assignedNodes(True);\n  tmp14 \\<leftarrow> n . ''c1'';\n  tmp15 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp13, [tmp14, tmp15])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test5'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''test5'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind\n                      (removeWhiteSpaceOnlyTextNodes tmp1)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind (n . ''f2'')\n                           (\\<lambda>tmp2.\n                               Heap_Error_Monad.bind tmp2 . remove()\n                                (\\<lambda>_.\n                                    Heap_Error_Monad.bind (n . ''s1'')\n                                     (\\<lambda>tmp3.\n   Heap_Error_Monad.bind tmp3 . assignedNodes(True)\n    (\\<lambda>tmp4.\n        Heap_Error_Monad.bind (n . ''c1'')\n         (\\<lambda>tmp5.\n             Heap_Error_Monad.bind assert_array_equals(tmp4, [tmp5])\n              (\\<lambda>_.\n                  Heap_Error_Monad.bind (n . ''s2'')\n                   (\\<lambda>tmp6.\n                       Heap_Error_Monad.bind tmp6 . assignedNodes(True)\n                        (\\<lambda>tmp7.\n                            Heap_Error_Monad.bind (n . ''c1'')\n                             (\\<lambda>tmp8.\n                                 Heap_Error_Monad.bind\n                                  assert_array_equals(tmp7, [tmp8])\n                                  (\\<lambda>_.\nHeap_Error_Monad.bind (n . ''s3'')\n (\\<lambda>tmp9.\n     Heap_Error_Monad.bind tmp9 . assignedNodes(True)\n      (\\<lambda>tmp10.\n          Heap_Error_Monad.bind (n . ''c1'')\n           (\\<lambda>tmp11.\n               Heap_Error_Monad.bind assert_array_equals(tmp10, [tmp11])\n                (\\<lambda>_.\n                    Heap_Error_Monad.bind (n . ''s4'')\n                     (\\<lambda>tmp12.\n                         Heap_Error_Monad.bind tmp12 . assignedNodes(True)\n                          (\\<lambda>tmp13.\n                              Heap_Error_Monad.bind (n . ''c1'')\n                               (\\<lambda>tmp14.\n                                   Heap_Error_Monad.bind (n . ''f4'')\n                                    (\\<lambda>tmp15.\n  assert_array_equals(tmp13, [tmp14, tmp15]))))))))))))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Mutation. Assign a node to a slot so that fallback contens are no longer used.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  d2 \\<leftarrow> slots_fallback_document . createElement(''div'');\n  d2 . setAttribute(''slot'', ''slot2'');\n  tmp2 \\<leftarrow> n . ''host1'';\n  tmp2 . appendChild(d2);\n  tmp3 \\<leftarrow> n . ''s2'';\n  tmp4 \\<leftarrow> tmp3 . assignedNodes();\n  assert_array_equals(tmp4, [d2]);\n  tmp5 \\<leftarrow> n . ''s2'';\n  tmp6 \\<leftarrow> tmp5 . assignedNodes(True);\n  assert_array_equals(tmp6, [d2]);\n  tmp7 \\<leftarrow> n . ''s3'';\n  tmp8 \\<leftarrow> tmp7 . assignedNodes(True);\n  assert_array_equals(tmp8, [d2]);\n  tmp9 \\<leftarrow> n . ''s4'';\n  tmp10 \\<leftarrow> tmp9 . assignedNodes(True);\n  tmp11 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp10, [d2, tmp11])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test5'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''test5'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind\n                      (removeWhiteSpaceOnlyTextNodes tmp1)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind\n                           slots_fallback_document . createElement(''div'')\n                           (\\<lambda>d2.\n                               Heap_Error_Monad.bind\n                                d2 . setAttribute(''slot'', ''slot2'')\n                                (\\<lambda>_.\n                                    Heap_Error_Monad.bind (n . ''host1'')\n                                     (\\<lambda>tmp2.\n   Heap_Error_Monad.bind tmp2 . appendChild(d2)\n    (\\<lambda>_.\n        Heap_Error_Monad.bind (n . ''s2'')\n         (\\<lambda>tmp3.\n             Heap_Error_Monad.bind tmp3 . assignedNodes()\n              (\\<lambda>tmp4.\n                  Heap_Error_Monad.bind assert_array_equals(tmp4, [d2])\n                   (\\<lambda>_.\n                       Heap_Error_Monad.bind (n . ''s2'')\n                        (\\<lambda>tmp5.\n                            Heap_Error_Monad.bind tmp5 . assignedNodes(True)\n                             (\\<lambda>tmp6.\n                                 Heap_Error_Monad.bind\n                                  assert_array_equals(tmp6, [d2])\n                                  (\\<lambda>_.\nHeap_Error_Monad.bind (n . ''s3'')\n (\\<lambda>tmp7.\n     Heap_Error_Monad.bind tmp7 . assignedNodes(True)\n      (\\<lambda>tmp8.\n          Heap_Error_Monad.bind assert_array_equals(tmp8, [d2])\n           (\\<lambda>_.\n               Heap_Error_Monad.bind (n . ''s4'')\n                (\\<lambda>tmp9.\n                    Heap_Error_Monad.bind tmp9 . assignedNodes(True)\n                     (\\<lambda>tmp10.\n                         Heap_Error_Monad.bind (n . ''f4'')\n                          (\\<lambda>tmp11.\n                              assert_array_equals(tmp10, [d2,\n                    tmp11]))))))))))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Mutation. Remove an assigned node from a slot so that fallback contens will be used.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''c1'';\n  tmp2 . remove();\n  tmp3 \\<leftarrow> n . ''s1'';\n  tmp4 \\<leftarrow> tmp3 . assignedNodes();\n  assert_array_equals(tmp4, []);\n  tmp5 \\<leftarrow> n . ''s1'';\n  tmp6 \\<leftarrow> tmp5 . assignedNodes(True);\n  tmp7 \\<leftarrow> n . ''f1'';\n  assert_array_equals(tmp6, [tmp7]);\n  tmp8 \\<leftarrow> n . ''s2'';\n  tmp9 \\<leftarrow> tmp8 . assignedNodes(True);\n  tmp10 \\<leftarrow> n . ''f1'';\n  tmp11 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp9, [tmp10, tmp11]);\n  tmp12 \\<leftarrow> n . ''s3'';\n  tmp13 \\<leftarrow> tmp12 . assignedNodes(True);\n  tmp14 \\<leftarrow> n . ''f1'';\n  tmp15 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp13, [tmp14, tmp15]);\n  tmp16 \\<leftarrow> n . ''s4'';\n  tmp17 \\<leftarrow> tmp16 . assignedNodes(True);\n  tmp18 \\<leftarrow> n . ''f1'';\n  tmp19 \\<leftarrow> n . ''f2'';\n  tmp20 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp17, [tmp18, tmp19, tmp20])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test5'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''test5'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind\n                      (removeWhiteSpaceOnlyTextNodes tmp1)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind (n . ''c1'')\n                           (\\<lambda>tmp2.\n                               Heap_Error_Monad.bind tmp2 . remove()\n                                (\\<lambda>_.\n                                    Heap_Error_Monad.bind (n . ''s1'')\n                                     (\\<lambda>tmp3.\n   Heap_Error_Monad.bind tmp3 . assignedNodes()\n    (\\<lambda>tmp4.\n        Heap_Error_Monad.bind assert_array_equals(tmp4, [])\n         (\\<lambda>_.\n             Heap_Error_Monad.bind (n . ''s1'')\n              (\\<lambda>tmp5.\n                  Heap_Error_Monad.bind tmp5 . assignedNodes(True)\n                   (\\<lambda>tmp6.\n                       Heap_Error_Monad.bind (n . ''f1'')\n                        (\\<lambda>tmp7.\n                            Heap_Error_Monad.bind\n                             assert_array_equals(tmp6, [tmp7])\n                             (\\<lambda>_.\n                                 Heap_Error_Monad.bind (n . ''s2'')\n                                  (\\<lambda>tmp8.\nHeap_Error_Monad.bind tmp8 . assignedNodes(True)\n (\\<lambda>tmp9.\n     Heap_Error_Monad.bind (n . ''f1'')\n      (\\<lambda>tmp10.\n          Heap_Error_Monad.bind (n . ''f2'')\n           (\\<lambda>tmp11.\n               Heap_Error_Monad.bind\n                assert_array_equals(tmp9, [tmp10, tmp11])\n                (\\<lambda>_.\n                    Heap_Error_Monad.bind (n . ''s3'')\n                     (\\<lambda>tmp12.\n                         Heap_Error_Monad.bind tmp12 . assignedNodes(True)\n                          (\\<lambda>tmp13.\n                              Heap_Error_Monad.bind (n . ''f1'')\n                               (\\<lambda>tmp14.\n                                   Heap_Error_Monad.bind (n . ''f2'')\n                                    (\\<lambda>tmp15.\n  Heap_Error_Monad.bind assert_array_equals(tmp13, [tmp14, tmp15])\n   (\\<lambda>_.\n       Heap_Error_Monad.bind (n . ''s4'')\n        (\\<lambda>tmp16.\n            Heap_Error_Monad.bind tmp16 . assignedNodes(True)\n             (\\<lambda>tmp17.\n                 Heap_Error_Monad.bind (n . ''f1'')\n                  (\\<lambda>tmp18.\n                      Heap_Error_Monad.bind (n . ''f2'')\n                       (\\<lambda>tmp19.\n                           Heap_Error_Monad.bind (n . ''f4'')\n                            (\\<lambda>tmp20.\n                                assert_array_equals(tmp17, [tmp18, tmp19,\n                      tmp20]))))))))))))))))))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "text \\<open>'Slots fallback: Mutation.  Remove a slot which is a fallback content of another slot.'\\<close>"], ["", "lemma \"test (do {\n  tmp0 \\<leftarrow> slots_fallback_document . getElementById(''test5'');\n  n \\<leftarrow> createTestTree(tmp0);\n  tmp1 \\<leftarrow> n . ''test5'';\n  removeWhiteSpaceOnlyTextNodes(tmp1);\n  tmp2 \\<leftarrow> n . ''s1'';\n  tmp2 . remove();\n  tmp3 \\<leftarrow> n . ''s1'';\n  tmp4 \\<leftarrow> tmp3 . assignedNodes();\n  assert_array_equals(tmp4, []);\n  tmp5 \\<leftarrow> n . ''s1'';\n  tmp6 \\<leftarrow> tmp5 . assignedNodes(True);\n  assert_array_equals(tmp6, [], ''fall back contents should be empty because s1 is not in a shadow tree.'');\n  tmp7 \\<leftarrow> n . ''s2'';\n  tmp8 \\<leftarrow> tmp7 . assignedNodes(True);\n  tmp9 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp8, [tmp9]);\n  tmp10 \\<leftarrow> n . ''s3'';\n  tmp11 \\<leftarrow> tmp10 . assignedNodes(True);\n  tmp12 \\<leftarrow> n . ''f2'';\n  assert_array_equals(tmp11, [tmp12]);\n  tmp13 \\<leftarrow> n . ''s4'';\n  tmp14 \\<leftarrow> tmp13 . assignedNodes(True);\n  tmp15 \\<leftarrow> n . ''f2'';\n  tmp16 \\<leftarrow> n . ''f4'';\n  assert_array_equals(tmp14, [tmp15, tmp16])\n}) slots_fallback_heap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test\n     (Heap_Error_Monad.bind\n       slots_fallback_document . getElementById(''test5'')\n       (\\<lambda>tmp0.\n           Heap_Error_Monad.bind (createTestTree tmp0)\n            (\\<lambda>n.\n                Heap_Error_Monad.bind (n . ''test5'')\n                 (\\<lambda>tmp1.\n                     Heap_Error_Monad.bind\n                      (removeWhiteSpaceOnlyTextNodes tmp1)\n                      (\\<lambda>_.\n                          Heap_Error_Monad.bind (n . ''s1'')\n                           (\\<lambda>tmp2.\n                               Heap_Error_Monad.bind tmp2 . remove()\n                                (\\<lambda>_.\n                                    Heap_Error_Monad.bind (n . ''s1'')\n                                     (\\<lambda>tmp3.\n   Heap_Error_Monad.bind tmp3 . assignedNodes()\n    (\\<lambda>tmp4.\n        Heap_Error_Monad.bind assert_array_equals(tmp4, [])\n         (\\<lambda>_.\n             Heap_Error_Monad.bind (n . ''s1'')\n              (\\<lambda>tmp5.\n                  Heap_Error_Monad.bind tmp5 . assignedNodes(True)\n                   (\\<lambda>tmp6.\n                       Heap_Error_Monad.bind\n                        assert_array_equals(tmp6, [], ''fall back contents should be empty because s1 is not in a shadow tree.'')\n                        (\\<lambda>_.\n                            Heap_Error_Monad.bind (n . ''s2'')\n                             (\\<lambda>tmp7.\n                                 Heap_Error_Monad.bind\n                                  tmp7 . assignedNodes(True)\n                                  (\\<lambda>tmp8.\nHeap_Error_Monad.bind (n . ''f2'')\n (\\<lambda>tmp9.\n     Heap_Error_Monad.bind assert_array_equals(tmp8, [tmp9])\n      (\\<lambda>_.\n          Heap_Error_Monad.bind (n . ''s3'')\n           (\\<lambda>tmp10.\n               Heap_Error_Monad.bind tmp10 . assignedNodes(True)\n                (\\<lambda>tmp11.\n                    Heap_Error_Monad.bind (n . ''f2'')\n                     (\\<lambda>tmp12.\n                         Heap_Error_Monad.bind\n                          assert_array_equals(tmp11, [tmp12])\n                          (\\<lambda>_.\n                              Heap_Error_Monad.bind (n . ''s4'')\n                               (\\<lambda>tmp13.\n                                   Heap_Error_Monad.bind\n                                    tmp13 . assignedNodes(True)\n                                    (\\<lambda>tmp14.\n  Heap_Error_Monad.bind (n . ''f2'')\n   (\\<lambda>tmp15.\n       Heap_Error_Monad.bind (n . ''f4'')\n        (\\<lambda>tmp16.\n            assert_array_equals(tmp14, [tmp15,\n  tmp16]))))))))))))))))))))))))))\n     slots_fallback_heap", "by eval"], ["", "end"]]}