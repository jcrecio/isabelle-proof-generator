{"file_name": "/home/qj213/afp-2021-10-22/thys/Complex_Bounded_Operators/extra/Extra_Jordan_Normal_Form.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Complex_Bounded_Operators", "problem_names": ["lemma mat_entry_explicit:\n  fixes M :: \"'a::field mat\"\n  assumes \"M \\<in> carrier_mat m n\" and \"i < m\" and \"j < n\"\n  shows   \"vec_index (M *\\<^sub>v unit_vec n j) i = M $$ (i,j)\"", "lemma mat_adjoint_def': \"mat_adjoint M = transpose_mat (map_mat conjugate M)\"", "lemma mat_adjoint_swap:\n  fixes M ::\"complex mat\"\n  assumes \"M \\<in> carrier_mat nB nA\" and \"iA < dim_row M\" and \"iB < dim_col M\"\n  shows \"(mat_adjoint M)$$(iB,iA) = cnj (M$$(iA,iB))\"", "lemma cscalar_prod_adjoint:\n  fixes M:: \"complex mat\"\n  assumes \"M \\<in> carrier_mat nB nA\" \n    and \"dim_vec v = nA\"\n    and \"dim_vec u = nB\"\n  shows \"v \\<bullet>c ((mat_adjoint M) *\\<^sub>v u) = (M *\\<^sub>v v) \\<bullet>c u\"", "lemma scaleC_minus1_left_vec: \"-1 \\<cdot>\\<^sub>v v = - v\" for v :: \"_::ring_1 vec\"", "lemma square_nneg_complex:\n  fixes x :: complex\n  assumes \"x \\<in> \\<real>\" shows \"x^2 \\<ge> 0\"", "lemma vec_is_zero: \"dim_vec v = n \\<Longrightarrow> vec_is_zero n v \\<longleftrightarrow> v = 0\\<^sub>v n\"", "lemma (in cof_vec_space) adjuster_already_in_span:\n  assumes \"w \\<in> carrier_vec n\"\n  assumes us_carrier: \"set us \\<subseteq> carrier_vec n\"\n  assumes \"corthogonal us\"\n  assumes \"w \\<in> span (set us)\"\n  shows \"adjuster n w us + w = 0\\<^sub>v n\"", "lemma (in cof_vec_space) gram_schmidt_sub0_result:\n  assumes \"gram_schmidt_sub0 n us ws = us'\"\n    and \"set ws \\<subseteq> carrier_vec n\"\n    and \"set us \\<subseteq> carrier_vec n\"\n    and \"distinct us\"\n    and \"~ lin_dep (set us)\"\n    and \"corthogonal us\"\n  shows \"set us' \\<subseteq> carrier_vec n \\<and>\n         distinct us' \\<and>\n         corthogonal us' \\<and>\n         span (set (us @ ws)) = span (set us')\"", "lemma (in cof_vec_space) gram_schmidt0_result:\n  fixes ws\n  defines \"us' \\<equiv> gram_schmidt0 n ws\"\n  assumes ws: \"set ws \\<subseteq> carrier_vec n\"\n  shows \"set us' \\<subseteq> carrier_vec n\"        (is ?thesis1)\n    and \"distinct us'\"                    (is ?thesis2)\n    and \"corthogonal us'\"                 (is ?thesis3)\n    and \"span (set ws) = span (set us')\"  (is ?thesis4)", "lemma gram_schmidt0_corthogonal:\n  assumes a1: \"corthogonal R\" \n    and a2: \"\\<And>x. x \\<in> set R \\<Longrightarrow> dim_vec x = d\"\n  shows \"gram_schmidt0 d R = rev R\"", "lemma adjuster_carrier': (* Like adjuster_carrier but with one assm less *)\n  assumes w: \"(w :: 'a::conjugatable_field vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n  shows \"adjuster n w us \\<in> carrier_vec n\"", "lemma eq_mat_on_vecI:\n  fixes M N :: \\<open>'a::field mat\\<close>\n  assumes eq: \\<open>\\<And>v. v\\<in>carrier_vec nA \\<Longrightarrow> M *\\<^sub>v v = N *\\<^sub>v v\\<close>\n  assumes [simp]: \\<open>M \\<in> carrier_mat nB nA\\<close> \\<open>N \\<in> carrier_mat nB nA\\<close>\n  shows \\<open>M = N\\<close>", "lemma list_of_vec_plus:\n  fixes v1 v2 :: \\<open>complex vec\\<close>\n  assumes \\<open>dim_vec v1 = dim_vec v2\\<close>\n  shows \\<open>list_of_vec (v1 + v2) = map2 (+) (list_of_vec v1) (list_of_vec v2)\\<close>", "lemma list_of_vec_mult:\n  fixes v :: \\<open>complex vec\\<close>\n  shows \\<open>list_of_vec (c \\<cdot>\\<^sub>v v) = map ((*) c) (list_of_vec v)\\<close>"], "translations": [["", "lemma mat_entry_explicit:\n  fixes M :: \"'a::field mat\"\n  assumes \"M \\<in> carrier_mat m n\" and \"i < m\" and \"j < n\"\n  shows   \"vec_index (M *\\<^sub>v unit_vec n j) i = M $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M *\\<^sub>v unit_vec n j) $ i = M $$ (i, j)", "using assms"], ["proof (prove)\nusing this:\n  M \\<in> carrier_mat m n\n  i < m\n  j < n\n\ngoal (1 subgoal):\n 1. (M *\\<^sub>v unit_vec n j) $ i = M $$ (i, j)", "by auto"], ["", "lemma mat_adjoint_def': \"mat_adjoint M = transpose_mat (map_mat conjugate M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adjoint M = (map_mat conjugate M)\\<^sup>T", "apply (rule mat_eq_iff[THEN iffD2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (mat_adjoint M) = dim_row (map_mat conjugate M)\\<^sup>T \\<and>\n    dim_col (mat_adjoint M) = dim_col (map_mat conjugate M)\\<^sup>T \\<and>\n    (\\<forall>i j.\n        i < dim_row (map_mat conjugate M)\\<^sup>T \\<longrightarrow>\n        j < dim_col (map_mat conjugate M)\\<^sup>T \\<longrightarrow>\n        mat_adjoint M $$ (i, j) = (map_mat conjugate M)\\<^sup>T $$ (i, j))", "apply (auto simp: mat_adjoint_def transpose_mat_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col M; j < dim_row M\\<rbrakk>\n       \\<Longrightarrow> mat_of_rows (dim_row M) (map conjugate (cols M)) $$\n                         (i, j) =\n                         conjugate (M $$ (j, i))", "apply (subst mat_of_rows_index)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_col M; j < dim_row M\\<rbrakk>\n       \\<Longrightarrow> i < length (map conjugate (cols M))\n 2. \\<And>i j.\n       \\<lbrakk>i < dim_col M; j < dim_row M\\<rbrakk>\n       \\<Longrightarrow> j < dim_row M\n 3. \\<And>i j.\n       \\<lbrakk>i < dim_col M; j < dim_row M\\<rbrakk>\n       \\<Longrightarrow> map conjugate (cols M) ! i $ j =\n                         conjugate (M $$ (j, i))", "by auto"], ["", "lemma mat_adjoint_swap:\n  fixes M ::\"complex mat\"\n  assumes \"M \\<in> carrier_mat nB nA\" and \"iA < dim_row M\" and \"iB < dim_col M\"\n  shows \"(mat_adjoint M)$$(iB,iA) = cnj (M$$(iA,iB))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adjoint M $$ (iB, iA) = cnj (M $$ (iA, iB))", "unfolding transpose_mat_def map_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_adjoint M $$ (iB, iA) = cnj (M $$ (iA, iB))", "by (simp add: assms(2) assms(3) mat_adjoint_def')"], ["", "lemma cscalar_prod_adjoint:\n  fixes M:: \"complex mat\"\n  assumes \"M \\<in> carrier_mat nB nA\" \n    and \"dim_vec v = nA\"\n    and \"dim_vec u = nB\"\n  shows \"v \\<bullet>c ((mat_adjoint M) *\\<^sub>v u) = (M *\\<^sub>v v) \\<bullet>c u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet>c (mat_adjoint M *\\<^sub>v u) = (M *\\<^sub>v v) \\<bullet>c u", "unfolding mat_adjoint_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet>c\n    (mat_of_rows (dim_row M) (map conjugate (cols M)) *\\<^sub>v u) =\n    (M *\\<^sub>v v) \\<bullet>c u", "using assms(1) assms(2,3)[symmetric]"], ["proof (prove)\nusing this:\n  M \\<in> carrier_mat nB nA\n  nA = dim_vec v\n  nB = dim_vec u\n\ngoal (1 subgoal):\n 1. v \\<bullet>c\n    (mat_of_rows (dim_row M) (map conjugate (cols M)) *\\<^sub>v u) =\n    (M *\\<^sub>v v) \\<bullet>c u", "apply (simp add: scalar_prod_def sum_distrib_left field_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>M \\<in> carrier_mat (dim_vec u) (dim_vec v); nA = dim_vec v;\n     nB = dim_vec u\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>i = 0..<dim_vec v.\n                          \\<Sum>n = 0..<dim_vec u.\n                             v $ i * (cnj (u $ n) * M $$ (n, i))) =\n                      (\\<Sum>i = 0..<dim_vec u.\n                          \\<Sum>n = 0..<dim_vec v.\n                             v $ n * (cnj (u $ i) * M $$ (i, n)))", "by (intro sum.swap)"], ["", "lemma scaleC_minus1_left_vec: \"-1 \\<cdot>\\<^sub>v v = - v\" for v :: \"_::ring_1 vec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (1::'b) \\<cdot>\\<^sub>v v = - v", "unfolding smult_vec_def uminus_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_vec v) (\\<lambda>i. - (1::'b) * v $ i) =\n    vec (dim_vec v) (\\<lambda>i. - v $ i)", "by auto"], ["", "lemma square_nneg_complex:\n  fixes x :: complex\n  assumes \"x \\<in> \\<real>\" shows \"x^2 \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> x\\<^sup>2", "apply (cases x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2. x = Complex x1 x2 \\<Longrightarrow> 0 \\<le> x\\<^sup>2", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> \\<real>\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2. x = Complex x1 x2 \\<Longrightarrow> 0 \\<le> x\\<^sup>2", "unfolding Reals_def"], ["proof (prove)\nusing this:\n  x \\<in> range complex_of_real\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2. x = Complex x1 x2 \\<Longrightarrow> 0 \\<le> x\\<^sup>2", "by auto"], ["", "definition \"vec_is_zero n v = (\\<forall>i<n. v $ i = 0)\""], ["", "lemma vec_is_zero: \"dim_vec v = n \\<Longrightarrow> vec_is_zero n v \\<longleftrightarrow> v = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = n \\<Longrightarrow> vec_is_zero n v = (v = 0\\<^sub>v n)", "unfolding vec_is_zero_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = n \\<Longrightarrow>\n    (\\<forall>i<n. v $ i = (0::'a)) = (v = 0\\<^sub>v n)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>n = dim_vec v; v = 0\\<^sub>v (dim_vec v);\n        i < dim_vec v\\<rbrakk>\n       \\<Longrightarrow> v $ i = (0::'a)", "by (metis index_zero_vec(1))"], ["", "fun gram_schmidt_sub0\n  where \"gram_schmidt_sub0 n us [] = us\"\n  | \"gram_schmidt_sub0 n us (w # ws) =\n     (let w' = adjuster n w us + w in\n      if vec_is_zero n w' then gram_schmidt_sub0 n us ws\n                          else gram_schmidt_sub0 n (w' # us) ws)\""], ["", "lemma (in cof_vec_space) adjuster_already_in_span:\n  assumes \"w \\<in> carrier_vec n\"\n  assumes us_carrier: \"set us \\<subseteq> carrier_vec n\"\n  assumes \"corthogonal us\"\n  assumes \"w \\<in> span (set us)\"\n  shows \"adjuster n w us + w = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "define v U where \"v = adjuster n w us + w\" and \"U = set us\""], ["proof (state)\nthis:\n  v = adjuster n w us + w\n  U = set us\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "have span: \"v \\<in> span U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.span U", "unfolding v_def U_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (set us)", "apply (rule adjust_preserves_span[THEN iffD1])"], ["proof (prove)\ngoal (4 subgoals):\n 1. w \\<in> carrier_vec n\n 2. set us \\<subseteq> carrier_vec n\n 3. distinct us\n 4. w \\<in> local.span (set us)", "using assms corthogonal_distinct"], ["proof (prove)\nusing this:\n  w \\<in> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  corthogonal us\n  w \\<in> local.span (set us)\n  corthogonal ?us \\<Longrightarrow> distinct ?us\n\ngoal (4 subgoals):\n 1. w \\<in> carrier_vec n\n 2. set us \\<subseteq> carrier_vec n\n 3. distinct us\n 4. w \\<in> local.span (set us)", "by simp_all"], ["proof (state)\nthis:\n  v \\<in> local.span U\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "have v_carrier: \"v \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n", "by (simp add: v_def assms corthogonal_distinct)"], ["proof (state)\nthis:\n  v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "have \"v \\<bullet>c us!i = 0\" if \"i < length us\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet>c us ! i = (0::'a)", "unfolding v_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "apply (rule adjust_zero)"], ["proof (prove)\ngoal (4 subgoals):\n 1. set us \\<subseteq> carrier_vec n\n 2. corthogonal us\n 3. w \\<in> carrier_vec n\n 4. i < length us", "using that assms"], ["proof (prove)\nusing this:\n  i < length us\n  w \\<in> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  corthogonal us\n  w \\<in> local.span (set us)\n\ngoal (4 subgoals):\n 1. set us \\<subseteq> carrier_vec n\n 2. corthogonal us\n 3. w \\<in> carrier_vec n\n 4. i < length us", "by simp_all"], ["proof (state)\nthis:\n  ?i1 < length us \\<Longrightarrow> v \\<bullet>c us ! ?i1 = (0::'a)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "hence \"v \\<bullet>c u = 0\" if \"u \\<in> U\" for u"], ["proof (prove)\nusing this:\n  ?i1 < length us \\<Longrightarrow> v \\<bullet>c us ! ?i1 = (0::'a)\n\ngoal (1 subgoal):\n 1. v \\<bullet>c u = (0::'a)", "by (metis assms(3) U_def corthogonal_distinct distinct_Ex1 that)"], ["proof (state)\nthis:\n  ?u1 \\<in> U \\<Longrightarrow> v \\<bullet>c ?u1 = (0::'a)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "hence ortho: \"u \\<bullet>c v = 0\" if \"u \\<in> U\" for u"], ["proof (prove)\nusing this:\n  ?u1 \\<in> U \\<Longrightarrow> v \\<bullet>c ?u1 = (0::'a)\n\ngoal (1 subgoal):\n 1. u \\<bullet>c v = (0::'a)", "apply (subst conjugate_zero_iff[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    conjugate (u \\<bullet>c v) = (0::'a)", "apply (subst conjugate_vec_sprod_comm)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    u \\<in> carrier_vec ?n3\n 2. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    v \\<in> carrier_vec ?n3\n 3. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    conjugate (conjugate v \\<bullet> u) = (0::'a)", "using that us_carrier v_carrier"], ["proof (prove)\nusing this:\n  u \\<in> U\n  set us \\<subseteq> carrier_vec n\n  v \\<in> carrier_vec n\n\ngoal (3 subgoals):\n 1. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    u \\<in> carrier_vec ?n3\n 2. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    v \\<in> carrier_vec ?n3\n 3. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    conjugate (conjugate v \\<bullet> u) = (0::'a)", "apply (auto simp: U_def)[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    conjugate (conjugate v \\<bullet> u) = (0::'a)", "apply (subst conjugate_conjugate_sprod)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    v \\<in> carrier_vec ?n19\n 2. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    u \\<in> carrier_vec ?n19\n 3. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    v \\<bullet>c u = (0::'a)", "using that us_carrier v_carrier"], ["proof (prove)\nusing this:\n  u \\<in> U\n  set us \\<subseteq> carrier_vec n\n  v \\<in> carrier_vec n\n\ngoal (3 subgoals):\n 1. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    v \\<in> carrier_vec ?n19\n 2. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    u \\<in> carrier_vec ?n19\n 3. (\\<And>u.\n        u \\<in> U \\<Longrightarrow>\n        v \\<bullet>c u = (0::'a)) \\<Longrightarrow>\n    v \\<bullet>c u = (0::'a)", "by (auto simp: U_def)"], ["proof (state)\nthis:\n  ?u1 \\<in> U \\<Longrightarrow> ?u1 \\<bullet>c v = (0::'a)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "from span"], ["proof (chain)\npicking this:\n  v \\<in> local.span U", "obtain a where v: \"lincomb a U = v\""], ["proof (prove)\nusing this:\n  v \\<in> local.span U\n\ngoal (1 subgoal):\n 1. (\\<And>a. lincomb a U = v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply atomize_elim"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> local.span U \\<Longrightarrow> \\<exists>a. lincomb a U = v", "apply (rule finite_in_span[simplified])"], ["proof (prove)\ngoal (3 subgoals):\n 1. v \\<in> local.span U \\<Longrightarrow> finite U\n 2. v \\<in> local.span U \\<Longrightarrow> U \\<subseteq> carrier_vec n\n 3. v \\<in> local.span U \\<Longrightarrow> v \\<in> local.span U", "unfolding U_def"], ["proof (prove)\ngoal (3 subgoals):\n 1. v \\<in> local.span (set us) \\<Longrightarrow> finite (set us)\n 2. v \\<in> local.span (set us) \\<Longrightarrow>\n    set us \\<subseteq> carrier_vec n\n 3. v \\<in> local.span (set us) \\<Longrightarrow>\n    v \\<in> local.span (set us)", "using us_carrier"], ["proof (prove)\nusing this:\n  set us \\<subseteq> carrier_vec n\n\ngoal (3 subgoals):\n 1. v \\<in> local.span (set us) \\<Longrightarrow> finite (set us)\n 2. v \\<in> local.span (set us) \\<Longrightarrow>\n    set us \\<subseteq> carrier_vec n\n 3. v \\<in> local.span (set us) \\<Longrightarrow>\n    v \\<in> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  lincomb a U = v\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "have \"v \\<bullet>c v = (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet>c v = (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v)", "apply (subst v[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb a U \\<bullet>c v =\n    (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v)", "unfolding lincomb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>U. a v \\<cdot>\\<^sub>v v) \\<bullet>c v =\n    (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v)", "apply (subst finsum_scalar_prod_sum)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<lambda>v. a v \\<cdot>\\<^sub>v v) \\<in> U \\<rightarrow> carrier_vec n\n 2. conjugate v \\<in> carrier_vec n\n 3. (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v) =\n    (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v)", "using U_def span us_carrier"], ["proof (prove)\nusing this:\n  U = set us\n  v \\<in> local.span U\n  set us \\<subseteq> carrier_vec n\n\ngoal (3 subgoals):\n 1. (\\<lambda>v. a v \\<cdot>\\<^sub>v v) \\<in> U \\<rightarrow> carrier_vec n\n 2. conjugate v \\<in> carrier_vec n\n 3. (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v) =\n    (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v)", "by auto"], ["proof (state)\nthis:\n  v \\<bullet>c v = (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "also"], ["proof (state)\nthis:\n  v \\<bullet>c v = (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "have \"\\<dots> = (\\<Sum>u\\<in>U. a u * (u \\<bullet>c v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v) =\n    (\\<Sum>u\\<in>U. a u * (u \\<bullet>c v))", "using U_def assms(1) in_mono us_carrier v_def"], ["proof (prove)\nusing this:\n  U = set us\n  w \\<in> carrier_vec n\n  ?A \\<subseteq> ?B \\<Longrightarrow>\n  ?x \\<in> ?A \\<longrightarrow> ?x \\<in> ?B\n  set us \\<subseteq> carrier_vec n\n  v = adjuster n w us + w\n\ngoal (1 subgoal):\n 1. (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v) =\n    (\\<Sum>u\\<in>U. a u * (u \\<bullet>c v))", "by fastforce"], ["proof (state)\nthis:\n  (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v) =\n  (\\<Sum>u\\<in>U. a u * (u \\<bullet>c v))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "also"], ["proof (state)\nthis:\n  (\\<Sum>u\\<in>U. (a u \\<cdot>\\<^sub>v u) \\<bullet>c v) =\n  (\\<Sum>u\\<in>U. a u * (u \\<bullet>c v))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "have \"\\<dots> = (\\<Sum>u\\<in>U. a u * conjugate 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>u\\<in>U. a u * (u \\<bullet>c v)) =\n    (\\<Sum>u\\<in>U. a u * conjugate (0::'a))", "apply (rule sum.cong, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> U \\<Longrightarrow>\n       a x * (x \\<bullet>c v) = a x * conjugate (0::'a)", "using span span_closed U_def us_carrier ortho"], ["proof (prove)\nusing this:\n  v \\<in> local.span U\n  \\<lbrakk>?U \\<subseteq> carrier_vec n; ?v \\<in> local.span ?U\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> carrier_vec n\n  U = set us\n  set us \\<subseteq> carrier_vec n\n  ?u1 \\<in> U \\<Longrightarrow> ?u1 \\<bullet>c v = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> U \\<Longrightarrow>\n       a x * (x \\<bullet>c v) = a x * conjugate (0::'a)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>u\\<in>U. a u * (u \\<bullet>c v)) =\n  (\\<Sum>u\\<in>U. a u * conjugate (0::'a))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "also"], ["proof (state)\nthis:\n  (\\<Sum>u\\<in>U. a u * (u \\<bullet>c v)) =\n  (\\<Sum>u\\<in>U. a u * conjugate (0::'a))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>u\\<in>U. a u * conjugate (0::'a)) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>u\\<in>U. a u * conjugate (0::'a)) = (0::'a)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "finally"], ["proof (chain)\npicking this:\n  v \\<bullet>c v = (0::'a)", "have \"v \\<bullet>c v = 0\""], ["proof (prove)\nusing this:\n  v \\<bullet>c v = (0::'a)\n\ngoal (1 subgoal):\n 1. v \\<bullet>c v = (0::'a)", "by -"], ["proof (state)\nthis:\n  v \\<bullet>c v = (0::'a)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "thus \"v = 0\\<^sub>v n\""], ["proof (prove)\nusing this:\n  v \\<bullet>c v = (0::'a)\n\ngoal (1 subgoal):\n 1. v = 0\\<^sub>v n", "using U_def conjugate_square_eq_0_vec span span_closed us_carrier"], ["proof (prove)\nusing this:\n  v \\<bullet>c v = (0::'a)\n  U = set us\n  ?v \\<in> carrier_vec ?n \\<Longrightarrow>\n  (?v \\<bullet>c ?v = (0::?'a)) = (?v = 0\\<^sub>v ?n)\n  v \\<in> local.span U\n  \\<lbrakk>?U \\<subseteq> carrier_vec n; ?v \\<in> local.span ?U\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. v = 0\\<^sub>v n", "by blast"], ["proof (state)\nthis:\n  v = 0\\<^sub>v n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in cof_vec_space) gram_schmidt_sub0_result:\n  assumes \"gram_schmidt_sub0 n us ws = us'\"\n    and \"set ws \\<subseteq> carrier_vec n\"\n    and \"set us \\<subseteq> carrier_vec n\"\n    and \"distinct us\"\n    and \"~ lin_dep (set us)\"\n    and \"corthogonal us\"\n  shows \"set us' \\<subseteq> carrier_vec n \\<and>\n         distinct us' \\<and>\n         corthogonal us' \\<and>\n         span (set (us @ ws)) = span (set us')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and> local.span (set (us @ ws)) = local.span (set us')", "using assms"], ["proof (prove)\nusing this:\n  gram_schmidt_sub0 n us ws = us'\n  set ws \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (1 subgoal):\n 1. set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and> local.span (set (us @ ws)) = local.span (set us')", "proof (induct ws arbitrary: us us')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub0 n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct us; lin_indpt (set us); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) = local.span (set us')\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub0 n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct us;\n                    lin_indpt (set us); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us');\n        gram_schmidt_sub0 n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct us; lin_indpt (set us);\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us')", "case (Cons w ws)"], ["proof (state)\nthis:\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub0 n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct us; lin_indpt (set us); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) = local.span (set us')\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub0 n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct us;\n                    lin_indpt (set us); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us');\n        gram_schmidt_sub0 n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct us; lin_indpt (set us);\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "proof (cases \"w \\<in> span (set us)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "case False"], ["proof (state)\nthis:\n  w \\<notin> local.span (set us)\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "let ?v = \"adjuster n w us\""], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have wW[simp]: \"set (w#ws) \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (w # ws) \\<subseteq> carrier_vec n", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (1 subgoal):\n 1. set (w # ws) \\<subseteq> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  set (w # ws) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "hence W[simp]: \"set ws \\<subseteq> carrier_vec n\"\n      and w[simp]: \"w : carrier_vec n\""], ["proof (prove)\nusing this:\n  set (w # ws) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. set ws \\<subseteq> carrier_vec n &&& w \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set ws \\<subseteq> carrier_vec n\n  w \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have U[simp]: \"set us \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set us \\<subseteq> carrier_vec n", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (1 subgoal):\n 1. set us \\<subseteq> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  set us \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have UW: \"set (us@ws) \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (us @ ws) \\<subseteq> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  set (us @ ws) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have wU: \"set (w#us) \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (w # us) \\<subseteq> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  set (w # us) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have dist_U: \"distinct us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct us", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (1 subgoal):\n 1. distinct us", "by simp"], ["proof (state)\nthis:\n  distinct us\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have w_U: \"w \\<notin> set us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<notin> set us", "using False"], ["proof (prove)\nusing this:\n  w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. w \\<notin> set us", "using span_mem"], ["proof (prove)\nusing this:\n  w \\<notin> local.span (set us)\n  \\<lbrakk>?E \\<subseteq> carrier_vec n; ?u \\<in> ?E\\<rbrakk>\n  \\<Longrightarrow> ?u \\<in> local.span ?E\n\ngoal (1 subgoal):\n 1. w \\<notin> set us", "by auto"], ["proof (state)\nthis:\n  w \\<notin> set us\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have ind_U: \"~ lin_dep (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_indpt (set us)", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (1 subgoal):\n 1. lin_indpt (set us)", "by simp"], ["proof (state)\nthis:\n  lin_indpt (set us)\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have ind_wU: \"~ lin_dep (insert w (set us))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_indpt (insert w (set us))", "apply (subst lin_dep_iff_in_span[simplified, symmetric])"], ["proof (prove)\ngoal (5 subgoals):\n 1. set us \\<subseteq> carrier_vec n\n 2. lin_indpt (set us)\n 3. w \\<in> carrier_vec n\n 4. w \\<notin> set us\n 5. w \\<notin> local.span (set us)", "using w_U ind_U False"], ["proof (prove)\nusing this:\n  w \\<notin> set us\n  lin_indpt (set us)\n  w \\<notin> local.span (set us)\n\ngoal (5 subgoals):\n 1. set us \\<subseteq> carrier_vec n\n 2. lin_indpt (set us)\n 3. w \\<in> carrier_vec n\n 4. w \\<notin> set us\n 5. w \\<notin> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  lin_indpt (insert w (set us))\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "thm lin_dep_iff_in_span[simplified, symmetric]"], ["proof (state)\nthis:\n  lin_indpt (insert w (set us))\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have corth: \"corthogonal us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corthogonal us", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (1 subgoal):\n 1. corthogonal us", "by simp"], ["proof (state)\nthis:\n  corthogonal us\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have \"?v + w \\<noteq> 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<noteq> 0\\<^sub>v n", "by (simp add: False adjust_nonzero dist_U)"], ["proof (state)\nthis:\n  adjuster n w us + w \\<noteq> 0\\<^sub>v n\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "hence \"\\<not> vec_is_zero n (?v + w)\""], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<noteq> 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. \\<not> vec_is_zero n (adjuster n w us + w)", "by (simp add: vec_is_zero)"], ["proof (state)\nthis:\n  \\<not> vec_is_zero n (adjuster n w us + w)\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "hence U'def: \"gram_schmidt_sub0 n ((?v + w)#us) ws = us'\""], ["proof (prove)\nusing this:\n  \\<not> vec_is_zero n (adjuster n w us + w)\n\ngoal (1 subgoal):\n 1. gram_schmidt_sub0 n ((adjuster n w us + w) # us) ws = us'", "using Cons"], ["proof (prove)\nusing this:\n  \\<not> vec_is_zero n (adjuster n w us + w)\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (1 subgoal):\n 1. gram_schmidt_sub0 n ((adjuster n w us + w) # us) ws = us'", "by simp"], ["proof (state)\nthis:\n  gram_schmidt_sub0 n ((adjuster n w us + w) # us) ws = us'\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have v: \"?v : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "using dist_U"], ["proof (prove)\nusing this:\n  distinct us\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "hence vw: \"?v + w : carrier_vec n\""], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "hence vwU: \"set ((?v + w) # us) \\<subseteq> carrier_vec n\""], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. set ((adjuster n w us + w) # us) \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set ((adjuster n w us + w) # us) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have vsU: \"?v : span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set us)", "apply (rule adjuster_in_span[OF w])"], ["proof (prove)\ngoal (2 subgoals):\n 1. set us \\<subseteq> carrier_vec n\n 2. distinct us", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (2 subgoals):\n 1. set us \\<subseteq> carrier_vec n\n 2. distinct us", "by simp_all"], ["proof (state)\nthis:\n  adjuster n w us \\<in> local.span (set us)\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "hence vsUW: \"?v : span (set (us @ ws))\""], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set (us @ ws))", "using span_is_monotone[of \"set us\" \"set (us@ws)\"]"], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> local.span (set us)\n  set us \\<subseteq> set (us @ ws) \\<Longrightarrow>\n  local.span (set us) \\<subseteq> local.span (set (us @ ws))\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set (us @ ws))", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> local.span (set (us @ ws))\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have wsU: \"w \\<notin> span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<notin> local.span (set us)", "using lin_dep_iff_in_span[OF U ind_U w w_U] ind_wU"], ["proof (prove)\nusing this:\n  (w \\<in> local.span (set us)) = lin_dep (set us \\<union> {w})\n  lin_indpt (insert w (set us))\n\ngoal (1 subgoal):\n 1. w \\<notin> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  w \\<notin> local.span (set us)\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "hence vwU: \"?v + w \\<notin> span (set us)\""], ["proof (prove)\nusing this:\n  w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "using adjust_not_in_span[OF w U dist_U]"], ["proof (prove)\nusing this:\n  w \\<notin> local.span (set us)\n  w \\<notin> local.span (set us) \\<Longrightarrow>\n  adjuster n w us + w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<notin> local.span (set us)\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have span: \"?v + w \\<notin> span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "apply (subst span_add[symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. set us \\<subseteq> carrier_vec n\n 2. adjuster n w us \\<in> local.span (set us)\n 3. w \\<in> carrier_vec n\n 4. w \\<notin> local.span (set us)", "by (simp_all add: False vsU)"], ["proof (state)\nthis:\n  adjuster n w us + w \\<notin> local.span (set us)\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "hence vwUS: \"?v + w \\<notin> set us\""], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> set us", "using span_mem"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> local.span (set us)\n  \\<lbrakk>?E \\<subseteq> carrier_vec n; ?u \\<in> ?E\\<rbrakk>\n  \\<Longrightarrow> ?u \\<in> local.span ?E\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> set us", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<notin> set us\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have vwU: \"set ((?v + w) # us) \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ((adjuster n w us + w) # us) \\<subseteq> carrier_vec n", "using U w vw"], ["proof (prove)\nusing this:\n  set us \\<subseteq> carrier_vec n\n  w \\<in> carrier_vec n\n  adjuster n w us + w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. set ((adjuster n w us + w) # us) \\<subseteq> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  set ((adjuster n w us + w) # us) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have dist2: \"distinct (((?v + w) # us))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct ((adjuster n w us + w) # us)", "using vwUS"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> set us\n\ngoal (1 subgoal):\n 1. distinct ((adjuster n w us + w) # us)", "by (simp add: dist_U)"], ["proof (state)\nthis:\n  distinct ((adjuster n w us + w) # us)\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have orth2: \"corthogonal ((adjuster n w us + w) # us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corthogonal ((adjuster n w us + w) # us)", "using adjust_orthogonal[OF U corth w wsU]"], ["proof (prove)\nusing this:\n  corthogonal ((adjuster n w us + w) # us)\n\ngoal (1 subgoal):\n 1. corthogonal ((adjuster n w us + w) # us)", "."], ["proof (state)\nthis:\n  corthogonal ((adjuster n w us + w) # us)\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have ind_vwU: \"~ lin_dep (set ((adjuster n w us + w) # us))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_indpt (set ((adjuster n w us + w) # us))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_indpt (insert (adjuster n w us + w) (set us))", "apply (subst lin_dep_iff_in_span[simplified, symmetric])"], ["proof (prove)\ngoal (5 subgoals):\n 1. set us \\<subseteq> carrier_vec n\n 2. lin_indpt (set us)\n 3. adjuster n w us + w \\<in> carrier_vec n\n 4. adjuster n w us + w \\<notin> set us\n 5. adjuster n w us + w \\<notin> local.span (set us)", "by (simp_all add: ind_U vw vwUS span)"], ["proof (state)\nthis:\n  lin_indpt (set ((adjuster n w us + w) # us))\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have span_UwW_U': \"span (set (us @ w # ws)) = span (set us')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "using Cons(1)[OF U'def W vwU dist2 ind_vwU orth2]"], ["proof (prove)\nusing this:\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and>\n  corthogonal us' \\<and>\n  local.span (set (((adjuster n w us + w) # us) @ ws)) =\n  local.span (set us')\n\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "using span_Un[OF vwU wU gram_schmidt_sub_span[OF w U dist_U] W W refl]"], ["proof (prove)\nusing this:\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and>\n  corthogonal us' \\<and>\n  local.span (set (((adjuster n w us + w) # us) @ ws)) =\n  local.span (set us')\n  local.span (set ((adjuster n w us + w) # us) \\<union> set ws) =\n  local.span (set (w # us) \\<union> set ws)\n\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "by simp"], ["proof (state)\nthis:\n  local.span (set (us @ w # ws)) = local.span (set us')\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "apply (intro conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. set us' \\<subseteq> carrier_vec n\n 2. distinct us'\n 3. corthogonal us'\n 4. local.span (set (us @ w # ws)) = local.span (set us')", "using Cons(1)[OF U'def W vwU dist2 ind_vwU orth2] span_UwW_U'"], ["proof (prove)\nusing this:\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and>\n  corthogonal us' \\<and>\n  local.span (set (((adjuster n w us + w) # us) @ ws)) =\n  local.span (set us')\n  local.span (set (us @ w # ws)) = local.span (set us')\n\ngoal (4 subgoals):\n 1. set us' \\<subseteq> carrier_vec n\n 2. distinct us'\n 3. corthogonal us'\n 4. local.span (set (us @ w # ws)) = local.span (set us')", "by simp_all"], ["proof (state)\nthis:\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and>\n  corthogonal us' \\<and>\n  local.span (set (us @ w # ws)) = local.span (set us')\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "case True"], ["proof (state)\nthis:\n  w \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "let ?v = \"adjuster n w us\""], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have \"?v + w = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n", "apply (rule adjuster_already_in_span)"], ["proof (prove)\ngoal (4 subgoals):\n 1. w \\<in> carrier_vec n\n 2. set us \\<subseteq> carrier_vec n\n 3. corthogonal us\n 4. w \\<in> local.span (set us)", "using True Cons"], ["proof (prove)\nusing this:\n  w \\<in> local.span (set us)\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (4 subgoals):\n 1. w \\<in> carrier_vec n\n 2. set us \\<subseteq> carrier_vec n\n 3. corthogonal us\n 4. w \\<in> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "hence \"vec_is_zero n (?v + w)\""], ["proof (prove)\nusing this:\n  adjuster n w us + w = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. vec_is_zero n (adjuster n w us + w)", "by (simp add: vec_is_zero)"], ["proof (state)\nthis:\n  vec_is_zero n (adjuster n w us + w)\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "hence U'_def: \"us' = gram_schmidt_sub0 n us ws\""], ["proof (prove)\nusing this:\n  vec_is_zero n (adjuster n w us + w)\n\ngoal (1 subgoal):\n 1. us' = gram_schmidt_sub0 n us ws", "using Cons"], ["proof (prove)\nusing this:\n  vec_is_zero n (adjuster n w us + w)\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (1 subgoal):\n 1. us' = gram_schmidt_sub0 n us ws", "by simp"], ["proof (state)\nthis:\n  us' = gram_schmidt_sub0 n us ws\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have span: \"span (set (us @ w # ws)) = span (set us')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "have wU_U: \"span (set (w # us)) = span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (set (w # us)) = local.span (set us)", "apply (subst already_in_span[OF _ True, simplified])"], ["proof (prove)\ngoal (2 subgoals):\n 1. set us \\<subseteq> carrier_vec n\n 2. local.span (set (w # us)) = local.span (insert w (set us))", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (2 subgoals):\n 1. set us \\<subseteq> carrier_vec n\n 2. local.span (set (w # us)) = local.span (insert w (set us))", "by auto"], ["proof (state)\nthis:\n  local.span (set (w # us)) = local.span (set us)\n\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "have \"span (set (us @ w # ws)) = span (set (w # us) \\<union> set ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) =\n    local.span (set (w # us) \\<union> set ws)", "by simp"], ["proof (state)\nthis:\n  local.span (set (us @ w # ws)) = local.span (set (w # us) \\<union> set ws)\n\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "also"], ["proof (state)\nthis:\n  local.span (set (us @ w # ws)) = local.span (set (w # us) \\<union> set ws)\n\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "have \"\\<dots> = span (set us \\<union> set ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (set (w # us) \\<union> set ws) =\n    local.span (set us \\<union> set ws)", "apply (rule span_Un)"], ["proof (prove)\ngoal (6 subgoals):\n 1. set (w # us) \\<subseteq> carrier_vec n\n 2. set us \\<subseteq> carrier_vec n\n 3. local.span (set (w # us)) = local.span (set us)\n 4. set ws \\<subseteq> carrier_vec n\n 5. set ws \\<subseteq> carrier_vec n\n 6. local.span (set ws) = local.span (set ws)", "using wU_U Cons"], ["proof (prove)\nusing this:\n  local.span (set (w # us)) = local.span (set us)\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (6 subgoals):\n 1. set (w # us) \\<subseteq> carrier_vec n\n 2. set us \\<subseteq> carrier_vec n\n 3. local.span (set (w # us)) = local.span (set us)\n 4. set ws \\<subseteq> carrier_vec n\n 5. set ws \\<subseteq> carrier_vec n\n 6. local.span (set ws) = local.span (set ws)", "by auto"], ["proof (state)\nthis:\n  local.span (set (w # us) \\<union> set ws) =\n  local.span (set us \\<union> set ws)\n\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "also"], ["proof (state)\nthis:\n  local.span (set (w # us) \\<union> set ws) =\n  local.span (set us \\<union> set ws)\n\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "have \"\\<dots> = local.span (set us')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (set us \\<union> set ws) = local.span (set us')", "using Cons U'_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n  us' = gram_schmidt_sub0 n us ws\n\ngoal (1 subgoal):\n 1. local.span (set us \\<union> set ws) = local.span (set us')", "by auto"], ["proof (state)\nthis:\n  local.span (set us \\<union> set ws) = local.span (set us')\n\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "finally"], ["proof (chain)\npicking this:\n  local.span (set (us @ w # ws)) = local.span (set us')", "show ?thesis"], ["proof (prove)\nusing this:\n  local.span (set (us @ w # ws)) = local.span (set us')\n\ngoal (1 subgoal):\n 1. local.span (set (us @ w # ws)) = local.span (set us')", "by -"], ["proof (state)\nthis:\n  local.span (set (us @ w # ws)) = local.span (set us')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.span (set (us @ w # ws)) = local.span (set us')\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "moreover"], ["proof (state)\nthis:\n  local.span (set (us @ w # ws)) = local.span (set us')\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "have \"set us' \\<subseteq> carrier_vec n \\<and> distinct us' \\<and> corthogonal us'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and> corthogonal us'", "unfolding U'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (gram_schmidt_sub0 n us ws) \\<subseteq> carrier_vec n \\<and>\n    distinct (gram_schmidt_sub0 n us ws) \\<and>\n    corthogonal (gram_schmidt_sub0 n us ws)", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub0 n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct ?us1; lin_indpt (set ?us1); corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) = local.span (set ?us'1)\n  gram_schmidt_sub0 n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  lin_indpt (set us)\n  corthogonal us\n\ngoal (1 subgoal):\n 1. set (gram_schmidt_sub0 n us ws) \\<subseteq> carrier_vec n \\<and>\n    distinct (gram_schmidt_sub0 n us ws) \\<and>\n    corthogonal (gram_schmidt_sub0 n us ws)", "by simp"], ["proof (state)\nthis:\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and> corthogonal us'\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "ultimately"], ["proof (chain)\npicking this:\n  local.span (set (us @ w # ws)) = local.span (set us')\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and> corthogonal us'", "show ?thesis"], ["proof (prove)\nusing this:\n  local.span (set (us @ w # ws)) = local.span (set us')\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and> corthogonal us'\n\ngoal (1 subgoal):\n 1. set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us')", "by auto"], ["proof (state)\nthis:\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and>\n  corthogonal us' \\<and>\n  local.span (set (us @ w # ws)) = local.span (set us')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and>\n  corthogonal us' \\<and>\n  local.span (set (us @ w # ws)) = local.span (set us')\n\ngoal (1 subgoal):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub0 n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct us; lin_indpt (set us); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) = local.span (set us')", "qed simp"], ["", "text \\<open>This is a variant of \\<^term>\\<open>Gram_Schmidt.gram_schmidt\\<close> that does not require the input vectors\n  \\<^term>\\<open>ws\\<close> to be distinct or orthogonal. (In comparison to \\<^term>\\<open>Gram_Schmidt.gram_schmidt\\<close>,\n  our version also returns the result in reversed order.)\\<close>"], ["", "definition \"gram_schmidt0 n ws = gram_schmidt_sub0 n [] ws\""], ["", "lemma (in cof_vec_space) gram_schmidt0_result:\n  fixes ws\n  defines \"us' \\<equiv> gram_schmidt0 n ws\"\n  assumes ws: \"set ws \\<subseteq> carrier_vec n\"\n  shows \"set us' \\<subseteq> carrier_vec n\"        (is ?thesis1)\n    and \"distinct us'\"                    (is ?thesis2)\n    and \"corthogonal us'\"                 (is ?thesis3)\n    and \"span (set ws) = span (set us')\"  (is ?thesis4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (set us' \\<subseteq> carrier_vec n &&& distinct us') &&&\n    corthogonal us' &&& local.span (set ws) = local.span (set us')", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. set us' \\<subseteq> carrier_vec n\n 2. distinct us'\n 3. corthogonal us'\n 4. local.span (set ws) = local.span (set us')", "have carrier_empty: \"set [] \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set [] \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set [] \\<subseteq> carrier_vec n\n\ngoal (4 subgoals):\n 1. set us' \\<subseteq> carrier_vec n\n 2. distinct us'\n 3. corthogonal us'\n 4. local.span (set ws) = local.span (set us')", "have distinct_empty: \"distinct []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct []", "by simp"], ["proof (state)\nthis:\n  distinct []\n\ngoal (4 subgoals):\n 1. set us' \\<subseteq> carrier_vec n\n 2. distinct us'\n 3. corthogonal us'\n 4. local.span (set ws) = local.span (set us')", "have indep_empty: \"lin_indpt (set [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_indpt (set [])", "using basis_def subset_li_is_li unit_vecs_basis"], ["proof (prove)\nusing this:\n  basis ?A =\n  (lin_indpt ?A \\<and>\n   local.span ?A = carrier_vec n \\<and> ?A \\<subseteq> carrier_vec n)\n  \\<lbrakk>lin_indpt ?A; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> lin_indpt ?B\n  basis (set (unit_vecs n))\n\ngoal (1 subgoal):\n 1. lin_indpt (set [])", "by auto"], ["proof (state)\nthis:\n  lin_indpt (set [])\n\ngoal (4 subgoals):\n 1. set us' \\<subseteq> carrier_vec n\n 2. distinct us'\n 3. corthogonal us'\n 4. local.span (set ws) = local.span (set us')", "have ortho_empty: \"corthogonal []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corthogonal []", "by auto"], ["proof (state)\nthis:\n  corthogonal []\n\ngoal (4 subgoals):\n 1. set us' \\<subseteq> carrier_vec n\n 2. distinct us'\n 3. corthogonal us'\n 4. local.span (set ws) = local.span (set us')", "note gram_schmidt_sub0_result' = gram_schmidt_sub0_result\n    [OF us'_def[symmetric, THEN meta_eq_to_obj_eq, unfolded gram_schmidt0_def] ws\n      carrier_empty distinct_empty indep_empty ortho_empty]"], ["proof (state)\nthis:\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and>\n  corthogonal us' \\<and> local.span (set ([] @ ws)) = local.span (set us')\n\ngoal (4 subgoals):\n 1. set us' \\<subseteq> carrier_vec n\n 2. distinct us'\n 3. corthogonal us'\n 4. local.span (set ws) = local.span (set us')", "thus ?thesis1 ?thesis2 ?thesis3 ?thesis4"], ["proof (prove)\nusing this:\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and>\n  corthogonal us' \\<and> local.span (set ([] @ ws)) = local.span (set us')\n\ngoal (1 subgoal):\n 1. (set us' \\<subseteq> carrier_vec n &&& distinct us') &&&\n    corthogonal us' &&& local.span (set ws) = local.span (set us')", "by auto"], ["proof (state)\nthis:\n  set us' \\<subseteq> carrier_vec n\n  distinct us'\n  corthogonal us'\n  local.span (set ws) = local.span (set us')\n\ngoal:\nNo subgoals!", "qed"], ["", "locale complex_vec_space = cof_vec_space n \"TYPE(complex)\" for n :: nat"], ["", "lemma gram_schmidt0_corthogonal:\n  assumes a1: \"corthogonal R\" \n    and a2: \"\\<And>x. x \\<in> set R \\<Longrightarrow> dim_vec x = d\"\n  shows \"gram_schmidt0 d R = rev R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gram_schmidt0 d R = rev R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gram_schmidt0 d R = rev R", "have \"gram_schmidt_sub0 d U R = rev R @ U\"\n    if \"corthogonal ((rev U) @ R)\"\n      and \"\\<And>x. x \\<in> set U \\<union> set R \\<Longrightarrow> dim_vec x = d\" for U"], ["proof (prove)\ngoal (1 subgoal):\n 1. gram_schmidt_sub0 d U R = rev R @ U", "proof (insert that, induction R arbitrary: U)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>corthogonal (rev U @ []);\n        \\<And>x.\n           x \\<in> set U \\<union> set [] \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U [] = rev [] @ U\n 2. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "case Nil"], ["proof (state)\nthis:\n  corthogonal (rev U @ [])\n  ?x \\<in> set U \\<union> set [] \\<Longrightarrow> dim_vec ?x = d\n\ngoal (2 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>corthogonal (rev U @ []);\n        \\<And>x.\n           x \\<in> set U \\<union> set [] \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U [] = rev [] @ U\n 2. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. gram_schmidt_sub0 d U [] = rev [] @ U", "by auto"], ["proof (state)\nthis:\n  gram_schmidt_sub0 d U [] = rev [] @ U\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "case (Cons a R)"], ["proof (state)\nthis:\n  \\<lbrakk>corthogonal (rev ?U @ R);\n   \\<And>x.\n      x \\<in> set ?U \\<union> set R \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n  \\<Longrightarrow> gram_schmidt_sub0 d ?U R = rev R @ ?U\n  corthogonal (rev U @ a # R)\n  ?x \\<in> set U \\<union> set (a # R) \\<Longrightarrow> dim_vec ?x = d\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "have \"a \\<in> set (rev U @ a # R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set (rev U @ a # R)", "by simp"], ["proof (state)\nthis:\n  a \\<in> set (rev U @ a # R)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "moreover"], ["proof (state)\nthis:\n  a \\<in> set (rev U @ a # R)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "have uar: \"corthogonal (rev U @ a # R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corthogonal (rev U @ a # R)", "by (simp add: Cons.prems(1))"], ["proof (state)\nthis:\n  corthogonal (rev U @ a # R)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> set (rev U @ a # R)\n  corthogonal (rev U @ a # R)", "have \\<open>a \\<noteq> 0\\<^sub>v d\\<close>"], ["proof (prove)\nusing this:\n  a \\<in> set (rev U @ a # R)\n  corthogonal (rev U @ a # R)\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0\\<^sub>v d", "unfolding corthogonal_def"], ["proof (prove)\nusing this:\n  a \\<in> set (rev U @ a # R)\n  \\<forall>i<length (rev U @ a # R).\n     \\<forall>j<length (rev U @ a # R).\n        ((rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j = (0::'a)) =\n        (i \\<noteq> j)\n\ngoal (1 subgoal):\n 1. a \\<noteq> 0\\<^sub>v d", "by (metis conjugate_zero_vec in_set_conv_nth scalar_prod_right_zero zero_carrier_vec)"], ["proof (state)\nthis:\n  a \\<noteq> 0\\<^sub>v d\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "then"], ["proof (chain)\npicking this:\n  a \\<noteq> 0\\<^sub>v d", "have nonzero_a: \"\\<not> vec_is_zero d a\""], ["proof (prove)\nusing this:\n  a \\<noteq> 0\\<^sub>v d\n\ngoal (1 subgoal):\n 1. \\<not> vec_is_zero d a", "by (simp add: Cons.prems(2) vec_is_zero)"], ["proof (state)\nthis:\n  \\<not> vec_is_zero d a\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "define T where \"T = rev U @ a # R\""], ["proof (state)\nthis:\n  T = rev U @ a # R\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "have \"T ! length (rev U) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T ! length (rev U) = a", "unfolding T_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev U @ a # R) ! length (rev U) = a", "by (meson nth_append_length)"], ["proof (state)\nthis:\n  T ! length (rev U) = a\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "moreover"], ["proof (state)\nthis:\n  T ! length (rev U) = a\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "have \"(T ! i \\<bullet>c T ! j = 0) = (i \\<noteq> j)\"\n      if \"i<length T\"\n        and \"j<length T\"\n      for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. (T ! i \\<bullet>c T ! j = (0::'a)) = (i \\<noteq> j)", "using uar"], ["proof (prove)\nusing this:\n  corthogonal (rev U @ a # R)\n\ngoal (1 subgoal):\n 1. (T ! i \\<bullet>c T ! j = (0::'a)) = (i \\<noteq> j)", "unfolding corthogonal_def T_def"], ["proof (prove)\nusing this:\n  \\<forall>i<length (rev U @ a # R).\n     \\<forall>j<length (rev U @ a # R).\n        ((rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j = (0::'a)) =\n        (i \\<noteq> j)\n\ngoal (1 subgoal):\n 1. ((rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j = (0::'a)) =\n    (i \\<noteq> j)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i<Suc (length U + length R).\n                \\<forall>j<Suc (length U + length R).\n                   ((rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j =\n                    (0::'a)) =\n                   (i \\<noteq> j);\n     (rev U @ a # R) ! j \\<bullet>c (rev U @ a # R) ! j = (0::'a);\n     i = j\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<forall>i<Suc (length U + length R).\n                \\<forall>j<Suc (length U + length R).\n                   ((rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j =\n                    (0::'a)) =\n                   (i \\<noteq> j);\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> (rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j =\n                      (0::'a)", "using T_def that(2)"], ["proof (prove)\nusing this:\n  T = rev U @ a # R\n  j < length T\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i<Suc (length U + length R).\n                \\<forall>j<Suc (length U + length R).\n                   ((rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j =\n                    (0::'a)) =\n                   (i \\<noteq> j);\n     (rev U @ a # R) ! j \\<bullet>c (rev U @ a # R) ! j = (0::'a);\n     i = j\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<forall>i<Suc (length U + length R).\n                \\<forall>j<Suc (length U + length R).\n                   ((rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j =\n                    (0::'a)) =\n                   (i \\<noteq> j);\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> (rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j =\n                      (0::'a)", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i<Suc (length U + length R).\n                \\<forall>j<Suc (length U + length R).\n                   ((rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j =\n                    (0::'a)) =\n                   (i \\<noteq> j);\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> (rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j =\n                      (0::'a)", "using T_def that(1) that(2)"], ["proof (prove)\nusing this:\n  T = rev U @ a # R\n  i < length T\n  j < length T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i<Suc (length U + length R).\n                \\<forall>j<Suc (length U + length R).\n                   ((rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j =\n                    (0::'a)) =\n                   (i \\<noteq> j);\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> (rev U @ a # R) ! i \\<bullet>c (rev U @ a # R) ! j =\n                      (0::'a)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?i < length T; ?j < length T\\<rbrakk>\n  \\<Longrightarrow> (T ! ?i \\<bullet>c T ! ?j = (0::'a)) = (?i \\<noteq> ?j)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?i < length T; ?j < length T\\<rbrakk>\n  \\<Longrightarrow> (T ! ?i \\<bullet>c T ! ?j = (0::'a)) = (?i \\<noteq> ?j)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "have \"length (rev U) < length T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (rev U) < length T", "by (simp add: T_def)"], ["proof (state)\nthis:\n  length (rev U) < length T\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "ultimately"], ["proof (chain)\npicking this:\n  T ! length (rev U) = a\n  \\<lbrakk>?i < length T; ?j < length T\\<rbrakk>\n  \\<Longrightarrow> (T ! ?i \\<bullet>c T ! ?j = (0::'a)) = (?i \\<noteq> ?j)\n  length (rev U) < length T", "have \"(T ! (length (rev U)) \\<bullet>c T ! j = 0) = (length (rev U) \\<noteq> j)\"\n      if \"j<length T\"\n      for j"], ["proof (prove)\nusing this:\n  T ! length (rev U) = a\n  \\<lbrakk>?i < length T; ?j < length T\\<rbrakk>\n  \\<Longrightarrow> (T ! ?i \\<bullet>c T ! ?j = (0::'a)) = (?i \\<noteq> ?j)\n  length (rev U) < length T\n\ngoal (1 subgoal):\n 1. (T ! length (rev U) \\<bullet>c T ! j = (0::'a)) =\n    (length (rev U) \\<noteq> j)", "using that"], ["proof (prove)\nusing this:\n  T ! length (rev U) = a\n  \\<lbrakk>?i < length T; ?j < length T\\<rbrakk>\n  \\<Longrightarrow> (T ! ?i \\<bullet>c T ! ?j = (0::'a)) = (?i \\<noteq> ?j)\n  length (rev U) < length T\n  j < length T\n\ngoal (1 subgoal):\n 1. (T ! length (rev U) \\<bullet>c T ! j = (0::'a)) =\n    (length (rev U) \\<noteq> j)", "by blast"], ["proof (state)\nthis:\n  ?j < length T \\<Longrightarrow>\n  (T ! length (rev U) \\<bullet>c T ! ?j = (0::'a)) =\n  (length (rev U) \\<noteq> ?j)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "hence \"T ! (length (rev U)) \\<bullet>c T ! j = 0\"\n      if  \"j<length T\"\n        and \"j \\<noteq> length (rev U)\"\n      for j"], ["proof (prove)\nusing this:\n  ?j < length T \\<Longrightarrow>\n  (T ! length (rev U) \\<bullet>c T ! ?j = (0::'a)) =\n  (length (rev U) \\<noteq> ?j)\n\ngoal (1 subgoal):\n 1. T ! length (rev U) \\<bullet>c T ! j = (0::'a)", "using that(1) that(2)"], ["proof (prove)\nusing this:\n  ?j < length T \\<Longrightarrow>\n  (T ! length (rev U) \\<bullet>c T ! ?j = (0::'a)) =\n  (length (rev U) \\<noteq> ?j)\n  j < length T\n  j \\<noteq> length (rev U)\n\ngoal (1 subgoal):\n 1. T ! length (rev U) \\<bullet>c T ! j = (0::'a)", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?j < length T; ?j \\<noteq> length (rev U)\\<rbrakk>\n  \\<Longrightarrow> T ! length (rev U) \\<bullet>c T ! ?j = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "hence \"a \\<bullet>c T ! j = 0\"\n      if   \"j < length (rev U)\"\n      for j"], ["proof (prove)\nusing this:\n  \\<lbrakk>?j < length T; ?j \\<noteq> length (rev U)\\<rbrakk>\n  \\<Longrightarrow> T ! length (rev U) \\<bullet>c T ! ?j = (0::'a)\n\ngoal (1 subgoal):\n 1. a \\<bullet>c T ! j = (0::'a)", "using \\<open>T ! length (rev U) = a\\<close> that(1)\n        \\<open>length (rev U) < length T\\<close> dual_order.strict_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?j < length T; ?j \\<noteq> length (rev U)\\<rbrakk>\n  \\<Longrightarrow> T ! length (rev U) \\<bullet>c T ! ?j = (0::'a)\n  T ! length (rev U) = a\n  j < length (rev U)\n  length (rev U) < length T\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. a \\<bullet>c T ! j = (0::'a)", "by blast"], ["proof (state)\nthis:\n  ?j < length (rev U) \\<Longrightarrow> a \\<bullet>c T ! ?j = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "moreover"], ["proof (state)\nthis:\n  ?j < length (rev U) \\<Longrightarrow> a \\<bullet>c T ! ?j = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "have \"T ! j = (rev U) ! j\"\n      if   \"j < length (rev U)\"\n      for j"], ["proof (prove)\ngoal (1 subgoal):\n 1. T ! j = rev U ! j", "by (smt T_def \\<open>length (rev U) < length T\\<close> dual_order.strict_trans list_update_append1\n          list_update_id nth_list_update_eq that)"], ["proof (state)\nthis:\n  ?j < length (rev U) \\<Longrightarrow> T ! ?j = rev U ! ?j\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "ultimately"], ["proof (chain)\npicking this:\n  ?j < length (rev U) \\<Longrightarrow> a \\<bullet>c T ! ?j = (0::'a)\n  ?j < length (rev U) \\<Longrightarrow> T ! ?j = rev U ! ?j", "have \"a \\<bullet>c u = 0\"\n      if \"u \\<in> set (rev U)\"\n      for u"], ["proof (prove)\nusing this:\n  ?j < length (rev U) \\<Longrightarrow> a \\<bullet>c T ! ?j = (0::'a)\n  ?j < length (rev U) \\<Longrightarrow> T ! ?j = rev U ! ?j\n\ngoal (1 subgoal):\n 1. a \\<bullet>c u = (0::'a)", "by (metis in_set_conv_nth that)"], ["proof (state)\nthis:\n  ?u \\<in> set (rev U) \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "hence \"a \\<bullet>c u = 0\"\n      if \"u \\<in> set U\"\n      for u"], ["proof (prove)\nusing this:\n  ?u \\<in> set (rev U) \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n\ngoal (1 subgoal):\n 1. a \\<bullet>c u = (0::'a)", "by (simp add: that)"], ["proof (state)\nthis:\n  ?u \\<in> set U \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "moreover"], ["proof (state)\nthis:\n  ?u \\<in> set U \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "have \"\\<And>x. x \\<in> set U \\<Longrightarrow> dim_vec x = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set U \\<Longrightarrow> dim_vec x = d", "by (simp add: Cons.prems(2))"], ["proof (state)\nthis:\n  ?x \\<in> set U \\<Longrightarrow> dim_vec ?x = d\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "ultimately"], ["proof (chain)\npicking this:\n  ?u \\<in> set U \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n  ?x \\<in> set U \\<Longrightarrow> dim_vec ?x = d", "have \"adjuster d a U = 0\\<^sub>v d\""], ["proof (prove)\nusing this:\n  ?u \\<in> set U \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n  ?x \\<in> set U \\<Longrightarrow> dim_vec ?x = d\n\ngoal (1 subgoal):\n 1. adjuster d a U = 0\\<^sub>v d", "proof(induction U)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>u.\n                u \\<in> set [] \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n     \\<And>x. x \\<in> set [] \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n    \\<Longrightarrow> adjuster d a [] = 0\\<^sub>v d\n 2. \\<And>aa U.\n       \\<lbrakk>\\<lbrakk>\\<And>u.\n                            u \\<in> set U \\<Longrightarrow>\n                            a \\<bullet>c u = (0::'a);\n                 \\<And>x.\n                    x \\<in> set U \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n                \\<Longrightarrow> adjuster d a U = 0\\<^sub>v d;\n        \\<And>u.\n           u \\<in> set (aa # U) \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n        \\<And>x.\n           x \\<in> set (aa # U) \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> adjuster d a (aa # U) = 0\\<^sub>v d", "case Nil"], ["proof (state)\nthis:\n  ?u \\<in> set [] \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n  ?x \\<in> set [] \\<Longrightarrow> dim_vec ?x = d\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>u.\n                u \\<in> set [] \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n     \\<And>x. x \\<in> set [] \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n    \\<Longrightarrow> adjuster d a [] = 0\\<^sub>v d\n 2. \\<And>aa U.\n       \\<lbrakk>\\<lbrakk>\\<And>u.\n                            u \\<in> set U \\<Longrightarrow>\n                            a \\<bullet>c u = (0::'a);\n                 \\<And>x.\n                    x \\<in> set U \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n                \\<Longrightarrow> adjuster d a U = 0\\<^sub>v d;\n        \\<And>u.\n           u \\<in> set (aa # U) \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n        \\<And>x.\n           x \\<in> set (aa # U) \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> adjuster d a (aa # U) = 0\\<^sub>v d", "then"], ["proof (chain)\npicking this:\n  ?u \\<in> set [] \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n  ?x \\<in> set [] \\<Longrightarrow> dim_vec ?x = d", "show ?case"], ["proof (prove)\nusing this:\n  ?u \\<in> set [] \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n  ?x \\<in> set [] \\<Longrightarrow> dim_vec ?x = d\n\ngoal (1 subgoal):\n 1. adjuster d a [] = 0\\<^sub>v d", "by simp"], ["proof (state)\nthis:\n  adjuster d a [] = 0\\<^sub>v d\n\ngoal (1 subgoal):\n 1. \\<And>aa U.\n       \\<lbrakk>\\<lbrakk>\\<And>u.\n                            u \\<in> set U \\<Longrightarrow>\n                            a \\<bullet>c u = (0::'a);\n                 \\<And>x.\n                    x \\<in> set U \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n                \\<Longrightarrow> adjuster d a U = 0\\<^sub>v d;\n        \\<And>u.\n           u \\<in> set (aa # U) \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n        \\<And>x.\n           x \\<in> set (aa # U) \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> adjuster d a (aa # U) = 0\\<^sub>v d", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa U.\n       \\<lbrakk>\\<lbrakk>\\<And>u.\n                            u \\<in> set U \\<Longrightarrow>\n                            a \\<bullet>c u = (0::'a);\n                 \\<And>x.\n                    x \\<in> set U \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n                \\<Longrightarrow> adjuster d a U = 0\\<^sub>v d;\n        \\<And>u.\n           u \\<in> set (aa # U) \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n        \\<And>x.\n           x \\<in> set (aa # U) \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> adjuster d a (aa # U) = 0\\<^sub>v d", "case (Cons u U)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>u.\n              u \\<in> set U \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n   \\<And>x. x \\<in> set U \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n  \\<Longrightarrow> adjuster d a U = 0\\<^sub>v d\n  ?u \\<in> set (u # U) \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n  ?x \\<in> set (u # U) \\<Longrightarrow> dim_vec ?x = d\n\ngoal (1 subgoal):\n 1. \\<And>aa U.\n       \\<lbrakk>\\<lbrakk>\\<And>u.\n                            u \\<in> set U \\<Longrightarrow>\n                            a \\<bullet>c u = (0::'a);\n                 \\<And>x.\n                    x \\<in> set U \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n                \\<Longrightarrow> adjuster d a U = 0\\<^sub>v d;\n        \\<And>u.\n           u \\<in> set (aa # U) \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n        \\<And>x.\n           x \\<in> set (aa # U) \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> adjuster d a (aa # U) = 0\\<^sub>v d", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>u.\n              u \\<in> set U \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n   \\<And>x. x \\<in> set U \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n  \\<Longrightarrow> adjuster d a U = 0\\<^sub>v d\n  ?u \\<in> set (u # U) \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n  ?x \\<in> set (u # U) \\<Longrightarrow> dim_vec ?x = d\n\ngoal (1 subgoal):\n 1. \\<And>aa U.\n       \\<lbrakk>\\<lbrakk>\\<And>u.\n                            u \\<in> set U \\<Longrightarrow>\n                            a \\<bullet>c u = (0::'a);\n                 \\<And>x.\n                    x \\<in> set U \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n                \\<Longrightarrow> adjuster d a U = 0\\<^sub>v d;\n        \\<And>u.\n           u \\<in> set (aa # U) \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n        \\<And>x.\n           x \\<in> set (aa # U) \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> adjuster d a (aa # U) = 0\\<^sub>v d", "have \"0 \\<cdot>\\<^sub>v u + 0\\<^sub>v d = 0\\<^sub>v d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<cdot>\\<^sub>v u + 0\\<^sub>v d = 0\\<^sub>v d", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (0::'a) \\<cdot>\\<^sub>v u + 0\\<^sub>v d = 0\\<^sub>v d", "have \"dim_vec u = d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec u = d", "by (simp add: calculation(3))"], ["proof (state)\nthis:\n  dim_vec u = d\n\ngoal (1 subgoal):\n 1. (0::'a) \\<cdot>\\<^sub>v u + 0\\<^sub>v d = 0\\<^sub>v d", "thus ?thesis"], ["proof (prove)\nusing this:\n  dim_vec u = d\n\ngoal (1 subgoal):\n 1. (0::'a) \\<cdot>\\<^sub>v u + 0\\<^sub>v d = 0\\<^sub>v d", "by auto"], ["proof (state)\nthis:\n  (0::'a) \\<cdot>\\<^sub>v u + 0\\<^sub>v d = 0\\<^sub>v d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (0::'a) \\<cdot>\\<^sub>v u + 0\\<^sub>v d = 0\\<^sub>v d\n\ngoal (1 subgoal):\n 1. \\<And>aa U.\n       \\<lbrakk>\\<lbrakk>\\<And>u.\n                            u \\<in> set U \\<Longrightarrow>\n                            a \\<bullet>c u = (0::'a);\n                 \\<And>x.\n                    x \\<in> set U \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n                \\<Longrightarrow> adjuster d a U = 0\\<^sub>v d;\n        \\<And>u.\n           u \\<in> set (aa # U) \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n        \\<And>x.\n           x \\<in> set (aa # U) \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> adjuster d a (aa # U) = 0\\<^sub>v d", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>u.\n              u \\<in> set U \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n   \\<And>x. x \\<in> set U \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n  \\<Longrightarrow> adjuster d a U = 0\\<^sub>v d\n  ?u \\<in> set (u # U) \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n  ?x \\<in> set (u # U) \\<Longrightarrow> dim_vec ?x = d\n  (0::'a) \\<cdot>\\<^sub>v u + 0\\<^sub>v d = 0\\<^sub>v d", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>u.\n              u \\<in> set U \\<Longrightarrow> a \\<bullet>c u = (0::'a);\n   \\<And>x. x \\<in> set U \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n  \\<Longrightarrow> adjuster d a U = 0\\<^sub>v d\n  ?u \\<in> set (u # U) \\<Longrightarrow> a \\<bullet>c ?u = (0::'a)\n  ?x \\<in> set (u # U) \\<Longrightarrow> dim_vec ?x = d\n  (0::'a) \\<cdot>\\<^sub>v u + 0\\<^sub>v d = 0\\<^sub>v d\n\ngoal (1 subgoal):\n 1. adjuster d a (u # U) = 0\\<^sub>v d", "by auto"], ["proof (state)\nthis:\n  adjuster d a (u # U) = 0\\<^sub>v d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  adjuster d a U = 0\\<^sub>v d\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "hence adjuster_a: \"adjuster d a U + a = a\""], ["proof (prove)\nusing this:\n  adjuster d a U = 0\\<^sub>v d\n\ngoal (1 subgoal):\n 1. adjuster d a U + a = a", "by (simp add: Cons.prems(2) carrier_vecI)"], ["proof (state)\nthis:\n  adjuster d a U + a = a\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "have \"gram_schmidt_sub0 d U (a # R) = gram_schmidt_sub0 d (a # U) R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gram_schmidt_sub0 d U (a # R) = gram_schmidt_sub0 d (a # U) R", "by (simp add: adjuster_a nonzero_a)"], ["proof (state)\nthis:\n  gram_schmidt_sub0 d U (a # R) = gram_schmidt_sub0 d (a # U) R\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "also"], ["proof (state)\nthis:\n  gram_schmidt_sub0 d U (a # R) = gram_schmidt_sub0 d (a # U) R\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "have \"\\<dots> = rev (a # R) @ U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gram_schmidt_sub0 d (a # U) R = rev (a # R) @ U", "apply (subst Cons.IH)"], ["proof (prove)\ngoal (3 subgoals):\n 1. corthogonal (rev (a # U) @ R)\n 2. \\<And>x.\n       x \\<in> set (a # U) \\<union> set R \\<Longrightarrow> dim_vec x = d\n 3. rev R @ a # U = rev (a # R) @ U", "using Cons.prems"], ["proof (prove)\nusing this:\n  corthogonal (rev U @ a # R)\n  ?x \\<in> set U \\<union> set (a # R) \\<Longrightarrow> dim_vec ?x = d\n\ngoal (3 subgoals):\n 1. corthogonal (rev (a # U) @ R)\n 2. \\<And>x.\n       x \\<in> set (a # U) \\<union> set R \\<Longrightarrow> dim_vec x = d\n 3. rev R @ a # U = rev (a # R) @ U", "by simp_all"], ["proof (state)\nthis:\n  gram_schmidt_sub0 d (a # U) R = rev (a # R) @ U\n\ngoal (1 subgoal):\n 1. \\<And>a R U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>corthogonal (rev U @ R);\n                    \\<And>x.\n                       x \\<in> set U \\<union> set R \\<Longrightarrow>\n                       dim_vec x = d\\<rbrakk>\n                   \\<Longrightarrow> gram_schmidt_sub0 d U R = rev R @ U;\n        corthogonal (rev U @ a # R);\n        \\<And>x.\n           x \\<in> set U \\<union> set (a # R) \\<Longrightarrow>\n           dim_vec x = d\\<rbrakk>\n       \\<Longrightarrow> gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "finally"], ["proof (chain)\npicking this:\n  gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "show ?case"], ["proof (prove)\nusing this:\n  gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U\n\ngoal (1 subgoal):\n 1. gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U", "by -"], ["proof (state)\nthis:\n  gram_schmidt_sub0 d U (a # R) = rev (a # R) @ U\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>corthogonal (rev ?U @ R);\n   \\<And>x.\n      x \\<in> set ?U \\<union> set R \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n  \\<Longrightarrow> gram_schmidt_sub0 d ?U R = rev R @ ?U\n\ngoal (1 subgoal):\n 1. gram_schmidt0 d R = rev R", "from this[where U=\"[]\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>corthogonal (rev [] @ R);\n   \\<And>x.\n      x \\<in> set [] \\<union> set R \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n  \\<Longrightarrow> gram_schmidt_sub0 d [] R = rev R @ []", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>corthogonal (rev [] @ R);\n   \\<And>x.\n      x \\<in> set [] \\<union> set R \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n  \\<Longrightarrow> gram_schmidt_sub0 d [] R = rev R @ []\n\ngoal (1 subgoal):\n 1. gram_schmidt0 d R = rev R", "unfolding gram_schmidt0_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>corthogonal (rev [] @ R);\n   \\<And>x.\n      x \\<in> set [] \\<union> set R \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n  \\<Longrightarrow> gram_schmidt_sub0 d [] R = rev R @ []\n\ngoal (1 subgoal):\n 1. gram_schmidt_sub0 d [] R = rev R", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>corthogonal (rev [] @ R);\n   \\<And>x.\n      x \\<in> set [] \\<union> set R \\<Longrightarrow> dim_vec x = d\\<rbrakk>\n  \\<Longrightarrow> gram_schmidt_sub0 d [] R = rev R @ []\n  corthogonal R\n  ?x \\<in> set R \\<Longrightarrow> dim_vec ?x = d\n\ngoal (1 subgoal):\n 1. gram_schmidt_sub0 d [] R = rev R", "by auto"], ["proof (state)\nthis:\n  gram_schmidt0 d R = rev R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma adjuster_carrier': (* Like adjuster_carrier but with one assm less *)\n  assumes w: \"(w :: 'a::conjugatable_field vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n  shows \"adjuster n w us \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "by (insert us, induction us, auto)"], ["", "lemma eq_mat_on_vecI:\n  fixes M N :: \\<open>'a::field mat\\<close>\n  assumes eq: \\<open>\\<And>v. v\\<in>carrier_vec nA \\<Longrightarrow> M *\\<^sub>v v = N *\\<^sub>v v\\<close>\n  assumes [simp]: \\<open>M \\<in> carrier_mat nB nA\\<close> \\<open>N \\<in> carrier_mat nB nA\\<close>\n  shows \\<open>M = N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. M = N", "proof (rule eq_matI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row N; j < dim_col N\\<rbrakk>\n       \\<Longrightarrow> M $$ (i, j) = N $$ (i, j)\n 2. dim_row M = dim_row N\n 3. dim_col M = dim_col N", "show [simp]: \\<open>dim_row M = dim_row N\\<close> \\<open>dim_col M = dim_col N\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row M = dim_row N &&& dim_col M = dim_col N", "using assms(2) assms(3)"], ["proof (prove)\nusing this:\n  M \\<in> carrier_mat nB nA\n  N \\<in> carrier_mat nB nA\n\ngoal (1 subgoal):\n 1. dim_row M = dim_row N &&& dim_col M = dim_col N", "by blast+"], ["proof (state)\nthis:\n  dim_row M = dim_row N\n  dim_col M = dim_col N\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row N; j < dim_col N\\<rbrakk>\n       \\<Longrightarrow> M $$ (i, j) = N $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row N; j < dim_col N\\<rbrakk>\n       \\<Longrightarrow> M $$ (i, j) = N $$ (i, j)", "assume [simp]: \\<open>i < dim_row N\\<close> \\<open>j < dim_col N\\<close>"], ["proof (state)\nthis:\n  i < dim_row N\n  j < dim_col N\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row N; j < dim_col N\\<rbrakk>\n       \\<Longrightarrow> M $$ (i, j) = N $$ (i, j)", "show \\<open>M $$ (i, j) = N $$ (i, j)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. M $$ (i, j) = N $$ (i, j)", "thm mat_entry_explicit[where M=M]"], ["proof (prove)\ngoal (1 subgoal):\n 1. M $$ (i, j) = N $$ (i, j)", "apply (subst mat_entry_explicit[symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. M \\<in> carrier_mat ?m ?n\n 2. i < ?m\n 3. j < ?n\n 4. (M *\\<^sub>v unit_vec ?n j) $ i = N $$ (i, j)", "using assms"], ["proof (prove)\nusing this:\n  ?v \\<in> carrier_vec nA \\<Longrightarrow> M *\\<^sub>v ?v = N *\\<^sub>v ?v\n  M \\<in> carrier_mat nB nA\n  N \\<in> carrier_mat nB nA\n\ngoal (4 subgoals):\n 1. M \\<in> carrier_mat ?m ?n\n 2. i < ?m\n 3. j < ?n\n 4. (M *\\<^sub>v unit_vec ?n j) $ i = N $$ (i, j)", "apply auto[3]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (M *\\<^sub>v unit_vec (dim_col M) j) $ i = N $$ (i, j)", "apply (subst mat_entry_explicit[symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. N \\<in> carrier_mat ?m25 ?n25\n 2. i < ?m25\n 3. j < ?n25\n 4. (M *\\<^sub>v unit_vec (dim_col M) j) $ i =\n    (N *\\<^sub>v unit_vec ?n25 j) $ i", "using assms"], ["proof (prove)\nusing this:\n  ?v \\<in> carrier_vec nA \\<Longrightarrow> M *\\<^sub>v ?v = N *\\<^sub>v ?v\n  M \\<in> carrier_mat nB nA\n  N \\<in> carrier_mat nB nA\n\ngoal (4 subgoals):\n 1. N \\<in> carrier_mat ?m25 ?n25\n 2. i < ?m25\n 3. j < ?n25\n 4. (M *\\<^sub>v unit_vec (dim_col M) j) $ i =\n    (N *\\<^sub>v unit_vec ?n25 j) $ i", "apply auto[3]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (M *\\<^sub>v unit_vec (dim_col M) j) $ i =\n    (N *\\<^sub>v unit_vec (dim_col N) j) $ i", "apply (subst eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. unit_vec (dim_col M) j \\<in> carrier_vec nA\n 2. (N *\\<^sub>v unit_vec (dim_col M) j) $ i =\n    (N *\\<^sub>v unit_vec (dim_col N) j) $ i", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vec (dim_col N) j \\<in> carrier_vec nA", "using assms(3) unit_vec_carrier"], ["proof (prove)\nusing this:\n  N \\<in> carrier_mat nB nA\n  unit_vec ?n ?i \\<in> carrier_vec ?n\n\ngoal (1 subgoal):\n 1. unit_vec (dim_col N) j \\<in> carrier_vec nA", "by blast"], ["proof (state)\nthis:\n  M $$ (i, j) = N $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_of_vec_plus:\n  fixes v1 v2 :: \\<open>complex vec\\<close>\n  assumes \\<open>dim_vec v1 = dim_vec v2\\<close>\n  shows \\<open>list_of_vec (v1 + v2) = map2 (+) (list_of_vec v1) (list_of_vec v2)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_vec (v1 + v2) = map2 (+) (list_of_vec v1) (list_of_vec v2)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. list_of_vec (v1 + v2) = map2 (+) (list_of_vec v1) (list_of_vec v2)", "have \\<open>i < dim_vec v1 \\<Longrightarrow> (list_of_vec (v1 + v2)) ! i = (map2 (+) (list_of_vec v1) (list_of_vec v2)) ! i\\<close>\n    for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_vec v1 \\<Longrightarrow>\n    list_of_vec (v1 + v2) ! i =\n    map2 (+) (list_of_vec v1) (list_of_vec v2) ! i", "by (simp add: assms)"], ["proof (state)\nthis:\n  ?i < dim_vec v1 \\<Longrightarrow>\n  list_of_vec (v1 + v2) ! ?i =\n  map2 (+) (list_of_vec v1) (list_of_vec v2) ! ?i\n\ngoal (1 subgoal):\n 1. list_of_vec (v1 + v2) = map2 (+) (list_of_vec v1) (list_of_vec v2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?i < dim_vec v1 \\<Longrightarrow>\n  list_of_vec (v1 + v2) ! ?i =\n  map2 (+) (list_of_vec v1) (list_of_vec v2) ! ?i\n\ngoal (1 subgoal):\n 1. list_of_vec (v1 + v2) = map2 (+) (list_of_vec v1) (list_of_vec v2)", "by (metis assms index_add_vec(2) length_list_of_vec length_map map_fst_zip nth_equalityI)"], ["proof (state)\nthis:\n  list_of_vec (v1 + v2) = map2 (+) (list_of_vec v1) (list_of_vec v2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_of_vec_mult:\n  fixes v :: \\<open>complex vec\\<close>\n  shows \\<open>list_of_vec (c \\<cdot>\\<^sub>v v) = map ((*) c) (list_of_vec v)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_vec (c \\<cdot>\\<^sub>v v) = map ((*) c) (list_of_vec v)", "by (metis (mono_tags, lifting) index_smult_vec(1) index_smult_vec(2) length_list_of_vec length_map nth_equalityI nth_list_of_vec nth_map)"], ["", "unbundle no_jnf_notation"], ["", "end"]]}