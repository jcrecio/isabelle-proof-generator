{"file_name": "/home/qj213/afp-2021-10-22/thys/Dijkstra_Shortest_Path/Weight.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dijkstra_Shortest_Path", "problem_names": ["lemma add_nonneg_nonneg [simp]:\n  assumes \"0 \\<le> a\" and \"0 \\<le> b\" shows \"0 \\<le> a + b\"", "lemma add_nonpos_nonpos[simp]:\n  assumes \"a \\<le> 0\" and \"b \\<le> 0\" shows \"a + b \\<le> 0\"", "lemma add_nonneg_eq_0_iff:\n  assumes x: \"0 \\<le> x\" and y: \"0 \\<le> y\"\n  shows \"x + y = 0 \\<longleftrightarrow> x = 0 \\<and> y = 0\"", "lemma add_incr: \"0\\<le>b \\<Longrightarrow> a \\<le> a+b\"", "lemma add_incr_left[simp, intro!]: \"0\\<le>b \\<Longrightarrow> a \\<le> b + a\"", "lemma sum_not_less[simp, intro!]: \n  \"0\\<le>b \\<Longrightarrow> \\<not> (a+b < a)\"\n  \"0\\<le>a \\<Longrightarrow> \\<not> (a+b < b)\"", "lemma inf_add_left[simp]: \"top + a = top\"", "lemmas [simp] = top_unique less_top[symmetric]", "lemma not_less_inf[simp]:\n  \"\\<not> (a < top) \\<longleftrightarrow> a=top\"", "lemma num_val_iff[simp]: \"e\\<noteq>Infty \\<Longrightarrow> Num (val e) = e\"", "lemma [simp]: \"Infty\\<le>a \\<longleftrightarrow> a=Infty\"", "lemma [simp]: \"less a Infty \\<longleftrightarrow> a \\<noteq> Infty\"", "lemma [simp]: \"plus Infty a = Infty\"", "lemma infty_inf_unbox:\n  \"Num a \\<noteq> top\"\n  \"top \\<noteq> Num a\"\n  \"Infty = top\"", "lemma infty_ord_unbox:\n  \"Num a \\<le> Num b \\<longleftrightarrow> a \\<le> b\"\n  \"Num a < Num b \\<longleftrightarrow> a < b\"", "lemma infty_plus_unbox:\n  \"Num a + Num b = Num (a+b)\"", "lemma infty_zero_unbox:\n  \"Num a = 0 \\<longleftrightarrow> a = 0\"\n  \"Num 0 = 0\"", "lemmas infty_unbox = \n  infty_inf_unbox infty_zero_unbox infty_ord_unbox infty_plus_unbox", "lemma inf_not_zero[simp]:\n  \"top\\<noteq>(0::_ infty)\" \"(0::_ infty)\\<noteq>top\"", "lemma num_val_iff'[simp]: \"e\\<noteq>top \\<Longrightarrow> Num (val e) = e\"", "lemma infty_neE: \n  \"\\<lbrakk>a\\<noteq>Infty; \\<And>d. a=Num d \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\"\n  \"\\<lbrakk>a\\<noteq>top; \\<And>d. a=Num d \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\""], "translations": [["", "lemma add_nonneg_nonneg [simp]:\n  assumes \"0 \\<le> a\" and \"0 \\<le> b\" shows \"0 \\<le> a + b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> a + b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> a + b", "have \"0 + 0 \\<le> a + b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) + (0::'a) \\<le> a + b", "using assms"], ["proof (prove)\nusing this:\n  (0::'a) \\<le> a\n  (0::'a) \\<le> b\n\ngoal (1 subgoal):\n 1. (0::'a) + (0::'a) \\<le> a + b", "by (rule add_mono)"], ["proof (state)\nthis:\n  (0::'a) + (0::'a) \\<le> a + b\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> a + b", "then"], ["proof (chain)\npicking this:\n  (0::'a) + (0::'a) \\<le> a + b", "show ?thesis"], ["proof (prove)\nusing this:\n  (0::'a) + (0::'a) \\<le> a + b\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> a + b", "by simp"], ["proof (state)\nthis:\n  (0::'a) \\<le> a + b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_nonpos_nonpos[simp]:\n  assumes \"a \\<le> 0\" and \"b \\<le> 0\" shows \"a + b \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a + b \\<le> (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a + b \\<le> (0::'a)", "have \"a + b \\<le> 0 + 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a + b \\<le> (0::'a) + (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  a \\<le> (0::'a)\n  b \\<le> (0::'a)\n\ngoal (1 subgoal):\n 1. a + b \\<le> (0::'a) + (0::'a)", "by (rule add_mono)"], ["proof (state)\nthis:\n  a + b \\<le> (0::'a) + (0::'a)\n\ngoal (1 subgoal):\n 1. a + b \\<le> (0::'a)", "then"], ["proof (chain)\npicking this:\n  a + b \\<le> (0::'a) + (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  a + b \\<le> (0::'a) + (0::'a)\n\ngoal (1 subgoal):\n 1. a + b \\<le> (0::'a)", "by simp"], ["proof (state)\nthis:\n  a + b \\<le> (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_nonneg_eq_0_iff:\n  assumes x: \"0 \\<le> x\" and y: \"0 \\<le> y\"\n  shows \"x + y = 0 \\<longleftrightarrow> x = 0 \\<and> y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x + y = (0::'a)) = (x = (0::'a) \\<and> y = (0::'a))", "by (metis add.comm_neutral add.left_neutral add_left_mono antisym x y)"], ["", "lemma add_incr: \"0\\<le>b \\<Longrightarrow> a \\<le> a+b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> b \\<Longrightarrow> a \\<le> a + b", "by (metis add.comm_neutral add_left_mono)"], ["", "lemma add_incr_left[simp, intro!]: \"0\\<le>b \\<Longrightarrow> a \\<le> b + a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> b \\<Longrightarrow> a \\<le> b + a", "by (metis add_incr add.commute)"], ["", "lemma sum_not_less[simp, intro!]: \n  \"0\\<le>b \\<Longrightarrow> \\<not> (a+b < a)\"\n  \"0\\<le>a \\<Longrightarrow> \\<not> (a+b < b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((0::'a) \\<le> b \\<Longrightarrow> \\<not> a + b < a) &&&\n    ((0::'a) \\<le> a \\<Longrightarrow> \\<not> a + b < b)", "apply (metis add_incr less_le_not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> a \\<Longrightarrow> \\<not> a + b < b", "apply (metis add_incr_left less_le_not_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "instance nat :: weight"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(nat, weight_class)", ".."], ["", "instance int :: weight"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(int, weight_class)", ".."], ["", "instance rat :: weight"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(rat, weight_class)", ".."], ["", "instance real :: weight"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(real, weight_class)", ".."], ["", "term top"], ["", "class top_weight = order_top + weight +\n  assumes inf_add_right[simp]: \"a + top = top\"\nbegin"], ["", "lemma inf_add_left[simp]: \"top + a = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. top + a = top", "by (metis add.commute inf_add_right)"], ["", "lemmas [simp] = top_unique less_top[symmetric]"], ["", "lemma not_less_inf[simp]:\n  \"\\<not> (a < top) \\<longleftrightarrow> a=top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> a < top) = (a = top)", "by simp"], ["", "end"], ["", "subsection \\<open>Adding Infinity\\<close>"], ["", "text \\<open>\n  We provide a standard way to add an infinity element to any type.\n\\<close>"], ["", "datatype 'a infty = Infty | Num 'a"], ["", "primrec val where \"val (Num d) = d\""], ["", "lemma num_val_iff[simp]: \"e\\<noteq>Infty \\<Longrightarrow> Num (val e) = e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<noteq> Infty \\<Longrightarrow> Num (val e) = e", "by (cases e) auto"], ["", "type_synonym NatB = \"nat infty\""], ["", "instantiation infty :: (weight) top_weight\nbegin"], ["", "definition \"(0::'a infty) == Num 0\""], ["", "definition \"top \\<equiv> Infty\""], ["", "fun less_eq_infty where\n    \"less_eq Infty (Num _) \\<longleftrightarrow> False\" |\n    \"less_eq _ Infty \\<longleftrightarrow> True\" |\n    \"less_eq (Num a) (Num b) \\<longleftrightarrow> a\\<le>b\""], ["", "lemma [simp]: \"Infty\\<le>a \\<longleftrightarrow> a=Infty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Infty \\<le> a) = (a = Infty)", "by (cases a) auto"], ["", "fun less_infty where\n    \"less Infty _ \\<longleftrightarrow> False\" |\n    \"less (Num _) Infty \\<longleftrightarrow> True\" |\n    \"less (Num a) (Num b) \\<longleftrightarrow> a<b\""], ["", "lemma [simp]: \"less a Infty \\<longleftrightarrow> a \\<noteq> Infty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a < Infty) = (a \\<noteq> Infty)", "by (cases a) auto"], ["", "fun plus_infty where \n    \"plus _ Infty = Infty\" |\n    \"plus Infty _ = Infty\" |\n    \"plus (Num a) (Num b) = Num (a+b)\""], ["", "lemma [simp]: \"plus Infty a = Infty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Infty + a = Infty", "by (cases a) simp_all"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a infty, top_weight_class)", "apply (intro_classes)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>a. a \\<le> top\n 6. \\<And>a b c. a + b + c = a + (b + c)\n 7. \\<And>a b. a + b = b + a\n 8. \\<And>a. 0 + a = a\n 9. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 10. \\<And>x y. x \\<le> y \\<or> y \\<le> x\nA total of 11 subgoals...", "apply (case_tac [!] x) [4]"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<And>x y.\n       x = Infty \\<Longrightarrow>\n       (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x y x2.\n       x = Num x2 \\<Longrightarrow>\n       (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 3. \\<And>x. x = Infty \\<Longrightarrow> x \\<le> x\n 4. \\<And>x x2. x = Num x2 \\<Longrightarrow> x \\<le> x\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x = Infty\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z\n 6. \\<And>x y z x2.\n       \\<lbrakk>x \\<le> y; y \\<le> z; x = Num x2\\<rbrakk>\n       \\<Longrightarrow> x \\<le> z\n 7. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x; x = Infty\\<rbrakk>\n       \\<Longrightarrow> x = y\n 8. \\<And>x y x2.\n       \\<lbrakk>x \\<le> y; y \\<le> x; x = Num x2\\<rbrakk>\n       \\<Longrightarrow> x = y\n 9. \\<And>a. a \\<le> top\n 10. \\<And>a b c. a + b + c = a + (b + c)\nA total of 15 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x y x2.\n       x = Num x2 \\<Longrightarrow>\n       (Num x2 < y) = (Num x2 \\<le> y \\<and> \\<not> y \\<le> Num x2)\n 2. \\<And>x y z x2.\n       \\<lbrakk>Num x2 \\<le> y; y \\<le> z; x = Num x2\\<rbrakk>\n       \\<Longrightarrow> Num x2 \\<le> z\n 3. \\<And>x y x2.\n       \\<lbrakk>Num x2 \\<le> y; y \\<le> Num x2; x = Num x2\\<rbrakk>\n       \\<Longrightarrow> Num x2 = y\n 4. \\<And>a. a \\<le> top\n 5. \\<And>a b c. a + b + c = a + (b + c)\n 6. \\<And>a b. a + b = b + a\n 7. \\<And>a. 0 + a = a\n 8. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 9. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 10. \\<And>a. a + top = top", "apply (case_tac [!] y) [3]"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>x y x2.\n       \\<lbrakk>x = Num x2; y = Infty\\<rbrakk>\n       \\<Longrightarrow> (Num x2 < y) =\n                         (Num x2 \\<le> y \\<and> \\<not> y \\<le> Num x2)\n 2. \\<And>x y x2 x2a.\n       \\<lbrakk>x = Num x2; y = Num x2a\\<rbrakk>\n       \\<Longrightarrow> (Num x2 < y) =\n                         (Num x2 \\<le> y \\<and> \\<not> y \\<le> Num x2)\n 3. \\<And>x y z x2.\n       \\<lbrakk>Num x2 \\<le> y; y \\<le> z; x = Num x2; y = Infty\\<rbrakk>\n       \\<Longrightarrow> Num x2 \\<le> z\n 4. \\<And>x y z x2 x2a.\n       \\<lbrakk>Num x2 \\<le> y; y \\<le> z; x = Num x2; y = Num x2a\\<rbrakk>\n       \\<Longrightarrow> Num x2 \\<le> z\n 5. \\<And>x y x2.\n       \\<lbrakk>Num x2 \\<le> y; y \\<le> Num x2; x = Num x2;\n        y = Infty\\<rbrakk>\n       \\<Longrightarrow> Num x2 = y\n 6. \\<And>x y x2 x2a.\n       \\<lbrakk>Num x2 \\<le> y; y \\<le> Num x2; x = Num x2;\n        y = Num x2a\\<rbrakk>\n       \\<Longrightarrow> Num x2 = y\n 7. \\<And>a. a \\<le> top\n 8. \\<And>a b c. a + b + c = a + (b + c)\n 9. \\<And>a b. a + b = b + a\n 10. \\<And>a. 0 + a = a\nA total of 13 subgoals...", "apply (simp_all add: less_le_not_le)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x y z x2 x2a.\n       \\<lbrakk>x2 \\<le> x2a; Num x2a \\<le> z; x = Num x2;\n        y = Num x2a\\<rbrakk>\n       \\<Longrightarrow> Num x2 \\<le> z\n 2. \\<And>a. a \\<le> top\n 3. \\<And>a b c. a + b + c = a + (b + c)\n 4. \\<And>a b. a + b = b + a\n 5. \\<And>a. 0 + a = a\n 6. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 7. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 8. \\<And>a. a + top = top", "apply (case_tac z)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x y z x2 x2a.\n       \\<lbrakk>x2 \\<le> x2a; Num x2a \\<le> z; x = Num x2; y = Num x2a;\n        z = Infty\\<rbrakk>\n       \\<Longrightarrow> Num x2 \\<le> z\n 2. \\<And>x y z x2 x2a x2b.\n       \\<lbrakk>x2 \\<le> x2a; Num x2a \\<le> z; x = Num x2; y = Num x2a;\n        z = Num x2b\\<rbrakk>\n       \\<Longrightarrow> Num x2 \\<le> z\n 3. \\<And>a. a \\<le> top\n 4. \\<And>a b c. a + b + c = a + (b + c)\n 5. \\<And>a b. a + b = b + a\n 6. \\<And>a. 0 + a = a\n 7. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 8. \\<And>x y. x \\<le> y \\<or> y \\<le> x\n 9. \\<And>a. a + top = top", "apply (simp_all add: top_infty_def zero_infty_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b c. a + b + c = a + (b + c)\n 2. \\<And>a b. a + b = b + a\n 3. \\<And>a. Num (0::'a) + a = a\n 4. \\<And>a b c. a \\<le> b \\<Longrightarrow> c + a \\<le> c + b\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "apply (case_tac [!] a) [4]"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>a b c. a = Infty \\<Longrightarrow> a + b + c = a + (b + c)\n 2. \\<And>a b c x2. a = Num x2 \\<Longrightarrow> a + b + c = a + (b + c)\n 3. \\<And>a b. a = Infty \\<Longrightarrow> a + b = b + a\n 4. \\<And>a b x2. a = Num x2 \\<Longrightarrow> a + b = b + a\n 5. \\<And>a. a = Infty \\<Longrightarrow> Num (0::'a) + a = a\n 6. \\<And>a x2. a = Num x2 \\<Longrightarrow> Num (0::'a) + a = a\n 7. \\<And>a b c.\n       \\<lbrakk>a \\<le> b; a = Infty\\<rbrakk>\n       \\<Longrightarrow> c + a \\<le> c + b\n 8. \\<And>a b c x2.\n       \\<lbrakk>a \\<le> b; a = Num x2\\<rbrakk>\n       \\<Longrightarrow> c + a \\<le> c + b\n 9. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "apply simp_all"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b c x2.\n       a = Num x2 \\<Longrightarrow> Num x2 + b + c = Num x2 + (b + c)\n 2. \\<And>a b x2. a = Num x2 \\<Longrightarrow> Num x2 + b = b + Num x2\n 3. \\<And>a b c x2.\n       \\<lbrakk>Num x2 \\<le> b; a = Num x2\\<rbrakk>\n       \\<Longrightarrow> c + Num x2 \\<le> c + b\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "apply (case_tac [!] b) [3]"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>a b c x2.\n       \\<lbrakk>a = Num x2; b = Infty\\<rbrakk>\n       \\<Longrightarrow> Num x2 + b + c = Num x2 + (b + c)\n 2. \\<And>a b c x2 x2a.\n       \\<lbrakk>a = Num x2; b = Num x2a\\<rbrakk>\n       \\<Longrightarrow> Num x2 + b + c = Num x2 + (b + c)\n 3. \\<And>a b x2.\n       \\<lbrakk>a = Num x2; b = Infty\\<rbrakk>\n       \\<Longrightarrow> Num x2 + b = b + Num x2\n 4. \\<And>a b x2 x2a.\n       \\<lbrakk>a = Num x2; b = Num x2a\\<rbrakk>\n       \\<Longrightarrow> Num x2 + b = b + Num x2\n 5. \\<And>a b c x2.\n       \\<lbrakk>Num x2 \\<le> b; a = Num x2; b = Infty\\<rbrakk>\n       \\<Longrightarrow> c + Num x2 \\<le> c + b\n 6. \\<And>a b c x2 x2a.\n       \\<lbrakk>Num x2 \\<le> b; a = Num x2; b = Num x2a\\<rbrakk>\n       \\<Longrightarrow> c + Num x2 \\<le> c + b\n 7. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "apply (simp_all add: ac_simps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b c x2 x2a.\n       \\<lbrakk>a = Num x2; b = Num x2a\\<rbrakk>\n       \\<Longrightarrow> Num (x2 + x2a) + c = Num x2 + (Num x2a + c)\n 2. \\<And>a b c x2 x2a.\n       \\<lbrakk>x2 \\<le> x2a; a = Num x2; b = Num x2a\\<rbrakk>\n       \\<Longrightarrow> c + Num x2 \\<le> c + Num x2a\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "apply (case_tac [!] c) [2]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b c x2 x2a.\n       \\<lbrakk>a = Num x2; b = Num x2a; c = Infty\\<rbrakk>\n       \\<Longrightarrow> Num (x2 + x2a) + c = Num x2 + (Num x2a + c)\n 2. \\<And>a b c x2 x2a x2b.\n       \\<lbrakk>a = Num x2; b = Num x2a; c = Num x2b\\<rbrakk>\n       \\<Longrightarrow> Num (x2 + x2a) + c = Num x2 + (Num x2a + c)\n 3. \\<And>a b c x2 x2a.\n       \\<lbrakk>x2 \\<le> x2a; a = Num x2; b = Num x2a; c = Infty\\<rbrakk>\n       \\<Longrightarrow> c + Num x2 \\<le> c + Num x2a\n 4. \\<And>a b c x2 x2a x2b.\n       \\<lbrakk>x2 \\<le> x2a; a = Num x2; b = Num x2a; c = Num x2b\\<rbrakk>\n       \\<Longrightarrow> c + Num x2 \\<le> c + Num x2a\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "apply (simp_all add: ac_simps add_right_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "apply (case_tac \"(x,y)\" rule: less_eq_infty.cases)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y uu_.\n       (x, y) = (Infty, Num uu_) \\<Longrightarrow> x \\<le> y \\<or> y \\<le> x\n 2. \\<And>x y uv_.\n       (x, y) = (uv_, Infty) \\<Longrightarrow> x \\<le> y \\<or> y \\<le> x\n 3. \\<And>x y a b.\n       (x, y) = (Num a, Num b) \\<Longrightarrow> x \\<le> y \\<or> y \\<le> x", "apply (simp_all add: linear)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "subsubsection \\<open>Unboxing\\<close>"], ["", "text \\<open>Conversion between the constants defined by the\n  typeclass, and the concrete functions on the @{typ \"'a infty\"} type. \n\\<close>"], ["", "lemma infty_inf_unbox:\n  \"Num a \\<noteq> top\"\n  \"top \\<noteq> Num a\"\n  \"Infty = top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Num a \\<noteq> top &&& top \\<noteq> Num a &&& Infty = top", "by (auto simp add: top_infty_def)"], ["", "lemma infty_ord_unbox:\n  \"Num a \\<le> Num b \\<longleftrightarrow> a \\<le> b\"\n  \"Num a < Num b \\<longleftrightarrow> a < b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Num a \\<le> Num b) = (a \\<le> b) &&& (Num a < Num b) = (a < b)", "by auto"], ["", "lemma infty_plus_unbox:\n  \"Num a + Num b = Num (a+b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Num a + Num b = Num (a + b)", "by (auto)"], ["", "lemma infty_zero_unbox:\n  \"Num a = 0 \\<longleftrightarrow> a = 0\"\n  \"Num 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Num a = 0) = (a = (0::'a)) &&& Num (0::'b) = 0", "by (auto simp: zero_infty_def)"], ["", "lemmas infty_unbox = \n  infty_inf_unbox infty_zero_unbox infty_ord_unbox infty_plus_unbox"], ["", "lemma inf_not_zero[simp]:\n  \"top\\<noteq>(0::_ infty)\" \"(0::_ infty)\\<noteq>top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. top \\<noteq> 0 &&& 0 \\<noteq> top", "apply (unfold zero_infty_def top_infty_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Infty \\<noteq> Num (0::'a)\n 2. Num (0::'b) \\<noteq> Infty", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma num_val_iff'[simp]: \"e\\<noteq>top \\<Longrightarrow> Num (val e) = e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<noteq> top \\<Longrightarrow> Num (val e) = e", "by (cases e) (auto simp add: infty_unbox)"], ["", "lemma infty_neE: \n  \"\\<lbrakk>a\\<noteq>Infty; \\<And>d. a=Num d \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\"\n  \"\\<lbrakk>a\\<noteq>top; \\<And>d. a=Num d \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>a \\<noteq> Infty;\n      \\<And>d. a = Num d \\<Longrightarrow> P\\<rbrakk>\n     \\<Longrightarrow> P) &&&\n    (\\<lbrakk>a \\<noteq> top;\n      \\<And>d. a = Num d \\<Longrightarrow> P\\<rbrakk>\n     \\<Longrightarrow> P)", "by (case_tac [!] a) (auto simp add: infty_unbox)"], ["", "end"]]}