{"file_name": "/home/qj213/afp-2021-10-22/thys/Dijkstra_Shortest_Path/Graph.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dijkstra_Shortest_Path", "problem_names": ["lemma E_validD: assumes \"(v,e,v')\\<in>E\"\n      shows \"v\\<in>V\" \"v'\\<in>V\"", "lemma empty_valid[simp]: \"valid_graph empty\"", "lemma add_node_valid[simp]: assumes \"valid_graph g\" \n    shows \"valid_graph (add_node v g)\"", "lemma delete_node_valid[simp]: assumes \"valid_graph g\" \n    shows \"valid_graph (delete_node v g)\"", "lemma add_edge_valid[simp]: assumes \"valid_graph g\" \n    shows \"valid_graph (add_edge v e v' g)\"", "lemma delete_edge_valid[simp]: assumes \"valid_graph g\" \n    shows \"valid_graph (delete_edge v e v' g)\"", "lemma succ_finite[simp, intro]: \"finite (edges G) \\<Longrightarrow> finite (succ G v)\"", "lemma nodes_empty[simp]: \"nodes empty = {}\"", "lemma edges_empty[simp]: \"edges empty = {}\"", "lemma succ_empty[simp]: \"succ empty v = {}\"", "lemma nodes_add_node[simp]: \"nodes (add_node v g) = insert v (nodes g)\"", "lemma nodes_add_edge[simp]: \n    \"nodes (add_edge v e v' g) = insert v (insert v' (nodes g))\"", "lemma edges_add_edge[simp]: \n    \"edges (add_edge v e v' g) = insert (v,e,v') (edges g)\"", "lemma edges_add_node[simp]: \n    \"edges (add_node v g) = edges g\"", "lemma (in valid_graph) succ_subset: \"succ G v \\<subseteq> UNIV\\<times>V\"", "lemma is_path_simps[simp, intro!]:\n      \"is_path v [] v \\<longleftrightarrow> v\\<in>V\"\n      \"is_path v [(v,w,v')] v' \\<longleftrightarrow> (v,w,v')\\<in>E\"", "lemma is_path_memb[simp]:\n      \"is_path v p v' \\<Longrightarrow> v\\<in>V \\<and> v'\\<in>V\"", "lemma is_path_split:\n      \"is_path v (p1@p2) v' \\<longleftrightarrow> (\\<exists>u. is_path v p1 u \\<and> is_path u p2 v')\"", "lemma is_path_split'[simp]: \n      \"is_path v (p1@(u,w,u')#p2) v' \n        \\<longleftrightarrow> is_path v p1 u \\<and> (u,w,u')\\<in>E \\<and> is_path u' p2 v'\"", "lemma int_vertices_simps[simp]:\n    \"int_vertices [] = {}\"\n    \"int_vertices (vv#p) = insert (fst vv) (int_vertices p)\"\n    \"int_vertices (p1@p2) = int_vertices p1 \\<union> int_vertices p2\"", "lemma (in valid_graph) int_vertices_subset: \n    \"is_path v p v' \\<Longrightarrow> int_vertices p \\<subseteq> V\"", "lemma int_vertices_empty[simp]: \"int_vertices p = {} \\<longleftrightarrow> p=[]\"", "lemma (in valid_graph) path_split_set:\n    assumes \"is_path v p v'\" and \"v\\<in>W\" and \"v'\\<notin>W\"\n    obtains p1 p2 u w u' where\n    \"p=p1@(u,w,u')#p2\" and\n    \"int_vertices p1 \\<subseteq> W\" and \"u\\<in>W\" and \"u'\\<notin>W\"", "lemma (in valid_graph) path_split_set':\n    assumes \"is_path v p v'\" and \"v'\\<in>W\"\n    obtains p1 p2 u where\n    \"p=p1@p2\" and\n    \"is_path v p1 u\" and\n    \"is_path u p2 v'\" and\n    \"int_vertices p1 \\<subseteq> -W\" and \"u\\<in>W\"", "lemma (in valid_graph) path_split_vertex:\n    assumes \"is_path v p v'\" and \"u\\<in>int_vertices p\"\n    obtains p1 p2 where\n    \"p=p1@p2\" and\n    \"is_path v p1 u\" and\n    \"u \\<notin> int_vertices p1\"", "lemma path_weight_split[simp]:\n    \"(path_weight (p1@p2)::'w::monoid_add) = path_weight p1 + path_weight p2\"", "lemma path_weight_empty[simp]: \"path_weight [] = 0\"", "lemma path_weight_cons[simp]:\n    \"(path_weight (e#p)::'w::monoid_add) = fst (snd e) + path_weight p\""], "translations": [["", "lemma E_validD: assumes \"(v,e,v')\\<in>E\"\n      shows \"v\\<in>V\" \"v'\\<in>V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> V &&& v' \\<in> V", "apply -"], ["proof (prove)\ngoal (2 subgoals):\n 1. v \\<in> V\n 2. v' \\<in> V", "apply (rule subsetD[OF E_valid(1)])"], ["proof (prove)\ngoal (2 subgoals):\n 1. v \\<in> fst ` E\n 2. v' \\<in> V", "using assms"], ["proof (prove)\nusing this:\n  (v, e, v') \\<in> E\n\ngoal (2 subgoals):\n 1. v \\<in> fst ` E\n 2. v' \\<in> V", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. v' \\<in> V", "apply (rule subsetD[OF E_valid(2)])"], ["proof (prove)\ngoal (1 subgoal):\n 1. v' \\<in> snd ` snd ` E", "using assms"], ["proof (prove)\nusing this:\n  (v, e, v') \\<in> E\n\ngoal (1 subgoal):\n 1. v' \\<in> snd ` snd ` E", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "subsection \\<open>Basic operations on Graphs\\<close>"], ["", "text \\<open>The empty graph.\\<close>"], ["", "definition empty where \n    \"empty \\<equiv> \\<lparr> nodes = {}, edges = {} \\<rparr>\""], ["", "text \\<open>Adds a node to a graph.\\<close>"], ["", "definition add_node where \n    \"add_node v g \\<equiv> \\<lparr> nodes = insert v (nodes g), edges=edges g\\<rparr>\""], ["", "text \\<open>Deletes a node from a graph. Also deletes all adjacent edges.\\<close>"], ["", "definition delete_node where \"delete_node v g \\<equiv> \\<lparr> \n    nodes = nodes g - {v},   \n    edges = edges g \\<inter> (-{v})\\<times>UNIV\\<times>(-{v})\n    \\<rparr>\""], ["", "text \\<open>Adds an edge to a graph.\\<close>"], ["", "definition add_edge where \"add_edge v e v' g \\<equiv> \\<lparr>\n    nodes = {v,v'} \\<union> nodes g,\n    edges = insert (v,e,v') (edges g)\n    \\<rparr>\""], ["", "text \\<open>Deletes an edge from a graph.\\<close>"], ["", "definition delete_edge where \"delete_edge v e v' g \\<equiv> \\<lparr>\n    nodes = nodes g, edges = edges g - {(v,e,v')} \\<rparr>\""], ["", "text \\<open>Successors of a node.\\<close>"], ["", "definition succ :: \"('v,'w) graph \\<Rightarrow> 'v \\<Rightarrow> ('w\\<times>'v) set\"\n    where \"succ G v \\<equiv> {(w,v'). (v,w,v')\\<in>edges G}\""], ["", "text \\<open>Now follow some simplification lemmas.\\<close>"], ["", "lemma empty_valid[simp]: \"valid_graph empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph Graph.empty", "unfolding empty_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph \\<lparr>nodes = {}, edges = {}\\<rparr>", "by unfold_locales auto"], ["", "lemma add_node_valid[simp]: assumes \"valid_graph g\" \n    shows \"valid_graph (add_node v g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph (add_node v g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_graph (add_node v g)", "interpret valid_graph g"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph g", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_graph (add_node v g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph (add_node v g)", "unfolding add_node_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph \\<lparr>nodes = insert v V, edges = E\\<rparr>", "by unfold_locales (auto dest: E_validD)"], ["proof (state)\nthis:\n  valid_graph (add_node v g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma delete_node_valid[simp]: assumes \"valid_graph g\" \n    shows \"valid_graph (delete_node v g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph (delete_node v g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_graph (delete_node v g)", "interpret valid_graph g"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph g", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_graph (delete_node v g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph (delete_node v g)", "unfolding delete_node_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph\n     \\<lparr>nodes = V - {v},\n        edges = E \\<inter> (- {v}) \\<times> UNIV \\<times> - {v}\\<rparr>", "by unfold_locales (auto dest: E_validD)"], ["proof (state)\nthis:\n  valid_graph (delete_node v g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_edge_valid[simp]: assumes \"valid_graph g\" \n    shows \"valid_graph (add_edge v e v' g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph (add_edge v e v' g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_graph (add_edge v e v' g)", "interpret valid_graph g"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph g", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_graph (add_edge v e v' g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph (add_edge v e v' g)", "unfolding add_edge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph\n     \\<lparr>nodes = {v, v'} \\<union> V, edges = insert (v, e, v') E\\<rparr>", "by unfold_locales (auto dest: E_validD)"], ["proof (state)\nthis:\n  valid_graph (add_edge v e v' g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma delete_edge_valid[simp]: assumes \"valid_graph g\" \n    shows \"valid_graph (delete_edge v e v' g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph (delete_edge v e v' g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_graph (delete_edge v e v' g)", "interpret valid_graph g"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph g", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. valid_graph (delete_edge v e v' g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph (delete_edge v e v' g)", "unfolding delete_edge_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_graph \\<lparr>nodes = V, edges = E - {(v, e, v')}\\<rparr>", "by unfold_locales (auto dest: E_validD)"], ["proof (state)\nthis:\n  valid_graph (delete_edge v e v' g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma succ_finite[simp, intro]: \"finite (edges G) \\<Longrightarrow> finite (succ G v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges G) \\<Longrightarrow> finite (succ G v)", "unfolding succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (edges G) \\<Longrightarrow>\n    finite {(w, v'). (v, w, v') \\<in> edges G}", "by (rule finite_subset[where B=\"snd`edges G\"]) force+"], ["", "lemma nodes_empty[simp]: \"nodes empty = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes Graph.empty = {}", "unfolding empty_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes \\<lparr>nodes = {}, edges = {}\\<rparr> = {}", "by simp"], ["", "lemma edges_empty[simp]: \"edges empty = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges Graph.empty = {}", "unfolding empty_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. edges \\<lparr>nodes = {}, edges = {}\\<rparr> = {}", "by simp"], ["", "lemma succ_empty[simp]: \"succ empty v = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ Graph.empty v = {}", "unfolding empty_def succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(w, v').\n     (v, w, v') \\<in> edges \\<lparr>nodes = {}, edges = {}\\<rparr>} =\n    {}", "by auto"], ["", "lemma nodes_add_node[simp]: \"nodes (add_node v g) = insert v (nodes g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (add_node v g) = insert v (nodes g)", "by (simp add: add_node_def)"], ["", "lemma nodes_add_edge[simp]: \n    \"nodes (add_edge v e v' g) = insert v (insert v' (nodes g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (add_edge v e v' g) = insert v (insert v' (nodes g))", "by (simp add: add_edge_def)"], ["", "lemma edges_add_edge[simp]: \n    \"edges (add_edge v e v' g) = insert (v,e,v') (edges g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (add_edge v e v' g) = insert (v, e, v') (edges g)", "by (simp add: add_edge_def)"], ["", "lemma edges_add_node[simp]: \n    \"edges (add_node v g) = edges g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edges (add_node v g) = edges g", "by (simp add: add_node_def)"], ["", "lemma (in valid_graph) succ_subset: \"succ G v \\<subseteq> UNIV\\<times>V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ G v \\<subseteq> UNIV \\<times> V", "unfolding succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(w, v'). (v, w, v') \\<in> E} \\<subseteq> UNIV \\<times> V", "using E_valid"], ["proof (prove)\nusing this:\n  fst ` E \\<subseteq> V\n  snd ` snd ` E \\<subseteq> V\n\ngoal (1 subgoal):\n 1. {(w, v'). (v, w, v') \\<in> E} \\<subseteq> UNIV \\<times> V", "by (force)"], ["", "subsection \\<open>Paths\\<close>"], ["", "text \\<open>A path is represented by a list of adjacent edges.\\<close>"], ["", "type_synonym ('v,'w) path = \"('v\\<times>'w\\<times>'v) list\""], ["", "context valid_graph\n  begin"], ["", "text \\<open>The following predicate describes a valid path:\\<close>"], ["", "fun is_path :: \"'v \\<Rightarrow> ('v,'w) path \\<Rightarrow> 'v \\<Rightarrow> bool\" where\n      \"is_path v [] v' \\<longleftrightarrow> v=v' \\<and> v'\\<in>V\" |\n      \"is_path v ((v1,w,v2)#p) v' \\<longleftrightarrow> v=v1 \\<and> (v1,w,v2)\\<in>E \\<and> is_path v2 p v'\""], ["", "lemma is_path_simps[simp, intro!]:\n      \"is_path v [] v \\<longleftrightarrow> v\\<in>V\"\n      \"is_path v [(v,w,v')] v' \\<longleftrightarrow> (v,w,v')\\<in>E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path v [] v = (v \\<in> V) &&&\n    is_path v [(v, w, v')] v' = ((v, w, v') \\<in> E)", "by (auto dest: E_validD)"], ["", "lemma is_path_memb[simp]:\n      \"is_path v p v' \\<Longrightarrow> v\\<in>V \\<and> v'\\<in>V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path v p v' \\<Longrightarrow> v \\<in> V \\<and> v' \\<in> V", "apply (induct p arbitrary: v)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v. is_path v [] v' \\<Longrightarrow> v \\<in> V \\<and> v' \\<in> V\n 2. \\<And>a p v.\n       \\<lbrakk>\\<And>v.\n                   is_path v p v' \\<Longrightarrow>\n                   v \\<in> V \\<and> v' \\<in> V;\n        is_path v (a # p) v'\\<rbrakk>\n       \\<Longrightarrow> v \\<in> V \\<and> v' \\<in> V", "apply (auto dest: E_validD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_path_split:\n      \"is_path v (p1@p2) v' \\<longleftrightarrow> (\\<exists>u. is_path v p1 u \\<and> is_path u p2 v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path v (p1 @ p2) v' =\n    (\\<exists>u. is_path v p1 u \\<and> is_path u p2 v')", "by (induct p1 arbitrary: v) auto"], ["", "lemma is_path_split'[simp]: \n      \"is_path v (p1@(u,w,u')#p2) v' \n        \\<longleftrightarrow> is_path v p1 u \\<and> (u,w,u')\\<in>E \\<and> is_path u' p2 v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path v (p1 @ (u, w, u') # p2) v' =\n    (is_path v p1 u \\<and> (u, w, u') \\<in> E \\<and> is_path u' p2 v')", "by (auto simp add: is_path_split)"], ["", "end"], ["", "text \\<open>Set of intermediate vertices of a path. These are all vertices but\n    the last one. Note that, if the last vertex also occurs earlier on the path,\n    it is contained in \\<open>int_vertices\\<close>.\\<close>"], ["", "definition int_vertices :: \"('v,'w) path \\<Rightarrow> 'v set\" where\n    \"int_vertices p \\<equiv> set (map fst p)\""], ["", "lemma int_vertices_simps[simp]:\n    \"int_vertices [] = {}\"\n    \"int_vertices (vv#p) = insert (fst vv) (int_vertices p)\"\n    \"int_vertices (p1@p2) = int_vertices p1 \\<union> int_vertices p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int_vertices [] = {} &&&\n    int_vertices (vv # p) = insert (fst vv) (int_vertices p) &&&\n    int_vertices (p1 @ p2) = int_vertices p1 \\<union> int_vertices p2", "by (auto simp add: int_vertices_def)"], ["", "lemma (in valid_graph) int_vertices_subset: \n    \"is_path v p v' \\<Longrightarrow> int_vertices p \\<subseteq> V\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_path v p v' \\<Longrightarrow> int_vertices p \\<subseteq> V", "apply (induct p arbitrary: v)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v. is_path v [] v' \\<Longrightarrow> int_vertices [] \\<subseteq> V\n 2. \\<And>a p v.\n       \\<lbrakk>\\<And>v.\n                   is_path v p v' \\<Longrightarrow>\n                   int_vertices p \\<subseteq> V;\n        is_path v (a # p) v'\\<rbrakk>\n       \\<Longrightarrow> int_vertices (a # p) \\<subseteq> V", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a p v.\n       \\<lbrakk>\\<And>v.\n                   is_path v p v' \\<Longrightarrow>\n                   int_vertices p \\<subseteq> V;\n        is_path v (a # p) v'\\<rbrakk>\n       \\<Longrightarrow> int_vertices (a # p) \\<subseteq> V", "apply (force dest: E_validD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma int_vertices_empty[simp]: \"int_vertices p = {} \\<longleftrightarrow> p=[]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (int_vertices p = {}) = (p = [])", "by (cases p) auto"], ["", "subsubsection \\<open>Splitting Paths\\<close>"], ["", "text \\<open>Split a path at the point where it first leaves the set \\<open>W\\<close>:\\<close>"], ["", "lemma (in valid_graph) path_split_set:\n    assumes \"is_path v p v'\" and \"v\\<in>W\" and \"v'\\<notin>W\"\n    obtains p1 p2 u w u' where\n    \"p=p1@(u,w,u')#p2\" and\n    \"int_vertices p1 \\<subseteq> W\" and \"u\\<in>W\" and \"u'\\<notin>W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p1 u w u' p2.\n        \\<lbrakk>p = p1 @ (u, w, u') # p2; int_vertices p1 \\<subseteq> W;\n         u \\<in> W; u' \\<notin> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_path v p v'\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (1 subgoal):\n 1. (\\<And>p1 u w u' p2.\n        \\<lbrakk>p = p1 @ (u, w, u') # p2; int_vertices p1 \\<subseteq> W;\n         u \\<in> W; u' \\<notin> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct p arbitrary: v thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>\\<And>p1 u w u' p2.\n                   \\<lbrakk>[] = p1 @ (u, w, u') # p2;\n                    int_vertices p1 \\<subseteq> W; u \\<in> W;\n                    u' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v [] v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>[] = ?p1.0 @ (?u, ?w, ?u') # ?p2.0;\n   int_vertices ?p1.0 \\<subseteq> W; ?u \\<in> W; ?u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v [] v'\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>\\<And>p1 u w u' p2.\n                   \\<lbrakk>[] = p1 @ (u, w, u') # p2;\n                    int_vertices p1 \\<subseteq> W; u \\<in> W;\n                    u' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v [] v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>[] = ?p1.0 @ (?u, ?w, ?u') # ?p2.0;\n   int_vertices ?p1.0 \\<subseteq> W; ?u \\<in> W; ?u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v [] v'\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons vv p)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>p1 u w u' p2.\n              \\<lbrakk>p = p1 @ (u, w, u') # p2;\n               int_vertices p1 \\<subseteq> W; u \\<in> W;\n               u' \\<notin> W\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   is_path ?v p v'; ?v \\<in> W; v' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>vv # p = ?p1.0 @ (?u, ?w, ?u') # ?p2.0;\n   int_vertices ?p1.0 \\<subseteq> W; ?u \\<in> W; ?u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v (vv # p) v'\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "note [simp, intro!] = \\<open>v\\<in>W\\<close> \\<open>v'\\<notin>W\\<close>"], ["proof (state)\nthis:\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.prems"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = ?p1.0 @ (?u, ?w, ?u') # ?p2.0;\n   int_vertices ?p1.0 \\<subseteq> W; ?u \\<in> W; ?u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v (vv # p) v'\n  v \\<in> W\n  v' \\<notin> W", "obtain w u' where \n      [simp]: \"vv=(v,w,u')\" and\n        REST: \"is_path u' p v'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = ?p1.0 @ (?u, ?w, ?u') # ?p2.0;\n   int_vertices ?p1.0 \\<subseteq> W; ?u \\<in> W; ?u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n  is_path v (vv # p) v'\n  v \\<in> W\n  v' \\<notin> W\n\ngoal (1 subgoal):\n 1. (\\<And>w u'.\n        \\<lbrakk>vv = (v, w, u'); is_path u' p v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases vv) auto"], ["proof (state)\nthis:\n  vv = (v, w, u')\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "txt \\<open>Distinguish wether the second node \\<open>u'\\<close> of the path is \n      in \\<open>W\\<close>. If yes, the proposition follows by the \n      induction hypothesis, otherwise it is straightforward, as\n      the split takes place at the first edge of the path.\\<close>"], ["proof (state)\nthis:\n  vv = (v, w, u')\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  vv = (v, w, u')\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume A [simp, intro!]: \"u'\\<in>W\""], ["proof (state)\nthis:\n  u' \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.hyps[OF _ REST]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>p1 u w u' p2.\n              \\<lbrakk>p = p1 @ (u, w, u') # p2;\n               int_vertices p1 \\<subseteq> W; u \\<in> W;\n               u' \\<notin> W\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   u' \\<in> W; v' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain p1 uu ww uu' p2 where\n        \"p=p1@(uu,ww,uu')#p2\" \"int_vertices p1 \\<subseteq> W\" \"uu \\<in> W\" \"uu' \\<notin> W\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>p1 u w u' p2.\n              \\<lbrakk>p = p1 @ (u, w, u') # p2;\n               int_vertices p1 \\<subseteq> W; u \\<in> W;\n               u' \\<notin> W\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   u' \\<in> W; v' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>p1 uu ww uu' p2.\n        \\<lbrakk>p = p1 @ (uu, ww, uu') # p2; int_vertices p1 \\<subseteq> W;\n         uu \\<in> W; uu' \\<notin> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = p1 @ (uu, ww, uu') # p2\n  int_vertices p1 \\<subseteq> W\n  uu \\<in> W\n  uu' \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.prems(1)[of \"vv#p1\" uu ww uu' p2]"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = (vv # p1) @ (uu, ww, uu') # p2;\n   int_vertices (vv # p1) \\<subseteq> W; uu \\<in> W; uu' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ (uu, ww, uu') # p2\n  int_vertices p1 \\<subseteq> W\n  uu \\<in> W\n  uu' \\<notin> W", "have thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = (vv # p1) @ (uu, ww, uu') # p2;\n   int_vertices (vv # p1) \\<subseteq> W; uu \\<in> W; uu' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ (uu, ww, uu') # p2\n  int_vertices p1 \\<subseteq> W\n  uu \\<in> W\n  uu' \\<notin> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"u'\\<notin>W\""], ["proof (state)\nthis:\n  u' \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.prems(1)[of \"[]\" v w u' p]"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = [] @ (v, w, u') # p; int_vertices [] \\<subseteq> W;\n   v \\<in> W; u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  u' \\<notin> W", "have thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = [] @ (v, w, u') # p; int_vertices [] \\<subseteq> W;\n   v \\<in> W; u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  u' \\<notin> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u' \\<notin> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 u w u' p2.\n                               \\<lbrakk>p = p1 @ (u, w, u') # p2;\n                                int_vertices p1 \\<subseteq> W; u \\<in> W;\n                                u' \\<notin> W\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 u w u' p2.\n           \\<lbrakk>a # p = p1 @ (u, w, u') # p2;\n            int_vertices p1 \\<subseteq> W; u \\<in> W; u' \\<notin> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v \\<in> W; v' \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  u' \\<in> W \\<Longrightarrow> thesis\n  u' \\<notin> W \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\nusing this:\n  u' \\<in> W \\<Longrightarrow> thesis\n  u' \\<notin> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Split a path at the point where it first enters the set \\<open>W\\<close>:\\<close>"], ["", "lemma (in valid_graph) path_split_set':\n    assumes \"is_path v p v'\" and \"v'\\<in>W\"\n    obtains p1 p2 u where\n    \"p=p1@p2\" and\n    \"is_path v p1 u\" and\n    \"is_path u p2 v'\" and\n    \"int_vertices p1 \\<subseteq> -W\" and \"u\\<in>W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p1 p2 u.\n        \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n         int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_path v p v'\n  v' \\<in> W\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2 u.\n        \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n         int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (cases \"v\\<in>W\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<in> W\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  v \\<in> W\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<in> W\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> thesis", "with that[of \"[]\" p] assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>p = [] @ p; is_path v [] ?u; is_path ?u p v';\n   int_vertices [] \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v p v'\n  v' \\<in> W\n  v \\<in> W", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>p = [] @ p; is_path v [] ?u; is_path ?u p v';\n   int_vertices [] \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v p v'\n  v' \\<in> W\n  v \\<in> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p1 p2 u.\n                \\<lbrakk>p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n                 int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     is_path v p v'; v' \\<in> W; v \\<notin> W\\<rbrakk>\n    \\<Longrightarrow> thesis", "with assms that"], ["proof (chain)\npicking this:\n  is_path v p v'\n  v' \\<in> W\n  \\<lbrakk>p = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W", "show ?thesis"], ["proof (prove)\nusing this:\n  is_path v p v'\n  v' \\<in> W\n  \\<lbrakk>p = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. thesis", "proof (induct p arbitrary: v thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>is_path v [] v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>[] = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  is_path v [] v'\n  v' \\<in> W\n  \\<lbrakk>[] = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W\n\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>is_path v [] v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>[] = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  is_path v [] v'\n  v' \\<in> W\n  \\<lbrakk>[] = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons vv p)"], ["proof (state)\nthis:\n  \\<lbrakk>is_path ?v p v'; v' \\<in> W;\n   \\<And>p1 p2 u.\n      \\<lbrakk>p = p1 @ p2; is_path ?v p1 u; is_path u p2 v';\n       int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n      \\<Longrightarrow> ?thesis;\n   ?v \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  is_path v (vv # p) v'\n  v' \\<in> W\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "note [simp, intro!] = \\<open>v'\\<in>W\\<close> \\<open>v\\<notin>W\\<close>"], ["proof (state)\nthis:\n  v' \\<in> W\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.prems"], ["proof (chain)\npicking this:\n  is_path v (vv # p) v'\n  v' \\<in> W\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  v \\<notin> W", "obtain w u' where \n        [simp]: \"vv=(v,w,u')\" and [simp]: \"(v,w,u')\\<in>E\" and\n          REST: \"is_path u' p v'\""], ["proof (prove)\nusing this:\n  is_path v (vv # p) v'\n  v' \\<in> W\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 ?u; is_path ?u ?p2.0 v';\n   int_vertices ?p1.0 \\<subseteq> - W; ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n  v \\<notin> W\n\ngoal (1 subgoal):\n 1. (\\<And>w u'.\n        \\<lbrakk>vv = (v, w, u'); (v, w, u') \\<in> E;\n         is_path u' p v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases vv) auto"], ["proof (state)\nthis:\n  vv = (v, w, u')\n  (v, w, u') \\<in> E\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "txt \\<open>Distinguish wether the second node \\<open>u'\\<close> of the path is \n        in \\<open>W\\<close>. If yes, the proposition is straightforward, otherwise,\n        it follows by the induction hypothesis.\n\\<close>"], ["proof (state)\nthis:\n  vv = (v, w, u')\n  (v, w, u') \\<in> E\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  vv = (v, w, u')\n  (v, w, u') \\<in> E\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume A [simp, intro!]: \"u'\\<in>W\""], ["proof (state)\nthis:\n  u' \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.prems(3)[of \"[vv]\" p u'] REST"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = [vv] @ p; is_path v [vv] u'; is_path u' p v';\n   int_vertices [vv] \\<subseteq> - W; u' \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path u' p v'", "have ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = [vv] @ p; is_path v [vv] u'; is_path u' p v';\n   int_vertices [vv] \\<subseteq> - W; u' \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  u' \\<in> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume [simp, intro!]: \"u'\\<notin>W\""], ["proof (state)\nthis:\n  u' \\<notin> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.hyps[OF REST]"], ["proof (chain)\npicking this:\n  \\<lbrakk>v' \\<in> W;\n   \\<And>p1 p2 u.\n      \\<lbrakk>p = p1 @ p2; is_path u' p1 u; is_path u p2 v';\n       int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n      \\<Longrightarrow> ?thesis;\n   u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "obtain p1 p2 u'' where\n          [simp]: \"p=p1@p2\" and \n            \"is_path u' p1 u''\" and \n            \"is_path u'' p2 v'\" and\n            \"int_vertices p1 \\<subseteq> -W\" and\n            \"u''\\<in>W\""], ["proof (prove)\nusing this:\n  \\<lbrakk>v' \\<in> W;\n   \\<And>p1 p2 u.\n      \\<lbrakk>p = p1 @ p2; is_path u' p1 u; is_path u p2 v';\n       int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n      \\<Longrightarrow> ?thesis;\n   u' \\<notin> W\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2 u''.\n        \\<lbrakk>p = p1 @ p2; is_path u' p1 u''; is_path u'' p2 v';\n         int_vertices p1 \\<subseteq> - W; u'' \\<in> W\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = p1 @ p2\n  is_path u' p1 u''\n  is_path u'' p2 v'\n  int_vertices p1 \\<subseteq> - W\n  u'' \\<in> W\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.prems(3)[of \"vv#p1\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = (vv # p1) @ ?p2.0; is_path v (vv # p1) ?u;\n   is_path ?u ?p2.0 v'; int_vertices (vv # p1) \\<subseteq> - W;\n   ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ p2\n  is_path u' p1 u''\n  is_path u'' p2 v'\n  int_vertices p1 \\<subseteq> - W\n  u'' \\<in> W", "have ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = (vv # p1) @ ?p2.0; is_path v (vv # p1) ?u;\n   is_path ?u ?p2.0 v'; int_vertices (vv # p1) \\<subseteq> - W;\n   ?u \\<in> W\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ p2\n  is_path u' p1 u''\n  is_path u'' p2 v'\n  int_vertices p1 \\<subseteq> - W\n  u'' \\<in> W\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u' \\<notin> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>is_path v p v'; v' \\<in> W;\n                    \\<And>p1 p2 u.\n                       \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                        is_path u p2 v'; int_vertices p1 \\<subseteq> - W;\n                        u \\<in> W\\<rbrakk>\n                       \\<Longrightarrow> thesis;\n                    v \\<notin> W\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; v' \\<in> W;\n        \\<And>p1 p2 u.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u; is_path u p2 v';\n            int_vertices p1 \\<subseteq> - W; u \\<in> W\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        v \\<notin> W\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  u' \\<in> W \\<Longrightarrow> thesis\n  u' \\<notin> W \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\nusing this:\n  u' \\<in> W \\<Longrightarrow> thesis\n  u' \\<notin> W \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Split a path at the point where a given vertex is first visited:\\<close>"], ["", "lemma (in valid_graph) path_split_vertex:\n    assumes \"is_path v p v'\" and \"u\\<in>int_vertices p\"\n    obtains p1 p2 where\n    \"p=p1@p2\" and\n    \"is_path v p1 u\" and\n    \"u \\<notin> int_vertices p1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n         u \\<notin> int_vertices p1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_path v p v'\n  u \\<in> int_vertices p\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n         u \\<notin> int_vertices p1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct p arbitrary: v thesis)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>\\<And>p1 p2.\n                   \\<lbrakk>[] = p1 @ p2; is_path v p1 u;\n                    u \\<notin> int_vertices p1\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v [] v'; u \\<in> int_vertices []\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>[] = ?p1.0 @ ?p2.0; is_path v ?p1.0 u;\n   u \\<notin> int_vertices ?p1.0\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v [] v'\n  u \\<in> int_vertices []\n\ngoal (2 subgoals):\n 1. \\<And>v thesis.\n       \\<lbrakk>\\<And>p1 p2.\n                   \\<lbrakk>[] = p1 @ p2; is_path v p1 u;\n                    u \\<notin> int_vertices p1\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        is_path v [] v'; u \\<in> int_vertices []\\<rbrakk>\n       \\<Longrightarrow> thesis\n 2. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>[] = ?p1.0 @ ?p2.0; is_path v ?p1.0 u;\n   u \\<notin> int_vertices ?p1.0\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v [] v'\n  u \\<in> int_vertices []\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (Cons vv p)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>p1 p2.\n              \\<lbrakk>p = p1 @ p2; is_path ?v p1 u;\n               u \\<notin> int_vertices p1\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   is_path ?v p v'; u \\<in> int_vertices p\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 u;\n   u \\<notin> int_vertices ?p1.0\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v (vv # p) v'\n  u \\<in> int_vertices (vv # p)\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "from Cons.prems"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 u;\n   u \\<notin> int_vertices ?p1.0\\<rbrakk>\n  \\<Longrightarrow> thesis\n  is_path v (vv # p) v'\n  u \\<in> int_vertices (vv # p)", "obtain w u' where \n      [simp]: \"vv=(v,w,u')\" \"v\\<in>V\" \"(v,w,u')\\<in>E\" and\n        REST: \"is_path u' p v'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = ?p1.0 @ ?p2.0; is_path v ?p1.0 u;\n   u \\<notin> int_vertices ?p1.0\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n  is_path v (vv # p) v'\n  u \\<in> int_vertices (vv # p)\n\ngoal (1 subgoal):\n 1. (\\<And>w u'.\n        \\<lbrakk>vv = (v, w, u'); v \\<in> V; (v, w, u') \\<in> E;\n         is_path u' p v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases vv) auto"], ["proof (state)\nthis:\n  vv = (v, w, u')\n  v \\<in> V\n  (v, w, u') \\<in> E\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  vv = (v, w, u')\n  v \\<in> V\n  (v, w, u') \\<in> E\n  is_path u' p v'\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume \"u=v\""], ["proof (state)\nthis:\n  u = v\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.prems(1)[of \"[]\" \"vv#p\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = [] @ vv # p; is_path v [] u;\n   u \\<notin> int_vertices []\\<rbrakk>\n  \\<Longrightarrow> thesis\n  u = v", "have thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = [] @ vv # p; is_path v [] u;\n   u \\<notin> int_vertices []\\<rbrakk>\n  \\<Longrightarrow> thesis\n  u = v\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u = v \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  u = v \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "{"], ["proof (state)\nthis:\n  u = v \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume [simp]: \"u\\<noteq>v\""], ["proof (state)\nthis:\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.hyps(1)[OF _ REST] Cons.prems(3)"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>p1 p2.\n              \\<lbrakk>p = p1 @ p2; is_path u' p1 u;\n               u \\<notin> int_vertices p1\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   u \\<in> int_vertices p\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  u \\<in> int_vertices (vv # p)\n  u \\<noteq> v", "obtain p1 p2 where\n        \"p=p1@p2\" \"is_path u' p1 u\" \"u\\<notin>int_vertices p1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>p1 p2.\n              \\<lbrakk>p = p1 @ p2; is_path u' p1 u;\n               u \\<notin> int_vertices p1\\<rbrakk>\n              \\<Longrightarrow> ?thesis;\n   u \\<in> int_vertices p\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  u \\<in> int_vertices (vv # p)\n  u \\<noteq> v\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p = p1 @ p2; is_path u' p1 u;\n         u \\<notin> int_vertices p1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p = p1 @ p2\n  is_path u' p1 u\n  u \\<notin> int_vertices p1\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "with Cons.prems(1)[of \"vv#p1\" p2]"], ["proof (chain)\npicking this:\n  \\<lbrakk>vv # p = (vv # p1) @ p2; is_path v (vv # p1) u;\n   u \\<notin> int_vertices (vv # p1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ p2\n  is_path u' p1 u\n  u \\<notin> int_vertices p1", "have thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>vv # p = (vv # p1) @ p2; is_path v (vv # p1) u;\n   u \\<notin> int_vertices (vv # p1)\\<rbrakk>\n  \\<Longrightarrow> thesis\n  p = p1 @ p2\n  is_path u' p1 u\n  u \\<notin> int_vertices p1\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "}"], ["proof (state)\nthis:\n  u \\<noteq> v \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. \\<And>a p v thesis.\n       \\<lbrakk>\\<And>v thesis.\n                   \\<lbrakk>\\<And>p1 p2.\n                               \\<lbrakk>p = p1 @ p2; is_path v p1 u;\n                                u \\<notin> int_vertices p1\\<rbrakk>\n                               \\<Longrightarrow> thesis;\n                    is_path v p v'; u \\<in> int_vertices p\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        \\<And>p1 p2.\n           \\<lbrakk>a # p = p1 @ p2; is_path v p1 u;\n            u \\<notin> int_vertices p1\\<rbrakk>\n           \\<Longrightarrow> thesis;\n        is_path v (a # p) v'; u \\<in> int_vertices (a # p)\\<rbrakk>\n       \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  u = v \\<Longrightarrow> thesis\n  u \\<noteq> v \\<Longrightarrow> thesis", "show ?case"], ["proof (prove)\nusing this:\n  u = v \\<Longrightarrow> thesis\n  u \\<noteq> v \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Weighted Graphs\\<close>"], ["", "locale valid_mgraph = valid_graph G for G::\"('v,'w::monoid_add) graph\""], ["", "definition path_weight :: \"('v,'w::monoid_add) path \\<Rightarrow> 'w\"\n    where \"path_weight p \\<equiv> sum_list (map (fst \\<circ> snd) p)\""], ["", "(* \n    lemma path_weight_alt: \"path_weight p \\<equiv> sum_list (map (fst \\<circ> snd) p)\"\n    unfolding path_weight_def foldl_conv_fold\n    by (simp add: sum_list_foldl)\n  *)"], ["", "lemma path_weight_split[simp]:\n    \"(path_weight (p1@p2)::'w::monoid_add) = path_weight p1 + path_weight p2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_weight (p1 @ p2) = path_weight p1 + path_weight p2", "unfolding path_weight_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map (fst \\<circ> snd) (p1 @ p2)) =\n    sum_list (map (fst \\<circ> snd) p1) +\n    sum_list (map (fst \\<circ> snd) p2)", "by (auto)"], ["", "lemma path_weight_empty[simp]: \"path_weight [] = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_weight [] = (0::'a)", "unfolding path_weight_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map (fst \\<circ> snd) []) = (0::'a)", "by auto"], ["", "lemma path_weight_cons[simp]:\n    \"(path_weight (e#p)::'w::monoid_add) = fst (snd e) + path_weight p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path_weight (e # p) = fst (snd e) + path_weight p", "unfolding path_weight_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map (fst \\<circ> snd) (e # p)) =\n    fst (snd e) + sum_list (map (fst \\<circ> snd) p)", "by (auto)"], ["", "end"]]}