{"file_name": "/home/qj213/afp-2021-10-22/thys/Circus/Refinement_Example.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Circus", "problem_names": ["lemma SimInit: \"(Schema FIG.Init) \\<preceq>Sim (Schema DFIG.Init)\"", "lemma SimOut: \"(Schema FIG.Out) \\<preceq>Sim (Schema DFIG.Out)\"", "lemma SimRemove: \"(Schema FIG.Remove) \\<preceq>Sim (Schema DFIG.Remove)\"", "lemma \"FIG.FIG \\<preceq>Sim DFIG.DFIG\""], "translations": [["", "lemma SimInit: \"(Schema FIG.Init) \\<preceq>Sim (Schema DFIG.Init)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Schema FIG.Init \\<preceq>Sim Schema DFIG.Init", "apply (auto simp: Sim_def Pre_def design_defs DFIG.Init_def FIG.Init_def rp_defs  alpha_rp.defs\n                    DFIG_alphabet.defs FIG_alphabet.defs intro!: Schema_Sim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A'.\n       idS A' = {} \\<Longrightarrow>\n       \\<exists>A'. retidS A' = {} \\<and> DFIG_alphabet.max A' = 0", "apply (rule_tac x=\"A\\<lparr>max := 0, retidS := {}\\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SimOut: \"(Schema FIG.Out) \\<preceq>Sim (Schema DFIG.Out)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Schema FIG.Out \\<preceq>Sim Schema DFIG.Out", "apply (rule Schema_Sim)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a. Pre FIG.Out (Sim a) \\<Longrightarrow> Pre DFIG.Out a\n 2. \\<And>a b.\n       \\<lbrakk>Pre FIG.Out (Sim a); DFIG.Out (a, b)\\<rbrakk>\n       \\<Longrightarrow> FIG.Out (Sim a, Sim b)", "apply (auto simp: Pre_def DFIG_alphabet.defs FIG_alphabet.defs\n                     alpha_rp.defs Sim_def FIG.Out_def DFIG.Out_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a A'.\n       \\<lbrakk>idS A' =\n                insert (hd (FIG_alphabet.v A'))\n                 {aa. aa < DFIG_alphabet.max a \\<and> aa \\<notin> retidS a};\n        \\<not> hd (FIG_alphabet.v A') < DFIG_alphabet.max a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            hd (DFIG_alphabet.v A') =\n                            DFIG_alphabet.max a \\<and>\n                            DFIG_alphabet.max A' =\n                            Suc (DFIG_alphabet.max a) \\<and>\n                            retidS A' = retidS a - {hd (DFIG_alphabet.v A')}\n 2. \\<And>a A'.\n       \\<lbrakk>idS A' =\n                insert (hd (FIG_alphabet.v A'))\n                 {aa. aa < DFIG_alphabet.max a \\<and> aa \\<notin> retidS a};\n        hd (FIG_alphabet.v A') \\<in> retidS a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            hd (DFIG_alphabet.v A') =\n                            DFIG_alphabet.max a \\<and>\n                            DFIG_alphabet.max A' =\n                            Suc (DFIG_alphabet.max a) \\<and>\n                            retidS A' = retidS a - {hd (DFIG_alphabet.v A')}", "apply (rule_tac x=\"a\\<lparr>v := [DFIG_alphabet.max a], max := (Suc (DFIG_alphabet.max a)), \n                     retidS := retidS a - {DFIG_alphabet.max a}\\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A'.\n       \\<lbrakk>idS A' =\n                insert (hd (FIG_alphabet.v A'))\n                 {aa. aa < DFIG_alphabet.max a \\<and> aa \\<notin> retidS a};\n        hd (FIG_alphabet.v A') \\<in> retidS a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            hd (DFIG_alphabet.v A') =\n                            DFIG_alphabet.max a \\<and>\n                            DFIG_alphabet.max A' =\n                            Suc (DFIG_alphabet.max a) \\<and>\n                            retidS A' = retidS a - {hd (DFIG_alphabet.v A')}", "apply (rule_tac x=\"a\\<lparr>v := [DFIG_alphabet.max a], max := (Suc (DFIG_alphabet.max a)), \n                     retidS := retidS a - {DFIG_alphabet.max a}\\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SimRemove: \"(Schema FIG.Remove) \\<preceq>Sim (Schema DFIG.Remove)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Schema FIG.Remove \\<preceq>Sim Schema DFIG.Remove", "apply (rule Schema_Sim)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a. Pre FIG.Remove (Sim a) \\<Longrightarrow> Pre DFIG.Remove a\n 2. \\<And>a b.\n       \\<lbrakk>Pre FIG.Remove (Sim a); DFIG.Remove (a, b)\\<rbrakk>\n       \\<Longrightarrow> FIG.Remove (Sim a, Sim b)", "apply (auto simp: Pre_def DFIG_alphabet.defs FIG_alphabet.defs alpha_rp.defs Sim_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a A'.\n       FIG.Remove\n        (\\<lparr>FIG_alphabet.v = DFIG_alphabet.v a, x = DFIG_alphabet.x a,\n            idS =\n              {aa.\n               aa < DFIG_alphabet.max a \\<and>\n               aa \\<notin> retidS a}\\<rparr>,\n         A') \\<Longrightarrow>\n       \\<exists>A'. DFIG.Remove (a, A')\n 2. \\<And>a b A'.\n       \\<lbrakk>DFIG.Remove (a, b);\n        FIG.Remove\n         (\\<lparr>FIG_alphabet.v = DFIG_alphabet.v a, x = DFIG_alphabet.x a,\n             idS =\n               {aa.\n                aa < DFIG_alphabet.max a \\<and>\n                aa \\<notin> retidS a}\\<rparr>,\n          A')\\<rbrakk>\n       \\<Longrightarrow> FIG.Remove\n                          (\\<lparr>FIG_alphabet.v = DFIG_alphabet.v a,\n                              x = DFIG_alphabet.x a,\n                              idS =\n                                {aa.\n                                 aa < DFIG_alphabet.max a \\<and>\n                                 aa \\<notin> retidS a}\\<rparr>,\n                           \\<lparr>FIG_alphabet.v = DFIG_alphabet.v b,\n                              x = DFIG_alphabet.x b,\n                              idS =\n                                {a. a < DFIG_alphabet.max b \\<and>\n                                    a \\<notin> retidS b}\\<rparr>)", "apply (clarsimp simp add: DFIG.Remove_def FIG.Remove_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a A'.\n       \\<lbrakk>hd (DFIG_alphabet.x a) < DFIG_alphabet.max a;\n        hd (DFIG_alphabet.x a) \\<notin> retidS a;\n        idS A' =\n        {aa. aa < DFIG_alphabet.max a \\<and> aa \\<notin> retidS a} -\n        {hd (DFIG_alphabet.x a)}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A'.\n                            retidS A' =\n                            insert (hd (DFIG_alphabet.x a))\n                             (retidS a) \\<and>\n                            DFIG_alphabet.max A' = DFIG_alphabet.max a\n 2. \\<And>a b A'.\n       \\<lbrakk>DFIG.Remove (a, b);\n        FIG.Remove\n         (\\<lparr>FIG_alphabet.v = DFIG_alphabet.v a, x = DFIG_alphabet.x a,\n             idS =\n               {aa.\n                aa < DFIG_alphabet.max a \\<and>\n                aa \\<notin> retidS a}\\<rparr>,\n          A')\\<rbrakk>\n       \\<Longrightarrow> FIG.Remove\n                          (\\<lparr>FIG_alphabet.v = DFIG_alphabet.v a,\n                              x = DFIG_alphabet.x a,\n                              idS =\n                                {aa.\n                                 aa < DFIG_alphabet.max a \\<and>\n                                 aa \\<notin> retidS a}\\<rparr>,\n                           \\<lparr>FIG_alphabet.v = DFIG_alphabet.v b,\n                              x = DFIG_alphabet.x b,\n                              idS =\n                                {a. a < DFIG_alphabet.max b \\<and>\n                                    a \\<notin> retidS b}\\<rparr>)", "apply (rule_tac x=\"a\\<lparr>retidS := insert (hd (DFIG_alphabet.x a)) (retidS a)\\<rparr>\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b A'.\n       \\<lbrakk>DFIG.Remove (a, b);\n        FIG.Remove\n         (\\<lparr>FIG_alphabet.v = DFIG_alphabet.v a, x = DFIG_alphabet.x a,\n             idS =\n               {aa.\n                aa < DFIG_alphabet.max a \\<and>\n                aa \\<notin> retidS a}\\<rparr>,\n          A')\\<rbrakk>\n       \\<Longrightarrow> FIG.Remove\n                          (\\<lparr>FIG_alphabet.v = DFIG_alphabet.v a,\n                              x = DFIG_alphabet.x a,\n                              idS =\n                                {aa.\n                                 aa < DFIG_alphabet.max a \\<and>\n                                 aa \\<notin> retidS a}\\<rparr>,\n                           \\<lparr>FIG_alphabet.v = DFIG_alphabet.v b,\n                              x = DFIG_alphabet.x b,\n                              idS =\n                                {a. a < DFIG_alphabet.max b \\<and>\n                                    a \\<notin> retidS b}\\<rparr>)", "apply (auto simp add: DFIG.Remove_def FIG.Remove_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"FIG.FIG \\<preceq>Sim DFIG.DFIG\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FIG.FIG \\<preceq>Sim DFIG.DFIG", "by (auto simp: DFIG.DFIG_def FIG.FIG_def mono_Seq SimRemove SimOut SimInit Sim_def FIG_alphabet.defs\n         intro!:Var_Sim Seq_Sim Mu_Sim Det_Sim Write0_Sim Write_Sim Read_Sim Skip_Sim)"], ["", "end"]]}