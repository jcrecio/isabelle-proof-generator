{"file_name": "/home/qj213/afp-2021-10-22/thys/Circus/Refinement.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Circus", "problem_names": ["lemma Stop_Sim: \"Stop \\<preceq>S Stop\"", "lemma Skip_Sim: \"Skip \\<preceq>S Skip\"", "lemma Chaos_Sim: \"Chaos \\<preceq>S Chaos\"", "lemma Ndet_Sim:\n  assumes A: \"P  \\<preceq>S Q\" and B: \"P' \\<preceq>S Q'\"\n  shows \"(P \\<sqinter> P') \\<preceq>S (Q \\<sqinter> Q')\"", "lemma Det_Sim:\n  assumes A: \"P  \\<preceq>S Q\" and B: \"P' \\<preceq>S Q'\"\n  shows \"(P \\<box> P') \\<preceq>S (Q \\<box> Q')\"", "lemma Schema_Sim:\n  assumes A: \"\\<And> a. (Pre sc1) (S a) \\<Longrightarrow> (Pre sc2) a\"\n  and B: \"\\<And> a b. \\<lbrakk>Pre sc1 (S a) ; sc2 (a, b)\\<rbrakk> \\<Longrightarrow> sc1 (S a, S b)\"\n  shows \"(Schema sc1) \\<preceq>S (Schema sc2)\"", "lemma SUb_Sim:\n  assumes A: \"\\<And> a. (Pre sc1) (S a) \\<Longrightarrow> (Pre sc2) a\"\n  and B: \"\\<And> a b. \\<lbrakk>Pre sc1 (S a) ; sc2 (a, b)\\<rbrakk> \\<Longrightarrow> sc1 (S a, S b)\"\n  and C: \"P \\<preceq>S Q\"\n  shows \"(state_update_before sc1 P) \\<preceq>S (state_update_before sc2 Q)\"", "lemma Seq_Sim:\n  assumes A: \"P \\<preceq>S Q\" and B: \"P' \\<preceq>S Q'\"\n  shows \"(P `;` P') \\<preceq>S (Q `;` Q')\"", "lemma Par_Sim:\n  assumes A: \" P  \\<preceq>S Q\" and B: \" P' \\<preceq>S Q'\"\n  and C: \"\\<And> a b. S (ns'2 a b) = ns2 (S a) (S b)\"\n  and D: \"\\<And> a b. S (ns'1 a b) = ns1 (S a) (S b)\"\n  shows \"(P \\<lbrakk> ns1 | cs | ns2 \\<rbrakk> P') \\<preceq>S (Q \\<lbrakk> ns'1 | cs | ns'2 \\<rbrakk> Q')\"", "lemma Assign_Sim:\n  assumes A: \"\\<And> A. vy A = vx (S A)\"\n  and B: \"\\<And> ff A. (S (y_update ff A)) = x_update ff (S A)\"\n  shows \"(x `:=` vx) \\<preceq>S (y `:=` vy)\"", "lemma Var_Sim:\n  assumes A: \"P \\<preceq>S Q\" and B: \"\\<And> ff A. (S ((snd b) ff A)) = (snd a) ff (S A)\"\n  shows \"(Var a P) \\<preceq>S (Var b Q)\"", "lemma Guard_Sim:\n  assumes A: \"P \\<preceq>S Q\" and B: \"\\<And> A. h A = g (S A)\"\n  shows \"(g `&` P) \\<preceq>S (h `&` Q)\"", "lemma Write0_Sim:\n  assumes A: \"P \\<preceq>S Q\"\n  shows \"a \\<rightarrow> P \\<preceq>S a \\<rightarrow> Q \"", "lemma Read_Sim:\n  assumes A: \" P \\<preceq>S Q\" and B: \"\\<And> A. (d A) = c (S A)\"\n  shows \"a`?`c \\<rightarrow> P \\<preceq>S a`?`d \\<rightarrow> Q\"", "lemma Read1_Sim:\n  assumes A: \" P \\<preceq>S Q\" and B: \"\\<And> A. (d A) = c (S A)\"\n  shows \"a`?`c`:`s \\<rightarrow> P \\<preceq>S a`?`d`:`s \\<rightarrow> Q\"", "lemma Read1S_Sim:\n  assumes A: \" P \\<preceq>S Q\" and B: \"\\<And> A. (d A) = c (S A)\" and C: \"\\<And> A. (s' A) = s (S A)\"\n  shows \"a`?`c`\\<in>`s \\<rightarrow> P \\<preceq>S a`?`d`\\<in>`s' \\<rightarrow> Q\"", "lemma Write_Sim:\n  assumes A: \"P \\<preceq>S Q\" and B: \"\\<And> A. (d A) = c (S A)\"\n  shows \"a`!`c \\<rightarrow> P \\<preceq>S a`!`d \\<rightarrow> Q \"", "lemma Hide_Sim:\n  assumes A: \" P \\<preceq>S Q\"\n  shows \"(P \\\\ cs) \\<preceq>S (Q \\\\ cs)\"", "lemma lfp_Siml:\n  assumes A: \"\\<And> X. (X \\<preceq>S Q) \\<Longrightarrow> ((P X) \\<preceq>S Q)\" and B: \"mono P\"\n  shows \"(lfp P) \\<preceq>S Q\"", "lemma Mu_Sim:\n  assumes A: \"\\<And> X Y. X \\<preceq>S Y \\<Longrightarrow> (P X) \\<preceq>S (Q Y)\" \n  and B: \"mono P\" and C: \"mono Q\"\n  shows \"(lfp P) \\<preceq>S (lfp Q) \"", "lemma bot_Sim: \"bot \\<preceq>S bot\"", "lemma sim_is_ref: \"P \\<sqsubseteq> Q = P \\<preceq>(id) Q\"", "lemma ref_eq: \"((P::('a::ev_eq,'b) action) = Q) = (P \\<sqsubseteq> Q & Q \\<sqsubseteq> P)\"", "lemma rd_ref: \nassumes A:\"R (P \\<turnstile> Q) \\<in> {p. is_CSP_process p}\"\nand B:\"R (P' \\<turnstile> Q') \\<in> {p. is_CSP_process p}\"\nand C:\"\\<And> a b. P (a, b) \\<Longrightarrow> P' (a, b)\"\nand D:\"\\<And> a b. Q' (a, b) \\<Longrightarrow> Q (a, b)\"\nshows \"(action_of (R (P \\<turnstile> Q))) \\<sqsubseteq> (action_of (R (P' \\<turnstile> Q')))\"", "lemma rd_impl: \nassumes A:\"R (P \\<turnstile> Q) \\<in> {p. is_CSP_process p}\"\nand B:\"R (P' \\<turnstile> Q') \\<in> {p. is_CSP_process p}\"\nand C:\"\\<And> a b. P (a, b) \\<Longrightarrow> P' (a, b)\"\nand D:\"\\<And> a b. Q' (a, b) \\<Longrightarrow> Q (a, b)\"\nshows \"R (P' \\<turnstile> Q') (a, b) \\<longrightarrow> R (P \\<turnstile> Q) (a::('a::ev_eq, 'b) alpha_rp_scheme, b)\""], "translations": [["", "lemma Stop_Sim: \"Stop \\<preceq>S Stop\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Stop \\<preceq>S Stop", "by (auto simp: Simulation_def relation_of_Stop rp_defs design_defs Simul_def alpha_rp.defs \n         split: cond_splits)"], ["", "lemma Skip_Sim: \"Skip \\<preceq>S Skip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Skip \\<preceq>S Skip", "by (auto simp: Simulation_def relation_of_Skip design_def rp_defs Simul_def alpha_rp.defs \n         split: cond_splits)"], ["", "lemma Chaos_Sim: \"Chaos \\<preceq>S Chaos\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Chaos \\<preceq>S Chaos", "by (auto simp: Simulation_def relation_of_Chaos rp_defs design_defs Simul_def alpha_rp.defs \n         split: cond_splits)"], ["", "lemma Ndet_Sim:\n  assumes A: \"P  \\<preceq>S Q\" and B: \"P' \\<preceq>S Q'\"\n  shows \"(P \\<sqinter> P') \\<preceq>S (Q \\<sqinter> Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sqinter> P' \\<preceq>S Q \\<sqinter> Q'", "by (insert A B, auto simp: Simulation_def relation_of_Ndet)"], ["", "lemma Det_Sim:\n  assumes A: \"P  \\<preceq>S Q\" and B: \"P' \\<preceq>S Q'\"\n  shows \"(P \\<box> P') \\<preceq>S (Q \\<box> Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<box> P' \\<preceq>S Q \\<box> Q'", "by (auto simp: Simulation_def relation_of_Det design_def rp_defs Simul_def alpha_rp.defs spec_def\n         split: cond_splits\n         dest: A[simplified Simulation_def Simul_def, rule_format]\n               B[simplified Simulation_def Simul_def, rule_format])"], ["", "lemma Schema_Sim:\n  assumes A: \"\\<And> a. (Pre sc1) (S a) \\<Longrightarrow> (Pre sc2) a\"\n  and B: \"\\<And> a b. \\<lbrakk>Pre sc1 (S a) ; sc2 (a, b)\\<rbrakk> \\<Longrightarrow> sc1 (S a, S b)\"\n  shows \"(Schema sc1) \\<preceq>S (Schema sc2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Schema sc1 \\<preceq>S Schema sc2", "by (auto simp: Simulation_def Simul_def relation_of_Schema rp_defs design_defs alpha_rp.defs A B\n         split: cond_splits)"], ["", "lemma SUb_Sim:\n  assumes A: \"\\<And> a. (Pre sc1) (S a) \\<Longrightarrow> (Pre sc2) a\"\n  and B: \"\\<And> a b. \\<lbrakk>Pre sc1 (S a) ; sc2 (a, b)\\<rbrakk> \\<Longrightarrow> sc1 (S a, S b)\"\n  and C: \"P \\<preceq>S Q\"\n  shows \"(state_update_before sc1 P) \\<preceq>S (state_update_before sc2 Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. state_update_before sc1 P \\<preceq>S state_update_before sc2 Q", "apply (auto simp: Simulation_def Simul_def relation_of_state_update_before rp_defs design_defs alpha_rp.defs A B\n         split: cond_splits)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); wait aa; \\<not> ok aa;\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = False, wait = True, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); wait aa; ok ba; tr aa = tr ba;\n        wait ba; ref aa = ref ba;\n        alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = True, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok aa\n 4. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 5. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (drule C[simplified Simulation_def, rule_format])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa; tr aa \\<le> tr ba;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = False, wait = True, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); wait aa; ok ba; tr aa = tr ba;\n        wait ba; ref aa = ref ba;\n        alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = True, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok aa\n 4. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 5. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa; tr aa \\<le> tr ba;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc1\n                                   (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc1 (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = False, wait = True, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           Simul S ba)\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa; tr aa \\<le> tr ba;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (Simul S ba,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); wait aa; ok ba; tr aa = tr ba;\n        wait ba; ref aa = ref ba;\n        alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = True, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 4. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok aa\n 5. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 6. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (auto simp: A B Simul_def alpha_rp.defs)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa; tr aa \\<le> tr ba;\n        action.relation_of P\n         (\\<lparr>ok = ok ba, wait = wait ba, tr = tr ba, ref = ref ba,\n             \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n          \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n             \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc1\n                                   (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc1 (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = False, wait = True, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok ba, wait = wait ba, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); wait aa; ok ba; tr aa = tr ba;\n        wait ba; ref aa = ref ba;\n        alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = True, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok aa\n 4. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 5. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (clarsimp split: cond_splits)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); wait aa; ok ba; tr aa = tr ba;\n        wait ba; ref aa = ref ba;\n        alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = True, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok aa\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 4. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (drule C[simplified Simulation_def, rule_format])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; ok ba; tr aa = tr ba; wait ba; ref aa = ref ba;\n        alpha_rp.more aa = alpha_rp.more ba;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = True, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok aa\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 4. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; ok ba; tr aa = tr ba; wait ba; ref aa = ref ba;\n        alpha_rp.more aa = alpha_rp.more ba;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc1\n                                   (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc1 (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = ok aa, wait = True, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n                           Simul S ba)\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; ok ba; tr aa = tr ba; wait ba; ref aa = ref ba;\n        alpha_rp.more aa = alpha_rp.more ba;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (Simul S ba,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok aa\n 4. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 5. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (auto simp: A B Simul_def alpha_rp.defs)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; ok ba; tr aa = tr ba; wait ba; ref aa = ref ba;\n        alpha_rp.more aa = alpha_rp.more ba;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = True, tr = tr ba, ref = ref ba,\n             \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n          \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n             \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc1\n                                   (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc1 (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = ok aa, wait = True, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n                           \\<lparr>ok = True, wait = True, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok aa\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 4. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (clarsimp split: cond_splits)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok aa\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (case_tac \"ok aa\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = False, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>);\n        \\<not> ok aa\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (erule notE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = False, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>);\n        \\<not> ok aa\\<rbrakk>\n       \\<Longrightarrow> wait aa\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; \\<not> ok aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = False, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (drule C[simplified Simulation_def, rule_format])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba; \\<not> ok aa;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = False, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba; \\<not> ok aa;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc1\n                                   (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc1 (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = False, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           Simul S ba)\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba; \\<not> ok aa;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (Simul S ba,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 4. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (auto simp: A B Simul_def alpha_rp.defs)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba; \\<not> ok aa;\n        action.relation_of P\n         (\\<lparr>ok = ok ba, wait = wait ba, tr = tr ba, ref = ref ba,\n             \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n          \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n             \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc1\n                                   (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc1 (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = False, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok ba, wait = wait ba, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (clarsimp split: cond_splits)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc2 (alpha_rp.more aa)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (rule A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> Pre sc1 (S (alpha_rp.more aa))\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (case_tac \"Pre sc1 (S (alpha_rp.more aa))\", simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>);\n        \\<not> Pre sc1 (S (alpha_rp.more aa))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (erule notE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); tr aa \\<le> tr ba;\n        \\<not> (((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc1 (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc1 (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A')) ;;\n                action.relation_of P)\n                (\\<lparr>ok = ok aa, wait = False, tr = tr aa, ref = ref aa,\n                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                 \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n                    \\<dots> = S (alpha_rp.more c)\\<rparr>);\n        \\<not> Pre sc1 (S (alpha_rp.more aa))\\<rbrakk>\n       \\<Longrightarrow> wait aa\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; \\<not> Pre sc1 (S (alpha_rp.more aa))\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (drule C[simplified Simulation_def, rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba;\n        \\<not> Pre sc1 (S (alpha_rp.more aa));\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba;\n        \\<not> Pre sc1 (S (alpha_rp.more aa));\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc1\n                                   (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc1 (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           Simul S ba)\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba;\n        \\<not> Pre sc1 (S (alpha_rp.more aa));\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (Simul S ba,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (auto simp: A B Simul_def alpha_rp.defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba;\n        \\<not> Pre sc1 (S (alpha_rp.more aa));\n        action.relation_of P\n         (\\<lparr>ok = ok ba, wait = wait ba, tr = tr ba, ref = ref ba,\n             \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n          \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n             \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc1\n                                   (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc1 (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok ba, wait = wait ba, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (clarsimp split: cond_splits)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Q (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; ok ba; sc2 (alpha_rp.more aa, alpha_rp.more ba);\n        \\<not> wait ba; [] = tr ba - tr aa\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (drule C[simplified Simulation_def, rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba; ok ba;\n        sc2 (alpha_rp.more aa, alpha_rp.more ba); \\<not> wait ba;\n        [] = tr ba - tr aa;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc1\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc1 (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba; ok ba;\n        sc2 (alpha_rp.more aa, alpha_rp.more ba); \\<not> wait ba;\n        [] = tr ba - tr aa;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc1\n                                   (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc1 (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           Simul S ba)\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba; ok ba;\n        sc2 (alpha_rp.more aa, alpha_rp.more ba); \\<not> wait ba;\n        [] = tr ba - tr aa;\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (Simul S ba,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (auto simp: A B Simul_def alpha_rp.defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba; ok ba;\n        sc2 (alpha_rp.more aa, alpha_rp.more ba); \\<not> wait ba;\n        [] = tr ba - tr aa;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = tr ba, ref = ref ba,\n             \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n          \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n             \\<dots> = S (alpha_rp.more c)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc1\n                                   (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc1 (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = ok aa, wait = False, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = True, wait = False, tr = tr ba,\n                              ref = ref ba,\n                              \\<dots> = S (alpha_rp.more ba)\\<rparr>)", "apply (clarsimp split: cond_splits)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; tr aa \\<le> tr ba; ok ba;\n        sc2 (alpha_rp.more aa, alpha_rp.more ba); \\<not> wait ba;\n        [] = tr ba - tr aa;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = tr ba, ref = ref ba,\n             \\<dots> = S (alpha_rp.more ba)\\<rparr>,\n          \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n             \\<dots> = S (alpha_rp.more c)\\<rparr>);\n        ok aa; Pre sc1 (S (alpha_rp.more aa))\\<rbrakk>\n       \\<Longrightarrow> sc1 (S (alpha_rp.more aa), S (alpha_rp.more ba))", "apply (rule B, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Seq_Sim:\n  assumes A: \"P \\<preceq>S Q\" and B: \"P' \\<preceq>S Q'\"\n  shows \"(P `;` P') \\<preceq>S (Q `;` Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P `;` P' \\<preceq>S Q `;` Q'", "by (auto simp: Simulation_def relation_of_Seq dest: A[simplified Simulation_def, rule_format]\n                                                    B[simplified Simulation_def, rule_format])"], ["", "lemma Par_Sim:\n  assumes A: \" P  \\<preceq>S Q\" and B: \" P' \\<preceq>S Q'\"\n  and C: \"\\<And> a b. S (ns'2 a b) = ns2 (S a) (S b)\"\n  and D: \"\\<And> a b. S (ns'1 a b) = ns1 (S a) (S b)\"\n  shows \"(P \\<lbrakk> ns1 | cs | ns2 \\<rbrakk> P') \\<preceq>S (Q \\<lbrakk> ns'1 | cs | ns'2 \\<rbrakk> Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<lbrakk> ns1 | cs | ns2 \\<rbrakk> P' \\<preceq>S Q \\<lbrakk> ns'1 | cs | ns'2 \\<rbrakk> Q'", "apply (auto simp: Simulation_def relation_of_Par fun_eq_iff rp_defs Simul_def design_defs spec_def\n                    alpha_rp.defs\n              dest: A[simplified Simulation_def Simul_def, rule_format] \n                    B[simplified Simulation_def Simul_def, rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                (\\<forall>tr1.\n                    ((\\<lambda>(A, A').\n                         action.relation_of Q\n                          (A\\<lparr>wait := False\\<rparr>, A'\n                           \\<lparr>ok := False\\<rparr>)) ;;\n                     (\\<lambda>(S, S'). tr1 = tr S))\n                     (A\\<lparr>tr := []\\<rparr>, A'\n                      \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                    (\\<forall>tr2.\n                        ((\\<lambda>(Aa, A').\n                             action.relation_of Q'\n                              (Aa\\<lparr>wait := wait A\\<rparr>, A'\n                               \\<lparr>ok := False\\<rparr>)) ;;\n                         (\\<lambda>(S, S'). tr2 = tr S))\n                         (A\\<lparr>tr := []\\<rparr>, A'\n                          \\<lparr>tr :=\n                                    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                        tr_filter tr1 cs \\<noteq> tr_filter tr2 cs)) \\<and>\n                (\\<forall>tr1.\n                    ((\\<lambda>(Aa, A').\n                         action.relation_of Q\n                          (Aa\\<lparr>wait := wait A\\<rparr>, A'\n                           \\<lparr>ok := False\\<rparr>)) ;;\n                     (\\<lambda>(S, uu_). tr1 = tr S))\n                     (A\\<lparr>tr := []\\<rparr>, A'\n                      \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                    (\\<forall>tr2.\n                        ((\\<lambda>(A, A').\n                             action.relation_of Q'\n                              (A\\<lparr>wait := False\\<rparr>, A'\n                               \\<lparr>ok := False\\<rparr>)) ;;\n                         (\\<lambda>(S, S'). tr2 = tr S))\n                         (A\\<lparr>tr := []\\<rparr>, A'\n                          \\<lparr>tr :=\n                                    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                        tr_filter tr1 cs \\<noteq>\n                        tr_filter tr2 cs)) \\<longrightarrow>\n                ok A' \\<and>\n                (\\<exists>s1 s2.\n                    ((\\<lambda>(A, A').\n                         action.relation_of Q\n                          (A\\<lparr>wait := False\\<rparr>, s1\n                           \\<lparr>ok := True\\<rparr>) \\<and>\n                         action.relation_of Q'\n                          (A\\<lparr>wait := False\\<rparr>, s2\n                           \\<lparr>ok := True\\<rparr>)) ;;\n                     M_par s1 ns'1 s2 ns'2 cs)\n                     (A\\<lparr>tr := []\\<rparr>, A'\n                      \\<lparr>tr := tr A' - tr A\\<rparr>))) \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                (\\<forall>tr1.\n                    ((\\<lambda>(A, A').\n                         action.relation_of P\n                          (A\\<lparr>wait := False\\<rparr>, A'\n                           \\<lparr>ok := False\\<rparr>)) ;;\n                     (\\<lambda>(S, S'). tr1 = tr S))\n                     (A\\<lparr>tr := []\\<rparr>, A'\n                      \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                    (\\<forall>tr2.\n                        ((\\<lambda>(Aa, A').\n                             action.relation_of P'\n                              (Aa\\<lparr>wait := wait A\\<rparr>, A'\n                               \\<lparr>ok := False\\<rparr>)) ;;\n                         (\\<lambda>(S, S'). tr2 = tr S))\n                         (A\\<lparr>tr := []\\<rparr>, A'\n                          \\<lparr>tr :=\n                                    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                        tr_filter tr1 cs \\<noteq> tr_filter tr2 cs)) \\<and>\n                (\\<forall>tr1.\n                    ((\\<lambda>(Aa, A').\n                         action.relation_of P\n                          (Aa\\<lparr>wait := wait A\\<rparr>, A'\n                           \\<lparr>ok := False\\<rparr>)) ;;\n                     (\\<lambda>(S, uu_). tr1 = tr S))\n                     (A\\<lparr>tr := []\\<rparr>, A'\n                      \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                    (\\<forall>tr2.\n                        ((\\<lambda>(A, A').\n                             action.relation_of P'\n                              (A\\<lparr>wait := False\\<rparr>, A'\n                               \\<lparr>ok := False\\<rparr>)) ;;\n                         (\\<lambda>(S, S'). tr2 = tr S))\n                         (A\\<lparr>tr := []\\<rparr>, A'\n                          \\<lparr>tr :=\n                                    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                        tr_filter tr1 cs \\<noteq>\n                        tr_filter tr2 cs)) \\<longrightarrow>\n                ok A' \\<and>\n                (\\<exists>s1 s2.\n                    ((\\<lambda>(A, A').\n                         action.relation_of P\n                          (A\\<lparr>wait := False\\<rparr>, s1\n                           \\<lparr>ok := True\\<rparr>) \\<and>\n                         action.relation_of P'\n                          (A\\<lparr>wait := False\\<rparr>, s2\n                           \\<lparr>ok := True\\<rparr>)) ;;\n                     M_par s1 ns1 s2 ns2 cs)\n                     (A\\<lparr>tr := []\\<rparr>, A'\n                      \\<lparr>tr := tr A' - tr A\\<rparr>))) \\<and>\n               tr A \\<le> tr A'))\n        (\\<lparr>ok = ok a, wait = wait a, tr = tr a, ref = ref a,\n            \\<dots> = S (alpha_rp.more a)\\<rparr>,\n         \\<lparr>ok = ok b, wait = wait b, tr = tr b, ref = ref b,\n            \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (split cond_splits)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(wait \\<circ> fst) (a, b);\n        case (a, b) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok a, wait = wait a, tr = tr a,\n                               ref = ref a,\n                               \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                            \\<lparr>ok = ok b, wait = wait b, tr = tr b,\n                               ref = ref b,\n                               \\<dots> =\n                                 S (alpha_rp.more\n                                     b)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok a, wait = wait a,\n                                    tr = tr a, ref = ref a,\n                                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                                 \\<lparr>ok = ok b, wait = wait b,\n                                    tr = tr b, ref = ref b,\n                                    \\<dots> =\nS (alpha_rp.more b)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok a, wait = wait a,\ntr = tr a, ref = ref a, \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                                   \\<lparr>ok = ok b, wait = wait b,\ntr = tr b, ref = ref b,\n\\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok a, wait = wait a,\n                                    tr = tr a, ref = ref a,\n                                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                                 \\<lparr>ok = ok b, wait = wait b,\n                                    tr = tr b, ref = ref b,\n                                    \\<dots> =\nS (alpha_rp.more b)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              (\\<forall>tr1.\n                                  ((\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>)) ;;\n                                   (\\<lambda>(S, S'). tr1 = tr S))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  (\\<forall>tr2.\n((\\<lambda>(Aa, A').\n     action.relation_of P'\n      (Aa\\<lparr>wait := wait A\\<rparr>, A'\\<lparr>ok := False\\<rparr>)) ;;\n (\\<lambda>(S, S'). tr2 = tr S))\n (A\\<lparr>tr := []\\<rparr>, A'\n  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\ntr_filter tr1 cs \\<noteq> tr_filter tr2 cs)) \\<and>\n                              (\\<forall>tr1.\n                                  ((\\<lambda>(Aa, A').\n action.relation_of P\n  (Aa\\<lparr>wait := wait A\\<rparr>, A'\\<lparr>ok := False\\<rparr>)) ;;\n                                   (\\<lambda>(S, uu_). tr1 = tr S))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  (\\<forall>tr2.\n((\\<lambda>(A, A').\n     action.relation_of P'\n      (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>)) ;;\n (\\<lambda>(S, S'). tr2 = tr S))\n (A\\<lparr>tr := []\\<rparr>, A'\n  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\ntr_filter tr1 cs \\<noteq> tr_filter tr2 cs)) \\<longrightarrow>\n                              ok A' \\<and>\n                              (\\<exists>s1 s2.\n                                  ((\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, s1\\<lparr>ok := True\\<rparr>) \\<and>\n action.relation_of P'\n  (A\\<lparr>wait := False\\<rparr>, s2\\<lparr>ok := True\\<rparr>)) ;;\n                                   M_par s1 ns1 s2 ns2 cs)\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>))) \\<and>\n                             tr A \\<le> tr A'))\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> (wait \\<circ> fst) (a, b);\n        case (a, b) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           (\\<forall>tr1.\n               ((\\<lambda>(A, A').\n                    action.relation_of Q\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr1 = tr S))\n                (A\\<lparr>tr := []\\<rparr>, A'\n                 \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n               (\\<forall>tr2.\n                   ((\\<lambda>(Aa, A').\n                        action.relation_of Q'\n                         (Aa\\<lparr>wait := wait A\\<rparr>, A'\n                          \\<lparr>ok := False\\<rparr>)) ;;\n                    (\\<lambda>(S, S'). tr2 = tr S))\n                    (A\\<lparr>tr := []\\<rparr>, A'\n                     \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                   tr_filter tr1 cs \\<noteq> tr_filter tr2 cs)) \\<and>\n           (\\<forall>tr1.\n               ((\\<lambda>(Aa, A').\n                    action.relation_of Q\n                     (Aa\\<lparr>wait := wait A\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, uu_). tr1 = tr S))\n                (A\\<lparr>tr := []\\<rparr>, A'\n                 \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n               (\\<forall>tr2.\n                   ((\\<lambda>(A, A').\n                        action.relation_of Q'\n                         (A\\<lparr>wait := False\\<rparr>, A'\n                          \\<lparr>ok := False\\<rparr>)) ;;\n                    (\\<lambda>(S, S'). tr2 = tr S))\n                    (A\\<lparr>tr := []\\<rparr>, A'\n                     \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                   tr_filter tr1 cs \\<noteq>\n                   tr_filter tr2 cs)) \\<longrightarrow>\n           ok A' \\<and>\n           (\\<exists>s1 s2.\n               ((\\<lambda>(A, A').\n                    action.relation_of Q\n                     (A\\<lparr>wait := False\\<rparr>, s1\n                      \\<lparr>ok := True\\<rparr>) \\<and>\n                    action.relation_of Q'\n                     (A\\<lparr>wait := False\\<rparr>, s2\n                      \\<lparr>ok := True\\<rparr>)) ;;\n                M_par s1 ns'1 s2 ns'2 cs)\n                (A\\<lparr>tr := []\\<rparr>, A'\n                 \\<lparr>tr := tr A' - tr A\\<rparr>))) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok a, wait = wait a, tr = tr a,\n                               ref = ref a,\n                               \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                            \\<lparr>ok = ok b, wait = wait b, tr = tr b,\n                               ref = ref b,\n                               \\<dots> =\n                                 S (alpha_rp.more\n                                     b)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok a, wait = wait a,\n                                    tr = tr a, ref = ref a,\n                                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                                 \\<lparr>ok = ok b, wait = wait b,\n                                    tr = tr b, ref = ref b,\n                                    \\<dots> =\nS (alpha_rp.more b)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok a, wait = wait a,\ntr = tr a, ref = ref a, \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                                   \\<lparr>ok = ok b, wait = wait b,\ntr = tr b, ref = ref b,\n\\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok a, wait = wait a,\n                                    tr = tr a, ref = ref a,\n                                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                                 \\<lparr>ok = ok b, wait = wait b,\n                                    tr = tr b, ref = ref b,\n                                    \\<dots> =\nS (alpha_rp.more b)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              (\\<forall>tr1.\n                                  ((\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>)) ;;\n                                   (\\<lambda>(S, S'). tr1 = tr S))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  (\\<forall>tr2.\n((\\<lambda>(Aa, A').\n     action.relation_of P'\n      (Aa\\<lparr>wait := wait A\\<rparr>, A'\\<lparr>ok := False\\<rparr>)) ;;\n (\\<lambda>(S, S'). tr2 = tr S))\n (A\\<lparr>tr := []\\<rparr>, A'\n  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\ntr_filter tr1 cs \\<noteq> tr_filter tr2 cs)) \\<and>\n                              (\\<forall>tr1.\n                                  ((\\<lambda>(Aa, A').\n action.relation_of P\n  (Aa\\<lparr>wait := wait A\\<rparr>, A'\\<lparr>ok := False\\<rparr>)) ;;\n                                   (\\<lambda>(S, uu_). tr1 = tr S))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  (\\<forall>tr2.\n((\\<lambda>(A, A').\n     action.relation_of P'\n      (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>)) ;;\n (\\<lambda>(S, S'). tr2 = tr S))\n (A\\<lparr>tr := []\\<rparr>, A'\n  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\ntr_filter tr1 cs \\<noteq> tr_filter tr2 cs)) \\<longrightarrow>\n                              ok A' \\<and>\n                              (\\<exists>s1 s2.\n                                  ((\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, s1\\<lparr>ok := True\\<rparr>) \\<and>\n action.relation_of P'\n  (A\\<lparr>wait := False\\<rparr>, s2\\<lparr>ok := True\\<rparr>)) ;;\n                                   M_par s1 ns1 s2 ns2 cs)\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>))) \\<and>\n                             tr A \\<le> tr A'))", "apply (simp, erule disjE, rule disjI1, simp, rule disjI2, simp_all, rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         (\\<forall>tr1.\n             ((\\<lambda>(A, A').\n                  action.relation_of Q\n                   (A\\<lparr>wait := False\\<rparr>, A'\n                    \\<lparr>ok := False\\<rparr>)) ;;\n              (\\<lambda>(S, S'). tr1 = tr S))\n              (a\\<lparr>tr := []\\<rparr>, b\n               \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n             (\\<forall>tr2.\n                 ((\\<lambda>(A, A').\n                      action.relation_of Q'\n                       (A\\<lparr>wait := False\\<rparr>, A'\n                        \\<lparr>ok := False\\<rparr>)) ;;\n                  (\\<lambda>(S, S'). tr2 = tr S))\n                  (a\\<lparr>tr := []\\<rparr>, b\n                   \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n                 tr_filter tr1 cs \\<noteq>\n                 tr_filter tr2 cs)) \\<longrightarrow>\n         ok b \\<and>\n         (\\<exists>s1 s2.\n             ((\\<lambda>(A, A').\n                  action.relation_of Q\n                   (A\\<lparr>wait := False\\<rparr>, s1\n                    \\<lparr>ok := True\\<rparr>) \\<and>\n                  action.relation_of Q'\n                   (A\\<lparr>wait := False\\<rparr>, s2\n                    \\<lparr>ok := True\\<rparr>)) ;;\n              M_par s1 ns'1 s2 ns'2 cs)\n              (a\\<lparr>tr := []\\<rparr>, b\n               \\<lparr>tr := tr b - tr a\\<rparr>))) \\<and>\n        tr a \\<le> tr b;\n        ok a \\<and>\n        (\\<forall>tr1.\n            ((\\<lambda>(A, A').\n                 action.relation_of P\n                  (A\\<lparr>wait := False\\<rparr>, A'\n                   \\<lparr>ok := False\\<rparr>)) ;;\n             (\\<lambda>(S, S'). tr1 = tr S))\n             (\\<lparr>ok = ok a, wait = False, tr = [], ref = ref a,\n                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n              \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                 ref = ref b,\n                 \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n            (\\<forall>tr2.\n                ((\\<lambda>(A, A').\n                     action.relation_of P'\n                      (A\\<lparr>wait := False\\<rparr>, A'\n                       \\<lparr>ok := False\\<rparr>)) ;;\n                 (\\<lambda>(S, S'). tr2 = tr S))\n                 (\\<lparr>ok = ok a, wait = False, tr = [], ref = ref a,\n                     \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                  \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                     ref = ref b,\n                     \\<dots> =\n                       S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n                tr_filter tr1 cs \\<noteq> tr_filter tr2 cs))\\<rbrakk>\n       \\<Longrightarrow> ok b \\<and>\n                         (\\<exists>s1 s2.\n                             ((\\<lambda>(A, A').\n                                  action.relation_of P\n                                   (A\\<lparr>wait := False\\<rparr>, s1\n                                    \\<lparr>ok := True\\<rparr>) \\<and>\n                                  action.relation_of P'\n                                   (A\\<lparr>wait := False\\<rparr>, s2\n                                    \\<lparr>ok := True\\<rparr>)) ;;\n                              M_par s1 ns1 s2 ns2 cs)\n                              (\\<lparr>ok = True, wait = False, tr = [],\n                                  ref = ref a,\n                                  \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                               \\<lparr>ok = ok b, wait = wait b,\n                                  tr = tr b - tr a, ref = ref b,\n                                  \\<dots> = S (alpha_rp.more b)\\<rparr>))", "apply (auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> ok b\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 3. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (erule_tac x=\"tr ba\" in allE, auto)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<not> ((\\<lambda>(A, A').\n                    action.relation_of P\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr ba = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok b\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of P'\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> ok b\n 3. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 4. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (erule notE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<not> ((\\<lambda>(A, A').\n                    action.relation_of P\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr ba = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> wait a\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of P'\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> ok b\n 3. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 4. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "back"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              action.relation_of P\n                               (A\\<lparr>wait := False\\<rparr>, A'\n                                \\<lparr>ok := False\\<rparr>)) ;;\n                          (\\<lambda>(S, S'). tr ba = tr S))\n                          (\\<lparr>ok = True, wait = False, tr = [],\n                              ref = ref a,\n                              \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                           \\<lparr>ok = ok b, wait = wait b,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of P'\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> ok b\n 3. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 4. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (rule_tac b=\"Simul S ba\\<lparr>ok := False\\<rparr>\" in comp_intro)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> case (\\<lparr>ok = True, wait = False, tr = [],\n                                  ref = ref a,\n                                  \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                               Simul S ba\\<lparr>ok := False\\<rparr>) of\n                         (A, A') \\<Rightarrow>\n                           action.relation_of P\n                            (A\\<lparr>wait := False\\<rparr>, A'\n                             \\<lparr>ok := False\\<rparr>)\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> case (Simul S ba\\<lparr>ok := False\\<rparr>,\n                               \\<lparr>ok = ok b, wait = wait b,\n                                  tr = tr b - tr a, ref = ref b,\n                                  \\<dots> = S (alpha_rp.more b)\\<rparr>) of\n                         (S, S') \\<Rightarrow> tr ba = tr S\n 3. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of P'\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> ok b\n 4. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 5. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (auto simp: Simul_def alpha_rp.defs dest: A[simplified Simulation_def Simul_def, rule_format])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of P'\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> ok b\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 3. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (erule_tac x=\"tr bb\" in allE, auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<not> ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr bb = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok b\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 3. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (erule notE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<not> ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr bb = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> wait a\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 3. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              action.relation_of P'\n                               (A\\<lparr>wait := False\\<rparr>, A'\n                                \\<lparr>ok := False\\<rparr>)) ;;\n                          (\\<lambda>(S, S'). tr bb = tr S))\n                          (\\<lparr>ok = True, wait = False, tr = [],\n                              ref = ref a,\n                              \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                           \\<lparr>ok = ok b, wait = wait b,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 3. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (rule_tac b=\"Simul S bb\\<lparr>ok := False\\<rparr>\" in comp_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> case (\\<lparr>ok = True, wait = False, tr = [],\n                                  ref = ref a,\n                                  \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                               Simul S bb\\<lparr>ok := False\\<rparr>) of\n                         (A, A') \\<Rightarrow>\n                           action.relation_of P'\n                            (A\\<lparr>wait := False\\<rparr>, A'\n                             \\<lparr>ok := False\\<rparr>)\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> case (Simul S bb\\<lparr>ok := False\\<rparr>,\n                               \\<lparr>ok = ok b, wait = wait b,\n                                  tr = tr b - tr a, ref = ref b,\n                                  \\<dots> = S (alpha_rp.more b)\\<rparr>) of\n                         (S, S') \\<Rightarrow> tr bb = tr S\n 3. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 4. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (auto simp: Simul_def alpha_rp.defs dest: B[simplified Simulation_def Simul_def, rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 2. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (erule_tac x=\"tr ba\" in allE, auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<not> ((\\<lambda>(A, A').\n                    action.relation_of P\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr ba = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of P'\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 3. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (erule notE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<not> ((\\<lambda>(A, A').\n                    action.relation_of P\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr ba = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> wait a\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of P'\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 3. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "back"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              action.relation_of P\n                               (A\\<lparr>wait := False\\<rparr>, A'\n                                \\<lparr>ok := False\\<rparr>)) ;;\n                          (\\<lambda>(S, S'). tr ba = tr S))\n                          (\\<lparr>ok = True, wait = False, tr = [],\n                              ref = ref a,\n                              \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                           \\<lparr>ok = ok b, wait = wait b,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of P'\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 3. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (rule_tac b=\"Simul S ba\\<lparr>ok := False\\<rparr>\" in comp_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> case (\\<lparr>ok = True, wait = False, tr = [],\n                                  ref = ref a,\n                                  \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                               Simul S ba\\<lparr>ok := False\\<rparr>) of\n                         (A, A') \\<Rightarrow>\n                           action.relation_of P\n                            (A\\<lparr>wait := False\\<rparr>, A'\n                             \\<lparr>ok := False\\<rparr>)\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> case (Simul S ba\\<lparr>ok := False\\<rparr>,\n                               \\<lparr>ok = ok b, wait = wait b,\n                                  tr = tr b - tr a, ref = ref b,\n                                  \\<dots> = S (alpha_rp.more b)\\<rparr>) of\n                         (S, S') \\<Rightarrow> tr ba = tr S\n 3. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of P'\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 4. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (auto simp: Simul_def alpha_rp.defs dest: A[simplified Simulation_def Simul_def, rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of P'\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 2. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (erule_tac x=\"tr bb\" in allE, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<not> ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr bb = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = ok b, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 2. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (erule notE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<not> ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr bb = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = ok b, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> wait a\n 2. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              action.relation_of P'\n                               (A\\<lparr>wait := False\\<rparr>, A'\n                                \\<lparr>ok := False\\<rparr>)) ;;\n                          (\\<lambda>(S, S'). tr bb = tr S))\n                          (\\<lparr>ok = True, wait = False, tr = [],\n                              ref = ref a,\n                              \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                           \\<lparr>ok = ok b, wait = wait b,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 2. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (rule_tac b=\"Simul S bb\\<lparr>ok := False\\<rparr>\" in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> case (\\<lparr>ok = True, wait = False, tr = [],\n                                  ref = ref a,\n                                  \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                               Simul S bb\\<lparr>ok := False\\<rparr>) of\n                         (A, A') \\<Rightarrow>\n                           action.relation_of P'\n                            (A\\<lparr>wait := False\\<rparr>, A'\n                             \\<lparr>ok := False\\<rparr>)\n 2. \\<And>a b ba bb.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> case (Simul S bb\\<lparr>ok := False\\<rparr>,\n                               \\<lparr>ok = ok b, wait = wait b,\n                                  tr = tr b - tr a, ref = ref b,\n                                  \\<dots> = S (alpha_rp.more b)\\<rparr>) of\n                         (S, S') \\<Rightarrow> tr bb = tr S\n 3. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (auto simp: Simul_def alpha_rp.defs dest: B[simplified Simulation_def Simul_def, rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (rule_tac x=\"Simul S s1\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>,\n                                   Simul S s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of P'\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par (Simul S s1) ns1 s2 ns2 cs)\n                             (\\<lparr>ok = True, wait = False, tr = [],\n                                 ref = ref a,\n                                 \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                              \\<lparr>ok = True, wait = wait b,\n                                 tr = tr b - tr a, ref = ref b,\n                                 \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (rule_tac x=\"Simul S s2\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of Q\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of Q'\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              action.relation_of P\n                               (A\\<lparr>wait := False\\<rparr>, Simul S s1\n                                \\<lparr>ok := True\\<rparr>) \\<and>\n                              action.relation_of P'\n                               (A\\<lparr>wait := False\\<rparr>, Simul S s2\n                                \\<lparr>ok := True\\<rparr>)) ;;\n                          M_par (Simul S s1) ns1 (Simul S s2) ns2 cs)\n                          (\\<lparr>ok = True, wait = False, tr = [],\n                              ref = ref a,\n                              \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                           \\<lparr>ok = True, wait = wait b,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (auto simp: Simul_def alpha_rp.defs \n              dest!: B[simplified Simulation_def Simul_def, rule_format]\n                     A[simplified Simulation_def Simul_def, rule_format]\n              split: cond_splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s1, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s2, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              action.relation_of P\n                               (A\\<lparr>wait := False\\<rparr>,\n                                \\<lparr>ok = True, wait = wait s1,\n                                   tr = tr s1, ref = ref s1,\n                                   \\<dots> =\n                                     S (alpha_rp.more s1)\\<rparr>) \\<and>\n                              action.relation_of P'\n                               (A\\<lparr>wait := False\\<rparr>,\n                                \\<lparr>ok = True, wait = wait s2,\n                                   tr = tr s2, ref = ref s2,\n                                   \\<dots> =\n                                     S (alpha_rp.more s2)\\<rparr>)) ;;\n                          M_par\n                           \\<lparr>ok = ok s1, wait = wait s1, tr = tr s1,\n                              ref = ref s1,\n                              \\<dots> = S (alpha_rp.more s1)\\<rparr>\n                           ns1\n                           \\<lparr>ok = ok s2, wait = wait s2, tr = tr s2,\n                              ref = ref s2,\n                              \\<dots> = S (alpha_rp.more s2)\\<rparr>\n                           ns2 cs)\n                          (\\<lparr>ok = True, wait = False, tr = [],\n                              ref = ref a,\n                              \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                           \\<lparr>ok = True, wait = wait b,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s1, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s2, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> case (\\<lparr>ok = True, wait = False, tr = [],\n                                  ref = ref a,\n                                  \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                               Simul S ba) of\n                         (A, A') \\<Rightarrow>\n                           action.relation_of P\n                            (A\\<lparr>wait := False\\<rparr>,\n                             \\<lparr>ok = True, wait = wait s1, tr = tr s1,\n                                ref = ref s1,\n                                \\<dots> =\n                                  S (alpha_rp.more s1)\\<rparr>) \\<and>\n                           action.relation_of P'\n                            (A\\<lparr>wait := False\\<rparr>,\n                             \\<lparr>ok = True, wait = wait s2, tr = tr s2,\n                                ref = ref s2,\n                                \\<dots> = S (alpha_rp.more s2)\\<rparr>)\n 2. \\<And>a b s1 s2 ba.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = wait b, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns'1 s2 ns'2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s1, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s2, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> M_par\n                          \\<lparr>ok = ok s1, wait = wait s1, tr = tr s1,\n                             ref = ref s1,\n                             \\<dots> = S (alpha_rp.more s1)\\<rparr>\n                          ns1\n                          \\<lparr>ok = ok s2, wait = wait s2, tr = tr s2,\n                             ref = ref s2,\n                             \\<dots> = S (alpha_rp.more s2)\\<rparr>\n                          ns2 cs\n                          (Simul S ba,\n                           \\<lparr>ok = True, wait = wait b,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (auto simp add: M_par_def alpha_rp.defs diff_tr_def fun_eq_iff ParMerge_def Simul_def\n            split : cond_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b s1 s2 aa bb.\n       \\<lbrakk>tr b - tr a - tr aa\n                \\<in> set (ParMergel (tr s1 - tr aa) (tr s2 - tr aa) cs);\n        ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs); \\<not> wait a;\n        tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = False, tr = tr b - tr a, ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = False, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = False, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s2, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>);\n        \\<not> wait b;\n        ns'1 (alpha_rp.more s1) (alpha_rp.more aa) = alpha_rp.more bb;\n        ns'2 (alpha_rp.more s2) (alpha_rp.more bb) = alpha_rp.more b;\n        \\<not> wait s1\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(Sa, S').\n                              ns1 (S (alpha_rp.more s1))\n                               (alpha_rp.more Sa) =\n                              alpha_rp.more S') ;;\n                          (\\<lambda>(Sa, S').\n                              ns2 (S (alpha_rp.more s2))\n                               (alpha_rp.more Sa) =\n                              alpha_rp.more S'))\n                          (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = True, wait = False,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)\n 2. \\<And>a b s1 s2 aa bb.\n       \\<lbrakk>tr b - tr a - tr aa\n                \\<in> set (ParMergel (tr s1 - tr aa) (tr s2 - tr aa) cs);\n        ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs); \\<not> wait a;\n        tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = False, tr = tr b - tr a, ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = False, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s1, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = False, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>);\n        \\<not> wait b;\n        ns'1 (alpha_rp.more s1) (alpha_rp.more aa) = alpha_rp.more bb;\n        ns'2 (alpha_rp.more s2) (alpha_rp.more bb) = alpha_rp.more b;\n        \\<not> wait s2\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(Sa, S').\n                              ns1 (S (alpha_rp.more s1))\n                               (alpha_rp.more Sa) =\n                              alpha_rp.more S') ;;\n                          (\\<lambda>(Sa, S').\n                              ns2 (S (alpha_rp.more s2))\n                               (alpha_rp.more Sa) =\n                              alpha_rp.more S'))\n                          (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = True, wait = False,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (rule_tac b=\"\\<lparr>ok = ok bb, wait = wait bb, tr = tr bb, ref = ref bb, \n              \\<dots> = S (alpha_rp.more bb)\\<rparr>\" in comp_intro, auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b s1 s2 aa bb.\n       \\<lbrakk>tr b - tr a - tr aa\n                \\<in> set (ParMergel (tr s1 - tr aa) (tr s2 - tr aa) cs);\n        ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs); \\<not> wait a;\n        tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = False, tr = tr b - tr a, ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = False, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = False, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s2, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>);\n        \\<not> wait b;\n        ns'1 (alpha_rp.more s1) (alpha_rp.more aa) = alpha_rp.more bb;\n        ns'2 (alpha_rp.more s2) (alpha_rp.more bb) = alpha_rp.more b;\n        \\<not> wait s1\\<rbrakk>\n       \\<Longrightarrow> ns1 (S (alpha_rp.more s1)) (S (alpha_rp.more aa)) =\n                         S (alpha_rp.more bb)\n 2. \\<And>a b s1 s2 aa bb.\n       \\<lbrakk>tr b - tr a - tr aa\n                \\<in> set (ParMergel (tr s1 - tr aa) (tr s2 - tr aa) cs);\n        ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs); \\<not> wait a;\n        tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = False, tr = tr b - tr a, ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = False, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = False, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s2, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>);\n        \\<not> wait b;\n        ns'1 (alpha_rp.more s1) (alpha_rp.more aa) = alpha_rp.more bb;\n        ns'2 (alpha_rp.more s2) (alpha_rp.more bb) = alpha_rp.more b;\n        \\<not> wait s1\\<rbrakk>\n       \\<Longrightarrow> ns2 (S (alpha_rp.more s2)) (S (alpha_rp.more bb)) =\n                         S (alpha_rp.more b)\n 3. \\<And>a b s1 s2 aa bb.\n       \\<lbrakk>tr b - tr a - tr aa\n                \\<in> set (ParMergel (tr s1 - tr aa) (tr s2 - tr aa) cs);\n        ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs); \\<not> wait a;\n        tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = False, tr = tr b - tr a, ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = False, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s1, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = False, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>);\n        \\<not> wait b;\n        ns'1 (alpha_rp.more s1) (alpha_rp.more aa) = alpha_rp.more bb;\n        ns'2 (alpha_rp.more s2) (alpha_rp.more bb) = alpha_rp.more b;\n        \\<not> wait s2\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(Sa, S').\n                              ns1 (S (alpha_rp.more s1))\n                               (alpha_rp.more Sa) =\n                              alpha_rp.more S') ;;\n                          (\\<lambda>(Sa, S').\n                              ns2 (S (alpha_rp.more s2))\n                               (alpha_rp.more Sa) =\n                              alpha_rp.more S'))\n                          (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = True, wait = False,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (subst D[where a=\"(alpha_rp.more s1)\" and b=\"(alpha_rp.more aa)\", symmetric], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b s1 s2 aa bb.\n       \\<lbrakk>tr b - tr a - tr aa\n                \\<in> set (ParMergel (tr s1 - tr aa) (tr s2 - tr aa) cs);\n        ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs); \\<not> wait a;\n        tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = False, tr = tr b - tr a, ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = False, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = False, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s2, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>);\n        \\<not> wait b;\n        ns'1 (alpha_rp.more s1) (alpha_rp.more aa) = alpha_rp.more bb;\n        ns'2 (alpha_rp.more s2) (alpha_rp.more bb) = alpha_rp.more b;\n        \\<not> wait s1\\<rbrakk>\n       \\<Longrightarrow> ns2 (S (alpha_rp.more s2)) (S (alpha_rp.more bb)) =\n                         S (alpha_rp.more b)\n 2. \\<And>a b s1 s2 aa bb.\n       \\<lbrakk>tr b - tr a - tr aa\n                \\<in> set (ParMergel (tr s1 - tr aa) (tr s2 - tr aa) cs);\n        ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs); \\<not> wait a;\n        tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = False, tr = tr b - tr a, ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = False, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s1, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = False, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>);\n        \\<not> wait b;\n        ns'1 (alpha_rp.more s1) (alpha_rp.more aa) = alpha_rp.more bb;\n        ns'2 (alpha_rp.more s2) (alpha_rp.more bb) = alpha_rp.more b;\n        \\<not> wait s2\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(Sa, S').\n                              ns1 (S (alpha_rp.more s1))\n                               (alpha_rp.more Sa) =\n                              alpha_rp.more S') ;;\n                          (\\<lambda>(Sa, S').\n                              ns2 (S (alpha_rp.more s2))\n                               (alpha_rp.more Sa) =\n                              alpha_rp.more S'))\n                          (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = True, wait = False,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (subst C[where a=\"(alpha_rp.more s2)\" and b=\"(alpha_rp.more bb)\", symmetric], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b s1 s2 aa bb.\n       \\<lbrakk>tr b - tr a - tr aa\n                \\<in> set (ParMergel (tr s1 - tr aa) (tr s2 - tr aa) cs);\n        ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs); \\<not> wait a;\n        tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = False, tr = tr b - tr a, ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = False, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s1, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = False, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>);\n        \\<not> wait b;\n        ns'1 (alpha_rp.more s1) (alpha_rp.more aa) = alpha_rp.more bb;\n        ns'2 (alpha_rp.more s2) (alpha_rp.more bb) = alpha_rp.more b;\n        \\<not> wait s2\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(Sa, S').\n                              ns1 (S (alpha_rp.more s1))\n                               (alpha_rp.more Sa) =\n                              alpha_rp.more S') ;;\n                          (\\<lambda>(Sa, S').\n                              ns2 (S (alpha_rp.more s2))\n                               (alpha_rp.more Sa) =\n                              alpha_rp.more S'))\n                          (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = True, wait = False,\n                              tr = tr b - tr a, ref = ref b,\n                              \\<dots> = S (alpha_rp.more b)\\<rparr>)", "apply (rule_tac b=\"\\<lparr>ok = ok bb, wait = wait bb, tr = tr bb, ref = ref bb, \n              \\<dots> = S (alpha_rp.more bb)\\<rparr>\" in comp_intro, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b s1 s2 aa bb.\n       \\<lbrakk>tr b - tr a - tr aa\n                \\<in> set (ParMergel (tr s1 - tr aa) (tr s2 - tr aa) cs);\n        ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs); \\<not> wait a;\n        tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = False, tr = tr b - tr a, ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = False, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s1, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = False, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>);\n        \\<not> wait b;\n        ns'1 (alpha_rp.more s1) (alpha_rp.more aa) = alpha_rp.more bb;\n        ns'2 (alpha_rp.more s2) (alpha_rp.more bb) = alpha_rp.more b;\n        \\<not> wait s2\\<rbrakk>\n       \\<Longrightarrow> ns1 (S (alpha_rp.more s1)) (S (alpha_rp.more aa)) =\n                         S (alpha_rp.more bb)\n 2. \\<And>a b s1 s2 aa bb.\n       \\<lbrakk>tr b - tr a - tr aa\n                \\<in> set (ParMergel (tr s1 - tr aa) (tr s2 - tr aa) cs);\n        ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs); \\<not> wait a;\n        tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = False, tr = tr b - tr a, ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = False, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s1, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = False, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>);\n        \\<not> wait b;\n        ns'1 (alpha_rp.more s1) (alpha_rp.more aa) = alpha_rp.more bb;\n        ns'2 (alpha_rp.more s2) (alpha_rp.more bb) = alpha_rp.more b;\n        \\<not> wait s2\\<rbrakk>\n       \\<Longrightarrow> ns2 (S (alpha_rp.more s2)) (S (alpha_rp.more bb)) =\n                         S (alpha_rp.more b)", "apply (subst D[where a=\"(alpha_rp.more s1)\" and b=\"(alpha_rp.more aa)\", symmetric], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b s1 s2 aa bb.\n       \\<lbrakk>tr b - tr a - tr aa\n                \\<in> set (ParMergel (tr s1 - tr aa) (tr s2 - tr aa) cs);\n        ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs); \\<not> wait a;\n        tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                \\<dots> = S (alpha_rp.more a)\\<rparr>,\n             \\<lparr>ok = True, wait = False, tr = tr b - tr a, ref = ref b,\n                \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of P'\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n                    \\<dots> = S (alpha_rp.more a)\\<rparr>,\n                 \\<lparr>ok = True, wait = False, tr = tr b - tr a,\n                    ref = ref b,\n                    \\<dots> = S (alpha_rp.more b)\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        action.relation_of P\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = wait s1, tr = tr s1, ref = ref s1,\n             \\<dots> = S (alpha_rp.more s1)\\<rparr>);\n        action.relation_of P'\n         (\\<lparr>ok = True, wait = False, tr = [], ref = ref a,\n             \\<dots> = S (alpha_rp.more a)\\<rparr>,\n          \\<lparr>ok = True, wait = False, tr = tr s2, ref = ref s2,\n             \\<dots> = S (alpha_rp.more s2)\\<rparr>);\n        \\<not> wait b;\n        ns'1 (alpha_rp.more s1) (alpha_rp.more aa) = alpha_rp.more bb;\n        ns'2 (alpha_rp.more s2) (alpha_rp.more bb) = alpha_rp.more b;\n        \\<not> wait s2\\<rbrakk>\n       \\<Longrightarrow> ns2 (S (alpha_rp.more s2)) (S (alpha_rp.more bb)) =\n                         S (alpha_rp.more b)", "apply (subst C[where a=\"(alpha_rp.more s2)\" and b=\"(alpha_rp.more bb)\", symmetric], simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Assign_Sim:\n  assumes A: \"\\<And> A. vy A = vx (S A)\"\n  and B: \"\\<And> ff A. (S (y_update ff A)) = x_update ff (S A)\"\n  shows \"(x `:=` vx) \\<preceq>S (y `:=` vy)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ASSIGN (x, x_update) vx \\<preceq>S ASSIGN (y, y_update) vy", "by (auto simp: Simulation_def relation_of_Assign update_def rp_defs design_defs Simul_def A B\n                   alpha_rp.defs split: cond_splits)"], ["", "lemma Var_Sim:\n  assumes A: \"P \\<preceq>S Q\" and B: \"\\<And> ff A. (S ((snd b) ff A)) = (snd a) ff (S A)\"\n  shows \"(Var a P) \\<preceq>S (Var b Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var a P \\<preceq>S Var b Q", "apply (auto simp: Simulation_def relation_of_Var rp_defs design_defs fun_eq_iff Simul_def B\n                    alpha_rp.defs increase_def decrease_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             snd b ((#) a) (alpha_rp.more A))) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Q (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>aa.\n alpha_rp.more A' = snd a ((#) aa) (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   snd a tl (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                              ref = ref ca,\n                              \\<dots> = S (alpha_rp.more ca)\\<rparr>)", "apply (rule_tac b=\"Simul S ab\" in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             snd b ((#) a) (alpha_rp.more A))) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Q (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  (\\<exists>aa.\nalpha_rp.more A' = snd a ((#) aa) (alpha_rp.more A))) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           Simul S ab)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             snd b ((#) a) (alpha_rp.more A))) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Q (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of P ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   snd a tl (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (Simul S ab,\n                           \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                              ref = ref ca,\n                              \\<dots> = S (alpha_rp.more ca)\\<rparr>)", "apply (split cond_splits)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>(wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A';\n        action.relation_of Q (ab, bb); (wait \\<circ> fst) (bb, ca);\n        case (bb, ca) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                               ref = ref aa,\n                               \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                            Simul S ab) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok aa, wait = wait aa,\n                                    tr = tr aa, ref = ref aa,\n                                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                 Simul S ab) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok aa, wait = wait aa,\ntr = tr aa, ref = ref aa, \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                   Simul S ab) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok aa, wait = wait aa,\n                                    tr = tr aa, ref = ref aa,\n                                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                 Simul S ab) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and>\n                              \\<not> wait A' \\<and>\n                              (\\<exists>aa.\n                                  alpha_rp.more A' =\n                                  snd a ((#) aa) (alpha_rp.more A))) \\<and>\n                             tr A \\<le> tr A'))\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>(wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A';\n        action.relation_of Q (ab, bb); \\<not> (wait \\<circ> fst) (bb, ca);\n        case (bb, ca) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                               ref = ref aa,\n                               \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                            Simul S ab) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok aa, wait = wait aa,\n                                    tr = tr aa, ref = ref aa,\n                                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                 Simul S ab) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok aa, wait = wait aa,\ntr = tr aa, ref = ref aa, \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                   Simul S ab) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok aa, wait = wait aa,\n                                    tr = tr aa, ref = ref aa,\n                                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                 Simul S ab) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and>\n                              \\<not> wait A' \\<and>\n                              (\\<exists>aa.\n                                  alpha_rp.more A' =\n                                  snd a ((#) aa) (alpha_rp.more A))) \\<and>\n                             tr A \\<le> tr A'))\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Q (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> (wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           (\\<exists>a.\n               alpha_rp.more A' = snd b ((#) a) (alpha_rp.more A))) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                               ref = ref aa,\n                               \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                            Simul S ab) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok aa, wait = wait aa,\n                                    tr = tr aa, ref = ref aa,\n                                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                 Simul S ab) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok aa, wait = wait aa,\ntr = tr aa, ref = ref aa, \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                   Simul S ab) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok aa, wait = wait aa,\n                                    tr = tr aa, ref = ref aa,\n                                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                 Simul S ab) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and>\n                              \\<not> wait A' \\<and>\n                              (\\<exists>aa.\n                                  alpha_rp.more A' =\n                                  snd a ((#) aa) (alpha_rp.more A))) \\<and>\n                             tr A \\<le> tr A'))\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             snd b ((#) a) (alpha_rp.more A))) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Q (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of P ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   snd a tl (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (Simul S ab,\n                           \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                              ref = ref ca,\n                              \\<dots> = S (alpha_rp.more ca)\\<rparr>)", "apply (auto simp: B alpha_rp.defs Simul_def elim!: alpha_rp_eqE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             snd b ((#) a) (alpha_rp.more A))) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Q (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of P ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   snd a tl (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                              ref = ref ab,\n                              \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                           \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                              ref = ref ca,\n                              \\<dots> = S (alpha_rp.more ca)\\<rparr>)", "apply (rule_tac b=\"Simul S bb\" in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             snd b ((#) a) (alpha_rp.more A))) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Q (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                              ref = ref ab,\n                              \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                           Simul S bb)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             snd b ((#) a) (alpha_rp.more A))) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Q (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd a tl (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (Simul S bb,\n                           \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                              ref = ref ca,\n                              \\<dots> = S (alpha_rp.more ca)\\<rparr>)", "apply (split cond_splits)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>(wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A';\n        action.relation_of Q (ab, bb); (wait \\<circ> fst) (bb, ca);\n        case (bb, ca) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A'\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                              ref = ref ab,\n                              \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                           Simul S bb)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>(wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A';\n        action.relation_of Q (ab, bb); \\<not> (wait \\<circ> fst) (bb, ca);\n        case (bb, ca) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                              ref = ref ab,\n                              \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                           Simul S bb)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Q (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> (wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           (\\<exists>a.\n               alpha_rp.more A' = snd b ((#) a) (alpha_rp.more A))) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                              ref = ref ab,\n                              \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                           Simul S bb)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             snd b ((#) a) (alpha_rp.more A))) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Q (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd a tl (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (Simul S bb,\n                           \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                              ref = ref ca,\n                              \\<dots> = S (alpha_rp.more ca)\\<rparr>)", "apply (auto simp: B alpha_rp.defs Simul_def \n              elim!: alpha_rp_eqE dest!: A[simplified Simulation_def Simul_def, rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             snd b ((#) a) (alpha_rp.more A))) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        action.relation_of P\n         (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab, ref = ref ab,\n             \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n          \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb, ref = ref bb,\n             \\<dots> = S (alpha_rp.more bb)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd a tl (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                              ref = ref bb,\n                              \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                           \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                              ref = ref ca,\n                              \\<dots> = S (alpha_rp.more ca)\\<rparr>)", "apply (split cond_splits)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                     ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        (wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A';\n        (wait \\<circ> fst) (bb, ca);\n        case (bb, ca) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                               ref = ref bb,\n                               \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                            \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                               ref = ref ca,\n                               \\<dots> =\n                                 S (alpha_rp.more\n                                     ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok bb, wait = wait bb,\ntr = tr bb, ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                   \\<lparr>ok = ok ca, wait = wait ca,\ntr = tr ca, ref = ref ca,\n\\<dots> = S (alpha_rp.more ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              snd a tl (alpha_rp.more A)) \\<and>\n                             tr A \\<le> tr A'))\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                     ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        (wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A';\n        \\<not> (wait \\<circ> fst) (bb, ca);\n        case (bb, ca) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                               ref = ref bb,\n                               \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                            \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                               ref = ref ca,\n                               \\<dots> =\n                                 S (alpha_rp.more\n                                     ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok bb, wait = wait bb,\ntr = tr bb, ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                   \\<lparr>ok = ok ca, wait = wait ca,\ntr = tr ca, ref = ref ca,\n\\<dots> = S (alpha_rp.more ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              snd a tl (alpha_rp.more A)) \\<and>\n                             tr A \\<le> tr A'))\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A' =\n                         snd b tl (alpha_rp.more A)) \\<and>\n                        tr A \\<le> tr A'))\n                 (bb, ca);\n        action.relation_of P\n         (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab, ref = ref ab,\n             \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n          \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb, ref = ref bb,\n             \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> (wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           (\\<exists>a.\n               alpha_rp.more A' = snd b ((#) a) (alpha_rp.more A))) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                               ref = ref bb,\n                               \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                            \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                               ref = ref ca,\n                               \\<dots> =\n                                 S (alpha_rp.more\n                                     ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok bb, wait = wait bb,\ntr = tr bb, ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                   \\<lparr>ok = ok ca, wait = wait ca,\ntr = tr ca, ref = ref ca,\n\\<dots> = S (alpha_rp.more ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              snd a tl (alpha_rp.more A)) \\<and>\n                             tr A \\<le> tr A'))", "apply (simp add: alpha_rp.defs)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = ok bb, wait = True, tr = tr bb, ref = ref bb,\n                     \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n                         ok ca \\<and>\n                         tr bb = tr ca \\<and>\n                         wait ca \\<and>\n                         ref bb = ref ca \\<and>\n                         S (alpha_rp.more bb) = S (alpha_rp.more ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                     ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        (wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A';\n        \\<not> (wait \\<circ> fst) (bb, ca);\n        case (bb, ca) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                               ref = ref bb,\n                               \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                            \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                               ref = ref ca,\n                               \\<dots> =\n                                 S (alpha_rp.more\n                                     ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok bb, wait = wait bb,\ntr = tr bb, ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                   \\<lparr>ok = ok ca, wait = wait ca,\ntr = tr ca, ref = ref ca,\n\\<dots> = S (alpha_rp.more ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              snd a tl (alpha_rp.more A)) \\<and>\n                             tr A \\<le> tr A'))\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A' =\n                         snd b tl (alpha_rp.more A)) \\<and>\n                        tr A \\<le> tr A'))\n                 (bb, ca);\n        action.relation_of P\n         (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab, ref = ref ab,\n             \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n          \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb, ref = ref bb,\n             \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> (wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           (\\<exists>a.\n               alpha_rp.more A' = snd b ((#) a) (alpha_rp.more A))) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                               ref = ref bb,\n                               \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                            \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                               ref = ref ca,\n                               \\<dots> =\n                                 S (alpha_rp.more\n                                     ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok bb, wait = wait bb,\ntr = tr bb, ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                   \\<lparr>ok = ok ca, wait = wait ca,\ntr = tr ca, ref = ref ca,\n\\<dots> = S (alpha_rp.more ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              snd a tl (alpha_rp.more A)) \\<and>\n                             tr A \\<le> tr A'))", "apply (erule disjE, rule disjI1, simp, rule disjI2, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                     ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        (wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A';\n        \\<not> (wait \\<circ> fst) (bb, ca);\n        case (bb, ca) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                               ref = ref bb,\n                               \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                            \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                               ref = ref ca,\n                               \\<dots> =\n                                 S (alpha_rp.more\n                                     ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok bb, wait = wait bb,\ntr = tr bb, ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                   \\<lparr>ok = ok ca, wait = wait ca,\ntr = tr ca, ref = ref ca,\n\\<dots> = S (alpha_rp.more ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              snd a tl (alpha_rp.more A)) \\<and>\n                             tr A \\<le> tr A'))\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A' =\n                         snd b tl (alpha_rp.more A)) \\<and>\n                        tr A \\<le> tr A'))\n                 (bb, ca);\n        action.relation_of P\n         (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab, ref = ref ab,\n             \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n          \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb, ref = ref bb,\n             \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> (wait \\<circ> fst) (aa, ab);\n        case (aa, ab) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           (\\<exists>a.\n               alpha_rp.more A' = snd b ((#) a) (alpha_rp.more A))) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                               ref = ref bb,\n                               \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                            \\<lparr>ok = ok ca, wait = wait ca, tr = tr ca,\n                               ref = ref ca,\n                               \\<dots> =\n                                 S (alpha_rp.more\n                                     ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok bb, wait = wait bb,\ntr = tr bb, ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                   \\<lparr>ok = ok ca, wait = wait ca,\ntr = tr ca, ref = ref ca,\n\\<dots> = S (alpha_rp.more ca)\\<rparr>) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok bb, wait = wait bb,\n                                    tr = tr bb, ref = ref bb,\n                                    \\<dots> = S (alpha_rp.more bb)\\<rparr>,\n                                 \\<lparr>ok = ok ca, wait = wait ca,\n                                    tr = tr ca, ref = ref ca,\n                                    \\<dots> =\nS (alpha_rp.more ca)\\<rparr>) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              snd a tl (alpha_rp.more A)) \\<and>\n                             tr A \\<le> tr A'))", "apply (simp_all add: alpha_rp.defs true_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = ok bb, wait = False, tr = tr bb,\n                     ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = snd b tl (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok bb \\<longrightarrow>\n                         S (snd b tl (alpha_rp.more bb)) =\n                         snd a tl (S (alpha_rp.more bb))\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A' =\n                         snd b tl (alpha_rp.more A)) \\<and>\n                        tr A \\<le> tr A'))\n                 (bb, ca);\n        action.relation_of P\n         (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab, ref = ref ab,\n             \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n          \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb, ref = ref bb,\n             \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = snd b ((#) a) (alpha_rp.more aa))) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (wait bb \\<longrightarrow>\n                          \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n                          ok ca \\<and>\n                          tr bb = tr ca \\<and>\n                          wait ca \\<and>\n                          ref bb = ref ca \\<and>\n                          S (alpha_rp.more bb) =\n                          S (alpha_rp.more ca)) \\<and>\n                         (\\<not> wait bb \\<longrightarrow>\n                          (ok bb \\<longrightarrow>\n                           ok ca \\<and>\n                           tr ca - tr bb = [] \\<and>\n                           \\<not> wait ca \\<and>\n                           S (alpha_rp.more ca) =\n                           snd a tl (S (alpha_rp.more bb))) \\<and>\n                          tr bb \\<le> tr ca)", "apply (rule impI, (erule conjE | simp)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = True, wait = False, tr = tr bb, ref = ref bb,\n                     \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        \\<not> wait bb; ok bb; tr bb \\<le> tr ca; ok ca; tr ca - tr bb = [];\n        \\<not> wait ca;\n        alpha_rp.more ca = snd b tl (alpha_rp.more bb)\\<rbrakk>\n       \\<Longrightarrow> S (snd b tl (alpha_rp.more bb)) =\n                         snd a tl (S (alpha_rp.more bb))\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A' =\n                         snd b tl (alpha_rp.more A)) \\<and>\n                        tr A \\<le> tr A'))\n                 (bb, ca);\n        action.relation_of P\n         (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab, ref = ref ab,\n             \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n          \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb, ref = ref bb,\n             \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = snd b ((#) a) (alpha_rp.more aa))) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (wait bb \\<longrightarrow>\n                          \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n                          ok ca \\<and>\n                          tr bb = tr ca \\<and>\n                          wait ca \\<and>\n                          ref bb = ref ca \\<and>\n                          S (alpha_rp.more bb) =\n                          S (alpha_rp.more ca)) \\<and>\n                         (\\<not> wait bb \\<longrightarrow>\n                          (ok bb \\<longrightarrow>\n                           ok ca \\<and>\n                           tr ca - tr bb = [] \\<and>\n                           \\<not> wait ca \\<and>\n                           S (alpha_rp.more ca) =\n                           snd a tl (S (alpha_rp.more bb))) \\<and>\n                          tr bb \\<le> tr ca)", "apply (simp add: B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A' =\n                         snd b tl (alpha_rp.more A)) \\<and>\n                        tr A \\<le> tr A'))\n                 (bb, ca);\n        action.relation_of P\n         (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab, ref = ref ab,\n             \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n          \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb, ref = ref bb,\n             \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = snd b ((#) a) (alpha_rp.more aa))) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (wait bb \\<longrightarrow>\n                          \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n                          ok ca \\<and>\n                          tr bb = tr ca \\<and>\n                          wait ca \\<and>\n                          ref bb = ref ca \\<and>\n                          S (alpha_rp.more bb) =\n                          S (alpha_rp.more ca)) \\<and>\n                         (\\<not> wait bb \\<longrightarrow>\n                          (ok bb \\<longrightarrow>\n                           ok ca \\<and>\n                           tr ca - tr bb = [] \\<and>\n                           \\<not> wait ca \\<and>\n                           S (alpha_rp.more ca) =\n                           snd a tl (S (alpha_rp.more bb))) \\<and>\n                          tr bb \\<le> tr ca)", "apply (split cond_splits)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                     ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> wait aa; (wait \\<circ> fst) (bb, ca);\n        ok aa \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = snd b ((#) a) (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        case (bb, ca) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A'\\<rbrakk>\n       \\<Longrightarrow> (wait bb \\<longrightarrow>\n                          \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n                          ok ca \\<and>\n                          tr bb = tr ca \\<and>\n                          wait ca \\<and>\n                          ref bb = ref ca \\<and>\n                          S (alpha_rp.more bb) =\n                          S (alpha_rp.more ca)) \\<and>\n                         (\\<not> wait bb \\<longrightarrow>\n                          (ok bb \\<longrightarrow>\n                           ok ca \\<and>\n                           tr ca - tr bb = [] \\<and>\n                           \\<not> wait ca \\<and>\n                           S (alpha_rp.more ca) =\n                           snd a tl (S (alpha_rp.more bb))) \\<and>\n                          tr bb \\<le> tr ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                     ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> wait aa; \\<not> (wait \\<circ> fst) (bb, ca);\n        ok aa \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = snd b ((#) a) (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        case (bb, ca) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> (wait bb \\<longrightarrow>\n                          \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n                          ok ca \\<and>\n                          tr bb = tr ca \\<and>\n                          wait ca \\<and>\n                          ref bb = ref ca \\<and>\n                          S (alpha_rp.more bb) =\n                          S (alpha_rp.more ca)) \\<and>\n                         (\\<not> wait bb \\<longrightarrow>\n                          (ok bb \\<longrightarrow>\n                           ok ca \\<and>\n                           tr ca - tr bb = [] \\<and>\n                           \\<not> wait ca \\<and>\n                           S (alpha_rp.more ca) =\n                           snd a tl (S (alpha_rp.more bb))) \\<and>\n                          tr bb \\<le> tr ca)", "apply (simp add: alpha_rp.defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = ok bb, wait = True, tr = tr bb, ref = ref bb,\n                     \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> wait aa; wait bb;\n        ok aa \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = snd b ((#) a) (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n                         ok ca \\<and>\n                         tr bb = tr ca \\<and>\n                         wait ca \\<and>\n                         ref bb = ref ca \\<and>\n                         S (alpha_rp.more bb) = S (alpha_rp.more ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = ok bb, wait = wait bb, tr = tr bb,\n                     ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> wait aa; \\<not> (wait \\<circ> fst) (bb, ca);\n        ok aa \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = snd b ((#) a) (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        case (bb, ca) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and>\n           alpha_rp.more A' = snd b tl (alpha_rp.more A)) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> (wait bb \\<longrightarrow>\n                          \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n                          ok ca \\<and>\n                          tr bb = tr ca \\<and>\n                          wait ca \\<and>\n                          ref bb = ref ca \\<and>\n                          S (alpha_rp.more bb) =\n                          S (alpha_rp.more ca)) \\<and>\n                         (\\<not> wait bb \\<longrightarrow>\n                          (ok bb \\<longrightarrow>\n                           ok ca \\<and>\n                           tr ca - tr bb = [] \\<and>\n                           \\<not> wait ca \\<and>\n                           S (alpha_rp.more ca) =\n                           snd a tl (S (alpha_rp.more bb))) \\<and>\n                          tr bb \\<le> tr ca)", "apply (erule disjE, rule disjI1, simp, rule disjI2, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = ok bb, wait = False, tr = tr bb,\n                     ref = ref bb, \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> wait aa; \\<not> wait bb;\n        ok aa \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = snd b ((#) a) (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = snd b tl (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok bb \\<longrightarrow>\n                         S (snd b tl (alpha_rp.more bb)) =\n                         snd a tl (S (alpha_rp.more bb))", "apply (rule impI, (erule conjE | simp)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of P\n                 (\\<lparr>ok = ok ab, wait = wait ab, tr = tr ab,\n                     ref = ref ab, \\<dots> = S (alpha_rp.more ab)\\<rparr>,\n                  \\<lparr>ok = True, wait = False, tr = tr bb, ref = ref bb,\n                     \\<dots> = S (alpha_rp.more bb)\\<rparr>);\n        \\<not> wait aa; \\<not> wait bb;\n        ok aa \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = snd b ((#) a) (alpha_rp.more aa));\n        tr aa \\<le> tr ab; ok bb; tr bb \\<le> tr ca; ok ca;\n        tr ca - tr bb = []; \\<not> wait ca;\n        alpha_rp.more ca = snd b tl (alpha_rp.more bb)\\<rbrakk>\n       \\<Longrightarrow> S (snd b tl (alpha_rp.more bb)) =\n                         snd a tl (S (alpha_rp.more bb))", "apply (simp add: B)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Guard_Sim:\n  assumes A: \"P \\<preceq>S Q\" and B: \"\\<And> A. h A = g (S A)\"\n  shows \"(g `&` P) \\<preceq>S (h `&` Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g `&` P \\<preceq>S h `&` Q", "apply (auto simp: Simulation_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       action.relation_of h `&` Q (a, b) \\<Longrightarrow>\n       action.relation_of g `&` P (Simul S a, Simul S b)", "apply (case_tac \"h (alpha_rp.more a)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>action.relation_of h `&` Q (a, b);\n        h (alpha_rp.more a)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of g `&` P (Simul S a, Simul S b)\n 2. \\<And>a b.\n       \\<lbrakk>action.relation_of h `&` Q (a, b);\n        \\<not> h (alpha_rp.more a)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of g `&` P (Simul S a, Simul S b)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>action.relation_of h `&` Q (a, b);\n        \\<not> h (alpha_rp.more a)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of g `&` P (Simul S a, Simul S b)\n 2. \\<And>a b.\n       \\<lbrakk>action.relation_of h `&` Q (a, b);\n        h (alpha_rp.more a)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of g `&` P (Simul S a, Simul S b)", "apply (case_tac \"g (S (alpha_rp.more a))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>action.relation_of h `&` Q (a, b);\n        \\<not> h (alpha_rp.more a); g (S (alpha_rp.more a))\\<rbrakk>\n       \\<Longrightarrow> action.relation_of g `&` P (Simul S a, Simul S b)\n 2. \\<And>a b.\n       \\<lbrakk>action.relation_of h `&` Q (a, b);\n        \\<not> h (alpha_rp.more a); \\<not> g (S (alpha_rp.more a))\\<rbrakk>\n       \\<Longrightarrow> action.relation_of g `&` P (Simul S a, Simul S b)\n 3. \\<And>a b.\n       \\<lbrakk>action.relation_of h `&` Q (a, b);\n        h (alpha_rp.more a)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of g `&` P (Simul S a, Simul S b)", "apply (auto simp: true_Guard1 false_Guard1 Simul_def alpha_rp.defs Simulation_def B\n            dest!: A[simplified, rule_format] Stop_Sim[simplified, rule_format])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Write0_Sim:\n  assumes A: \"P \\<preceq>S Q\"\n  shows \"a \\<rightarrow> P \\<preceq>S a \\<rightarrow> Q \""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<rightarrow> P \\<preceq>S a \\<rightarrow> Q", "using   A"], ["proof (prove)\nusing this:\n  P \\<preceq>S Q\n\ngoal (1 subgoal):\n 1. a \\<rightarrow> P \\<preceq>S a \\<rightarrow> Q", "apply (auto simp: Simulation_def write0_def relation_of_Prefix0 design_defs rp_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<forall>a b.\n                   action.relation_of Q (a, b) \\<longrightarrow>\n                   action.relation_of P (Simul S a, Simul S b);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 (do (\\<lambda>_. a) \\<and>\n                  (\\<lambda>(A, A'). alpha_rp.more A' = alpha_rp.more A))\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n                tr A \\<le> tr A'))\n         (aa, ba);\n        action.relation_of Q (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (do (\\<lambda>_. a) \\<and>\n                                    (\\<lambda>(A, A').\n  alpha_rp.more A' = alpha_rp.more A))\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>)) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (Simul S aa, Simul S c)", "apply (erule_tac x=\"ba\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         (do (\\<lambda>_. a) \\<and>\n                          (\\<lambda>(A, A').\n                              alpha_rp.more A' = alpha_rp.more A))\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, c);\n        \\<forall>b.\n           action.relation_of Q (ba, b) \\<longrightarrow>\n           action.relation_of P (Simul S ba, Simul S b)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (do (\\<lambda>_. a) \\<and>\n                                    (\\<lambda>(A, A').\n  alpha_rp.more A' = alpha_rp.more A))\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>)) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (Simul S aa, Simul S c)", "apply (erule_tac x=\"c\" in allE, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         (do (\\<lambda>_. a) \\<and>\n                          (\\<lambda>(A, A').\n                              alpha_rp.more A' = alpha_rp.more A))\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, c);\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (do (\\<lambda>_. a) \\<and>\n                                    (\\<lambda>(A, A').\n  alpha_rp.more A' = alpha_rp.more A))\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>)) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (Simul S aa, Simul S c)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         (do (\\<lambda>_. a) \\<and>\n                          (\\<lambda>(A, A').\n                              alpha_rp.more A' = alpha_rp.more A))\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, c);\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (do (\\<lambda>_. a) \\<and>\n                                   (\\<lambda>(A, A').\n alpha_rp.more A' = alpha_rp.more A))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (Simul S aa, Simul S ba)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         (do (\\<lambda>_. a) \\<and>\n                          (\\<lambda>(A, A').\n                              alpha_rp.more A' = alpha_rp.more A))\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, c);\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (Simul S ba, Simul S c)", "apply (auto split: cond_splits simp: Simul_def alpha_rp.defs do_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Read_Sim:\n  assumes A: \" P \\<preceq>S Q\" and B: \"\\<And> A. (d A) = c (S A)\"\n  shows \"a`?`c \\<rightarrow> P \\<preceq>S a`?`d \\<rightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. read a (c, c_update) P \\<preceq>S read a (d, d_update) Q", "using A"], ["proof (prove)\nusing this:\n  P \\<preceq>S Q\n\ngoal (1 subgoal):\n 1. read a (c, c_update) P \\<preceq>S read a (d, d_update) Q", "apply (auto simp: Simulation_def read_def relation_of_iPrefix design_defs rp_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>\\<forall>a b.\n                   action.relation_of Q (a, b) \\<longrightarrow>\n                   action.relation_of P (Simul S a, Simul S b);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 do_I (\\<lambda>A. a (select (d, d_update) A)) (range a)\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                 alpha_rp.more A' = alpha_rp.more A) \\<and>\n                tr A \\<le> tr A'))\n         (aa, ba);\n        action.relation_of Q (ba, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   do_I\n                                    (\\<lambda>A. a (select (c, c_update) A))\n                                    (range a)\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<and>\n                                   alpha_rp.more A' =\n                                   alpha_rp.more A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (Simul S aa, Simul S ca)", "apply (erule_tac x=\"ba\" in allE, erule_tac x=\"ca\" in allE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         do_I (\\<lambda>A. a (select (d, d_update) A))\n                          (range a)\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                         alpha_rp.more A' = alpha_rp.more A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, ca);\n        action.relation_of P (Simul S ba, Simul S ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   do_I\n                                    (\\<lambda>A. a (select (c, c_update) A))\n                                    (range a)\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<and>\n                                   alpha_rp.more A' =\n                                   alpha_rp.more A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (Simul S aa, Simul S ca)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         do_I (\\<lambda>A. a (select (d, d_update) A))\n                          (range a)\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                         alpha_rp.more A' = alpha_rp.more A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, ca);\n        action.relation_of P (Simul S ba, Simul S ca)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  do_I\n                                   (\\<lambda>A. a (select (c, c_update) A))\n                                   (range a)\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<and>\n                                  alpha_rp.more A' = alpha_rp.more A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (Simul S aa, Simul S ba)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         do_I (\\<lambda>A. a (select (d, d_update) A))\n                          (range a)\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                         alpha_rp.more A' = alpha_rp.more A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, c);\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (Simul S ba, Simul S c)", "apply (auto split: cond_splits simp: Simul_def alpha_rp.defs do_I_def select_def B)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Read1_Sim:\n  assumes A: \" P \\<preceq>S Q\" and B: \"\\<And> A. (d A) = c (S A)\"\n  shows \"a`?`c`:`s \\<rightarrow> P \\<preceq>S a`?`d`:`s \\<rightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. read1 a (c, c_update) (\\<lambda>_. s)\n     P \\<preceq>S read1 a (d, d_update) (\\<lambda>_. s) Q", "using A"], ["proof (prove)\nusing this:\n  P \\<preceq>S Q\n\ngoal (1 subgoal):\n 1. read1 a (c, c_update) (\\<lambda>_. s)\n     P \\<preceq>S read1 a (d, d_update) (\\<lambda>_. s) Q", "apply (auto simp: Simulation_def read1_def relation_of_iPrefix design_defs rp_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>\\<forall>a b.\n                   action.relation_of Q (a, b) \\<longrightarrow>\n                   action.relation_of P (Simul S a, Simul S b);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 do_I (\\<lambda>A. a (select (d, d_update) A)) (a ` s)\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                 alpha_rp.more A' = alpha_rp.more A) \\<and>\n                tr A \\<le> tr A'))\n         (aa, ba);\n        action.relation_of Q (ba, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   do_I\n                                    (\\<lambda>A. a (select (c, c_update) A))\n                                    (a ` s)\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<and>\n                                   alpha_rp.more A' =\n                                   alpha_rp.more A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (Simul S aa, Simul S ca)", "apply (erule_tac x=\"ba\" in allE, erule_tac x=\"ca\" in allE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         do_I (\\<lambda>A. a (select (d, d_update) A))\n                          (a ` s)\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                         alpha_rp.more A' = alpha_rp.more A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, ca);\n        action.relation_of P (Simul S ba, Simul S ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   do_I\n                                    (\\<lambda>A. a (select (c, c_update) A))\n                                    (a ` s)\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<and>\n                                   alpha_rp.more A' =\n                                   alpha_rp.more A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (Simul S aa, Simul S ca)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         do_I (\\<lambda>A. a (select (d, d_update) A))\n                          (a ` s)\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                         alpha_rp.more A' = alpha_rp.more A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, ca);\n        action.relation_of P (Simul S ba, Simul S ca)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  do_I\n                                   (\\<lambda>A. a (select (c, c_update) A))\n                                   (a ` s)\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<and>\n                                  alpha_rp.more A' = alpha_rp.more A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (Simul S aa, Simul S ba)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         do_I (\\<lambda>A. a (select (d, d_update) A))\n                          (a ` s)\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                         alpha_rp.more A' = alpha_rp.more A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, c);\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (Simul S ba, Simul S c)", "apply (auto split: cond_splits simp: Simul_def alpha_rp.defs do_I_def select_def B)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Read1S_Sim:\n  assumes A: \" P \\<preceq>S Q\" and B: \"\\<And> A. (d A) = c (S A)\" and C: \"\\<And> A. (s' A) = s (S A)\"\n  shows \"a`?`c`\\<in>`s \\<rightarrow> P \\<preceq>S a`?`d`\\<in>`s' \\<rightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. read1 a (c, c_update) s P \\<preceq>S read1 a (d, d_update) s' Q", "using A"], ["proof (prove)\nusing this:\n  P \\<preceq>S Q\n\ngoal (1 subgoal):\n 1. read1 a (c, c_update) s P \\<preceq>S read1 a (d, d_update) s' Q", "apply (auto simp: Simulation_def read1_def relation_of_iPrefix design_defs rp_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>\\<forall>a b.\n                   action.relation_of Q (a, b) \\<longrightarrow>\n                   action.relation_of P (Simul S a, Simul S b);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 do_I (\\<lambda>A. a (select (d, d_update) A))\n                  (a ` s' (alpha_rp.more A))\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                 alpha_rp.more A' = alpha_rp.more A) \\<and>\n                tr A \\<le> tr A'))\n         (aa, ba);\n        action.relation_of Q (ba, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   do_I\n                                    (\\<lambda>A. a (select (c, c_update) A))\n                                    (a ` s (alpha_rp.more A))\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<and>\n                                   alpha_rp.more A' =\n                                   alpha_rp.more A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (Simul S aa, Simul S ca)", "apply (erule_tac x=\"ba\" in allE, erule_tac x=\"ca\" in allE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         do_I (\\<lambda>A. a (select (d, d_update) A))\n                          (a ` s' (alpha_rp.more A))\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                         alpha_rp.more A' = alpha_rp.more A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, ca);\n        action.relation_of P (Simul S ba, Simul S ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   do_I\n                                    (\\<lambda>A. a (select (c, c_update) A))\n                                    (a ` s (alpha_rp.more A))\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<and>\n                                   alpha_rp.more A' =\n                                   alpha_rp.more A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (Simul S aa, Simul S ca)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         do_I (\\<lambda>A. a (select (d, d_update) A))\n                          (a ` s' (alpha_rp.more A))\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                         alpha_rp.more A' = alpha_rp.more A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, ca);\n        action.relation_of P (Simul S ba, Simul S ca)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  do_I\n                                   (\\<lambda>A. a (select (c, c_update) A))\n                                   (a ` s (alpha_rp.more A))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<and>\n                                  alpha_rp.more A' = alpha_rp.more A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (Simul S aa, Simul S ba)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         do_I (\\<lambda>A. a (select (d, d_update) A))\n                          (a ` s' (alpha_rp.more A))\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>) \\<and>\n                         alpha_rp.more A' = alpha_rp.more A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, c);\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (Simul S ba, Simul S c)", "apply (auto split: cond_splits simp: Simul_def alpha_rp.defs do_I_def select_def B C)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Write_Sim:\n  assumes A: \"P \\<preceq>S Q\" and B: \"\\<And> A. (d A) = c (S A)\"\n  shows \"a`!`c \\<rightarrow> P \\<preceq>S a`!`d \\<rightarrow> Q \""], ["proof (prove)\ngoal (1 subgoal):\n 1. a`!`c \\<rightarrow> P \\<preceq>S a`!`d \\<rightarrow> Q", "using A"], ["proof (prove)\nusing this:\n  P \\<preceq>S Q\n\ngoal (1 subgoal):\n 1. a`!`c \\<rightarrow> P \\<preceq>S a`!`d \\<rightarrow> Q", "apply (auto simp: Simulation_def write1_def relation_of_oPrefix design_defs rp_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>\\<forall>a b.\n                   action.relation_of Q (a, b) \\<longrightarrow>\n                   action.relation_of P (Simul S a, Simul S b);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 (do (\\<lambda>A. a (d A)) \\<and>\n                  (\\<lambda>(A, A'). alpha_rp.more A' = alpha_rp.more A))\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n                tr A \\<le> tr A'))\n         (aa, ba);\n        action.relation_of Q (ba, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (do (\\<lambda>A. a (c A)) \\<and>\n                                    (\\<lambda>(A, A').\n  alpha_rp.more A' = alpha_rp.more A))\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>)) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (Simul S aa, Simul S ca)", "apply (erule_tac x=\"ba\" in allE, erule_tac x=\"ca\" in allE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         (do (\\<lambda>A. a (d A)) \\<and>\n                          (\\<lambda>(A, A').\n                              alpha_rp.more A' = alpha_rp.more A))\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, ca);\n        action.relation_of P (Simul S ba, Simul S ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (do (\\<lambda>A. a (c A)) \\<and>\n                                    (\\<lambda>(A, A').\n  alpha_rp.more A' = alpha_rp.more A))\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>)) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of P)\n                          (Simul S aa, Simul S ca)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         (do (\\<lambda>A. a (d A)) \\<and>\n                          (\\<lambda>(A, A').\n                              alpha_rp.more A' = alpha_rp.more A))\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, ca);\n        action.relation_of P (Simul S ba, Simul S ca)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (do (\\<lambda>A. a (c A)) \\<and>\n                                   (\\<lambda>(A, A').\n alpha_rp.more A' = alpha_rp.more A))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (Simul S aa, Simul S ba)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         (do (\\<lambda>A. a (d A)) \\<and>\n                          (\\<lambda>(A, A').\n                              alpha_rp.more A' = alpha_rp.more A))\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Q (ba, c);\n        action.relation_of P (Simul S ba, Simul S c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (Simul S ba, Simul S c)", "apply (auto split: cond_splits simp: Simul_def alpha_rp.defs do_def select_def B)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Hide_Sim:\n  assumes A: \" P \\<preceq>S Q\"\n  shows \"(P \\\\ cs) \\<preceq>S (Q \\\\ cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\ cs \\<preceq>S Q \\ cs", "apply (auto simp: Simulation_def relation_of_Hide design_defs rp_defs Simul_def alpha_rp.defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (\\<exists>s.\n                            diff_tr (A'\\<lparr>tr := tr A' - tr A\\<rparr>)\n                             (A\\<lparr>tr := []\\<rparr>) =\n                            tr_filter s cs \\<and>\n                            action.relation_of Q\n                             (A\\<lparr>tr := []\\<rparr>, A'\n                              \\<lparr>tr := s,\n                                 ref := ref A' \\<union> cs\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Skip (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (\\<exists>s.\ndiff_tr (A'\\<lparr>tr := tr A' - tr A\\<rparr>) (A\\<lparr>tr := []\\<rparr>) =\ntr_filter s cs \\<and>\naction.relation_of P\n (A\\<lparr>tr := []\\<rparr>, A'\n  \\<lparr>tr := s, ref := ref A' \\<union> cs\\<rparr>)) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Skip)\n                          (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (rule_tac b=\"Simul S ba\" in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (\\<exists>s.\n                            diff_tr (A'\\<lparr>tr := tr A' - tr A\\<rparr>)\n                             (A\\<lparr>tr := []\\<rparr>) =\n                            tr_filter s cs \\<and>\n                            action.relation_of Q\n                             (A\\<lparr>tr := []\\<rparr>, A'\n                              \\<lparr>tr := s,\n                                 ref := ref A' \\<union> cs\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Skip (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (\\<exists>s.\n                                     diff_tr\n(A'\\<lparr>tr := tr A' - tr A\\<rparr>) (A\\<lparr>tr := []\\<rparr>) =\n                                     tr_filter s cs \\<and>\n                                     action.relation_of P\n(A\\<lparr>tr := []\\<rparr>, A'\n \\<lparr>tr := s, ref := ref A' \\<union> cs\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                              ref = ref aa,\n                              \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                           Simul S ba)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (\\<exists>s.\n                            diff_tr (A'\\<lparr>tr := tr A' - tr A\\<rparr>)\n                             (A\\<lparr>tr := []\\<rparr>) =\n                            tr_filter s cs \\<and>\n                            action.relation_of Q\n                             (A\\<lparr>tr := []\\<rparr>, A'\n                              \\<lparr>tr := s,\n                                 ref := ref A' \\<union> cs\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Skip (ba, c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of Skip\n                          (Simul S ba,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (split cond_splits)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Skip (ba, c);\n        (wait \\<circ> fst) (aa, ba);\n        case (aa, ba) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                               ref = ref aa,\n                               \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                            Simul S ba) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok aa, wait = wait aa,\n                                    tr = tr aa, ref = ref aa,\n                                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                 Simul S ba) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok aa, wait = wait aa,\ntr = tr aa, ref = ref aa, \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                   Simul S ba) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok aa, wait = wait aa,\n                                    tr = tr aa, ref = ref aa,\n                                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                 Simul S ba) of\n                           (A, A') \\<Rightarrow>\n                             (\\<exists>s.\n                                 diff_tr\n                                  (A'\\<lparr>tr := tr A' - tr A\\<rparr>)\n                                  (A\\<lparr>tr := []\\<rparr>) =\n                                 tr_filter s cs \\<and>\n                                 action.relation_of P\n                                  (A\\<lparr>tr := []\\<rparr>, A'\n                                   \\<lparr>tr := s,\nref := ref A' \\<union> cs\\<rparr>)) \\<and>\n                             tr A \\<le> tr A'))\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Skip (ba, c);\n        \\<not> (wait \\<circ> fst) (aa, ba);\n        case (aa, ba) of\n        (A, A') \\<Rightarrow>\n          (\\<exists>s.\n              diff_tr (A'\\<lparr>tr := tr A' - tr A\\<rparr>)\n               (A\\<lparr>tr := []\\<rparr>) =\n              tr_filter s cs \\<and>\n              action.relation_of Q\n               (A\\<lparr>tr := []\\<rparr>, A'\n                \\<lparr>tr := s, ref := ref A' \\<union> cs\\<rparr>)) \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst)\n                           (\\<lparr>ok = ok aa, wait = wait aa, tr = tr aa,\n                               ref = ref aa,\n                               \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                            Simul S ba) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok aa, wait = wait aa,\n                                    tr = tr aa, ref = ref aa,\n                                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                 Simul S ba) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (\\<lparr>ok = ok aa, wait = wait aa,\ntr = tr aa, ref = ref aa, \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                   Simul S ba) \\<longrightarrow>\n                          (case (\\<lparr>ok = ok aa, wait = wait aa,\n                                    tr = tr aa, ref = ref aa,\n                                    \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                                 Simul S ba) of\n                           (A, A') \\<Rightarrow>\n                             (\\<exists>s.\n                                 diff_tr\n                                  (A'\\<lparr>tr := tr A' - tr A\\<rparr>)\n                                  (A\\<lparr>tr := []\\<rparr>) =\n                                 tr_filter s cs \\<and>\n                                 action.relation_of P\n                                  (A\\<lparr>tr := []\\<rparr>, A'\n                                   \\<lparr>tr := s,\nref := ref A' \\<union> cs\\<rparr>)) \\<and>\n                             tr A \\<le> tr A'))\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (\\<exists>s.\n                            diff_tr (A'\\<lparr>tr := tr A' - tr A\\<rparr>)\n                             (A\\<lparr>tr := []\\<rparr>) =\n                            tr_filter s cs \\<and>\n                            action.relation_of Q\n                             (A\\<lparr>tr := []\\<rparr>, A'\n                              \\<lparr>tr := s,\n                                 ref := ref A' \\<union> cs\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Skip (ba, c)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of Skip\n                          (Simul S ba,\n                           \\<lparr>ok = ok c, wait = wait c, tr = tr c,\n                              ref = ref c,\n                              \\<dots> = S (alpha_rp.more c)\\<rparr>)", "apply (auto simp: Simul_def alpha_rp.defs Simulation_def \n              dest!: A[simplified, rule_format] Skip_Sim[simplified, rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c s.\n       \\<lbrakk>\\<not> wait aa;\n        action.relation_of Skip\n         (\\<lparr>ok = ok ba, wait = wait ba, tr = tr ba, ref = ref ba,\n             \\<dots> = ?S47 aa ba c (alpha_rp.more ba)\\<rparr>,\n          \\<lparr>ok = ok c, wait = wait c, tr = tr c, ref = ref c,\n             \\<dots> = ?S47 aa ba c (alpha_rp.more c)\\<rparr>);\n        tr aa \\<le> tr ba;\n        diff_tr (ba\\<lparr>tr := tr ba - tr aa\\<rparr>)\n         (aa\\<lparr>tr := []\\<rparr>) =\n        tr_filter s cs;\n        action.relation_of P\n         (\\<lparr>ok = ok aa, wait = False, tr = [], ref = ref aa,\n             \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n          \\<lparr>ok = ok ba, wait = wait ba, tr = s,\n             ref = ref ba \\<union> cs,\n             \\<dots> = S (alpha_rp.more ba)\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            diff_tr\n                             \\<lparr>ok = ok ba, wait = wait ba,\n                                tr = tr ba - tr aa, ref = ref ba,\n                                \\<dots> = S (alpha_rp.more ba)\\<rparr>\n                             \\<lparr>ok = ok aa, wait = False, tr = [],\n                                ref = ref aa,\n                                \\<dots> = S (alpha_rp.more aa)\\<rparr> =\n                            tr_filter s cs \\<and>\n                            action.relation_of P\n                             (\\<lparr>ok = ok aa, wait = False, tr = [],\n                                 ref = ref aa,\n                                 \\<dots> = S (alpha_rp.more aa)\\<rparr>,\n                              \\<lparr>ok = ok ba, wait = wait ba, tr = s,\n                                 ref = ref ba \\<union> cs,\n                                 \\<dots> = S (alpha_rp.more ba)\\<rparr>)", "apply (rule_tac x=s in exI, auto simp: diff_tr_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lfp_Siml:\n  assumes A: \"\\<And> X. (X \\<preceq>S Q) \\<Longrightarrow> ((P X) \\<preceq>S Q)\" and B: \"mono P\"\n  shows \"(lfp P) \\<preceq>S Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp P \\<preceq>S Q", "apply (rule lfp_ordinal_induct, auto simp: B A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M.\n       \\<forall>Sa\\<in>M. Sa \\<preceq>S Q \\<Longrightarrow>\n       Sup M \\<preceq>S Q", "apply (auto simp add: Simulation_def Sup_action relation_of_bot relation_of_Sup[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       action.relation_of Q (a, b) \\<Longrightarrow>\n       R true (Simul S a, Simul S b)", "apply (subst (asm) CSP_is_rd[OF relation_of_CSP])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       R (\\<not> action.relation_of\n                  Q\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n            Q\\<^sup>t\\<^sub>f)\n        (a, b) \\<Longrightarrow>\n       R true (Simul S a, Simul S b)", "apply (auto simp: rp_defs fun_eq_iff Simul_def alpha_rp.defs decrease_def split: cond_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Mu_Sim:\n  assumes A: \"\\<And> X Y. X \\<preceq>S Y \\<Longrightarrow> (P X) \\<preceq>S (Q Y)\" \n  and B: \"mono P\" and C: \"mono Q\"\n  shows \"(lfp P) \\<preceq>S (lfp Q) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp P \\<preceq>S lfp Q", "apply (rule lfp_Siml, drule A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X. P X \\<preceq>S Q (lfp Q) \\<Longrightarrow> P X \\<preceq>S lfp Q\n 2. mono P", "apply (subst lfp_unfold, simp_all add: B C)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bot_Sim: \"bot \\<preceq>S bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<preceq>S bot", "by (auto simp: Simulation_def rp_defs Simul_def relation_of_bot alpha_rp.defs split: cond_splits)"], ["", "lemma sim_is_ref: \"P \\<sqsubseteq> Q = P \\<preceq>(id) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<sqsubseteq> Q) = P \\<preceq>id Q", "apply (auto simp: ref_def Simulation_def Simul_def alpha_rp.defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of Q \\<longrightarrow>\n                    action.relation_of P)\n                    (a, b);\n        action.relation_of Q (a, b)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (\\<lparr>ok = ok a, wait = wait a, tr = tr a,\n                              ref = ref a,\n                              \\<dots> = alpha_rp.more a\\<rparr>,\n                           \\<lparr>ok = ok b, wait = wait b, tr = tr b,\n                              ref = ref b,\n                              \\<dots> = alpha_rp.more b\\<rparr>)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>a b.\n                   action.relation_of Q (a, b) \\<longrightarrow>\n                   action.relation_of P\n                    (\\<lparr>ok = ok a, wait = wait a, tr = tr a,\n                        ref = ref a, \\<dots> = alpha_rp.more a\\<rparr>,\n                     \\<lparr>ok = ok b, wait = wait b, tr = tr b,\n                        ref = ref b, \\<dots> = alpha_rp.more b\\<rparr>);\n        action.relation_of Q (a, b)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)", "apply (erule_tac x=a in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>action.relation_of Q (a, b);\n        \\<forall>b.\n           (action.relation_of Q \\<longrightarrow> action.relation_of P)\n            (a, b)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (\\<lparr>ok = ok a, wait = wait a, tr = tr a,\n                              ref = ref a,\n                              \\<dots> = alpha_rp.more a\\<rparr>,\n                           \\<lparr>ok = ok b, wait = wait b, tr = tr b,\n                              ref = ref b,\n                              \\<dots> = alpha_rp.more b\\<rparr>)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>a b.\n                   action.relation_of Q (a, b) \\<longrightarrow>\n                   action.relation_of P\n                    (\\<lparr>ok = ok a, wait = wait a, tr = tr a,\n                        ref = ref a, \\<dots> = alpha_rp.more a\\<rparr>,\n                     \\<lparr>ok = ok b, wait = wait b, tr = tr b,\n                        ref = ref b, \\<dots> = alpha_rp.more b\\<rparr>);\n        action.relation_of Q (a, b)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)", "apply (erule_tac x=b in allE, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>action.relation_of Q (a, b);\n        action.relation_of P (a, b)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (\\<lparr>ok = ok a, wait = wait a, tr = tr a,\n                              ref = ref a,\n                              \\<dots> = alpha_rp.more a\\<rparr>,\n                           \\<lparr>ok = ok b, wait = wait b, tr = tr b,\n                              ref = ref b,\n                              \\<dots> = alpha_rp.more b\\<rparr>)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>a b.\n                   action.relation_of Q (a, b) \\<longrightarrow>\n                   action.relation_of P\n                    (\\<lparr>ok = ok a, wait = wait a, tr = tr a,\n                        ref = ref a, \\<dots> = alpha_rp.more a\\<rparr>,\n                     \\<lparr>ok = ok b, wait = wait b, tr = tr b,\n                        ref = ref b, \\<dots> = alpha_rp.more b\\<rparr>);\n        action.relation_of Q (a, b)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)", "apply (rule_tac t=\"\\<lparr>ok = ok a, wait = wait a, tr = tr a, ref = ref a, \\<dots> = alpha_rp.more a\\<rparr>\" and s=a in subst, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>action.relation_of Q (a, b);\n        action.relation_of P (a, b)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a, \\<lparr>ok = ok b, wait = wait b, tr = tr b,\n                                 ref = ref b,\n                                 \\<dots> = alpha_rp.more b\\<rparr>)\n 2. \\<And>a b.\n       \\<lbrakk>\\<forall>a b.\n                   action.relation_of Q (a, b) \\<longrightarrow>\n                   action.relation_of P\n                    (\\<lparr>ok = ok a, wait = wait a, tr = tr a,\n                        ref = ref a, \\<dots> = alpha_rp.more a\\<rparr>,\n                     \\<lparr>ok = ok b, wait = wait b, tr = tr b,\n                        ref = ref b, \\<dots> = alpha_rp.more b\\<rparr>);\n        action.relation_of Q (a, b)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)", "apply (rule_tac t=\"\\<lparr>ok = ok b, wait = wait b, tr = tr b, ref = ref b, \\<dots> = alpha_rp.more b\\<rparr>\" and s=b in subst, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>a b.\n                   action.relation_of Q (a, b) \\<longrightarrow>\n                   action.relation_of P\n                    (\\<lparr>ok = ok a, wait = wait a, tr = tr a,\n                        ref = ref a, \\<dots> = alpha_rp.more a\\<rparr>,\n                     \\<lparr>ok = ok b, wait = wait b, tr = tr b,\n                        ref = ref b, \\<dots> = alpha_rp.more b\\<rparr>);\n        action.relation_of Q (a, b)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)", "apply (erule_tac x=a in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>action.relation_of Q (a, b);\n        \\<forall>b.\n           action.relation_of Q (a, b) \\<longrightarrow>\n           action.relation_of P\n            (\\<lparr>ok = ok a, wait = wait a, tr = tr a, ref = ref a,\n                \\<dots> = alpha_rp.more a\\<rparr>,\n             \\<lparr>ok = ok b, wait = wait b, tr = tr b, ref = ref b,\n                \\<dots> = alpha_rp.more b\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)", "apply (erule_tac x=b in allE, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>action.relation_of Q (a, b);\n        action.relation_of P\n         (\\<lparr>ok = ok a, wait = wait a, tr = tr a, ref = ref a,\n             \\<dots> = alpha_rp.more a\\<rparr>,\n          \\<lparr>ok = ok b, wait = wait b, tr = tr b, ref = ref b,\n             \\<dots> = alpha_rp.more b\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)", "apply (rule_tac s=\"\\<lparr>ok = ok a, wait = wait a, tr = tr a, ref = ref a, \\<dots> = alpha_rp.more a\\<rparr>\" and t=a in subst, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>action.relation_of Q (a, b);\n        action.relation_of P\n         (\\<lparr>ok = ok a, wait = wait a, tr = tr a, ref = ref a,\n             \\<dots> = alpha_rp.more a\\<rparr>,\n          \\<lparr>ok = ok b, wait = wait b, tr = tr b, ref = ref b,\n             \\<dots> = alpha_rp.more b\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (\\<lparr>ok = ok a, wait = wait a, tr = tr a,\n                              ref = ref a,\n                              \\<dots> = alpha_rp.more a\\<rparr>,\n                           b)", "apply (rule_tac s=\"\\<lparr>ok = ok b, wait = wait b, tr = tr b, ref = ref b, \\<dots> = alpha_rp.more b\\<rparr>\" and t=b in subst, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ref_eq: \"((P::('a::ev_eq,'b) action) = Q) = (P \\<sqsubseteq> Q & Q \\<sqsubseteq> P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P = Q) = (P \\<sqsubseteq> Q \\<and> Q \\<sqsubseteq> P)", "apply (rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. P = Q \\<Longrightarrow> P \\<sqsubseteq> Q \\<and> Q \\<sqsubseteq> P\n 2. P \\<sqsubseteq> Q \\<and> Q \\<sqsubseteq> P \\<Longrightarrow> P = Q", "apply (simp add: ref_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sqsubseteq> Q \\<and> Q \\<sqsubseteq> P \\<Longrightarrow> P = Q", "apply (auto simp add: ref_def fun_eq_iff relation_of_inject[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rd_ref: \nassumes A:\"R (P \\<turnstile> Q) \\<in> {p. is_CSP_process p}\"\nand B:\"R (P' \\<turnstile> Q') \\<in> {p. is_CSP_process p}\"\nand C:\"\\<And> a b. P (a, b) \\<Longrightarrow> P' (a, b)\"\nand D:\"\\<And> a b. Q' (a, b) \\<Longrightarrow> Q (a, b)\"\nshows \"(action_of (R (P \\<turnstile> Q))) \\<sqsubseteq> (action_of (R (P' \\<turnstile> Q')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action_of (R (P \\<turnstile> Q)) \\<sqsubseteq>\n    action_of (R (P' \\<turnstile> Q'))", "apply (auto simp: ref_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       action.relation_of (action_of (R (P' \\<turnstile> Q')))\n        (a, b) \\<Longrightarrow>\n       action.relation_of (action_of (R (P \\<turnstile> Q))) (a, b)", "apply (subst (asm) action_of_inverse, simp add: B[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       R (P' \\<turnstile> Q') (a, b) \\<Longrightarrow>\n       action.relation_of (action_of (R (P \\<turnstile> Q))) (a, b)", "apply (subst action_of_inverse, simp add: A[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       R (P' \\<turnstile> Q') (a, b) \\<Longrightarrow>\n       R (P \\<turnstile> Q) (a, b)", "apply (auto simp: rp_defs design_defs C D split: cond_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rd_impl: \nassumes A:\"R (P \\<turnstile> Q) \\<in> {p. is_CSP_process p}\"\nand B:\"R (P' \\<turnstile> Q') \\<in> {p. is_CSP_process p}\"\nand C:\"\\<And> a b. P (a, b) \\<Longrightarrow> P' (a, b)\"\nand D:\"\\<And> a b. Q' (a, b) \\<Longrightarrow> Q (a, b)\"\nshows \"R (P' \\<turnstile> Q') (a, b) \\<longrightarrow> R (P \\<turnstile> Q) (a::('a::ev_eq, 'b) alpha_rp_scheme, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (P' \\<turnstile> Q') (a, b) \\<longrightarrow>\n    R (P \\<turnstile> Q) (a, b)", "apply (insert rd_ref[of P Q P' Q', OF A B C D])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<And>a b. P (a, b) \\<Longrightarrow> P (a, b);\n      \\<And>a b. Q' (a, b) \\<Longrightarrow> Q' (a, b)\\<rbrakk>\n     \\<Longrightarrow> action_of (R (P \\<turnstile> Q)) \\<sqsubseteq>\n                       action_of (R (P' \\<turnstile> Q'))) \\<Longrightarrow>\n    R (P' \\<turnstile> Q') (a, b) \\<longrightarrow>\n    R (P \\<turnstile> Q) (a, b)", "apply (auto simp: ref_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a b.\n                (action.relation_of\n                  (action_of (R (P' \\<turnstile> Q'))) \\<longrightarrow>\n                 action.relation_of (action_of (R (P \\<turnstile> Q))))\n                 (a, b);\n     R (P' \\<turnstile> Q') (a, b)\\<rbrakk>\n    \\<Longrightarrow> R (P \\<turnstile> Q) (a, b)", "apply (subst (asm) action_of_inverse, simp add: B[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a b.\n                (R (P' \\<turnstile> Q') \\<longrightarrow>\n                 action.relation_of (action_of (R (P \\<turnstile> Q))))\n                 (a, b);\n     R (P' \\<turnstile> Q') (a, b)\\<rbrakk>\n    \\<Longrightarrow> R (P \\<turnstile> Q) (a, b)", "apply (subst (asm) action_of_inverse, simp add: A[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a b.\n                (R (P' \\<turnstile> Q') \\<longrightarrow>\n                 R (P \\<turnstile> Q))\n                 (a, b);\n     R (P' \\<turnstile> Q') (a, b)\\<rbrakk>\n    \\<Longrightarrow> R (P \\<turnstile> Q) (a, b)", "apply (erule_tac x=a in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (P' \\<turnstile> Q') (a, b);\n     \\<forall>b.\n        (R (P' \\<turnstile> Q') \\<longrightarrow> R (P \\<turnstile> Q))\n         (a, b)\\<rbrakk>\n    \\<Longrightarrow> R (P \\<turnstile> Q) (a, b)", "apply (erule_tac x=b in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R (P' \\<turnstile> Q') (a, b);\n     (R (P' \\<turnstile> Q') \\<longrightarrow> R (P \\<turnstile> Q))\n      (a, b)\\<rbrakk>\n    \\<Longrightarrow> R (P \\<turnstile> Q) (a, b)", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}