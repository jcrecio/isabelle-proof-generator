{"file_name": "/home/qj213/afp-2021-10-22/thys/Circus/Designs.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Circus", "problem_names": ["lemma Healthy_def': \"P is H healthy = (H P = P)\"", "lemmas design_defs = design_def skip_d_def J_def Healthy_def H1_def H2_def H3_def\n                     H4_def \\<sigma>f_def \\<sigma>t_def OKAY_def OKAY'_def", "lemma t_comp_lz_d: \"(true;;(P \\<turnstile> Q)) = true\"", "lemma pi_comp_left_unit: \"(\\<Pi>d;;(P \\<turnstile> Q)) = (P \\<turnstile> Q)\"", "theorem t3_1_4_2: \n\"((P1 \\<turnstile> Q1) \\<triangleleft> b \\<triangleright> (P2 \\<turnstile> Q2)) = ((P1 \\<triangleleft> b \\<triangleright> P2) \\<turnstile> (Q1 \\<triangleleft> b \\<triangleright> Q2))\"", "lemma conv_conj_distr: \"\\<sigma>t (P \\<and> Q) = (\\<sigma>t P \\<and> \\<sigma>t Q)\"", "lemma conv_disj_distr: \"\\<sigma>t (P \\<or> Q) = (\\<sigma>t P \\<or> \\<sigma>t Q)\"", "lemma conv_imp_distr: \"\\<sigma>t (P \\<longrightarrow> Q) = ((\\<sigma>t P) \\<longrightarrow> \\<sigma>t Q)\"", "lemma conv_not_distr: \"\\<sigma>t (\\<not> P) = (\\<not>(\\<sigma>t P))\"", "lemma div_conj_distr: \"\\<sigma>f (P \\<and> Q) = (\\<sigma>f P \\<and> \\<sigma>f Q)\"", "lemma div_disj_distr: \"\\<sigma>f (P \\<or> Q) = (\\<sigma>f P \\<or> \\<sigma>f Q)\"", "lemma div_imp_distr: \"\\<sigma>f (P \\<longrightarrow> Q) = ((\\<sigma>f P) \\<longrightarrow> \\<sigma>f Q)\"", "lemma div_not_distr: \"\\<sigma>f (\\<not> P) = (\\<not>(\\<sigma>f P))\"", "lemma ok_conv: \"\\<sigma>t OKAY = OKAY\"", "lemma ok_div: \"\\<sigma>f OKAY = OKAY\"", "lemma ok'_conv: \"\\<sigma>t OKAY' = true\"", "lemma ok'_div: \"\\<sigma>f OKAY' = false\"", "lemma H2_J_1:\n assumes A: \"P is H2 healthy\"\n shows \"[(\\<lambda> (A, A'). (P(A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow> P(A, A'\\<lparr>ok := True\\<rparr>)))]\"", "lemma H2_J_2_a : \"P (a,b) \\<longrightarrow> (P ;; J) (a,b)\"", "lemma ok_or_not_ok : \"\\<lbrakk>P(a, b\\<lparr>ok := True\\<rparr>); P(a, b\\<lparr>ok := False\\<rparr>)\\<rbrakk> \\<Longrightarrow> P(a, b)\"", "lemma H2_J_2_b :\n  assumes A: \"[(\\<lambda> (A, A'). (P(A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow> P(A, A'\\<lparr>ok := True\\<rparr>)))]\"\n  and B : \"(P ;; J) (a,b)\"\n  shows \"P (a,b)\"", "lemma H2_J_2 :\n  assumes A: \"[(\\<lambda> (A, A'). (P(A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow> P(A, A'\\<lparr>ok := True\\<rparr>)))]\"\n  shows \"P is H2 healthy \"", "lemma H2_J: \n\"[\\<lambda> (A, A'). P(A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow> P(A, A'\\<lparr>ok := True\\<rparr>)] = P is H2 healthy\"", "lemma design_eq1: \"(P \\<turnstile> Q) = (P \\<turnstile> P \\<and> Q)\"", "lemma H1_idem: \"H1 o H1 = H1\"", "lemma H1_idem2: \"(H1 (H1 P)) = (H1 P)\"", "lemma H2_idem: \"H2 o H2 = H2\"", "lemma H2_idem2: \"(H2 (H2 P)) = (H2 P)\"", "lemma H1_H2_commute: \"H1 o H2 = H2 o H1\"", "lemma H1_H2_commute2: \"H1 (H2 P) = H2 (H1 P)\"", "lemma alpha_d_eqD: \"r = r' \\<Longrightarrow> ok r = ok r' \\<and> alpha_d.more r = alpha_d.more r'\"", "lemma design_H1: \"(P \\<turnstile> Q) is H1 healthy\"", "lemma design_H2: \n\"(\\<forall> a b. P (a, b\\<lparr>ok := True\\<rparr>) \\<longrightarrow> P (a, b\\<lparr>ok := False\\<rparr>)) \\<Longrightarrow> (P \\<turnstile> Q) is H2 healthy\""], "translations": [["", "lemma Healthy_def': \"P is H healthy = (H P = P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P is H healthy = (H P = P)", "unfolding Healthy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P = H P) = (H P = P)", "by auto"], ["", "definition H1::\"('\\<alpha> alphabet_d) Healthiness_condition\"\nwhere \"H1 (P)  \\<equiv>  (ok o fst  \\<longrightarrow> P)\""], ["", "definition H2::\"('\\<alpha> alphabet_d) Healthiness_condition\"\nwhere \"H2 (P)  \\<equiv>  P ;; J\""], ["", "definition H3::\"('\\<alpha> alphabet_d) Healthiness_condition\"\nwhere \"H3 (P)  \\<equiv>  P ;; \\<Pi>d\""], ["", "definition H4::\"('\\<alpha> alphabet_d) Healthiness_condition\"\nwhere \"H4 (P)  \\<equiv>  ((P;;true) \\<longleftrightarrow> true)\""], ["", "definition \\<sigma>f::\"'\\<alpha> relation_d \\<Rightarrow> '\\<alpha> relation_d\"\nwhere \"\\<sigma>f D \\<equiv> \\<lambda> (A, A') . D (A, A'\\<lparr>ok:=False\\<rparr>)\""], ["", "definition \\<sigma>t::\"'\\<alpha> relation_d \\<Rightarrow> '\\<alpha> relation_d\"\nwhere \"\\<sigma>t D \\<equiv> \\<lambda> (A, A') . D (A, A'\\<lparr>ok:=True\\<rparr>)\""], ["", "definition OKAY::\"'\\<alpha> relation_d\"\nwhere \"OKAY \\<equiv> \\<lambda> (A, A') . ok A\""], ["", "definition OKAY'::\"'\\<alpha> relation_d\"\nwhere \"OKAY' \\<equiv> \\<lambda> (A, A') . ok A'\""], ["", "lemmas design_defs = design_def skip_d_def J_def Healthy_def H1_def H2_def H3_def\n                     H4_def \\<sigma>f_def \\<sigma>t_def OKAY_def OKAY'_def"], ["", "subsection\\<open>Proofs\\<close>"], ["", "text \\<open>Proof of theorems and properties of designs and their healthiness conditions \nare given in the following.\\<close>"], ["", "lemma t_comp_lz_d: \"(true;;(P \\<turnstile> Q)) = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (true ;; (P \\<turnstile> Q)) = true", "apply (auto simp: fun_eq_iff design_defs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (true ;;\n        (\\<lambda>(A, A').\n            ok A \\<and> P (A, A') \\<longrightarrow> ok A' \\<and> Q (A, A')))\n        (a, b)", "apply (rule_tac b=\"b\\<lparr>ok:=False\\<rparr>\" in comp_intro, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pi_comp_left_unit: \"(\\<Pi>d;;(P \\<turnstile> Q)) = (P \\<turnstile> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Pi>d ;; (P \\<turnstile> Q)) = (P \\<turnstile> Q)", "by (auto simp: fun_eq_iff design_defs)"], ["", "theorem t3_1_4_2: \n\"((P1 \\<turnstile> Q1) \\<triangleleft> b \\<triangleright> (P2 \\<turnstile> Q2)) = ((P1 \\<triangleleft> b \\<triangleright> P2) \\<turnstile> (Q1 \\<triangleleft> b \\<triangleright> Q2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((P1 \\<turnstile> Q1) \\<triangleleft> b \\<triangleright> \n        (P2 \\<turnstile> Q2)) =\n    (P1 \\<triangleleft> b \\<triangleright> \n        P2 \\<turnstile> Q1 \\<triangleleft> b \\<triangleright>  Q2)", "by (auto simp: fun_eq_iff design_defs split: cond_splits)"], ["", "lemma conv_conj_distr: \"\\<sigma>t (P \\<and> Q) = (\\<sigma>t P \\<and> \\<sigma>t Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>t (P \\<and> Q) = (\\<sigma>t P \\<and> \\<sigma>t Q)", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma conv_disj_distr: \"\\<sigma>t (P \\<or> Q) = (\\<sigma>t P \\<or> \\<sigma>t Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>t (P \\<or> Q) = (\\<sigma>t P \\<or> \\<sigma>t Q)", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma conv_imp_distr: \"\\<sigma>t (P \\<longrightarrow> Q) = ((\\<sigma>t P) \\<longrightarrow> \\<sigma>t Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>t (P \\<longrightarrow> Q) =\n    (\\<sigma>t P \\<longrightarrow> \\<sigma>t Q)", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma conv_not_distr: \"\\<sigma>t (\\<not> P) = (\\<not>(\\<sigma>t P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>t (\\<not> P) = (\\<not> \\<sigma>t P)", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma div_conj_distr: \"\\<sigma>f (P \\<and> Q) = (\\<sigma>f P \\<and> \\<sigma>f Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>f (P \\<and> Q) = (\\<sigma>f P \\<and> \\<sigma>f Q)", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma div_disj_distr: \"\\<sigma>f (P \\<or> Q) = (\\<sigma>f P \\<or> \\<sigma>f Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>f (P \\<or> Q) = (\\<sigma>f P \\<or> \\<sigma>f Q)", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma div_imp_distr: \"\\<sigma>f (P \\<longrightarrow> Q) = ((\\<sigma>f P) \\<longrightarrow> \\<sigma>f Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>f (P \\<longrightarrow> Q) =\n    (\\<sigma>f P \\<longrightarrow> \\<sigma>f Q)", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma div_not_distr: \"\\<sigma>f (\\<not> P) = (\\<not>(\\<sigma>f P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>f (\\<not> P) = (\\<not> \\<sigma>f P)", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma ok_conv: \"\\<sigma>t OKAY = OKAY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>t OKAY = OKAY", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma ok_div: \"\\<sigma>f OKAY = OKAY\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>f OKAY = OKAY", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma ok'_conv: \"\\<sigma>t OKAY' = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>t OKAY' = true", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma ok'_div: \"\\<sigma>f OKAY' = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma>f OKAY' = false", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma H2_J_1:\n assumes A: \"P is H2 healthy\"\n shows \"[(\\<lambda> (A, A'). (P(A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow> P(A, A'\\<lparr>ok := True\\<rparr>)))]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A.\n       case A of\n       (A, A') \\<Rightarrow>\n         P (A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow>\n         P (A, A'\\<lparr>ok := True\\<rparr>)", "using A"], ["proof (prove)\nusing this:\n  P is H2 healthy\n\ngoal (1 subgoal):\n 1. \\<forall>A.\n       case A of\n       (A, A') \\<Rightarrow>\n         P (A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow>\n         P (A, A'\\<lparr>ok := True\\<rparr>)", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma H2_J_2_a : \"P (a,b) \\<longrightarrow> (P ;; J) (a,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (a, b) \\<longrightarrow> (P ;; J) (a, b)", "unfolding J_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (a, b) \\<longrightarrow>\n    (P ;;\n     (\\<lambda>(A, A').\n         (ok A \\<longrightarrow> ok A') \\<and> more A = more A'))\n     (a, b)", "by auto"], ["", "lemma ok_or_not_ok : \"\\<lbrakk>P(a, b\\<lparr>ok := True\\<rparr>); P(a, b\\<lparr>ok := False\\<rparr>)\\<rbrakk> \\<Longrightarrow> P(a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P (a, b\\<lparr>ok := True\\<rparr>);\n     P (a, b\\<lparr>ok := False\\<rparr>)\\<rbrakk>\n    \\<Longrightarrow> P (a, b)", "apply (case_tac \"ok b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>P (a, b\\<lparr>ok := True\\<rparr>);\n     P (a, b\\<lparr>ok := False\\<rparr>); ok b\\<rbrakk>\n    \\<Longrightarrow> P (a, b)\n 2. \\<lbrakk>P (a, b\\<lparr>ok := True\\<rparr>);\n     P (a, b\\<lparr>ok := False\\<rparr>); \\<not> ok b\\<rbrakk>\n    \\<Longrightarrow> P (a, b)", "apply (subgoal_tac \"b\\<lparr>ok:=True\\<rparr> = b\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>P (a, b\\<lparr>ok := True\\<rparr>);\n     P (a, b\\<lparr>ok := False\\<rparr>); ok b;\n     b\\<lparr>ok := True\\<rparr> = b\\<rbrakk>\n    \\<Longrightarrow> P (a, b)\n 2. \\<lbrakk>P (a, b\\<lparr>ok := True\\<rparr>);\n     P (a, b\\<lparr>ok := False\\<rparr>); ok b\\<rbrakk>\n    \\<Longrightarrow> b\\<lparr>ok := True\\<rparr> = b\n 3. \\<lbrakk>P (a, b\\<lparr>ok := True\\<rparr>);\n     P (a, b\\<lparr>ok := False\\<rparr>); \\<not> ok b\\<rbrakk>\n    \\<Longrightarrow> P (a, b)", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P (a, b\\<lparr>ok := True\\<rparr>);\n     P (a, b\\<lparr>ok := False\\<rparr>); \\<not> ok b\\<rbrakk>\n    \\<Longrightarrow> P (a, b)", "apply (subgoal_tac \"b\\<lparr>ok:=False\\<rparr> = b\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>P (a, b\\<lparr>ok := True\\<rparr>);\n     P (a, b\\<lparr>ok := False\\<rparr>); \\<not> ok b;\n     b\\<lparr>ok := False\\<rparr> = b\\<rbrakk>\n    \\<Longrightarrow> P (a, b)\n 2. \\<lbrakk>P (a, b\\<lparr>ok := True\\<rparr>);\n     P (a, b\\<lparr>ok := False\\<rparr>); \\<not> ok b\\<rbrakk>\n    \\<Longrightarrow> b\\<lparr>ok := False\\<rparr> = b", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma H2_J_2_b :\n  assumes A: \"[(\\<lambda> (A, A'). (P(A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow> P(A, A'\\<lparr>ok := True\\<rparr>)))]\"\n  and B : \"(P ;; J) (a,b)\"\n  shows \"P (a,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (a, b)", "using B"], ["proof (prove)\nusing this:\n  (P ;; J) (a, b)\n\ngoal (1 subgoal):\n 1. P (a, b)", "apply (auto simp: design_defs fun_eq_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; \\<not> ok ba\\<rbrakk>\n       \\<Longrightarrow> P (a, b)\n 2. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; ok b\\<rbrakk>\n       \\<Longrightarrow> P (a, b)", "apply (case_tac \"ok b\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; \\<not> ok ba; ok b\\<rbrakk>\n       \\<Longrightarrow> P (a, b)\n 2. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; \\<not> ok ba;\n        \\<not> ok b\\<rbrakk>\n       \\<Longrightarrow> P (a, b)\n 3. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; ok b\\<rbrakk>\n       \\<Longrightarrow> P (a, b)", "apply (subgoal_tac \"b = ba\\<lparr>ok:=True\\<rparr>\", auto intro!: A[simplified, rule_format])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ba.\n       \\<lbrakk>P (a, ba); \\<not> ok ba;\n        b = ba\\<lparr>ok := True\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> P (a, ba\\<lparr>ok := False\\<rparr>)\n 2. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; \\<not> ok ba;\n        \\<not> ok b\\<rbrakk>\n       \\<Longrightarrow> P (a, b)\n 3. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; ok b\\<rbrakk>\n       \\<Longrightarrow> P (a, b)", "apply (rule_tac s=ba and t=\"ba\\<lparr>ok:=False\\<rparr>\" in subst, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; \\<not> ok ba;\n        \\<not> ok b\\<rbrakk>\n       \\<Longrightarrow> P (a, b)\n 2. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; ok b\\<rbrakk>\n       \\<Longrightarrow> P (a, b)", "apply (subgoal_tac \"b = ba\", simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; ok b\\<rbrakk>\n       \\<Longrightarrow> P (a, b)", "apply (case_tac \"ok ba\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; ok b; ok ba\\<rbrakk>\n       \\<Longrightarrow> P (a, b)\n 2. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; ok b; \\<not> ok ba\\<rbrakk>\n       \\<Longrightarrow> P (a, b)", "apply (subgoal_tac \"b = ba\", simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba.\n       \\<lbrakk>P (a, ba); more ba = more b; ok b; \\<not> ok ba\\<rbrakk>\n       \\<Longrightarrow> P (a, b)", "apply (subgoal_tac \"b = ba\\<lparr>ok:=True\\<rparr>\", auto intro!: A[simplified, rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba.\n       \\<lbrakk>P (a, ba); \\<not> ok ba;\n        b = ba\\<lparr>ok := True\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> P (a, ba\\<lparr>ok := False\\<rparr>)", "apply (rule_tac s=ba and t=\"ba\\<lparr>ok:=False\\<rparr>\" in subst, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma H2_J_2 :\n  assumes A: \"[(\\<lambda> (A, A'). (P(A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow> P(A, A'\\<lparr>ok := True\\<rparr>)))]\"\n  shows \"P is H2 healthy \""], ["proof (prove)\ngoal (1 subgoal):\n 1. P is H2 healthy", "apply (auto simp add: H2_def Healthy_def fun_eq_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b. P (a, b) \\<Longrightarrow> (P ;; J) (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>P (aa, ba); J (ba, c)\\<rbrakk> \\<Longrightarrow> P (aa, c)", "apply (simp add: H2_J_2_a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>P (aa, ba); J (ba, c)\\<rbrakk> \\<Longrightarrow> P (aa, c)", "apply (rule H2_J_2_b [OF A])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>P (aa, ba); J (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (P ;; J) (aa, c)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma H2_J: \n\"[\\<lambda> (A, A'). P(A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow> P(A, A'\\<lparr>ok := True\\<rparr>)] = P is H2 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>A.\n        case A of\n        (A, A') \\<Rightarrow>\n          P (A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow>\n          P (A, A'\\<lparr>ok := True\\<rparr>)) =\n    P is H2 healthy", "using H2_J_1 H2_J_2"], ["proof (prove)\nusing this:\n  ?P is H2 healthy \\<Longrightarrow>\n  \\<forall>A.\n     case A of\n     (A, A') \\<Rightarrow>\n       ?P (A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow>\n       ?P (A, A'\\<lparr>ok := True\\<rparr>)\n  \\<forall>A.\n     case A of\n     (A, A') \\<Rightarrow>\n       ?P (A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow>\n       ?P (A, A'\\<lparr>ok := True\\<rparr>) \\<Longrightarrow>\n  ?P is H2 healthy\n\ngoal (1 subgoal):\n 1. (\\<forall>A.\n        case A of\n        (A, A') \\<Rightarrow>\n          P (A, A'\\<lparr>ok := False\\<rparr>) \\<longrightarrow>\n          P (A, A'\\<lparr>ok := True\\<rparr>)) =\n    P is H2 healthy", "by blast"], ["", "lemma design_eq1: \"(P \\<turnstile> Q) = (P \\<turnstile> P \\<and> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<turnstile> Q) = (P \\<turnstile> P \\<and> Q)", "by (rule ext) (auto simp: design_defs)"], ["", "lemma H1_idem: \"H1 o H1 = H1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H1 \\<circ> H1 = H1", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma H1_idem2: \"(H1 (H1 P)) = (H1 P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H1 (H1 P) = H1 P", "by (simp add: H1_idem[simplified fun_eq_iff Fun.comp_def, rule_format] fun_eq_iff)"], ["", "lemma H2_idem: \"H2 o H2 = H2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H2 \\<circ> H2 = H2", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma H2_idem2: \"(H2 (H2 P)) = (H2 P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H2 (H2 P) = H2 P", "by (simp add: H2_idem[simplified fun_eq_iff Fun.comp_def, rule_format] fun_eq_iff)"], ["", "lemma H1_H2_commute: \"H1 o H2 = H2 o H1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H1 \\<circ> H2 = H2 \\<circ> H1", "by (auto simp: design_defs fun_eq_iff split: cond_splits)"], ["", "lemma H1_H2_commute2: \"H1 (H2 P) = H2 (H1 P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H1 (H2 P) = H2 (H1 P)", "by (simp add: H1_H2_commute[simplified fun_eq_iff Fun.comp_def, rule_format] fun_eq_iff)"], ["", "lemma alpha_d_eqD: \"r = r' \\<Longrightarrow> ok r = ok r' \\<and> alpha_d.more r = alpha_d.more r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = r' \\<Longrightarrow> ok r = ok r' \\<and> more r = more r'", "by (auto simp: alpha_d.equality)"], ["", "lemma design_H1: \"(P \\<turnstile> Q) is H1 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<turnstile> Q) is H1 healthy", "by (auto simp: design_defs fun_eq_iff)"], ["", "lemma design_H2: \n\"(\\<forall> a b. P (a, b\\<lparr>ok := True\\<rparr>) \\<longrightarrow> P (a, b\\<lparr>ok := False\\<rparr>)) \\<Longrightarrow> (P \\<turnstile> Q) is H2 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       P (a, b\\<lparr>ok := True\\<rparr>) \\<longrightarrow>\n       P (a, b\\<lparr>ok := False\\<rparr>) \\<Longrightarrow>\n    (P \\<turnstile> Q) is H2 healthy", "by (rule H2_J_2) (auto simp: design_defs fun_eq_iff)"], ["", "end"]]}