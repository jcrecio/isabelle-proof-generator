{"file_name": "/home/qj213/afp-2021-10-22/thys/Circus/Denotational_Semantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Circus", "problem_names": ["lemma Skip_is_action: \n\"(R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> \\<not>wait A' \\<and> more A = more A')) \\<in> {p. is_CSP_process p}\"", "lemmas Skip_is_CSP = Skip_is_action[simplified]", "lemma relation_of_Skip: \n\"relation_of Skip = \n                  (R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> \\<not>wait A' \\<and> more A = more A'))\"", "lemma Skip_is_CSP3: \"(relation_of Skip) is CSP3 healthy\"", "lemma Skip_is_CSP4: \"(relation_of Skip) is CSP4 healthy\"", "lemma Skip_comp_absorb: \"(relation_of Skip ;; relation_of Skip) = relation_of Skip\"", "lemma Stop_is_action:\n\"(R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> wait A')) \\<in> {p. is_CSP_process p}\"", "lemmas Stop_is_CSP = Stop_is_action[simplified]", "lemma relation_of_Stop:\n\"relation_of Stop = (R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\"", "lemma Stop_is_CSP3: \"(relation_of Stop) is CSP3 healthy\"", "lemma Stop_is_CSP4: \"(relation_of Stop) is CSP4 healthy\"", "lemma Chaos_is_action: \"(R(false \\<turnstile> true)) \\<in> {p. is_CSP_process p}\"", "lemmas Chaos_is_CSP = Chaos_is_action[simplified]", "lemma relation_of_Chaos: \"relation_of Chaos = (R(false \\<turnstile> true))\"", "lemma state_update_before_is_action: \n\"(R ((\\<lambda>(A, A'). (Pre sc) (more A)) \\<turnstile> \n                               (\\<lambda>(A, A').sc (more A, more A') & \\<not>wait A' & tr A = tr A')) ;; relation_of Ac) \\<in> {p. is_CSP_process p}\"", "lemmas state_update_before_is_CSP = state_update_before_is_action[simplified]", "lemma relation_of_state_update_before:\n\"relation_of (state_update_before sc Ac) = (R ((\\<lambda>(A, A'). (Pre sc) (more A)) \\<turnstile> \n                               (\\<lambda>(A, A'). sc (more A, more A') & \\<not>wait A' & tr A = tr A')) ;; relation_of Ac)\"", "lemma mono_state_update_before: \"mono (state_update_before sc)\"", "lemma state_update_before_is_CSP3: \"relation_of (state_update_before sc Ac) is CSP3 healthy\"", "lemma state_update_before_is_CSP4: \n  assumes A : \"relation_of Ac is CSP4 healthy\"\n  shows \"relation_of (state_update_before sc Ac) is CSP4 healthy\"", "lemma state_update_after_is_action: \n\"(relation_of Ac ;; R (true \\<turnstile> (\\<lambda>(A, A'). sc (more A, more A') & \\<not>wait A' & tr A = tr A'))) \\<in> {p. is_CSP_process p}\"", "lemmas state_update_after_is_CSP = state_update_after_is_action[simplified]", "lemma relation_of_state_update_after:\n\"relation_of (state_update_after sc Ac) = (relation_of Ac ;; R (true \\<turnstile> (\\<lambda>(A, A'). sc (more A, more A') & \\<not>wait A' & tr A = tr A')))\"", "lemma mono_state_update_after: \"mono (state_update_after sc)\"", "lemma state_update_after_is_CSP3: \n  assumes A : \"relation_of Ac is CSP3 healthy\"\n  shows \"relation_of (state_update_after sc Ac) is CSP3 healthy\"", "lemma state_update_after_is_CSP4: \"relation_of (state_update_after sc Ac) is CSP4 healthy\"", "lemma Seq_is_action: \"(relation_of P ;; relation_of Q) \\<in> {p. is_CSP_process p}\"", "lemmas Seq_is_CSP = Seq_is_action[simplified]", "lemma relation_of_Seq: \"relation_of (P `;` Q) = (relation_of P ;; relation_of Q)\"", "lemma mono_Seq: \"mono ((`;`) P)\"", "lemma CSP3_imp_left_Skip:\n  assumes A: \"relation_of P is CSP3 healthy\"\n  shows \"(Skip `;` P) = P\"", "lemma CSP4_imp_right_Skip:\n  assumes A: \"relation_of P is CSP4 healthy\"\n  shows \"(P `;` Skip) = P\"", "lemma Seq_assoc: \"(A `;` (B `;` C)) = ((A `;` B) `;` C)\"", "lemma Skip_absorb: \"(Skip `;` Skip) = Skip\"", "lemma Ndet_is_action: \"((relation_of P) \\<or> (relation_of Q)) \\<in> {p. is_CSP_process p}\"", "lemmas Ndet_is_CSP = Ndet_is_action[simplified]", "lemma relation_of_Ndet: \"relation_of (P \\<sqinter> Q) = ((relation_of P) \\<or> (relation_of Q))\"", "lemma mono_Ndet: \"mono ((\\<sqinter>) P)\"", "lemma Det_is_action: \n\"(R((\\<not>((relation_of P)\\<^sup>f\\<^sub>f) \\<and> \\<not>((relation_of Q)\\<^sup>f\\<^sub>f)) \\<turnstile>\n           (((relation_of P)\\<^sup>t\\<^sub>f \\<and> ((relation_of Q)\\<^sup>t\\<^sub>f))\n              \\<triangleleft> \\<lambda>(A, A'). tr A = tr A' \\<and> wait A' \\<triangleright>\n            ((relation_of P)\\<^sup>t\\<^sub>f \\<or> ((relation_of Q)\\<^sup>t\\<^sub>f))))) \\<in> {p. is_CSP_process p}\"", "lemmas Det_is_CSP = Det_is_action[simplified]", "lemma relation_of_Det:\n\"relation_of (P \\<box> Q) = (R((\\<not>((relation_of P)\\<^sup>f\\<^sub>f) \\<and> \\<not>((relation_of Q)\\<^sup>f\\<^sub>f)) \\<turnstile>\n                                          (((relation_of P)\\<^sup>t\\<^sub>f \\<and> ((relation_of Q)\\<^sup>t\\<^sub>f))\n                                             \\<triangleleft> \\<lambda>(A, A'). tr A = tr A' \\<and> wait A' \\<triangleright>\n                                           ((relation_of P)\\<^sup>t\\<^sub>f \\<or> ((relation_of Q)\\<^sup>t\\<^sub>f)))))\"", "lemma mono_Det: \"mono ((\\<box>) P)\"", "lemma rd_assign_is_action: \n\"(R (true \\<turnstile> \\<lambda>(A, A'). ref A' = ref A \\<and> tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = s)) \\<in> {p. is_CSP_process p}\"", "lemmas rd_assign_is_CSP = rd_assign_is_action[simplified]", "lemma relation_of_rd_assign: \n\"relation_of (rd_assign s) = \n                  (R (true \\<turnstile> \\<lambda>(A, A'). ref A' = ref A \\<and> tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = s))\"", "lemma Schema_is_action: \n\"(R ((\\<lambda>(A, A'). (Pre sc) (more A)) \\<turnstile> \n                 (\\<lambda>(A, A'). sc (more A, more A') & \\<not>wait A' & tr A = tr A'))) \\<in> {p. is_CSP_process p}\"", "lemmas Schema_is_CSP = Schema_is_action[simplified]", "lemma relation_of_Schema:\n\"relation_of (Schema sc) = (R ((\\<lambda>(A, A'). (Pre sc) (more A)) \\<turnstile> \n                          (\\<lambda>(A, A'). sc (more A, more A') \\<and> \\<not>wait A' \\<and> tr A = tr A')))\"", "lemma Schema_is_state_update_before: \"Schema u = state_update_before u Skip\"", "lemma set_Cons1: \"tr1 \\<in> set l \\<Longrightarrow> a # tr1 \\<in> (#) a ` set l\"", "lemma tr_in_set_eq: \"(tr1 \\<in> (#) b ` set l) = (tr1 \\<noteq> [] \\<and> hd tr1 = b \\<and> tl tr1 \\<in> set l)\"", "lemma Par_is_action: \"(R ((\\<lambda> (S, S'). \n \\<not> (\\<exists> tr1 tr2. ((relation_of A1)\\<^sup>f\\<^sub>f ;; (\\<lambda> (S, S'). tr1 = (tr S))) (S, S') \n \\<and> (spec False (wait S) (relation_of A2) ;; (\\<lambda> (S, S'). tr2 = (tr S))) (S, S')\n \\<and> ((tr_filter tr1 cs) = (tr_filter tr2 cs))) \\<and>\n \\<not> (\\<exists> tr1 tr2. (spec False (wait S) (relation_of A1);;(\\<lambda>(S, _). tr1 = tr S)) (S, S')\n \\<and> ((relation_of A2)\\<^sup>f\\<^sub>f ;; (\\<lambda> (S, S'). tr2 = (tr S))) (S, S') \n \\<and> ((tr_filter tr1 cs) = (tr_filter tr2 cs)))) \\<turnstile> \n   (\\<lambda> (S, S'). (\\<exists> s1 s2. ((\\<lambda> (A, A'). (relation_of A1)\\<^sup>t\\<^sub>f (A, s1)\n \\<and> ((relation_of A2)\\<^sup>t\\<^sub>f (A, s2)));; M_par s1 ns1 s2 ns2 cs) (S, S'))))) \\<in> {p. is_CSP_process p}\"", "lemmas Par_is_CSP = Par_is_action[simplified]", "lemma relation_of_Par:\n\"relation_of (A1 \\<lbrakk> ns1 | cs | ns2 \\<rbrakk> A2) = (R ((\\<lambda> (S, S'). \n \\<not> (\\<exists> tr1 tr2. ((relation_of A1)\\<^sup>f\\<^sub>f ;; (\\<lambda> (S, S'). tr1 = (tr S))) (S, S') \n \\<and> (spec False (wait S) (relation_of A2) ;; (\\<lambda> (S, S'). tr2 = (tr S))) (S, S') \n \\<and> ((tr_filter tr1 cs) = (tr_filter tr2 cs))) \\<and>\n \\<not> (\\<exists> tr1 tr2. (spec False (wait S) (relation_of A1);;(\\<lambda>(S, _). tr1 = tr S)) (S, S') \n \\<and> ((relation_of A2)\\<^sup>f\\<^sub>f ;; (\\<lambda> (S, S'). tr2 = (tr S))) (S, S') \n \\<and> ((tr_filter tr1 cs) = (tr_filter tr2 cs)))) \\<turnstile> \n   (\\<lambda> (S, S'). (\\<exists> s1 s2. ((\\<lambda> (A, A'). (relation_of A1)\\<^sup>t\\<^sub>f (A, s1)\n \\<and> ((relation_of A2)\\<^sup>t\\<^sub>f (A, s2)));; M_par s1 ns1 s2 ns2 cs) (S, S')))))\"", "lemma mono_Par: \"mono (\\<lambda>Q. P \\<lbrakk> ns1 | cs | ns2 \\<rbrakk> Q)\"", "lemma Assign_is_action: \n\"(R (true \\<turnstile> (\\<lambda> (S, S'). tr S' = tr S \\<and> \\<not>wait S' \\<and> \n                (more S' = (update x (\\<lambda>_. (e (more S)))) (more S))))) \\<in> {p. is_CSP_process p}\"", "lemmas Assign_is_CSP = Assign_is_action[simplified]", "lemma relation_of_Assign:\n\"relation_of (ASSIGN x e) = (R (true \\<turnstile> (\\<lambda> (S, S'). tr S' = tr S \\<and> \\<not>wait S' \\<and> \n                                   (more S' = (update x (\\<lambda>_. (e (more S)))) (more S)))))\"", "lemma Assign_is_state_update_before: \"ASSIGN x e = state_update_before (\\<lambda> (s, s') . s' = (update x (\\<lambda>_. (e s))) s) Skip\"", "lemma Var_is_action:\n\"((R(true \\<turnstile> (\\<lambda> (A, A'). \\<exists> a. tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (increase v a (more A)))));; \n     (relation_of A;;\n     (R(true \\<turnstile> (\\<lambda> (A, A').  tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (decrease v (more A))))))) \\<in> {p. is_CSP_process p}\"", "lemmas Var_is_CSP = Var_is_action[simplified]", "lemma relation_of_Var:\n\"relation_of (Var v A) = \n    ((R(true \\<turnstile> (\\<lambda> (A, A'). \\<exists> a. tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (increase v a (more A)))));; \n     (relation_of A;;\n     (R(true \\<turnstile> (\\<lambda> (A, A').  tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (decrease v (more A)))))))\"", "lemma mono_Var : \"mono (Var x)\"", "lemma Let_is_action:\n\"(relation_of A;;\n     (R(true \\<turnstile> (\\<lambda> (A, A').  tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (decrease v (more A)))))) \\<in> {p. is_CSP_process p}\"", "lemmas Let_is_CSP = Let_is_action[simplified]", "lemma relation_of_Let:\n\"relation_of (Let v A) = \n    (relation_of A;;\n     (R(true \\<turnstile> (\\<lambda> (A, A').  tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (decrease v (more A))))))\"", "lemma mono_Let : \"mono (Let x)\"", "lemma Var_is_state_update_before: \"Var v A = state_update_before (\\<lambda> (s, s'). \\<exists> a. s' = increase v a s) (Let v A)\"", "lemma Let_is_state_update_after: \"Let v A = state_update_after (\\<lambda> (s, s'). s' = decrease v s) A\"", "lemma Guard_is_action: \n\"(R ( ((g o more o fst) \\<longrightarrow> \\<not> ((relation_of P)\\<^sup>f\\<^sub>f)) \\<turnstile> \n                (((g o more o fst) \\<and> ((relation_of P)\\<^sup>t\\<^sub>f)) \\<or> \n                 ((\\<not>(g o more o fst)) \\<and> (\\<lambda> (A, A'). tr A' = tr A \\<and> wait A'))))) \\<in> {p. is_CSP_process p}\"", "lemmas Guard_is_CSP = Guard_is_action[simplified]", "lemma relation_of_Guard:\n\"relation_of (g `&` P) = (R (((g o more o fst) \\<longrightarrow>  \\<not> ((relation_of P)\\<^sup>f\\<^sub>f)) \\<turnstile> \n                             (((g o more o fst) \\<and> ((relation_of P)\\<^sup>t\\<^sub>f)) \\<or>\n                          ((\\<not>(g o more o fst)) \\<and> (\\<lambda> (A, A'). tr A' = tr A \\<and> wait A')))))\"", "lemma mono_Guard : \"mono (Guard g)\"", "lemma false_Guard: \"false `&` P = Stop\"", "lemma false_Guard1: \"\\<And> a b. g (alpha_rp.more a) = False \\<Longrightarrow> \n                                (relation_of (g `&` P)) (a, b) = (relation_of Stop) (a, b)\"", "lemma true_Guard: \"true `&` P = P\"", "lemma true_Guard1: \"\\<And> a b. g (alpha_rp.more a) = True \\<Longrightarrow> \n                                     (relation_of (g `&` P)) (a, b) = (relation_of P) (a, b)\"", "lemma Guard_is_state_update_before: \"g `&` P = state_update_before (\\<lambda> (s, s') . g s) P\"", "lemma Prefix_is_action:\n\"(R(true \\<turnstile> (do c) \\<and> (\\<lambda> (A, A'). more A' = more A))) \\<in> {p. is_CSP_process p}\"", "lemma Prefix1_is_action:\n\"(R(true \\<turnstile> \\<lambda>(A, A'). do_I c (S (alpha_rp.more A)) (A, A') \\<and> alpha_rp.more A' = alpha_rp.more A)) \\<in> {p. is_CSP_process p}\"", "lemma Prefix0_is_action:\n\"(R(true \\<turnstile> (do c) \\<and> (\\<lambda> (A, A'). more A' = more A))) \\<in> {p. is_CSP_process p}\"", "lemmas Prefix_is_CSP = Prefix_is_action[simplified]", "lemmas Prefix1_is_CSP = Prefix1_is_action[simplified]", "lemmas Prefix0_is_CSP = Prefix0_is_action[simplified]", "lemma relation_of_iPrefix:\n\"relation_of (iPrefix c i j S P) = \n((R(true \\<turnstile> (\\<lambda> (A, A'). (do_I c (S (more A))) (A, A') & more A' = more A)));; relation_of P)\"", "lemma relation_of_oPrefix:\n\"relation_of (oPrefix c P) = \n((R(true \\<turnstile> (do c) \\<and> (\\<lambda> (A, A'). more A' = more A)));; relation_of P)\"", "lemma relation_of_Prefix0:\n\"relation_of (Prefix0 c P) = \n((R(true \\<turnstile> (do (\\<lambda> _. c)) \\<and> (\\<lambda> (A, A'). more A' = more A)));; relation_of P)\"", "lemma mono_iPrefix : \"mono (iPrefix c i j s)\"", "lemma mono_oPrefix : \"mono (oPrefix c)\"", "lemma mono_Prefix0 : \"mono(Prefix0 c)\"", "lemma hid_is_R: \"hid P cs is R healthy\"", "lemma hid_Skip: \"hid P cs = (hid P cs ;; relation_of Skip)\"", "lemma hid_is_CSP1: \"hid P cs is CSP1 healthy\"", "lemma hid_is_CSP2: \"hid P cs is CSP2 healthy\"", "lemma hid_is_CSP: \"is_CSP_process (hid P cs)\"", "lemma Hide_is_action: \n\"(R(\\<lambda>(S, S'). \\<exists> s. (diff_tr S' S) = (tr_filter (s - (tr S)) cs) &\n   (relation_of P)(S, S'\\<lparr>tr := s, ref := (ref S') \\<union> cs \\<rparr>));; (relation_of Skip)) \\<in> {p. is_CSP_process p}\"", "lemmas Hide_is_CSP = Hide_is_action[simplified]", "lemma relation_of_Hide:\n\"relation_of (P \\\\ cs) = (R(\\<lambda>(S, S'). \\<exists> s. (diff_tr S' S) = (tr_filter (s - (tr S)) cs)\n        & (relation_of P)(S, S'\\<lparr>tr :=s, ref := (ref S') \\<union> cs \\<rparr>));; (relation_of Skip))\"", "lemma mono_Hide : \"mono(\\<lambda> P. P \\\\ cs)\"", "lemma is_action_REP_Mu:\n  shows \"is_CSP_process (relation_of (lfp P))\"", "lemma mono_Mu:\n  assumes A : \"mono P\"\n  and     B : \"\\<And> X. mono (P X)\"\n  shows  \"mono (lfp P)\""], "translations": [["", "lemma Skip_is_action: \n\"(R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> \\<not>wait A' \\<and> more A = more A')) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            alpha_rp.more A = alpha_rp.more A')\n    \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (R (true \\<turnstile> \\<lambda>(A, A').\n                              tr A' = tr A \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A = alpha_rp.more A'))", "apply (rule rd_is_CSP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       true (a, b\\<lparr>ok := True\\<rparr>) \\<longrightarrow>\n       true (a, b\\<lparr>ok := False\\<rparr>)", "by auto"], ["", "lemmas Skip_is_CSP = Skip_is_action[simplified]"], ["", "lemma relation_of_Skip: \n\"relation_of Skip = \n                  (R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> \\<not>wait A' \\<and> more A = more A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of Skip =\n    R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            alpha_rp.more A = alpha_rp.more A')", "by (simp add: Skip_def action_of_inverse Skip_is_CSP)"], ["", "definition CSP3::\"(('\\<theta>::ev_eq,'\\<sigma>) alphabet_rp) Healthiness_condition\"\nwhere \"CSP3 (P)  \\<equiv>  relation_of Skip ;; P\""], ["", "definition CSP4::\"(('\\<theta>::ev_eq,'\\<sigma>) alphabet_rp) Healthiness_condition\"\nwhere \"CSP4 (P)  \\<equiv>  P ;; relation_of Skip\""], ["", "lemma Skip_is_CSP3: \"(relation_of Skip) is CSP3 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of Skip is CSP3 healthy", "apply (auto simp: relation_of_Skip rp_defs design_defs fun_eq_iff CSP3_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (rule_tac b=b in comp_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (b, b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 4. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (rule_tac b=b in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (b, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and>\n                          \\<not> wait c \\<and>\n                          alpha_rp.more aa = alpha_rp.more c) \\<and>\n                         tr aa \\<le> tr c", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and>\n                          \\<not> wait c \\<and>\n                          alpha_rp.more aa = alpha_rp.more c) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba;\n        ok aa \\<longrightarrow>\n        \\<not> true\n                (aa\\<lparr>tr := []\\<rparr>, ba\n                 \\<lparr>tr := tr ba - tr aa\\<rparr>);\n        tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and>\n                          \\<not> wait c \\<and>\n                          alpha_rp.more aa = alpha_rp.more c) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ba\n          \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and>\n                          \\<not> wait c \\<and>\n                          alpha_rp.more aa = alpha_rp.more c) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 4. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c", "apply (auto simp add: prefix_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Skip_is_CSP4: \"(relation_of Skip) is CSP4 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of Skip is CSP4 healthy", "apply (auto simp: relation_of_Skip rp_defs design_defs fun_eq_iff CSP4_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (rule_tac b=b in comp_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (b, b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 4. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (rule_tac b=b in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (b, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and>\n                          \\<not> wait c \\<and>\n                          alpha_rp.more aa = alpha_rp.more c) \\<and>\n                         tr aa \\<le> tr c", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and>\n                          \\<not> wait c \\<and>\n                          alpha_rp.more aa = alpha_rp.more c) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba;\n        ok aa \\<longrightarrow>\n        \\<not> true\n                (aa\\<lparr>tr := []\\<rparr>, ba\n                 \\<lparr>tr := tr ba - tr aa\\<rparr>);\n        tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and>\n                          \\<not> wait c \\<and>\n                          alpha_rp.more aa = alpha_rp.more c) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ba\n          \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and>\n                          \\<not> wait c \\<and>\n                          alpha_rp.more aa = alpha_rp.more c) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 4. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c", "apply (auto simp add: prefix_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Skip_comp_absorb: \"(relation_of Skip ;; relation_of Skip) = relation_of Skip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (action.relation_of Skip ;; action.relation_of Skip) =\n    action.relation_of Skip", "apply (auto simp: relation_of_Skip fun_eq_iff rp_defs true_def design_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)\n 2. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (clarsimp split: cond_splits)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow>\n        alpha_rp.more aa \\<noteq> alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow>\n        alpha_rp.more aa \\<noteq> alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 4. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c\n 5. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (case_tac \"ok aa\", simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow> alpha_rp.more aa \\<noteq> alpha_rp.more c;\n        \\<not> ok aa\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c\n 4. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (erule disjE)+"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow> alpha_rp.more aa \\<noteq> alpha_rp.more c;\n        \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow> alpha_rp.more aa \\<noteq> alpha_rp.more c;\n        \\<not> ok aa; tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow> alpha_rp.more aa \\<noteq> alpha_rp.more c;\n        \\<not> ok aa;\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 4. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 5. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c\n 6. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (clarsimp simp: prefix_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow> alpha_rp.more aa \\<noteq> alpha_rp.more c;\n        \\<not> ok aa; tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow> alpha_rp.more aa \\<noteq> alpha_rp.more c;\n        \\<not> ok aa;\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 4. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c\n 5. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (clarsimp simp: prefix_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow> alpha_rp.more aa \\<noteq> alpha_rp.more c;\n        \\<not> ok aa;\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c\n 4. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (erule disjE)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow> alpha_rp.more aa \\<noteq> alpha_rp.more c;\n        \\<not> ok aa;\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow> alpha_rp.more aa \\<noteq> alpha_rp.more c;\n        \\<not> ok aa;\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 4. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c\n 5. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (clarsimp simp: prefix_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        ref aa = ref c \\<longrightarrow>\n        wait c \\<longrightarrow>\n        tr aa = tr c \\<longrightarrow>\n        ok c \\<longrightarrow> alpha_rp.more aa \\<noteq> alpha_rp.more c;\n        \\<not> ok aa;\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c\n 4. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (clarsimp simp: prefix_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (erule disjE)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c\n 4. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (clarsimp simp: prefix_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (clarsimp simp: prefix_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        ok ba \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (case_tac \"ok aa\", simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more c;\n        tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr ba \\<le> tr c; ok aa\\<rbrakk>\n       \\<Longrightarrow> tr c - tr aa = [] \\<and> tr aa \\<le> tr c\n 2. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (clarsimp simp: prefix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)", "apply (clarsimp split: cond_splits)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        ok a \\<longrightarrow>\n        ok b \\<and>\n        tr b - tr a = [] \\<and>\n        \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b;\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)", "apply (rule_tac b=a in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, a)\n 2. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        ok a \\<longrightarrow>\n        ok b \\<and>\n        tr b - tr a = [] \\<and>\n        \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b;\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)", "apply (clarsimp split: cond_splits)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        ok a \\<longrightarrow>\n        ok b \\<and>\n        tr b - tr a = [] \\<and>\n        \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b;\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)", "apply (rule_tac b=a in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        ok a \\<longrightarrow>\n        ok b \\<and>\n        tr b - tr a = [] \\<and>\n        \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b;\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, a)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        ok a \\<longrightarrow>\n        ok b \\<and>\n        tr b - tr a = [] \\<and>\n        \\<not> wait b \\<and> alpha_rp.more a = alpha_rp.more b;\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, b)", "apply (clarsimp split: cond_splits)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Stop\\<close>"], ["", "definition Stop :: \"('\\<theta>::ev_eq,'\\<sigma>) action\"\nwhere \"Stop \\<equiv> action_of (R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\""], ["", "lemma Stop_is_action:\n\"(R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> wait A')) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> wait A')\n    \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))", "apply (rule rd_is_CSP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       true (a, b\\<lparr>ok := True\\<rparr>) \\<longrightarrow>\n       true (a, b\\<lparr>ok := False\\<rparr>)", "by auto"], ["", "lemmas Stop_is_CSP = Stop_is_action[simplified]"], ["", "lemma relation_of_Stop:\n\"relation_of Stop = (R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of Stop =\n    R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> wait A')", "by (simp add: Stop_def action_of_inverse Stop_is_CSP)"], ["", "lemma Stop_is_CSP3: \"(relation_of Stop) is CSP3 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of Stop is CSP3 healthy", "apply (auto simp: relation_of_Stop relation_of_Skip rp_defs design_defs fun_eq_iff CSP3_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and> wait A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (rule_tac b=a in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (a, a)\n 2. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and> wait A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and> wait A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>(wait \\<circ> fst) (aa, ba);\n        case (aa, ba) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A';\n        (wait \\<circ> fst) (ba, c);\n        case (ba, c) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst) (aa, c) \\<longrightarrow>\n                          (case (aa, c) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (aa, c) \\<longrightarrow>\n                          (case (aa, c) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and> wait A') \\<and>\n                             tr A \\<le> tr A'))\n 2. \\<And>aa ba c.\n       \\<lbrakk>(wait \\<circ> fst) (aa, ba);\n        case (aa, ba) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A';\n        \\<not> (wait \\<circ> fst) (ba, c);\n        case (ba, c) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst) (aa, c) \\<longrightarrow>\n                          (case (aa, c) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (aa, c) \\<longrightarrow>\n                          (case (aa, c) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and> wait A') \\<and>\n                             tr A \\<le> tr A'))\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> (wait \\<circ> fst) (aa, ba);\n        case (aa, ba) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and> alpha_rp.more A = alpha_rp.more A') \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> ((wait \\<circ> fst) (aa, c) \\<longrightarrow>\n                          (case (aa, c) of\n                           (A, A') \\<Rightarrow>\n                             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                             ok A' \\<and>\n                             tr A = tr A' \\<and>\n                             wait A = wait A' \\<and>\n                             ref A = ref A' \\<and>\n                             alpha_rp.more A = alpha_rp.more A')) \\<and>\n                         (\\<not> (wait \\<circ> fst)\n                                  (aa, c) \\<longrightarrow>\n                          (case (aa, c) of\n                           (A, A') \\<Rightarrow>\n                             (ok A \\<and>\n                              true\n                               (A\\<lparr>tr := []\\<rparr>, A'\n                                \\<lparr>tr :=\n    tr A' - tr A\\<rparr>) \\<longrightarrow>\n                              ok A' \\<and>\n                              tr A' - tr A = [] \\<and> wait A') \\<and>\n                             tr A \\<le> tr A'))", "apply (simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (case_tac \"ok aa\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        \\<not> ok aa\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (case_tac \"tr aa \\<le> tr ba\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        \\<not> ok aa; tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (case_tac \"ok ba\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        \\<not> ok aa; tr aa \\<le> tr ba; \\<not> ok ba\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (case_tac \"tr ba \\<le> tr c\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba; tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (rule disjI1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba; tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba; \\<not> ok aa;\n        \\<exists>zs. tr ba = tr aa @ zs; \\<not> ok ba;\n        \\<exists>zs. tr c = tr ba @ zs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (erule exE)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c zs zsa.\n       \\<lbrakk>wait aa; wait ba; \\<not> ok aa; \\<not> ok ba;\n        tr ba = tr aa @ zs; tr c = tr ba @ zsa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (rule_tac x=\"zs@zsa\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (rule disjI1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> (\\<exists>zs. tr ba = tr aa @ zs);\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        (\\<exists>zs. tr c = tr ba @ zs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (erule exE | erule conjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c zs zsa.\n       \\<lbrakk>wait aa; \\<not> wait ba; \\<not> ok aa; tr ba = tr aa @ zs;\n        ok ba \\<and>\n        true\n         (ba\\<lparr>tr := []\\<rparr>, c\n          \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n        ok c \\<and> tr c - tr ba = [] \\<and> wait c;\n        tr c = tr ba @ zsa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (rule_tac x=\"zs@zsa\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and>\n         tr ba - tr aa = [] \\<and>\n         \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (split cond_splits)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; (wait \\<circ> fst) (ba, c);\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ba\n          \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and>\n        \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        case (ba, c) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A'\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> (wait \\<circ> fst) (ba, c);\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ba\n          \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and>\n        \\<not> wait ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        case (ba, c) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (simp_all add: true_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        (ok ba \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        (ok ba \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa;\n        \\<exists>zs. tr ba = tr aa @ zs;\n        \\<not> ok ba \\<and> (\\<exists>zs. tr c = tr ba @ zs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        (ok ba \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c", "apply (erule exE | erule conjE)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c zs zsa.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr ba = tr aa @ zs;\n        \\<not> ok ba; tr c = tr ba @ zsa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        (ok ba \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c", "apply (rule_tac x=\"zs@zsa\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        tr ba - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        tr aa \\<le> tr ba;\n        (ok ba \\<longrightarrow>\n         ok c \\<and> tr c - tr ba = [] \\<and> wait c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow> tr c - tr aa = []) \\<and>\n                         tr aa \\<le> tr c", "apply (auto simp add: prefix_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Stop_is_CSP4: \"(relation_of Stop) is CSP4 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of Stop is CSP4 healthy", "apply (auto simp: relation_of_Stop relation_of_Skip rp_defs design_defs fun_eq_iff CSP4_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and> wait A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (rule_tac b=b in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b)\n 2. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and> tr A' - tr A = [] \\<and> wait A') \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A = alpha_rp.more A') \\<and>\n               tr A \\<le> tr A'))\n        (b, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and> wait A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and> wait A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (case_tac \"ok aa\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        \\<not> ok aa\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (case_tac \"tr aa \\<le> tr ba\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        \\<not> ok aa; tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (case_tac \"ok ba\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba;\n        tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        \\<not> ok aa; tr aa \\<le> tr ba; \\<not> ok ba\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (case_tac \"tr ba \\<le> tr c\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba; tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (rule disjI1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba; tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; wait ba; \\<not> ok aa;\n        \\<exists>zs. tr ba = tr aa @ zs; \\<not> ok ba;\n        \\<exists>zs. tr c = tr ba @ zs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (erule exE)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c zs zsa.\n       \\<lbrakk>wait aa; wait ba; \\<not> ok aa; \\<not> ok ba;\n        tr ba = tr aa @ zs; tr c = tr ba @ zsa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (rule_tac x=\"zs@zsa\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (rule disjI1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> (\\<exists>zs. tr ba = tr aa @ zs);\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        (\\<exists>zs. tr c = tr ba @ zs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (erule exE | erule conjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c zs zsa.\n       \\<lbrakk>wait aa; \\<not> wait ba; \\<not> ok aa; tr ba = tr aa @ zs;\n        ok ba \\<and>\n        true\n         (ba\\<lparr>tr := []\\<rparr>, c\n          \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ba = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c;\n        tr c = tr ba @ zsa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (rule_tac x=\"zs@zsa\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ba\n           \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n         ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (split cond_splits)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; (wait \\<circ> fst) (ba, c);\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ba\n          \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n        ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba;\n        tr aa \\<le> tr ba;\n        case (ba, c) of\n        (A, A') \\<Rightarrow>\n          \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n          ok A' \\<and>\n          tr A = tr A' \\<and>\n          wait A = wait A' \\<and>\n          ref A = ref A' \\<and> alpha_rp.more A = alpha_rp.more A'\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> (wait \\<circ> fst) (ba, c);\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ba\n          \\<lparr>tr := tr ba - tr aa\\<rparr>) \\<longrightarrow>\n        ok ba \\<and> tr ba - tr aa = [] \\<and> wait ba;\n        tr aa \\<le> tr ba;\n        case (ba, c) of\n        (A, A') \\<Rightarrow>\n          (ok A \\<and>\n           true\n            (A\\<lparr>tr := []\\<rparr>, A'\n             \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n           ok A' \\<and>\n           tr A' - tr A = [] \\<and>\n           \\<not> wait A' \\<and> alpha_rp.more A = alpha_rp.more A') \\<and>\n          tr A \\<le> tr A'\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c", "apply (simp_all add: true_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba;\n        ok aa \\<longrightarrow> ok ba \\<and> tr ba - tr aa = [];\n        tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba; \\<not> ok aa;\n        tr aa \\<le> tr ba;\n        (ok ba \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba;\n        ok aa \\<longrightarrow> ok ba \\<and> tr ba - tr aa = [];\n        tr aa \\<le> tr ba; \\<not> ok ba \\<and> tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba;\n        ok aa \\<longrightarrow> ok ba \\<and> tr ba - tr aa = [];\n        tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba; \\<not> ok aa;\n        tr aa \\<le> tr ba;\n        (ok ba \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa;\n        \\<exists>zs. tr ba = tr aa @ zs;\n        \\<not> ok ba \\<and> (\\<exists>zs. tr c = tr ba @ zs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba;\n        ok aa \\<longrightarrow> ok ba \\<and> tr ba - tr aa = [];\n        tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba; \\<not> ok aa;\n        tr aa \\<le> tr ba;\n        (ok ba \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c", "apply (erule exE | erule conjE)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c zs zsa.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr ba = tr aa @ zs;\n        \\<not> ok ba; tr c = tr ba @ zsa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr aa @ zs\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba;\n        ok aa \\<longrightarrow> ok ba \\<and> tr ba - tr aa = [];\n        tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba; \\<not> ok aa;\n        tr aa \\<le> tr ba;\n        (ok ba \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c", "apply (rule_tac x=\"zs@zsa\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba;\n        ok aa \\<longrightarrow> ok ba \\<and> tr ba - tr aa = [];\n        tr aa \\<le> tr ba;\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and> wait c) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba; \\<not> ok aa;\n        tr aa \\<le> tr ba;\n        (ok ba \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c", "apply (auto simp add: prefix_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Chaos\\<close>"], ["", "definition Chaos :: \"('\\<theta>::ev_eq,'\\<sigma>) action\"\nwhere \"Chaos \\<equiv> action_of (R(false \\<turnstile> true))\""], ["", "lemma Chaos_is_action: \"(R(false \\<turnstile> true)) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (false \\<turnstile> true) \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process (R (false \\<turnstile> true))", "apply (rule rd_is_CSP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       false (a, b\\<lparr>ok := True\\<rparr>) \\<longrightarrow>\n       false (a, b\\<lparr>ok := False\\<rparr>)", "by auto"], ["", "lemmas Chaos_is_CSP = Chaos_is_action[simplified]"], ["", "lemma relation_of_Chaos: \"relation_of Chaos = (R(false \\<turnstile> true))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of Chaos = R (false \\<turnstile> true)", "by (simp add: Chaos_def action_of_inverse Chaos_is_CSP)"], ["", "subsection \\<open>State update actions\\<close>"], ["", "definition Pre ::\"'\\<sigma> relation  \\<Rightarrow> '\\<sigma> predicate\"\nwhere \"Pre sc \\<equiv> \\<lambda>A. \\<exists> A'. sc (A, A')\""], ["", "definition state_update_before :: \"'\\<sigma> relation \\<Rightarrow> ('\\<theta>::ev_eq,'\\<sigma>) action \\<Rightarrow> ('\\<theta>,'\\<sigma>) action\"\nwhere \"state_update_before sc Ac = action_of(R ((\\<lambda>(A, A'). (Pre sc) (more A)) \\<turnstile> \n                      (\\<lambda>(A, A'). sc (more A, more A') & \\<not>wait A' & tr A = tr A')) ;; relation_of Ac)\""], ["", "lemma state_update_before_is_action: \n\"(R ((\\<lambda>(A, A'). (Pre sc) (more A)) \\<turnstile> \n                               (\\<lambda>(A, A').sc (more A, more A') & \\<not>wait A' & tr A = tr A')) ;; relation_of Ac) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (R (\\<lambda>(A, A').\n           Pre sc\n            (alpha_rp.more\n              A) \\<turnstile> \\<lambda>(A, A').\n                                 sc (alpha_rp.more A,\n                                     alpha_rp.more A') \\<and>\n                                 \\<not> wait A' \\<and> tr A = tr A') ;;\n     action.relation_of Ac)\n    \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (R (\\<lambda>(A, A').\n            Pre sc\n             (alpha_rp.more\n               A) \\<turnstile> \\<lambda>(A, A').\n                                  sc (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and> tr A = tr A') ;;\n      action.relation_of Ac)", "apply (rule seq_CSP)"], ["proof (prove)\ngoal (3 subgoals):\n 1. R (\\<lambda>(A, A').\n          Pre sc\n           (alpha_rp.more\n             A) \\<turnstile> \\<lambda>(A, A').\n                                sc (alpha_rp.more A,\n                                    alpha_rp.more A') \\<and>\n                                \\<not> wait A' \\<and>\n                                tr A = tr A') is CSP1 healthy\n 2. R (\\<lambda>(A, A').\n          Pre sc\n           (alpha_rp.more\n             A) \\<turnstile> \\<lambda>(A, A').\n                                sc (alpha_rp.more A,\n                                    alpha_rp.more A') \\<and>\n                                \\<not> wait A' \\<and>\n                                tr A = tr A') is R healthy\n 3. is_CSP_process (action.relation_of Ac)", "apply (rule rd_is_CSP1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. R (\\<lambda>(A, A').\n          Pre sc\n           (alpha_rp.more\n             A) \\<turnstile> \\<lambda>(A, A').\n                                sc (alpha_rp.more A,\n                                    alpha_rp.more A') \\<and>\n                                \\<not> wait A' \\<and>\n                                tr A = tr A') is R healthy\n 2. is_CSP_process (action.relation_of Ac)", "apply (auto simp: R_idem2 Healthy_def relation_of_CSP)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas state_update_before_is_CSP = state_update_before_is_action[simplified]"], ["", "lemma relation_of_state_update_before:\n\"relation_of (state_update_before sc Ac) = (R ((\\<lambda>(A, A'). (Pre sc) (more A)) \\<turnstile> \n                               (\\<lambda>(A, A'). sc (more A, more A') & \\<not>wait A' & tr A = tr A')) ;; relation_of Ac)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (state_update_before sc Ac) =\n    (R (\\<lambda>(A, A').\n           Pre sc\n            (alpha_rp.more\n              A) \\<turnstile> \\<lambda>(A, A').\n                                 sc (alpha_rp.more A,\n                                     alpha_rp.more A') \\<and>\n                                 \\<not> wait A' \\<and> tr A = tr A') ;;\n     action.relation_of Ac)", "by (simp add: state_update_before_def action_of_inverse state_update_before_is_CSP)"], ["", "lemma mono_state_update_before: \"mono (state_update_before sc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (state_update_before sc)", "by (auto simp: mono_def less_eq_action ref_def relation_of_state_update_before design_defs rp_defs fun_eq_iff \n            split: cond_splits dest: relation_of_spec_f_f[simplified] \n                                     relation_of_spec_t_f[simplified])"], ["", "lemma state_update_before_is_CSP3: \"relation_of (state_update_before sc Ac) is CSP3 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (state_update_before sc Ac) is CSP3 healthy", "apply (auto simp: relation_of_state_update_before relation_of_Skip rp_defs design_defs fun_eq_iff CSP3_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Ac (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, c)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and> Pre sc (alpha_rp.more A) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ab, bb);\n        action.relation_of Ac (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (rule_tac b=aa in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Ac (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, aa)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Ac (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, c)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and> Pre sc (alpha_rp.more A) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ab, bb);\n        action.relation_of Ac (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (split cond_splits, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and> Pre sc (alpha_rp.more A) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ab, bb);\n        action.relation_of Ac (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        wait ab;\n        \\<not> ok ab \\<and> tr ab \\<le> tr bb \\<or>\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (rule_tac b=bb in comp_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        wait ab;\n        \\<not> ok ab \\<and> tr ab \\<le> tr bb \\<or>\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, bb)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        wait ab;\n        \\<not> ok ab \\<and> tr ab \\<le> tr bb \\<or>\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb\\<rbrakk>\n       \\<Longrightarrow> action.relation_of Ac (bb, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        wait ab;\n        \\<not> ok ab \\<and> tr ab \\<le> tr bb \\<or>\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr bb \\<or>\n                         ok bb \\<and>\n                         tr aa = tr bb \\<and>\n                         wait bb \\<and>\n                         ref aa = ref bb \\<and>\n                         alpha_rp.more aa = alpha_rp.more bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (case_tac \"ok aa\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        wait ab;\n        \\<not> ok ab \\<and> tr ab \\<le> tr bb \\<or>\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb;\n        \\<not> ok aa\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb \\<or>\n                         ok bb \\<and>\n                         tr aa = tr bb \\<and>\n                         wait bb \\<and>\n                         ref aa = ref bb \\<and>\n                         alpha_rp.more aa = alpha_rp.more bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (case_tac \"tr aa \\<le> tr ab\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa; wait ab;\n        \\<not> ok ab \\<and> tr ab \\<le> tr bb \\<or>\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb;\n        \\<not> ok aa; tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb \\<or>\n                         ok bb \\<and>\n                         tr aa = tr bb \\<and>\n                         wait bb \\<and>\n                         ref aa = ref bb \\<and>\n                         alpha_rp.more aa = alpha_rp.more bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (case_tac \"ok ab\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa; wait ab;\n        tr ab \\<le> tr bb \\<or>\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb;\n        \\<not> ok aa; tr aa \\<le> tr ab; \\<not> ok ab\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb \\<or>\n                         ok bb \\<and>\n                         tr aa = tr bb \\<and>\n                         wait bb \\<and>\n                         ref aa = ref bb \\<and>\n                         alpha_rp.more aa = alpha_rp.more bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (case_tac \"tr ab \\<le> tr bb\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa; wait ab;\n        \\<not> ok aa; tr aa \\<le> tr ab; \\<not> ok ab;\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb \\<or>\n                         ok bb \\<and>\n                         tr aa = tr bb \\<and>\n                         wait bb \\<and>\n                         ref aa = ref bb \\<and>\n                         alpha_rp.more aa = alpha_rp.more bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (rule disjI1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa; wait ab;\n        \\<not> ok aa; tr aa \\<le> tr ab; \\<not> ok ab;\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa; wait ab;\n        \\<not> ok aa; \\<exists>zs. tr ab = tr aa @ zs; \\<not> ok ab;\n        \\<exists>zs. tr bb = tr ab @ zs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr bb = tr aa @ zs\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (erule exE)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca zs zsa.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa; wait ab;\n        \\<not> ok aa; \\<not> ok ab; tr ab = tr aa @ zs;\n        tr bb = tr ab @ zsa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr bb = tr aa @ zs\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (rule_tac x=\"zs@zsa\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (rule_tac b=bb in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, bb)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> action.relation_of Ac (bb, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb \\<or>\n                         ok bb \\<and>\n                         tr aa = tr bb \\<and>\n                         wait bb \\<and>\n                         ref aa = ref bb \\<and>\n                         alpha_rp.more aa = alpha_rp.more bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (rule disjI1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab; \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa;\n        \\<not> ok aa \\<and> (\\<exists>zs. tr ab = tr aa @ zs);\n        \\<not> wait ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        (\\<exists>zs. tr bb = tr ab @ zs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr bb = tr aa @ zs\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (erule exE | erule conjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca zs zsa.\n       \\<lbrakk>action.relation_of Ac (bb, ca); wait aa; \\<not> wait ab;\n        \\<not> ok aa; tr ab = tr aa @ zs;\n        ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n        ok bb \\<and>\n        sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n        \\<not> wait bb \\<and> [] = tr bb - tr ab;\n        tr bb = tr ab @ zsa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr bb = tr aa @ zs\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (rule_tac x=\"zs@zsa\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, ca)", "apply (rule_tac b=bb in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre sc (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, bb)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (ab, bb);\n        action.relation_of Ac (bb, ca); \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and> alpha_rp.more aa = alpha_rp.more ab) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> action.relation_of Ac (bb, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa; wait ab;\n        ok aa \\<longrightarrow>\n        \\<not> true\n                (aa\\<lparr>tr := []\\<rparr>, ab\n                 \\<lparr>tr := tr ab - tr aa\\<rparr>);\n        tr aa \\<le> tr ab;\n        \\<not> ok ab \\<and> tr ab \\<le> tr bb \\<or>\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          Pre sc (alpha_rp.more aa) \\<longrightarrow>\n                          ok bb \\<and>\n                          sc (alpha_rp.more aa, alpha_rp.more bb) \\<and>\n                          \\<not> wait bb \\<and> [] = tr bb - tr aa) \\<and>\n                         tr aa \\<le> tr bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa;\n        \\<not> wait ab;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        tr aa \\<le> tr ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          Pre sc (alpha_rp.more aa) \\<longrightarrow>\n                          ok bb \\<and>\n                          sc (alpha_rp.more aa, alpha_rp.more bb) \\<and>\n                          \\<not> wait bb \\<and> [] = tr bb - tr aa) \\<and>\n                         tr aa \\<le> tr bb", "apply (simp_all add: true_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa; wait ab;\n        \\<not> ok aa; tr aa \\<le> tr ab;\n        \\<not> ok ab \\<and> tr ab \\<le> tr bb \\<or>\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa;\n        \\<not> wait ab;\n        ok aa \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        tr aa \\<le> tr ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          Pre sc (alpha_rp.more aa) \\<longrightarrow>\n                          ok bb \\<and>\n                          sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n                          \\<not> wait bb \\<and> [] = tr bb - tr aa) \\<and>\n                         tr aa \\<le> tr bb", "apply (erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa; wait ab;\n        \\<not> ok aa; tr aa \\<le> tr ab;\n        \\<not> ok ab \\<and> tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa; wait ab;\n        \\<not> ok aa; tr aa \\<le> tr ab;\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa;\n        \\<not> wait ab;\n        ok aa \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        tr aa \\<le> tr ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          Pre sc (alpha_rp.more aa) \\<longrightarrow>\n                          ok bb \\<and>\n                          sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n                          \\<not> wait bb \\<and> [] = tr bb - tr aa) \\<and>\n                         tr aa \\<le> tr bb", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa; wait ab;\n        \\<not> ok aa; \\<exists>zs. tr ab = tr aa @ zs;\n        \\<not> ok ab \\<and> (\\<exists>zs. tr bb = tr ab @ zs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr bb = tr aa @ zs\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa; wait ab;\n        \\<not> ok aa; tr aa \\<le> tr ab;\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa;\n        \\<not> wait ab;\n        ok aa \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        tr aa \\<le> tr ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          Pre sc (alpha_rp.more aa) \\<longrightarrow>\n                          ok bb \\<and>\n                          sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n                          \\<not> wait bb \\<and> [] = tr bb - tr aa) \\<and>\n                         tr aa \\<le> tr bb", "apply (erule exE | erule conjE)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca zs zsa.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa; wait ab;\n        \\<not> ok aa; tr ab = tr aa @ zs; \\<not> ok ab;\n        tr bb = tr ab @ zsa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr bb = tr aa @ zs\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa; wait ab;\n        \\<not> ok aa; tr aa \\<le> tr ab;\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa;\n        \\<not> wait ab;\n        ok aa \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        tr aa \\<le> tr ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          Pre sc (alpha_rp.more aa) \\<longrightarrow>\n                          ok bb \\<and>\n                          sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n                          \\<not> wait bb \\<and> [] = tr bb - tr aa) \\<and>\n                         tr aa \\<le> tr bb", "apply (rule_tac x=\"zs@zsa\" in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa; wait ab;\n        \\<not> ok aa; tr aa \\<le> tr ab;\n        ok bb \\<and>\n        tr ab = tr bb \\<and>\n        wait bb \\<and>\n        ref ab = ref bb \\<and> alpha_rp.more ab = alpha_rp.more bb\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr bb\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of Ac (bb, ca); \\<not> wait aa;\n        \\<not> wait ab;\n        ok aa \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        tr aa \\<le> tr ab;\n        (ok ab \\<and> Pre sc (alpha_rp.more ab) \\<longrightarrow>\n         ok bb \\<and>\n         sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n         \\<not> wait bb \\<and> [] = tr bb - tr ab) \\<and>\n        tr ab \\<le> tr bb\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          Pre sc (alpha_rp.more aa) \\<longrightarrow>\n                          ok bb \\<and>\n                          sc (alpha_rp.more ab, alpha_rp.more bb) \\<and>\n                          \\<not> wait bb \\<and> [] = tr bb - tr aa) \\<and>\n                         tr aa \\<le> tr bb", "apply (auto simp add: prefix_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma state_update_before_is_CSP4: \n  assumes A : \"relation_of Ac is CSP4 healthy\"\n  shows \"relation_of (state_update_before sc Ac) is CSP4 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (state_update_before sc Ac) is CSP4 healthy", "apply (auto simp: relation_of_state_update_before relation_of_Skip rp_defs design_defs fun_eq_iff CSP4_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Ac (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((((\\<lambda>(A, A').\n                                \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                                ok A' \\<and>\n                                tr A = tr A' \\<and>\n                                wait A = wait A' \\<and>\n                                ref A = ref A' \\<and>\n                                alpha_rp.more A =\n                                alpha_rp.more\n                                 A') \\<triangleleft> wait \\<circ>\n               fst \\<triangleright> \n                               (\\<lambda>(A, A').\n                                   (ok A \\<and>\n                                    Pre sc\n                                     (alpha_rp.more A) \\<longrightarrow>\n                                    ok A' \\<and>\n                                    sc (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                    \\<not> wait A' \\<and>\n                                    [] = tr A' - tr A) \\<and>\n                                   tr A \\<le> tr A')) ;;\n                           action.relation_of Ac) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, c)\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ca, c);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and> Pre sc (alpha_rp.more A) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ab, bb);\n        action.relation_of Ac (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (ab, c)", "apply (rule_tac b=c in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Ac (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (aa, c)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Ac (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (c, c)\n 3. \\<And>c ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ca, c);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and> Pre sc (alpha_rp.more A) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ab, bb);\n        action.relation_of Ac (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (ab, c)", "apply (rule_tac b=ba in comp_intro, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre sc (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of Ac (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (c, c)\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ca, c);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and> Pre sc (alpha_rp.more A) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ab, bb);\n        action.relation_of Ac (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (ab, c)", "apply (split cond_splits, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ca, c);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and> Pre sc (alpha_rp.more A) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ab, bb);\n        action.relation_of Ac (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre sc\n                                    (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac)\n                          (ab, c)", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ca, c);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and> Pre sc (alpha_rp.more A) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ab, bb);\n        action.relation_of Ac (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of Ac (bb, c)", "apply (subst A[simplified design_defs rp_defs CSP4_def relation_of_Skip])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ca, c);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and> Pre sc (alpha_rp.more A) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ab, bb);\n        action.relation_of Ac (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          (R3 \\<circ> R2 \\<circ> R1)\n                           (\\<lambda>(A, A').\n                               ok A \\<and> true (A, A') \\<longrightarrow>\n                               ok A' \\<and>\n                               (case (A, A') of\n                                (A, A') \\<Rightarrow>\n                                  tr A' = tr A \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A')))\n                          (bb, c)", "apply (auto simp: rp_defs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition state_update_after :: \"'\\<sigma> relation \\<Rightarrow> ('\\<theta>::ev_eq,'\\<sigma>) action \\<Rightarrow> ('\\<theta>,'\\<sigma>) action\"\nwhere \"state_update_after sc Ac = action_of(relation_of Ac ;; R (true \\<turnstile> (\\<lambda>(A, A'). sc (more A, more A') & \\<not>wait A' & tr A = tr A')))\""], ["", "lemma state_update_after_is_action: \n\"(relation_of Ac ;; R (true \\<turnstile> (\\<lambda>(A, A'). sc (more A, more A') & \\<not>wait A' & tr A = tr A'))) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (action.relation_of Ac ;;\n     R (true \\<turnstile> \\<lambda>(A, A').\n                             sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                             \\<not> wait A' \\<and> tr A = tr A'))\n    \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (action.relation_of Ac ;;\n      R (true \\<turnstile> \\<lambda>(A, A').\n                              sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                              \\<not> wait A' \\<and> tr A = tr A'))", "apply (rule seq_CSP)"], ["proof (prove)\ngoal (3 subgoals):\n 1. action.relation_of Ac is CSP1 healthy\n 2. action.relation_of Ac is R healthy\n 3. is_CSP_process\n     (R (true \\<turnstile> \\<lambda>(A, A').\n                              sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                              \\<not> wait A' \\<and> tr A = tr A'))", "apply (auto simp: relation_of_CSP[simplified is_CSP_process_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (R (true \\<turnstile> \\<lambda>(A, A').\n                              sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                              \\<not> wait A' \\<and> tr A = tr A'))", "apply (rule rd_is_CSP, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas state_update_after_is_CSP = state_update_after_is_action[simplified]"], ["", "lemma relation_of_state_update_after:\n\"relation_of (state_update_after sc Ac) = (relation_of Ac ;; R (true \\<turnstile> (\\<lambda>(A, A'). sc (more A, more A') & \\<not>wait A' & tr A = tr A')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (state_update_after sc Ac) =\n    (action.relation_of Ac ;;\n     R (true \\<turnstile> \\<lambda>(A, A').\n                             sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                             \\<not> wait A' \\<and> tr A = tr A'))", "by (simp add: state_update_after_def action_of_inverse state_update_after_is_CSP)"], ["", "lemma mono_state_update_after: \"mono (state_update_after sc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (state_update_after sc)", "by (auto simp: mono_def less_eq_action ref_def relation_of_state_update_after design_defs rp_defs fun_eq_iff \n            split: cond_splits dest: relation_of_spec_f_f[simplified] \n                                     relation_of_spec_t_f[simplified])"], ["", "lemma state_update_after_is_CSP3: \n  assumes A : \"relation_of Ac is CSP3 healthy\"\n  shows \"relation_of (state_update_after sc Ac) is CSP3 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (state_update_after sc Ac) is CSP3 healthy", "apply (auto simp: relation_of_state_update_after relation_of_Skip rp_defs design_defs fun_eq_iff CSP3_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Ac (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, c)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (rule_tac b=aa in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Ac (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, aa)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Ac (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, c)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (split cond_splits, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of Ac (aa, bb)", "apply (subst A[simplified design_defs rp_defs CSP3_def relation_of_Skip])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> ((R3 \\<circ> R2 \\<circ> R1)\n                           (\\<lambda>(A, A').\n                               ok A \\<and> true (A, A') \\<longrightarrow>\n                               ok A' \\<and>\n                               (case (A, A') of\n                                (A, A') \\<Rightarrow>\n                                  tr A' = tr A \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A')) ;;\n                          action.relation_of Ac)\n                          (aa, bb)", "apply (auto simp: rp_defs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma state_update_after_is_CSP4: \"relation_of (state_update_after sc Ac) is CSP4 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (state_update_after sc Ac) is CSP4 healthy", "apply (auto simp: relation_of_state_update_after relation_of_Skip rp_defs design_defs fun_eq_iff CSP4_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Ac (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((action.relation_of Ac ;;\n                           ((\\<lambda>(A, A').\n                                \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                                ok A' \\<and>\n                                tr A = tr A' \\<and>\n                                wait A = wait A' \\<and>\n                                ref A = ref A' \\<and>\n                                alpha_rp.more A =\n                                alpha_rp.more\n                                 A') \\<triangleleft> wait \\<circ>\n               fst \\<triangleright> \n                               (\\<lambda>(A, A').\n                                   (ok A \\<and>\n                                    true\n                                     (A\\<lparr>tr := []\\<rparr>, A'\n\\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                    ok A' \\<and>\n                                    sc (alpha_rp.more A,\n  alpha_rp.more A') \\<and>\n                                    \\<not> wait A' \\<and>\n                                    [] = tr A' - tr A) \\<and>\n                                   tr A \\<le> tr A'))) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, c)\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ca, c);\n        action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (rule_tac b=c in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Ac (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, c)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Ac (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (c, c)\n 3. \\<And>c ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ca, c);\n        action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (rule_tac b=ba in comp_intro, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of Ac (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (c, c)\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ca, c);\n        action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         \\<not> true\n                 (bb\\<lparr>tr := []\\<rparr>, ca\n                  \\<lparr>tr := tr ca - tr bb\\<rparr>)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)\n 3. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<and>\n         true\n          (ca\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ca\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (bb, c)\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         \\<not> true\n                 (bb\\<lparr>tr := []\\<rparr>, ca\n                  \\<lparr>tr := tr ca - tr bb\\<rparr>)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)\n 3. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<and>\n         true\n          (ca\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ca\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok bb \\<and> tr bb \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr bb = tr c \\<and>\n                         wait c \\<and>\n                         ref bb = ref c \\<and>\n                         alpha_rp.more bb = alpha_rp.more c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         \\<not> true\n                 (bb\\<lparr>tr := []\\<rparr>, ca\n                  \\<lparr>tr := tr ca - tr bb\\<rparr>)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)\n 3. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<and>\n         true\n          (ca\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ca\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (case_tac \"ok bb\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); wait bb;\n        tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca;\n        \\<not> ok bb\\<rbrakk>\n       \\<Longrightarrow> tr bb \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr bb = tr c \\<and>\n                         wait c \\<and>\n                         ref bb = ref c \\<and>\n                         alpha_rp.more bb = alpha_rp.more c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         \\<not> true\n                 (bb\\<lparr>tr := []\\<rparr>, ca\n                  \\<lparr>tr := tr ca - tr bb\\<rparr>)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)\n 3. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<and>\n         true\n          (ca\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ca\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (case_tac \"tr bb \\<le> tr c\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); wait bb;\n        tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca;\n        \\<not> ok bb; \\<not> tr bb \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> ok c \\<and>\n                         tr bb = tr c \\<and>\n                         wait c \\<and>\n                         ref bb = ref c \\<and>\n                         alpha_rp.more bb = alpha_rp.more c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         \\<not> true\n                 (bb\\<lparr>tr := []\\<rparr>, ca\n                  \\<lparr>tr := tr ca - tr bb\\<rparr>)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)\n 3. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<and>\n         true\n          (ca\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ca\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (case_tac \"ok ca\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); wait bb; tr bb \\<le> tr ca;\n        \\<not> ok bb; \\<not> tr bb \\<le> tr c; \\<not> ok ca\\<rbrakk>\n       \\<Longrightarrow> ok c \\<and>\n                         tr bb = tr c \\<and>\n                         wait c \\<and>\n                         ref bb = ref c \\<and>\n                         alpha_rp.more bb = alpha_rp.more c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         \\<not> true\n                 (bb\\<lparr>tr := []\\<rparr>, ca\n                  \\<lparr>tr := tr ca - tr bb\\<rparr>)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)\n 3. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<and>\n         true\n          (ca\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ca\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (case_tac \"tr ca \\<le> tr c\", simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca; action.relation_of Ac (ab, bb); wait bb;\n        tr bb \\<le> tr ca; \\<not> ok bb; \\<not> tr bb \\<le> tr c;\n        \\<not> ok ca; tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> ok c \\<and>\n                         tr bb = tr c \\<and>\n                         wait c \\<and>\n                         ref bb = ref c \\<and>\n                         alpha_rp.more bb = alpha_rp.more c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         \\<not> true\n                 (bb\\<lparr>tr := []\\<rparr>, ca\n                  \\<lparr>tr := tr ca - tr bb\\<rparr>)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)\n 3. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<and>\n         true\n          (ca\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ca\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca; action.relation_of Ac (ab, bb); wait bb;\n        \\<exists>zs. tr ca = tr bb @ zs; \\<not> ok bb;\n        \\<forall>zs. tr c \\<noteq> tr bb @ zs; \\<not> ok ca;\n        \\<exists>zs. tr c = tr ca @ zs\\<rbrakk>\n       \\<Longrightarrow> ok c \\<and>\n                         tr bb = tr c \\<and>\n                         wait c \\<and>\n                         ref bb = ref c \\<and>\n                         alpha_rp.more bb = alpha_rp.more c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         \\<not> true\n                 (bb\\<lparr>tr := []\\<rparr>, ca\n                  \\<lparr>tr := tr ca - tr bb\\<rparr>)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)\n 3. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<and>\n         true\n          (ca\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ca\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (erule exE)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>c ab bb ca zs zsa.\n       \\<lbrakk>wait ca; action.relation_of Ac (ab, bb); wait bb;\n        \\<not> ok bb; \\<forall>zs. tr c \\<noteq> tr bb @ zs; \\<not> ok ca;\n        tr ca = tr bb @ zs; tr c = tr ca @ zsa\\<rbrakk>\n       \\<Longrightarrow> ok c \\<and>\n                         tr bb = tr c \\<and>\n                         wait c \\<and>\n                         ref bb = ref c \\<and>\n                         alpha_rp.more bb = alpha_rp.more c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         \\<not> true\n                 (bb\\<lparr>tr := []\\<rparr>, ca\n                  \\<lparr>tr := tr ca - tr bb\\<rparr>)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)\n 3. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<and>\n         true\n          (ca\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ca\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (erule_tac x=\"zs@zsa\" in allE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         \\<not> true\n                 (bb\\<lparr>tr := []\\<rparr>, ca\n                  \\<lparr>tr := tr ca - tr bb\\<rparr>)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<and>\n         true\n          (ca\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ca\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        (ok bb \\<longrightarrow>\n         \\<not> true\n                 (bb\\<lparr>tr := []\\<rparr>, ca\n                  \\<lparr>tr := tr ca - tr bb\\<rparr>)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (bb, c)\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<and>\n         true\n          (ca\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ca\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (split cond_splits, simp_all add: true_def)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        \\<not> ok ca \\<and> tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> tr bb \\<le> tr c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (case_tac \"ok ca\", simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca;\n        tr ca \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ca = tr c \\<and>\n        wait c \\<and>\n        ref ca = ref c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        action.relation_of Ac (ab, bb); \\<not> wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca; \\<not> ok ca\\<rbrakk>\n       \\<Longrightarrow> tr bb \\<le> tr c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (case_tac \"tr ca \\<le> tr c\", simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca; action.relation_of Ac (ab, bb); \\<not> wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca; \\<not> ok ca;\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr bb \\<le> tr c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>wait ca; action.relation_of Ac (ab, bb); \\<not> wait bb;\n        \\<not> ok bb \\<and> (\\<exists>zs. tr ca = tr bb @ zs); \\<not> ok ca;\n        \\<exists>zs. tr c = tr ca @ zs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr bb @ zs\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (erule exE | erule conjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c ab bb ca zs zsa.\n       \\<lbrakk>wait ca; action.relation_of Ac (ab, bb); \\<not> wait bb;\n        \\<not> ok ca; tr c = tr ca @ zs; \\<not> ok bb;\n        tr ca = tr bb @ zsa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>zs. tr c = tr bb @ zs\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (rule_tac x=\"zsa@zs\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of Ac ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   sc (alpha_rp.more A,\n alpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, c)", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>action.relation_of Ac (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 sc (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait ca;\n        (ok ca \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ca = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c) \\<and>\n        tr ca \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<longrightarrow>\n                                  ok A' \\<and>\n                                  sc (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (bb, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>\\<not> wait ca; action.relation_of Ac (ab, bb); wait bb;\n        ok ca \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ca = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        tr ca \\<le> tr c; \\<not> ok bb \\<and> tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> tr bb \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr bb = tr c \\<and>\n                         wait c \\<and>\n                         ref bb = ref c \\<and>\n                         alpha_rp.more bb = alpha_rp.more c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>\\<not> wait ca; action.relation_of Ac (ab, bb);\n        \\<not> wait bb;\n        ok ca \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ca = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        tr ca \\<le> tr c;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         sc (alpha_rp.more bb, alpha_rp.more ca) \\<and>\n         [] = tr ca - tr bb) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (ok bb \\<longrightarrow>\n                          sc (alpha_rp.more bb, alpha_rp.more c) \\<and>\n                          [] = tr c - tr bb) \\<and>\n                         tr bb \\<le> tr c", "apply (case_tac \"tr bb \\<le> tr c\", simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>\\<not> wait ca; action.relation_of Ac (ab, bb); wait bb;\n        ok ca \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ca = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        tr ca \\<le> tr c; \\<not> ok bb \\<and> tr bb \\<le> tr ca;\n        \\<not> tr bb \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> ok c \\<and>\n                         tr bb = tr c \\<and>\n                         wait c \\<and>\n                         ref bb = ref c \\<and>\n                         alpha_rp.more bb = alpha_rp.more c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>\\<not> wait ca; action.relation_of Ac (ab, bb);\n        \\<not> wait bb;\n        ok ca \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ca = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        tr ca \\<le> tr c;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         sc (alpha_rp.more bb, alpha_rp.more ca) \\<and>\n         [] = tr ca - tr bb) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (ok bb \\<longrightarrow>\n                          sc (alpha_rp.more bb, alpha_rp.more c) \\<and>\n                          [] = tr c - tr bb) \\<and>\n                         tr bb \\<le> tr c", "apply (simp add: prefix_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>\\<not> wait ca; action.relation_of Ac (ab, bb); wait bb;\n        ok ca \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ca = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        \\<exists>zs. tr c = tr ca @ zs;\n        \\<not> ok bb \\<and> (\\<exists>zs. tr ca = tr bb @ zs);\n        \\<forall>zs. tr c \\<noteq> tr bb @ zs\\<rbrakk>\n       \\<Longrightarrow> ok c \\<and>\n                         tr bb = tr c \\<and>\n                         wait c \\<and>\n                         ref bb = ref c \\<and>\n                         alpha_rp.more bb = alpha_rp.more c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>\\<not> wait ca; action.relation_of Ac (ab, bb);\n        \\<not> wait bb;\n        ok ca \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ca = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        tr ca \\<le> tr c;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         sc (alpha_rp.more bb, alpha_rp.more ca) \\<and>\n         [] = tr ca - tr bb) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (ok bb \\<longrightarrow>\n                          sc (alpha_rp.more bb, alpha_rp.more c) \\<and>\n                          [] = tr c - tr bb) \\<and>\n                         tr bb \\<le> tr c", "apply (erule exE | erule conjE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c ab bb ca zs zsa.\n       \\<lbrakk>\\<not> wait ca; action.relation_of Ac (ab, bb); wait bb;\n        ok ca \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ca = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        \\<forall>zs. tr c \\<noteq> tr bb @ zs; tr c = tr ca @ zs;\n        \\<not> ok bb; tr ca = tr bb @ zsa\\<rbrakk>\n       \\<Longrightarrow> ok c \\<and>\n                         tr bb = tr c \\<and>\n                         wait c \\<and>\n                         ref bb = ref c \\<and>\n                         alpha_rp.more bb = alpha_rp.more c\n 2. \\<And>c ab bb ca.\n       \\<lbrakk>\\<not> wait ca; action.relation_of Ac (ab, bb);\n        \\<not> wait bb;\n        ok ca \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ca = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        tr ca \\<le> tr c;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         sc (alpha_rp.more bb, alpha_rp.more ca) \\<and>\n         [] = tr ca - tr bb) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (ok bb \\<longrightarrow>\n                          sc (alpha_rp.more bb, alpha_rp.more c) \\<and>\n                          [] = tr c - tr bb) \\<and>\n                         tr bb \\<le> tr c", "apply (erule_tac x=\"zsa@zs\" in allE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c ab bb ca.\n       \\<lbrakk>\\<not> wait ca; action.relation_of Ac (ab, bb);\n        \\<not> wait bb;\n        ok ca \\<longrightarrow>\n        ok c \\<and>\n        tr c - tr ca = [] \\<and>\n        \\<not> wait c \\<and> alpha_rp.more ca = alpha_rp.more c;\n        tr ca \\<le> tr c;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         sc (alpha_rp.more bb, alpha_rp.more ca) \\<and>\n         [] = tr ca - tr bb) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (ok bb \\<longrightarrow>\n                          sc (alpha_rp.more bb, alpha_rp.more c) \\<and>\n                          [] = tr c - tr bb) \\<and>\n                         tr bb \\<le> tr c", "apply (auto simp add: prefix_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Sequential composition\\<close>"], ["", "definition \nSeq::\"('\\<theta>::ev_eq,'\\<sigma>) action \\<Rightarrow> ('\\<theta>,'\\<sigma>) action \\<Rightarrow> ('\\<theta>,'\\<sigma>) action\" (infixl \"`;`\" 24)\nwhere \"P `;` Q \\<equiv> action_of (relation_of P ;; relation_of Q)\""], ["", "lemma Seq_is_action: \"(relation_of P ;; relation_of Q) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (action.relation_of P ;; action.relation_of Q)\n    \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process (action.relation_of P ;; action.relation_of Q)", "apply (rule seq_CSP[OF relation_of_CSP[THEN CSP_is_CSP1] relation_of_CSP[THEN CSP_is_R] relation_of_CSP])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas Seq_is_CSP = Seq_is_action[simplified]"], ["", "lemma relation_of_Seq: \"relation_of (P `;` Q) = (relation_of P ;; relation_of Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (P `;` Q) =\n    (action.relation_of P ;; action.relation_of Q)", "by (simp add: Seq_def action_of_inverse Seq_is_CSP)"], ["", "lemma mono_Seq: \"mono ((`;`) P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono ((`;`) P)", "by (auto simp: mono_def less_eq_action ref_def relation_of_Seq)"], ["", "lemma CSP3_imp_left_Skip:\n  assumes A: \"relation_of P is CSP3 healthy\"\n  shows \"(Skip `;` P) = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Skip `;` P) = P", "apply (subst relation_of_inject[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (Skip `;` P) = action.relation_of P", "apply (simp add: relation_of_Seq A[simplified design_defs CSP3_def, symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma CSP4_imp_right_Skip:\n  assumes A: \"relation_of P is CSP4 healthy\"\n  shows \"(P `;` Skip) = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P `;` Skip) = P", "apply (subst relation_of_inject[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (P `;` Skip) = action.relation_of P", "apply (simp add: relation_of_Seq A[simplified design_defs CSP4_def, symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Seq_assoc: \"(A `;` (B `;` C)) = ((A `;` B) `;` C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A `;` (B `;` C)) = (A `;` B `;` C)", "by (auto simp: relation_of_inject[symmetric] fun_eq_iff relation_of_Seq rp_defs design_defs)"], ["", "lemma Skip_absorb: \"(Skip `;` Skip) = Skip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Skip `;` Skip) = Skip", "by (auto simp: Skip_comp_absorb relation_of_inject[symmetric] relation_of_Seq)"], ["", "subsection \\<open>Internal choice\\<close>"], ["", "definition \nNdet::\"('\\<theta>::ev_eq,'\\<sigma>) action \\<Rightarrow> ('\\<theta>,'\\<sigma>) action \\<Rightarrow> ('\\<theta>,'\\<sigma>) action\" (infixl \"\\<sqinter>\" 18) \nwhere \"P \\<sqinter> Q \\<equiv> action_of ((relation_of P) \\<or> (relation_of Q))\""], ["", "lemma Ndet_is_action: \"((relation_of P) \\<or> (relation_of Q)) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (action.relation_of P \\<or> action.relation_of Q)\n    \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process (action.relation_of P \\<or> action.relation_of Q)", "apply (rule disj_CSP)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_CSP_process (action.relation_of P)\n 2. is_CSP_process (action.relation_of Q)", "apply (simp_all add: relation_of_CSP)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas Ndet_is_CSP = Ndet_is_action[simplified]"], ["", "lemma relation_of_Ndet: \"relation_of (P \\<sqinter> Q) = ((relation_of P) \\<or> (relation_of Q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (P \\<sqinter> Q) =\n    (action.relation_of P \\<or> action.relation_of Q)", "by (simp add: Ndet_def action_of_inverse Ndet_is_CSP)"], ["", "lemma mono_Ndet: \"mono ((\\<sqinter>) P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono ((\\<sqinter>) P)", "by (auto simp: mono_def less_eq_action ref_def relation_of_Ndet)"], ["", "subsection \\<open>External choice\\<close>"], ["", "definition\nDet::\"('\\<theta>::ev_eq,'\\<sigma>) action \\<Rightarrow> ('\\<theta>,'\\<sigma>) action \\<Rightarrow> ('\\<theta>,'\\<sigma>) action\" (infixl \"\\<box>\" 18)\nwhere \"P \\<box> Q \\<equiv> action_of(R((\\<not>((relation_of P)\\<^sup>f\\<^sub>f) \\<and> \\<not>((relation_of Q)\\<^sup>f\\<^sub>f)) \\<turnstile>\n                                             (((relation_of P)\\<^sup>t\\<^sub>f \\<and> ((relation_of Q)\\<^sup>t\\<^sub>f))\n                                                \\<triangleleft> \\<lambda>(A, A'). tr A = tr A' \\<and> wait A' \\<triangleright>\n                                              ((relation_of P)\\<^sup>t\\<^sub>f \\<or> ((relation_of Q)\\<^sup>t\\<^sub>f)))))\""], ["", "lemma Det_is_action: \n\"(R((\\<not>((relation_of P)\\<^sup>f\\<^sub>f) \\<and> \\<not>((relation_of Q)\\<^sup>f\\<^sub>f)) \\<turnstile>\n           (((relation_of P)\\<^sup>t\\<^sub>f \\<and> ((relation_of Q)\\<^sup>t\\<^sub>f))\n              \\<triangleleft> \\<lambda>(A, A'). tr A = tr A' \\<and> wait A' \\<triangleright>\n            ((relation_of P)\\<^sup>t\\<^sub>f \\<or> ((relation_of Q)\\<^sup>t\\<^sub>f))))) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (\\<not> action.relation_of P\\<^sup>f\\<^sub>f \\<and>\n       \\<not> action.relation_of\n               Q\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n         P\\<^sup>t\\<^sub>f \\<and>\n        action.relation_of\n         Q\\<^sup>t\\<^sub>f \\<triangleleft> \\<lambda>(A, A').\n        tr A = tr A' \\<and> wait A' \\<triangleright> \n           action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n           action.relation_of Q\\<^sup>t\\<^sub>f)\n    \\<in> {p. is_CSP_process p}", "apply (simp add: spec_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (R ((\\<lambda>A.\n             \\<not> (case A of\n                     (A, A') \\<Rightarrow>\n                       action.relation_of P\n                        (A\\<lparr>wait := False\\<rparr>, A'\n                         \\<lparr>ok := False\\<rparr>))) \\<and>\n         (\\<lambda>A.\n             \\<not> (case A of\n                     (A, A') \\<Rightarrow>\n                       action.relation_of Q\n                        (A\\<lparr>wait := False\\<rparr>, A'\n                         \\<lparr>ok :=\n                                   False\\<rparr>))) \\<turnstile> (\\<lambda>(A,\n                               A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of Q\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok :=\n     True\\<rparr>)) \\<triangleleft> \\<lambda>(A, A').\n tr A = tr A' \\<and> wait A' \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  action.relation_of P\n                                   (A\\<lparr>wait := False\\<rparr>, A'\n                                    \\<lparr>ok := True\\<rparr>)) \\<or>\n                              (\\<lambda>(A, A').\n                                  action.relation_of Q\n                                   (A\\<lparr>wait := False\\<rparr>, A'\n                                    \\<lparr>ok := True\\<rparr>))))", "apply (rule rd_is_CSP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       ((\\<lambda>A.\n            \\<not> (case A of\n                    (A, A') \\<Rightarrow>\n                      action.relation_of P\n                       (A\\<lparr>wait := False\\<rparr>, A'\n                        \\<lparr>ok := False\\<rparr>))) \\<and>\n        (\\<lambda>A.\n            \\<not> (case A of\n                    (A, A') \\<Rightarrow>\n                      action.relation_of Q\n                       (A\\<lparr>wait := False\\<rparr>, A'\n                        \\<lparr>ok := False\\<rparr>))))\n        (a, b\\<lparr>ok := True\\<rparr>) \\<longrightarrow>\n       ((\\<lambda>A.\n            \\<not> (case A of\n                    (A, A') \\<Rightarrow>\n                      action.relation_of P\n                       (A\\<lparr>wait := False\\<rparr>, A'\n                        \\<lparr>ok := False\\<rparr>))) \\<and>\n        (\\<lambda>A.\n            \\<not> (case A of\n                    (A, A') \\<Rightarrow>\n                      action.relation_of Q\n                       (A\\<lparr>wait := False\\<rparr>, A'\n                        \\<lparr>ok := False\\<rparr>))))\n        (a, b\\<lparr>ok := False\\<rparr>)", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas Det_is_CSP = Det_is_action[simplified]"], ["", "lemma relation_of_Det:\n\"relation_of (P \\<box> Q) = (R((\\<not>((relation_of P)\\<^sup>f\\<^sub>f) \\<and> \\<not>((relation_of Q)\\<^sup>f\\<^sub>f)) \\<turnstile>\n                                          (((relation_of P)\\<^sup>t\\<^sub>f \\<and> ((relation_of Q)\\<^sup>t\\<^sub>f))\n                                             \\<triangleleft> \\<lambda>(A, A'). tr A = tr A' \\<and> wait A' \\<triangleright>\n                                           ((relation_of P)\\<^sup>t\\<^sub>f \\<or> ((relation_of Q)\\<^sup>t\\<^sub>f)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (P \\<box> Q) =\n    R (\\<not> action.relation_of P\\<^sup>f\\<^sub>f \\<and>\n       \\<not> action.relation_of\n               Q\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n         P\\<^sup>t\\<^sub>f \\<and>\n        action.relation_of\n         Q\\<^sup>t\\<^sub>f \\<triangleleft> \\<lambda>(A, A').\n        tr A = tr A' \\<and> wait A' \\<triangleright> \n           action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n           action.relation_of Q\\<^sup>t\\<^sub>f)", "apply (unfold Det_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of\n     (action_of\n       (R (\\<not> action.relation_of P\\<^sup>f\\<^sub>f \\<and>\n           \\<not> action.relation_of\n                   Q\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n             P\\<^sup>t\\<^sub>f \\<and>\n            action.relation_of\n             Q\\<^sup>t\\<^sub>f \\<triangleleft> \\<lambda>(A, A').\n            tr A = tr A' \\<and> wait A' \\<triangleright> \n               action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n               action.relation_of Q\\<^sup>t\\<^sub>f))) =\n    R (\\<not> action.relation_of P\\<^sup>f\\<^sub>f \\<and>\n       \\<not> action.relation_of\n               Q\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n         P\\<^sup>t\\<^sub>f \\<and>\n        action.relation_of\n         Q\\<^sup>t\\<^sub>f \\<triangleleft> \\<lambda>(A, A').\n        tr A = tr A' \\<and> wait A' \\<triangleright> \n           action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n           action.relation_of Q\\<^sup>t\\<^sub>f)", "apply (rule action_of_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. R (\\<not> action.relation_of P\\<^sup>f\\<^sub>f \\<and>\n       \\<not> action.relation_of\n               Q\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n         P\\<^sup>t\\<^sub>f \\<and>\n        action.relation_of\n         Q\\<^sup>t\\<^sub>f \\<triangleleft> \\<lambda>(A, A').\n        tr A = tr A' \\<and> wait A' \\<triangleright> \n           action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n           action.relation_of Q\\<^sup>t\\<^sub>f)\n    \\<in> {p. is_CSP_process p}", "apply (rule Det_is_action)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mono_Det: \"mono ((\\<box>) P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono ((\\<box>) P)", "by (auto simp: mono_def less_eq_action ref_def relation_of_Det design_defs rp_defs fun_eq_iff \n            split: cond_splits dest: relation_of_spec_f_f[simplified] \n                                     relation_of_spec_t_f[simplified])"], ["", "subsection \\<open>Reactive design assignment\\<close>"], ["", "definition \n\"rd_assign s = action_of (R (true \\<turnstile> \\<lambda>(A, A'). ref A' = ref A \\<and> tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = s))\""], ["", "lemma rd_assign_is_action: \n\"(R (true \\<turnstile> \\<lambda>(A, A'). ref A' = ref A \\<and> tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = s)) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (true \\<turnstile> \\<lambda>(A, A').\n                            ref A' = ref A \\<and>\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and> alpha_rp.more A' = s)\n    \\<in> {p. is_CSP_process p}", "apply (auto simp:)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (R (true \\<turnstile> \\<lambda>(A, A').\n                              ref A' = ref A \\<and>\n                              tr A' = tr A \\<and>\n                              \\<not> wait A' \\<and> alpha_rp.more A' = s))", "apply (rule rd_is_CSP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       true (a, b\\<lparr>ok := True\\<rparr>) \\<longrightarrow>\n       true (a, b\\<lparr>ok := False\\<rparr>)", "by auto"], ["", "lemmas rd_assign_is_CSP = rd_assign_is_action[simplified]"], ["", "lemma relation_of_rd_assign: \n\"relation_of (rd_assign s) = \n                  (R (true \\<turnstile> \\<lambda>(A, A'). ref A' = ref A \\<and> tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (rd_assign s) =\n    R (true \\<turnstile> \\<lambda>(A, A').\n                            ref A' = ref A \\<and>\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and> alpha_rp.more A' = s)", "by (simp add: rd_assign_def  action_of_inverse rd_assign_is_CSP)"], ["", "subsection \\<open>Local state external choice\\<close>"], ["", "definition\nLoc::\"'\\<sigma> \\<Rightarrow> ('\\<theta>::ev_eq,'\\<sigma>) action \\<Rightarrow> '\\<sigma> \\<Rightarrow> ('\\<theta>,'\\<sigma>) action \\<Rightarrow> ('\\<theta>,'\\<sigma>) action\" \n                                        (\"'(()loc _ \\<bullet> _ ') \\<boxplus> '(()loc _ \\<bullet> _ ')\")\nwhere \"(loc s1 \\<bullet> P) \\<boxplus> (loc s2 \\<bullet> Q) \\<equiv> \n                   ((rd_assign s1)`;`P) \\<box> ((rd_assign s2)`;` Q)\""], ["", "subsection \\<open>Schema expression\\<close>"], ["", "definition Schema :: \"'\\<sigma> relation \\<Rightarrow> ('\\<theta>::ev_eq,'\\<sigma>) action\" where\n\"Schema sc \\<equiv> action_of(R ((\\<lambda>(A, A'). (Pre sc) (more A)) \\<turnstile> \n                           (\\<lambda>(A, A'). sc (more A, more A') \\<and> \\<not>wait A' \\<and> tr A = tr A')))\""], ["", "lemma Schema_is_action: \n\"(R ((\\<lambda>(A, A'). (Pre sc) (more A)) \\<turnstile> \n                 (\\<lambda>(A, A'). sc (more A, more A') & \\<not>wait A' & tr A = tr A'))) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (\\<lambda>(A, A').\n          Pre sc\n           (alpha_rp.more\n             A) \\<turnstile> \\<lambda>(A, A').\n                                sc (alpha_rp.more A,\n                                    alpha_rp.more A') \\<and>\n                                \\<not> wait A' \\<and> tr A = tr A')\n    \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (R (\\<lambda>(A, A').\n            Pre sc\n             (alpha_rp.more\n               A) \\<turnstile> \\<lambda>(A, A').\n                                  sc (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and> tr A = tr A'))", "apply (rule rd_is_CSP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       (case (a, b\\<lparr>ok := True\\<rparr>) of\n        (A, A') \\<Rightarrow> Pre sc (alpha_rp.more A)) \\<longrightarrow>\n       (case (a, b\\<lparr>ok := False\\<rparr>) of\n        (A, A') \\<Rightarrow> Pre sc (alpha_rp.more A))", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas Schema_is_CSP = Schema_is_action[simplified]"], ["", "lemma relation_of_Schema:\n\"relation_of (Schema sc) = (R ((\\<lambda>(A, A'). (Pre sc) (more A)) \\<turnstile> \n                          (\\<lambda>(A, A'). sc (more A, more A') \\<and> \\<not>wait A' \\<and> tr A = tr A')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (Schema sc) =\n    R (\\<lambda>(A, A').\n          Pre sc\n           (alpha_rp.more\n             A) \\<turnstile> \\<lambda>(A, A').\n                                sc (alpha_rp.more A,\n                                    alpha_rp.more A') \\<and>\n                                \\<not> wait A' \\<and> tr A = tr A')", "by (simp add: Schema_def action_of_inverse Schema_is_CSP)"], ["", "lemma Schema_is_state_update_before: \"Schema u = state_update_before u Skip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Schema u = state_update_before u Skip", "apply (subst relation_of_inject[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (Schema u) =\n    action.relation_of (state_update_before u Skip)", "apply (auto simp: relation_of_Schema relation_of_state_update_before relation_of_Skip rp_defs fun_eq_iff\n                  design_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and> Pre u (alpha_rp.more A) \\<longrightarrow>\n                ok A' \\<and>\n                u (alpha_rp.more A, alpha_rp.more A') \\<and>\n                \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and> Pre u (alpha_rp.more A) \\<longrightarrow>\n                 ok A' \\<and>\n                 u (alpha_rp.more A, alpha_rp.more A') \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre u (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         u (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre u (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  u (alpha_rp.more A,\n                                     alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre u (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   u (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and> Pre u (alpha_rp.more a) \\<longrightarrow>\n         ok b \\<and>\n         u (alpha_rp.more a, alpha_rp.more b) \\<and>\n         \\<not> wait b \\<and> [] = tr b - tr a) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre u (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   u (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre u (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         u (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre u (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  u (alpha_rp.more A,\n                                     alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (rule comp_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre u (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  u (alpha_rp.more A,\n                                     alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, ?b26 a b)\n 2. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (?b26 a b, b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and> Pre u (alpha_rp.more a) \\<longrightarrow>\n         ok b \\<and>\n         u (alpha_rp.more a, alpha_rp.more b) \\<and>\n         \\<not> wait b \\<and> [] = tr b - tr a) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre u (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   u (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 4. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre u (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         u (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre u (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  u (alpha_rp.more A,\n                                     alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and> Pre u (alpha_rp.more a) \\<longrightarrow>\n         ok b \\<and>\n         u (alpha_rp.more a, alpha_rp.more b) \\<and>\n         \\<not> wait b \\<and> [] = tr b - tr a) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   Pre u (alpha_rp.more A) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   u (alpha_rp.more A,\nalpha_rp.more A') \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre u (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         u (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre u (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  u (alpha_rp.more A,\n                                     alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (rule comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and> Pre u (alpha_rp.more a) \\<longrightarrow>\n         ok b \\<and>\n         u (alpha_rp.more a, alpha_rp.more b) \\<and>\n         \\<not> wait b \\<and> [] = tr b - tr a) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre u (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  u (alpha_rp.more A,\n                                     alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, ?b37 a b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and> Pre u (alpha_rp.more a) \\<longrightarrow>\n         ok b \\<and>\n         u (alpha_rp.more a, alpha_rp.more b) \\<and>\n         \\<not> wait b \\<and> [] = tr b - tr a) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (?b37 a b, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         Pre u (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         u (alpha_rp.more A, alpha_rp.more A') \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  Pre u (alpha_rp.more A) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  u (alpha_rp.more A,\n                                     alpha_rp.more A') \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and> Pre u (alpha_rp.more aa) \\<longrightarrow>\n         ok ba \\<and>\n         u (alpha_rp.more aa, alpha_rp.more ba) \\<and>\n         \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          Pre u (alpha_rp.more aa) \\<longrightarrow>\n                          ok c \\<and>\n                          u (alpha_rp.more aa, alpha_rp.more c) \\<and>\n                          \\<not> wait c \\<and> [] = tr c - tr aa) \\<and>\n                         tr aa \\<le> tr c", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<and> Pre u (alpha_rp.more aa) \\<longrightarrow>\n         ok ba \\<and>\n         u (alpha_rp.more aa, alpha_rp.more ba) \\<and>\n         \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          Pre u (alpha_rp.more aa) \\<longrightarrow>\n                          ok c \\<and>\n                          u (alpha_rp.more aa, alpha_rp.more c) \\<and>\n                          \\<not> wait c \\<and> [] = tr c - tr aa) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba;\n        ok aa \\<longrightarrow> \\<not> Pre u (alpha_rp.more aa);\n        tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          Pre u (alpha_rp.more aa) \\<longrightarrow>\n                          ok c \\<and>\n                          u (alpha_rp.more aa, alpha_rp.more c) \\<and>\n                          \\<not> wait c \\<and> [] = tr c - tr aa) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<and> Pre u (alpha_rp.more aa) \\<longrightarrow>\n        ok ba \\<and>\n        u (alpha_rp.more aa, alpha_rp.more ba) \\<and> [] = tr ba - tr aa;\n        tr aa \\<le> tr ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          Pre u (alpha_rp.more aa) \\<longrightarrow>\n                          ok c \\<and>\n                          u (alpha_rp.more aa, alpha_rp.more c) \\<and>\n                          \\<not> wait c \\<and> [] = tr c - tr aa) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 4. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c", "apply (auto simp: prefix_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Parallel composition\\<close>"], ["", "type_synonym '\\<sigma> local_state = \"('\\<sigma> \\<times> ('\\<sigma>  \\<Rightarrow> '\\<sigma> \\<Rightarrow> '\\<sigma>))\""], ["", "fun MergeSt :: \"'\\<sigma> local_state \\<Rightarrow> '\\<sigma> local_state \\<Rightarrow> ('\\<theta>,'\\<sigma>) relation_rp\" where \n\"MergeSt (s1,s1') (s2,s2') = ((\\<lambda>(S, S'). (s1' s1) (more S) = more S');; \n                            (\\<lambda>(S::('\\<theta>,'\\<sigma>) alphabet_rp, S'). (s2' s2) (more S) = more S'))\""], ["", "definition listCons ::\"'\\<theta> \\<Rightarrow> '\\<theta> list list \\<Rightarrow> '\\<theta> list list\" (\"_ ## _\") where\n\"a ## l = ((map (Cons a)) l)\""], ["", "fun ParMergel :: \"'\\<theta>::ev_eq list \\<Rightarrow> '\\<theta> list \\<Rightarrow> '\\<theta> set \\<Rightarrow> '\\<theta> list list\" where\n    \"ParMergel [] [] cs = [[]]\"\n  | \"ParMergel [] (b#tr2) cs = (if (filter_chan_set b cs) then [[]]\n                                          else (b ## (ParMergel [] tr2 cs)))\" \n  | \"ParMergel (a#tr1) [] cs = (if (filter_chan_set a cs) then [[]]\n                                          else (a ## (ParMergel tr1 [] cs)))\"\n  | \"ParMergel (a#tr1) (b#tr2) cs =\n           (if (filter_chan_set a cs)\n                   then (if (ev_eq a b)\n                              then (a ## (ParMergel tr1 tr2 cs)) \n                               else (if (filter_chan_set b cs) \n                                        then [[]] \n                                         else (b ## (ParMergel (a#tr1) tr2 cs))))\n                     else (if (filter_chan_set b cs) \n                               then (a ## (ParMergel tr1 (b#tr2) cs)) \n                                 else (a ## (ParMergel tr1 (b#tr2) cs)) \n                                            @ (b ## (ParMergel (a#tr1) tr2 cs))))\""], ["", "definition ParMerge::\"'\\<theta>::ev_eq list \\<Rightarrow> '\\<theta> list \\<Rightarrow> '\\<theta> set \\<Rightarrow> '\\<theta> list set\" where\n\"ParMerge tr1 tr2 cs = set (ParMergel tr1 tr2 cs)\""], ["", "lemma set_Cons1: \"tr1 \\<in> set l \\<Longrightarrow> a # tr1 \\<in> (#) a ` set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tr1 \\<in> set l \\<Longrightarrow> a # tr1 \\<in> (#) a ` set l", "by (auto)"], ["", "lemma tr_in_set_eq: \"(tr1 \\<in> (#) b ` set l) = (tr1 \\<noteq> [] \\<and> hd tr1 = b \\<and> tl tr1 \\<in> set l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (tr1 \\<in> (#) b ` set l) =\n    (tr1 \\<noteq> [] \\<and> hd tr1 = b \\<and> tl tr1 \\<in> set l)", "by (induct l) auto"], ["", "definition M_par::\"(('\\<theta>::ev_eq), '\\<sigma>) alpha_rp_scheme \\<Rightarrow> ('\\<sigma>  \\<Rightarrow> '\\<sigma> \\<Rightarrow> '\\<sigma>)\n                            \\<Rightarrow> ('\\<theta>, '\\<sigma>) alpha_rp_scheme \\<Rightarrow> ('\\<sigma> \\<Rightarrow> '\\<sigma> \\<Rightarrow> '\\<sigma>)\n                                \\<Rightarrow> ('\\<theta> set) \\<Rightarrow> ('\\<theta>, '\\<sigma>) relation_rp\" where\n\"M_par s1 x1 s2 x2 cs = \n((\\<lambda>(S, S'). ((diff_tr S' S) \\<in> ParMerge (diff_tr s1 S) (diff_tr s2 S) cs &\n     ev_eq (tr_filter (tr s1) cs) (tr_filter (tr s2) cs))) \\<and>\n   ((\\<lambda>(S, S'). (wait s1 \\<or> wait s2) \\<and> \n                             ref S' \\<subseteq> ((((ref s1)\\<union>(ref s2))\\<inter>cs)\\<union>(((ref s1)\\<inter>(ref s2))-cs)))\n   \\<triangleleft> wait o snd \\<triangleright>\n   ((\\<lambda>(S, S'). (\\<not>wait s1 \\<or> \\<not>wait s2)) \\<and> MergeSt ((more s1), x1) ((more s2), x2))))\""], ["", "definition  Par::\"('\\<theta>::ev_eq,'\\<sigma>) action \\<Rightarrow> \n                    ('\\<sigma>  \\<Rightarrow> '\\<sigma> \\<Rightarrow> '\\<sigma>) \\<Rightarrow> '\\<theta> set \\<Rightarrow> ('\\<sigma>  \\<Rightarrow> '\\<sigma> \\<Rightarrow> '\\<sigma>) \\<Rightarrow> \n                    ('\\<theta>,'\\<sigma>) action \\<Rightarrow> ('\\<theta>,'\\<sigma>) action\" (\"_ \\<lbrakk> _ | _ | _ \\<rbrakk> _\") where\n\"A1 \\<lbrakk> ns1 | cs | ns2 \\<rbrakk> A2 \\<equiv> (action_of (R ((\\<lambda> (S, S'). \n \\<not> (\\<exists> tr1 tr2. ((relation_of A1)\\<^sup>f\\<^sub>f ;; (\\<lambda> (S, S'). tr1 = (tr S))) (S, S') \n \\<and> (spec False (wait S) (relation_of A2) ;; (\\<lambda> (S, _). tr2 = (tr S))) (S, S')\n \\<and> ((tr_filter tr1 cs) = (tr_filter tr2 cs))) \\<and>\n \\<not> (\\<exists> tr1 tr2. (spec False (wait S) (relation_of A1);;(\\<lambda>(S, _). tr1 = tr S)) (S, S')\n \\<and> ((relation_of A2)\\<^sup>f\\<^sub>f ;; (\\<lambda>(S, S'). tr2 = (tr S))) (S, S') \n \\<and> ((tr_filter tr1 cs) = (tr_filter tr2 cs)))) \\<turnstile> \n   (\\<lambda> (S, S'). (\\<exists> s1 s2. ((\\<lambda> (A, A'). (relation_of A1)\\<^sup>t\\<^sub>f (A, s1)\n \\<and> ((relation_of A2)\\<^sup>t\\<^sub>f (A, s2)));; M_par s1 ns1 s2 ns2 cs) (S, S'))))))\""], ["", "lemma Par_is_action: \"(R ((\\<lambda> (S, S'). \n \\<not> (\\<exists> tr1 tr2. ((relation_of A1)\\<^sup>f\\<^sub>f ;; (\\<lambda> (S, S'). tr1 = (tr S))) (S, S') \n \\<and> (spec False (wait S) (relation_of A2) ;; (\\<lambda> (S, S'). tr2 = (tr S))) (S, S')\n \\<and> ((tr_filter tr1 cs) = (tr_filter tr2 cs))) \\<and>\n \\<not> (\\<exists> tr1 tr2. (spec False (wait S) (relation_of A1);;(\\<lambda>(S, _). tr1 = tr S)) (S, S')\n \\<and> ((relation_of A2)\\<^sup>f\\<^sub>f ;; (\\<lambda> (S, S'). tr2 = (tr S))) (S, S') \n \\<and> ((tr_filter tr1 cs) = (tr_filter tr2 cs)))) \\<turnstile> \n   (\\<lambda> (S, S'). (\\<exists> s1 s2. ((\\<lambda> (A, A'). (relation_of A1)\\<^sup>t\\<^sub>f (A, s1)\n \\<and> ((relation_of A2)\\<^sup>t\\<^sub>f (A, s2)));; M_par s1 ns1 s2 ns2 cs) (S, S'))))) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (\\<lambda>(S, S').\n          (\\<nexists>tr1 tr2.\n              (action.relation_of A1\\<^sup>f\\<^sub>f ;;\n               (\\<lambda>(S, S'). tr1 = tr S))\n               (S, S') \\<and>\n              (spec False (wait S) (action.relation_of A2) ;;\n               (\\<lambda>(S, S'). tr2 = tr S))\n               (S, S') \\<and>\n              tr_filter tr1 cs = tr_filter tr2 cs) \\<and>\n          (\\<nexists>tr1 tr2.\n              (spec False (wait S) (action.relation_of A1) ;;\n               (\\<lambda>(S, uu_). tr1 = tr S))\n               (S, S') \\<and>\n              (action.relation_of A2\\<^sup>f\\<^sub>f ;;\n               (\\<lambda>(S, S'). tr2 = tr S))\n               (S, S') \\<and>\n              tr_filter tr1 cs =\n              tr_filter tr2\n               cs) \\<turnstile> \\<lambda>(S, S').\n                                   \\<exists>s1 s2.\n((\\<lambda>(A, A').\n     action.relation_of A1\\<^sup>t\\<^sub>f (A, s1) \\<and>\n     action.relation_of A2\\<^sup>t\\<^sub>f (A, s2)) ;;\n M_par s1 ns1 s2 ns2 cs)\n (S, S'))\n    \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (R (\\<lambda>(S, S').\n            (\\<forall>tr1.\n                (action.relation_of A1\\<^sup>f\\<^sub>f ;;\n                 (\\<lambda>(S, S'). tr1 = tr S))\n                 (S, S') \\<longrightarrow>\n                (\\<forall>tr2.\n                    (spec False (wait S) (action.relation_of A2) ;;\n                     (\\<lambda>(S, S'). tr2 = tr S))\n                     (S, S') \\<longrightarrow>\n                    tr_filter tr1 cs \\<noteq> tr_filter tr2 cs)) \\<and>\n            (\\<forall>tr1.\n                (spec False (wait S) (action.relation_of A1) ;;\n                 (\\<lambda>(S, uu_). tr1 = tr S))\n                 (S, S') \\<longrightarrow>\n                (\\<forall>tr2.\n                    (action.relation_of A2\\<^sup>f\\<^sub>f ;;\n                     (\\<lambda>(S, S'). tr2 = tr S))\n                     (S, S') \\<longrightarrow>\n                    tr_filter tr1 cs \\<noteq>\n                    tr_filter tr2\n                     cs)) \\<turnstile> \\<lambda>(S, S').\n    \\<exists>s1 s2.\n       ((\\<lambda>(A, A').\n            action.relation_of A1\\<^sup>t\\<^sub>f (A, s1) \\<and>\n            action.relation_of A2\\<^sup>t\\<^sub>f (A, s2)) ;;\n        M_par s1 ns1 s2 ns2 cs)\n        (S, S')))", "apply (rule rd_is_CSP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       (case (a, b\\<lparr>ok := True\\<rparr>) of\n        (S, S') \\<Rightarrow>\n          (\\<forall>tr1.\n              (action.relation_of A1\\<^sup>f\\<^sub>f ;;\n               (\\<lambda>(S, S'). tr1 = tr S))\n               (S, S') \\<longrightarrow>\n              (\\<forall>tr2.\n                  (spec False (wait S) (action.relation_of A2) ;;\n                   (\\<lambda>(S, S'). tr2 = tr S))\n                   (S, S') \\<longrightarrow>\n                  tr_filter tr1 cs \\<noteq> tr_filter tr2 cs)) \\<and>\n          (\\<forall>tr1.\n              (spec False (wait S) (action.relation_of A1) ;;\n               (\\<lambda>(S, uu_). tr1 = tr S))\n               (S, S') \\<longrightarrow>\n              (\\<forall>tr2.\n                  (action.relation_of A2\\<^sup>f\\<^sub>f ;;\n                   (\\<lambda>(S, S'). tr2 = tr S))\n                   (S, S') \\<longrightarrow>\n                  tr_filter tr1 cs \\<noteq>\n                  tr_filter tr2 cs))) \\<longrightarrow>\n       (case (a, b\\<lparr>ok := False\\<rparr>) of\n        (S, S') \\<Rightarrow>\n          (\\<forall>tr1.\n              (action.relation_of A1\\<^sup>f\\<^sub>f ;;\n               (\\<lambda>(S, S'). tr1 = tr S))\n               (S, S') \\<longrightarrow>\n              (\\<forall>tr2.\n                  (spec False (wait S) (action.relation_of A2) ;;\n                   (\\<lambda>(S, S'). tr2 = tr S))\n                   (S, S') \\<longrightarrow>\n                  tr_filter tr1 cs \\<noteq> tr_filter tr2 cs)) \\<and>\n          (\\<forall>tr1.\n              (spec False (wait S) (action.relation_of A1) ;;\n               (\\<lambda>(S, uu_). tr1 = tr S))\n               (S, S') \\<longrightarrow>\n              (\\<forall>tr2.\n                  (action.relation_of A2\\<^sup>f\\<^sub>f ;;\n                   (\\<lambda>(S, S'). tr2 = tr S))\n                   (S, S') \\<longrightarrow>\n                  tr_filter tr1 cs \\<noteq> tr_filter tr2 cs)))", "apply (blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas Par_is_CSP = Par_is_action[simplified]"], ["", "lemma relation_of_Par:\n\"relation_of (A1 \\<lbrakk> ns1 | cs | ns2 \\<rbrakk> A2) = (R ((\\<lambda> (S, S'). \n \\<not> (\\<exists> tr1 tr2. ((relation_of A1)\\<^sup>f\\<^sub>f ;; (\\<lambda> (S, S'). tr1 = (tr S))) (S, S') \n \\<and> (spec False (wait S) (relation_of A2) ;; (\\<lambda> (S, S'). tr2 = (tr S))) (S, S') \n \\<and> ((tr_filter tr1 cs) = (tr_filter tr2 cs))) \\<and>\n \\<not> (\\<exists> tr1 tr2. (spec False (wait S) (relation_of A1);;(\\<lambda>(S, _). tr1 = tr S)) (S, S') \n \\<and> ((relation_of A2)\\<^sup>f\\<^sub>f ;; (\\<lambda> (S, S'). tr2 = (tr S))) (S, S') \n \\<and> ((tr_filter tr1 cs) = (tr_filter tr2 cs)))) \\<turnstile> \n   (\\<lambda> (S, S'). (\\<exists> s1 s2. ((\\<lambda> (A, A'). (relation_of A1)\\<^sup>t\\<^sub>f (A, s1)\n \\<and> ((relation_of A2)\\<^sup>t\\<^sub>f (A, s2)));; M_par s1 ns1 s2 ns2 cs) (S, S')))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of A1 \\<lbrakk> ns1 | cs | ns2 \\<rbrakk> A2 =\n    R (\\<lambda>(S, S').\n          (\\<nexists>tr1 tr2.\n              (action.relation_of A1\\<^sup>f\\<^sub>f ;;\n               (\\<lambda>(S, S'). tr1 = tr S))\n               (S, S') \\<and>\n              (spec False (wait S) (action.relation_of A2) ;;\n               (\\<lambda>(S, S'). tr2 = tr S))\n               (S, S') \\<and>\n              tr_filter tr1 cs = tr_filter tr2 cs) \\<and>\n          (\\<nexists>tr1 tr2.\n              (spec False (wait S) (action.relation_of A1) ;;\n               (\\<lambda>(S, uu_). tr1 = tr S))\n               (S, S') \\<and>\n              (action.relation_of A2\\<^sup>f\\<^sub>f ;;\n               (\\<lambda>(S, S'). tr2 = tr S))\n               (S, S') \\<and>\n              tr_filter tr1 cs =\n              tr_filter tr2\n               cs) \\<turnstile> \\<lambda>(S, S').\n                                   \\<exists>s1 s2.\n((\\<lambda>(A, A').\n     action.relation_of A1\\<^sup>t\\<^sub>f (A, s1) \\<and>\n     action.relation_of A2\\<^sup>t\\<^sub>f (A, s2)) ;;\n M_par s1 ns1 s2 ns2 cs)\n (S, S'))", "apply (unfold Par_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of\n     (action_of\n       (R (\\<lambda>(S, S').\n              (\\<nexists>tr1 tr2.\n                  (action.relation_of A1\\<^sup>f\\<^sub>f ;;\n                   (\\<lambda>(S, S'). tr1 = tr S))\n                   (S, S') \\<and>\n                  (spec False (wait S) (action.relation_of A2) ;;\n                   (\\<lambda>(S, uu_). tr2 = tr S))\n                   (S, S') \\<and>\n                  tr_filter tr1 cs = tr_filter tr2 cs) \\<and>\n              (\\<nexists>tr1 tr2.\n                  (spec False (wait S) (action.relation_of A1) ;;\n                   (\\<lambda>(S, uu_). tr1 = tr S))\n                   (S, S') \\<and>\n                  (action.relation_of A2\\<^sup>f\\<^sub>f ;;\n                   (\\<lambda>(S, S'). tr2 = tr S))\n                   (S, S') \\<and>\n                  tr_filter tr1 cs =\n                  tr_filter tr2\n                   cs) \\<turnstile> \\<lambda>(S, S').\n \\<exists>s1 s2.\n    ((\\<lambda>(A, A').\n         action.relation_of A1\\<^sup>t\\<^sub>f (A, s1) \\<and>\n         action.relation_of A2\\<^sup>t\\<^sub>f (A, s2)) ;;\n     M_par s1 ns1 s2 ns2 cs)\n     (S, S')))) =\n    R (\\<lambda>(S, S').\n          (\\<nexists>tr1 tr2.\n              (action.relation_of A1\\<^sup>f\\<^sub>f ;;\n               (\\<lambda>(S, S'). tr1 = tr S))\n               (S, S') \\<and>\n              (spec False (wait S) (action.relation_of A2) ;;\n               (\\<lambda>(S, S'). tr2 = tr S))\n               (S, S') \\<and>\n              tr_filter tr1 cs = tr_filter tr2 cs) \\<and>\n          (\\<nexists>tr1 tr2.\n              (spec False (wait S) (action.relation_of A1) ;;\n               (\\<lambda>(S, uu_). tr1 = tr S))\n               (S, S') \\<and>\n              (action.relation_of A2\\<^sup>f\\<^sub>f ;;\n               (\\<lambda>(S, S'). tr2 = tr S))\n               (S, S') \\<and>\n              tr_filter tr1 cs =\n              tr_filter tr2\n               cs) \\<turnstile> \\<lambda>(S, S').\n                                   \\<exists>s1 s2.\n((\\<lambda>(A, A').\n     action.relation_of A1\\<^sup>t\\<^sub>f (A, s1) \\<and>\n     action.relation_of A2\\<^sup>t\\<^sub>f (A, s2)) ;;\n M_par s1 ns1 s2 ns2 cs)\n (S, S'))", "apply (rule action_of_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. R (\\<lambda>(S, S').\n          (\\<nexists>tr1 tr2.\n              (action.relation_of A1\\<^sup>f\\<^sub>f ;;\n               (\\<lambda>(S, S'). tr1 = tr S))\n               (S, S') \\<and>\n              (spec False (wait S) (action.relation_of A2) ;;\n               (\\<lambda>(S, uu_). tr2 = tr S))\n               (S, S') \\<and>\n              tr_filter tr1 cs = tr_filter tr2 cs) \\<and>\n          (\\<nexists>tr1 tr2.\n              (spec False (wait S) (action.relation_of A1) ;;\n               (\\<lambda>(S, uu_). tr1 = tr S))\n               (S, S') \\<and>\n              (action.relation_of A2\\<^sup>f\\<^sub>f ;;\n               (\\<lambda>(S, S'). tr2 = tr S))\n               (S, S') \\<and>\n              tr_filter tr1 cs =\n              tr_filter tr2\n               cs) \\<turnstile> \\<lambda>(S, S').\n                                   \\<exists>s1 s2.\n((\\<lambda>(A, A').\n     action.relation_of A1\\<^sup>t\\<^sub>f (A, s1) \\<and>\n     action.relation_of A2\\<^sup>t\\<^sub>f (A, s2)) ;;\n M_par s1 ns1 s2 ns2 cs)\n (S, S'))\n    \\<in> {p. is_CSP_process p}", "apply (rule Par_is_action)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mono_Par: \"mono (\\<lambda>Q. P \\<lbrakk> ns1 | cs | ns2 \\<rbrakk> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (Par P ns1 cs ns2)", "apply (auto simp: mono_def less_eq_action ref_def relation_of_Par design_defs fun_eq_iff rp_defs\n              split: cond_splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y a b ba bb.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (a\\<lparr>tr := []\\<rparr>, b\n             \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of x\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (a\\<lparr>tr := []\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> ok b\n 2. \\<And>x y a b ba bb.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (a\\<lparr>tr := []\\<rparr>, b\n             \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of x\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (a\\<lparr>tr := []\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of x\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (a\\<lparr>tr := []\\<rparr>, b\n                              \\<lparr>tr := tr b - tr a\\<rparr>)\n 3. \\<And>x y a b s1 s2 ba.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (a\\<lparr>tr := []\\<rparr>, b\n             \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of x\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (a\\<lparr>tr := []\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        ok b;\n        M_par s1 ns1 s2 ns2 cs (ba, b\\<lparr>tr := tr b - tr a\\<rparr>);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s1\n          \\<lparr>ok := True\\<rparr>);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, s2\n          \\<lparr>ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of x\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (a\\<lparr>tr := []\\<rparr>, b\n                              \\<lparr>tr := tr b - tr a\\<rparr>)", "apply (auto simp: rp_defs dest: relation_of_spec_f_f[simplified] relation_of_spec_t_f[simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y a b ba bb.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<forall>tr1.\n           ((\\<lambda>(A, A').\n                action.relation_of P\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr1 = tr S))\n            (a\\<lparr>tr := []\\<rparr>, b\n             \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n           (\\<forall>tr2.\n               ((\\<lambda>(A, A').\n                    action.relation_of x\n                     (A\\<lparr>wait := False\\<rparr>, A'\n                      \\<lparr>ok := False\\<rparr>)) ;;\n                (\\<lambda>(S, S'). tr2 = tr S))\n                (a\\<lparr>tr := []\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n               tr_filter tr1 cs \\<noteq> tr_filter tr2 cs);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of x\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (a\\<lparr>tr := []\\<rparr>, b\n                              \\<lparr>tr := tr b - tr a\\<rparr>)", "apply (erule_tac x=\"tr ba\" in allE, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y a b ba bb.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of x\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (a\\<lparr>tr := []\\<rparr>, b\n             \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s1 s2.\n                            ((\\<lambda>(A, A').\n                                 action.relation_of P\n                                  (A\\<lparr>wait := False\\<rparr>, s1\n                                   \\<lparr>ok := True\\<rparr>) \\<and>\n                                 action.relation_of x\n                                  (A\\<lparr>wait := False\\<rparr>, s2\n                                   \\<lparr>ok := True\\<rparr>)) ;;\n                             M_par s1 ns1 s2 ns2 cs)\n                             (a\\<lparr>tr := []\\<rparr>, b\n                              \\<lparr>tr := tr b - tr a\\<rparr>)", "apply (erule notE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y a b ba bb.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        tr a \\<le> tr b; ok a;\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, ba\n          \\<lparr>ok := False\\<rparr>);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, bb\n          \\<lparr>ok := False\\<rparr>);\n        tr_filter (tr ba) cs = tr_filter (tr bb) cs;\n        \\<forall>tr2.\n           ((\\<lambda>(A, A').\n                action.relation_of x\n                 (A\\<lparr>wait := False\\<rparr>, A'\n                  \\<lparr>ok := False\\<rparr>)) ;;\n            (\\<lambda>(S, S'). tr2 = tr S))\n            (a\\<lparr>tr := []\\<rparr>, b\n             \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n           tr_filter (tr bb) cs \\<noteq> tr_filter tr2 cs\\<rbrakk>\n       \\<Longrightarrow> wait a", "apply (auto dest: relation_of_spec_f_f relation_of_spec_t_f)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Local parallel block\\<close>"], ["", "definition\nParLoc::\"'\\<sigma> \\<Rightarrow> ('\\<sigma> \\<Rightarrow> '\\<sigma> \\<Rightarrow> '\\<sigma>) \\<Rightarrow> ('\\<theta>::ev_eq, '\\<sigma>) action \\<Rightarrow> '\\<theta> set \\<Rightarrow> '\\<sigma> \\<Rightarrow> ('\\<sigma> \\<Rightarrow> '\\<sigma> \\<Rightarrow> '\\<sigma>) \\<Rightarrow> ('\\<theta>,'\\<sigma>) action \\<Rightarrow> ('\\<theta>,'\\<sigma>) action\"\n                                        (\"'(()par _ | _ \\<bullet> _ ') \\<lbrakk> _ \\<rbrakk> '(()par _ | _ \\<bullet> _ ')\")\nwhere \n\"(par s1 | ns1 \\<bullet> P) \\<lbrakk> cs \\<rbrakk> (par s2 | ns2 \\<bullet> Q) \\<equiv> ((rd_assign s1)`;`P) \\<lbrakk> ns1 | cs | ns2 \\<rbrakk> ((rd_assign s2)`;` Q)\""], ["", "subsection \\<open>Assignment\\<close>"], ["", "definition ASSIGN::\"('v, '\\<sigma>) var_list \\<Rightarrow> ('\\<sigma> \\<Rightarrow> 'v) \\<Rightarrow> ('\\<theta>::ev_eq, '\\<sigma>) action\" where\n\"ASSIGN x e \\<equiv> action_of (R (true \\<turnstile> (\\<lambda> (S, S'). tr S' = tr S \\<and> \\<not>wait S' \\<and> \n                                 (more S' = (update x (\\<lambda>_. (e (more S)))) (more S)))))\""], ["", "syntax \"_assign\"::\"id \\<Rightarrow> ('\\<sigma> \\<Rightarrow> 'v) \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\"  (\"_ `:=` _\")"], ["", "translations \"y `:=` vv\" => \"CONST ASSIGN (VAR y) vv\""], ["", "lemma Assign_is_action: \n\"(R (true \\<turnstile> (\\<lambda> (S, S'). tr S' = tr S \\<and> \\<not>wait S' \\<and> \n                (more S' = (update x (\\<lambda>_. (e (more S)))) (more S))))) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (true \\<turnstile> \\<lambda>(S, S').\n                            tr S' = tr S \\<and>\n                            \\<not> wait S' \\<and>\n                            alpha_rp.more S' =\n                            update x (\\<lambda>_. e (alpha_rp.more S))\n                             (alpha_rp.more S))\n    \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (R (true \\<turnstile> \\<lambda>(S, S').\n                              tr S' = tr S \\<and>\n                              \\<not> wait S' \\<and>\n                              alpha_rp.more S' =\n                              update x (\\<lambda>_. e (alpha_rp.more S))\n                               (alpha_rp.more S)))", "apply (rule rd_is_CSP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       true (a, b\\<lparr>ok := True\\<rparr>) \\<longrightarrow>\n       true (a, b\\<lparr>ok := False\\<rparr>)", "apply (blast)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas Assign_is_CSP = Assign_is_action[simplified]"], ["", "lemma relation_of_Assign:\n\"relation_of (ASSIGN x e) = (R (true \\<turnstile> (\\<lambda> (S, S'). tr S' = tr S \\<and> \\<not>wait S' \\<and> \n                                   (more S' = (update x (\\<lambda>_. (e (more S)))) (more S)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (ASSIGN x e) =\n    R (true \\<turnstile> \\<lambda>(S, S').\n                            tr S' = tr S \\<and>\n                            \\<not> wait S' \\<and>\n                            alpha_rp.more S' =\n                            update x (\\<lambda>_. e (alpha_rp.more S))\n                             (alpha_rp.more S))", "by (simp add: ASSIGN_def action_of_inverse Assign_is_CSP)"], ["", "lemma Assign_is_state_update_before: \"ASSIGN x e = state_update_before (\\<lambda> (s, s') . s' = (update x (\\<lambda>_. (e s))) s) Skip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ASSIGN x e =\n    state_update_before\n     (\\<lambda>(s, s'). s' = update x (\\<lambda>_. e s) s) Skip", "apply (subst relation_of_inject[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (ASSIGN x e) =\n    action.relation_of\n     (state_update_before\n       (\\<lambda>(s, s'). s' = update x (\\<lambda>_. e s) s) Skip)", "apply (auto simp: relation_of_Assign relation_of_state_update_before relation_of_Skip rp_defs fun_eq_iff\n                  Pre_def update_def design_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                true\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and>\n                tr A' - tr A = [] \\<and>\n                \\<not> wait A' \\<and>\n                alpha_rp.more A' =\n                snd x (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                 (alpha_rp.more A)) \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<longrightarrow>\n                 ok A' \\<and>\n                 alpha_rp.more A' =\n                 snd x (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                  (alpha_rp.more A) \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A')) ;;\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A')))\n        (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<longrightarrow>\n                         ok A' \\<and>\n                         alpha_rp.more A' =\n                         snd x (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                          (alpha_rp.more A) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd x\n                                   (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                   (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   alpha_rp.more A' =\n                                   snd x\n                                    (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                    (alpha_rp.more A) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   alpha_rp.more A' =\n                                   snd x\n                                    (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                    (alpha_rp.more A) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<longrightarrow>\n                         ok A' \\<and>\n                         alpha_rp.more A' =\n                         snd x (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                          (alpha_rp.more A) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd x\n                                   (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                   (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (rule_tac b=b in comp_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<longrightarrow>\n                                  ok A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd x\n                                   (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                   (alpha_rp.more A) \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (b, b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   alpha_rp.more A' =\n                                   snd x\n                                    (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                    (alpha_rp.more A) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 4. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<longrightarrow>\n                         ok A' \\<and>\n                         alpha_rp.more A' =\n                         snd x (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                          (alpha_rp.more A) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd x\n                                   (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                   (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   alpha_rp.more A' =\n                                   snd x\n                                    (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                    (alpha_rp.more A) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A =\n                                   alpha_rp.more A') \\<and>\n                                  tr A \\<le> tr A')))\n                          (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<longrightarrow>\n                         ok A' \\<and>\n                         alpha_rp.more A' =\n                         snd x (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                          (alpha_rp.more A) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd x\n                                   (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                   (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (rule_tac b=b in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<longrightarrow>\n                                  ok A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd x\n                                   (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                   (alpha_rp.more A) \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (b, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<longrightarrow>\n                         ok A' \\<and>\n                         alpha_rp.more A' =\n                         snd x (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                          (alpha_rp.more A) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd x\n                                   (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                   (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ok a \\<longrightarrow>\n                         ok b \\<and>\n                         alpha_rp.more b =\n                         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n                          (alpha_rp.more a) \\<and>\n                         \\<not> wait b \\<and> [] = tr b - tr a\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (b, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<longrightarrow>\n                         ok A' \\<and>\n                         alpha_rp.more A' =\n                         snd x (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                          (alpha_rp.more A) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd x\n                                   (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                   (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A = alpha_rp.more A') \\<and>\n                                 tr A \\<le> tr A'))\n                          (b, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<longrightarrow>\n                         ok A' \\<and>\n                         alpha_rp.more A' =\n                         snd x (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                          (alpha_rp.more A) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A = alpha_rp.more A') \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  snd x\n                                   (\\<lambda>l. e (alpha_rp.more A) # tl l)\n                                   (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ok a \\<longrightarrow>\n                         ok b \\<and>\n                         alpha_rp.more b =\n                         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n                          (alpha_rp.more a) \\<and>\n                         \\<not> wait b \\<and> [] = tr b - tr a", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ba \\<and>\n         alpha_rp.more ba =\n         snd x (\\<lambda>l. e (alpha_rp.more aa) # tl l)\n          (alpha_rp.more aa) \\<and>\n         \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and>\n                          \\<not> wait c \\<and>\n                          alpha_rp.more c =\n                          snd x (\\<lambda>l. e (alpha_rp.more aa) # tl l)\n                           (alpha_rp.more aa)) \\<and>\n                         tr aa \\<le> tr c\n 4. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ok a \\<longrightarrow>\n                         ok b \\<and>\n                         alpha_rp.more b =\n                         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n                          (alpha_rp.more a) \\<and>\n                         \\<not> wait b \\<and> [] = tr b - tr a", "prefer 3"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         alpha_rp.more A = alpha_rp.more A') \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ba \\<and>\n         alpha_rp.more ba =\n         snd x (\\<lambda>l. e (alpha_rp.more aa) # tl l)\n          (alpha_rp.more aa) \\<and>\n         \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and>\n                          \\<not> wait c \\<and>\n                          alpha_rp.more c =\n                          snd x (\\<lambda>l. e (alpha_rp.more aa) # tl l)\n                           (alpha_rp.more aa)) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 4. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ok a \\<longrightarrow>\n                         ok b \\<and>\n                         alpha_rp.more b =\n                         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n                          (alpha_rp.more a) \\<and>\n                         \\<not> wait b \\<and> [] = tr b - tr a", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; wait ba; \\<not> ok aa; tr aa \\<le> tr ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>\\<not> wait aa; \\<not> wait ba;\n        ok aa \\<longrightarrow>\n        ok ba \\<and>\n        alpha_rp.more ba =\n        snd x (\\<lambda>l. e (alpha_rp.more aa) # tl l)\n         (alpha_rp.more aa) \\<and>\n        [] = tr ba - tr aa;\n        tr aa \\<le> tr ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          true\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          tr c - tr aa = [] \\<and>\n                          \\<not> wait c \\<and>\n                          alpha_rp.more c =\n                          snd x (\\<lambda>l. e (alpha_rp.more aa) # tl l)\n                           (alpha_rp.more aa)) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 4. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         true\n          (ba\\<lparr>tr := []\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         tr c - tr ba = [] \\<and>\n         \\<not> wait c \\<and> alpha_rp.more ba = alpha_rp.more c) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 5. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         true\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         tr b - tr a = [] \\<and>\n         \\<not> wait b \\<and>\n         alpha_rp.more b =\n         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n          (alpha_rp.more a)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ok a \\<longrightarrow>\n                         ok b \\<and>\n                         alpha_rp.more b =\n                         snd x (\\<lambda>l. e (alpha_rp.more a) # tl l)\n                          (alpha_rp.more a) \\<and>\n                         \\<not> wait b \\<and> [] = tr b - tr a", "apply (auto simp add: prefix_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Variable scope\\<close>"], ["", "definition Var::\"('v, '\\<sigma>) var_list \\<Rightarrow>('\\<theta>, '\\<sigma>) action \\<Rightarrow> ('\\<theta>::ev_eq,'\\<sigma>) action\" where\n\"Var v A \\<equiv> action_of(\n     (R(true \\<turnstile> (\\<lambda> (A, A'). \\<exists> a. tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (increase v a (more A)))));; \n     (relation_of A;;\n     (R(true \\<turnstile> (\\<lambda> (A, A').  tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (decrease v (more A)))))))\""], ["", "syntax \"_var\"::\"idt \\<Rightarrow> ('\\<theta>, '\\<sigma>) action \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\" (\"var _ \\<bullet> _\" [1000] 999)"], ["", "translations \"var y \\<bullet> Act\" => \"CONST Var (VAR_LIST y) Act\""], ["", "lemma Var_is_action:\n\"((R(true \\<turnstile> (\\<lambda> (A, A'). \\<exists> a. tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (increase v a (more A)))));; \n     (relation_of A;;\n     (R(true \\<turnstile> (\\<lambda> (A, A').  tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (decrease v (more A))))))) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (R (true \\<turnstile> \\<lambda>(A, A').\n                             \\<exists>a.\n                                tr A' = tr A \\<and>\n                                \\<not> wait A' \\<and>\n                                alpha_rp.more A' =\n                                increase v a (alpha_rp.more A)) ;;\n     action.relation_of A ;;\n     R (true \\<turnstile> \\<lambda>(A, A').\n                             tr A' = tr A \\<and>\n                             \\<not> wait A' \\<and>\n                             alpha_rp.more A' =\n                             decrease v (alpha_rp.more A)))\n    \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (R (true \\<turnstile> \\<lambda>(A, A').\n                              tr A' = tr A \\<and>\n                              \\<not> wait A' \\<and>\n                              (\\<exists>a.\n                                  alpha_rp.more A' =\n                                  increase v a (alpha_rp.more A))) ;;\n      action.relation_of A ;;\n      R (true \\<turnstile> \\<lambda>(A, A').\n                              tr A' = tr A \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              decrease v (alpha_rp.more A)))", "apply (rule seq_CSP)"], ["proof (prove)\ngoal (3 subgoals):\n 1. R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            (\\<exists>a.\n                                alpha_rp.more A' =\n                                increase v a\n                                 (alpha_rp.more A))) is CSP1 healthy\n 2. R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            (\\<exists>a.\n                                alpha_rp.more A' =\n                                increase v a\n                                 (alpha_rp.more A))) is R healthy\n 3. is_CSP_process\n     (action.relation_of A ;;\n      R (true \\<turnstile> \\<lambda>(A, A').\n                              tr A' = tr A \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              decrease v (alpha_rp.more A)))", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. is_CSP_process\n     (action.relation_of A ;;\n      R (true \\<turnstile> \\<lambda>(A, A').\n                              tr A' = tr A \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              decrease v (alpha_rp.more A)))\n 2. R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            (\\<exists>a.\n                                alpha_rp.more A' =\n                                increase v a\n                                 (alpha_rp.more A))) is CSP1 healthy\n 3. R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            (\\<exists>a.\n                                alpha_rp.more A' =\n                                increase v a\n                                 (alpha_rp.more A))) is R healthy", "apply (rule seq_CSP)"], ["proof (prove)\ngoal (5 subgoals):\n 1. action.relation_of A is CSP1 healthy\n 2. action.relation_of A is R healthy\n 3. is_CSP_process\n     (R (true \\<turnstile> \\<lambda>(A, A').\n                              tr A' = tr A \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              decrease v (alpha_rp.more A)))\n 4. R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            (\\<exists>a.\n                                alpha_rp.more A' =\n                                increase v a\n                                 (alpha_rp.more A))) is CSP1 healthy\n 5. R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            (\\<exists>a.\n                                alpha_rp.more A' =\n                                increase v a\n                                 (alpha_rp.more A))) is R healthy", "apply (auto simp: relation_of_CSP1 relation_of_R)"], ["proof (prove)\ngoal (3 subgoals):\n 1. is_CSP_process\n     (R (true \\<turnstile> \\<lambda>(A, A').\n                              tr A' = tr A \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              decrease v (alpha_rp.more A)))\n 2. R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            (\\<exists>a.\n                                alpha_rp.more A' =\n                                increase v a\n                                 (alpha_rp.more A))) is CSP1 healthy\n 3. R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            (\\<exists>a.\n                                alpha_rp.more A' =\n                                increase v a\n                                 (alpha_rp.more A))) is R healthy", "apply (rule rd_is_CSP)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>a b.\n       true (a, b\\<lparr>ok := True\\<rparr>) \\<longrightarrow>\n       true (a, b\\<lparr>ok := False\\<rparr>)\n 2. R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            (\\<exists>a.\n                                alpha_rp.more A' =\n                                increase v a\n                                 (alpha_rp.more A))) is CSP1 healthy\n 3. R (true \\<turnstile> \\<lambda>(A, A').\n                            tr A' = tr A \\<and>\n                            \\<not> wait A' \\<and>\n                            (\\<exists>a.\n                                alpha_rp.more A' =\n                                increase v a\n                                 (alpha_rp.more A))) is R healthy", "apply (auto simp: csp_defs rp_defs design_defs fun_eq_iff prefix_def increase_def decrease_def\n               split: cond_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas Var_is_CSP = Var_is_action[simplified]"], ["", "lemma relation_of_Var:\n\"relation_of (Var v A) = \n    ((R(true \\<turnstile> (\\<lambda> (A, A'). \\<exists> a. tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (increase v a (more A)))));; \n     (relation_of A;;\n     (R(true \\<turnstile> (\\<lambda> (A, A').  tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (decrease v (more A)))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (Var v A) =\n    (R (true \\<turnstile> \\<lambda>(A, A').\n                             \\<exists>a.\n                                tr A' = tr A \\<and>\n                                \\<not> wait A' \\<and>\n                                alpha_rp.more A' =\n                                increase v a (alpha_rp.more A)) ;;\n     action.relation_of A ;;\n     R (true \\<turnstile> \\<lambda>(A, A').\n                             tr A' = tr A \\<and>\n                             \\<not> wait A' \\<and>\n                             alpha_rp.more A' =\n                             decrease v (alpha_rp.more A)))", "apply (simp only: Var_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of\n     (action_of\n       (R (true \\<turnstile> \\<lambda>(A, A').\n                                \\<exists>a.\n                                   tr A' = tr A \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   increase v a (alpha_rp.more A)) ;;\n        action.relation_of A ;;\n        R (true \\<turnstile> \\<lambda>(A, A').\n                                tr A' = tr A \\<and>\n                                \\<not> wait A' \\<and>\n                                alpha_rp.more A' =\n                                decrease v (alpha_rp.more A)))) =\n    (R (true \\<turnstile> \\<lambda>(A, A').\n                             \\<exists>a.\n                                tr A' = tr A \\<and>\n                                \\<not> wait A' \\<and>\n                                alpha_rp.more A' =\n                                increase v a (alpha_rp.more A)) ;;\n     action.relation_of A ;;\n     R (true \\<turnstile> \\<lambda>(A, A').\n                             tr A' = tr A \\<and>\n                             \\<not> wait A' \\<and>\n                             alpha_rp.more A' =\n                             decrease v (alpha_rp.more A)))", "apply (rule action_of_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (R (true \\<turnstile> \\<lambda>(A, A').\n                             \\<exists>a.\n                                tr A' = tr A \\<and>\n                                \\<not> wait A' \\<and>\n                                alpha_rp.more A' =\n                                increase v a (alpha_rp.more A)) ;;\n     action.relation_of A ;;\n     R (true \\<turnstile> \\<lambda>(A, A').\n                             tr A' = tr A \\<and>\n                             \\<not> wait A' \\<and>\n                             alpha_rp.more A' =\n                             decrease v (alpha_rp.more A)))\n    \\<in> {p. is_CSP_process p}", "apply (rule Var_is_action)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mono_Var : \"mono (Var x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (Var x)", "by (auto simp: mono_def less_eq_action ref_def relation_of_Var)"], ["", "definition Let::\"('v, '\\<sigma>) var_list \\<Rightarrow>('\\<theta>, '\\<sigma>) action \\<Rightarrow> ('\\<theta>::ev_eq,'\\<sigma>) action\" where\n\"Let v A \\<equiv> action_of((relation_of A;;\n     (R(true \\<turnstile> (\\<lambda> (A, A').  tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (decrease v (more A)))))))\""], ["", "syntax \"_let\"::\"idt \\<Rightarrow> ('\\<theta>, '\\<sigma>) action \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\" (\"let _ \\<bullet> _\" [1000] 999)"], ["", "translations \"let y \\<bullet> Act\" => \"CONST Let (VAR_LIST y) Act\""], ["", "lemma Let_is_action:\n\"(relation_of A;;\n     (R(true \\<turnstile> (\\<lambda> (A, A').  tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (decrease v (more A)))))) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (action.relation_of A ;;\n     R (true \\<turnstile> \\<lambda>(A, A').\n                             tr A' = tr A \\<and>\n                             \\<not> wait A' \\<and>\n                             alpha_rp.more A' =\n                             decrease v (alpha_rp.more A)))\n    \\<in> {p. is_CSP_process p}", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (action.relation_of A ;;\n      R (true \\<turnstile> \\<lambda>(A, A').\n                              tr A' = tr A \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              decrease v (alpha_rp.more A)))", "apply (rule seq_CSP)"], ["proof (prove)\ngoal (3 subgoals):\n 1. action.relation_of A is CSP1 healthy\n 2. action.relation_of A is R healthy\n 3. is_CSP_process\n     (R (true \\<turnstile> \\<lambda>(A, A').\n                              tr A' = tr A \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              decrease v (alpha_rp.more A)))", "apply (auto simp: relation_of_CSP1 relation_of_R)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process\n     (R (true \\<turnstile> \\<lambda>(A, A').\n                              tr A' = tr A \\<and>\n                              \\<not> wait A' \\<and>\n                              alpha_rp.more A' =\n                              decrease v (alpha_rp.more A)))", "apply (rule rd_is_CSP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a b.\n       true (a, b\\<lparr>ok := True\\<rparr>) \\<longrightarrow>\n       true (a, b\\<lparr>ok := False\\<rparr>)", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas Let_is_CSP = Let_is_action[simplified]"], ["", "lemma relation_of_Let:\n\"relation_of (Let v A) = \n    (relation_of A;;\n     (R(true \\<turnstile> (\\<lambda> (A, A').  tr A' = tr A \\<and> \\<not>wait A' \\<and> more A' = (decrease v (more A))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (Denotational_Semantics.Let v A) =\n    (action.relation_of A ;;\n     R (true \\<turnstile> \\<lambda>(A, A').\n                             tr A' = tr A \\<and>\n                             \\<not> wait A' \\<and>\n                             alpha_rp.more A' =\n                             decrease v (alpha_rp.more A)))", "by (simp add: Let_def action_of_inverse Let_is_CSP)"], ["", "lemma mono_Let : \"mono (Let x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (Denotational_Semantics.Let x)", "by (auto simp: mono_def less_eq_action ref_def relation_of_Let)"], ["", "lemma Var_is_state_update_before: \"Var v A = state_update_before (\\<lambda> (s, s'). \\<exists> a. s' = increase v a s) (Let v A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var v A =\n    state_update_before (\\<lambda>(s, s'). \\<exists>a. s' = increase v a s)\n     (Denotational_Semantics.Let v A)", "apply (subst relation_of_inject[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (Var v A) =\n    action.relation_of\n     (state_update_before\n       (\\<lambda>(s, s'). \\<exists>a. s' = increase v a s)\n       (Denotational_Semantics.Let v A))", "apply (auto simp: relation_of_Var relation_of_Let relation_of_state_update_before relation_of_Skip fun_eq_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>R (true \\<turnstile> \\<lambda>(A, A').\n  tr A' = tr A \\<and>\n  \\<not> wait A' \\<and>\n  (\\<exists>a. alpha_rp.more A' = increase v a (alpha_rp.more A)))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        R (true \\<turnstile> \\<lambda>(A, A').\n                                tr A' = tr A \\<and>\n                                \\<not> wait A' \\<and>\n                                alpha_rp.more A' =\n                                decrease v (alpha_rp.more A))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (R (\\<lambda>(A, A').\n                                Pre (\\<lambda>(s, s').\n  \\<exists>a. s' = increase v a s)\n                                 (alpha_rp.more\n                                   A) \\<turnstile> \\<lambda>(A, A').\n                (\\<exists>a.\n                    alpha_rp.more A' =\n                    increase v a (alpha_rp.more A)) \\<and>\n                \\<not> wait A' \\<and> tr A = tr A') ;;\n                          action.relation_of A ;;\n                          R (true \\<turnstile> \\<lambda>(A, A').\n            tr A' = tr A \\<and>\n            \\<not> wait A' \\<and>\n            alpha_rp.more A' = decrease v (alpha_rp.more A)))\n                          (aa, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>R (\\<lambda>(A, A').\n                      Pre (\\<lambda>(s, s').\n                              \\<exists>a. s' = increase v a s)\n                       (alpha_rp.more\n                         A) \\<turnstile> \\<lambda>(A, A').\n      (\\<exists>a. alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n      \\<not> wait A' \\<and> tr A = tr A')\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        R (true \\<turnstile> \\<lambda>(A, A').\n                                tr A' = tr A \\<and>\n                                \\<not> wait A' \\<and>\n                                alpha_rp.more A' =\n                                decrease v (alpha_rp.more A))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (R (true \\<turnstile> \\<lambda>(A, A').\n            tr A' = tr A \\<and>\n            \\<not> wait A' \\<and>\n            (\\<exists>a.\n                alpha_rp.more A' = increase v a (alpha_rp.more A))) ;;\n                          action.relation_of A ;;\n                          R (true \\<turnstile> \\<lambda>(A, A').\n            tr A' = tr A \\<and>\n            \\<not> wait A' \\<and>\n            alpha_rp.more A' = decrease v (alpha_rp.more A)))\n                          (aa, ca)", "apply (auto simp: rp_defs fun_eq_iff Pre_def design_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         true\n                          (A\\<lparr>tr := []\\<rparr>, A'\n                           \\<lparr>tr :=\n                                     tr A' - tr A\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         tr A' - tr A = [] \\<and>\n                         \\<not> wait A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A))) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa))) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (rule_tac b=ab in comp_intro)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (\\<exists>A' a.\nA' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (\\<exists>a.\nalpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, ab)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa))) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 5. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa))) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  decrease v (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (bb, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa))) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa))) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (rule_tac b=ab in comp_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (\\<exists>A' a.\nA' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (\\<exists>a.\nalpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, ab)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa))) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa))) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  decrease v (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (bb, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         true\n          (aa\\<lparr>tr := []\\<rparr>, ab\n           \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n         ok ab \\<and>\n         tr ab - tr aa = [] \\<and>\n         \\<not> wait ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa))) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (rule_tac b=ab in comp_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (\\<exists>A' a.\nA' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (\\<exists>a.\nalpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, ab)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "defer"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  decrease v (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (bb, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   (\\<exists>A' a.\n A' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (rule_tac b=ab in comp_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (\\<exists>A' a.\nA' = increase v a (alpha_rp.more A)) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (\\<exists>a.\nalpha_rp.more A' = increase v a (alpha_rp.more A)) \\<and>\n                                  \\<not> wait A' \\<and>\n                                  [] = tr A' - tr A) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, ab)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "defer"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  decrease v (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (bb, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more A)) \\<longrightarrow>\n                         ok A' \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more A' =\n                             increase v a (alpha_rp.more A)) \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ab);\n        action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca)\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         (\\<exists>A' a.\n             A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n         ok ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n         \\<not> wait ab \\<and> [] = tr ab - tr aa) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 5. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (rule_tac b=ab in comp_intro)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  (\\<exists>a.\nalpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, ab)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         (\\<exists>A' a.\n             A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n         ok ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n         \\<not> wait ab \\<and> [] = tr ab - tr aa) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 5. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 6. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         (\\<exists>A' a.\n             A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n         ok ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n         \\<not> wait ab \\<and> [] = tr ab - tr aa) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 5. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); wait bb;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  decrease v (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (bb, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         (\\<exists>A' a.\n             A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n         ok ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n         \\<not> wait ab \\<and> [] = tr ab - tr aa) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 5. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         (\\<exists>A' a.\n             A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n         ok ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n         \\<not> wait ab \\<and> [] = tr ab - tr aa) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (rule_tac b=ab in comp_intro)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  (\\<exists>a.\nalpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, ab)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         (\\<exists>A' a.\n             A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n         ok ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n         \\<not> wait ab \\<and> [] = tr ab - tr aa) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 5. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         (\\<exists>A' a.\n             A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n         ok ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n         \\<not> wait ab \\<and> [] = tr ab - tr aa) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ab \\<or>\n        ok ab \\<and>\n        tr aa = tr ab \\<and>\n        wait ab \\<and>\n        ref aa = ref ab \\<and> alpha_rp.more aa = alpha_rp.more ab;\n        action.relation_of A (ab, bb); \\<not> wait bb;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  decrease v (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (bb, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>action.relation_of A (ab, bb);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (bb, ca);\n        \\<not> wait aa;\n        (ok aa \\<and>\n         (\\<exists>A' a.\n             A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n         ok ab \\<and>\n         (\\<exists>a.\n             alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n         \\<not> wait ab \\<and> [] = tr ab - tr aa) \\<and>\n        tr aa \\<le> tr ab\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (rule_tac b=ab in comp_intro)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  true\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  (\\<exists>a.\nalpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, ab)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 5. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         true\n                          (aa\\<lparr>tr := []\\<rparr>, ab\n                           \\<lparr>tr :=\n                                     tr ab -\n                                     tr aa\\<rparr>) \\<longrightarrow>\n                         ok ab \\<and>\n                         tr ab - tr aa = [] \\<and>\n                         \\<not> wait ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa))\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)\n 4. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa\n 5. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        true\n         (aa\\<lparr>tr := []\\<rparr>, ab\n          \\<lparr>tr := tr ab - tr aa\\<rparr>) \\<longrightarrow>\n        ok ab \\<and>\n        tr ab - tr aa = [] \\<and>\n        \\<not> wait ab \\<and>\n        (\\<exists>a. alpha_rp.more ab = increase v a (alpha_rp.more aa));\n        tr aa \\<le> tr ab;\n        (ok bb \\<and>\n         true\n          (bb\\<lparr>tr := []\\<rparr>, ca\n           \\<lparr>tr := tr ca - tr bb\\<rparr>) \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<and>\n                         (\\<exists>A' a.\n                             A' =\n                             increase v a\n                              (alpha_rp.more aa)) \\<longrightarrow>\n                         ok ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa)) \\<and>\n                         \\<not> wait ab \\<and> [] = tr ab - tr aa", "apply (case_tac \"\\<exists>A' a. A' = increase v a (alpha_rp.more aa)\", simp_all add: true_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca;\n        \\<forall>A' a. A' \\<noteq> increase v a (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (erule_tac x=\"increase v a (alpha_rp.more aa)\" in allE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca;\n        \\<forall>ab.\n           increase v a (alpha_rp.more aa) \\<noteq>\n           increase v ab (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 3. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (erule_tac x=\"a\" in allE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb); wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        \\<not> ok bb \\<and> tr bb \\<le> tr ca \\<or>\n        ok ca \\<and>\n        tr bb = tr ca \\<and>\n        wait ca \\<and>\n        ref bb = ref ca \\<and> alpha_rp.more bb = alpha_rp.more ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  decrease v (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (bb, ca)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   (\\<exists>a.\n alpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, ca)", "apply (rule_tac b=ab in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  (\\<exists>a.\nalpha_rp.more A' = increase v a (alpha_rp.more A))) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, ab)\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ok aa \\<longrightarrow>\n                         ok ab \\<and>\n                         tr ab - tr aa = [] \\<and>\n                         \\<not> wait ab \\<and>\n                         (\\<exists>a.\n                             alpha_rp.more ab =\n                             increase v a (alpha_rp.more aa))\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)", "apply (case_tac \"\\<exists>A' a. A' = increase v a (alpha_rp.more aa)\", simp_all add: true_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb; tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca;\n        \\<forall>A' a. A' \\<noteq> increase v a (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)", "apply (erule_tac x=\"increase v a (alpha_rp.more aa)\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb; tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca;\n        \\<forall>ab.\n           increase v a (alpha_rp.more aa) \\<noteq>\n           increase v ab (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa\n 2. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)", "apply (erule_tac x=\"a\" in allE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (ab, ca)", "apply (rule_tac b=bb in comp_intro, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ab bb ca.\n       \\<lbrakk>\\<not> wait aa; action.relation_of A (ab, bb);\n        \\<not> wait bb;\n        ok aa \\<and>\n        (\\<exists>A' a.\n            A' = increase v a (alpha_rp.more aa)) \\<longrightarrow>\n        ok ab \\<and>\n        (\\<exists>a.\n            alpha_rp.more ab = increase v a (alpha_rp.more aa)) \\<and>\n        \\<not> wait ab \\<and> [] = tr ab - tr aa;\n        tr aa \\<le> tr ab;\n        (ok bb \\<longrightarrow>\n         ok ca \\<and>\n         tr ca - tr bb = [] \\<and>\n         \\<not> wait ca \\<and>\n         alpha_rp.more ca = decrease v (alpha_rp.more bb)) \\<and>\n        tr bb \\<le> tr ca\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<longrightarrow>\n                                  ok A' \\<and>\n                                  tr A' - tr A = [] \\<and>\n                                  \\<not> wait A' \\<and>\n                                  alpha_rp.more A' =\n                                  decrease v (alpha_rp.more A)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (bb, ca)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Let_is_state_update_after: \"Let v A = state_update_after (\\<lambda> (s, s'). s' = decrease v s) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Denotational_Semantics.Let v A =\n    state_update_after (\\<lambda>(s, s'). s' = decrease v s) A", "apply (subst relation_of_inject[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (Denotational_Semantics.Let v A) =\n    action.relation_of\n     (state_update_after (\\<lambda>(s, s'). s' = decrease v s) A)", "apply (auto simp: relation_of_Var relation_of_Let relation_of_state_update_after relation_of_Skip fun_eq_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of A (aa, ba);\n        R (true \\<turnstile> \\<lambda>(A, A').\n                                tr A' = tr A \\<and>\n                                \\<not> wait A' \\<and>\n                                alpha_rp.more A' =\n                                decrease v (alpha_rp.more A))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          R (true \\<turnstile> \\<lambda>(A, A').\n            alpha_rp.more A' = decrease v (alpha_rp.more A) \\<and>\n            \\<not> wait A' \\<and> tr A = tr A'))\n                          (aa, c)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of A (aa, ba);\n        R (true \\<turnstile> \\<lambda>(A, A').\n                                alpha_rp.more A' =\n                                decrease v (alpha_rp.more A) \\<and>\n                                \\<not> wait A' \\<and> tr A = tr A')\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          R (true \\<turnstile> \\<lambda>(A, A').\n            tr A' = tr A \\<and>\n            \\<not> wait A' \\<and>\n            alpha_rp.more A' = decrease v (alpha_rp.more A)))\n                          (aa, c)", "apply (auto simp: rp_defs fun_eq_iff Pre_def design_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of A (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 tr A' - tr A = [] \\<and>\n                 \\<not> wait A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A)) \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A) \\<and>\n                                   \\<not> wait A' \\<and>\n                                   [] = tr A' - tr A) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, c)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of A (aa, ba);\n        ((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and>\n                 true\n                  (A\\<lparr>tr := []\\<rparr>, A'\n                   \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                 ok A' \\<and>\n                 alpha_rp.more A' = decrease v (alpha_rp.more A) \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A'))\n         (ba, c)\\<rbrakk>\n       \\<Longrightarrow> (action.relation_of A ;;\n                          ((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (ok A \\<and>\n                                   true\n                                    (A\\<lparr>tr := []\\<rparr>, A'\n                                     \\<lparr>tr :=\n         tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                   ok A' \\<and>\n                                   tr A' - tr A = [] \\<and>\n                                   \\<not> wait A' \\<and>\n                                   alpha_rp.more A' =\n                                   decrease v (alpha_rp.more A)) \\<and>\n                                  tr A \\<le> tr A')))\n                          (aa, c)", "apply (auto split: cond_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Guarded action\\<close>"], ["", "definition Guard::\"'\\<sigma> predicate \\<Rightarrow> ('\\<theta>::ev_eq, '\\<sigma>) action \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\" (\"_ `&` _\")\nwhere \"g `&` P \\<equiv> action_of(R (((g o more o fst) \\<longrightarrow> \\<not> ((relation_of P)\\<^sup>f\\<^sub>f)) \\<turnstile> \n                             (((g o more o fst) \\<and> ((relation_of P)\\<^sup>t\\<^sub>f)) \\<or> \n                         ((\\<not>(g o more o fst)) \\<and> (\\<lambda> (A, A'). tr A' = tr A \\<and> wait A')))))\""], ["", "lemma Guard_is_action: \n\"(R ( ((g o more o fst) \\<longrightarrow> \\<not> ((relation_of P)\\<^sup>f\\<^sub>f)) \\<turnstile> \n                (((g o more o fst) \\<and> ((relation_of P)\\<^sup>t\\<^sub>f)) \\<or> \n                 ((\\<not>(g o more o fst)) \\<and> (\\<lambda> (A, A'). tr A' = tr A \\<and> wait A'))))) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n       \\<not> action.relation_of\n               P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n        alpha_rp.more \\<circ>\n        fst \\<and>\n        action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n        \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n        (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n    \\<in> {p. is_CSP_process p}", "by (auto simp add: spec_def intro: rd_is_CSP)"], ["", "lemmas Guard_is_CSP = Guard_is_action[simplified]"], ["", "lemma relation_of_Guard:\n\"relation_of (g `&` P) = (R (((g o more o fst) \\<longrightarrow>  \\<not> ((relation_of P)\\<^sup>f\\<^sub>f)) \\<turnstile> \n                             (((g o more o fst) \\<and> ((relation_of P)\\<^sup>t\\<^sub>f)) \\<or>\n                          ((\\<not>(g o more o fst)) \\<and> (\\<lambda> (A, A'). tr A' = tr A \\<and> wait A')))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of g `&` P =\n    R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n       \\<not> action.relation_of\n               P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n        alpha_rp.more \\<circ>\n        fst \\<and>\n        action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n        \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n        (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))", "apply (unfold Guard_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of\n     (action_of\n       (R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n           \\<not> action.relation_of\n                   P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n            alpha_rp.more \\<circ>\n            fst \\<and>\n            action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n            \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n            (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A')))) =\n    R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n       \\<not> action.relation_of\n               P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n        alpha_rp.more \\<circ>\n        fst \\<and>\n        action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n        \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n        (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))", "apply (subst action_of_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n       \\<not> action.relation_of\n               P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n        alpha_rp.more \\<circ>\n        fst \\<and>\n        action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n        \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n        (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n    \\<in> Collect is_CSP_process\n 2. R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n       \\<not> action.relation_of\n               P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n        alpha_rp.more \\<circ>\n        fst \\<and>\n        action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n        \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n        (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A')) =\n    R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n       \\<not> action.relation_of\n               P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n        alpha_rp.more \\<circ>\n        fst \\<and>\n        action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n        \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n        (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))", "apply (simp_all only: Guard_is_action)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mono_Guard : \"mono (Guard g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (Guard g)", "apply (auto simp: mono_def less_eq_action ref_def rp_defs design_defs relation_of_Guard \n                split: cond_splits)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x y a b.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<not> action.relation_of x\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a, ok := False\\<rparr>);\n        g (alpha_rp.more a);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok b\n 2. \\<And>x y a b.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<not> action.relation_of x\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a, ok := False\\<rparr>);\n        g (alpha_rp.more a);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of x\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\n 3. \\<And>x y a b.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<not> action.relation_of x\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a, ok := False\\<rparr>);\n        g (alpha_rp.more a);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := False\\<rparr>);\n        \\<not> action.relation_of x\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> tr b - tr a = []\n 4. \\<And>x y a b.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<not> action.relation_of x\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a, ok := False\\<rparr>);\n        g (alpha_rp.more a);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := False\\<rparr>);\n        \\<not> action.relation_of x\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> wait b\n 5. \\<And>x y a b.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<not> action.relation_of x\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a, ok := False\\<rparr>);\n        ok b; g (alpha_rp.more a);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of x\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\n 6. \\<And>x y a b.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<not> action.relation_of x\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a, ok := False\\<rparr>);\n        ok b; g (alpha_rp.more a);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>);\n        \\<not> action.relation_of x\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> tr b - tr a = []\n 7. \\<And>x y a b.\n       \\<lbrakk>\\<forall>a b.\n                   (action.relation_of y \\<longrightarrow>\n                    action.relation_of x)\n                    (a, b);\n        \\<not> wait a; tr a \\<le> tr b; ok a;\n        \\<not> action.relation_of x\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a, ok := False\\<rparr>);\n        ok b; g (alpha_rp.more a);\n        action.relation_of y\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>);\n        \\<not> action.relation_of x\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> wait b", "apply (auto dest: relation_of_spec_f_f relation_of_spec_t_f)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma false_Guard: \"false `&` P = Stop\""], ["proof (prove)\ngoal (1 subgoal):\n 1. false `&` P = Stop", "apply (subst relation_of_inject[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of false `&` P = action.relation_of Stop", "apply (subst relation_of_Stop)"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of false `&` P =\n    R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> wait A')", "apply (subst relation_of_Guard)"], ["proof (prove)\ngoal (1 subgoal):\n 1. R (false \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n       \\<not> action.relation_of\n               P\\<^sup>f\\<^sub>f \\<turnstile> false \\<circ>\n        alpha_rp.more \\<circ>\n        fst \\<and>\n        action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n        \\<not> false \\<circ> alpha_rp.more \\<circ> fst \\<and>\n        (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A')) =\n    R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> wait A')", "apply (simp add: fun_eq_iff utp_defs csp_defs design_defs rp_defs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma false_Guard1: \"\\<And> a b. g (alpha_rp.more a) = False \\<Longrightarrow> \n                                (relation_of (g `&` P)) (a, b) = (relation_of Stop) (a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       g (alpha_rp.more a) = False \\<Longrightarrow>\n       action.relation_of g `&` P (a, b) = action.relation_of Stop (a, b)", "apply (subst relation_of_Guard)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       g (alpha_rp.more a) = False \\<Longrightarrow>\n       R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n          \\<not> action.relation_of\n                  P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n           alpha_rp.more \\<circ>\n           fst \\<and>\n           action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n           \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n        (a, b) =\n       action.relation_of Stop (a, b)", "apply (subst relation_of_Stop)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       g (alpha_rp.more a) = False \\<Longrightarrow>\n       R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n          \\<not> action.relation_of\n                  P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n           alpha_rp.more \\<circ>\n           fst \\<and>\n           action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n           \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n        (a, b) =\n       R (true \\<turnstile> \\<lambda>(A, A'). tr A' = tr A \\<and> wait A')\n        (a, b)", "apply (auto simp: fun_eq_iff csp_defs design_defs rp_defs split: cond_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma true_Guard: \"true `&` P = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. true `&` P = P", "apply (subst relation_of_inject[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of true `&` P = action.relation_of P", "apply (subst relation_of_Guard)"], ["proof (prove)\ngoal (1 subgoal):\n 1. R (true \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n       \\<not> action.relation_of\n               P\\<^sup>f\\<^sub>f \\<turnstile> true \\<circ>\n        alpha_rp.more \\<circ>\n        fst \\<and>\n        action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n        \\<not> true \\<circ> alpha_rp.more \\<circ> fst \\<and>\n        (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A')) =\n    action.relation_of P", "apply (subst CSP_is_rd[OF relation_of_CSP])"], ["proof (prove)\ngoal (1 subgoal):\n 1. R (true \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n       \\<not> R (\\<not> action.relation_of\n                         P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n                   P\\<^sup>t\\<^sub>f)\\<^sup>f\\<^sub>f \\<turnstile> true \\<circ>\n                             alpha_rp.more \\<circ>\n                             fst \\<and>\n                             action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n                             \\<not> true \\<circ> alpha_rp.more \\<circ>\n                                    fst \\<and>\n                             (\\<lambda>(A, A').\n                                 tr A' = tr A \\<and> wait A')) =\n    action.relation_of P", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. R (true \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n       \\<not> action.relation_of\n               P\\<^sup>f\\<^sub>f \\<turnstile> true \\<circ>\n        alpha_rp.more \\<circ>\n        fst \\<and>\n        R (\\<not> action.relation_of\n                   P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n             P\\<^sup>t\\<^sub>f)\\<^sup>t\\<^sub>f \\<or>\n        \\<not> true \\<circ> alpha_rp.more \\<circ> fst \\<and>\n        (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A')) =\n    action.relation_of P", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. R (true \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n       \\<not> action.relation_of\n               P\\<^sup>f\\<^sub>f \\<turnstile> true \\<circ>\n        alpha_rp.more \\<circ>\n        fst \\<and>\n        action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n        \\<not> true \\<circ> alpha_rp.more \\<circ> fst \\<and>\n        (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A')) =\n    R (\\<not> action.relation_of\n               P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n         P\\<^sup>t\\<^sub>f)", "apply (simp add: fun_eq_iff utp_defs csp_defs design_defs rp_defs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma true_Guard1: \"\\<And> a b. g (alpha_rp.more a) = True \\<Longrightarrow> \n                                     (relation_of (g `&` P)) (a, b) = (relation_of P) (a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       g (alpha_rp.more a) = True \\<Longrightarrow>\n       action.relation_of g `&` P (a, b) = action.relation_of P (a, b)", "apply (subst relation_of_Guard)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       g (alpha_rp.more a) = True \\<Longrightarrow>\n       R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n          \\<not> action.relation_of\n                  P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n           alpha_rp.more \\<circ>\n           fst \\<and>\n           action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n           \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n        (a, b) =\n       action.relation_of P (a, b)", "apply (subst CSP_is_rd[OF relation_of_CSP])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       g (alpha_rp.more a) = True \\<Longrightarrow>\n       R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n          \\<not> R (\\<not> action.relation_of\n                            P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n                      P\\<^sup>t\\<^sub>f)\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n                                alpha_rp.more \\<circ>\n                                fst \\<and>\n                                action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n                                \\<not> g \\<circ> alpha_rp.more \\<circ>\n fst \\<and>\n                                (\\<lambda>(A, A').\n                                    tr A' = tr A \\<and> wait A'))\n        (a, b) =\n       action.relation_of P (a, b)", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       g (alpha_rp.more a) = True \\<Longrightarrow>\n       R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n          \\<not> action.relation_of\n                  P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n           alpha_rp.more \\<circ>\n           fst \\<and>\n           R (\\<not> action.relation_of\n                      P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n                P\\<^sup>t\\<^sub>f)\\<^sup>t\\<^sub>f \\<or>\n           \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n        (a, b) =\n       action.relation_of P (a, b)", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       g (alpha_rp.more a) = True \\<Longrightarrow>\n       R (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n          \\<not> action.relation_of\n                  P\\<^sup>f\\<^sub>f \\<turnstile> g \\<circ>\n           alpha_rp.more \\<circ>\n           fst \\<and>\n           action.relation_of P\\<^sup>t\\<^sub>f \\<or>\n           \\<not> g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n        (a, b) =\n       R (\\<not> action.relation_of\n                  P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n            P\\<^sup>t\\<^sub>f)\n        (a, b)", "apply (auto simp: fun_eq_iff csp_defs design_defs rp_defs split: cond_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Guard_is_state_update_before: \"g `&` P = state_update_before (\\<lambda> (s, s') . g s) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g `&` P = state_update_before (\\<lambda>(s, s'). g s) P", "apply (subst relation_of_inject[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of g `&` P =\n    action.relation_of (state_update_before (\\<lambda>(s, s'). g s) P)", "apply (auto simp: relation_of_Guard relation_of_state_update_before relation_of_Skip rp_defs fun_eq_iff\n                  Pre_def update_def design_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n                 (\\<lambda>A.\n                     \\<not> (case A of\n                             (A, A') \\<Rightarrow>\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := False\\<rparr>))))\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and>\n                (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                 (\\<lambda>(A, A').\n                     action.relation_of P\n                      (A\\<lparr>wait := False\\<rparr>, A'\n                       \\<lparr>ok := True\\<rparr>)) \\<or>\n                 (\\<lambda>A. \\<not> g (alpha_rp.more (fst A))) \\<and>\n                 (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       (((\\<lambda>(A, A').\n             \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n             ok A' \\<and>\n             tr A = tr A' \\<and>\n             wait A = wait A' \\<and>\n             ref A = ref A' \\<and>\n             alpha_rp.more A =\n             alpha_rp.more\n              A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n            (\\<lambda>(A, A').\n                (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                 ok A' \\<and>\n                 \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                tr A \\<le> tr A')) ;;\n        action.relation_of P)\n        (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (rule_tac b=a in comp_intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n                 (\\<lambda>A.\n                     \\<not> (case A of\n                             (A, A') \\<Rightarrow>\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := False\\<rparr>))))\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and>\n                (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                 (\\<lambda>(A, A').\n                     action.relation_of P\n                      (A\\<lparr>wait := False\\<rparr>, A'\n                       \\<lparr>ok := True\\<rparr>)) \\<or>\n                 (\\<lambda>A. \\<not> g (alpha_rp.more (fst A))) \\<and>\n                 (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                ok A' \\<and> \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n               tr A \\<le> tr A'))\n        (a, a)\n 2. \\<And>a b.\n       ((\\<lambda>(A, A').\n            \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n            ok A' \\<and>\n            tr A = tr A' \\<and>\n            wait A = wait A' \\<and>\n            ref A = ref A' \\<and>\n            alpha_rp.more A =\n            alpha_rp.more\n             A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n           (\\<lambda>(A, A').\n               (ok A \\<and>\n                (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n                 (\\<lambda>A.\n                     \\<not> (case A of\n                             (A, A') \\<Rightarrow>\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := False\\<rparr>))))\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>) \\<longrightarrow>\n                ok A' \\<and>\n                (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                 (\\<lambda>(A, A').\n                     action.relation_of P\n                      (A\\<lparr>wait := False\\<rparr>, A'\n                       \\<lparr>ok := True\\<rparr>)) \\<or>\n                 (\\<lambda>A. \\<not> g (alpha_rp.more (fst A))) \\<and>\n                 (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                 (A\\<lparr>tr := []\\<rparr>, A'\n                  \\<lparr>tr := tr A' - tr A\\<rparr>)) \\<and>\n               tr A \\<le> tr A'))\n        (a, b) \\<Longrightarrow>\n       action.relation_of P (a, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n          (\\<lambda>A.\n              \\<not> (case A of\n                      (A, A') \\<Rightarrow>\n                        action.relation_of P\n                         (A\\<lparr>wait := False\\<rparr>, A'\n                          \\<lparr>ok := False\\<rparr>))))\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n          (\\<lambda>(A, A').\n              action.relation_of P\n               (A\\<lparr>wait := False\\<rparr>, A'\n                \\<lparr>ok := True\\<rparr>)) \\<or>\n          (\\<lambda>A. \\<not> g (alpha_rp.more (fst A))) \\<and>\n          (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (subst CSP_is_rd)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> is_CSP_process (action.relation_of P)\n 2. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> R (\\<not> action.relation_of\n                                    P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n                              P\\<^sup>t\\<^sub>f)\n                          (a, b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n          (\\<lambda>A.\n              \\<not> (case A of\n                      (A, A') \\<Rightarrow>\n                        action.relation_of P\n                         (A\\<lparr>wait := False\\<rparr>, A'\n                          \\<lparr>ok := False\\<rparr>))))\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n          (\\<lambda>(A, A').\n              action.relation_of P\n               (A\\<lparr>wait := False\\<rparr>, A'\n                \\<lparr>ok := True\\<rparr>)) \\<or>\n          (\\<lambda>A. \\<not> g (alpha_rp.more (fst A))) \\<and>\n          (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 4. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (simp_all add: relation_of_CSP rp_defs design_defs fun_eq_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>wait a;\n        \\<not> ok a \\<and> tr a \\<le> tr b \\<or>\n        ok b \\<and>\n        tr a = tr b \\<and>\n        wait b \\<and>\n        ref a = ref b \\<and> alpha_rp.more a = alpha_rp.more b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  \\<not> action.relation_of P\n    (A\\<lparr>tr := [], wait := False\\<rparr>, A'\n     \\<lparr>tr := tr A' - tr A, ok := False\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  action.relation_of P\n                                   (A\\<lparr>tr := [],\n  wait := False\\<rparr>,\n                                    A'\\<lparr>tr := tr A' - tr A,\n   ok := True\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n          (\\<lambda>A.\n              \\<not> (case A of\n                      (A, A') \\<Rightarrow>\n                        action.relation_of P\n                         (A\\<lparr>wait := False\\<rparr>, A'\n                          \\<lparr>ok := False\\<rparr>))))\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n          (\\<lambda>(A, A').\n              action.relation_of P\n               (A\\<lparr>wait := False\\<rparr>, A'\n                \\<lparr>ok := True\\<rparr>)) \\<or>\n          (\\<lambda>A. \\<not> g (alpha_rp.more (fst A))) \\<and>\n          (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a;\n        (ok a \\<and>\n         (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n          (\\<lambda>A.\n              \\<not> (case A of\n                      (A, A') \\<Rightarrow>\n                        action.relation_of P\n                         (A\\<lparr>wait := False\\<rparr>, A'\n                          \\<lparr>ok := False\\<rparr>))))\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>) \\<longrightarrow>\n         ok b \\<and>\n         (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n          (\\<lambda>(A, A').\n              action.relation_of P\n               (A\\<lparr>wait := False\\<rparr>, A'\n                \\<lparr>ok := True\\<rparr>)) \\<or>\n          (\\<lambda>A. \\<not> g (alpha_rp.more (fst A))) \\<and>\n          (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n          (a\\<lparr>tr := []\\<rparr>, b\n           \\<lparr>tr := tr b - tr a\\<rparr>)) \\<and>\n        tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (auto)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b;\n        \\<not> action.relation_of P (a, b)\\<rbrakk>\n       \\<Longrightarrow> ok a\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b;\n        \\<not> action.relation_of P (a, b); g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b; g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 4. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 5. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (subst (asm) CSP_is_rd)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> is_CSP_process (action.relation_of P)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b;\n        \\<not> R (\\<not> action.relation_of\n                          P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n                    P\\<^sup>t\\<^sub>f)\n                (a, b)\\<rbrakk>\n       \\<Longrightarrow> ok a\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b;\n        \\<not> action.relation_of P (a, b); g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b; g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 5. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 6. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (simp_all add: relation_of_CSP rp_defs design_defs fun_eq_iff)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b;\n        \\<not> ((\\<lambda>(A, A').\n                    \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                    ok A' \\<and>\n                    tr A = tr A' \\<and>\n                    wait A = wait A' \\<and>\n                    ref A = ref A' \\<and>\n                    alpha_rp.more A =\n                    alpha_rp.more\n                     A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                   (\\<lambda>(A, A').\n                       (ok A \\<and>\n                        \\<not> action.relation_of P\n                                (A\\<lparr>tr := [], wait := False\\<rparr>,\n                                 A'\\<lparr>tr := tr A' - tr A,\nok := False\\<rparr>) \\<longrightarrow>\n                        ok A' \\<and>\n                        action.relation_of P\n                         (A\\<lparr>tr := [], wait := False\\<rparr>, A'\n                          \\<lparr>tr := tr A' - tr A,\n                             ok := True\\<rparr>)) \\<and>\n                       tr A \\<le> tr A'))\n                (a, b)\\<rbrakk>\n       \\<Longrightarrow> ok a\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b;\n        \\<not> action.relation_of P (a, b); g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b; g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 4. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 5. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b;\n        \\<not> action.relation_of P (a, b); g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b; g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 4. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (subst (asm) CSP_is_rd)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := False\\<rparr>);\n        \\<not> wait a; tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> is_CSP_process (action.relation_of P)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b;\n        \\<not> R (\\<not> action.relation_of\n                          P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n                    P\\<^sup>t\\<^sub>f)\n                (a, b);\n        g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b; g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 4. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 5. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (simp_all add: relation_of_CSP rp_defs design_defs fun_eq_iff)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b;\n        \\<not> ((\\<lambda>(A, A').\n                    \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                    ok A' \\<and>\n                    tr A = tr A' \\<and>\n                    wait A = wait A' \\<and>\n                    ref A = ref A' \\<and>\n                    alpha_rp.more A =\n                    alpha_rp.more\n                     A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                   (\\<lambda>(A, A').\n                       (ok A \\<and>\n                        \\<not> action.relation_of P\n                                (A\\<lparr>tr := [], wait := False\\<rparr>,\n                                 A'\\<lparr>tr := tr A' - tr A,\nok := False\\<rparr>) \\<longrightarrow>\n                        ok A' \\<and>\n                        action.relation_of P\n                         (A\\<lparr>tr := [], wait := False\\<rparr>, A'\n                          \\<lparr>tr := tr A' - tr A,\n                             ok := True\\<rparr>)) \\<and>\n                       tr A \\<le> tr A'))\n                (a, b);\n        g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b; g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 4. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b; g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (subst CSP_is_rd)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b; g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> is_CSP_process (action.relation_of P)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b; g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> R (\\<not> action.relation_of\n                                    P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n                              P\\<^sup>t\\<^sub>f)\n                          (a, b)\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 4. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (simp_all add: relation_of_CSP rp_defs design_defs fun_eq_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b; g (alpha_rp.more a);\n        action.relation_of P\n         (a\\<lparr>tr := [], wait := False\\<rparr>, b\n          \\<lparr>tr := tr b - tr a, ok := True\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  \\<not> action.relation_of P\n    (A\\<lparr>tr := [], wait := False\\<rparr>, A'\n     \\<lparr>tr := tr A' - tr A, ok := False\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  action.relation_of P\n                                   (A\\<lparr>tr := [],\n  wait := False\\<rparr>,\n                                    A'\\<lparr>tr := tr A' - tr A,\n   ok := True\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, b)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (subst CSP_is_rd)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> is_CSP_process (action.relation_of P)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> R (\\<not> action.relation_of\n                                    P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n                              P\\<^sup>t\\<^sub>f)\n                          (a, b)\n 3. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (simp_all add: relation_of_CSP rp_defs design_defs fun_eq_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  \\<not> action.relation_of P\n    (A\\<lparr>tr := [], wait := False\\<rparr>, A'\n     \\<lparr>tr := tr A' - tr A, ok := False\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  action.relation_of P\n                                   (A\\<lparr>tr := [],\n  wait := False\\<rparr>,\n                                    A'\\<lparr>tr := tr A' - tr A,\n   ok := True\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, b)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b\\<rbrakk>\n       \\<Longrightarrow> ok a \\<and>\n                         \\<not> action.relation_of P\n                                 (a\\<lparr>tr := [], wait := False\\<rparr>,\n                                  b\\<lparr>tr := [],\nok := False\\<rparr>) \\<longrightarrow>\n                         action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and> g (alpha_rp.more A) \\<longrightarrow>\n                         ok A' \\<and>\n                         \\<not> wait A' \\<and> [] = tr A' - tr A) \\<and>\n                        tr A \\<le> tr A'))\n                 (aa, ba);\n        action.relation_of P (ba, c)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (ok A \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<longrightarrow>\n                                   (\\<lambda>A.\n \\<not> (case A of\n         (A, A') \\<Rightarrow>\n           action.relation_of P\n            (A\\<lparr>wait := False\\<rparr>, A'\n             \\<lparr>ok := False\\<rparr>))))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>) \\<longrightarrow>\n                                  ok A' \\<and>\n                                  (g \\<circ> alpha_rp.more \\<circ>\n                                   fst \\<and>\n                                   (\\<lambda>(A, A').\n action.relation_of P\n  (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := True\\<rparr>)) \\<or>\n                                   (\\<lambda>A.\n \\<not> g (alpha_rp.more (fst A))) \\<and>\n                                   (\\<lambda>(A, A').\n tr A' = tr A \\<and> wait A'))\n                                   (A\\<lparr>tr := []\\<rparr>, A'\n                                    \\<lparr>tr :=\n        tr A' - tr A\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (aa, c)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        wait ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<and> g (alpha_rp.more aa) \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)", "apply (subst (asm) CSP_is_rd)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        wait ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> is_CSP_process (action.relation_of P)\n 2. \\<And>aa ba c.\n       \\<lbrakk>R (\\<not> action.relation_of\n                           P\\<^sup>f\\<^sub>f \\<turnstile> action.relation_of\n                     P\\<^sup>t\\<^sub>f)\n                 (ba, c);\n        wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        wait ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<and> g (alpha_rp.more aa) \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 4. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)", "apply (simp_all add: relation_of_CSP rp_defs design_defs fun_eq_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>((\\<lambda>(A, A').\n                     \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                     ok A' \\<and>\n                     tr A = tr A' \\<and>\n                     wait A = wait A' \\<and>\n                     ref A = ref A' \\<and>\n                     alpha_rp.more A =\n                     alpha_rp.more\n                      A') \\<triangleleft> wait \\<circ> fst \\<triangleright> \n                    (\\<lambda>(A, A').\n                        (ok A \\<and>\n                         \\<not> action.relation_of P\n                                 (A\\<lparr>tr := [], wait := False\\<rparr>,\n                                  A'\\<lparr>tr := tr A' - tr A,\n ok := False\\<rparr>) \\<longrightarrow>\n                         ok A' \\<and>\n                         action.relation_of P\n                          (A\\<lparr>tr := [], wait := False\\<rparr>, A'\n                           \\<lparr>tr := tr A' - tr A,\n                              ok := True\\<rparr>)) \\<and>\n                        tr A \\<le> tr A'))\n                 (ba, c);\n        wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        wait ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<and> g (alpha_rp.more aa) \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)", "apply (split cond_splits, simp_all)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         \\<not> action.relation_of P\n                 (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n                  \\<lparr>tr := tr c - tr ba,\n                     ok := False\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         action.relation_of P\n          (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba, ok := True\\<rparr>)) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<and> g (alpha_rp.more aa) \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 4. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)", "defer"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         \\<not> action.relation_of P\n                 (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n                  \\<lparr>tr := tr c - tr ba,\n                     ok := False\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         action.relation_of P\n          (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba, ok := True\\<rparr>)) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<and> g (alpha_rp.more aa) \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)\n 4. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c", "apply (rule disjI1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         \\<not> action.relation_of P\n                 (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n                  \\<lparr>tr := tr c - tr ba,\n                     ok := False\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         action.relation_of P\n          (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba, ok := True\\<rparr>)) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<and> g (alpha_rp.more aa) \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)\n 4. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c", "defer"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<and> g (alpha_rp.more aa) \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)\n 3. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 4. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         \\<not> action.relation_of P\n                 (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n                  \\<lparr>tr := tr c - tr ba,\n                     ok := False\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         action.relation_of P\n          (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba, ok := True\\<rparr>)) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c", "apply (case_tac \"g (alpha_rp.more aa)\", simp_all)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba;\n        g (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; \\<not> g (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 3. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)\n 4. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 5. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         \\<not> action.relation_of P\n                 (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n                  \\<lparr>tr := tr c - tr ba,\n                     ok := False\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         action.relation_of P\n          (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba, ok := True\\<rparr>)) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c", "apply (rule)+"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba;\n        g (alpha_rp.more aa);\n        ok aa \\<and>\n        (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n         (\\<lambda>A.\n             \\<not> (case A of\n                     (A, A') \\<Rightarrow>\n                       action.relation_of P\n                        (A\\<lparr>wait := False\\<rparr>, A'\n                         \\<lparr>ok := False\\<rparr>))))\n         (aa\\<lparr>tr := []\\<rparr>, c\n          \\<lparr>tr := tr c - tr aa\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok c\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba;\n        g (alpha_rp.more aa);\n        ok aa \\<and>\n        (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n         (\\<lambda>A.\n             \\<not> (case A of\n                     (A, A') \\<Rightarrow>\n                       action.relation_of P\n                        (A\\<lparr>wait := False\\<rparr>, A'\n                         \\<lparr>ok := False\\<rparr>))))\n         (aa\\<lparr>tr := []\\<rparr>, c\n          \\<lparr>tr := tr c - tr aa\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                          (\\<lambda>(A, A').\n                              action.relation_of P\n                               (A\\<lparr>wait := False\\<rparr>, A'\n                                \\<lparr>ok := True\\<rparr>)) \\<or>\n                          (\\<lambda>A.\n                              \\<not> g (alpha_rp.more (fst A))) \\<and>\n                          (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                          (aa\\<lparr>tr := []\\<rparr>, c\n                           \\<lparr>tr := tr c - tr aa\\<rparr>)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba;\n        g (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 4. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; \\<not> g (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 5. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)\n 6. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 7. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         \\<not> action.relation_of P\n                 (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n                  \\<lparr>tr := tr c - tr ba,\n                     ok := False\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         action.relation_of P\n          (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba, ok := True\\<rparr>)) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c", "apply (simp add: impl_def)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        ok ba \\<and>\n        \\<not> wait ba \\<and> [] = tr ba - tr aa \\<and> tr aa \\<le> tr ba;\n        g (alpha_rp.more aa);\n        ok aa \\<and>\n        \\<not> action.relation_of P\n                (aa\\<lparr>tr := [], wait := False\\<rparr>, c\n                 \\<lparr>tr := tr c - tr aa, ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok c\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba;\n        g (alpha_rp.more aa);\n        ok aa \\<and>\n        (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n         (\\<lambda>A.\n             \\<not> (case A of\n                     (A, A') \\<Rightarrow>\n                       action.relation_of P\n                        (A\\<lparr>wait := False\\<rparr>, A'\n                         \\<lparr>ok := False\\<rparr>))))\n         (aa\\<lparr>tr := []\\<rparr>, c\n          \\<lparr>tr := tr c - tr aa\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                          (\\<lambda>(A, A').\n                              action.relation_of P\n                               (A\\<lparr>wait := False\\<rparr>, A'\n                                \\<lparr>ok := True\\<rparr>)) \\<or>\n                          (\\<lambda>A.\n                              \\<not> g (alpha_rp.more (fst A))) \\<and>\n                          (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                          (aa\\<lparr>tr := []\\<rparr>, c\n                           \\<lparr>tr := tr c - tr aa\\<rparr>)\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba;\n        g (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 4. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; \\<not> g (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 5. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)\n 6. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 7. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         \\<not> action.relation_of P\n                 (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n                  \\<lparr>tr := tr c - tr ba,\n                     ok := False\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         action.relation_of P\n          (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba, ok := True\\<rparr>)) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c", "defer"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba;\n        g (alpha_rp.more aa);\n        ok aa \\<and>\n        (g \\<circ> alpha_rp.more \\<circ> fst \\<longrightarrow>\n         (\\<lambda>A.\n             \\<not> (case A of\n                     (A, A') \\<Rightarrow>\n                       action.relation_of P\n                        (A\\<lparr>wait := False\\<rparr>, A'\n                         \\<lparr>ok := False\\<rparr>))))\n         (aa\\<lparr>tr := []\\<rparr>, c\n          \\<lparr>tr := tr c - tr aa\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                          (\\<lambda>(A, A').\n                              action.relation_of P\n                               (A\\<lparr>wait := False\\<rparr>, A'\n                                \\<lparr>ok := True\\<rparr>)) \\<or>\n                          (\\<lambda>A.\n                              \\<not> g (alpha_rp.more (fst A))) \\<and>\n                          (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                          (aa\\<lparr>tr := []\\<rparr>, c\n                           \\<lparr>tr := tr c - tr aa\\<rparr>)\n 2. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        (ok aa \\<longrightarrow>\n         ok ba \\<and> \\<not> wait ba \\<and> [] = tr ba - tr aa) \\<and>\n        tr aa \\<le> tr ba;\n        g (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 3. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        tr aa \\<le> tr ba; \\<not> g (alpha_rp.more aa)\\<rbrakk>\n       \\<Longrightarrow> (ok aa \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ>\n                           fst \\<longrightarrow>\n                           (\\<lambda>A.\n                               \\<not> (case A of\n (A, A') \\<Rightarrow>\n   action.relation_of P\n    (A\\<lparr>wait := False\\<rparr>, A'\\<lparr>ok := False\\<rparr>))))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr :=\ntr c - tr aa\\<rparr>) \\<longrightarrow>\n                          ok c \\<and>\n                          (g \\<circ> alpha_rp.more \\<circ> fst \\<and>\n                           (\\<lambda>(A, A').\n                               action.relation_of P\n                                (A\\<lparr>wait := False\\<rparr>, A'\n                                 \\<lparr>ok := True\\<rparr>)) \\<or>\n                           (\\<lambda>A.\n                               \\<not> g (alpha_rp.more (fst A))) \\<and>\n                           (\\<lambda>(A, A'). tr A' = tr A \\<and> wait A'))\n                           (aa\\<lparr>tr := []\\<rparr>, c\n                            \\<lparr>tr := tr c - tr aa\\<rparr>)) \\<and>\n                         tr aa \\<le> tr c\n 4. \\<And>a b.\n       \\<lbrakk>\\<not> wait a; tr a \\<le> tr b; ok b;\n        \\<not> g (alpha_rp.more a); tr b - tr a = []; wait b; ok a;\n        \\<not> action.relation_of P\n                (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                 \\<lparr>tr := [], ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> action.relation_of P\n                          (a\\<lparr>tr := [], wait := False\\<rparr>, b\n                           \\<lparr>tr := [], ok := True\\<rparr>)\n 5. \\<And>aa ba c.\n       \\<lbrakk>wait aa;\n        \\<not> ok aa \\<and> tr aa \\<le> tr ba \\<or>\n        ok ba \\<and>\n        tr aa = tr ba \\<and>\n        ref aa = ref ba \\<and> alpha_rp.more aa = alpha_rp.more ba;\n        wait ba;\n        \\<not> ok ba \\<and> tr ba \\<le> tr c \\<or>\n        ok c \\<and>\n        tr ba = tr c \\<and>\n        wait c \\<and>\n        ref ba = ref c \\<and> alpha_rp.more ba = alpha_rp.more c\\<rbrakk>\n       \\<Longrightarrow> \\<not> ok aa \\<and> tr aa \\<le> tr c \\<or>\n                         ok c \\<and>\n                         tr aa = tr c \\<and>\n                         wait c \\<and>\n                         ref aa = ref c \\<and>\n                         alpha_rp.more aa = alpha_rp.more c\n 6. \\<And>aa ba c.\n       \\<lbrakk>wait aa; \\<not> ok aa \\<and> tr aa \\<le> tr ba;\n        \\<not> wait ba;\n        (ok ba \\<and>\n         \\<not> action.relation_of P\n                 (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n                  \\<lparr>tr := tr c - tr ba,\n                     ok := False\\<rparr>) \\<longrightarrow>\n         ok c \\<and>\n         action.relation_of P\n          (ba\\<lparr>tr := [], wait := False\\<rparr>, c\n           \\<lparr>tr := tr c - tr ba, ok := True\\<rparr>)) \\<and>\n        tr ba \\<le> tr c\\<rbrakk>\n       \\<Longrightarrow> tr aa \\<le> tr c\n 7. \\<And>aa ba c.\n       \\<lbrakk>action.relation_of P (ba, c); \\<not> wait aa;\n        ok ba \\<and>\n        \\<not> wait ba \\<and> [] = tr ba - tr aa \\<and> tr aa \\<le> tr ba;\n        g (alpha_rp.more aa);\n        ok aa \\<and>\n        \\<not> action.relation_of P\n                (aa\\<lparr>tr := [], wait := False\\<rparr>, c\n                 \\<lparr>tr := tr c - tr aa, ok := False\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> ok c", "oops"], ["", "subsection \\<open>Prefixed action\\<close>"], ["", "definition do where\n\"do e \\<equiv> (\\<lambda>(A, A'). tr A = tr A' \\<and> (e (more A)) \\<notin> (ref A')) \\<triangleleft> wait o snd \\<triangleright> \n         (\\<lambda>(A, A'). tr A' = (tr A @[(e (more A))]))\""], ["", "definition do_I::\"('\\<sigma> \\<Rightarrow>'\\<theta>) \\<Rightarrow> '\\<theta> set \\<Rightarrow> ('\\<theta>, '\\<sigma>) relation_rp\"\nwhere \"do_I c S \\<equiv>  ((\\<lambda>(A, A'). tr A = tr A' & S \\<inter> (ref A') = {})\n                                \\<triangleleft> wait o snd \\<triangleright> \n  (\\<lambda>(A, A'). hd (tr A' - tr A) \\<in> S & (c (more A) = (last (tr A')))))\""], ["", "(*\ndefinition do_I::\"('v \\<Rightarrow> '\\<theta>) \\<Rightarrow> ('v, '\\<sigma>) var_list \\<Rightarrow> 'v set \\<Rightarrow> ('\\<theta>, '\\<sigma>) relation_rp\"\nwhere \"do_I c x P \\<equiv>  ((\\<lambda>(A, A'). tr A = tr A' \\<and> (c`P) \\<inter> (ref A') = {})\n                                \\<triangleleft> wait o fst \\<triangleright> \n  (\\<lambda>(A, A'). hd (tr A' - tr A) \\<in> (c`P) \\<and> (c (select x (more A)) = (last (tr A')))))\"\n*)"], ["", "definition\niPrefix::\"('\\<sigma> \\<Rightarrow>'\\<theta>::ev_eq) \\<Rightarrow> ('\\<sigma> relation) \\<Rightarrow> (('\\<theta>, '\\<sigma>) action \\<Rightarrow> ('\\<theta>, '\\<sigma>) action) \\<Rightarrow> ('\\<sigma> \\<Rightarrow> '\\<theta> set) \\<Rightarrow> ('\\<theta>, '\\<sigma>) action \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\" where\n\"iPrefix c i j S P \\<equiv> action_of(R(true \\<turnstile> (\\<lambda> (A, A'). (do_I c (S (more A))) (A, A') & more A' = more A)))`;` P\""], ["", "definition\noPrefix::\"('\\<sigma> \\<Rightarrow>'\\<theta>) \\<Rightarrow> ('\\<theta>::ev_eq, '\\<sigma>) action \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\" where\n\"oPrefix c P \\<equiv> action_of(R(true \\<turnstile> (do c) \\<and> (\\<lambda> (A, A'). more A' = more A)))`;` P\""], ["", "definition Prefix0::\"'\\<theta> \\<Rightarrow> ('\\<theta>::ev_eq, '\\<sigma>) action \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\" where\n\"Prefix0 c P \\<equiv> action_of(R(true \\<turnstile> (do (\\<lambda> _. c)) \\<and> (\\<lambda> (A, A'). more A' = more A)))`;` P\""], ["", "definition \nread::\"('v \\<Rightarrow> '\\<theta>) \\<Rightarrow> ('v, '\\<sigma>) var_list \\<Rightarrow> ('\\<theta>::ev_eq, '\\<sigma>) action \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\"\nwhere  \"read c x P  \\<equiv> iPrefix (\\<lambda> A. c (select x A)) (\\<lambda> (s, s'). \\<exists> a. s' = increase x a s) (Let x) (\\<lambda>_. range c) P\""], ["", "definition \nread1::\"('v \\<Rightarrow> '\\<theta>) \\<Rightarrow> ('v, '\\<sigma>) var_list \\<Rightarrow> ('\\<sigma> \\<Rightarrow> 'v set) \\<Rightarrow> ('\\<theta>::ev_eq, '\\<sigma>) action \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\"\nwhere  \"read1 c x S P  \\<equiv> iPrefix (\\<lambda> A. c (select x A)) (\\<lambda> (s, s'). \\<exists> a. a\\<in>(S s) & s' = increase x a s) (Let x) (\\<lambda>s. c`(S s)) P\""], ["", "definition \nwrite1::\"('v \\<Rightarrow> '\\<theta>) \\<Rightarrow> ('\\<sigma> \\<Rightarrow> 'v) \\<Rightarrow> ('\\<theta>::ev_eq, '\\<sigma>) action \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\"\nwhere \"write1 c a P \\<equiv> oPrefix (\\<lambda> A. c (a A)) P\""], ["", "definition \nwrite0::\"'\\<theta> \\<Rightarrow> ('\\<theta>::ev_eq, '\\<sigma>) action \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\" \nwhere \"write0 c P \\<equiv> Prefix0 c P\""], ["", "syntax\n\"_read\"  ::\"[id, pttrn, ('\\<theta>, '\\<sigma>) action] => ('\\<theta>, '\\<sigma>) action\" (\"(_`?`_ /\\<rightarrow> _)\")\n\"_readS\" ::\"[id, pttrn, '\\<theta> set,('\\<theta>, '\\<sigma>) action] => ('\\<theta>, '\\<sigma>) action\" (\"(_`?`_`:`_ /\\<rightarrow> _)\")\n\"_readSS\" ::\"[id, pttrn, '\\<sigma> => '\\<theta> set,('\\<theta>, '\\<sigma>) action] => ('\\<theta>, '\\<sigma>) action\" (\"(_`?`_`\\<in>`_ /\\<rightarrow> _)\")\n\"_write\" ::\"[id, '\\<sigma>, ('\\<theta>, '\\<sigma>) action] => ('\\<theta>, '\\<sigma>) action\" (\"(_`!`_ /\\<rightarrow> _)\")\n\"_writeS\"::\"['\\<theta>, ('\\<theta>, '\\<sigma>) action] => ('\\<theta>, '\\<sigma>) action\" (\"(_ /\\<rightarrow> _)\")"], ["", "translations\n\"_read c p P\"    == \"CONST read c (VAR_LIST p) P\" \n\"_readS c p b P\" == \"CONST read1 c (VAR_LIST p) (\\<lambda>_. b) P\"\n\"_readSS c p b P\" == \"CONST read1 c (VAR_LIST p) b P\"\n\"_write c p P\"   == \"CONST write1 c p P\"\n\"_writeS a P\"    == \"CONST write0 a P\""], ["", "lemma Prefix_is_action:\n\"(R(true \\<turnstile> (do c) \\<and> (\\<lambda> (A, A'). more A' = more A))) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (true \\<turnstile> do c \\<and>\n                         (\\<lambda>(A, A').\n                             alpha_rp.more A' = alpha_rp.more A))\n    \\<in> {p. is_CSP_process p}", "by (auto intro: rd_is_CSP)"], ["", "lemma Prefix1_is_action:\n\"(R(true \\<turnstile> \\<lambda>(A, A'). do_I c (S (alpha_rp.more A)) (A, A') \\<and> alpha_rp.more A' = alpha_rp.more A)) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (true \\<turnstile> \\<lambda>(A, A').\n                            do_I c (S (alpha_rp.more A)) (A, A') \\<and>\n                            alpha_rp.more A' = alpha_rp.more A)\n    \\<in> {p. is_CSP_process p}", "by (auto intro: rd_is_CSP)"], ["", "lemma Prefix0_is_action:\n\"(R(true \\<turnstile> (do c) \\<and> (\\<lambda> (A, A'). more A' = more A))) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R (true \\<turnstile> do c \\<and>\n                         (\\<lambda>(A, A').\n                             alpha_rp.more A' = alpha_rp.more A))\n    \\<in> {p. is_CSP_process p}", "by (auto intro: rd_is_CSP)"], ["", "lemmas Prefix_is_CSP = Prefix_is_action[simplified]"], ["", "lemmas Prefix1_is_CSP = Prefix1_is_action[simplified]"], ["", "lemmas Prefix0_is_CSP = Prefix0_is_action[simplified]"], ["", "lemma relation_of_iPrefix:\n\"relation_of (iPrefix c i j S P) = \n((R(true \\<turnstile> (\\<lambda> (A, A'). (do_I c (S (more A))) (A, A') & more A' = more A)));; relation_of P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (iPrefix c i j S P) =\n    (R (true \\<turnstile> \\<lambda>(A, A').\n                             do_I c (S (alpha_rp.more A)) (A, A') \\<and>\n                             alpha_rp.more A' = alpha_rp.more A) ;;\n     action.relation_of P)", "by (simp add: iPrefix_def relation_of_Seq action_of_inverse Prefix1_is_CSP)"], ["", "lemma relation_of_oPrefix:\n\"relation_of (oPrefix c P) = \n((R(true \\<turnstile> (do c) \\<and> (\\<lambda> (A, A'). more A' = more A)));; relation_of P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (oPrefix c P) =\n    (R (true \\<turnstile> do c \\<and>\n                          (\\<lambda>(A, A').\n                              alpha_rp.more A' = alpha_rp.more A)) ;;\n     action.relation_of P)", "by (simp add: oPrefix_def relation_of_Seq action_of_inverse Prefix_is_CSP)"], ["", "lemma relation_of_Prefix0:\n\"relation_of (Prefix0 c P) = \n((R(true \\<turnstile> (do (\\<lambda> _. c)) \\<and> (\\<lambda> (A, A'). more A' = more A)));; relation_of P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (Prefix0 c P) =\n    (R (true \\<turnstile> do (\\<lambda>_. c) \\<and>\n                          (\\<lambda>(A, A').\n                              alpha_rp.more A' = alpha_rp.more A)) ;;\n     action.relation_of P)", "by (simp add: Prefix0_def relation_of_Seq action_of_inverse Prefix0_is_CSP)"], ["", "lemma mono_iPrefix : \"mono (iPrefix c i j s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (iPrefix c i j s)", "by (auto simp: mono_def less_eq_action ref_def relation_of_iPrefix)"], ["", "lemma mono_oPrefix : \"mono (oPrefix c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (oPrefix c)", "by (auto simp: mono_def less_eq_action ref_def relation_of_oPrefix)"], ["", "lemma mono_Prefix0 : \"mono(Prefix0 c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (Prefix0 c)", "by (auto simp: mono_def less_eq_action ref_def relation_of_Prefix0)"], ["", "subsection \\<open>Hiding\\<close>"], ["", "definition Hide::\"('\\<theta>::ev_eq, '\\<sigma>) action \\<Rightarrow> '\\<theta> set \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\" (infixl \"\\\\\" 18) where\n\"P \\\\ cs \\<equiv> action_of(R(\\<lambda>(S, S'). \\<exists> s. (diff_tr S' S) = (tr_filter (s - (tr S)) cs) &\n             (relation_of P)(S, S'\\<lparr>tr := s, ref := (ref S') \\<union> cs \\<rparr>));; (relation_of Skip))\""], ["", "definition \n\"hid P cs == (R(\\<lambda>(S, S'). \\<exists> s. (diff_tr S' S) = (tr_filter (s - (tr S)) cs) & (relation_of P)(S, S'\\<lparr>tr := s, ref := (ref S') \\<union> cs \\<rparr>)) ;; (relation_of Skip))\""], ["", "lemma hid_is_R: \"hid P cs is R healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hid P cs is R healthy", "apply (simp add: hid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. R (\\<lambda>(S, S').\n          \\<exists>s.\n             diff_tr S' S = tr_filter (s - tr S) cs \\<and>\n             action.relation_of P\n              (S, S'\\<lparr>tr := s, ref := ref S' \\<union> cs\\<rparr>)) ;;\n    action.relation_of Skip is R healthy", "apply (rule seq_R)"], ["proof (prove)\ngoal (2 subgoals):\n 1. R (\\<lambda>(S, S').\n          \\<exists>s.\n             diff_tr S' S = tr_filter (s - tr S) cs \\<and>\n             action.relation_of P\n              (S, S'\n               \\<lparr>tr := s,\n                  ref := ref S' \\<union> cs\\<rparr>)) is R healthy\n 2. action.relation_of Skip is R healthy", "apply (simp add: Healthy_def R_idem2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of Skip is R healthy", "apply (rule CSP_is_R)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process (action.relation_of Skip)", "apply (rule relation_of_CSP)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma hid_Skip: \"hid P cs = (hid P cs ;; relation_of Skip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hid P cs = (hid P cs ;; action.relation_of Skip)", "by (simp add: hid_def comp_assoc[symmetric] Skip_comp_absorb)"], ["", "lemma hid_is_CSP1: \"hid P cs is CSP1 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hid P cs is CSP1 healthy", "apply (auto simp: design_defs CSP1_def hid_def rp_defs fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> ok a; tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>(A, A').\n                               \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                               ok A' \\<and>\n                               tr A = tr A' \\<and>\n                               wait A = wait A' \\<and>\n                               ref A = ref A' \\<and>\n                               alpha_rp.more A =\n                               alpha_rp.more\n                                A') \\<triangleleft> wait \\<circ>\n              fst \\<triangleright> \n                              (\\<lambda>(A, A').\n                                  (\\<exists>s.\ndiff_tr (A'\\<lparr>tr := tr A' - tr A\\<rparr>) (A\\<lparr>tr := []\\<rparr>) =\ntr_filter s cs \\<and>\naction.relation_of P\n (A\\<lparr>tr := []\\<rparr>, A'\n  \\<lparr>tr := s, ref := ref A' \\<union> cs\\<rparr>)) \\<and>\n                                  tr A \\<le> tr A')) ;;\n                          action.relation_of Skip)\n                          (a, b)", "apply (rule_tac b=\"a\" in comp_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> ok a; tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>(A, A').\n                              \\<not> ok A \\<and> tr A \\<le> tr A' \\<or>\n                              ok A' \\<and>\n                              tr A = tr A' \\<and>\n                              wait A = wait A' \\<and>\n                              ref A = ref A' \\<and>\n                              alpha_rp.more A =\n                              alpha_rp.more\n                               A') \\<triangleleft> wait \\<circ>\n             fst \\<triangleright> \n                             (\\<lambda>(A, A').\n                                 (\\<exists>s.\n                                     diff_tr\n(A'\\<lparr>tr := tr A' - tr A\\<rparr>) (A\\<lparr>tr := []\\<rparr>) =\n                                     tr_filter s cs \\<and>\n                                     action.relation_of P\n(A\\<lparr>tr := []\\<rparr>, A'\n \\<lparr>tr := s, ref := ref A' \\<union> cs\\<rparr>)) \\<and>\n                                 tr A \\<le> tr A'))\n                          (a, a)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> ok a; tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of Skip (a, b)", "apply (clarsimp split: cond_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> ok a; tr a \\<le> tr b; \\<not> wait a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            diff_tr (a\\<lparr>tr := []\\<rparr>)\n                             (a\\<lparr>tr := []\\<rparr>) =\n                            tr_filter s cs \\<and>\n                            action.relation_of P\n                             (a\\<lparr>tr := []\\<rparr>, a\n                              \\<lparr>tr := s,\n                                 ref := ref a \\<union> cs\\<rparr>)\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> ok a; tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of Skip (a, b)", "apply (subst CSP_is_rd, auto simp: rp_defs relation_of_CSP design_defs fun_eq_iff split: cond_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> ok a; tr a \\<le> tr b; \\<not> wait a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            diff_tr (a\\<lparr>tr := []\\<rparr>)\n                             (a\\<lparr>tr := []\\<rparr>) =\n                            tr_filter s cs\n 2. \\<And>a b.\n       \\<lbrakk>\\<not> ok a; tr a \\<le> tr b\\<rbrakk>\n       \\<Longrightarrow> action.relation_of Skip (a, b)", "apply (auto simp: diff_tr_def relation_of_Skip rp_defs design_defs true_def split: cond_splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<not> ok a; tr a \\<le> tr b; \\<not> wait a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s. [] = tr_filter s cs", "apply (rule_tac x=\"[]\" in exI, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma hid_is_CSP2: \"hid P cs is CSP2 healthy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hid P cs is CSP2 healthy", "apply (simp add: hid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. R (\\<lambda>(S, S').\n          \\<exists>s.\n             diff_tr S' S = tr_filter (s - tr S) cs \\<and>\n             action.relation_of P\n              (S, S'\\<lparr>tr := s, ref := ref S' \\<union> cs\\<rparr>)) ;;\n    action.relation_of Skip is CSP2 healthy", "apply (rule seq_CSP2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of Skip is CSP2 healthy", "apply (rule CSP_is_CSP2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process (action.relation_of Skip)", "apply (rule relation_of_CSP)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma hid_is_CSP: \"is_CSP_process (hid P cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process (hid P cs)", "by (auto simp: csp_defs hid_is_CSP1 hid_is_R hid_is_CSP2)"], ["", "lemma Hide_is_action: \n\"(R(\\<lambda>(S, S'). \\<exists> s. (diff_tr S' S) = (tr_filter (s - (tr S)) cs) &\n   (relation_of P)(S, S'\\<lparr>tr := s, ref := (ref S') \\<union> cs \\<rparr>));; (relation_of Skip)) \\<in> {p. is_CSP_process p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (R (\\<lambda>(S, S').\n           \\<exists>s.\n              diff_tr S' S = tr_filter (s - tr S) cs \\<and>\n              action.relation_of P\n               (S, S'\\<lparr>tr := s, ref := ref S' \\<union> cs\\<rparr>)) ;;\n     action.relation_of Skip)\n    \\<in> {p. is_CSP_process p}", "by (simp add: hid_is_CSP[simplified hid_def])"], ["", "lemmas Hide_is_CSP = Hide_is_action[simplified]"], ["", "lemma relation_of_Hide:\n\"relation_of (P \\\\ cs) = (R(\\<lambda>(S, S'). \\<exists> s. (diff_tr S' S) = (tr_filter (s - (tr S)) cs)\n        & (relation_of P)(S, S'\\<lparr>tr :=s, ref := (ref S') \\<union> cs \\<rparr>));; (relation_of Skip))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. action.relation_of (P \\ cs) =\n    (R (\\<lambda>(S, S').\n           \\<exists>s.\n              diff_tr S' S = tr_filter (s - tr S) cs \\<and>\n              action.relation_of P\n               (S, S'\\<lparr>tr := s, ref := ref S' \\<union> cs\\<rparr>)) ;;\n     action.relation_of Skip)", "by (simp add: Hide_def action_of_inverse Hide_is_CSP)"], ["", "lemma mono_Hide : \"mono(\\<lambda> P. P \\\\ cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<lambda>P. P \\ cs)", "by (auto simp: mono_def less_eq_action ref_def prefix_def utp_defs relation_of_Hide rp_defs)"], ["", "subsection \\<open>Recursion\\<close>"], ["", "text \\<open>To represent the recursion operator \"\\<open>\\<mu>\\<close>\" over actions, we use the\nuniversal least fix-point operator \"@{const lfp}\" defined in the HOL library for lattices. \nThe operator \"@{const lfp}\" is inherited from the \"Complete Lattice class\" under some conditions. \nAll theorems defined over this operator can be reused.\\<close>"], ["", "text \\<open>In the @{theory Circus.Circus_Actions} theory, we presented the proof that Circus actions \nform a complete lattice. The Knaster-Tarski Theorem (in its simplest formulation) states \nthat any monotone function on a complete lattice has a least fixed-point. \nThis is a consequence of the basic boundary properties of the complete lattice operations. \nInstantiating the complete lattice class allows one to inherit these properties with the \ndefinition of the least fixed-point for monotonic functions over Circus actions.\n\\<close>"], ["", "syntax \"_MU\"::\"[idt, idt \\<Rightarrow> ('\\<theta>, '\\<sigma>) action] \\<Rightarrow> ('\\<theta>, '\\<sigma>) action\"  (\"\\<mu> _ \\<bullet> _\")"], ["", "translations \"_MU X P\" == \"CONST lfp (\\<lambda> X. P)\""], ["", "(*<*)"], ["", "text\\<open>Instead fo the following:\\<close>"], ["", "lemma is_action_REP_Mu:\n  shows \"is_CSP_process (relation_of (lfp P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_CSP_process (action.relation_of (lfp P))", "oops"], ["", "text\\<open>... we refer to the proof of @{thm Sup_is_action} and its \nanalogue who capture the essence of this proof at the level of the\ntype instantiation.\\<close>"], ["", "text\\<open>Monotonicity: STATUS: probably critical.  Does not seem to be necessary for \nparameterless Circus.\\<close>"], ["", "lemma mono_Mu:\n  assumes A : \"mono P\"\n  and     B : \"\\<And> X. mono (P X)\"\n  shows  \"mono (lfp P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (lfp P)", "apply (subst lfp_unfold)"], ["proof (prove)\ngoal (2 subgoals):\n 1. mono P\n 2. mono (P (lfp P))", "apply (auto simp: A B)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "term Nat.Suc"], ["", "(*>*)"], ["", "end"]]}