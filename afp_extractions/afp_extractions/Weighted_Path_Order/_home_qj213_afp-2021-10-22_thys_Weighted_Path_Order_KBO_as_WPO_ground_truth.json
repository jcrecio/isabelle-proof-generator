{"file_name": "/home/qj213/afp-2021-10-22/thys/Weighted_Path_Order/KBO_as_WPO.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Weighted_Path_Order", "problem_names": ["lemma finite_funas_term[simp,intro]: \"finite (funas_term t)\"", "lemma weight_le_less_iff: \"weight_le s t \\<Longrightarrow> weight_less s t \\<longleftrightarrow> weight s < weight t\"", "lemma weight_less_iff: \"weight_less s t \\<Longrightarrow> weight_le s t \\<and> weight s < weight t\"", "lemma weight_le_mono_one:\n  assumes S: \"weight_le s t\"\n  shows \"weight_le (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))\" (is \"weight_le ?s ?t\")", "lemma weight_le_ctxt: \"weight_le s t \\<Longrightarrow> weight_le (C\\<langle>s\\<rangle>) (C\\<langle>t\\<rangle>)\"", "lemma SCF_stable:\n  assumes \"vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t)\"\n  shows \"vars_term_ms (SCF (s \\<cdot> \\<sigma>)) \\<subseteq># vars_term_ms (SCF (t \\<cdot> \\<sigma>))\"", "lemma SN_weight_S: \"SN weight_S\"", "lemma weight_less_imp_le: \"weight_less s t \\<Longrightarrow> weight_le s t\"", "lemma weight_le_Var_Var: \"weight_le (Var x) (Var y) \\<longleftrightarrow> x = y\"", "lemma kbo_altdef:\n    \"kbo s t = (if weight_le t s\n      then if weight_less t s\n        then (True, True)\n        else (case s of\n          Var y \\<Rightarrow> (False, (case t of Var x \\<Rightarrow> x = y | Fun g ts \\<Rightarrow> ts = [] \\<and> least g))\n        | Fun f ss \\<Rightarrow> (case t of\n            Var x \\<Rightarrow> (True, True)\n          | Fun g ts \\<Rightarrow> if pr_strict (f, length ss) (g, length ts)\n            then (True, True)\n            else if pr_weak (f, length ss) (g, length ts)\n            then lex_ext_unbounded kbo ss ts\n            else (False, False)))\n      else (False, False))\"", "lemma weight_le_stable:\n  assumes \"weight_le s t\"\n  shows \"weight_le (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\"", "lemma weight_less_stable:\n  assumes \"weight_less s t\"\n  shows \"weight_less (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\"", "lemma simple_arg_pos_weight: \"simple_arg_pos weight_NS (f,n) i\"", "lemma weight_lemmas:\n  shows \"refl weight_NS\" and \"trans weight_NS\" and \"trans weight_S\"\n    and \"weight_NS O weight_S \\<subseteq> weight_S\" and \"weight_S O weight_NS \\<subseteq> weight_S\"", "lemma kbo_instance_of_wpo_with_assms: \"wpo_with_assms \n  weight_S weight_NS (\\<lambda>f g. (pr_strict f g, pr_weak f g))\n     (\\<lambda>(f, n). n = 0 \\<and> least f) full_status False (\\<lambda>f. False)\"", "lemma kbo_as_wpo_with_assms: assumes \"bounded_arity n (funas_term t)\"\n  shows \"kbo s t = wpo.wpo s t\"", "lemma defines \"prec \\<equiv> ((\\<lambda>f g. (pr_strict' f g, pr_weak' f g)))\" \n  and \"prl \\<equiv> (\\<lambda>(f, n). n = 0 \\<and> least f)\" \n  shows \n    kbo_encoding_is_valid_wpo: \"wpo_with_assms weight_S weight_NS prec prl full_status False (\\<lambda>f. False)\"\n  and \n    kbo_as_wpo: \"bounded_arity n (funas_term t) \\<Longrightarrow> kbo s t = wpo.wpo n weight_S weight_NS prec prl full_status (\\<lambda>_. Lex) False (\\<lambda>f. False) s t\"", "lemma KBO_stable_via_WPO: \"S s t \\<Longrightarrow> S (s \\<cdot> (\\<sigma> :: ('f,'a) subst)) (t \\<cdot> \\<sigma>)\"", "lemma weight_is_arity_bound: \"weight t \\<le> b \\<Longrightarrow> bounded_arity b (funas_term t)\"", "lemma KBO_SN_via_WPO: \"SN {(s,t). S s t}\""], "translations": [["", "lemma finite_funas_term[simp,intro]: \"finite (funas_term t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (funas_term t)", "by (induct t, auto)"], ["", "context weight_fun begin"], ["", "definition \"weight_le s t \\<equiv>\n  (vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t) \\<and> weight s \\<le> weight t)\""], ["", "definition \"weight_less s t \\<equiv>\n  (vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t) \\<and> weight s < weight t)\""], ["", "lemma weight_le_less_iff: \"weight_le s t \\<Longrightarrow> weight_less s t \\<longleftrightarrow> weight s < weight t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight_le s t \\<Longrightarrow> weight_less s t = (weight s < weight t)", "by (auto simp: weight_le_def weight_less_def)"], ["", "lemma weight_less_iff: \"weight_less s t \\<Longrightarrow> weight_le s t \\<and> weight s < weight t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight_less s t \\<Longrightarrow>\n    weight_le s t \\<and> weight s < weight t", "by (auto simp: weight_le_def weight_less_def)"], ["", "abbreviation \"weight_NS \\<equiv> {(t,s). weight_le s t}\""], ["", "abbreviation \"weight_S \\<equiv> {(t,s). weight_less s t}\""], ["", "lemma weight_le_mono_one:\n  assumes S: \"weight_le s t\"\n  shows \"weight_le (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))\" (is \"weight_le ?s ?t\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. weight_le (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. weight_le (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "from S"], ["proof (chain)\npicking this:\n  weight_le s t", "have w: \"weight s \\<le> weight t\" and v: \"vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t)\""], ["proof (prove)\nusing this:\n  weight_le s t\n\ngoal (1 subgoal):\n 1. weight s \\<le> weight t &&&\n    vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t)", "by (auto simp: weight_le_def)"], ["proof (state)\nthis:\n  weight s \\<le> weight t\n  vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t)\n\ngoal (1 subgoal):\n 1. weight_le (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "have v': \"vars_term_ms (SCF ?s) \\<subseteq># vars_term_ms (SCF ?t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_term_ms (SCF (Fun f (ss1 @ s # ss2))) \\<subseteq>#\n    vars_term_ms (SCF (Fun f (ss1 @ t # ss2)))", "using mset_replicate_mono[OF v]"], ["proof (prove)\nusing this:\n  \\<Sum>\\<^sub># (mset (replicate ?n (vars_term_ms (SCF s)))) \\<subseteq>#\n  \\<Sum>\\<^sub># (mset (replicate ?n (vars_term_ms (SCF t))))\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF (Fun f (ss1 @ s # ss2))) \\<subseteq>#\n    vars_term_ms (SCF (Fun f (ss1 @ t # ss2)))", "by simp"], ["proof (state)\nthis:\n  vars_term_ms (SCF (Fun f (ss1 @ s # ss2))) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (ss1 @ t # ss2)))\n\ngoal (1 subgoal):\n 1. weight_le (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "have w': \"weight ?s \\<le> weight ?t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (Fun f (ss1 @ s # ss2)) \\<le> weight (Fun f (ss1 @ t # ss2))", "using sum_list_replicate_mono[OF w]"], ["proof (prove)\nusing this:\n  sum_list (replicate ?n (weight s))\n  \\<le> sum_list (replicate ?n (weight t))\n\ngoal (1 subgoal):\n 1. weight (Fun f (ss1 @ s # ss2)) \\<le> weight (Fun f (ss1 @ t # ss2))", "by simp"], ["proof (state)\nthis:\n  weight (Fun f (ss1 @ s # ss2)) \\<le> weight (Fun f (ss1 @ t # ss2))\n\ngoal (1 subgoal):\n 1. weight_le (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "from v' w'"], ["proof (chain)\npicking this:\n  vars_term_ms (SCF (Fun f (ss1 @ s # ss2))) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (ss1 @ t # ss2)))\n  weight (Fun f (ss1 @ s # ss2)) \\<le> weight (Fun f (ss1 @ t # ss2))", "show ?thesis"], ["proof (prove)\nusing this:\n  vars_term_ms (SCF (Fun f (ss1 @ s # ss2))) \\<subseteq>#\n  vars_term_ms (SCF (Fun f (ss1 @ t # ss2)))\n  weight (Fun f (ss1 @ s # ss2)) \\<le> weight (Fun f (ss1 @ t # ss2))\n\ngoal (1 subgoal):\n 1. weight_le (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))", "by (auto simp: weight_le_def)"], ["proof (state)\nthis:\n  weight_le (Fun f (ss1 @ s # ss2)) (Fun f (ss1 @ t # ss2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weight_le_ctxt: \"weight_le s t \\<Longrightarrow> weight_le (C\\<langle>s\\<rangle>) (C\\<langle>t\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight_le s t \\<Longrightarrow>\n    weight_le C\\<langle>s\\<rangle> C\\<langle>t\\<rangle>", "by (induct C, auto intro: weight_le_mono_one)"], ["", "lemma SCF_stable:\n  assumes \"vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t)\"\n  shows \"vars_term_ms (SCF (s \\<cdot> \\<sigma>)) \\<subseteq># vars_term_ms (SCF (t \\<cdot> \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_term_ms (SCF (s \\<cdot> \\<sigma>)) \\<subseteq>#\n    vars_term_ms (SCF (t \\<cdot> \\<sigma>))", "unfolding scf_term_subst"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_term_ms (SCF s \\<cdot> (\\<lambda>x. SCF (\\<sigma> x))) \\<subseteq>#\n    vars_term_ms (SCF t \\<cdot> (\\<lambda>x. SCF (\\<sigma> x)))", "using vars_term_ms_subst_mono[OF assms]"], ["proof (prove)\nusing this:\n  vars_term_ms (SCF s \\<cdot> ?\\<sigma>) \\<subseteq>#\n  vars_term_ms (SCF t \\<cdot> ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. vars_term_ms (SCF s \\<cdot> (\\<lambda>x. SCF (\\<sigma> x))) \\<subseteq>#\n    vars_term_ms (SCF t \\<cdot> (\\<lambda>x. SCF (\\<sigma> x)))", "."], ["", "lemma SN_weight_S: \"SN weight_S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN weight_S", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. SN weight_S", "from wf_inv_image[OF wf_less]"], ["proof (chain)\npicking this:\n  wf (inv_image {(x, y). x < y} ?f)", "have wf: \"wf {(s,t). weight s < weight t}\""], ["proof (prove)\nusing this:\n  wf (inv_image {(x, y). x < y} ?f)\n\ngoal (1 subgoal):\n 1. wf {(s, t). weight s < weight t}", "by (auto simp: inv_image_def)"], ["proof (state)\nthis:\n  wf {(s, t). weight s < weight t}\n\ngoal (1 subgoal):\n 1. SN weight_S", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. SN weight_S", "by (unfold SN_iff_wf, rule wf_subset[OF wf], auto simp: weight_less_def)"], ["proof (state)\nthis:\n  SN weight_S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weight_less_imp_le: \"weight_less s t \\<Longrightarrow> weight_le s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight_less s t \\<Longrightarrow> weight_le s t", "by (simp add: weight_less_def weight_le_def)"], ["", "lemma weight_le_Var_Var: \"weight_le (Var x) (Var y) \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight_le (Var x) (Var y) = (x = y)", "by (auto simp: weight_le_def)"], ["", "end"], ["", "context kbo begin"], ["", "lemma kbo_altdef:\n    \"kbo s t = (if weight_le t s\n      then if weight_less t s\n        then (True, True)\n        else (case s of\n          Var y \\<Rightarrow> (False, (case t of Var x \\<Rightarrow> x = y | Fun g ts \\<Rightarrow> ts = [] \\<and> least g))\n        | Fun f ss \\<Rightarrow> (case t of\n            Var x \\<Rightarrow> (True, True)\n          | Fun g ts \\<Rightarrow> if pr_strict (f, length ss) (g, length ts)\n            then (True, True)\n            else if pr_weak (f, length ss) (g, length ts)\n            then lex_ext_unbounded kbo ss ts\n            else (False, False)))\n      else (False, False))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kbo s t =\n    (if weight_le t s\n     then if weight_less t s then (True, True)\n          else case s of\n               Var y \\<Rightarrow>\n                 (False,\n                  case t of Var x \\<Rightarrow> x = y\n                  | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n               | Fun f ss \\<Rightarrow>\n                   case t of Var x \\<Rightarrow> (True, True)\n                   | Fun g ts \\<Rightarrow>\n                       if pr_strict (f, length ss) (g, length ts)\n                       then (True, True)\n                       else if pr_weak (f, length ss) (g, length ts)\n                            then lex_ext_unbounded kbo ss ts\n                            else (False, False)\n     else (False, False))", "by (simp add: weight_le_less_iff weight_le_def)"], ["", "end"], ["", "context admissible_kbo begin"], ["", "lemma weight_le_stable:\n  assumes \"weight_le s t\"\n  shows \"weight_le (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight_le (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "using assms weight_stable_le SCF_stable"], ["proof (prove)\nusing this:\n  weight_le s t\n  \\<lbrakk>weight ?s \\<le> weight ?t;\n   vars_term_ms (SCF ?s) \\<subseteq># vars_term_ms (SCF ?t)\\<rbrakk>\n  \\<Longrightarrow> weight (?s \\<cdot> ?\\<sigma>)\n                    \\<le> weight (?t \\<cdot> ?\\<sigma>)\n  vars_term_ms (SCF ?s) \\<subseteq># vars_term_ms (SCF ?t) \\<Longrightarrow>\n  vars_term_ms (SCF (?s \\<cdot> ?\\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (?t \\<cdot> ?\\<sigma>))\n\ngoal (1 subgoal):\n 1. weight_le (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by (auto simp: weight_le_def)"], ["", "lemma weight_less_stable:\n  assumes \"weight_less s t\"\n  shows \"weight_less (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight_less (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "using assms weight_stable_lt SCF_stable"], ["proof (prove)\nusing this:\n  weight_less s t\n  \\<lbrakk>weight ?s < weight ?t;\n   vars_term_ms (SCF ?s) \\<subseteq># vars_term_ms (SCF ?t)\\<rbrakk>\n  \\<Longrightarrow> weight (?s \\<cdot> ?\\<sigma>)\n                    < weight (?t \\<cdot> ?\\<sigma>)\n  vars_term_ms (SCF ?s) \\<subseteq># vars_term_ms (SCF ?t) \\<Longrightarrow>\n  vars_term_ms (SCF (?s \\<cdot> ?\\<sigma>)) \\<subseteq>#\n  vars_term_ms (SCF (?t \\<cdot> ?\\<sigma>))\n\ngoal (1 subgoal):\n 1. weight_less (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by (auto simp: weight_less_def)"], ["", "lemma simple_arg_pos_weight: \"simple_arg_pos weight_NS (f,n) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_arg_pos weight_NS (f, n) i", "unfolding simple_arg_pos_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ts.\n       i < snd (f, n) \\<longrightarrow>\n       length ts = snd (f, n) \\<longrightarrow>\n       (Fun (fst (f, n)) ts, ts ! i) \\<in> weight_NS", "proof (intro allI impI, unfold snd_conv fst_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>i < n; length ts = n\\<rbrakk>\n       \\<Longrightarrow> (Fun f ts, ts ! i) \\<in> weight_NS", "fix ts :: \"('f,'a)term list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>i < n; length ts = n\\<rbrakk>\n       \\<Longrightarrow> (Fun f ts, ts ! i) \\<in> weight_NS", "assume i: \"i < n\" and len: \"length ts = n\""], ["proof (state)\nthis:\n  i < n\n  length ts = n\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>i < n; length ts = n\\<rbrakk>\n       \\<Longrightarrow> (Fun f ts, ts ! i) \\<in> weight_NS", "from id_take_nth_drop[OF i[folded len]] i[folded len]"], ["proof (chain)\npicking this:\n  ts = take i ts @ ts ! i # drop (Suc i) ts\n  i < length ts", "obtain us vs where id: \"Fun f ts = Fun f (us @ ts ! i # vs)\" \n    and us: \"us = take i ts\" \n    and len: \"length us = i\""], ["proof (prove)\nusing this:\n  ts = take i ts @ ts ! i # drop (Suc i) ts\n  i < length ts\n\ngoal (1 subgoal):\n 1. (\\<And>us vs.\n        \\<lbrakk>Fun f ts = Fun f (us @ ts ! i # vs); us = take i ts;\n         length us = i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Fun f ts = Fun f (us @ ts ! i # vs)\n  us = take i ts\n  length us = i\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>i < n; length ts = n\\<rbrakk>\n       \\<Longrightarrow> (Fun f ts, ts ! i) \\<in> weight_NS", "have \"length us < Suc (length us + length vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length us < Suc (length us + length vs)", "by auto"], ["proof (state)\nthis:\n  length us < Suc (length us + length vs)\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>i < n; length ts = n\\<rbrakk>\n       \\<Longrightarrow> (Fun f ts, ts ! i) \\<in> weight_NS", "from scf[OF this, of f]"], ["proof (chain)\npicking this:\n  0 < scf (f, Suc (length us + length vs)) (length us)", "obtain j where [simp]: \"scf (f, Suc (length us + length vs)) (length us) = Suc j\""], ["proof (prove)\nusing this:\n  0 < scf (f, Suc (length us + length vs)) (length us)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        scf (f, Suc (length us + length vs)) (length us) =\n        Suc j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule lessE)"], ["proof (state)\nthis:\n  scf (f, Suc (length us + length vs)) (length us) = Suc j\n\ngoal (1 subgoal):\n 1. \\<And>ts.\n       \\<lbrakk>i < n; length ts = n\\<rbrakk>\n       \\<Longrightarrow> (Fun f ts, ts ! i) \\<in> weight_NS", "show \"(Fun f ts, ts ! i) \\<in> weight_NS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun f ts, ts ! i) \\<in> weight_NS", "unfolding weight_le_def id"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Fun f (us @ ts ! i # vs), ts ! i)\n    \\<in> {(t, s).\n           vars_term_ms (SCF s) \\<subseteq># vars_term_ms (SCF t) \\<and>\n           weight s \\<le> weight t}", "by (auto simp: o_def)"], ["proof (state)\nthis:\n  (Fun f ts, ts ! i) \\<in> weight_NS\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weight_lemmas:\n  shows \"refl weight_NS\" and \"trans weight_NS\" and \"trans weight_S\"\n    and \"weight_NS O weight_S \\<subseteq> weight_S\" and \"weight_S O weight_NS \\<subseteq> weight_S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (refl weight_NS &&& trans weight_NS) &&&\n    trans weight_S &&&\n    weight_NS O weight_S \\<subseteq> weight_S &&&\n    weight_S O weight_NS \\<subseteq> weight_S", "by (auto intro!: refl_onI transI simp: weight_le_def weight_less_def)"], ["", "interpretation kbo': admissible_kbo w w0 pr_strict' pr_weak' least scf"], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible_kbo w w0 pr_strict' pr_weak' least scf", "by (rule admissible_kbo')"], ["", "context\n  assumes least_global: \"\\<And> f g. least f \\<Longrightarrow> pr_weak g (f,0)\"\n    and least_trans: \"\\<And> f g. least f \\<Longrightarrow> pr_weak (f,0) g \\<Longrightarrow> least (fst g) \\<and> snd g = 0\" \n  fixes n :: nat\nbegin"], ["", "lemma kbo_instance_of_wpo_with_assms: \"wpo_with_assms \n  weight_S weight_NS (\\<lambda>f g. (pr_strict f g, pr_weak f g))\n     (\\<lambda>(f, n). n = 0 \\<and> least f) full_status False (\\<lambda>f. False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wpo_with_assms weight_S weight_NS\n     (\\<lambda>f g. (pr_strict f g, pr_weak f g))\n     (\\<lambda>(f, n). n = 0 \\<and> least f) full_status False\n     (\\<lambda>f. False)", "apply (unfold_locales)"], ["proof (prove)\ngoal (21 subgoals):\n 1. refl weight_NS\n 2. trans weight_S\n 3. trans weight_NS\n 4. weight_NS O weight_S \\<subseteq> weight_S\n 5. weight_S O weight_NS \\<subseteq> weight_S\n 6. SN weight_S\n 7. \\<And>f. (pr_strict f f, pr_weak f f) = (False, True)\n 8. SN {(f, g). fst (pr_strict f g, pr_weak f g)}\n 9. \\<And>g f.\n       case g of (f, n) \\<Rightarrow> n = 0 \\<and> least f \\<Longrightarrow>\n       snd (pr_strict f g, pr_weak f g) = True\n 10. \\<And>f g.\n        \\<lbrakk>case f of (f, n) \\<Rightarrow> n = 0 \\<and> least f;\n         snd (pr_strict f g, pr_weak f g)\\<rbrakk>\n        \\<Longrightarrow> case g of\n                          (f, n) \\<Rightarrow> n = 0 \\<and> least f\nA total of 21 subgoals...", "apply (auto simp: weight_lemmas SN_weight_S pr_SN pr_strict_irrefl\n      weight_less_stable weight_le_stable weight_le_mono_one weight_less_imp_le\n      simple_arg_pos_weight)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>a aa ba. least a \\<Longrightarrow> pr_weak (aa, ba) (a, 0)\n 2. \\<And>a aa ba.\n       \\<lbrakk>pr_weak (a, 0) (aa, ba); least a\\<rbrakk>\n       \\<Longrightarrow> ba = 0\n 3. \\<And>a aa ba.\n       \\<lbrakk>pr_weak (a, 0) (aa, ba); least a\\<rbrakk>\n       \\<Longrightarrow> least aa\n 4. \\<And>a b aa ba ab bb.\n       \\<lbrakk>pr_weak (a, b) (aa, ba); pr_weak (aa, ba) (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> pr_weak (a, b) (ab, bb)\n 5. \\<And>a b aa ba ab bb.\n       \\<lbrakk>pr_weak (a, b) (aa, ba);\n        pr_strict (aa, ba) (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> pr_strict (a, b) (ab, bb)\n 6. \\<And>a b aa ba ab bb.\n       \\<lbrakk>pr_strict (a, b) (aa, ba);\n        pr_weak (aa, ba) (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> pr_strict (a, b) (ab, bb)\n 7. \\<And>a b aa ba.\n       pr_strict (a, b) (aa, ba) \\<Longrightarrow> pr_weak (a, b) (aa, ba)", "apply (force dest: least_global least_trans simp: pr_strict)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>pr_weak (a, b) (aa, ba); pr_weak (aa, ba) (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> pr_weak (a, b) (ab, bb)\n 2. \\<And>a b aa ba ab bb.\n       \\<lbrakk>pr_weak (a, b) (aa, ba);\n        pr_strict (aa, ba) (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> pr_strict (a, b) (ab, bb)\n 3. \\<And>a b aa ba ab bb.\n       \\<lbrakk>pr_strict (a, b) (aa, ba);\n        pr_weak (aa, ba) (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> pr_strict (a, b) (ab, bb)\n 4. \\<And>a b aa ba.\n       pr_strict (a, b) (aa, ba) \\<Longrightarrow> pr_weak (a, b) (aa, ba)", "apply (auto simp: pr_strict least dest:pr_weak_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation wpo: wpo_with_assms\n  where S = weight_S and NS = weight_NS\n    and prc = \"\\<lambda>f g. (pr_strict f g, pr_weak f g)\" and prl = \"\\<lambda>(f,n). n = 0 \\<and> least f\"\n    and c = \"\\<lambda>_. Lex\"\n    and ssimple = False and large = \"\\<lambda>f. False\" and \\<sigma>\\<sigma> = full_status\n    and n = n"], ["proof (prove)\ngoal (1 subgoal):\n 1. wpo_with_assms weight_S weight_NS\n     (\\<lambda>f g. (pr_strict f g, pr_weak f g))\n     (\\<lambda>(f, n). n = 0 \\<and> least f) full_status False\n     (\\<lambda>f. False)", "by (rule kbo_instance_of_wpo_with_assms)"], ["", "lemma kbo_as_wpo_with_assms: assumes \"bounded_arity n (funas_term t)\"\n  shows \"kbo s t = wpo.wpo s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "define m where \"m = size s + size t\""], ["proof (state)\nthis:\n  m = size s + size t\n\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "from m_def assms"], ["proof (chain)\npicking this:\n  m = size s + size t\n  bounded_arity n (funas_term t)", "show ?thesis"], ["proof (prove)\nusing this:\n  m = size s + size t\n  bounded_arity n (funas_term t)\n\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "proof (induct m arbitrary: s t rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x s t.\n       \\<lbrakk>\\<And>y s t.\n                   \\<lbrakk>y < x; y = size s + size t;\n                    bounded_arity n (funas_term t)\\<rbrakk>\n                   \\<Longrightarrow> kbo s t = local.wpo.wpo s t;\n        x = size s + size t; bounded_arity n (funas_term t)\\<rbrakk>\n       \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "case (less m s t)"], ["proof (state)\nthis:\n  \\<lbrakk>?y13 < m; ?y13 = size ?s13 + size ?t13;\n   bounded_arity n (funas_term ?t13)\\<rbrakk>\n  \\<Longrightarrow> kbo ?s13 ?t13 = local.wpo.wpo ?s13 ?t13\n  m = size s + size t\n  bounded_arity n (funas_term t)\n\ngoal (1 subgoal):\n 1. \\<And>x s t.\n       \\<lbrakk>\\<And>y s t.\n                   \\<lbrakk>y < x; y = size s + size t;\n                    bounded_arity n (funas_term t)\\<rbrakk>\n                   \\<Longrightarrow> kbo s t = local.wpo.wpo s t;\n        x = size s + size t; bounded_arity n (funas_term t)\\<rbrakk>\n       \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "hence IH: \"size si + size ti < size s + size t \\<Longrightarrow> bounded_arity n (funas_term ti) \\<Longrightarrow> kbo si ti = wpo.wpo si ti\" for si ti :: \"('f,'a)term\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?y13 < m; ?y13 = size ?s13 + size ?t13;\n   bounded_arity n (funas_term ?t13)\\<rbrakk>\n  \\<Longrightarrow> kbo ?s13 ?t13 = local.wpo.wpo ?s13 ?t13\n  m = size s + size t\n  bounded_arity n (funas_term t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>size si + size ti < size s + size t;\n     bounded_arity n (funas_term ti)\\<rbrakk>\n    \\<Longrightarrow> kbo si ti = local.wpo.wpo si ti", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>size ?si13 + size ?ti13 < size s + size t;\n   bounded_arity n (funas_term ?ti13)\\<rbrakk>\n  \\<Longrightarrow> kbo ?si13 ?ti13 = local.wpo.wpo ?si13 ?ti13\n\ngoal (1 subgoal):\n 1. \\<And>x s t.\n       \\<lbrakk>\\<And>y s t.\n                   \\<lbrakk>y < x; y = size s + size t;\n                    bounded_arity n (funas_term t)\\<rbrakk>\n                   \\<Longrightarrow> kbo s t = local.wpo.wpo s t;\n        x = size s + size t; bounded_arity n (funas_term t)\\<rbrakk>\n       \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "note wpo_sI = arg_cong[OF wpo.wpo.simps, of fst, THEN iffD2]"], ["proof (state)\nthis:\n  fst (case ?s2 of\n       Var x \\<Rightarrow>\n         (False,\n          case ?t2 of Var xa \\<Rightarrow> x = xa\n          | Fun g ts \\<Rightarrow>\n              (?s2, ?t2) \\<in> weight_NS \\<and>\n              wpo.\\<sigma> (g, length ts) = [] \\<and>\n              (case (g, length ts) of\n               (f, n) \\<Rightarrow> n = 0 \\<and> least f))\n       | Fun f ss \\<Rightarrow>\n           if (?s2, ?t2) \\<in> weight_S then (True, True)\n           else if (?s2, ?t2) \\<in> weight_NS\n                then if \\<exists>i\\<in>set (wpo.\\<sigma> (f, length ss)).\n                           local.wpo.wpo_ns (ss ! i) ?t2\n                     then (True, True)\n                     else case ?t2 of\n                          Var x \\<Rightarrow> (False, False \\<and> False)\n                          | Fun g ts \\<Rightarrow>\n                              case (pr_strict (f, length ss) (g, length ts),\n                                    pr_weak (f, length ss)\n                                     (g, length ts)) of\n                              (prs, prns) \\<Rightarrow>\n                                if prns \\<and>\n                                   (\\<forall>j\n       \\<in>set (wpo.\\<sigma> (g, length ts)).\n local.wpo.wpo_s ?s2 (ts ! j))\n                                then if prs then (True, True)\n                                     else let ss' =\n          map ((!) ss) (wpo.\\<sigma> (f, length ss));\n        ts' = map ((!) ts) (wpo.\\<sigma> (g, length ts)); cf = Lex; cg = Lex\n    in if cf = Lex \\<and> cg = Lex then lex_ext local.wpo.wpo n ss' ts'\n       else if cf = Mul \\<and> cg = Mul then mul_ext local.wpo.wpo ss' ts'\n            else (length ss' \\<noteq> 0 \\<and> length ts' = 0,\n                  length ts' = 0)\n                                else (False, False)\n                else (False, False)) \\<Longrightarrow>\n  local.wpo.wpo_s ?s2 ?t2\n\ngoal (1 subgoal):\n 1. \\<And>x s t.\n       \\<lbrakk>\\<And>y s t.\n                   \\<lbrakk>y < x; y = size s + size t;\n                    bounded_arity n (funas_term t)\\<rbrakk>\n                   \\<Longrightarrow> kbo s t = local.wpo.wpo s t;\n        x = size s + size t; bounded_arity n (funas_term t)\\<rbrakk>\n       \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "note wpo_nsI = arg_cong[OF wpo.wpo.simps, of snd, THEN iffD2]"], ["proof (state)\nthis:\n  snd (case ?s2 of\n       Var x \\<Rightarrow>\n         (False,\n          case ?t2 of Var xa \\<Rightarrow> x = xa\n          | Fun g ts \\<Rightarrow>\n              (?s2, ?t2) \\<in> weight_NS \\<and>\n              wpo.\\<sigma> (g, length ts) = [] \\<and>\n              (case (g, length ts) of\n               (f, n) \\<Rightarrow> n = 0 \\<and> least f))\n       | Fun f ss \\<Rightarrow>\n           if (?s2, ?t2) \\<in> weight_S then (True, True)\n           else if (?s2, ?t2) \\<in> weight_NS\n                then if \\<exists>i\\<in>set (wpo.\\<sigma> (f, length ss)).\n                           local.wpo.wpo_ns (ss ! i) ?t2\n                     then (True, True)\n                     else case ?t2 of\n                          Var x \\<Rightarrow> (False, False \\<and> False)\n                          | Fun g ts \\<Rightarrow>\n                              case (pr_strict (f, length ss) (g, length ts),\n                                    pr_weak (f, length ss)\n                                     (g, length ts)) of\n                              (prs, prns) \\<Rightarrow>\n                                if prns \\<and>\n                                   (\\<forall>j\n       \\<in>set (wpo.\\<sigma> (g, length ts)).\n local.wpo.wpo_s ?s2 (ts ! j))\n                                then if prs then (True, True)\n                                     else let ss' =\n          map ((!) ss) (wpo.\\<sigma> (f, length ss));\n        ts' = map ((!) ts) (wpo.\\<sigma> (g, length ts)); cf = Lex; cg = Lex\n    in if cf = Lex \\<and> cg = Lex then lex_ext local.wpo.wpo n ss' ts'\n       else if cf = Mul \\<and> cg = Mul then mul_ext local.wpo.wpo ss' ts'\n            else (length ss' \\<noteq> 0 \\<and> length ts' = 0,\n                  length ts' = 0)\n                                else (False, False)\n                else (False, False)) \\<Longrightarrow>\n  local.wpo.wpo_ns ?s2 ?t2\n\ngoal (1 subgoal):\n 1. \\<And>x s t.\n       \\<lbrakk>\\<And>y s t.\n                   \\<lbrakk>y < x; y = size s + size t;\n                    bounded_arity n (funas_term t)\\<rbrakk>\n                   \\<Longrightarrow> kbo s t = local.wpo.wpo s t;\n        x = size s + size t; bounded_arity n (funas_term t)\\<rbrakk>\n       \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "note bounded = less(3)"], ["proof (state)\nthis:\n  bounded_arity n (funas_term t)\n\ngoal (1 subgoal):\n 1. \\<And>x s t.\n       \\<lbrakk>\\<And>y s t.\n                   \\<lbrakk>y < x; y = size s + size t;\n                    bounded_arity n (funas_term t)\\<rbrakk>\n                   \\<Longrightarrow> kbo s t = local.wpo.wpo s t;\n        x = size s + size t; bounded_arity n (funas_term t)\\<rbrakk>\n       \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "proof (cases s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. s = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       s = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "case s: (Var x)"], ["proof (state)\nthis:\n  s = Var x\n\ngoal (2 subgoals):\n 1. \\<And>x1. s = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       s = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "have \"\\<not> weight_less t (Var x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> weight_less t (Var x)", "by (metis leD weight.simps(1) weight_le_less_iff weight_less_imp_le weight_w0)"], ["proof (state)\nthis:\n  \\<not> weight_less t (Var x)\n\ngoal (2 subgoals):\n 1. \\<And>x1. s = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       s = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> weight_less t (Var x)\n\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "by (cases t, auto simp add: s kbo_altdef wpo.wpo.simps, simp add: weight_le_def)"], ["proof (state)\nthis:\n  kbo s t = local.wpo.wpo s t\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "case s: (Fun f ss)"], ["proof (state)\nthis:\n  s = Fun f ss\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "case t: (Var y)"], ["proof (state)\nthis:\n  t = Var y\n\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "{"], ["proof (state)\nthis:\n  t = Var y\n\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "assume \"weight_le t s\""], ["proof (state)\nthis:\n  weight_le t s\n\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "then"], ["proof (chain)\npicking this:\n  weight_le t s", "have \"\\<exists>s' \\<in> set ss. weight_le t s'\""], ["proof (prove)\nusing this:\n  weight_le t s\n\ngoal (1 subgoal):\n 1. \\<exists>s'\\<in>set ss. weight_le t s'", "apply (auto simp: s t weight_le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>w0 \\<le> w (f, length ss) +\n                         sum_list\n                          (map weight (scf_list (scf (f, length ss)) ss));\n        x \\<in> set (scf_list (scf (f, length ss)) ss);\n        y \\<in> vars_term (SCF x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s'\\<in>set ss.\n                            y \\<in> vars_term (SCF s') \\<and>\n                            w0 \\<le> weight s'", "by (metis scf set_scf_list weight_w0)"], ["proof (state)\nthis:\n  \\<exists>s'\\<in>set ss. weight_le t s'\n\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "then"], ["proof (chain)\npicking this:\n  \\<exists>s'\\<in>set ss. weight_le t s'", "obtain s' where s': \"s' \\<in> set ss\" and \"weight_le t s'\""], ["proof (prove)\nusing this:\n  \\<exists>s'\\<in>set ss. weight_le t s'\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>s' \\<in> set ss; weight_le t s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s' \\<in> set ss\n  weight_le t s'\n\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "from this(2)"], ["proof (chain)\npicking this:\n  weight_le t s'", "have \"wpo.wpo_ns s' t\""], ["proof (prove)\nusing this:\n  weight_le t s'\n\ngoal (1 subgoal):\n 1. local.wpo.wpo_ns s' t", "proof (induct s')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight_le t (Var x) \\<Longrightarrow> local.wpo.wpo_ns (Var x) t\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight_le t x2a\\<rbrakk>\n                   \\<Longrightarrow> local.wpo.wpo_ns x2a t;\n        weight_le t (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> local.wpo.wpo_ns (Fun x1a x2) t", "case (Var x)"], ["proof (state)\nthis:\n  weight_le t (Var x)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight_le t (Var x) \\<Longrightarrow> local.wpo.wpo_ns (Var x) t\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight_le t x2a\\<rbrakk>\n                   \\<Longrightarrow> local.wpo.wpo_ns x2a t;\n        weight_le t (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> local.wpo.wpo_ns (Fun x1a x2) t", "then"], ["proof (chain)\npicking this:\n  weight_le t (Var x)", "show ?case"], ["proof (prove)\nusing this:\n  weight_le t (Var x)\n\ngoal (1 subgoal):\n 1. local.wpo.wpo_ns (Var x) t", "by (auto intro!:wpo_nsI simp: t weight_le_Var_Var)"], ["proof (state)\nthis:\n  local.wpo.wpo_ns (Var x) t\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight_le t x2a\\<rbrakk>\n                   \\<Longrightarrow> local.wpo.wpo_ns x2a t;\n        weight_le t (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> local.wpo.wpo_ns (Fun x1a x2) t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight_le t x2a\\<rbrakk>\n                   \\<Longrightarrow> local.wpo.wpo_ns x2a t;\n        weight_le t (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> local.wpo.wpo_ns (Fun x1a x2) t", "case (Fun f' ss')"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a13 \\<in> set ss'; weight_le t ?x2a13\\<rbrakk>\n  \\<Longrightarrow> local.wpo.wpo_ns ?x2a13 t\n  weight_le t (Fun f' ss')\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight_le t x2a\\<rbrakk>\n                   \\<Longrightarrow> local.wpo.wpo_ns x2a t;\n        weight_le t (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> local.wpo.wpo_ns (Fun x1a x2) t", "from this(2)"], ["proof (chain)\npicking this:\n  weight_le t (Fun f' ss')", "have \"\\<exists>s'' \\<in> set ss'. weight_le t s''\""], ["proof (prove)\nusing this:\n  weight_le t (Fun f' ss')\n\ngoal (1 subgoal):\n 1. \\<exists>s''\\<in>set ss'. weight_le t s''", "apply (auto simp: t weight_le_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>w0 \\<le> w (f', length ss') +\n                         sum_list\n                          (map weight\n                            (scf_list (scf (f', length ss')) ss'));\n        x \\<in> set (scf_list (scf (f', length ss')) ss');\n        y \\<in> vars_term (SCF x)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s''\\<in>set ss'.\n                            y \\<in> vars_term (SCF s'') \\<and>\n                            w0 \\<le> weight s''", "by (metis scf set_scf_list weight_w0)"], ["proof (state)\nthis:\n  \\<exists>s''\\<in>set ss'. weight_le t s''\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight_le t x2a\\<rbrakk>\n                   \\<Longrightarrow> local.wpo.wpo_ns x2a t;\n        weight_le t (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> local.wpo.wpo_ns (Fun x1a x2) t", "then"], ["proof (chain)\npicking this:\n  \\<exists>s''\\<in>set ss'. weight_le t s''", "obtain s'' where \"s'' \\<in> set ss'\" and \"weight_le t s''\""], ["proof (prove)\nusing this:\n  \\<exists>s''\\<in>set ss'. weight_le t s''\n\ngoal (1 subgoal):\n 1. (\\<And>s''.\n        \\<lbrakk>s'' \\<in> set ss'; weight_le t s''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s'' \\<in> set ss'\n  weight_le t s''\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight_le t x2a\\<rbrakk>\n                   \\<Longrightarrow> local.wpo.wpo_ns x2a t;\n        weight_le t (Fun x1a x2)\\<rbrakk>\n       \\<Longrightarrow> local.wpo.wpo_ns (Fun x1a x2) t", "with Fun(1)[OF this] Fun(2)"], ["proof (chain)\npicking this:\n  local.wpo.wpo_ns s'' t\n  weight_le t (Fun f' ss')\n  s'' \\<in> set ss'\n  weight_le t s''", "show ?case"], ["proof (prove)\nusing this:\n  local.wpo.wpo_ns s'' t\n  weight_le t (Fun f' ss')\n  s'' \\<in> set ss'\n  weight_le t s''\n\ngoal (1 subgoal):\n 1. local.wpo.wpo_ns (Fun f' ss') t", "by (auto intro!: wpo_nsI simp: t in_set_conv_nth)"], ["proof (state)\nthis:\n  local.wpo.wpo_ns (Fun f' ss') t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.wpo.wpo_ns s' t\n\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "with s'"], ["proof (chain)\npicking this:\n  s' \\<in> set ss\n  local.wpo.wpo_ns s' t", "have \"\\<exists>s' \\<in> set ss. wpo.wpo_ns s' t\""], ["proof (prove)\nusing this:\n  s' \\<in> set ss\n  local.wpo.wpo_ns s' t\n\ngoal (1 subgoal):\n 1. \\<exists>s'\\<in>set ss. local.wpo.wpo_ns s' t", "by auto"], ["proof (state)\nthis:\n  \\<exists>s'\\<in>set ss. local.wpo.wpo_ns s' t\n\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "}"], ["proof (state)\nthis:\n  weight_le t s \\<Longrightarrow>\n  \\<exists>s'\\<in>set ss. local.wpo.wpo_ns s' t\n\ngoal (2 subgoals):\n 1. \\<And>x1. t = Var x1 \\<Longrightarrow> kbo s t = local.wpo.wpo s t\n 2. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "then"], ["proof (chain)\npicking this:\n  weight_le t s \\<Longrightarrow>\n  \\<exists>s'\\<in>set ss. local.wpo.wpo_ns s' t", "show ?thesis"], ["proof (prove)\nusing this:\n  weight_le t s \\<Longrightarrow>\n  \\<exists>s'\\<in>set ss. local.wpo.wpo_ns s' t\n\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "unfolding wpo.wpo.simps[of s t] kbo_altdef[of s t]"], ["proof (prove)\nusing this:\n  weight_le t s \\<Longrightarrow>\n  \\<exists>s'\\<in>set ss. local.wpo.wpo_ns s' t\n\ngoal (1 subgoal):\n 1. (if weight_le t s\n     then if weight_less t s then (True, True)\n          else case s of\n               Var y \\<Rightarrow>\n                 (False,\n                  case t of Var x \\<Rightarrow> x = y\n                  | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n               | Fun f ss \\<Rightarrow>\n                   case t of Var x \\<Rightarrow> (True, True)\n                   | Fun g ts \\<Rightarrow>\n                       if pr_strict (f, length ss) (g, length ts)\n                       then (True, True)\n                       else if pr_weak (f, length ss) (g, length ts)\n                            then lex_ext_unbounded kbo ss ts\n                            else (False, False)\n     else (False, False)) =\n    (case s of\n     Var x \\<Rightarrow>\n       (False,\n        case t of Var xa \\<Rightarrow> x = xa\n        | Fun g ts \\<Rightarrow>\n            (s, t) \\<in> weight_NS \\<and>\n            wpo.\\<sigma> (g, length ts) = [] \\<and>\n            (case (g, length ts) of\n             (f, n) \\<Rightarrow> n = 0 \\<and> least f))\n     | Fun f ss \\<Rightarrow>\n         if (s, t) \\<in> weight_S then (True, True)\n         else if (s, t) \\<in> weight_NS\n              then if \\<exists>i\\<in>set (wpo.\\<sigma> (f, length ss)).\n                         local.wpo.wpo_ns (ss ! i) t\n                   then (True, True)\n                   else case t of\n                        Var x \\<Rightarrow> (False, False \\<and> False)\n                        | Fun g ts \\<Rightarrow>\n                            case (pr_strict (f, length ss) (g, length ts),\n                                  pr_weak (f, length ss) (g, length ts)) of\n                            (prs, prns) \\<Rightarrow>\n                              if prns \\<and>\n                                 (\\<forall>j\n     \\<in>set (wpo.\\<sigma> (g, length ts)).\n                                     local.wpo.wpo_s s (ts ! j))\n                              then if prs then (True, True)\n                                   else let ss' =\n        map ((!) ss) (wpo.\\<sigma> (f, length ss));\n      ts' = map ((!) ts) (wpo.\\<sigma> (g, length ts)); cf = Lex; cg = Lex\n  in if cf = Lex \\<and> cg = Lex then lex_ext local.wpo.wpo n ss' ts'\n     else if cf = Mul \\<and> cg = Mul then mul_ext local.wpo.wpo ss' ts'\n          else (length ss' \\<noteq> 0 \\<and> length ts' = 0, length ts' = 0)\n                              else (False, False)\n              else (False, False))", "by (auto simp add: s t weight_less_iff set_conv_nth, auto)"], ["proof (state)\nthis:\n  kbo s t = local.wpo.wpo s t\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "case t: (Fun g ts)"], ["proof (state)\nthis:\n  t = Fun g ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "{"], ["proof (state)\nthis:\n  t = Fun g ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "assume \"j < length ts\""], ["proof (state)\nthis:\n  j < length ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "hence \"ts ! j \\<in> set ts\""], ["proof (prove)\nusing this:\n  j < length ts\n\ngoal (1 subgoal):\n 1. ts ! j \\<in> set ts", "by auto"], ["proof (state)\nthis:\n  ts ! j \\<in> set ts\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "hence \"funas_term (ts ! j) \\<subseteq> funas_term t\""], ["proof (prove)\nusing this:\n  ts ! j \\<in> set ts\n\ngoal (1 subgoal):\n 1. funas_term (ts ! j) \\<subseteq> funas_term t", "unfolding t"], ["proof (prove)\nusing this:\n  ts ! j \\<in> set ts\n\ngoal (1 subgoal):\n 1. funas_term (ts ! j) \\<subseteq> funas_term (Fun g ts)", "by auto"], ["proof (state)\nthis:\n  funas_term (ts ! j) \\<subseteq> funas_term t\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "with bounded"], ["proof (chain)\npicking this:\n  bounded_arity n (funas_term t)\n  funas_term (ts ! j) \\<subseteq> funas_term t", "have \"bounded_arity n (funas_term (ts ! j))\""], ["proof (prove)\nusing this:\n  bounded_arity n (funas_term t)\n  funas_term (ts ! j) \\<subseteq> funas_term t\n\ngoal (1 subgoal):\n 1. bounded_arity n (funas_term (ts ! j))", "unfolding bounded_arity_def"], ["proof (prove)\nusing this:\n  \\<forall>(f, na)\\<in>funas_term t. na \\<le> n\n  funas_term (ts ! j) \\<subseteq> funas_term t\n\ngoal (1 subgoal):\n 1. \\<forall>(f, na)\\<in>funas_term (ts ! j). na \\<le> n", "by auto"], ["proof (state)\nthis:\n  bounded_arity n (funas_term (ts ! j))\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "}"], ["proof (state)\nthis:\n  ?j15 < length ts \\<Longrightarrow>\n  bounded_arity n (funas_term (ts ! ?j15))\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "note bounded_tj = this"], ["proof (state)\nthis:\n  ?j15 < length ts \\<Longrightarrow>\n  bounded_arity n (funas_term (ts ! ?j15))\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "note IH_tj = IH[OF _ this]"], ["proof (state)\nthis:\n  \\<lbrakk>size ?si13 + size (ts ! ?j29) < size s + size t;\n   ?j29 < length ts\\<rbrakk>\n  \\<Longrightarrow> kbo ?si13 (ts ! ?j29) = local.wpo.wpo ?si13 (ts ! ?j29)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = Fun x21 x22 \\<Longrightarrow> kbo s t = local.wpo.wpo s t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "proof (cases \"\\<not> weight_le t s \\<or> weight_less t s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> weight_le t s \\<or> weight_less t s \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "case True"], ["proof (state)\nthis:\n  \\<not> weight_le t s \\<or> weight_less t s\n\ngoal (2 subgoals):\n 1. \\<not> weight_le t s \\<or> weight_less t s \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> weight_le t s \\<or> weight_less t s\n\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "unfolding wpo.wpo.simps[of s t] kbo_altdef[of s t]"], ["proof (prove)\nusing this:\n  \\<not> weight_le t s \\<or> weight_less t s\n\ngoal (1 subgoal):\n 1. (if weight_le t s\n     then if weight_less t s then (True, True)\n          else case s of\n               Var y \\<Rightarrow>\n                 (False,\n                  case t of Var x \\<Rightarrow> x = y\n                  | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n               | Fun f ss \\<Rightarrow>\n                   case t of Var x \\<Rightarrow> (True, True)\n                   | Fun g ts \\<Rightarrow>\n                       if pr_strict (f, length ss) (g, length ts)\n                       then (True, True)\n                       else if pr_weak (f, length ss) (g, length ts)\n                            then lex_ext_unbounded kbo ss ts\n                            else (False, False)\n     else (False, False)) =\n    (case s of\n     Var x \\<Rightarrow>\n       (False,\n        case t of Var xa \\<Rightarrow> x = xa\n        | Fun g ts \\<Rightarrow>\n            (s, t) \\<in> weight_NS \\<and>\n            wpo.\\<sigma> (g, length ts) = [] \\<and>\n            (case (g, length ts) of\n             (f, n) \\<Rightarrow> n = 0 \\<and> least f))\n     | Fun f ss \\<Rightarrow>\n         if (s, t) \\<in> weight_S then (True, True)\n         else if (s, t) \\<in> weight_NS\n              then if \\<exists>i\\<in>set (wpo.\\<sigma> (f, length ss)).\n                         local.wpo.wpo_ns (ss ! i) t\n                   then (True, True)\n                   else case t of\n                        Var x \\<Rightarrow> (False, False \\<and> False)\n                        | Fun g ts \\<Rightarrow>\n                            case (pr_strict (f, length ss) (g, length ts),\n                                  pr_weak (f, length ss) (g, length ts)) of\n                            (prs, prns) \\<Rightarrow>\n                              if prns \\<and>\n                                 (\\<forall>j\n     \\<in>set (wpo.\\<sigma> (g, length ts)).\n                                     local.wpo.wpo_s s (ts ! j))\n                              then if prs then (True, True)\n                                   else let ss' =\n        map ((!) ss) (wpo.\\<sigma> (f, length ss));\n      ts' = map ((!) ts) (wpo.\\<sigma> (g, length ts)); cf = Lex; cg = Lex\n  in if cf = Lex \\<and> cg = Lex then lex_ext local.wpo.wpo n ss' ts'\n     else if cf = Mul \\<and> cg = Mul then mul_ext local.wpo.wpo ss' ts'\n          else (length ss' \\<noteq> 0 \\<and> length ts' = 0, length ts' = 0)\n                              else (False, False)\n              else (False, False))", "unfolding s t"], ["proof (prove)\nusing this:\n  \\<not> weight_le (Fun g ts) (Fun f ss) \\<or>\n  weight_less (Fun g ts) (Fun f ss)\n\ngoal (1 subgoal):\n 1. (if weight_le (Fun g ts) (Fun f ss)\n     then if weight_less (Fun g ts) (Fun f ss) then (True, True)\n          else case Fun f ss of\n               Var y \\<Rightarrow>\n                 (False,\n                  case Fun g ts of Var x \\<Rightarrow> x = y\n                  | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n               | Fun f ss \\<Rightarrow>\n                   case Fun g ts of Var x \\<Rightarrow> (True, True)\n                   | Fun g ts \\<Rightarrow>\n                       if pr_strict (f, length ss) (g, length ts)\n                       then (True, True)\n                       else if pr_weak (f, length ss) (g, length ts)\n                            then lex_ext_unbounded kbo ss ts\n                            else (False, False)\n     else (False, False)) =\n    (case Fun f ss of\n     Var x \\<Rightarrow>\n       (False,\n        case Fun g ts of Var xa \\<Rightarrow> x = xa\n        | Fun ga tsa \\<Rightarrow>\n            (Fun f ss, Fun g ts) \\<in> weight_NS \\<and>\n            wpo.\\<sigma> (ga, length tsa) = [] \\<and>\n            (case (ga, length tsa) of\n             (f, n) \\<Rightarrow> n = 0 \\<and> least f))\n     | Fun fa ssa \\<Rightarrow>\n         if (Fun f ss, Fun g ts) \\<in> weight_S then (True, True)\n         else if (Fun f ss, Fun g ts) \\<in> weight_NS\n              then if \\<exists>i\\<in>set (wpo.\\<sigma> (fa, length ssa)).\n                         local.wpo.wpo_ns (ssa ! i) (Fun g ts)\n                   then (True, True)\n                   else case Fun g ts of\n                        Var x \\<Rightarrow> (False, False \\<and> False)\n                        | Fun g ts \\<Rightarrow>\n                            case (pr_strict (fa, length ssa) (g, length ts),\n                                  pr_weak (fa, length ssa)\n                                   (g, length ts)) of\n                            (prs, prns) \\<Rightarrow>\n                              if prns \\<and>\n                                 (\\<forall>j\n     \\<in>set (wpo.\\<sigma> (g, length ts)).\n                                     local.wpo.wpo_s (Fun f ss) (ts ! j))\n                              then if prs then (True, True)\n                                   else let ss' =\n        map ((!) ssa) (wpo.\\<sigma> (fa, length ssa));\n      ts' = map ((!) ts) (wpo.\\<sigma> (g, length ts)); cf = Lex; cg = Lex\n  in if cf = Lex \\<and> cg = Lex then lex_ext local.wpo.wpo n ss' ts'\n     else if cf = Mul \\<and> cg = Mul then mul_ext local.wpo.wpo ss' ts'\n          else (length ss' \\<noteq> 0 \\<and> length ts' = 0, length ts' = 0)\n                              else (False, False)\n              else (False, False))", "by (auto simp: weight_less_iff)"], ["proof (state)\nthis:\n  kbo s t = local.wpo.wpo s t\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<not> weight_le t s \\<or> weight_less t s)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "let ?f = \"(f,length ss)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "let ?g = \"(g,length ts)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "from False"], ["proof (chain)\npicking this:\n  \\<not> (\\<not> weight_le t s \\<or> weight_less t s)", "have wle: \"weight_le t s = True\" \"weight_less t s = False\" \n            \"(s, t) \\<in> weight_NS \\<longleftrightarrow> True\" \"(s, t) \\<in> weight_S \\<longleftrightarrow> False\""], ["proof (prove)\nusing this:\n  \\<not> (\\<not> weight_le t s \\<or> weight_less t s)\n\ngoal (1 subgoal):\n 1. (weight_le t s = True &&& weight_less t s = False) &&&\n    ((s, t) \\<in> weight_NS) = True &&& ((s, t) \\<in> weight_S) = False", "by auto"], ["proof (state)\nthis:\n  weight_le t s = True\n  weight_less t s = False\n  ((s, t) \\<in> weight_NS) = True\n  ((s, t) \\<in> weight_S) = False\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have lex: \"(Lex = Lex \\<and> Lex = Lex) = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Lex = Lex \\<and> Lex = Lex) = True", "by simp"], ["proof (state)\nthis:\n  (Lex = Lex \\<and> Lex = Lex) = True\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have sig: \"set (wpo.\\<sigma> ?f) = {..<length ss}\"\n            \"set (wpo.\\<sigma> ?g) = {..<length ts}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (wpo.\\<sigma> (f, length ss)) = {..<length ss} &&&\n    set (wpo.\\<sigma> (g, length ts)) = {..<length ts}", "by auto"], ["proof (state)\nthis:\n  set (wpo.\\<sigma> (f, length ss)) = {..<length ss}\n  set (wpo.\\<sigma> (g, length ts)) = {..<length ts}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have map: \"map ((!) ss) (wpo.\\<sigma> ?f) = ss\"\n            \"map ((!) ts) (wpo.\\<sigma> ?g) = ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((!) ss) (wpo.\\<sigma> (f, length ss)) = ss &&&\n    map ((!) ts) (wpo.\\<sigma> (g, length ts)) = ts", "by (auto simp: map_nth)"], ["proof (state)\nthis:\n  map ((!) ss) (wpo.\\<sigma> (f, length ss)) = ss\n  map ((!) ts) (wpo.\\<sigma> (g, length ts)) = ts\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have sizes: \"i < length ss \\<Longrightarrow> size (ss ! i) < size s\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length ss \\<Longrightarrow> size (ss ! i) < size s", "unfolding s"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length ss \\<Longrightarrow> size (ss ! i) < size (Fun f ss)", "by (simp add: size_simp1)"], ["proof (state)\nthis:\n  ?i13 < length ss \\<Longrightarrow> size (ss ! ?i13) < size s\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have sizet: \"i < length ts \\<Longrightarrow> size (ts ! i) < size t\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length ts \\<Longrightarrow> size (ts ! i) < size t", "unfolding t"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length ts \\<Longrightarrow> size (ts ! i) < size (Fun g ts)", "by (simp add: size_simp1)"], ["proof (state)\nthis:\n  ?i13 < length ts \\<Longrightarrow> size (ts ! ?i13) < size t\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have wpo: \"wpo.wpo s t = \n             (if \\<exists>i\\<in>{..<length ss}. wpo.wpo_ns (ss ! i) t then (True, True)\n              else if pr_weak ?f ?g \\<and> (\\<forall>j\\<in>{..<length ts}. wpo.wpo_s s (ts ! j))\n              then if pr_strict ?f ?g then (True, True) else lex_ext wpo.wpo n ss ts\n              else (False, False))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wpo.wpo s t =\n    (if \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t\n     then (True, True)\n     else if pr_weak (f, length ss) (g, length ts) \\<and>\n             (\\<forall>j\\<in>{..<length ts}. local.wpo.wpo_s s (ts ! j))\n          then if pr_strict (f, length ss) (g, length ts) then (True, True)\n               else lex_ext local.wpo.wpo n ss ts\n          else (False, False))", "unfolding wpo.wpo.simps[of s t]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case s of\n     Var x \\<Rightarrow>\n       (False,\n        case t of Var xa \\<Rightarrow> x = xa\n        | Fun g ts \\<Rightarrow>\n            (s, t) \\<in> weight_NS \\<and>\n            wpo.\\<sigma> (g, length ts) = [] \\<and>\n            (case (g, length ts) of\n             (f, n) \\<Rightarrow> n = 0 \\<and> least f))\n     | Fun f ss \\<Rightarrow>\n         if (s, t) \\<in> weight_S then (True, True)\n         else if (s, t) \\<in> weight_NS\n              then if \\<exists>i\\<in>set (wpo.\\<sigma> (f, length ss)).\n                         local.wpo.wpo_ns (ss ! i) t\n                   then (True, True)\n                   else case t of\n                        Var x \\<Rightarrow> (False, False \\<and> False)\n                        | Fun g ts \\<Rightarrow>\n                            case (pr_strict (f, length ss) (g, length ts),\n                                  pr_weak (f, length ss) (g, length ts)) of\n                            (prs, prns) \\<Rightarrow>\n                              if prns \\<and>\n                                 (\\<forall>j\n     \\<in>set (wpo.\\<sigma> (g, length ts)).\n                                     local.wpo.wpo_s s (ts ! j))\n                              then if prs then (True, True)\n                                   else let ss' =\n        map ((!) ss) (wpo.\\<sigma> (f, length ss));\n      ts' = map ((!) ts) (wpo.\\<sigma> (g, length ts)); cf = Lex; cg = Lex\n  in if cf = Lex \\<and> cg = Lex then lex_ext local.wpo.wpo n ss' ts'\n     else if cf = Mul \\<and> cg = Mul then mul_ext local.wpo.wpo ss' ts'\n          else (length ss' \\<noteq> 0 \\<and> length ts' = 0, length ts' = 0)\n                              else (False, False)\n              else (False, False)) =\n    (if \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t\n     then (True, True)\n     else if pr_weak (f, length ss) (g, length ts) \\<and>\n             (\\<forall>j\\<in>{..<length ts}. local.wpo.wpo_s s (ts ! j))\n          then if pr_strict (f, length ss) (g, length ts) then (True, True)\n               else lex_ext local.wpo.wpo n ss ts\n          else (False, False))", "unfolding s t term.simps split Let_def lex if_True sig map"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if (Fun f ss, Fun g ts) \\<in> weight_S then (True, True)\n     else if (Fun f ss, Fun g ts) \\<in> weight_NS\n          then if \\<exists>i\\<in>{..<length ss}.\n                     local.wpo.wpo_ns (ss ! i) (Fun g ts)\n               then (True, True)\n               else if pr_weak (f, length ss) (g, length ts) \\<and>\n                       (\\<forall>j\\<in>{..<length ts}.\n                           local.wpo.wpo_s (Fun f ss) (ts ! j))\n                    then if pr_strict (f, length ss) (g, length ts)\n                         then (True, True)\n                         else lex_ext local.wpo.wpo n ss ts\n                    else (False, False)\n          else (False, False)) =\n    (if \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) (Fun g ts)\n     then (True, True)\n     else if pr_weak (f, length ss) (g, length ts) \\<and>\n             (\\<forall>j\\<in>{..<length ts}.\n                 local.wpo.wpo_s (Fun f ss) (ts ! j))\n          then if pr_strict (f, length ss) (g, length ts) then (True, True)\n               else lex_ext local.wpo.wpo n ss ts\n          else (False, False))", "unfolding s[symmetric] t[symmetric] wle if_True weight_less_iff if_False False snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t\n     then (True, True)\n     else if pr_weak (f, length ss) (g, length ts) \\<and>\n             (\\<forall>j\\<in>{..<length ts}. local.wpo.wpo_s s (ts ! j))\n          then if pr_strict (f, length ss) (g, length ts) then (True, True)\n               else lex_ext local.wpo.wpo n ss ts\n          else (False, False)) =\n    (if \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t\n     then (True, True)\n     else if pr_weak (f, length ss) (g, length ts) \\<and>\n             (\\<forall>j\\<in>{..<length ts}. local.wpo.wpo_s s (ts ! j))\n          then if pr_strict (f, length ss) (g, length ts) then (True, True)\n               else lex_ext local.wpo.wpo n ss ts\n          else (False, False))", "by auto"], ["proof (state)\nthis:\n  local.wpo.wpo s t =\n  (if \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t\n   then (True, True)\n   else if pr_weak (f, length ss) (g, length ts) \\<and>\n           (\\<forall>j\\<in>{..<length ts}. local.wpo.wpo_s s (ts ! j))\n        then if pr_strict (f, length ss) (g, length ts) then (True, True)\n             else lex_ext local.wpo.wpo n ss ts\n        else (False, False))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have \"kbo s t = (if pr_strict ?f ?g then (True, True)\n               else if pr_weak ?f ?g then lex_ext_unbounded kbo ss ts\n               else (False, False))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kbo s t =\n    (if pr_strict (f, length ss) (g, length ts) then (True, True)\n     else if pr_weak (f, length ss) (g, length ts)\n          then lex_ext_unbounded kbo ss ts else (False, False))", "unfolding kbo_altdef[of s t]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if weight_le t s\n     then if weight_less t s then (True, True)\n          else case s of\n               Var y \\<Rightarrow>\n                 (False,\n                  case t of Var x \\<Rightarrow> x = y\n                  | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n               | Fun f ss \\<Rightarrow>\n                   case t of Var x \\<Rightarrow> (True, True)\n                   | Fun g ts \\<Rightarrow>\n                       if pr_strict (f, length ss) (g, length ts)\n                       then (True, True)\n                       else if pr_weak (f, length ss) (g, length ts)\n                            then lex_ext_unbounded kbo ss ts\n                            else (False, False)\n     else (False, False)) =\n    (if pr_strict (f, length ss) (g, length ts) then (True, True)\n     else if pr_weak (f, length ss) (g, length ts)\n          then lex_ext_unbounded kbo ss ts else (False, False))", "unfolding s t term.simps split Let_def if_True"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if weight_le (Fun g ts) (Fun f ss)\n     then if weight_less (Fun g ts) (Fun f ss) then (True, True)\n          else if pr_strict (f, length ss) (g, length ts) then (True, True)\n               else if pr_weak (f, length ss) (g, length ts)\n                    then lex_ext_unbounded kbo ss ts else (False, False)\n     else (False, False)) =\n    (if pr_strict (f, length ss) (g, length ts) then (True, True)\n     else if pr_weak (f, length ss) (g, length ts)\n          then lex_ext_unbounded kbo ss ts else (False, False))", "unfolding s[symmetric] t[symmetric] wle if_True weight_less_iff if_False"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if pr_strict (f, length ss) (g, length ts) then (True, True)\n     else if pr_weak (f, length ss) (g, length ts)\n          then lex_ext_unbounded kbo ss ts else (False, False)) =\n    (if pr_strict (f, length ss) (g, length ts) then (True, True)\n     else if pr_weak (f, length ss) (g, length ts)\n          then lex_ext_unbounded kbo ss ts else (False, False))", "by auto"], ["proof (state)\nthis:\n  kbo s t =\n  (if pr_strict (f, length ss) (g, length ts) then (True, True)\n   else if pr_weak (f, length ss) (g, length ts)\n        then lex_ext_unbounded kbo ss ts else (False, False))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "also"], ["proof (state)\nthis:\n  kbo s t =\n  (if pr_strict (f, length ss) (g, length ts) then (True, True)\n   else if pr_weak (f, length ss) (g, length ts)\n        then lex_ext_unbounded kbo ss ts else (False, False))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have \"lex_ext_unbounded kbo ss ts = lex_ext kbo n ss ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext_unbounded kbo ss ts = lex_ext kbo n ss ts", "using bounded[unfolded t]"], ["proof (prove)\nusing this:\n  bounded_arity n (funas_term (Fun g ts))\n\ngoal (1 subgoal):\n 1. lex_ext_unbounded kbo ss ts = lex_ext kbo n ss ts", "unfolding bounded_arity_def lex_ext_def"], ["proof (prove)\nusing this:\n  \\<forall>(f, na)\\<in>funas_term (Fun g ts). na \\<le> n\n\ngoal (1 subgoal):\n 1. lex_ext_unbounded kbo ss ts =\n    (let lts = length ts\n     in if length ss = lts \\<or> lts \\<le> n\n        then lex_ext_unbounded kbo ss ts else (False, False))", "by auto"], ["proof (state)\nthis:\n  lex_ext_unbounded kbo ss ts = lex_ext kbo n ss ts\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "also"], ["proof (state)\nthis:\n  lex_ext_unbounded kbo ss ts = lex_ext kbo n ss ts\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have \"\\<dots> = lex_ext wpo.wpo n ss ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lex_ext kbo n ss ts = lex_ext local.wpo.wpo n ss ts", "by (rule lex_ext_cong[OF refl refl refl], rule IH_tj, auto dest!: sizes sizet)"], ["proof (state)\nthis:\n  lex_ext kbo n ss ts = lex_ext local.wpo.wpo n ss ts\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "finally"], ["proof (chain)\npicking this:\n  kbo s t =\n  (if pr_strict (f, length ss) (g, length ts) then (True, True)\n   else if pr_weak (f, length ss) (g, length ts)\n        then lex_ext local.wpo.wpo n ss ts else (False, False))", "have kbo: \"kbo s t =\n              (if pr_strict ?f ?g then (True, True)\n               else if pr_weak ?f ?g then lex_ext wpo.wpo n ss ts\n               else (False, False))\""], ["proof (prove)\nusing this:\n  kbo s t =\n  (if pr_strict (f, length ss) (g, length ts) then (True, True)\n   else if pr_weak (f, length ss) (g, length ts)\n        then lex_ext local.wpo.wpo n ss ts else (False, False))\n\ngoal (1 subgoal):\n 1. kbo s t =\n    (if pr_strict (f, length ss) (g, length ts) then (True, True)\n     else if pr_weak (f, length ss) (g, length ts)\n          then lex_ext local.wpo.wpo n ss ts else (False, False))", "."], ["proof (state)\nthis:\n  kbo s t =\n  (if pr_strict (f, length ss) (g, length ts) then (True, True)\n   else if pr_weak (f, length ss) (g, length ts)\n        then lex_ext local.wpo.wpo n ss ts else (False, False))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<not> weight_le t s \\<or> weight_less t s) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "proof (cases \"\\<exists>i\\<in>{..<length ss}. wpo.wpo_ns (ss ! i) t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "case True"], ["proof (state)\nthis:\n  \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "then"], ["proof (chain)\npicking this:\n  \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t", "obtain i where i: \"i < length ss\" and \"wpo.wpo_ns (ss ! i) t\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length ss; local.wpo.wpo_ns (ss ! i) t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < length ss\n  local.wpo.wpo_ns (ss ! i) t\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "then"], ["proof (chain)\npicking this:\n  i < length ss\n  local.wpo.wpo_ns (ss ! i) t", "obtain b where \"wpo.wpo (ss ! i) t = (b, True)\""], ["proof (prove)\nusing this:\n  i < length ss\n  local.wpo.wpo_ns (ss ! i) t\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        local.wpo.wpo (ss ! i) t = (b, True) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"wpo.wpo (ss ! i) t\", auto)"], ["proof (state)\nthis:\n  local.wpo.wpo (ss ! i) t = (b, True)\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "also"], ["proof (state)\nthis:\n  local.wpo.wpo (ss ! i) t = (b, True)\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have \"wpo.wpo (ss ! i) t = kbo (ss ! i) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.wpo.wpo (ss ! i) t = kbo (ss ! i) t", "using i"], ["proof (prove)\nusing this:\n  i < length ss\n\ngoal (1 subgoal):\n 1. local.wpo.wpo (ss ! i) t = kbo (ss ! i) t", "by (intro IH[symmetric, OF _ bounded], auto dest: sizes)"], ["proof (state)\nthis:\n  local.wpo.wpo (ss ! i) t = kbo (ss ! i) t\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "finally"], ["proof (chain)\npicking this:\n  kbo (ss ! i) t = (b, True)", "have \"NS (ss ! i) t\""], ["proof (prove)\nusing this:\n  kbo (ss ! i) t = (b, True)\n\ngoal (1 subgoal):\n 1. NS (ss ! i) t", "by simp"], ["proof (state)\nthis:\n  NS (ss ! i) t\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "from kbo_supt_one[OF this]"], ["proof (chain)\npicking this:\n  S (Fun ?f (?bef @ ss ! i # ?aft)) t", "have \"S (Fun f (take i ss @ ss ! i # drop (Suc i) ss)) t\""], ["proof (prove)\nusing this:\n  S (Fun ?f (?bef @ ss ! i # ?aft)) t\n\ngoal (1 subgoal):\n 1. S (Fun f (take i ss @ ss ! i # drop (Suc i) ss)) t", "."], ["proof (state)\nthis:\n  S (Fun f (take i ss @ ss ! i # drop (Suc i) ss)) t\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "also"], ["proof (state)\nthis:\n  S (Fun f (take i ss @ ss ! i # drop (Suc i) ss)) t\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have \"(take i ss @ ss ! i # drop (Suc i) ss) = ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take i ss @ ss ! i # drop (Suc i) ss = ss", "using i"], ["proof (prove)\nusing this:\n  i < length ss\n\ngoal (1 subgoal):\n 1. take i ss @ ss ! i # drop (Suc i) ss = ss", "by (metis id_take_nth_drop)"], ["proof (state)\nthis:\n  take i ss @ ss ! i # drop (Suc i) ss = ss\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "also"], ["proof (state)\nthis:\n  take i ss @ ss ! i # drop (Suc i) ss = ss\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "have \"Fun f ss = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Fun f ss = s", "unfolding s"], ["proof (prove)\ngoal (1 subgoal):\n 1. Fun f ss = Fun f ss", "by simp"], ["proof (state)\nthis:\n  Fun f ss = s\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "finally"], ["proof (chain)\npicking this:\n  S s t", "have \"S s t\""], ["proof (prove)\nusing this:\n  S s t\n\ngoal (1 subgoal):\n 1. S s t", "."], ["proof (state)\nthis:\n  S s t\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "with S_imp_NS[OF this]"], ["proof (chain)\npicking this:\n  NS s t\n  S s t", "have \"kbo s t = (True,True)\""], ["proof (prove)\nusing this:\n  NS s t\n  S s t\n\ngoal (1 subgoal):\n 1. kbo s t = (True, True)", "by (cases \"kbo s t\", auto)"], ["proof (state)\nthis:\n  kbo s t = (True, True)\n\ngoal (2 subgoals):\n 1. \\<exists>i\\<in>{..<length ss}.\n       local.wpo.wpo_ns (ss ! i) t \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t\n 2. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "with True"], ["proof (chain)\npicking this:\n  \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t\n  kbo s t = (True, True)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t\n  kbo s t = (True, True)\n\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "unfolding wpo"], ["proof (prove)\nusing this:\n  \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t\n  kbo s t = (True, True)\n\ngoal (1 subgoal):\n 1. kbo s t =\n    (if \\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t\n     then (True, True)\n     else if pr_weak (f, length ss) (g, length ts) \\<and>\n             (\\<forall>j\\<in>{..<length ts}. local.wpo.wpo_s s (ts ! j))\n          then if pr_strict (f, length ss) (g, length ts) then (True, True)\n               else lex_ext local.wpo.wpo n ss ts\n          else (False, False))", "by auto"], ["proof (state)\nthis:\n  kbo s t = local.wpo.wpo s t\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "hence False: \"(\\<exists>i\\<in>{..<length ss}. wpo.wpo_ns (ss ! i) t) = False\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t)\n\ngoal (1 subgoal):\n 1. (\\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t) = False", "by simp"], ["proof (state)\nthis:\n  (\\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t) = False\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "{"], ["proof (state)\nthis:\n  (\\<exists>i\\<in>{..<length ss}. local.wpo.wpo_ns (ss ! i) t) = False\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "assume NS: \"NS s t\""], ["proof (state)\nthis:\n  NS s t\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "assume j: \"j < length ts\""], ["proof (state)\nthis:\n  j < length ts\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "(* here we make use of proven properties of KBO: subterm-property and transitivity,\n                 perhaps there is a simple proof without already using these properties *)"], ["proof (state)\nthis:\n  j < length ts\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "from kbo_supt_one[OF NS_refl, of g \"take j ts\" \"ts ! j\" \"drop (Suc j) ts\"]"], ["proof (chain)\npicking this:\n  S (Fun g (take j ts @ ts ! j # drop (Suc j) ts)) (ts ! j)", "have S: \"S t (ts ! j)\""], ["proof (prove)\nusing this:\n  S (Fun g (take j ts @ ts ! j # drop (Suc j) ts)) (ts ! j)\n\ngoal (1 subgoal):\n 1. S t (ts ! j)", "using id_take_nth_drop[OF j]"], ["proof (prove)\nusing this:\n  S (Fun g (take j ts @ ts ! j # drop (Suc j) ts)) (ts ! j)\n  ts = take j ts @ ts ! j # drop (Suc j) ts\n\ngoal (1 subgoal):\n 1. S t (ts ! j)", "unfolding t"], ["proof (prove)\nusing this:\n  S (Fun g (take j ts @ ts ! j # drop (Suc j) ts)) (ts ! j)\n  ts = take j ts @ ts ! j # drop (Suc j) ts\n\ngoal (1 subgoal):\n 1. S (Fun g ts) (ts ! j)", "by auto"], ["proof (state)\nthis:\n  S t (ts ! j)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "from kbo_trans[of s t \"ts ! j\"] NS S"], ["proof (chain)\npicking this:\n  (S s t \\<longrightarrow>\n   NS t (ts ! j) \\<longrightarrow> S s (ts ! j)) \\<and>\n  (NS s t \\<longrightarrow>\n   S t (ts ! j) \\<longrightarrow> S s (ts ! j)) \\<and>\n  (NS s t \\<longrightarrow> NS t (ts ! j) \\<longrightarrow> NS s (ts ! j))\n  NS s t\n  S t (ts ! j)", "have \"S s (ts ! j)\""], ["proof (prove)\nusing this:\n  (S s t \\<longrightarrow>\n   NS t (ts ! j) \\<longrightarrow> S s (ts ! j)) \\<and>\n  (NS s t \\<longrightarrow>\n   S t (ts ! j) \\<longrightarrow> S s (ts ! j)) \\<and>\n  (NS s t \\<longrightarrow> NS t (ts ! j) \\<longrightarrow> NS s (ts ! j))\n  NS s t\n  S t (ts ! j)\n\ngoal (1 subgoal):\n 1. S s (ts ! j)", "by auto"], ["proof (state)\nthis:\n  S s (ts ! j)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "with S S_imp_NS[OF this]"], ["proof (chain)\npicking this:\n  S t (ts ! j)\n  NS s (ts ! j)\n  S s (ts ! j)", "have \"kbo s (ts ! j) = (True, True)\""], ["proof (prove)\nusing this:\n  S t (ts ! j)\n  NS s (ts ! j)\n  S s (ts ! j)\n\ngoal (1 subgoal):\n 1. kbo s (ts ! j) = (True, True)", "by (cases \"kbo s (ts ! j)\", auto)"], ["proof (state)\nthis:\n  kbo s (ts ! j) = (True, True)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "hence \"wpo.wpo_s s (ts ! j)\""], ["proof (prove)\nusing this:\n  kbo s (ts ! j) = (True, True)\n\ngoal (1 subgoal):\n 1. local.wpo.wpo_s s (ts ! j)", "by (subst IH_tj[symmetric], insert sizet[OF j] j, auto)"], ["proof (state)\nthis:\n  local.wpo.wpo_s s (ts ! j)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "}"], ["proof (state)\nthis:\n  \\<lbrakk>NS s t; ?j15 < length ts\\<rbrakk>\n  \\<Longrightarrow> local.wpo.wpo_s s (ts ! ?j15)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>i\\<in>{..<length ss}.\n               local.wpo.wpo_ns (ss ! i) t) \\<Longrightarrow>\n    kbo s t = local.wpo.wpo s t", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>NS s t; ?j15 < length ts\\<rbrakk>\n  \\<Longrightarrow> local.wpo.wpo_s s (ts ! ?j15)\n\ngoal (1 subgoal):\n 1. kbo s t = local.wpo.wpo s t", "unfolding wpo kbo False if_False"], ["proof (prove)\nusing this:\n  \\<lbrakk>snd (if pr_strict (f, length ss) (g, length ts) then (True, True)\n                else if pr_weak (f, length ss) (g, length ts)\n                     then lex_ext local.wpo.wpo n ss ts\n                     else (False, False));\n   ?j15 < length ts\\<rbrakk>\n  \\<Longrightarrow> local.wpo.wpo_s s (ts ! ?j15)\n\ngoal (1 subgoal):\n 1. (if pr_strict (f, length ss) (g, length ts) then (True, True)\n     else if pr_weak (f, length ss) (g, length ts)\n          then lex_ext local.wpo.wpo n ss ts else (False, False)) =\n    (if pr_weak (f, length ss) (g, length ts) \\<and>\n        (\\<forall>j\\<in>{..<length ts}. local.wpo.wpo_s s (ts ! j))\n     then if pr_strict (f, length ss) (g, length ts) then (True, True)\n          else lex_ext local.wpo.wpo n ss ts\n     else (False, False))", "using lex_ext_stri_imp_nstri[of wpo.wpo n ss ts]"], ["proof (prove)\nusing this:\n  \\<lbrakk>snd (if pr_strict (f, length ss) (g, length ts) then (True, True)\n                else if pr_weak (f, length ss) (g, length ts)\n                     then lex_ext local.wpo.wpo n ss ts\n                     else (False, False));\n   ?j15 < length ts\\<rbrakk>\n  \\<Longrightarrow> local.wpo.wpo_s s (ts ! ?j15)\n  fst (lex_ext local.wpo.wpo n ss ts) \\<Longrightarrow>\n  snd (lex_ext local.wpo.wpo n ss ts)\n\ngoal (1 subgoal):\n 1. (if pr_strict (f, length ss) (g, length ts) then (True, True)\n     else if pr_weak (f, length ss) (g, length ts)\n          then lex_ext local.wpo.wpo n ss ts else (False, False)) =\n    (if pr_weak (f, length ss) (g, length ts) \\<and>\n        (\\<forall>j\\<in>{..<length ts}. local.wpo.wpo_s s (ts ! j))\n     then if pr_strict (f, length ss) (g, length ts) then (True, True)\n          else lex_ext local.wpo.wpo n ss ts\n     else (False, False))", "by (cases \"lex_ext wpo.wpo n ss ts\", auto simp: pr_strict split: if_splits)"], ["proof (state)\nthis:\n  kbo s t = local.wpo.wpo s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  kbo s t = local.wpo.wpo s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  kbo s t = local.wpo.wpo s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  kbo s t = local.wpo.wpo s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  kbo s t = local.wpo.wpo s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  kbo s t = local.wpo.wpo s t\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>This is the main theorem. It tells us that KBO can be seen as an instance of WPO, under mild preconditions:\n  the parameter $n$ for the lexicographic extension has to be chosen high enough to cover the arities of all \n  terms that should be compared.\\<close>"], ["", "lemma defines \"prec \\<equiv> ((\\<lambda>f g. (pr_strict' f g, pr_weak' f g)))\" \n  and \"prl \\<equiv> (\\<lambda>(f, n). n = 0 \\<and> least f)\" \n  shows \n    kbo_encoding_is_valid_wpo: \"wpo_with_assms weight_S weight_NS prec prl full_status False (\\<lambda>f. False)\"\n  and \n    kbo_as_wpo: \"bounded_arity n (funas_term t) \\<Longrightarrow> kbo s t = wpo.wpo n weight_S weight_NS prec prl full_status (\\<lambda>_. Lex) False (\\<lambda>f. False) s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wpo_with_assms weight_S weight_NS prec prl full_status False\n     (\\<lambda>f. False) &&&\n    (bounded_arity n (funas_term t) \\<Longrightarrow>\n     kbo s t =\n     wpo.wpo n weight_S weight_NS prec prl full_status (\\<lambda>_. Lex)\n      False (\\<lambda>f. False) s t)", "unfolding prec_def prl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wpo_with_assms weight_S weight_NS\n     (\\<lambda>f g. (pr_strict' f g, pr_weak' f g))\n     (\\<lambda>(f, n). n = 0 \\<and> least f) full_status False\n     (\\<lambda>f. False) &&&\n    (bounded_arity n (funas_term t) \\<Longrightarrow>\n     kbo s t =\n     wpo.wpo n weight_S weight_NS\n      (\\<lambda>f g. (pr_strict' f g, pr_weak' f g))\n      (\\<lambda>(f, n). n = 0 \\<and> least f) full_status (\\<lambda>_. Lex)\n      False (\\<lambda>f. False) s t)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. wpo_with_assms weight_S weight_NS\n     (\\<lambda>f g. (pr_strict' f g, pr_weak' f g))\n     (\\<lambda>(f, n). n = 0 \\<and> least f) full_status False\n     (\\<lambda>f. False)", "by (intro admissible_kbo.kbo_instance_of_wpo_with_assms[OF admissible_kbo'] \n        least_pr_weak' least_pr_weak'_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_arity n (funas_term t) \\<Longrightarrow>\n    kbo s t =\n    wpo.wpo n weight_S weight_NS\n     (\\<lambda>f g. (pr_strict' f g, pr_weak' f g))\n     (\\<lambda>(f, n). n = 0 \\<and> least f) full_status (\\<lambda>_. Lex)\n     False (\\<lambda>f. False) s t", "apply (subst kbo'_eq_kbo[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_arity n (funas_term t) \\<Longrightarrow>\n    kbo'.kbo s t =\n    wpo.wpo n weight_S weight_NS\n     (\\<lambda>f g. (pr_strict' f g, pr_weak' f g))\n     (\\<lambda>(f, n). n = 0 \\<and> least f) full_status (\\<lambda>_. Lex)\n     False (\\<lambda>f. False) s t", "apply (subst admissible_kbo.kbo_as_wpo_with_assms[OF admissible_kbo' least_pr_weak' least_pr_weak'_trans, symmetric], (auto)[3])"], ["proof (prove)\ngoal (2 subgoals):\n 1. bounded_arity n (funas_term t) \\<Longrightarrow>\n    bounded_arity n (funas_term t)\n 2. bounded_arity n (funas_term t) \\<Longrightarrow>\n    kbo'.kbo s t = kbo'.kbo s t", "by auto"], ["", "text \\<open>As a proof-of-concept we show that now properties of WPO can be used to prove these properties for KBO.\n  Here, as example we consider closure under substitutions and strong normalization, \n  but the following idea can be applied for several more properties:\n  if the property involves only terms where the arities are bounded, then just choose the parameter $n$ large enough.\n  This even works for strong normalization, since in an infinite chain of KBO-decreases $t_1 > t_2 > t_3 > ...$ all terms have\n  a weight of at most the weight of $t_1$, and this weight is also a bound on the arities.\\<close>"], ["", "lemma KBO_stable_via_WPO: \"S s t \\<Longrightarrow> S (s \\<cdot> (\\<sigma> :: ('f,'a) subst)) (t \\<cdot> \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "let ?terms = \"{t, t \\<cdot> \\<sigma>}\""], ["proof (state)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "(* collect all rhss of comparisons *)"], ["proof (state)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "let ?prec = \"((\\<lambda>f g. (pr_strict' f g, pr_weak' f g)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "let ?prl = \"(\\<lambda>(f, n). n = 0 \\<and> least f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "have \"finite (\\<Union> (funas_term ` ?terms))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (\\<Union> (funas_term ` {t, t \\<cdot> \\<sigma>}))", "by auto"], ["proof (state)\nthis:\n  finite (\\<Union> (funas_term ` {t, t \\<cdot> \\<sigma>}))\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "from finite_list[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>xs. set xs = \\<Union> (funas_term ` {t, t \\<cdot> \\<sigma>})", "obtain F where F: \"set F = \\<Union> (funas_term ` ?terms)\""], ["proof (prove)\nusing this:\n  \\<exists>xs. set xs = \\<Union> (funas_term ` {t, t \\<cdot> \\<sigma>})\n\ngoal (1 subgoal):\n 1. (\\<And>F.\n        set F =\n        \\<Union> (funas_term ` {t, t \\<cdot> \\<sigma>}) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  set F = \\<Union> (funas_term ` {t, t \\<cdot> \\<sigma>})\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "(* since there only finitely many symbols, we can take n as the maximal arity *)"], ["proof (state)\nthis:\n  set F = \\<Union> (funas_term ` {t, t \\<cdot> \\<sigma>})\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "define n where \"n = max_list (map snd F)\""], ["proof (state)\nthis:\n  n = max_list (map snd F)\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "(* now get a WPO for this choice of n *)"], ["proof (state)\nthis:\n  n = max_list (map snd F)\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "interpret wpo: wpo_with_assms\n  where S = weight_S and NS = weight_NS\n    and prc = ?prec and prl = ?prl\n    and c = \"\\<lambda>_. Lex\"\n    and ssimple = False and large = \"\\<lambda>f. False\" and \\<sigma>\\<sigma> = full_status\n    and n = n"], ["proof (prove)\ngoal (1 subgoal):\n 1. wpo_with_assms weight_S weight_NS\n     (\\<lambda>f g. (pr_strict' f g, pr_weak' f g))\n     (\\<lambda>(f, n). n = 0 \\<and> least f) full_status False\n     (\\<lambda>f. False)", "by (rule kbo_encoding_is_valid_wpo)"], ["proof (state)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "assume \"t \\<in> ?terms\""], ["proof (state)\nthis:\n  t \\<in> {t, t \\<cdot> \\<sigma>}\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "hence \"funas_term t \\<subseteq> set F\""], ["proof (prove)\nusing this:\n  t \\<in> {t, t \\<cdot> \\<sigma>}\n\ngoal (1 subgoal):\n 1. funas_term t \\<subseteq> set F", "unfolding F"], ["proof (prove)\nusing this:\n  t \\<in> {t, t \\<cdot> \\<sigma>}\n\ngoal (1 subgoal):\n 1. funas_term t \\<subseteq> \\<Union> (funas_term ` {t, t \\<cdot> \\<sigma>})", "by auto"], ["proof (state)\nthis:\n  funas_term t \\<subseteq> set F\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "hence \"bounded_arity n (funas_term t)\""], ["proof (prove)\nusing this:\n  funas_term t \\<subseteq> set F\n\ngoal (1 subgoal):\n 1. bounded_arity n (funas_term t)", "unfolding bounded_arity_def"], ["proof (prove)\nusing this:\n  funas_term t \\<subseteq> set F\n\ngoal (1 subgoal):\n 1. \\<forall>(f, na)\\<in>funas_term t. na \\<le> n", "using max_list[of _ \"map snd F\", folded n_def]"], ["proof (prove)\nusing this:\n  funas_term t \\<subseteq> set F\n  ?x \\<in> set (map snd F) \\<Longrightarrow> ?x \\<le> n\n\ngoal (1 subgoal):\n 1. \\<forall>(f, na)\\<in>funas_term t. na \\<le> n", "by fastforce"], ["proof (state)\nthis:\n  bounded_arity n (funas_term t)\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "}"], ["proof (state)\nthis:\n  ?ta16 \\<in> {t, t \\<cdot> \\<sigma>} \\<Longrightarrow>\n  bounded_arity n (funas_term ?ta16)\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "(* for all the terms we have that KBO = WPO *)"], ["proof (state)\nthis:\n  ?ta16 \\<in> {t, t \\<cdot> \\<sigma>} \\<Longrightarrow>\n  bounded_arity n (funas_term ?ta16)\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "note kbo_as_wpo = kbo_as_wpo[OF this]"], ["proof (state)\nthis:\n  ?t \\<in> {t, t \\<cdot> \\<sigma>} \\<Longrightarrow>\n  kbo ?s ?t = local.wpo.wpo ?s ?t\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "(* and finally transfer the existing property of WPO to KBO *)"], ["proof (state)\nthis:\n  ?t \\<in> {t, t \\<cdot> \\<sigma>} \\<Longrightarrow>\n  kbo ?s ?t = local.wpo.wpo ?s ?t\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "from wpo.WPO_S_subst[of s t \\<sigma>]"], ["proof (chain)\npicking this:\n  (s, t) \\<in> local.wpo.WPO_S \\<Longrightarrow>\n  (s \\<cdot> \\<sigma>, t \\<cdot> \\<sigma>) \\<in> local.wpo.WPO_S", "show \"S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\""], ["proof (prove)\nusing this:\n  (s, t) \\<in> local.wpo.WPO_S \\<Longrightarrow>\n  (s \\<cdot> \\<sigma>, t \\<cdot> \\<sigma>) \\<in> local.wpo.WPO_S\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "using kbo_as_wpo"], ["proof (prove)\nusing this:\n  (s, t) \\<in> local.wpo.WPO_S \\<Longrightarrow>\n  (s \\<cdot> \\<sigma>, t \\<cdot> \\<sigma>) \\<in> local.wpo.WPO_S\n  ?t \\<in> {t, t \\<cdot> \\<sigma>} \\<Longrightarrow>\n  kbo ?s ?t = local.wpo.wpo ?s ?t\n\ngoal (1 subgoal):\n 1. S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  S s t \\<Longrightarrow> S (s \\<cdot> \\<sigma>) (t \\<cdot> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weight_is_arity_bound: \"weight t \\<le> b \\<Longrightarrow> bounded_arity b (funas_term t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight t \\<le> b \\<Longrightarrow> bounded_arity b (funas_term t)", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "case (Fun f ts)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a13 \\<in> set ts; weight ?x2a13 \\<le> b\\<rbrakk>\n  \\<Longrightarrow> bounded_arity b (funas_term ?x2a13)\n  weight (Fun f ts) \\<le> b\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "have \"sum_list (map weight ts) \\<le> weight (Fun f ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map weight ts) \\<le> weight (Fun f ts)", "using sum_list_scf_list[of ts \"scf (f,length ts)\", OF scf]"], ["proof (prove)\nusing this:\n  (\\<And>i. i < length ts \\<Longrightarrow> i < length ts) \\<Longrightarrow>\n  sum_list (map weight ts)\n  \\<le> sum_list (map weight (scf_list (scf (f, length ts)) ts))\n\ngoal (1 subgoal):\n 1. sum_list (map weight ts) \\<le> weight (Fun f ts)", "by auto"], ["proof (state)\nthis:\n  sum_list (map weight ts) \\<le> weight (Fun f ts)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "also"], ["proof (state)\nthis:\n  sum_list (map weight ts) \\<le> weight (Fun f ts)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "have \"\\<dots> \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (Fun f ts) \\<le> b", "using Fun"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2a13 \\<in> set ts; weight ?x2a13 \\<le> b\\<rbrakk>\n  \\<Longrightarrow> bounded_arity b (funas_term ?x2a13)\n  weight (Fun f ts) \\<le> b\n\ngoal (1 subgoal):\n 1. weight (Fun f ts) \\<le> b", "by auto"], ["proof (state)\nthis:\n  weight (Fun f ts) \\<le> b\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "finally"], ["proof (chain)\npicking this:\n  sum_list (map weight ts) \\<le> b", "have sum_b: \"sum_list (map weight ts) \\<le> b\""], ["proof (prove)\nusing this:\n  sum_list (map weight ts) \\<le> b\n\ngoal (1 subgoal):\n 1. sum_list (map weight ts) \\<le> b", "."], ["proof (state)\nthis:\n  sum_list (map weight ts) \\<le> b\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "{"], ["proof (state)\nthis:\n  sum_list (map weight ts) \\<le> b\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "assume t: \"t \\<in> set ts\""], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "from split_list[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>ys zs. ts = ys @ t # zs", "have \"weight t \\<le> sum_list (map weight ts)\""], ["proof (prove)\nusing this:\n  \\<exists>ys zs. ts = ys @ t # zs\n\ngoal (1 subgoal):\n 1. weight t \\<le> sum_list (map weight ts)", "by auto"], ["proof (state)\nthis:\n  weight t \\<le> sum_list (map weight ts)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "with sum_b"], ["proof (chain)\npicking this:\n  sum_list (map weight ts) \\<le> b\n  weight t \\<le> sum_list (map weight ts)", "have \"bounded_arity b (funas_term t)\""], ["proof (prove)\nusing this:\n  sum_list (map weight ts) \\<le> b\n  weight t \\<le> sum_list (map weight ts)\n\ngoal (1 subgoal):\n 1. bounded_arity b (funas_term t)", "using t Fun"], ["proof (prove)\nusing this:\n  sum_list (map weight ts) \\<le> b\n  weight t \\<le> sum_list (map weight ts)\n  t \\<in> set ts\n  \\<lbrakk>?x2a13 \\<in> set ts; weight ?x2a13 \\<le> b\\<rbrakk>\n  \\<Longrightarrow> bounded_arity b (funas_term ?x2a13)\n  weight (Fun f ts) \\<le> b\n\ngoal (1 subgoal):\n 1. bounded_arity b (funas_term t)", "by auto"], ["proof (state)\nthis:\n  bounded_arity b (funas_term t)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "}"], ["proof (state)\nthis:\n  ?ta15 \\<in> set ts \\<Longrightarrow> bounded_arity b (funas_term ?ta15)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "note IH = this"], ["proof (state)\nthis:\n  ?ta15 \\<in> set ts \\<Longrightarrow> bounded_arity b (funas_term ?ta15)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "have \"length ts = sum_list (map (\\<lambda> _. 1) ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ts = (\\<Sum>_\\<leftarrow>ts. 1)", "by (induct ts, auto)"], ["proof (state)\nthis:\n  length ts = (\\<Sum>_\\<leftarrow>ts. 1)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "also"], ["proof (state)\nthis:\n  length ts = (\\<Sum>_\\<leftarrow>ts. 1)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "have \"\\<dots> \\<le> sum_list (map weight ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>_\\<leftarrow>ts. 1) \\<le> sum_list (map weight ts)", "apply (rule sum_list_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>uu_. uu_ \\<in> set ts \\<Longrightarrow> 1 \\<le> weight uu_", "subgoal for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> set ts \\<Longrightarrow> 1 \\<le> weight t", "using weight_gt_0[of t]"], ["proof (prove)\nusing this:\n  0 < weight t\n\ngoal (1 subgoal):\n 1. t \\<in> set ts \\<Longrightarrow> 1 \\<le> weight t", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<Sum>_\\<leftarrow>ts. 1) \\<le> sum_list (map weight ts)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "also"], ["proof (state)\nthis:\n  (\\<Sum>_\\<leftarrow>ts. 1) \\<le> sum_list (map weight ts)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "have \"\\<dots> \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map weight ts) \\<le> b", "by fact"], ["proof (state)\nthis:\n  sum_list (map weight ts) \\<le> b\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "finally"], ["proof (chain)\npicking this:\n  length ts \\<le> b", "have len: \"length ts \\<le> b\""], ["proof (prove)\nusing this:\n  length ts \\<le> b\n\ngoal (1 subgoal):\n 1. length ts \\<le> b", "by auto"], ["proof (state)\nthis:\n  length ts \\<le> b\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<And>x2a.\n                   \\<lbrakk>x2a \\<in> set x2; weight x2a \\<le> b\\<rbrakk>\n                   \\<Longrightarrow> bounded_arity b (funas_term x2a);\n        weight (Fun x1a x2) \\<le> b\\<rbrakk>\n       \\<Longrightarrow> bounded_arity b (funas_term (Fun x1a x2))", "from IH len"], ["proof (chain)\npicking this:\n  ?ta15 \\<in> set ts \\<Longrightarrow> bounded_arity b (funas_term ?ta15)\n  length ts \\<le> b", "show ?case"], ["proof (prove)\nusing this:\n  ?ta15 \\<in> set ts \\<Longrightarrow> bounded_arity b (funas_term ?ta15)\n  length ts \\<le> b\n\ngoal (1 subgoal):\n 1. bounded_arity b (funas_term (Fun f ts))", "unfolding bounded_arity_def"], ["proof (prove)\nusing this:\n  ?ta15 \\<in> set ts \\<Longrightarrow>\n  \\<forall>(f, n)\\<in>funas_term ?ta15. n \\<le> b\n  length ts \\<le> b\n\ngoal (1 subgoal):\n 1. \\<forall>(f, n)\\<in>funas_term (Fun f ts). n \\<le> b", "by auto"], ["proof (state)\nthis:\n  bounded_arity b (funas_term (Fun f ts))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       weight (Var x) \\<le> b \\<Longrightarrow>\n       bounded_arity b (funas_term (Var x))", "qed (auto simp: bounded_arity_def)"], ["", "lemma KBO_SN_via_WPO: \"SN {(s,t). S s t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN {(s, t). S s t}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "fix f :: \"nat \\<Rightarrow> ('f,'a)term\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"\\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\""], ["proof (state)\nthis:\n  \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "hence steps: \"S (f i) (f (Suc i))\" for i"], ["proof (prove)\nusing this:\n  \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\n\ngoal (1 subgoal):\n 1. S (f i) (f (Suc i))", "by auto"], ["proof (state)\nthis:\n  S (f ?i13) (f (Suc ?i13))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "define n where \"n = weight (f 0)\""], ["proof (state)\nthis:\n  n = weight (f 0)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "have w_bound: \"weight (f i) \\<le> n\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. weight (f i) \\<le> n", "proof (induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. weight (f 0) \\<le> n\n 2. \\<And>i.\n       weight (f i) \\<le> n \\<Longrightarrow> weight (f (Suc i)) \\<le> n", "case (Suc i)"], ["proof (state)\nthis:\n  weight (f i) \\<le> n\n\ngoal (2 subgoals):\n 1. weight (f 0) \\<le> n\n 2. \\<And>i.\n       weight (f i) \\<le> n \\<Longrightarrow> weight (f (Suc i)) \\<le> n", "from steps[of i]"], ["proof (chain)\npicking this:\n  S (f i) (f (Suc i))", "have \"weight (f (Suc i)) \\<le> weight (f i)\""], ["proof (prove)\nusing this:\n  S (f i) (f (Suc i))\n\ngoal (1 subgoal):\n 1. weight (f (Suc i)) \\<le> weight (f i)", "unfolding kbo.simps[of \"f i\"]"], ["proof (prove)\nusing this:\n  fst (if vars_term_ms (SCF (f (Suc i))) \\<subseteq>#\n          vars_term_ms (SCF (f i)) \\<and>\n          weight (f (Suc i)) \\<le> weight (f i)\n       then if weight (f (Suc i)) < weight (f i) then (True, True)\n            else case f i of\n                 Var y \\<Rightarrow>\n                   (False,\n                    case f (Suc i) of Var x \\<Rightarrow> x = y\n                    | Fun g ts \\<Rightarrow> ts = [] \\<and> least g)\n                 | Fun fa ss \\<Rightarrow>\n                     case f (Suc i) of Var x \\<Rightarrow> (True, True)\n                     | Fun g ts \\<Rightarrow>\n                         if pr_strict (fa, length ss) (g, length ts)\n                         then (True, True)\n                         else if pr_weak (fa, length ss) (g, length ts)\n                              then lex_ext_unbounded kbo ss ts\n                              else (False, False)\n       else (False, False))\n\ngoal (1 subgoal):\n 1. weight (f (Suc i)) \\<le> weight (f i)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  weight (f (Suc i)) \\<le> weight (f i)\n\ngoal (2 subgoals):\n 1. weight (f 0) \\<le> n\n 2. \\<And>i.\n       weight (f i) \\<le> n \\<Longrightarrow> weight (f (Suc i)) \\<le> n", "with Suc"], ["proof (chain)\npicking this:\n  weight (f i) \\<le> n\n  weight (f (Suc i)) \\<le> weight (f i)", "show ?case"], ["proof (prove)\nusing this:\n  weight (f i) \\<le> n\n  weight (f (Suc i)) \\<le> weight (f i)\n\ngoal (1 subgoal):\n 1. weight (f (Suc i)) \\<le> n", "by simp"], ["proof (state)\nthis:\n  weight (f (Suc i)) \\<le> n\n\ngoal (1 subgoal):\n 1. weight (f 0) \\<le> n", "qed (auto simp: n_def)"], ["proof (state)\nthis:\n  weight (f ?i13) \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "let ?prec = \"((\\<lambda>f g. (pr_strict' f g, pr_weak' f g)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "let ?prl = \"(\\<lambda>(f, n). n = 0 \\<and> least f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "(* now get a WPO for this choice of n *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "interpret wpo: wpo_with_assms\n  where S = weight_S and NS = weight_NS\n    and prc = ?prec and prl = ?prl\n    and c = \"\\<lambda>_. Lex\"\n    and ssimple = False and large = \"\\<lambda>f. False\" and \\<sigma>\\<sigma> = full_status\n    and n = n"], ["proof (prove)\ngoal (1 subgoal):\n 1. wpo_with_assms weight_S weight_NS\n     (\\<lambda>f g. (pr_strict' f g, pr_weak' f g))\n     (\\<lambda>(f, n). n = 0 \\<and> least f) full_status False\n     (\\<lambda>f. False)", "by (rule kbo_encoding_is_valid_wpo)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "have \"kbo (f i) (f (Suc i)) = wpo.wpo (f i) (f (Suc i))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. kbo (f i) (f (Suc i)) = local.wpo.wpo (f i) (f (Suc i))", "by (rule kbo_as_wpo[OF weight_is_arity_bound[OF w_bound]])"], ["proof (state)\nthis:\n  kbo (f ?i14) (f (Suc ?i14)) = local.wpo.wpo (f ?i14) (f (Suc ?i14))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "(* for all the terms in the infinite sequence f 0, f 1, ... \n     we have that KBO = WPO *)\n\n  (* and finally derive contradiction to SN-property of WPO *)"], ["proof (state)\nthis:\n  kbo (f ?i14) (f (Suc ?i14)) = local.wpo.wpo (f ?i14) (f (Suc ?i14))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>f 0 \\<in> UNIV;\n        \\<forall>i. (f i, f (Suc i)) \\<in> {(s, t). S s t}\\<rbrakk>\n       \\<Longrightarrow> False", "from steps[unfolded this] wpo.WPO_S_SN"], ["proof (chain)\npicking this:\n  local.wpo.wpo_s (f ?i13) (f (Suc ?i13))\n  SN local.wpo.WPO_S", "show False"], ["proof (prove)\nusing this:\n  local.wpo.wpo_s (f ?i13) (f (Suc ?i13))\n  SN local.wpo.WPO_S\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}