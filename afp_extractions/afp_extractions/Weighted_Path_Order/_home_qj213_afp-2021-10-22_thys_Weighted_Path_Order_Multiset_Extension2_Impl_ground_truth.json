{"file_name": "/home/qj213/afp-2021-10-22/thys/Weighted_Path_Order/Multiset_Extension2_Impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Weighted_Path_Order", "problem_names": ["lemma mul_ext_list_ext: \"\\<exists> s ns. list_order_extension_impl s ns mul_ext\"", "lemma mul_ext_impl_sound0:\n  \"mul_ext_impl sns xs ys = mult2_impl (\\<lambda>x y. sns y x) ys xs\"\n  \"mul_ex_dom sns xs xs' y ys = mult2_ex_dom (\\<lambda>x y. sns y x) y ys xs xs'\"", "lemma cond1_propagate:\n  assumes \"cond1 f bs y xs ys\"\n  shows \"cond1 f (b # bs) y xs ys\"", "lemma cond2_propagate:\n  assumes \"cond2 f bs y xs ys\"\n  shows \"cond2 f (b # bs) y xs ys\"", "lemma cond1_cond2:\n  assumes \"cond1 f bs y xs ys\"\n  shows \"cond2 f bs y xs ys\"", "lemma mul_ext_impl_sound:\n  shows \"mul_ext_impl f xs ys = mul_ext f xs ys\"", "lemma mul_ext_code [code]: \"mul_ext = mul_ext_impl\"", "lemma mul_ext_impl_cong[fundef_cong]:\n  assumes \"\\<And>x x'. x \\<in> set xs \\<Longrightarrow> x' \\<in> set ys \\<Longrightarrow> f x x' = g x x'\"\n  shows \"mul_ext_impl f xs ys = mul_ext_impl g xs ys\"", "lemma set_ass_list_to_single_list [simp]:\n  \"set (ass_list_to_single_list xs) = {x. \\<exists>n. (x, n) \\<in> set xs \\<and> n > 0}\"", "lemma count_mset_replicate [simp]:\n  \"count (mset (replicate n x)) x = n\"", "lemma count_mset_lal_ge:\n  \"(x, n) \\<in> set xs \\<Longrightarrow> count (mset (ass_list_to_single_list xs)) x \\<ge> n\"", "lemma count_of_count_mset_lal [simp]:\n  \"distinct (map fst y) \\<Longrightarrow> count_of y x = count (mset (ass_list_to_single_list y)) x\"", "lemma Bag_mset: \"Bag xs = mset (ass_list_to_single_list (DAList.impl_of xs))\"", "lemma Bag_Alist_Cons:\n  \"x \\<notin> fst ` set xs \\<Longrightarrow> distinct (map fst xs) \\<Longrightarrow>\n    Bag (Alist ((x, n) # xs)) = mset (replicate n x) + Bag (Alist xs)\"", "lemma mset_lal [simp]:\n  \"distinct (map fst xs) \\<Longrightarrow> mset (ass_list_to_single_list xs) = Bag (Alist xs)\"", "lemma Bag_s_mul_ext:\n  \"(Bag xs, Bag ys) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)} \\<longleftrightarrow>\n    fst (mul_ext f (ass_list_to_single_list (DAList.impl_of xs)) (ass_list_to_single_list (DAList.impl_of ys)))\"", "lemma Bag_ns_mul_ext:\n  \"(Bag xs, Bag ys) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)} \\<longleftrightarrow>\n    snd (mul_ext f (ass_list_to_single_list (DAList.impl_of xs)) (ass_list_to_single_list (DAList.impl_of ys)))\"", "lemma smulextp_code[code]:\n  \"smulextp f (Bag xs) (Bag ys) \\<longleftrightarrow> fst (mul_ext f (ass_list_to_single_list (DAList.impl_of xs)) (ass_list_to_single_list (DAList.impl_of ys)))\"", "lemma nsmulextp_code[code]:\n  \"nsmulextp f (Bag xs) (Bag ys) \\<longleftrightarrow> snd (mul_ext f (ass_list_to_single_list (DAList.impl_of xs)) (ass_list_to_single_list (DAList.impl_of ys)))\"", "lemma mulextp_code[code]:\n  \"mulextp f (Bag xs) (Bag ys) = mul_ext f (ass_list_to_single_list (DAList.impl_of xs)) (ass_list_to_single_list (DAList.impl_of ys))\""], "translations": [["", "lemma mul_ext_list_ext: \"\\<exists> s ns. list_order_extension_impl s ns mul_ext\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s ns. list_order_extension_impl s ns mul_ext", "proof(intro exI)"], ["proof (state)\ngoal (1 subgoal):\n 1. list_order_extension_impl ?s ?ns1 mul_ext", "let ?s = \"\\<lambda> s ns. {(as,bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\""], ["proof (state)\ngoal (1 subgoal):\n 1. list_order_extension_impl ?s ?ns1 mul_ext", "let ?ns = \"\\<lambda> s ns. {(as,bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\""], ["proof (state)\ngoal (1 subgoal):\n 1. list_order_extension_impl ?s ?ns1 mul_ext", "let ?m = mset"], ["proof (state)\ngoal (1 subgoal):\n 1. list_order_extension_impl ?s ?ns1 mul_ext", "show \"list_order_extension_impl ?s ?ns mul_ext\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_order_extension_impl\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s})\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s})\n     mul_ext", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s ns.\n       {(as, bs).\n        (mset as, mset bs)\n        \\<in> s_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n       {(as, bs). fst (mul_ext (\\<lambda>a b. (s a b, ns a b)) as bs)}\n 2. \\<And>s ns.\n       {(as, bs).\n        (mset as, mset bs)\n        \\<in> ns_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n       {(as, bs). snd (mul_ext (\\<lambda>a b. (s a b, ns a b)) as bs)}\n 3. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext s' ns'}\n 4. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "fix s ns"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s ns.\n       {(as, bs).\n        (mset as, mset bs)\n        \\<in> s_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n       {(as, bs). fst (mul_ext (\\<lambda>a b. (s a b, ns a b)) as bs)}\n 2. \\<And>s ns.\n       {(as, bs).\n        (mset as, mset bs)\n        \\<in> ns_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n       {(as, bs). snd (mul_ext (\\<lambda>a b. (s a b, ns a b)) as bs)}\n 3. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext s' ns'}\n 4. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "show \"?s {(a,b). s a b} {(a,b). ns a b} = {(as,bs). fst (mul_ext (\\<lambda> a b. (s a b, ns a b)) as bs)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(as, bs).\n     (mset as, mset bs) \\<in> s_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n    {(as, bs). fst (mul_ext (\\<lambda>a b. (s a b, ns a b)) as bs)}", "unfolding mul_ext_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(as, bs).\n     (mset as, mset bs) \\<in> s_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n    {(as, bs).\n     fst ((mset as, mset bs)\n          \\<in> s_mul_ext {(x, y). snd (s x y, ns x y)}\n                 {(x, y). fst (s x y, ns x y)},\n          (mset as, mset bs)\n          \\<in> ns_mul_ext {(x, y). snd (s x y, ns x y)}\n                 {(x, y). fst (s x y, ns x y)})}", "by auto"], ["proof (state)\nthis:\n  {(as, bs).\n   (mset as, mset bs) \\<in> s_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n  {(as, bs). fst (mul_ext (\\<lambda>a b. (s a b, ns a b)) as bs)}\n\ngoal (3 subgoals):\n 1. \\<And>s ns.\n       {(as, bs).\n        (mset as, mset bs)\n        \\<in> ns_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n       {(as, bs). snd (mul_ext (\\<lambda>a b. (s a b, ns a b)) as bs)}\n 2. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext s' ns'}\n 3. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s ns.\n       {(as, bs).\n        (mset as, mset bs)\n        \\<in> ns_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n       {(as, bs). snd (mul_ext (\\<lambda>a b. (s a b, ns a b)) as bs)}\n 2. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext s' ns'}\n 3. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "fix s ns"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s ns.\n       {(as, bs).\n        (mset as, mset bs)\n        \\<in> ns_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n       {(as, bs). snd (mul_ext (\\<lambda>a b. (s a b, ns a b)) as bs)}\n 2. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext s' ns'}\n 3. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "show \"?ns {(a,b). s a b} {(a,b). ns a b} = {(as,bs). snd (mul_ext (\\<lambda> a b. (s a b, ns a b)) as bs)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(as, bs).\n     (mset as, mset bs) \\<in> ns_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n    {(as, bs). snd (mul_ext (\\<lambda>a b. (s a b, ns a b)) as bs)}", "unfolding mul_ext_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(as, bs).\n     (mset as, mset bs) \\<in> ns_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n    {(as, bs).\n     snd ((mset as, mset bs)\n          \\<in> s_mul_ext {(x, y). snd (s x y, ns x y)}\n                 {(x, y). fst (s x y, ns x y)},\n          (mset as, mset bs)\n          \\<in> ns_mul_ext {(x, y). snd (s x y, ns x y)}\n                 {(x, y). fst (s x y, ns x y)})}", "by auto"], ["proof (state)\nthis:\n  {(as, bs).\n   (mset as, mset bs) \\<in> ns_mul_ext {(a, b). ns a b} {(a, b). s a b}} =\n  {(as, bs). snd (mul_ext (\\<lambda>a b. (s a b, ns a b)) as bs)}\n\ngoal (2 subgoals):\n 1. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext s' ns'}\n 2. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext s' ns'}\n 2. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "fix s ns s' ns' as bs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext s' ns'}\n 2. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "assume \"set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\"\n           \"set as \\<times> set bs \\<inter> s \\<subseteq> s'\"\n           \"(as,bs) \\<in> ?s s ns\""], ["proof (state)\nthis:\n  set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\n  set as \\<times> set bs \\<inter> s \\<subseteq> s'\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n\ngoal (2 subgoals):\n 1. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext s' ns'}\n 2. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "then"], ["proof (chain)\npicking this:\n  set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\n  set as \\<times> set bs \\<inter> s \\<subseteq> s'\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "show \"(as,bs) \\<in> ?s s' ns'\""], ["proof (prove)\nusing this:\n  set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\n  set as \\<times> set bs \\<inter> s \\<subseteq> s'\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n\ngoal (1 subgoal):\n 1. (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns' s'}", "using s_mul_ext_local_mono[of \"?m as\" \"?m bs\" ns ns' s s']"], ["proof (prove)\nusing this:\n  set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\n  set as \\<times> set bs \\<inter> s \\<subseteq> s'\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n  \\<lbrakk>set_mset (mset as) \\<times> set_mset (mset bs) \\<inter> ns\n           \\<subseteq> ns';\n   set_mset (mset as) \\<times> set_mset (mset bs) \\<inter> s \\<subseteq> s';\n   (mset as, mset bs) \\<in> s_mul_ext ns s\\<rbrakk>\n  \\<Longrightarrow> (mset as, mset bs) \\<in> s_mul_ext ns' s'\n\ngoal (1 subgoal):\n 1. (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns' s'}", "unfolding set_mset_mset"], ["proof (prove)\nusing this:\n  set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\n  set as \\<times> set bs \\<inter> s \\<subseteq> s'\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n  \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n   set as \\<times> set bs \\<inter> s \\<subseteq> s';\n   (mset as, mset bs) \\<in> s_mul_ext ns s\\<rbrakk>\n  \\<Longrightarrow> (mset as, mset bs) \\<in> s_mul_ext ns' s'\n\ngoal (1 subgoal):\n 1. (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns' s'}", "by auto"], ["proof (state)\nthis:\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns' s'}\n\ngoal (1 subgoal):\n 1. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "fix s ns s' ns' as bs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "assume \"set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\"\n           \"set as \\<times> set bs \\<inter> s \\<subseteq> s'\"\n           \"(as,bs) \\<in> ?ns s ns\""], ["proof (state)\nthis:\n  set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\n  set as \\<times> set bs \\<inter> s \\<subseteq> s'\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n\ngoal (1 subgoal):\n 1. \\<And>s ns s' ns' as bs.\n       \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n        set as \\<times> set bs \\<inter> s \\<subseteq> s';\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext s ns}\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext s' ns'}", "then"], ["proof (chain)\npicking this:\n  set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\n  set as \\<times> set bs \\<inter> s \\<subseteq> s'\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}", "show \"(as,bs) \\<in> ?ns s' ns'\""], ["proof (prove)\nusing this:\n  set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\n  set as \\<times> set bs \\<inter> s \\<subseteq> s'\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n\ngoal (1 subgoal):\n 1. (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns' s'}", "using ns_mul_ext_local_mono[of \"?m as\" \"?m bs\" ns ns' s s']"], ["proof (prove)\nusing this:\n  set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\n  set as \\<times> set bs \\<inter> s \\<subseteq> s'\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n  \\<lbrakk>set_mset (mset as) \\<times> set_mset (mset bs) \\<inter> ns\n           \\<subseteq> ns';\n   set_mset (mset as) \\<times> set_mset (mset bs) \\<inter> s \\<subseteq> s';\n   (mset as, mset bs) \\<in> ns_mul_ext ns s\\<rbrakk>\n  \\<Longrightarrow> (mset as, mset bs) \\<in> ns_mul_ext ns' s'\n\ngoal (1 subgoal):\n 1. (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns' s'}", "unfolding set_mset_mset"], ["proof (prove)\nusing this:\n  set as \\<times> set bs \\<inter> ns \\<subseteq> ns'\n  set as \\<times> set bs \\<inter> s \\<subseteq> s'\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n  \\<lbrakk>set as \\<times> set bs \\<inter> ns \\<subseteq> ns';\n   set as \\<times> set bs \\<inter> s \\<subseteq> s';\n   (mset as, mset bs) \\<in> ns_mul_ext ns s\\<rbrakk>\n  \\<Longrightarrow> (mset as, mset bs) \\<in> ns_mul_ext ns' s'\n\ngoal (1 subgoal):\n 1. (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns' s'}", "by auto"], ["proof (state)\nthis:\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns' s'}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_order_extension_impl\n   (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s})\n   (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s})\n   mul_ext\n\ngoal:\nNo subgoals!", "qed"], ["", "context fixes sns :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool \\<times> bool\"\nbegin"], ["", "fun mul_ext_impl :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> bool \\<times> bool\"\nand mul_ex_dom :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a \\<Rightarrow> 'a list \\<Rightarrow> bool \\<times> bool\"\nwhere\n  \"mul_ext_impl [] []       = (False, True)\"\n| \"mul_ext_impl [] ys       = (False, False)\"\n| \"mul_ext_impl xs []       = (True, True)\"\n| \"mul_ext_impl xs (y # ys) = mul_ex_dom xs [] y ys\"\n\n| \"mul_ex_dom []       xs' y ys = (False, False)\"\n| \"mul_ex_dom (x # xs) xs' y ys =\n    (case sns x y of\n      (True, _) \\<Rightarrow> if snd (mul_ext_impl (xs @ xs') (filter (\\<lambda>y. \\<not> fst (sns x y)) ys)) then (True, True)\n                   else mul_ex_dom xs (x # xs') y ys\n    | (False, True) \\<Rightarrow> or2 (mul_ext_impl (xs @ xs') ys) (mul_ex_dom xs (x # xs') y ys)\n    | _ \\<Rightarrow> mul_ex_dom xs (x # xs') y ys)\""], ["", "end"], ["", "context\nbegin"], ["", "lemma mul_ext_impl_sound0:\n  \"mul_ext_impl sns xs ys = mult2_impl (\\<lambda>x y. sns y x) ys xs\"\n  \"mul_ex_dom sns xs xs' y ys = mult2_ex_dom (\\<lambda>x y. sns y x) y ys xs xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mul_ext_impl sns xs ys = mult2_impl (\\<lambda>x y. sns y x) ys xs &&&\n    mul_ex_dom sns xs xs' y ys =\n    mult2_ex_dom (\\<lambda>x y. sns y x) y ys xs xs'", "by (induct xs ys and xs xs' y ys taking: sns rule: mul_ext_impl_mul_ex_dom.induct)\n  (auto split: prod.splits bool.splits)"], ["", "private"], ["", "definition cond1 where\n  \"cond1 f bs y xs ys \\<equiv>\n  ((\\<exists>b. b \\<in> set bs \\<and> fst (f b y) \\<and> snd (mul_ext f (remove1 b xs) [y\\<leftarrow>ys . \\<not> fst (f b y)]))\n  \\<or> (\\<exists>b. b \\<in> set bs \\<and> snd (f b y) \\<and> fst (mul_ext f (remove1 b xs) ys)))\""], ["", "private"], ["", "lemma cond1_propagate:\n  assumes \"cond1 f bs y xs ys\"\n  shows \"cond1 f (b # bs) y xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond1 f (b # bs) y xs ys", "using assms"], ["proof (prove)\nusing this:\n  cond1 f bs y xs ys\n\ngoal (1 subgoal):\n 1. cond1 f (b # bs) y xs ys", "unfolding cond1_def"], ["proof (prove)\nusing this:\n  (\\<exists>b.\n      b \\<in> set bs \\<and>\n      fst (f b y) \\<and>\n      snd (mul_ext f (remove1 b xs)\n            (filter (\\<lambda>y. \\<not> fst (f b y)) ys))) \\<or>\n  (\\<exists>b.\n      b \\<in> set bs \\<and>\n      snd (f b y) \\<and> fst (mul_ext f (remove1 b xs) ys))\n\ngoal (1 subgoal):\n 1. (\\<exists>ba.\n        ba \\<in> set (b # bs) \\<and>\n        fst (f ba y) \\<and>\n        snd (mul_ext f (remove1 ba xs)\n              (filter (\\<lambda>y. \\<not> fst (f ba y)) ys))) \\<or>\n    (\\<exists>ba.\n        ba \\<in> set (b # bs) \\<and>\n        snd (f ba y) \\<and> fst (mul_ext f (remove1 ba xs) ys))", "by auto"], ["", "private"], ["", "definition cond2 where\n  \"cond2 f bs y xs ys \\<equiv> (cond1 f bs y xs ys\n  \\<or> (\\<exists>b. b \\<in> set bs \\<and> snd (f b y) \\<and> snd (mul_ext f (remove1 b xs) ys)))\""], ["", "private"], ["", "lemma cond2_propagate:\n  assumes \"cond2 f bs y xs ys\"\n  shows \"cond2 f (b # bs) y xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond2 f (b # bs) y xs ys", "using assms and cond1_propagate[of f bs y xs ys]"], ["proof (prove)\nusing this:\n  cond2 f bs y xs ys\n  cond1 f bs y xs ys \\<Longrightarrow> cond1 f (?b # bs) y xs ys\n\ngoal (1 subgoal):\n 1. cond2 f (b # bs) y xs ys", "unfolding cond2_def"], ["proof (prove)\nusing this:\n  cond1 f bs y xs ys \\<or>\n  (\\<exists>b.\n      b \\<in> set bs \\<and>\n      snd (f b y) \\<and> snd (mul_ext f (remove1 b xs) ys))\n  cond1 f bs y xs ys \\<Longrightarrow> cond1 f (?b # bs) y xs ys\n\ngoal (1 subgoal):\n 1. cond1 f (b # bs) y xs ys \\<or>\n    (\\<exists>ba.\n        ba \\<in> set (b # bs) \\<and>\n        snd (f ba y) \\<and> snd (mul_ext f (remove1 ba xs) ys))", "by auto"], ["", "private"], ["", "lemma cond1_cond2:\n  assumes \"cond1 f bs y xs ys\"\n  shows \"cond2 f bs y xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cond2 f bs y xs ys", "using assms"], ["proof (prove)\nusing this:\n  cond1 f bs y xs ys\n\ngoal (1 subgoal):\n 1. cond2 f bs y xs ys", "unfolding cond2_def"], ["proof (prove)\nusing this:\n  cond1 f bs y xs ys\n\ngoal (1 subgoal):\n 1. cond1 f bs y xs ys \\<or>\n    (\\<exists>b.\n        b \\<in> set bs \\<and>\n        snd (f b y) \\<and> snd (mul_ext f (remove1 b xs) ys))", "by simp"], ["", "lemma mul_ext_impl_sound:\n  shows \"mul_ext_impl f xs ys = mul_ext f xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mul_ext_impl f xs ys = mul_ext f xs ys", "unfolding mul_ext_def s_mul_ext_def ns_mul_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mul_ext_impl f xs ys =\n    (let s = {(x, y). fst (f x y)}; ns = {(x, y). snd (f x y)}\n     in ((mset xs, mset ys)\n         \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>,\n         (mset xs, mset ys)\n         \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>))", "by (auto simp: Let_def converse_def mul_ext_impl_sound0 mult2_impl_sound)"], ["", "lemma mul_ext_code [code]: \"mul_ext = mul_ext_impl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mul_ext = mul_ext_impl", "by (intro ext, unfold mul_ext_impl_sound, auto)"], ["", "lemma mul_ext_impl_cong[fundef_cong]:\n  assumes \"\\<And>x x'. x \\<in> set xs \\<Longrightarrow> x' \\<in> set ys \\<Longrightarrow> f x x' = g x x'\"\n  shows \"mul_ext_impl f xs ys = mul_ext_impl g xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mul_ext_impl f xs ys = mul_ext_impl g xs ys", "using assms\n stri_mul_ext_map[of xs ys g f id] nstri_mul_ext_map[of xs ys g f id]\n stri_mul_ext_map[of xs ys f g id] nstri_mul_ext_map[of xs ys f g id]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set xs; ?x' \\<in> set ys\\<rbrakk>\n  \\<Longrightarrow> f ?x ?x' = g ?x ?x'\n  \\<lbrakk>\\<And>s t.\n              \\<lbrakk>s \\<in> set xs; t \\<in> set ys; fst (g s t)\\<rbrakk>\n              \\<Longrightarrow> fst (f (id s) (id t));\n   \\<And>s t.\n      \\<lbrakk>s \\<in> set xs; t \\<in> set ys; snd (g s t)\\<rbrakk>\n      \\<Longrightarrow> snd (f (id s) (id t));\n   fst (mul_ext g xs ys)\\<rbrakk>\n  \\<Longrightarrow> fst (mul_ext f (map id xs) (map id ys))\n  \\<lbrakk>\\<And>s t.\n              \\<lbrakk>s \\<in> set xs; t \\<in> set ys; fst (g s t)\\<rbrakk>\n              \\<Longrightarrow> fst (f (id s) (id t));\n   \\<And>s t.\n      \\<lbrakk>s \\<in> set xs; t \\<in> set ys; snd (g s t)\\<rbrakk>\n      \\<Longrightarrow> snd (f (id s) (id t));\n   snd (mul_ext g xs ys)\\<rbrakk>\n  \\<Longrightarrow> snd (mul_ext f (map id xs) (map id ys))\n  \\<lbrakk>\\<And>s t.\n              \\<lbrakk>s \\<in> set xs; t \\<in> set ys; fst (f s t)\\<rbrakk>\n              \\<Longrightarrow> fst (g (id s) (id t));\n   \\<And>s t.\n      \\<lbrakk>s \\<in> set xs; t \\<in> set ys; snd (f s t)\\<rbrakk>\n      \\<Longrightarrow> snd (g (id s) (id t));\n   fst (mul_ext f xs ys)\\<rbrakk>\n  \\<Longrightarrow> fst (mul_ext g (map id xs) (map id ys))\n  \\<lbrakk>\\<And>s t.\n              \\<lbrakk>s \\<in> set xs; t \\<in> set ys; fst (f s t)\\<rbrakk>\n              \\<Longrightarrow> fst (g (id s) (id t));\n   \\<And>s t.\n      \\<lbrakk>s \\<in> set xs; t \\<in> set ys; snd (f s t)\\<rbrakk>\n      \\<Longrightarrow> snd (g (id s) (id t));\n   snd (mul_ext f xs ys)\\<rbrakk>\n  \\<Longrightarrow> snd (mul_ext g (map id xs) (map id ys))\n\ngoal (1 subgoal):\n 1. mul_ext_impl f xs ys = mul_ext_impl g xs ys", "by (auto simp: mul_ext_impl_sound mul_ext_def Let_def)"], ["", "end"], ["", "fun ass_list_to_single_list :: \"('a \\<times> nat) list \\<Rightarrow> 'a list\"\n  where\n    \"ass_list_to_single_list [] = []\"\n  | \"ass_list_to_single_list ((x, n) # xs) = replicate n x @ ass_list_to_single_list xs\""], ["", "lemma set_ass_list_to_single_list [simp]:\n  \"set (ass_list_to_single_list xs) = {x. \\<exists>n. (x, n) \\<in> set xs \\<and> n > 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (ass_list_to_single_list xs) =\n    {x. \\<exists>n. (x, n) \\<in> set xs \\<and> 0 < n}", "by (induct xs rule: ass_list_to_single_list.induct) auto"], ["", "lemma count_mset_replicate [simp]:\n  \"count (mset (replicate n x)) x = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset (replicate n x)) x = n", "by (induct n) (auto)"], ["", "lemma count_mset_lal_ge:\n  \"(x, n) \\<in> set xs \\<Longrightarrow> count (mset (ass_list_to_single_list xs)) x \\<ge> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, n) \\<in> set xs \\<Longrightarrow>\n    n \\<le> count (mset (ass_list_to_single_list xs)) x", "by (induct xs) auto"], ["", "lemma count_of_count_mset_lal [simp]:\n  \"distinct (map fst y) \\<Longrightarrow> count_of y x = count (mset (ass_list_to_single_list y)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst y) \\<Longrightarrow>\n    count_of y x = count (mset (ass_list_to_single_list y)) x", "by (induct y) (auto simp: count_mset_lal_ge count_of_empty)"], ["", "lemma Bag_mset: \"Bag xs = mset (ass_list_to_single_list (DAList.impl_of xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bag xs = mset (ass_list_to_single_list (alist.impl_of xs))", "by (intro multiset_eqI, induct xs) (auto simp: Alist_inverse)"], ["", "lemma Bag_Alist_Cons:\n  \"x \\<notin> fst ` set xs \\<Longrightarrow> distinct (map fst xs) \\<Longrightarrow>\n    Bag (Alist ((x, n) # xs)) = mset (replicate n x) + Bag (Alist xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> fst ` set xs; distinct (map fst xs)\\<rbrakk>\n    \\<Longrightarrow> Bag (Alist ((x, n) # xs)) =\n                      mset (replicate n x) + Bag (Alist xs)", "by (induct xs) (auto simp: Bag_mset Alist_inverse)"], ["", "lemma mset_lal [simp]:\n  \"distinct (map fst xs) \\<Longrightarrow> mset (ass_list_to_single_list xs) = Bag (Alist xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst xs) \\<Longrightarrow>\n    mset (ass_list_to_single_list xs) = Bag (Alist xs)", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct (map fst []) \\<Longrightarrow>\n    mset (ass_list_to_single_list []) = Bag (Alist [])\n 2. \\<And>a xs.\n       \\<lbrakk>distinct (map fst xs) \\<Longrightarrow>\n                mset (ass_list_to_single_list xs) = Bag (Alist xs);\n        distinct (map fst (a # xs))\\<rbrakk>\n       \\<Longrightarrow> mset (ass_list_to_single_list (a # xs)) =\n                         Bag (Alist (a # xs))", "apply (auto simp: Bag_Alist_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Bag (Alist []) = {#}", "apply (simp add: Mempty_Bag empty.abs_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Bag_s_mul_ext:\n  \"(Bag xs, Bag ys) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)} \\<longleftrightarrow>\n    fst (mul_ext f (ass_list_to_single_list (DAList.impl_of xs)) (ass_list_to_single_list (DAList.impl_of ys)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Bag xs, Bag ys)\n     \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}) =\n    fst (mul_ext f (ass_list_to_single_list (alist.impl_of xs))\n          (ass_list_to_single_list (alist.impl_of ys)))", "by (auto simp: mul_ext_def Let_def Alist_impl_of)"], ["", "lemma Bag_ns_mul_ext:\n  \"(Bag xs, Bag ys) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)} \\<longleftrightarrow>\n    snd (mul_ext f (ass_list_to_single_list (DAList.impl_of xs)) (ass_list_to_single_list (DAList.impl_of ys)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Bag xs, Bag ys)\n     \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}) =\n    snd (mul_ext f (ass_list_to_single_list (alist.impl_of xs))\n          (ass_list_to_single_list (alist.impl_of ys)))", "by (auto simp: mul_ext_def Let_def Alist_impl_of)"], ["", "lemma smulextp_code[code]:\n  \"smulextp f (Bag xs) (Bag ys) \\<longleftrightarrow> fst (mul_ext f (ass_list_to_single_list (DAList.impl_of xs)) (ass_list_to_single_list (DAList.impl_of ys)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smulextp f (Bag xs) (Bag ys) =\n    fst (mul_ext f (ass_list_to_single_list (alist.impl_of xs))\n          (ass_list_to_single_list (alist.impl_of ys)))", "unfolding smulextp_def Bag_s_mul_ext"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (mul_ext f (ass_list_to_single_list (alist.impl_of xs))\n          (ass_list_to_single_list (alist.impl_of ys))) =\n    fst (mul_ext f (ass_list_to_single_list (alist.impl_of xs))\n          (ass_list_to_single_list (alist.impl_of ys)))", ".."], ["", "lemma nsmulextp_code[code]:\n  \"nsmulextp f (Bag xs) (Bag ys) \\<longleftrightarrow> snd (mul_ext f (ass_list_to_single_list (DAList.impl_of xs)) (ass_list_to_single_list (DAList.impl_of ys)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nsmulextp f (Bag xs) (Bag ys) =\n    snd (mul_ext f (ass_list_to_single_list (alist.impl_of xs))\n          (ass_list_to_single_list (alist.impl_of ys)))", "unfolding nsmulextp_def Bag_ns_mul_ext"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (mul_ext f (ass_list_to_single_list (alist.impl_of xs))\n          (ass_list_to_single_list (alist.impl_of ys))) =\n    snd (mul_ext f (ass_list_to_single_list (alist.impl_of xs))\n          (ass_list_to_single_list (alist.impl_of ys)))", ".."], ["", "lemma mulextp_code[code]:\n  \"mulextp f (Bag xs) (Bag ys) = mul_ext f (ass_list_to_single_list (DAList.impl_of xs)) (ass_list_to_single_list (DAList.impl_of ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mulextp f (Bag xs) (Bag ys) =\n    mul_ext f (ass_list_to_single_list (alist.impl_of xs))\n     (ass_list_to_single_list (alist.impl_of ys))", "unfolding mulextp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (smulextp f (Bag xs) (Bag ys), nsmulextp f (Bag xs) (Bag ys)) =\n    mul_ext f (ass_list_to_single_list (alist.impl_of xs))\n     (ass_list_to_single_list (alist.impl_of ys))", "by (simp add: nsmulextp_code smulextp_code)"], ["", "end"]]}