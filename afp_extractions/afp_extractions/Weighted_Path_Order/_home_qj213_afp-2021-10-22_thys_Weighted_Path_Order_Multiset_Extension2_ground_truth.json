{"file_name": "/home/qj213/afp-2021-10-22/thys/Weighted_Path_Order/Multiset_Extension2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Weighted_Path_Order", "problem_names": ["lemma multpw_listI:\n  assumes \"length xs = length ys\" \"X = mset xs\" \"Y = mset ys\"\n    \"\\<forall>i. i < length ys \\<longrightarrow> (xs ! i, ys ! i) \\<in> ns\"\n  shows \"(X, Y) \\<in> multpw ns\"", "lemma multpw_listE:\n  assumes \"(X, Y) \\<in> multpw ns\"\n  obtains xs ys where \"length xs = length ys\" \"X = mset xs\" \"Y = mset ys\"\n    \"\\<forall>i. i < length ys \\<longrightarrow> (xs ! i, ys ! i) \\<in> ns\"", "lemma ns_mul_extI:\n  assumes \"A = A1 + A2\" and \"B = B1 + B2\"\n    and \"(A1, B1) \\<in> multpw ns\"\n    and \"\\<And>b. b \\<in># B2 \\<Longrightarrow> \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\"\n  shows \"(A, B) \\<in> ns_mul_ext ns s\"", "lemma ns_mul_extE:\n  assumes \"(A, B) \\<in> ns_mul_ext ns s\"\n  obtains A1 A2 B1 B2 where \"A = A1 + A2\" and \"B = B1 + B2\"\n    and \"(A1, B1) \\<in> multpw ns\"\n    and \"\\<And>b. b \\<in># B2 \\<Longrightarrow> \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\"", "lemmas ns_mul_extI_old = ns_mul_extI[OF _ _ multpw_listI[OF _ refl refl], rule_format]", "lemma s_mul_extI:\n  assumes \"A = A1 + A2\" and \"B = B1 + B2\"\n    and \"(A1, B1) \\<in> multpw ns\"\n    and \"A2 \\<noteq> {#}\" and \"\\<And>b. b \\<in># B2 \\<Longrightarrow> \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\"\n  shows \"(A, B) \\<in> s_mul_ext ns s\"", "lemma s_mul_extE:\n  assumes \"(A, B) \\<in> s_mul_ext ns s\"\n  obtains A1 A2 B1 B2 where \"A = A1 + A2\" and \"B = B1 + B2\"\n    and \"(A1, B1) \\<in> multpw ns\"\n    and \"A2 \\<noteq> {#}\" and \"\\<And>b. b \\<in># B2 \\<Longrightarrow> \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\"", "lemmas s_mul_extI_old = s_mul_extI[OF _ _ multpw_listI[OF _ refl refl], rule_format]", "lemma s_mul_ext_mono:\n  assumes \"ns \\<subseteq> ns'\" \"s \\<subseteq> s'\" shows \"s_mul_ext ns s \\<subseteq> s_mul_ext ns' s'\"", "lemma ns_mul_ext_mono:\n  assumes \"ns \\<subseteq> ns'\" \"s \\<subseteq> s'\" shows \"ns_mul_ext ns s \\<subseteq> ns_mul_ext ns' s'\"", "lemma s_mul_ext_local_mono:\n  assumes sub: \"(set_mset xs \\<times> set_mset ys) \\<inter> ns \\<subseteq> ns'\" \"(set_mset xs \\<times> set_mset ys) \\<inter> s \\<subseteq> s'\"\n    and rel: \"(xs,ys) \\<in> s_mul_ext ns s\"\n  shows \"(xs,ys) \\<in> s_mul_ext ns' s'\"", "lemma ns_mul_ext_local_mono:\n  assumes sub: \"(set_mset xs \\<times> set_mset ys) \\<inter> ns \\<subseteq> ns'\" \"(set_mset xs \\<times> set_mset ys) \\<inter> s \\<subseteq> s'\"\n    and rel: \"(xs,ys) \\<in> ns_mul_ext ns s\"\n  shows \"(xs,ys) \\<in> ns_mul_ext ns' s'\"", "lemma ns_mul_ext_bottom: \"(A,{#}) \\<in> ns_mul_ext ns s\"", "lemma ns_mul_ext_bottom_uniqueness:\n  assumes \"({#},A) \\<in> ns_mul_ext ns s\"\n  shows \"A = {#}\"", "lemma ns_mul_ext_bottom2:\n  assumes \"(A,B) \\<in> ns_mul_ext ns s\"\n    and \"B \\<noteq> {#}\"\n  shows \"A \\<noteq> {#}\"", "lemma s_mul_ext_bottom:\n  assumes \"A \\<noteq> {#}\"\n  shows \"(A,{#}) \\<in> s_mul_ext ns s\"", "lemma s_mul_ext_bottom_strict:\n  \"({#},A) \\<notin> s_mul_ext ns s\"", "lemma all_ns_ns_mul_ext:\n  assumes \"length as = length bs\"\n    and \"\\<forall>i. i < length bs \\<longrightarrow> (as ! i, bs ! i) \\<in> ns\"\n  shows \"(mset as, mset bs) \\<in> ns_mul_ext ns s\"", "lemma all_s_s_mul_ext:\n  assumes \"A \\<noteq> {#}\"\n    and \"\\<forall>b. b \\<in># B \\<longrightarrow> (\\<exists>a. a \\<in># A \\<and> (a,b) \\<in> s)\"\n  shows \"(A, B) \\<in> s_mul_ext ns s\"", "lemma s_ns_mul_ext:\n  assumes \"(A, B) \\<in> s_mul_ext ns s\"\n  shows \"(A, B) \\<in> ns_mul_ext ns s\"", "lemma multpw_refl':\n  assumes \"locally_refl ns A\"\n  shows \"(A, A) \\<in> multpw ns\"", "lemma ns_mul_ext_refl_local:\n  assumes \"locally_refl ns A\"\n  shows \"(A, A) \\<in> ns_mul_ext ns s\"", "lemma ns_mul_ext_refl:\n  assumes \"refl ns\"\n  shows \"(A, A) \\<in> ns_mul_ext ns s\"", "lemma ns_s_mul_ext_union_multiset_l:\n  assumes \"(A, B) \\<in> ns_mul_ext ns s\"\n    and \"C \\<noteq> {#}\"\n    and \"\\<forall>d. d \\<in># D \\<longrightarrow> (\\<exists>c. c \\<in># C \\<and> (c,d) \\<in> s)\"\n  shows \"(A + C, B + D) \\<in> s_mul_ext ns s\"", "lemma s_mul_ext_union_compat:\n  assumes \"(A, B) \\<in> s_mul_ext ns s\"\n    and \"locally_refl ns C\"\n  shows \"(A + C, B + C) \\<in> s_mul_ext ns s\"", "lemma ns_mul_ext_union_compat:\n  assumes \"(A, B) \\<in> ns_mul_ext ns s\"\n    and \"locally_refl ns C\"\n  shows \"(A + C, B + C) \\<in> ns_mul_ext ns s\"", "lemma refl_imp_locally_refl: \"locally_refl NS A\"", "lemma supseteq_imp_ns_mul_ext:\n  assumes \"A \\<supseteq># B\"\n  shows \"(A, B) \\<in> ns_mul_ext NS S\"", "lemma supset_imp_s_mul_ext:\n  assumes \"A \\<supset># B\"\n  shows \"(A, B) \\<in> s_mul_ext NS S\"", "lemma smulextp_cong[fundef_cong]:\n  assumes \"xs1 = ys1\"\n    and \"xs2 = ys2\"\n    and \"\\<And> x x'. x \\<in># ys1 \\<Longrightarrow> x' \\<in># ys2 \\<Longrightarrow> f x x' = g x x'\"\n  shows \"smulextp f xs1 xs2 = smulextp g ys1 ys2\"", "lemma nsmulextp_cong[fundef_cong]:\n  assumes \"xs1 = ys1\"\n    and \"xs2 = ys2\"\n    and \"\\<And> x x'. x \\<in># ys1 \\<Longrightarrow> x' \\<in># ys2 \\<Longrightarrow> f x x' = g x x'\"\n  shows \"nsmulextp f xs1 xs2 = nsmulextp g ys1 ys2\"", "lemma mulextp_cong[fundef_cong]:\n  assumes \"xs1 = ys1\"\n    and \"xs2 = ys2\"\n    and \"\\<And> x x'. x \\<in># ys1 \\<Longrightarrow> x' \\<in># ys2 \\<Longrightarrow> f x x' = g x x'\"\n  shows \"mulextp f xs1 xs2 = mulextp g ys1 ys2\"", "lemma mset_s_mul_ext:\n  \"(mset xs, mset ys) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y).fst (f x y)} \\<longleftrightarrow>\n    fst (mul_ext f xs ys)\"", "lemma mset_ns_mul_ext:\n  \"(mset xs, mset ys) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y).fst (f x y)} \\<longleftrightarrow>\n    snd (mul_ext f xs ys)\"", "lemma smulextp_mset_code:\n  \"smulextp f (mset xs) (mset ys) \\<longleftrightarrow> fst (mul_ext f xs ys)\"", "lemma nsmulextp_mset_code:\n  \"nsmulextp f (mset xs) (mset ys) \\<longleftrightarrow> snd (mul_ext f xs ys)\"", "lemma nstri_mul_ext_map:\n  assumes \"\\<And>s t. s \\<in> set ss \\<Longrightarrow> t \\<in> set ts \\<Longrightarrow> fst (order s t) \\<Longrightarrow> fst (order' (f s) (f t))\"\n    and \"\\<And>s t. s \\<in> set ss \\<Longrightarrow> t \\<in> set ts \\<Longrightarrow> snd (order s t) \\<Longrightarrow> snd (order' (f s) (f t))\"\n    and \"snd (mul_ext order ss ts)\"\n  shows \"snd (mul_ext order' (map f ss) (map f ts))\"", "lemma stri_mul_ext_map:\n  assumes \"\\<And>s t. s \\<in> set ss \\<Longrightarrow> t \\<in> set ts \\<Longrightarrow> fst (order s t) \\<Longrightarrow> fst (order' (f s) (f t))\"\n    and \"\\<And>s t. s \\<in> set ss \\<Longrightarrow> t \\<in> set ts \\<Longrightarrow> snd (order s t) \\<Longrightarrow> snd (order' (f s) (f t))\"\n    and \"fst (mul_ext order ss ts)\"\n  shows \"fst (mul_ext order' (map f ss) (map f ts))\"", "lemma ns_mul_ext_trans:\n  assumes \"trans s\" \"trans ns\" \"compatible_l ns s\" \"compatible_r ns s\" \"refl ns\"\n    and \"(A, B) \\<in> ns_mul_ext ns s\"\n    and \"(B, C) \\<in> ns_mul_ext ns s\"\n  shows \"(A, C) \\<in> ns_mul_ext ns s\"", "lemma s_mul_ext_trans:\n  assumes \"trans s\" \"trans ns\" \"compatible_l ns s\" \"compatible_r ns s\" \"refl ns\"\n    and \"(A, B) \\<in> s_mul_ext ns s\"\n    and \"(B, C) \\<in> s_mul_ext ns s\"\n  shows \"(A, C) \\<in> s_mul_ext ns s\"", "lemma s_ns_mul_ext_trans:\n  assumes \"trans s\" \"trans ns\" \"compatible_l ns s\" \"compatible_r ns s\" \"refl ns\"\n    and \"(A, B) \\<in> s_mul_ext ns s\"\n    and \"(B, C) \\<in> ns_mul_ext ns s\"\n  shows \"(A, C) \\<in> s_mul_ext ns s\"", "lemma ns_s_mul_ext_trans:\n  assumes \"trans s\" \"trans ns\" \"compatible_l ns s\" \"compatible_r ns s\" \"refl ns\"\n    and \"(A, B) \\<in> ns_mul_ext ns s\"\n    and \"(B, C) \\<in> s_mul_ext ns s\"\n  shows \"(A, C) \\<in> s_mul_ext ns s\"", "lemma SN_s_mul_ext_strong:\n  assumes \"order_pair s ns\"\n    and \"\\<forall>y. y \\<in># M \\<longrightarrow> SN_on s {y}\"\n  shows \"SN_on (s_mul_ext ns s) {M}\"", "lemma SN_s_mul_ext:\n  assumes \"order_pair s ns\" \"SN s\"\n  shows \"SN (s_mul_ext ns s)\"", "lemma (in order_pair) mul_ext_order_pair:\n  \"order_pair (s_mul_ext NS S) (ns_mul_ext NS S)\" (is \"order_pair ?S ?NS\")", "lemma (in SN_order_pair) mul_ext_SN_order_pair: \"SN_order_pair (s_mul_ext NS S) (ns_mul_ext NS S)\"\n  (is \"SN_order_pair ?S ?NS\")", "lemma mul_ext_compat:\n  assumes compat: \"\\<And> s t u. \\<lbrakk>s \\<in> set ss; t \\<in> set ts; u \\<in> set us\\<rbrakk> \\<Longrightarrow>\n    (snd (f s t) \\<and> fst (f t u) \\<longrightarrow> fst (f s u)) \\<and>\n    (fst (f s t) \\<and> snd (f t u) \\<longrightarrow> fst (f s u)) \\<and>\n    (snd (f s t) \\<and> snd (f t u) \\<longrightarrow> snd (f s u)) \\<and>\n    (fst (f s t) \\<and> fst (f t u) \\<longrightarrow> fst (f s u))\"\n  shows \"\n    (snd (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow> fst (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow> fst (mul_ext f ss us)) \\<and>\n    (snd (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow> snd (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow> fst (mul_ext f ss us)) \"", "lemma mul_ext_cong[fundef_cong]:\n  assumes \"mset xs1 = mset ys1\"\n    and \"mset xs2 = mset ys2\"\n    and \"\\<And> x x'. x \\<in> set ys1 \\<Longrightarrow> x' \\<in> set ys2 \\<Longrightarrow> f x x' = g x x'\"\n  shows \"mul_ext f xs1 xs2 = mul_ext g ys1 ys2\"", "lemma all_nstri_imp_mul_nstri:\n  assumes \"\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))\"\n    and \"length xs = length ys\"\n  shows \"snd (mul_ext f xs ys)\"", "lemma relation_inter:\n  shows \"{(x,y). P x y} \\<inter> {(x,y). Q x y} = {(x,y). P x y \\<and> Q x y}\"", "lemma mul_ext_unfold:\n  \"(x,y) \\<in> {(a,b). fst (mul_ext g a b)} \\<longleftrightarrow> (mset x, mset y) \\<in> (s_mul_ext {(a,b). snd (g a b)} {(a,b). fst (g a b)})\"", "lemma mul_ext_SN:\n  assumes \"\\<forall>x. snd (g x x)\"\n    and \"\\<forall>x y z. fst (g x y) \\<longrightarrow> snd (g y z) \\<longrightarrow> fst (g x z)\"\n    and \"\\<forall>x y z. snd (g x y) \\<longrightarrow> fst (g y z) \\<longrightarrow> fst (g x z)\"\n    and \"\\<forall>x y z. snd (g x y) \\<longrightarrow> snd (g y z) \\<longrightarrow> snd (g x z)\"\n    and \"\\<forall>x y z. fst (g x y) \\<longrightarrow> fst (g y z) \\<longrightarrow> fst (g x z)\"\n  shows \"SN {(ys, xs).\n  (\\<forall>y\\<in>set ys. SN_on {(s ,t). fst (g s t)} {y}) \\<and>\n  fst (mul_ext g ys xs)}\"", "lemma mul_ext_stri_imp_nstri:\n  assumes \"fst (mul_ext f as bs)\"\n  shows \"snd (mul_ext f as bs)\"", "lemma ns_ns_mul_ext_union_compat:\n  assumes \"(A,B) \\<in> ns_mul_ext ns s\"\n    and \"(C,D) \\<in> ns_mul_ext ns s\"\n  shows \"(A + C, B + D) \\<in> ns_mul_ext ns s\"", "lemma s_ns_mul_ext_union_compat:\n  assumes \"(A,B) \\<in> s_mul_ext ns s\"\n    and \"(C,D) \\<in> ns_mul_ext ns s\"\n  shows \"(A + C, B + D) \\<in> s_mul_ext ns s\"", "lemma ns_ns_mul_ext_union_compat_rtrancl: assumes refl: \"refl ns\"\n  and AB: \"(A, B) \\<in> (ns_mul_ext ns s)\\<^sup>*\"\n  and CD: \"(C, D) \\<in> (ns_mul_ext ns s)\\<^sup>*\"\nshows \"(A + C, B + D) \\<in> (ns_mul_ext ns s)\\<^sup>*\"", "lemma s_mul_ext_singleton [simp, intro]:\n  assumes \"(a, b) \\<in> s\"\n  shows \"({#a#}, {#b#}) \\<in> s_mul_ext ns s\"", "lemma ns_mul_ext_singleton [simp, intro]:\n  \"(a, b) \\<in> ns \\<Longrightarrow> ({#a#}, {#b#}) \\<in> ns_mul_ext ns s\"", "lemma ns_mul_ext_singleton2:\n  \"(a, b) \\<in> s \\<Longrightarrow> ({#a#}, {#b#}) \\<in> ns_mul_ext ns s\"", "lemma s_mul_ext_self_extend_left:\n  assumes \"A \\<noteq> {#}\" and \"locally_refl W B\"\n  shows \"(A + B, B) \\<in> s_mul_ext W S\"", "lemma s_mul_ext_ne_extend_left:\n  assumes \"A \\<noteq> {#}\" and \"(B, C) \\<in> ns_mul_ext W S\"\n  shows \"(A + B, C) \\<in> s_mul_ext W S\"", "lemma s_mul_ext_extend_left:\n  assumes \"(B, C) \\<in> s_mul_ext W S\"\n  shows \"(A + B, C) \\<in> s_mul_ext W S\"", "lemma mul_ext_mono:\n  assumes \"\\<And>x y. \\<lbrakk>x \\<in> set xs; y \\<in> set ys; fst (P x y)\\<rbrakk> \\<Longrightarrow> fst (P' x y)\"\n    and   \"\\<And>x y. \\<lbrakk>x \\<in> set xs; y \\<in> set ys; snd (P x y)\\<rbrakk> \\<Longrightarrow> snd (P' x y)\"\n  shows\n    \"fst (mul_ext P xs ys) \\<Longrightarrow> fst (mul_ext P' xs ys)\" \n    \"snd (mul_ext P xs ys) \\<Longrightarrow> snd (mul_ext P' xs ys)\"", "lemma ns_mul_ext_IdE:\n  assumes \"(M, N) \\<in> ns_mul_ext Id R\"\n  obtains X and Y and Z where \"M = X + Z\" and \"N = Y + Z\"\n    and \"\\<forall>y \\<in> set_mset Y. \\<exists>x \\<in> set_mset X. (x, y) \\<in> R\"", "lemma ns_mul_ext_IdI:\n  assumes \"M = X + Z\" and \"N = Y + Z\" and \"\\<forall>y \\<in> set_mset Y. \\<exists>x \\<in> set_mset X. (x, y) \\<in> R\"\n  shows \"(M, N) \\<in> ns_mul_ext Id R\"", "lemma s_mul_ext_IdE:\n  assumes \"(M, N) \\<in> s_mul_ext Id R\"\n  obtains X and Y and Z where \"X \\<noteq> {#}\" and \"M = X + Z\" and \"N = Y + Z\"\n    and \"\\<forall>y \\<in> set_mset Y. \\<exists>x \\<in> set_mset X. (x, y) \\<in> R\"", "lemma s_mul_ext_IdI:\n  assumes \"X \\<noteq> {#}\" and \"M = X + Z\" and \"N = Y + Z\"\n    and \"\\<forall>y \\<in> set_mset Y. \\<exists>x \\<in> set_mset X. (x, y) \\<in> R\"\n  shows \"(M, N) \\<in> s_mul_ext Id R\"", "lemma mult_s_mul_ext_conv:\n  assumes \"trans R\"\n  shows \"(mult (R\\<inverse>))\\<inverse> = s_mul_ext Id R\"", "lemma ns_mul_ext_Id_eq:\n  \"ns_mul_ext Id R = (s_mul_ext Id R)\\<^sup>=\"", "lemma subseteq_mset_imp_ns_mul_ext_Id:\n  assumes \"A \\<subseteq># B\"\n  shows \"(B, A) \\<in> ns_mul_ext Id R\"", "lemma subset_mset_imp_s_mul_ext_Id:\n  assumes \"A \\<subset># B\"\n  shows \"(B, A) \\<in> s_mul_ext Id R\""], "translations": [["", "lemma multpw_listI:\n  assumes \"length xs = length ys\" \"X = mset xs\" \"Y = mset ys\"\n    \"\\<forall>i. i < length ys \\<longrightarrow> (xs ! i, ys ! i) \\<in> ns\"\n  shows \"(X, Y) \\<in> multpw ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (X, Y) \\<in> multpw ns", "using assms"], ["proof (prove)\nusing this:\n  length xs = length ys\n  X = mset xs\n  Y = mset ys\n  \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\n\ngoal (1 subgoal):\n 1. (X, Y) \\<in> multpw ns", "proof (induct xs arbitrary: ys X Y)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys X Y.\n       \\<lbrakk>length [] = length ys; X = mset []; Y = mset ys;\n        \\<forall>i<length ys. ([] ! i, ys ! i) \\<in> ns\\<rbrakk>\n       \\<Longrightarrow> (X, Y) \\<in> multpw ns\n 2. \\<And>a xs ys X Y.\n       \\<lbrakk>\\<And>ys X Y.\n                   \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                    \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                   \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n        length (a # xs) = length ys; X = mset (a # xs); Y = mset ys;\n        \\<forall>i<length ys. ((a # xs) ! i, ys ! i) \\<in> ns\\<rbrakk>\n       \\<Longrightarrow> (X, Y) \\<in> multpw ns", "case (Nil ys)"], ["proof (state)\nthis:\n  length [] = length ys\n  X = mset []\n  Y = mset ys\n  \\<forall>i<length ys. ([] ! i, ys ! i) \\<in> ns\n\ngoal (2 subgoals):\n 1. \\<And>ys X Y.\n       \\<lbrakk>length [] = length ys; X = mset []; Y = mset ys;\n        \\<forall>i<length ys. ([] ! i, ys ! i) \\<in> ns\\<rbrakk>\n       \\<Longrightarrow> (X, Y) \\<in> multpw ns\n 2. \\<And>a xs ys X Y.\n       \\<lbrakk>\\<And>ys X Y.\n                   \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                    \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                   \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n        length (a # xs) = length ys; X = mset (a # xs); Y = mset ys;\n        \\<forall>i<length ys. ((a # xs) ! i, ys ! i) \\<in> ns\\<rbrakk>\n       \\<Longrightarrow> (X, Y) \\<in> multpw ns", "then"], ["proof (chain)\npicking this:\n  length [] = length ys\n  X = mset []\n  Y = mset ys\n  \\<forall>i<length ys. ([] ! i, ys ! i) \\<in> ns", "show ?case"], ["proof (prove)\nusing this:\n  length [] = length ys\n  X = mset []\n  Y = mset ys\n  \\<forall>i<length ys. ([] ! i, ys ! i) \\<in> ns\n\ngoal (1 subgoal):\n 1. (X, Y) \\<in> multpw ns", "by (cases ys) (auto intro: multpw.intros)"], ["proof (state)\nthis:\n  (X, Y) \\<in> multpw ns\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys X Y.\n       \\<lbrakk>\\<And>ys X Y.\n                   \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                    \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                   \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n        length (a # xs) = length ys; X = mset (a # xs); Y = mset ys;\n        \\<forall>i<length ys. ((a # xs) ! i, ys ! i) \\<in> ns\\<rbrakk>\n       \\<Longrightarrow> (X, Y) \\<in> multpw ns", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys X Y.\n       \\<lbrakk>\\<And>ys X Y.\n                   \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                    \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                   \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n        length (a # xs) = length ys; X = mset (a # xs); Y = mset ys;\n        \\<forall>i<length ys. ((a # xs) ! i, ys ! i) \\<in> ns\\<rbrakk>\n       \\<Longrightarrow> (X, Y) \\<in> multpw ns", "case Cons1: (Cons x xs ys' X Y)"], ["proof (state)\nthis:\n  \\<lbrakk>length xs = length ?ys; ?X = mset xs; ?Y = mset ?ys;\n   \\<forall>i<length ?ys. (xs ! i, ?ys ! i) \\<in> ns\\<rbrakk>\n  \\<Longrightarrow> (?X, ?Y) \\<in> multpw ns\n  length (x # xs) = length ys'\n  X = mset (x # xs)\n  Y = mset ys'\n  \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys X Y.\n       \\<lbrakk>\\<And>ys X Y.\n                   \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                    \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                   \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n        length (a # xs) = length ys; X = mset (a # xs); Y = mset ys;\n        \\<forall>i<length ys. ((a # xs) ! i, ys ! i) \\<in> ns\\<rbrakk>\n       \\<Longrightarrow> (X, Y) \\<in> multpw ns", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>length xs = length ?ys; ?X = mset xs; ?Y = mset ?ys;\n   \\<forall>i<length ?ys. (xs ! i, ?ys ! i) \\<in> ns\\<rbrakk>\n  \\<Longrightarrow> (?X, ?Y) \\<in> multpw ns\n  length (x # xs) = length ys'\n  X = mset (x # xs)\n  Y = mset ys'\n  \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length xs = length ?ys; ?X = mset xs; ?Y = mset ?ys;\n   \\<forall>i<length ?ys. (xs ! i, ?ys ! i) \\<in> ns\\<rbrakk>\n  \\<Longrightarrow> (?X, ?Y) \\<in> multpw ns\n  length (x # xs) = length ys'\n  X = mset (x # xs)\n  Y = mset ys'\n  \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns\n\ngoal (1 subgoal):\n 1. (X, Y) \\<in> multpw ns", "proof (cases ys')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>ys X Y.\n                \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                 \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n     length (x # xs) = length ys'; X = mset (x # xs); Y = mset ys';\n     \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns;\n     ys' = []\\<rbrakk>\n    \\<Longrightarrow> (X, Y) \\<in> multpw ns\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>ys X Y.\n                   \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                    \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                   \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n        length (x # xs) = length ys'; X = mset (x # xs); Y = mset ys';\n        \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns;\n        ys' = a # list\\<rbrakk>\n       \\<Longrightarrow> (X, Y) \\<in> multpw ns", "case (Cons y ys)"], ["proof (state)\nthis:\n  ys' = y # ys\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>ys X Y.\n                \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                 \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n     length (x # xs) = length ys'; X = mset (x # xs); Y = mset ys';\n     \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns;\n     ys' = []\\<rbrakk>\n    \\<Longrightarrow> (X, Y) \\<in> multpw ns\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>ys X Y.\n                   \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                    \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                   \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n        length (x # xs) = length ys'; X = mset (x # xs); Y = mset ys';\n        \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns;\n        ys' = a # list\\<rbrakk>\n       \\<Longrightarrow> (X, Y) \\<in> multpw ns", "then"], ["proof (chain)\npicking this:\n  ys' = y # ys", "have \"\\<forall>i. i < length ys \\<longrightarrow> (xs ! i, ys ! i) \\<in> ns\""], ["proof (prove)\nusing this:\n  ys' = y # ys\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns", "using Cons1(5)"], ["proof (prove)\nusing this:\n  ys' = y # ys\n  \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>ys X Y.\n                \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                 \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n     length (x # xs) = length ys'; X = mset (x # xs); Y = mset ys';\n     \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns;\n     ys' = []\\<rbrakk>\n    \\<Longrightarrow> (X, Y) \\<in> multpw ns\n 2. \\<And>a list.\n       \\<lbrakk>\\<And>ys X Y.\n                   \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                    \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                   \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n        length (x # xs) = length ys'; X = mset (x # xs); Y = mset ys';\n        \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns;\n        ys' = a # list\\<rbrakk>\n       \\<Longrightarrow> (X, Y) \\<in> multpw ns", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\n\ngoal (1 subgoal):\n 1. (X, Y) \\<in> multpw ns", "using Cons1(2,5)"], ["proof (prove)\nusing this:\n  \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\n  length (x # xs) = length ys'\n  \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns\n\ngoal (1 subgoal):\n 1. (X, Y) \\<in> multpw ns", "by (auto intro!: multpw.intros simp: Cons(1) Cons1)"], ["proof (state)\nthis:\n  (X, Y) \\<in> multpw ns\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>ys X Y.\n                \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                 \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n                \\<Longrightarrow> (X, Y) \\<in> multpw ns;\n     length (x # xs) = length ys'; X = mset (x # xs); Y = mset ys';\n     \\<forall>i<length ys'. ((x # xs) ! i, ys' ! i) \\<in> ns;\n     ys' = []\\<rbrakk>\n    \\<Longrightarrow> (X, Y) \\<in> multpw ns", "qed auto"], ["proof (state)\nthis:\n  (X, Y) \\<in> multpw ns\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multpw_listE:\n  assumes \"(X, Y) \\<in> multpw ns\"\n  obtains xs ys where \"length xs = length ys\" \"X = mset xs\" \"Y = mset ys\"\n    \"\\<forall>i. i < length ys \\<longrightarrow> (xs ! i, ys ! i) \\<in> ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs ys.\n        \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n         \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (X, Y) \\<in> multpw ns\n\ngoal (1 subgoal):\n 1. (\\<And>xs ys.\n        \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n         \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (induct X Y arbitrary: thesis rule: multpw.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>xs ys.\n           \\<lbrakk>length xs = length ys; {#} = mset xs; {#} = mset ys;\n            \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>x y X Y thesis.\n       \\<lbrakk>(x, y) \\<in> ns; (X, Y) \\<in> multpw ns;\n        \\<And>thesis.\n           (\\<And>xs ys.\n               \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = length ys; add_mset x X = mset xs;\n            add_mset y Y = mset ys;\n            \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "case (add x y X Y)"], ["proof (state)\nthis:\n  (x, y) \\<in> ns\n  (X, Y) \\<in> multpw ns\n  (\\<And>xs ys.\n      \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n       \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>length ?xs = length ?ys; add_mset x X = mset ?xs;\n   add_mset y Y = mset ?ys;\n   \\<forall>i<length ?ys. (?xs ! i, ?ys ! i) \\<in> ns\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>xs ys.\n           \\<lbrakk>length xs = length ys; {#} = mset xs; {#} = mset ys;\n            \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>x y X Y thesis.\n       \\<lbrakk>(x, y) \\<in> ns; (X, Y) \\<in> multpw ns;\n        \\<And>thesis.\n           (\\<And>xs ys.\n               \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = length ys; add_mset x X = mset xs;\n            add_mset y Y = mset ys;\n            \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  (x, y) \\<in> ns\n  (X, Y) \\<in> multpw ns\n  (\\<And>xs ys.\n      \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n       \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>length ?xs = length ?ys; add_mset x X = mset ?xs;\n   add_mset y Y = mset ?ys;\n   \\<forall>i<length ?ys. (?xs ! i, ?ys ! i) \\<in> ns\\<rbrakk>\n  \\<Longrightarrow> thesis", "obtain xs ys where \"length xs = length ys\" \"X = mset xs\"\n    \"Y = mset ys\" \"(\\<forall>i. i < length ys \\<longrightarrow> (xs ! i, ys ! i) \\<in> ns)\""], ["proof (prove)\nusing this:\n  (x, y) \\<in> ns\n  (X, Y) \\<in> multpw ns\n  (\\<And>xs ys.\n      \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n       \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n  \\<lbrakk>length ?xs = length ?ys; add_mset x X = mset ?xs;\n   add_mset y Y = mset ?ys;\n   \\<forall>i<length ?ys. (?xs ! i, ?ys ! i) \\<in> ns\\<rbrakk>\n  \\<Longrightarrow> thesisa__\n\ngoal (1 subgoal):\n 1. (\\<And>xs ys.\n        \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n         \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  length xs = length ys\n  X = mset xs\n  Y = mset ys\n  \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\n\ngoal (2 subgoals):\n 1. \\<And>thesis.\n       (\\<And>xs ys.\n           \\<lbrakk>length xs = length ys; {#} = mset xs; {#} = mset ys;\n            \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis\n 2. \\<And>x y X Y thesis.\n       \\<lbrakk>(x, y) \\<in> ns; (X, Y) \\<in> multpw ns;\n        \\<And>thesis.\n           (\\<And>xs ys.\n               \\<lbrakk>length xs = length ys; X = mset xs; Y = mset ys;\n                \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n               \\<Longrightarrow> thesis) \\<Longrightarrow>\n           thesis;\n        \\<And>xs ys.\n           \\<lbrakk>length xs = length ys; add_mset x X = mset xs;\n            add_mset y Y = mset ys;\n            \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n           \\<Longrightarrow> thesis\\<rbrakk>\n       \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  length xs = length ys\n  X = mset xs\n  Y = mset ys\n  \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns", "show ?case"], ["proof (prove)\nusing this:\n  length xs = length ys\n  X = mset xs\n  Y = mset ys\n  \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\n\ngoal (1 subgoal):\n 1. thesis", "using add(1)"], ["proof (prove)\nusing this:\n  length xs = length ys\n  X = mset xs\n  Y = mset ys\n  \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\n  (x, y) \\<in> ns\n\ngoal (1 subgoal):\n 1. thesis", "by (intro add(4)[of \"x # xs\" \"y # ys\"]) (auto, case_tac i, auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>thesis.\n       (\\<And>xs ys.\n           \\<lbrakk>length xs = length ys; {#} = mset xs; {#} = mset ys;\n            \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> ns\\<rbrakk>\n           \\<Longrightarrow> thesis) \\<Longrightarrow>\n       thesis", "qed auto"], ["", "subsection\\<open>Definition of the multiset extension of $>$-orders\\<close>"], ["", "text\\<open>We define here the non-strict extension of the order pair $(\\geqslant, >)$ -- \n  usually written as (ns, s) in the sources --\n  by just flipping the directions twice.\\<close>"], ["", "definition ns_mul_ext :: \"'a rel \\<Rightarrow> 'a rel \\<Rightarrow> 'a multiset rel\"\n  where \"ns_mul_ext ns s \\<equiv> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\""], ["", "lemma ns_mul_extI:\n  assumes \"A = A1 + A2\" and \"B = B1 + B2\"\n    and \"(A1, B1) \\<in> multpw ns\"\n    and \"\\<And>b. b \\<in># B2 \\<Longrightarrow> \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\"\n  shows \"(A, B) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, B) \\<in> ns_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  A = A1 + A2\n  B = B1 + B2\n  (A1, B1) \\<in> multpw ns\n  ?b \\<in># B2 \\<Longrightarrow>\n  \\<exists>a. a \\<in># A2 \\<and> (a, ?b) \\<in> s\n\ngoal (1 subgoal):\n 1. (A, B) \\<in> ns_mul_ext ns s", "by (auto simp: ns_mul_ext_def multpw_converse intro!: mult2_alt_nsI)"], ["", "lemma ns_mul_extE:\n  assumes \"(A, B) \\<in> ns_mul_ext ns s\"\n  obtains A1 A2 B1 B2 where \"A = A1 + A2\" and \"B = B1 + B2\"\n    and \"(A1, B1) \\<in> multpw ns\"\n    and \"\\<And>b. b \\<in># B2 \\<Longrightarrow> \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A1 A2 B1 B2.\n        \\<lbrakk>A = A1 + A2; B = B1 + B2; (A1, B1) \\<in> multpw ns;\n         \\<And>b.\n            b \\<in># B2 \\<Longrightarrow>\n            \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (A, B) \\<in> ns_mul_ext ns s\n\ngoal (1 subgoal):\n 1. (\\<And>A1 A2 B1 B2.\n        \\<lbrakk>A = A1 + A2; B = B1 + B2; (A1, B1) \\<in> multpw ns;\n         \\<And>b.\n            b \\<in># B2 \\<Longrightarrow>\n            \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: ns_mul_ext_def multpw_converse elim!: mult2_alt_nsE)"], ["", "lemmas ns_mul_extI_old = ns_mul_extI[OF _ _ multpw_listI[OF _ refl refl], rule_format]"], ["", "text\\<open>Same for the \"greater than\" order on multisets.\\<close>"], ["", "definition s_mul_ext :: \"'a rel \\<Rightarrow> 'a rel \\<Rightarrow> 'a multiset rel\"\n  where \"s_mul_ext ns s \\<equiv> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\""], ["", "lemma s_mul_extI:\n  assumes \"A = A1 + A2\" and \"B = B1 + B2\"\n    and \"(A1, B1) \\<in> multpw ns\"\n    and \"A2 \\<noteq> {#}\" and \"\\<And>b. b \\<in># B2 \\<Longrightarrow> \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\"\n  shows \"(A, B) \\<in> s_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, B) \\<in> s_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  A = A1 + A2\n  B = B1 + B2\n  (A1, B1) \\<in> multpw ns\n  A2 \\<noteq> {#}\n  ?b \\<in># B2 \\<Longrightarrow>\n  \\<exists>a. a \\<in># A2 \\<and> (a, ?b) \\<in> s\n\ngoal (1 subgoal):\n 1. (A, B) \\<in> s_mul_ext ns s", "by (auto simp: s_mul_ext_def multpw_converse intro!: mult2_alt_sI)"], ["", "lemma s_mul_extE:\n  assumes \"(A, B) \\<in> s_mul_ext ns s\"\n  obtains A1 A2 B1 B2 where \"A = A1 + A2\" and \"B = B1 + B2\"\n    and \"(A1, B1) \\<in> multpw ns\"\n    and \"A2 \\<noteq> {#}\" and \"\\<And>b. b \\<in># B2 \\<Longrightarrow> \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A1 A2 B1 B2.\n        \\<lbrakk>A = A1 + A2; B = B1 + B2; (A1, B1) \\<in> multpw ns;\n         A2 \\<noteq> {#};\n         \\<And>b.\n            b \\<in># B2 \\<Longrightarrow>\n            \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (A, B) \\<in> s_mul_ext ns s\n\ngoal (1 subgoal):\n 1. (\\<And>A1 A2 B1 B2.\n        \\<lbrakk>A = A1 + A2; B = B1 + B2; (A1, B1) \\<in> multpw ns;\n         A2 \\<noteq> {#};\n         \\<And>b.\n            b \\<in># B2 \\<Longrightarrow>\n            \\<exists>a. a \\<in># A2 \\<and> (a, b) \\<in> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: s_mul_ext_def multpw_converse elim!: mult2_alt_sE)"], ["", "lemmas s_mul_extI_old = s_mul_extI[OF _ _ multpw_listI[OF _ refl refl], rule_format]"], ["", "subsection\\<open>Basic properties\\<close>"], ["", "lemma s_mul_ext_mono:\n  assumes \"ns \\<subseteq> ns'\" \"s \\<subseteq> s'\" shows \"s_mul_ext ns s \\<subseteq> s_mul_ext ns' s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s_mul_ext ns s \\<subseteq> s_mul_ext ns' s'", "unfolding s_mul_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n    \\<subseteq> (mult2_alt_s (ns'\\<inverse>) (s'\\<inverse>))\\<inverse>", "using assms mono_mult2_alt[of \"ns\\<inverse>\" \"ns'\\<inverse>\" \"s\\<inverse>\" \"s'\\<inverse>\"]"], ["proof (prove)\nusing this:\n  ns \\<subseteq> ns'\n  s \\<subseteq> s'\n  \\<lbrakk>ns\\<inverse> \\<subseteq> ns'\\<inverse>;\n   s\\<inverse> \\<subseteq> s'\\<inverse>\\<rbrakk>\n  \\<Longrightarrow> mult2_alt ?b (ns\\<inverse>) (s\\<inverse>)\n                    \\<subseteq> mult2_alt ?b (ns'\\<inverse>) (s'\\<inverse>)\n\ngoal (1 subgoal):\n 1. (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n    \\<subseteq> (mult2_alt_s (ns'\\<inverse>) (s'\\<inverse>))\\<inverse>", "by simp"], ["", "lemma ns_mul_ext_mono:\n  assumes \"ns \\<subseteq> ns'\" \"s \\<subseteq> s'\" shows \"ns_mul_ext ns s \\<subseteq> ns_mul_ext ns' s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns_mul_ext ns s \\<subseteq> ns_mul_ext ns' s'", "unfolding ns_mul_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n    \\<subseteq> (mult2_alt_ns (ns'\\<inverse>) (s'\\<inverse>))\\<inverse>", "using assms mono_mult2_alt[of \"ns\\<inverse>\" \"ns'\\<inverse>\" \"s\\<inverse>\" \"s'\\<inverse>\"]"], ["proof (prove)\nusing this:\n  ns \\<subseteq> ns'\n  s \\<subseteq> s'\n  \\<lbrakk>ns\\<inverse> \\<subseteq> ns'\\<inverse>;\n   s\\<inverse> \\<subseteq> s'\\<inverse>\\<rbrakk>\n  \\<Longrightarrow> mult2_alt ?b (ns\\<inverse>) (s\\<inverse>)\n                    \\<subseteq> mult2_alt ?b (ns'\\<inverse>) (s'\\<inverse>)\n\ngoal (1 subgoal):\n 1. (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n    \\<subseteq> (mult2_alt_ns (ns'\\<inverse>) (s'\\<inverse>))\\<inverse>", "by simp"], ["", "lemma s_mul_ext_local_mono:\n  assumes sub: \"(set_mset xs \\<times> set_mset ys) \\<inter> ns \\<subseteq> ns'\" \"(set_mset xs \\<times> set_mset ys) \\<inter> s \\<subseteq> s'\"\n    and rel: \"(xs,ys) \\<in> s_mul_ext ns s\"\n  shows \"(xs,ys) \\<in> s_mul_ext ns' s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, ys) \\<in> s_mul_ext ns' s'", "using rel s_mul_ext_mono[OF sub] mult2_alt_local[of ys xs False \"ns\\<inverse>\" \"s\\<inverse>\"]"], ["proof (prove)\nusing this:\n  (xs, ys) \\<in> s_mul_ext ns s\n  s_mul_ext (set_mset xs \\<times> set_mset ys \\<inter> ns)\n   (set_mset xs \\<times> set_mset ys \\<inter> s)\n  \\<subseteq> s_mul_ext ns' s'\n  (ys, xs) \\<in> mult2_alt_s (ns\\<inverse>) (s\\<inverse>) \\<Longrightarrow>\n  (ys, xs)\n  \\<in> mult2_alt_s (ns\\<inverse> \\<inter> set_mset ys \\<times> set_mset xs)\n         (s\\<inverse> \\<inter> set_mset ys \\<times> set_mset xs)\n\ngoal (1 subgoal):\n 1. (xs, ys) \\<in> s_mul_ext ns' s'", "by (auto simp: s_mul_ext_def converse_Int ac_simps converse_Times)"], ["", "lemma ns_mul_ext_local_mono:\n  assumes sub: \"(set_mset xs \\<times> set_mset ys) \\<inter> ns \\<subseteq> ns'\" \"(set_mset xs \\<times> set_mset ys) \\<inter> s \\<subseteq> s'\"\n    and rel: \"(xs,ys) \\<in> ns_mul_ext ns s\"\n  shows \"(xs,ys) \\<in> ns_mul_ext ns' s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs, ys) \\<in> ns_mul_ext ns' s'", "using rel ns_mul_ext_mono[OF sub] mult2_alt_local[of ys xs True \"ns\\<inverse>\" \"s\\<inverse>\"]"], ["proof (prove)\nusing this:\n  (xs, ys) \\<in> ns_mul_ext ns s\n  ns_mul_ext (set_mset xs \\<times> set_mset ys \\<inter> ns)\n   (set_mset xs \\<times> set_mset ys \\<inter> s)\n  \\<subseteq> ns_mul_ext ns' s'\n  (ys, xs) \\<in> mult2_alt_ns (ns\\<inverse>) (s\\<inverse>) \\<Longrightarrow>\n  (ys, xs)\n  \\<in> mult2_alt_ns\n         (ns\\<inverse> \\<inter> set_mset ys \\<times> set_mset xs)\n         (s\\<inverse> \\<inter> set_mset ys \\<times> set_mset xs)\n\ngoal (1 subgoal):\n 1. (xs, ys) \\<in> ns_mul_ext ns' s'", "by (auto simp: ns_mul_ext_def converse_Int ac_simps converse_Times)"], ["", "text\\<open>The empty multiset is the minimal element for these orders\\<close>"], ["", "lemma ns_mul_ext_bottom: \"(A,{#}) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, {#}) \\<in> ns_mul_ext ns s", "by (auto intro!: ns_mul_extI)"], ["", "lemma ns_mul_ext_bottom_uniqueness:\n  assumes \"({#},A) \\<in> ns_mul_ext ns s\"\n  shows \"A = {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = {#}", "using assms"], ["proof (prove)\nusing this:\n  ({#}, A) \\<in> ns_mul_ext ns s\n\ngoal (1 subgoal):\n 1. A = {#}", "by (auto simp: ns_mul_ext_def mult2_alt_ns_def)"], ["", "lemma ns_mul_ext_bottom2:\n  assumes \"(A,B) \\<in> ns_mul_ext ns s\"\n    and \"B \\<noteq> {#}\"\n  shows \"A \\<noteq> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {#}", "using assms"], ["proof (prove)\nusing this:\n  (A, B) \\<in> ns_mul_ext ns s\n  B \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. A \\<noteq> {#}", "by (auto simp: ns_mul_ext_def mult2_alt_ns_def)"], ["", "lemma s_mul_ext_bottom:\n  assumes \"A \\<noteq> {#}\"\n  shows \"(A,{#}) \\<in> s_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, {#}) \\<in> s_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. (A, {#}) \\<in> s_mul_ext ns s", "by (auto simp: s_mul_ext_def mult2_alt_s_def)"], ["", "lemma s_mul_ext_bottom_strict:\n  \"({#},A) \\<notin> s_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({#}, A) \\<notin> s_mul_ext ns s", "by (auto simp: s_mul_ext_def mult2_alt_s_def)"], ["", "text\\<open>Obvious introduction rules.\\<close>"], ["", "lemma all_ns_ns_mul_ext:\n  assumes \"length as = length bs\"\n    and \"\\<forall>i. i < length bs \\<longrightarrow> (as ! i, bs ! i) \\<in> ns\"\n  shows \"(mset as, mset bs) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mset as, mset bs) \\<in> ns_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  length as = length bs\n  \\<forall>i<length bs. (as ! i, bs ! i) \\<in> ns\n\ngoal (1 subgoal):\n 1. (mset as, mset bs) \\<in> ns_mul_ext ns s", "by (auto intro!: ns_mul_extI[of _ _ \"{#}\" _ _ \"{#}\"] multpw_listI)"], ["", "lemma all_s_s_mul_ext:\n  assumes \"A \\<noteq> {#}\"\n    and \"\\<forall>b. b \\<in># B \\<longrightarrow> (\\<exists>a. a \\<in># A \\<and> (a,b) \\<in> s)\"\n  shows \"(A, B) \\<in> s_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, B) \\<in> s_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> {#}\n  \\<forall>b.\n     b \\<in># B \\<longrightarrow>\n     (\\<exists>a. a \\<in># A \\<and> (a, b) \\<in> s)\n\ngoal (1 subgoal):\n 1. (A, B) \\<in> s_mul_ext ns s", "by (auto intro!: s_mul_extI[of _ \"{#}\" _ _ \"{#}\"] multpw_listI)"], ["", "text\\<open>Being stricly lesser than implies being lesser than\\<close>"], ["", "lemma s_ns_mul_ext:\n  assumes \"(A, B) \\<in> s_mul_ext ns s\"\n  shows \"(A, B) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, B) \\<in> ns_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  (A, B) \\<in> s_mul_ext ns s\n\ngoal (1 subgoal):\n 1. (A, B) \\<in> ns_mul_ext ns s", "by (simp add: s_mul_ext_def ns_mul_ext_def mult2_alt_s_implies_mult2_alt_ns)"], ["", "text\\<open>The non-strict order is reflexive.\\<close>"], ["", "lemma multpw_refl':\n  assumes \"locally_refl ns A\"\n  shows \"(A, A) \\<in> multpw ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, A) \\<in> multpw ns", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (A, A) \\<in> multpw ns", "have \"Restr Id (set_mset A) \\<subseteq> ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Restr Id (set_mset A) \\<subseteq> ns", "using assms"], ["proof (prove)\nusing this:\n  locally_refl ns A\n\ngoal (1 subgoal):\n 1. Restr Id (set_mset A) \\<subseteq> ns", "by (auto simp: locally_refl_def)"], ["proof (state)\nthis:\n  Restr Id (set_mset A) \\<subseteq> ns\n\ngoal (1 subgoal):\n 1. (A, A) \\<in> multpw ns", "from refl_multpw[of Id] multpw_local[of A A Id] mono_multpw[OF this]"], ["proof (chain)\npicking this:\n  refl Id \\<Longrightarrow> refl (multpw Id)\n  (A, A) \\<in> multpw Id \\<Longrightarrow>\n  (A, A) \\<in> multpw (Restr Id (set_mset A))\n  multpw (Restr Id (set_mset A)) \\<subseteq> multpw ns", "show ?thesis"], ["proof (prove)\nusing this:\n  refl Id \\<Longrightarrow> refl (multpw Id)\n  (A, A) \\<in> multpw Id \\<Longrightarrow>\n  (A, A) \\<in> multpw (Restr Id (set_mset A))\n  multpw (Restr Id (set_mset A)) \\<subseteq> multpw ns\n\ngoal (1 subgoal):\n 1. (A, A) \\<in> multpw ns", "by (auto simp: refl_on_def)"], ["proof (state)\nthis:\n  (A, A) \\<in> multpw ns\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ns_mul_ext_refl_local:\n  assumes \"locally_refl ns A\"\n  shows \"(A, A) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, A) \\<in> ns_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  locally_refl ns A\n\ngoal (1 subgoal):\n 1. (A, A) \\<in> ns_mul_ext ns s", "by (auto intro!:  ns_mul_extI[of A A \"{#}\" A A \"{#}\" ns s] multpw_refl')"], ["", "lemma ns_mul_ext_refl:\n  assumes \"refl ns\"\n  shows \"(A, A) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, A) \\<in> ns_mul_ext ns s", "using assms ns_mul_ext_refl_local[of ns A s]"], ["proof (prove)\nusing this:\n  refl ns\n  locally_refl ns A \\<Longrightarrow> (A, A) \\<in> ns_mul_ext ns s\n\ngoal (1 subgoal):\n 1. (A, A) \\<in> ns_mul_ext ns s", "unfolding refl_on_def locally_refl_def"], ["proof (prove)\nusing this:\n  ns \\<subseteq> UNIV \\<times> UNIV \\<and>\n  (\\<forall>x\\<in>UNIV. (x, x) \\<in> ns)\n  \\<forall>a. a \\<in># A \\<longrightarrow> (a, a) \\<in> ns \\<Longrightarrow>\n  (A, A) \\<in> ns_mul_ext ns s\n\ngoal (1 subgoal):\n 1. (A, A) \\<in> ns_mul_ext ns s", "by auto"], ["", "text\\<open>The orders are union-compatible\\<close>"], ["", "lemma ns_s_mul_ext_union_multiset_l:\n  assumes \"(A, B) \\<in> ns_mul_ext ns s\"\n    and \"C \\<noteq> {#}\"\n    and \"\\<forall>d. d \\<in># D \\<longrightarrow> (\\<exists>c. c \\<in># C \\<and> (c,d) \\<in> s)\"\n  shows \"(A + C, B + D) \\<in> s_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> s_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  (A, B) \\<in> ns_mul_ext ns s\n  C \\<noteq> {#}\n  \\<forall>d.\n     d \\<in># D \\<longrightarrow>\n     (\\<exists>c. c \\<in># C \\<and> (c, d) \\<in> s)\n\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> s_mul_ext ns s", "unfolding ns_mul_ext_def s_mul_ext_def"], ["proof (prove)\nusing this:\n  (A, B) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  C \\<noteq> {#}\n  \\<forall>d.\n     d \\<in># D \\<longrightarrow>\n     (\\<exists>c. c \\<in># C \\<and> (c, d) \\<in> s)\n\ngoal (1 subgoal):\n 1. (A + C, B + D)\n    \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>", "by (auto intro!: converseI mult2_alt_ns_s_add mult2_alt_sI[of _ \"{#}\" _ _ \"{#}\"])"], ["", "lemma s_mul_ext_union_compat:\n  assumes \"(A, B) \\<in> s_mul_ext ns s\"\n    and \"locally_refl ns C\"\n  shows \"(A + C, B + C) \\<in> s_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + C, B + C) \\<in> s_mul_ext ns s", "using assms ns_mul_ext_refl_local[OF assms(2)]"], ["proof (prove)\nusing this:\n  (A, B) \\<in> s_mul_ext ns s\n  locally_refl ns C\n  (C, C) \\<in> ns_mul_ext ns ?s\n\ngoal (1 subgoal):\n 1. (A + C, B + C) \\<in> s_mul_ext ns s", "unfolding ns_mul_ext_def s_mul_ext_def"], ["proof (prove)\nusing this:\n  (A, B) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  locally_refl ns C\n  (C, C) \\<in> (mult2_alt_ns (ns\\<inverse>) (?s\\<inverse>))\\<inverse>\n\ngoal (1 subgoal):\n 1. (A + C, B + C)\n    \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>", "by (auto intro!: converseI mult2_alt_s_ns_add)"], ["", "lemma ns_mul_ext_union_compat:\n  assumes \"(A, B) \\<in> ns_mul_ext ns s\"\n    and \"locally_refl ns C\"\n  shows \"(A + C, B + C) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + C, B + C) \\<in> ns_mul_ext ns s", "using assms ns_mul_ext_refl_local[OF assms(2)]"], ["proof (prove)\nusing this:\n  (A, B) \\<in> ns_mul_ext ns s\n  locally_refl ns C\n  (C, C) \\<in> ns_mul_ext ns ?s\n\ngoal (1 subgoal):\n 1. (A + C, B + C) \\<in> ns_mul_ext ns s", "unfolding ns_mul_ext_def s_mul_ext_def"], ["proof (prove)\nusing this:\n  (A, B) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  locally_refl ns C\n  (C, C) \\<in> (mult2_alt_ns (ns\\<inverse>) (?s\\<inverse>))\\<inverse>\n\ngoal (1 subgoal):\n 1. (A + C, B + C)\n    \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>", "by (auto intro!: converseI mult2_alt_ns_ns_add)"], ["", "context\n  fixes NS :: \"'a rel\"\n  assumes NS: \"refl NS\"\nbegin"], ["", "lemma refl_imp_locally_refl: \"locally_refl NS A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. locally_refl NS A", "using NS"], ["proof (prove)\nusing this:\n  refl NS\n\ngoal (1 subgoal):\n 1. locally_refl NS A", "unfolding refl_on_def locally_refl_def"], ["proof (prove)\nusing this:\n  NS \\<subseteq> UNIV \\<times> UNIV \\<and>\n  (\\<forall>x\\<in>UNIV. (x, x) \\<in> NS)\n\ngoal (1 subgoal):\n 1. \\<forall>a. a \\<in># A \\<longrightarrow> (a, a) \\<in> NS", "by auto"], ["", "lemma supseteq_imp_ns_mul_ext:\n  assumes \"A \\<supseteq># B\"\n  shows \"(A, B) \\<in> ns_mul_ext NS S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, B) \\<in> ns_mul_ext NS S", "using assms"], ["proof (prove)\nusing this:\n  B \\<subseteq># A\n\ngoal (1 subgoal):\n 1. (A, B) \\<in> ns_mul_ext NS S", "by (auto intro!: ns_mul_extI[of A B \"A - B\" B B \"{#}\"] multpw_refl' refl_imp_locally_refl\n      simp: subset_mset.add_diff_inverse)"], ["", "lemma supset_imp_s_mul_ext:\n  assumes \"A \\<supset># B\"\n  shows \"(A, B) \\<in> s_mul_ext NS S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, B) \\<in> s_mul_ext NS S", "using assms subset_mset.add_diff_inverse[of B A]"], ["proof (prove)\nusing this:\n  B \\<subset># A\n  B \\<subseteq># A \\<Longrightarrow> B + (A - B) = A\n\ngoal (1 subgoal):\n 1. (A, B) \\<in> s_mul_ext NS S", "by (auto intro!: s_mul_extI[of A B \"A - B\" B B \"{#}\"] multpw_refl' refl_imp_locally_refl\n      simp: Diff_eq_empty_iff_mset subset_mset.order.strict_iff_order)"], ["", "end"], ["", "definition mul_ext :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool \\<times> bool) \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool \\<times> bool\"\n  where \"mul_ext f xs ys \\<equiv> let s = {(x,y). fst (f x y)}; ns = {(x,y). snd (f x y)}\n    in ((mset xs,mset ys) \\<in> s_mul_ext ns s, (mset xs, mset ys) \\<in> ns_mul_ext ns s)\""], ["", "definition \"smulextp f m n \\<longleftrightarrow> (m, n) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}\""], ["", "definition \"nsmulextp f m n \\<longleftrightarrow> (m, n) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}\""], ["", "lemma smulextp_cong[fundef_cong]:\n  assumes \"xs1 = ys1\"\n    and \"xs2 = ys2\"\n    and \"\\<And> x x'. x \\<in># ys1 \\<Longrightarrow> x' \\<in># ys2 \\<Longrightarrow> f x x' = g x x'\"\n  shows \"smulextp f xs1 xs2 = smulextp g ys1 ys2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smulextp f xs1 xs2 = smulextp g ys1 ys2", "unfolding smulextp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((xs1, xs2)\n     \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}) =\n    ((ys1, ys2) \\<in> s_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (xs1, xs2)\n    \\<in> s_mul_ext {(x, y). snd (f x y)}\n           {(x, y). fst (f x y)} \\<Longrightarrow>\n    (ys1, ys2) \\<in> s_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\n 2. (ys1, ys2)\n    \\<in> s_mul_ext {(x, y). snd (g x y)}\n           {(x, y). fst (g x y)} \\<Longrightarrow>\n    (xs1, xs2) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "assume \"(xs1, xs2) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}\""], ["proof (state)\nthis:\n  (xs1, xs2) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}\n\ngoal (2 subgoals):\n 1. (xs1, xs2)\n    \\<in> s_mul_ext {(x, y). snd (f x y)}\n           {(x, y). fst (f x y)} \\<Longrightarrow>\n    (ys1, ys2) \\<in> s_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\n 2. (ys1, ys2)\n    \\<in> s_mul_ext {(x, y). snd (g x y)}\n           {(x, y). fst (g x y)} \\<Longrightarrow>\n    (xs1, xs2) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "from s_mul_ext_local_mono[OF _ _ this, of \"{(x, y). snd (g x y)}\" \"{(x, y). fst (g x y)}\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). snd (f x y)}\n           \\<subseteq> {(x, y). snd (g x y)};\n   set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). fst (f x y)}\n   \\<subseteq> {(x, y). fst (g x y)}\\<rbrakk>\n  \\<Longrightarrow> (xs1, xs2)\n                    \\<in> s_mul_ext {(x, y). snd (g x y)}\n                           {(x, y). fst (g x y)}", "show \"(ys1, ys2) \\<in> s_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). snd (f x y)}\n           \\<subseteq> {(x, y). snd (g x y)};\n   set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). fst (f x y)}\n   \\<subseteq> {(x, y). fst (g x y)}\\<rbrakk>\n  \\<Longrightarrow> (xs1, xs2)\n                    \\<in> s_mul_ext {(x, y). snd (g x y)}\n                           {(x, y). fst (g x y)}\n\ngoal (1 subgoal):\n 1. (ys1, ys2) \\<in> s_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). snd (f x y)}\n           \\<subseteq> {(x, y). snd (g x y)};\n   set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). fst (f x y)}\n   \\<subseteq> {(x, y). fst (g x y)}\\<rbrakk>\n  \\<Longrightarrow> (xs1, xs2)\n                    \\<in> s_mul_ext {(x, y). snd (g x y)}\n                           {(x, y). fst (g x y)}\n  xs1 = ys1\n  xs2 = ys2\n  \\<lbrakk>?x \\<in># ys1; ?x' \\<in># ys2\\<rbrakk>\n  \\<Longrightarrow> f ?x ?x' = g ?x ?x'\n\ngoal (1 subgoal):\n 1. (ys1, ys2) \\<in> s_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}", "by force"], ["proof (state)\nthis:\n  (ys1, ys2) \\<in> s_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\n\ngoal (1 subgoal):\n 1. (ys1, ys2)\n    \\<in> s_mul_ext {(x, y). snd (g x y)}\n           {(x, y). fst (g x y)} \\<Longrightarrow>\n    (xs1, xs2) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (ys1, ys2)\n    \\<in> s_mul_ext {(x, y). snd (g x y)}\n           {(x, y). fst (g x y)} \\<Longrightarrow>\n    (xs1, xs2) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "assume \"(ys1, ys2) \\<in> s_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\""], ["proof (state)\nthis:\n  (ys1, ys2) \\<in> s_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\n\ngoal (1 subgoal):\n 1. (ys1, ys2)\n    \\<in> s_mul_ext {(x, y). snd (g x y)}\n           {(x, y). fst (g x y)} \\<Longrightarrow>\n    (xs1, xs2) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "from s_mul_ext_local_mono[OF _ _ this, of \"{(x, y). snd (f x y)}\" \"{(x, y). fst (f x y)}\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). snd (g x y)}\n           \\<subseteq> {(x, y). snd (f x y)};\n   set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). fst (g x y)}\n   \\<subseteq> {(x, y). fst (f x y)}\\<rbrakk>\n  \\<Longrightarrow> (ys1, ys2)\n                    \\<in> s_mul_ext {(x, y). snd (f x y)}\n                           {(x, y). fst (f x y)}", "show \"(xs1, xs2) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). snd (g x y)}\n           \\<subseteq> {(x, y). snd (f x y)};\n   set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). fst (g x y)}\n   \\<subseteq> {(x, y). fst (f x y)}\\<rbrakk>\n  \\<Longrightarrow> (ys1, ys2)\n                    \\<in> s_mul_ext {(x, y). snd (f x y)}\n                           {(x, y). fst (f x y)}\n\ngoal (1 subgoal):\n 1. (xs1, xs2) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). snd (g x y)}\n           \\<subseteq> {(x, y). snd (f x y)};\n   set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). fst (g x y)}\n   \\<subseteq> {(x, y). fst (f x y)}\\<rbrakk>\n  \\<Longrightarrow> (ys1, ys2)\n                    \\<in> s_mul_ext {(x, y). snd (f x y)}\n                           {(x, y). fst (f x y)}\n  xs1 = ys1\n  xs2 = ys2\n  \\<lbrakk>?x \\<in># ys1; ?x' \\<in># ys2\\<rbrakk>\n  \\<Longrightarrow> f ?x ?x' = g ?x ?x'\n\ngoal (1 subgoal):\n 1. (xs1, xs2) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "by force"], ["proof (state)\nthis:\n  (xs1, xs2) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nsmulextp_cong[fundef_cong]:\n  assumes \"xs1 = ys1\"\n    and \"xs2 = ys2\"\n    and \"\\<And> x x'. x \\<in># ys1 \\<Longrightarrow> x' \\<in># ys2 \\<Longrightarrow> f x x' = g x x'\"\n  shows \"nsmulextp f xs1 xs2 = nsmulextp g ys1 ys2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nsmulextp f xs1 xs2 = nsmulextp g ys1 ys2", "unfolding nsmulextp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((xs1, xs2)\n     \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}) =\n    ((ys1, ys2)\n     \\<in> ns_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)})", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (xs1, xs2)\n    \\<in> ns_mul_ext {(x, y). snd (f x y)}\n           {(x, y). fst (f x y)} \\<Longrightarrow>\n    (ys1, ys2) \\<in> ns_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\n 2. (ys1, ys2)\n    \\<in> ns_mul_ext {(x, y). snd (g x y)}\n           {(x, y). fst (g x y)} \\<Longrightarrow>\n    (xs1, xs2) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "assume \"(xs1, xs2) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}\""], ["proof (state)\nthis:\n  (xs1, xs2) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}\n\ngoal (2 subgoals):\n 1. (xs1, xs2)\n    \\<in> ns_mul_ext {(x, y). snd (f x y)}\n           {(x, y). fst (f x y)} \\<Longrightarrow>\n    (ys1, ys2) \\<in> ns_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\n 2. (ys1, ys2)\n    \\<in> ns_mul_ext {(x, y). snd (g x y)}\n           {(x, y). fst (g x y)} \\<Longrightarrow>\n    (xs1, xs2) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "from ns_mul_ext_local_mono[OF _ _ this, of \"{(x, y). snd (g x y)}\" \"{(x, y). fst (g x y)}\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). snd (f x y)}\n           \\<subseteq> {(x, y). snd (g x y)};\n   set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). fst (f x y)}\n   \\<subseteq> {(x, y). fst (g x y)}\\<rbrakk>\n  \\<Longrightarrow> (xs1, xs2)\n                    \\<in> ns_mul_ext {(x, y). snd (g x y)}\n                           {(x, y). fst (g x y)}", "show \"(ys1, ys2) \\<in> ns_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). snd (f x y)}\n           \\<subseteq> {(x, y). snd (g x y)};\n   set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). fst (f x y)}\n   \\<subseteq> {(x, y). fst (g x y)}\\<rbrakk>\n  \\<Longrightarrow> (xs1, xs2)\n                    \\<in> ns_mul_ext {(x, y). snd (g x y)}\n                           {(x, y). fst (g x y)}\n\ngoal (1 subgoal):\n 1. (ys1, ys2) \\<in> ns_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). snd (f x y)}\n           \\<subseteq> {(x, y). snd (g x y)};\n   set_mset xs1 \\<times> set_mset xs2 \\<inter> {(x, y). fst (f x y)}\n   \\<subseteq> {(x, y). fst (g x y)}\\<rbrakk>\n  \\<Longrightarrow> (xs1, xs2)\n                    \\<in> ns_mul_ext {(x, y). snd (g x y)}\n                           {(x, y). fst (g x y)}\n  xs1 = ys1\n  xs2 = ys2\n  \\<lbrakk>?x \\<in># ys1; ?x' \\<in># ys2\\<rbrakk>\n  \\<Longrightarrow> f ?x ?x' = g ?x ?x'\n\ngoal (1 subgoal):\n 1. (ys1, ys2) \\<in> ns_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}", "by force"], ["proof (state)\nthis:\n  (ys1, ys2) \\<in> ns_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\n\ngoal (1 subgoal):\n 1. (ys1, ys2)\n    \\<in> ns_mul_ext {(x, y). snd (g x y)}\n           {(x, y). fst (g x y)} \\<Longrightarrow>\n    (xs1, xs2) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (ys1, ys2)\n    \\<in> ns_mul_ext {(x, y). snd (g x y)}\n           {(x, y). fst (g x y)} \\<Longrightarrow>\n    (xs1, xs2) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "assume \"(ys1, ys2) \\<in> ns_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\""], ["proof (state)\nthis:\n  (ys1, ys2) \\<in> ns_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}\n\ngoal (1 subgoal):\n 1. (ys1, ys2)\n    \\<in> ns_mul_ext {(x, y). snd (g x y)}\n           {(x, y). fst (g x y)} \\<Longrightarrow>\n    (xs1, xs2) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "from ns_mul_ext_local_mono[OF _ _ this, of \"{(x, y). snd (f x y)}\" \"{(x, y). fst (f x y)}\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). snd (g x y)}\n           \\<subseteq> {(x, y). snd (f x y)};\n   set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). fst (g x y)}\n   \\<subseteq> {(x, y). fst (f x y)}\\<rbrakk>\n  \\<Longrightarrow> (ys1, ys2)\n                    \\<in> ns_mul_ext {(x, y). snd (f x y)}\n                           {(x, y). fst (f x y)}", "show \"(xs1, xs2) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). snd (g x y)}\n           \\<subseteq> {(x, y). snd (f x y)};\n   set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). fst (g x y)}\n   \\<subseteq> {(x, y). fst (f x y)}\\<rbrakk>\n  \\<Longrightarrow> (ys1, ys2)\n                    \\<in> ns_mul_ext {(x, y). snd (f x y)}\n                           {(x, y). fst (f x y)}\n\ngoal (1 subgoal):\n 1. (xs1, xs2) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). snd (g x y)}\n           \\<subseteq> {(x, y). snd (f x y)};\n   set_mset ys1 \\<times> set_mset ys2 \\<inter> {(x, y). fst (g x y)}\n   \\<subseteq> {(x, y). fst (f x y)}\\<rbrakk>\n  \\<Longrightarrow> (ys1, ys2)\n                    \\<in> ns_mul_ext {(x, y). snd (f x y)}\n                           {(x, y). fst (f x y)}\n  xs1 = ys1\n  xs2 = ys2\n  \\<lbrakk>?x \\<in># ys1; ?x' \\<in># ys2\\<rbrakk>\n  \\<Longrightarrow> f ?x ?x' = g ?x ?x'\n\ngoal (1 subgoal):\n 1. (xs1, xs2) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}", "by force"], ["proof (state)\nthis:\n  (xs1, xs2) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"mulextp f m n = (smulextp f m n, nsmulextp f m n)\""], ["", "lemma mulextp_cong[fundef_cong]:\n  assumes \"xs1 = ys1\"\n    and \"xs2 = ys2\"\n    and \"\\<And> x x'. x \\<in># ys1 \\<Longrightarrow> x' \\<in># ys2 \\<Longrightarrow> f x x' = g x x'\"\n  shows \"mulextp f xs1 xs2 = mulextp g ys1 ys2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mulextp f xs1 xs2 = mulextp g ys1 ys2", "unfolding mulextp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (smulextp f xs1 xs2, nsmulextp f xs1 xs2) =\n    (smulextp g ys1 ys2, nsmulextp g ys1 ys2)", "using assms"], ["proof (prove)\nusing this:\n  xs1 = ys1\n  xs2 = ys2\n  \\<lbrakk>?x \\<in># ys1; ?x' \\<in># ys2\\<rbrakk>\n  \\<Longrightarrow> f ?x ?x' = g ?x ?x'\n\ngoal (1 subgoal):\n 1. (smulextp f xs1 xs2, nsmulextp f xs1 xs2) =\n    (smulextp g ys1 ys2, nsmulextp g ys1 ys2)", "by (auto cong: nsmulextp_cong smulextp_cong)"], ["", "lemma mset_s_mul_ext:\n  \"(mset xs, mset ys) \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y).fst (f x y)} \\<longleftrightarrow>\n    fst (mul_ext f xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((mset xs, mset ys)\n     \\<in> s_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}) =\n    fst (mul_ext f xs ys)", "by (auto simp: mul_ext_def Let_def)"], ["", "lemma mset_ns_mul_ext:\n  \"(mset xs, mset ys) \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y).fst (f x y)} \\<longleftrightarrow>\n    snd (mul_ext f xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((mset xs, mset ys)\n     \\<in> ns_mul_ext {(x, y). snd (f x y)} {(x, y). fst (f x y)}) =\n    snd (mul_ext f xs ys)", "by (auto simp: mul_ext_def Let_def)"], ["", "lemma smulextp_mset_code:\n  \"smulextp f (mset xs) (mset ys) \\<longleftrightarrow> fst (mul_ext f xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smulextp f (mset xs) (mset ys) = fst (mul_ext f xs ys)", "unfolding smulextp_def mset_s_mul_ext"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (mul_ext f xs ys) = fst (mul_ext f xs ys)", ".."], ["", "lemma nsmulextp_mset_code:\n  \"nsmulextp f (mset xs) (mset ys) \\<longleftrightarrow> snd (mul_ext f xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nsmulextp f (mset xs) (mset ys) = snd (mul_ext f xs ys)", "unfolding nsmulextp_def mset_ns_mul_ext"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (mul_ext f xs ys) = snd (mul_ext f xs ys)", ".."], ["", "lemma nstri_mul_ext_map:\n  assumes \"\\<And>s t. s \\<in> set ss \\<Longrightarrow> t \\<in> set ts \\<Longrightarrow> fst (order s t) \\<Longrightarrow> fst (order' (f s) (f t))\"\n    and \"\\<And>s t. s \\<in> set ss \\<Longrightarrow> t \\<in> set ts \\<Longrightarrow> snd (order s t) \\<Longrightarrow> snd (order' (f s) (f t))\"\n    and \"snd (mul_ext order ss ts)\"\n  shows \"snd (mul_ext order' (map f ss) (map f ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (mul_ext order' (map f ss) (map f ts))", "using assms mult2_alt_map[of \"mset ts\" \"mset ss\" \"{(t, s). snd (order s t)}\" f f\n      \"{(t, s). snd (order' s t)}\" \"{(t, s). fst (order s t)}\" \"{(t, s). fst (order' s t)}\" True]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<in> set ss; ?t \\<in> set ts; fst (order ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> fst (order' (f ?s) (f ?t))\n  \\<lbrakk>?s \\<in> set ss; ?t \\<in> set ts; snd (order ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> snd (order' (f ?s) (f ?t))\n  snd (mul_ext order ss ts)\n  \\<lbrakk>\\<And>x y.\n              \\<lbrakk>x \\<in># mset ts; y \\<in># mset ss;\n               (x, y) \\<in> {(t, s). snd (order s t)}\\<rbrakk>\n              \\<Longrightarrow> (f x, f y) \\<in> {(t, s). snd (order' s t)};\n   \\<And>x y.\n      \\<lbrakk>x \\<in># mset ts; y \\<in># mset ss;\n       (x, y) \\<in> {(t, s). fst (order s t)}\\<rbrakk>\n      \\<Longrightarrow> (f x, f y) \\<in> {(t, s). fst (order' s t)};\n   (mset ts, mset ss)\n   \\<in> mult2_alt_ns {(t, s). snd (order s t)}\n          {(t, s). fst (order s t)}\\<rbrakk>\n  \\<Longrightarrow> (image_mset f (mset ts), image_mset f (mset ss))\n                    \\<in> mult2_alt_ns {(t, s). snd (order' s t)}\n                           {(t, s). fst (order' s t)}\n\ngoal (1 subgoal):\n 1. snd (mul_ext order' (map f ss) (map f ts))", "by (auto simp: mul_ext_def ns_mul_ext_def converse_unfold)"], ["", "lemma stri_mul_ext_map:\n  assumes \"\\<And>s t. s \\<in> set ss \\<Longrightarrow> t \\<in> set ts \\<Longrightarrow> fst (order s t) \\<Longrightarrow> fst (order' (f s) (f t))\"\n    and \"\\<And>s t. s \\<in> set ss \\<Longrightarrow> t \\<in> set ts \\<Longrightarrow> snd (order s t) \\<Longrightarrow> snd (order' (f s) (f t))\"\n    and \"fst (mul_ext order ss ts)\"\n  shows \"fst (mul_ext order' (map f ss) (map f ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (mul_ext order' (map f ss) (map f ts))", "using assms mult2_alt_map[of \"mset ts\" \"mset ss\" \"{(t,s). snd (order s t)}\" f f\n      \"{(t, s). snd (order' s t)}\" \"{(t, s). fst (order s t)}\" \"{(t, s). fst (order' s t)}\" False]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<in> set ss; ?t \\<in> set ts; fst (order ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> fst (order' (f ?s) (f ?t))\n  \\<lbrakk>?s \\<in> set ss; ?t \\<in> set ts; snd (order ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> snd (order' (f ?s) (f ?t))\n  fst (mul_ext order ss ts)\n  \\<lbrakk>\\<And>x y.\n              \\<lbrakk>x \\<in># mset ts; y \\<in># mset ss;\n               (x, y) \\<in> {(t, s). snd (order s t)}\\<rbrakk>\n              \\<Longrightarrow> (f x, f y) \\<in> {(t, s). snd (order' s t)};\n   \\<And>x y.\n      \\<lbrakk>x \\<in># mset ts; y \\<in># mset ss;\n       (x, y) \\<in> {(t, s). fst (order s t)}\\<rbrakk>\n      \\<Longrightarrow> (f x, f y) \\<in> {(t, s). fst (order' s t)};\n   (mset ts, mset ss)\n   \\<in> mult2_alt_s {(t, s). snd (order s t)}\n          {(t, s). fst (order s t)}\\<rbrakk>\n  \\<Longrightarrow> (image_mset f (mset ts), image_mset f (mset ss))\n                    \\<in> mult2_alt_s {(t, s). snd (order' s t)}\n                           {(t, s). fst (order' s t)}\n\ngoal (1 subgoal):\n 1. fst (mul_ext order' (map f ss) (map f ts))", "by (auto simp: mul_ext_def s_mul_ext_def converse_unfold)"], ["", "text \\<open>The non-strict order is transitive.\\<close>"], ["", "lemma ns_mul_ext_trans:\n  assumes \"trans s\" \"trans ns\" \"compatible_l ns s\" \"compatible_r ns s\" \"refl ns\"\n    and \"(A, B) \\<in> ns_mul_ext ns s\"\n    and \"(B, C) \\<in> ns_mul_ext ns s\"\n  shows \"(A, C) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, C) \\<in> ns_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  compatible_l ns s\n  compatible_r ns s\n  refl ns\n  (A, B) \\<in> ns_mul_ext ns s\n  (B, C) \\<in> ns_mul_ext ns s\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> ns_mul_ext ns s", "unfolding compatible_l_def compatible_r_def ns_mul_ext_def"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  ns O s \\<subseteq> s\n  s O ns \\<subseteq> s\n  refl ns\n  (A, B) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  (B, C) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>", "using trans_mult2_ns[of \"s\\<inverse>\" \"ns\\<inverse>\"]"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  ns O s \\<subseteq> s\n  s O ns \\<subseteq> s\n  refl ns\n  (A, B) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  (B, C) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  \\<lbrakk>s\\<inverse> O ns\\<inverse> \\<subseteq> s\\<inverse>;\n   refl (ns\\<inverse>); trans (ns\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> trans (mult2_ns (ns\\<inverse>) (s\\<inverse>))\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>", "by (auto simp: mult2_ns_eq_mult2_ns_alt converse_relcomp[symmetric]) (metis trans_def)"], ["", "text\\<open>The strict order is trans.\\<close>"], ["", "lemma s_mul_ext_trans:\n  assumes \"trans s\" \"trans ns\" \"compatible_l ns s\" \"compatible_r ns s\" \"refl ns\"\n    and \"(A, B) \\<in> s_mul_ext ns s\"\n    and \"(B, C) \\<in> s_mul_ext ns s\"\n  shows \"(A, C) \\<in> s_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, C) \\<in> s_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  compatible_l ns s\n  compatible_r ns s\n  refl ns\n  (A, B) \\<in> s_mul_ext ns s\n  (B, C) \\<in> s_mul_ext ns s\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> s_mul_ext ns s", "unfolding compatible_l_def compatible_r_def s_mul_ext_def"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  ns O s \\<subseteq> s\n  s O ns \\<subseteq> s\n  refl ns\n  (A, B) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  (B, C) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>", "using trans_mult2_s[of \"s\\<inverse>\" \"ns\\<inverse>\"]"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  ns O s \\<subseteq> s\n  s O ns \\<subseteq> s\n  refl ns\n  (A, B) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  (B, C) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  \\<lbrakk>s\\<inverse> O ns\\<inverse> \\<subseteq> s\\<inverse>;\n   refl (ns\\<inverse>); trans (ns\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> trans (mult2_s (ns\\<inverse>) (s\\<inverse>))\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>", "by (auto simp: mult2_s_eq_mult2_s_alt converse_relcomp[symmetric]) (metis trans_def)"], ["", "text\\<open>The strict order is compatible on the left with the non strict one\\<close>"], ["", "lemma s_ns_mul_ext_trans:\n  assumes \"trans s\" \"trans ns\" \"compatible_l ns s\" \"compatible_r ns s\" \"refl ns\"\n    and \"(A, B) \\<in> s_mul_ext ns s\"\n    and \"(B, C) \\<in> ns_mul_ext ns s\"\n  shows \"(A, C) \\<in> s_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, C) \\<in> s_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  compatible_l ns s\n  compatible_r ns s\n  refl ns\n  (A, B) \\<in> s_mul_ext ns s\n  (B, C) \\<in> ns_mul_ext ns s\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> s_mul_ext ns s", "unfolding compatible_l_def compatible_r_def s_mul_ext_def ns_mul_ext_def"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  ns O s \\<subseteq> s\n  s O ns \\<subseteq> s\n  refl ns\n  (A, B) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  (B, C) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>", "using compat_mult2(1)[of \"s\\<inverse>\" \"ns\\<inverse>\"]"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  ns O s \\<subseteq> s\n  s O ns \\<subseteq> s\n  refl ns\n  (A, B) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  (B, C) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  \\<lbrakk>s\\<inverse> O ns\\<inverse> \\<subseteq> s\\<inverse>;\n   refl (ns\\<inverse>); trans (ns\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> mult2_ns (ns\\<inverse>) (s\\<inverse>) O\n                    mult2_s (ns\\<inverse>) (s\\<inverse>)\n                    \\<subseteq> mult2_s (ns\\<inverse>) (s\\<inverse>)\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>", "by (auto simp: mult2_s_eq_mult2_s_alt mult2_ns_eq_mult2_ns_alt converse_relcomp[symmetric])"], ["", "text\\<open>The strict order is compatible on the right with the non-strict one.\\<close>"], ["", "lemma ns_s_mul_ext_trans:\n  assumes \"trans s\" \"trans ns\" \"compatible_l ns s\" \"compatible_r ns s\" \"refl ns\"\n    and \"(A, B) \\<in> ns_mul_ext ns s\"\n    and \"(B, C) \\<in> s_mul_ext ns s\"\n  shows \"(A, C) \\<in> s_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A, C) \\<in> s_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  compatible_l ns s\n  compatible_r ns s\n  refl ns\n  (A, B) \\<in> ns_mul_ext ns s\n  (B, C) \\<in> s_mul_ext ns s\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> s_mul_ext ns s", "unfolding compatible_l_def compatible_r_def s_mul_ext_def ns_mul_ext_def"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  ns O s \\<subseteq> s\n  s O ns \\<subseteq> s\n  refl ns\n  (A, B) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  (B, C) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>", "using compat_mult2(2)[of \"s\\<inverse>\" \"ns\\<inverse>\"]"], ["proof (prove)\nusing this:\n  trans s\n  trans ns\n  ns O s \\<subseteq> s\n  s O ns \\<subseteq> s\n  refl ns\n  (A, B) \\<in> (mult2_alt_ns (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  (B, C) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>\n  \\<lbrakk>s\\<inverse> O ns\\<inverse> \\<subseteq> s\\<inverse>;\n   refl (ns\\<inverse>); trans (ns\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> mult2_s (ns\\<inverse>) (s\\<inverse>) O\n                    mult2_ns (ns\\<inverse>) (s\\<inverse>)\n                    \\<subseteq> mult2_s (ns\\<inverse>) (s\\<inverse>)\n\ngoal (1 subgoal):\n 1. (A, C) \\<in> (mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>", "by (auto simp: mult2_s_eq_mult2_s_alt mult2_ns_eq_mult2_ns_alt converse_relcomp[symmetric])"], ["", "text\\<open>@{const s_mul_ext} is strongly normalizing\\<close>"], ["", "lemma SN_s_mul_ext_strong:\n  assumes \"order_pair s ns\"\n    and \"\\<forall>y. y \\<in># M \\<longrightarrow> SN_on s {y}\"\n  shows \"SN_on (s_mul_ext ns s) {M}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_on (s_mul_ext ns s) {M}", "using mult2_s_eq_mult2_s_alt[of \"ns\\<inverse>\" \"s\\<inverse>\"] assms wf_below_pointwise[of \"s\\<inverse>\" \"set_mset M\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>ns\\<inverse> O s\\<inverse> \\<subseteq> s\\<inverse>;\n   refl (ns\\<inverse>); trans (s\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> mult2_alt_s (ns\\<inverse>) (s\\<inverse>) =\n                    mult2_s (ns\\<inverse>) (s\\<inverse>)\n  order_pair s ns\n  \\<forall>y. y \\<in># M \\<longrightarrow> SN_on s {y}\n  wf_below (s\\<inverse>) (set_mset M) =\n  (\\<forall>a. a \\<in># M \\<longrightarrow> wf_below (s\\<inverse>) {a})\n\ngoal (1 subgoal):\n 1. SN_on (s_mul_ext ns s) {M}", "unfolding SN_on_iff_wf_below s_mul_ext_def order_pair_def compat_pair_def pre_order_pair_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>ns\\<inverse> O s\\<inverse> \\<subseteq> s\\<inverse>;\n   refl (ns\\<inverse>); trans (s\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> mult2_alt_s (ns\\<inverse>) (s\\<inverse>) =\n                    mult2_s (ns\\<inverse>) (s\\<inverse>)\n  (refl ns \\<and> trans s \\<and> trans ns) \\<and>\n  ns O s \\<subseteq> s \\<and> s O ns \\<subseteq> s\n  \\<forall>y. y \\<in># M \\<longrightarrow> wf_below (s\\<inverse>) {y}\n  wf_below (s\\<inverse>) (set_mset M) =\n  (\\<forall>a. a \\<in># M \\<longrightarrow> wf_below (s\\<inverse>) {a})\n\ngoal (1 subgoal):\n 1. wf_below\n     (((mult2_alt_s (ns\\<inverse>) (s\\<inverse>))\\<inverse>)\\<inverse>) {M}", "by (auto intro!: wf_below_mult2_s_local simp: converse_relcomp[symmetric])"], ["", "lemma SN_s_mul_ext:\n  assumes \"order_pair s ns\" \"SN s\"\n  shows \"SN (s_mul_ext ns s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN (s_mul_ext ns s)", "using SN_s_mul_ext_strong[OF assms(1)] assms(2)"], ["proof (prove)\nusing this:\n  \\<forall>y. y \\<in># ?M \\<longrightarrow> SN_on s {y} \\<Longrightarrow>\n  SN_on (s_mul_ext ns s) {?M}\n  SN s\n\ngoal (1 subgoal):\n 1. SN (s_mul_ext ns s)", "by (auto simp: SN_on_def)"], ["", "lemma (in order_pair) mul_ext_order_pair:\n  \"order_pair (s_mul_ext NS S) (ns_mul_ext NS S)\" (is \"order_pair ?S ?NS\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair (s_mul_ext NS S) (ns_mul_ext NS S)", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. refl (ns_mul_ext NS S)\n 2. trans (s_mul_ext NS S)\n 3. trans (ns_mul_ext NS S)\n 4. ns_mul_ext NS S O s_mul_ext NS S \\<subseteq> s_mul_ext NS S\n 5. s_mul_ext NS S O ns_mul_ext NS S \\<subseteq> s_mul_ext NS S", "from s_mul_ext_trans trans_S trans_NS compat_NS_S compat_S_NS refl_NS"], ["proof (chain)\npicking this:\n  \\<lbrakk>trans ?s; trans ?ns; compatible_l ?ns ?s; compatible_r ?ns ?s;\n   refl ?ns; (?A, ?B) \\<in> s_mul_ext ?ns ?s;\n   (?B, ?C) \\<in> s_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> s_mul_ext ?ns ?s\n  trans S\n  trans NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS", "show \"trans ?S\""], ["proof (prove)\nusing this:\n  \\<lbrakk>trans ?s; trans ?ns; compatible_l ?ns ?s; compatible_r ?ns ?s;\n   refl ?ns; (?A, ?B) \\<in> s_mul_ext ?ns ?s;\n   (?B, ?C) \\<in> s_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> s_mul_ext ?ns ?s\n  trans S\n  trans NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS\n\ngoal (1 subgoal):\n 1. trans (s_mul_ext NS S)", "unfolding trans_def compatible_l_def compatible_r_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x y z.\n              (x, y) \\<in> ?s \\<longrightarrow>\n              (y, z) \\<in> ?s \\<longrightarrow> (x, z) \\<in> ?s;\n   \\<forall>x y z.\n      (x, y) \\<in> ?ns \\<longrightarrow>\n      (y, z) \\<in> ?ns \\<longrightarrow> (x, z) \\<in> ?ns;\n   ?ns O ?s \\<subseteq> ?s; ?s O ?ns \\<subseteq> ?s; refl ?ns;\n   (?A, ?B) \\<in> s_mul_ext ?ns ?s; (?B, ?C) \\<in> s_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> s_mul_ext ?ns ?s\n  \\<forall>x y z.\n     (x, y) \\<in> S \\<longrightarrow>\n     (y, z) \\<in> S \\<longrightarrow> (x, z) \\<in> S\n  \\<forall>x y z.\n     (x, y) \\<in> NS \\<longrightarrow>\n     (y, z) \\<in> NS \\<longrightarrow> (x, z) \\<in> NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS\n\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y) \\<in> s_mul_ext NS S \\<longrightarrow>\n       (y, z) \\<in> s_mul_ext NS S \\<longrightarrow>\n       (x, z) \\<in> s_mul_ext NS S", "by blast"], ["proof (state)\nthis:\n  trans (s_mul_ext NS S)\n\ngoal (4 subgoals):\n 1. refl (ns_mul_ext NS S)\n 2. trans (ns_mul_ext NS S)\n 3. ns_mul_ext NS S O s_mul_ext NS S \\<subseteq> s_mul_ext NS S\n 4. s_mul_ext NS S O ns_mul_ext NS S \\<subseteq> s_mul_ext NS S", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. refl (ns_mul_ext NS S)\n 2. trans (ns_mul_ext NS S)\n 3. ns_mul_ext NS S O s_mul_ext NS S \\<subseteq> s_mul_ext NS S\n 4. s_mul_ext NS S O ns_mul_ext NS S \\<subseteq> s_mul_ext NS S", "from ns_mul_ext_trans trans_S trans_NS compat_NS_S compat_S_NS refl_NS"], ["proof (chain)\npicking this:\n  \\<lbrakk>trans ?s; trans ?ns; compatible_l ?ns ?s; compatible_r ?ns ?s;\n   refl ?ns; (?A, ?B) \\<in> ns_mul_ext ?ns ?s;\n   (?B, ?C) \\<in> ns_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> ns_mul_ext ?ns ?s\n  trans S\n  trans NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS", "show \"trans ?NS\""], ["proof (prove)\nusing this:\n  \\<lbrakk>trans ?s; trans ?ns; compatible_l ?ns ?s; compatible_r ?ns ?s;\n   refl ?ns; (?A, ?B) \\<in> ns_mul_ext ?ns ?s;\n   (?B, ?C) \\<in> ns_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> ns_mul_ext ?ns ?s\n  trans S\n  trans NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS\n\ngoal (1 subgoal):\n 1. trans (ns_mul_ext NS S)", "unfolding trans_def compatible_l_def compatible_r_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x y z.\n              (x, y) \\<in> ?s \\<longrightarrow>\n              (y, z) \\<in> ?s \\<longrightarrow> (x, z) \\<in> ?s;\n   \\<forall>x y z.\n      (x, y) \\<in> ?ns \\<longrightarrow>\n      (y, z) \\<in> ?ns \\<longrightarrow> (x, z) \\<in> ?ns;\n   ?ns O ?s \\<subseteq> ?s; ?s O ?ns \\<subseteq> ?s; refl ?ns;\n   (?A, ?B) \\<in> ns_mul_ext ?ns ?s;\n   (?B, ?C) \\<in> ns_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> ns_mul_ext ?ns ?s\n  \\<forall>x y z.\n     (x, y) \\<in> S \\<longrightarrow>\n     (y, z) \\<in> S \\<longrightarrow> (x, z) \\<in> S\n  \\<forall>x y z.\n     (x, y) \\<in> NS \\<longrightarrow>\n     (y, z) \\<in> NS \\<longrightarrow> (x, z) \\<in> NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS\n\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y) \\<in> ns_mul_ext NS S \\<longrightarrow>\n       (y, z) \\<in> ns_mul_ext NS S \\<longrightarrow>\n       (x, z) \\<in> ns_mul_ext NS S", "by blast"], ["proof (state)\nthis:\n  trans (ns_mul_ext NS S)\n\ngoal (3 subgoals):\n 1. refl (ns_mul_ext NS S)\n 2. ns_mul_ext NS S O s_mul_ext NS S \\<subseteq> s_mul_ext NS S\n 3. s_mul_ext NS S O ns_mul_ext NS S \\<subseteq> s_mul_ext NS S", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. refl (ns_mul_ext NS S)\n 2. ns_mul_ext NS S O s_mul_ext NS S \\<subseteq> s_mul_ext NS S\n 3. s_mul_ext NS S O ns_mul_ext NS S \\<subseteq> s_mul_ext NS S", "from ns_s_mul_ext_trans trans_S trans_NS compat_NS_S compat_S_NS refl_NS"], ["proof (chain)\npicking this:\n  \\<lbrakk>trans ?s; trans ?ns; compatible_l ?ns ?s; compatible_r ?ns ?s;\n   refl ?ns; (?A, ?B) \\<in> ns_mul_ext ?ns ?s;\n   (?B, ?C) \\<in> s_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> s_mul_ext ?ns ?s\n  trans S\n  trans NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS", "show \"?NS O ?S \\<subseteq> ?S\""], ["proof (prove)\nusing this:\n  \\<lbrakk>trans ?s; trans ?ns; compatible_l ?ns ?s; compatible_r ?ns ?s;\n   refl ?ns; (?A, ?B) \\<in> ns_mul_ext ?ns ?s;\n   (?B, ?C) \\<in> s_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> s_mul_ext ?ns ?s\n  trans S\n  trans NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS\n\ngoal (1 subgoal):\n 1. ns_mul_ext NS S O s_mul_ext NS S \\<subseteq> s_mul_ext NS S", "unfolding trans_def compatible_l_def compatible_r_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x y z.\n              (x, y) \\<in> ?s \\<longrightarrow>\n              (y, z) \\<in> ?s \\<longrightarrow> (x, z) \\<in> ?s;\n   \\<forall>x y z.\n      (x, y) \\<in> ?ns \\<longrightarrow>\n      (y, z) \\<in> ?ns \\<longrightarrow> (x, z) \\<in> ?ns;\n   ?ns O ?s \\<subseteq> ?s; ?s O ?ns \\<subseteq> ?s; refl ?ns;\n   (?A, ?B) \\<in> ns_mul_ext ?ns ?s;\n   (?B, ?C) \\<in> s_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> s_mul_ext ?ns ?s\n  \\<forall>x y z.\n     (x, y) \\<in> S \\<longrightarrow>\n     (y, z) \\<in> S \\<longrightarrow> (x, z) \\<in> S\n  \\<forall>x y z.\n     (x, y) \\<in> NS \\<longrightarrow>\n     (y, z) \\<in> NS \\<longrightarrow> (x, z) \\<in> NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS\n\ngoal (1 subgoal):\n 1. ns_mul_ext NS S O s_mul_ext NS S \\<subseteq> s_mul_ext NS S", "by blast"], ["proof (state)\nthis:\n  ns_mul_ext NS S O s_mul_ext NS S \\<subseteq> s_mul_ext NS S\n\ngoal (2 subgoals):\n 1. refl (ns_mul_ext NS S)\n 2. s_mul_ext NS S O ns_mul_ext NS S \\<subseteq> s_mul_ext NS S", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. refl (ns_mul_ext NS S)\n 2. s_mul_ext NS S O ns_mul_ext NS S \\<subseteq> s_mul_ext NS S", "from s_ns_mul_ext_trans trans_S trans_NS compat_NS_S compat_S_NS refl_NS"], ["proof (chain)\npicking this:\n  \\<lbrakk>trans ?s; trans ?ns; compatible_l ?ns ?s; compatible_r ?ns ?s;\n   refl ?ns; (?A, ?B) \\<in> s_mul_ext ?ns ?s;\n   (?B, ?C) \\<in> ns_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> s_mul_ext ?ns ?s\n  trans S\n  trans NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS", "show \"?S O ?NS \\<subseteq> ?S\""], ["proof (prove)\nusing this:\n  \\<lbrakk>trans ?s; trans ?ns; compatible_l ?ns ?s; compatible_r ?ns ?s;\n   refl ?ns; (?A, ?B) \\<in> s_mul_ext ?ns ?s;\n   (?B, ?C) \\<in> ns_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> s_mul_ext ?ns ?s\n  trans S\n  trans NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS\n\ngoal (1 subgoal):\n 1. s_mul_ext NS S O ns_mul_ext NS S \\<subseteq> s_mul_ext NS S", "unfolding trans_def compatible_l_def compatible_r_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x y z.\n              (x, y) \\<in> ?s \\<longrightarrow>\n              (y, z) \\<in> ?s \\<longrightarrow> (x, z) \\<in> ?s;\n   \\<forall>x y z.\n      (x, y) \\<in> ?ns \\<longrightarrow>\n      (y, z) \\<in> ?ns \\<longrightarrow> (x, z) \\<in> ?ns;\n   ?ns O ?s \\<subseteq> ?s; ?s O ?ns \\<subseteq> ?s; refl ?ns;\n   (?A, ?B) \\<in> s_mul_ext ?ns ?s;\n   (?B, ?C) \\<in> ns_mul_ext ?ns ?s\\<rbrakk>\n  \\<Longrightarrow> (?A, ?C) \\<in> s_mul_ext ?ns ?s\n  \\<forall>x y z.\n     (x, y) \\<in> S \\<longrightarrow>\n     (y, z) \\<in> S \\<longrightarrow> (x, z) \\<in> S\n  \\<forall>x y z.\n     (x, y) \\<in> NS \\<longrightarrow>\n     (y, z) \\<in> NS \\<longrightarrow> (x, z) \\<in> NS\n  NS O S \\<subseteq> S\n  S O NS \\<subseteq> S\n  refl NS\n\ngoal (1 subgoal):\n 1. s_mul_ext NS S O ns_mul_ext NS S \\<subseteq> s_mul_ext NS S", "by blast"], ["proof (state)\nthis:\n  s_mul_ext NS S O ns_mul_ext NS S \\<subseteq> s_mul_ext NS S\n\ngoal (1 subgoal):\n 1. refl (ns_mul_ext NS S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. refl (ns_mul_ext NS S)", "from ns_mul_ext_refl[OF refl_NS, of _ S]"], ["proof (chain)\npicking this:\n  (?A, ?A) \\<in> ns_mul_ext NS S", "show \"refl ?NS\""], ["proof (prove)\nusing this:\n  (?A, ?A) \\<in> ns_mul_ext NS S\n\ngoal (1 subgoal):\n 1. refl (ns_mul_ext NS S)", "unfolding refl_on_def"], ["proof (prove)\nusing this:\n  (?A, ?A) \\<in> ns_mul_ext NS S\n\ngoal (1 subgoal):\n 1. ns_mul_ext NS S \\<subseteq> UNIV \\<times> UNIV \\<and>\n    (\\<forall>x\\<in>UNIV. (x, x) \\<in> ns_mul_ext NS S)", "by fast"], ["proof (state)\nthis:\n  refl (ns_mul_ext NS S)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in SN_order_pair) mul_ext_SN_order_pair: \"SN_order_pair (s_mul_ext NS S) (ns_mul_ext NS S)\"\n  (is \"SN_order_pair ?S ?NS\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_order_pair (s_mul_ext NS S) (ns_mul_ext NS S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SN_order_pair (s_mul_ext NS S) (ns_mul_ext NS S)", "from mul_ext_order_pair"], ["proof (chain)\npicking this:\n  order_pair (s_mul_ext NS S) (ns_mul_ext NS S)", "interpret order_pair ?S ?NS"], ["proof (prove)\nusing this:\n  order_pair (s_mul_ext NS S) (ns_mul_ext NS S)\n\ngoal (1 subgoal):\n 1. order_pair (s_mul_ext NS S) (ns_mul_ext NS S)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. SN_order_pair (s_mul_ext NS S) (ns_mul_ext NS S)", "have \"order_pair S NS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair S NS", "by unfold_locales"], ["proof (state)\nthis:\n  order_pair S NS\n\ngoal (1 subgoal):\n 1. SN_order_pair (s_mul_ext NS S) (ns_mul_ext NS S)", "then"], ["proof (chain)\npicking this:\n  order_pair S NS", "interpret SN_ars ?S"], ["proof (prove)\nusing this:\n  order_pair S NS\n\ngoal (1 subgoal):\n 1. SN_ars (s_mul_ext NS S)", "using SN_s_mul_ext[of S NS] SN"], ["proof (prove)\nusing this:\n  order_pair S NS\n  \\<lbrakk>order_pair S NS; SN S\\<rbrakk>\n  \\<Longrightarrow> SN (s_mul_ext NS S)\n  SN S\n\ngoal (1 subgoal):\n 1. SN_ars (s_mul_ext NS S)", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. SN_order_pair (s_mul_ext NS S) (ns_mul_ext NS S)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_order_pair (s_mul_ext NS S) (ns_mul_ext NS S)", "by unfold_locales"], ["proof (state)\nthis:\n  SN_order_pair (s_mul_ext NS S) (ns_mul_ext NS S)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mul_ext_compat:\n  assumes compat: \"\\<And> s t u. \\<lbrakk>s \\<in> set ss; t \\<in> set ts; u \\<in> set us\\<rbrakk> \\<Longrightarrow>\n    (snd (f s t) \\<and> fst (f t u) \\<longrightarrow> fst (f s u)) \\<and>\n    (fst (f s t) \\<and> snd (f t u) \\<longrightarrow> fst (f s u)) \\<and>\n    (snd (f s t) \\<and> snd (f t u) \\<longrightarrow> snd (f s u)) \\<and>\n    (fst (f s t) \\<and> fst (f t u) \\<longrightarrow> fst (f s u))\"\n  shows \"\n    (snd (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow> fst (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow> fst (mul_ext f ss us)) \\<and>\n    (snd (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow> snd (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow> fst (mul_ext f ss us)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us)) \\<and>\n    (snd (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n     snd (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us)) \\<and>\n    (snd (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n     snd (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us))", "let ?s = \"{(x, y). fst (f x y)}\\<inverse>\" and ?ns = \"{(x, y). snd (f x y)}\\<inverse>\""], ["proof (state)\ngoal (1 subgoal):\n 1. (snd (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us)) \\<and>\n    (snd (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n     snd (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us))", "have [dest]: \"(mset ts, mset ss) \\<in> mult2_alt b2 ?ns ?s \\<Longrightarrow> (mset us, mset ts) \\<in> mult2_alt b1 ?ns ?s \\<Longrightarrow>\n    (mset us, mset ss) \\<in> mult2_alt (b1 \\<and> b2) ?ns ?s\" for b1 b2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(mset ts, mset ss)\n             \\<in> mult2_alt b2 ({(x, y). snd (f x y)}\\<inverse>)\n                    ({(x, y). fst (f x y)}\\<inverse>);\n     (mset us, mset ts)\n     \\<in> mult2_alt b1 ({(x, y). snd (f x y)}\\<inverse>)\n            ({(x, y). fst (f x y)}\\<inverse>)\\<rbrakk>\n    \\<Longrightarrow> (mset us, mset ss)\n                      \\<in> mult2_alt (b1 \\<and> b2)\n                             ({(x, y). snd (f x y)}\\<inverse>)\n                             ({(x, y). fst (f x y)}\\<inverse>)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<in> set ss; ?t \\<in> set ts; ?u \\<in> set us\\<rbrakk>\n  \\<Longrightarrow> (snd (f ?s ?t) \\<and> fst (f ?t ?u) \\<longrightarrow>\n                     fst (f ?s ?u)) \\<and>\n                    (fst (f ?s ?t) \\<and> snd (f ?t ?u) \\<longrightarrow>\n                     fst (f ?s ?u)) \\<and>\n                    (snd (f ?s ?t) \\<and> snd (f ?t ?u) \\<longrightarrow>\n                     snd (f ?s ?u)) \\<and>\n                    (fst (f ?s ?t) \\<and> fst (f ?t ?u) \\<longrightarrow>\n                     fst (f ?s ?u))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(mset ts, mset ss)\n             \\<in> mult2_alt b2 ({(x, y). snd (f x y)}\\<inverse>)\n                    ({(x, y). fst (f x y)}\\<inverse>);\n     (mset us, mset ts)\n     \\<in> mult2_alt b1 ({(x, y). snd (f x y)}\\<inverse>)\n            ({(x, y). fst (f x y)}\\<inverse>)\\<rbrakk>\n    \\<Longrightarrow> (mset us, mset ss)\n                      \\<in> mult2_alt (b1 \\<and> b2)\n                             ({(x, y). snd (f x y)}\\<inverse>)\n                             ({(x, y). fst (f x y)}\\<inverse>)", "by (auto intro!: trans_mult2_alt_local[of _ \"mset ts\"] simp: in_multiset_in_set)"], ["proof (state)\nthis:\n  \\<lbrakk>(mset ts, mset ss)\n           \\<in> mult2_alt ?b2.0 ({(x, y). snd (f x y)}\\<inverse>)\n                  ({(x, y). fst (f x y)}\\<inverse>);\n   (mset us, mset ts)\n   \\<in> mult2_alt ?b1.0 ({(x, y). snd (f x y)}\\<inverse>)\n          ({(x, y). fst (f x y)}\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> (mset us, mset ss)\n                    \\<in> mult2_alt (?b1.0 \\<and> ?b2.0)\n                           ({(x, y). snd (f x y)}\\<inverse>)\n                           ({(x, y). fst (f x y)}\\<inverse>)\n\ngoal (1 subgoal):\n 1. (snd (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us)) \\<and>\n    (snd (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n     snd (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us)) \\<and>\n    (snd (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n     snd (mul_ext f ss us)) \\<and>\n    (fst (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n     fst (mul_ext f ss us))", "by (auto simp: mul_ext_def s_mul_ext_def ns_mul_ext_def Let_def)"], ["proof (state)\nthis:\n  (snd (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n   fst (mul_ext f ss us)) \\<and>\n  (fst (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n   fst (mul_ext f ss us)) \\<and>\n  (snd (mul_ext f ss ts) \\<and> snd (mul_ext f ts us) \\<longrightarrow>\n   snd (mul_ext f ss us)) \\<and>\n  (fst (mul_ext f ss ts) \\<and> fst (mul_ext f ts us) \\<longrightarrow>\n   fst (mul_ext f ss us))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mul_ext_cong[fundef_cong]:\n  assumes \"mset xs1 = mset ys1\"\n    and \"mset xs2 = mset ys2\"\n    and \"\\<And> x x'. x \\<in> set ys1 \\<Longrightarrow> x' \\<in> set ys2 \\<Longrightarrow> f x x' = g x x'\"\n  shows \"mul_ext f xs1 xs2 = mul_ext g ys1 ys2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mul_ext f xs1 xs2 = mul_ext g ys1 ys2", "using assms\n    mult2_alt_map[of \"mset xs2\" \"mset xs1\" \"{(x, y). snd (f x y)}\\<inverse>\" id id \"{(x, y). snd (g x y)}\\<inverse>\"\n      \"{(x, y). fst (f x y)}\\<inverse>\" \"{(x, y). fst (g x y)}\\<inverse>\"]\n    mult2_alt_map[of \"mset ys2\" \"mset ys1\" \"{(x, y). snd (g x y)}\\<inverse>\" id id \"{(x, y). snd (f x y)}\\<inverse>\"\n      \"{(x, y). fst (g x y)}\\<inverse>\" \"{(x, y). fst (f x y)}\\<inverse>\"]"], ["proof (prove)\nusing this:\n  mset xs1 = mset ys1\n  mset xs2 = mset ys2\n  \\<lbrakk>?x \\<in> set ys1; ?x' \\<in> set ys2\\<rbrakk>\n  \\<Longrightarrow> f ?x ?x' = g ?x ?x'\n  \\<lbrakk>\\<And>x y.\n              \\<lbrakk>x \\<in># mset xs2; y \\<in># mset xs1;\n               (x, y) \\<in> {(x, y). snd (f x y)}\\<inverse>\\<rbrakk>\n              \\<Longrightarrow> (id x, id y)\n                                \\<in> {(x, y). snd (g x y)}\\<inverse>;\n   \\<And>x y.\n      \\<lbrakk>x \\<in># mset xs2; y \\<in># mset xs1;\n       (x, y) \\<in> {(x, y). fst (f x y)}\\<inverse>\\<rbrakk>\n      \\<Longrightarrow> (id x, id y) \\<in> {(x, y). fst (g x y)}\\<inverse>;\n   (mset xs2, mset xs1)\n   \\<in> mult2_alt ?b ({(x, y). snd (f x y)}\\<inverse>)\n          ({(x, y). fst (f x y)}\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> (image_mset id (mset xs2), image_mset id (mset xs1))\n                    \\<in> mult2_alt ?b ({(x, y). snd (g x y)}\\<inverse>)\n                           ({(x, y). fst (g x y)}\\<inverse>)\n  \\<lbrakk>\\<And>x y.\n              \\<lbrakk>x \\<in># mset ys2; y \\<in># mset ys1;\n               (x, y) \\<in> {(x, y). snd (g x y)}\\<inverse>\\<rbrakk>\n              \\<Longrightarrow> (id x, id y)\n                                \\<in> {(x, y). snd (f x y)}\\<inverse>;\n   \\<And>x y.\n      \\<lbrakk>x \\<in># mset ys2; y \\<in># mset ys1;\n       (x, y) \\<in> {(x, y). fst (g x y)}\\<inverse>\\<rbrakk>\n      \\<Longrightarrow> (id x, id y) \\<in> {(x, y). fst (f x y)}\\<inverse>;\n   (mset ys2, mset ys1)\n   \\<in> mult2_alt ?b ({(x, y). snd (g x y)}\\<inverse>)\n          ({(x, y). fst (g x y)}\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> (image_mset id (mset ys2), image_mset id (mset ys1))\n                    \\<in> mult2_alt ?b ({(x, y). snd (f x y)}\\<inverse>)\n                           ({(x, y). fst (f x y)}\\<inverse>)\n\ngoal (1 subgoal):\n 1. mul_ext f xs1 xs2 = mul_ext g ys1 ys2", "by (auto simp: mul_ext_def s_mul_ext_def ns_mul_ext_def Let_def in_multiset_in_set)"], ["", "lemma all_nstri_imp_mul_nstri:\n  assumes \"\\<forall>i<length ys. snd (f (xs ! i) (ys ! i))\"\n    and \"length xs = length ys\"\n  shows \"snd (mul_ext f xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (mul_ext f xs ys)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. snd (mul_ext f xs ys)", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<forall>i<length ys. snd (f (xs ! i) (ys ! i))", "have \"\\<forall>i. i < length ys \\<longrightarrow> (xs ! i, ys ! i) \\<in> {(x,y). snd (f x y)}\""], ["proof (prove)\nusing this:\n  \\<forall>i<length ys. snd (f (xs ! i) (ys ! i))\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> {(x, y). snd (f x y)}", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<length ys. (xs ! i, ys ! i) \\<in> {(x, y). snd (f x y)}\n\ngoal (1 subgoal):\n 1. snd (mul_ext f xs ys)", "from all_ns_ns_mul_ext[OF assms(2) this]"], ["proof (chain)\npicking this:\n  (mset xs, mset ys) \\<in> ns_mul_ext {(x, y). snd (f x y)} ?s", "show ?thesis"], ["proof (prove)\nusing this:\n  (mset xs, mset ys) \\<in> ns_mul_ext {(x, y). snd (f x y)} ?s\n\ngoal (1 subgoal):\n 1. snd (mul_ext f xs ys)", "by (simp add: mul_ext_def)"], ["proof (state)\nthis:\n  snd (mul_ext f xs ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma relation_inter:\n  shows \"{(x,y). P x y} \\<inter> {(x,y). Q x y} = {(x,y). P x y \\<and> Q x y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y). P x y} \\<inter> {(x, y). Q x y} = {(x, y). P x y \\<and> Q x y}", "by blast"], ["", "lemma mul_ext_unfold:\n  \"(x,y) \\<in> {(a,b). fst (mul_ext g a b)} \\<longleftrightarrow> (mset x, mset y) \\<in> (s_mul_ext {(a,b). snd (g a b)} {(a,b). fst (g a b)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y) \\<in> {(a, b). fst (mul_ext g a b)}) =\n    ((mset x, mset y)\n     \\<in> s_mul_ext {(a, b). snd (g a b)} {(a, b). fst (g a b)})", "unfolding mul_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, y)\n     \\<in> {(a, b).\n            fst (let s = {(x, y). fst (g x y)}; ns = {(x, y). snd (g x y)}\n                 in ((mset a, mset b) \\<in> s_mul_ext ns s,\n                     (mset a, mset b) \\<in> ns_mul_ext ns s))}) =\n    ((mset x, mset y)\n     \\<in> s_mul_ext {(a, b). snd (g a b)} {(a, b). fst (g a b)})", "by (simp add: Let_def)"], ["", "text \\<open>The next lemma is a local version of strong-normalization of \n  the multiset extension, where the base-order only has to be strongly normalizing\n  on elements of the multisets. This will be crucial for orders that are defined recursively\n  on terms, such as RPO or WPO.\\<close>"], ["", "lemma mul_ext_SN:\n  assumes \"\\<forall>x. snd (g x x)\"\n    and \"\\<forall>x y z. fst (g x y) \\<longrightarrow> snd (g y z) \\<longrightarrow> fst (g x z)\"\n    and \"\\<forall>x y z. snd (g x y) \\<longrightarrow> fst (g y z) \\<longrightarrow> fst (g x z)\"\n    and \"\\<forall>x y z. snd (g x y) \\<longrightarrow> snd (g y z) \\<longrightarrow> snd (g x z)\"\n    and \"\\<forall>x y z. fst (g x y) \\<longrightarrow> fst (g y z) \\<longrightarrow> fst (g x z)\"\n  shows \"SN {(ys, xs).\n  (\\<forall>y\\<in>set ys. SN_on {(s ,t). fst (g s t)} {y}) \\<and>\n  fst (mul_ext g ys xs)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "let ?R1 = \"\\<lambda>xs ys. \\<forall>y\\<in> set ys. SN_on {(s ,t). fst (g s t)} {y}\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "let ?R2 = \"\\<lambda>xs ys. fst (mul_ext g ys xs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "let ?s = \"{(x,y). fst (g x y)}\" and ?ns = \"{(x,y). snd (g x y)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "have OP: \"order_pair ?s ?ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order_pair {(x, y). fst (g x y)} {(x, y). snd (g x y)}", "using assms(1-5)"], ["proof (prove)\nusing this:\n  \\<forall>x. snd (g x x)\n  \\<forall>x y z.\n     fst (g x y) \\<longrightarrow> snd (g y z) \\<longrightarrow> fst (g x z)\n  \\<forall>x y z.\n     snd (g x y) \\<longrightarrow> fst (g y z) \\<longrightarrow> fst (g x z)\n  \\<forall>x y z.\n     snd (g x y) \\<longrightarrow> snd (g y z) \\<longrightarrow> snd (g x z)\n  \\<forall>x y z.\n     fst (g x y) \\<longrightarrow> fst (g y z) \\<longrightarrow> fst (g x z)\n\ngoal (1 subgoal):\n 1. order_pair {(x, y). fst (g x y)} {(x, y). snd (g x y)}", "by unfold_locales ((unfold refl_on_def trans_def)?, blast)+"], ["proof (state)\nthis:\n  order_pair {(x, y). fst (g x y)} {(x, y). snd (g x y)}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "let ?R = \"{(ys, xs). ?R1 xs ys \\<and> ?R2 xs ys}\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "let ?Sn = \"SN_on ?R\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "fix ys xs"], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "assume R_ys_xs: \"(ys, xs) \\<in> ?R\""], ["proof (state)\nthis:\n  (ys, xs)\n  \\<in> {(ys, xs).\n         (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n         fst (mul_ext g ys xs)}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "let ?mys = \"mset ys\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "let ?mxs = \"mset xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "from R_ys_xs"], ["proof (chain)\npicking this:\n  (ys, xs)\n  \\<in> {(ys, xs).\n         (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n         fst (mul_ext g ys xs)}", "have  HSN_ys: \"\\<forall>y. y \\<in> set ys \\<longrightarrow> SN_on ?s {y}\""], ["proof (prove)\nusing this:\n  (ys, xs)\n  \\<in> {(ys, xs).\n         (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n         fst (mul_ext g ys xs)}\n\ngoal (1 subgoal):\n 1. \\<forall>y.\n       y \\<in> set ys \\<longrightarrow> SN_on {(x, y). fst (g x y)} {y}", "by simp"], ["proof (state)\nthis:\n  \\<forall>y.\n     y \\<in> set ys \\<longrightarrow> SN_on {(x, y). fst (g x y)} {y}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "with in_multiset_in_set[of ys]"], ["proof (chain)\npicking this:\n  (ys \\<in># mset ?xs) = (ys \\<in> set ?xs)\n  \\<forall>y.\n     y \\<in> set ys \\<longrightarrow> SN_on {(x, y). fst (g x y)} {y}", "have \"\\<forall>y. y \\<in># ?mys \\<longrightarrow> SN_on ?s {y}\""], ["proof (prove)\nusing this:\n  (ys \\<in># mset ?xs) = (ys \\<in> set ?xs)\n  \\<forall>y.\n     y \\<in> set ys \\<longrightarrow> SN_on {(x, y). fst (g x y)} {y}\n\ngoal (1 subgoal):\n 1. \\<forall>y.\n       y \\<in># mset ys \\<longrightarrow> SN_on {(x, y). fst (g x y)} {y}", "by simp"], ["proof (state)\nthis:\n  \\<forall>y.\n     y \\<in># mset ys \\<longrightarrow> SN_on {(x, y). fst (g x y)} {y}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "from SN_s_mul_ext_strong[OF OP this] and mul_ext_unfold"], ["proof (chain)\npicking this:\n  SN_on (s_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}) {mset ys}\n  ((?x, ?y) \\<in> {(a, b). fst (mul_ext ?g a b)}) =\n  ((mset ?x, mset ?y)\n   \\<in> s_mul_ext {(a, b). snd (?g a b)} {(a, b). fst (?g a b)})", "have \"SN_on {(ys,xs). fst (mul_ext g ys xs)} {ys}\""], ["proof (prove)\nusing this:\n  SN_on (s_mul_ext {(x, y). snd (g x y)} {(x, y). fst (g x y)}) {mset ys}\n  ((?x, ?y) \\<in> {(a, b). fst (mul_ext ?g a b)}) =\n  ((mset ?x, mset ?y)\n   \\<in> s_mul_ext {(a, b). snd (?g a b)} {(a, b). fst (?g a b)})\n\ngoal (1 subgoal):\n 1. SN_on {(ys, xs). fst (mul_ext g ys xs)} {ys}", "by fast"], ["proof (state)\nthis:\n  SN_on {(ys, xs). fst (mul_ext g ys xs)} {ys}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "from relation_inter[of ?R2 ?R1] and SN_on_weakening[OF this]"], ["proof (chain)\npicking this:\n  {(x, y). fst (mul_ext g y x)} \\<inter>\n  {(x, y). \\<forall>y\\<in>set y. SN_on {(s, t). fst (g s t)} {y}} =\n  {(x, y).\n   fst (mul_ext g y x) \\<and>\n   (\\<forall>y\\<in>set y. SN_on {(s, t). fst (g s t)} {y})}\n  SN_on ({(ys, xs). fst (mul_ext g ys xs)} \\<inter> ?R2.0) {ys}", "have \"SN_on ?R {ys}\""], ["proof (prove)\nusing this:\n  {(x, y). fst (mul_ext g y x)} \\<inter>\n  {(x, y). \\<forall>y\\<in>set y. SN_on {(s, t). fst (g s t)} {y}} =\n  {(x, y).\n   fst (mul_ext g y x) \\<and>\n   (\\<forall>y\\<in>set y. SN_on {(s, t). fst (g s t)} {y})}\n  SN_on ({(ys, xs). fst (mul_ext g ys xs)} \\<inter> ?R2.0) {ys}\n\ngoal (1 subgoal):\n 1. SN_on\n     {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n     {ys}", "by blast"], ["proof (state)\nthis:\n  SN_on\n   {(ys, xs).\n    (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n    fst (mul_ext g ys xs)}\n   {ys}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "}"], ["proof (state)\nthis:\n  (?ys3, ?xs3)\n  \\<in> {(ys, xs).\n         (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n         fst (mul_ext g ys xs)} \\<Longrightarrow>\n  SN_on\n   {(ys, xs).\n    (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n    fst (mul_ext g ys xs)}\n   {?ys3}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "then"], ["proof (chain)\npicking this:\n  (?ys3, ?xs3)\n  \\<in> {(ys, xs).\n         (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n         fst (mul_ext g ys xs)} \\<Longrightarrow>\n  SN_on\n   {(ys, xs).\n    (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n    fst (mul_ext g ys xs)}\n   {?ys3}", "have Hyp: \"\\<forall>ys xs. (ys,xs) \\<in> ?R \\<longrightarrow> SN_on ?R {ys}\""], ["proof (prove)\nusing this:\n  (?ys3, ?xs3)\n  \\<in> {(ys, xs).\n         (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n         fst (mul_ext g ys xs)} \\<Longrightarrow>\n  SN_on\n   {(ys, xs).\n    (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n    fst (mul_ext g ys xs)}\n   {?ys3}\n\ngoal (1 subgoal):\n 1. \\<forall>ys xs.\n       (ys, xs)\n       \\<in> {(ys, xs).\n              (\\<forall>y\\<in>set ys.\n                  SN_on {(s, t). fst (g s t)} {y}) \\<and>\n              fst (mul_ext g ys xs)} \\<longrightarrow>\n       SN_on\n        {(ys, xs).\n         (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n         fst (mul_ext g ys xs)}\n        {ys}", "by auto"], ["proof (state)\nthis:\n  \\<forall>ys xs.\n     (ys, xs)\n     \\<in> {(ys, xs).\n            (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n            fst (mul_ext g ys xs)} \\<longrightarrow>\n     SN_on\n      {(ys, xs).\n       (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n       fst (mul_ext g ys xs)}\n      {ys}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "{"], ["proof (state)\nthis:\n  \\<forall>ys xs.\n     (ys, xs)\n     \\<in> {(ys, xs).\n            (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n            fst (mul_ext g ys xs)} \\<longrightarrow>\n     SN_on\n      {(ys, xs).\n       (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n       fst (mul_ext g ys xs)}\n      {ys}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "fix ys"], ["proof (state)\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "have \"SN_on ?R {ys}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_on\n     {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n     {ys}", "proof (cases \"\\<exists> xs. (ys, xs) \\<in> ?R\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>xs.\n       (ys, xs)\n       \\<in> {(ys, xs).\n              (\\<forall>y\\<in>set ys.\n                  SN_on {(s, t). fst (g s t)} {y}) \\<and>\n              fst (mul_ext g ys xs)} \\<Longrightarrow>\n    SN_on\n     {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n     {ys}\n 2. \\<nexists>xs.\n       (ys, xs)\n       \\<in> {(ys, xs).\n              (\\<forall>y\\<in>set ys.\n                  SN_on {(s, t). fst (g s t)} {y}) \\<and>\n              fst (mul_ext g ys xs)} \\<Longrightarrow>\n    SN_on\n     {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n     {ys}", "case True"], ["proof (state)\nthis:\n  \\<exists>xs.\n     (ys, xs)\n     \\<in> {(ys, xs).\n            (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n            fst (mul_ext g ys xs)}\n\ngoal (2 subgoals):\n 1. \\<exists>xs.\n       (ys, xs)\n       \\<in> {(ys, xs).\n              (\\<forall>y\\<in>set ys.\n                  SN_on {(s, t). fst (g s t)} {y}) \\<and>\n              fst (mul_ext g ys xs)} \\<Longrightarrow>\n    SN_on\n     {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n     {ys}\n 2. \\<nexists>xs.\n       (ys, xs)\n       \\<in> {(ys, xs).\n              (\\<forall>y\\<in>set ys.\n                  SN_on {(s, t). fst (g s t)} {y}) \\<and>\n              fst (mul_ext g ys xs)} \\<Longrightarrow>\n    SN_on\n     {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n     {ys}", "with Hyp"], ["proof (chain)\npicking this:\n  \\<forall>ys xs.\n     (ys, xs)\n     \\<in> {(ys, xs).\n            (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n            fst (mul_ext g ys xs)} \\<longrightarrow>\n     SN_on\n      {(ys, xs).\n       (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n       fst (mul_ext g ys xs)}\n      {ys}\n  \\<exists>xs.\n     (ys, xs)\n     \\<in> {(ys, xs).\n            (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n            fst (mul_ext g ys xs)}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>ys xs.\n     (ys, xs)\n     \\<in> {(ys, xs).\n            (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n            fst (mul_ext g ys xs)} \\<longrightarrow>\n     SN_on\n      {(ys, xs).\n       (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n       fst (mul_ext g ys xs)}\n      {ys}\n  \\<exists>xs.\n     (ys, xs)\n     \\<in> {(ys, xs).\n            (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n            fst (mul_ext g ys xs)}\n\ngoal (1 subgoal):\n 1. SN_on\n     {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n     {ys}", "by simp"], ["proof (state)\nthis:\n  SN_on\n   {(ys, xs).\n    (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n    fst (mul_ext g ys xs)}\n   {ys}\n\ngoal (1 subgoal):\n 1. \\<nexists>xs.\n       (ys, xs)\n       \\<in> {(ys, xs).\n              (\\<forall>y\\<in>set ys.\n                  SN_on {(s, t). fst (g s t)} {y}) \\<and>\n              fst (mul_ext g ys xs)} \\<Longrightarrow>\n    SN_on\n     {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n     {ys}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>xs.\n       (ys, xs)\n       \\<in> {(ys, xs).\n              (\\<forall>y\\<in>set ys.\n                  SN_on {(s, t). fst (g s t)} {y}) \\<and>\n              fst (mul_ext g ys xs)} \\<Longrightarrow>\n    SN_on\n     {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n     {ys}", "case False"], ["proof (state)\nthis:\n  \\<nexists>xs.\n     (ys, xs)\n     \\<in> {(ys, xs).\n            (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n            fst (mul_ext g ys xs)}\n\ngoal (1 subgoal):\n 1. \\<nexists>xs.\n       (ys, xs)\n       \\<in> {(ys, xs).\n              (\\<forall>y\\<in>set ys.\n                  SN_on {(s, t). fst (g s t)} {y}) \\<and>\n              fst (mul_ext g ys xs)} \\<Longrightarrow>\n    SN_on\n     {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n     {ys}", "then"], ["proof (chain)\npicking this:\n  \\<nexists>xs.\n     (ys, xs)\n     \\<in> {(ys, xs).\n            (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n            fst (mul_ext g ys xs)}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>xs.\n     (ys, xs)\n     \\<in> {(ys, xs).\n            (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n            fst (mul_ext g ys xs)}\n\ngoal (1 subgoal):\n 1. SN_on\n     {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n     {ys}", "by auto"], ["proof (state)\nthis:\n  SN_on\n   {(ys, xs).\n    (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n    fst (mul_ext g ys xs)}\n   {ys}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SN_on\n   {(ys, xs).\n    (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n    fst (mul_ext g ys xs)}\n   {ys}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "}"], ["proof (state)\nthis:\n  SN_on\n   {(ys, xs).\n    (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n    fst (mul_ext g ys xs)}\n   {?ys3}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "then"], ["proof (chain)\npicking this:\n  SN_on\n   {(ys, xs).\n    (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n    fst (mul_ext g ys xs)}\n   {?ys3}", "show ?thesis"], ["proof (prove)\nusing this:\n  SN_on\n   {(ys, xs).\n    (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n    fst (mul_ext g ys xs)}\n   {?ys3}\n\ngoal (1 subgoal):\n 1. SN {(ys, xs).\n        (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n        fst (mul_ext g ys xs)}", "unfolding SN_on_def"], ["proof (prove)\nusing this:\n  \\<nexists>f.\n     f 0 \\<in> {?ys3} \\<and>\n     (\\<forall>i.\n         (f i, f (Suc i))\n         \\<in> {(ys, xs).\n                (\\<forall>y\\<in>set ys.\n                    \\<nexists>f.\n                       f 0 \\<in> {y} \\<and>\n                       (\\<forall>i.\n                           (f i, f (Suc i))\n                           \\<in> {(s, t). fst (g s t)})) \\<and>\n                fst (mul_ext g ys xs)})\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       f 0 \\<in> UNIV \\<and>\n       (\\<forall>i.\n           (f i, f (Suc i))\n           \\<in> {(ys, xs).\n                  (\\<forall>y\\<in>set ys.\n                      \\<nexists>f.\n                         f 0 \\<in> {y} \\<and>\n                         (\\<forall>i.\n                             (f i, f (Suc i))\n                             \\<in> {(s, t). fst (g s t)})) \\<and>\n                  fst (mul_ext g ys xs)})", "by simp"], ["proof (state)\nthis:\n  SN {(ys, xs).\n      (\\<forall>y\\<in>set ys. SN_on {(s, t). fst (g s t)} {y}) \\<and>\n      fst (mul_ext g ys xs)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mul_ext_stri_imp_nstri:\n  assumes \"fst (mul_ext f as bs)\"\n  shows \"snd (mul_ext f as bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (mul_ext f as bs)", "using assms and s_ns_mul_ext"], ["proof (prove)\nusing this:\n  fst (mul_ext f as bs)\n  (?A, ?B) \\<in> s_mul_ext ?ns ?s \\<Longrightarrow>\n  (?A, ?B) \\<in> ns_mul_ext ?ns ?s\n\ngoal (1 subgoal):\n 1. snd (mul_ext f as bs)", "unfolding mul_ext_def"], ["proof (prove)\nusing this:\n  fst (let s = {(x, y). fst (f x y)}; ns = {(x, y). snd (f x y)}\n       in ((mset as, mset bs) \\<in> s_mul_ext ns s,\n           (mset as, mset bs) \\<in> ns_mul_ext ns s))\n  (?A, ?B) \\<in> s_mul_ext ?ns ?s \\<Longrightarrow>\n  (?A, ?B) \\<in> ns_mul_ext ?ns ?s\n\ngoal (1 subgoal):\n 1. snd (let s = {(x, y). fst (f x y)}; ns = {(x, y). snd (f x y)}\n         in ((mset as, mset bs) \\<in> s_mul_ext ns s,\n             (mset as, mset bs) \\<in> ns_mul_ext ns s))", "by (auto simp: Let_def)"], ["", "lemma ns_ns_mul_ext_union_compat:\n  assumes \"(A,B) \\<in> ns_mul_ext ns s\"\n    and \"(C,D) \\<in> ns_mul_ext ns s\"\n  shows \"(A + C, B + D) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> ns_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  (A, B) \\<in> ns_mul_ext ns s\n  (C, D) \\<in> ns_mul_ext ns s\n\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> ns_mul_ext ns s", "by (auto simp: ns_mul_ext_def intro: mult2_alt_ns_ns_add)"], ["", "lemma s_ns_mul_ext_union_compat:\n  assumes \"(A,B) \\<in> s_mul_ext ns s\"\n    and \"(C,D) \\<in> ns_mul_ext ns s\"\n  shows \"(A + C, B + D) \\<in> s_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> s_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  (A, B) \\<in> s_mul_ext ns s\n  (C, D) \\<in> ns_mul_ext ns s\n\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> s_mul_ext ns s", "by (auto simp: s_mul_ext_def ns_mul_ext_def intro: mult2_alt_s_ns_add)"], ["", "lemma ns_ns_mul_ext_union_compat_rtrancl: assumes refl: \"refl ns\"\n  and AB: \"(A, B) \\<in> (ns_mul_ext ns s)\\<^sup>*\"\n  and CD: \"(C, D) \\<in> (ns_mul_ext ns s)\\<^sup>*\"\nshows \"(A + C, B + D) \\<in> (ns_mul_ext ns s)\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> (ns_mul_ext ns s)\\<^sup>*", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> (ns_mul_ext ns s)\\<^sup>*", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> (ns_mul_ext ns s)\\<^sup>*", "fix A B C"], ["proof (state)\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> (ns_mul_ext ns s)\\<^sup>*", "assume \"(A, B) \\<in> (ns_mul_ext ns s)\\<^sup>*\""], ["proof (state)\nthis:\n  (A, B) \\<in> (ns_mul_ext ns s)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> (ns_mul_ext ns s)\\<^sup>*", "then"], ["proof (chain)\npicking this:\n  (A, B) \\<in> (ns_mul_ext ns s)\\<^sup>*", "have \"(A + C, B + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\""], ["proof (prove)\nusing this:\n  (A, B) \\<in> (ns_mul_ext ns s)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (A + C, B + C) \\<in> (ns_mul_ext ns s)\\<^sup>*", "proof (induct rule: rtrancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (A + C, A + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(A, y) \\<in> (ns_mul_ext ns s)\\<^sup>*;\n        (y, z) \\<in> ns_mul_ext ns s;\n        (A + C, y + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (A + C, z + C) \\<in> (ns_mul_ext ns s)\\<^sup>*", "case (step B D)"], ["proof (state)\nthis:\n  (A, B) \\<in> (ns_mul_ext ns s)\\<^sup>*\n  (B, D) \\<in> ns_mul_ext ns s\n  (A + C, B + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\n\ngoal (2 subgoals):\n 1. (A + C, A + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(A, y) \\<in> (ns_mul_ext ns s)\\<^sup>*;\n        (y, z) \\<in> ns_mul_ext ns s;\n        (A + C, y + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (A + C, z + C) \\<in> (ns_mul_ext ns s)\\<^sup>*", "have \"(C, C) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C, C) \\<in> ns_mul_ext ns s", "by (rule ns_mul_ext_refl, insert refl, auto simp: locally_refl_def refl_on_def)"], ["proof (state)\nthis:\n  (C, C) \\<in> ns_mul_ext ns s\n\ngoal (2 subgoals):\n 1. (A + C, A + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\n 2. \\<And>y z.\n       \\<lbrakk>(A, y) \\<in> (ns_mul_ext ns s)\\<^sup>*;\n        (y, z) \\<in> ns_mul_ext ns s;\n        (A + C, y + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\\<rbrakk>\n       \\<Longrightarrow> (A + C, z + C) \\<in> (ns_mul_ext ns s)\\<^sup>*", "from ns_ns_mul_ext_union_compat[OF step(2) this] step(3)"], ["proof (chain)\npicking this:\n  (B + C, D + C) \\<in> ns_mul_ext ns s\n  (A + C, B + C) \\<in> (ns_mul_ext ns s)\\<^sup>*", "show ?case"], ["proof (prove)\nusing this:\n  (B + C, D + C) \\<in> ns_mul_ext ns s\n  (A + C, B + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (A + C, D + C) \\<in> (ns_mul_ext ns s)\\<^sup>*", "by auto"], ["proof (state)\nthis:\n  (A + C, D + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (A + C, A + C) \\<in> (ns_mul_ext ns s)\\<^sup>*", "qed auto"], ["proof (state)\nthis:\n  (A + C, B + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> (ns_mul_ext ns s)\\<^sup>*", "}"], ["proof (state)\nthis:\n  (?Aa2, ?Ba2) \\<in> (ns_mul_ext ns s)\\<^sup>* \\<Longrightarrow>\n  (?Aa2 + ?Ca2, ?Ba2 + ?Ca2) \\<in> (ns_mul_ext ns s)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> (ns_mul_ext ns s)\\<^sup>*", "from this[OF AB, of C] this[OF CD, of B]"], ["proof (chain)\npicking this:\n  (A + C, B + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\n  (C + B, D + B) \\<in> (ns_mul_ext ns s)\\<^sup>*", "show ?thesis"], ["proof (prove)\nusing this:\n  (A + C, B + C) \\<in> (ns_mul_ext ns s)\\<^sup>*\n  (C + B, D + B) \\<in> (ns_mul_ext ns s)\\<^sup>*\n\ngoal (1 subgoal):\n 1. (A + C, B + D) \\<in> (ns_mul_ext ns s)\\<^sup>*", "by (auto simp: ac_simps)"], ["proof (state)\nthis:\n  (A + C, B + D) \\<in> (ns_mul_ext ns s)\\<^sup>*\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Multisets as order on lists\\<close>"], ["", "interpretation mul_ext_list: list_order_extension\n  \"\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\"\n  \"\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_order_extension\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s})\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_order_extension\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s})\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s})", "let ?m = \"mset :: ('a list \\<Rightarrow> 'a multiset)\""], ["proof (state)\ngoal (1 subgoal):\n 1. list_order_extension\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s})\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s})", "let ?S = \"\\<lambda>s ns. {(as, bs). (?m as, ?m bs) \\<in> s_mul_ext ns s}\""], ["proof (state)\ngoal (1 subgoal):\n 1. list_order_extension\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s})\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s})", "let ?NS = \"\\<lambda>s ns. {(as, bs). (?m as, ?m bs) \\<in> ns_mul_ext ns s}\""], ["proof (state)\ngoal (1 subgoal):\n 1. list_order_extension\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s})\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s})", "show \"list_order_extension ?S ?NS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_order_extension\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s})\n     (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s})", "proof (rule list_order_extension.intro)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>S NS.\n       SN_order_pair S NS \\<Longrightarrow>\n       SN_order_pair {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\n        {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 2. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext NS S}\n 3. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 4. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "fix s ns"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>S NS.\n       SN_order_pair S NS \\<Longrightarrow>\n       SN_order_pair {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\n        {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 2. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext NS S}\n 3. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 4. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "let ?s = \"?S s ns\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>S NS.\n       SN_order_pair S NS \\<Longrightarrow>\n       SN_order_pair {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\n        {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 2. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext NS S}\n 3. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 4. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "let ?ns = \"?NS s ns\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>S NS.\n       SN_order_pair S NS \\<Longrightarrow>\n       SN_order_pair {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\n        {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 2. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext NS S}\n 3. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 4. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "assume \"SN_order_pair s ns\""], ["proof (state)\nthis:\n  SN_order_pair s ns\n\ngoal (4 subgoals):\n 1. \\<And>S NS.\n       SN_order_pair S NS \\<Longrightarrow>\n       SN_order_pair {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\n        {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 2. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext NS S}\n 3. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 4. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "then"], ["proof (chain)\npicking this:\n  SN_order_pair s ns", "interpret SN_order_pair s ns"], ["proof (prove)\nusing this:\n  SN_order_pair s ns\n\ngoal (1 subgoal):\n 1. SN_order_pair s ns", "."], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>S NS.\n       SN_order_pair S NS \\<Longrightarrow>\n       SN_order_pair {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\n        {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 2. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext NS S}\n 3. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 4. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "interpret SN_order_pair \"(s_mul_ext ns s)\" \"(ns_mul_ext ns s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_order_pair (s_mul_ext ns s) (ns_mul_ext ns s)", "by (rule mul_ext_SN_order_pair)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>S NS.\n       SN_order_pair S NS \\<Longrightarrow>\n       SN_order_pair {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\n        {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 2. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext NS S}\n 3. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 4. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "show \"SN_order_pair ?s ?ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN_order_pair {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n     {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}", "proof"], ["proof (state)\ngoal (6 subgoals):\n 1. refl {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n 2. trans {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n 3. trans {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n 4. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s} O\n    {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n    \\<subseteq> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n 5. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s} O\n    {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n    \\<subseteq> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n 6. SN {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "show \"refl ?ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refl {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}", "using refl_NS"], ["proof (prove)\nusing this:\n  refl (ns_mul_ext ns s)\n\ngoal (1 subgoal):\n 1. refl {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}", "unfolding refl_on_def"], ["proof (prove)\nusing this:\n  ns_mul_ext ns s \\<subseteq> UNIV \\<times> UNIV \\<and>\n  (\\<forall>x\\<in>UNIV. (x, x) \\<in> ns_mul_ext ns s)\n\ngoal (1 subgoal):\n 1. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n    \\<subseteq> UNIV \\<times> UNIV \\<and>\n    (\\<forall>x\\<in>UNIV.\n        (x, x) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s})", "by blast"], ["proof (state)\nthis:\n  refl {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n\ngoal (5 subgoals):\n 1. trans {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n 2. trans {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n 3. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s} O\n    {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n    \\<subseteq> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n 4. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s} O\n    {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n    \\<subseteq> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n 5. SN {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "show \"?ns O ?s \\<subseteq> ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s} O\n    {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n    \\<subseteq> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "using compat_NS_S"], ["proof (prove)\nusing this:\n  ns_mul_ext ns s O s_mul_ext ns s \\<subseteq> s_mul_ext ns s\n\ngoal (1 subgoal):\n 1. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s} O\n    {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n    \\<subseteq> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "by blast"], ["proof (state)\nthis:\n  {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s} O\n  {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n  \\<subseteq> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n\ngoal (4 subgoals):\n 1. trans {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n 2. trans {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n 3. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s} O\n    {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n    \\<subseteq> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n 4. SN {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "show \"?s O ?ns \\<subseteq> ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s} O\n    {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n    \\<subseteq> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "using compat_S_NS"], ["proof (prove)\nusing this:\n  s_mul_ext ns s O ns_mul_ext ns s \\<subseteq> s_mul_ext ns s\n\ngoal (1 subgoal):\n 1. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s} O\n    {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n    \\<subseteq> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "by blast"], ["proof (state)\nthis:\n  {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s} O\n  {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n  \\<subseteq> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n\ngoal (3 subgoals):\n 1. trans {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n 2. trans {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n 3. SN {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "show \"trans ?ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}", "using trans_NS"], ["proof (prove)\nusing this:\n  trans (ns_mul_ext ns s)\n\ngoal (1 subgoal):\n 1. trans {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}", "unfolding trans_def"], ["proof (prove)\nusing this:\n  \\<forall>x y z.\n     (x, y) \\<in> ns_mul_ext ns s \\<longrightarrow>\n     (y, z) \\<in> ns_mul_ext ns s \\<longrightarrow>\n     (x, z) \\<in> ns_mul_ext ns s\n\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y)\n       \\<in> {(as, bs).\n              (mset as, mset bs) \\<in> ns_mul_ext ns s} \\<longrightarrow>\n       (y, z)\n       \\<in> {(as, bs).\n              (mset as, mset bs) \\<in> ns_mul_ext ns s} \\<longrightarrow>\n       (x, z) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}", "by blast"], ["proof (state)\nthis:\n  trans {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n\ngoal (2 subgoals):\n 1. trans {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n 2. SN {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "show \"trans ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "using trans_S"], ["proof (prove)\nusing this:\n  trans (s_mul_ext ns s)\n\ngoal (1 subgoal):\n 1. trans {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "unfolding trans_def"], ["proof (prove)\nusing this:\n  \\<forall>x y z.\n     (x, y) \\<in> s_mul_ext ns s \\<longrightarrow>\n     (y, z) \\<in> s_mul_ext ns s \\<longrightarrow>\n     (x, z) \\<in> s_mul_ext ns s\n\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y)\n       \\<in> {(as, bs).\n              (mset as, mset bs) \\<in> s_mul_ext ns s} \\<longrightarrow>\n       (y, z)\n       \\<in> {(as, bs).\n              (mset as, mset bs) \\<in> s_mul_ext ns s} \\<longrightarrow>\n       (x, z) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "by blast"], ["proof (state)\nthis:\n  trans {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n\ngoal (1 subgoal):\n 1. SN {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "show \"SN ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "using SN_inv_image[OF SN, of ?m, unfolded inv_image_def]"], ["proof (prove)\nusing this:\n  SN {(x, y). (mset x, mset y) \\<in> s_mul_ext ns s}\n\ngoal (1 subgoal):\n 1. SN {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}", "."], ["proof (state)\nthis:\n  SN {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  SN_order_pair {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s}\n   {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s}\n\ngoal (3 subgoals):\n 1. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext NS S}\n 2. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 3. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext NS S}\n 2. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 3. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "fix S f NS as bs"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext NS S}\n 2. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 3. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "assume \"\\<And>a b. (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S\"\n      \"\\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS\"\n      \"(as, bs) \\<in> ?S S NS\""], ["proof (state)\nthis:\n  (?a, ?b) \\<in> S \\<Longrightarrow> (f ?a, f ?b) \\<in> S\n  (?a, ?b) \\<in> NS \\<Longrightarrow> (f ?a, f ?b) \\<in> NS\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\n\ngoal (3 subgoals):\n 1. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> s_mul_ext NS S}\n 2. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 3. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "then"], ["proof (chain)\npicking this:\n  (?a, ?b) \\<in> S \\<Longrightarrow> (f ?a, f ?b) \\<in> S\n  (?a, ?b) \\<in> NS \\<Longrightarrow> (f ?a, f ?b) \\<in> NS\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}", "show \"(map f as, map f bs) \\<in> ?S S NS\""], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> S \\<Longrightarrow> (f ?a, f ?b) \\<in> S\n  (?a, ?b) \\<in> NS \\<Longrightarrow> (f ?a, f ?b) \\<in> NS\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\n\ngoal (1 subgoal):\n 1. (map f as, map f bs)\n    \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}", "using mult2_alt_map[of _ _ \"NS\\<inverse>\" f f \"NS\\<inverse>\" \"S\\<inverse>\" \"S\\<inverse>\"]"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> S \\<Longrightarrow> (f ?a, f ?b) \\<in> S\n  (?a, ?b) \\<in> NS \\<Longrightarrow> (f ?a, f ?b) \\<in> NS\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\n  \\<lbrakk>\\<And>x y.\n              \\<lbrakk>x \\<in># ?X; y \\<in># ?Y;\n               (x, y) \\<in> NS\\<inverse>\\<rbrakk>\n              \\<Longrightarrow> (f x, f y) \\<in> NS\\<inverse>;\n   \\<And>x y.\n      \\<lbrakk>x \\<in># ?X; y \\<in># ?Y; (x, y) \\<in> S\\<inverse>\\<rbrakk>\n      \\<Longrightarrow> (f x, f y) \\<in> S\\<inverse>;\n   (?X, ?Y) \\<in> mult2_alt ?b (NS\\<inverse>) (S\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> (image_mset f ?X, image_mset f ?Y)\n                    \\<in> mult2_alt ?b (NS\\<inverse>) (S\\<inverse>)\n\ngoal (1 subgoal):\n 1. (map f as, map f bs)\n    \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}", "by (auto simp: mset_map s_mul_ext_def)"], ["proof (state)\nthis:\n  (map f as, map f bs)\n  \\<in> {(as, bs). (mset as, mset bs) \\<in> s_mul_ext NS S}\n\ngoal (2 subgoals):\n 1. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 2. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 2. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "fix S f NS as bs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 2. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "assume \"\\<And>a b. (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S\"\n      \"\\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS\"\n      \"(as, bs) \\<in> ?NS S NS\""], ["proof (state)\nthis:\n  (?a, ?b) \\<in> S \\<Longrightarrow> (f ?a, f ?b) \\<in> S\n  (?a, ?b) \\<in> NS \\<Longrightarrow> (f ?a, f ?b) \\<in> NS\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n\ngoal (2 subgoals):\n 1. \\<And>S f NS as bs.\n       \\<lbrakk>\\<And>a b.\n                   (a, b) \\<in> S \\<Longrightarrow> (f a, f b) \\<in> S;\n        \\<And>a b. (a, b) \\<in> NS \\<Longrightarrow> (f a, f b) \\<in> NS;\n        (as, bs)\n        \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\\<rbrakk>\n       \\<Longrightarrow> (map f as, map f bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}\n 2. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "then"], ["proof (chain)\npicking this:\n  (?a, ?b) \\<in> S \\<Longrightarrow> (f ?a, f ?b) \\<in> S\n  (?a, ?b) \\<in> NS \\<Longrightarrow> (f ?a, f ?b) \\<in> NS\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}", "show \"(map f as, map f bs) \\<in> ?NS S NS\""], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> S \\<Longrightarrow> (f ?a, f ?b) \\<in> S\n  (?a, ?b) \\<in> NS \\<Longrightarrow> (f ?a, f ?b) \\<in> NS\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n\ngoal (1 subgoal):\n 1. (map f as, map f bs)\n    \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}", "using mult2_alt_map[of _ _ \"NS\\<inverse>\" f f \"NS\\<inverse>\" \"S\\<inverse>\" \"S\\<inverse>\"]"], ["proof (prove)\nusing this:\n  (?a, ?b) \\<in> S \\<Longrightarrow> (f ?a, f ?b) \\<in> S\n  (?a, ?b) \\<in> NS \\<Longrightarrow> (f ?a, f ?b) \\<in> NS\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n  \\<lbrakk>\\<And>x y.\n              \\<lbrakk>x \\<in># ?X; y \\<in># ?Y;\n               (x, y) \\<in> NS\\<inverse>\\<rbrakk>\n              \\<Longrightarrow> (f x, f y) \\<in> NS\\<inverse>;\n   \\<And>x y.\n      \\<lbrakk>x \\<in># ?X; y \\<in># ?Y; (x, y) \\<in> S\\<inverse>\\<rbrakk>\n      \\<Longrightarrow> (f x, f y) \\<in> S\\<inverse>;\n   (?X, ?Y) \\<in> mult2_alt ?b (NS\\<inverse>) (S\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> (image_mset f ?X, image_mset f ?Y)\n                    \\<in> mult2_alt ?b (NS\\<inverse>) (S\\<inverse>)\n\ngoal (1 subgoal):\n 1. (map f as, map f bs)\n    \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}", "by (auto simp: mset_map ns_mul_ext_def)"], ["proof (state)\nthis:\n  (map f as, map f bs)\n  \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n\ngoal (1 subgoal):\n 1. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "fix as bs :: \"'a list\" and NS S :: \"'a rel\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "assume ass: \"length as = length bs\"\n      \"\\<And>i. i < length bs \\<Longrightarrow> (as ! i, bs ! i) \\<in> NS\""], ["proof (state)\nthis:\n  length as = length bs\n  ?i < length bs \\<Longrightarrow> (as ! ?i, bs ! ?i) \\<in> NS\n\ngoal (1 subgoal):\n 1. \\<And>as bs NS S.\n       \\<lbrakk>length as = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           (as ! i, bs ! i) \\<in> NS\\<rbrakk>\n       \\<Longrightarrow> (as, bs)\n                         \\<in> {(as, bs).\n                                (mset as, mset bs) \\<in> ns_mul_ext NS S}", "show \"(as, bs) \\<in> ?NS S NS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}", "by (rule, unfold split, rule all_ns_ns_mul_ext, insert ass, auto)"], ["proof (state)\nthis:\n  (as, bs) \\<in> {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext NS S}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_order_extension\n   (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> s_mul_ext ns s})\n   (\\<lambda>s ns. {(as, bs). (mset as, mset bs) \\<in> ns_mul_ext ns s})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma s_mul_ext_singleton [simp, intro]:\n  assumes \"(a, b) \\<in> s\"\n  shows \"({#a#}, {#b#}) \\<in> s_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({#a#}, {#b#}) \\<in> s_mul_ext ns s", "using assms"], ["proof (prove)\nusing this:\n  (a, b) \\<in> s\n\ngoal (1 subgoal):\n 1. ({#a#}, {#b#}) \\<in> s_mul_ext ns s", "by (auto simp: s_mul_ext_def mult2_alt_s_single)"], ["", "lemma ns_mul_ext_singleton [simp, intro]:\n  \"(a, b) \\<in> ns \\<Longrightarrow> ({#a#}, {#b#}) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> ns \\<Longrightarrow> ({#a#}, {#b#}) \\<in> ns_mul_ext ns s", "by (auto simp: ns_mul_ext_def multpw_converse intro: multpw_implies_mult2_alt_ns multpw_single)"], ["", "lemma ns_mul_ext_singleton2:\n  \"(a, b) \\<in> s \\<Longrightarrow> ({#a#}, {#b#}) \\<in> ns_mul_ext ns s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b) \\<in> s \\<Longrightarrow> ({#a#}, {#b#}) \\<in> ns_mul_ext ns s", "by (intro s_ns_mul_ext s_mul_ext_singleton)"], ["", "lemma s_mul_ext_self_extend_left:\n  assumes \"A \\<noteq> {#}\" and \"locally_refl W B\"\n  shows \"(A + B, B) \\<in> s_mul_ext W S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + B, B) \\<in> s_mul_ext W S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (A + B, B) \\<in> s_mul_ext W S", "have \"(A + B, {#} + B) \\<in> s_mul_ext W S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + B, {#} + B) \\<in> s_mul_ext W S", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> {#}\n  locally_refl W B\n\ngoal (1 subgoal):\n 1. (A + B, {#} + B) \\<in> s_mul_ext W S", "by (intro s_mul_ext_union_compat) (auto dest: s_mul_ext_bottom)"], ["proof (state)\nthis:\n  (A + B, {#} + B) \\<in> s_mul_ext W S\n\ngoal (1 subgoal):\n 1. (A + B, B) \\<in> s_mul_ext W S", "then"], ["proof (chain)\npicking this:\n  (A + B, {#} + B) \\<in> s_mul_ext W S", "show ?thesis"], ["proof (prove)\nusing this:\n  (A + B, {#} + B) \\<in> s_mul_ext W S\n\ngoal (1 subgoal):\n 1. (A + B, B) \\<in> s_mul_ext W S", "by simp"], ["proof (state)\nthis:\n  (A + B, B) \\<in> s_mul_ext W S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma s_mul_ext_ne_extend_left:\n  assumes \"A \\<noteq> {#}\" and \"(B, C) \\<in> ns_mul_ext W S\"\n  shows \"(A + B, C) \\<in> s_mul_ext W S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + B, C) \\<in> s_mul_ext W S", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> {#}\n  (B, C) \\<in> ns_mul_ext W S\n\ngoal (1 subgoal):\n 1. (A + B, C) \\<in> s_mul_ext W S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {#}; (B, C) \\<in> ns_mul_ext W S\\<rbrakk>\n    \\<Longrightarrow> (A + B, C) \\<in> s_mul_ext W S", "have \"(A + B, {#} + C) \\<in> s_mul_ext W S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + B, {#} + C) \\<in> s_mul_ext W S", "using assms"], ["proof (prove)\nusing this:\n  A \\<noteq> {#}\n  (B, C) \\<in> ns_mul_ext W S\n\ngoal (1 subgoal):\n 1. (A + B, {#} + C) \\<in> s_mul_ext W S", "by (intro s_ns_mul_ext_union_compat)\n      (auto simp: s_mul_ext_bottom dest: s_ns_mul_ext)"], ["proof (state)\nthis:\n  (A + B, {#} + C) \\<in> s_mul_ext W S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {#}; (B, C) \\<in> ns_mul_ext W S\\<rbrakk>\n    \\<Longrightarrow> (A + B, C) \\<in> s_mul_ext W S", "then"], ["proof (chain)\npicking this:\n  (A + B, {#} + C) \\<in> s_mul_ext W S", "show ?thesis"], ["proof (prove)\nusing this:\n  (A + B, {#} + C) \\<in> s_mul_ext W S\n\ngoal (1 subgoal):\n 1. (A + B, C) \\<in> s_mul_ext W S", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  (A + B, C) \\<in> s_mul_ext W S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma s_mul_ext_extend_left:\n  assumes \"(B, C) \\<in> s_mul_ext W S\"\n  shows \"(A + B, C) \\<in> s_mul_ext W S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + B, C) \\<in> s_mul_ext W S", "using assms"], ["proof (prove)\nusing this:\n  (B, C) \\<in> s_mul_ext W S\n\ngoal (1 subgoal):\n 1. (A + B, C) \\<in> s_mul_ext W S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (B, C) \\<in> s_mul_ext W S \\<Longrightarrow>\n    (A + B, C) \\<in> s_mul_ext W S", "have \"(B + A, C + {#}) \\<in> s_mul_ext W S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (B + A, C + {#}) \\<in> s_mul_ext W S", "using assms"], ["proof (prove)\nusing this:\n  (B, C) \\<in> s_mul_ext W S\n\ngoal (1 subgoal):\n 1. (B + A, C + {#}) \\<in> s_mul_ext W S", "by (intro s_ns_mul_ext_union_compat)\n      (auto simp: ns_mul_ext_bottom dest: s_ns_mul_ext)"], ["proof (state)\nthis:\n  (B + A, C + {#}) \\<in> s_mul_ext W S\n\ngoal (1 subgoal):\n 1. (B, C) \\<in> s_mul_ext W S \\<Longrightarrow>\n    (A + B, C) \\<in> s_mul_ext W S", "then"], ["proof (chain)\npicking this:\n  (B + A, C + {#}) \\<in> s_mul_ext W S", "show ?thesis"], ["proof (prove)\nusing this:\n  (B + A, C + {#}) \\<in> s_mul_ext W S\n\ngoal (1 subgoal):\n 1. (A + B, C) \\<in> s_mul_ext W S", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  (A + B, C) \\<in> s_mul_ext W S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mul_ext_mono:\n  assumes \"\\<And>x y. \\<lbrakk>x \\<in> set xs; y \\<in> set ys; fst (P x y)\\<rbrakk> \\<Longrightarrow> fst (P' x y)\"\n    and   \"\\<And>x y. \\<lbrakk>x \\<in> set xs; y \\<in> set ys; snd (P x y)\\<rbrakk> \\<Longrightarrow> snd (P' x y)\"\n  shows\n    \"fst (mul_ext P xs ys) \\<Longrightarrow> fst (mul_ext P' xs ys)\" \n    \"snd (mul_ext P xs ys) \\<Longrightarrow> snd (mul_ext P' xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (mul_ext P xs ys) \\<Longrightarrow> fst (mul_ext P' xs ys)) &&&\n    (snd (mul_ext P xs ys) \\<Longrightarrow> snd (mul_ext P' xs ys))", "unfolding mul_ext_def Let_def fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((mset xs, mset ys)\n     \\<in> s_mul_ext {(x, y). snd (P x y)}\n            {(x, y). fst (P x y)} \\<Longrightarrow>\n     (mset xs, mset ys)\n     \\<in> s_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}) &&&\n    ((mset xs, mset ys)\n     \\<in> ns_mul_ext {(x, y). snd (P x y)}\n            {(x, y). fst (P x y)} \\<Longrightarrow>\n     (mset xs, mset ys)\n     \\<in> ns_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)})", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (mset xs, mset ys)\n    \\<in> s_mul_ext {(x, y). snd (P x y)}\n           {(x, y). fst (P x y)} \\<Longrightarrow>\n    (mset xs, mset ys)\n    \\<in> s_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}\n 2. (mset xs, mset ys)\n    \\<in> ns_mul_ext {(x, y). snd (P x y)}\n           {(x, y). fst (P x y)} \\<Longrightarrow>\n    (mset xs, mset ys)\n    \\<in> ns_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}", "assume mem: \"(mset xs, mset ys) \\<in> s_mul_ext {(x, y). snd (P x y)} {(x, y). fst (P x y)}\""], ["proof (state)\nthis:\n  (mset xs, mset ys)\n  \\<in> s_mul_ext {(x, y). snd (P x y)} {(x, y). fst (P x y)}\n\ngoal (2 subgoals):\n 1. (mset xs, mset ys)\n    \\<in> s_mul_ext {(x, y). snd (P x y)}\n           {(x, y). fst (P x y)} \\<Longrightarrow>\n    (mset xs, mset ys)\n    \\<in> s_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}\n 2. (mset xs, mset ys)\n    \\<in> ns_mul_ext {(x, y). snd (P x y)}\n           {(x, y). fst (P x y)} \\<Longrightarrow>\n    (mset xs, mset ys)\n    \\<in> ns_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}", "show \"(mset xs, mset ys) \\<in> s_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> s_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}", "by (rule s_mul_ext_local_mono[OF _ _ mem], insert assms, auto)"], ["proof (state)\nthis:\n  (mset xs, mset ys)\n  \\<in> s_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}\n\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> ns_mul_ext {(x, y). snd (P x y)}\n           {(x, y). fst (P x y)} \\<Longrightarrow>\n    (mset xs, mset ys)\n    \\<in> ns_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> ns_mul_ext {(x, y). snd (P x y)}\n           {(x, y). fst (P x y)} \\<Longrightarrow>\n    (mset xs, mset ys)\n    \\<in> ns_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}", "assume mem: \"(mset xs, mset ys) \\<in> ns_mul_ext {(x, y). snd (P x y)} {(x, y). fst (P x y)}\""], ["proof (state)\nthis:\n  (mset xs, mset ys)\n  \\<in> ns_mul_ext {(x, y). snd (P x y)} {(x, y). fst (P x y)}\n\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> ns_mul_ext {(x, y). snd (P x y)}\n           {(x, y). fst (P x y)} \\<Longrightarrow>\n    (mset xs, mset ys)\n    \\<in> ns_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}", "show \"(mset xs, mset ys) \\<in> ns_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> ns_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}", "by (rule ns_mul_ext_local_mono[OF _ _ mem], insert assms, auto)"], ["proof (state)\nthis:\n  (mset xs, mset ys)\n  \\<in> ns_mul_ext {(x, y). snd (P' x y)} {(x, y). fst (P' x y)}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Special case: non-strict order is equality\\<close>"], ["", "lemma ns_mul_ext_IdE:\n  assumes \"(M, N) \\<in> ns_mul_ext Id R\"\n  obtains X and Y and Z where \"M = X + Z\" and \"N = Y + Z\"\n    and \"\\<forall>y \\<in> set_mset Y. \\<exists>x \\<in> set_mset X. (x, y) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X Z Y.\n        \\<lbrakk>M = X + Z; N = Y + Z;\n         \\<forall>y\\<in>#Y. \\<exists>x\\<in>#X. (x, y) \\<in> R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (M, N) \\<in> ns_mul_ext Id R\n\ngoal (1 subgoal):\n 1. (\\<And>X Z Y.\n        \\<lbrakk>M = X + Z; N = Y + Z;\n         \\<forall>y\\<in>#Y. \\<exists>x\\<in>#X. (x, y) \\<in> R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: ns_mul_ext_def elim!: mult2_alt_nsE) (insert union_commute, blast)"], ["", "lemma ns_mul_ext_IdI:\n  assumes \"M = X + Z\" and \"N = Y + Z\" and \"\\<forall>y \\<in> set_mset Y. \\<exists>x \\<in> set_mset X. (x, y) \\<in> R\"\n  shows \"(M, N) \\<in> ns_mul_ext Id R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, N) \\<in> ns_mul_ext Id R", "using assms mult2_alt_nsI[of N Z Y M Z X Id \"R\\<inverse>\"]"], ["proof (prove)\nusing this:\n  M = X + Z\n  N = Y + Z\n  \\<forall>y\\<in>#Y. \\<exists>x\\<in>#X. (x, y) \\<in> R\n  \\<lbrakk>N = Z + Y; M = Z + X; (Z, Z) \\<in> multpw Id;\n   \\<forall>x.\n      x \\<in># Y \\<longrightarrow>\n      (\\<exists>y. y \\<in># X \\<and> (x, y) \\<in> R\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> (N, M) \\<in> mult2_alt_ns Id (R\\<inverse>)\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> ns_mul_ext Id R", "by (auto simp: ns_mul_ext_def)"], ["", "lemma s_mul_ext_IdE:\n  assumes \"(M, N) \\<in> s_mul_ext Id R\"\n  obtains X and Y and Z where \"X \\<noteq> {#}\" and \"M = X + Z\" and \"N = Y + Z\"\n    and \"\\<forall>y \\<in> set_mset Y. \\<exists>x \\<in> set_mset X. (x, y) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>X Z Y.\n        \\<lbrakk>X \\<noteq> {#}; M = X + Z; N = Y + Z;\n         \\<forall>y\\<in>#Y. \\<exists>x\\<in>#X. (x, y) \\<in> R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  (M, N) \\<in> s_mul_ext Id R\n\ngoal (1 subgoal):\n 1. (\\<And>X Z Y.\n        \\<lbrakk>X \\<noteq> {#}; M = X + Z; N = Y + Z;\n         \\<forall>y\\<in>#Y. \\<exists>x\\<in>#X. (x, y) \\<in> R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: s_mul_ext_def elim!: mult2_alt_sE) (metis union_commute)"], ["", "lemma s_mul_ext_IdI:\n  assumes \"X \\<noteq> {#}\" and \"M = X + Z\" and \"N = Y + Z\"\n    and \"\\<forall>y \\<in> set_mset Y. \\<exists>x \\<in> set_mset X. (x, y) \\<in> R\"\n  shows \"(M, N) \\<in> s_mul_ext Id R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, N) \\<in> s_mul_ext Id R", "using assms mult2_alt_sI[of N Z Y M Z X Id \"R\\<inverse>\"]"], ["proof (prove)\nusing this:\n  X \\<noteq> {#}\n  M = X + Z\n  N = Y + Z\n  \\<forall>y\\<in>#Y. \\<exists>x\\<in>#X. (x, y) \\<in> R\n  \\<lbrakk>N = Z + Y; M = Z + X; (Z, Z) \\<in> multpw Id; X \\<noteq> {#};\n   \\<forall>x.\n      x \\<in># Y \\<longrightarrow>\n      (\\<exists>y. y \\<in># X \\<and> (x, y) \\<in> R\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> (N, M) \\<in> mult2_alt_s Id (R\\<inverse>)\n\ngoal (1 subgoal):\n 1. (M, N) \\<in> s_mul_ext Id R", "by (auto simp: s_mul_ext_def ac_simps)"], ["", "lemma mult_s_mul_ext_conv:\n  assumes \"trans R\"\n  shows \"(mult (R\\<inverse>))\\<inverse> = s_mul_ext Id R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mult (R\\<inverse>))\\<inverse> = s_mul_ext Id R", "using mult2_s_eq_mult2_s_alt[of Id \"R\\<inverse>\"] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>Id O R\\<inverse> \\<subseteq> R\\<inverse>; refl Id;\n   trans (R\\<inverse>)\\<rbrakk>\n  \\<Longrightarrow> mult2_alt_s Id (R\\<inverse>) = mult2_s Id (R\\<inverse>)\n  trans R\n\ngoal (1 subgoal):\n 1. (mult (R\\<inverse>))\\<inverse> = s_mul_ext Id R", "by (auto simp: s_mul_ext_def refl_Id mult2_s_def)"], ["", "lemma ns_mul_ext_Id_eq:\n  \"ns_mul_ext Id R = (s_mul_ext Id R)\\<^sup>=\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ns_mul_ext Id R = (s_mul_ext Id R)\\<^sup>=", "by (auto simp add: ns_mul_ext_def s_mul_ext_def mult2_alt_ns_conv)"], ["", "lemma subseteq_mset_imp_ns_mul_ext_Id:\n  assumes \"A \\<subseteq># B\"\n  shows \"(B, A) \\<in> ns_mul_ext Id R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (B, A) \\<in> ns_mul_ext Id R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (B, A) \\<in> ns_mul_ext Id R", "obtain C where [simp]: \"B = C + A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C. B = C + A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  A \\<subseteq># B\n\ngoal (1 subgoal):\n 1. (\\<And>C. B = C + A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto simp: mset_subset_eq_exists_conv ac_simps)"], ["proof (state)\nthis:\n  B = C + A\n\ngoal (1 subgoal):\n 1. (B, A) \\<in> ns_mul_ext Id R", "have \"(C + A, {#} + A) \\<in> ns_mul_ext Id R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (C + A, {#} + A) \\<in> ns_mul_ext Id R", "by (intro ns_mul_ext_IdI [of _ C A _ \"{#}\"]) auto"], ["proof (state)\nthis:\n  (C + A, {#} + A) \\<in> ns_mul_ext Id R\n\ngoal (1 subgoal):\n 1. (B, A) \\<in> ns_mul_ext Id R", "then"], ["proof (chain)\npicking this:\n  (C + A, {#} + A) \\<in> ns_mul_ext Id R", "show ?thesis"], ["proof (prove)\nusing this:\n  (C + A, {#} + A) \\<in> ns_mul_ext Id R\n\ngoal (1 subgoal):\n 1. (B, A) \\<in> ns_mul_ext Id R", "by simp"], ["proof (state)\nthis:\n  (B, A) \\<in> ns_mul_ext Id R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subset_mset_imp_s_mul_ext_Id:\n  assumes \"A \\<subset># B\"\n  shows \"(B, A) \\<in> s_mul_ext Id R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (B, A) \\<in> s_mul_ext Id R", "using assms"], ["proof (prove)\nusing this:\n  A \\<subset># B\n\ngoal (1 subgoal):\n 1. (B, A) \\<in> s_mul_ext Id R", "by (intro supset_imp_s_mul_ext) (auto simp: refl_Id)"], ["", "end"]]}