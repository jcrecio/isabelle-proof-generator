{"file_name": "/home/qj213/afp-2021-10-22/thys/Gaussian_Integers/Gaussian_Integers_Sums_Of_Two_Squares.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Gaussian_Integers", "problem_names": ["lemma sum_of_2_squares_nat_altdef: \"sum_of_2_squares_nat n \\<longleftrightarrow> n \\<in> range gauss_int_norm\"", "lemma sum_of_2_squares_nat_gauss_int_norm [intro]: \"sum_of_2_squares_nat (gauss_int_norm z)\"", "lemma sum_of_2_squares_nat_0 [simp, intro]: \"sum_of_2_squares_nat 0\" \n  and sum_of_2_squares_nat_1 [simp, intro]: \"sum_of_2_squares_nat 1\"\n  and sum_of_2_squares_nat_Suc_0 [simp, intro]: \"sum_of_2_squares_nat (Suc 0)\"\n  and sum_of_2_squares_nat_2 [simp, intro]: \"sum_of_2_squares_nat 2\"", "lemma sum_of_2_squares_nat_mult [intro]:\n  assumes \"sum_of_2_squares_nat x\" \"sum_of_2_squares_nat y\"\n  shows   \"sum_of_2_squares_nat (x * y)\"", "lemma sum_of_2_squares_nat_power [intro]:\n  assumes \"sum_of_2_squares_nat m\"\n  shows   \"sum_of_2_squares_nat (m ^ n)\"", "lemma sum_of_2_squares_nat_prod [intro]:\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> sum_of_2_squares_nat (f x)\"\n  shows   \"sum_of_2_squares_nat (\\<Prod>x\\<in>A. f x)\"", "lemma sum_of_2_squares_nat_prod_mset [intro]:\n  assumes \"\\<And>x. x \\<in># A \\<Longrightarrow> sum_of_2_squares_nat x\"\n  shows   \"sum_of_2_squares_nat (prod_mset A)\"", "lemma sum_of_2_squares_nat_necessary:\n  assumes \"sum_of_2_squares_nat n\" \"n > 0\"\n  assumes \"prime p\" \"[p = 3] (mod 4)\"\n  shows   \"even (multiplicity p n)\"", "lemma sum_of_2_squares_nat_sufficient:\n  fixes n :: nat\n  assumes \"n > 0\"\n  assumes \"\\<And>p. p \\<in> prime_factors n \\<Longrightarrow> [p = 3] (mod 4) \\<Longrightarrow> even (multiplicity p n)\"\n  shows \"sum_of_2_squares_nat n\"", "theorem sum_of_2_squares_nat_iff:\n  \"sum_of_2_squares_nat n \\<longleftrightarrow>\n     n = 0 \\<or> (\\<forall>p\\<in>prime_factors n. [p = 3] (mod 4) \\<longrightarrow> even (multiplicity p n))\""], "translations": [["", "lemma sum_of_2_squares_nat_altdef: \"sum_of_2_squares_nat n \\<longleftrightarrow> n \\<in> range gauss_int_norm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n = (n \\<in> range gauss_int_norm)", "proof (safe elim!: sum_of_2_squares_nat.cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       n = a\\<^sup>2 + b\\<^sup>2 \\<Longrightarrow>\n       a\\<^sup>2 + b\\<^sup>2 \\<in> range gauss_int_norm\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; n = gauss_int_norm x\\<rbrakk>\n       \\<Longrightarrow> sum_of_2_squares_nat (gauss_int_norm x)", "fix a b :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       n = a\\<^sup>2 + b\\<^sup>2 \\<Longrightarrow>\n       a\\<^sup>2 + b\\<^sup>2 \\<in> range gauss_int_norm\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; n = gauss_int_norm x\\<rbrakk>\n       \\<Longrightarrow> sum_of_2_squares_nat (gauss_int_norm x)", "have \"a ^ 2 + b ^ 2 = gauss_int_norm (of_nat a + \\<i>\\<^sub>\\<int> * of_nat b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a\\<^sup>2 + b\\<^sup>2 = gauss_int_norm (of_nat a + gauss_i * of_nat b)", "by (auto simp: gauss_int_norm_def nat_add_distrib nat_power_eq)"], ["proof (state)\nthis:\n  a\\<^sup>2 + b\\<^sup>2 = gauss_int_norm (of_nat a + gauss_i * of_nat b)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       n = a\\<^sup>2 + b\\<^sup>2 \\<Longrightarrow>\n       a\\<^sup>2 + b\\<^sup>2 \\<in> range gauss_int_norm\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; n = gauss_int_norm x\\<rbrakk>\n       \\<Longrightarrow> sum_of_2_squares_nat (gauss_int_norm x)", "thus \"a ^ 2 + b ^ 2 \\<in> range gauss_int_norm\""], ["proof (prove)\nusing this:\n  a\\<^sup>2 + b\\<^sup>2 = gauss_int_norm (of_nat a + gauss_i * of_nat b)\n\ngoal (1 subgoal):\n 1. a\\<^sup>2 + b\\<^sup>2 \\<in> range gauss_int_norm", "by blast"], ["proof (state)\nthis:\n  a\\<^sup>2 + b\\<^sup>2 \\<in> range gauss_int_norm\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; n = gauss_int_norm x\\<rbrakk>\n       \\<Longrightarrow> sum_of_2_squares_nat (gauss_int_norm x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; n = gauss_int_norm x\\<rbrakk>\n       \\<Longrightarrow> sum_of_2_squares_nat (gauss_int_norm x)", "fix z :: gauss_int"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; n = gauss_int_norm x\\<rbrakk>\n       \\<Longrightarrow> sum_of_2_squares_nat (gauss_int_norm x)", "have \"gauss_int_norm z = nat \\<bar>ReZ z\\<bar> ^ 2 + nat \\<bar>ImZ z\\<bar> ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gauss_int_norm z =\n    (nat \\<bar>ReZ z\\<bar>)\\<^sup>2 + (nat \\<bar>ImZ z\\<bar>)\\<^sup>2", "by (auto simp: gauss_int_norm_def nat_add_distrib simp flip: nat_power_eq)"], ["proof (state)\nthis:\n  gauss_int_norm z =\n  (nat \\<bar>ReZ z\\<bar>)\\<^sup>2 + (nat \\<bar>ImZ z\\<bar>)\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> UNIV; n = gauss_int_norm x\\<rbrakk>\n       \\<Longrightarrow> sum_of_2_squares_nat (gauss_int_norm x)", "thus \"sum_of_2_squares_nat (gauss_int_norm z)\""], ["proof (prove)\nusing this:\n  gauss_int_norm z =\n  (nat \\<bar>ReZ z\\<bar>)\\<^sup>2 + (nat \\<bar>ImZ z\\<bar>)\\<^sup>2\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (gauss_int_norm z)", "by (auto intro: sum_of_2_squares_nat.intros)"], ["proof (state)\nthis:\n  sum_of_2_squares_nat (gauss_int_norm z)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_of_2_squares_nat_gauss_int_norm [intro]: \"sum_of_2_squares_nat (gauss_int_norm z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (gauss_int_norm z)", "by (auto simp: sum_of_2_squares_nat_altdef)"], ["", "lemma sum_of_2_squares_nat_0 [simp, intro]: \"sum_of_2_squares_nat 0\" \n  and sum_of_2_squares_nat_1 [simp, intro]: \"sum_of_2_squares_nat 1\"\n  and sum_of_2_squares_nat_Suc_0 [simp, intro]: \"sum_of_2_squares_nat (Suc 0)\"\n  and sum_of_2_squares_nat_2 [simp, intro]: \"sum_of_2_squares_nat 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sum_of_2_squares_nat 0 &&& sum_of_2_squares_nat 1) &&&\n    sum_of_2_squares_nat (Suc 0) &&& sum_of_2_squares_nat 2", "using sum_of_2_squares_nat.intros[of 0 0] sum_of_2_squares_nat.intros[of 0 1]\n        sum_of_2_squares_nat.intros[of 1 1]"], ["proof (prove)\nusing this:\n  sum_of_2_squares_nat (0\\<^sup>2 + 0\\<^sup>2)\n  sum_of_2_squares_nat (0\\<^sup>2 + 1\\<^sup>2)\n  sum_of_2_squares_nat (1\\<^sup>2 + 1\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (sum_of_2_squares_nat 0 &&& sum_of_2_squares_nat 1) &&&\n    sum_of_2_squares_nat (Suc 0) &&& sum_of_2_squares_nat 2", "by (simp_all add: numeral_2_eq_2)"], ["", "lemma sum_of_2_squares_nat_mult [intro]:\n  assumes \"sum_of_2_squares_nat x\" \"sum_of_2_squares_nat y\"\n  shows   \"sum_of_2_squares_nat (x * y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (x * y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (x * y)", "from assms"], ["proof (chain)\npicking this:\n  sum_of_2_squares_nat x\n  sum_of_2_squares_nat y", "obtain z1 z2 where \"x = gauss_int_norm z1\" \"y = gauss_int_norm z2\""], ["proof (prove)\nusing this:\n  sum_of_2_squares_nat x\n  sum_of_2_squares_nat y\n\ngoal (1 subgoal):\n 1. (\\<And>z1 z2.\n        \\<lbrakk>x = gauss_int_norm z1; y = gauss_int_norm z2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: sum_of_2_squares_nat_altdef)"], ["proof (state)\nthis:\n  x = gauss_int_norm z1\n  y = gauss_int_norm z2\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (x * y)", "hence \"x * y = gauss_int_norm (z1 * z2)\""], ["proof (prove)\nusing this:\n  x = gauss_int_norm z1\n  y = gauss_int_norm z2\n\ngoal (1 subgoal):\n 1. x * y = gauss_int_norm (z1 * z2)", "by (simp add: gauss_int_norm_mult)"], ["proof (state)\nthis:\n  x * y = gauss_int_norm (z1 * z2)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (x * y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  x * y = gauss_int_norm (z1 * z2)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (x * y)", "by auto"], ["proof (state)\nthis:\n  sum_of_2_squares_nat (x * y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_of_2_squares_nat_power [intro]:\n  assumes \"sum_of_2_squares_nat m\"\n  shows   \"sum_of_2_squares_nat (m ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (m ^ n)", "using assms"], ["proof (prove)\nusing this:\n  sum_of_2_squares_nat m\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (m ^ n)", "by (induction n) auto"], ["", "lemma sum_of_2_squares_nat_prod [intro]:\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> sum_of_2_squares_nat (f x)\"\n  shows   \"sum_of_2_squares_nat (\\<Prod>x\\<in>A. f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (prod f A)", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> sum_of_2_squares_nat (f ?x)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (prod f A)", "by (induction A rule: infinite_finite_induct) auto"], ["", "lemma sum_of_2_squares_nat_prod_mset [intro]:\n  assumes \"\\<And>x. x \\<in># A \\<Longrightarrow> sum_of_2_squares_nat x\"\n  shows   \"sum_of_2_squares_nat (prod_mset A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (\\<Prod>\\<^sub># A)", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in># A \\<Longrightarrow> sum_of_2_squares_nat ?x\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (\\<Prod>\\<^sub># A)", "by (induction A) auto"], ["", "lemma sum_of_2_squares_nat_necessary:\n  assumes \"sum_of_2_squares_nat n\" \"n > 0\"\n  assumes \"prime p\" \"[p = 3] (mod 4)\"\n  shows   \"even (multiplicity p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "define k where \"k = multiplicity p n\""], ["proof (state)\nthis:\n  k = multiplicity p n\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "from assms"], ["proof (chain)\npicking this:\n  sum_of_2_squares_nat n\n  0 < n\n  prime p\n  [p = 3] (mod 4)", "obtain z where z: \"gauss_int_norm z = n\""], ["proof (prove)\nusing this:\n  sum_of_2_squares_nat n\n  0 < n\n  prime p\n  [p = 3] (mod 4)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        gauss_int_norm z = n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: sum_of_2_squares_nat_altdef)"], ["proof (state)\nthis:\n  gauss_int_norm z = n\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "from assms and z"], ["proof (chain)\npicking this:\n  sum_of_2_squares_nat n\n  0 < n\n  prime p\n  [p = 3] (mod 4)\n  gauss_int_norm z = n", "have [simp]: \"z \\<noteq> 0\""], ["proof (prove)\nusing this:\n  sum_of_2_squares_nat n\n  0 < n\n  prime p\n  [p = 3] (mod 4)\n  gauss_int_norm z = n\n\ngoal (1 subgoal):\n 1. z \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "have prime': \"prime (of_nat p :: gauss_int)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime (of_nat p)", "using assms prime_gauss_int_of_nat"], ["proof (prove)\nusing this:\n  sum_of_2_squares_nat n\n  0 < n\n  prime p\n  [p = 3] (mod 4)\n  \\<lbrakk>prime ?n; [?n = 3] (mod 4)\\<rbrakk>\n  \\<Longrightarrow> prime (of_nat ?n)\n\ngoal (1 subgoal):\n 1. prime (of_nat p)", "by blast"], ["proof (state)\nthis:\n  prime (of_nat p)\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "have [simp]: \"multiplicity (of_nat p) (gauss_cnj z) = multiplicity (of_nat p) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (of_nat p) (gauss_cnj z) = multiplicity (of_nat p) z", "using multiplicity_gauss_cnj[of \"of_nat p\" z]"], ["proof (prove)\nusing this:\n  multiplicity (gauss_cnj (of_nat p)) (gauss_cnj z) =\n  multiplicity (of_nat p) z\n\ngoal (1 subgoal):\n 1. multiplicity (of_nat p) (gauss_cnj z) = multiplicity (of_nat p) z", "by simp"], ["proof (state)\nthis:\n  multiplicity (of_nat p) (gauss_cnj z) = multiplicity (of_nat p) z\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "have \"multiplicity (of_nat p) (of_nat n :: gauss_int) =\n        multiplicity (of_nat p) (z * gauss_cnj z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (of_nat p) (of_nat n) =\n    multiplicity (of_nat p) (z * gauss_cnj z)", "using z"], ["proof (prove)\nusing this:\n  gauss_int_norm z = n\n\ngoal (1 subgoal):\n 1. multiplicity (of_nat p) (of_nat n) =\n    multiplicity (of_nat p) (z * gauss_cnj z)", "by (simp add: self_mult_gauss_cnj)"], ["proof (state)\nthis:\n  multiplicity (of_nat p) (of_nat n) =\n  multiplicity (of_nat p) (z * gauss_cnj z)\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "also"], ["proof (state)\nthis:\n  multiplicity (of_nat p) (of_nat n) =\n  multiplicity (of_nat p) (z * gauss_cnj z)\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "have \"\\<dots> = 2 * multiplicity (of_nat p) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity (of_nat p) (z * gauss_cnj z) =\n    2 * multiplicity (of_nat p) z", "using prime'"], ["proof (prove)\nusing this:\n  prime (of_nat p)\n\ngoal (1 subgoal):\n 1. multiplicity (of_nat p) (z * gauss_cnj z) =\n    2 * multiplicity (of_nat p) z", "by (subst prime_elem_multiplicity_mult_distrib) auto"], ["proof (state)\nthis:\n  multiplicity (of_nat p) (z * gauss_cnj z) = 2 * multiplicity (of_nat p) z\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "finally"], ["proof (chain)\npicking this:\n  multiplicity (of_nat p) (of_nat n) = 2 * multiplicity (of_nat p) z", "have \"multiplicity p n = 2 * multiplicity (of_nat p) z\""], ["proof (prove)\nusing this:\n  multiplicity (of_nat p) (of_nat n) = 2 * multiplicity (of_nat p) z\n\ngoal (1 subgoal):\n 1. multiplicity p n = 2 * multiplicity (of_nat p) z", "by (subst (asm) multiplicity_gauss_int_of_nat)"], ["proof (state)\nthis:\n  multiplicity p n = 2 * multiplicity (of_nat p) z\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  multiplicity p n = 2 * multiplicity (of_nat p) z\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "by auto"], ["proof (state)\nthis:\n  even (multiplicity p n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_of_2_squares_nat_sufficient:\n  fixes n :: nat\n  assumes \"n > 0\"\n  assumes \"\\<And>p. p \\<in> prime_factors n \\<Longrightarrow> [p = 3] (mod 4) \\<Longrightarrow> even (multiplicity p n)\"\n  shows \"sum_of_2_squares_nat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "define P2 where \"P2 = {p\\<in>prime_factors n. [p = 1] (mod 4)}\""], ["proof (state)\nthis:\n  P2 = {p. p \\<in># prime_factorization n \\<and> [p = 1] (mod 4)}\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "define P3 where \"P3 = {p\\<in>prime_factors n. [p = 3] (mod 4)}\""], ["proof (state)\nthis:\n  P3 = {p. p \\<in># prime_factorization n \\<and> [p = 3] (mod 4)}\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "from \\<open>n > 0\\<close>"], ["proof (chain)\npicking this:\n  0 < n", "have \"n = (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n)\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. n = (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n)", "by (subst prime_factorization_nat) auto"], ["proof (state)\nthis:\n  n = (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "also"], ["proof (state)\nthis:\n  n = (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "have \"\\<dots> = (\\<Prod>p\\<in>{2}\\<union>P2\\<union>P3. p ^ multiplicity p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n) =\n    (\\<Prod>p\\<in>{2} \\<union> P2 \\<union> P3. p ^ multiplicity p n)", "using prime_mod_4_cases"], ["proof (prove)\nusing this:\n  prime ?p \\<Longrightarrow>\n  ?p = 2 \\<or> [?p = 1] (mod 4) \\<or> [?p = 3] (mod 4)\n\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n) =\n    (\\<Prod>p\\<in>{2} \\<union> P2 \\<union> P3. p ^ multiplicity p n)", "by (intro prod.mono_neutral_left)\n       (auto simp: P2_def P3_def in_prime_factors_iff not_dvd_imp_multiplicity_0)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>{2} \\<union> P2 \\<union> P3. p ^ multiplicity p n)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>{2} \\<union> P2 \\<union> P3. p ^ multiplicity p n)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "have \"\\<dots> = (\\<Prod>p\\<in>{2}\\<union>P2. p ^ multiplicity p n) * (\\<Prod>p\\<in>P3. p ^ multiplicity p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>{2} \\<union> P2 \\<union> P3. p ^ multiplicity p n) =\n    (\\<Prod>p\\<in>{2} \\<union> P2. p ^ multiplicity p n) *\n    (\\<Prod>p\\<in>P3. p ^ multiplicity p n)", "by (intro prod.union_disjoint) (auto simp: P2_def P3_def cong_def)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{2} \\<union> P2 \\<union> P3. p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>{2} \\<union> P2. p ^ multiplicity p n) *\n  (\\<Prod>p\\<in>P3. p ^ multiplicity p n)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{2} \\<union> P2 \\<union> P3. p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>{2} \\<union> P2. p ^ multiplicity p n) *\n  (\\<Prod>p\\<in>P3. p ^ multiplicity p n)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "have \"(\\<Prod>p\\<in>{2}\\<union>P2. p ^ multiplicity p n) =\n               2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>{2} \\<union> P2. p ^ multiplicity p n) =\n    2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n)", "by (subst prod.union_disjoint) (auto simp: P2_def cong_def)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{2} \\<union> P2. p ^ multiplicity p n) =\n  2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{2} \\<union> P2. p ^ multiplicity p n) =\n  2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "have \"(\\<Prod>p\\<in>P3. p ^ multiplicity p n) = (\\<Prod>p\\<in>P3. (p ^ 2) ^ (multiplicity p n div 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>P3. p ^ multiplicity p n) =\n    (\\<Prod>p\\<in>P3. p\\<^sup>2 ^ (multiplicity p n div 2))", "proof (intro prod.cong refl)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> P3 \\<Longrightarrow>\n       x ^ multiplicity x n = x\\<^sup>2 ^ (multiplicity x n div 2)", "fix p :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> P3 \\<Longrightarrow>\n       x ^ multiplicity x n = x\\<^sup>2 ^ (multiplicity x n div 2)", "assume p: \"p \\<in> P3\""], ["proof (state)\nthis:\n  p \\<in> P3\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> P3 \\<Longrightarrow>\n       x ^ multiplicity x n = x\\<^sup>2 ^ (multiplicity x n div 2)", "have \"(p ^ 2) ^ (multiplicity p n div 2) = p ^ (2 * (multiplicity p n div 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p\\<^sup>2 ^ (multiplicity p n div 2) =\n    p ^ (2 * (multiplicity p n div 2))", "by (simp add: power_mult)"], ["proof (state)\nthis:\n  p\\<^sup>2 ^ (multiplicity p n div 2) = p ^ (2 * (multiplicity p n div 2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> P3 \\<Longrightarrow>\n       x ^ multiplicity x n = x\\<^sup>2 ^ (multiplicity x n div 2)", "also"], ["proof (state)\nthis:\n  p\\<^sup>2 ^ (multiplicity p n div 2) = p ^ (2 * (multiplicity p n div 2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> P3 \\<Longrightarrow>\n       x ^ multiplicity x n = x\\<^sup>2 ^ (multiplicity x n div 2)", "have \"even (multiplicity p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "using assms p"], ["proof (prove)\nusing this:\n  0 < n\n  \\<lbrakk>?p \\<in># prime_factorization n; [?p = 3] (mod 4)\\<rbrakk>\n  \\<Longrightarrow> even (multiplicity ?p n)\n  p \\<in> P3\n\ngoal (1 subgoal):\n 1. even (multiplicity p n)", "by (auto simp: P3_def)"], ["proof (state)\nthis:\n  even (multiplicity p n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> P3 \\<Longrightarrow>\n       x ^ multiplicity x n = x\\<^sup>2 ^ (multiplicity x n div 2)", "hence \"2 * (multiplicity p n div 2) = multiplicity p n\""], ["proof (prove)\nusing this:\n  even (multiplicity p n)\n\ngoal (1 subgoal):\n 1. 2 * (multiplicity p n div 2) = multiplicity p n", "by simp"], ["proof (state)\nthis:\n  2 * (multiplicity p n div 2) = multiplicity p n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> P3 \\<Longrightarrow>\n       x ^ multiplicity x n = x\\<^sup>2 ^ (multiplicity x n div 2)", "finally"], ["proof (chain)\npicking this:\n  p\\<^sup>2 ^ (multiplicity p n div 2) = p ^ multiplicity p n", "show \"p ^ multiplicity p n = (p ^ 2) ^ (multiplicity p n div 2)\""], ["proof (prove)\nusing this:\n  p\\<^sup>2 ^ (multiplicity p n div 2) = p ^ multiplicity p n\n\ngoal (1 subgoal):\n 1. p ^ multiplicity p n = p\\<^sup>2 ^ (multiplicity p n div 2)", "by simp"], ["proof (state)\nthis:\n  p ^ multiplicity p n = p\\<^sup>2 ^ (multiplicity p n div 2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>P3. p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>P3. p\\<^sup>2 ^ (multiplicity p n div 2))\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "finally"], ["proof (chain)\npicking this:\n  n =\n  2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n) *\n  (\\<Prod>p\\<in>P3. p\\<^sup>2 ^ (multiplicity p n div 2))", "have \"n = 2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n) * \n                      (\\<Prod>p\\<in>P3. p\\<^sup>2 ^ (multiplicity p n div 2))\""], ["proof (prove)\nusing this:\n  n =\n  2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n) *\n  (\\<Prod>p\\<in>P3. p\\<^sup>2 ^ (multiplicity p n div 2))\n\ngoal (1 subgoal):\n 1. n =\n    2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n) *\n    (\\<Prod>p\\<in>P3. p\\<^sup>2 ^ (multiplicity p n div 2))", "."], ["proof (state)\nthis:\n  n =\n  2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n) *\n  (\\<Prod>p\\<in>P3. p\\<^sup>2 ^ (multiplicity p n div 2))\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "also"], ["proof (state)\nthis:\n  n =\n  2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n) *\n  (\\<Prod>p\\<in>P3. p\\<^sup>2 ^ (multiplicity p n div 2))\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "have \"sum_of_2_squares_nat \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat\n     (2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n) *\n      (\\<Prod>p\\<in>P3. p\\<^sup>2 ^ (multiplicity p n div 2)))", "proof (intro sum_of_2_squares_nat_mult sum_of_2_squares_nat_prod; rule sum_of_2_squares_nat_power)"], ["proof (state)\ngoal (3 subgoals):\n 1. sum_of_2_squares_nat 2\n 2. \\<And>p. p \\<in> P2 \\<Longrightarrow> sum_of_2_squares_nat p\n 3. \\<And>p. p \\<in> P3 \\<Longrightarrow> sum_of_2_squares_nat (p\\<^sup>2)", "fix p :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. sum_of_2_squares_nat 2\n 2. \\<And>p. p \\<in> P2 \\<Longrightarrow> sum_of_2_squares_nat p\n 3. \\<And>p. p \\<in> P3 \\<Longrightarrow> sum_of_2_squares_nat (p\\<^sup>2)", "assume p: \"p \\<in> P2\""], ["proof (state)\nthis:\n  p \\<in> P2\n\ngoal (3 subgoals):\n 1. sum_of_2_squares_nat 2\n 2. \\<And>p. p \\<in> P2 \\<Longrightarrow> sum_of_2_squares_nat p\n 3. \\<And>p. p \\<in> P3 \\<Longrightarrow> sum_of_2_squares_nat (p\\<^sup>2)", "with prime_cong_1_mod_4_gauss_int_norm_exists[of p]"], ["proof (chain)\npicking this:\n  \\<lbrakk>prime p; [p = 1] (mod 4)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       gauss_int_norm z = p \\<and>\n                       0 < ReZ z \\<and> 0 < ImZ z\n  p \\<in> P2", "show \"sum_of_2_squares_nat p\""], ["proof (prove)\nusing this:\n  \\<lbrakk>prime p; [p = 1] (mod 4)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>z.\n                       gauss_int_norm z = p \\<and>\n                       0 < ReZ z \\<and> 0 < ImZ z\n  p \\<in> P2\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat p", "by (auto simp: P2_def)"], ["proof (state)\nthis:\n  sum_of_2_squares_nat p\n\ngoal (2 subgoals):\n 1. sum_of_2_squares_nat 2\n 2. \\<And>p. p \\<in> P3 \\<Longrightarrow> sum_of_2_squares_nat (p\\<^sup>2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. sum_of_2_squares_nat 2\n 2. \\<And>p. p \\<in> P3 \\<Longrightarrow> sum_of_2_squares_nat (p\\<^sup>2)", "fix p :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. sum_of_2_squares_nat 2\n 2. \\<And>p. p \\<in> P3 \\<Longrightarrow> sum_of_2_squares_nat (p\\<^sup>2)", "assume p: \"p \\<in> P3\""], ["proof (state)\nthis:\n  p \\<in> P3\n\ngoal (2 subgoals):\n 1. sum_of_2_squares_nat 2\n 2. \\<And>p. p \\<in> P3 \\<Longrightarrow> sum_of_2_squares_nat (p\\<^sup>2)", "have \"sum_of_2_squares_nat (gauss_int_norm (of_nat p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (gauss_int_norm (of_nat p))", ".."], ["proof (state)\nthis:\n  sum_of_2_squares_nat (gauss_int_norm (of_nat p))\n\ngoal (2 subgoals):\n 1. sum_of_2_squares_nat 2\n 2. \\<And>p. p \\<in> P3 \\<Longrightarrow> sum_of_2_squares_nat (p\\<^sup>2)", "also"], ["proof (state)\nthis:\n  sum_of_2_squares_nat (gauss_int_norm (of_nat p))\n\ngoal (2 subgoals):\n 1. sum_of_2_squares_nat 2\n 2. \\<And>p. p \\<in> P3 \\<Longrightarrow> sum_of_2_squares_nat (p\\<^sup>2)", "have \"gauss_int_norm (of_nat p) = p ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gauss_int_norm (of_nat p) = p\\<^sup>2", "by simp"], ["proof (state)\nthis:\n  gauss_int_norm (of_nat p) = p\\<^sup>2\n\ngoal (2 subgoals):\n 1. sum_of_2_squares_nat 2\n 2. \\<And>p. p \\<in> P3 \\<Longrightarrow> sum_of_2_squares_nat (p\\<^sup>2)", "finally"], ["proof (chain)\npicking this:\n  sum_of_2_squares_nat (p\\<^sup>2)", "show \"sum_of_2_squares_nat (p ^ 2)\""], ["proof (prove)\nusing this:\n  sum_of_2_squares_nat (p\\<^sup>2)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat (p\\<^sup>2)", "."], ["proof (state)\nthis:\n  sum_of_2_squares_nat (p\\<^sup>2)\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat 2", "qed auto"], ["proof (state)\nthis:\n  sum_of_2_squares_nat\n   (2 ^ multiplicity 2 n * (\\<Prod>p\\<in>P2. p ^ multiplicity p n) *\n    (\\<Prod>p\\<in>P3. p\\<^sup>2 ^ (multiplicity p n div 2)))\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "finally"], ["proof (chain)\npicking this:\n  sum_of_2_squares_nat n", "show ?thesis"], ["proof (prove)\nusing this:\n  sum_of_2_squares_nat n\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n", "."], ["proof (state)\nthis:\n  sum_of_2_squares_nat n\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem sum_of_2_squares_nat_iff:\n  \"sum_of_2_squares_nat n \\<longleftrightarrow>\n     n = 0 \\<or> (\\<forall>p\\<in>prime_factors n. [p = 3] (mod 4) \\<longrightarrow> even (multiplicity p n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n =\n    (n = 0 \\<or>\n     (\\<forall>p\\<in>#prime_factorization n.\n         [p = 3] (mod 4) \\<longrightarrow> even (multiplicity p n)))", "using sum_of_2_squares_nat_necessary[of n] sum_of_2_squares_nat_sufficient[of n]"], ["proof (prove)\nusing this:\n  \\<lbrakk>sum_of_2_squares_nat n; 0 < n; prime ?p;\n   [?p = 3] (mod 4)\\<rbrakk>\n  \\<Longrightarrow> even (multiplicity ?p n)\n  \\<lbrakk>0 < n;\n   \\<And>p.\n      \\<lbrakk>p \\<in># prime_factorization n; [p = 3] (mod 4)\\<rbrakk>\n      \\<Longrightarrow> even (multiplicity p n)\\<rbrakk>\n  \\<Longrightarrow> sum_of_2_squares_nat n\n\ngoal (1 subgoal):\n 1. sum_of_2_squares_nat n =\n    (n = 0 \\<or>\n     (\\<forall>p\\<in>#prime_factorization n.\n         [p = 3] (mod 4) \\<longrightarrow> even (multiplicity p n)))", "by auto"], ["", "end"]]}