{"file_name": "/home/qj213/afp-2021-10-22/thys/Open_Induction/Open_Induction.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Open_Induction", "problem_names": ["lemma lbI [Pure.intro]:\n  \"(\\<And>y. y \\<in> B \\<Longrightarrow> P\\<^sup>=\\<^sup>= x y) \\<Longrightarrow> lb P B x\"", "lemma glbI [Pure.intro]:\n  \"lb P B x \\<Longrightarrow> (\\<And>y. lb P B y \\<Longrightarrow> P\\<^sup>=\\<^sup>= y x) \\<Longrightarrow> glb P B x\"", "lemma glb_unique:\n  \"antisymp_on P A \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> glb P B x \\<Longrightarrow> glb P B y \\<Longrightarrow> x = y\"", "lemma chain_glb:\n  assumes \"transp_on (\\<sqsubset>) A\"\n  shows \"chain C \\<Longrightarrow> glb (\\<sqsubset>) C x \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> y \\<sqsubset> x \\<Longrightarrow> chain ({y} \\<union> C)\"", "lemma openI [Pure.intro]:\n  \"(\\<And>C. chain C \\<Longrightarrow> C \\<noteq> {} \\<Longrightarrow> \\<exists>x\\<in>A. glb (\\<sqsubset>) C x \\<and> Q x \\<Longrightarrow> \\<exists>y\\<in>C. Q y) \\<Longrightarrow> open Q\"", "lemma open_glb:\n  \"\\<lbrakk>chain C; C \\<noteq> {}; open Q; \\<forall>x\\<in>C. \\<not> Q x; x \\<in> A; glb (\\<sqsubset>) C x\\<rbrakk> \\<Longrightarrow> \\<not> Q x\"", "lemma downward_completeI [Pure.intro]:\n  assumes \"\\<And>C. chain C \\<Longrightarrow> C \\<noteq> {} \\<Longrightarrow> \\<exists>x\\<in>A. glb (\\<sqsubset>) C x\"\n  shows \"downward_complete\"", "lemmas open_on_def = pred_on.open_def\n  and dc_on_def = pred_on.downward_complete_def", "lemma dc_onI [Pure.intro]:\n  assumes \"\\<And>C. chain_on P C A \\<Longrightarrow> C \\<noteq> {} \\<Longrightarrow> \\<exists>x\\<in>A. glb P C x\"\n  shows \"dc_on P A\"", "lemma open_onI [Pure.intro]:\n  \"(\\<And>C. chain_on P C A \\<Longrightarrow> C \\<noteq> {} \\<Longrightarrow> \\<exists>x\\<in>A. glb P C x \\<and> Q x \\<Longrightarrow> \\<exists>y\\<in>C. Q y) \\<Longrightarrow> open_on P Q A\"", "lemma chain_on_reflclp:\n  \"chain_on P\\<^sup>=\\<^sup>= A C \\<longleftrightarrow> chain_on P A C\"", "lemma lb_reflclp:\n  \"lb P\\<^sup>=\\<^sup>= B x \\<longleftrightarrow> lb P B x\"", "lemma glb_reflclp:\n  \"glb P\\<^sup>=\\<^sup>= B x \\<longleftrightarrow> glb P B x\"", "lemma dc_on_reflclp:\n  \"dc_on P\\<^sup>=\\<^sup>= A \\<longleftrightarrow> dc_on P A\"", "lemma open_induct_on [consumes 4, case_names less]:\n  assumes qo: \"qo_on P A\" and \"dc_on P A\" and \"open_on P Q A\"\n    and \"x \\<in> A\"\n    and ind: \"\\<And>x. \\<lbrakk>x \\<in> A; \\<And>y. \\<lbrakk>y \\<in> A; strict P y x\\<rbrakk> \\<Longrightarrow> Q y\\<rbrakk> \\<Longrightarrow> Q x\"\n  shows \"Q x\"", "lemma (in preorder) dc_open_induct [consumes 2, case_names less]:\n  assumes \"dc_on (\\<le>) UNIV\"\n    and \"open_on (\\<le>) Q UNIV\"\n    and \"\\<And>x. (\\<And>y. y < x \\<Longrightarrow> Q y) \\<Longrightarrow> Q x\"\n  shows \"Q x\"", "lemmas open_induct [consumes 1, case_names less] = dc_open_induct [OF dc_on_UNIV]"], "translations": [["", "lemma lbI [Pure.intro]:\n  \"(\\<And>y. y \\<in> B \\<Longrightarrow> P\\<^sup>=\\<^sup>= x y) \\<Longrightarrow> lb P B x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y \\<in> B \\<Longrightarrow> P\\<^sup>=\\<^sup>= x y) \\<Longrightarrow>\n    lb P B x", "by (auto simp: lb_def)"], ["", "text \\<open>\n  A set \\<open>B\\<close> has the \\emph{greatest lower bound} \\<open>x\\<close> iff \\<open>x\\<close> is\n  a lower bound of \\<open>B\\<close> \\emph{and} less than or equal to every\n  other lower bound of \\<open>B\\<close>.\n\\<close>"], ["", "definition \"glb P B x \\<longleftrightarrow> lb P B x \\<and> (\\<forall>y. lb P B y \\<longrightarrow> P\\<^sup>=\\<^sup>= y x)\""], ["", "lemma glbI [Pure.intro]:\n  \"lb P B x \\<Longrightarrow> (\\<And>y. lb P B y \\<Longrightarrow> P\\<^sup>=\\<^sup>= y x) \\<Longrightarrow> glb P B x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lb P B x;\n     \\<And>y. lb P B y \\<Longrightarrow> P\\<^sup>=\\<^sup>= y x\\<rbrakk>\n    \\<Longrightarrow> glb P B x", "by (auto simp: glb_def)"], ["", "text \\<open>Antisymmetric relations have unique glbs.\\<close>"], ["", "lemma glb_unique:\n  \"antisymp_on P A \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> glb P B x \\<Longrightarrow> glb P B y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>antisymp_on P A; x \\<in> A; y \\<in> A; glb P B x;\n     glb P B y\\<rbrakk>\n    \\<Longrightarrow> x = y", "by (auto simp: glb_def antisymp_on_def)"], ["", "context pred_on\nbegin"], ["", "lemma chain_glb:\n  assumes \"transp_on (\\<sqsubset>) A\"\n  shows \"chain C \\<Longrightarrow> glb (\\<sqsubset>) C x \\<Longrightarrow> x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> y \\<sqsubset> x \\<Longrightarrow> chain ({y} \\<union> C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>chain_on (\\<sqsubset>) C A; glb (\\<sqsubset>) C x; x \\<in> A;\n     y \\<in> A; y \\<sqsubset> x\\<rbrakk>\n    \\<Longrightarrow> chain_on (\\<sqsubset>) ({y} \\<union> C) A", "using assms [unfolded transp_on_def]"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>z\\<in>A.\n           x \\<sqsubset> y \\<and> y \\<sqsubset> z \\<longrightarrow>\n           x \\<sqsubset> z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>chain_on (\\<sqsubset>) C A; glb (\\<sqsubset>) C x; x \\<in> A;\n     y \\<in> A; y \\<sqsubset> x\\<rbrakk>\n    \\<Longrightarrow> chain_on (\\<sqsubset>) ({y} \\<union> C) A", "unfolding chain_def glb_def lb_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>z\\<in>A.\n           x \\<sqsubset> y \\<and> y \\<sqsubset> z \\<longrightarrow>\n           x \\<sqsubset> z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>C \\<subseteq> A \\<and>\n             (\\<forall>x\\<in>C.\n                 \\<forall>y\\<in>C.\n                    x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x);\n     Ball C ((\\<sqsubseteq>) x) \\<and>\n     (\\<forall>y.\n         Ball C ((\\<sqsubseteq>) y) \\<longrightarrow> y \\<sqsubseteq> x);\n     x \\<in> A; y \\<in> A; y \\<sqsubset> x\\<rbrakk>\n    \\<Longrightarrow> {y} \\<union> C \\<subseteq> A \\<and>\n                      (\\<forall>x\\<in>{y} \\<union> C.\n                          \\<forall>y\\<in>{y} \\<union> C.\n                             x \\<sqsubseteq> y \\<or> y \\<sqsubseteq> x)", "by (cases \"C = {}\") blast+"], ["", "subsection \\<open>Open Properties\\<close>"], ["", "definition \"open Q \\<longleftrightarrow> (\\<forall>C. chain C \\<and> C \\<noteq> {} \\<and> (\\<exists>x\\<in>A. glb (\\<sqsubset>) C x \\<and> Q x) \\<longrightarrow> (\\<exists>y\\<in>C. Q y))\""], ["", "lemma openI [Pure.intro]:\n  \"(\\<And>C. chain C \\<Longrightarrow> C \\<noteq> {} \\<Longrightarrow> \\<exists>x\\<in>A. glb (\\<sqsubset>) C x \\<and> Q x \\<Longrightarrow> \\<exists>y\\<in>C. Q y) \\<Longrightarrow> open Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>chain_on (\\<sqsubset>) C A; C \\<noteq> {};\n         \\<exists>x\\<in>A. glb (\\<sqsubset>) C x \\<and> Q x\\<rbrakk>\n        \\<Longrightarrow> \\<exists>y\\<in>C. Q y) \\<Longrightarrow>\n    open Q", "by (auto simp: open_def)"], ["", "lemma open_glb:\n  \"\\<lbrakk>chain C; C \\<noteq> {}; open Q; \\<forall>x\\<in>C. \\<not> Q x; x \\<in> A; glb (\\<sqsubset>) C x\\<rbrakk> \\<Longrightarrow> \\<not> Q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>chain_on (\\<sqsubset>) C A; C \\<noteq> {}; open Q;\n     \\<forall>x\\<in>C. \\<not> Q x; x \\<in> A; glb (\\<sqsubset>) C x\\<rbrakk>\n    \\<Longrightarrow> \\<not> Q x", "by (auto simp: open_def)"], ["", "subsection \\<open>Downward Completeness\\<close>"], ["", "text \\<open>\n  A relation \\<open>\\<sqsubset>\\<close> is \\emph{downward-complete} iff\n  every non-empty \\<open>\\<sqsubset>\\<close>-chain has a greatest lower bound.\n\\<close>"], ["", "definition \"downward_complete \\<longleftrightarrow> (\\<forall>C. chain C \\<and> C \\<noteq> {} \\<longrightarrow> (\\<exists>x\\<in>A. glb (\\<sqsubset>) C x))\""], ["", "lemma downward_completeI [Pure.intro]:\n  assumes \"\\<And>C. chain C \\<Longrightarrow> C \\<noteq> {} \\<Longrightarrow> \\<exists>x\\<in>A. glb (\\<sqsubset>) C x\"\n  shows \"downward_complete\""], ["proof (prove)\ngoal (1 subgoal):\n 1. downward_complete", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>chain_on (\\<sqsubset>) ?C A; ?C \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x\\<in>A. glb (\\<sqsubset>) ?C x\n\ngoal (1 subgoal):\n 1. downward_complete", "by (auto simp: downward_complete_def)"], ["", "end"], ["", "abbreviation \"open_on P Q A \\<equiv> pred_on.open A P Q\""], ["", "abbreviation \"dc_on P A \\<equiv> pred_on.downward_complete A P\""], ["", "lemmas open_on_def = pred_on.open_def\n  and dc_on_def = pred_on.downward_complete_def"], ["", "lemma dc_onI [Pure.intro]:\n  assumes \"\\<And>C. chain_on P C A \\<Longrightarrow> C \\<noteq> {} \\<Longrightarrow> \\<exists>x\\<in>A. glb P C x\"\n  shows \"dc_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dc_on P A", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>chain_on P ?C A; ?C \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x\\<in>A. glb P ?C x\n\ngoal (1 subgoal):\n 1. dc_on P A", "by (auto simp: dc_on_def)"], ["", "lemma open_onI [Pure.intro]:\n  \"(\\<And>C. chain_on P C A \\<Longrightarrow> C \\<noteq> {} \\<Longrightarrow> \\<exists>x\\<in>A. glb P C x \\<and> Q x \\<Longrightarrow> \\<exists>y\\<in>C. Q y) \\<Longrightarrow> open_on P Q A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>chain_on P C A; C \\<noteq> {};\n         \\<exists>x\\<in>A. glb P C x \\<and> Q x\\<rbrakk>\n        \\<Longrightarrow> \\<exists>y\\<in>C. Q y) \\<Longrightarrow>\n    open_on P Q A", "by (auto simp: open_on_def)"], ["", "lemma chain_on_reflclp:\n  \"chain_on P\\<^sup>=\\<^sup>= A C \\<longleftrightarrow> chain_on P A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain_on P\\<^sup>=\\<^sup>= A C = chain_on P A C", "by (auto simp: pred_on.chain_def)"], ["", "lemma lb_reflclp:\n  \"lb P\\<^sup>=\\<^sup>= B x \\<longleftrightarrow> lb P B x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lb P\\<^sup>=\\<^sup>= B x = lb P B x", "by (auto simp: lb_def)"], ["", "lemma glb_reflclp:\n  \"glb P\\<^sup>=\\<^sup>= B x \\<longleftrightarrow> glb P B x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. glb P\\<^sup>=\\<^sup>= B x = glb P B x", "by (auto simp: glb_def lb_reflclp)"], ["", "lemma dc_on_reflclp:\n  \"dc_on P\\<^sup>=\\<^sup>= A \\<longleftrightarrow> dc_on P A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dc_on P\\<^sup>=\\<^sup>= A = dc_on P A", "by (auto simp: dc_on_def chain_on_reflclp glb_reflclp)"], ["", "subsection \\<open>The Open Induction Principle\\<close>"], ["", "lemma open_induct_on [consumes 4, case_names less]:\n  assumes qo: \"qo_on P A\" and \"dc_on P A\" and \"open_on P Q A\"\n    and \"x \\<in> A\"\n    and ind: \"\\<And>x. \\<lbrakk>x \\<in> A; \\<And>y. \\<lbrakk>y \\<in> A; strict P y x\\<rbrakk> \\<Longrightarrow> Q y\\<rbrakk> \\<Longrightarrow> Q x\"\n  shows \"Q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q x", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow> False", "assume \"\\<not> Q x\""], ["proof (state)\nthis:\n  \\<not> Q x\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow> False", "let ?B = \"{x\\<in>A. \\<not> Q x}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow> False", "have \"?B \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> A. \\<not> Q x} \\<subseteq> A", "by blast"], ["proof (state)\nthis:\n  {x \\<in> A. \\<not> Q x} \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow> False", "interpret B: pred_on ?B P"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow> False", "from B.Hausdorff"], ["proof (chain)\npicking this:\n  Ex B.maxchain", "obtain M\n    where chain: \"B.chain M\"\n    and max: \"\\<And>C. B.chain C \\<Longrightarrow> M \\<subseteq> C \\<Longrightarrow> M = C\""], ["proof (prove)\nusing this:\n  Ex B.maxchain\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        \\<lbrakk>chain_on P M {x \\<in> A. \\<not> Q x};\n         \\<And>C.\n            \\<lbrakk>chain_on P C {x \\<in> A. \\<not> Q x};\n             M \\<subseteq> C\\<rbrakk>\n            \\<Longrightarrow> M = C\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: B.maxchain_def)"], ["proof (state)\nthis:\n  chain_on P M {x \\<in> A. \\<not> Q x}\n  \\<lbrakk>chain_on P ?C {x \\<in> A. \\<not> Q x}; M \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> M = ?C\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  chain_on P M {x \\<in> A. \\<not> Q x}\n  \\<lbrakk>chain_on P ?C {x \\<in> A. \\<not> Q x}; M \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> M = ?C", "have \"M \\<subseteq> ?B\""], ["proof (prove)\nusing this:\n  chain_on P M {x \\<in> A. \\<not> Q x}\n  \\<lbrakk>chain_on P ?C {x \\<in> A. \\<not> Q x}; M \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> M = ?C\n\ngoal (1 subgoal):\n 1. M \\<subseteq> {x \\<in> A. \\<not> Q x}", "by (auto simp: B.chain_def)"], ["proof (state)\nthis:\n  M \\<subseteq> {x \\<in> A. \\<not> Q x}\n\ngoal (1 subgoal):\n 1. \\<not> Q x \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"M = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. M = {} \\<Longrightarrow> False\n 2. M \\<noteq> {} \\<Longrightarrow> False", "assume \"M = {}\""], ["proof (state)\nthis:\n  M = {}\n\ngoal (2 subgoals):\n 1. M = {} \\<Longrightarrow> False\n 2. M \\<noteq> {} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  M = {}\n\ngoal (2 subgoals):\n 1. M = {} \\<Longrightarrow> False\n 2. M \\<noteq> {} \\<Longrightarrow> False", "have \"B.chain {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain_on P {x} {x \\<in> A. \\<not> Q x}", "using \\<open>x \\<in> A\\<close> and \\<open>\\<not> Q x\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> A\n  \\<not> Q x\n\ngoal (1 subgoal):\n 1. chain_on P {x} {x \\<in> A. \\<not> Q x}", "by (simp add: B.chain_def)"], ["proof (state)\nthis:\n  chain_on P {x} {x \\<in> A. \\<not> Q x}\n\ngoal (2 subgoals):\n 1. M = {} \\<Longrightarrow> False\n 2. M \\<noteq> {} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  M = {}\n  chain_on P {x} {x \\<in> A. \\<not> Q x}", "show False"], ["proof (prove)\nusing this:\n  M = {}\n  chain_on P {x} {x \\<in> A. \\<not> Q x}\n\ngoal (1 subgoal):\n 1. False", "using max"], ["proof (prove)\nusing this:\n  M = {}\n  chain_on P {x} {x \\<in> A. \\<not> Q x}\n  \\<lbrakk>chain_on P ?C {x \\<in> A. \\<not> Q x}; M \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> M = ?C\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "interpret A: pred_on A P"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["proof (state)\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "assume \"M \\<noteq> {}\""], ["proof (state)\nthis:\n  M \\<noteq> {}\n\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "have \"A.chain M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain_on P M A", "using chain"], ["proof (prove)\nusing this:\n  chain_on P M {x \\<in> A. \\<not> Q x}\n\ngoal (1 subgoal):\n 1. chain_on P M A", "by (auto simp: A.chain_def B.chain_def)"], ["proof (state)\nthis:\n  chain_on P M A\n\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  chain_on P M A\n\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "with \\<open>dc_on P A\\<close> and \\<open>M \\<noteq> {}\\<close>"], ["proof (chain)\npicking this:\n  A.downward_complete\n  M \\<noteq> {}\n  chain_on P M A", "obtain m\n      where \"m \\<in> A\" and \"glb P M m\""], ["proof (prove)\nusing this:\n  A.downward_complete\n  M \\<noteq> {}\n  chain_on P M A\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m \\<in> A; glb P M m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: A.downward_complete_def)"], ["proof (state)\nthis:\n  m \\<in> A\n  glb P M m\n\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  chain_on P M A\n  m \\<in> A\n  glb P M m", "have \"\\<not> Q m\" and \"m \\<in> ?B\""], ["proof (prove)\nusing this:\n  chain_on P M A\n  m \\<in> A\n  glb P M m\n\ngoal (1 subgoal):\n 1. \\<not> Q m &&& m \\<in> {x \\<in> A. \\<not> Q x}", "using A.open_glb [OF _ \\<open>M \\<noteq> {}\\<close> \\<open>open_on P Q A\\<close> _ _ \\<open>glb P M m\\<close>]\n      and \\<open>M \\<subseteq> ?B\\<close>"], ["proof (prove)\nusing this:\n  chain_on P M A\n  m \\<in> A\n  glb P M m\n  \\<lbrakk>chain_on P M A; \\<forall>x\\<in>M. \\<not> Q x; m \\<in> A\\<rbrakk>\n  \\<Longrightarrow> \\<not> Q m\n  M \\<subseteq> {x \\<in> A. \\<not> Q x}\n\ngoal (1 subgoal):\n 1. \\<not> Q m &&& m \\<in> {x \\<in> A. \\<not> Q x}", "by auto"], ["proof (state)\nthis:\n  \\<not> Q m\n  m \\<in> {x \\<in> A. \\<not> Q x}\n\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "from ind [OF \\<open>m \\<in> A\\<close>] and \\<open>\\<not> Q m\\<close>"], ["proof (chain)\npicking this:\n  (\\<And>y.\n      \\<lbrakk>y \\<in> A; strict P y m\\<rbrakk>\n      \\<Longrightarrow> Q y) \\<Longrightarrow>\n  Q m\n  \\<not> Q m", "obtain y\n      where \"y \\<in> A\" and \"strict P y m\" and \"\\<not> Q y\""], ["proof (prove)\nusing this:\n  (\\<And>y.\n      \\<lbrakk>y \\<in> A; strict P y m\\<rbrakk>\n      \\<Longrightarrow> Q y) \\<Longrightarrow>\n  Q m\n  \\<not> Q m\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> A; strict P y m; \\<not> Q y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  y \\<in> A\n  strict P y m\n  \\<not> Q y\n\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  y \\<in> A\n  strict P y m\n  \\<not> Q y", "have \"P y m\" and \"y \\<in> ?B\""], ["proof (prove)\nusing this:\n  y \\<in> A\n  strict P y m\n  \\<not> Q y\n\ngoal (1 subgoal):\n 1. P y m &&& y \\<in> {x \\<in> A. \\<not> Q x}", "by simp+"], ["proof (state)\nthis:\n  P y m\n  y \\<in> {x \\<in> A. \\<not> Q x}\n\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "from transp_on_subset [OF \\<open>?B \\<subseteq> A\\<close> qo_on_imp_transp_on [OF qo]]"], ["proof (chain)\npicking this:\n  transp_on P {x \\<in> A. \\<not> Q x}", "have \"transp_on P ?B\""], ["proof (prove)\nusing this:\n  transp_on P {x \\<in> A. \\<not> Q x}\n\ngoal (1 subgoal):\n 1. transp_on P {x \\<in> A. \\<not> Q x}", "."], ["proof (state)\nthis:\n  transp_on P {x \\<in> A. \\<not> Q x}\n\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "from B.chain_glb [OF this chain \\<open>glb P M m\\<close> \\<open>m \\<in> ?B\\<close> \\<open>y \\<in> ?B\\<close> \\<open>P y m\\<close>]"], ["proof (chain)\npicking this:\n  chain_on P ({y} \\<union> M) {x \\<in> A. \\<not> Q x}", "have \"B.chain ({y} \\<union> M)\""], ["proof (prove)\nusing this:\n  chain_on P ({y} \\<union> M) {x \\<in> A. \\<not> Q x}\n\ngoal (1 subgoal):\n 1. chain_on P ({y} \\<union> M) {x \\<in> A. \\<not> Q x}", "."], ["proof (state)\nthis:\n  chain_on P ({y} \\<union> M) {x \\<in> A. \\<not> Q x}\n\ngoal (1 subgoal):\n 1. M \\<noteq> {} \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  chain_on P ({y} \\<union> M) {x \\<in> A. \\<not> Q x}", "show False"], ["proof (prove)\nusing this:\n  chain_on P ({y} \\<union> M) {x \\<in> A. \\<not> Q x}\n\ngoal (1 subgoal):\n 1. False", "using \\<open>glb P M m\\<close> and \\<open>strict P y m\\<close>"], ["proof (prove)\nusing this:\n  chain_on P ({y} \\<union> M) {x \\<in> A. \\<not> Q x}\n  glb P M m\n  strict P y m\n\ngoal (1 subgoal):\n 1. False", "by (cases \"y \\<in> M\") (auto dest: max simp: glb_def lb_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Open Induction on Universal Domains\\<close>"], ["", "text \\<open>Open induction on quasi-orders (i.e., @{class preorder}).\\<close>"], ["", "lemma (in preorder) dc_open_induct [consumes 2, case_names less]:\n  assumes \"dc_on (\\<le>) UNIV\"\n    and \"open_on (\\<le>) Q UNIV\"\n    and \"\\<And>x. (\\<And>y. y < x \\<Longrightarrow> Q y) \\<Longrightarrow> Q x\"\n  shows \"Q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Q x", "have \"qo_on (\\<le>) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. qo_on (\\<le>) UNIV", "by (auto simp: qo_on_def transp_on_def reflp_on_def dest: order_trans)"], ["proof (state)\nthis:\n  qo_on (\\<le>) UNIV\n\ngoal (1 subgoal):\n 1. Q x", "from open_induct_on [OF this assms(1,2)]"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> UNIV;\n   \\<And>x.\n      \\<lbrakk>x \\<in> UNIV;\n       \\<And>y.\n          \\<lbrakk>y \\<in> UNIV; strict (\\<le>) y x\\<rbrakk>\n          \\<Longrightarrow> Q y\\<rbrakk>\n      \\<Longrightarrow> Q x\\<rbrakk>\n  \\<Longrightarrow> Q ?x", "show \"Q x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> UNIV;\n   \\<And>x.\n      \\<lbrakk>x \\<in> UNIV;\n       \\<And>y.\n          \\<lbrakk>y \\<in> UNIV; strict (\\<le>) y x\\<rbrakk>\n          \\<Longrightarrow> Q y\\<rbrakk>\n      \\<Longrightarrow> Q x\\<rbrakk>\n  \\<Longrightarrow> Q ?x\n\ngoal (1 subgoal):\n 1. Q x", "using assms(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> UNIV;\n   \\<And>x.\n      \\<lbrakk>x \\<in> UNIV;\n       \\<And>y.\n          \\<lbrakk>y \\<in> UNIV; strict (\\<le>) y x\\<rbrakk>\n          \\<Longrightarrow> Q y\\<rbrakk>\n      \\<Longrightarrow> Q x\\<rbrakk>\n  \\<Longrightarrow> Q ?x\n  (\\<And>y. y < ?x \\<Longrightarrow> Q y) \\<Longrightarrow> Q ?x\n\ngoal (1 subgoal):\n 1. Q x", "unfolding less_le_not_le"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> UNIV;\n   \\<And>x.\n      \\<lbrakk>x \\<in> UNIV;\n       \\<And>y.\n          \\<lbrakk>y \\<in> UNIV; strict (\\<le>) y x\\<rbrakk>\n          \\<Longrightarrow> Q y\\<rbrakk>\n      \\<Longrightarrow> Q x\\<rbrakk>\n  \\<Longrightarrow> Q ?x\n  (\\<And>y. strict (\\<le>) y ?x \\<Longrightarrow> Q y) \\<Longrightarrow>\n  Q ?x\n\ngoal (1 subgoal):\n 1. Q x", "by blast"], ["proof (state)\nthis:\n  Q x\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Type Class of Downward Complete Orders\\<close>"], ["", "class dcorder = preorder +\n  assumes dc_on_UNIV: \"dc_on (\\<le>) UNIV\"\nbegin"], ["", "text \\<open>Open induction on downward-complete orders.\\<close>"], ["", "lemmas open_induct [consumes 1, case_names less] = dc_open_induct [OF dc_on_UNIV]"], ["", "end"], ["", "end"]]}