{"file_name": "/home/qj213/afp-2021-10-22/thys/Symmetric_Polynomials/Vieta.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Symmetric_Polynomials", "problem_names": ["lemma card_vimage_inter:\n  assumes inj: \"inj_on f A\" and subset: \"X \\<subseteq> f ` A\"\n  shows   \"card (f -` X \\<inter> A) = card X\"", "lemma bij_betw_image_fixed_card_subset:\n  assumes \"inj_on f A\"\n  shows   \"bij_betw (\\<lambda>X. f ` X) {X. X \\<subseteq> A \\<and> card X = k} {X. X \\<subseteq> f ` A \\<and> card X = k}\"", "lemma image_image_fixed_card_subset:\n  assumes \"inj_on f A\"\n  shows   \"(\\<lambda>X. f ` X) ` {X. X \\<subseteq> A \\<and> card X = k} = {X. X \\<subseteq> f ` A \\<and> card X = k}\"", "lemma prod_uminus: \"(\\<Prod>x\\<in>A. -f x :: 'a :: comm_ring_1) = (-1) ^ card A * (\\<Prod>x\\<in>A. f x)\"", "theorem prod_sum_PiE:\n  fixes f :: \"'a \\<Rightarrow> 'b \\<Rightarrow> 'c :: comm_semiring_1\"\n  assumes finite: \"finite A\" and finite: \"\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)\"\n  shows   \"(\\<Prod>x\\<in>A. \\<Sum>y\\<in>B x. f x y) = (\\<Sum>g\\<in>PiE A B. \\<Prod>x\\<in>A. f x (g x))\"", "lemma poly_from_roots:\n  fixes f :: \"'a \\<Rightarrow> 'b :: comm_ring_1\" assumes fin: \"finite A\"\n  shows \"(\\<Prod>x\\<in>A. [:-f x, 1:]) = (\\<Sum>X\\<in>Pow A. monom ((-1) ^ card X * (\\<Prod>x\\<in>X. f x)) (card (A - X)))\"", "theorem coeff_poly_from_roots:\n  fixes f :: \"'a \\<Rightarrow> 'b :: comm_ring_1\"\n  assumes fin: \"finite A\" and k: \"k \\<le> card A\"\n  shows   \"coeff (\\<Prod>x\\<in>A. [:-f x, 1:]) k =\n             (-1) ^ (card A - k) * (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. (\\<Prod>x\\<in>X. f x))\""], "translations": [["", "lemma card_vimage_inter:\n  assumes inj: \"inj_on f A\" and subset: \"X \\<subseteq> f ` A\"\n  shows   \"card (f -` X \\<inter> A) = card X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (f -` X \\<inter> A) = card X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (f -` X \\<inter> A) = card X", "have \"card (f -` X \\<inter> A) = card (f ` (f -` X \\<inter> A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (f -` X \\<inter> A) = card (f ` (f -` X \\<inter> A))", "by (subst card_image) (auto intro!: inj_on_subset[OF inj])"], ["proof (state)\nthis:\n  card (f -` X \\<inter> A) = card (f ` (f -` X \\<inter> A))\n\ngoal (1 subgoal):\n 1. card (f -` X \\<inter> A) = card X", "also"], ["proof (state)\nthis:\n  card (f -` X \\<inter> A) = card (f ` (f -` X \\<inter> A))\n\ngoal (1 subgoal):\n 1. card (f -` X \\<inter> A) = card X", "have \"f ` (f -` X \\<inter> A) = X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` (f -` X \\<inter> A) = X", "using assms"], ["proof (prove)\nusing this:\n  inj_on f A\n  X \\<subseteq> f ` A\n\ngoal (1 subgoal):\n 1. f ` (f -` X \\<inter> A) = X", "by auto"], ["proof (state)\nthis:\n  f ` (f -` X \\<inter> A) = X\n\ngoal (1 subgoal):\n 1. card (f -` X \\<inter> A) = card X", "finally"], ["proof (chain)\npicking this:\n  card (f -` X \\<inter> A) = card X", "show ?thesis"], ["proof (prove)\nusing this:\n  card (f -` X \\<inter> A) = card X\n\ngoal (1 subgoal):\n 1. card (f -` X \\<inter> A) = card X", "."], ["proof (state)\nthis:\n  card (f -` X \\<inter> A) = card X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_betw_image_fixed_card_subset:\n  assumes \"inj_on f A\"\n  shows   \"bij_betw (\\<lambda>X. f ` X) {X. X \\<subseteq> A \\<and> card X = k} {X. X \\<subseteq> f ` A \\<and> card X = k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw ((`) f) {X. X \\<subseteq> A \\<and> card X = k}\n     {X. X \\<subseteq> f ` A \\<and> card X = k}", "using assms inj_on_subset[OF assms]"], ["proof (prove)\nusing this:\n  inj_on f A\n  ?B \\<subseteq> A \\<Longrightarrow> inj_on f ?B\n\ngoal (1 subgoal):\n 1. bij_betw ((`) f) {X. X \\<subseteq> A \\<and> card X = k}\n     {X. X \\<subseteq> f ` A \\<and> card X = k}", "by (intro bij_betwI[of _ _ _ \"\\<lambda>X. f -` X \\<inter> A\"]) (auto simp: card_image card_vimage_inter)"], ["", "lemma image_image_fixed_card_subset:\n  assumes \"inj_on f A\"\n  shows   \"(\\<lambda>X. f ` X) ` {X. X \\<subseteq> A \\<and> card X = k} = {X. X \\<subseteq> f ` A \\<and> card X = k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (`) f ` {X. X \\<subseteq> A \\<and> card X = k} =\n    {X. X \\<subseteq> f ` A \\<and> card X = k}", "using bij_betw_imp_surj_on[OF bij_betw_image_fixed_card_subset[OF assms, of k]]"], ["proof (prove)\nusing this:\n  (`) f ` {X. X \\<subseteq> A \\<and> card X = k} =\n  {X. X \\<subseteq> f ` A \\<and> card X = k}\n\ngoal (1 subgoal):\n 1. (`) f ` {X. X \\<subseteq> A \\<and> card X = k} =\n    {X. X \\<subseteq> f ` A \\<and> card X = k}", "."], ["", "lemma prod_uminus: \"(\\<Prod>x\\<in>A. -f x :: 'a :: comm_ring_1) = (-1) ^ card A * (\\<Prod>x\\<in>A. f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. - f x) = (- (1::'a)) ^ card A * prod f A", "by (induction A rule: infinite_finite_induct) (auto simp: algebra_simps)"], ["", "theorem prod_sum_PiE:\n  fixes f :: \"'a \\<Rightarrow> 'b \\<Rightarrow> 'c :: comm_semiring_1\"\n  assumes finite: \"finite A\" and finite: \"\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)\"\n  shows   \"(\\<Prod>x\\<in>A. \\<Sum>y\\<in>B x. f x y) = (\\<Sum>g\\<in>PiE A B. \\<Prod>x\\<in>A. f x (g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. sum (f x) (B x)) =\n    (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. f x (g x))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  ?x \\<in> A \\<Longrightarrow> finite (B ?x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. sum (f x) (B x)) =\n    (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. f x (g x))", "proof (induction A rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>x. x \\<in> {} \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n    (\\<Prod>x\\<in>{}. sum (f x) (B x)) =\n    (\\<Sum>g\\<in>Pi\\<^sub>E {} B. \\<Prod>x\\<in>{}. f x (g x))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "case empty"], ["proof (state)\nthis:\n  ?x \\<in> {} \\<Longrightarrow> finite (B ?x)\n\ngoal (2 subgoals):\n 1. (\\<And>x. x \\<in> {} \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n    (\\<Prod>x\\<in>{}. sum (f x) (B x)) =\n    (\\<Sum>g\\<in>Pi\\<^sub>E {} B. \\<Prod>x\\<in>{}. f x (g x))\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "thus ?case"], ["proof (prove)\nusing this:\n  ?x \\<in> {} \\<Longrightarrow> finite (B ?x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>{}. sum (f x) (B x)) =\n    (\\<Sum>g\\<in>Pi\\<^sub>E {} B. \\<Prod>x\\<in>{}. f x (g x))", "by auto"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>{}. sum (f x) (B x)) =\n  (\\<Sum>g\\<in>Pi\\<^sub>E {} B. \\<Prod>x\\<in>{}. f x (g x))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "case (insert x A)"], ["proof (state)\nthis:\n  finite A\n  x \\<notin> A\n  (\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n  (\\<Prod>x\\<in>A. sum (f x) (B x)) =\n  (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. f x (g x))\n  ?x \\<in> insert x A \\<Longrightarrow> finite (B ?x)\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "have \"(\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B. \\<Prod>x\\<in>insert x A. f x (g x)) =\n          (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B. f x (g x) * (\\<Prod>x'\\<in>A. f x' (g x')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n       \\<Prod>x\\<in>insert x A. f x (g x)) =\n    (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n       f x (g x) * (\\<Prod>x'\\<in>A. f x' (g x')))", "using insert"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  (\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n  (\\<Prod>x\\<in>A. sum (f x) (B x)) =\n  (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. f x (g x))\n  ?x \\<in> insert x A \\<Longrightarrow> finite (B ?x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n       \\<Prod>x\\<in>insert x A. f x (g x)) =\n    (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n       f x (g x) * (\\<Prod>x'\\<in>A. f x' (g x')))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n     \\<Prod>x\\<in>insert x A. f x (g x)) =\n  (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n     f x (g x) * (\\<Prod>x'\\<in>A. f x' (g x')))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n     \\<Prod>x\\<in>insert x A. f x (g x)) =\n  (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n     f x (g x) * (\\<Prod>x'\\<in>A. f x' (g x')))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "have \"(\\<lambda>g. \\<Prod>x'\\<in>A. f x' (g x')) = (\\<lambda>g. \\<Prod>x'\\<in>A. f x' (if x' = x then undefined else g x'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>g. \\<Prod>x'\\<in>A. f x' (g x')) =\n    (\\<lambda>g. \\<Prod>x'\\<in>A. f x' (if x' = x then undefined else g x'))", "using insert"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  (\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n  (\\<Prod>x\\<in>A. sum (f x) (B x)) =\n  (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. f x (g x))\n  ?x \\<in> insert x A \\<Longrightarrow> finite (B ?x)\n\ngoal (1 subgoal):\n 1. (\\<lambda>g. \\<Prod>x'\\<in>A. f x' (g x')) =\n    (\\<lambda>g. \\<Prod>x'\\<in>A. f x' (if x' = x then undefined else g x'))", "by (intro ext prod.cong) auto"], ["proof (state)\nthis:\n  (\\<lambda>g. \\<Prod>x'\\<in>A. f x' (g x')) =\n  (\\<lambda>g. \\<Prod>x'\\<in>A. f x' (if x' = x then undefined else g x'))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "also"], ["proof (state)\nthis:\n  (\\<lambda>g. \\<Prod>x'\\<in>A. f x' (g x')) =\n  (\\<lambda>g. \\<Prod>x'\\<in>A. f x' (if x' = x then undefined else g x'))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "have \"(\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B. f x (g x) * \\<dots> g) =\n               (\\<Sum>(y,g)\\<in>B x \\<times> Pi\\<^sub>E A B. f x y * (\\<Prod>x'\\<in>A. f x' (g x')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n       f x (g x) *\n       (\\<Prod>x'\\<in>A. f x' (if x' = x then undefined else g x'))) =\n    (\\<Sum>(y, g)\\<in>B x \\<times> Pi\\<^sub>E A B.\n       f x y * (\\<Prod>x'\\<in>A. f x' (g x')))", "using insert.prems insert.hyps"], ["proof (prove)\nusing this:\n  ?x \\<in> insert x A \\<Longrightarrow> finite (B ?x)\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n       f x (g x) *\n       (\\<Prod>x'\\<in>A. f x' (if x' = x then undefined else g x'))) =\n    (\\<Sum>(y, g)\\<in>B x \\<times> Pi\\<^sub>E A B.\n       f x y * (\\<Prod>x'\\<in>A. f x' (g x')))", "by (intro sum.reindex_bij_witness[of _ \"\\<lambda>(y,g). g(x := y)\" \"\\<lambda>g. (g x, g(x := undefined))\"])\n       (auto simp: PiE_def extensional_def)"], ["proof (state)\nthis:\n  (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n     f x (g x) *\n     (\\<Prod>x'\\<in>A. f x' (if x' = x then undefined else g x'))) =\n  (\\<Sum>(y, g)\\<in>B x \\<times> Pi\\<^sub>E A B.\n     f x y * (\\<Prod>x'\\<in>A. f x' (g x')))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n     f x (g x) *\n     (\\<Prod>x'\\<in>A. f x' (if x' = x then undefined else g x'))) =\n  (\\<Sum>(y, g)\\<in>B x \\<times> Pi\\<^sub>E A B.\n     f x y * (\\<Prod>x'\\<in>A. f x' (g x')))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "have \"\\<dots> = (\\<Sum>y\\<in>B x. \\<Sum>g\\<in>Pi\\<^sub>E A B. f x y * (\\<Prod>x'\\<in>A. f x' (g x')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(y, g)\\<in>B x \\<times> Pi\\<^sub>E A B.\n       f x y * (\\<Prod>x'\\<in>A. f x' (g x'))) =\n    (\\<Sum>y\\<in>B x.\n       \\<Sum>g\\<in>Pi\\<^sub>E A B. f x y * (\\<Prod>x'\\<in>A. f x' (g x')))", "by (subst sum.cartesian_product) auto"], ["proof (state)\nthis:\n  (\\<Sum>(y, g)\\<in>B x \\<times> Pi\\<^sub>E A B.\n     f x y * (\\<Prod>x'\\<in>A. f x' (g x'))) =\n  (\\<Sum>y\\<in>B x.\n     \\<Sum>g\\<in>Pi\\<^sub>E A B. f x y * (\\<Prod>x'\\<in>A. f x' (g x')))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>(y, g)\\<in>B x \\<times> Pi\\<^sub>E A B.\n     f x y * (\\<Prod>x'\\<in>A. f x' (g x'))) =\n  (\\<Sum>y\\<in>B x.\n     \\<Sum>g\\<in>Pi\\<^sub>E A B. f x y * (\\<Prod>x'\\<in>A. f x' (g x')))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "have \"\\<dots> = (\\<Sum>y\\<in>B x. f x y) * (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x'\\<in>A. f x' (g x'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>B x.\n       \\<Sum>g\\<in>Pi\\<^sub>E A B. f x y * (\\<Prod>x'\\<in>A. f x' (g x'))) =\n    sum (f x) (B x) *\n    (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x'\\<in>A. f x' (g x'))", "using insert"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  (\\<And>x. x \\<in> A \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n  (\\<Prod>x\\<in>A. sum (f x) (B x)) =\n  (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x\\<in>A. f x (g x))\n  ?x \\<in> insert x A \\<Longrightarrow> finite (B ?x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>y\\<in>B x.\n       \\<Sum>g\\<in>Pi\\<^sub>E A B. f x y * (\\<Prod>x'\\<in>A. f x' (g x'))) =\n    sum (f x) (B x) *\n    (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x'\\<in>A. f x' (g x'))", "by (subst sum.swap) (simp add: sum_distrib_left sum_distrib_right)"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>B x.\n     \\<Sum>g\\<in>Pi\\<^sub>E A B. f x y * (\\<Prod>x'\\<in>A. f x' (g x'))) =\n  sum (f x) (B x) *\n  (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x'\\<in>A. f x' (g x'))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>y\\<in>B x.\n     \\<Sum>g\\<in>Pi\\<^sub>E A B. f x y * (\\<Prod>x'\\<in>A. f x' (g x'))) =\n  sum (f x) (B x) *\n  (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x'\\<in>A. f x' (g x'))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "have \"(\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x'\\<in>A. f x' (g x')) = (\\<Prod>x\\<in>A. \\<Sum>y\\<in>B x. f x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x'\\<in>A. f x' (g x')) =\n    (\\<Prod>x\\<in>A. sum (f x) (B x))", "using insert.prems"], ["proof (prove)\nusing this:\n  ?x \\<in> insert x A \\<Longrightarrow> finite (B ?x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x'\\<in>A. f x' (g x')) =\n    (\\<Prod>x\\<in>A. sum (f x) (B x))", "by (intro insert.IH [symmetric]) auto"], ["proof (state)\nthis:\n  (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x'\\<in>A. f x' (g x')) =\n  (\\<Prod>x\\<in>A. sum (f x) (B x))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>g\\<in>Pi\\<^sub>E A B. \\<Prod>x'\\<in>A. f x' (g x')) =\n  (\\<Prod>x\\<in>A. sum (f x) (B x))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "have \"(\\<Sum>y\\<in>B x. f x y) * \\<dots> = (\\<Prod>x\\<in>insert x A. \\<Sum>y\\<in>B x. f x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (f x) (B x) * (\\<Prod>x\\<in>A. sum (f x) (B x)) =\n    (\\<Prod>x\\<in>insert x A. sum (f x) (B x))", "using insert.hyps"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. sum (f x) (B x) * (\\<Prod>x\\<in>A. sum (f x) (B x)) =\n    (\\<Prod>x\\<in>insert x A. sum (f x) (B x))", "by simp"], ["proof (state)\nthis:\n  sum (f x) (B x) * (\\<Prod>x\\<in>A. sum (f x) (B x)) =\n  (\\<Prod>x\\<in>insert x A. sum (f x) (B x))\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x.\n            x \\<in> F \\<Longrightarrow> finite (B x)) \\<Longrightarrow>\n        (\\<Prod>x\\<in>F. sum (f x) (B x)) =\n        (\\<Sum>g\\<in>Pi\\<^sub>E F B. \\<Prod>x\\<in>F. f x (g x));\n        \\<And>xa.\n           xa \\<in> insert x F \\<Longrightarrow> finite (B xa)\\<rbrakk>\n       \\<Longrightarrow> (\\<Prod>x\\<in>insert x F. sum (f x) (B x)) =\n                         (\\<Sum>g\\<in>Pi\\<^sub>E (insert x F) B.\n                            \\<Prod>x\\<in>insert x F. f x (g x))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n     \\<Prod>x\\<in>insert x A. f x (g x)) =\n  (\\<Prod>x\\<in>insert x A. sum (f x) (B x))", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n     \\<Prod>x\\<in>insert x A. f x (g x)) =\n  (\\<Prod>x\\<in>insert x A. sum (f x) (B x))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>insert x A. sum (f x) (B x)) =\n    (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n       \\<Prod>x\\<in>insert x A. f x (g x))", ".."], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>insert x A. sum (f x) (B x)) =\n  (\\<Sum>g\\<in>Pi\\<^sub>E (insert x A) B.\n     \\<Prod>x\\<in>insert x A. f x (g x))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary prod_add:\n  fixes f1 f2 :: \"'a \\<Rightarrow> 'c :: comm_semiring_1\"\n  assumes finite: \"finite A\"\n  shows   \"(\\<Prod>x\\<in>A. f1 x + f2 x) = (\\<Sum>X\\<in>Pow A. (\\<Prod>x\\<in>X. f1 x) * (\\<Prod>x\\<in>A-X. f2 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x + f2 x) =\n    (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x + f2 x) =\n    (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))", "have \"(\\<Prod>x\\<in>A. f1 x + f2 x) = (\\<Sum>g\\<in>A \\<rightarrow>\\<^sub>E UNIV. \\<Prod>x\\<in>A. if g x then f1 x else f2 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x + f2 x) =\n    (\\<Sum>g\\<in>A \\<rightarrow>\\<^sub>E UNIV.\n       \\<Prod>x\\<in>A. if g x then f1 x else f2 x)", "using prod_sum_PiE[of A \"\\<lambda>_. UNIV :: bool set\" \"\\<lambda>x y. if y then f1 x else f2 x\"] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite A;\n   \\<And>x. x \\<in> A \\<Longrightarrow> finite UNIV\\<rbrakk>\n  \\<Longrightarrow> (\\<Prod>x\\<in>A.\n                       \\<Sum>y\\<in>UNIV. if y then f1 x else f2 x) =\n                    (\\<Sum>g\\<in>A \\<rightarrow>\\<^sub>E UNIV.\n                       \\<Prod>x\\<in>A. if g x then f1 x else f2 x)\n  finite A\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x + f2 x) =\n    (\\<Sum>g\\<in>A \\<rightarrow>\\<^sub>E UNIV.\n       \\<Prod>x\\<in>A. if g x then f1 x else f2 x)", "by (simp_all add: UNIV_bool add_ac)"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. f1 x + f2 x) =\n  (\\<Sum>g\\<in>A \\<rightarrow>\\<^sub>E UNIV.\n     \\<Prod>x\\<in>A. if g x then f1 x else f2 x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x + f2 x) =\n    (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. f1 x + f2 x) =\n  (\\<Sum>g\\<in>A \\<rightarrow>\\<^sub>E UNIV.\n     \\<Prod>x\\<in>A. if g x then f1 x else f2 x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x + f2 x) =\n    (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))", "have \"\\<dots> = (\\<Sum>X\\<in>Pow A. \\<Prod>x\\<in>A. if x \\<in> X then f1 x else f2 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>g\\<in>A \\<rightarrow>\\<^sub>E UNIV.\n       \\<Prod>x\\<in>A. if g x then f1 x else f2 x) =\n    (\\<Sum>X\\<in>Pow A. \\<Prod>x\\<in>A. if x \\<in> X then f1 x else f2 x)", "by (intro sum.reindex_bij_witness\n          [of _ \"\\<lambda>X x. if x \\<in> A then x \\<in> X else undefined\" \"\\<lambda>P. {x\\<in>A. P x}\"]) auto"], ["proof (state)\nthis:\n  (\\<Sum>g\\<in>A \\<rightarrow>\\<^sub>E UNIV.\n     \\<Prod>x\\<in>A. if g x then f1 x else f2 x) =\n  (\\<Sum>X\\<in>Pow A. \\<Prod>x\\<in>A. if x \\<in> X then f1 x else f2 x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x + f2 x) =\n    (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))", "also"], ["proof (state)\nthis:\n  (\\<Sum>g\\<in>A \\<rightarrow>\\<^sub>E UNIV.\n     \\<Prod>x\\<in>A. if g x then f1 x else f2 x) =\n  (\\<Sum>X\\<in>Pow A. \\<Prod>x\\<in>A. if x \\<in> X then f1 x else f2 x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x + f2 x) =\n    (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))", "have \"\\<dots> = (\\<Sum>X\\<in>Pow A. (\\<Prod>x\\<in>X. f1 x) * (\\<Prod>x\\<in>A-X. f2 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>X\\<in>Pow A. \\<Prod>x\\<in>A. if x \\<in> X then f1 x else f2 x) =\n    (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))", "proof (intro sum.cong refl, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (\\<Prod>xa\\<in>A. if xa \\<in> x then f1 xa else f2 xa) =\n       prod f1 x * prod f2 (A - x)", "case (1 X)"], ["proof (state)\nthis:\n  X \\<in> Pow A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (\\<Prod>xa\\<in>A. if xa \\<in> x then f1 xa else f2 xa) =\n       prod f1 x * prod f2 (A - x)", "let ?f = \"\\<lambda>x. if x \\<in> X then f1 x else f2 x\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (\\<Prod>xa\\<in>A. if xa \\<in> x then f1 xa else f2 xa) =\n       prod f1 x * prod f2 (A - x)", "have \"prod f1 X * prod f2 (A - X) = prod ?f X * prod ?f (A - X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod f1 X * prod f2 (A - X) =\n    (\\<Prod>x\\<in>X. if x \\<in> X then f1 x else f2 x) *\n    (\\<Prod>x\\<in>A - X. if x \\<in> X then f1 x else f2 x)", "by (intro arg_cong2[of _ _ _ _ \"(*)\"] prod.cong) auto"], ["proof (state)\nthis:\n  prod f1 X * prod f2 (A - X) =\n  (\\<Prod>x\\<in>X. if x \\<in> X then f1 x else f2 x) *\n  (\\<Prod>x\\<in>A - X. if x \\<in> X then f1 x else f2 x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (\\<Prod>xa\\<in>A. if xa \\<in> x then f1 xa else f2 xa) =\n       prod f1 x * prod f2 (A - x)", "also"], ["proof (state)\nthis:\n  prod f1 X * prod f2 (A - X) =\n  (\\<Prod>x\\<in>X. if x \\<in> X then f1 x else f2 x) *\n  (\\<Prod>x\\<in>A - X. if x \\<in> X then f1 x else f2 x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (\\<Prod>xa\\<in>A. if xa \\<in> x then f1 xa else f2 xa) =\n       prod f1 x * prod f2 (A - x)", "have \"\\<dots> = prod ?f (X \\<union> (A - X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>X. if x \\<in> X then f1 x else f2 x) *\n    (\\<Prod>x\\<in>A - X. if x \\<in> X then f1 x else f2 x) =\n    (\\<Prod>x\\<in>X \\<union> (A - X). if x \\<in> X then f1 x else f2 x)", "using 1"], ["proof (prove)\nusing this:\n  X \\<in> Pow A\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>X. if x \\<in> X then f1 x else f2 x) *\n    (\\<Prod>x\\<in>A - X. if x \\<in> X then f1 x else f2 x) =\n    (\\<Prod>x\\<in>X \\<union> (A - X). if x \\<in> X then f1 x else f2 x)", "by (subst prod.union_disjoint) (auto intro: finite_subset[OF _ finite])"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>X. if x \\<in> X then f1 x else f2 x) *\n  (\\<Prod>x\\<in>A - X. if x \\<in> X then f1 x else f2 x) =\n  (\\<Prod>x\\<in>X \\<union> (A - X). if x \\<in> X then f1 x else f2 x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (\\<Prod>xa\\<in>A. if xa \\<in> x then f1 xa else f2 xa) =\n       prod f1 x * prod f2 (A - x)", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>X. if x \\<in> X then f1 x else f2 x) *\n  (\\<Prod>x\\<in>A - X. if x \\<in> X then f1 x else f2 x) =\n  (\\<Prod>x\\<in>X \\<union> (A - X). if x \\<in> X then f1 x else f2 x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (\\<Prod>xa\\<in>A. if xa \\<in> x then f1 xa else f2 xa) =\n       prod f1 x * prod f2 (A - x)", "have \"X \\<union> (A - X) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<union> (A - X) = A", "using 1"], ["proof (prove)\nusing this:\n  X \\<in> Pow A\n\ngoal (1 subgoal):\n 1. X \\<union> (A - X) = A", "by auto"], ["proof (state)\nthis:\n  X \\<union> (A - X) = A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (\\<Prod>xa\\<in>A. if xa \\<in> x then f1 xa else f2 xa) =\n       prod f1 x * prod f2 (A - x)", "finally"], ["proof (chain)\npicking this:\n  prod f1 X * prod f2 (A - X) =\n  (\\<Prod>x\\<in>A. if x \\<in> X then f1 x else f2 x)", "show ?case"], ["proof (prove)\nusing this:\n  prod f1 X * prod f2 (A - X) =\n  (\\<Prod>x\\<in>A. if x \\<in> X then f1 x else f2 x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. if x \\<in> X then f1 x else f2 x) =\n    prod f1 X * prod f2 (A - X)", ".."], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. if x \\<in> X then f1 x else f2 x) =\n  prod f1 X * prod f2 (A - X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>X\\<in>Pow A. \\<Prod>x\\<in>A. if x \\<in> X then f1 x else f2 x) =\n  (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x + f2 x) =\n    (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>x\\<in>A. f1 x + f2 x) =\n  (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>x\\<in>A. f1 x + f2 x) =\n  (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x + f2 x) =\n    (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))", "."], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. f1 x + f2 x) =\n  (\\<Sum>X\\<in>Pow A. prod f1 X * prod f2 (A - X))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary prod_diff1:\n  fixes f1 f2 :: \"'a \\<Rightarrow> 'c :: comm_ring_1\"\n  assumes finite: \"finite A\"\n  shows   \"(\\<Prod>x\\<in>A. f1 x - f2 x) = (\\<Sum>X\\<in>Pow A. (-1) ^ card X * (\\<Prod>x\\<in>X. f2 x) * (\\<Prod>x\\<in>A-X. f1 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))", "have \"(\\<Prod>x\\<in>A. f1 x - f2 x) = (\\<Prod>x\\<in>A. -f2 x + f1 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) = (\\<Prod>x\\<in>A. - f2 x + f1 x)", "by simp"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. f1 x - f2 x) = (\\<Prod>x\\<in>A. - f2 x + f1 x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. f1 x - f2 x) = (\\<Prod>x\\<in>A. - f2 x + f1 x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))", "have \"\\<dots> = (\\<Sum>X\\<in>Pow A. (\\<Prod>x\\<in>X. - f2 x) * prod f1 (A - X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. - f2 x + f1 x) =\n    (\\<Sum>X\\<in>Pow A. (\\<Prod>x\\<in>X. - f2 x) * prod f1 (A - X))", "by (rule prod_add) fact+"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. - f2 x + f1 x) =\n  (\\<Sum>X\\<in>Pow A. (\\<Prod>x\\<in>X. - f2 x) * prod f1 (A - X))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. - f2 x + f1 x) =\n  (\\<Sum>X\\<in>Pow A. (\\<Prod>x\\<in>X. - f2 x) * prod f1 (A - X))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))", "have \"\\<dots> = (\\<Sum>X\\<in>Pow A. (-1) ^ card X * (\\<Prod>x\\<in>X. f2 x) * prod f1 (A - X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>X\\<in>Pow A. (\\<Prod>x\\<in>X. - f2 x) * prod f1 (A - X)) =\n    (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))", "by (simp add: prod_uminus)"], ["proof (state)\nthis:\n  (\\<Sum>X\\<in>Pow A. (\\<Prod>x\\<in>X. - f2 x) * prod f1 (A - X)) =\n  (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>x\\<in>A. f1 x - f2 x) =\n  (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>x\\<in>A. f1 x - f2 x) =\n  (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))", "."], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. f1 x - f2 x) =\n  (\\<Sum>X\\<in>Pow A. (- (1::'c)) ^ card X * prod f2 X * prod f1 (A - X))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary prod_diff2:\n  fixes f1 f2 :: \"'a \\<Rightarrow> 'c :: comm_ring_1\"\n  assumes finite: \"finite A\"\n  shows   \"(\\<Prod>x\\<in>A. f1 x - f2 x) = (\\<Sum>X\\<in>Pow A. (-1) ^ (card A - card X) * (\\<Prod>x\\<in>X. f1 x) * (\\<Prod>x\\<in>A-X. f2 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "have \"(\\<Prod>x\\<in>A. f1 x - f2 x) = (\\<Prod>x\\<in>A. f1 x + (-f2 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) = (\\<Prod>x\\<in>A. f1 x + - f2 x)", "by simp"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. f1 x - f2 x) = (\\<Prod>x\\<in>A. f1 x + - f2 x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. f1 x - f2 x) = (\\<Prod>x\\<in>A. f1 x + - f2 x)\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "have \"\\<dots> = (\\<Sum>X\\<in>Pow A. (\\<Prod>x\\<in>X. f1 x) * (\\<Prod>x\\<in>A-X. -f2 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x + - f2 x) =\n    (\\<Sum>X\\<in>Pow A. prod f1 X * (\\<Prod>x\\<in>A - X. - f2 x))", "by (rule prod_add) fact+"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. f1 x + - f2 x) =\n  (\\<Sum>X\\<in>Pow A. prod f1 X * (\\<Prod>x\\<in>A - X. - f2 x))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. f1 x + - f2 x) =\n  (\\<Sum>X\\<in>Pow A. prod f1 X * (\\<Prod>x\\<in>A - X. - f2 x))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "have \"\\<dots> = (\\<Sum>X\\<in>Pow A. (-1) ^ card (A - X) * (\\<Prod>x\\<in>X. f1 x) * (\\<Prod>x\\<in>A-X. f2 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>X\\<in>Pow A. prod f1 X * (\\<Prod>x\\<in>A - X. - f2 x)) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ card (A - X) * prod f1 X * prod f2 (A - X))", "by (simp add: prod_uminus mult_ac)"], ["proof (state)\nthis:\n  (\\<Sum>X\\<in>Pow A. prod f1 X * (\\<Prod>x\\<in>A - X. - f2 x)) =\n  (\\<Sum>X\\<in>Pow A.\n     (- (1::'c)) ^ card (A - X) * prod f1 X * prod f2 (A - X))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "also"], ["proof (state)\nthis:\n  (\\<Sum>X\\<in>Pow A. prod f1 X * (\\<Prod>x\\<in>A - X. - f2 x)) =\n  (\\<Sum>X\\<in>Pow A.\n     (- (1::'c)) ^ card (A - X) * prod f1 X * prod f2 (A - X))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "have \"\\<dots> = (\\<Sum>X\\<in>Pow A. (-1) ^ (card A - card X) * (\\<Prod>x\\<in>X. f1 x) * (\\<Prod>x\\<in>A-X. f2 x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ card (A - X) * prod f1 X * prod f2 (A - X)) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "using finite_subset[OF _ assms]"], ["proof (prove)\nusing this:\n  ?A \\<subseteq> A \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ card (A - X) * prod f1 X * prod f2 (A - X)) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "by (intro sum.cong refl, subst card_Diff_subset) auto"], ["proof (state)\nthis:\n  (\\<Sum>X\\<in>Pow A.\n     (- (1::'c)) ^ card (A - X) * prod f1 X * prod f2 (A - X)) =\n  (\\<Sum>X\\<in>Pow A.\n     (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>x\\<in>A. f1 x - f2 x) =\n  (\\<Sum>X\\<in>Pow A.\n     (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>x\\<in>A. f1 x - f2 x) =\n  (\\<Sum>X\\<in>Pow A.\n     (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. f1 x - f2 x) =\n    (\\<Sum>X\\<in>Pow A.\n       (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))", "."], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. f1 x - f2 x) =\n  (\\<Sum>X\\<in>Pow A.\n     (- (1::'c)) ^ (card A - card X) * prod f1 X * prod f2 (A - X))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Main proofs\\<close>"], ["", "text \\<open>\n  Our goal is to determine the coefficients of some fully factored polynomial\n  $p(X) = c (X - x_1) \\ldots (X - x_n)$ in terms of the $x_i$. It is clear that it is\n  sufficient to consider monic polynomials (i.e. $c = 1$), since the general case follows\n  easily from this one.\n\n  We start off by expanding the product over the linear factors:\n\\<close>"], ["", "lemma poly_from_roots:\n  fixes f :: \"'a \\<Rightarrow> 'b :: comm_ring_1\" assumes fin: \"finite A\"\n  shows \"(\\<Prod>x\\<in>A. [:-f x, 1:]) = (\\<Sum>X\\<in>Pow A. monom ((-1) ^ card X * (\\<Prod>x\\<in>X. f x)) (card (A - X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n    (\\<Sum>X\\<in>Pow A.\n       monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n    (\\<Sum>X\\<in>Pow A.\n       monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))", "have \"(\\<Prod>x\\<in>A. [:-f x, 1:]) = (\\<Prod>x\\<in>A. [:0, 1:] - [:f x:])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n    (\\<Prod>x\\<in>A. [:0::'b, 1::'b:] - [:f x:])", "by simp"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n  (\\<Prod>x\\<in>A. [:0::'b, 1::'b:] - [:f x:])\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n    (\\<Sum>X\\<in>Pow A.\n       monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n  (\\<Prod>x\\<in>A. [:0::'b, 1::'b:] - [:f x:])\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n    (\\<Sum>X\\<in>Pow A.\n       monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))", "have \"\\<dots> = (\\<Sum>X\\<in>Pow A. (-1) ^ card X * (\\<Prod>x\\<in>X. [:f x:]) * monom 1 (card (A - X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:0::'b, 1::'b:] - [:f x:]) =\n    (\\<Sum>X\\<in>Pow A.\n       (- 1) ^ card X * (\\<Prod>x\\<in>X. [:f x:]) *\n       monom (1::'b) (card (A - X)))", "using fin"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:0::'b, 1::'b:] - [:f x:]) =\n    (\\<Sum>X\\<in>Pow A.\n       (- 1) ^ card X * (\\<Prod>x\\<in>X. [:f x:]) *\n       monom (1::'b) (card (A - X)))", "by (subst prod_diff1) (auto simp: monom_altdef mult_ac)"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. [:0::'b, 1::'b:] - [:f x:]) =\n  (\\<Sum>X\\<in>Pow A.\n     (- 1) ^ card X * (\\<Prod>x\\<in>X. [:f x:]) *\n     monom (1::'b) (card (A - X)))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n    (\\<Sum>X\\<in>Pow A.\n       monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. [:0::'b, 1::'b:] - [:f x:]) =\n  (\\<Sum>X\\<in>Pow A.\n     (- 1) ^ card X * (\\<Prod>x\\<in>X. [:f x:]) *\n     monom (1::'b) (card (A - X)))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n    (\\<Sum>X\\<in>Pow A.\n       monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))", "have \"\\<dots> = (\\<Sum>X\\<in>Pow A. monom ((-1) ^ card X * (\\<Prod>x\\<in>X. f x)) (card (A - X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>X\\<in>Pow A.\n       (- 1) ^ card X * (\\<Prod>x\\<in>X. [:f x:]) *\n       monom (1::'b) (card (A - X))) =\n    (\\<Sum>X\\<in>Pow A.\n       monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))", "proof (intro sum.cong refl, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (- 1) ^ card x * (\\<Prod>x\\<in>x. [:f x:]) *\n       monom (1::'b) (card (A - x)) =\n       monom ((- (1::'b)) ^ card x * prod f x) (card (A - x))", "case (1 X)"], ["proof (state)\nthis:\n  X \\<in> Pow A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (- 1) ^ card x * (\\<Prod>x\\<in>x. [:f x:]) *\n       monom (1::'b) (card (A - x)) =\n       monom ((- (1::'b)) ^ card x * prod f x) (card (A - x))", "have \"(-1 :: 'b poly) ^ card X = [:(-1) ^ card X:]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- 1) ^ card X = [:(- (1::'b)) ^ card X:]", "by (induction X rule: infinite_finite_induct) (auto simp: one_pCons algebra_simps)"], ["proof (state)\nthis:\n  (- 1) ^ card X = [:(- (1::'b)) ^ card X:]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (- 1) ^ card x * (\\<Prod>x\\<in>x. [:f x:]) *\n       monom (1::'b) (card (A - x)) =\n       monom ((- (1::'b)) ^ card x * prod f x) (card (A - x))", "moreover"], ["proof (state)\nthis:\n  (- 1) ^ card X = [:(- (1::'b)) ^ card X:]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (- 1) ^ card x * (\\<Prod>x\\<in>x. [:f x:]) *\n       monom (1::'b) (card (A - x)) =\n       monom ((- (1::'b)) ^ card x * prod f x) (card (A - x))", "have \"(\\<Prod>x\\<in>X. [:f x:]) = [:\\<Prod>x\\<in>X. f x:]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>X. [:f x:]) = [:prod f X:]", "by (induction X rule: infinite_finite_induct) auto"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>X. [:f x:]) = [:prod f X:]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> Pow A \\<Longrightarrow>\n       (- 1) ^ card x * (\\<Prod>x\\<in>x. [:f x:]) *\n       monom (1::'b) (card (A - x)) =\n       monom ((- (1::'b)) ^ card x * prod f x) (card (A - x))", "ultimately"], ["proof (chain)\npicking this:\n  (- 1) ^ card X = [:(- (1::'b)) ^ card X:]\n  (\\<Prod>x\\<in>X. [:f x:]) = [:prod f X:]", "show ?case"], ["proof (prove)\nusing this:\n  (- 1) ^ card X = [:(- (1::'b)) ^ card X:]\n  (\\<Prod>x\\<in>X. [:f x:]) = [:prod f X:]\n\ngoal (1 subgoal):\n 1. (- 1) ^ card X * (\\<Prod>x\\<in>X. [:f x:]) *\n    monom (1::'b) (card (A - X)) =\n    monom ((- (1::'b)) ^ card X * prod f X) (card (A - X))", "by (simp add: smult_monom)"], ["proof (state)\nthis:\n  (- 1) ^ card X * (\\<Prod>x\\<in>X. [:f x:]) *\n  monom (1::'b) (card (A - X)) =\n  monom ((- (1::'b)) ^ card X * prod f X) (card (A - X))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>X\\<in>Pow A.\n     (- 1) ^ card X * (\\<Prod>x\\<in>X. [:f x:]) *\n     monom (1::'b) (card (A - X))) =\n  (\\<Sum>X\\<in>Pow A.\n     monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n    (\\<Sum>X\\<in>Pow A.\n       monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n  (\\<Sum>X\\<in>Pow A.\n     monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n  (\\<Sum>X\\<in>Pow A.\n     monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))\n\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n    (\\<Sum>X\\<in>Pow A.\n       monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))", "."], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n  (\\<Sum>X\\<in>Pow A.\n     monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Comparing coefficients yields Vieta's formula:\n\\<close>"], ["", "theorem coeff_poly_from_roots:\n  fixes f :: \"'a \\<Rightarrow> 'b :: comm_ring_1\"\n  assumes fin: \"finite A\" and k: \"k \\<le> card A\"\n  shows   \"coeff (\\<Prod>x\\<in>A. [:-f x, 1:]) k =\n             (-1) ^ (card A - k) * (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. (\\<Prod>x\\<in>X. f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)", "have \"(\\<Prod>x\\<in>A. [:-f x, 1:]) = (\\<Sum>X\\<in>Pow A. monom ((-1) ^ card X * (\\<Prod>x\\<in>X. f x)) (card (A - X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n    (\\<Sum>X\\<in>Pow A.\n       monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))", "by (intro poly_from_roots fin)"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n  (\\<Sum>X\\<in>Pow A.\n     monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)", "also"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) =\n  (\\<Sum>X\\<in>Pow A.\n     monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)", "have \"coeff \\<dots> k = (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. (-1) ^ (card A - k) * (\\<Prod>x\\<in>X. f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff\n     (\\<Sum>X\\<in>Pow A.\n        monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))\n     k =\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k.\n       (- (1::'b)) ^ (card A - k) * prod f X)", "unfolding coeff_sum coeff_monom"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>Pow A.\n       if card (A - x) = k then (- (1::'b)) ^ card x * prod f x\n       else (0::'b)) =\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k.\n       (- (1::'b)) ^ (card A - k) * prod f X)", "using finite_subset[OF _ fin] k card_mono[OF fin]"], ["proof (prove)\nusing this:\n  ?A \\<subseteq> A \\<Longrightarrow> finite ?A\n  k \\<le> card A\n  ?A \\<subseteq> A \\<Longrightarrow> card ?A \\<le> card A\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>Pow A.\n       if card (A - x) = k then (- (1::'b)) ^ card x * prod f x\n       else (0::'b)) =\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k.\n       (- (1::'b)) ^ (card A - k) * prod f X)", "by (intro sum.mono_neutral_cong_right) (auto simp: card_Diff_subset)"], ["proof (state)\nthis:\n  coeff\n   (\\<Sum>X\\<in>Pow A.\n      monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))\n   k =\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k.\n     (- (1::'b)) ^ (card A - k) * prod f X)\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)", "also"], ["proof (state)\nthis:\n  coeff\n   (\\<Sum>X\\<in>Pow A.\n      monom ((- (1::'b)) ^ card X * prod f X) (card (A - X)))\n   k =\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k.\n     (- (1::'b)) ^ (card A - k) * prod f X)\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)", "have \"\\<dots> = (-1) ^ (card A - k) * (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. (\\<Prod>x\\<in>X. f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k.\n       (- (1::'b)) ^ (card A - k) * prod f X) =\n    (- (1::'b)) ^ (card A - k) *\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)", "by (simp add: sum_distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k.\n     (- (1::'b)) ^ (card A - k) * prod f X) =\n  (- (1::'b)) ^ (card A - k) *\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)", "finally"], ["proof (chain)\npicking this:\n  coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n  (- (1::'b)) ^ (card A - k) *\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)", "show ?thesis"], ["proof (prove)\nusing this:\n  coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n  (- (1::'b)) ^ (card A - k) *\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)", "."], ["proof (state)\nthis:\n  coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n  (- (1::'b)) ^ (card A - k) *\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  If the roots are all distinct, we can get the following alternative representation:\n\\<close>"], ["", "corollary coeff_poly_from_roots':\n  fixes f :: \"'a \\<Rightarrow> 'b :: comm_ring_1\"\n  assumes fin: \"finite A\" and inj: \"inj_on f A\" and k: \"k \\<le> card A\"\n  shows   \"coeff (\\<Prod>x\\<in>A. [:-f x, 1:]) k =\n             (-1) ^ (card A - k) * (\\<Sum>X | X \\<subseteq> f ` A \\<and> card X = card A - k. \\<Prod>X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "have \"coeff (\\<Prod>x\\<in>A. [:-f x, 1:]) k =\n          (-1) ^ (card A - k) * (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. (\\<Prod>x\\<in>X. f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)", "by (intro coeff_poly_from_roots assms)"], ["proof (state)\nthis:\n  coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n  (- (1::'b)) ^ (card A - k) *\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "also"], ["proof (state)\nthis:\n  coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n  (- (1::'b)) ^ (card A - k) *\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X)\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "have \"(\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. (\\<Prod>x\\<in>X. f x)) =\n               (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. \\<Prod>(f`X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X) =\n    (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. \\<Prod>(f ` X))", "by (intro sum.cong refl, subst prod.reindex) (auto intro: inj_on_subset[OF inj])"], ["proof (state)\nthis:\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X) =\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. \\<Prod>(f ` X))\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "also"], ["proof (state)\nthis:\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. prod f X) =\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. \\<Prod>(f ` X))\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "have \"\\<dots> = (\\<Sum>X \\<in> (\\<lambda>X. f`X) ` {X. X \\<subseteq> A \\<and> card X = card A - k}. \\<Prod>X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. \\<Prod>(f ` X)) =\n    sum Prod ((`) f ` {X. X \\<subseteq> A \\<and> card X = card A - k})", "by (subst sum.reindex) (auto intro!: inj_on_image inj_on_subset[OF inj])"], ["proof (state)\nthis:\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. \\<Prod>(f ` X)) =\n  sum Prod ((`) f ` {X. X \\<subseteq> A \\<and> card X = card A - k})\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "also"], ["proof (state)\nthis:\n  (\\<Sum>X | X \\<subseteq> A \\<and> card X = card A - k. \\<Prod>(f ` X)) =\n  sum Prod ((`) f ` {X. X \\<subseteq> A \\<and> card X = card A - k})\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "have \"(\\<lambda>X. f ` X) ` {X. X \\<subseteq> A \\<and> card X = card A - k} = {X. X \\<subseteq> f ` A \\<and> card X = card A - k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (`) f ` {X. X \\<subseteq> A \\<and> card X = card A - k} =\n    {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "by (intro image_image_fixed_card_subset inj)"], ["proof (state)\nthis:\n  (`) f ` {X. X \\<subseteq> A \\<and> card X = card A - k} =\n  {X. X \\<subseteq> f ` A \\<and> card X = card A - k}\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "finally"], ["proof (chain)\npicking this:\n  coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n  (- (1::'b)) ^ (card A - k) *\n  sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "show ?thesis"], ["proof (prove)\nusing this:\n  coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n  (- (1::'b)) ^ (card A - k) *\n  sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}\n\ngoal (1 subgoal):\n 1. coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n    (- (1::'b)) ^ (card A - k) *\n    sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}", "."], ["proof (state)\nthis:\n  coeff (\\<Prod>x\\<in>A. [:- f x, 1::'b:]) k =\n  (- (1::'b)) ^ (card A - k) *\n  sum Prod {X. X \\<subseteq> f ` A \\<and> card X = card A - k}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}