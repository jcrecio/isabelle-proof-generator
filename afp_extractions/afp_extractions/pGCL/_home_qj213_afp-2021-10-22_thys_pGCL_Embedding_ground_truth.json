{"file_name": "/home/qj213/afp-2021-10-22/thys/pGCL/Embedding.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/pGCL", "problem_names": ["lemma eval_wp_Abort:\n  \"wp Abort P = (\\<lambda>s. 0)\"", "lemma eval_wlp_Abort:\n  \"wlp Abort P = (\\<lambda>s. 1)\"", "lemma eval_wp_Skip:\n  \"wp Skip P = P\"", "lemma eval_wlp_Skip:\n  \"wlp Skip P = P\"", "lemma eval_wp_Apply:\n  \"wp (Apply f) P = P o f\"", "lemma eval_wlp_Apply:\n  \"wlp (Apply f) P = P o f\"", "lemma eval_wp_Seq:\n  \"wp (a ;; b) P = (wp a o wp b) P\"", "lemma eval_wlp_Seq:\n  \"wlp (a ;; b) P = (wlp a o wlp b) P\"", "lemma eval_wp_PC:\n  \"wp (a \\<^bsub>Q\\<^esub>\\<oplus> b) P = (\\<lambda>s. Q s * wp a P s + (1 - Q s) * wp b P s)\"", "lemma eval_wlp_PC:\n  \"wlp (a \\<^bsub>Q\\<^esub>\\<oplus> b) P = (\\<lambda>s. Q s * wlp a P s + (1 - Q s) * wlp b P s)\"", "lemma eval_wp_DC:\n  \"wp (a \\<Sqinter> b) P = (\\<lambda>s. min (wp a P s) (wp b P s))\"", "lemma eval_wlp_DC:\n  \"wlp (a \\<Sqinter> b) P = (\\<lambda>s. min (wlp a P s) (wlp b P s))\"", "lemma eval_wp_AC:\n  \"wp (a \\<Squnion> b) P = (\\<lambda>s. max (wp a P s) (wp b P s))\"", "lemma eval_wlp_AC:\n  \"wlp (a \\<Squnion> b) P = (\\<lambda>s. max (wlp a P s) (wlp b P s))\"", "lemma eval_wp_Embed:\n  \"wp (Embed t) = t\"", "lemma eval_wlp_Embed:\n  \"wlp (Embed t) = t\"", "lemma eval_wp_SetDC:\n  \"wp (SetDC p S) R s = Inf ((\\<lambda>a. wp (p a) R s) ` S s)\"", "lemma eval_wlp_SetDC:\n  \"wlp (SetDC p S) R s = Inf ((\\<lambda>a. wlp (p a) R s) ` S s)\"", "lemma eval_wp_SetPC:\n  \"wp (SetPC f p) P = (\\<lambda>s. \\<Sum>a\\<in>supp (p s). p s a * wp (f a) P s)\"", "lemma eval_wlp_SetPC:\n  \"wlp (SetPC f p) P = (\\<lambda>s. \\<Sum>a\\<in>supp (p s). p s a * wlp (f a) P s)\"", "lemma eval_wp_Mu:\n  \"wp (\\<mu> t. T t) = lfp_trans (\\<lambda>t. wp (T (Embed t)))\"", "lemma eval_wlp_Mu:\n  \"wlp (\\<mu> t. T t) = gfp_trans (\\<lambda>t. wlp (T (Embed t)))\"", "lemma eval_wp_Bind:\n  \"wp (Bind g f) = (\\<lambda>P s. wp (f (g s)) P s)\"", "lemma eval_wlp_Bind:\n  \"wlp (Bind g f) = (\\<lambda>P s. wlp (f (g s)) P s)\"", "lemmas wp_eval = eval_wp_Abort eval_wlp_Abort eval_wp_Skip eval_wlp_Skip\n                 eval_wp_Apply eval_wlp_Apply eval_wp_Seq eval_wlp_Seq\n                 eval_wp_PC eval_wlp_PC eval_wp_DC eval_wlp_DC\n                 eval_wp_AC eval_wlp_AC\n                 eval_wp_Embed eval_wlp_Embed eval_wp_SetDC eval_wlp_SetDC\n                 eval_wp_SetPC eval_wlp_SetPC eval_wp_Mu eval_wlp_Mu\n                 eval_wp_Bind eval_wlp_Bind", "lemma Skip_Seq:\n  \"Skip ;; A = A\"", "lemma Seq_Skip:\n  \"A ;; Skip = A\"", "lemmas skip_simps = Skip_Seq Seq_Skip"], "translations": [["", "lemma eval_wp_Abort:\n  \"wp Abort P = (\\<lambda>s. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp Abort P = (\\<lambda>s. 0)", "unfolding wp_def Abort_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. if True then 0 else 1) = (\\<lambda>s. 0)", "by(simp)"], ["", "lemma eval_wlp_Abort:\n  \"wlp Abort P = (\\<lambda>s. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp Abort P = (\\<lambda>s. 1)", "unfolding wlp_def Abort_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. if False then 0 else 1) = (\\<lambda>s. 1)", "by(simp)"], ["", "lemma eval_wp_Skip:\n  \"wp Skip P = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp Skip P = P", "unfolding wp_def Skip_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P = P", "by(simp)"], ["", "lemma eval_wlp_Skip:\n  \"wlp Skip P = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp Skip P = P", "unfolding wlp_def Skip_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P = P", "by(simp)"], ["", "lemma eval_wp_Apply:\n  \"wp (Apply f) P = P o f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (Apply f) P = P \\<circ> f", "unfolding wp_def Apply_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. P (f s)) = P \\<circ> f", "by(simp add:o_def)"], ["", "lemma eval_wlp_Apply:\n  \"wlp (Apply f) P = P o f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp (Apply f) P = P \\<circ> f", "unfolding wlp_def Apply_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. P (f s)) = P \\<circ> f", "by(simp add:o_def)"], ["", "lemma eval_wp_Seq:\n  \"wp (a ;; b) P = (wp a o wp b) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (a ;; b) P = (wp a \\<circ> wp b) P", "unfolding wp_def Seq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a True \\<circ> b True) P = (a True \\<circ> b True) P", "by(simp)"], ["", "lemma eval_wlp_Seq:\n  \"wlp (a ;; b) P = (wlp a o wlp b) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp (a ;; b) P = (wlp a \\<circ> wlp b) P", "unfolding wlp_def Seq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a False \\<circ> b False) P = (a False \\<circ> b False) P", "by(simp)"], ["", "lemma eval_wp_PC:\n  \"wp (a \\<^bsub>Q\\<^esub>\\<oplus> b) P = (\\<lambda>s. Q s * wp a P s + (1 - Q s) * wp b P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (a \\<^bsub>Q\\<^esub>\\<oplus> b) P =\n    (\\<lambda>s. Q s * wp a P s + (1 - Q s) * wp b P s)", "unfolding wp_def PC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. Q s * a True P s + (1 - Q s) * b True P s) =\n    (\\<lambda>s. Q s * a True P s + (1 - Q s) * b True P s)", "by(simp)"], ["", "lemma eval_wlp_PC:\n  \"wlp (a \\<^bsub>Q\\<^esub>\\<oplus> b) P = (\\<lambda>s. Q s * wlp a P s + (1 - Q s) * wlp b P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp (a \\<^bsub>Q\\<^esub>\\<oplus> b) P =\n    (\\<lambda>s. Q s * wlp a P s + (1 - Q s) * wlp b P s)", "unfolding wlp_def PC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. Q s * a False P s + (1 - Q s) * b False P s) =\n    (\\<lambda>s. Q s * a False P s + (1 - Q s) * b False P s)", "by(simp)"], ["", "lemma eval_wp_DC:\n  \"wp (a \\<Sqinter> b) P = (\\<lambda>s. min (wp a P s) (wp b P s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (a \\<Sqinter> b) P = (\\<lambda>s. min (wp a P s) (wp b P s))", "unfolding wp_def DC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. min (a True P s) (b True P s)) =\n    (\\<lambda>s. min (a True P s) (b True P s))", "by(simp)"], ["", "lemma eval_wlp_DC:\n  \"wlp (a \\<Sqinter> b) P = (\\<lambda>s. min (wlp a P s) (wlp b P s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp (a \\<Sqinter> b) P = (\\<lambda>s. min (wlp a P s) (wlp b P s))", "unfolding wlp_def DC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. min (a False P s) (b False P s)) =\n    (\\<lambda>s. min (a False P s) (b False P s))", "by(simp)"], ["", "lemma eval_wp_AC:\n  \"wp (a \\<Squnion> b) P = (\\<lambda>s. max (wp a P s) (wp b P s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (a \\<Squnion> b) P = (\\<lambda>s. max (wp a P s) (wp b P s))", "unfolding wp_def AC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. max (a True P s) (b True P s)) =\n    (\\<lambda>s. max (a True P s) (b True P s))", "by(simp)"], ["", "lemma eval_wlp_AC:\n  \"wlp (a \\<Squnion> b) P = (\\<lambda>s. max (wlp a P s) (wlp b P s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp (a \\<Squnion> b) P = (\\<lambda>s. max (wlp a P s) (wlp b P s))", "unfolding wlp_def AC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. max (a False P s) (b False P s)) =\n    (\\<lambda>s. max (a False P s) (b False P s))", "by(simp)"], ["", "lemma eval_wp_Embed:\n  \"wp (Embed t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (Embed t) = t", "unfolding wp_def Embed_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. t = t", "by(simp)"], ["", "lemma eval_wlp_Embed:\n  \"wlp (Embed t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp (Embed t) = t", "unfolding wlp_def Embed_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. t = t", "by(simp)"], ["", "lemma eval_wp_SetDC:\n  \"wp (SetDC p S) R s = Inf ((\\<lambda>a. wp (p a) R s) ` S s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (SetDC p S) R s = (INF a\\<in>S s. wp (p a) R s)", "unfolding wp_def SetDC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF a\\<in>S s. p a True R s) = (INF a\\<in>S s. p a True R s)", "by(simp)"], ["", "lemma eval_wlp_SetDC:\n  \"wlp (SetDC p S) R s = Inf ((\\<lambda>a. wlp (p a) R s) ` S s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp (SetDC p S) R s = (INF a\\<in>S s. wlp (p a) R s)", "unfolding wlp_def SetDC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF a\\<in>S s. p a False R s) = (INF a\\<in>S s. p a False R s)", "by(simp)"], ["", "lemma eval_wp_SetPC:\n  \"wp (SetPC f p) P = (\\<lambda>s. \\<Sum>a\\<in>supp (p s). p s a * wp (f a) P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (SetPC f p) P =\n    (\\<lambda>s. \\<Sum>a\\<in>supp (p s). p s a * wp (f a) P s)", "unfolding wp_def SetPC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. \\<Sum>a\\<in>supp (p s). p s a * f a True P s) =\n    (\\<lambda>s. \\<Sum>a\\<in>supp (p s). p s a * f a True P s)", "by(simp)"], ["", "lemma eval_wlp_SetPC:\n  \"wlp (SetPC f p) P = (\\<lambda>s. \\<Sum>a\\<in>supp (p s). p s a * wlp (f a) P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp (SetPC f p) P =\n    (\\<lambda>s. \\<Sum>a\\<in>supp (p s). p s a * wlp (f a) P s)", "unfolding wlp_def SetPC_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. \\<Sum>a\\<in>supp (p s). p s a * f a False P s) =\n    (\\<lambda>s. \\<Sum>a\\<in>supp (p s). p s a * f a False P s)", "by(simp)"], ["", "lemma eval_wp_Mu:\n  \"wp (\\<mu> t. T t) = lfp_trans (\\<lambda>t. wp (T (Embed t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (\\<mu>t. T t) = lfp_trans (\\<lambda>t. wp (T (Embed t)))", "unfolding wp_def Mu_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if True then lfp_trans (\\<lambda>t. T (Embed t) True)\n     else gfp_trans (\\<lambda>t. T (Embed t) True)) =\n    lfp_trans (\\<lambda>t. T (Embed t) True)", "by(simp)"], ["", "lemma eval_wlp_Mu:\n  \"wlp (\\<mu> t. T t) = gfp_trans (\\<lambda>t. wlp (T (Embed t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp (\\<mu>t. T t) = gfp_trans (\\<lambda>t. wlp (T (Embed t)))", "unfolding wlp_def Mu_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if False then lfp_trans (\\<lambda>t. T (Embed t) False)\n     else gfp_trans (\\<lambda>t. T (Embed t) False)) =\n    gfp_trans (\\<lambda>t. T (Embed t) False)", "by(simp)"], ["", "lemma eval_wp_Bind:\n  \"wp (Bind g f) = (\\<lambda>P s. wp (f (g s)) P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (Bind g f) = (\\<lambda>P s. wp (f (g s)) P s)", "unfolding Bind_def wp_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>P s. f (g s) True P s) = (\\<lambda>P s. f (g s) True P s)", "by(simp)"], ["", "lemma eval_wlp_Bind:\n  \"wlp (Bind g f) = (\\<lambda>P s. wlp (f (g s)) P s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wlp (Bind g f) = (\\<lambda>P s. wlp (f (g s)) P s)", "unfolding Bind_def wlp_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>P s. f (g s) False P s) = (\\<lambda>P s. f (g s) False P s)", "by(simp)"], ["", "text \\<open>Use simp add:wp\\_eval to fully unfold a program fragment\\<close>"], ["", "lemmas wp_eval = eval_wp_Abort eval_wlp_Abort eval_wp_Skip eval_wlp_Skip\n                 eval_wp_Apply eval_wlp_Apply eval_wp_Seq eval_wlp_Seq\n                 eval_wp_PC eval_wlp_PC eval_wp_DC eval_wlp_DC\n                 eval_wp_AC eval_wlp_AC\n                 eval_wp_Embed eval_wlp_Embed eval_wp_SetDC eval_wlp_SetDC\n                 eval_wp_SetPC eval_wlp_SetPC eval_wp_Mu eval_wlp_Mu\n                 eval_wp_Bind eval_wlp_Bind"], ["", "lemma Skip_Seq:\n  \"Skip ;; A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Skip ;; A = A", "unfolding Skip_def Seq_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A = A", "by(rule refl)"], ["", "lemma Seq_Skip:\n  \"A ;; Skip = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ;; Skip = A", "unfolding Skip_def Seq_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A = A", "by(rule refl)"], ["", "text \\<open>Use these as simp rules to clear out Skips\\<close>"], ["", "lemmas skip_simps = Skip_Seq Seq_Skip"], ["", "end"]]}