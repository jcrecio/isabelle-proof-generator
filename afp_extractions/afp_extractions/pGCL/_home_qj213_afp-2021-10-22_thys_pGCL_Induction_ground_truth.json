{"file_name": "/home/qj213/afp-2021-10-22/thys/pGCL/Induction.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/pGCL", "problem_names": ["lemma Inf_exp_lower:\n  \"\\<lbrakk> P \\<in> S; \\<forall>P\\<in>S. nneg P \\<rbrakk> \\<Longrightarrow> Inf_exp S \\<le> P\"", "lemma Inf_exp_greatest:\n  \"\\<lbrakk> S \\<noteq> {}; \\<forall>P\\<in>S. Q \\<le> P \\<rbrakk> \\<Longrightarrow> Q \\<le> Inf_exp S\"", "lemma Sup_exp_upper:\n  \"\\<lbrakk> P \\<in> S; \\<forall>P\\<in>S. bounded_by b P \\<rbrakk> \\<Longrightarrow> P \\<le> Sup_exp S\"", "lemma Sup_exp_least:\n  \"\\<lbrakk> \\<forall>P\\<in>S. P \\<le> Q; nneg Q \\<rbrakk> \\<Longrightarrow> Sup_exp S \\<le> Q\"", "lemma Sup_exp_sound:\n  assumes sS: \"\\<And>P. P\\<in>S \\<Longrightarrow> sound P\"\n      and bS: \"\\<And>P. P\\<in>S \\<Longrightarrow> bounded_by b P\"\n  shows \"sound (Sup_exp S)\"", "lemma lfp_exp_lowerbound:\n  \"\\<lbrakk> t P \\<le> P; sound P \\<rbrakk> \\<Longrightarrow> lfp_exp t \\<le> P\"", "lemma lfp_exp_greatest:\n  \"\\<lbrakk> \\<And>P. \\<lbrakk> t P \\<le> P; sound P \\<rbrakk> \\<Longrightarrow> Q \\<le> P; sound Q; t R \\<tturnstile> R; sound R \\<rbrakk> \\<Longrightarrow> Q \\<le> lfp_exp t\"", "lemma feasible_lfp_exp_sound:\n  \"feasible t \\<Longrightarrow> sound (lfp_exp t)\"", "lemma lfp_exp_sound:\n  assumes fR: \"t R \\<tturnstile> R\" and sR: \"sound R\"\n  shows \"sound (lfp_exp t)\"", "lemma lfp_exp_bound:\n  \"(\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow> bounded_by 1 (lfp_exp t)\"", "lemma lfp_exp_unitary:\n  \"(\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow> unitary (lfp_exp t)\"", "lemma lfp_exp_lemma2:\n  fixes t::\"'s trans\"\n  assumes st: \"\\<And>P. sound P \\<Longrightarrow> sound (t P)\"\n      and mt: \"mono_trans t\"\n      and fR: \"t R \\<tturnstile> R\" and sR: \"sound R\"\n  shows \"t (lfp_exp t) \\<le> lfp_exp t\"", "lemma lfp_exp_lemma3:\n  assumes st: \"\\<And>P. sound P \\<Longrightarrow> sound (t P)\"\n      and mt: \"mono_trans t\"\n      and fR: \"t R \\<tturnstile> R\" and sR: \"sound R\"\n  shows \"lfp_exp t \\<le> t (lfp_exp t)\"", "lemma lfp_exp_unfold:\n  assumes nt: \"\\<And>P. sound P \\<Longrightarrow> sound (t P)\"\n      and mt: \"mono_trans t\"\n      and fR: \"t R \\<tturnstile> R\" and sR: \"sound R\"\n  shows \"lfp_exp t = t (lfp_exp t)\"", "lemma gfp_exp_upperbound:\n  \"\\<lbrakk> P \\<le> t P; unitary P \\<rbrakk> \\<Longrightarrow> P \\<le> gfp_exp t\"", "lemma gfp_exp_least:\n  \"\\<lbrakk> \\<And>P. \\<lbrakk> P \\<le> t P; unitary P \\<rbrakk> \\<Longrightarrow> P \\<le> Q; unitary Q \\<rbrakk> \\<Longrightarrow> gfp_exp t \\<le> Q\"", "lemma gfp_exp_bound:\n  \"(\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow> bounded_by 1 (gfp_exp t)\"", "lemma gfp_exp_nneg[iff]:\n  \"nneg (gfp_exp t)\"", "lemma gfp_exp_unitary:\n  \"(\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow> unitary (gfp_exp t)\"", "lemma gfp_exp_lemma2:\n  assumes ft: \"\\<And>P. unitary P \\<Longrightarrow> unitary (t P)\"\n      and mt: \"\\<And>P Q. \\<lbrakk> unitary P; unitary Q; P \\<tturnstile> Q \\<rbrakk> \\<Longrightarrow> t P \\<tturnstile> t Q\"\n  shows \"gfp_exp t \\<le> t (gfp_exp t)\"", "lemma gfp_exp_lemma3:\n  assumes ft: \"\\<And>P. unitary P \\<Longrightarrow> unitary (t P)\"\n      and mt: \"\\<And>P Q. \\<lbrakk> unitary P; unitary Q; P \\<tturnstile> Q \\<rbrakk> \\<Longrightarrow> t P \\<tturnstile> t Q\"\n  shows \"t (gfp_exp t) \\<le> gfp_exp t\"", "lemma gfp_exp_unfold:\n  \"(\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow> (\\<And>P Q. \\<lbrakk> unitary P; unitary Q; P \\<tturnstile> Q \\<rbrakk> \\<Longrightarrow> t P \\<tturnstile> t Q) \\<Longrightarrow>\n   gfp_exp t = t (gfp_exp t)\"", "lemma Inf_trans_lower:\n  \"\\<lbrakk> t \\<in> S; \\<forall>u\\<in>S. \\<forall>P. sound P \\<longrightarrow> sound (u P) \\<rbrakk> \\<Longrightarrow> le_trans (Inf_trans S) t\"", "lemma Inf_trans_greatest:\n  \"\\<lbrakk> S \\<noteq> {}; \\<forall>t\\<in>S. \\<forall>P. le_trans u t \\<rbrakk> \\<Longrightarrow> le_trans u (Inf_trans S)\"", "lemma Sup_trans_upper:\n  \"\\<lbrakk> t \\<in> S; \\<forall>u\\<in>S. \\<forall>P. unitary P \\<longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans t (Sup_trans S)\"", "lemma Sup_trans_upper2:\n  \"\\<lbrakk> t \\<in> S; \\<forall>u\\<in>S. \\<forall>P. (nneg P \\<and> bounded_by b P) \\<longrightarrow> (nneg (u P) \\<and> bounded_by b (u P));\n     nneg P; bounded_by b P \\<rbrakk> \\<Longrightarrow> t P \\<tturnstile> Sup_trans S P\"", "lemma Sup_trans_least:\n  \"\\<lbrakk> \\<forall>t\\<in>S. le_utrans t u; \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans (Sup_trans S) u\"", "lemma Sup_trans_least2:\n  \"\\<lbrakk> \\<forall>t\\<in>S. \\<forall>P. nneg P \\<longrightarrow> bounded_by b P \\<longrightarrow> t P \\<tturnstile> u P;\n     \\<forall>u\\<in>S. \\<forall>P. (nneg P \\<and> bounded_by b P) \\<longrightarrow> (nneg (u P) \\<and> bounded_by b (u P));\n     nneg P; bounded_by b P; \\<And>P. \\<lbrakk> nneg P; bounded_by b P \\<rbrakk> \\<Longrightarrow> nneg (u P) \\<rbrakk> \\<Longrightarrow> Sup_trans S P \\<tturnstile> u P\"", "lemma feasible_Sup_trans:\n  fixes S::\"'s trans set\"\n  assumes fS: \"\\<forall>t\\<in>S. feasible t\"\n  shows \"feasible (Sup_trans S)\"", "lemma lfp_trans_lowerbound:\n  \"\\<lbrakk> le_trans (T t) t; \\<And>P. sound P \\<Longrightarrow> sound (t P) \\<rbrakk> \\<Longrightarrow> le_trans (lfp_trans T) t\"", "lemma lfp_trans_greatest:\n  \"\\<lbrakk> \\<And>t P. \\<lbrakk> le_trans (T t) t; \\<And>P. sound P \\<Longrightarrow> sound (t P) \\<rbrakk> \\<Longrightarrow> le_trans u t;\n     \\<And>P. sound P \\<Longrightarrow> sound (v P); le_trans (T v) v \\<rbrakk> \\<Longrightarrow>\n   le_trans u (lfp_trans T)\"", "lemma lfp_trans_sound:\n  fixes P Q::\"'s expect\"\n  assumes sP: \"sound P\"\n      and fv: \"le_trans (T v) v\"\n      and sv: \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n  shows  \"sound (lfp_trans T P)\"", "lemma lfp_trans_unitary:\n  fixes P Q::\"'s expect\"\n  assumes uP: \"unitary P\"\n      and fv: \"le_trans (T v) v\"\n      and sv: \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n      and fT: \"le_trans (T (\\<lambda>P s. bound_of P)) (\\<lambda>P s. bound_of P)\"\n  shows  \"unitary (lfp_trans T P)\"", "lemma lfp_trans_lemma2:\n  fixes v::\"'s trans\"\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_trans t u; \\<And>P. sound P \\<Longrightarrow> sound (t P);\n                         \\<And>P. sound P \\<Longrightarrow> sound (u P) \\<rbrakk> \\<Longrightarrow> le_trans (T t) (T u)\"\n      and nT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. sound Q \\<Longrightarrow> sound (t Q); sound P \\<rbrakk> \\<Longrightarrow> sound (T t P)\"\n      and fv:   \"le_trans (T v) v\"\n      and sv:   \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n  shows \"le_trans (T (lfp_trans T)) (lfp_trans T)\"", "lemma lfp_trans_lemma3:\n  fixes v::\"'s trans\"\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_trans t u; \\<And>P. sound P \\<Longrightarrow> sound (t P);\n                         \\<And>P. sound P \\<Longrightarrow> sound (u P) \\<rbrakk> \\<Longrightarrow> le_trans (T t) (T u)\"\n      and sT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. sound Q \\<Longrightarrow> sound (t Q); sound P \\<rbrakk> \\<Longrightarrow> sound (T t P)\"\n      and fv:   \"le_trans (T v) v\"\n      and sv:   \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n  shows \"le_trans (lfp_trans T) (T (lfp_trans T))\"", "lemma lfp_trans_unfold:\n  fixes P::\"'s expect\"\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_trans t u; \\<And>P. sound P \\<Longrightarrow> sound (t P);\n                         \\<And>P. sound P \\<Longrightarrow> sound (u P) \\<rbrakk> \\<Longrightarrow> le_trans (T t) (T u)\"\n      and sT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. sound Q \\<Longrightarrow> sound (t Q); sound P \\<rbrakk> \\<Longrightarrow> sound (T t P)\"\n      and fv:   \"le_trans (T v) v\"\n      and sv:   \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n  shows \"equiv_trans (lfp_trans T) (T (lfp_trans T))\"", "lemma gfp_trans_upperbound:\n  \"\\<lbrakk> le_utrans t (T t); \\<And>P. unitary P \\<Longrightarrow> unitary (t P) \\<rbrakk> \\<Longrightarrow> le_utrans t (gfp_trans T)\"", "lemma gfp_trans_least:\n  \"\\<lbrakk> \\<And>t. \\<lbrakk> le_utrans t (T t); \\<And>P. unitary P \\<Longrightarrow> unitary (t P) \\<rbrakk> \\<Longrightarrow> le_utrans t u;\n     \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow>\n   le_utrans (gfp_trans T) u\"", "lemma gfp_trans_unitary:\n  fixes P::\"'s expect\"\n  assumes uP: \"unitary P\"\n  shows \"unitary (gfp_trans T P)\"", "lemma gfp_trans_lemma2:\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_utrans t u; \\<And>P. unitary P \\<Longrightarrow> unitary (t P);\n                         \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans (T t) (T u)\"\n      and hT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. unitary Q \\<Longrightarrow> unitary (t Q); unitary P \\<rbrakk> \\<Longrightarrow> unitary (T t P)\"\n  shows \"le_utrans (gfp_trans T) (T (gfp_trans T))\"", "lemma gfp_trans_lemma3:\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_utrans t u; \\<And>P. unitary P \\<Longrightarrow> unitary (t P);\n                         \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans (T t) (T u)\"\n      and hT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. unitary Q \\<Longrightarrow> unitary (t Q); unitary P \\<rbrakk> \\<Longrightarrow> unitary (T t P)\"\n  shows \"le_utrans (T (gfp_trans T)) (gfp_trans T)\"", "lemma gfp_trans_unfold:\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_utrans t u; \\<And>P. unitary P \\<Longrightarrow> unitary (t P);\n                         \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans (T t) (T u)\"\n      and hT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. unitary Q \\<Longrightarrow> unitary (t Q); unitary P \\<rbrakk> \\<Longrightarrow> unitary (T t P)\"\n  shows \"equiv_utrans (gfp_trans T) (T (gfp_trans T))\"", "lemma gfp_pulldown:\n  fixes P::\"'s expect\"\n  assumes tailcall:  \"\\<And>u P. unitary P \\<Longrightarrow> T u P = t P (u P)\"\n      and fT:        \"\\<And>t P. \\<lbrakk> \\<And>Q. unitary Q \\<Longrightarrow> unitary (t Q); unitary P \\<rbrakk> \\<Longrightarrow> unitary (T t P)\"\n      and ft:        \"\\<And>P Q. unitary P \\<Longrightarrow> unitary Q \\<Longrightarrow> unitary (t P Q)\"\n      and mt:        \"\\<And>P Q R. \\<lbrakk> unitary P; unitary Q; unitary R; Q \\<tturnstile> R \\<rbrakk> \\<Longrightarrow> t P Q \\<tturnstile> t P R\"\n      and uP:        \"unitary P\"\n      and monoT:     \"\\<And>t u. \\<lbrakk> le_utrans t u; \\<And>P. unitary P \\<Longrightarrow> unitary (t P);\n                              \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans (T t) (T u)\"\n  shows \"gfp_trans T P = gfp_exp (t P)\" (is \"?X P = ?Y P\")", "lemma lfp_pulldown:\n  fixes P::\"'s expect\" and t::\"'s expect \\<Rightarrow> 's trans\"\n    and T::\"'s trans \\<Rightarrow> 's trans\"\n  assumes tailcall:  \"\\<And>u P. sound P \\<Longrightarrow> T u P = t P (u P)\"\n      and st:        \"\\<And>P Q. sound P \\<Longrightarrow> sound Q \\<Longrightarrow> sound (t P Q)\"\n      and mt:        \"\\<And>P. sound P \\<Longrightarrow> mono_trans (t P)\"\n      and monoT: \"\\<And>t u. \\<lbrakk> le_trans t u; \\<And>P. sound P \\<Longrightarrow> sound (t P);\n                          \\<And>P. sound P \\<Longrightarrow> sound (u P) \\<rbrakk> \\<Longrightarrow> le_trans (T t) (T u)\"\n      and nT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. sound Q \\<Longrightarrow> sound (t Q); sound P \\<rbrakk> \\<Longrightarrow> sound (T t P)\"\n      and fv:   \"le_trans (T v) v\"\n      and sv:   \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n      and sP:   \"sound P\"\n  shows \"lfp_trans T P = lfp_exp (t P)\" (is \"?X P = ?Y P\")", "lemma Inf_utrans_lower:\n  \"\\<lbrakk> t \\<in> S; \\<forall>t\\<in>S. \\<forall>P. unitary P \\<longrightarrow> unitary (t P) \\<rbrakk> \\<Longrightarrow> le_utrans (Inf_utrans S) t\"", "lemma Inf_utrans_greatest:\n  \"\\<lbrakk> \\<And>P. unitary P \\<Longrightarrow> unitary (t P); \\<forall>u\\<in>S. le_utrans t u \\<rbrakk> \\<Longrightarrow> le_utrans t (Inf_utrans S)\""], "translations": [["", "lemma Inf_exp_lower:\n  \"\\<lbrakk> P \\<in> S; \\<forall>P\\<in>S. nneg P \\<rbrakk> \\<Longrightarrow> Inf_exp S \\<le> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<in> S; \\<forall>P\\<in>S. nneg P\\<rbrakk>\n    \\<Longrightarrow> Inf_exp S \\<tturnstile> P", "unfolding Inf_exp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<in> S; \\<forall>P\\<in>S. nneg P\\<rbrakk>\n    \\<Longrightarrow> \\<lambda>s. Inf {f s |f. f \\<in> S} \\<tturnstile> P", "by(intro le_funI cInf_lower bdd_belowI[where m=0], auto)"], ["", "lemma Inf_exp_greatest:\n  \"\\<lbrakk> S \\<noteq> {}; \\<forall>P\\<in>S. Q \\<le> P \\<rbrakk> \\<Longrightarrow> Q \\<le> Inf_exp S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {}; \\<forall>P\\<in>S. Q \\<tturnstile> P\\<rbrakk>\n    \\<Longrightarrow> Q \\<tturnstile> Inf_exp S", "unfolding Inf_exp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {}; \\<forall>P\\<in>S. Q \\<tturnstile> P\\<rbrakk>\n    \\<Longrightarrow> Q \\<tturnstile> \\<lambda>s. Inf {f s |f. f \\<in> S}", "by(auto intro!:le_funI[OF cInf_greatest])"], ["", "definition Sup_exp :: \"'s expect set \\<Rightarrow> 's expect\"\nwhere \"Sup_exp S = (if S = {} then \\<lambda>s. 0 else (\\<lambda>s. Sup {f s |f. f \\<in> S}))\""], ["", "lemma Sup_exp_upper:\n  \"\\<lbrakk> P \\<in> S; \\<forall>P\\<in>S. bounded_by b P \\<rbrakk> \\<Longrightarrow> P \\<le> Sup_exp S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<in> S; \\<forall>P\\<in>S. bounded_by b P\\<rbrakk>\n    \\<Longrightarrow> P \\<tturnstile> Sup_exp S", "unfolding Sup_exp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<in> S; \\<forall>P\\<in>S. bounded_by b P\\<rbrakk>\n    \\<Longrightarrow> P \\<tturnstile> if S = {} then \\<lambda>s. 0\nelse (\\<lambda>s. Sup {f s |f. f \\<in> S})", "by(cases \"S={}\", simp_all, intro le_funI cSup_upper bdd_aboveI[where M=b], auto)"], ["", "lemma Sup_exp_least:\n  \"\\<lbrakk> \\<forall>P\\<in>S. P \\<le> Q; nneg Q \\<rbrakk> \\<Longrightarrow> Sup_exp S \\<le> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>P\\<in>S. P \\<tturnstile> Q; nneg Q\\<rbrakk>\n    \\<Longrightarrow> Sup_exp S \\<tturnstile> Q", "unfolding Sup_exp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>P\\<in>S. P \\<tturnstile> Q; nneg Q\\<rbrakk>\n    \\<Longrightarrow> if S = {} then \\<lambda>s. 0\n                      else (\\<lambda>s.\n                               Sup {f s |f. f \\<in> S}) \\<tturnstile> Q", "by(cases \"S={}\", auto intro!:le_funI[OF cSup_least])"], ["", "lemma Sup_exp_sound:\n  assumes sS: \"\\<And>P. P\\<in>S \\<Longrightarrow> sound P\"\n      and bS: \"\\<And>P. P\\<in>S \\<Longrightarrow> bounded_by b P\"\n  shows \"sound (Sup_exp S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sound (Sup_exp S)", "proof(cases \"S={}\", simp add:Sup_exp_def, blast,\n      intro soundI2 bounded_byI2 nnegI2)"], ["proof (state)\ngoal (2 subgoals):\n 1. S \\<noteq> {} \\<Longrightarrow> Sup_exp S \\<tturnstile> \\<lambda>s. ?b16\n 2. S \\<noteq> {} \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> Sup_exp S", "assume neS: \"S \\<noteq> {}\""], ["proof (state)\nthis:\n  S \\<noteq> {}\n\ngoal (2 subgoals):\n 1. S \\<noteq> {} \\<Longrightarrow> Sup_exp S \\<tturnstile> \\<lambda>s. ?b16\n 2. S \\<noteq> {} \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> Sup_exp S", "then"], ["proof (chain)\npicking this:\n  S \\<noteq> {}", "obtain P where Pin: \"P \\<in> S\""], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>P. P \\<in> S \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by(auto)"], ["proof (state)\nthis:\n  P \\<in> S\n\ngoal (2 subgoals):\n 1. S \\<noteq> {} \\<Longrightarrow> Sup_exp S \\<tturnstile> \\<lambda>s. ?b16\n 2. S \\<noteq> {} \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> Sup_exp S", "with sS bS"], ["proof (chain)\npicking this:\n  ?P \\<in> S \\<Longrightarrow> sound ?P\n  ?P \\<in> S \\<Longrightarrow> bounded_by b ?P\n  P \\<in> S", "have nP: \"nneg P\" \"bounded_by b P\""], ["proof (prove)\nusing this:\n  ?P \\<in> S \\<Longrightarrow> sound ?P\n  ?P \\<in> S \\<Longrightarrow> bounded_by b ?P\n  P \\<in> S\n\ngoal (1 subgoal):\n 1. nneg P &&& bounded_by b P", "by(auto)"], ["proof (state)\nthis:\n  nneg P\n  bounded_by b P\n\ngoal (2 subgoals):\n 1. S \\<noteq> {} \\<Longrightarrow> Sup_exp S \\<tturnstile> \\<lambda>s. ?b16\n 2. S \\<noteq> {} \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> Sup_exp S", "hence nb: \"0 \\<le> b\""], ["proof (prove)\nusing this:\n  nneg P\n  bounded_by b P\n\ngoal (1 subgoal):\n 1. 0 \\<le> b", "by(auto)"], ["proof (state)\nthis:\n  0 \\<le> b\n\ngoal (2 subgoals):\n 1. S \\<noteq> {} \\<Longrightarrow> Sup_exp S \\<tturnstile> \\<lambda>s. ?b16\n 2. S \\<noteq> {} \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> Sup_exp S", "from bS nb"], ["proof (chain)\npicking this:\n  ?P \\<in> S \\<Longrightarrow> bounded_by b ?P\n  0 \\<le> b", "show \"Sup_exp S \\<tturnstile> \\<lambda>s. b\""], ["proof (prove)\nusing this:\n  ?P \\<in> S \\<Longrightarrow> bounded_by b ?P\n  0 \\<le> b\n\ngoal (1 subgoal):\n 1. Sup_exp S \\<tturnstile> \\<lambda>s. b", "by(auto intro:Sup_exp_least)"], ["proof (state)\nthis:\n  Sup_exp S \\<tturnstile> \\<lambda>s. b\n\ngoal (1 subgoal):\n 1. S \\<noteq> {} \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> Sup_exp S", "from nP"], ["proof (chain)\npicking this:\n  nneg P\n  bounded_by b P", "have \"\\<lambda>s. 0 \\<tturnstile> P\""], ["proof (prove)\nusing this:\n  nneg P\n  bounded_by b P\n\ngoal (1 subgoal):\n 1. \\<lambda>s. 0 \\<tturnstile> P", "by(auto)"], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> P\n\ngoal (1 subgoal):\n 1. S \\<noteq> {} \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> Sup_exp S", "also"], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> P\n\ngoal (1 subgoal):\n 1. S \\<noteq> {} \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> Sup_exp S", "from Pin bS"], ["proof (chain)\npicking this:\n  P \\<in> S\n  ?P \\<in> S \\<Longrightarrow> bounded_by b ?P", "have \"P \\<tturnstile> Sup_exp S\""], ["proof (prove)\nusing this:\n  P \\<in> S\n  ?P \\<in> S \\<Longrightarrow> bounded_by b ?P\n\ngoal (1 subgoal):\n 1. P \\<tturnstile> Sup_exp S", "by(auto intro:Sup_exp_upper)"], ["proof (state)\nthis:\n  P \\<tturnstile> Sup_exp S\n\ngoal (1 subgoal):\n 1. S \\<noteq> {} \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> Sup_exp S", "finally"], ["proof (chain)\npicking this:\n  \\<lambda>s. 0 \\<tturnstile> Sup_exp S", "show \"\\<lambda>s. 0 \\<tturnstile> Sup_exp S\""], ["proof (prove)\nusing this:\n  \\<lambda>s. 0 \\<tturnstile> Sup_exp S\n\ngoal (1 subgoal):\n 1. \\<lambda>s. 0 \\<tturnstile> Sup_exp S", "."], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> Sup_exp S\n\ngoal:\nNo subgoals!", "qed"], ["", "definition lfp_exp :: \"'s trans \\<Rightarrow> 's expect\"\nwhere \"lfp_exp t = Inf_exp {P. sound P \\<and> t P \\<le> P}\""], ["", "lemma lfp_exp_lowerbound:\n  \"\\<lbrakk> t P \\<le> P; sound P \\<rbrakk> \\<Longrightarrow> lfp_exp t \\<le> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n    \\<Longrightarrow> lfp_exp t \\<tturnstile> P", "unfolding lfp_exp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n    \\<Longrightarrow> Inf_exp\n                       {P. sound P \\<and>\n                           t P \\<tturnstile> P} \\<tturnstile> P", "by(auto intro:Inf_exp_lower)"], ["", "lemma lfp_exp_greatest:\n  \"\\<lbrakk> \\<And>P. \\<lbrakk> t P \\<le> P; sound P \\<rbrakk> \\<Longrightarrow> Q \\<le> P; sound Q; t R \\<tturnstile> R; sound R \\<rbrakk> \\<Longrightarrow> Q \\<le> lfp_exp t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n                \\<Longrightarrow> Q \\<tturnstile> P;\n     sound Q; t R \\<tturnstile> R; sound R\\<rbrakk>\n    \\<Longrightarrow> Q \\<tturnstile> lfp_exp t", "unfolding lfp_exp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n                \\<Longrightarrow> Q \\<tturnstile> P;\n     sound Q; t R \\<tturnstile> R; sound R\\<rbrakk>\n    \\<Longrightarrow> Q \\<tturnstile> Inf_exp\n {P. sound P \\<and> t P \\<tturnstile> P}", "by(auto intro:Inf_exp_greatest)"], ["", "lemma feasible_lfp_exp_sound:\n  \"feasible t \\<Longrightarrow> sound (lfp_exp t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. feasible t \\<Longrightarrow> sound (lfp_exp t)", "by(intro soundI2 bounded_byI2 nnegI2, auto intro!:lfp_exp_lowerbound lfp_exp_greatest)"], ["", "lemma lfp_exp_sound:\n  assumes fR: \"t R \\<tturnstile> R\" and sR: \"sound R\"\n  shows \"sound (lfp_exp t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sound (lfp_exp t)", "proof(intro soundI2)"], ["proof (state)\ngoal (2 subgoals):\n 1. bounded_by ?b (lfp_exp t)\n 2. nneg (lfp_exp t)", "from fR sR"], ["proof (chain)\npicking this:\n  t R \\<tturnstile> R\n  sound R", "have \"lfp_exp t \\<tturnstile> R\""], ["proof (prove)\nusing this:\n  t R \\<tturnstile> R\n  sound R\n\ngoal (1 subgoal):\n 1. lfp_exp t \\<tturnstile> R", "by(auto intro:lfp_exp_lowerbound)"], ["proof (state)\nthis:\n  lfp_exp t \\<tturnstile> R\n\ngoal (2 subgoals):\n 1. bounded_by ?b (lfp_exp t)\n 2. nneg (lfp_exp t)", "also"], ["proof (state)\nthis:\n  lfp_exp t \\<tturnstile> R\n\ngoal (2 subgoals):\n 1. bounded_by ?b (lfp_exp t)\n 2. nneg (lfp_exp t)", "from sR"], ["proof (chain)\npicking this:\n  sound R", "have \"R \\<tturnstile> \\<lambda>s. bound_of R\""], ["proof (prove)\nusing this:\n  sound R\n\ngoal (1 subgoal):\n 1. R \\<tturnstile> \\<lambda>s. bound_of R", "by(auto)"], ["proof (state)\nthis:\n  R \\<tturnstile> \\<lambda>s. bound_of R\n\ngoal (2 subgoals):\n 1. bounded_by ?b (lfp_exp t)\n 2. nneg (lfp_exp t)", "finally"], ["proof (chain)\npicking this:\n  lfp_exp t \\<tturnstile> \\<lambda>s. bound_of R", "show \"bounded_by (bound_of R) (lfp_exp t)\""], ["proof (prove)\nusing this:\n  lfp_exp t \\<tturnstile> \\<lambda>s. bound_of R\n\ngoal (1 subgoal):\n 1. bounded_by (bound_of R) (lfp_exp t)", "by(auto)"], ["proof (state)\nthis:\n  bounded_by (bound_of R) (lfp_exp t)\n\ngoal (1 subgoal):\n 1. nneg (lfp_exp t)", "from fR sR"], ["proof (chain)\npicking this:\n  t R \\<tturnstile> R\n  sound R", "show \"nneg (lfp_exp t)\""], ["proof (prove)\nusing this:\n  t R \\<tturnstile> R\n  sound R\n\ngoal (1 subgoal):\n 1. nneg (lfp_exp t)", "by(auto intro:lfp_exp_greatest)"], ["proof (state)\nthis:\n  nneg (lfp_exp t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfp_exp_bound:\n  \"(\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow> bounded_by 1 (lfp_exp t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    bounded_by 1 (lfp_exp t)", "by(auto intro!:lfp_exp_lowerbound)"], ["", "lemma lfp_exp_unitary:\n  \"(\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow> unitary (lfp_exp t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    unitary (lfp_exp t)", "proof(intro unitaryI[OF lfp_exp_sound lfp_exp_bound], simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    t ?R2 \\<tturnstile> ?R2\n 2. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    sound ?R2", "assume IH: \"\\<And>P. unitary P \\<Longrightarrow> unitary (t P)\""], ["proof (state)\nthis:\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n\ngoal (2 subgoals):\n 1. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    t ?R2 \\<tturnstile> ?R2\n 2. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    sound ?R2", "have \"unitary (\\<lambda>s. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unitary (\\<lambda>s. 1)", "by(auto)"], ["proof (state)\nthis:\n  unitary (\\<lambda>s. 1)\n\ngoal (2 subgoals):\n 1. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    t ?R2 \\<tturnstile> ?R2\n 2. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    sound ?R2", "with IH"], ["proof (chain)\npicking this:\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n  unitary (\\<lambda>s. 1)", "have \"unitary (t (\\<lambda>s. 1))\""], ["proof (prove)\nusing this:\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n  unitary (\\<lambda>s. 1)\n\ngoal (1 subgoal):\n 1. unitary (t (\\<lambda>s. 1))", "by(auto)"], ["proof (state)\nthis:\n  unitary (t (\\<lambda>s. 1))\n\ngoal (2 subgoals):\n 1. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    t ?R2 \\<tturnstile> ?R2\n 2. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    sound ?R2", "thus \"t (\\<lambda>s. 1) \\<tturnstile> \\<lambda>s. 1\""], ["proof (prove)\nusing this:\n  unitary (t (\\<lambda>s. 1))\n\ngoal (1 subgoal):\n 1. t (\\<lambda>s. 1) \\<tturnstile> \\<lambda>s. 1", "by(auto)"], ["proof (state)\nthis:\n  t (\\<lambda>s. 1) \\<tturnstile> \\<lambda>s. 1\n\ngoal (1 subgoal):\n 1. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    sound (\\<lambda>s. 1)", "show \"sound (\\<lambda>s. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sound (\\<lambda>s. 1)", "by(auto)"], ["proof (state)\nthis:\n  sound (\\<lambda>s. 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfp_exp_lemma2:\n  fixes t::\"'s trans\"\n  assumes st: \"\\<And>P. sound P \\<Longrightarrow> sound (t P)\"\n      and mt: \"mono_trans t\"\n      and fR: \"t R \\<tturnstile> R\" and sR: \"sound R\"\n  shows \"t (lfp_exp t) \\<le> lfp_exp t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t (lfp_exp t) \\<tturnstile> lfp_exp t", "proof(rule lfp_exp_greatest[of t, OF _ _ fR sR])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n       \\<Longrightarrow> t (lfp_exp t) \\<tturnstile> P\n 2. sound (t (lfp_exp t))", "from fR sR"], ["proof (chain)\npicking this:\n  t R \\<tturnstile> R\n  sound R", "show \"sound (t (lfp_exp t))\""], ["proof (prove)\nusing this:\n  t R \\<tturnstile> R\n  sound R\n\ngoal (1 subgoal):\n 1. sound (t (lfp_exp t))", "by(auto intro:lfp_exp_sound st)"], ["proof (state)\nthis:\n  sound (t (lfp_exp t))\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n       \\<Longrightarrow> t (lfp_exp t) \\<tturnstile> P", "fix P::\"'s expect\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n       \\<Longrightarrow> t (lfp_exp t) \\<tturnstile> P", "assume fP: \"t P \\<tturnstile> P\" and sP: \"sound P\""], ["proof (state)\nthis:\n  t P \\<tturnstile> P\n  sound P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n       \\<Longrightarrow> t (lfp_exp t) \\<tturnstile> P", "hence \"lfp_exp t \\<tturnstile> P\""], ["proof (prove)\nusing this:\n  t P \\<tturnstile> P\n  sound P\n\ngoal (1 subgoal):\n 1. lfp_exp t \\<tturnstile> P", "by(rule lfp_exp_lowerbound)"], ["proof (state)\nthis:\n  lfp_exp t \\<tturnstile> P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n       \\<Longrightarrow> t (lfp_exp t) \\<tturnstile> P", "with fP sP"], ["proof (chain)\npicking this:\n  t P \\<tturnstile> P\n  sound P\n  lfp_exp t \\<tturnstile> P", "have \"t (lfp_exp t) \\<tturnstile> t P\""], ["proof (prove)\nusing this:\n  t P \\<tturnstile> P\n  sound P\n  lfp_exp t \\<tturnstile> P\n\ngoal (1 subgoal):\n 1. t (lfp_exp t) \\<tturnstile> t P", "by(auto intro:mono_transD[OF mt] lfp_exp_sound)"], ["proof (state)\nthis:\n  t (lfp_exp t) \\<tturnstile> t P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n       \\<Longrightarrow> t (lfp_exp t) \\<tturnstile> P", "also"], ["proof (state)\nthis:\n  t (lfp_exp t) \\<tturnstile> t P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n       \\<Longrightarrow> t (lfp_exp t) \\<tturnstile> P", "note fP"], ["proof (state)\nthis:\n  t P \\<tturnstile> P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>t P \\<tturnstile> P; sound P\\<rbrakk>\n       \\<Longrightarrow> t (lfp_exp t) \\<tturnstile> P", "finally"], ["proof (chain)\npicking this:\n  t (lfp_exp t) \\<tturnstile> P", "show \"t (lfp_exp t) \\<tturnstile> P\""], ["proof (prove)\nusing this:\n  t (lfp_exp t) \\<tturnstile> P\n\ngoal (1 subgoal):\n 1. t (lfp_exp t) \\<tturnstile> P", "."], ["proof (state)\nthis:\n  t (lfp_exp t) \\<tturnstile> P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfp_exp_lemma3:\n  assumes st: \"\\<And>P. sound P \\<Longrightarrow> sound (t P)\"\n      and mt: \"mono_trans t\"\n      and fR: \"t R \\<tturnstile> R\" and sR: \"sound R\"\n  shows \"lfp_exp t \\<le> t (lfp_exp t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp_exp t \\<tturnstile> t (lfp_exp t)", "by(iprover intro:lfp_exp_lowerbound lfp_exp_sound lfp_exp_lemma2 assms\n                   mono_transD[OF mt])"], ["", "lemma lfp_exp_unfold:\n  assumes nt: \"\\<And>P. sound P \\<Longrightarrow> sound (t P)\"\n      and mt: \"mono_trans t\"\n      and fR: \"t R \\<tturnstile> R\" and sR: \"sound R\"\n  shows \"lfp_exp t = t (lfp_exp t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp_exp t = t (lfp_exp t)", "by(iprover intro:antisym lfp_exp_lemma2 lfp_exp_lemma3 assms)"], ["", "definition gfp_exp :: \"'s trans \\<Rightarrow> 's expect\"\nwhere \"gfp_exp t = Sup_exp {P. unitary P \\<and> P \\<le> t P}\""], ["", "lemma gfp_exp_upperbound:\n  \"\\<lbrakk> P \\<le> t P; unitary P \\<rbrakk> \\<Longrightarrow> P \\<le> gfp_exp t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<tturnstile> t P; unitary P\\<rbrakk>\n    \\<Longrightarrow> P \\<tturnstile> gfp_exp t", "by(auto simp:gfp_exp_def intro:Sup_exp_upper)"], ["", "lemma gfp_exp_least:\n  \"\\<lbrakk> \\<And>P. \\<lbrakk> P \\<le> t P; unitary P \\<rbrakk> \\<Longrightarrow> P \\<le> Q; unitary Q \\<rbrakk> \\<Longrightarrow> gfp_exp t \\<le> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>P \\<tturnstile> t P; unitary P\\<rbrakk>\n                \\<Longrightarrow> P \\<tturnstile> Q;\n     unitary Q\\<rbrakk>\n    \\<Longrightarrow> gfp_exp t \\<tturnstile> Q", "unfolding gfp_exp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>P.\n                \\<lbrakk>P \\<tturnstile> t P; unitary P\\<rbrakk>\n                \\<Longrightarrow> P \\<tturnstile> Q;\n     unitary Q\\<rbrakk>\n    \\<Longrightarrow> Sup_exp\n                       {P. unitary P \\<and>\n                           P \\<tturnstile> t P} \\<tturnstile> Q", "by(auto intro:Sup_exp_least)"], ["", "lemma gfp_exp_bound:\n  \"(\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow> bounded_by 1 (gfp_exp t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    bounded_by 1 (gfp_exp t)", "unfolding gfp_exp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    bounded_by 1 (Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P})", "by(rule bounded_byI2[OF Sup_exp_least], auto)"], ["", "lemma gfp_exp_nneg[iff]:\n  \"nneg (gfp_exp t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nneg (gfp_exp t)", "proof(intro nnegI2, simp add:gfp_exp_def, cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P1 \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}\n 2. \\<not> ?P1 \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "assume empty: \"{P. unitary P \\<and> P \\<tturnstile> t P} = {}\""], ["proof (state)\nthis:\n  {P. unitary P \\<and> P \\<tturnstile> t P} = {}\n\ngoal (2 subgoals):\n 1. ?P1 \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}\n 2. \\<not> ?P1 \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "show \"\\<lambda>s. 0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "by(simp only:empty Sup_exp_def, auto)"], ["proof (state)\nthis:\n  \\<lambda>s.\n     0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}\n\ngoal (1 subgoal):\n 1. {P. unitary P \\<and> P \\<tturnstile> t P} \\<noteq> {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {P. unitary P \\<and> P \\<tturnstile> t P} \\<noteq> {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "assume \"{P. unitary P \\<and> P \\<tturnstile> t P} \\<noteq> {}\""], ["proof (state)\nthis:\n  {P. unitary P \\<and> P \\<tturnstile> t P} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. {P. unitary P \\<and> P \\<tturnstile> t P} \\<noteq> {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "then"], ["proof (chain)\npicking this:\n  {P. unitary P \\<and> P \\<tturnstile> t P} \\<noteq> {}", "obtain Q where Qin: \"Q \\<in> {P. unitary P \\<and> P \\<tturnstile> t P}\""], ["proof (prove)\nusing this:\n  {P. unitary P \\<and> P \\<tturnstile> t P} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        Q \\<in> {P. unitary P \\<and> P \\<tturnstile> t P} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto)"], ["proof (state)\nthis:\n  Q \\<in> {P. unitary P \\<and> P \\<tturnstile> t P}\n\ngoal (1 subgoal):\n 1. {P. unitary P \\<and> P \\<tturnstile> t P} \\<noteq> {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "hence \"\\<lambda>s. 0 \\<tturnstile> Q\""], ["proof (prove)\nusing this:\n  Q \\<in> {P. unitary P \\<and> P \\<tturnstile> t P}\n\ngoal (1 subgoal):\n 1. \\<lambda>s. 0 \\<tturnstile> Q", "by(auto)"], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> Q\n\ngoal (1 subgoal):\n 1. {P. unitary P \\<and> P \\<tturnstile> t P} \\<noteq> {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "also"], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> Q\n\ngoal (1 subgoal):\n 1. {P. unitary P \\<and> P \\<tturnstile> t P} \\<noteq> {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "from Qin"], ["proof (chain)\npicking this:\n  Q \\<in> {P. unitary P \\<and> P \\<tturnstile> t P}", "have \"Q \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}\""], ["proof (prove)\nusing this:\n  Q \\<in> {P. unitary P \\<and> P \\<tturnstile> t P}\n\ngoal (1 subgoal):\n 1. Q \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "by(auto intro:Sup_exp_upper)"], ["proof (state)\nthis:\n  Q \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}\n\ngoal (1 subgoal):\n 1. {P. unitary P \\<and> P \\<tturnstile> t P} \\<noteq> {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "finally"], ["proof (chain)\npicking this:\n  \\<lambda>s.\n     0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "show \"\\<lambda>s. 0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}\""], ["proof (prove)\nusing this:\n  \\<lambda>s.\n     0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}\n\ngoal (1 subgoal):\n 1. \\<lambda>s.\n       0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}", "."], ["proof (state)\nthis:\n  \\<lambda>s.\n     0 \\<tturnstile> Sup_exp {P. unitary P \\<and> P \\<tturnstile> t P}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gfp_exp_unitary:\n  \"(\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow> unitary (gfp_exp t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow>\n    unitary (gfp_exp t)", "by(iprover intro:gfp_exp_nneg gfp_exp_bound unitaryI2)"], ["", "lemma gfp_exp_lemma2:\n  assumes ft: \"\\<And>P. unitary P \\<Longrightarrow> unitary (t P)\"\n      and mt: \"\\<And>P Q. \\<lbrakk> unitary P; unitary Q; P \\<tturnstile> Q \\<rbrakk> \\<Longrightarrow> t P \\<tturnstile> t Q\"\n  shows \"gfp_exp t \\<le> t (gfp_exp t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gfp_exp t \\<tturnstile> t (gfp_exp t)", "proof(rule gfp_exp_least)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P.\n       \\<lbrakk>P \\<tturnstile> t P; unitary P\\<rbrakk>\n       \\<Longrightarrow> P \\<tturnstile> t (gfp_exp t)\n 2. unitary (t (gfp_exp t))", "show \"unitary (t (gfp_exp t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unitary (t (gfp_exp t))", "by(auto intro:gfp_exp_unitary ft)"], ["proof (state)\nthis:\n  unitary (t (gfp_exp t))\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>P \\<tturnstile> t P; unitary P\\<rbrakk>\n       \\<Longrightarrow> P \\<tturnstile> t (gfp_exp t)", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>P \\<tturnstile> t P; unitary P\\<rbrakk>\n       \\<Longrightarrow> P \\<tturnstile> t (gfp_exp t)", "assume fp: \"P \\<le> t P\" and uP: \"unitary P\""], ["proof (state)\nthis:\n  P \\<tturnstile> t P\n  unitary P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>P \\<tturnstile> t P; unitary P\\<rbrakk>\n       \\<Longrightarrow> P \\<tturnstile> t (gfp_exp t)", "with ft"], ["proof (chain)\npicking this:\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n  P \\<tturnstile> t P\n  unitary P", "have \"P \\<le> gfp_exp t\""], ["proof (prove)\nusing this:\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n  P \\<tturnstile> t P\n  unitary P\n\ngoal (1 subgoal):\n 1. P \\<tturnstile> gfp_exp t", "by(auto intro:gfp_exp_upperbound)"], ["proof (state)\nthis:\n  P \\<tturnstile> gfp_exp t\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>P \\<tturnstile> t P; unitary P\\<rbrakk>\n       \\<Longrightarrow> P \\<tturnstile> t (gfp_exp t)", "with uP gfp_exp_unitary ft"], ["proof (chain)\npicking this:\n  unitary P\n  (\\<And>P. unitary P \\<Longrightarrow> unitary (?t P)) \\<Longrightarrow>\n  unitary (gfp_exp ?t)\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n  P \\<tturnstile> gfp_exp t", "have \"t P \\<le> t (gfp_exp t)\""], ["proof (prove)\nusing this:\n  unitary P\n  (\\<And>P. unitary P \\<Longrightarrow> unitary (?t P)) \\<Longrightarrow>\n  unitary (gfp_exp ?t)\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n  P \\<tturnstile> gfp_exp t\n\ngoal (1 subgoal):\n 1. t P \\<tturnstile> t (gfp_exp t)", "by(blast intro: mt)"], ["proof (state)\nthis:\n  t P \\<tturnstile> t (gfp_exp t)\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       \\<lbrakk>P \\<tturnstile> t P; unitary P\\<rbrakk>\n       \\<Longrightarrow> P \\<tturnstile> t (gfp_exp t)", "with fp"], ["proof (chain)\npicking this:\n  P \\<tturnstile> t P\n  t P \\<tturnstile> t (gfp_exp t)", "show \"P \\<le> t (gfp_exp t)\""], ["proof (prove)\nusing this:\n  P \\<tturnstile> t P\n  t P \\<tturnstile> t (gfp_exp t)\n\ngoal (1 subgoal):\n 1. P \\<tturnstile> t (gfp_exp t)", "by(auto)"], ["proof (state)\nthis:\n  P \\<tturnstile> t (gfp_exp t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gfp_exp_lemma3:\n  assumes ft: \"\\<And>P. unitary P \\<Longrightarrow> unitary (t P)\"\n      and mt: \"\\<And>P Q. \\<lbrakk> unitary P; unitary Q; P \\<tturnstile> Q \\<rbrakk> \\<Longrightarrow> t P \\<tturnstile> t Q\"\n  shows \"t (gfp_exp t) \\<le> gfp_exp t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t (gfp_exp t) \\<tturnstile> gfp_exp t", "by(iprover intro:gfp_exp_upperbound unitary_sound\n                   gfp_exp_unitary gfp_exp_lemma2 assms)"], ["", "lemma gfp_exp_unfold:\n  \"(\\<And>P. unitary P \\<Longrightarrow> unitary (t P)) \\<Longrightarrow> (\\<And>P Q. \\<lbrakk> unitary P; unitary Q; P \\<tturnstile> Q \\<rbrakk> \\<Longrightarrow> t P \\<tturnstile> t Q) \\<Longrightarrow>\n   gfp_exp t = t (gfp_exp t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>P. unitary P \\<Longrightarrow> unitary (t P);\n     \\<And>P Q.\n        \\<lbrakk>unitary P; unitary Q; P \\<tturnstile> Q\\<rbrakk>\n        \\<Longrightarrow> t P \\<tturnstile> t Q\\<rbrakk>\n    \\<Longrightarrow> gfp_exp t = t (gfp_exp t)", "by(iprover intro:antisym gfp_exp_lemma2 gfp_exp_lemma3)"], ["", "subsection \\<open>The Lattice of Transformers\\<close>"], ["", "text_raw \\<open>\\label{s:trans_induct}\\<close>"], ["", "text \\<open>In addition to fixed points on expectations, we also need\nto reason about fixed points on expectation transformers.  The\ninterpretation of a recursive program in pGCL is as a fixed\npoint of a function from transformers to transformers.  In contrast\nto the case of expectations, \\emph{healthy} transformers do form\na complete lattice, where the bottom element is @{term \"\\<lambda>_. (\\<lambda>_. 0)\"},\nand the top element is the greatest allowed by feasibility:\n@{term \"\\<lambda>P. (\\<lambda>_. bound_of P)\"}.\\<close>"], ["", "definition Inf_trans :: \"'s trans set \\<Rightarrow> 's trans\"\nwhere \"Inf_trans S = (\\<lambda>P. Inf_exp {t P |t. t \\<in> S})\""], ["", "lemma Inf_trans_lower:\n  \"\\<lbrakk> t \\<in> S; \\<forall>u\\<in>S. \\<forall>P. sound P \\<longrightarrow> sound (u P) \\<rbrakk> \\<Longrightarrow> le_trans (Inf_trans S) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> S;\n     \\<forall>u\\<in>S.\n        \\<forall>P. sound P \\<longrightarrow> sound (u P)\\<rbrakk>\n    \\<Longrightarrow> le_trans (Inf_trans S) t", "unfolding Inf_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> S;\n     \\<forall>u\\<in>S.\n        \\<forall>P. sound P \\<longrightarrow> sound (u P)\\<rbrakk>\n    \\<Longrightarrow> le_trans (\\<lambda>P. Inf_exp {t P |t. t \\<in> S}) t", "by(rule le_transI[OF Inf_exp_lower], blast+)"], ["", "lemma Inf_trans_greatest:\n  \"\\<lbrakk> S \\<noteq> {}; \\<forall>t\\<in>S. \\<forall>P. le_trans u t \\<rbrakk> \\<Longrightarrow> le_trans u (Inf_trans S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {};\n     \\<forall>t\\<in>S. \\<forall>P. le_trans u t\\<rbrakk>\n    \\<Longrightarrow> le_trans u (Inf_trans S)", "unfolding Inf_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<noteq> {};\n     \\<forall>t\\<in>S. \\<forall>P. le_trans u t\\<rbrakk>\n    \\<Longrightarrow> le_trans u (\\<lambda>P. Inf_exp {t P |t. t \\<in> S})", "by(auto intro!:le_transI[OF Inf_exp_greatest])"], ["", "definition Sup_trans :: \"'s trans set \\<Rightarrow> 's trans\"\nwhere \"Sup_trans S = (\\<lambda>P. Sup_exp {t P |t. t \\<in> S})\""], ["", "lemma Sup_trans_upper:\n  \"\\<lbrakk> t \\<in> S; \\<forall>u\\<in>S. \\<forall>P. unitary P \\<longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans t (Sup_trans S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> S;\n     \\<forall>u\\<in>S.\n        \\<forall>P. unitary P \\<longrightarrow> unitary (u P)\\<rbrakk>\n    \\<Longrightarrow> le_utrans t (Sup_trans S)", "unfolding Sup_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> S;\n     \\<forall>u\\<in>S.\n        \\<forall>P. unitary P \\<longrightarrow> unitary (u P)\\<rbrakk>\n    \\<Longrightarrow> le_utrans t (\\<lambda>P. Sup_exp {t P |t. t \\<in> S})", "by(intro le_utransI[OF Sup_exp_upper], auto intro:unitary_bound)"], ["", "lemma Sup_trans_upper2:\n  \"\\<lbrakk> t \\<in> S; \\<forall>u\\<in>S. \\<forall>P. (nneg P \\<and> bounded_by b P) \\<longrightarrow> (nneg (u P) \\<and> bounded_by b (u P));\n     nneg P; bounded_by b P \\<rbrakk> \\<Longrightarrow> t P \\<tturnstile> Sup_trans S P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> S;\n     \\<forall>u\\<in>S.\n        \\<forall>P.\n           nneg P \\<and> bounded_by b P \\<longrightarrow>\n           nneg (u P) \\<and> bounded_by b (u P);\n     nneg P; bounded_by b P\\<rbrakk>\n    \\<Longrightarrow> t P \\<tturnstile> Sup_trans S P", "unfolding Sup_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> S;\n     \\<forall>u\\<in>S.\n        \\<forall>P.\n           nneg P \\<and> bounded_by b P \\<longrightarrow>\n           nneg (u P) \\<and> bounded_by b (u P);\n     nneg P; bounded_by b P\\<rbrakk>\n    \\<Longrightarrow> t P \\<tturnstile> Sup_exp {t P |t. t \\<in> S}", "by(blast intro:Sup_exp_upper)"], ["", "lemma Sup_trans_least:\n  \"\\<lbrakk> \\<forall>t\\<in>S. le_utrans t u; \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans (Sup_trans S) u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>t\\<in>S. le_utrans t u;\n     \\<And>P. unitary P \\<Longrightarrow> unitary (u P)\\<rbrakk>\n    \\<Longrightarrow> le_utrans (Sup_trans S) u", "unfolding Sup_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>t\\<in>S. le_utrans t u;\n     \\<And>P. unitary P \\<Longrightarrow> unitary (u P)\\<rbrakk>\n    \\<Longrightarrow> le_utrans (\\<lambda>P. Sup_exp {t P |t. t \\<in> S}) u", "by(auto intro!:sound_nneg[OF unitary_sound] le_utransI[OF Sup_exp_least])"], ["", "lemma Sup_trans_least2:\n  \"\\<lbrakk> \\<forall>t\\<in>S. \\<forall>P. nneg P \\<longrightarrow> bounded_by b P \\<longrightarrow> t P \\<tturnstile> u P;\n     \\<forall>u\\<in>S. \\<forall>P. (nneg P \\<and> bounded_by b P) \\<longrightarrow> (nneg (u P) \\<and> bounded_by b (u P));\n     nneg P; bounded_by b P; \\<And>P. \\<lbrakk> nneg P; bounded_by b P \\<rbrakk> \\<Longrightarrow> nneg (u P) \\<rbrakk> \\<Longrightarrow> Sup_trans S P \\<tturnstile> u P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>t\\<in>S.\n                \\<forall>P.\n                   nneg P \\<longrightarrow>\n                   bounded_by b P \\<longrightarrow> t P \\<tturnstile> u P;\n     \\<forall>u\\<in>S.\n        \\<forall>P.\n           nneg P \\<and> bounded_by b P \\<longrightarrow>\n           nneg (u P) \\<and> bounded_by b (u P);\n     nneg P; bounded_by b P;\n     \\<And>P.\n        \\<lbrakk>nneg P; bounded_by b P\\<rbrakk>\n        \\<Longrightarrow> nneg (u P)\\<rbrakk>\n    \\<Longrightarrow> Sup_trans S P \\<tturnstile> u P", "unfolding Sup_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>t\\<in>S.\n                \\<forall>P.\n                   nneg P \\<longrightarrow>\n                   bounded_by b P \\<longrightarrow> t P \\<tturnstile> u P;\n     \\<forall>u\\<in>S.\n        \\<forall>P.\n           nneg P \\<and> bounded_by b P \\<longrightarrow>\n           nneg (u P) \\<and> bounded_by b (u P);\n     nneg P; bounded_by b P;\n     \\<And>P.\n        \\<lbrakk>nneg P; bounded_by b P\\<rbrakk>\n        \\<Longrightarrow> nneg (u P)\\<rbrakk>\n    \\<Longrightarrow> Sup_exp {t P |t. t \\<in> S} \\<tturnstile> u P", "by(blast intro!:Sup_exp_least)"], ["", "lemma feasible_Sup_trans:\n  fixes S::\"'s trans set\"\n  assumes fS: \"\\<forall>t\\<in>S. feasible t\"\n  shows \"feasible (Sup_trans S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. feasible (Sup_trans S)", "proof(cases \"S={}\", simp add:Sup_trans_def Sup_exp_def, blast, intro feasibleI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)\n 2. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> nneg (Sup_trans S P)", "fix b::real and P::\"'s expect\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)\n 2. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> nneg (Sup_trans S P)", "assume bP: \"bounded_by b P\" and nP: \"nneg P\"\n     and neS: \"S \\<noteq> {}\""], ["proof (state)\nthis:\n  bounded_by b P\n  nneg P\n  S \\<noteq> {}\n\ngoal (2 subgoals):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)\n 2. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> nneg (Sup_trans S P)", "from neS"], ["proof (chain)\npicking this:\n  S \\<noteq> {}", "obtain t where tin: \"t \\<in> S\""], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>t. t \\<in> S \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by(auto)"], ["proof (state)\nthis:\n  t \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)\n 2. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> nneg (Sup_trans S P)", "with fS"], ["proof (chain)\npicking this:\n  \\<forall>t\\<in>S. feasible t\n  t \\<in> S", "have ft: \"feasible t\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>S. feasible t\n  t \\<in> S\n\ngoal (1 subgoal):\n 1. feasible t", "by(auto)"], ["proof (state)\nthis:\n  feasible t\n\ngoal (2 subgoals):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)\n 2. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> nneg (Sup_trans S P)", "with bP nP"], ["proof (chain)\npicking this:\n  bounded_by b P\n  nneg P\n  feasible t", "have \"\\<lambda>s. 0 \\<tturnstile> t P\""], ["proof (prove)\nusing this:\n  bounded_by b P\n  nneg P\n  feasible t\n\ngoal (1 subgoal):\n 1. \\<lambda>s. 0 \\<tturnstile> t P", "by(auto)"], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> t P\n\ngoal (2 subgoals):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)\n 2. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> nneg (Sup_trans S P)", "also"], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> t P\n\ngoal (2 subgoals):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)\n 2. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> nneg (Sup_trans S P)", "{"], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> t P\n\ngoal (2 subgoals):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)\n 2. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> nneg (Sup_trans S P)", "from bP nP"], ["proof (chain)\npicking this:\n  bounded_by b P\n  nneg P", "have \"sound P\""], ["proof (prove)\nusing this:\n  bounded_by b P\n  nneg P\n\ngoal (1 subgoal):\n 1. sound P", "by(auto)"], ["proof (state)\nthis:\n  sound P\n\ngoal (2 subgoals):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)\n 2. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> nneg (Sup_trans S P)", "with tin fS"], ["proof (chain)\npicking this:\n  t \\<in> S\n  \\<forall>t\\<in>S. feasible t\n  sound P", "have \"t P \\<tturnstile> Sup_trans S P\""], ["proof (prove)\nusing this:\n  t \\<in> S\n  \\<forall>t\\<in>S. feasible t\n  sound P\n\ngoal (1 subgoal):\n 1. t P \\<tturnstile> Sup_trans S P", "by(auto intro!:Sup_trans_upper2)"], ["proof (state)\nthis:\n  t P \\<tturnstile> Sup_trans S P\n\ngoal (2 subgoals):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)\n 2. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> nneg (Sup_trans S P)", "}"], ["proof (state)\nthis:\n  t P \\<tturnstile> Sup_trans S P\n\ngoal (2 subgoals):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)\n 2. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> nneg (Sup_trans S P)", "finally"], ["proof (chain)\npicking this:\n  \\<lambda>s. 0 \\<tturnstile> Sup_trans S P", "show \"nneg (Sup_trans S P)\""], ["proof (prove)\nusing this:\n  \\<lambda>s. 0 \\<tturnstile> Sup_trans S P\n\ngoal (1 subgoal):\n 1. nneg (Sup_trans S P)", "by(auto)"], ["proof (state)\nthis:\n  nneg (Sup_trans S P)\n\ngoal (1 subgoal):\n 1. \\<And>b P.\n       \\<lbrakk>S \\<noteq> {}; bounded_by b P; nneg P\\<rbrakk>\n       \\<Longrightarrow> bounded_by b (Sup_trans S P)", "from fS bP nP"], ["proof (chain)\npicking this:\n  \\<forall>t\\<in>S. feasible t\n  bounded_by b P\n  nneg P", "show \"bounded_by b (Sup_trans S P)\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>S. feasible t\n  bounded_by b P\n  nneg P\n\ngoal (1 subgoal):\n 1. bounded_by b (Sup_trans S P)", "by(auto intro!:bounded_byI2[OF Sup_trans_least2])"], ["proof (state)\nthis:\n  bounded_by b (Sup_trans S P)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition lfp_trans :: \"('s trans \\<Rightarrow> 's trans) \\<Rightarrow> 's trans\"\nwhere \"lfp_trans T = Inf_trans {t. (\\<forall>P. sound P \\<longrightarrow> sound (t P)) \\<and> le_trans (T t) t}\""], ["", "lemma lfp_trans_lowerbound:\n  \"\\<lbrakk> le_trans (T t) t; \\<And>P. sound P \\<Longrightarrow> sound (t P) \\<rbrakk> \\<Longrightarrow> le_trans (lfp_trans T) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>le_trans (T t) t;\n     \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n    \\<Longrightarrow> le_trans (lfp_trans T) t", "unfolding lfp_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>le_trans (T t) t;\n     \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n    \\<Longrightarrow> le_trans\n                       (Inf_trans\n                         {t. (\\<forall>P.\n                                 sound P \\<longrightarrow>\n                                 sound (t P)) \\<and>\n                             le_trans (T t) t})\n                       t", "by(auto intro:Inf_trans_lower)"], ["", "lemma lfp_trans_greatest:\n  \"\\<lbrakk> \\<And>t P. \\<lbrakk> le_trans (T t) t; \\<And>P. sound P \\<Longrightarrow> sound (t P) \\<rbrakk> \\<Longrightarrow> le_trans u t;\n     \\<And>P. sound P \\<Longrightarrow> sound (v P); le_trans (T v) v \\<rbrakk> \\<Longrightarrow>\n   le_trans u (lfp_trans T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>t P.\n                \\<lbrakk>le_trans (T t) t;\n                 \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n                \\<Longrightarrow> le_trans u t;\n     \\<And>P. sound P \\<Longrightarrow> sound (v P);\n     le_trans (T v) v\\<rbrakk>\n    \\<Longrightarrow> le_trans u (lfp_trans T)", "unfolding lfp_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>t P.\n                \\<lbrakk>le_trans (T t) t;\n                 \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n                \\<Longrightarrow> le_trans u t;\n     \\<And>P. sound P \\<Longrightarrow> sound (v P);\n     le_trans (T v) v\\<rbrakk>\n    \\<Longrightarrow> le_trans u\n                       (Inf_trans\n                         {t. (\\<forall>P.\n                                 sound P \\<longrightarrow>\n                                 sound (t P)) \\<and>\n                             le_trans (T t) t})", "by(rule Inf_trans_greatest, auto)"], ["", "lemma lfp_trans_sound:\n  fixes P Q::\"'s expect\"\n  assumes sP: \"sound P\"\n      and fv: \"le_trans (T v) v\"\n      and sv: \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n  shows  \"sound (lfp_trans T P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sound (lfp_trans T P)", "proof(intro soundI2 bounded_byI2 nnegI2)"], ["proof (state)\ngoal (2 subgoals):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. ?b\n 2. \\<lambda>s. 0 \\<tturnstile> lfp_trans T P", "from fv sv"], ["proof (chain)\npicking this:\n  le_trans (T v) v\n  sound ?P \\<Longrightarrow> sound (v ?P)", "have \"le_trans (lfp_trans T) v\""], ["proof (prove)\nusing this:\n  le_trans (T v) v\n  sound ?P \\<Longrightarrow> sound (v ?P)\n\ngoal (1 subgoal):\n 1. le_trans (lfp_trans T) v", "by(iprover intro:lfp_trans_lowerbound)"], ["proof (state)\nthis:\n  le_trans (lfp_trans T) v\n\ngoal (2 subgoals):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. ?b\n 2. \\<lambda>s. 0 \\<tturnstile> lfp_trans T P", "with sP"], ["proof (chain)\npicking this:\n  sound P\n  le_trans (lfp_trans T) v", "have \"lfp_trans T P \\<tturnstile> v P\""], ["proof (prove)\nusing this:\n  sound P\n  le_trans (lfp_trans T) v\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> v P", "by(auto)"], ["proof (state)\nthis:\n  lfp_trans T P \\<tturnstile> v P\n\ngoal (2 subgoals):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. ?b\n 2. \\<lambda>s. 0 \\<tturnstile> lfp_trans T P", "also"], ["proof (state)\nthis:\n  lfp_trans T P \\<tturnstile> v P\n\ngoal (2 subgoals):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. ?b\n 2. \\<lambda>s. 0 \\<tturnstile> lfp_trans T P", "{"], ["proof (state)\nthis:\n  lfp_trans T P \\<tturnstile> v P\n\ngoal (2 subgoals):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. ?b\n 2. \\<lambda>s. 0 \\<tturnstile> lfp_trans T P", "from sv sP"], ["proof (chain)\npicking this:\n  sound ?P \\<Longrightarrow> sound (v ?P)\n  sound P", "have \"sound (v P)\""], ["proof (prove)\nusing this:\n  sound ?P \\<Longrightarrow> sound (v ?P)\n  sound P\n\ngoal (1 subgoal):\n 1. sound (v P)", "by(iprover)"], ["proof (state)\nthis:\n  sound (v P)\n\ngoal (2 subgoals):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. ?b\n 2. \\<lambda>s. 0 \\<tturnstile> lfp_trans T P", "hence \"v P \\<tturnstile> \\<lambda>s. bound_of (v P)\""], ["proof (prove)\nusing this:\n  sound (v P)\n\ngoal (1 subgoal):\n 1. v P \\<tturnstile> \\<lambda>s. bound_of (v P)", "by(auto)"], ["proof (state)\nthis:\n  v P \\<tturnstile> \\<lambda>s. bound_of (v P)\n\ngoal (2 subgoals):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. ?b\n 2. \\<lambda>s. 0 \\<tturnstile> lfp_trans T P", "}"], ["proof (state)\nthis:\n  v P \\<tturnstile> \\<lambda>s. bound_of (v P)\n\ngoal (2 subgoals):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. ?b\n 2. \\<lambda>s. 0 \\<tturnstile> lfp_trans T P", "finally"], ["proof (chain)\npicking this:\n  lfp_trans T P \\<tturnstile> \\<lambda>s. bound_of (v P)", "show \"lfp_trans T P \\<tturnstile> \\<lambda>s. bound_of (v P)\""], ["proof (prove)\nusing this:\n  lfp_trans T P \\<tturnstile> \\<lambda>s. bound_of (v P)\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. bound_of (v P)", "."], ["proof (state)\nthis:\n  lfp_trans T P \\<tturnstile> \\<lambda>s. bound_of (v P)\n\ngoal (1 subgoal):\n 1. \\<lambda>s. 0 \\<tturnstile> lfp_trans T P", "have \"le_trans (\\<lambda>P s. 0) (lfp_trans T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. le_trans (\\<lambda>P s. 0) (lfp_trans T)", "proof(intro lfp_trans_greatest)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t P.\n       \\<lbrakk>le_trans (T t) t;\n        \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n       \\<Longrightarrow> le_trans (\\<lambda>P s. 0) t\n 2. \\<And>P. sound P \\<Longrightarrow> sound (?v P)\n 3. le_trans (T ?v) ?v", "fix t::\"'s trans\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t P.\n       \\<lbrakk>le_trans (T t) t;\n        \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n       \\<Longrightarrow> le_trans (\\<lambda>P s. 0) t\n 2. \\<And>P. sound P \\<Longrightarrow> sound (?v P)\n 3. le_trans (T ?v) ?v", "assume \"\\<And>P. sound P \\<Longrightarrow> sound (t P)\""], ["proof (state)\nthis:\n  sound ?P \\<Longrightarrow> sound (t ?P)\n\ngoal (3 subgoals):\n 1. \\<And>t P.\n       \\<lbrakk>le_trans (T t) t;\n        \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n       \\<Longrightarrow> le_trans (\\<lambda>P s. 0) t\n 2. \\<And>P. sound P \\<Longrightarrow> sound (?v P)\n 3. le_trans (T ?v) ?v", "hence \"\\<And>P. sound P \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> t P\""], ["proof (prove)\nusing this:\n  sound ?P \\<Longrightarrow> sound (t ?P)\n\ngoal (1 subgoal):\n 1. \\<And>P. sound P \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> t P", "by(auto)"], ["proof (state)\nthis:\n  sound ?P \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> t ?P\n\ngoal (3 subgoals):\n 1. \\<And>t P.\n       \\<lbrakk>le_trans (T t) t;\n        \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n       \\<Longrightarrow> le_trans (\\<lambda>P s. 0) t\n 2. \\<And>P. sound P \\<Longrightarrow> sound (?v P)\n 3. le_trans (T ?v) ?v", "thus \"le_trans (\\<lambda>P s. 0) t\""], ["proof (prove)\nusing this:\n  sound ?P \\<Longrightarrow> \\<lambda>s. 0 \\<tturnstile> t ?P\n\ngoal (1 subgoal):\n 1. le_trans (\\<lambda>P s. 0) t", "by(auto)"], ["proof (state)\nthis:\n  le_trans (\\<lambda>P s. 0) t\n\ngoal (2 subgoals):\n 1. \\<And>P. sound P \\<Longrightarrow> sound (?v P)\n 2. le_trans (T ?v) ?v", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P. sound P \\<Longrightarrow> sound (?v P)\n 2. le_trans (T ?v) ?v", "fix P::\"'s expect\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P. sound P \\<Longrightarrow> sound (?v P)\n 2. le_trans (T ?v) ?v", "assume \"sound P\""], ["proof (state)\nthis:\n  sound P\n\ngoal (2 subgoals):\n 1. \\<And>P. sound P \\<Longrightarrow> sound (?v P)\n 2. le_trans (T ?v) ?v", "thus \"sound (v P)\""], ["proof (prove)\nusing this:\n  sound P\n\ngoal (1 subgoal):\n 1. sound (v P)", "by(rule sv)"], ["proof (state)\nthis:\n  sound (v P)\n\ngoal (1 subgoal):\n 1. le_trans (T v) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. le_trans (T v) v", "show \"le_trans (T v) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. le_trans (T v) v", "by(rule fv)"], ["proof (state)\nthis:\n  le_trans (T v) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  le_trans (\\<lambda>P s. 0) (lfp_trans T)\n\ngoal (1 subgoal):\n 1. \\<lambda>s. 0 \\<tturnstile> lfp_trans T P", "with sP"], ["proof (chain)\npicking this:\n  sound P\n  le_trans (\\<lambda>P s. 0) (lfp_trans T)", "show \"\\<lambda>s. 0 \\<tturnstile> lfp_trans T P\""], ["proof (prove)\nusing this:\n  sound P\n  le_trans (\\<lambda>P s. 0) (lfp_trans T)\n\ngoal (1 subgoal):\n 1. \\<lambda>s. 0 \\<tturnstile> lfp_trans T P", "by(auto)"], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> lfp_trans T P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfp_trans_unitary:\n  fixes P Q::\"'s expect\"\n  assumes uP: \"unitary P\"\n      and fv: \"le_trans (T v) v\"\n      and sv: \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n      and fT: \"le_trans (T (\\<lambda>P s. bound_of P)) (\\<lambda>P s. bound_of P)\"\n  shows  \"unitary (lfp_trans T P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unitary (lfp_trans T P)", "proof(rule unitaryI)"], ["proof (state)\ngoal (2 subgoals):\n 1. sound (lfp_trans T P)\n 2. bounded_by 1 (lfp_trans T P)", "from unitary_sound[OF uP] fv sv"], ["proof (chain)\npicking this:\n  sound P\n  le_trans (T v) v\n  sound ?P \\<Longrightarrow> sound (v ?P)", "show \"sound (lfp_trans T P)\""], ["proof (prove)\nusing this:\n  sound P\n  le_trans (T v) v\n  sound ?P \\<Longrightarrow> sound (v ?P)\n\ngoal (1 subgoal):\n 1. sound (lfp_trans T P)", "by(rule lfp_trans_sound)"], ["proof (state)\nthis:\n  sound (lfp_trans T P)\n\ngoal (1 subgoal):\n 1. bounded_by 1 (lfp_trans T P)", "show \"bounded_by 1 (lfp_trans T P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_by 1 (lfp_trans T P)", "proof(rule bounded_byI2)"], ["proof (state)\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. 1", "from fT"], ["proof (chain)\npicking this:\n  le_trans (T (\\<lambda>P s. bound_of P)) (\\<lambda>P s. bound_of P)", "have \"le_trans (lfp_trans T) (\\<lambda>P s. bound_of P)\""], ["proof (prove)\nusing this:\n  le_trans (T (\\<lambda>P s. bound_of P)) (\\<lambda>P s. bound_of P)\n\ngoal (1 subgoal):\n 1. le_trans (lfp_trans T) (\\<lambda>P s. bound_of P)", "by(auto intro: lfp_trans_lowerbound)"], ["proof (state)\nthis:\n  le_trans (lfp_trans T) (\\<lambda>P s. bound_of P)\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. 1", "with uP"], ["proof (chain)\npicking this:\n  unitary P\n  le_trans (lfp_trans T) (\\<lambda>P s. bound_of P)", "have \"lfp_trans T P \\<tturnstile> \\<lambda>s. bound_of P\""], ["proof (prove)\nusing this:\n  unitary P\n  le_trans (lfp_trans T) (\\<lambda>P s. bound_of P)\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. bound_of P", "by(auto)"], ["proof (state)\nthis:\n  lfp_trans T P \\<tturnstile> \\<lambda>s. bound_of P\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. 1", "also"], ["proof (state)\nthis:\n  lfp_trans T P \\<tturnstile> \\<lambda>s. bound_of P\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. 1", "from uP"], ["proof (chain)\npicking this:\n  unitary P", "have \"... \\<tturnstile> \\<lambda>s. 1\""], ["proof (prove)\nusing this:\n  unitary P\n\ngoal (1 subgoal):\n 1. \\<lambda>s. bound_of P \\<tturnstile> \\<lambda>s. 1", "by(auto)"], ["proof (state)\nthis:\n  \\<lambda>s. bound_of P \\<tturnstile> \\<lambda>s. 1\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. 1", "finally"], ["proof (chain)\npicking this:\n  lfp_trans T P \\<tturnstile> \\<lambda>s. 1", "show \"lfp_trans T P \\<tturnstile> \\<lambda>s. 1\""], ["proof (prove)\nusing this:\n  lfp_trans T P \\<tturnstile> \\<lambda>s. 1\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> \\<lambda>s. 1", "."], ["proof (state)\nthis:\n  lfp_trans T P \\<tturnstile> \\<lambda>s. 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bounded_by 1 (lfp_trans T P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfp_trans_lemma2:\n  fixes v::\"'s trans\"\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_trans t u; \\<And>P. sound P \\<Longrightarrow> sound (t P);\n                         \\<And>P. sound P \\<Longrightarrow> sound (u P) \\<rbrakk> \\<Longrightarrow> le_trans (T t) (T u)\"\n      and nT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. sound Q \\<Longrightarrow> sound (t Q); sound P \\<rbrakk> \\<Longrightarrow> sound (T t P)\"\n      and fv:   \"le_trans (T v) v\"\n      and sv:   \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n  shows \"le_trans (T (lfp_trans T)) (lfp_trans T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. le_trans (T (lfp_trans T)) (lfp_trans T)", "proof(rule lfp_trans_greatest[where T=T and v=v], simp_all add:assms)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_trans (T t) t;\n        \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n       \\<Longrightarrow> le_trans (T (lfp_trans T)) t", "fix t::\"'s trans\" and P::\"'s expect\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_trans (T t) t;\n        \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n       \\<Longrightarrow> le_trans (T (lfp_trans T)) t", "assume ft: \"le_trans (T t) t\" and st: \"\\<And>P. sound P \\<Longrightarrow> sound (t P)\""], ["proof (state)\nthis:\n  le_trans (T t) t\n  sound ?P \\<Longrightarrow> sound (t ?P)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_trans (T t) t;\n        \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n       \\<Longrightarrow> le_trans (T (lfp_trans T)) t", "hence \"le_trans (lfp_trans T) t\""], ["proof (prove)\nusing this:\n  le_trans (T t) t\n  sound ?P \\<Longrightarrow> sound (t ?P)\n\ngoal (1 subgoal):\n 1. le_trans (lfp_trans T) t", "by(auto intro!:lfp_trans_lowerbound)"], ["proof (state)\nthis:\n  le_trans (lfp_trans T) t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_trans (T t) t;\n        \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n       \\<Longrightarrow> le_trans (T (lfp_trans T)) t", "with ft st"], ["proof (chain)\npicking this:\n  le_trans (T t) t\n  sound ?P \\<Longrightarrow> sound (t ?P)\n  le_trans (lfp_trans T) t", "have \"le_trans (T (lfp_trans T)) (T t)\""], ["proof (prove)\nusing this:\n  le_trans (T t) t\n  sound ?P \\<Longrightarrow> sound (t ?P)\n  le_trans (lfp_trans T) t\n\ngoal (1 subgoal):\n 1. le_trans (T (lfp_trans T)) (T t)", "by(iprover intro:mono lfp_trans_sound fv sv)"], ["proof (state)\nthis:\n  le_trans (T (lfp_trans T)) (T t)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_trans (T t) t;\n        \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n       \\<Longrightarrow> le_trans (T (lfp_trans T)) t", "also"], ["proof (state)\nthis:\n  le_trans (T (lfp_trans T)) (T t)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_trans (T t) t;\n        \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n       \\<Longrightarrow> le_trans (T (lfp_trans T)) t", "note ft"], ["proof (state)\nthis:\n  le_trans (T t) t\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_trans (T t) t;\n        \\<And>P. sound P \\<Longrightarrow> sound (t P)\\<rbrakk>\n       \\<Longrightarrow> le_trans (T (lfp_trans T)) t", "finally"], ["proof (chain)\npicking this:\n  le_trans (T (lfp_trans T)) t", "show \"le_trans (T (lfp_trans T)) t\""], ["proof (prove)\nusing this:\n  le_trans (T (lfp_trans T)) t\n\ngoal (1 subgoal):\n 1. le_trans (T (lfp_trans T)) t", "."], ["proof (state)\nthis:\n  le_trans (T (lfp_trans T)) t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfp_trans_lemma3:\n  fixes v::\"'s trans\"\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_trans t u; \\<And>P. sound P \\<Longrightarrow> sound (t P);\n                         \\<And>P. sound P \\<Longrightarrow> sound (u P) \\<rbrakk> \\<Longrightarrow> le_trans (T t) (T u)\"\n      and sT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. sound Q \\<Longrightarrow> sound (t Q); sound P \\<rbrakk> \\<Longrightarrow> sound (T t P)\"\n      and fv:   \"le_trans (T v) v\"\n      and sv:   \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n  shows \"le_trans (lfp_trans T) (T (lfp_trans T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. le_trans (lfp_trans T) (T (lfp_trans T))", "proof(rule lfp_trans_lowerbound)"], ["proof (state)\ngoal (2 subgoals):\n 1. le_trans (T (T (lfp_trans T))) (T (lfp_trans T))\n 2. \\<And>P. sound P \\<Longrightarrow> sound (T (lfp_trans T) P)", "fix P::\"'s expect\""], ["proof (state)\ngoal (2 subgoals):\n 1. le_trans (T (T (lfp_trans T))) (T (lfp_trans T))\n 2. \\<And>P. sound P \\<Longrightarrow> sound (T (lfp_trans T) P)", "assume sP: \"sound P\""], ["proof (state)\nthis:\n  sound P\n\ngoal (2 subgoals):\n 1. le_trans (T (T (lfp_trans T))) (T (lfp_trans T))\n 2. \\<And>P. sound P \\<Longrightarrow> sound (T (lfp_trans T) P)", "have n1: \"\\<And>P. sound P \\<Longrightarrow> sound (lfp_trans T P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P. sound P \\<Longrightarrow> sound (lfp_trans T P)", "by(iprover intro:lfp_trans_sound fv sv)"], ["proof (state)\nthis:\n  sound ?P \\<Longrightarrow> sound (lfp_trans T ?P)\n\ngoal (2 subgoals):\n 1. le_trans (T (T (lfp_trans T))) (T (lfp_trans T))\n 2. \\<And>P. sound P \\<Longrightarrow> sound (T (lfp_trans T) P)", "with sP"], ["proof (chain)\npicking this:\n  sound P\n  sound ?P \\<Longrightarrow> sound (lfp_trans T ?P)", "have n2: \"sound (lfp_trans T P)\""], ["proof (prove)\nusing this:\n  sound P\n  sound ?P \\<Longrightarrow> sound (lfp_trans T ?P)\n\ngoal (1 subgoal):\n 1. sound (lfp_trans T P)", "by(iprover intro:lfp_trans_sound fv sv sT)"], ["proof (state)\nthis:\n  sound (lfp_trans T P)\n\ngoal (2 subgoals):\n 1. le_trans (T (T (lfp_trans T))) (T (lfp_trans T))\n 2. \\<And>P. sound P \\<Longrightarrow> sound (T (lfp_trans T) P)", "with n1 sP"], ["proof (chain)\npicking this:\n  sound ?P \\<Longrightarrow> sound (lfp_trans T ?P)\n  sound P\n  sound (lfp_trans T P)", "show n3: \"sound (T (lfp_trans T) P)\""], ["proof (prove)\nusing this:\n  sound ?P \\<Longrightarrow> sound (lfp_trans T ?P)\n  sound P\n  sound (lfp_trans T P)\n\ngoal (1 subgoal):\n 1. sound (T (lfp_trans T) P)", "by(iprover intro: sT)"], ["proof (state)\nthis:\n  sound (T (lfp_trans T) P)\n\ngoal (1 subgoal):\n 1. le_trans (T (T (lfp_trans T))) (T (lfp_trans T))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. le_trans (T (T (lfp_trans T))) (T (lfp_trans T))", "show \"le_trans (T (T (lfp_trans T))) (T (lfp_trans T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. le_trans (T (T (lfp_trans T))) (T (lfp_trans T))", "by(rule mono[OF lfp_trans_lemma2, OF mono],\n            (iprover intro:assms lfp_trans_sound)+)"], ["proof (state)\nthis:\n  le_trans (T (T (lfp_trans T))) (T (lfp_trans T))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfp_trans_unfold:\n  fixes P::\"'s expect\"\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_trans t u; \\<And>P. sound P \\<Longrightarrow> sound (t P);\n                         \\<And>P. sound P \\<Longrightarrow> sound (u P) \\<rbrakk> \\<Longrightarrow> le_trans (T t) (T u)\"\n      and sT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. sound Q \\<Longrightarrow> sound (t Q); sound P \\<rbrakk> \\<Longrightarrow> sound (T t P)\"\n      and fv:   \"le_trans (T v) v\"\n      and sv:   \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n  shows \"equiv_trans (lfp_trans T) (T (lfp_trans T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equiv_trans (lfp_trans T) (T (lfp_trans T))", "by(rule le_trans_antisym,\n     rule lfp_trans_lemma3[OF mono], (iprover intro:assms)+,\n     rule lfp_trans_lemma2[OF mono], (iprover intro:assms)+)"], ["", "definition gfp_trans :: \"('s trans \\<Rightarrow> 's trans) \\<Rightarrow> 's trans\"\nwhere \"gfp_trans T = Sup_trans {t. (\\<forall>P. unitary P \\<longrightarrow> unitary (t P)) \\<and> le_utrans t (T t)}\""], ["", "lemma gfp_trans_upperbound:\n  \"\\<lbrakk> le_utrans t (T t); \\<And>P. unitary P \\<Longrightarrow> unitary (t P) \\<rbrakk> \\<Longrightarrow> le_utrans t (gfp_trans T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>le_utrans t (T t);\n     \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n    \\<Longrightarrow> le_utrans t (gfp_trans T)", "unfolding gfp_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>le_utrans t (T t);\n     \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n    \\<Longrightarrow> le_utrans t\n                       (Sup_trans\n                         {t. (\\<forall>P.\n                                 unitary P \\<longrightarrow>\n                                 unitary (t P)) \\<and>\n                             le_utrans t (T t)})", "by(auto intro:Sup_trans_upper)"], ["", "lemma gfp_trans_least:\n  \"\\<lbrakk> \\<And>t. \\<lbrakk> le_utrans t (T t); \\<And>P. unitary P \\<Longrightarrow> unitary (t P) \\<rbrakk> \\<Longrightarrow> le_utrans t u;\n     \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow>\n   le_utrans (gfp_trans T) u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>t.\n                \\<lbrakk>le_utrans t (T t);\n                 \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n                \\<Longrightarrow> le_utrans t u;\n     \\<And>P. unitary P \\<Longrightarrow> unitary (u P)\\<rbrakk>\n    \\<Longrightarrow> le_utrans (gfp_trans T) u", "unfolding gfp_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>t.\n                \\<lbrakk>le_utrans t (T t);\n                 \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n                \\<Longrightarrow> le_utrans t u;\n     \\<And>P. unitary P \\<Longrightarrow> unitary (u P)\\<rbrakk>\n    \\<Longrightarrow> le_utrans\n                       (Sup_trans\n                         {t. (\\<forall>P.\n                                 unitary P \\<longrightarrow>\n                                 unitary (t P)) \\<and>\n                             le_utrans t (T t)})\n                       u", "by(auto intro:Sup_trans_least)"], ["", "lemma gfp_trans_unitary:\n  fixes P::\"'s expect\"\n  assumes uP: \"unitary P\"\n  shows \"unitary (gfp_trans T P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unitary (gfp_trans T P)", "proof(intro unitaryI2 nnegI2 bounded_byI2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lambda>s. 0 \\<tturnstile> gfp_trans T P\n 2. gfp_trans T P \\<tturnstile> \\<lambda>s. 1", "show \"gfp_trans T P \\<tturnstile> \\<lambda>s. 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gfp_trans T P \\<tturnstile> \\<lambda>s. 1", "unfolding gfp_trans_def Sup_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_exp\n     {t P |t.\n      t \\<in> {t. (\\<forall>P.\n                      unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                  le_utrans t (T t)}} \\<tturnstile> \\<lambda>s. 1", "proof(rule Sup_exp_least, clarify)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Pa t.\n       \\<lbrakk>\\<forall>P. unitary P \\<longrightarrow> unitary (t P);\n        le_utrans t (T t)\\<rbrakk>\n       \\<Longrightarrow> t P \\<tturnstile> \\<lambda>s. 1\n 2. nneg (\\<lambda>s. 1)", "fix t::\"'s trans\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>Pa t.\n       \\<lbrakk>\\<forall>P. unitary P \\<longrightarrow> unitary (t P);\n        le_utrans t (T t)\\<rbrakk>\n       \\<Longrightarrow> t P \\<tturnstile> \\<lambda>s. 1\n 2. nneg (\\<lambda>s. 1)", "assume \"\\<forall>P. unitary P \\<longrightarrow> unitary (t P)\""], ["proof (state)\nthis:\n  \\<forall>P. unitary P \\<longrightarrow> unitary (t P)\n\ngoal (2 subgoals):\n 1. \\<And>Pa t.\n       \\<lbrakk>\\<forall>P. unitary P \\<longrightarrow> unitary (t P);\n        le_utrans t (T t)\\<rbrakk>\n       \\<Longrightarrow> t P \\<tturnstile> \\<lambda>s. 1\n 2. nneg (\\<lambda>s. 1)", "with uP"], ["proof (chain)\npicking this:\n  unitary P\n  \\<forall>P. unitary P \\<longrightarrow> unitary (t P)", "have \"unitary (t P)\""], ["proof (prove)\nusing this:\n  unitary P\n  \\<forall>P. unitary P \\<longrightarrow> unitary (t P)\n\ngoal (1 subgoal):\n 1. unitary (t P)", "by(auto)"], ["proof (state)\nthis:\n  unitary (t P)\n\ngoal (2 subgoals):\n 1. \\<And>Pa t.\n       \\<lbrakk>\\<forall>P. unitary P \\<longrightarrow> unitary (t P);\n        le_utrans t (T t)\\<rbrakk>\n       \\<Longrightarrow> t P \\<tturnstile> \\<lambda>s. 1\n 2. nneg (\\<lambda>s. 1)", "thus \"t P \\<tturnstile> \\<lambda>s. 1\""], ["proof (prove)\nusing this:\n  unitary (t P)\n\ngoal (1 subgoal):\n 1. t P \\<tturnstile> \\<lambda>s. 1", "by(auto)"], ["proof (state)\nthis:\n  t P \\<tturnstile> \\<lambda>s. 1\n\ngoal (1 subgoal):\n 1. nneg (\\<lambda>s. 1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nneg (\\<lambda>s. 1)", "show \"nneg (\\<lambda>s. 1::real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nneg (\\<lambda>s. 1)", "by(auto)"], ["proof (state)\nthis:\n  nneg (\\<lambda>s. 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gfp_trans T P \\<tturnstile> \\<lambda>s. 1\n\ngoal (1 subgoal):\n 1. \\<lambda>s. 0 \\<tturnstile> gfp_trans T P", "let ?S = \"{t P |t. t \\<in> {t. (\\<forall>P. unitary P \\<longrightarrow> unitary (t P)) \\<and> le_utrans t (T t)}}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lambda>s. 0 \\<tturnstile> gfp_trans T P", "show \"\\<lambda>s. 0 \\<tturnstile> gfp_trans T P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lambda>s. 0 \\<tturnstile> gfp_trans T P", "unfolding gfp_trans_def Sup_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "proof(cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "assume empty: \"?S = {}\""], ["proof (state)\nthis:\n  {t P |t.\n   t \\<in> {t. (\\<forall>P.\n                   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n               le_utrans t (T t)}} =\n  {}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "show \"\\<lambda>s. 0 \\<tturnstile> Sup_exp ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "by(simp only:empty Sup_exp_def, auto)"], ["proof (state)\nthis:\n  \\<lambda>s.\n     0 \\<tturnstile> Sup_exp\n                      {t P |t.\n                       t \\<in> {t. (\\<forall>P.\n unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                   le_utrans t (T t)}}\n\ngoal (1 subgoal):\n 1. {t P |t.\n     t \\<in> {t. (\\<forall>P.\n                     unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                 le_utrans t (T t)}} \\<noteq>\n    {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {t P |t.\n     t \\<in> {t. (\\<forall>P.\n                     unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                 le_utrans t (T t)}} \\<noteq>\n    {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "assume \"?S \\<noteq> {}\""], ["proof (state)\nthis:\n  {t P |t.\n   t \\<in> {t. (\\<forall>P.\n                   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n               le_utrans t (T t)}} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. {t P |t.\n     t \\<in> {t. (\\<forall>P.\n                     unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                 le_utrans t (T t)}} \\<noteq>\n    {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "then"], ["proof (chain)\npicking this:\n  {t P |t.\n   t \\<in> {t. (\\<forall>P.\n                   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n               le_utrans t (T t)}} \\<noteq>\n  {}", "obtain Q where Qin: \"Q \\<in> ?S\""], ["proof (prove)\nusing this:\n  {t P |t.\n   t \\<in> {t. (\\<forall>P.\n                   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n               le_utrans t (T t)}} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. (\\<And>Q.\n        Q \\<in> {t P |t.\n                 t \\<in> {t. (\\<forall>P.\n                                 unitary P \\<longrightarrow>\n                                 unitary (t P)) \\<and>\n                             le_utrans t (T t)}} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto)"], ["proof (state)\nthis:\n  Q \\<in> {t P |t.\n           t \\<in> {t. (\\<forall>P.\n                           unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                       le_utrans t (T t)}}\n\ngoal (1 subgoal):\n 1. {t P |t.\n     t \\<in> {t. (\\<forall>P.\n                     unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                 le_utrans t (T t)}} \\<noteq>\n    {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "with uP"], ["proof (chain)\npicking this:\n  unitary P\n  Q \\<in> {t P |t.\n           t \\<in> {t. (\\<forall>P.\n                           unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                       le_utrans t (T t)}}", "have \"unitary Q\""], ["proof (prove)\nusing this:\n  unitary P\n  Q \\<in> {t P |t.\n           t \\<in> {t. (\\<forall>P.\n                           unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                       le_utrans t (T t)}}\n\ngoal (1 subgoal):\n 1. unitary Q", "by(auto)"], ["proof (state)\nthis:\n  unitary Q\n\ngoal (1 subgoal):\n 1. {t P |t.\n     t \\<in> {t. (\\<forall>P.\n                     unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                 le_utrans t (T t)}} \\<noteq>\n    {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "hence \"\\<lambda>s. 0 \\<tturnstile> Q\""], ["proof (prove)\nusing this:\n  unitary Q\n\ngoal (1 subgoal):\n 1. \\<lambda>s. 0 \\<tturnstile> Q", "by(auto)"], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> Q\n\ngoal (1 subgoal):\n 1. {t P |t.\n     t \\<in> {t. (\\<forall>P.\n                     unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                 le_utrans t (T t)}} \\<noteq>\n    {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "also"], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> Q\n\ngoal (1 subgoal):\n 1. {t P |t.\n     t \\<in> {t. (\\<forall>P.\n                     unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                 le_utrans t (T t)}} \\<noteq>\n    {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "with uP Qin"], ["proof (chain)\npicking this:\n  unitary P\n  Q \\<in> {t P |t.\n           t \\<in> {t. (\\<forall>P.\n                           unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                       le_utrans t (T t)}}\n  \\<lambda>s. 0 \\<tturnstile> Q", "have \"Q \\<tturnstile> Sup_exp ?S\""], ["proof (prove)\nusing this:\n  unitary P\n  Q \\<in> {t P |t.\n           t \\<in> {t. (\\<forall>P.\n                           unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                       le_utrans t (T t)}}\n  \\<lambda>s. 0 \\<tturnstile> Q\n\ngoal (1 subgoal):\n 1. Q \\<tturnstile> Sup_exp\n                     {t P |t.\n                      t \\<in> {t. (\\<forall>P.\nunitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                  le_utrans t (T t)}}", "proof(intro Sup_exp_upper, blast, clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Pa t ta tb.\n       \\<lbrakk>unitary P; \\<lambda>s. 0 \\<tturnstile> t P; unitary P;\n        \\<lambda>s. 0 \\<tturnstile> t P; Q = t P; t P = ta P;\n        \\<forall>P. unitary P \\<longrightarrow> unitary (t P);\n        le_utrans t (T t);\n        \\<forall>P. unitary P \\<longrightarrow> unitary (ta P);\n        le_utrans ta (T ta);\n        \\<forall>P. unitary P \\<longrightarrow> unitary (tb P);\n        le_utrans tb (T tb)\\<rbrakk>\n       \\<Longrightarrow> bounded_by ?b3 (tb P)", "fix t::\"'s trans\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Pa t ta tb.\n       \\<lbrakk>unitary P; \\<lambda>s. 0 \\<tturnstile> t P; unitary P;\n        \\<lambda>s. 0 \\<tturnstile> t P; Q = t P; t P = ta P;\n        \\<forall>P. unitary P \\<longrightarrow> unitary (t P);\n        le_utrans t (T t);\n        \\<forall>P. unitary P \\<longrightarrow> unitary (ta P);\n        le_utrans ta (T ta);\n        \\<forall>P. unitary P \\<longrightarrow> unitary (tb P);\n        le_utrans tb (T tb)\\<rbrakk>\n       \\<Longrightarrow> bounded_by ?b3 (tb P)", "assume \"\\<forall>Q. unitary Q \\<longrightarrow> unitary (t Q)\""], ["proof (state)\nthis:\n  \\<forall>Q. unitary Q \\<longrightarrow> unitary (t Q)\n\ngoal (1 subgoal):\n 1. \\<And>Pa t ta tb.\n       \\<lbrakk>unitary P; \\<lambda>s. 0 \\<tturnstile> t P; unitary P;\n        \\<lambda>s. 0 \\<tturnstile> t P; Q = t P; t P = ta P;\n        \\<forall>P. unitary P \\<longrightarrow> unitary (t P);\n        le_utrans t (T t);\n        \\<forall>P. unitary P \\<longrightarrow> unitary (ta P);\n        le_utrans ta (T ta);\n        \\<forall>P. unitary P \\<longrightarrow> unitary (tb P);\n        le_utrans tb (T tb)\\<rbrakk>\n       \\<Longrightarrow> bounded_by ?b3 (tb P)", "with uP"], ["proof (chain)\npicking this:\n  unitary P\n  \\<forall>Q. unitary Q \\<longrightarrow> unitary (t Q)", "show \"bounded_by 1 (t P)\""], ["proof (prove)\nusing this:\n  unitary P\n  \\<forall>Q. unitary Q \\<longrightarrow> unitary (t Q)\n\ngoal (1 subgoal):\n 1. bounded_by 1 (t P)", "by(auto)"], ["proof (state)\nthis:\n  bounded_by 1 (t P)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Q \\<tturnstile> Sup_exp\n                   {t P |t.\n                    t \\<in> {t. (\\<forall>P.\n                                    unitary P \\<longrightarrow>\n                                    unitary (t P)) \\<and>\n                                le_utrans t (T t)}}\n\ngoal (1 subgoal):\n 1. {t P |t.\n     t \\<in> {t. (\\<forall>P.\n                     unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                 le_utrans t (T t)}} \\<noteq>\n    {} \\<Longrightarrow>\n    \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "finally"], ["proof (chain)\npicking this:\n  \\<lambda>s.\n     0 \\<tturnstile> Sup_exp\n                      {t P |t.\n                       t \\<in> {t. (\\<forall>P.\n unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                   le_utrans t (T t)}}", "show \"\\<lambda>s. 0 \\<tturnstile> Sup_exp ?S\""], ["proof (prove)\nusing this:\n  \\<lambda>s.\n     0 \\<tturnstile> Sup_exp\n                      {t P |t.\n                       t \\<in> {t. (\\<forall>P.\n unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                   le_utrans t (T t)}}\n\ngoal (1 subgoal):\n 1. \\<lambda>s.\n       0 \\<tturnstile> Sup_exp\n                        {t P |t.\n                         t \\<in> {t. (\\<forall>P.\n   unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                     le_utrans t (T t)}}", "."], ["proof (state)\nthis:\n  \\<lambda>s.\n     0 \\<tturnstile> Sup_exp\n                      {t P |t.\n                       t \\<in> {t. (\\<forall>P.\n unitary P \\<longrightarrow> unitary (t P)) \\<and>\n                                   le_utrans t (T t)}}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lambda>s. 0 \\<tturnstile> gfp_trans T P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gfp_trans_lemma2:\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_utrans t u; \\<And>P. unitary P \\<Longrightarrow> unitary (t P);\n                         \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans (T t) (T u)\"\n      and hT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. unitary Q \\<Longrightarrow> unitary (t Q); unitary P \\<rbrakk> \\<Longrightarrow> unitary (T t P)\"\n  shows \"le_utrans (gfp_trans T) (T (gfp_trans T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. le_utrans (gfp_trans T) (T (gfp_trans T))", "proof(rule gfp_trans_least, simp_all add:hT gfp_trans_unitary)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_utrans t (T t);\n        \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n       \\<Longrightarrow> le_utrans t (T (gfp_trans T))", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_utrans t (T t);\n        \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n       \\<Longrightarrow> le_utrans t (T (gfp_trans T))", "assume fp: \"le_utrans t (T t)\" and ht: \"\\<And>P. unitary P \\<Longrightarrow> unitary (t P)\""], ["proof (state)\nthis:\n  le_utrans t (T t)\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_utrans t (T t);\n        \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n       \\<Longrightarrow> le_utrans t (T (gfp_trans T))", "note fp"], ["proof (state)\nthis:\n  le_utrans t (T t)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_utrans t (T t);\n        \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n       \\<Longrightarrow> le_utrans t (T (gfp_trans T))", "also"], ["proof (state)\nthis:\n  le_utrans t (T t)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_utrans t (T t);\n        \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n       \\<Longrightarrow> le_utrans t (T (gfp_trans T))", "{"], ["proof (state)\nthis:\n  le_utrans t (T t)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_utrans t (T t);\n        \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n       \\<Longrightarrow> le_utrans t (T (gfp_trans T))", "from fp ht"], ["proof (chain)\npicking this:\n  le_utrans t (T t)\n  unitary ?P \\<Longrightarrow> unitary (t ?P)", "have \"le_utrans t (gfp_trans T)\""], ["proof (prove)\nusing this:\n  le_utrans t (T t)\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n\ngoal (1 subgoal):\n 1. le_utrans t (gfp_trans T)", "by(rule gfp_trans_upperbound)"], ["proof (state)\nthis:\n  le_utrans t (gfp_trans T)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_utrans t (T t);\n        \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n       \\<Longrightarrow> le_utrans t (T (gfp_trans T))", "moreover"], ["proof (state)\nthis:\n  le_utrans t (gfp_trans T)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_utrans t (T t);\n        \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n       \\<Longrightarrow> le_utrans t (T (gfp_trans T))", "note ht gfp_trans_unitary"], ["proof (state)\nthis:\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n  unitary ?P \\<Longrightarrow> unitary (gfp_trans ?T ?P)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_utrans t (T t);\n        \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n       \\<Longrightarrow> le_utrans t (T (gfp_trans T))", "ultimately"], ["proof (chain)\npicking this:\n  le_utrans t (gfp_trans T)\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n  unitary ?P \\<Longrightarrow> unitary (gfp_trans ?T ?P)", "have \"le_utrans (T t) (T (gfp_trans T))\""], ["proof (prove)\nusing this:\n  le_utrans t (gfp_trans T)\n  unitary ?P \\<Longrightarrow> unitary (t ?P)\n  unitary ?P \\<Longrightarrow> unitary (gfp_trans ?T ?P)\n\ngoal (1 subgoal):\n 1. le_utrans (T t) (T (gfp_trans T))", "by(rule mono)"], ["proof (state)\nthis:\n  le_utrans (T t) (T (gfp_trans T))\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_utrans t (T t);\n        \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n       \\<Longrightarrow> le_utrans t (T (gfp_trans T))", "}"], ["proof (state)\nthis:\n  le_utrans (T t) (T (gfp_trans T))\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>le_utrans t (T t);\n        \\<And>P. unitary P \\<Longrightarrow> unitary (t P)\\<rbrakk>\n       \\<Longrightarrow> le_utrans t (T (gfp_trans T))", "finally"], ["proof (chain)\npicking this:\n  le_utrans t (T (gfp_trans T))", "show \"le_utrans t (T (gfp_trans T))\""], ["proof (prove)\nusing this:\n  le_utrans t (T (gfp_trans T))\n\ngoal (1 subgoal):\n 1. le_utrans t (T (gfp_trans T))", "."], ["proof (state)\nthis:\n  le_utrans t (T (gfp_trans T))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gfp_trans_lemma3:\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_utrans t u; \\<And>P. unitary P \\<Longrightarrow> unitary (t P);\n                         \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans (T t) (T u)\"\n      and hT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. unitary Q \\<Longrightarrow> unitary (t Q); unitary P \\<rbrakk> \\<Longrightarrow> unitary (T t P)\"\n  shows \"le_utrans (T (gfp_trans T)) (gfp_trans T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. le_utrans (T (gfp_trans T)) (gfp_trans T)", "by(blast intro!:mono gfp_trans_unitary gfp_trans_upperbound gfp_trans_lemma2 mono hT)"], ["", "lemma gfp_trans_unfold:\n  assumes mono: \"\\<And>t u. \\<lbrakk> le_utrans t u; \\<And>P. unitary P \\<Longrightarrow> unitary (t P);\n                         \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans (T t) (T u)\"\n      and hT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. unitary Q \\<Longrightarrow> unitary (t Q); unitary P \\<rbrakk> \\<Longrightarrow> unitary (T t P)\"\n  shows \"equiv_utrans (gfp_trans T) (T (gfp_trans T))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equiv_utrans (gfp_trans T) (T (gfp_trans T))", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>le_utrans ?t ?u;\n   \\<And>P. unitary P \\<Longrightarrow> unitary (?t P);\n   \\<And>P. unitary P \\<Longrightarrow> unitary (?u P)\\<rbrakk>\n  \\<Longrightarrow> le_utrans (T ?t) (T ?u)\n  \\<lbrakk>\\<And>Q. unitary Q \\<Longrightarrow> unitary (?t Q);\n   unitary ?P\\<rbrakk>\n  \\<Longrightarrow> unitary (T ?t ?P)\n\ngoal (1 subgoal):\n 1. equiv_utrans (gfp_trans T) (T (gfp_trans T))", "by(auto intro!: le_utrans_antisym gfp_trans_lemma2 gfp_trans_lemma3)"], ["", "subsection \\<open>Tail Recursion\\<close>"], ["", "text_raw \\<open>\\label{s:tail}\\<close>"], ["", "text \\<open>The least (greatest) fixed point of a tail-recursive expression on transformers is\nequivalent (given appropriate side conditions) to the least (greatest) fixed point on\nexpectations.\\<close>"], ["", "lemma gfp_pulldown:\n  fixes P::\"'s expect\"\n  assumes tailcall:  \"\\<And>u P. unitary P \\<Longrightarrow> T u P = t P (u P)\"\n      and fT:        \"\\<And>t P. \\<lbrakk> \\<And>Q. unitary Q \\<Longrightarrow> unitary (t Q); unitary P \\<rbrakk> \\<Longrightarrow> unitary (T t P)\"\n      and ft:        \"\\<And>P Q. unitary P \\<Longrightarrow> unitary Q \\<Longrightarrow> unitary (t P Q)\"\n      and mt:        \"\\<And>P Q R. \\<lbrakk> unitary P; unitary Q; unitary R; Q \\<tturnstile> R \\<rbrakk> \\<Longrightarrow> t P Q \\<tturnstile> t P R\"\n      and uP:        \"unitary P\"\n      and monoT:     \"\\<And>t u. \\<lbrakk> le_utrans t u; \\<And>P. unitary P \\<Longrightarrow> unitary (t P);\n                              \\<And>P. unitary P \\<Longrightarrow> unitary (u P) \\<rbrakk> \\<Longrightarrow> le_utrans (T t) (T u)\"\n  shows \"gfp_trans T P = gfp_exp (t P)\" (is \"?X P = ?Y P\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. gfp_trans T P = gfp_exp (t P)", "proof(rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. gfp_trans T P \\<tturnstile> gfp_exp (t P)\n 2. gfp_exp (t P) \\<tturnstile> gfp_trans T P", "show \"?X P \\<le> ?Y P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gfp_trans T P \\<tturnstile> gfp_exp (t P)", "proof(rule gfp_exp_upperbound)"], ["proof (state)\ngoal (2 subgoals):\n 1. gfp_trans T P \\<tturnstile> t P (gfp_trans T P)\n 2. unitary (gfp_trans T P)", "from monoT fT uP"], ["proof (chain)\npicking this:\n  \\<lbrakk>le_utrans ?t ?u;\n   \\<And>P. unitary P \\<Longrightarrow> unitary (?t P);\n   \\<And>P. unitary P \\<Longrightarrow> unitary (?u P)\\<rbrakk>\n  \\<Longrightarrow> le_utrans (T ?t) (T ?u)\n  \\<lbrakk>\\<And>Q. unitary Q \\<Longrightarrow> unitary (?t Q);\n   unitary ?P\\<rbrakk>\n  \\<Longrightarrow> unitary (T ?t ?P)\n  unitary P", "have \"(gfp_trans T) P \\<le> (T (gfp_trans T)) P\""], ["proof (prove)\nusing this:\n  \\<lbrakk>le_utrans ?t ?u;\n   \\<And>P. unitary P \\<Longrightarrow> unitary (?t P);\n   \\<And>P. unitary P \\<Longrightarrow> unitary (?u P)\\<rbrakk>\n  \\<Longrightarrow> le_utrans (T ?t) (T ?u)\n  \\<lbrakk>\\<And>Q. unitary Q \\<Longrightarrow> unitary (?t Q);\n   unitary ?P\\<rbrakk>\n  \\<Longrightarrow> unitary (T ?t ?P)\n  unitary P\n\ngoal (1 subgoal):\n 1. gfp_trans T P \\<tturnstile> T (gfp_trans T) P", "by(auto intro!: le_utransD[OF gfp_trans_lemma2])"], ["proof (state)\nthis:\n  gfp_trans T P \\<tturnstile> T (gfp_trans T) P\n\ngoal (2 subgoals):\n 1. gfp_trans T P \\<tturnstile> t P (gfp_trans T P)\n 2. unitary (gfp_trans T P)", "also"], ["proof (state)\nthis:\n  gfp_trans T P \\<tturnstile> T (gfp_trans T) P\n\ngoal (2 subgoals):\n 1. gfp_trans T P \\<tturnstile> t P (gfp_trans T P)\n 2. unitary (gfp_trans T P)", "from uP"], ["proof (chain)\npicking this:\n  unitary P", "have \"(T (gfp_trans T)) P = t P (gfp_trans T P)\""], ["proof (prove)\nusing this:\n  unitary P\n\ngoal (1 subgoal):\n 1. T (gfp_trans T) P = t P (gfp_trans T P)", "by(rule tailcall)"], ["proof (state)\nthis:\n  T (gfp_trans T) P = t P (gfp_trans T P)\n\ngoal (2 subgoals):\n 1. gfp_trans T P \\<tturnstile> t P (gfp_trans T P)\n 2. unitary (gfp_trans T P)", "finally"], ["proof (chain)\npicking this:\n  gfp_trans T P \\<tturnstile> t P (gfp_trans T P)", "show \"gfp_trans T P \\<tturnstile> t P (gfp_trans T P)\""], ["proof (prove)\nusing this:\n  gfp_trans T P \\<tturnstile> t P (gfp_trans T P)\n\ngoal (1 subgoal):\n 1. gfp_trans T P \\<tturnstile> t P (gfp_trans T P)", "."], ["proof (state)\nthis:\n  gfp_trans T P \\<tturnstile> t P (gfp_trans T P)\n\ngoal (1 subgoal):\n 1. unitary (gfp_trans T P)", "from uP gfp_trans_unitary"], ["proof (chain)\npicking this:\n  unitary P\n  unitary ?P \\<Longrightarrow> unitary (gfp_trans ?T ?P)", "show \"unitary (gfp_trans T P)\""], ["proof (prove)\nusing this:\n  unitary P\n  unitary ?P \\<Longrightarrow> unitary (gfp_trans ?T ?P)\n\ngoal (1 subgoal):\n 1. unitary (gfp_trans T P)", "by(auto)"], ["proof (state)\nthis:\n  unitary (gfp_trans T P)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gfp_trans T P \\<tturnstile> gfp_exp (t P)\n\ngoal (1 subgoal):\n 1. gfp_exp (t P) \\<tturnstile> gfp_trans T P", "show \"?Y P \\<le> ?X P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gfp_exp (t P) \\<tturnstile> gfp_trans T P", "proof(rule le_utransD[OF gfp_trans_upperbound], simp_all add:assms)"], ["proof (state)\ngoal (2 subgoals):\n 1. le_utrans (\\<lambda>a. gfp_exp (t a)) (T (\\<lambda>a. gfp_exp (t a)))\n 2. \\<And>P. unitary P \\<Longrightarrow> unitary (gfp_exp (t P))", "show \"le_utrans (\\<lambda>a. gfp_exp (t a)) (T (\\<lambda>a. gfp_exp (t a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. le_utrans (\\<lambda>a. gfp_exp (t a)) (T (\\<lambda>a. gfp_exp (t a)))", "proof(rule le_utransI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       unitary P \\<Longrightarrow>\n       gfp_exp (t P) \\<tturnstile> T (\\<lambda>a. gfp_exp (t a)) P", "fix Q::\"'s expect\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       unitary P \\<Longrightarrow>\n       gfp_exp (t P) \\<tturnstile> T (\\<lambda>a. gfp_exp (t a)) P", "assume uQ: \"unitary Q\""], ["proof (state)\nthis:\n  unitary Q\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       unitary P \\<Longrightarrow>\n       gfp_exp (t P) \\<tturnstile> T (\\<lambda>a. gfp_exp (t a)) P", "with ft"], ["proof (chain)\npicking this:\n  \\<lbrakk>unitary ?P; unitary ?Q\\<rbrakk>\n  \\<Longrightarrow> unitary (t ?P ?Q)\n  unitary Q", "have \"\\<And>R. unitary R \\<Longrightarrow> unitary (t Q R)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>unitary ?P; unitary ?Q\\<rbrakk>\n  \\<Longrightarrow> unitary (t ?P ?Q)\n  unitary Q\n\ngoal (1 subgoal):\n 1. \\<And>R. unitary R \\<Longrightarrow> unitary (t Q R)", "by(auto)"], ["proof (state)\nthis:\n  unitary ?R \\<Longrightarrow> unitary (t Q ?R)\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       unitary P \\<Longrightarrow>\n       gfp_exp (t P) \\<tturnstile> T (\\<lambda>a. gfp_exp (t a)) P", "with mt[OF uQ]"], ["proof (chain)\npicking this:\n  \\<lbrakk>unitary ?Q; unitary ?R; ?Q \\<tturnstile> ?R\\<rbrakk>\n  \\<Longrightarrow> t Q ?Q \\<tturnstile> t Q ?R\n  unitary ?R \\<Longrightarrow> unitary (t Q ?R)", "have \"gfp_exp (t Q) = t Q (gfp_exp (t Q))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>unitary ?Q; unitary ?R; ?Q \\<tturnstile> ?R\\<rbrakk>\n  \\<Longrightarrow> t Q ?Q \\<tturnstile> t Q ?R\n  unitary ?R \\<Longrightarrow> unitary (t Q ?R)\n\ngoal (1 subgoal):\n 1. gfp_exp (t Q) = t Q (gfp_exp (t Q))", "by(blast intro:gfp_exp_unfold)"], ["proof (state)\nthis:\n  gfp_exp (t Q) = t Q (gfp_exp (t Q))\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       unitary P \\<Longrightarrow>\n       gfp_exp (t P) \\<tturnstile> T (\\<lambda>a. gfp_exp (t a)) P", "also"], ["proof (state)\nthis:\n  gfp_exp (t Q) = t Q (gfp_exp (t Q))\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       unitary P \\<Longrightarrow>\n       gfp_exp (t P) \\<tturnstile> T (\\<lambda>a. gfp_exp (t a)) P", "from uQ"], ["proof (chain)\npicking this:\n  unitary Q", "have \"... = T (\\<lambda>a. gfp_exp (t a)) Q\""], ["proof (prove)\nusing this:\n  unitary Q\n\ngoal (1 subgoal):\n 1. t Q (gfp_exp (t Q)) = T (\\<lambda>a. gfp_exp (t a)) Q", "by(rule tailcall[symmetric])"], ["proof (state)\nthis:\n  t Q (gfp_exp (t Q)) = T (\\<lambda>a. gfp_exp (t a)) Q\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       unitary P \\<Longrightarrow>\n       gfp_exp (t P) \\<tturnstile> T (\\<lambda>a. gfp_exp (t a)) P", "finally"], ["proof (chain)\npicking this:\n  gfp_exp (t Q) = T (\\<lambda>a. gfp_exp (t a)) Q", "show \"gfp_exp (t Q) \\<le> T (\\<lambda>a. gfp_exp (t a)) Q\""], ["proof (prove)\nusing this:\n  gfp_exp (t Q) = T (\\<lambda>a. gfp_exp (t a)) Q\n\ngoal (1 subgoal):\n 1. gfp_exp (t Q) \\<tturnstile> T (\\<lambda>a. gfp_exp (t a)) Q", "by(simp)"], ["proof (state)\nthis:\n  gfp_exp (t Q) \\<tturnstile> T (\\<lambda>a. gfp_exp (t a)) Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  le_utrans (\\<lambda>a. gfp_exp (t a)) (T (\\<lambda>a. gfp_exp (t a)))\n\ngoal (1 subgoal):\n 1. \\<And>P. unitary P \\<Longrightarrow> unitary (gfp_exp (t P))", "fix Q::\"'s expect\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P. unitary P \\<Longrightarrow> unitary (gfp_exp (t P))", "assume \"unitary Q\""], ["proof (state)\nthis:\n  unitary Q\n\ngoal (1 subgoal):\n 1. \\<And>P. unitary P \\<Longrightarrow> unitary (gfp_exp (t P))", "with ft"], ["proof (chain)\npicking this:\n  \\<lbrakk>unitary ?P; unitary ?Q\\<rbrakk>\n  \\<Longrightarrow> unitary (t ?P ?Q)\n  unitary Q", "have \"\\<And>R. unitary R \\<Longrightarrow> unitary (t Q R)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>unitary ?P; unitary ?Q\\<rbrakk>\n  \\<Longrightarrow> unitary (t ?P ?Q)\n  unitary Q\n\ngoal (1 subgoal):\n 1. \\<And>R. unitary R \\<Longrightarrow> unitary (t Q R)", "by(auto)"], ["proof (state)\nthis:\n  unitary ?R \\<Longrightarrow> unitary (t Q ?R)\n\ngoal (1 subgoal):\n 1. \\<And>P. unitary P \\<Longrightarrow> unitary (gfp_exp (t P))", "thus \"unitary (gfp_exp (t Q))\""], ["proof (prove)\nusing this:\n  unitary ?R \\<Longrightarrow> unitary (t Q ?R)\n\ngoal (1 subgoal):\n 1. unitary (gfp_exp (t Q))", "by(rule gfp_exp_unitary)"], ["proof (state)\nthis:\n  unitary (gfp_exp (t Q))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gfp_exp (t P) \\<tturnstile> gfp_trans T P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfp_pulldown:\n  fixes P::\"'s expect\" and t::\"'s expect \\<Rightarrow> 's trans\"\n    and T::\"'s trans \\<Rightarrow> 's trans\"\n  assumes tailcall:  \"\\<And>u P. sound P \\<Longrightarrow> T u P = t P (u P)\"\n      and st:        \"\\<And>P Q. sound P \\<Longrightarrow> sound Q \\<Longrightarrow> sound (t P Q)\"\n      and mt:        \"\\<And>P. sound P \\<Longrightarrow> mono_trans (t P)\"\n      and monoT: \"\\<And>t u. \\<lbrakk> le_trans t u; \\<And>P. sound P \\<Longrightarrow> sound (t P);\n                          \\<And>P. sound P \\<Longrightarrow> sound (u P) \\<rbrakk> \\<Longrightarrow> le_trans (T t) (T u)\"\n      and nT:   \"\\<And>t P. \\<lbrakk> \\<And>Q. sound Q \\<Longrightarrow> sound (t Q); sound P \\<rbrakk> \\<Longrightarrow> sound (T t P)\"\n      and fv:   \"le_trans (T v) v\"\n      and sv:   \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\"\n      and sP:   \"sound P\"\n  shows \"lfp_trans T P = lfp_exp (t P)\" (is \"?X P = ?Y P\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp_trans T P = lfp_exp (t P)", "proof(rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. lfp_trans T P \\<tturnstile> lfp_exp (t P)\n 2. lfp_exp (t P) \\<tturnstile> lfp_trans T P", "show \"?Y P \\<le> ?X P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp_exp (t P) \\<tturnstile> lfp_trans T P", "proof(rule lfp_exp_lowerbound)"], ["proof (state)\ngoal (2 subgoals):\n 1. t P (lfp_trans T P) \\<tturnstile> lfp_trans T P\n 2. sound (lfp_trans T P)", "from sP"], ["proof (chain)\npicking this:\n  sound P", "have \"t P (lfp_trans T P) = (T (lfp_trans T)) P\""], ["proof (prove)\nusing this:\n  sound P\n\ngoal (1 subgoal):\n 1. t P (lfp_trans T P) = T (lfp_trans T) P", "by(rule tailcall[symmetric])"], ["proof (state)\nthis:\n  t P (lfp_trans T P) = T (lfp_trans T) P\n\ngoal (2 subgoals):\n 1. t P (lfp_trans T P) \\<tturnstile> lfp_trans T P\n 2. sound (lfp_trans T P)", "also"], ["proof (state)\nthis:\n  t P (lfp_trans T P) = T (lfp_trans T) P\n\ngoal (2 subgoals):\n 1. t P (lfp_trans T P) \\<tturnstile> lfp_trans T P\n 2. sound (lfp_trans T P)", "have \"(T (lfp_trans T)) P \\<le> (lfp_trans T) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T (lfp_trans T) P \\<tturnstile> lfp_trans T P", "by(rule le_transD[OF lfp_trans_lemma2[OF monoT]], (iprover intro:assms)+)"], ["proof (state)\nthis:\n  T (lfp_trans T) P \\<tturnstile> lfp_trans T P\n\ngoal (2 subgoals):\n 1. t P (lfp_trans T P) \\<tturnstile> lfp_trans T P\n 2. sound (lfp_trans T P)", "finally"], ["proof (chain)\npicking this:\n  t P (lfp_trans T P) \\<tturnstile> lfp_trans T P", "show \"t P (lfp_trans T P) \\<le> lfp_trans T P\""], ["proof (prove)\nusing this:\n  t P (lfp_trans T P) \\<tturnstile> lfp_trans T P\n\ngoal (1 subgoal):\n 1. t P (lfp_trans T P) \\<tturnstile> lfp_trans T P", "."], ["proof (state)\nthis:\n  t P (lfp_trans T P) \\<tturnstile> lfp_trans T P\n\ngoal (1 subgoal):\n 1. sound (lfp_trans T P)", "from sP"], ["proof (chain)\npicking this:\n  sound P", "show \"sound (lfp_trans T P)\""], ["proof (prove)\nusing this:\n  sound P\n\ngoal (1 subgoal):\n 1. sound (lfp_trans T P)", "by(iprover intro:lfp_trans_sound assms)"], ["proof (state)\nthis:\n  sound (lfp_trans T P)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lfp_exp (t P) \\<tturnstile> lfp_trans T P\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> lfp_exp (t P)", "have \"\\<And>P. sound P \\<Longrightarrow> t P (v P) = T v P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P. sound P \\<Longrightarrow> t P (v P) = T v P", "by(simp add:tailcall)"], ["proof (state)\nthis:\n  sound ?P \\<Longrightarrow> t ?P (v ?P) = T v ?P\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> lfp_exp (t P)", "also"], ["proof (state)\nthis:\n  sound ?P \\<Longrightarrow> t ?P (v ?P) = T v ?P\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> lfp_exp (t P)", "have \"\\<And>P. sound P \\<Longrightarrow> ... P \\<tturnstile> v P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P. sound P \\<Longrightarrow> T v P \\<tturnstile> v P", "by(auto intro:le_transD[OF fv])"], ["proof (state)\nthis:\n  sound ?P \\<Longrightarrow> T v ?P \\<tturnstile> v ?P\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> lfp_exp (t P)", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>sound ?P1; sound ?P1\\<rbrakk>\n  \\<Longrightarrow> t ?P1 (v ?P1) \\<tturnstile> v ?P1", "have fvP: \"\\<And>P. sound P \\<Longrightarrow> t P (v P) \\<tturnstile> v P\""], ["proof (prove)\nusing this:\n  \\<lbrakk>sound ?P1; sound ?P1\\<rbrakk>\n  \\<Longrightarrow> t ?P1 (v ?P1) \\<tturnstile> v ?P1\n\ngoal (1 subgoal):\n 1. \\<And>P. sound P \\<Longrightarrow> t P (v P) \\<tturnstile> v P", "."], ["proof (state)\nthis:\n  sound ?P \\<Longrightarrow> t ?P (v ?P) \\<tturnstile> v ?P\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> lfp_exp (t P)", "have svP: \"\\<And>P. sound P \\<Longrightarrow> sound (v P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P. sound P \\<Longrightarrow> sound (v P)", "by(rule sv)"], ["proof (state)\nthis:\n  sound ?P \\<Longrightarrow> sound (v ?P)\n\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> lfp_exp (t P)", "show \"?X P \\<le> ?Y P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp_trans T P \\<tturnstile> lfp_exp (t P)", "proof(rule le_transD[OF lfp_trans_lowerbound, OF _ _ sP])"], ["proof (state)\ngoal (2 subgoals):\n 1. le_trans (T (\\<lambda>a. lfp_exp (t a))) (\\<lambda>a. lfp_exp (t a))\n 2. \\<And>P. sound P \\<Longrightarrow> sound (lfp_exp (t P))", "show \"le_trans (T (\\<lambda>a. lfp_exp (t a))) (\\<lambda>a. lfp_exp (t a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. le_trans (T (\\<lambda>a. lfp_exp (t a))) (\\<lambda>a. lfp_exp (t a))", "proof(rule le_transI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       sound P \\<Longrightarrow>\n       T (\\<lambda>a. lfp_exp (t a)) P \\<tturnstile> lfp_exp (t P)", "fix P::\"'s expect\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       sound P \\<Longrightarrow>\n       T (\\<lambda>a. lfp_exp (t a)) P \\<tturnstile> lfp_exp (t P)", "assume sP: \"sound P\""], ["proof (state)\nthis:\n  sound P\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       sound P \\<Longrightarrow>\n       T (\\<lambda>a. lfp_exp (t a)) P \\<tturnstile> lfp_exp (t P)", "from sP"], ["proof (chain)\npicking this:\n  sound P", "have \"T (\\<lambda>a. lfp_exp (t a)) P = t P (lfp_exp (t P))\""], ["proof (prove)\nusing this:\n  sound P\n\ngoal (1 subgoal):\n 1. T (\\<lambda>a. lfp_exp (t a)) P = t P (lfp_exp (t P))", "by(rule tailcall)"], ["proof (state)\nthis:\n  T (\\<lambda>a. lfp_exp (t a)) P = t P (lfp_exp (t P))\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       sound P \\<Longrightarrow>\n       T (\\<lambda>a. lfp_exp (t a)) P \\<tturnstile> lfp_exp (t P)", "also"], ["proof (state)\nthis:\n  T (\\<lambda>a. lfp_exp (t a)) P = t P (lfp_exp (t P))\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       sound P \\<Longrightarrow>\n       T (\\<lambda>a. lfp_exp (t a)) P \\<tturnstile> lfp_exp (t P)", "have \"t P (lfp_exp (t P)) = lfp_exp (t P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t P (lfp_exp (t P)) = lfp_exp (t P)", "by(iprover intro: lfp_exp_unfold[symmetric] sP st mt fvP svP)"], ["proof (state)\nthis:\n  t P (lfp_exp (t P)) = lfp_exp (t P)\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       sound P \\<Longrightarrow>\n       T (\\<lambda>a. lfp_exp (t a)) P \\<tturnstile> lfp_exp (t P)", "finally"], ["proof (chain)\npicking this:\n  T (\\<lambda>a. lfp_exp (t a)) P = lfp_exp (t P)", "show \"T (\\<lambda>a. lfp_exp (t a)) P \\<tturnstile> lfp_exp (t P)\""], ["proof (prove)\nusing this:\n  T (\\<lambda>a. lfp_exp (t a)) P = lfp_exp (t P)\n\ngoal (1 subgoal):\n 1. T (\\<lambda>a. lfp_exp (t a)) P \\<tturnstile> lfp_exp (t P)", "by(simp)"], ["proof (state)\nthis:\n  T (\\<lambda>a. lfp_exp (t a)) P \\<tturnstile> lfp_exp (t P)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  le_trans (T (\\<lambda>a. lfp_exp (t a))) (\\<lambda>a. lfp_exp (t a))\n\ngoal (1 subgoal):\n 1. \\<And>P. sound P \\<Longrightarrow> sound (lfp_exp (t P))", "fix P::\"'s expect\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P. sound P \\<Longrightarrow> sound (lfp_exp (t P))", "assume \"sound P\""], ["proof (state)\nthis:\n  sound P\n\ngoal (1 subgoal):\n 1. \\<And>P. sound P \\<Longrightarrow> sound (lfp_exp (t P))", "with fvP svP"], ["proof (chain)\npicking this:\n  sound ?P \\<Longrightarrow> t ?P (v ?P) \\<tturnstile> v ?P\n  sound ?P \\<Longrightarrow> sound (v ?P)\n  sound P", "show \"sound (lfp_exp (t P))\""], ["proof (prove)\nusing this:\n  sound ?P \\<Longrightarrow> t ?P (v ?P) \\<tturnstile> v ?P\n  sound ?P \\<Longrightarrow> sound (v ?P)\n  sound P\n\ngoal (1 subgoal):\n 1. sound (lfp_exp (t P))", "by(blast intro:lfp_exp_sound)"], ["proof (state)\nthis:\n  sound (lfp_exp (t P))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lfp_trans T P \\<tturnstile> lfp_exp (t P)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition Inf_utrans :: \"'s trans set \\<Rightarrow> 's trans\"\nwhere \"Inf_utrans S = (if S = {} then \\<lambda>P s. 1 else Inf_trans S)\""], ["", "lemma Inf_utrans_lower:\n  \"\\<lbrakk> t \\<in> S; \\<forall>t\\<in>S. \\<forall>P. unitary P \\<longrightarrow> unitary (t P) \\<rbrakk> \\<Longrightarrow> le_utrans (Inf_utrans S) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> S;\n     \\<forall>t\\<in>S.\n        \\<forall>P. unitary P \\<longrightarrow> unitary (t P)\\<rbrakk>\n    \\<Longrightarrow> le_utrans (Inf_utrans S) t", "unfolding Inf_utrans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> S;\n     \\<forall>t\\<in>S.\n        \\<forall>P. unitary P \\<longrightarrow> unitary (t P)\\<rbrakk>\n    \\<Longrightarrow> le_utrans\n                       (if S = {} then \\<lambda>P s. 1 else Inf_trans S) t", "by(cases \"S={}\",\n     auto intro!:le_utransI Inf_exp_lower sound_nneg unitary_sound\n          simp:Inf_trans_def)"], ["", "lemma Inf_utrans_greatest:\n  \"\\<lbrakk> \\<And>P. unitary P \\<Longrightarrow> unitary (t P); \\<forall>u\\<in>S. le_utrans t u \\<rbrakk> \\<Longrightarrow> le_utrans t (Inf_utrans S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>P. unitary P \\<Longrightarrow> unitary (t P);\n     \\<forall>u\\<in>S. le_utrans t u\\<rbrakk>\n    \\<Longrightarrow> le_utrans t (Inf_utrans S)", "unfolding Inf_utrans_def Inf_trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>P. unitary P \\<Longrightarrow> unitary (t P);\n     \\<forall>u\\<in>S. le_utrans t u\\<rbrakk>\n    \\<Longrightarrow> le_utrans t\n                       (if S = {} then \\<lambda>P s. 1\n                        else (\\<lambda>P. Inf_exp {t P |t. t \\<in> S}))", "by(cases \"S={}\", simp_all, (blast intro!:le_utransI Inf_exp_greatest)+)"], ["", "end"]]}