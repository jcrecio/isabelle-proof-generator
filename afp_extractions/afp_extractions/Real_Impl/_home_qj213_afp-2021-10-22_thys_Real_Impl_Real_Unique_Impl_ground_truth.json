{"file_name": "/home/qj213/afp-2021-10-22/thys/Real_Impl/Real_Unique_Impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Real_Impl", "problem_names": ["lemma Ratreal_code[code]:\n  \"Ratreal = real_of_u \\<circ> mau_of_rat\"", "lemma mau_floor: \"floor (real_of_u r) = mau_floor r\"", "lemma mau_inverse: \"inverse (real_of_u r) = real_of_u (mau_inverse r)\"", "lemma mau_uminus: \"- (real_of_u r) = real_of_u (mau_uminus r)\"", "lemma mau_times:\n  \"(real_of_u r1 * real_of_u r2) = (if mau_compatible r1 r2\n    then real_of_u (mau_times r1 r2) else\n    Code.abort (STR ''different base'') (\\<lambda> _. real_of_u r1 * real_of_u r2))\"", "lemma mau_plus:\n  \"(real_of_u r1 + real_of_u r2) = (if mau_compatible r1 r2\n    then real_of_u (mau_plus r1 r2) else\n    Code.abort (STR ''different base'') (\\<lambda> _. real_of_u r1 + real_of_u r2))\"", "lemma real_of_u_inj[simp]: \"real_of_u x = real_of_u y \\<longleftrightarrow> x = y\"", "lemma sqrt_sgn[simp]: \"sqrt (of_int (sgn a)) = of_int (sgn a)\"", "lemma mau_sqrt_main: \"mau_coeff r = 0 \\<Longrightarrow> sqrt (real_of_u r) = real_of_u (mau_sqrt r)\"", "lemma mau_sqrt: \"sqrt (real_of_u r) = (if mau_coeff r = 0 then\n  real_of_u (mau_sqrt r)\n  else Code.abort (STR ''cannot represent sqrt of irrational number'') (\\<lambda> _. sqrt (real_of_u r)))\"", "lemma mau_0: \"0 = real_of_u (mau_of_rat 0)\"", "lemma mau_1: \"1 = real_of_u (mau_of_rat 1)\"", "lemma mau_equal:\n  \"HOL.equal (real_of_u r1) (real_of_u r2) = mau_equal r1 r2\"", "lemma mau_ge_0: \"ge_0 (real_of_u x) = mau_ge_0 x\"", "lemma real_lt [code equation]: \"real_lt x y = (let fx = floor x; fy = floor y in\n  (if fx < fy then True else if fx > fy then False else real_lt (x * 1024) (y * 1024)))\"", "lemma comparison_impl:\n  \"real_of_u x \\<le> real_of_u y \\<longleftrightarrow> real_of_u x = real_of_u y \\<or>\n    (if mau_compatible x y then ge_0 (real_of_u y - real_of_u x) else real_lt (real_of_u x) (real_of_u y))\"\n  \"real_of_u x < real_of_u y \\<longleftrightarrow> real_of_u x \\<noteq> real_of_u y \\<and>\n    (if mau_compatible x y then ge_0 (real_of_u y - real_of_u x) else real_lt (real_of_u x) (real_of_u y))\"", "lemma mau_is_rat: \"is_rat (real_of_u x) = mau_is_rat x\"", "lemma mau_show_real: \"show_real (real_of_u x) = mau_show_real x\"", "lemmas mau_code_eqns [code] = mau_floor mau_0 mau_1 mau_uminus mau_inverse mau_sqrt mau_plus mau_times mau_equal mau_ge_0 mau_is_rat\n  mau_show_real comparison_impl"], "translations": [["", "lemma Ratreal_code[code]:\n  \"Ratreal = real_of_u \\<circ> mau_of_rat\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ratreal = real_of_u \\<circ> mau_of_rat", "by (simp add: fun_eq_iff) (transfer, transfer, simp)"], ["", "lemma mau_floor: \"floor (real_of_u r) = mau_floor r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>real_of_u r\\<rfloor> = mau_floor r", "using ma_floor"], ["proof (prove)\nusing this:\n  \\<lfloor>real_of ?r\\<rfloor> = ma_floor ?r\n\ngoal (1 subgoal):\n 1. \\<lfloor>real_of_u r\\<rfloor> = mau_floor r", "by (transfer, auto)"], ["", "lemma mau_inverse: \"inverse (real_of_u r) = real_of_u (mau_inverse r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (real_of_u r) = real_of_u (mau_inverse r)", "using ma_inverse"], ["proof (prove)\nusing this:\n  inverse (real_of ?r) = real_of (ma_inverse ?r)\n\ngoal (1 subgoal):\n 1. inverse (real_of_u r) = real_of_u (mau_inverse r)", "by (transfer, auto)"], ["", "lemma mau_uminus: \"- (real_of_u r) = real_of_u (mau_uminus r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - real_of_u r = real_of_u (mau_uminus r)", "using ma_uminus"], ["proof (prove)\nusing this:\n  - real_of ?x = real_of (ma_uminus ?x)\n\ngoal (1 subgoal):\n 1. - real_of_u r = real_of_u (mau_uminus r)", "by (transfer, auto)"], ["", "lemma mau_times:\n  \"(real_of_u r1 * real_of_u r2) = (if mau_compatible r1 r2\n    then real_of_u (mau_times r1 r2) else\n    Code.abort (STR ''different base'') (\\<lambda> _. real_of_u r1 * real_of_u r2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_u r1 * real_of_u r2 =\n    (if mau_compatible r1 r2 then real_of_u (mau_times r1 r2)\n     else Code.abort STR ''different base''\n           (\\<lambda>_. real_of_u r1 * real_of_u r2))", "using ma_times"], ["proof (prove)\nusing this:\n  real_of ?r1.0 * real_of ?r2.0 =\n  (if ma_compatible ?r1.0 ?r2.0 then real_of (ma_times ?r1.0 ?r2.0)\n   else Code.abort STR ''different base''\n         (\\<lambda>_. real_of ?r1.0 * real_of ?r2.0))\n\ngoal (1 subgoal):\n 1. real_of_u r1 * real_of_u r2 =\n    (if mau_compatible r1 r2 then real_of_u (mau_times r1 r2)\n     else Code.abort STR ''different base''\n           (\\<lambda>_. real_of_u r1 * real_of_u r2))", "by (transfer, auto)"], ["", "lemma mau_plus:\n  \"(real_of_u r1 + real_of_u r2) = (if mau_compatible r1 r2\n    then real_of_u (mau_plus r1 r2) else\n    Code.abort (STR ''different base'') (\\<lambda> _. real_of_u r1 + real_of_u r2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_u r1 + real_of_u r2 =\n    (if mau_compatible r1 r2 then real_of_u (mau_plus r1 r2)\n     else Code.abort STR ''different base''\n           (\\<lambda>_. real_of_u r1 + real_of_u r2))", "using ma_plus"], ["proof (prove)\nusing this:\n  real_of ?r1.0 + real_of ?r2.0 =\n  (if ma_compatible ?r1.0 ?r2.0 then real_of (ma_plus ?r1.0 ?r2.0)\n   else Code.abort STR ''different base''\n         (\\<lambda>_. real_of ?r1.0 + real_of ?r2.0))\n\ngoal (1 subgoal):\n 1. real_of_u r1 + real_of_u r2 =\n    (if mau_compatible r1 r2 then real_of_u (mau_plus r1 r2)\n     else Code.abort STR ''different base''\n           (\\<lambda>_. real_of_u r1 + real_of_u r2))", "by (transfer, auto)"], ["", "lemma real_of_u_inj[simp]: \"real_of_u x = real_of_u y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (real_of_u x = real_of_u y) = (x = y)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. real_of_u x = real_of_u y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> real_of_u x = real_of_u y", "note field_simps[simp] of_rat_diff[simp]"], ["proof (state)\nthis:\n  ?a + ?b + ?c = ?a + (?b + ?c)\n  ?a + ?b = ?b + ?a\n  ?b + (?a + ?c) = ?a + (?b + ?c)\n  ?a * ?b * ?c = ?a * (?b * ?c)\n  ?a * ?b = ?b * ?a\n  ?b * (?a * ?c) = ?a * (?b * ?c)\n  ?a - ?b - ?c = ?a - (?b + ?c)\n  ?a + (?b - ?c) = ?a + ?b - ?c\n  (?a - ?b = ?c) = (?a = ?c + ?b)\n  (?a = ?c - ?b) = (?a + ?b = ?c)\n  ?a - (?b - ?c) = ?a + ?c - ?b\n  ?a - ?b + ?c = ?a + ?c - ?b\n  (?a - ?b < ?c) = (?a < ?c + ?b)\n  (?a < ?c - ?b) = (?a + ?b < ?c)\n  (?a - ?b \\<le> ?c) = (?a \\<le> ?c + ?b)\n  (?a \\<le> ?c - ?b) = (?a + ?b \\<le> ?c)\n  NO_MATCH (?x div ?y) ?a \\<Longrightarrow>\n  ?a * (?b + ?c) = ?a * ?b + ?a * ?c\n  NO_MATCH (?x div ?y) ?c \\<Longrightarrow>\n  (?a + ?b) * ?c = ?a * ?c + ?b * ?c\n  NO_MATCH (?x div ?y) ?c \\<Longrightarrow>\n  (?a - ?b) * ?c = ?a * ?c - ?b * ?c\n  NO_MATCH (?x div ?y) ?a \\<Longrightarrow>\n  ?a * (?b - ?c) = ?a * ?b - ?a * ?c\n  inverse ?a = (1::?'a) / ?a\n  ?c \\<noteq> (0::?'a) \\<Longrightarrow> (?a = ?b / ?c) = (?a * ?c = ?b)\n  ?c \\<noteq> (0::?'a) \\<Longrightarrow> (?b / ?c = ?a) = (?b = ?a * ?c)\n  ?b \\<noteq> (0::?'a) \\<Longrightarrow>\n  (- (?a / ?b) = ?c) = (- ?a = ?c * ?b)\n  ?b \\<noteq> (0::?'a) \\<Longrightarrow>\n  (?c = - (?a / ?b)) = (?c * ?b = - ?a)\n  ?z \\<noteq> (0::?'a) \\<Longrightarrow> ?x + ?y / ?z = (?x * ?z + ?y) / ?z\n  ?z \\<noteq> (0::?'a) \\<Longrightarrow> ?x / ?z + ?y = (?x + ?y * ?z) / ?z\n  ?z \\<noteq> (0::?'a) \\<Longrightarrow> ?x - ?y / ?z = (?x * ?z - ?y) / ?z\n  ?z \\<noteq> (0::?'a) \\<Longrightarrow>\n  - (?x / ?z) + ?y = (- ?x + ?y * ?z) / ?z\n  ?z \\<noteq> (0::?'a) \\<Longrightarrow> ?x / ?z - ?y = (?x - ?y * ?z) / ?z\n  ?z \\<noteq> (0::?'a) \\<Longrightarrow>\n  - (?x / ?z) - ?y = (- ?x - ?y * ?z) / ?z\n  (0::?'a) < ?c \\<Longrightarrow> (?a \\<le> ?b / ?c) = (?a * ?c \\<le> ?b)\n  (0::?'a) < ?c \\<Longrightarrow> (?a < ?b / ?c) = (?a * ?c < ?b)\n  ?c < (0::?'a) \\<Longrightarrow> (?a < ?b / ?c) = (?b < ?a * ?c)\n  ?c < (0::?'a) \\<Longrightarrow> (?a \\<le> ?b / ?c) = (?b \\<le> ?a * ?c)\n  (0::?'a) < ?c \\<Longrightarrow> (?b / ?c \\<le> ?a) = (?b \\<le> ?a * ?c)\n  (0::?'a) < ?c \\<Longrightarrow> (?b / ?c < ?a) = (?b < ?a * ?c)\n  ?c < (0::?'a) \\<Longrightarrow> (?b / ?c \\<le> ?a) = (?a * ?c \\<le> ?b)\n  ?c < (0::?'a) \\<Longrightarrow> (?b / ?c < ?a) = (?a * ?c < ?b)\n  (0::?'a) < ?c \\<Longrightarrow>\n  (?a \\<le> - (?b / ?c)) = (?a * ?c \\<le> - ?b)\n  ?c < (0::?'a) \\<Longrightarrow>\n  (?a \\<le> - (?b / ?c)) = (- ?b \\<le> ?a * ?c)\n  (0::?'a) < ?c \\<Longrightarrow> (?a < - (?b / ?c)) = (?a * ?c < - ?b)\n  ?c < (0::?'a) \\<Longrightarrow> (?a < - (?b / ?c)) = (- ?b < ?a * ?c)\n  (0::?'a) < ?c \\<Longrightarrow> (- (?b / ?c) < ?a) = (- ?b < ?a * ?c)\n  ?c < (0::?'a) \\<Longrightarrow> (- (?b / ?c) < ?a) = (?a * ?c < - ?b)\n  (0::?'a) < ?c \\<Longrightarrow>\n  (- (?b / ?c) \\<le> ?a) = (- ?b \\<le> ?a * ?c)\n  ?c < (0::?'a) \\<Longrightarrow>\n  (- (?b / ?c) \\<le> ?a) = (?a * ?c \\<le> - ?b)\n  (?a * ?b) ^ ?n = ?a ^ ?n * ?b ^ ?n\n  inverse ?a ^ ?n = inverse (?a ^ ?n)\n  ((1::?'a) / ?a) ^ ?n = (1::?'a) / ?a ^ ?n\n  (?a / ?b) ^ ?n = ?a ^ ?n / ?b ^ ?n\n  inverse ?x powi ?n = inverse (?x powi ?n)\n  ((1::?'a) / ?x) powi ?n = (1::?'a) / ?x powi ?n\n  NO_MATCH (?x div ?y) ?c \\<Longrightarrow>\n  (?a + ?b) *\\<^sub>R ?x = ?a *\\<^sub>R ?x + ?b *\\<^sub>R ?x\n  NO_MATCH (?x div ?y) ?a \\<Longrightarrow>\n  ?a *\\<^sub>R (?x + ?y) = ?a *\\<^sub>R ?x + ?a *\\<^sub>R ?y\n  NO_MATCH (?x div ?y) ?c \\<Longrightarrow>\n  (?a - ?b) *\\<^sub>R ?x = ?a *\\<^sub>R ?x - ?b *\\<^sub>R ?x\n  NO_MATCH (?x div ?y) ?a \\<Longrightarrow>\n  ?a *\\<^sub>R (?x - ?y) = ?a *\\<^sub>R ?x - ?a *\\<^sub>R ?y\n  ?c \\<noteq> 0 \\<Longrightarrow>\n  (?a = ?b /\\<^sub>R ?c) = (?c *\\<^sub>R ?a = ?b)\n  ?c \\<noteq> 0 \\<Longrightarrow>\n  (?b /\\<^sub>R ?c = ?a) = (?b = ?c *\\<^sub>R ?a)\n  ?c \\<noteq> 0 \\<Longrightarrow>\n  ?a + ?b /\\<^sub>R ?c = (?c *\\<^sub>R ?a + ?b) /\\<^sub>R ?c\n  ?c \\<noteq> 0 \\<Longrightarrow>\n  ?a /\\<^sub>R ?c + ?b = (?a + ?c *\\<^sub>R ?b) /\\<^sub>R ?c\n  ?c \\<noteq> 0 \\<Longrightarrow>\n  ?a - ?b /\\<^sub>R ?c = (?c *\\<^sub>R ?a - ?b) /\\<^sub>R ?c\n  ?c \\<noteq> 0 \\<Longrightarrow>\n  ?a /\\<^sub>R ?c - ?b = (?a - ?c *\\<^sub>R ?b) /\\<^sub>R ?c\n  ?c \\<noteq> 0 \\<Longrightarrow>\n  - (?a /\\<^sub>R ?c) + ?b = (- ?a + ?c *\\<^sub>R ?b) /\\<^sub>R ?c\n  ?c \\<noteq> 0 \\<Longrightarrow>\n  - (?a /\\<^sub>R ?c) - ?b = (- ?a - ?c *\\<^sub>R ?b) /\\<^sub>R ?c\n  0 < ?c \\<Longrightarrow>\n  (?a \\<le> ?b /\\<^sub>R ?c) = (?c *\\<^sub>R ?a \\<le> ?b)\n  0 < ?c \\<Longrightarrow> (?a < ?b /\\<^sub>R ?c) = (?c *\\<^sub>R ?a < ?b)\n  0 < ?c \\<Longrightarrow>\n  (?b /\\<^sub>R ?c \\<le> ?a) = (?b \\<le> ?c *\\<^sub>R ?a)\n  0 < ?c \\<Longrightarrow> (?b /\\<^sub>R ?c < ?a) = (?b < ?c *\\<^sub>R ?a)\n  0 < ?c \\<Longrightarrow>\n  (?a \\<le> - (?b /\\<^sub>R ?c)) = (?c *\\<^sub>R ?a \\<le> - ?b)\n  0 < ?c \\<Longrightarrow>\n  (?a < - (?b /\\<^sub>R ?c)) = (?c *\\<^sub>R ?a < - ?b)\n  0 < ?c \\<Longrightarrow>\n  (- (?b /\\<^sub>R ?c) \\<le> ?a) = (- ?b \\<le> ?c *\\<^sub>R ?a)\n  0 < ?c \\<Longrightarrow>\n  (- (?b /\\<^sub>R ?c) < ?a) = (- ?b < ?c *\\<^sub>R ?a)\n  ?c < 0 \\<Longrightarrow>\n  (?a \\<le> ?b /\\<^sub>R ?c) = (?b \\<le> ?c *\\<^sub>R ?a)\n  ?c < 0 \\<Longrightarrow> (?a < ?b /\\<^sub>R ?c) = (?b < ?c *\\<^sub>R ?a)\n  ?c < 0 \\<Longrightarrow>\n  (?b /\\<^sub>R ?c \\<le> ?a) = (?c *\\<^sub>R ?a \\<le> ?b)\n  ?c < 0 \\<Longrightarrow> (?b /\\<^sub>R ?c < ?a) = (?c *\\<^sub>R ?a < ?b)\n  ?c < 0 \\<Longrightarrow>\n  (?a \\<le> - (?b /\\<^sub>R ?c)) = (- ?b \\<le> ?c *\\<^sub>R ?a)\n  ?c < 0 \\<Longrightarrow>\n  (?a < - (?b /\\<^sub>R ?c)) = (- ?b < ?c *\\<^sub>R ?a)\n  ?c < 0 \\<Longrightarrow>\n  (- (?b /\\<^sub>R ?c) \\<le> ?a) = (?c *\\<^sub>R ?a \\<le> - ?b)\n  ?c < 0 \\<Longrightarrow>\n  (- (?b /\\<^sub>R ?c) < ?a) = (?c *\\<^sub>R ?a < - ?b)\n  of_rat (?a - ?b) = of_rat ?a - of_rat ?b\n\ngoal (2 subgoals):\n 1. real_of_u x = real_of_u y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> real_of_u x = real_of_u y", "assume \"real_of_u x = real_of_u y\""], ["proof (state)\nthis:\n  real_of_u x = real_of_u y\n\ngoal (2 subgoals):\n 1. real_of_u x = real_of_u y \\<Longrightarrow> x = y\n 2. x = y \\<Longrightarrow> real_of_u x = real_of_u y", "thus \"x = y\""], ["proof (prove)\nusing this:\n  real_of_u x = real_of_u y\n\ngoal (1 subgoal):\n 1. x = y", "proof (transfer)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n                ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n                ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"ma_coeff x = 0 \\<and> ma_base x = 0 \\<or> ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x)\"\n      and  \"ma_coeff y = 0 \\<and> ma_base y = 0 \\<or> ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y)\"\n      and  \"real_of x = real_of y\""], ["proof (state)\nthis:\n  ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n  ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x)\n  ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n  ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y)\n  real_of x = real_of y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n                ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y\\<rbrakk>\n       \\<Longrightarrow> x = y", "thus \"x = y\""], ["proof (prove)\nusing this:\n  ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n  ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x)\n  ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n  ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y)\n  real_of x = real_of y\n\ngoal (1 subgoal):\n 1. x = y", "proof (transfer, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p pa q qa bb bc.\n       \\<lbrakk>q = 0 \\<and> bb = 0 \\<or>\n                q \\<noteq> 0 \\<and> prime_product bb;\n        qa = 0 \\<and> bc = 0 \\<or> qa \\<noteq> 0 \\<and> prime_product bc;\n        real_of_rat p + real_of_rat q * sqrt (real bb) =\n        real_of_rat pa + real_of_rat qa * sqrt (real bc);\n        ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n        ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y; q = 0 \\<or> bb \\<in> sqrt_irrat;\n        qa = 0 \\<or> bc \\<in> sqrt_irrat\\<rbrakk>\n       \\<Longrightarrow> p = pa \\<and> q = qa \\<and> bb = bc", "fix p1 q1 p2 q2 :: rat and b1 b2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p pa q qa bb bc.\n       \\<lbrakk>q = 0 \\<and> bb = 0 \\<or>\n                q \\<noteq> 0 \\<and> prime_product bb;\n        qa = 0 \\<and> bc = 0 \\<or> qa \\<noteq> 0 \\<and> prime_product bc;\n        real_of_rat p + real_of_rat q * sqrt (real bb) =\n        real_of_rat pa + real_of_rat qa * sqrt (real bc);\n        ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n        ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y; q = 0 \\<or> bb \\<in> sqrt_irrat;\n        qa = 0 \\<or> bc \\<in> sqrt_irrat\\<rbrakk>\n       \\<Longrightarrow> p = pa \\<and> q = qa \\<and> bb = bc", "let ?p1 = \"real_of_rat p1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p pa q qa bb bc.\n       \\<lbrakk>q = 0 \\<and> bb = 0 \\<or>\n                q \\<noteq> 0 \\<and> prime_product bb;\n        qa = 0 \\<and> bc = 0 \\<or> qa \\<noteq> 0 \\<and> prime_product bc;\n        real_of_rat p + real_of_rat q * sqrt (real bb) =\n        real_of_rat pa + real_of_rat qa * sqrt (real bc);\n        ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n        ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y; q = 0 \\<or> bb \\<in> sqrt_irrat;\n        qa = 0 \\<or> bc \\<in> sqrt_irrat\\<rbrakk>\n       \\<Longrightarrow> p = pa \\<and> q = qa \\<and> bb = bc", "let ?p2 = \"real_of_rat p2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p pa q qa bb bc.\n       \\<lbrakk>q = 0 \\<and> bb = 0 \\<or>\n                q \\<noteq> 0 \\<and> prime_product bb;\n        qa = 0 \\<and> bc = 0 \\<or> qa \\<noteq> 0 \\<and> prime_product bc;\n        real_of_rat p + real_of_rat q * sqrt (real bb) =\n        real_of_rat pa + real_of_rat qa * sqrt (real bc);\n        ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n        ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y; q = 0 \\<or> bb \\<in> sqrt_irrat;\n        qa = 0 \\<or> bc \\<in> sqrt_irrat\\<rbrakk>\n       \\<Longrightarrow> p = pa \\<and> q = qa \\<and> bb = bc", "let ?q1 = \"real_of_rat q1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p pa q qa bb bc.\n       \\<lbrakk>q = 0 \\<and> bb = 0 \\<or>\n                q \\<noteq> 0 \\<and> prime_product bb;\n        qa = 0 \\<and> bc = 0 \\<or> qa \\<noteq> 0 \\<and> prime_product bc;\n        real_of_rat p + real_of_rat q * sqrt (real bb) =\n        real_of_rat pa + real_of_rat qa * sqrt (real bc);\n        ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n        ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y; q = 0 \\<or> bb \\<in> sqrt_irrat;\n        qa = 0 \\<or> bc \\<in> sqrt_irrat\\<rbrakk>\n       \\<Longrightarrow> p = pa \\<and> q = qa \\<and> bb = bc", "let ?q2 = \"real_of_rat q2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p pa q qa bb bc.\n       \\<lbrakk>q = 0 \\<and> bb = 0 \\<or>\n                q \\<noteq> 0 \\<and> prime_product bb;\n        qa = 0 \\<and> bc = 0 \\<or> qa \\<noteq> 0 \\<and> prime_product bc;\n        real_of_rat p + real_of_rat q * sqrt (real bb) =\n        real_of_rat pa + real_of_rat qa * sqrt (real bc);\n        ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n        ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y; q = 0 \\<or> bb \\<in> sqrt_irrat;\n        qa = 0 \\<or> bc \\<in> sqrt_irrat\\<rbrakk>\n       \\<Longrightarrow> p = pa \\<and> q = qa \\<and> bb = bc", "let ?b1 = \"real_of_nat b1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p pa q qa bb bc.\n       \\<lbrakk>q = 0 \\<and> bb = 0 \\<or>\n                q \\<noteq> 0 \\<and> prime_product bb;\n        qa = 0 \\<and> bc = 0 \\<or> qa \\<noteq> 0 \\<and> prime_product bc;\n        real_of_rat p + real_of_rat q * sqrt (real bb) =\n        real_of_rat pa + real_of_rat qa * sqrt (real bc);\n        ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n        ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y; q = 0 \\<or> bb \\<in> sqrt_irrat;\n        qa = 0 \\<or> bc \\<in> sqrt_irrat\\<rbrakk>\n       \\<Longrightarrow> p = pa \\<and> q = qa \\<and> bb = bc", "let ?b2 = \"real_of_nat b2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p pa q qa bb bc.\n       \\<lbrakk>q = 0 \\<and> bb = 0 \\<or>\n                q \\<noteq> 0 \\<and> prime_product bb;\n        qa = 0 \\<and> bc = 0 \\<or> qa \\<noteq> 0 \\<and> prime_product bc;\n        real_of_rat p + real_of_rat q * sqrt (real bb) =\n        real_of_rat pa + real_of_rat qa * sqrt (real bc);\n        ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n        ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y; q = 0 \\<or> bb \\<in> sqrt_irrat;\n        qa = 0 \\<or> bc \\<in> sqrt_irrat\\<rbrakk>\n       \\<Longrightarrow> p = pa \\<and> q = qa \\<and> bb = bc", "assume q1: \"q1 = 0 \\<and> b1 = 0 \\<or> q1 \\<noteq> 0 \\<and> prime_product b1\"\n      and q2: \"q2 = 0 \\<and> b2 = 0 \\<or> q2 \\<noteq> 0 \\<and> prime_product b2\"\n      and i1: \"q1 = 0 \\<or> b1 \\<in> sqrt_irrat\"\n      and i2: \"q2 = 0 \\<or> b2 \\<in> sqrt_irrat\"\n      and eq: \"?p1 + ?q1 * sqrt ?b1 = ?p2 + ?q2 * sqrt ?b2\""], ["proof (state)\nthis:\n  q1 = 0 \\<and> b1 = 0 \\<or> q1 \\<noteq> 0 \\<and> prime_product b1\n  q2 = 0 \\<and> b2 = 0 \\<or> q2 \\<noteq> 0 \\<and> prime_product b2\n  q1 = 0 \\<or> b1 \\<in> sqrt_irrat\n  q2 = 0 \\<or> b2 \\<in> sqrt_irrat\n  real_of_rat p1 + real_of_rat q1 * sqrt (real b1) =\n  real_of_rat p2 + real_of_rat q2 * sqrt (real b2)\n\ngoal (1 subgoal):\n 1. \\<And>p pa q qa bb bc.\n       \\<lbrakk>q = 0 \\<and> bb = 0 \\<or>\n                q \\<noteq> 0 \\<and> prime_product bb;\n        qa = 0 \\<and> bc = 0 \\<or> qa \\<noteq> 0 \\<and> prime_product bc;\n        real_of_rat p + real_of_rat q * sqrt (real bb) =\n        real_of_rat pa + real_of_rat qa * sqrt (real bc);\n        ma_coeff x = 0 \\<and> ma_base x = 0 \\<or>\n        ma_coeff x \\<noteq> 0 \\<and> prime_product (ma_base x);\n        ma_coeff y = 0 \\<and> ma_base y = 0 \\<or>\n        ma_coeff y \\<noteq> 0 \\<and> prime_product (ma_base y);\n        real_of x = real_of y; q = 0 \\<or> bb \\<in> sqrt_irrat;\n        qa = 0 \\<or> bc \\<in> sqrt_irrat\\<rbrakk>\n       \\<Longrightarrow> p = pa \\<and> q = qa \\<and> bb = bc", "show \"p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "proof (cases \"q1 = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. q1 = 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2\n 2. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "case True"], ["proof (state)\nthis:\n  q1 = 0\n\ngoal (2 subgoals):\n 1. q1 = 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2\n 2. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "have \"q2 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q2 = 0", "by (rule sqrt_irrat[OF i2, of \"p2 - p1\"], insert eq True q1, auto)"], ["proof (state)\nthis:\n  q2 = 0\n\ngoal (2 subgoals):\n 1. q1 = 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2\n 2. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "with True q1 q2 eq"], ["proof (chain)\npicking this:\n  q1 = 0\n  q1 = 0 \\<and> b1 = 0 \\<or> q1 \\<noteq> 0 \\<and> prime_product b1\n  q2 = 0 \\<and> b2 = 0 \\<or> q2 \\<noteq> 0 \\<and> prime_product b2\n  real_of_rat p1 + real_of_rat q1 * sqrt (real b1) =\n  real_of_rat p2 + real_of_rat q2 * sqrt (real b2)\n  q2 = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  q1 = 0\n  q1 = 0 \\<and> b1 = 0 \\<or> q1 \\<noteq> 0 \\<and> prime_product b1\n  q2 = 0 \\<and> b2 = 0 \\<or> q2 \\<noteq> 0 \\<and> prime_product b2\n  real_of_rat p1 + real_of_rat q1 * sqrt (real b1) =\n  real_of_rat p2 + real_of_rat q2 * sqrt (real b2)\n  q2 = 0\n\ngoal (1 subgoal):\n 1. p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "by auto"], ["proof (state)\nthis:\n  p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "case False"], ["proof (state)\nthis:\n  q1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "hence 1: \"q1 \\<noteq> 0\" \"prime_product b1\""], ["proof (prove)\nusing this:\n  q1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 &&& prime_product b1", "using q1"], ["proof (prove)\nusing this:\n  q1 \\<noteq> 0\n  q1 = 0 \\<and> b1 = 0 \\<or> q1 \\<noteq> 0 \\<and> prime_product b1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 &&& prime_product b1", "by auto"], ["proof (state)\nthis:\n  q1 \\<noteq> 0\n  prime_product b1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "{"], ["proof (state)\nthis:\n  q1 \\<noteq> 0\n  prime_product b1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "assume *: \"q2 = 0\""], ["proof (state)\nthis:\n  q2 = 0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "have \"q1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q1 = 0", "by (rule sqrt_irrat[OF i1, of \"p1 - p2\"], insert eq * q2, auto)"], ["proof (state)\nthis:\n  q1 = 0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "with False"], ["proof (chain)\npicking this:\n  q1 \\<noteq> 0\n  q1 = 0", "have False"], ["proof (prove)\nusing this:\n  q1 \\<noteq> 0\n  q1 = 0\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "}"], ["proof (state)\nthis:\n  q2 = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "hence 2: \"q2 \\<noteq> 0\" \"prime_product b2\""], ["proof (prove)\nusing this:\n  q2 = 0 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. q2 \\<noteq> 0 &&& prime_product b2", "using q2"], ["proof (prove)\nusing this:\n  q2 = 0 \\<Longrightarrow> False\n  q2 = 0 \\<and> b2 = 0 \\<or> q2 \\<noteq> 0 \\<and> prime_product b2\n\ngoal (1 subgoal):\n 1. q2 \\<noteq> 0 &&& prime_product b2", "by auto"], ["proof (state)\nthis:\n  q2 \\<noteq> 0\n  prime_product b2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from 1 i1"], ["proof (chain)\npicking this:\n  q1 \\<noteq> 0\n  prime_product b1\n  q1 = 0 \\<or> b1 \\<in> sqrt_irrat", "have b1: \"b1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q1 \\<noteq> 0\n  prime_product b1\n  q1 = 0 \\<or> b1 \\<in> sqrt_irrat\n\ngoal (1 subgoal):\n 1. b1 \\<noteq> 0", "unfolding sqrt_irrat_def"], ["proof (prove)\nusing this:\n  q1 \\<noteq> 0\n  prime_product b1\n  q1 = 0 \\<or> b1 \\<in> {q. \\<nexists>p. p * p = rat_of_nat q}\n\ngoal (1 subgoal):\n 1. b1 \\<noteq> 0", "by (cases b1, auto)"], ["proof (state)\nthis:\n  b1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from 2 i2"], ["proof (chain)\npicking this:\n  q2 \\<noteq> 0\n  prime_product b2\n  q2 = 0 \\<or> b2 \\<in> sqrt_irrat", "have b2: \"b2 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q2 \\<noteq> 0\n  prime_product b2\n  q2 = 0 \\<or> b2 \\<in> sqrt_irrat\n\ngoal (1 subgoal):\n 1. b2 \\<noteq> 0", "unfolding sqrt_irrat_def"], ["proof (prove)\nusing this:\n  q2 \\<noteq> 0\n  prime_product b2\n  q2 = 0 \\<or> b2 \\<in> {q. \\<nexists>p. p * p = rat_of_nat q}\n\ngoal (1 subgoal):\n 1. b2 \\<noteq> 0", "by (cases b2, auto)"], ["proof (state)\nthis:\n  b2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "let ?sq = \"\\<lambda> x. x * x\""], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "define q3 where \"q3 = p2 - p1\""], ["proof (state)\nthis:\n  q3 = p2 - p1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "let ?q3 = \"real_of_rat q3\""], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "let ?e = \"of_rat (q2 * q2 * of_nat b2 + ?sq q3  - ?sq q1 * of_nat b1) + of_rat (2 * q2 * q3) * sqrt ?b2\""], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from eq"], ["proof (chain)\npicking this:\n  real_of_rat p1 + real_of_rat q1 * sqrt (real b1) =\n  real_of_rat p2 + real_of_rat q2 * sqrt (real b2)", "have *: \"?q1 * sqrt ?b1 = ?q2 * sqrt ?b2 + ?q3\""], ["proof (prove)\nusing this:\n  real_of_rat p1 + real_of_rat q1 * sqrt (real b1) =\n  real_of_rat p2 + real_of_rat q2 * sqrt (real b2)\n\ngoal (1 subgoal):\n 1. real_of_rat q1 * sqrt (real b1) =\n    real_of_rat q2 * sqrt (real b2) + real_of_rat q3", "by (simp add: q3_def)"], ["proof (state)\nthis:\n  real_of_rat q1 * sqrt (real b1) =\n  real_of_rat q2 * sqrt (real b2) + real_of_rat q3\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from arg_cong[OF this, of ?sq]"], ["proof (chain)\npicking this:\n  real_of_rat q1 * sqrt (real b1) * (real_of_rat q1 * sqrt (real b1)) =\n  (real_of_rat q2 * sqrt (real b2) + real_of_rat q3) *\n  (real_of_rat q2 * sqrt (real b2) + real_of_rat q3)", "have \"0 = (real_of_rat 2 * ?q2 * ?q3) * sqrt ?b2 +\n          (?sq ?q2 * ?b2 +  ?sq ?q3 - ?sq ?q1 * ?b1)\""], ["proof (prove)\nusing this:\n  real_of_rat q1 * sqrt (real b1) * (real_of_rat q1 * sqrt (real b1)) =\n  (real_of_rat q2 * sqrt (real b2) + real_of_rat q3) *\n  (real_of_rat q2 * sqrt (real b2) + real_of_rat q3)\n\ngoal (1 subgoal):\n 1. 0 =\n    real_of_rat 2 * real_of_rat q2 * real_of_rat q3 * sqrt (real b2) +\n    (real_of_rat q2 * real_of_rat q2 * real b2 +\n     real_of_rat q3 * real_of_rat q3 -\n     real_of_rat q1 * real_of_rat q1 * real b1)", "by auto"], ["proof (state)\nthis:\n  0 =\n  real_of_rat 2 * real_of_rat q2 * real_of_rat q3 * sqrt (real b2) +\n  (real_of_rat q2 * real_of_rat q2 * real b2 +\n   real_of_rat q3 * real_of_rat q3 -\n   real_of_rat q1 * real_of_rat q1 * real b1)\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "also"], ["proof (state)\nthis:\n  0 =\n  real_of_rat 2 * real_of_rat q2 * real_of_rat q3 * sqrt (real b2) +\n  (real_of_rat q2 * real_of_rat q2 * real b2 +\n   real_of_rat q3 * real_of_rat q3 -\n   real_of_rat q1 * real_of_rat q1 * real b1)\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "have \"\\<dots> = ?e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_rat 2 * real_of_rat q2 * real_of_rat q3 * sqrt (real b2) +\n    (real_of_rat q2 * real_of_rat q2 * real b2 +\n     real_of_rat q3 * real_of_rat q3 -\n     real_of_rat q1 * real_of_rat q1 * real b1) =\n    real_of_rat\n     (q2 * q2 * rat_of_nat b2 + q3 * q3 - q1 * q1 * rat_of_nat b1) +\n    real_of_rat (2 * q2 * q3) * sqrt (real b2)", "by (simp add: of_rat_mult of_rat_add of_rat_minus)"], ["proof (state)\nthis:\n  real_of_rat 2 * real_of_rat q2 * real_of_rat q3 * sqrt (real b2) +\n  (real_of_rat q2 * real_of_rat q2 * real b2 +\n   real_of_rat q3 * real_of_rat q3 -\n   real_of_rat q1 * real_of_rat q1 * real b1) =\n  real_of_rat\n   (q2 * q2 * rat_of_nat b2 + q3 * q3 - q1 * q1 * rat_of_nat b1) +\n  real_of_rat (2 * q2 * q3) * sqrt (real b2)\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "finally"], ["proof (chain)\npicking this:\n  0 =\n  real_of_rat\n   (q2 * q2 * rat_of_nat b2 + q3 * q3 - q1 * q1 * rat_of_nat b1) +\n  real_of_rat (2 * q2 * q3) * sqrt (real b2)", "have eq: \"?e = 0\""], ["proof (prove)\nusing this:\n  0 =\n  real_of_rat\n   (q2 * q2 * rat_of_nat b2 + q3 * q3 - q1 * q1 * rat_of_nat b1) +\n  real_of_rat (2 * q2 * q3) * sqrt (real b2)\n\ngoal (1 subgoal):\n 1. real_of_rat\n     (q2 * q2 * rat_of_nat b2 + q3 * q3 - q1 * q1 * rat_of_nat b1) +\n    real_of_rat (2 * q2 * q3) * sqrt (real b2) =\n    0", "by simp"], ["proof (state)\nthis:\n  real_of_rat\n   (q2 * q2 * rat_of_nat b2 + q3 * q3 - q1 * q1 * rat_of_nat b1) +\n  real_of_rat (2 * q2 * q3) * sqrt (real b2) =\n  0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from sqrt_irrat[OF _ this] 2 i2"], ["proof (chain)\npicking this:\n  2 * q2 * q3 = 0 \\<or> b2 \\<in> sqrt_irrat \\<Longrightarrow>\n  2 * q2 * q3 = 0\n  q2 \\<noteq> 0\n  prime_product b2\n  q2 = 0 \\<or> b2 \\<in> sqrt_irrat", "have q3: \"q3 = 0\""], ["proof (prove)\nusing this:\n  2 * q2 * q3 = 0 \\<or> b2 \\<in> sqrt_irrat \\<Longrightarrow>\n  2 * q2 * q3 = 0\n  q2 \\<noteq> 0\n  prime_product b2\n  q2 = 0 \\<or> b2 \\<in> sqrt_irrat\n\ngoal (1 subgoal):\n 1. q3 = 0", "by auto"], ["proof (state)\nthis:\n  q3 = 0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "hence p: \"p1 = p2\""], ["proof (prove)\nusing this:\n  q3 = 0\n\ngoal (1 subgoal):\n 1. p1 = p2", "unfolding q3_def"], ["proof (prove)\nusing this:\n  p2 - p1 = 0\n\ngoal (1 subgoal):\n 1. p1 = p2", "by simp"], ["proof (state)\nthis:\n  p1 = p2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "let ?b1 = \"rat_of_nat b1\""], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "let ?b2 = \"rat_of_nat b2\""], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from eq[unfolded q3]"], ["proof (chain)\npicking this:\n  real_of_rat (q2 * q2 * rat_of_nat b2 + 0 * 0 - q1 * q1 * rat_of_nat b1) +\n  real_of_rat (2 * q2 * 0) * sqrt (real b2) =\n  0", "have eq: \"?sq q2 * ?b2 = ?sq q1 * ?b1\""], ["proof (prove)\nusing this:\n  real_of_rat (q2 * q2 * rat_of_nat b2 + 0 * 0 - q1 * q1 * rat_of_nat b1) +\n  real_of_rat (2 * q2 * 0) * sqrt (real b2) =\n  0\n\ngoal (1 subgoal):\n 1. q2 * q2 * rat_of_nat b2 = q1 * q1 * rat_of_nat b1", "by auto"], ["proof (state)\nthis:\n  q2 * q2 * rat_of_nat b2 = q1 * q1 * rat_of_nat b1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "obtain z1 n1 where d1: \"quotient_of q1 = (z1,n1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z1 n1.\n        quotient_of q1 = (z1, n1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  quotient_of q1 = (z1, n1)\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "obtain z2 n2 where d2: \"quotient_of q2 = (z2,n2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z2 n2.\n        quotient_of q2 = (z2, n2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  quotient_of q2 = (z2, n2)\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "note id = quotient_of_div[OF d1] quotient_of_div[OF d2]"], ["proof (state)\nthis:\n  q1 = rat_of_int z1 / rat_of_int n1\n  q2 = rat_of_int z2 / rat_of_int n2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "note pos = quotient_of_denom_pos[OF d1] quotient_of_denom_pos[OF d2]"], ["proof (state)\nthis:\n  0 < n1\n  0 < n2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from id(1) 1(1) pos(1)"], ["proof (chain)\npicking this:\n  q1 = rat_of_int z1 / rat_of_int n1\n  q1 \\<noteq> 0\n  0 < n1", "have z1: \"z1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q1 = rat_of_int z1 / rat_of_int n1\n  q1 \\<noteq> 0\n  0 < n1\n\ngoal (1 subgoal):\n 1. z1 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  z1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from id(2) 2(1) pos(2)"], ["proof (chain)\npicking this:\n  q2 = rat_of_int z2 / rat_of_int n2\n  q2 \\<noteq> 0\n  0 < n2", "have z2: \"z2 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q2 = rat_of_int z2 / rat_of_int n2\n  q2 \\<noteq> 0\n  0 < n2\n\ngoal (1 subgoal):\n 1. z2 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  z2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "let ?n1 = \"rat_of_int n1\""], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "let ?n2 = \"rat_of_int n2\""], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "let ?z1 = \"rat_of_int z1\""], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "let ?z2 = \"rat_of_int z2\""], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from arg_cong[OF eq[simplified id], of \"\\<lambda> x. x * ?sq ?n1 * ?sq ?n2\",\n          simplified field_simps]"], ["proof (chain)\npicking this:\n  rat_of_int n1 *\n  (rat_of_int n1 *\n   (rat_of_int n2 *\n    (rat_of_int n2 *\n     (rat_of_nat b2 *\n      (rat_of_int z2 / rat_of_int n2 *\n       (rat_of_int z2 / rat_of_int n2)))))) =\n  rat_of_int n1 *\n  (rat_of_int n1 *\n   (rat_of_int n2 *\n    (rat_of_int n2 *\n     (rat_of_nat b1 *\n      (rat_of_int z1 / rat_of_int n1 * (rat_of_int z1 / rat_of_int n1))))))", "have \"?sq (?n1 * ?z2) * ?b2 = ?sq (?n2 * ?z1) * ?b1\""], ["proof (prove)\nusing this:\n  rat_of_int n1 *\n  (rat_of_int n1 *\n   (rat_of_int n2 *\n    (rat_of_int n2 *\n     (rat_of_nat b2 *\n      (rat_of_int z2 / rat_of_int n2 *\n       (rat_of_int z2 / rat_of_int n2)))))) =\n  rat_of_int n1 *\n  (rat_of_int n1 *\n   (rat_of_int n2 *\n    (rat_of_int n2 *\n     (rat_of_nat b1 *\n      (rat_of_int z1 / rat_of_int n1 * (rat_of_int z1 / rat_of_int n1))))))\n\ngoal (1 subgoal):\n 1. rat_of_int n1 * rat_of_int z2 * (rat_of_int n1 * rat_of_int z2) *\n    rat_of_nat b2 =\n    rat_of_int n2 * rat_of_int z1 * (rat_of_int n2 * rat_of_int z1) *\n    rat_of_nat b1", "using pos"], ["proof (prove)\nusing this:\n  rat_of_int n1 *\n  (rat_of_int n1 *\n   (rat_of_int n2 *\n    (rat_of_int n2 *\n     (rat_of_nat b2 *\n      (rat_of_int z2 / rat_of_int n2 *\n       (rat_of_int z2 / rat_of_int n2)))))) =\n  rat_of_int n1 *\n  (rat_of_int n1 *\n   (rat_of_int n2 *\n    (rat_of_int n2 *\n     (rat_of_nat b1 *\n      (rat_of_int z1 / rat_of_int n1 * (rat_of_int z1 / rat_of_int n1))))))\n  0 < n1\n  0 < n2\n\ngoal (1 subgoal):\n 1. rat_of_int n1 * rat_of_int z2 * (rat_of_int n1 * rat_of_int z2) *\n    rat_of_nat b2 =\n    rat_of_int n2 * rat_of_int z1 * (rat_of_int n2 * rat_of_int z1) *\n    rat_of_nat b1", "by auto"], ["proof (state)\nthis:\n  rat_of_int n1 * rat_of_int z2 * (rat_of_int n1 * rat_of_int z2) *\n  rat_of_nat b2 =\n  rat_of_int n2 * rat_of_int z1 * (rat_of_int n2 * rat_of_int z1) *\n  rat_of_nat b1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "moreover"], ["proof (state)\nthis:\n  rat_of_int n1 * rat_of_int z2 * (rat_of_int n1 * rat_of_int z2) *\n  rat_of_nat b2 =\n  rat_of_int n2 * rat_of_int z1 * (rat_of_int n2 * rat_of_int z1) *\n  rat_of_nat b1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "have \"?n1 * ?z2 \\<noteq> 0\" \"?n2 * ?z1 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int n1 * rat_of_int z2 \\<noteq> 0 &&&\n    rat_of_int n2 * rat_of_int z1 \\<noteq> 0", "using z1 z2 pos"], ["proof (prove)\nusing this:\n  z1 \\<noteq> 0\n  z2 \\<noteq> 0\n  0 < n1\n  0 < n2\n\ngoal (1 subgoal):\n 1. rat_of_int n1 * rat_of_int z2 \\<noteq> 0 &&&\n    rat_of_int n2 * rat_of_int z1 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  rat_of_int n1 * rat_of_int z2 \\<noteq> 0\n  rat_of_int n2 * rat_of_int z1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "ultimately"], ["proof (chain)\npicking this:\n  rat_of_int n1 * rat_of_int z2 * (rat_of_int n1 * rat_of_int z2) *\n  rat_of_nat b2 =\n  rat_of_int n2 * rat_of_int z1 * (rat_of_int n2 * rat_of_int z1) *\n  rat_of_nat b1\n  rat_of_int n1 * rat_of_int z2 \\<noteq> 0\n  rat_of_int n2 * rat_of_int z1 \\<noteq> 0", "obtain i1 i2 where 0: \"rat_of_int i1 \\<noteq> 0\" \"rat_of_int i2 \\<noteq> 0\"\n          and eq: \"?sq (rat_of_int i2) * ?b2 = ?sq (rat_of_int i1) * ?b1\""], ["proof (prove)\nusing this:\n  rat_of_int n1 * rat_of_int z2 * (rat_of_int n1 * rat_of_int z2) *\n  rat_of_nat b2 =\n  rat_of_int n2 * rat_of_int z1 * (rat_of_int n2 * rat_of_int z1) *\n  rat_of_nat b1\n  rat_of_int n1 * rat_of_int z2 \\<noteq> 0\n  rat_of_int n2 * rat_of_int z1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>i1 i2.\n        \\<lbrakk>rat_of_int i1 \\<noteq> 0; rat_of_int i2 \\<noteq> 0;\n         rat_of_int i2 * rat_of_int i2 * rat_of_nat b2 =\n         rat_of_int i1 * rat_of_int i1 * rat_of_nat b1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding of_int_mult[symmetric]"], ["proof (prove)\nusing this:\n  rat_of_int (n1 * z2 * (n1 * z2)) * rat_of_nat b2 =\n  rat_of_int (n2 * z1 * (n2 * z1)) * rat_of_nat b1\n  rat_of_int (n1 * z2) \\<noteq> 0\n  rat_of_int (n2 * z1) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>i1 i2.\n        \\<lbrakk>rat_of_int i1 \\<noteq> 0; rat_of_int i2 \\<noteq> 0;\n         rat_of_int (i2 * i2) * rat_of_nat b2 =\n         rat_of_int (i1 * i1) * rat_of_nat b1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast+"], ["proof (state)\nthis:\n  rat_of_int i1 \\<noteq> 0\n  rat_of_int i2 \\<noteq> 0\n  rat_of_int i2 * rat_of_int i2 * rat_of_nat b2 =\n  rat_of_int i1 * rat_of_int i1 * rat_of_nat b1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "let ?b1 = \"int b1\""], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "let ?b2 = \"int b2\""], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from eq"], ["proof (chain)\npicking this:\n  rat_of_int i2 * rat_of_int i2 * rat_of_nat b2 =\n  rat_of_int i1 * rat_of_int i1 * rat_of_nat b1", "have eq: \"?sq i1 * ?b1 = ?sq i2 * ?b2\""], ["proof (prove)\nusing this:\n  rat_of_int i2 * rat_of_int i2 * rat_of_nat b2 =\n  rat_of_int i1 * rat_of_int i1 * rat_of_nat b1\n\ngoal (1 subgoal):\n 1. i1 * i1 * int b1 = i2 * i2 * int b2", "by (metis (hide_lams, no_types) of_int_eq_iff of_int_mult of_int_of_nat_eq)"], ["proof (state)\nthis:\n  i1 * i1 * int b1 = i2 * i2 * int b2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from 0"], ["proof (chain)\npicking this:\n  rat_of_int i1 \\<noteq> 0\n  rat_of_int i2 \\<noteq> 0", "have 0: \"i1 \\<noteq> 0\" \"i2 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  rat_of_int i1 \\<noteq> 0\n  rat_of_int i2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> 0 &&& i2 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  i1 \\<noteq> 0\n  i2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from arg_cong[OF eq, of nat]"], ["proof (chain)\npicking this:\n  nat (i1 * i1 * int b1) = nat (i2 * i2 * int b2)", "have \"?sq (nat (abs i1)) * b1 = ?sq (nat (abs i2)) * b2\""], ["proof (prove)\nusing this:\n  nat (i1 * i1 * int b1) = nat (i2 * i2 * int b2)\n\ngoal (1 subgoal):\n 1. nat \\<bar>i1\\<bar> * nat \\<bar>i1\\<bar> * b1 =\n    nat \\<bar>i2\\<bar> * nat \\<bar>i2\\<bar> * b2", "by (metis abs_of_nat eq nat_abs_mult_distrib nat_int)"], ["proof (state)\nthis:\n  nat \\<bar>i1\\<bar> * nat \\<bar>i1\\<bar> * b1 =\n  nat \\<bar>i2\\<bar> * nat \\<bar>i2\\<bar> * b2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "moreover"], ["proof (state)\nthis:\n  nat \\<bar>i1\\<bar> * nat \\<bar>i1\\<bar> * b1 =\n  nat \\<bar>i2\\<bar> * nat \\<bar>i2\\<bar> * b2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "have \"nat (abs i1) > 0\" \"nat (abs i2) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < nat \\<bar>i1\\<bar> &&& 0 < nat \\<bar>i2\\<bar>", "using 0"], ["proof (prove)\nusing this:\n  i1 \\<noteq> 0\n  i2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < nat \\<bar>i1\\<bar> &&& 0 < nat \\<bar>i2\\<bar>", "by auto"], ["proof (state)\nthis:\n  0 < nat \\<bar>i1\\<bar>\n  0 < nat \\<bar>i2\\<bar>\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "ultimately"], ["proof (chain)\npicking this:\n  nat \\<bar>i1\\<bar> * nat \\<bar>i1\\<bar> * b1 =\n  nat \\<bar>i2\\<bar> * nat \\<bar>i2\\<bar> * b2\n  0 < nat \\<bar>i1\\<bar>\n  0 < nat \\<bar>i2\\<bar>", "obtain n1 n2 where 0: \"n1 > 0\" \"n2 > 0\" and eq: \"?sq n1 * b1 = ?sq n2 * b2\""], ["proof (prove)\nusing this:\n  nat \\<bar>i1\\<bar> * nat \\<bar>i1\\<bar> * b1 =\n  nat \\<bar>i2\\<bar> * nat \\<bar>i2\\<bar> * b2\n  0 < nat \\<bar>i1\\<bar>\n  0 < nat \\<bar>i2\\<bar>\n\ngoal (1 subgoal):\n 1. (\\<And>n1 n2.\n        \\<lbrakk>0 < n1; 0 < n2; n1 * n1 * b1 = n2 * n2 * b2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  0 < n1\n  0 < n2\n  n1 * n1 * b1 = n2 * n2 * b2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from b1 0"], ["proof (chain)\npicking this:\n  b1 \\<noteq> 0\n  0 < n1\n  0 < n2", "have b1: \"b1 > 0\" \"n1 > 0\" \"n1 * n1 > 0\""], ["proof (prove)\nusing this:\n  b1 \\<noteq> 0\n  0 < n1\n  0 < n2\n\ngoal (1 subgoal):\n 1. 0 < b1 &&& 0 < n1 &&& 0 < n1 * n1", "by auto"], ["proof (state)\nthis:\n  0 < b1\n  0 < n1\n  0 < n1 * n1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from b2 0"], ["proof (chain)\npicking this:\n  b2 \\<noteq> 0\n  0 < n1\n  0 < n2", "have b2: \"b2 > 0\" \"n2 > 0\" \"n2 * n2 > 0\""], ["proof (prove)\nusing this:\n  b2 \\<noteq> 0\n  0 < n1\n  0 < n2\n\ngoal (1 subgoal):\n 1. 0 < b2 &&& 0 < n2 &&& 0 < n2 * n2", "by auto"], ["proof (state)\nthis:\n  0 < b2\n  0 < n2\n  0 < n2 * n2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "{"], ["proof (state)\nthis:\n  0 < b2\n  0 < n2\n  0 < n2 * n2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "fix p :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "assume p: \"prime p\""], ["proof (state)\nthis:\n  prime p\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "have \"multiplicity p (?sq n1 * b1) = multiplicity p b1 + 2 * multiplicity p n1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p (n1 * n1 * b1) =\n    multiplicity p b1 + 2 * multiplicity p n1", "using b1 p"], ["proof (prove)\nusing this:\n  0 < b1\n  0 < n1\n  0 < n1 * n1\n  prime p\n\ngoal (1 subgoal):\n 1. multiplicity p (n1 * n1 * b1) =\n    multiplicity p b1 + 2 * multiplicity p n1", "by (auto simp: prime_elem_multiplicity_mult_distrib)"], ["proof (state)\nthis:\n  multiplicity p (n1 * n1 * b1) = multiplicity p b1 + 2 * multiplicity p n1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "also"], ["proof (state)\nthis:\n  multiplicity p (n1 * n1 * b1) = multiplicity p b1 + 2 * multiplicity p n1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "have \"\\<dots> mod 2 = multiplicity p b1 mod 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (multiplicity p b1 + 2 * multiplicity p n1) mod 2 =\n    multiplicity p b1 mod 2", "by presburger"], ["proof (state)\nthis:\n  (multiplicity p b1 + 2 * multiplicity p n1) mod 2 =\n  multiplicity p b1 mod 2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "finally"], ["proof (chain)\npicking this:\n  multiplicity p (n1 * n1 * b1) mod 2 = multiplicity p b1 mod 2", "have id1: \"multiplicity p (?sq n1 * b1) mod 2 = multiplicity p b1 mod 2\""], ["proof (prove)\nusing this:\n  multiplicity p (n1 * n1 * b1) mod 2 = multiplicity p b1 mod 2\n\ngoal (1 subgoal):\n 1. multiplicity p (n1 * n1 * b1) mod 2 = multiplicity p b1 mod 2", "."], ["proof (state)\nthis:\n  multiplicity p (n1 * n1 * b1) mod 2 = multiplicity p b1 mod 2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "have \"multiplicity p (?sq n2 * b2) = multiplicity p b2 + 2 * multiplicity p n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity p (n2 * n2 * b2) =\n    multiplicity p b2 + 2 * multiplicity p n2", "using b2 p"], ["proof (prove)\nusing this:\n  0 < b2\n  0 < n2\n  0 < n2 * n2\n  prime p\n\ngoal (1 subgoal):\n 1. multiplicity p (n2 * n2 * b2) =\n    multiplicity p b2 + 2 * multiplicity p n2", "by (auto simp: prime_elem_multiplicity_mult_distrib)"], ["proof (state)\nthis:\n  multiplicity p (n2 * n2 * b2) = multiplicity p b2 + 2 * multiplicity p n2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "also"], ["proof (state)\nthis:\n  multiplicity p (n2 * n2 * b2) = multiplicity p b2 + 2 * multiplicity p n2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "have \"\\<dots> mod 2 = multiplicity p b2 mod 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (multiplicity p b2 + 2 * multiplicity p n2) mod 2 =\n    multiplicity p b2 mod 2", "by presburger"], ["proof (state)\nthis:\n  (multiplicity p b2 + 2 * multiplicity p n2) mod 2 =\n  multiplicity p b2 mod 2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "finally"], ["proof (chain)\npicking this:\n  multiplicity p (n2 * n2 * b2) mod 2 = multiplicity p b2 mod 2", "have id2: \"multiplicity p (?sq n2 * b2) mod 2 = multiplicity p b2 mod 2\""], ["proof (prove)\nusing this:\n  multiplicity p (n2 * n2 * b2) mod 2 = multiplicity p b2 mod 2\n\ngoal (1 subgoal):\n 1. multiplicity p (n2 * n2 * b2) mod 2 = multiplicity p b2 mod 2", "."], ["proof (state)\nthis:\n  multiplicity p (n2 * n2 * b2) mod 2 = multiplicity p b2 mod 2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from id1 id2 eq"], ["proof (chain)\npicking this:\n  multiplicity p (n1 * n1 * b1) mod 2 = multiplicity p b1 mod 2\n  multiplicity p (n2 * n2 * b2) mod 2 = multiplicity p b2 mod 2\n  n1 * n1 * b1 = n2 * n2 * b2", "have eq: \"multiplicity p b1 mod 2 = multiplicity p b2 mod 2\""], ["proof (prove)\nusing this:\n  multiplicity p (n1 * n1 * b1) mod 2 = multiplicity p b1 mod 2\n  multiplicity p (n2 * n2 * b2) mod 2 = multiplicity p b2 mod 2\n  n1 * n1 * b1 = n2 * n2 * b2\n\ngoal (1 subgoal):\n 1. multiplicity p b1 mod 2 = multiplicity p b2 mod 2", "by simp"], ["proof (state)\nthis:\n  multiplicity p b1 mod 2 = multiplicity p b2 mod 2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from 1(2) 2(2) p"], ["proof (chain)\npicking this:\n  prime_product b1\n  prime_product b2\n  prime p", "have \"multiplicity p b1 \\<le> 1\" \"multiplicity p b2 \\<le> 1\""], ["proof (prove)\nusing this:\n  prime_product b1\n  prime_product b2\n  prime p\n\ngoal (1 subgoal):\n 1. multiplicity p b1 \\<le> 1 &&& multiplicity p b2 \\<le> 1", "unfolding prime_product_def"], ["proof (prove)\nusing this:\n  \\<forall>p. prime p \\<longrightarrow> multiplicity p b1 \\<le> 1\n  \\<forall>p. prime p \\<longrightarrow> multiplicity p b2 \\<le> 1\n  prime p\n\ngoal (1 subgoal):\n 1. multiplicity p b1 \\<le> 1 &&& multiplicity p b2 \\<le> 1", "by auto"], ["proof (state)\nthis:\n  multiplicity p b1 \\<le> 1\n  multiplicity p b2 \\<le> 1\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "with eq"], ["proof (chain)\npicking this:\n  multiplicity p b1 mod 2 = multiplicity p b2 mod 2\n  multiplicity p b1 \\<le> 1\n  multiplicity p b2 \\<le> 1", "have \"multiplicity p b1 = multiplicity p b2\""], ["proof (prove)\nusing this:\n  multiplicity p b1 mod 2 = multiplicity p b2 mod 2\n  multiplicity p b1 \\<le> 1\n  multiplicity p b2 \\<le> 1\n\ngoal (1 subgoal):\n 1. multiplicity p b1 = multiplicity p b2", "by simp"], ["proof (state)\nthis:\n  multiplicity p b1 = multiplicity p b2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "}"], ["proof (state)\nthis:\n  prime ?p3 \\<Longrightarrow> multiplicity ?p3 b1 = multiplicity ?p3 b2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "with b1(1) b2(1)"], ["proof (chain)\npicking this:\n  0 < b1\n  0 < b2\n  prime ?p3 \\<Longrightarrow> multiplicity ?p3 b1 = multiplicity ?p3 b2", "have b: \"b1 = b2\""], ["proof (prove)\nusing this:\n  0 < b1\n  0 < b2\n  prime ?p3 \\<Longrightarrow> multiplicity ?p3 b1 = multiplicity ?p3 b2\n\ngoal (1 subgoal):\n 1. b1 = b2", "by (rule multiplicity_eq_nat)"], ["proof (state)\nthis:\n  b1 = b2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from *[unfolded b q3] b1(1) b2(1)"], ["proof (chain)\npicking this:\n  real_of_rat q1 * sqrt (real b2) =\n  real_of_rat q2 * sqrt (real b2) + real_of_rat 0\n  0 < b1\n  0 < b2", "have q: \"q1 = q2\""], ["proof (prove)\nusing this:\n  real_of_rat q1 * sqrt (real b2) =\n  real_of_rat q2 * sqrt (real b2) + real_of_rat 0\n  0 < b1\n  0 < b2\n\ngoal (1 subgoal):\n 1. q1 = q2", "by simp"], ["proof (state)\nthis:\n  q1 = q2\n\ngoal (1 subgoal):\n 1. q1 \\<noteq> 0 \\<Longrightarrow> p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "from p q b"], ["proof (chain)\npicking this:\n  p1 = p2\n  q1 = q2\n  b1 = b2", "show ?thesis"], ["proof (prove)\nusing this:\n  p1 = p2\n  q1 = q2\n  b1 = b2\n\ngoal (1 subgoal):\n 1. p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2", "by blast"], ["proof (state)\nthis:\n  p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p1 = p2 \\<and> q1 = q2 \\<and> b1 = b2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> real_of_u x = real_of_u y", "qed simp"], ["", "lift_definition mau_sqrt :: \"mini_alg_unique \\<Rightarrow> mini_alg_unique\" is\n   \"\\<lambda> ma. let (a,b) = quotient_of (ma_rat ma); (sq,fact) = prime_product_factor (nat (abs a * b));\n      ma' = ma_of_rat (of_int (sgn(a)) * of_nat sq / of_int b)\n      in ma_times ma' (ma_sqrt (ma_of_rat (of_nat fact)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "fix ma :: mini_alg"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "let ?num =\n    \"let (a, b) = quotient_of (ma_rat ma); (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n       ma' = ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / of_int b)\n     in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "obtain a b where q: \"quotient_of (ma_rat ma) = (a,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        quotient_of (ma_rat ma) = (a, b) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  quotient_of (ma_rat ma) = (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "obtain sq fact where ppf: \"prime_product_factor (nat (abs a * b)) = (sq,fact)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>sq fact.\n        prime_product_factor (nat (\\<bar>a\\<bar> * b)) =\n        (sq, fact) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  prime_product_factor (nat (\\<bar>a\\<bar> * b)) = (sq, fact)\n\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "define asq where \"asq = rat_of_int (sgn a) * of_nat sq / of_int b\""], ["proof (state)\nthis:\n  asq = rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b\n\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "define ma' where \"ma' = ma_of_rat asq\""], ["proof (state)\nthis:\n  ma' = ma_of_rat asq\n\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "define sqrt where \"sqrt = ma_sqrt (ma_of_rat (rat_of_nat fact))\""], ["proof (state)\nthis:\n  sqrt = ma_sqrt (ma_of_rat (rat_of_nat fact))\n\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "have num: \"?num = ma_times ma' sqrt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (let (a, b) = quotient_of (ma_rat ma);\n         (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n         ma' = ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n     in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n    ma_times ma' sqrt", "unfolding q ppf asq_def Let_def split ma'_def sqrt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ma_times (ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b))\n     (ma_sqrt (ma_of_rat (rat_of_nat fact))) =\n    ma_times (ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b))\n     (ma_sqrt (ma_of_rat (rat_of_nat fact)))", ".."], ["proof (state)\nthis:\n  (let (a, b) = quotient_of (ma_rat ma);\n       (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n       ma' = ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n   in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n  ma_times ma' sqrt\n\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "let ?inv = \"\\<lambda> ma. ma_coeff ma = 0 \\<and> ma_base ma = 0 \\<or> ma_coeff ma \\<noteq> 0 \\<and> prime_product (ma_base ma)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "have ma': \"?inv ma'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ma_coeff ma' = 0 \\<and> ma_base ma' = 0 \\<or>\n    ma_coeff ma' \\<noteq> 0 \\<and> prime_product (ma_base ma')", "unfolding ma'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ma_coeff (ma_of_rat asq) = 0 \\<and> ma_base (ma_of_rat asq) = 0 \\<or>\n    ma_coeff (ma_of_rat asq) \\<noteq> 0 \\<and>\n    prime_product (ma_base (ma_of_rat asq))", "by (transfer, auto)"], ["proof (state)\nthis:\n  ma_coeff ma' = 0 \\<and> ma_base ma' = 0 \\<or>\n  ma_coeff ma' \\<noteq> 0 \\<and> prime_product (ma_base ma')\n\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "have id: \"\\<And> i. int i * 1 = i\" \"\\<And> i :: rat. i / 1 = i\" \"rat_of_int 1 = 1\" \"inverse (1 :: rat) = 1\"\n    \"\\<And> n. nat \\<bar>int n\\<bar> = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>i. int i * 1 = int i) &&& (\\<And>i. i / 1 = i)) &&&\n    rat_of_int 1 = 1 &&&\n    inverse 1 = 1 &&& (\\<And>n. nat \\<bar>int n\\<bar> = n)", "by auto"], ["proof (state)\nthis:\n  int ?i * 1 = int ?i\n  ?i / 1 = ?i\n  rat_of_int 1 = 1\n  inverse 1 = 1\n  nat \\<bar>int ?n\\<bar> = ?n\n\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "from prime_product_factor[OF ppf]"], ["proof (chain)\npicking this:\n  nat (\\<bar>a\\<bar> * b) = sq * sq * fact \\<and> prime_product fact", "have \"prime_product fact\""], ["proof (prove)\nusing this:\n  nat (\\<bar>a\\<bar> * b) = sq * sq * fact \\<and> prime_product fact\n\ngoal (1 subgoal):\n 1. prime_product fact", "by auto"], ["proof (state)\nthis:\n  prime_product fact\n\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "hence sqrt: \"?inv sqrt\""], ["proof (prove)\nusing this:\n  prime_product fact\n\ngoal (1 subgoal):\n 1. ma_coeff sqrt = 0 \\<and> ma_base sqrt = 0 \\<or>\n    ma_coeff sqrt \\<noteq> 0 \\<and> prime_product (ma_base sqrt)", "unfolding sqrt_def"], ["proof (prove)\nusing this:\n  prime_product fact\n\ngoal (1 subgoal):\n 1. ma_coeff (ma_sqrt (ma_of_rat (rat_of_nat fact))) = 0 \\<and>\n    ma_base (ma_sqrt (ma_of_rat (rat_of_nat fact))) = 0 \\<or>\n    ma_coeff (ma_sqrt (ma_of_rat (rat_of_nat fact))) \\<noteq> 0 \\<and>\n    prime_product (ma_base (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "by (transfer, unfold split quotient_of_nat Let_def id, case_tac \"sqrt_int \\<bar>int facta\\<bar>\", auto)"], ["proof (state)\nthis:\n  ma_coeff sqrt = 0 \\<and> ma_base sqrt = 0 \\<or>\n  ma_coeff sqrt \\<noteq> 0 \\<and> prime_product (ma_base sqrt)\n\ngoal (1 subgoal):\n 1. \\<And>mini_alg.\n       ma_coeff mini_alg = 0 \\<and> ma_base mini_alg = 0 \\<or>\n       ma_coeff mini_alg \\<noteq> 0 \\<and>\n       prime_product (ma_base mini_alg) \\<Longrightarrow>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<and>\n       ma_base\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n       0 \\<or>\n       ma_coeff\n        (let (a, b) = quotient_of (ma_rat mini_alg);\n             (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n             ma' =\n               ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n         in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n       0 \\<and>\n       prime_product\n        (ma_base\n          (let (a, b) = quotient_of (ma_rat mini_alg);\n               (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' =\n                 ma_of_rat\n                  (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "show \"?inv ?num\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ma_coeff\n     (let (a, b) = quotient_of (ma_rat ma);\n          (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n          ma' =\n            ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n      in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n    0 \\<and>\n    ma_base\n     (let (a, b) = quotient_of (ma_rat ma);\n          (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n          ma' =\n            ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n      in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n    0 \\<or>\n    ma_coeff\n     (let (a, b) = quotient_of (ma_rat ma);\n          (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n          ma' =\n            ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n      in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n    0 \\<and>\n    prime_product\n     (ma_base\n       (let (a, b) = quotient_of (ma_rat ma);\n            (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n            ma' =\n              ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n        in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))", "unfolding num"], ["proof (prove)\ngoal (1 subgoal):\n 1. ma_coeff (ma_times ma' sqrt) = 0 \\<and>\n    ma_base (ma_times ma' sqrt) = 0 \\<or>\n    ma_coeff (ma_times ma' sqrt) \\<noteq> 0 \\<and>\n    prime_product (ma_base (ma_times ma' sqrt))", "using ma' sqrt"], ["proof (prove)\nusing this:\n  ma_coeff ma' = 0 \\<and> ma_base ma' = 0 \\<or>\n  ma_coeff ma' \\<noteq> 0 \\<and> prime_product (ma_base ma')\n  ma_coeff sqrt = 0 \\<and> ma_base sqrt = 0 \\<or>\n  ma_coeff sqrt \\<noteq> 0 \\<and> prime_product (ma_base sqrt)\n\ngoal (1 subgoal):\n 1. ma_coeff (ma_times ma' sqrt) = 0 \\<and>\n    ma_base (ma_times ma' sqrt) = 0 \\<or>\n    ma_coeff (ma_times ma' sqrt) \\<noteq> 0 \\<and>\n    prime_product (ma_base (ma_times ma' sqrt))", "by (transfer, auto simp: ma_normalize_def split: if_splits)"], ["proof (state)\nthis:\n  ma_coeff\n   (let (a, b) = quotient_of (ma_rat ma);\n        (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n        ma' = ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n    in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n  0 \\<and>\n  ma_base\n   (let (a, b) = quotient_of (ma_rat ma);\n        (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n        ma' = ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n    in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n  0 \\<or>\n  ma_coeff\n   (let (a, b) = quotient_of (ma_rat ma);\n        (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n        ma' = ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n    in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n  0 \\<and>\n  prime_product\n   (ma_base\n     (let (a, b) = quotient_of (ma_rat ma);\n          (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n          ma' =\n            ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n      in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))\n\ngoal:\nNo subgoals!", "(* slow *)"], ["proof (state)\nthis:\n  ma_coeff\n   (let (a, b) = quotient_of (ma_rat ma);\n        (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n        ma' = ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n    in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n  0 \\<and>\n  ma_base\n   (let (a, b) = quotient_of (ma_rat ma);\n        (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n        ma' = ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n    in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) =\n  0 \\<or>\n  ma_coeff\n   (let (a, b) = quotient_of (ma_rat ma);\n        (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n        ma' = ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n    in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))) \\<noteq>\n  0 \\<and>\n  prime_product\n   (ma_base\n     (let (a, b) = quotient_of (ma_rat ma);\n          (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n          ma' =\n            ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n      in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact)))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sqrt_sgn[simp]: \"sqrt (of_int (sgn a)) = of_int (sgn a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (real_of_int (sgn a)) = real_of_int (sgn a)", "by (cases \"a \\<ge> 0\", cases \"a = 0\", auto simp: real_sqrt_minus)"], ["", "lemma mau_sqrt_main: \"mau_coeff r = 0 \\<Longrightarrow> sqrt (real_of_u r) = real_of_u (mau_sqrt r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mau_coeff r = 0 \\<Longrightarrow>\n    sqrt (real_of_u r) = real_of_u (mau_sqrt r)", "proof (transfer)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "assume \"ma_coeff r = 0\""], ["proof (state)\nthis:\n  ma_coeff r = 0\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "hence rr: \"real_of r = of_rat (ma_rat r)\""], ["proof (prove)\nusing this:\n  ma_coeff r = 0\n\ngoal (1 subgoal):\n 1. real_of r = real_of_rat (ma_rat r)", "by (transfer, auto)"], ["proof (state)\nthis:\n  real_of r = real_of_rat (ma_rat r)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "obtain a b where q: \"quotient_of (ma_rat r) = (a,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        quotient_of (ma_rat r) = (a, b) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  quotient_of (ma_rat r) = (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "from quotient_of_div[OF q]"], ["proof (chain)\npicking this:\n  ma_rat r = rat_of_int a / rat_of_int b", "have r: \"ma_rat r = of_int a / of_int b\""], ["proof (prove)\nusing this:\n  ma_rat r = rat_of_int a / rat_of_int b\n\ngoal (1 subgoal):\n 1. ma_rat r = rat_of_int a / rat_of_int b", "by auto"], ["proof (state)\nthis:\n  ma_rat r = rat_of_int a / rat_of_int b\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "from quotient_of_denom_pos[OF q]"], ["proof (chain)\npicking this:\n  0 < b", "have b: \"b > 0\""], ["proof (prove)\nusing this:\n  0 < b\n\ngoal (1 subgoal):\n 1. 0 < b", "by auto"], ["proof (state)\nthis:\n  0 < b\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "obtain sq fact where ppf: \"prime_product_factor (nat (\\<bar>a\\<bar> * b)) = (sq, fact)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>sq fact.\n        prime_product_factor (nat (\\<bar>a\\<bar> * b)) =\n        (sq, fact) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  prime_product_factor (nat (\\<bar>a\\<bar> * b)) = (sq, fact)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "from prime_product_factor[OF ppf]"], ["proof (chain)\npicking this:\n  nat (\\<bar>a\\<bar> * b) = sq * sq * fact \\<and> prime_product fact", "have ab: \"nat (\\<bar>a\\<bar> * b) = sq * sq * fact\""], ["proof (prove)\nusing this:\n  nat (\\<bar>a\\<bar> * b) = sq * sq * fact \\<and> prime_product fact\n\ngoal (1 subgoal):\n 1. nat (\\<bar>a\\<bar> * b) = sq * sq * fact", ".."], ["proof (state)\nthis:\n  nat (\\<bar>a\\<bar> * b) = sq * sq * fact\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "have \"sqrt (real_of r) = sqrt(of_int a / of_int b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (real_of r) = sqrt (real_of_int a / real_of_int b)", "unfolding rr r"], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (real_of_rat (rat_of_int a / rat_of_int b)) =\n    sqrt (real_of_int a / real_of_int b)", "by (metis of_rat_divide of_rat_of_int_eq)"], ["proof (state)\nthis:\n  sqrt (real_of r) = sqrt (real_of_int a / real_of_int b)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "also"], ["proof (state)\nthis:\n  sqrt (real_of r) = sqrt (real_of_int a / real_of_int b)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "have \"real_of_int a / of_int b = of_int a * of_int b / (of_int b * of_int b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int a / real_of_int b =\n    real_of_int a * real_of_int b / (real_of_int b * real_of_int b)", "using b"], ["proof (prove)\nusing this:\n  0 < b\n\ngoal (1 subgoal):\n 1. real_of_int a / real_of_int b =\n    real_of_int a * real_of_int b / (real_of_int b * real_of_int b)", "by auto"], ["proof (state)\nthis:\n  real_of_int a / real_of_int b =\n  real_of_int a * real_of_int b / (real_of_int b * real_of_int b)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "also"], ["proof (state)\nthis:\n  real_of_int a / real_of_int b =\n  real_of_int a * real_of_int b / (real_of_int b * real_of_int b)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "have \"sqrt (\\<dots>) = sqrt (of_int a * of_int b) / of_int b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (real_of_int a * real_of_int b / (real_of_int b * real_of_int b)) =\n    sqrt (real_of_int a * real_of_int b) / real_of_int b", "using sqrt_sqrt[of \"real_of_int b\"] b"], ["proof (prove)\nusing this:\n  0 \\<le> real_of_int b \\<Longrightarrow>\n  sqrt (real_of_int b) * sqrt (real_of_int b) = real_of_int b\n  0 < b\n\ngoal (1 subgoal):\n 1. sqrt (real_of_int a * real_of_int b / (real_of_int b * real_of_int b)) =\n    sqrt (real_of_int a * real_of_int b) / real_of_int b", "by (metis less_eq_real_def of_int_0_less_iff real_sqrt_divide real_sqrt_mult)"], ["proof (state)\nthis:\n  sqrt (real_of_int a * real_of_int b / (real_of_int b * real_of_int b)) =\n  sqrt (real_of_int a * real_of_int b) / real_of_int b\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "also"], ["proof (state)\nthis:\n  sqrt (real_of_int a * real_of_int b / (real_of_int b * real_of_int b)) =\n  sqrt (real_of_int a * real_of_int b) / real_of_int b\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "have \"real_of_int a * of_int b = real_of_int (a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int a * real_of_int b = real_of_int (a * b)", "by auto"], ["proof (state)\nthis:\n  real_of_int a * real_of_int b = real_of_int (a * b)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "also"], ["proof (state)\nthis:\n  real_of_int a * real_of_int b = real_of_int (a * b)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "have \"a * b = sgn a * (abs a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * b = sgn a * (\\<bar>a\\<bar> * b)", "by (simp, metis mult_sgn_abs)"], ["proof (state)\nthis:\n  a * b = sgn a * (\\<bar>a\\<bar> * b)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "also"], ["proof (state)\nthis:\n  a * b = sgn a * (\\<bar>a\\<bar> * b)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "have \"real_of_int (\\<dots>) = of_int (sgn a) * real_of_int (\\<bar>a\\<bar> * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int (sgn a * (\\<bar>a\\<bar> * b)) =\n    real_of_int (sgn a) * real_of_int (\\<bar>a\\<bar> * b)", "unfolding of_int_mult[of \"sgn a\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int (sgn a) * real_of_int (\\<bar>a\\<bar> * b) =\n    real_of_int (sgn a) * real_of_int (\\<bar>a\\<bar> * b)", ".."], ["proof (state)\nthis:\n  real_of_int (sgn a * (\\<bar>a\\<bar> * b)) =\n  real_of_int (sgn a) * real_of_int (\\<bar>a\\<bar> * b)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "also"], ["proof (state)\nthis:\n  real_of_int (sgn a * (\\<bar>a\\<bar> * b)) =\n  real_of_int (sgn a) * real_of_int (\\<bar>a\\<bar> * b)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "have \"real_of_int (\\<bar>a\\<bar> * b) = of_nat (nat (abs a * b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int (\\<bar>a\\<bar> * b) = real (nat (\\<bar>a\\<bar> * b))", "using b"], ["proof (prove)\nusing this:\n  0 < b\n\ngoal (1 subgoal):\n 1. real_of_int (\\<bar>a\\<bar> * b) = real (nat (\\<bar>a\\<bar> * b))", "by (metis abs_sgn mult_pos_pos mult_zero_left nat_int of_int_of_nat_eq of_nat_0 zero_less_abs_iff zero_less_imp_eq_int)"], ["proof (state)\nthis:\n  real_of_int (\\<bar>a\\<bar> * b) = real (nat (\\<bar>a\\<bar> * b))\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "also"], ["proof (state)\nthis:\n  real_of_int (\\<bar>a\\<bar> * b) = real (nat (\\<bar>a\\<bar> * b))\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "have \"\\<dots> = of_nat fact * (of_nat sq * of_nat sq)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (nat (\\<bar>a\\<bar> * b)) = real fact * (real sq * real sq)", "unfolding ab of_nat_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. real sq * real sq * real fact = real fact * (real sq * real sq)", "by simp"], ["proof (state)\nthis:\n  real (nat (\\<bar>a\\<bar> * b)) = real fact * (real sq * real sq)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "also"], ["proof (state)\nthis:\n  real (nat (\\<bar>a\\<bar> * b)) = real fact * (real sq * real sq)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "have \"sqrt (of_int (sgn a) * (of_nat fact * (of_nat sq * of_nat sq))) =\n    of_int (sgn a) * sqrt (of_nat fact) * of_nat sq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (real_of_int (sgn a) * (real fact * (real sq * real sq))) =\n    real_of_int (sgn a) * sqrt (real fact) * real sq", "unfolding real_sqrt_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (real_of_int (sgn a)) *\n    (sqrt (real fact) * (sqrt (real sq) * sqrt (real sq))) =\n    real_of_int (sgn a) * sqrt (real fact) * real sq", "by simp"], ["proof (state)\nthis:\n  sqrt (real_of_int (sgn a) * (real fact * (real sq * real sq))) =\n  real_of_int (sgn a) * sqrt (real fact) * real sq\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "finally"], ["proof (chain)\npicking this:\n  sqrt (real_of r) =\n  real_of_int (sgn a) * sqrt (real fact) * real sq / real_of_int b", "have r: \"sqrt (real_of r) = real_of_int (sgn a) * real_of_nat sq / real_of_int b * sqrt (real_of_nat fact)\""], ["proof (prove)\nusing this:\n  sqrt (real_of r) =\n  real_of_int (sgn a) * sqrt (real fact) * real sq / real_of_int b\n\ngoal (1 subgoal):\n 1. sqrt (real_of r) =\n    real_of_int (sgn a) * real sq / real_of_int b * sqrt (real fact)", "by simp"], ["proof (state)\nthis:\n  sqrt (real_of r) =\n  real_of_int (sgn a) * real sq / real_of_int b * sqrt (real fact)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "let ?asqb = \"ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "let ?f = \"ma_of_rat (rat_of_nat fact)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "let ?sq = \"ma_sqrt ?f\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "have sq: \"0 \\<le> ma_rat ?f\" \"ma_coeff ?f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> ma_rat (ma_of_rat (rat_of_nat fact)) &&&\n    ma_coeff (ma_of_rat (rat_of_nat fact)) = 0", "by ((transfer, simp)+)"], ["proof (state)\nthis:\n  0 \\<le> ma_rat (ma_of_rat (rat_of_nat fact))\n  ma_coeff (ma_of_rat (rat_of_nat fact)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "have compat: \"\\<And> m. (ma_compatible ?asqb m) = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       ma_compatible\n        (ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)) m =\n       True", "by (transfer, auto)"], ["proof (state)\nthis:\n  ma_compatible\n   (ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)) ?m =\n  True\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       \\<lbrakk>ma_coeff r = 0 \\<and> ma_base r = 0 \\<or>\n                ma_coeff r \\<noteq> 0 \\<and> prime_product (ma_base r);\n        ma_coeff r = 0\\<rbrakk>\n       \\<Longrightarrow> sqrt (real_of r) =\n                         real_of\n                          (let (a, b) = quotient_of (ma_rat r);\n                               (sq, fact) =\n                                 prime_product_factor\n                                  (nat (\\<bar>a\\<bar> * b));\n                               ma' =\n                                 ma_of_rat\n                                  (rat_of_int (sgn a) * rat_of_nat sq /\n                                   rat_of_int b)\n                           in ma_times ma'\n                               (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "show \"sqrt (real_of r) =\n         real_of\n          (let (a, b) = quotient_of (ma_rat r); (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n               ma' = ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n           in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (real_of r) =\n    real_of\n     (let (a, b) = quotient_of (ma_rat r);\n          (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n          ma' =\n            ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n      in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "unfolding q ppf Let_def split"], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (real_of r) =\n    real_of\n     (ma_times\n       (ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b))\n       (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "unfolding r"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int (sgn a) * real sq / real_of_int b * sqrt (real fact) =\n    real_of\n     (ma_times\n       (ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b))\n       (ma_sqrt (ma_of_rat (rat_of_nat fact))))", "unfolding ma_times[symmetric, of ?asqb, unfolded compat if_True]"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int (sgn a) * real sq / real_of_int b * sqrt (real fact) =\n    real_of\n     (ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)) *\n    real_of (ma_sqrt (ma_of_rat (rat_of_nat fact)))", "unfolding ma_sqrt_main[OF sq, symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int (sgn a) * real sq / real_of_int b * sqrt (real fact) =\n    real_of\n     (ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)) *\n    sqrt (real_of (ma_of_rat (rat_of_nat fact)))", "unfolding ma_of_rat[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int (sgn a) * real sq / real_of_int b * sqrt (real fact) =\n    real_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b) *\n    sqrt (real_of_rat (rat_of_nat fact))", "by (simp add: of_rat_divide of_rat_mult)"], ["proof (state)\nthis:\n  sqrt (real_of r) =\n  real_of\n   (let (a, b) = quotient_of (ma_rat r);\n        (sq, fact) = prime_product_factor (nat (\\<bar>a\\<bar> * b));\n        ma' = ma_of_rat (rat_of_int (sgn a) * rat_of_nat sq / rat_of_int b)\n    in ma_times ma' (ma_sqrt (ma_of_rat (rat_of_nat fact))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mau_sqrt: \"sqrt (real_of_u r) = (if mau_coeff r = 0 then\n  real_of_u (mau_sqrt r)\n  else Code.abort (STR ''cannot represent sqrt of irrational number'') (\\<lambda> _. sqrt (real_of_u r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sqrt (real_of_u r) =\n    (if mau_coeff r = 0 then real_of_u (mau_sqrt r)\n     else Code.abort STR ''cannot represent sqrt of irrational number''\n           (\\<lambda>_. sqrt (real_of_u r)))", "using mau_sqrt_main[of r]"], ["proof (prove)\nusing this:\n  mau_coeff r = 0 \\<Longrightarrow>\n  sqrt (real_of_u r) = real_of_u (mau_sqrt r)\n\ngoal (1 subgoal):\n 1. sqrt (real_of_u r) =\n    (if mau_coeff r = 0 then real_of_u (mau_sqrt r)\n     else Code.abort STR ''cannot represent sqrt of irrational number''\n           (\\<lambda>_. sqrt (real_of_u r)))", "by (cases \"mau_coeff r = 0\", auto)"], ["", "lemma mau_0: \"0 = real_of_u (mau_of_rat 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = real_of_u (mau_of_rat 0)", "using ma_0"], ["proof (prove)\nusing this:\n  0 = real_of (ma_of_rat 0)\n\ngoal (1 subgoal):\n 1. 0 = real_of_u (mau_of_rat 0)", "by (transfer, auto)"], ["", "lemma mau_1: \"1 = real_of_u (mau_of_rat 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = real_of_u (mau_of_rat 1)", "using ma_1"], ["proof (prove)\nusing this:\n  1 = real_of (ma_of_rat 1)\n\ngoal (1 subgoal):\n 1. 1 = real_of_u (mau_of_rat 1)", "by (transfer, auto)"], ["", "lemma mau_equal:\n  \"HOL.equal (real_of_u r1) (real_of_u r2) = mau_equal r1 r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_class.equal (real_of_u r1) (real_of_u r2) = mau_equal r1 r2", "unfolding equal_real_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (real_of_u r1 - real_of_u r2 = 0) = mau_equal r1 r2", "using real_of_u_inj[of r1 r2]"], ["proof (prove)\nusing this:\n  (real_of_u r1 = real_of_u r2) = (r1 = r2)\n\ngoal (1 subgoal):\n 1. (real_of_u r1 - real_of_u r2 = 0) = mau_equal r1 r2", "by (transfer, transfer, auto)"], ["", "lemma mau_ge_0: \"ge_0 (real_of_u x) = mau_ge_0 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ge_0 (real_of_u x) = mau_ge_0 x", "using ma_ge_0"], ["proof (prove)\nusing this:\n  ge_0 (real_of ?x) = ma_ge_0 ?x\n\ngoal (1 subgoal):\n 1. ge_0 (real_of_u x) = mau_ge_0 x", "by (transfer, auto)"], ["", "definition real_lt :: \"real \\<Rightarrow> real \\<Rightarrow> bool\" where \"real_lt = (<)\""], ["", "text\\<open>The following code equation terminates if it is started on two\n  different inputs.\\<close>"], ["", "lemma real_lt [code equation]: \"real_lt x y = (let fx = floor x; fy = floor y in\n  (if fx < fy then True else if fx > fy then False else real_lt (x * 1024) (y * 1024)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "proof (cases \"floor x < floor y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))\n 2. \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "case True"], ["proof (state)\nthis:\n  \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor>\n\ngoal (2 subgoals):\n 1. \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))\n 2. \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor>\n\ngoal (1 subgoal):\n 1. real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "by (auto simp: real_lt_def floor_less_cancel)"], ["proof (state)\nthis:\n  real_lt x y =\n  (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n   in if fx < fy then True\n      else if fy < fx then False else real_lt (x * 1024) (y * 1024))\n\ngoal (1 subgoal):\n 1. \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "case False"], ["proof (state)\nthis:\n  \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "note nless = this"], ["proof (state)\nthis:\n  \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "proof (cases \"floor x > floor y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))\n 2. \\<not> \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "case True"], ["proof (state)\nthis:\n  \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor>\n\ngoal (2 subgoals):\n 1. \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))\n 2. \\<not> \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "from floor_less_cancel[OF this] True nless"], ["proof (chain)\npicking this:\n  y < x\n  \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor>\n  \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  y < x\n  \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor>\n  \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor>\n\ngoal (1 subgoal):\n 1. real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "by (simp add: real_lt_def)"], ["proof (state)\nthis:\n  real_lt x y =\n  (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n   in if fx < fy then True\n      else if fy < fx then False else real_lt (x * 1024) (y * 1024))\n\ngoal (1 subgoal):\n 1. \\<not> \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "case False"], ["proof (state)\nthis:\n  \\<not> \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<not> \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor> \\<Longrightarrow>\n    real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "with nless"], ["proof (chain)\npicking this:\n  \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor>\n  \\<not> \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor>\n  \\<not> \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor>\n\ngoal (1 subgoal):\n 1. real_lt x y =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else real_lt (x * 1024) (y * 1024))", "unfolding real_lt_def"], ["proof (prove)\nusing this:\n  \\<not> \\<lfloor>x\\<rfloor> < \\<lfloor>y\\<rfloor>\n  \\<not> \\<lfloor>y\\<rfloor> < \\<lfloor>x\\<rfloor>\n\ngoal (1 subgoal):\n 1. (x < y) =\n    (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n     in if fx < fy then True\n        else if fy < fx then False else x * 1024 < y * 1024)", "by auto"], ["proof (state)\nthis:\n  real_lt x y =\n  (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n   in if fx < fy then True\n      else if fy < fx then False else real_lt (x * 1024) (y * 1024))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  real_lt x y =\n  (let fx = \\<lfloor>x\\<rfloor>; fy = \\<lfloor>y\\<rfloor>\n   in if fx < fy then True\n      else if fy < fx then False else real_lt (x * 1024) (y * 1024))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>For comparisons we first check for equality. Then, if the bases are\n  compatible we can just compare the differences with 0. Otherwise, we start\n  the recursive algorithm @{const real_lt} which works on arbitrary bases.\n  In this way, we have an implementation of comparisons which can compare\n  all representable numbers.\n\n  Note that in @{theory Real_Impl.Real_Impl} we did not use @{const real_lt} as there\n  the code-equations for equality already require identical bases.\n\\<close>"], ["", "lemma comparison_impl:\n  \"real_of_u x \\<le> real_of_u y \\<longleftrightarrow> real_of_u x = real_of_u y \\<or>\n    (if mau_compatible x y then ge_0 (real_of_u y - real_of_u x) else real_lt (real_of_u x) (real_of_u y))\"\n  \"real_of_u x < real_of_u y \\<longleftrightarrow> real_of_u x \\<noteq> real_of_u y \\<and>\n    (if mau_compatible x y then ge_0 (real_of_u y - real_of_u x) else real_lt (real_of_u x) (real_of_u y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (real_of_u x \\<le> real_of_u y) =\n    (real_of_u x = real_of_u y \\<or>\n     (if mau_compatible x y then ge_0 (real_of_u y - real_of_u x)\n      else real_lt (real_of_u x) (real_of_u y))) &&&\n    (real_of_u x < real_of_u y) =\n    (real_of_u x \\<noteq> real_of_u y \\<and>\n     (if mau_compatible x y then ge_0 (real_of_u y - real_of_u x)\n      else real_lt (real_of_u x) (real_of_u y)))", "unfolding ge_0_def real_lt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (real_of_u x \\<le> real_of_u y) =\n    (real_of_u x = real_of_u y \\<or>\n     (if mau_compatible x y then 0 \\<le> real_of_u y - real_of_u x\n      else real_of_u x < real_of_u y)) &&&\n    (real_of_u x < real_of_u y) =\n    (real_of_u x \\<noteq> real_of_u y \\<and>\n     (if mau_compatible x y then 0 \\<le> real_of_u y - real_of_u x\n      else real_of_u x < real_of_u y))", "by (auto simp del: real_of_u_inj)"], ["", "lemma mau_is_rat: \"is_rat (real_of_u x) = mau_is_rat x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_rat (real_of_u x) = mau_is_rat x", "using ma_is_rat"], ["proof (prove)\nusing this:\n  is_rat (real_of ?x) = ma_is_rat ?x\n\ngoal (1 subgoal):\n 1. is_rat (real_of_u x) = mau_is_rat x", "by (transfer, auto)"], ["", "lift_definition ma_show_real :: \"mini_alg \\<Rightarrow> string\" is\n  \"\\<lambda> (p,q,b). let sb = shows ''sqrt('' \\<circ> shows b \\<circ> shows '')'';\n      qb = (if q = 1 then sb else if q = -1 then shows ''-'' \\<circ> sb else shows q \\<circ> shows ''*'' \\<circ> sb) in\n      if q = 0 then shows p [] else\n      if p = 0 then qb [] else\n      if q < 0 then ((shows p \\<circ> qb) [])\n      else ((shows p \\<circ> shows ''+'' \\<circ> qb) [])\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition mau_show_real :: \"mini_alg_unique \\<Rightarrow> string\" is ma_show_real"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "overloading show_real \\<equiv> show_real\nbegin"], ["", "definition show_real\n    where \"show_real x \\<equiv>\n      (if (\\<exists> y. x = real_of_u y) then mau_show_real (THE y. x = real_of_u y) else [])\""], ["", "end"], ["", "lemma mau_show_real: \"show_real (real_of_u x) = mau_show_real x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. show_real (real_of_u x) = mau_show_real x", "unfolding show_real_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if \\<exists>y. real_of_u x = real_of_u y\n     then mau_show_real (THE y. real_of_u x = real_of_u y) else []) =\n    mau_show_real x", "by simp"], ["", "code_datatype real_of_u"], ["", "declare [[code drop:\n  \"plus :: real \\<Rightarrow> real \\<Rightarrow> real\"\n  \"uminus :: real \\<Rightarrow> real\"\n  \"times :: real \\<Rightarrow> real \\<Rightarrow> real\"\n  \"inverse :: real \\<Rightarrow> real\"\n  \"floor :: real \\<Rightarrow> int\"\n  sqrt\n  \"HOL.equal :: real \\<Rightarrow> real \\<Rightarrow> bool\"\n  ge_0\n  is_rat\n  \"less :: real \\<Rightarrow> real \\<Rightarrow> bool\" \n  \"less_eq :: real \\<Rightarrow> real \\<Rightarrow> bool\" \n]]"], ["", "lemmas mau_code_eqns [code] = mau_floor mau_0 mau_1 mau_uminus mau_inverse mau_sqrt mau_plus mau_times mau_equal mau_ge_0 mau_is_rat\n  mau_show_real comparison_impl"], ["", "text \\<open>Some tests with small numbers. To work on larger number, one should\n  additionally import the theories for efficient calculation on numbers\\<close>"], ["", "value \"\\<lfloor>101.1 * (sqrt 18 + 6 * sqrt 0.5)\\<rfloor>\""], ["", "value \"\\<lfloor>324 * sqrt 7 + 0.001\\<rfloor>\""], ["", "value \"101.1 * (sqrt 18 + 6 * sqrt 0.5) = 324 * sqrt 7 + 0.001\""], ["", "value \"101.1 * (sqrt 18 + 6 * sqrt 0.5) > 324 * sqrt 7 + 0.001\""], ["", "value \"show (101.1 * (sqrt 18 + 6 * sqrt 0.5))\""], ["", "value \"(sqrt 0.1 \\<in> \\<rat>, sqrt (- 0.09) \\<in> \\<rat>)\""], ["", "end"]]}