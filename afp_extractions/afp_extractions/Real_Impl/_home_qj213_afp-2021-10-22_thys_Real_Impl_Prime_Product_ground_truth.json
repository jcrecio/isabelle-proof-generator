{"file_name": "/home/qj213/afp-2021-10-22/thys/Real_Impl/Prime_Product.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Real_Impl", "problem_names": ["lemma prime_product_factor_main: assumes \"\\<not> (\\<exists> s. s * s = n)\"\n  and \"limit = nat (root_nat_floor 3 n)\"\n  and \"m = factor_sq * factor_sq * factor_pr * n\"\n  and \"prime_product_factor_main factor_sq factor_pr limit n i = (sq, p)\"\n  and \"i \\<ge> 2\"\n  and \"\\<And> j. j \\<ge> 2 \\<Longrightarrow> j < i \\<Longrightarrow> \\<not> j dvd n\"\n  and \"\\<And> j. prime j \\<Longrightarrow> j < i \\<Longrightarrow> multiplicity j factor_pr \\<le> 1\"\n  and \"\\<And> j. prime j \\<Longrightarrow> j \\<ge> i \\<Longrightarrow> multiplicity j factor_pr = 0\"\n  and \"factor_pr > 0\"\n  shows \"m = sq * sq * p \\<and> prime_product p\"", "lemma prime_product_one[simp, intro]: \"prime_product 1\"", "lemma prime_product_factor: assumes pf: \"prime_product_factor n = (sq,p)\"\n  shows \"n = sq * sq * p \\<and> prime_product p\""], "translations": [["", "lemma prime_product_factor_main: assumes \"\\<not> (\\<exists> s. s * s = n)\"\n  and \"limit = nat (root_nat_floor 3 n)\"\n  and \"m = factor_sq * factor_sq * factor_pr * n\"\n  and \"prime_product_factor_main factor_sq factor_pr limit n i = (sq, p)\"\n  and \"i \\<ge> 2\"\n  and \"\\<And> j. j \\<ge> 2 \\<Longrightarrow> j < i \\<Longrightarrow> \\<not> j dvd n\"\n  and \"\\<And> j. prime j \\<Longrightarrow> j < i \\<Longrightarrow> multiplicity j factor_pr \\<le> 1\"\n  and \"\\<And> j. prime j \\<Longrightarrow> j \\<ge> i \\<Longrightarrow> multiplicity j factor_pr = 0\"\n  and \"factor_pr > 0\"\n  shows \"m = sq * sq * p \\<and> prime_product p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = sq * sq * p \\<and> prime_product p", "using assms"], ["proof (prove)\nusing this:\n  \\<nexists>s. s * s = n\n  limit = nat (root_nat_floor 3 n)\n  m = factor_sq * factor_sq * factor_pr * n\n  prime_product_factor_main factor_sq factor_pr limit n i = (sq, p)\n  2 \\<le> i\n  \\<lbrakk>2 \\<le> ?j; ?j < i\\<rbrakk> \\<Longrightarrow> \\<not> ?j dvd n\n  \\<lbrakk>prime ?j; ?j < i\\<rbrakk>\n  \\<Longrightarrow> multiplicity ?j factor_pr \\<le> 1\n  \\<lbrakk>prime ?j; i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> multiplicity ?j factor_pr = 0\n  0 < factor_pr\n\ngoal (1 subgoal):\n 1. m = sq * sq * p \\<and> prime_product p", "proof (induct factor_sq factor_pr limit n i rule: prime_product_factor_main.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>factor_sq factor_pr limit n i.\n       \\<lbrakk>\\<And>x xa.\n                   \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n;\n                    x = n div i; i dvd x; xa = x div i;\n                    \\<nexists>s. s * s = xa;\n                    nat (root_nat_floor 3 xa) = nat (root_nat_floor 3 xa);\n                    m = factor_sq * i * (factor_sq * i) * factor_pr * xa;\n                    prime_product_factor_main (factor_sq * i) factor_pr\n                     (nat (root_nat_floor 3 xa)) xa i =\n                    (sq, p);\n                    2 \\<le> i;\n                    \\<And>j.\n                       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n                       \\<Longrightarrow> \\<not> j dvd xa;\n                    \\<And>j.\n                       \\<lbrakk>prime j; j < i\\<rbrakk>\n                       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n                    \\<And>j.\n                       \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n                       \\<Longrightarrow> multiplicity j factor_pr = 0;\n                    0 < factor_pr\\<rbrakk>\n                   \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<And>x.\n           \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n; x = n div i;\n            \\<not> i dvd x; sqrt_nat x = []; \\<nexists>s. s * s = x;\n            nat (root_nat_floor 3 x) = nat (root_nat_floor 3 x);\n            m = factor_sq * factor_sq * (factor_pr * i) * x;\n            prime_product_factor_main factor_sq (factor_pr * i)\n             (nat (root_nat_floor 3 x)) x (Suc i) =\n            (sq, p);\n            2 \\<le> Suc i;\n            \\<And>j.\n               \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n               \\<Longrightarrow> \\<not> j dvd x;\n            \\<And>j.\n               \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n               \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1;\n            \\<And>j.\n               \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n               \\<Longrightarrow> multiplicity j (factor_pr * i) = 0;\n            0 < factor_pr * i\\<rbrakk>\n           \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; \\<not> i dvd n;\n         \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n         m = factor_sq * factor_sq * factor_pr * n;\n         prime_product_factor_main factor_sq factor_pr limit n (Suc i) =\n         (sq, p);\n         2 \\<le> Suc i;\n         \\<And>j.\n            \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n            \\<Longrightarrow> \\<not> j dvd n;\n         \\<And>j.\n            \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n            \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n         \\<And>j.\n            \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n            \\<Longrightarrow> multiplicity j factor_pr = 0;\n         0 < factor_pr\\<rbrakk>\n        \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n        m = factor_sq * factor_sq * factor_pr * n;\n        prime_product_factor_main factor_sq factor_pr limit n i = (sq, p);\n        2 \\<le> i;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>prime j; j < i\\<rbrakk>\n           \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n        \\<And>j.\n           \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n           \\<Longrightarrow> multiplicity j factor_pr = 0;\n        0 < factor_pr\\<rbrakk>\n       \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "case (1 factor_sq factor_pr limit n i)"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n; ?x = n div i; i dvd ?x;\n   ?xa = ?x div i; \\<nexists>s. s * s = ?xa;\n   nat (root_nat_floor 3 ?xa) = nat (root_nat_floor 3 ?xa);\n   m = factor_sq * i * (factor_sq * i) * factor_pr * ?xa;\n   prime_product_factor_main (factor_sq * i) factor_pr\n    (nat (root_nat_floor 3 ?xa)) ?xa i =\n   (sq, p);\n   2 \\<le> i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < i\\<rbrakk> \\<Longrightarrow> \\<not> j dvd ?xa;\n   \\<And>j.\n      \\<lbrakk>prime j; j < i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr = 0;\n   0 < factor_pr\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n  \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n; ?x = n div i;\n   \\<not> i dvd ?x; sqrt_nat ?x = []; \\<nexists>s. s * s = ?x;\n   nat (root_nat_floor 3 ?x) = nat (root_nat_floor 3 ?x);\n   m = factor_sq * factor_sq * (factor_pr * i) * ?x;\n   prime_product_factor_main factor_sq (factor_pr * i)\n    (nat (root_nat_floor 3 ?x)) ?x (Suc i) =\n   (sq, p);\n   2 \\<le> Suc i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> \\<not> j dvd ?x;\n   \\<And>j.\n      \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) = 0;\n   0 < factor_pr * i\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n  \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; \\<not> i dvd n;\n   \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n   m = factor_sq * factor_sq * factor_pr * n;\n   prime_product_factor_main factor_sq factor_pr limit n (Suc i) = (sq, p);\n   2 \\<le> Suc i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> \\<not> j dvd n;\n   \\<And>j.\n      \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr = 0;\n   0 < factor_pr\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n  \\<nexists>s. s * s = n\n  limit = nat (root_nat_floor 3 n)\n  m = factor_sq * factor_sq * factor_pr * n\n  prime_product_factor_main factor_sq factor_pr limit n i = (sq, p)\n  2 \\<le> i\n  \\<lbrakk>2 \\<le> ?j; ?j < i\\<rbrakk> \\<Longrightarrow> \\<not> ?j dvd n\n  \\<lbrakk>prime ?j; ?j < i\\<rbrakk>\n  \\<Longrightarrow> multiplicity ?j factor_pr \\<le> 1\n  \\<lbrakk>prime ?j; i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> multiplicity ?j factor_pr = 0\n  0 < factor_pr\n\ngoal (1 subgoal):\n 1. \\<And>factor_sq factor_pr limit n i.\n       \\<lbrakk>\\<And>x xa.\n                   \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n;\n                    x = n div i; i dvd x; xa = x div i;\n                    \\<nexists>s. s * s = xa;\n                    nat (root_nat_floor 3 xa) = nat (root_nat_floor 3 xa);\n                    m = factor_sq * i * (factor_sq * i) * factor_pr * xa;\n                    prime_product_factor_main (factor_sq * i) factor_pr\n                     (nat (root_nat_floor 3 xa)) xa i =\n                    (sq, p);\n                    2 \\<le> i;\n                    \\<And>j.\n                       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n                       \\<Longrightarrow> \\<not> j dvd xa;\n                    \\<And>j.\n                       \\<lbrakk>prime j; j < i\\<rbrakk>\n                       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n                    \\<And>j.\n                       \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n                       \\<Longrightarrow> multiplicity j factor_pr = 0;\n                    0 < factor_pr\\<rbrakk>\n                   \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<And>x.\n           \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n; x = n div i;\n            \\<not> i dvd x; sqrt_nat x = []; \\<nexists>s. s * s = x;\n            nat (root_nat_floor 3 x) = nat (root_nat_floor 3 x);\n            m = factor_sq * factor_sq * (factor_pr * i) * x;\n            prime_product_factor_main factor_sq (factor_pr * i)\n             (nat (root_nat_floor 3 x)) x (Suc i) =\n            (sq, p);\n            2 \\<le> Suc i;\n            \\<And>j.\n               \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n               \\<Longrightarrow> \\<not> j dvd x;\n            \\<And>j.\n               \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n               \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1;\n            \\<And>j.\n               \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n               \\<Longrightarrow> multiplicity j (factor_pr * i) = 0;\n            0 < factor_pr * i\\<rbrakk>\n           \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; \\<not> i dvd n;\n         \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n         m = factor_sq * factor_sq * factor_pr * n;\n         prime_product_factor_main factor_sq factor_pr limit n (Suc i) =\n         (sq, p);\n         2 \\<le> Suc i;\n         \\<And>j.\n            \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n            \\<Longrightarrow> \\<not> j dvd n;\n         \\<And>j.\n            \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n            \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n         \\<And>j.\n            \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n            \\<Longrightarrow> multiplicity j factor_pr = 0;\n         0 < factor_pr\\<rbrakk>\n        \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n        m = factor_sq * factor_sq * factor_pr * n;\n        prime_product_factor_main factor_sq factor_pr limit n i = (sq, p);\n        2 \\<le> i;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>prime j; j < i\\<rbrakk>\n           \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n        \\<And>j.\n           \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n           \\<Longrightarrow> multiplicity j factor_pr = 0;\n        0 < factor_pr\\<rbrakk>\n       \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "note IH = 1(1-3)"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n; ?x = n div i; i dvd ?x;\n   ?xa = ?x div i; \\<nexists>s. s * s = ?xa;\n   nat (root_nat_floor 3 ?xa) = nat (root_nat_floor 3 ?xa);\n   m = factor_sq * i * (factor_sq * i) * factor_pr * ?xa;\n   prime_product_factor_main (factor_sq * i) factor_pr\n    (nat (root_nat_floor 3 ?xa)) ?xa i =\n   (sq, p);\n   2 \\<le> i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < i\\<rbrakk> \\<Longrightarrow> \\<not> j dvd ?xa;\n   \\<And>j.\n      \\<lbrakk>prime j; j < i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr = 0;\n   0 < factor_pr\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n  \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n; ?x = n div i;\n   \\<not> i dvd ?x; sqrt_nat ?x = []; \\<nexists>s. s * s = ?x;\n   nat (root_nat_floor 3 ?x) = nat (root_nat_floor 3 ?x);\n   m = factor_sq * factor_sq * (factor_pr * i) * ?x;\n   prime_product_factor_main factor_sq (factor_pr * i)\n    (nat (root_nat_floor 3 ?x)) ?x (Suc i) =\n   (sq, p);\n   2 \\<le> Suc i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> \\<not> j dvd ?x;\n   \\<And>j.\n      \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) = 0;\n   0 < factor_pr * i\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n  \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; \\<not> i dvd n;\n   \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n   m = factor_sq * factor_sq * factor_pr * n;\n   prime_product_factor_main factor_sq factor_pr limit n (Suc i) = (sq, p);\n   2 \\<le> Suc i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> \\<not> j dvd n;\n   \\<And>j.\n      \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr = 0;\n   0 < factor_pr\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n\ngoal (1 subgoal):\n 1. \\<And>factor_sq factor_pr limit n i.\n       \\<lbrakk>\\<And>x xa.\n                   \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n;\n                    x = n div i; i dvd x; xa = x div i;\n                    \\<nexists>s. s * s = xa;\n                    nat (root_nat_floor 3 xa) = nat (root_nat_floor 3 xa);\n                    m = factor_sq * i * (factor_sq * i) * factor_pr * xa;\n                    prime_product_factor_main (factor_sq * i) factor_pr\n                     (nat (root_nat_floor 3 xa)) xa i =\n                    (sq, p);\n                    2 \\<le> i;\n                    \\<And>j.\n                       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n                       \\<Longrightarrow> \\<not> j dvd xa;\n                    \\<And>j.\n                       \\<lbrakk>prime j; j < i\\<rbrakk>\n                       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n                    \\<And>j.\n                       \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n                       \\<Longrightarrow> multiplicity j factor_pr = 0;\n                    0 < factor_pr\\<rbrakk>\n                   \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<And>x.\n           \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n; x = n div i;\n            \\<not> i dvd x; sqrt_nat x = []; \\<nexists>s. s * s = x;\n            nat (root_nat_floor 3 x) = nat (root_nat_floor 3 x);\n            m = factor_sq * factor_sq * (factor_pr * i) * x;\n            prime_product_factor_main factor_sq (factor_pr * i)\n             (nat (root_nat_floor 3 x)) x (Suc i) =\n            (sq, p);\n            2 \\<le> Suc i;\n            \\<And>j.\n               \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n               \\<Longrightarrow> \\<not> j dvd x;\n            \\<And>j.\n               \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n               \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1;\n            \\<And>j.\n               \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n               \\<Longrightarrow> multiplicity j (factor_pr * i) = 0;\n            0 < factor_pr * i\\<rbrakk>\n           \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; \\<not> i dvd n;\n         \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n         m = factor_sq * factor_sq * factor_pr * n;\n         prime_product_factor_main factor_sq factor_pr limit n (Suc i) =\n         (sq, p);\n         2 \\<le> Suc i;\n         \\<And>j.\n            \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n            \\<Longrightarrow> \\<not> j dvd n;\n         \\<And>j.\n            \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n            \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n         \\<And>j.\n            \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n            \\<Longrightarrow> multiplicity j factor_pr = 0;\n         0 < factor_pr\\<rbrakk>\n        \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n        m = factor_sq * factor_sq * factor_pr * n;\n        prime_product_factor_main factor_sq factor_pr limit n i = (sq, p);\n        2 \\<le> i;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>prime j; j < i\\<rbrakk>\n           \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n        \\<And>j.\n           \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n           \\<Longrightarrow> multiplicity j factor_pr = 0;\n        0 < factor_pr\\<rbrakk>\n       \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "note prems = 1(4-)"], ["proof (state)\nthis:\n  \\<nexists>s. s * s = n\n  limit = nat (root_nat_floor 3 n)\n  m = factor_sq * factor_sq * factor_pr * n\n  prime_product_factor_main factor_sq factor_pr limit n i = (sq, p)\n  2 \\<le> i\n  \\<lbrakk>2 \\<le> ?j; ?j < i\\<rbrakk> \\<Longrightarrow> \\<not> ?j dvd n\n  \\<lbrakk>prime ?j; ?j < i\\<rbrakk>\n  \\<Longrightarrow> multiplicity ?j factor_pr \\<le> 1\n  \\<lbrakk>prime ?j; i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> multiplicity ?j factor_pr = 0\n  0 < factor_pr\n\ngoal (1 subgoal):\n 1. \\<And>factor_sq factor_pr limit n i.\n       \\<lbrakk>\\<And>x xa.\n                   \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n;\n                    x = n div i; i dvd x; xa = x div i;\n                    \\<nexists>s. s * s = xa;\n                    nat (root_nat_floor 3 xa) = nat (root_nat_floor 3 xa);\n                    m = factor_sq * i * (factor_sq * i) * factor_pr * xa;\n                    prime_product_factor_main (factor_sq * i) factor_pr\n                     (nat (root_nat_floor 3 xa)) xa i =\n                    (sq, p);\n                    2 \\<le> i;\n                    \\<And>j.\n                       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n                       \\<Longrightarrow> \\<not> j dvd xa;\n                    \\<And>j.\n                       \\<lbrakk>prime j; j < i\\<rbrakk>\n                       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n                    \\<And>j.\n                       \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n                       \\<Longrightarrow> multiplicity j factor_pr = 0;\n                    0 < factor_pr\\<rbrakk>\n                   \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<And>x.\n           \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n; x = n div i;\n            \\<not> i dvd x; sqrt_nat x = []; \\<nexists>s. s * s = x;\n            nat (root_nat_floor 3 x) = nat (root_nat_floor 3 x);\n            m = factor_sq * factor_sq * (factor_pr * i) * x;\n            prime_product_factor_main factor_sq (factor_pr * i)\n             (nat (root_nat_floor 3 x)) x (Suc i) =\n            (sq, p);\n            2 \\<le> Suc i;\n            \\<And>j.\n               \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n               \\<Longrightarrow> \\<not> j dvd x;\n            \\<And>j.\n               \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n               \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1;\n            \\<And>j.\n               \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n               \\<Longrightarrow> multiplicity j (factor_pr * i) = 0;\n            0 < factor_pr * i\\<rbrakk>\n           \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; \\<not> i dvd n;\n         \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n         m = factor_sq * factor_sq * factor_pr * n;\n         prime_product_factor_main factor_sq factor_pr limit n (Suc i) =\n         (sq, p);\n         2 \\<le> Suc i;\n         \\<And>j.\n            \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n            \\<Longrightarrow> \\<not> j dvd n;\n         \\<And>j.\n            \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n            \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n         \\<And>j.\n            \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n            \\<Longrightarrow> multiplicity j factor_pr = 0;\n         0 < factor_pr\\<rbrakk>\n        \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n        m = factor_sq * factor_sq * factor_pr * n;\n        prime_product_factor_main factor_sq factor_pr limit n i = (sq, p);\n        2 \\<le> i;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>prime j; j < i\\<rbrakk>\n           \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n        \\<And>j.\n           \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n           \\<Longrightarrow> multiplicity j factor_pr = 0;\n        0 < factor_pr\\<rbrakk>\n       \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "note simp = prems(4)[unfolded prime_product_factor_main.simps[of factor_sq factor_pr limit n i]]"], ["proof (state)\nthis:\n  (if i \\<le> limit \\<and> 2 \\<le> i\n   then if i dvd n\n        then let n' = n div i\n             in if i dvd n'\n                then let n'' = n' div i\n                     in prime_product_factor_main (factor_sq * i) factor_pr\n                         (nat (root_nat_floor 3 n'')) n'' i\n                else case sqrt_nat n' of\n                     [] \\<Rightarrow>\n                       prime_product_factor_main factor_sq (factor_pr * i)\n                        (nat (root_nat_floor 3 n')) n' (Suc i)\n                     | sn # x \\<Rightarrow> (factor_sq * sn, factor_pr * i)\n        else prime_product_factor_main factor_sq factor_pr limit n (Suc i)\n   else (factor_sq, factor_pr * n)) =\n  (sq, p)\n\ngoal (1 subgoal):\n 1. \\<And>factor_sq factor_pr limit n i.\n       \\<lbrakk>\\<And>x xa.\n                   \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n;\n                    x = n div i; i dvd x; xa = x div i;\n                    \\<nexists>s. s * s = xa;\n                    nat (root_nat_floor 3 xa) = nat (root_nat_floor 3 xa);\n                    m = factor_sq * i * (factor_sq * i) * factor_pr * xa;\n                    prime_product_factor_main (factor_sq * i) factor_pr\n                     (nat (root_nat_floor 3 xa)) xa i =\n                    (sq, p);\n                    2 \\<le> i;\n                    \\<And>j.\n                       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n                       \\<Longrightarrow> \\<not> j dvd xa;\n                    \\<And>j.\n                       \\<lbrakk>prime j; j < i\\<rbrakk>\n                       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n                    \\<And>j.\n                       \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n                       \\<Longrightarrow> multiplicity j factor_pr = 0;\n                    0 < factor_pr\\<rbrakk>\n                   \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<And>x.\n           \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; i dvd n; x = n div i;\n            \\<not> i dvd x; sqrt_nat x = []; \\<nexists>s. s * s = x;\n            nat (root_nat_floor 3 x) = nat (root_nat_floor 3 x);\n            m = factor_sq * factor_sq * (factor_pr * i) * x;\n            prime_product_factor_main factor_sq (factor_pr * i)\n             (nat (root_nat_floor 3 x)) x (Suc i) =\n            (sq, p);\n            2 \\<le> Suc i;\n            \\<And>j.\n               \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n               \\<Longrightarrow> \\<not> j dvd x;\n            \\<And>j.\n               \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n               \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1;\n            \\<And>j.\n               \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n               \\<Longrightarrow> multiplicity j (factor_pr * i) = 0;\n            0 < factor_pr * i\\<rbrakk>\n           \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<lbrakk>i \\<le> limit \\<and> 2 \\<le> i; \\<not> i dvd n;\n         \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n         m = factor_sq * factor_sq * factor_pr * n;\n         prime_product_factor_main factor_sq factor_pr limit n (Suc i) =\n         (sq, p);\n         2 \\<le> Suc i;\n         \\<And>j.\n            \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n            \\<Longrightarrow> \\<not> j dvd n;\n         \\<And>j.\n            \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n            \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n         \\<And>j.\n            \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n            \\<Longrightarrow> multiplicity j factor_pr = 0;\n         0 < factor_pr\\<rbrakk>\n        \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p;\n        \\<nexists>s. s * s = n; limit = nat (root_nat_floor 3 n);\n        m = factor_sq * factor_sq * factor_pr * n;\n        prime_product_factor_main factor_sq factor_pr limit n i = (sq, p);\n        2 \\<le> i;\n        \\<And>j.\n           \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n           \\<Longrightarrow> \\<not> j dvd n;\n        \\<And>j.\n           \\<lbrakk>prime j; j < i\\<rbrakk>\n           \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n        \\<And>j.\n           \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n           \\<Longrightarrow> multiplicity j factor_pr = 0;\n        0 < factor_pr\\<rbrakk>\n       \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = sq * sq * p \\<and> prime_product p", "proof (cases \"i \\<le> limit\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<le> limit \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "case True"], ["proof (state)\nthis:\n  i \\<le> limit\n\ngoal (2 subgoals):\n 1. i \\<le> limit \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "note i = this"], ["proof (state)\nthis:\n  i \\<le> limit\n\ngoal (2 subgoals):\n 1. i \\<le> limit \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "with prems(5)"], ["proof (chain)\npicking this:\n  2 \\<le> i\n  i \\<le> limit", "have cond: \"i \\<le> limit \\<and> i \\<ge> 2\" and *: \"(i \\<le> limit \\<and> i \\<ge> 2) = True\""], ["proof (prove)\nusing this:\n  2 \\<le> i\n  i \\<le> limit\n\ngoal (1 subgoal):\n 1. i \\<le> limit \\<and> 2 \\<le> i &&&\n    (i \\<le> limit \\<and> 2 \\<le> i) = True", "by blast+"], ["proof (state)\nthis:\n  i \\<le> limit \\<and> 2 \\<le> i\n  (i \\<le> limit \\<and> 2 \\<le> i) = True\n\ngoal (2 subgoals):\n 1. i \\<le> limit \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "note IH = IH[OF cond]"], ["proof (state)\nthis:\n  \\<lbrakk>i dvd n; ?x = n div i; i dvd ?x; ?xa = ?x div i;\n   \\<nexists>s. s * s = ?xa;\n   nat (root_nat_floor 3 ?xa) = nat (root_nat_floor 3 ?xa);\n   m = factor_sq * i * (factor_sq * i) * factor_pr * ?xa;\n   prime_product_factor_main (factor_sq * i) factor_pr\n    (nat (root_nat_floor 3 ?xa)) ?xa i =\n   (sq, p);\n   2 \\<le> i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < i\\<rbrakk> \\<Longrightarrow> \\<not> j dvd ?xa;\n   \\<And>j.\n      \\<lbrakk>prime j; j < i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr = 0;\n   0 < factor_pr\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n  \\<lbrakk>i dvd n; ?x = n div i; \\<not> i dvd ?x; sqrt_nat ?x = [];\n   \\<nexists>s. s * s = ?x;\n   nat (root_nat_floor 3 ?x) = nat (root_nat_floor 3 ?x);\n   m = factor_sq * factor_sq * (factor_pr * i) * ?x;\n   prime_product_factor_main factor_sq (factor_pr * i)\n    (nat (root_nat_floor 3 ?x)) ?x (Suc i) =\n   (sq, p);\n   2 \\<le> Suc i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> \\<not> j dvd ?x;\n   \\<And>j.\n      \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) = 0;\n   0 < factor_pr * i\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n  \\<lbrakk>\\<not> i dvd n; \\<nexists>s. s * s = n;\n   limit = nat (root_nat_floor 3 n);\n   m = factor_sq * factor_sq * factor_pr * n;\n   prime_product_factor_main factor_sq factor_pr limit n (Suc i) = (sq, p);\n   2 \\<le> Suc i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> \\<not> j dvd n;\n   \\<And>j.\n      \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr = 0;\n   0 < factor_pr\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n\ngoal (2 subgoals):\n 1. i \\<le> limit \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "note simp = simp[unfolded * if_True]"], ["proof (state)\nthis:\n  (if i dvd n\n   then let n' = n div i\n        in if i dvd n'\n           then let n'' = n' div i\n                in prime_product_factor_main (factor_sq * i) factor_pr\n                    (nat (root_nat_floor 3 n'')) n'' i\n           else case sqrt_nat n' of\n                [] \\<Rightarrow>\n                  prime_product_factor_main factor_sq (factor_pr * i)\n                   (nat (root_nat_floor 3 n')) n' (Suc i)\n                | sn # x \\<Rightarrow> (factor_sq * sn, factor_pr * i)\n   else prime_product_factor_main factor_sq factor_pr limit n (Suc i)) =\n  (sq, p)\n\ngoal (2 subgoals):\n 1. i \\<le> limit \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = sq * sq * p \\<and> prime_product p", "proof (cases \"i dvd n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "case False"], ["proof (state)\nthis:\n  \\<not> i dvd n\n\ngoal (2 subgoals):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "hence *: \"(i dvd n) = False\""], ["proof (prove)\nusing this:\n  \\<not> i dvd n\n\ngoal (1 subgoal):\n 1. (i dvd n) = False", "by simp"], ["proof (state)\nthis:\n  (i dvd n) = False\n\ngoal (2 subgoals):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "note simp = simp[unfolded * if_False]"], ["proof (state)\nthis:\n  prime_product_factor_main factor_sq factor_pr limit n (Suc i) = (sq, p)\n\ngoal (2 subgoals):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "note IH = IH(3)[OF False prems(1-3) simp]"], ["proof (state)\nthis:\n  \\<lbrakk>2 \\<le> Suc i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> \\<not> j dvd n;\n   \\<And>j.\n      \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr = 0;\n   0 < factor_pr\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n\ngoal (2 subgoals):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = sq * sq * p \\<and> prime_product p", "proof (rule IH)"], ["proof (state)\ngoal (5 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n\n 3. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1\n 4. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr = 0\n 5. 0 < factor_pr", "fix j"], ["proof (state)\ngoal (5 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n\n 3. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1\n 4. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr = 0\n 5. 0 < factor_pr", "assume 2: \"2 \\<le> j\" and j: \"j < Suc i\""], ["proof (state)\nthis:\n  2 \\<le> j\n  j < Suc i\n\ngoal (5 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n\n 3. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1\n 4. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr = 0\n 5. 0 < factor_pr", "from prems(6)[OF 2] j False"], ["proof (chain)\npicking this:\n  j < i \\<Longrightarrow> \\<not> j dvd n\n  j < Suc i\n  \\<not> i dvd n", "show \"\\<not> j dvd n\""], ["proof (prove)\nusing this:\n  j < i \\<Longrightarrow> \\<not> j dvd n\n  j < Suc i\n  \\<not> i dvd n\n\ngoal (1 subgoal):\n 1. \\<not> j dvd n", "by (cases \"j = i\", auto)"], ["proof (state)\nthis:\n  \\<not> j dvd n\n\ngoal (4 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1\n 3. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr = 0\n 4. 0 < factor_pr", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1\n 3. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr = 0\n 4. 0 < factor_pr", "fix j :: nat"], ["proof (state)\ngoal (4 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1\n 3. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr = 0\n 4. 0 < factor_pr", "assume j: \"j < Suc i\" \"prime j\""], ["proof (state)\nthis:\n  j < Suc i\n  prime j\n\ngoal (4 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr \\<le> 1\n 3. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr = 0\n 4. 0 < factor_pr", "with prems(7-8)[of j]"], ["proof (chain)\npicking this:\n  \\<lbrakk>prime j; j < i\\<rbrakk>\n  \\<Longrightarrow> multiplicity j factor_pr \\<le> 1\n  \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n  \\<Longrightarrow> multiplicity j factor_pr = 0\n  j < Suc i\n  prime j", "show \"multiplicity j factor_pr \\<le> 1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>prime j; j < i\\<rbrakk>\n  \\<Longrightarrow> multiplicity j factor_pr \\<le> 1\n  \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n  \\<Longrightarrow> multiplicity j factor_pr = 0\n  j < Suc i\n  prime j\n\ngoal (1 subgoal):\n 1. multiplicity j factor_pr \\<le> 1", "by (cases \"j = i\", auto)"], ["proof (state)\nthis:\n  multiplicity j factor_pr \\<le> 1\n\ngoal (3 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j factor_pr = 0\n 3. 0 < factor_pr", "qed (insert prems(8-9) cond, auto)"], ["proof (state)\nthis:\n  m = sq * sq * p \\<and> prime_product p\n\ngoal (1 subgoal):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "case True"], ["proof (state)\nthis:\n  i dvd n\n\ngoal (1 subgoal):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "note mod = this"], ["proof (state)\nthis:\n  i dvd n\n\ngoal (1 subgoal):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "hence \"(i dvd n) = True\""], ["proof (prove)\nusing this:\n  i dvd n\n\ngoal (1 subgoal):\n 1. (i dvd n) = True", "by simp"], ["proof (state)\nthis:\n  (i dvd n) = True\n\ngoal (1 subgoal):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "note simp = simp[unfolded this if_True Let_def]"], ["proof (state)\nthis:\n  (if i dvd n div i\n   then prime_product_factor_main (factor_sq * i) factor_pr\n         (nat (root_nat_floor 3 (n div i div i))) (n div i div i) i\n   else case sqrt_nat (n div i) of\n        [] \\<Rightarrow>\n          prime_product_factor_main factor_sq (factor_pr * i)\n           (nat (root_nat_floor 3 (n div i))) (n div i) (Suc i)\n        | sn # x \\<Rightarrow> (factor_sq * sn, factor_pr * i)) =\n  (sq, p)\n\ngoal (1 subgoal):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "note IH = IH(1,2)[OF True refl]"], ["proof (state)\nthis:\n  \\<lbrakk>i dvd n div i; ?xa = n div i div i; \\<nexists>s. s * s = ?xa;\n   nat (root_nat_floor 3 ?xa) = nat (root_nat_floor 3 ?xa);\n   m = factor_sq * i * (factor_sq * i) * factor_pr * ?xa;\n   prime_product_factor_main (factor_sq * i) factor_pr\n    (nat (root_nat_floor 3 ?xa)) ?xa i =\n   (sq, p);\n   2 \\<le> i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < i\\<rbrakk> \\<Longrightarrow> \\<not> j dvd ?xa;\n   \\<And>j.\n      \\<lbrakk>prime j; j < i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j factor_pr = 0;\n   0 < factor_pr\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n  \\<lbrakk>\\<not> i dvd n div i; sqrt_nat (n div i) = [];\n   \\<nexists>s. s * s = n div i;\n   nat (root_nat_floor 3 (n div i)) = nat (root_nat_floor 3 (n div i));\n   m = factor_sq * factor_sq * (factor_pr * i) * (n div i);\n   prime_product_factor_main factor_sq (factor_pr * i)\n    (nat (root_nat_floor 3 (n div i))) (n div i) (Suc i) =\n   (sq, p);\n   2 \\<le> Suc i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> \\<not> j dvd n div i;\n   \\<And>j.\n      \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) = 0;\n   0 < factor_pr * i\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n\ngoal (1 subgoal):\n 1. i dvd n \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = sq * sq * p \\<and> prime_product p", "proof (cases \"i dvd n div i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i dvd n div i \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "case True"], ["proof (state)\nthis:\n  i dvd n div i\n\ngoal (2 subgoals):\n 1. i dvd n div i \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "hence *: \"(i dvd n div i) = True\""], ["proof (prove)\nusing this:\n  i dvd n div i\n\ngoal (1 subgoal):\n 1. (i dvd n div i) = True", "by auto"], ["proof (state)\nthis:\n  (i dvd n div i) = True\n\ngoal (2 subgoals):\n 1. i dvd n div i \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "define n' where \"n' = n div i div i\""], ["proof (state)\nthis:\n  n' = n div i div i\n\ngoal (2 subgoals):\n 1. i dvd n div i \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "from mod True"], ["proof (chain)\npicking this:\n  i dvd n\n  i dvd n div i", "have n: \"n = n' * i * i\""], ["proof (prove)\nusing this:\n  i dvd n\n  i dvd n div i\n\ngoal (1 subgoal):\n 1. n = n' * i * i", "by (auto simp: n'_def dvd_eq_mod_eq_0)"], ["proof (state)\nthis:\n  n = n' * i * i\n\ngoal (2 subgoals):\n 1. i dvd n div i \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "note simp = simp[unfolded * if_True split]"], ["proof (state)\nthis:\n  prime_product_factor_main (factor_sq * i) factor_pr\n   (nat (root_nat_floor 3 (n div i div i))) (n div i div i) i =\n  (sq, p)\n\ngoal (2 subgoals):\n 1. i dvd n div i \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "note IH = IH(1)[OF True refl _ refl _ simp prems(5) _ prems(7-9)]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<nexists>s. s * s = n div i div i;\n   m = factor_sq * i * (factor_sq * i) * factor_pr * (n div i div i);\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n      \\<Longrightarrow> \\<not> j dvd n div i div i;\n   \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> prime j;\n   \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> j < i;\n   \\<And>j. \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> prime j;\n   \\<And>j.\n      \\<lbrakk>prime j; i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> i \\<le> j\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n\ngoal (2 subgoals):\n 1. i dvd n div i \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n 2. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = sq * sq * p \\<and> prime_product p", "proof (rule IH)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<nexists>s. s * s = n div i div i\n 2. m = factor_sq * i * (factor_sq * i) * factor_pr * (n div i div i)\n 3. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n div i div i\n 4. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> prime j\n 5. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> j < i\n 6. \\<And>j. \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> prime j\n 7. \\<And>j.\n       \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> i \\<le> j", "show \"m = factor_sq * i * (factor_sq * i) * factor_pr * (n div i div i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = factor_sq * i * (factor_sq * i) * factor_pr * (n div i div i)", "unfolding prems(3) n'_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. factor_sq * factor_sq * factor_pr * n =\n    factor_sq * i * (factor_sq * i) * factor_pr * n'", "unfolding n"], ["proof (prove)\ngoal (1 subgoal):\n 1. factor_sq * factor_sq * factor_pr * (n' * i * i) =\n    factor_sq * i * (factor_sq * i) * factor_pr * n'", "by (auto simp: field_simps)"], ["proof (state)\nthis:\n  m = factor_sq * i * (factor_sq * i) * factor_pr * (n div i div i)\n\ngoal (6 subgoals):\n 1. \\<nexists>s. s * s = n div i div i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n div i div i\n 3. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> prime j\n 4. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> j < i\n 5. \\<And>j. \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> prime j\n 6. \\<And>j.\n       \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> i \\<le> j", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<nexists>s. s * s = n div i div i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n div i div i\n 3. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> prime j\n 4. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> j < i\n 5. \\<And>j. \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> prime j\n 6. \\<And>j.\n       \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> i \\<le> j", "fix j"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<nexists>s. s * s = n div i div i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n div i div i\n 3. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> prime j\n 4. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> j < i\n 5. \\<And>j. \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> prime j\n 6. \\<And>j.\n       \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> i \\<le> j", "assume \"2 \\<le> j\" \"j < i\""], ["proof (state)\nthis:\n  2 \\<le> j\n  j < i\n\ngoal (6 subgoals):\n 1. \\<nexists>s. s * s = n div i div i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n div i div i\n 3. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> prime j\n 4. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> j < i\n 5. \\<And>j. \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> prime j\n 6. \\<And>j.\n       \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> i \\<le> j", "from prems(6)[OF this]"], ["proof (chain)\npicking this:\n  \\<not> j dvd n", "have \"\\<not> j dvd n\""], ["proof (prove)\nusing this:\n  \\<not> j dvd n\n\ngoal (1 subgoal):\n 1. \\<not> j dvd n", "by auto"], ["proof (state)\nthis:\n  \\<not> j dvd n\n\ngoal (6 subgoals):\n 1. \\<nexists>s. s * s = n div i div i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n div i div i\n 3. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> prime j\n 4. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> j < i\n 5. \\<And>j. \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> prime j\n 6. \\<And>j.\n       \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> i \\<le> j", "thus \"\\<not> j dvd n div i div i\""], ["proof (prove)\nusing this:\n  \\<not> j dvd n\n\ngoal (1 subgoal):\n 1. \\<not> j dvd n div i div i", "by (metis dvd_mult n n'_def mult.commute)"], ["proof (state)\nthis:\n  \\<not> j dvd n div i div i\n\ngoal (5 subgoals):\n 1. \\<nexists>s. s * s = n div i div i\n 2. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> prime j\n 3. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> j < i\n 4. \\<And>j. \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> prime j\n 5. \\<And>j.\n       \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> i \\<le> j", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<nexists>s. s * s = n div i div i\n 2. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> prime j\n 3. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> j < i\n 4. \\<And>j. \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> prime j\n 5. \\<And>j.\n       \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> i \\<le> j", "show \"\\<not> (\\<exists> s. s * s = n div i div i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>s. s * s = n div i div i", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s. s * s = n div i div i \\<Longrightarrow> False", "assume \"\\<exists> s. s * s = n div i div i\""], ["proof (state)\nthis:\n  \\<exists>s. s * s = n div i div i\n\ngoal (1 subgoal):\n 1. \\<exists>s. s * s = n div i div i \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>s. s * s = n div i div i", "obtain s where \"s * s = n div i div i\""], ["proof (prove)\nusing this:\n  \\<exists>s. s * s = n div i div i\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        s * s = n div i div i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s * s = n div i div i\n\ngoal (1 subgoal):\n 1. \\<exists>s. s * s = n div i div i \\<Longrightarrow> False", "hence \"(s * i) * (s * i) = n\""], ["proof (prove)\nusing this:\n  s * s = n div i div i\n\ngoal (1 subgoal):\n 1. s * i * (s * i) = n", "unfolding n"], ["proof (prove)\nusing this:\n  s * s = n' * i * i div i div i\n\ngoal (1 subgoal):\n 1. s * i * (s * i) = n' * i * i", "by auto"], ["proof (state)\nthis:\n  s * i * (s * i) = n\n\ngoal (1 subgoal):\n 1. \\<exists>s. s * s = n div i div i \\<Longrightarrow> False", "with prems(1)"], ["proof (chain)\npicking this:\n  \\<nexists>s. s * s = n\n  s * i * (s * i) = n", "show False"], ["proof (prove)\nusing this:\n  \\<nexists>s. s * s = n\n  s * i * (s * i) = n\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<nexists>s. s * s = n div i div i\n\ngoal (4 subgoals):\n 1. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> prime j\n 2. \\<And>j. \\<lbrakk>prime j; j < i\\<rbrakk> \\<Longrightarrow> j < i\n 3. \\<And>j. \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> prime j\n 4. \\<And>j.\n       \\<lbrakk>prime j; i \\<le> j\\<rbrakk> \\<Longrightarrow> i \\<le> j", "qed"], ["proof (state)\nthis:\n  m = sq * sq * p \\<and> prime_product p\n\ngoal (1 subgoal):\n 1. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "case False"], ["proof (state)\nthis:\n  \\<not> i dvd n div i\n\ngoal (1 subgoal):\n 1. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "define n' where \"n' = n div i\""], ["proof (state)\nthis:\n  n' = n div i\n\ngoal (1 subgoal):\n 1. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "from mod True"], ["proof (chain)\npicking this:\n  i dvd n\n  i dvd n", "have n: \"n = n' * i\""], ["proof (prove)\nusing this:\n  i dvd n\n  i dvd n\n\ngoal (1 subgoal):\n 1. n = n' * i", "by (auto simp: n'_def dvd_eq_mod_eq_0)"], ["proof (state)\nthis:\n  n = n' * i\n\ngoal (1 subgoal):\n 1. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "have prime: \"prime i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime i", "unfolding prime_nat_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < i \\<and> (\\<forall>m. m dvd i \\<longrightarrow> m = 1 \\<or> m = i)", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < i\n 2. \\<And>m. m dvd i \\<Longrightarrow> m = 1 \\<or> m = i", "fix m"], ["proof (state)\ngoal (2 subgoals):\n 1. 1 < i\n 2. \\<And>m. m dvd i \\<Longrightarrow> m = 1 \\<or> m = i", "assume m: \"m dvd i\""], ["proof (state)\nthis:\n  m dvd i\n\ngoal (2 subgoals):\n 1. 1 < i\n 2. \\<And>m. m dvd i \\<Longrightarrow> m = 1 \\<or> m = i", "hence \"m dvd n\""], ["proof (prove)\nusing this:\n  m dvd i\n\ngoal (1 subgoal):\n 1. m dvd n", "unfolding n"], ["proof (prove)\nusing this:\n  m dvd i\n\ngoal (1 subgoal):\n 1. m dvd n' * i", "by auto"], ["proof (state)\nthis:\n  m dvd n\n\ngoal (2 subgoals):\n 1. 1 < i\n 2. \\<And>m. m dvd i \\<Longrightarrow> m = 1 \\<or> m = i", "with prems(6)[of m]"], ["proof (chain)\npicking this:\n  \\<lbrakk>2 \\<le> m; m < i\\<rbrakk> \\<Longrightarrow> \\<not> m dvd n\n  m dvd n", "have choice: \"m \\<le> 1 \\<or> m \\<ge> i\""], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> m; m < i\\<rbrakk> \\<Longrightarrow> \\<not> m dvd n\n  m dvd n\n\ngoal (1 subgoal):\n 1. m \\<le> 1 \\<or> i \\<le> m", "by arith"], ["proof (state)\nthis:\n  m \\<le> 1 \\<or> i \\<le> m\n\ngoal (2 subgoals):\n 1. 1 < i\n 2. \\<And>m. m dvd i \\<Longrightarrow> m = 1 \\<or> m = i", "from m prems(5)"], ["proof (chain)\npicking this:\n  m dvd i\n  2 \\<le> i", "have \"m > 0\""], ["proof (prove)\nusing this:\n  m dvd i\n  2 \\<le> i\n\ngoal (1 subgoal):\n 1. 0 < m", "by (metis dvd_0_left_iff le0 le_antisym neq0_conv zero_neq_numeral)"], ["proof (state)\nthis:\n  0 < m\n\ngoal (2 subgoals):\n 1. 1 < i\n 2. \\<And>m. m dvd i \\<Longrightarrow> m = 1 \\<or> m = i", "with choice"], ["proof (chain)\npicking this:\n  m \\<le> 1 \\<or> i \\<le> m\n  0 < m", "have choice: \"m = 1 \\<or> m \\<ge> i\""], ["proof (prove)\nusing this:\n  m \\<le> 1 \\<or> i \\<le> m\n  0 < m\n\ngoal (1 subgoal):\n 1. m = 1 \\<or> i \\<le> m", "by arith"], ["proof (state)\nthis:\n  m = 1 \\<or> i \\<le> m\n\ngoal (2 subgoals):\n 1. 1 < i\n 2. \\<And>m. m dvd i \\<Longrightarrow> m = 1 \\<or> m = i", "from m prems(5)"], ["proof (chain)\npicking this:\n  m dvd i\n  2 \\<le> i", "have \"m \\<le> i\""], ["proof (prove)\nusing this:\n  m dvd i\n  2 \\<le> i\n\ngoal (1 subgoal):\n 1. m \\<le> i", "by (metis False div_by_0 dvd_refl dvd_imp_le gr0I)"], ["proof (state)\nthis:\n  m \\<le> i\n\ngoal (2 subgoals):\n 1. 1 < i\n 2. \\<And>m. m dvd i \\<Longrightarrow> m = 1 \\<or> m = i", "with choice"], ["proof (chain)\npicking this:\n  m = 1 \\<or> i \\<le> m\n  m \\<le> i", "show \"m = 1 \\<or> m = i\""], ["proof (prove)\nusing this:\n  m = 1 \\<or> i \\<le> m\n  m \\<le> i\n\ngoal (1 subgoal):\n 1. m = 1 \\<or> m = i", "by auto"], ["proof (state)\nthis:\n  m = 1 \\<or> m = i\n\ngoal (1 subgoal):\n 1. 1 < i", "qed (insert prems(5), auto)"], ["proof (state)\nthis:\n  prime i\n\ngoal (1 subgoal):\n 1. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "from False"], ["proof (chain)\npicking this:\n  \\<not> i dvd n div i", "have \"(i dvd n div i) = False\""], ["proof (prove)\nusing this:\n  \\<not> i dvd n div i\n\ngoal (1 subgoal):\n 1. (i dvd n div i) = False", "by auto"], ["proof (state)\nthis:\n  (i dvd n div i) = False\n\ngoal (1 subgoal):\n 1. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "note simp = simp[unfolded this if_False]"], ["proof (state)\nthis:\n  (case sqrt_nat (n div i) of\n   [] \\<Rightarrow>\n     prime_product_factor_main factor_sq (factor_pr * i)\n      (nat (root_nat_floor 3 (n div i))) (n div i) (Suc i)\n   | sn # x \\<Rightarrow> (factor_sq * sn, factor_pr * i)) =\n  (sq, p)\n\ngoal (1 subgoal):\n 1. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "note IH = IH(2)[OF False _ _ refl]"], ["proof (state)\nthis:\n  \\<lbrakk>sqrt_nat (n div i) = []; \\<nexists>s. s * s = n div i;\n   m = factor_sq * factor_sq * (factor_pr * i) * (n div i);\n   prime_product_factor_main factor_sq (factor_pr * i)\n    (nat (root_nat_floor 3 (n div i))) (n div i) (Suc i) =\n   (sq, p);\n   2 \\<le> Suc i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> \\<not> j dvd n div i;\n   \\<And>j.\n      \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) = 0;\n   0 < factor_pr * i\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n\ngoal (1 subgoal):\n 1. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "from prime"], ["proof (chain)\npicking this:\n  prime i", "have \"i > 0\""], ["proof (prove)\nusing this:\n  prime i\n\ngoal (1 subgoal):\n 1. 0 < i", "by (simp add: prime_gt_0_nat)"], ["proof (state)\nthis:\n  0 < i\n\ngoal (1 subgoal):\n 1. \\<not> i dvd n div i \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = sq * sq * p \\<and> prime_product p", "proof (cases \"sqrt_nat (n div i)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p\n 2. \\<And>a list.\n       sqrt_nat (n div i) = a # list \\<Longrightarrow>\n       m = sq * sq * p \\<and> prime_product p", "case (Cons s)"], ["proof (state)\nthis:\n  sqrt_nat (n div i) = s # list_\n\ngoal (2 subgoals):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p\n 2. \\<And>a list.\n       sqrt_nat (n div i) = a # list \\<Longrightarrow>\n       m = sq * sq * p \\<and> prime_product p", "note simp = simp[unfolded Cons list.simps]"], ["proof (state)\nthis:\n  (factor_sq * s, factor_pr * i) = (sq, p)\n\ngoal (2 subgoals):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p\n 2. \\<And>a list.\n       sqrt_nat (n div i) = a # list \\<Longrightarrow>\n       m = sq * sq * p \\<and> prime_product p", "hence sq: \"sq = factor_sq * s\" and p: \"p = factor_pr * i\""], ["proof (prove)\nusing this:\n  (factor_sq * s, factor_pr * i) = (sq, p)\n\ngoal (1 subgoal):\n 1. sq = factor_sq * s &&& p = factor_pr * i", "by auto"], ["proof (state)\nthis:\n  sq = factor_sq * s\n  p = factor_pr * i\n\ngoal (2 subgoals):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p\n 2. \\<And>a list.\n       sqrt_nat (n div i) = a # list \\<Longrightarrow>\n       m = sq * sq * p \\<and> prime_product p", "from arg_cong[OF Cons, of set]"], ["proof (chain)\npicking this:\n  set (sqrt_nat (n div i)) = set (s # list_)", "have s: \"s * s = n div i\""], ["proof (prove)\nusing this:\n  set (sqrt_nat (n div i)) = set (s # list_)\n\ngoal (1 subgoal):\n 1. s * s = n div i", "by auto"], ["proof (state)\nthis:\n  s * s = n div i\n\ngoal (2 subgoals):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p\n 2. \\<And>a list.\n       sqrt_nat (n div i) = a # list \\<Longrightarrow>\n       m = sq * sq * p \\<and> prime_product p", "have pp: \"prime_product (factor_pr * i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_product (factor_pr * i)", "unfolding prime_product_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       prime p \\<longrightarrow> multiplicity p (factor_pr * i) \\<le> 1", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       prime p \\<Longrightarrow> multiplicity p (factor_pr * i) \\<le> 1", "fix m :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       prime p \\<Longrightarrow> multiplicity p (factor_pr * i) \\<le> 1", "assume m: \"prime m\""], ["proof (state)\nthis:\n  prime m\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       prime p \\<Longrightarrow> multiplicity p (factor_pr * i) \\<le> 1", "consider \"i < m\" | \"i > m\" | \"i = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < m \\<Longrightarrow> thesis; m < i \\<Longrightarrow> thesis;\n     i = m \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>i < m \\<Longrightarrow> ?thesis; m < i \\<Longrightarrow> ?thesis;\n   i = m \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       prime p \\<Longrightarrow> multiplicity p (factor_pr * i) \\<le> 1", "thus \"multiplicity m (factor_pr * i) \\<le> 1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>i < m \\<Longrightarrow> ?thesis; m < i \\<Longrightarrow> ?thesis;\n   i = m \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. multiplicity m (factor_pr * i) \\<le> 1", "by cases (insert prems(7)[of m] prems(8)[of m] prems(9) \\<open>i > 0\\<close> prime m,\n                          simp_all add: multiplicity_prime prime_elem_multiplicity_mult_distrib)"], ["proof (state)\nthis:\n  multiplicity m (factor_pr * i) \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prime_product (factor_pr * i)\n\ngoal (2 subgoals):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p\n 2. \\<And>a list.\n       sqrt_nat (n div i) = a # list \\<Longrightarrow>\n       m = sq * sq * p \\<and> prime_product p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = sq * sq * p \\<and> prime_product p", "unfolding sq p prems(3) n"], ["proof (prove)\ngoal (1 subgoal):\n 1. factor_sq * factor_sq * factor_pr * (n' * i) =\n    factor_sq * s * (factor_sq * s) * (factor_pr * i) \\<and>\n    prime_product (factor_pr * i)", "unfolding n'_def s[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. factor_sq * factor_sq * factor_pr * (s * s * i) =\n    factor_sq * s * (factor_sq * s) * (factor_pr * i) \\<and>\n    prime_product (factor_pr * i)", "using pp"], ["proof (prove)\nusing this:\n  prime_product (factor_pr * i)\n\ngoal (1 subgoal):\n 1. factor_sq * factor_sq * factor_pr * (s * s * i) =\n    factor_sq * s * (factor_sq * s) * (factor_pr * i) \\<and>\n    prime_product (factor_pr * i)", "by auto"], ["proof (state)\nthis:\n  m = sq * sq * p \\<and> prime_product p\n\ngoal (1 subgoal):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "case Nil"], ["proof (state)\nthis:\n  sqrt_nat (n div i) = []\n\ngoal (1 subgoal):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "note simp = simp[unfolded Nil list.simps]"], ["proof (state)\nthis:\n  prime_product_factor_main factor_sq (factor_pr * i)\n   (nat (root_nat_floor 3 (n div i))) (n div i) (Suc i) =\n  (sq, p)\n\ngoal (1 subgoal):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "from arg_cong[OF Nil, of set]"], ["proof (chain)\npicking this:\n  set (sqrt_nat (n div i)) = set []", "have \"\\<not> (\\<exists> x. x * x = n div i)\""], ["proof (prove)\nusing this:\n  set (sqrt_nat (n div i)) = set []\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x * x = n div i", "by simp"], ["proof (state)\nthis:\n  \\<nexists>x. x * x = n div i\n\ngoal (1 subgoal):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "note IH = IH[OF Nil this  _ simp]"], ["proof (state)\nthis:\n  \\<lbrakk>m = factor_sq * factor_sq * (factor_pr * i) * (n div i);\n   2 \\<le> Suc i;\n   \\<And>j.\n      \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> \\<not> j dvd n div i;\n   \\<And>j.\n      \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1;\n   \\<And>j.\n      \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n      \\<Longrightarrow> multiplicity j (factor_pr * i) = 0;\n   0 < factor_pr * i\\<rbrakk>\n  \\<Longrightarrow> m = sq * sq * p \\<and> prime_product p\n\ngoal (1 subgoal):\n 1. sqrt_nat (n div i) = [] \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = sq * sq * p \\<and> prime_product p", "proof (rule IH)"], ["proof (state)\ngoal (6 subgoals):\n 1. m = factor_sq * factor_sq * (factor_pr * i) * (n div i)\n 2. 2 \\<le> Suc i\n 3. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n div i\n 4. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 5. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) = 0\n 6. 0 < factor_pr * i", "show \"m = factor_sq * factor_sq * (factor_pr * i) * (n div i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = factor_sq * factor_sq * (factor_pr * i) * (n div i)", "unfolding prems(3) n"], ["proof (prove)\ngoal (1 subgoal):\n 1. factor_sq * factor_sq * factor_pr * (n' * i) =\n    factor_sq * factor_sq * (factor_pr * i) * (n' * i div i)", "by auto"], ["proof (state)\nthis:\n  m = factor_sq * factor_sq * (factor_pr * i) * (n div i)\n\ngoal (5 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n div i\n 3. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 4. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) = 0\n 5. 0 < factor_pr * i", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n div i\n 3. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 4. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) = 0\n 5. 0 < factor_pr * i", "fix j"], ["proof (state)\ngoal (5 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n div i\n 3. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 4. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) = 0\n 5. 0 < factor_pr * i", "assume *: \"2 \\<le> j\" \"j < Suc i\""], ["proof (state)\nthis:\n  2 \\<le> j\n  j < Suc i\n\ngoal (5 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>2 \\<le> j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> \\<not> j dvd n div i\n 3. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 4. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) = 0\n 5. 0 < factor_pr * i", "show \"\\<not> j dvd n div i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> j dvd n div i", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. j dvd n div i \\<Longrightarrow> False", "assume j: \"j dvd n div i\""], ["proof (state)\nthis:\n  j dvd n div i\n\ngoal (1 subgoal):\n 1. j dvd n div i \\<Longrightarrow> False", "with False"], ["proof (chain)\npicking this:\n  \\<not> i dvd n div i\n  j dvd n div i", "have \"j \\<noteq> i\""], ["proof (prove)\nusing this:\n  \\<not> i dvd n div i\n  j dvd n div i\n\ngoal (1 subgoal):\n 1. j \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. j dvd n div i \\<Longrightarrow> False", "with *"], ["proof (chain)\npicking this:\n  2 \\<le> j\n  j < Suc i\n  j \\<noteq> i", "have \"2 \\<le> j\" \"j < i\""], ["proof (prove)\nusing this:\n  2 \\<le> j\n  j < Suc i\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. 2 \\<le> j &&& j < i", "by auto"], ["proof (state)\nthis:\n  2 \\<le> j\n  j < i\n\ngoal (1 subgoal):\n 1. j dvd n div i \\<Longrightarrow> False", "from prems(6)[OF this] j"], ["proof (chain)\npicking this:\n  \\<not> j dvd n\n  j dvd n div i", "show False"], ["proof (prove)\nusing this:\n  \\<not> j dvd n\n  j dvd n div i\n\ngoal (1 subgoal):\n 1. False", "unfolding n"], ["proof (prove)\nusing this:\n  \\<not> j dvd n' * i\n  j dvd n' * i div i\n\ngoal (1 subgoal):\n 1. False", "by (metis dvd_mult n n'_def mult.commute)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> j dvd n div i\n\ngoal (4 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 3. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) = 0\n 4. 0 < factor_pr * i", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 3. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) = 0\n 4. 0 < factor_pr * i", "fix j :: nat"], ["proof (state)\ngoal (4 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 3. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) = 0\n 4. 0 < factor_pr * i", "assume \"Suc i \\<le> j\" and j_prime: \"prime j\""], ["proof (state)\nthis:\n  Suc i \\<le> j\n  prime j\n\ngoal (4 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 3. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) = 0\n 4. 0 < factor_pr * i", "hence ij: \"i \\<le> j\" and j: \"j \\<noteq> i\""], ["proof (prove)\nusing this:\n  Suc i \\<le> j\n  prime j\n\ngoal (1 subgoal):\n 1. i \\<le> j &&& j \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  i \\<le> j\n  j \\<noteq> i\n\ngoal (4 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 3. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) = 0\n 4. 0 < factor_pr * i", "have 0: \"multiplicity j i = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity j i = 0", "using prime j"], ["proof (prove)\nusing this:\n  prime i\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. multiplicity j i = 0", "by (rule multiplicity_prime)"], ["proof (state)\nthis:\n  multiplicity j i = 0\n\ngoal (4 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 3. \\<And>j.\n       \\<lbrakk>prime j; Suc i \\<le> j\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) = 0\n 4. 0 < factor_pr * i", "show \"multiplicity j (factor_pr * i) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity j (factor_pr * i) = 0", "unfolding prems(8)[OF j_prime ij] 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity j (factor_pr * i) = 0", "using prime j_prime j \\<open> 0 < factor_pr\\<close> \\<open>multiplicity j factor_pr = 0\\<close>"], ["proof (prove)\nusing this:\n  prime i\n  prime j\n  j \\<noteq> i\n  0 < factor_pr\n  multiplicity j factor_pr = 0\n\ngoal (1 subgoal):\n 1. multiplicity j (factor_pr * i) = 0", "by (subst prime_elem_multiplicity_mult_distrib) (auto simp: multiplicity_prime)"], ["proof (state)\nthis:\n  multiplicity j (factor_pr * i) = 0\n\ngoal (3 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 3. 0 < factor_pr * i", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 3. 0 < factor_pr * i", "fix j"], ["proof (state)\ngoal (3 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 3. 0 < factor_pr * i", "assume \"j < Suc i\" and j_prime: \"prime j\""], ["proof (state)\nthis:\n  j < Suc i\n  prime j\n\ngoal (3 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 3. 0 < factor_pr * i", "hence \"j < i \\<or> j = i\""], ["proof (prove)\nusing this:\n  j < Suc i\n  prime j\n\ngoal (1 subgoal):\n 1. j < i \\<or> j = i", "by auto"], ["proof (state)\nthis:\n  j < i \\<or> j = i\n\ngoal (3 subgoals):\n 1. 2 \\<le> Suc i\n 2. \\<And>j.\n       \\<lbrakk>prime j; j < Suc i\\<rbrakk>\n       \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 3. 0 < factor_pr * i", "thus \"multiplicity j (factor_pr * i) \\<le> 1\""], ["proof (prove)\nusing this:\n  j < i \\<or> j = i\n\ngoal (1 subgoal):\n 1. multiplicity j (factor_pr * i) \\<le> 1", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. j < i \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 2. j = i \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1", "assume \"j = i\""], ["proof (state)\nthis:\n  j = i\n\ngoal (2 subgoals):\n 1. j < i \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1\n 2. j = i \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1", "with prems(8)[of i] prime j_prime \\<open>0 < factor_pr\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>prime i; i \\<le> i\\<rbrakk>\n  \\<Longrightarrow> multiplicity i factor_pr = 0\n  prime i\n  prime j\n  0 < factor_pr\n  j = i", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>prime i; i \\<le> i\\<rbrakk>\n  \\<Longrightarrow> multiplicity i factor_pr = 0\n  prime i\n  prime j\n  0 < factor_pr\n  j = i\n\ngoal (1 subgoal):\n 1. multiplicity j (factor_pr * i) \\<le> 1", "by (subst prime_elem_multiplicity_mult_distrib) auto"], ["proof (state)\nthis:\n  multiplicity j (factor_pr * i) \\<le> 1\n\ngoal (1 subgoal):\n 1. j < i \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j < i \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1", "assume ji: \"j < i\""], ["proof (state)\nthis:\n  j < i\n\ngoal (1 subgoal):\n 1. j < i \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1", "hence \"j \\<noteq> i\""], ["proof (prove)\nusing this:\n  j < i\n\ngoal (1 subgoal):\n 1. j \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. j < i \\<Longrightarrow> multiplicity j (factor_pr * i) \\<le> 1", "from prems(7)[OF j_prime ji] multiplicity_prime[OF prime this]\n                   prime j_prime \\<open>0 < factor_pr\\<close>"], ["proof (chain)\npicking this:\n  multiplicity j factor_pr \\<le> 1\n  multiplicity j i = 0\n  prime i\n  prime j\n  0 < factor_pr", "show ?thesis"], ["proof (prove)\nusing this:\n  multiplicity j factor_pr \\<le> 1\n  multiplicity j i = 0\n  prime i\n  prime j\n  0 < factor_pr\n\ngoal (1 subgoal):\n 1. multiplicity j (factor_pr * i) \\<le> 1", "by (subst prime_elem_multiplicity_mult_distrib) auto"], ["proof (state)\nthis:\n  multiplicity j (factor_pr * i) \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  multiplicity j (factor_pr * i) \\<le> 1\n\ngoal (2 subgoals):\n 1. 2 \\<le> Suc i\n 2. 0 < factor_pr * i", "qed (insert prems(5,9), auto)"], ["proof (state)\nthis:\n  m = sq * sq * p \\<and> prime_product p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m = sq * sq * p \\<and> prime_product p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m = sq * sq * p \\<and> prime_product p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m = sq * sq * p \\<and> prime_product p\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "case False"], ["proof (state)\nthis:\n  \\<not> i \\<le> limit\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "hence \"(i \\<le> limit \\<and> i \\<ge> 2) = False\""], ["proof (prove)\nusing this:\n  \\<not> i \\<le> limit\n\ngoal (1 subgoal):\n 1. (i \\<le> limit \\<and> 2 \\<le> i) = False", "by auto"], ["proof (state)\nthis:\n  (i \\<le> limit \\<and> 2 \\<le> i) = False\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "note simp = simp[unfolded this if_False]"], ["proof (state)\nthis:\n  (factor_sq, factor_pr * n) = (sq, p)\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "hence sq: \"sq = factor_sq\" and p: \"p = factor_pr * n\""], ["proof (prove)\nusing this:\n  (factor_sq, factor_pr * n) = (sq, p)\n\ngoal (1 subgoal):\n 1. sq = factor_sq &&& p = factor_pr * n", "by auto"], ["proof (state)\nthis:\n  sq = factor_sq\n  p = factor_pr * n\n\ngoal (1 subgoal):\n 1. \\<not> i \\<le> limit \\<Longrightarrow>\n    m = sq * sq * p \\<and> prime_product p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = sq * sq * p \\<and> prime_product p", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. m = sq * sq * p\n 2. prime_product p", "show \"m = sq * sq * p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = sq * sq * p", "unfolding sq p prems(3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. factor_sq * factor_sq * factor_pr * n =\n    factor_sq * factor_sq * (factor_pr * n)", "by simp"], ["proof (state)\nthis:\n  m = sq * sq * p\n\ngoal (1 subgoal):\n 1. prime_product p", "show \"prime_product p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_product p", "unfolding prime_product_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>pa. prime pa \\<longrightarrow> multiplicity pa p \\<le> 1", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "fix m :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "assume m: \"prime m\""], ["proof (state)\nthis:\n  prime m\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "from prems(1)"], ["proof (chain)\npicking this:\n  \\<nexists>s. s * s = n", "have n1: \"n > 1\""], ["proof (prove)\nusing this:\n  \\<nexists>s. s * s = n\n\ngoal (1 subgoal):\n 1. 1 < n", "by (cases n, auto, case_tac nat, auto)"], ["proof (state)\nthis:\n  1 < n\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "hence n0: \"n > 0\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. 0 < n", "by auto"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "have \"i > limit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. limit < i", "using False"], ["proof (prove)\nusing this:\n  \\<not> i \\<le> limit\n\ngoal (1 subgoal):\n 1. limit < i", "by auto"], ["proof (state)\nthis:\n  limit < i\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "from this[unfolded prems(2)]"], ["proof (chain)\npicking this:\n  nat (root_nat_floor 3 n) < i", "have less: \"int i \\<ge> root_nat_floor 3 n + 1\""], ["proof (prove)\nusing this:\n  nat (root_nat_floor 3 n) < i\n\ngoal (1 subgoal):\n 1. root_nat_floor 3 n + 1 \\<le> int i", "by auto"], ["proof (state)\nthis:\n  root_nat_floor 3 n + 1 \\<le> int i\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "have \"int n < (root_nat_floor 3 n + 1) ^ 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int n < (root_nat_floor 3 n + 1) ^ 3", "by (rule root_nat_floor_upper, auto)"], ["proof (state)\nthis:\n  int n < (root_nat_floor 3 n + 1) ^ 3\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "also"], ["proof (state)\nthis:\n  int n < (root_nat_floor 3 n + 1) ^ 3\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "have \"\\<dots> \\<le> int i ^ 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (root_nat_floor 3 n + 1) ^ 3 \\<le> int i ^ 3", "by (rule power_mono[OF less, of 3], auto)"], ["proof (state)\nthis:\n  (root_nat_floor 3 n + 1) ^ 3 \\<le> int i ^ 3\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "finally"], ["proof (chain)\npicking this:\n  int n < int i ^ 3", "have n_i3: \"n < i ^ 3\""], ["proof (prove)\nusing this:\n  int n < int i ^ 3\n\ngoal (1 subgoal):\n 1. n < i ^ 3", "by (metis of_nat_less_iff of_nat_power [symmetric])"], ["proof (state)\nthis:\n  n < i ^ 3\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "{"], ["proof (state)\nthis:\n  n < i ^ 3\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "assume m: \"prime m\" \"multiplicity m n > 0\""], ["proof (state)\nthis:\n  prime m\n  0 < multiplicity m n\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "hence mp: \"m \\<in> prime_factors n\""], ["proof (prove)\nusing this:\n  prime m\n  0 < multiplicity m n\n\ngoal (1 subgoal):\n 1. m \\<in># prime_factorization n", "by (auto simp: prime_factors_multiplicity)"], ["proof (state)\nthis:\n  m \\<in># prime_factorization n\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "hence md: \"m dvd n\""], ["proof (prove)\nusing this:\n  m \\<in># prime_factorization n\n\ngoal (1 subgoal):\n 1. m dvd n", "by auto"], ["proof (state)\nthis:\n  m dvd n\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "then"], ["proof (chain)\npicking this:\n  m dvd n", "obtain k where n: \"n = m * k\""], ["proof (prove)\nusing this:\n  m dvd n\n\ngoal (1 subgoal):\n 1. (\\<And>k. n = m * k \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  n = m * k\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "from mp"], ["proof (chain)\npicking this:\n  m \\<in># prime_factorization n", "have pm: \"prime m\""], ["proof (prove)\nusing this:\n  m \\<in># prime_factorization n\n\ngoal (1 subgoal):\n 1. prime m", "by auto"], ["proof (state)\nthis:\n  prime m\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "hence m2: \"m \\<ge> 2\" and m0: \"m > 0\""], ["proof (prove)\nusing this:\n  prime m\n\ngoal (1 subgoal):\n 1. 2 \\<le> m &&& 0 < m", "by (auto simp: prime_nat_iff)"], ["proof (state)\nthis:\n  2 \\<le> m\n  0 < m\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "from prems(6)[OF m2] md"], ["proof (chain)\npicking this:\n  m < i \\<Longrightarrow> \\<not> m dvd n\n  m dvd n", "have mi: \"m \\<ge> i\""], ["proof (prove)\nusing this:\n  m < i \\<Longrightarrow> \\<not> m dvd n\n  m dvd n\n\ngoal (1 subgoal):\n 1. i \\<le> m", "by force"], ["proof (state)\nthis:\n  i \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "{"], ["proof (state)\nthis:\n  i \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "assume \"multiplicity m n \\<noteq> 1\""], ["proof (state)\nthis:\n  multiplicity m n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "with m"], ["proof (chain)\npicking this:\n  prime m\n  0 < multiplicity m n\n  multiplicity m n \\<noteq> 1", "have \"\\<exists> k. multiplicity m n = 2 + k\""], ["proof (prove)\nusing this:\n  prime m\n  0 < multiplicity m n\n  multiplicity m n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<exists>k. multiplicity m n = 2 + k", "by presburger"], ["proof (state)\nthis:\n  \\<exists>k. multiplicity m n = 2 + k\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "then"], ["proof (chain)\npicking this:\n  \\<exists>k. multiplicity m n = 2 + k", "obtain j where mult: \"multiplicity m n = 2 + j\""], ["proof (prove)\nusing this:\n  \\<exists>k. multiplicity m n = 2 + k\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        multiplicity m n = 2 + j \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  multiplicity m n = 2 + j\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "from n0 n"], ["proof (chain)\npicking this:\n  0 < n\n  n = m * k", "have k: \"k > 0\""], ["proof (prove)\nusing this:\n  0 < n\n  n = m * k\n\ngoal (1 subgoal):\n 1. 0 < k", "by auto"], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "from mult m0 k n m"], ["proof (chain)\npicking this:\n  multiplicity m n = 2 + j\n  0 < m\n  0 < k\n  n = m * k\n  prime m\n  0 < multiplicity m n", "have \"multiplicity m k > 0\""], ["proof (prove)\nusing this:\n  multiplicity m n = 2 + j\n  0 < m\n  0 < k\n  n = m * k\n  prime m\n  0 < multiplicity m n\n\ngoal (1 subgoal):\n 1. 0 < multiplicity m k", "by (auto simp: prime_elem_multiplicity_mult_distrib)"], ["proof (state)\nthis:\n  0 < multiplicity m k\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "with m"], ["proof (chain)\npicking this:\n  prime m\n  0 < multiplicity m n\n  0 < multiplicity m k", "have mp: \"m \\<in> prime_factors k\""], ["proof (prove)\nusing this:\n  prime m\n  0 < multiplicity m n\n  0 < multiplicity m k\n\ngoal (1 subgoal):\n 1. m \\<in># prime_factorization k", "by (auto simp: prime_factors_multiplicity)"], ["proof (state)\nthis:\n  m \\<in># prime_factorization k\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "hence md: \"m dvd k\""], ["proof (prove)\nusing this:\n  m \\<in># prime_factorization k\n\ngoal (1 subgoal):\n 1. m dvd k", "by (auto simp: k)"], ["proof (state)\nthis:\n  m dvd k\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "then"], ["proof (chain)\npicking this:\n  m dvd k", "obtain l where kml: \"k = m * l\""], ["proof (prove)\nusing this:\n  m dvd k\n\ngoal (1 subgoal):\n 1. (\\<And>l. k = m * l \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  k = m * l\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "note n = n[unfolded kml]"], ["proof (state)\nthis:\n  n = m * (m * l)\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "from n"], ["proof (chain)\npicking this:\n  n = m * (m * l)", "have \"l dvd n\""], ["proof (prove)\nusing this:\n  n = m * (m * l)\n\ngoal (1 subgoal):\n 1. l dvd n", "by auto"], ["proof (state)\nthis:\n  l dvd n\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "with prems(6)[of l]"], ["proof (chain)\npicking this:\n  \\<lbrakk>2 \\<le> l; l < i\\<rbrakk> \\<Longrightarrow> \\<not> l dvd n\n  l dvd n", "have \"l \\<le> 1 \\<or> l \\<ge> i\""], ["proof (prove)\nusing this:\n  \\<lbrakk>2 \\<le> l; l < i\\<rbrakk> \\<Longrightarrow> \\<not> l dvd n\n  l dvd n\n\ngoal (1 subgoal):\n 1. l \\<le> 1 \\<or> i \\<le> l", "by arith"], ["proof (state)\nthis:\n  l \\<le> 1 \\<or> i \\<le> l\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "with n n0"], ["proof (chain)\npicking this:\n  n = m * (m * l)\n  0 < n\n  l \\<le> 1 \\<or> i \\<le> l", "have l: \"l = 1 \\<or> l \\<ge> i\""], ["proof (prove)\nusing this:\n  n = m * (m * l)\n  0 < n\n  l \\<le> 1 \\<or> i \\<le> l\n\ngoal (1 subgoal):\n 1. l = 1 \\<or> i \\<le> l", "by auto"], ["proof (state)\nthis:\n  l = 1 \\<or> i \\<le> l\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "from n prems(1)"], ["proof (chain)\npicking this:\n  n = m * (m * l)\n  \\<nexists>s. s * s = n", "have \"l \\<noteq> 1\""], ["proof (prove)\nusing this:\n  n = m * (m * l)\n  \\<nexists>s. s * s = n\n\ngoal (1 subgoal):\n 1. l \\<noteq> 1", "by auto"], ["proof (state)\nthis:\n  l \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "with l"], ["proof (chain)\npicking this:\n  l = 1 \\<or> i \\<le> l\n  l \\<noteq> 1", "have l: \"l \\<ge> i\""], ["proof (prove)\nusing this:\n  l = 1 \\<or> i \\<le> l\n  l \\<noteq> 1\n\ngoal (1 subgoal):\n 1. i \\<le> l", "by auto"], ["proof (state)\nthis:\n  i \\<le> l\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "from mult_le_mono[OF mult_le_mono[OF mi mi] l]"], ["proof (chain)\npicking this:\n  i * i * i \\<le> m * m * l", "have \"n \\<ge> i^3\""], ["proof (prove)\nusing this:\n  i * i * i \\<le> m * m * l\n\ngoal (1 subgoal):\n 1. i ^ 3 \\<le> n", "unfolding n"], ["proof (prove)\nusing this:\n  i * i * i \\<le> m * m * l\n\ngoal (1 subgoal):\n 1. i ^ 3 \\<le> m * (m * l)", "by (auto simp: power3_eq_cube)"], ["proof (state)\nthis:\n  i ^ 3 \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "with n_i3"], ["proof (chain)\npicking this:\n  n < i ^ 3\n  i ^ 3 \\<le> n", "have False"], ["proof (prove)\nusing this:\n  n < i ^ 3\n  i ^ 3 \\<le> n\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "}"], ["proof (state)\nthis:\n  multiplicity m n \\<noteq> 1 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "with mi m"], ["proof (chain)\npicking this:\n  i \\<le> m\n  prime m\n  0 < multiplicity m n\n  multiplicity m n \\<noteq> 1 \\<Longrightarrow> False", "have \"multiplicity m n = 1 \\<and> m \\<ge> i\""], ["proof (prove)\nusing this:\n  i \\<le> m\n  prime m\n  0 < multiplicity m n\n  multiplicity m n \\<noteq> 1 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. multiplicity m n = 1 \\<and> i \\<le> m", "by auto"], ["proof (state)\nthis:\n  multiplicity m n = 1 \\<and> i \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "}"], ["proof (state)\nthis:\n  \\<lbrakk>prime ?mb2; 0 < multiplicity ?mb2 n\\<rbrakk>\n  \\<Longrightarrow> multiplicity ?mb2 n = 1 \\<and> i \\<le> ?mb2\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "note n = this"], ["proof (state)\nthis:\n  \\<lbrakk>prime ?mb2; 0 < multiplicity ?mb2 n\\<rbrakk>\n  \\<Longrightarrow> multiplicity ?mb2 n = 1 \\<and> i \\<le> ?mb2\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "have \"multiplicity m p = multiplicity m factor_pr + multiplicity m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity m p = multiplicity m factor_pr + multiplicity m n", "unfolding p"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity m (factor_pr * n) =\n    multiplicity m factor_pr + multiplicity m n", "using prems(1,9) m \\<open>n > 0\\<close>"], ["proof (prove)\nusing this:\n  \\<nexists>s. s * s = n\n  0 < factor_pr\n  prime m\n  0 < n\n\ngoal (1 subgoal):\n 1. multiplicity m (factor_pr * n) =\n    multiplicity m factor_pr + multiplicity m n", "by (auto simp: prime_elem_multiplicity_mult_distrib)"], ["proof (state)\nthis:\n  multiplicity m p = multiplicity m factor_pr + multiplicity m n\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "also"], ["proof (state)\nthis:\n  multiplicity m p = multiplicity m factor_pr + multiplicity m n\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "have \"\\<dots> \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicity m factor_pr + multiplicity m n \\<le> 1", "proof (cases \"m < i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m < i \\<Longrightarrow>\n    multiplicity m factor_pr + multiplicity m n \\<le> 1\n 2. \\<not> m < i \\<Longrightarrow>\n    multiplicity m factor_pr + multiplicity m n \\<le> 1", "case True"], ["proof (state)\nthis:\n  m < i\n\ngoal (2 subgoals):\n 1. m < i \\<Longrightarrow>\n    multiplicity m factor_pr + multiplicity m n \\<le> 1\n 2. \\<not> m < i \\<Longrightarrow>\n    multiplicity m factor_pr + multiplicity m n \\<le> 1", "from prems(7)[of m] n[of m] True m"], ["proof (chain)\npicking this:\n  \\<lbrakk>prime m; m < i\\<rbrakk>\n  \\<Longrightarrow> multiplicity m factor_pr \\<le> 1\n  \\<lbrakk>prime m; 0 < multiplicity m n\\<rbrakk>\n  \\<Longrightarrow> multiplicity m n = 1 \\<and> i \\<le> m\n  m < i\n  prime m", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>prime m; m < i\\<rbrakk>\n  \\<Longrightarrow> multiplicity m factor_pr \\<le> 1\n  \\<lbrakk>prime m; 0 < multiplicity m n\\<rbrakk>\n  \\<Longrightarrow> multiplicity m n = 1 \\<and> i \\<le> m\n  m < i\n  prime m\n\ngoal (1 subgoal):\n 1. multiplicity m factor_pr + multiplicity m n \\<le> 1", "by force"], ["proof (state)\nthis:\n  multiplicity m factor_pr + multiplicity m n \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<not> m < i \\<Longrightarrow>\n    multiplicity m factor_pr + multiplicity m n \\<le> 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> m < i \\<Longrightarrow>\n    multiplicity m factor_pr + multiplicity m n \\<le> 1", "case False"], ["proof (state)\nthis:\n  \\<not> m < i\n\ngoal (1 subgoal):\n 1. \\<not> m < i \\<Longrightarrow>\n    multiplicity m factor_pr + multiplicity m n \\<le> 1", "hence \"m \\<ge> i\""], ["proof (prove)\nusing this:\n  \\<not> m < i\n\ngoal (1 subgoal):\n 1. i \\<le> m", "by auto"], ["proof (state)\nthis:\n  i \\<le> m\n\ngoal (1 subgoal):\n 1. \\<not> m < i \\<Longrightarrow>\n    multiplicity m factor_pr + multiplicity m n \\<le> 1", "from prems(8)[OF m(1) this] n[of m] m"], ["proof (chain)\npicking this:\n  multiplicity m factor_pr = 0\n  \\<lbrakk>prime m; 0 < multiplicity m n\\<rbrakk>\n  \\<Longrightarrow> multiplicity m n = 1 \\<and> i \\<le> m\n  prime m", "show ?thesis"], ["proof (prove)\nusing this:\n  multiplicity m factor_pr = 0\n  \\<lbrakk>prime m; 0 < multiplicity m n\\<rbrakk>\n  \\<Longrightarrow> multiplicity m n = 1 \\<and> i \\<le> m\n  prime m\n\ngoal (1 subgoal):\n 1. multiplicity m factor_pr + multiplicity m n \\<le> 1", "by force"], ["proof (state)\nthis:\n  multiplicity m factor_pr + multiplicity m n \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  multiplicity m factor_pr + multiplicity m n \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>pa. prime pa \\<Longrightarrow> multiplicity pa p \\<le> 1", "finally"], ["proof (chain)\npicking this:\n  multiplicity m p \\<le> 1", "show \"multiplicity m p \\<le> 1\""], ["proof (prove)\nusing this:\n  multiplicity m p \\<le> 1\n\ngoal (1 subgoal):\n 1. multiplicity m p \\<le> 1", "."], ["proof (state)\nthis:\n  multiplicity m p \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  prime_product p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m = sq * sq * p \\<and> prime_product p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m = sq * sq * p \\<and> prime_product p\n\ngoal:\nNo subgoals!", "qed"], ["", "definition prime_product_factor :: \"nat \\<Rightarrow> nat \\<times> nat\" where\n  \"prime_product_factor n = (case sqrt_nat n of \n     (Cons s _) \\<Rightarrow> (s,1)\n   | [] \\<Rightarrow> prime_product_factor_main 1 1 (nat (root_nat_floor 3 n)) n 2)\""], ["", "lemma prime_product_one[simp, intro]: \"prime_product 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_product 1", "unfolding prime_product_def multiplicity_one_nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. prime p \\<longrightarrow> multiplicity p 1 \\<le> 1", "by auto"], ["", "lemma prime_product_factor: assumes pf: \"prime_product_factor n = (sq,p)\"\n  shows \"n = sq * sq * p \\<and> prime_product p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = sq * sq * p \\<and> prime_product p", "proof (cases \"sqrt_nat n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. sqrt_nat n = [] \\<Longrightarrow> n = sq * sq * p \\<and> prime_product p\n 2. \\<And>a list.\n       sqrt_nat n = a # list \\<Longrightarrow>\n       n = sq * sq * p \\<and> prime_product p", "case (Cons s)"], ["proof (state)\nthis:\n  sqrt_nat n = s # list_\n\ngoal (2 subgoals):\n 1. sqrt_nat n = [] \\<Longrightarrow> n = sq * sq * p \\<and> prime_product p\n 2. \\<And>a list.\n       sqrt_nat n = a # list \\<Longrightarrow>\n       n = sq * sq * p \\<and> prime_product p", "from pf[unfolded prime_product_factor_def Cons] arg_cong[OF Cons, of set]\n    prime_product_one"], ["proof (chain)\npicking this:\n  (case s # list_ of\n   [] \\<Rightarrow>\n     prime_product_factor_main 1 1 (nat (root_nat_floor 3 n)) n 2\n   | s # x \\<Rightarrow> (s, 1)) =\n  (sq, p)\n  set (sqrt_nat n) = set (s # list_)\n  prime_product 1", "show ?thesis"], ["proof (prove)\nusing this:\n  (case s # list_ of\n   [] \\<Rightarrow>\n     prime_product_factor_main 1 1 (nat (root_nat_floor 3 n)) n 2\n   | s # x \\<Rightarrow> (s, 1)) =\n  (sq, p)\n  set (sqrt_nat n) = set (s # list_)\n  prime_product 1\n\ngoal (1 subgoal):\n 1. n = sq * sq * p \\<and> prime_product p", "by auto"], ["proof (state)\nthis:\n  n = sq * sq * p \\<and> prime_product p\n\ngoal (1 subgoal):\n 1. sqrt_nat n = [] \\<Longrightarrow> n = sq * sq * p \\<and> prime_product p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sqrt_nat n = [] \\<Longrightarrow> n = sq * sq * p \\<and> prime_product p", "case Nil"], ["proof (state)\nthis:\n  sqrt_nat n = []\n\ngoal (1 subgoal):\n 1. sqrt_nat n = [] \\<Longrightarrow> n = sq * sq * p \\<and> prime_product p", "from arg_cong[OF Nil, of set]"], ["proof (chain)\npicking this:\n  set (sqrt_nat n) = set []", "have nsq: \"\\<not> (\\<exists>s. s * s = n)\""], ["proof (prove)\nusing this:\n  set (sqrt_nat n) = set []\n\ngoal (1 subgoal):\n 1. \\<nexists>s. s * s = n", "by auto"], ["proof (state)\nthis:\n  \\<nexists>s. s * s = n\n\ngoal (1 subgoal):\n 1. sqrt_nat n = [] \\<Longrightarrow> n = sq * sq * p \\<and> prime_product p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. n = sq * sq * p \\<and> prime_product p", "by (rule prime_product_factor_main[OF nsq refl, of _ 1 1 2], unfold multiplicity_one,\n    insert pf[unfolded prime_product_factor_def Nil], auto)"], ["proof (state)\nthis:\n  n = sq * sq * p \\<and> prime_product p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}