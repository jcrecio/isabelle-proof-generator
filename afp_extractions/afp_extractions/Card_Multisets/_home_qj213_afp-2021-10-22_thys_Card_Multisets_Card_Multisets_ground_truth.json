{"file_name": "/home/qj213/afp-2021-10-22/thys/Card_Multisets/Card_Multisets.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Card_Multisets", "problem_names": ["lemma mset_set_set_mset_subseteq:\n  \"mset_set (set_mset M) \\<subseteq># M\"", "lemma size_mset_set_eq_card:\n  assumes \"finite A\"\n  shows \"size (mset_set A) = card A\"", "lemma card_set_mset_leq:\n  \"card (set_mset M) \\<le> size M\"", "lemma set_of_multisets_eq:\n  assumes \"x \\<notin> A\"\n  shows \"{M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) ` {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\"", "lemma R_eq_finite:\n  \"R A k \\<longleftrightarrow> finite A\"", "lemma finite_set_and_nat_induct[consumes 1, case_names zero empty step]:\n  assumes \"finite A\"\n  assumes \"\\<And>A. finite A \\<Longrightarrow> P A 0\"\n  assumes \"\\<And>k. P {} k\"\n  assumes \"\\<And>A k x. finite A \\<Longrightarrow> x \\<notin> A \\<Longrightarrow> P A (Suc k) \\<Longrightarrow> P (insert x A) k \\<Longrightarrow> P (insert x A) (Suc k)\"\n  shows \"P A k\"", "lemma finite_multisets:\n  assumes \"finite A\"\n  shows \"finite {M. set_mset M \\<subseteq> A \\<and> size M = k}\"", "lemma card_multisets:\n  assumes \"finite A\"\n  shows \"card {M. set_mset M \\<subseteq> A \\<and> size M = k} = (card A + k - 1) choose k\"", "lemma card_too_small_multisets_covering_set:\n  assumes \"finite A\"\n  assumes \"k < card A\"\n  shows \"card {M. set_mset M = A \\<and> size M = k} = 0\"", "lemma card_multisets_covering_set:\n  assumes \"finite A\"\n  assumes \"card A \\<le> k\"\n  shows \"card {M. set_mset M = A \\<and> size M = k} = (k - 1) choose (k - card A)\""], "translations": [["", "lemma mset_set_set_mset_subseteq:\n  \"mset_set (set_mset M) \\<subseteq># M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_set (set_mset M) \\<subseteq># M", "proof (induct M)"], ["proof (state)\ngoal (2 subgoals):\n 1. mset_set (set_mset {#}) \\<subseteq># {#}\n 2. \\<And>x M.\n       mset_set (set_mset M) \\<subseteq># M \\<Longrightarrow>\n       mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. mset_set (set_mset {#}) \\<subseteq># {#}\n 2. \\<And>x M.\n       mset_set (set_mset M) \\<subseteq># M \\<Longrightarrow>\n       mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_set (set_mset {#}) \\<subseteq># {#}", "by simp"], ["proof (state)\nthis:\n  mset_set (set_mset {#}) \\<subseteq># {#}\n\ngoal (1 subgoal):\n 1. \\<And>x M.\n       mset_set (set_mset M) \\<subseteq># M \\<Longrightarrow>\n       mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x M.\n       mset_set (set_mset M) \\<subseteq># M \\<Longrightarrow>\n       mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M", "case (add x M)"], ["proof (state)\nthis:\n  mset_set (set_mset M) \\<subseteq># M\n\ngoal (1 subgoal):\n 1. \\<And>x M.\n       mset_set (set_mset M) \\<subseteq># M \\<Longrightarrow>\n       mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M", "from this"], ["proof (chain)\npicking this:\n  mset_set (set_mset M) \\<subseteq># M", "show ?case"], ["proof (prove)\nusing this:\n  mset_set (set_mset M) \\<subseteq># M\n\ngoal (1 subgoal):\n 1. mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M", "proof (cases \"x \\<in># M\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>mset_set (set_mset M) \\<subseteq># M; x \\<in># M\\<rbrakk>\n    \\<Longrightarrow> mset_set (set_mset (add_mset x M)) \\<subseteq>#\n                      add_mset x M\n 2. \\<lbrakk>mset_set (set_mset M) \\<subseteq># M; x \\<notin># M\\<rbrakk>\n    \\<Longrightarrow> mset_set (set_mset (add_mset x M)) \\<subseteq>#\n                      add_mset x M", "assume \"x \\<in># M\""], ["proof (state)\nthis:\n  x \\<in># M\n\ngoal (2 subgoals):\n 1. \\<lbrakk>mset_set (set_mset M) \\<subseteq># M; x \\<in># M\\<rbrakk>\n    \\<Longrightarrow> mset_set (set_mset (add_mset x M)) \\<subseteq>#\n                      add_mset x M\n 2. \\<lbrakk>mset_set (set_mset M) \\<subseteq># M; x \\<notin># M\\<rbrakk>\n    \\<Longrightarrow> mset_set (set_mset (add_mset x M)) \\<subseteq>#\n                      add_mset x M", "from this"], ["proof (chain)\npicking this:\n  x \\<in># M", "have \"mset_set (set_mset (M + {#x#})) = mset_set (set_mset M)\""], ["proof (prove)\nusing this:\n  x \\<in># M\n\ngoal (1 subgoal):\n 1. mset_set (set_mset (M + {#x#})) = mset_set (set_mset M)", "by (simp add: insert_absorb)"], ["proof (state)\nthis:\n  mset_set (set_mset (M + {#x#})) = mset_set (set_mset M)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>mset_set (set_mset M) \\<subseteq># M; x \\<in># M\\<rbrakk>\n    \\<Longrightarrow> mset_set (set_mset (add_mset x M)) \\<subseteq>#\n                      add_mset x M\n 2. \\<lbrakk>mset_set (set_mset M) \\<subseteq># M; x \\<notin># M\\<rbrakk>\n    \\<Longrightarrow> mset_set (set_mset (add_mset x M)) \\<subseteq>#\n                      add_mset x M", "from this add.hyps"], ["proof (chain)\npicking this:\n  mset_set (set_mset (M + {#x#})) = mset_set (set_mset M)\n  mset_set (set_mset M) \\<subseteq># M", "show ?thesis"], ["proof (prove)\nusing this:\n  mset_set (set_mset (M + {#x#})) = mset_set (set_mset M)\n  mset_set (set_mset M) \\<subseteq># M\n\ngoal (1 subgoal):\n 1. mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M", "using subset_mset.order.trans"], ["proof (prove)\nusing this:\n  mset_set (set_mset (M + {#x#})) = mset_set (set_mset M)\n  mset_set (set_mset M) \\<subseteq># M\n  \\<lbrakk>?a \\<subseteq># ?b; ?b \\<subseteq># ?c\\<rbrakk>\n  \\<Longrightarrow> ?a \\<subseteq># ?c\n\ngoal (1 subgoal):\n 1. mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M", "by fastforce"], ["proof (state)\nthis:\n  mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M\n\ngoal (1 subgoal):\n 1. \\<lbrakk>mset_set (set_mset M) \\<subseteq># M; x \\<notin># M\\<rbrakk>\n    \\<Longrightarrow> mset_set (set_mset (add_mset x M)) \\<subseteq>#\n                      add_mset x M", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>mset_set (set_mset M) \\<subseteq># M; x \\<notin># M\\<rbrakk>\n    \\<Longrightarrow> mset_set (set_mset (add_mset x M)) \\<subseteq>#\n                      add_mset x M", "assume \"\\<not> x \\<in># M\""], ["proof (state)\nthis:\n  x \\<notin># M\n\ngoal (1 subgoal):\n 1. \\<lbrakk>mset_set (set_mset M) \\<subseteq># M; x \\<notin># M\\<rbrakk>\n    \\<Longrightarrow> mset_set (set_mset (add_mset x M)) \\<subseteq>#\n                      add_mset x M", "from this add.hyps"], ["proof (chain)\npicking this:\n  x \\<notin># M\n  mset_set (set_mset M) \\<subseteq># M", "have \"{#x#} + mset_set (set_mset M) \\<subseteq># M + {#x#}\""], ["proof (prove)\nusing this:\n  x \\<notin># M\n  mset_set (set_mset M) \\<subseteq># M\n\ngoal (1 subgoal):\n 1. {#x#} + mset_set (set_mset M) \\<subseteq># M + {#x#}", "by (simp add: insert_subset_eq_iff)"], ["proof (state)\nthis:\n  {#x#} + mset_set (set_mset M) \\<subseteq># M + {#x#}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>mset_set (set_mset M) \\<subseteq># M; x \\<notin># M\\<rbrakk>\n    \\<Longrightarrow> mset_set (set_mset (add_mset x M)) \\<subseteq>#\n                      add_mset x M", "from this \\<open>\\<not> x \\<in># M\\<close>"], ["proof (chain)\npicking this:\n  {#x#} + mset_set (set_mset M) \\<subseteq># M + {#x#}\n  x \\<notin># M", "show ?thesis"], ["proof (prove)\nusing this:\n  {#x#} + mset_set (set_mset M) \\<subseteq># M + {#x#}\n  x \\<notin># M\n\ngoal (1 subgoal):\n 1. mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M", "by simp"], ["proof (state)\nthis:\n  mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset_set (set_mset (add_mset x M)) \\<subseteq># add_mset x M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma size_mset_set_eq_card:\n  assumes \"finite A\"\n  shows \"size (mset_set A) = card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (mset_set A) = card A", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. size (mset_set A) = card A", "by (induct A) auto"], ["", "lemma card_set_mset_leq:\n  \"card (set_mset M) \\<le> size M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set_mset M) \\<le> size M", "by (induct M) (auto simp add: card_insert_le_m1)"], ["", "subsection \\<open>Lemma to Enumerate Sets of Multisets\\<close>"], ["", "lemma set_of_multisets_eq:\n  assumes \"x \\<notin> A\"\n  shows \"{M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) ` {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "from \\<open>x \\<notin> A\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> A", "have \"{M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k \\<and> x \\<in># M}\""], ["proof (prove)\nusing this:\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    {M. set_mset M \\<subseteq> insert x A \\<and>\n        size M = Suc k \\<and> x \\<in># M}", "by auto"], ["proof (state)\nthis:\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n  {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n  {M. set_mset M \\<subseteq> insert x A \\<and>\n      size M = Suc k \\<and> x \\<in># M}\n\ngoal (1 subgoal):\n 1. {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "moreover"], ["proof (state)\nthis:\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n  {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n  {M. set_mset M \\<subseteq> insert x A \\<and>\n      size M = Suc k \\<and> x \\<in># M}\n\ngoal (1 subgoal):\n 1. {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "have \"{M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k \\<and> x \\<in># M} =\n    (\\<lambda>M. M + {#x#}) ` {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\" (is \"?S = ?T\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {M. set_mset M \\<subseteq> insert x A \\<and>\n        size M = Suc k \\<and> x \\<in># M} =\n    (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {M. set_mset M \\<subseteq> insert x A \\<and>\n        size M = Suc k \\<and> x \\<in># M}\n    \\<subseteq> (\\<lambda>M. M + {#x#}) `\n                {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n 2. (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n    \\<subseteq> {M. set_mset M \\<subseteq> insert x A \\<and>\n                    size M = Suc k \\<and> x \\<in># M}", "show \"?S \\<subseteq> ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {M. set_mset M \\<subseteq> insert x A \\<and>\n        size M = Suc k \\<and> x \\<in># M}\n    \\<subseteq> (\\<lambda>M. M + {#x#}) `\n                {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {M. set_mset M \\<subseteq> insert x A \\<and>\n                    size M = Suc k \\<and> x \\<in># M} \\<Longrightarrow>\n       xa \\<in> (\\<lambda>M. M + {#x#}) `\n                {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "fix M"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {M. set_mset M \\<subseteq> insert x A \\<and>\n                    size M = Suc k \\<and> x \\<in># M} \\<Longrightarrow>\n       xa \\<in> (\\<lambda>M. M + {#x#}) `\n                {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "assume \"M \\<in> ?S\""], ["proof (state)\nthis:\n  M \\<in> {M. set_mset M \\<subseteq> insert x A \\<and>\n              size M = Suc k \\<and> x \\<in># M}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {M. set_mset M \\<subseteq> insert x A \\<and>\n                    size M = Suc k \\<and> x \\<in># M} \\<Longrightarrow>\n       xa \\<in> (\\<lambda>M. M + {#x#}) `\n                {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "from this"], ["proof (chain)\npicking this:\n  M \\<in> {M. set_mset M \\<subseteq> insert x A \\<and>\n              size M = Suc k \\<and> x \\<in># M}", "have \"M = M - {#x#} + {#x#}\""], ["proof (prove)\nusing this:\n  M \\<in> {M. set_mset M \\<subseteq> insert x A \\<and>\n              size M = Suc k \\<and> x \\<in># M}\n\ngoal (1 subgoal):\n 1. M = M - {#x#} + {#x#}", "by auto"], ["proof (state)\nthis:\n  M = M - {#x#} + {#x#}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {M. set_mset M \\<subseteq> insert x A \\<and>\n                    size M = Suc k \\<and> x \\<in># M} \\<Longrightarrow>\n       xa \\<in> (\\<lambda>M. M + {#x#}) `\n                {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "moreover"], ["proof (state)\nthis:\n  M = M - {#x#} + {#x#}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {M. set_mset M \\<subseteq> insert x A \\<and>\n                    size M = Suc k \\<and> x \\<in># M} \\<Longrightarrow>\n       xa \\<in> (\\<lambda>M. M + {#x#}) `\n                {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "have \"M - {#x#} \\<in> {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M - {#x#} \\<in> {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. M - {#x#} \\<in> {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "have \"set_mset (M - {#x#} + {#x#}) \\<subseteq> insert x A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (M - {#x#} + {#x#}) \\<subseteq> insert x A", "using \\<open>M \\<in> ?S\\<close>"], ["proof (prove)\nusing this:\n  M \\<in> {M. set_mset M \\<subseteq> insert x A \\<and>\n              size M = Suc k \\<and> x \\<in># M}\n\ngoal (1 subgoal):\n 1. set_mset (M - {#x#} + {#x#}) \\<subseteq> insert x A", "by force"], ["proof (state)\nthis:\n  set_mset (M - {#x#} + {#x#}) \\<subseteq> insert x A\n\ngoal (1 subgoal):\n 1. M - {#x#} \\<in> {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "moreover"], ["proof (state)\nthis:\n  set_mset (M - {#x#} + {#x#}) \\<subseteq> insert x A\n\ngoal (1 subgoal):\n 1. M - {#x#} \\<in> {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "have \"size (M - {#x#} + {#x#}) = Suc k \\<and> x \\<in># M - {#x#} + {#x#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (M - {#x#} + {#x#}) = Suc k \\<and> x \\<in># M - {#x#} + {#x#}", "using \\<open>M \\<in> ?S\\<close>"], ["proof (prove)\nusing this:\n  M \\<in> {M. set_mset M \\<subseteq> insert x A \\<and>\n              size M = Suc k \\<and> x \\<in># M}\n\ngoal (1 subgoal):\n 1. size (M - {#x#} + {#x#}) = Suc k \\<and> x \\<in># M - {#x#} + {#x#}", "by force"], ["proof (state)\nthis:\n  size (M - {#x#} + {#x#}) = Suc k \\<and> x \\<in># M - {#x#} + {#x#}\n\ngoal (1 subgoal):\n 1. M - {#x#} \\<in> {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "ultimately"], ["proof (chain)\npicking this:\n  set_mset (M - {#x#} + {#x#}) \\<subseteq> insert x A\n  size (M - {#x#} + {#x#}) = Suc k \\<and> x \\<in># M - {#x#} + {#x#}", "show ?thesis"], ["proof (prove)\nusing this:\n  set_mset (M - {#x#} + {#x#}) \\<subseteq> insert x A\n  size (M - {#x#} + {#x#}) = Suc k \\<and> x \\<in># M - {#x#} + {#x#}\n\ngoal (1 subgoal):\n 1. M - {#x#} \\<in> {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "by force"], ["proof (state)\nthis:\n  M - {#x#} \\<in> {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  M - {#x#} \\<in> {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> {M. set_mset M \\<subseteq> insert x A \\<and>\n                    size M = Suc k \\<and> x \\<in># M} \\<Longrightarrow>\n       xa \\<in> (\\<lambda>M. M + {#x#}) `\n                {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "ultimately"], ["proof (chain)\npicking this:\n  M = M - {#x#} + {#x#}\n  M - {#x#} \\<in> {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "show \"M \\<in> ?T\""], ["proof (prove)\nusing this:\n  M = M - {#x#} + {#x#}\n  M - {#x#} \\<in> {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. M \\<in> (\\<lambda>M. M + {#x#}) `\n            {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "by auto"], ["proof (state)\nthis:\n  M \\<in> (\\<lambda>M. M + {#x#}) `\n          {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {M. set_mset M \\<subseteq> insert x A \\<and>\n      size M = Suc k \\<and> x \\<in># M}\n  \\<subseteq> (\\<lambda>M. M + {#x#}) `\n              {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n    \\<subseteq> {M. set_mset M \\<subseteq> insert x A \\<and>\n                    size M = Suc k \\<and> x \\<in># M}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n    \\<subseteq> {M. set_mset M \\<subseteq> insert x A \\<and>\n                    size M = Suc k \\<and> x \\<in># M}", "show \"?T \\<subseteq> ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n    \\<subseteq> {M. set_mset M \\<subseteq> insert x A \\<and>\n                    size M = Suc k \\<and> x \\<in># M}", "by force"], ["proof (state)\nthis:\n  (\\<lambda>M. M + {#x#}) `\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n  \\<subseteq> {M. set_mset M \\<subseteq> insert x A \\<and>\n                  size M = Suc k \\<and> x \\<in># M}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {M. set_mset M \\<subseteq> insert x A \\<and>\n      size M = Suc k \\<and> x \\<in># M} =\n  (\\<lambda>M. M + {#x#}) `\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "ultimately"], ["proof (chain)\npicking this:\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n  {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n  {M. set_mset M \\<subseteq> insert x A \\<and>\n      size M = Suc k \\<and> x \\<in># M}\n  {M. set_mset M \\<subseteq> insert x A \\<and>\n      size M = Suc k \\<and> x \\<in># M} =\n  (\\<lambda>M. M + {#x#}) `\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "show ?thesis"], ["proof (prove)\nusing this:\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n  {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n  {M. set_mset M \\<subseteq> insert x A \\<and>\n      size M = Suc k \\<and> x \\<in># M}\n  {M. set_mset M \\<subseteq> insert x A \\<and>\n      size M = Suc k \\<and> x \\<in># M} =\n  (\\<lambda>M. M + {#x#}) `\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "by auto"], ["proof (state)\nthis:\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n  {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n  (\\<lambda>M. M + {#x#}) `\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Derivation of Suitable Induction Rule\\<close>"], ["", "context\nbegin"], ["", "private"], ["", "inductive R :: \"'a set \\<Rightarrow> nat \\<Rightarrow> bool\"\nwhere\n  \"finite A \\<Longrightarrow> R A 0\"\n| \"R {} k\"\n| \"finite A \\<Longrightarrow> x \\<notin> A \\<Longrightarrow> R A (Suc k) \\<Longrightarrow> R (insert x A) k \\<Longrightarrow> R (insert x A) (Suc k)\""], ["", "private"], ["", "lemma R_eq_finite:\n  \"R A k \\<longleftrightarrow> finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R A k = finite A", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. R A k \\<Longrightarrow> finite A\n 2. finite A \\<Longrightarrow> R A k", "assume \"R A k\""], ["proof (state)\nthis:\n  R A k\n\ngoal (2 subgoals):\n 1. R A k \\<Longrightarrow> finite A\n 2. finite A \\<Longrightarrow> R A k", "from this"], ["proof (chain)\npicking this:\n  R A k", "show \"finite A\""], ["proof (prove)\nusing this:\n  R A k\n\ngoal (1 subgoal):\n 1. finite A", "by cases auto"], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> R A k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> R A k", "assume \"finite A\""], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> R A k", "from this"], ["proof (chain)\npicking this:\n  finite A", "show \"R A k\""], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. R A k", "proof (induct A)"], ["proof (state)\ngoal (2 subgoals):\n 1. R {} k\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; R F k\\<rbrakk>\n       \\<Longrightarrow> R (insert x F) k", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. R {} k\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; R F k\\<rbrakk>\n       \\<Longrightarrow> R (insert x F) k", "from this"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. R {} k", "by (rule R.intros(2))"], ["proof (state)\nthis:\n  R {} k\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; R F k\\<rbrakk>\n       \\<Longrightarrow> R (insert x F) k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; R F k\\<rbrakk>\n       \\<Longrightarrow> R (insert x F) k", "case insert"], ["proof (state)\nthis:\n  finite F_\n  x_ \\<notin> F_\n  R F_ k\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F; R F k\\<rbrakk>\n       \\<Longrightarrow> R (insert x F) k", "from this"], ["proof (chain)\npicking this:\n  finite F_\n  x_ \\<notin> F_\n  R F_ k", "show ?case"], ["proof (prove)\nusing this:\n  finite F_\n  x_ \\<notin> F_\n  R F_ k\n\ngoal (1 subgoal):\n 1. R (insert x_ F_) k", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite F_; x_ \\<notin> F_; R F_ 0\\<rbrakk>\n    \\<Longrightarrow> R (insert x_ F_) 0\n 2. \\<And>k.\n       \\<lbrakk>\\<lbrakk>finite F_; x_ \\<notin> F_; R F_ k\\<rbrakk>\n                \\<Longrightarrow> R (insert x_ F_) k;\n        finite F_; x_ \\<notin> F_; R F_ (Suc k)\\<rbrakk>\n       \\<Longrightarrow> R (insert x_ F_) (Suc k)", "case 0"], ["proof (state)\nthis:\n  finite F_\n  x_ \\<notin> F_\n  R F_ 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>finite F_; x_ \\<notin> F_; R F_ 0\\<rbrakk>\n    \\<Longrightarrow> R (insert x_ F_) 0\n 2. \\<And>k.\n       \\<lbrakk>\\<lbrakk>finite F_; x_ \\<notin> F_; R F_ k\\<rbrakk>\n                \\<Longrightarrow> R (insert x_ F_) k;\n        finite F_; x_ \\<notin> F_; R F_ (Suc k)\\<rbrakk>\n       \\<Longrightarrow> R (insert x_ F_) (Suc k)", "from this"], ["proof (chain)\npicking this:\n  finite F_\n  x_ \\<notin> F_\n  R F_ 0", "show ?case"], ["proof (prove)\nusing this:\n  finite F_\n  x_ \\<notin> F_\n  R F_ 0\n\ngoal (1 subgoal):\n 1. R (insert x_ F_) 0", "by (intro R.intros(1) finite.insertI)"], ["proof (state)\nthis:\n  R (insert x_ F_) 0\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>finite F_; x_ \\<notin> F_; R F_ k\\<rbrakk>\n                \\<Longrightarrow> R (insert x_ F_) k;\n        finite F_; x_ \\<notin> F_; R F_ (Suc k)\\<rbrakk>\n       \\<Longrightarrow> R (insert x_ F_) (Suc k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>finite F_; x_ \\<notin> F_; R F_ k\\<rbrakk>\n                \\<Longrightarrow> R (insert x_ F_) k;\n        finite F_; x_ \\<notin> F_; R F_ (Suc k)\\<rbrakk>\n       \\<Longrightarrow> R (insert x_ F_) (Suc k)", "case Suc"], ["proof (state)\nthis:\n  \\<lbrakk>finite F_; x_ \\<notin> F_; R F_ k_\\<rbrakk>\n  \\<Longrightarrow> R (insert x_ F_) k_\n  finite F_\n  x_ \\<notin> F_\n  R F_ (Suc k_)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>finite F_; x_ \\<notin> F_; R F_ k\\<rbrakk>\n                \\<Longrightarrow> R (insert x_ F_) k;\n        finite F_; x_ \\<notin> F_; R F_ (Suc k)\\<rbrakk>\n       \\<Longrightarrow> R (insert x_ F_) (Suc k)", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>finite F_; x_ \\<notin> F_; R F_ k_\\<rbrakk>\n  \\<Longrightarrow> R (insert x_ F_) k_\n  finite F_\n  x_ \\<notin> F_\n  R F_ (Suc k_)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite F_; x_ \\<notin> F_; R F_ k_\\<rbrakk>\n  \\<Longrightarrow> R (insert x_ F_) k_\n  finite F_\n  x_ \\<notin> F_\n  R F_ (Suc k_)\n\ngoal (1 subgoal):\n 1. R (insert x_ F_) (Suc k_)", "by (metis R.simps Zero_neq_Suc diff_Suc_1)"], ["proof (state)\nthis:\n  R (insert x_ F_) (Suc k_)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  R (insert x_ F_) k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  R A k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_set_and_nat_induct[consumes 1, case_names zero empty step]:\n  assumes \"finite A\"\n  assumes \"\\<And>A. finite A \\<Longrightarrow> P A 0\"\n  assumes \"\\<And>k. P {} k\"\n  assumes \"\\<And>A k x. finite A \\<Longrightarrow> x \\<notin> A \\<Longrightarrow> P A (Suc k) \\<Longrightarrow> P (insert x A) k \\<Longrightarrow> P (insert x A) (Suc k)\"\n  shows \"P A k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P A k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P A k", "from \\<open>finite A\\<close>"], ["proof (chain)\npicking this:\n  finite A", "have \"R A k\""], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. R A k", "by (subst R_eq_finite)"], ["proof (state)\nthis:\n  R A k\n\ngoal (1 subgoal):\n 1. P A k", "from this assms(2-4)"], ["proof (chain)\npicking this:\n  R A k\n  finite ?A \\<Longrightarrow> P ?A 0\n  P {} ?k\n  \\<lbrakk>finite ?A; ?x \\<notin> ?A; P ?A (Suc ?k);\n   P (insert ?x ?A) ?k\\<rbrakk>\n  \\<Longrightarrow> P (insert ?x ?A) (Suc ?k)", "show ?thesis"], ["proof (prove)\nusing this:\n  R A k\n  finite ?A \\<Longrightarrow> P ?A 0\n  P {} ?k\n  \\<lbrakk>finite ?A; ?x \\<notin> ?A; P ?A (Suc ?k);\n   P (insert ?x ?A) ?k\\<rbrakk>\n  \\<Longrightarrow> P (insert ?x ?A) (Suc ?k)\n\ngoal (1 subgoal):\n 1. P A k", "by (induct A k) auto"], ["proof (state)\nthis:\n  P A k\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Finiteness of Sets of Multisets\\<close>"], ["", "lemma finite_multisets:\n  assumes \"finite A\"\n  shows \"finite {M. set_mset M \\<subseteq> A \\<and> size M = k}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {M. set_mset M \\<subseteq> A \\<and> size M = k}", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. finite {M. set_mset M \\<subseteq> A \\<and> size M = k}", "proof (induct A k rule: finite_set_and_nat_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>A.\n       finite A \\<Longrightarrow>\n       finite {M. set_mset M \\<subseteq> A \\<and> size M = 0}\n 2. \\<And>k. finite {M. set_mset M \\<subseteq> {} \\<and> size M = k}\n 3. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k};\n        finite\n         {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k}", "case zero"], ["proof (state)\nthis:\n  finite A_\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       finite A \\<Longrightarrow>\n       finite {M. set_mset M \\<subseteq> A \\<and> size M = 0}\n 2. \\<And>k. finite {M. set_mset M \\<subseteq> {} \\<and> size M = k}\n 3. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k};\n        finite\n         {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k}", "from this"], ["proof (chain)\npicking this:\n  finite A_", "show ?case"], ["proof (prove)\nusing this:\n  finite A_\n\ngoal (1 subgoal):\n 1. finite {M. set_mset M \\<subseteq> A_ \\<and> size M = 0}", "by auto"], ["proof (state)\nthis:\n  finite {M. set_mset M \\<subseteq> A_ \\<and> size M = 0}\n\ngoal (2 subgoals):\n 1. \\<And>k. finite {M. set_mset M \\<subseteq> {} \\<and> size M = k}\n 2. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k};\n        finite\n         {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k. finite {M. set_mset M \\<subseteq> {} \\<and> size M = k}\n 2. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k};\n        finite\n         {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k}", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>k. finite {M. set_mset M \\<subseteq> {} \\<and> size M = k}\n 2. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k};\n        finite\n         {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k}", "from this"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {M. set_mset M \\<subseteq> {} \\<and> size M = k_}", "by auto"], ["proof (state)\nthis:\n  finite {M. set_mset M \\<subseteq> {} \\<and> size M = k_}\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k};\n        finite\n         {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k};\n        finite\n         {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k}", "case (step A k x)"], ["proof (state)\nthis:\n  finite A\n  x \\<notin> A\n  finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k}\n  finite {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k};\n        finite\n         {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k}", "from this"], ["proof (chain)\npicking this:\n  finite A\n  x \\<notin> A\n  finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k}\n  finite {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "show ?case"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k}\n  finite {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. finite {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k}", "using set_of_multisets_eq[OF \\<open>x \\<notin> A\\<close>]"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k}\n  finite {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc ?k} =\n  {M. set_mset M \\<subseteq> A \\<and> size M = Suc ?k} \\<union>\n  (\\<lambda>M. M + {#x#}) `\n  {M. set_mset M \\<subseteq> insert x A \\<and> size M = ?k}\n\ngoal (1 subgoal):\n 1. finite {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k}", "by simp"], ["proof (state)\nthis:\n  finite {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k}\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Cardinality of Multisets\\<close>"], ["", "lemma card_multisets:\n  assumes \"finite A\"\n  shows \"card {M. set_mset M \\<subseteq> A \\<and> size M = k} = (card A + k - 1) choose k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> A \\<and> size M = k} =\n    card A + k - 1 choose k", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> A \\<and> size M = k} =\n    card A + k - 1 choose k", "proof (induct A k rule: finite_set_and_nat_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>A.\n       finite A \\<Longrightarrow>\n       card {M. set_mset M \\<subseteq> A \\<and> size M = 0} =\n       card A + 0 - 1 choose 0\n 2. \\<And>k.\n       card {M. set_mset M \\<subseteq> {} \\<and> size M = k} =\n       card {} + k - 1 choose k\n 3. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "case (zero A)"], ["proof (state)\nthis:\n  finite A\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       finite A \\<Longrightarrow>\n       card {M. set_mset M \\<subseteq> A \\<and> size M = 0} =\n       card A + 0 - 1 choose 0\n 2. \\<And>k.\n       card {M. set_mset M \\<subseteq> {} \\<and> size M = k} =\n       card {} + k - 1 choose k\n 3. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "assume \"finite (A :: 'a set)\""], ["proof (state)\nthis:\n  finite A\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       finite A \\<Longrightarrow>\n       card {M. set_mset M \\<subseteq> A \\<and> size M = 0} =\n       card A + 0 - 1 choose 0\n 2. \\<And>k.\n       card {M. set_mset M \\<subseteq> {} \\<and> size M = k} =\n       card {} + k - 1 choose k\n 3. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "have \"{M. set_mset M \\<subseteq> A \\<and> size M = 0} = {{#}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {M. set_mset M \\<subseteq> A \\<and> size M = 0} = {{#}}", "by auto"], ["proof (state)\nthis:\n  {M. set_mset M \\<subseteq> A \\<and> size M = 0} = {{#}}\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       finite A \\<Longrightarrow>\n       card {M. set_mset M \\<subseteq> A \\<and> size M = 0} =\n       card A + 0 - 1 choose 0\n 2. \\<And>k.\n       card {M. set_mset M \\<subseteq> {} \\<and> size M = k} =\n       card {} + k - 1 choose k\n 3. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "from this"], ["proof (chain)\npicking this:\n  {M. set_mset M \\<subseteq> A \\<and> size M = 0} = {{#}}", "show \"card {M. set_mset M \\<subseteq> A \\<and> size M = 0} = card A + 0 - 1 choose 0\""], ["proof (prove)\nusing this:\n  {M. set_mset M \\<subseteq> A \\<and> size M = 0} = {{#}}\n\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> A \\<and> size M = 0} =\n    card A + 0 - 1 choose 0", "by simp"], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> A \\<and> size M = 0} =\n  card A + 0 - 1 choose 0\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       card {M. set_mset M \\<subseteq> {} \\<and> size M = k} =\n       card {} + k - 1 choose k\n 2. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       card {M. set_mset M \\<subseteq> {} \\<and> size M = k} =\n       card {} + k - 1 choose k\n 2. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "case (empty k)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>k.\n       card {M. set_mset M \\<subseteq> {} \\<and> size M = k} =\n       card {} + k - 1 choose k\n 2. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "show \"card {M. set_mset M \\<subseteq> {} \\<and> size M = k} = card {} + k - 1 choose k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> {} \\<and> size M = k} =\n    card {} + k - 1 choose k", "by (cases k) (auto simp add: binomial_eq_0)"], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> {} \\<and> size M = k} =\n  card {} + k - 1 choose k\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "case (step A k x)"], ["proof (state)\nthis:\n  finite A\n  x \\<notin> A\n  card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n  card A + Suc k - 1 choose Suc k\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n  card (insert x A) + k - 1 choose k\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "let ?S\\<^sub>1 = \"{M. set_mset M \\<subseteq> A \\<and> size M = Suc k}\"\n  and ?S\\<^sub>2 = \"{M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "assume hyps1: \"card ?S\\<^sub>1 = card A + Suc k - 1 choose Suc k\""], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n  card A + Suc k - 1 choose Suc k\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "assume hyps2: \"card ?S\\<^sub>2 = card (insert x A) + k - 1 choose k\""], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n  card (insert x A) + k - 1 choose k\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "have finite_sets: \"finite ?S\\<^sub>1\" \"finite ((\\<lambda>M. M + {#x#}) ` ?S\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} &&&\n    finite\n     ((\\<lambda>M. M + {#x#}) `\n      {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})", "using \\<open>finite A\\<close>"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} &&&\n    finite\n     ((\\<lambda>M. M + {#x#}) `\n      {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})", "by (auto simp add: finite_multisets)"], ["proof (state)\nthis:\n  finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k}\n  finite\n   ((\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "have inj: \"inj_on (\\<lambda>M. M + {#x#}) ?S\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>M. M + {#x#})\n     {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "by (rule inj_onI) auto"], ["proof (state)\nthis:\n  inj_on (\\<lambda>M. M + {#x#})\n   {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "have \"card {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    card (?S\\<^sub>1 \\<union> (\\<lambda>M. M + {#x#}) ` ?S\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    card\n     ({M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n      (\\<lambda>M. M + {#x#}) `\n      {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})", "using set_of_multisets_eq \\<open>x \\<notin> A\\<close>"], ["proof (prove)\nusing this:\n  ?x \\<notin> ?A \\<Longrightarrow>\n  {M. set_mset M \\<subseteq> insert ?x ?A \\<and> size M = Suc ?k} =\n  {M. set_mset M \\<subseteq> ?A \\<and> size M = Suc ?k} \\<union>\n  (\\<lambda>M. M + {#?x#}) `\n  {M. set_mset M \\<subseteq> insert ?x ?A \\<and> size M = ?k}\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    card\n     ({M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n      (\\<lambda>M. M + {#x#}) `\n      {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})", "by fastforce"], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n  card\n   ({M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "also"], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n  card\n   ({M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "have \"\\<dots> = card ?S\\<^sub>1 + card ((\\<lambda>M. M + {#x#}) ` ?S\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n      (\\<lambda>M. M + {#x#}) `\n      {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}) =\n    card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n    card\n     ((\\<lambda>M. M + {#x#}) `\n      {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})", "using finite_sets \\<open>x \\<notin> A\\<close>"], ["proof (prove)\nusing this:\n  finite {M. set_mset M \\<subseteq> A \\<and> size M = Suc k}\n  finite\n   ((\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. card\n     ({M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n      (\\<lambda>M. M + {#x#}) `\n      {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}) =\n    card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n    card\n     ((\\<lambda>M. M + {#x#}) `\n      {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})", "by (subst card_Un_disjoint) auto"], ["proof (state)\nthis:\n  card\n   ({M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}) =\n  card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n  card\n   ((\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "also"], ["proof (state)\nthis:\n  card\n   ({M. set_mset M \\<subseteq> A \\<and> size M = Suc k} \\<union>\n    (\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}) =\n  card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n  card\n   ((\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k})\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "have \"\\<dots> = card ?S\\<^sub>1 + card ?S\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n    card\n     ((\\<lambda>M. M + {#x#}) `\n      {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}) =\n    card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n    card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "using inj"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>M. M + {#x#})\n   {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n    card\n     ((\\<lambda>M. M + {#x#}) `\n      {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}) =\n    card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n    card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}", "by (auto intro: card_image)"], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n  card\n   ((\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}) =\n  card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "also"], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n  card\n   ((\\<lambda>M. M + {#x#}) `\n    {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}) =\n  card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "have \"\\<dots> = card A + Suc k - 1 choose Suc k + (card (insert x A) + k - 1 choose k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n    card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n    card A + Suc k - 1 choose Suc k + (card (insert x A) + k - 1 choose k)", "using hyps1 hyps2"], ["proof (prove)\nusing this:\n  card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n  card A + Suc k - 1 choose Suc k\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n  card (insert x A) + k - 1 choose k\n\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n    card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n    card A + Suc k - 1 choose Suc k + (card (insert x A) + k - 1 choose k)", "by simp"], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n  card A + Suc k - 1 choose Suc k + (card (insert x A) + k - 1 choose k)\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "also"], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} +\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n  card A + Suc k - 1 choose Suc k + (card (insert x A) + k - 1 choose k)\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "have \"\\<dots> = card (insert x A) + Suc k - 1 choose Suc k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card A + Suc k - 1 choose Suc k + (card (insert x A) + k - 1 choose k) =\n    card (insert x A) + Suc k - 1 choose Suc k", "using \\<open>x \\<notin> A\\<close> \\<open>finite A\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> A\n  finite A\n\ngoal (1 subgoal):\n 1. card A + Suc k - 1 choose Suc k + (card (insert x A) + k - 1 choose k) =\n    card (insert x A) + Suc k - 1 choose Suc k", "by simp"], ["proof (state)\nthis:\n  card A + Suc k - 1 choose Suc k + (card (insert x A) + k - 1 choose k) =\n  card (insert x A) + Suc k - 1 choose Suc k\n\ngoal (1 subgoal):\n 1. \\<And>A k x.\n       \\<lbrakk>finite A; x \\<notin> A;\n        card {M. set_mset M \\<subseteq> A \\<and> size M = Suc k} =\n        card A + Suc k - 1 choose Suc k;\n        card {M. set_mset M \\<subseteq> insert x A \\<and> size M = k} =\n        card (insert x A) + k - 1 choose k\\<rbrakk>\n       \\<Longrightarrow> card\n                          {M. set_mset M \\<subseteq> insert x A \\<and>\n                              size M = Suc k} =\n                         card (insert x A) + Suc k - 1 choose Suc k", "finally"], ["proof (chain)\npicking this:\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n  card (insert x A) + Suc k - 1 choose Suc k", "show ?case"], ["proof (prove)\nusing this:\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n  card (insert x A) + Suc k - 1 choose Suc k\n\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n    card (insert x A) + Suc k - 1 choose Suc k", "."], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> insert x A \\<and> size M = Suc k} =\n  card (insert x A) + Suc k - 1 choose Suc k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_too_small_multisets_covering_set:\n  assumes \"finite A\"\n  assumes \"k < card A\"\n  shows \"card {M. set_mset M = A \\<and> size M = k} = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = 0", "from \\<open>k < card A\\<close>"], ["proof (chain)\npicking this:\n  k < card A", "have eq: \"{M. set_mset M = A \\<and> size M = k} = {}\""], ["proof (prove)\nusing this:\n  k < card A\n\ngoal (1 subgoal):\n 1. {M. set_mset M = A \\<and> size M = k} = {}", "using card_set_mset_leq Collect_empty_eq leD"], ["proof (prove)\nusing this:\n  k < card A\n  card (set_mset ?M) \\<le> size ?M\n  (Collect ?P = {}) = (\\<forall>x. \\<not> ?P x)\n  ?y \\<le> ?x \\<Longrightarrow> \\<not> ?x < ?y\n\ngoal (1 subgoal):\n 1. {M. set_mset M = A \\<and> size M = k} = {}", "by auto"], ["proof (state)\nthis:\n  {M. set_mset M = A \\<and> size M = k} = {}\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = 0", "from this"], ["proof (chain)\npicking this:\n  {M. set_mset M = A \\<and> size M = k} = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  {M. set_mset M = A \\<and> size M = k} = {}\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = 0", "by (metis card.empty)"], ["proof (state)\nthis:\n  card {M. set_mset M = A \\<and> size M = k} = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_multisets_covering_set:\n  assumes \"finite A\"\n  assumes \"card A \\<le> k\"\n  shows \"card {M. set_mset M = A \\<and> size M = k} = (k - 1) choose (k - card A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "have \"{M. set_mset M = A \\<and> size M = k} = (\\<lambda>M. M + mset_set A) `\n    {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\" (is \"?S = ?f ` ?T\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {M. set_mset M = A \\<and> size M = k} =\n    (\\<lambda>M. M + mset_set A) `\n    {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {M. set_mset M = A \\<and> size M = k}\n    \\<subseteq> (\\<lambda>M. M + mset_set A) `\n                {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n 2. (\\<lambda>M. M + mset_set A) `\n    {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n    \\<subseteq> {M. set_mset M = A \\<and> size M = k}", "show \"?S \\<subseteq> ?f ` ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {M. set_mset M = A \\<and> size M = k}\n    \\<subseteq> (\\<lambda>M. M + mset_set A) `\n                {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {M. set_mset M = A \\<and> size M = k} \\<Longrightarrow>\n       x \\<in> (\\<lambda>M. M + mset_set A) `\n               {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "fix M"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {M. set_mset M = A \\<and> size M = k} \\<Longrightarrow>\n       x \\<in> (\\<lambda>M. M + mset_set A) `\n               {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "assume \"M \\<in> ?S\""], ["proof (state)\nthis:\n  M \\<in> {M. set_mset M = A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {M. set_mset M = A \\<and> size M = k} \\<Longrightarrow>\n       x \\<in> (\\<lambda>M. M + mset_set A) `\n               {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "from this"], ["proof (chain)\npicking this:\n  M \\<in> {M. set_mset M = A \\<and> size M = k}", "have \"M = M - mset_set A + mset_set A\""], ["proof (prove)\nusing this:\n  M \\<in> {M. set_mset M = A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. M = M - mset_set A + mset_set A", "by (auto simp add: mset_set_set_mset_subseteq subset_mset.diff_add)"], ["proof (state)\nthis:\n  M = M - mset_set A + mset_set A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {M. set_mset M = A \\<and> size M = k} \\<Longrightarrow>\n       x \\<in> (\\<lambda>M. M + mset_set A) `\n               {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "moreover"], ["proof (state)\nthis:\n  M = M - mset_set A + mset_set A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {M. set_mset M = A \\<and> size M = k} \\<Longrightarrow>\n       x \\<in> (\\<lambda>M. M + mset_set A) `\n               {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "from \\<open>M \\<in> ?S\\<close>"], ["proof (chain)\npicking this:\n  M \\<in> {M. set_mset M = A \\<and> size M = k}", "have \"M - mset_set A \\<in> ?T\""], ["proof (prove)\nusing this:\n  M \\<in> {M. set_mset M = A \\<and> size M = k}\n\ngoal (1 subgoal):\n 1. M - mset_set A\n    \\<in> {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "by (auto simp add: mset_set_set_mset_subseteq size_Diff_submset size_mset_set_eq_card in_diffD)"], ["proof (state)\nthis:\n  M - mset_set A\n  \\<in> {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {M. set_mset M = A \\<and> size M = k} \\<Longrightarrow>\n       x \\<in> (\\<lambda>M. M + mset_set A) `\n               {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "ultimately"], ["proof (chain)\npicking this:\n  M = M - mset_set A + mset_set A\n  M - mset_set A\n  \\<in> {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "show \"M \\<in> ?f ` ?T\""], ["proof (prove)\nusing this:\n  M = M - mset_set A + mset_set A\n  M - mset_set A\n  \\<in> {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n\ngoal (1 subgoal):\n 1. M \\<in> (\\<lambda>M. M + mset_set A) `\n            {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "by auto"], ["proof (state)\nthis:\n  M \\<in> (\\<lambda>M. M + mset_set A) `\n          {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {M. set_mset M = A \\<and> size M = k}\n  \\<subseteq> (\\<lambda>M. M + mset_set A) `\n              {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n\ngoal (1 subgoal):\n 1. (\\<lambda>M. M + mset_set A) `\n    {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n    \\<subseteq> {M. set_mset M = A \\<and> size M = k}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>M. M + mset_set A) `\n    {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n    \\<subseteq> {M. set_mset M = A \\<and> size M = k}", "from \\<open>finite A\\<close> \\<open>card A \\<le> k\\<close>"], ["proof (chain)\npicking this:\n  finite A\n  card A \\<le> k", "show \"?f ` ?T \\<subseteq> ?S\""], ["proof (prove)\nusing this:\n  finite A\n  card A \\<le> k\n\ngoal (1 subgoal):\n 1. (\\<lambda>M. M + mset_set A) `\n    {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n    \\<subseteq> {M. set_mset M = A \\<and> size M = k}", "by (auto simp add: size_mset_set_eq_card)+"], ["proof (state)\nthis:\n  (\\<lambda>M. M + mset_set A) `\n  {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n  \\<subseteq> {M. set_mset M = A \\<and> size M = k}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {M. set_mset M = A \\<and> size M = k} =\n  (\\<lambda>M. M + mset_set A) `\n  {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "moreover"], ["proof (state)\nthis:\n  {M. set_mset M = A \\<and> size M = k} =\n  (\\<lambda>M. M + mset_set A) `\n  {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "have \"inj_on ?f ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>M. M + mset_set A)\n     {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "by (rule inj_onI) auto"], ["proof (state)\nthis:\n  inj_on (\\<lambda>M. M + mset_set A)\n   {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "ultimately"], ["proof (chain)\npicking this:\n  {M. set_mset M = A \\<and> size M = k} =\n  (\\<lambda>M. M + mset_set A) `\n  {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n  inj_on (\\<lambda>M. M + mset_set A)\n   {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "have \"card ?S = card ?T\""], ["proof (prove)\nusing this:\n  {M. set_mset M = A \\<and> size M = k} =\n  (\\<lambda>M. M + mset_set A) `\n  {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n  inj_on (\\<lambda>M. M + mset_set A)\n   {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} =\n    card {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}", "by (simp add: card_image)"], ["proof (state)\nthis:\n  card {M. set_mset M = A \\<and> size M = k} =\n  card {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "also"], ["proof (state)\nthis:\n  card {M. set_mset M = A \\<and> size M = k} =\n  card {M. set_mset M \\<subseteq> A \\<and> size M = k - card A}\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "have \"\\<dots> = card A + (k - card A) - 1 choose (k - card A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> A \\<and> size M = k - card A} =\n    card A + (k - card A) - 1 choose (k - card A)", "using \\<open>finite A\\<close>"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. card {M. set_mset M \\<subseteq> A \\<and> size M = k - card A} =\n    card A + (k - card A) - 1 choose (k - card A)", "by (simp only: card_multisets)"], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> A \\<and> size M = k - card A} =\n  card A + (k - card A) - 1 choose (k - card A)\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "also"], ["proof (state)\nthis:\n  card {M. set_mset M \\<subseteq> A \\<and> size M = k - card A} =\n  card A + (k - card A) - 1 choose (k - card A)\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "have \"\\<dots> = (k - 1) choose (k - card A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card A + (k - card A) - 1 choose (k - card A) =\n    k - 1 choose (k - card A)", "using \\<open>card A \\<le> k\\<close>"], ["proof (prove)\nusing this:\n  card A \\<le> k\n\ngoal (1 subgoal):\n 1. card A + (k - card A) - 1 choose (k - card A) =\n    k - 1 choose (k - card A)", "by auto"], ["proof (state)\nthis:\n  card A + (k - card A) - 1 choose (k - card A) = k - 1 choose (k - card A)\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "finally"], ["proof (chain)\npicking this:\n  card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "show ?thesis"], ["proof (prove)\nusing this:\n  card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)\n\ngoal (1 subgoal):\n 1. card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)", "."], ["proof (state)\nthis:\n  card {M. set_mset M = A \\<and> size M = k} = k - 1 choose (k - card A)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}