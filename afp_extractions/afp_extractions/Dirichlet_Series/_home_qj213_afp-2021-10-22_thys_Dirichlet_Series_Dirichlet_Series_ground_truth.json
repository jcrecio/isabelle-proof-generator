{"file_name": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series/Dirichlet_Series.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series", "problem_names": ["lemma fds_nth_fds: \"fds_nth (fds f) n = (if n = 0 then 0 else f n)\"", "lemma fds_nth_fds': \"f 0 = 0 \\<Longrightarrow> fds_nth (fds f) = f\"", "lemma fds_nth_0 [simp]: \"fds_nth f 0 = 0\"", "lemma fds_nth_fds_pos [simp]: \"n > 0 \\<Longrightarrow> fds_nth (fds f) n = f n\"", "lemma fds_fds_nth [simp]: \"fds (fds_nth f) = f\"", "lemma fds_eq_fds_iff:\n  \"fds f = fds g \\<longleftrightarrow> (\\<forall>n>0. f n = g n)\"", "lemma fds_eq_fds_iff': \"f 0 = g 0 \\<Longrightarrow> fds f = fds g \\<longleftrightarrow> f = g\"", "lemma fds_eqI [intro?]:\n  assumes \"(\\<And>n. n > 0 \\<Longrightarrow> fds_nth f n = fds_nth g n)\"\n  shows   \"f = g\"", "lemma fds_cong [cong]: \"(\\<And>n. n > 0 \\<Longrightarrow> f n = (g n :: 'a :: zero)) \\<Longrightarrow> fds f = fds g\"", "lemma fds_eq_iff: \"f = g \\<longleftrightarrow> (\\<forall>n>0. fds_nth f n = fds_nth g n)\"", "lemma dirichlet_prod_fds_nth_fds_left [simp]:\n  \"dirichlet_prod (fds_nth (fds f)) g = dirichlet_prod f g\"", "lemma dirichlet_prod_fds_nth_fds_right [simp]:\n  \"dirichlet_prod f (fds_nth (fds g)) = dirichlet_prod f g\"", "lemma fds_nth_zero [simp]: \"fds_nth 0 = (\\<lambda>_. 0)\"", "lemma fds_nth_one: \"fds_nth 1 = (\\<lambda>n. if n = 1 then 1 else 0)\"", "lemma fds_nth_one_Suc_0 [simp]: \"fds_nth 1 (Suc 0) = 1\"", "lemma fds_nth_one_not_Suc_0 [simp]: \"n \\<noteq> Suc 0 \\<Longrightarrow> fds_nth 1 n = 0\"", "lemma fds_nth_plus [simp]: \n  \"fds_nth (f + g) = (\\<lambda>n. fds_nth f n + fds_nth g n :: 'a :: monoid_add)\"", "lemma fds_nth_minus [simp]: \n  \"fds_nth (f - g) = (\\<lambda>n. fds_nth f n - fds_nth g n :: 'a :: {cancel_comm_monoid_add})\"", "lemma fds_nth_uminus [simp]: \"fds_nth (-g) = (\\<lambda>n. - fds_nth g n :: 'a :: group_add)\"", "lemma fds_nth_mult: \"fds_nth (f * g) = dirichlet_prod (fds_nth f) (fds_nth g)\"", "lemma fds_nth_mult_const_left [simp]: \"fds_nth (fds_const c * f) n = c * fds_nth f n\"", "lemma fds_nth_mult_const_right [simp]: \"fds_nth (f * fds_const c) n = fds_nth f n * c\"", "lemma fds_nth_scaleR [simp]: \"fds_nth (c *\\<^sub>R f) = (\\<lambda>n. c *\\<^sub>R fds_nth f n)\"", "lemma fds_nth_sum [simp]: \"fds_nth (sum f A) n = sum (\\<lambda>x. fds_nth (f x) n) A\"", "lemma sum_fds [simp]: \"(\\<Sum>x\\<in>A. fds (f x)) = fds (\\<lambda>n. \\<Sum>x\\<in>A. f x n)\"", "lemma fds_nth_const: \"fds_nth (fds_const c) = (\\<lambda>n. if n = 1 then c else 0)\"", "lemma fds_nth_const_Suc_0 [simp]: \"fds_nth (fds_const c) (Suc 0) = c\"", "lemma fds_nth_const_not_Suc_0 [simp]: \"n \\<noteq> 1 \\<Longrightarrow> fds_nth (fds_const c) n = 0\"", "lemma fds_const_zero [simp]: \"fds_const 0 = 0\"", "lemma fds_const_one [simp]: \"fds_const 1 = 1\"", "lemma fds_const_add [simp]: \"fds_const (a + b :: 'a :: monoid_add) = fds_const a + fds_const b\"", "lemma fds_const_minus [simp]: \n  \"fds_const (a - b :: 'a :: cancel_comm_monoid_add) = fds_const a - fds_const b\"", "lemma fds_const_uminus [simp]: \n  \"fds_const (- b :: 'a :: ab_group_add) = - fds_const b\"", "lemma fds_const_mult [simp]: \n  \"fds_const (a * b :: 'a :: semiring_0) = fds_const a * fds_const b\"", "lemma fds_const_of_nat [simp]: \"fds_const (of_nat c) = of_nat c\"", "lemma fds_const_of_int [simp]: \"fds_const (of_int c) = of_int c\"", "lemma fds_const_of_real [simp]: \"fds_const (of_real c) = of_real c\"", "lemma numeral_fds: \"numeral n = fds_const (numeral n)\"", "lemma fds_ind_False [simp]: \"fds_ind (\\<lambda>_. False) = 0\"", "lemma fds_commutes: \n  assumes \"\\<And>m n. m > 0 \\<Longrightarrow> n > 0 \\<Longrightarrow> fds_nth f m * fds_nth g n = fds_nth g n * fds_nth f m\"\n  shows   \"f * g = g * f\"", "lemma fds_nth_mult_Suc_0 [simp]: \n  \"fds_nth (f * g) (Suc 0) = fds_nth f (Suc 0) * fds_nth g (Suc 0)\"", "lemma fds_nth_inverse: \n  \"fds_nth (inverse f) = dirichlet_inverse (fds_nth f) (inverse (fds_nth f 1))\"", "lemma inverse_fds_nonunit:\n  \"fds_nth f 1 = (0 :: 'a :: field) \\<Longrightarrow> inverse f = 0\"", "lemma inverse_0_fds [simp]: \"inverse (0 :: 'a :: field fds) = 0\"", "lemma fds_left_inverse: \n  \"fds_nth f 1 \\<noteq> (0 :: 'a :: field) \\<Longrightarrow> inverse f * f = 1\"", "lemma fds_right_inverse: \n  \"fds_nth f 1 \\<noteq> (0 :: 'a :: field) \\<Longrightarrow> f * inverse f = 1\"", "lemma fds_left_inverse_unique:\n  assumes \"f * g = (1 :: 'a :: field fds)\"\n  shows   \"f = inverse g\"", "lemma fds_right_inverse_unique:\n  assumes \"f * g = (1 :: 'a :: field fds)\"\n  shows   \"g = inverse f\"", "lemma inverse_1_fds [simp]: \"inverse (1 :: 'a :: field fds) = 1\"", "lemma inverse_const_fds [simp]: \n  \"inverse (fds_const c :: 'a :: field fds) = fds_const (inverse c)\"", "lemma inverse_mult_fds: \"inverse (f * g :: 'a :: field fds) = inverse f * inverse g\"", "lemma fds_zeta_altdef: \"fds_zeta = fds (\\<lambda>n. if n = 0 then 0 else 1)\"", "lemma fds_nth_zeta: \"fds_nth fds_zeta = (\\<lambda>n. if n = 0 then 0 else 1)\"", "lemma fds_nth_zeta_pos [simp]: \"n > 0 \\<Longrightarrow> fds_nth fds_zeta n = 1\"", "lemma fds_zeta_commutes: \"fds_zeta * (f :: 'a :: semiring_1 fds) = f * fds_zeta\"", "lemma fds_ind_True [simp]: \"fds_ind (\\<lambda>_. True) = fds_zeta\"", "lemma finite_extensional_prod_nat: \n  assumes \"finite A\" \"b > 0\"\n  shows   \"finite {d \\<in> extensional A. prod d A = (b :: nat)}\"", "lemma fds_nth_prod:\n  assumes \"finite A\" \"A \\<noteq> {}\" \"n > 0\"\n  shows   \"fds_nth (\\<Prod>x\\<in>A. f x) n = \n             (\\<Sum>d | d \\<in> extensional A \\<and> prod d A = n. \\<Prod>x\\<in>A. fds_nth (f x) (d x))\"", "lemma fds_nth_power_Suc_0 [simp]: \"fds_nth (f ^ n) (Suc 0) = fds_nth f (Suc 0) ^ n\"", "lemma fds_nth_prod_Suc_0 [simp]: \"fds_nth (prod f A) (Suc 0) = (\\<Prod>x\\<in>A. fds_nth (f x) (Suc 0))\"", "lemma fds_nth_power_eq_0:\n  assumes \"n < 2 ^ k\" \"fds_nth f 1 = 0\"\n  shows   \"fds_nth (f ^ k) n = 0\"", "lemma nat_power_of_nat [simp]: \"m > 0 \\<Longrightarrow> nat_power m (of_nat n) = of_nat (m ^ n)\"", "lemma nat_power_power_left: \"m > 0 \\<Longrightarrow> nat_power (m ^ k) n = nat_power m n ^ k\"", "lemma nat_power_diff: \"n > 0 \\<Longrightarrow> nat_power n (a - b) = nat_power n a / nat_power n b\"", "lemma fds_nth_shift [simp]: \"fds_nth (fds_shift c f) n = fds_nth f n * nat_power n c\"", "lemma fds_shift_shift [simp]: \"fds_shift c (fds_shift c' f) = fds_shift (c' + c) f\"", "lemma fds_shift_zero [simp]: \"fds_shift c 0 = 0\"", "lemma fds_shift_1 [simp]: \"fds_shift a 1 = 1\"", "lemma fds_shift_const [simp]: \"fds_shift a (fds_const c) = fds_const c\"", "lemma fds_shift_add [simp]: \n  fixes f g :: \"'a :: {monoid_add, nat_power} fds\"\n  shows \"fds_shift c (f + g) = fds_shift c f + fds_shift c g\"", "lemma fds_shift_minus [simp]: \n  fixes f g :: \"'a :: {comm_semiring_1_cancel, nat_power} fds\"\n  shows \"fds_shift c (f - g) = fds_shift c f - fds_shift c g\"", "lemma fds_shift_uminus [simp]: \n  fixes f :: \"'a :: {ring, nat_power} fds\"\n  shows \"fds_shift c (-f) = -fds_shift c f\"", "lemma fds_shift_mult [simp]:\n  fixes f g :: \"'a :: {comm_semiring, nat_power} fds\"\n  shows \"fds_shift c (f * g) = fds_shift c f * fds_shift c g\"", "lemma fds_shift_power [simp]:\n  fixes f :: \"'a :: {comm_semiring, nat_power} fds\"\n  shows \"fds_shift c (f ^ n) = fds_shift c f ^ n\"", "lemma fds_shift_by_0 [simp]: \"fds_shift 0 f = f\"", "lemma fds_shift_inverse [simp]: \n  \"fds_shift (a :: 'a :: {field, nat_power}) (inverse f) = inverse (fds_shift a f)\"", "lemma fds_shift_divide [simp]: \n  \"fds_shift (a :: 'a :: {field, nat_power}) (f / g) = fds_shift a f / fds_shift a g\"", "lemma fds_shift_sum [simp]: \"fds_shift a (\\<Sum>x\\<in>A. f x) = (\\<Sum>x\\<in>A. fds_shift a (f x))\"", "lemma fds_shift_prod [simp]: \"fds_shift a (\\<Prod>x\\<in>A. f x) = (\\<Prod>x\\<in>A. fds_shift a (f x))\"", "lemma fds_scale_0 [simp]: \"fds_scale 0 f = 0\"", "lemma fds_scale_1 [simp]: \"fds_scale 1 f = f\"", "lemma fds_nth_scale_power [simp]:\n  \"c > 0 \\<Longrightarrow> fds_nth (fds_scale c f) (n ^ c) = fds_nth f n\"", "lemma fds_nth_scale_nonpower [simp]:\n  \"\\<not>is_nth_power c n \\<Longrightarrow>  fds_nth (fds_scale c f) n = 0\"", "lemma fds_nth_scale:\n  \"fds_nth (fds_scale c f) n = \n     (if n > 0 \\<and> is_nth_power c n then fds_nth f (nth_root_nat c n) else 0)\"", "lemma fds_scale_const [simp]: \"c > 0 \\<Longrightarrow> fds_scale c (fds_const c') = fds_const c'\"", "lemma fds_scale_zero [simp]: \"fds_scale c 0 = 0\"", "lemma fds_scale_one [simp]: \"c > 0 \\<Longrightarrow> fds_scale c 1 = 1\"", "lemma fds_scale_of_nat [simp]: \"c > 0 \\<Longrightarrow> fds_scale c (of_nat n) = of_nat n\"", "lemma fds_scale_of_int [simp]: \"c > 0 \\<Longrightarrow> fds_scale c (of_int n) = of_int n\"", "lemma fds_scale_numeral [simp]: \"c > 0 \\<Longrightarrow> fds_scale c (numeral n) = numeral n\"", "lemma fds_scale_scale: \"fds_scale c (fds_scale c' f) = fds_scale (c * c') f\"", "lemma fds_scale_add [simp]: \n  fixes f g :: \"'a :: monoid_add fds\"\n  shows \"fds_scale c (f + g) = fds_scale c f + fds_scale c g\"", "lemma fds_scale_minus [simp]: \n  fixes f g :: \"'a :: {cancel_comm_monoid_add} fds\"\n  shows \"fds_scale c (f - g) = fds_scale c f - fds_scale c g\"", "lemma fds_scale_uminus [simp]: \n  fixes f :: \"'a :: group_add fds\"\n  shows \"fds_scale c (-f) = -fds_scale c f\"", "lemma fds_scale_mult [simp]: \n  fixes f g :: \"'a :: semiring_0 fds\"\n  shows \"fds_scale c (f * g) = fds_scale c f * fds_scale c g\"", "lemma fds_scale_shift: \n  \"fds_shift d (fds_scale c f) = fds_scale c (fds_shift (c * d) f)\"", "lemma fds_ind_nth_power: \"k > 0 \\<Longrightarrow> fds_ind (is_nth_power k) = fds_scale k fds_zeta\"", "lemma fds_nth_deriv: \"fds_nth (fds_deriv f) n = -ln (real n) *\\<^sub>R fds_nth f n\"", "lemma fds_deriv_const [simp]: \"fds_deriv (fds_const c) = 0\"", "lemma fds_deriv_0 [simp]: \"fds_deriv 0 = 0\"", "lemma fds_deriv_1 [simp]: \"fds_deriv 1 = 0\"", "lemma fds_deriv_of_nat [simp]: \"fds_deriv (of_nat n) = 0\"", "lemma fds_deriv_of_int [simp]: \"fds_deriv (of_int n) = 0\"", "lemma fds_deriv_of_real [simp]: \"fds_deriv (of_real n) = 0\"", "lemma fds_deriv_uminus [simp]: \"fds_deriv (-f) = -fds_deriv f\"", "lemma fds_deriv_add [simp]: \"fds_deriv (f + g) = fds_deriv f + fds_deriv g\"", "lemma fds_deriv_minus [simp]: \"fds_deriv (f - g) = fds_deriv f - fds_deriv g\"", "lemma fds_deriv_times [simp]: \n  \"fds_deriv (f * g) = fds_deriv f * g + f * fds_deriv g\"", "lemma fds_deriv_inverse [simp]:\n  fixes f :: \"'a :: {real_algebra, field} fds\"\n  assumes \"fds_nth f (Suc 0) \\<noteq> 0\"\n  shows   \"fds_deriv (inverse f) = -fds_deriv f / f ^ 2\"", "lemma fds_deriv_shift [simp]: \"fds_deriv (fds_shift c f) = fds_shift c (fds_deriv f)\"", "lemma fds_deriv_scale: \"fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)\"", "lemma fds_deriv_eq_imp_eq:\n  assumes \"fds_deriv f = fds_deriv g\" \"fds_nth f (Suc 0) = fds_nth g (Suc 0)\"\n  shows   \"f = g\"", "lemma completely_multiplicative_fds_deriv:\n  assumes \"completely_multiplicative_function f\"\n  shows   \"fds_deriv (fds f) = -fds (\\<lambda>n. f n * mangoldt n) * fds f\"", "lemma completely_multiplicative_fds_deriv':\n  \"completely_multiplicative_function (fds_nth f) \\<Longrightarrow>\n     fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f\"", "lemma fds_deriv_zeta: \n  \"fds_deriv fds_zeta = \n     -fds mangoldt * (fds_zeta :: 'a :: {comm_semiring_1,real_algebra_1} fds)\"", "lemma fds_mangoldt_times_zeta: \"fds mangoldt * fds_zeta = fds (\\<lambda>x. of_real (ln (real x)))\"", "lemma fds_deriv_zeta': \"fds_deriv fds_zeta = \n    -fds (\\<lambda>x. of_real (ln (real x)):: 'a :: {comm_semiring_1,real_algebra_1})\"", "lemma fds_integral_0 [simp]: \"fds_integral a 0 = fds_const a\"", "lemma fds_integral_add: \"fds_integral (a + b) (f + g) = fds_integral a f + fds_integral b g\"", "lemma fds_integral_diff: \"fds_integral (a - b) (f - g) = fds_integral a f - fds_integral b g\"", "lemma fds_integral_minus: \"fds_integral (-a) (-f) = -fds_integral a f\"", "lemma fds_shift_integral: \"fds_shift b (fds_integral a f) = fds_integral a (fds_shift b f)\"", "lemma fds_deriv_fds_integral [simp]: \n    \"fds_nth f (Suc 0) = 0 \\<Longrightarrow> fds_deriv (fds_integral c f) = f\"", "lemma fds_integral_fds_deriv [simp]: \"fds_integral (fds_nth f 1) (fds_deriv f) = f\"", "lemma fds_nth_Suc_0_fds_deriv [simp]: \"fds_nth (fds_deriv f) (Suc 0) = 0\"", "lemma fds_deriv_fds_ln [simp]: \"fds_deriv (fds_ln l f) = fds_deriv f / f\"", "lemma fds_nth_Suc_0_fds_ln [simp]: \"fds_nth (fds_ln l f) (Suc 0) = l\"", "lemma fds_ln_const [simp]: \"fds_ln l (fds_const c) = fds_const l\"", "lemma fds_ln_0 [simp]: \"fds_ln l 0 = fds_const l\"", "lemma fds_ln_1 [simp]: \"fds_ln l 1 = fds_const l\"", "lemma fds_shift_ln [simp]: \"fds_shift a (fds_ln l f) = fds_ln l (fds_shift a f)\"", "lemma fds_ln_mult:\n  assumes \"fds_nth f 1 \\<noteq> 0\" \"fds_nth g 1 \\<noteq> 0\" \"l' + l'' = l\"\n  shows   \"fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g\"", "lemma fds_ln_power:\n  assumes \"fds_nth f 1 \\<noteq> 0\" \"l = of_nat n * l'\"\n  shows   \"fds_ln l (f ^ n) = of_nat n * fds_ln l' f\"", "lemma fds_ln_prod:\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> fds_nth (f x) 1 \\<noteq> 0\" \"(\\<Sum>x\\<in>A. l' x) = l\"\n  shows   \"fds_ln l (\\<Prod>x\\<in>A. f x) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))\"", "lemma fds_nth_exp_Suc_0 [simp]: \"fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1)\"", "lemma fds_exp_times_fds_nth_0:\n  \"fds_const (exp (fds_nth f (Suc 0))) * fds_exp (f - fds_const (fds_nth f (Suc 0))) = fds_exp f\"", "lemma fds_exp_const [simp]: \"fds_exp (fds_const c) = fds_const (exp c)\"", "lemma fds_exp_numeral [simp]: \"fds_exp (numeral n) = fds_const (exp (numeral n))\"", "lemma fds_exp_0 [simp]: \"fds_exp 0 = 1\"", "lemma fds_exp_1 [simp]: \"fds_exp 1 = fds_const (exp 1)\"", "lemma fds_nth_Suc_0_exp [simp]: \"fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f (Suc 0))\"", "lemma fds_nth_subseries:\n  \"fds_nth (fds_subseries P f) n = (if P n then fds_nth f n else 0)\"", "lemma fds_subseries_0 [simp]: \"fds_subseries P 0 = 0\"", "lemma fds_subseries_1 [simp]: \"P 1 \\<Longrightarrow> fds_subseries P 1 = 1\"", "lemma fds_subseries_const [simp]: \"P 1 \\<Longrightarrow> fds_subseries P (fds_const c) = fds_const c\"", "lemma fds_subseries_add [simp]: \"fds_subseries P (f + g) = fds_subseries P f + fds_subseries P g\"", "lemma fds_subseries_diff [simp]:\n  \"fds_subseries P (f - g :: 'a :: ring_1 fds) = fds_subseries P f - fds_subseries P g\"", "lemma fds_subseries_minus [simp]:\n  \"fds_subseries P (-f :: 'a :: ring_1 fds) = - fds_subseries P f\"", "lemma fds_subseries_sum [simp]: \"fds_subseries P (\\<Sum>x\\<in>A. f x) = (\\<Sum>x\\<in>A. fds_subseries P (f x))\"", "lemma fds_subseries_shift [simp]:\n  \"fds_subseries P (fds_shift c f) = fds_shift c (fds_subseries P f)\"", "lemma fds_subseries_deriv [simp]:\n  \"fds_subseries P (fds_deriv f) = fds_deriv (fds_subseries P f)\"", "lemma fds_subseries_integral [simp]:\n  \"P 1 \\<or> c = 0 \\<Longrightarrow> fds_subseries P (fds_integral c f) = fds_integral c (fds_subseries P f)\"", "lemma fds_primepow_subseries_mult [simp]:\n  fixes p :: nat\n  defines \"P \\<equiv> (\\<lambda>n. prime_factors n \\<subseteq> {p})\"\n  shows   \"fds_subseries P (f * g) = fds_subseries P f * fds_subseries P g\"", "lemma fds_primepow_subseries_power [simp]: \n  \"fds_primepow_subseries p (f ^ n) = fds_primepow_subseries p f ^ n\"", "lemma fds_primepow_subseries_prod [simp]: \n  \"fds_primepow_subseries p (\\<Prod>x\\<in>A. f x) = (\\<Prod>x\\<in>A. fds_primepow_subseries p (f x))\"", "lemma completely_multiplicative_function_only_pows:\n  assumes \"completely_multiplicative_function (fds_nth f)\"\n  shows   \"completely_multiplicative_function (fds_nth (fds_primepow_subseries p f))\"", "lemma fds_nth_truncate: \"fds_nth (fds_truncate m f) n = (if n \\<le> m then fds_nth f n else 0)\"", "lemma fds_truncate_0 [simp]: \"fds_truncate 0 f = 0\"", "lemma fds_truncate_zero [simp]: \"fds_truncate m 0 = 0\"", "lemma fds_truncate_one [simp]: \"m > 0 \\<Longrightarrow> fds_truncate m 1 = 1\"", "lemma fds_truncate_const [simp]: \"m > 0 \\<Longrightarrow> fds_truncate m (fds_const c) = fds_const c\"", "lemma fds_truncate_truncate [simp]: \"fds_truncate m (fds_truncate n f) = fds_truncate (min m n) f\"", "lemma fds_truncate_truncate' [simp]: \"fds_truncate m (fds_truncate m f) = fds_truncate m f\"", "lemma fds_truncate_shift [simp]: \"fds_truncate m (fds_shift a f) = fds_shift a (fds_truncate m f)\"", "lemma fds_truncate_add_strong: \n  \"fds_truncate m (f + g :: 'a :: monoid_add fds) = fds_truncate m f + fds_truncate m g\"", "lemma fds_truncate_add:\n  \"fds_truncate m (fds_truncate m f + fds_truncate m g :: 'a :: monoid_add fds) = \n     fds_truncate m (f + g)\"", "lemma fds_truncate_mult:\n  \"fds_truncate m (fds_truncate m f * fds_truncate m g) = fds_truncate m (f * g)\" (is \"?A = ?B\")", "lemma fds_truncate_deriv: \"fds_truncate m (fds_deriv f) = fds_deriv (fds_truncate m f)\"", "lemma fds_truncate_integral: \n  \"m > 0 \\<or> c = 0 \\<Longrightarrow> fds_truncate m (fds_integral c f) = fds_integral c (fds_truncate m f)\"", "lemma fds_truncate_power: \"fds_truncate m (fds_truncate m f ^ n) = fds_truncate m (f ^ n)\"", "lemma dirichlet_inverse_cong_simp:\n  assumes \"\\<And>m. m > 0 \\<Longrightarrow> m \\<le> n \\<Longrightarrow> f m = f' m\" \"i = i'\" \"n = n'\"\n  shows   \"dirichlet_inverse f i n = dirichlet_inverse f' i' n'\"", "lemma fds_truncate_cong: \n  \"(\\<And>n. m > 0 \\<Longrightarrow> n > 0 \\<Longrightarrow> n \\<le> m \\<Longrightarrow> fds_nth f n = fds_nth f' n) \\<Longrightarrow>\n   fds_truncate m f = fds_truncate m f'\"", "lemma fds_truncate_inverse:\n  \"fds_truncate m (inverse (fds_truncate m (f :: 'a :: field fds))) = fds_truncate m (inverse f)\"", "lemma fds_truncate_divide: \n  fixes f g :: \"'a :: field fds\"\n  shows \"fds_truncate m (fds_truncate m f / fds_truncate m g) = fds_truncate m (f / g)\"", "lemma fds_truncate_ln:\n  fixes f :: \"'a :: real_normed_field fds\"\n  shows \"fds_truncate m (fds_ln l (fds_truncate m f)) = fds_truncate m (fds_ln l f)\"", "lemma fds_truncate_exp:\n  shows \"fds_truncate m (fds_exp (fds_truncate m f)) = fds_truncate m (fds_exp f)\"", "lemma fds_eqI_truncate:\n  assumes \"\\<And>m. m > 0 \\<Longrightarrow> fds_truncate m f = fds_truncate m g\"\n  shows   \"f = g\"", "lemma fds_nth_norm [simp]: \"fds_nth (fds_norm f) n = norm (fds_nth f n)\"", "lemma fds_norm_1 [simp]: \"fds_norm 1 = 1\"", "lemma fds_nth_norm_mult_le:\n  shows \"norm (fds_nth (f * g) n) \\<le> fds_nth (fds_norm f * fds_norm g) n\"", "lemma fds_nth_norm_mult_nonneg [simp]: \"fds_nth (fds_norm f * fds_norm g) n \\<ge> 0\"", "lemma fds_nth_of_real [simp]: \"fds_nth (fds_of_real f) n = of_real (fds_nth f n)\"", "lemma fds_of_real_0 [simp]: \"fds_of_real 0 = 0\"\n  and fds_of_real_1 [simp]: \"fds_of_real 1 = 1\"\n  and fds_of_real_const [simp]: \"fds_of_real (fds_const c) = fds_const (of_real c)\"\n  and fds_of_real_minus [simp]: \"fds_of_real (-f) = -fds_of_real f\"\n  and fds_of_real_add [simp]: \"fds_of_real (f + g) = fds_of_real f + fds_of_real g\"\n  and fds_of_real_mult [simp]: \"fds_of_real (f * g) = fds_of_real f * fds_of_real g\"\n  and fds_of_real_deriv [simp]: \"fds_of_real (fds_deriv f) = fds_deriv (fds_of_real f)\"", "lemma fds_of_real_higher_deriv [simp]: \n  \"(fds_deriv ^^ n) (fds_of_real f) = fds_of_real ((fds_deriv ^^ n) f)\"", "lemma eval_fds_eqI:\n  assumes \"(\\<lambda>n. fds_nth f (Suc n) / nat_power (Suc n) s) sums L\"\n  shows   \"eval_fds f s = L\"", "lemma fds_converges_iff: \n  \"fds_converges f s \\<longleftrightarrow> (\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s\"", "lemma fds_abs_converges_imp_converges [dest, intro]: \n  \"fds_abs_converges f s \\<Longrightarrow> fds_converges f s\"", "lemma fds_converges_altdef: \n  \"fds_converges f s \\<longleftrightarrow> (\\<lambda>n. fds_nth f (Suc n) / nat_power (Suc n) s) sums eval_fds f s\"", "lemma fds_const_abs_converges [simp]: \"fds_abs_converges (fds_const c) s\"", "lemma fds_const_converges [simp]: \"fds_converges (fds_const c) s\"", "lemma eval_fds_const [simp]: \"eval_fds (fds_const c) = (\\<lambda>_. c)\"", "lemma fds_zero_abs_converges [simp]: \"fds_abs_converges 0 s\"", "lemma fds_zero_converges [simp]: \"fds_converges 0 s\"", "lemma eval_fds_zero [simp]: \"eval_fds 0 = (\\<lambda>_. 0)\"", "lemma fds_one_abs_converges [simp]: \"fds_abs_converges 1 s\"", "lemma fds_one_converges [simp]: \"fds_converges 1 s\"", "lemma fds_converges_truncate [simp]: \"fds_converges (fds_truncate n f) s\"", "lemma fds_abs_converges_truncate [simp]: \"fds_abs_converges (fds_truncate n f) s\"", "lemma fds_abs_converges_subseries [simp, intro]:\n  assumes \"fds_abs_converges f s\"\n  shows   \"fds_abs_converges (fds_subseries P f) s\"", "lemma eval_fds_one [simp]: \"eval_fds 1 = (\\<lambda>_. 1)\"", "lemma eval_fds_truncate: \"eval_fds (fds_truncate n f) s = (\\<Sum>k=1..n. fds_nth f k / nat_power k s)\"", "lemma fds_converges_add: \n  assumes \"fds_converges f s\" \"fds_converges g s\"\n  shows   \"fds_converges (f + g) s\"", "lemma fds_abs_converges_add: \n  assumes \"fds_abs_converges f s\" \"fds_abs_converges g s\"\n  shows   \"fds_abs_converges (f + g) s\"", "lemma eval_fds_add: \n  assumes \"fds_converges f s\" \"fds_converges g s\"\n  shows   \"eval_fds (f + g) s = eval_fds f s + eval_fds g s\"", "lemma fds_converges_uminus: \n  assumes \"fds_converges f s\"\n  shows   \"fds_converges (-f) s\"", "lemma The_cong: \"The P = The Q\" if \"\\<And>x. P x \\<longleftrightarrow> Q x\"", "lemma fds_abs_converges_uminus: \n  assumes \"fds_abs_converges f s\"\n  shows   \"fds_abs_converges (-f) s\"", "lemma eval_fds_uminus: \"fds_converges f s \\<Longrightarrow> eval_fds (-f) s = -eval_fds f s\"", "lemma fds_converges_diff: \n  assumes \"fds_converges f s\" \"fds_converges g s\"\n  shows   \"fds_converges (f - g) s\"", "lemma fds_abs_converges_diff: \n  assumes \"fds_abs_converges f s\" \"fds_abs_converges g s\"\n  shows   \"fds_abs_converges (f - g) s\"", "lemma eval_fds_diff: \n  assumes \"fds_converges f s\" \"fds_converges g s\"\n  shows   \"eval_fds (f - g) s = eval_fds f s - eval_fds g s\"", "lemma eval_fds_at_nat: \"eval_fds f (of_nat k) = (\\<Sum>n. fds_nth f n / of_nat n ^ k)\"", "lemma eval_fds_at_numeral: \"eval_fds f (numeral k) = (\\<Sum>n. fds_nth f n / of_nat n ^ numeral k)\"", "lemma eval_fds_at_1: \"eval_fds f 1 = (\\<Sum>n. fds_nth f n / of_nat n)\"", "lemma eval_fds_at_0: \"eval_fds f 0 = (\\<Sum>n. fds_nth f n)\"", "lemma suminf_fds_zeta_aux: \n  \"f 0 = 0 \\<Longrightarrow> (\\<Sum>n. fds_nth fds_zeta n / f n) = (\\<Sum>n. 1 / f n :: 'a :: real_normed_field)\"", "lemma fds_converges_shift [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  shows \"fds_converges (fds_shift c f) z \\<longleftrightarrow> fds_converges f (z - c)\"", "lemma fds_abs_converges_shift [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  shows \"fds_abs_converges (fds_shift c f) z \\<longleftrightarrow> fds_abs_converges f (z - c)\"", "lemma fds_eval_shift [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  shows \"eval_fds (fds_shift c f) z = eval_fds f (z - c)\"", "lemma fds_converges_scale [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  assumes c: \"c > 0\"\n  shows   \"fds_converges (fds_scale c f) z \\<longleftrightarrow> fds_converges f (of_nat c * z)\"", "lemma fds_abs_converges_scale [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  assumes c: \"c > 0\"\n  shows   \"fds_abs_converges (fds_scale c f) z \\<longleftrightarrow> fds_abs_converges f (of_nat c * z)\"", "lemma eval_fds_scale [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  assumes c: \"c > 0\"\n  shows   \"eval_fds (fds_scale c f) z = eval_fds f (of_nat c * z)\"", "lemma fds_abs_converges_integral:\n  assumes \"fds_abs_converges f s\"\n  shows   \"fds_abs_converges (fds_integral c f) s\"", "lemma fds_abs_converges_ln: \n  assumes \"fds_abs_converges (fds_deriv f / f) s\"\n  shows   \"fds_abs_converges (fds_ln l f) s\""], "translations": [["", "lemma fds_nth_fds: \"fds_nth (fds f) n = (if n = 0 then 0 else f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds f) n = (if n = 0 then 0::'a else f n)", "by transfer (simp split: nat.splits)"], ["", "lemma fds_nth_fds': \"f 0 = 0 \\<Longrightarrow> fds_nth (fds f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 = (0::'a) \\<Longrightarrow> fds_nth (fds f) = f", "by (simp add: fun_eq_iff fds_nth_fds)"], ["", "lemma fds_nth_0 [simp]: \"fds_nth f 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f 0 = (0::'a)", "by transfer simp"], ["", "lemma fds_nth_fds_pos [simp]: \"n > 0 \\<Longrightarrow> fds_nth (fds f) n = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> fds_nth (fds f) n = f n", "by transfer (simp split: nat.splits)"], ["", "lemma fds_fds_nth [simp]: \"fds (fds_nth f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds (fds_nth f) = f", "by transfer (simp add: fun_eq_iff split: nat.splits)"], ["", "lemma fds_eq_fds_iff:\n  \"fds f = fds g \\<longleftrightarrow> (\\<forall>n>0. f n = g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fds f = fds g) = (\\<forall>n>0. f n = g n)", "proof transfer"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f g. (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n>0. f n = g n)", "fix f g :: \"nat \\<Rightarrow> 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f g. (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n>0. f n = g n)", "have \"(f \\<circ> Suc = g \\<circ> Suc) \\<longleftrightarrow> (\\<forall>n. f (Suc n) = g (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n. f (Suc n) = g (Suc n))", "by (auto simp: fun_eq_iff)"], ["proof (state)\nthis:\n  (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n. f (Suc n) = g (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>f g. (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n>0. f n = g n)", "also"], ["proof (state)\nthis:\n  (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n. f (Suc n) = g (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>f g. (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n>0. f n = g n)", "have \"\\<dots> \\<longleftrightarrow> (\\<forall>n>0. f n = g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n. f (Suc n) = g (Suc n)) = (\\<forall>n>0. f n = g n)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. f (Suc n) = g (Suc n); 0 < n\\<rbrakk>\n       \\<Longrightarrow> f n = g n\n 2. \\<And>n. \\<forall>n>0. f n = g n \\<Longrightarrow> f (Suc n) = g (Suc n)", "fix n :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. f (Suc n) = g (Suc n); 0 < n\\<rbrakk>\n       \\<Longrightarrow> f n = g n\n 2. \\<And>n. \\<forall>n>0. f n = g n \\<Longrightarrow> f (Suc n) = g (Suc n)", "assume \"\\<forall>n. f (Suc n) = g (Suc n)\" \"n > 0\""], ["proof (state)\nthis:\n  \\<forall>n. f (Suc n) = g (Suc n)\n  0 < n\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>n. f (Suc n) = g (Suc n); 0 < n\\<rbrakk>\n       \\<Longrightarrow> f n = g n\n 2. \\<And>n. \\<forall>n>0. f n = g n \\<Longrightarrow> f (Suc n) = g (Suc n)", "thus \"f n = g n\""], ["proof (prove)\nusing this:\n  \\<forall>n. f (Suc n) = g (Suc n)\n  0 < n\n\ngoal (1 subgoal):\n 1. f n = g n", "by (cases n) auto"], ["proof (state)\nthis:\n  f n = g n\n\ngoal (1 subgoal):\n 1. \\<And>n. \\<forall>n>0. f n = g n \\<Longrightarrow> f (Suc n) = g (Suc n)", "qed auto"], ["proof (state)\nthis:\n  (\\<forall>n. f (Suc n) = g (Suc n)) = (\\<forall>n>0. f n = g n)\n\ngoal (1 subgoal):\n 1. \\<And>f g. (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n>0. f n = g n)", "finally"], ["proof (chain)\npicking this:\n  (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n>0. f n = g n)", "show \"(f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n>0. f n = g n)\""], ["proof (prove)\nusing this:\n  (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n>0. f n = g n)\n\ngoal (1 subgoal):\n 1. (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n>0. f n = g n)", "."], ["proof (state)\nthis:\n  (f \\<circ> Suc = g \\<circ> Suc) = (\\<forall>n>0. f n = g n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_eq_fds_iff': \"f 0 = g 0 \\<Longrightarrow> fds f = fds g \\<longleftrightarrow> f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 = g 0 \\<Longrightarrow> (fds f = fds g) = (f = g)", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = g 0; fds f = fds g\\<rbrakk> \\<Longrightarrow> f = g", "assume \"f 0 = g 0\" \"fds f = fds g\""], ["proof (state)\nthis:\n  f 0 = g 0\n  fds f = fds g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = g 0; fds f = fds g\\<rbrakk> \\<Longrightarrow> f = g", "hence \"f n = g n\" for n"], ["proof (prove)\nusing this:\n  f 0 = g 0\n  fds f = fds g\n\ngoal (1 subgoal):\n 1. f n = g n", "by (cases n) (auto simp: fds_eq_fds_iff)"], ["proof (state)\nthis:\n  f ?n = g ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = g 0; fds f = fds g\\<rbrakk> \\<Longrightarrow> f = g", "thus \"f = g\""], ["proof (prove)\nusing this:\n  f ?n = g ?n\n\ngoal (1 subgoal):\n 1. f = g", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  f = g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_eqI [intro?]:\n  assumes \"(\\<And>n. n > 0 \\<Longrightarrow> fds_nth f n = fds_nth g n)\"\n  shows   \"f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f = g", "from assms"], ["proof (chain)\npicking this:\n  0 < ?n \\<Longrightarrow> fds_nth f ?n = fds_nth g ?n", "have \"fds_nth f n = fds_nth g n\" if \"n > 0\" for n"], ["proof (prove)\nusing this:\n  0 < ?n \\<Longrightarrow> fds_nth f ?n = fds_nth g ?n\n\ngoal (1 subgoal):\n 1. fds_nth f n = fds_nth g n", "by (cases n) (simp_all add: fun_eq_iff)"], ["proof (state)\nthis:\n  0 < ?n \\<Longrightarrow> fds_nth f ?n = fds_nth g ?n\n\ngoal (1 subgoal):\n 1. f = g", "hence \"fds (fds_nth f) = fds (fds_nth g)\""], ["proof (prove)\nusing this:\n  0 < ?n \\<Longrightarrow> fds_nth f ?n = fds_nth g ?n\n\ngoal (1 subgoal):\n 1. fds (fds_nth f) = fds (fds_nth g)", "by (subst fds_eq_fds_iff) auto"], ["proof (state)\nthis:\n  fds (fds_nth f) = fds (fds_nth g)\n\ngoal (1 subgoal):\n 1. f = g", "thus ?thesis"], ["proof (prove)\nusing this:\n  fds (fds_nth f) = fds (fds_nth g)\n\ngoal (1 subgoal):\n 1. f = g", "by simp"], ["proof (state)\nthis:\n  f = g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_cong [cong]: \"(\\<And>n. n > 0 \\<Longrightarrow> f n = (g n :: 'a :: zero)) \\<Longrightarrow> fds f = fds g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. 0 < n \\<Longrightarrow> f n = g n) \\<Longrightarrow>\n    fds f = fds g", "by (rule fds_eqI) simp"], ["", "lemma fds_eq_iff: \"f = g \\<longleftrightarrow> (\\<forall>n>0. fds_nth f n = fds_nth g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = g) = (\\<forall>n>0. fds_nth f n = fds_nth g n)", "by (auto intro: fds_eqI)"], ["", "lemma dirichlet_prod_fds_nth_fds_left [simp]:\n  \"dirichlet_prod (fds_nth (fds f)) g = dirichlet_prod f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (fds_nth (fds f)) g = dirichlet_prod f g", "by (simp add: fds_nth_fds)"], ["", "lemma dirichlet_prod_fds_nth_fds_right [simp]:\n  \"dirichlet_prod f (fds_nth (fds g)) = dirichlet_prod f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f (fds_nth (fds g)) = dirichlet_prod f g", "by (simp add: fds_nth_fds)"], ["", "definition fds_const :: \"'a :: zero \\<Rightarrow> 'a fds\" where\n  \"fds_const c = fds (\\<lambda>n. if n = 1 then c else 0)\""], ["", "abbreviation fds_ind where \"fds_ind P \\<equiv> fds (ind P)\""], ["", "bundle fds_syntax\nbegin"], ["", "notation fds_nth (infixl \"$\" 75)"], ["", "notation fds (binder \"\\<chi>\" 10)"], ["", "notation dirichlet_prod (infixl \"\\<star>\" 70)"], ["", "end"], ["", "instantiation fds :: (zero) zero\nbegin"], ["", "definition zero_fds :: \"'a fds\" where \"zero_fds = fds (\\<lambda>_. 0)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, zero_class)", ".."], ["", "end"], ["", "instantiation fds :: (\"{zero,one}\") one\nbegin"], ["", "definition one_fds :: \"'a fds\" where \"one_fds = fds (\\<lambda>n. if n = 1 then 1 else 0)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, one_class)", ".."], ["", "end"], ["", "instantiation fds :: (\"{plus,zero}\") plus\nbegin"], ["", "definition plus_fds :: \"'a fds \\<Rightarrow> 'a fds \\<Rightarrow> 'a fds\" \n  where \"plus_fds f g = fds (\\<lambda>n. fds_nth f n + fds_nth g n)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, plus_class)", ".."], ["", "end"], ["", "instantiation fds :: (semiring_0) times\nbegin"], ["", "definition times_fds :: \"'a fds \\<Rightarrow> 'a fds \\<Rightarrow> 'a fds\" \n  where \"times_fds f g = fds (dirichlet_prod (fds_nth f) (fds_nth g))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, times_class)", ".."], ["", "end"], ["", "instantiation fds :: (\"{uminus,zero}\") uminus\nbegin"], ["", "definition uminus_fds :: \"'a fds \\<Rightarrow> 'a fds\"\n  where \"uminus_fds f = fds (\\<lambda>n. -fds_nth f n)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, uminus_class)", ".."], ["", "end"], ["", "instantiation fds :: (\"{minus,zero}\") minus\nbegin"], ["", "definition minus_fds :: \"'a fds \\<Rightarrow> 'a fds \\<Rightarrow> 'a fds\"\n  where \"minus_fds f g = fds (\\<lambda>n. fds_nth f n - fds_nth g n)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, minus_class)", ".."], ["", "end"], ["", "subsection \\<open>General properties\\<close>"], ["", "lemma fds_nth_zero [simp]: \"fds_nth 0 = (\\<lambda>_. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth 0 = (\\<lambda>_. 0::'a)", "by (simp add: zero_fds_def fds_nth_fds fun_eq_iff)"], ["", "lemma fds_nth_one: \"fds_nth 1 = (\\<lambda>n. if n = 1 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth 1 = (\\<lambda>n. if n = 1 then 1::'a else (0::'a))", "by (simp add: one_fds_def fds_nth_fds fun_eq_iff)"], ["", "lemma fds_nth_one_Suc_0 [simp]: \"fds_nth 1 (Suc 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth 1 (Suc 0) = (1::'a)", "by (simp add: fds_nth_one)"], ["", "lemma fds_nth_one_not_Suc_0 [simp]: \"n \\<noteq> Suc 0 \\<Longrightarrow> fds_nth 1 n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> Suc 0 \\<Longrightarrow> fds_nth 1 n = (0::'a)", "by (simp add: fds_nth_one)"], ["", "lemma fds_nth_plus [simp]: \n  \"fds_nth (f + g) = (\\<lambda>n. fds_nth f n + fds_nth g n :: 'a :: monoid_add)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f + g) = (\\<lambda>n. fds_nth f n + fds_nth g n)", "by (simp add: plus_fds_def fds_nth_fds fun_eq_iff)"], ["", "lemma fds_nth_minus [simp]: \n  \"fds_nth (f - g) = (\\<lambda>n. fds_nth f n - fds_nth g n :: 'a :: {cancel_comm_monoid_add})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f - g) = (\\<lambda>n. fds_nth f n - fds_nth g n)", "by (simp add: minus_fds_def fds_nth_fds fun_eq_iff)"], ["", "lemma fds_nth_uminus [simp]: \"fds_nth (-g) = (\\<lambda>n. - fds_nth g n :: 'a :: group_add)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (- g) = (\\<lambda>n. - fds_nth g n)", "by (simp add: uminus_fds_def fds_nth_fds fun_eq_iff)"], ["", "lemma fds_nth_mult: \"fds_nth (f * g) = dirichlet_prod (fds_nth f) (fds_nth g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f * g) = dirichlet_prod (fds_nth f) (fds_nth g)", "by (simp add: times_fds_def fds_nth_fds dirichlet_prod_def fun_eq_iff)"], ["", "lemma fds_nth_mult_const_left [simp]: \"fds_nth (fds_const c * f) n = c * fds_nth f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_const c * f) n = c * fds_nth f n", "by (cases \"n = 0\") (simp_all add: fds_nth_mult fds_const_def)"], ["", "lemma fds_nth_mult_const_right [simp]: \"fds_nth (f * fds_const c) n = fds_nth f n * c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f * fds_const c) n = fds_nth f n * c", "by (cases \"n = 0\") (simp_all add: fds_nth_mult fds_const_def)"], ["", "instance fds :: (\"{semigroup_add, zero}\") semigroup_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, semigroup_add_class)", "by standard (simp_all add: fds_eq_iff algebra_simps plus_fds_def)"], ["", "instance fds :: (\"{ab_semigroup_add, zero}\") ab_semigroup_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, ab_semigroup_add_class)", "by standard (simp_all add: fds_eq_iff algebra_simps plus_fds_def)"], ["", "instance fds :: (\"{cancel_semigroup_add, zero}\") cancel_semigroup_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, cancel_semigroup_add_class)", "by standard (simp_all add: fds_eq_iff algebra_simps plus_fds_def)"], ["", "instance fds :: (\"{cancel_ab_semigroup_add, zero}\") cancel_ab_semigroup_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, cancel_ab_semigroup_add_class)", "by standard (simp_all add: fds_eq_iff algebra_simps plus_fds_def minus_fds_def)"], ["", "instance fds :: (monoid_add) monoid_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, monoid_add_class)", "by standard (simp_all add: fds_eq_iff algebra_simps)"], ["", "instance fds :: (comm_monoid_add) comm_monoid_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, comm_monoid_add_class)", "by standard (simp_all add: fds_eq_iff algebra_simps)"], ["", "instance fds :: (cancel_comm_monoid_add) cancel_comm_monoid_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, cancel_comm_monoid_add_class)", "by standard (simp_all add: fds_eq_iff algebra_simps)"], ["", "instance fds :: (group_add) group_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, group_add_class)", "by standard (simp_all add: fds_eq_iff algebra_simps minus_fds_def)"], ["", "instance fds :: (ab_group_add) ab_group_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, ab_group_add_class)", "by standard (simp_all add: fds_eq_iff algebra_simps)"], ["", "instance fds :: (semiring_0) semiring_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, semiring_0_class)", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a. 0 * a = 0\n 2. \\<And>a. a * 0 = 0\n 3. \\<And>a b c. a * b * c = a * (b * c)\n 4. \\<And>a b c. (a + b) * c = a * c + b * c\n 5. \\<And>a b c. a * (b + c) = a * b + a * c", "fix f g h :: \"'a fds\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a. 0 * a = 0\n 2. \\<And>a. a * 0 = 0\n 3. \\<And>a b c. a * b * c = a * (b * c)\n 4. \\<And>a b c. (a + b) * c = a * c + b * c\n 5. \\<And>a b c. a * (b + c) = a * b + a * c", "show \"(f + g) * h = f * h + g * h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f + g) * h = f * h + g * h", "by (simp add: fds_eq_iff fds_nth_mult dirichlet_prod_def algebra_simps sum.distrib)"], ["proof (state)\nthis:\n  (f + g) * h = f * h + g * h\n\ngoal (4 subgoals):\n 1. \\<And>a. 0 * a = 0\n 2. \\<And>a. a * 0 = 0\n 3. \\<And>a b c. a * b * c = a * (b * c)\n 4. \\<And>a b c. a * (b + c) = a * b + a * c", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a. 0 * a = 0\n 2. \\<And>a. a * 0 = 0\n 3. \\<And>a b c. a * b * c = a * (b * c)\n 4. \\<And>a b c. a * (b + c) = a * b + a * c", "fix f g h :: \"'a fds\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a. 0 * a = 0\n 2. \\<And>a. a * 0 = 0\n 3. \\<And>a b c. a * b * c = a * (b * c)\n 4. \\<And>a b c. a * (b + c) = a * b + a * c", "show \"f * g * h = f * (g * h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * g * h = f * (g * h)", "by (intro fds_eqI) (simp add: fds_nth_mult dirichlet_prod_assoc)"], ["proof (state)\nthis:\n  f * g * h = f * (g * h)\n\ngoal (3 subgoals):\n 1. \\<And>a. 0 * a = 0\n 2. \\<And>a. a * 0 = 0\n 3. \\<And>a b c. a * (b + c) = a * b + a * c", "qed (simp_all add: fds_eq_iff fds_nth_mult dirichlet_prod_def algebra_simps sum.distrib)"], ["", "instance fds :: (comm_semiring_0) comm_semiring_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, comm_semiring_0_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b. a * b = b * a\n 2. \\<And>a b c. (a + b) * c = a * c + b * c", "fix f g :: \"'a fds\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b. a * b = b * a\n 2. \\<And>a b c. (a + b) * c = a * c + b * c", "show \"f * g = g * f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * g = g * f", "by (simp add: fds_eq_iff fds_nth_mult dirichlet_prod_commutes)"], ["proof (state)\nthis:\n  f * g = g * f\n\ngoal (1 subgoal):\n 1. \\<And>a b c. (a + b) * c = a * c + b * c", "qed (simp_all add: fds_eq_iff fds_nth_mult dirichlet_prod_def algebra_simps sum.distrib)"], ["", "instance fds :: (semiring_0_cancel) semiring_0_cancel"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, semiring_0_cancel_class)", "by standard (simp_all add: fds_eq_iff fds_nth_one fds_nth_mult)"], ["", "instance fds :: (comm_semiring_0_cancel) comm_semiring_0_cancel"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, comm_semiring_0_cancel_class)", ".."], ["", "instance fds :: (semiring_1) semiring_1"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, semiring_1_class)", "by standard (simp_all add: fds_eq_iff fds_nth_one fds_nth_mult)"], ["", "instance fds :: (comm_semiring_1) comm_semiring_1"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, comm_semiring_1_class)", "by standard (simp_all add: fds_eq_iff fds_nth_one fds_nth_mult)"], ["", "instance fds :: (semiring_1_cancel) semiring_1_cancel"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, semiring_1_cancel_class)", ".."], ["", "instance fds :: (ring) ring"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, ring_class)", ".."], ["", "instance fds :: (ring_1) ring_1"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, ring_1_class)", ".."], ["", "instance fds :: (comm_ring) comm_ring"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, comm_ring_class)", ".."], ["", "instance fds :: (semiring_no_zero_divisors) semiring_no_zero_divisors"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, semiring_no_zero_divisors_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "fix f g :: \"'a fds\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "assume \"f \\<noteq> 0\" \"g \\<noteq> 0\""], ["proof (state)\nthis:\n  f \\<noteq> 0\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "hence ex: \"\\<exists>m>0. fds_nth f m \\<noteq> 0\" \"\\<exists>n>0. fds_nth g n \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>m>0. fds_nth f m \\<noteq> (0::'a) &&&\n    \\<exists>n>0. fds_nth g n \\<noteq> (0::'a)", "by (auto simp: fds_eq_iff)"], ["proof (state)\nthis:\n  \\<exists>m>0. fds_nth f m \\<noteq> (0::'a)\n  \\<exists>n>0. fds_nth g n \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "define m where \"m = (LEAST m. m > 0 \\<and> fds_nth f m \\<noteq> 0)\""], ["proof (state)\nthis:\n  m = (LEAST m. 0 < m \\<and> fds_nth f m \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "define n where \"n = (LEAST n. n > 0 \\<and> fds_nth g n \\<noteq> 0)\""], ["proof (state)\nthis:\n  n = (LEAST n. 0 < n \\<and> fds_nth g n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "from ex[THEN LeastI_ex, folded m_def n_def]"], ["proof (chain)\npicking this:\n  0 < m \\<and> fds_nth f m \\<noteq> (0::'a)\n  0 < n \\<and> fds_nth g n \\<noteq> (0::'a)", "have mn: \"m > 0\" \"fds_nth f m \\<noteq> 0\" \"n > 0\" \"fds_nth g n \\<noteq> 0\""], ["proof (prove)\nusing this:\n  0 < m \\<and> fds_nth f m \\<noteq> (0::'a)\n  0 < n \\<and> fds_nth g n \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (0 < m &&& fds_nth f m \\<noteq> (0::'a)) &&&\n    0 < n &&& fds_nth g n \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  0 < m\n  fds_nth f m \\<noteq> (0::'a)\n  0 < n\n  fds_nth g n \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "have *: \"m \\<le> m'\" if \"m' > 0\" \"fds_nth f m' \\<noteq> 0\" for m'"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> m'", "using conjI[OF that]"], ["proof (prove)\nusing this:\n  0 < m' \\<and> fds_nth f m' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. m \\<le> m'", "unfolding m_def"], ["proof (prove)\nusing this:\n  0 < m' \\<and> fds_nth f m' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (LEAST m. 0 < m \\<and> fds_nth f m \\<noteq> (0::'a)) \\<le> m'", "by (rule Least_le)"], ["proof (state)\nthis:\n  \\<lbrakk>0 < ?m'; fds_nth f ?m' \\<noteq> (0::'a)\\<rbrakk>\n  \\<Longrightarrow> m \\<le> ?m'\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "have m': \"fds_nth f m' = 0\" if \"m' \\<in> {0<..<m}\"  for m'"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f m' = (0::'a)", "using that *[of m']"], ["proof (prove)\nusing this:\n  m' \\<in> {0<..<m}\n  \\<lbrakk>0 < m'; fds_nth f m' \\<noteq> (0::'a)\\<rbrakk>\n  \\<Longrightarrow> m \\<le> m'\n\ngoal (1 subgoal):\n 1. fds_nth f m' = (0::'a)", "by auto"], ["proof (state)\nthis:\n  ?m' \\<in> {0<..<m} \\<Longrightarrow> fds_nth f ?m' = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "have *: \"n \\<le> n'\" if \"n' > 0\" \"fds_nth g n' \\<noteq> 0\" for n'"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> n'", "using conjI[OF that]"], ["proof (prove)\nusing this:\n  0 < n' \\<and> fds_nth g n' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. n \\<le> n'", "unfolding n_def"], ["proof (prove)\nusing this:\n  0 < n' \\<and> fds_nth g n' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (LEAST n. 0 < n \\<and> fds_nth g n \\<noteq> (0::'a)) \\<le> n'", "by (rule Least_le)"], ["proof (state)\nthis:\n  \\<lbrakk>0 < ?n'; fds_nth g ?n' \\<noteq> (0::'a)\\<rbrakk>\n  \\<Longrightarrow> n \\<le> ?n'\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "have n': \"fds_nth g n' = 0\" if \"n' \\<in> {0<..<n}\"  for n'"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth g n' = (0::'a)", "using that *[of n']"], ["proof (prove)\nusing this:\n  n' \\<in> {0<..<n}\n  \\<lbrakk>0 < n'; fds_nth g n' \\<noteq> (0::'a)\\<rbrakk>\n  \\<Longrightarrow> n \\<le> n'\n\ngoal (1 subgoal):\n 1. fds_nth g n' = (0::'a)", "by auto"], ["proof (state)\nthis:\n  ?n' \\<in> {0<..<n} \\<Longrightarrow> fds_nth g ?n' = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "have \"fds_nth (f * g) (m * n) = \n          (\\<Sum>d | d dvd m * n. fds_nth f d * fds_nth g (m * n div d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f * g) (m * n) =\n    (\\<Sum>d | d dvd m * n. fds_nth f d * fds_nth g (m * n div d))", "by (simp add: fds_nth_mult dirichlet_prod_def)"], ["proof (state)\nthis:\n  fds_nth (f * g) (m * n) =\n  (\\<Sum>d | d dvd m * n. fds_nth f d * fds_nth g (m * n div d))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "also"], ["proof (state)\nthis:\n  fds_nth (f * g) (m * n) =\n  (\\<Sum>d | d dvd m * n. fds_nth f d * fds_nth g (m * n div d))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "have \"\\<dots> = (\\<Sum>d | d dvd m * n. if d = m then fds_nth f m * fds_nth g n else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd m * n. fds_nth f d * fds_nth g (m * n div d)) =\n    (\\<Sum>d | d dvd m * n.\n       if d = m then fds_nth f m * fds_nth g n else (0::'a))", "proof (intro sum.cong refl, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {d. d dvd m * n} \\<Longrightarrow>\n       fds_nth f x * fds_nth g (m * n div x) =\n       (if x = m then fds_nth f m * fds_nth g n else (0::'a))", "case (1 d)"], ["proof (state)\nthis:\n  d \\<in> {d. d dvd m * n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {d. d dvd m * n} \\<Longrightarrow>\n       fds_nth f x * fds_nth g (m * n div x) =\n       (if x = m then fds_nth f m * fds_nth g n else (0::'a))", "thus ?case"], ["proof (prove)\nusing this:\n  d \\<in> {d. d dvd m * n}\n\ngoal (1 subgoal):\n 1. fds_nth f d * fds_nth g (m * n div d) =\n    (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "proof (cases \"d \\<le> m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>d \\<in> {d. d dvd m * n}; d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))\n 2. \\<lbrakk>d \\<in> {d. d dvd m * n}; \\<not> d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "case True"], ["proof (state)\nthis:\n  d \\<le> m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>d \\<in> {d. d dvd m * n}; d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))\n 2. \\<lbrakk>d \\<in> {d. d dvd m * n}; \\<not> d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "with mn(1,3) 1"], ["proof (chain)\npicking this:\n  0 < m\n  0 < n\n  d \\<in> {d. d dvd m * n}\n  d \\<le> m", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < m\n  0 < n\n  d \\<in> {d. d dvd m * n}\n  d \\<le> m\n\ngoal (1 subgoal):\n 1. fds_nth f d * fds_nth g (m * n div d) =\n    (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "by (auto elim!: dvdE simp: m' n' split: if_splits)"], ["proof (state)\nthis:\n  fds_nth f d * fds_nth g (m * n div d) =\n  (if d = m then fds_nth f m * fds_nth g n else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d \\<in> {d. d dvd m * n}; \\<not> d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>d \\<in> {d. d dvd m * n}; \\<not> d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "case False"], ["proof (state)\nthis:\n  \\<not> d \\<le> m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d \\<in> {d. d dvd m * n}; \\<not> d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "from 1"], ["proof (chain)\npicking this:\n  d \\<in> {d. d dvd m * n}", "obtain k where k: \"m * n = d * k\""], ["proof (prove)\nusing this:\n  d \\<in> {d. d dvd m * n}\n\ngoal (1 subgoal):\n 1. (\\<And>k. m * n = d * k \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim!: dvdE)"], ["proof (state)\nthis:\n  m * n = d * k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d \\<in> {d. d dvd m * n}; \\<not> d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "with mn(1,3)"], ["proof (chain)\npicking this:\n  0 < m\n  0 < n\n  m * n = d * k", "have [simp]: \"k > 0\""], ["proof (prove)\nusing this:\n  0 < m\n  0 < n\n  m * n = d * k\n\ngoal (1 subgoal):\n 1. 0 < k", "by (auto intro!: Nat.gr0I)"], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d \\<in> {d. d dvd m * n}; \\<not> d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "from False mn(3)"], ["proof (chain)\npicking this:\n  \\<not> d \\<le> m\n  0 < n", "have \"m * n < d * n\""], ["proof (prove)\nusing this:\n  \\<not> d \\<le> m\n  0 < n\n\ngoal (1 subgoal):\n 1. m * n < d * n", "by (intro mult_strict_right_mono) auto"], ["proof (state)\nthis:\n  m * n < d * n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d \\<in> {d. d dvd m * n}; \\<not> d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "also"], ["proof (state)\nthis:\n  m * n < d * n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d \\<in> {d. d dvd m * n}; \\<not> d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "note k"], ["proof (state)\nthis:\n  m * n = d * k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d \\<in> {d. d dvd m * n}; \\<not> d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "finally"], ["proof (chain)\npicking this:\n  d * k < d * n", "have \"k < n\""], ["proof (prove)\nusing this:\n  d * k < d * n\n\ngoal (1 subgoal):\n 1. k < n", "by (subst (asm) mult_less_cancel1) auto"], ["proof (state)\nthis:\n  k < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d \\<in> {d. d dvd m * n}; \\<not> d \\<le> m\\<rbrakk>\n    \\<Longrightarrow> fds_nth f d * fds_nth g (m * n div d) =\n                      (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "with mn(1,3) and 1 and False"], ["proof (chain)\npicking this:\n  0 < m\n  0 < n\n  d \\<in> {d. d dvd m * n}\n  \\<not> d \\<le> m\n  k < n", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < m\n  0 < n\n  d \\<in> {d. d dvd m * n}\n  \\<not> d \\<le> m\n  k < n\n\ngoal (1 subgoal):\n 1. fds_nth f d * fds_nth g (m * n div d) =\n    (if d = m then fds_nth f m * fds_nth g n else (0::'a))", "by (auto simp: k m' n' split: if_splits)"], ["proof (state)\nthis:\n  fds_nth f d * fds_nth g (m * n div d) =\n  (if d = m then fds_nth f m * fds_nth g n else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_nth f d * fds_nth g (m * n div d) =\n  (if d = m then fds_nth f m * fds_nth g n else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd m * n. fds_nth f d * fds_nth g (m * n div d)) =\n  (\\<Sum>d | d dvd m * n.\n     if d = m then fds_nth f m * fds_nth g n else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd m * n. fds_nth f d * fds_nth g (m * n div d)) =\n  (\\<Sum>d | d dvd m * n.\n     if d = m then fds_nth f m * fds_nth g n else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "have \"\\<dots> = fds_nth f m * fds_nth g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd m * n.\n       if d = m then fds_nth f m * fds_nth g n else (0::'a)) =\n    fds_nth f m * fds_nth g n", "using mn(1,3)"], ["proof (prove)\nusing this:\n  0 < m\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd m * n.\n       if d = m then fds_nth f m * fds_nth g n else (0::'a)) =\n    fds_nth f m * fds_nth g n", "by (subst sum.delta) auto"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd m * n.\n     if d = m then fds_nth f m * fds_nth g n else (0::'a)) =\n  fds_nth f m * fds_nth g n\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd m * n.\n     if d = m then fds_nth f m * fds_nth g n else (0::'a)) =\n  fds_nth f m * fds_nth g n\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "have \"\\<dots> \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f m * fds_nth g n \\<noteq> (0::'a)", "using mn"], ["proof (prove)\nusing this:\n  0 < m\n  fds_nth f m \\<noteq> (0::'a)\n  0 < n\n  fds_nth g n \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. fds_nth f m * fds_nth g n \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  fds_nth f m * fds_nth g n \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "finally"], ["proof (chain)\npicking this:\n  fds_nth (f * g) (m * n) \\<noteq> (0::'a)", "show \"f * g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  fds_nth (f * g) (m * n) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f * g \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f * g \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: instance fds :: (semiring_no_zero_divisors_cancel) semiring_no_zero_divisors_cancel\n   Maybe using Bell series and cancellation on FPSs *)"], ["", "instance fds :: (ring_no_zero_divisors) ring_no_zero_divisors"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, ring_no_zero_divisors_class)", ".."], ["", "instance fds :: (idom) idom"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, idom_class)", ".."], ["", "instantiation fds :: (real_vector) real_vector\nbegin"], ["", "definition scaleR_fds :: \"real \\<Rightarrow> 'a fds \\<Rightarrow> 'a fds\" where\n  \"scaleR_fds c f = fds (\\<lambda>n. c *\\<^sub>R fds_nth f n)\""], ["", "lemma fds_nth_scaleR [simp]: \"fds_nth (c *\\<^sub>R f) = (\\<lambda>n. c *\\<^sub>R fds_nth f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (c *\\<^sub>R f) = (\\<lambda>n. c *\\<^sub>R fds_nth f n)", "by (simp add: scaleR_fds_def fun_eq_iff fds_nth_fds)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, real_vector_class)", "by standard (simp_all add: fds_eq_iff algebra_simps)"], ["", "end"], ["", "instance fds :: (real_algebra) real_algebra"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, real_algebra_class)", "by standard (simp_all add: fds_eq_iff algebra_simps fds_nth_mult\n                             dirichlet_prod_def scaleR_sum_right)"], ["", "instance fds :: (real_algebra_1) real_algebra_1"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, real_algebra_1_class)", ".."], ["", "lemma fds_nth_sum [simp]: \"fds_nth (sum f A) n = sum (\\<lambda>x. fds_nth (f x) n) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (sum f A) n = (\\<Sum>x\\<in>A. fds_nth (f x) n)", "by (induction A rule: infinite_finite_induct) auto"], ["", "lemma sum_fds [simp]: \"(\\<Sum>x\\<in>A. fds (f x)) = fds (\\<lambda>n. \\<Sum>x\\<in>A. f x n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>A. fds (f x)) = fds (\\<lambda>n. \\<Sum>x\\<in>A. f x n)", "by (rule fds_eqI) simp_all"], ["", "lemma fds_nth_const: \"fds_nth (fds_const c) = (\\<lambda>n. if n = 1 then c else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_const c) = (\\<lambda>n. if n = 1 then c else (0::'a))", "by (simp add: fds_const_def fds_nth_fds fun_eq_iff)"], ["", "lemma fds_nth_const_Suc_0 [simp]: \"fds_nth (fds_const c) (Suc 0) = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_const c) (Suc 0) = c", "by (simp add: fds_nth_const)"], ["", "lemma fds_nth_const_not_Suc_0 [simp]: \"n \\<noteq> 1 \\<Longrightarrow> fds_nth (fds_const c) n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 1 \\<Longrightarrow> fds_nth (fds_const c) n = (0::'a)", "by (simp add: fds_nth_const)"], ["", "lemma fds_const_zero [simp]: \"fds_const 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (0::'a) = 0", "by (simp add: fds_eq_iff fds_nth_const)"], ["", "lemma fds_const_one [simp]: \"fds_const 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (1::'a) = 1", "by (simp add: fds_eq_iff fds_nth_const fds_nth_one)"], ["", "lemma fds_const_add [simp]: \"fds_const (a + b :: 'a :: monoid_add) = fds_const a + fds_const b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (a + b) = fds_const a + fds_const b", "by (simp add: fds_eq_iff fds_nth_const)"], ["", "lemma fds_const_minus [simp]: \n  \"fds_const (a - b :: 'a :: cancel_comm_monoid_add) = fds_const a - fds_const b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (a - b) = fds_const a - fds_const b", "by (simp add: fds_eq_iff fds_nth_const)"], ["", "lemma fds_const_uminus [simp]: \n  \"fds_const (- b :: 'a :: ab_group_add) = - fds_const b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (- b) = - fds_const b", "by (simp add: fds_eq_iff fds_nth_const)"], ["", "lemma fds_const_mult [simp]: \n  \"fds_const (a * b :: 'a :: semiring_0) = fds_const a * fds_const b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (a * b) = fds_const a * fds_const b", "by (simp add: fds_eq_iff fds_nth_const fds_nth_mult)"], ["", "lemma fds_const_of_nat [simp]: \"fds_const (of_nat c) = of_nat c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (of_nat c) = of_nat c", "by (induction c) (simp_all)"], ["", "lemma fds_const_of_int [simp]: \"fds_const (of_int c) = of_int c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (of_int c) = of_int c", "by (cases c) simp_all"], ["", "lemma fds_const_of_real [simp]: \"fds_const (of_real c) = of_real c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (of_real c) = of_real c", "by (simp add: of_real_def fds_eq_iff fds_const_def fds_nth_one)"], ["", "instantiation fds :: (\"{inverse, comm_ring_1}\") inverse\nbegin"], ["", "definition inverse_fds :: \"'a fds \\<Rightarrow> 'a fds\" where\n  \"inverse_fds f = fds (\\<lambda>n. dirichlet_inverse (fds_nth f) (inverse (fds_nth f 1)) n)\""], ["", "definition divide_fds :: \"'a fds \\<Rightarrow> 'a fds \\<Rightarrow> 'a fds\" where\n  \"divide_fds f g = f * inverse g\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fds, inverse_class)", ".."], ["", "end"], ["", "lemma numeral_fds: \"numeral n = fds_const (numeral n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. numeral n = fds_const (numeral n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. numeral n = fds_const (numeral n)", "have \"numeral n = (of_nat (numeral n) :: 'a fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. numeral n = of_nat (numeral n)", "by simp"], ["proof (state)\nthis:\n  numeral n = of_nat (numeral n)\n\ngoal (1 subgoal):\n 1. numeral n = fds_const (numeral n)", "also"], ["proof (state)\nthis:\n  numeral n = of_nat (numeral n)\n\ngoal (1 subgoal):\n 1. numeral n = fds_const (numeral n)", "have \"\\<dots> = fds_const (of_nat (numeral n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (numeral n) = fds_const (of_nat (numeral n))", "by (rule fds_const_of_nat [symmetric])"], ["proof (state)\nthis:\n  of_nat (numeral n) = fds_const (of_nat (numeral n))\n\ngoal (1 subgoal):\n 1. numeral n = fds_const (numeral n)", "also"], ["proof (state)\nthis:\n  of_nat (numeral n) = fds_const (of_nat (numeral n))\n\ngoal (1 subgoal):\n 1. numeral n = fds_const (numeral n)", "have \"of_nat (numeral n) = (numeral n :: 'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (numeral n) = numeral n", "by simp"], ["proof (state)\nthis:\n  of_nat (numeral n) = numeral n\n\ngoal (1 subgoal):\n 1. numeral n = fds_const (numeral n)", "finally"], ["proof (chain)\npicking this:\n  numeral n = fds_const (numeral n)", "show ?thesis"], ["proof (prove)\nusing this:\n  numeral n = fds_const (numeral n)\n\ngoal (1 subgoal):\n 1. numeral n = fds_const (numeral n)", "."], ["proof (state)\nthis:\n  numeral n = fds_const (numeral n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_ind_False [simp]: \"fds_ind (\\<lambda>_. False) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ind (\\<lambda>_. False) = 0", "by (rule fds_eqI) simp"], ["", "lemma fds_commutes: \n  assumes \"\\<And>m n. m > 0 \\<Longrightarrow> n > 0 \\<Longrightarrow> fds_nth f m * fds_nth g n = fds_nth g n * fds_nth f m\"\n  shows   \"f * g = g * f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * g = g * f", "by (intro fds_eqI, unfold fds_nth_mult, subst dirichlet_prod_def, \n      subst dirichlet_prod_altdef1, intro sum.cong refl assms) (auto elim: dvdE)"], ["", "lemma fds_nth_mult_Suc_0 [simp]: \n  \"fds_nth (f * g) (Suc 0) = fds_nth f (Suc 0) * fds_nth g (Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f * g) (Suc 0) = fds_nth f (Suc 0) * fds_nth g (Suc 0)", "by (simp add: fds_nth_mult)"], ["", "lemma fds_nth_inverse: \n  \"fds_nth (inverse f) = dirichlet_inverse (fds_nth f) (inverse (fds_nth f 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (inverse f) =\n    dirichlet_inverse (fds_nth f) (inverse (fds_nth f 1))", "by (simp add: inverse_fds_def fds_nth_fds fun_eq_iff)"], ["", "lemma inverse_fds_nonunit:\n  \"fds_nth f 1 = (0 :: 'a :: field) \\<Longrightarrow> inverse f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f 1 = (0::'a) \\<Longrightarrow> inverse f = 0", "by (auto simp: fds_eq_iff fds_nth_inverse dirichlet_inverse_noninvertible)"], ["", "lemma inverse_0_fds [simp]: \"inverse (0 :: 'a :: field fds) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse 0 = 0", "by (simp add: inverse_fds_def fds_eq_iff dirichlet_inverse.simps)"], ["", "lemma fds_left_inverse: \n  \"fds_nth f 1 \\<noteq> (0 :: 'a :: field) \\<Longrightarrow> inverse f * f = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow> inverse f * f = 1", "by (auto simp: fds_eq_iff fds_nth_mult fds_nth_inverse dirichlet_prod_inverse' fds_nth_one)"], ["", "lemma fds_right_inverse: \n  \"fds_nth f 1 \\<noteq> (0 :: 'a :: field) \\<Longrightarrow> f * inverse f = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow> f * inverse f = 1", "by (auto simp: fds_eq_iff fds_nth_mult fds_nth_inverse dirichlet_prod_inverse fds_nth_one)"], ["", "lemma fds_left_inverse_unique:\n  assumes \"f * g = (1 :: 'a :: field fds)\"\n  shows   \"f = inverse g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = inverse g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f = inverse g", "have \"fds_nth (f * g) 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f * g) 1 = (1::'a)", "by (subst assms) simp"], ["proof (state)\nthis:\n  fds_nth (f * g) 1 = (1::'a)\n\ngoal (1 subgoal):\n 1. f = inverse g", "hence \"fds_nth g 1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  fds_nth (f * g) 1 = (1::'a)\n\ngoal (1 subgoal):\n 1. fds_nth g 1 \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  fds_nth g 1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f = inverse g", "hence \"(f - inverse g) * g = 0\""], ["proof (prove)\nusing this:\n  fds_nth g 1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (f - inverse g) * g = 0", "unfolding ring_distribs"], ["proof (prove)\nusing this:\n  fds_nth g 1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f * g - inverse g * g = 0", "by (subst fds_left_inverse) (simp_all add: assms)"], ["proof (state)\nthis:\n  (f - inverse g) * g = 0\n\ngoal (1 subgoal):\n 1. f = inverse g", "moreover"], ["proof (state)\nthis:\n  (f - inverse g) * g = 0\n\ngoal (1 subgoal):\n 1. f = inverse g", "from assms"], ["proof (chain)\npicking this:\n  f * g = 1", "have \"g \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f * g = 1\n\ngoal (1 subgoal):\n 1. g \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = inverse g", "ultimately"], ["proof (chain)\npicking this:\n  (f - inverse g) * g = 0\n  g \\<noteq> 0", "show \"f = inverse g\""], ["proof (prove)\nusing this:\n  (f - inverse g) * g = 0\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f = inverse g", "by simp"], ["proof (state)\nthis:\n  f = inverse g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_right_inverse_unique:\n  assumes \"f * g = (1 :: 'a :: field fds)\"\n  shows   \"g = inverse f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = inverse f", "using fds_left_inverse_unique[of g f] assms"], ["proof (prove)\nusing this:\n  g * f = 1 \\<Longrightarrow> g = inverse f\n  f * g = 1\n\ngoal (1 subgoal):\n 1. g = inverse f", "by (simp add: mult.commute)"], ["", "lemma inverse_1_fds [simp]: \"inverse (1 :: 'a :: field fds) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse 1 = 1", "by (rule fds_left_inverse_unique [symmetric]) simp"], ["", "lemma inverse_const_fds [simp]: \n  \"inverse (fds_const c :: 'a :: field fds) = fds_const (inverse c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (fds_const c) = fds_const (inverse c)", "proof (cases \"c = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = (0::'a) \\<Longrightarrow>\n    inverse (fds_const c) = fds_const (inverse c)\n 2. c \\<noteq> (0::'a) \\<Longrightarrow>\n    inverse (fds_const c) = fds_const (inverse c)", "case False"], ["proof (state)\nthis:\n  c \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. c = (0::'a) \\<Longrightarrow>\n    inverse (fds_const c) = fds_const (inverse c)\n 2. c \\<noteq> (0::'a) \\<Longrightarrow>\n    inverse (fds_const c) = fds_const (inverse c)", "thus ?thesis"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. inverse (fds_const c) = fds_const (inverse c)", "by (intro fds_right_inverse_unique[symmetric])\n       (auto simp del: fds_const_mult simp: fds_const_mult [symmetric])"], ["proof (state)\nthis:\n  inverse (fds_const c) = fds_const (inverse c)\n\ngoal (1 subgoal):\n 1. c = (0::'a) \\<Longrightarrow>\n    inverse (fds_const c) = fds_const (inverse c)", "qed auto"], ["", "lemma inverse_mult_fds: \"inverse (f * g :: 'a :: field fds) = inverse f * inverse g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (f * g) = inverse f * inverse g", "proof (cases \"fds_nth (f * g) (Suc 0) = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_nth (f * g) (Suc 0) = (0::'a) \\<Longrightarrow>\n    inverse (f * g) = inverse f * inverse g\n 2. fds_nth (f * g) (Suc 0) \\<noteq> (0::'a) \\<Longrightarrow>\n    inverse (f * g) = inverse f * inverse g", "case False"], ["proof (state)\nthis:\n  fds_nth (f * g) (Suc 0) \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. fds_nth (f * g) (Suc 0) = (0::'a) \\<Longrightarrow>\n    inverse (f * g) = inverse f * inverse g\n 2. fds_nth (f * g) (Suc 0) \\<noteq> (0::'a) \\<Longrightarrow>\n    inverse (f * g) = inverse f * inverse g", "hence \"(f * inverse f) * (g * inverse g) = 1\""], ["proof (prove)\nusing this:\n  fds_nth (f * g) (Suc 0) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f * inverse f * (g * inverse g) = 1", "by (subst (1 2) fds_right_inverse) auto"], ["proof (state)\nthis:\n  f * inverse f * (g * inverse g) = 1\n\ngoal (2 subgoals):\n 1. fds_nth (f * g) (Suc 0) = (0::'a) \\<Longrightarrow>\n    inverse (f * g) = inverse f * inverse g\n 2. fds_nth (f * g) (Suc 0) \\<noteq> (0::'a) \\<Longrightarrow>\n    inverse (f * g) = inverse f * inverse g", "thus ?thesis"], ["proof (prove)\nusing this:\n  f * inverse f * (g * inverse g) = 1\n\ngoal (1 subgoal):\n 1. inverse (f * g) = inverse f * inverse g", "by (intro fds_right_inverse_unique [symmetric]) (simp_all add: mult_ac)"], ["proof (state)\nthis:\n  inverse (f * g) = inverse f * inverse g\n\ngoal (1 subgoal):\n 1. fds_nth (f * g) (Suc 0) = (0::'a) \\<Longrightarrow>\n    inverse (f * g) = inverse f * inverse g", "qed (auto simp: inverse_fds_nonunit)"], ["", "definition fds_zeta :: \"'a :: one fds\" \n  where \"fds_zeta = fds (\\<lambda>_. 1)\""], ["", "lemma fds_zeta_altdef: \"fds_zeta = fds (\\<lambda>n. if n = 0 then 0 else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_zeta = fds (\\<lambda>n. if n = 0 then 0::'a else (1::'a))", "by (rule fds_eqI) (simp add: fds_zeta_def)"], ["", "lemma fds_nth_zeta: \"fds_nth fds_zeta = (\\<lambda>n. if n = 0 then 0 else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth fds_zeta = (\\<lambda>n. if n = 0 then 0::'a else (1::'a))", "by (simp add: fds_zeta_def fun_eq_iff)"], ["", "lemma fds_nth_zeta_pos [simp]: \"n > 0 \\<Longrightarrow> fds_nth fds_zeta n = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> fds_nth fds_zeta n = (1::'a)", "by (simp add: fds_nth_zeta)"], ["", "lemma fds_zeta_commutes: \"fds_zeta * (f :: 'a :: semiring_1 fds) = f * fds_zeta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_zeta * f = f * fds_zeta", "by (intro fds_commutes) simp_all"], ["", "lemma fds_ind_True [simp]: \"fds_ind (\\<lambda>_. True) = fds_zeta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ind (\\<lambda>_. True) = fds_zeta", "by (rule fds_eqI) simp"], ["", "lemma finite_extensional_prod_nat: \n  assumes \"finite A\" \"b > 0\"\n  shows   \"finite {d \\<in> extensional A. prod d A = (b :: nat)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {d \\<in> extensional A. prod d A = b}", "proof (rule finite_subset)"], ["proof (state)\ngoal (2 subgoals):\n 1. {d \\<in> extensional A. prod d A = b} \\<subseteq> ?B\n 2. finite ?B", "from assms(1)"], ["proof (chain)\npicking this:\n  finite A", "show \"finite (PiE A (\\<lambda>_. {..b}))\""], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. finite (A \\<rightarrow>\\<^sub>E {..b})", "by (rule finite_PiE) auto"], ["proof (state)\nthis:\n  finite (A \\<rightarrow>\\<^sub>E {..b})\n\ngoal (1 subgoal):\n 1. {d \\<in> extensional A. prod d A = b}\n    \\<subseteq> A \\<rightarrow>\\<^sub>E {..b}", "{"], ["proof (state)\nthis:\n  finite (A \\<rightarrow>\\<^sub>E {..b})\n\ngoal (1 subgoal):\n 1. {d \\<in> extensional A. prod d A = b}\n    \\<subseteq> A \\<rightarrow>\\<^sub>E {..b}", "fix d :: \"'a \\<Rightarrow> nat\" and x :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. {d \\<in> extensional A. prod d A = b}\n    \\<subseteq> A \\<rightarrow>\\<^sub>E {..b}", "assume *: \"x \\<in> A\" \"prod d A = b\""], ["proof (state)\nthis:\n  x \\<in> A\n  prod d A = b\n\ngoal (1 subgoal):\n 1. {d \\<in> extensional A. prod d A = b}\n    \\<subseteq> A \\<rightarrow>\\<^sub>E {..b}", "with prod_dvd_prod_subset[of A \"{x}\" d] assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>finite A; {x} \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> prod d {x} dvd prod d A\n  finite A\n  0 < b\n  x \\<in> A\n  prod d A = b", "have \"d x dvd b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>finite A; {x} \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> prod d {x} dvd prod d A\n  finite A\n  0 < b\n  x \\<in> A\n  prod d A = b\n\ngoal (1 subgoal):\n 1. d x dvd b", "by auto"], ["proof (state)\nthis:\n  d x dvd b\n\ngoal (1 subgoal):\n 1. {d \\<in> extensional A. prod d A = b}\n    \\<subseteq> A \\<rightarrow>\\<^sub>E {..b}", "with assms"], ["proof (chain)\npicking this:\n  finite A\n  0 < b\n  d x dvd b", "have \"d x \\<le> b\""], ["proof (prove)\nusing this:\n  finite A\n  0 < b\n  d x dvd b\n\ngoal (1 subgoal):\n 1. d x \\<le> b", "by (auto dest: dvd_imp_le)"], ["proof (state)\nthis:\n  d x \\<le> b\n\ngoal (1 subgoal):\n 1. {d \\<in> extensional A. prod d A = b}\n    \\<subseteq> A \\<rightarrow>\\<^sub>E {..b}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> A; prod ?d2 A = b\\<rbrakk>\n  \\<Longrightarrow> ?d2 ?x2 \\<le> b\n\ngoal (1 subgoal):\n 1. {d \\<in> extensional A. prod d A = b}\n    \\<subseteq> A \\<rightarrow>\\<^sub>E {..b}", "thus \"{d \\<in> extensional A. prod d A = (b :: nat)} \\<subseteq> \\<dots>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2 \\<in> A; prod ?d2 A = b\\<rbrakk>\n  \\<Longrightarrow> ?d2 ?x2 \\<le> b\n\ngoal (1 subgoal):\n 1. {d \\<in> extensional A. prod d A = b}\n    \\<subseteq> A \\<rightarrow>\\<^sub>E {..b}", "by (auto simp: extensional_def)"], ["proof (state)\nthis:\n  {d \\<in> extensional A. prod d A = b}\n  \\<subseteq> A \\<rightarrow>\\<^sub>E {..b}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The $n$-th coefficient of a product of Dirichlet series can be determined by \n  summing over all products of $k_i$-th coefficients of the series such that the \n  product of the $k_i$ is $n$.\n\\<close>"], ["", "lemma fds_nth_prod:\n  assumes \"finite A\" \"A \\<noteq> {}\" \"n > 0\"\n  shows   \"fds_nth (\\<Prod>x\\<in>A. f x) n = \n             (\\<Sum>d | d \\<in> extensional A \\<and> prod d A = n. \\<Prod>x\\<in>A. fds_nth (f x) (d x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (prod f A) n =\n    (\\<Sum>d | d \\<in> extensional A \\<and> prod d A = n.\n       \\<Prod>x\\<in>A. fds_nth (f x) (d x))", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n  0 < n\n\ngoal (1 subgoal):\n 1. fds_nth (prod f A) n =\n    (\\<Sum>d | d \\<in> extensional A \\<and> prod d A = n.\n       \\<Prod>x\\<in>A. fds_nth (f x) (d x))", "proof (induction arbitrary: n rule: finite_ne_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x n.\n       0 < n \\<Longrightarrow>\n       fds_nth (prod f {x}) n =\n       (\\<Sum>d | d \\<in> extensional {x} \\<and> prod d {x} = n.\n          \\<Prod>x\\<in>{x}. fds_nth (f x) (d x))\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "case (singleton x n)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (2 subgoals):\n 1. \\<And>x n.\n       0 < n \\<Longrightarrow>\n       fds_nth (prod f {x}) n =\n       (\\<Sum>d | d \\<in> extensional {x} \\<and> prod d {x} = n.\n          \\<Prod>x\\<in>{x}. fds_nth (f x) (d x))\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "have \"{d \\<in> extensional {x}. d x = n} = {\\<lambda>y. if y = x then n else undefined}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {d \\<in> extensional {x}. d x = n} =\n    {\\<lambda>y. if y = x then n else undefined}", "by (auto simp: extensional_def)"], ["proof (state)\nthis:\n  {d \\<in> extensional {x}. d x = n} =\n  {\\<lambda>y. if y = x then n else undefined}\n\ngoal (2 subgoals):\n 1. \\<And>x n.\n       0 < n \\<Longrightarrow>\n       fds_nth (prod f {x}) n =\n       (\\<Sum>d | d \\<in> extensional {x} \\<and> prod d {x} = n.\n          \\<Prod>x\\<in>{x}. fds_nth (f x) (d x))\n 2. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "thus ?case"], ["proof (prove)\nusing this:\n  {d \\<in> extensional {x}. d x = n} =\n  {\\<lambda>y. if y = x then n else undefined}\n\ngoal (1 subgoal):\n 1. fds_nth (prod f {x}) n =\n    (\\<Sum>d | d \\<in> extensional {x} \\<and> prod d {x} = n.\n       \\<Prod>x\\<in>{x}. fds_nth (f x) (d x))", "by simp"], ["proof (state)\nthis:\n  fds_nth (prod f {x}) n =\n  (\\<Sum>d | d \\<in> extensional {x} \\<and> prod d {x} = n.\n     \\<Prod>x\\<in>{x}. fds_nth (f x) (d x))\n\ngoal (1 subgoal):\n 1. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "case (insert x A n)"], ["proof (state)\nthis:\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  0 < ?n \\<Longrightarrow>\n  fds_nth (prod f A) ?n =\n  (\\<Sum>d | d \\<in> extensional A \\<and> prod d A = ?n.\n     \\<Prod>x\\<in>A. fds_nth (f x) (d x))\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "let ?f = \"\\<lambda>d. ((d x, n div d x), d(x := undefined))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "let ?g = \"\\<lambda>(z,d). d(x := fst z)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "from insert"], ["proof (chain)\npicking this:\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  0 < ?n \\<Longrightarrow>\n  fds_nth (prod f A) ?n =\n  (\\<Sum>d | d \\<in> extensional A \\<and> prod d A = ?n.\n     \\<Prod>x\\<in>A. fds_nth (f x) (d x))\n  0 < n", "have \"fds_nth (\\<Prod>x\\<in>insert x A. f x) n = \n           (\\<Sum>z | fst z * snd z = n. \\<Sum>d | d \\<in> extensional A \\<and> prod d A = snd z. \n              fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))\""], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  0 < ?n \\<Longrightarrow>\n  fds_nth (prod f A) ?n =\n  (\\<Sum>d | d \\<in> extensional A \\<and> prod d A = ?n.\n     \\<Prod>x\\<in>A. fds_nth (f x) (d x))\n  0 < n\n\ngoal (1 subgoal):\n 1. fds_nth (prod f (insert x A)) n =\n    (\\<Sum>z | fst z * snd z = n.\n       \\<Sum>d | d \\<in> extensional A \\<and> prod d A = snd z.\n         fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "by (simp add: fds_nth_mult dirichlet_prod_altdef2 sum_distrib_left case_prod_unfold)"], ["proof (state)\nthis:\n  fds_nth (prod f (insert x A)) n =\n  (\\<Sum>z | fst z * snd z = n.\n     \\<Sum>d | d \\<in> extensional A \\<and> prod d A = snd z.\n       fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))\n\ngoal (1 subgoal):\n 1. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "also"], ["proof (state)\nthis:\n  fds_nth (prod f (insert x A)) n =\n  (\\<Sum>z | fst z * snd z = n.\n     \\<Sum>d | d \\<in> extensional A \\<and> prod d A = snd z.\n       fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))\n\ngoal (1 subgoal):\n 1. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "have \"\\<dots> = (\\<Sum>(z,d)\\<in>(SIGMA x:{z. fst z * snd z = n}. {d \\<in> extensional A. prod d A = snd x}).\n                      fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>z | fst z * snd z = n.\n       \\<Sum>d | d \\<in> extensional A \\<and> prod d A = snd z.\n         fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x))) =\n    (\\<Sum>(z, d)\n           \\<in>(SIGMA x:{z. fst z * snd z = n}.\n                    {d \\<in> extensional A. prod d A = snd x}).\n       fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "using finite_divisors_nat'[of n] and insert.hyps and \\<open>n > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < n \\<Longrightarrow> finite {(a, b). a * b = n}\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>z | fst z * snd z = n.\n       \\<Sum>d | d \\<in> extensional A \\<and> prod d A = snd z.\n         fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x))) =\n    (\\<Sum>(z, d)\n           \\<in>(SIGMA x:{z. fst z * snd z = n}.\n                    {d \\<in> extensional A. prod d A = snd x}).\n       fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "by (intro sum.Sigma finite_extensional_prod_nat ballI)  (auto simp: case_prod_unfold)"], ["proof (state)\nthis:\n  (\\<Sum>z | fst z * snd z = n.\n     \\<Sum>d | d \\<in> extensional A \\<and> prod d A = snd z.\n       fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x))) =\n  (\\<Sum>(z, d)\n         \\<in>(SIGMA x:{z. fst z * snd z = n}.\n                  {d \\<in> extensional A. prod d A = snd x}).\n     fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))\n\ngoal (1 subgoal):\n 1. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "also"], ["proof (state)\nthis:\n  (\\<Sum>z | fst z * snd z = n.\n     \\<Sum>d | d \\<in> extensional A \\<and> prod d A = snd z.\n       fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x))) =\n  (\\<Sum>(z, d)\n         \\<in>(SIGMA x:{z. fst z * snd z = n}.\n                  {d \\<in> extensional A. prod d A = snd x}).\n     fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))\n\ngoal (1 subgoal):\n 1. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "have \"\\<dots> = (\\<Sum>d | d \\<in> extensional (insert x A) \\<and> prod d (insert x A) = n.\n                      (\\<Prod>x\\<in>insert x A. fds_nth (f x) (d x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(z, d)\n           \\<in>(SIGMA x:{z. fst z * snd z = n}.\n                    {d \\<in> extensional A. prod d A = snd x}).\n       fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x))) =\n    (\\<Sum>d | d \\<in> extensional (insert x A) \\<and>\n               prod d (insert x A) = n.\n       \\<Prod>x\\<in>insert x A. fds_nth (f x) (d x))", "proof (rule sum.reindex_bij_witness [of _ ?f ?g], goal_cases)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (((case a of (z, d) \\<Rightarrow> d(x := fst z)) x,\n         n div (case a of (z, d) \\<Rightarrow> d(x := fst z)) x),\n        (case a of (z, d) \\<Rightarrow> d(x := fst z))(x := undefined)) =\n       a\n 2. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (case a of (z, d) \\<Rightarrow> d(x := fst z))\n       \\<in> {d \\<in> extensional (insert x A). prod d (insert x A) = n}\n 3. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 4. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       ((b x, n div b x), b(x := undefined))\n       \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                 {d \\<in> extensional A. prod d A = snd x})\n 5. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "case (1 z)"], ["proof (state)\nthis:\n  z \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})\n\ngoal (5 subgoals):\n 1. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (((case a of (z, d) \\<Rightarrow> d(x := fst z)) x,\n         n div (case a of (z, d) \\<Rightarrow> d(x := fst z)) x),\n        (case a of (z, d) \\<Rightarrow> d(x := fst z))(x := undefined)) =\n       a\n 2. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (case a of (z, d) \\<Rightarrow> d(x := fst z))\n       \\<in> {d \\<in> extensional (insert x A). prod d (insert x A) = n}\n 3. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 4. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       ((b x, n div b x), b(x := undefined))\n       \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                 {d \\<in> extensional A. prod d A = snd x})\n 5. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "thus ?case"], ["proof (prove)\nusing this:\n  z \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})\n\ngoal (1 subgoal):\n 1. (((case z of (z, d) \\<Rightarrow> d(x := fst z)) x,\n      n div (case z of (z, d) \\<Rightarrow> d(x := fst z)) x),\n     (case z of (z, d) \\<Rightarrow> d(x := fst z))(x := undefined)) =\n    z", "using insert.hyps insert.prems"], ["proof (prove)\nusing this:\n  z \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  0 < n\n\ngoal (1 subgoal):\n 1. (((case z of (z, d) \\<Rightarrow> d(x := fst z)) x,\n      n div (case z of (z, d) \\<Rightarrow> d(x := fst z)) x),\n     (case z of (z, d) \\<Rightarrow> d(x := fst z))(x := undefined)) =\n    z", "by (auto simp: extensional_def)"], ["proof (state)\nthis:\n  (((case z of (z, d) \\<Rightarrow> d(x := fst z)) x,\n    n div (case z of (z, d) \\<Rightarrow> d(x := fst z)) x),\n   (case z of (z, d) \\<Rightarrow> d(x := fst z))(x := undefined)) =\n  z\n\ngoal (4 subgoals):\n 1. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (case a of (z, d) \\<Rightarrow> d(x := fst z))\n       \\<in> {d \\<in> extensional (insert x A). prod d (insert x A) = n}\n 2. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 3. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       ((b x, n div b x), b(x := undefined))\n       \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                 {d \\<in> extensional A. prod d A = snd x})\n 4. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (case a of (z, d) \\<Rightarrow> d(x := fst z))\n       \\<in> {d \\<in> extensional (insert x A). prod d (insert x A) = n}\n 2. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 3. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       ((b x, n div b x), b(x := undefined))\n       \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                 {d \\<in> extensional A. prod d A = snd x})\n 4. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "case (2 z)"], ["proof (state)\nthis:\n  z \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})\n\ngoal (4 subgoals):\n 1. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (case a of (z, d) \\<Rightarrow> d(x := fst z))\n       \\<in> {d \\<in> extensional (insert x A). prod d (insert x A) = n}\n 2. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 3. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       ((b x, n div b x), b(x := undefined))\n       \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                 {d \\<in> extensional A. prod d A = snd x})\n 4. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "thus ?case"], ["proof (prove)\nusing this:\n  z \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})\n\ngoal (1 subgoal):\n 1. (case z of (z, d) \\<Rightarrow> d(x := fst z))\n    \\<in> {d \\<in> extensional (insert x A). prod d (insert x A) = n}", "using insert.hyps insert.prems"], ["proof (prove)\nusing this:\n  z \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  0 < n\n\ngoal (1 subgoal):\n 1. (case z of (z, d) \\<Rightarrow> d(x := fst z))\n    \\<in> {d \\<in> extensional (insert x A). prod d (insert x A) = n}", "by (auto simp: extensional_def sum.delta intro!: prod.cong)"], ["proof (state)\nthis:\n  (case z of (z, d) \\<Rightarrow> d(x := fst z))\n  \\<in> {d \\<in> extensional (insert x A). prod d (insert x A) = n}\n\ngoal (3 subgoals):\n 1. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 2. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       ((b x, n div b x), b(x := undefined))\n       \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                 {d \\<in> extensional A. prod d A = snd x})\n 3. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 2. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       ((b x, n div b x), b(x := undefined))\n       \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                 {d \\<in> extensional A. prod d A = snd x})\n 3. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "case (4 z)"], ["proof (state)\nthis:\n  z \\<in> {d \\<in> extensional (insert x A). prod d (insert x A) = n}\n\ngoal (3 subgoals):\n 1. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 2. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       ((b x, n div b x), b(x := undefined))\n       \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                 {d \\<in> extensional A. prod d A = snd x})\n 3. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "thus ?case"], ["proof (prove)\nusing this:\n  z \\<in> {d \\<in> extensional (insert x A). prod d (insert x A) = n}\n\ngoal (1 subgoal):\n 1. ((z x, n div z x), z(x := undefined))\n    \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})", "using insert.hyps insert.prems"], ["proof (prove)\nusing this:\n  z \\<in> {d \\<in> extensional (insert x A). prod d (insert x A) = n}\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  0 < n\n\ngoal (1 subgoal):\n 1. ((z x, n div z x), z(x := undefined))\n    \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})", "by (auto  intro!: prod.cong)"], ["proof (state)\nthis:\n  ((z x, n div z x), z(x := undefined))\n  \\<in> (SIGMA x:{z. fst z * snd z = n}.\n            {d \\<in> extensional A. prod d A = snd x})\n\ngoal (2 subgoals):\n 1. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 2. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 2. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "case (5 z)"], ["proof (state)\nthis:\n  z \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})\n\ngoal (2 subgoals):\n 1. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 2. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "with insert.hyps insert.prems"], ["proof (chain)\npicking this:\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  0 < n\n  z \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})", "have \"(\\<Prod>xa\\<in>A. fds_nth (f xa) (if xa = x then fst (fst z) else snd z xa)) =\n              (\\<Prod>x\\<in>A. fds_nth (f x) (snd z x))\""], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  0 < n\n  z \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>A.\n       fds_nth (f xa) (if xa = x then fst (fst z) else snd z xa)) =\n    (\\<Prod>x\\<in>A. fds_nth (f x) (snd z x))", "by (intro prod.cong) auto"], ["proof (state)\nthis:\n  (\\<Prod>xa\\<in>A.\n     fds_nth (f xa) (if xa = x then fst (fst z) else snd z xa)) =\n  (\\<Prod>x\\<in>A. fds_nth (f x) (snd z x))\n\ngoal (2 subgoals):\n 1. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b\n 2. \\<And>a.\n       a \\<in> (SIGMA x:{z. fst z * snd z = n}.\n                   {d \\<in> extensional A.\n                    prod d A = snd x}) \\<Longrightarrow>\n       (\\<Prod>xa\\<in>insert x A.\n          fds_nth (f xa)\n           ((case a of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n       (case a of\n        (z, d) \\<Rightarrow>\n          fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "with 5 insert.hyps insert.prems"], ["proof (chain)\npicking this:\n  z \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  0 < n\n  (\\<Prod>xa\\<in>A.\n     fds_nth (f xa) (if xa = x then fst (fst z) else snd z xa)) =\n  (\\<Prod>x\\<in>A. fds_nth (f x) (snd z x))", "show ?case"], ["proof (prove)\nusing this:\n  z \\<in> (SIGMA x:{z. fst z * snd z = n}.\n              {d \\<in> extensional A. prod d A = snd x})\n  finite A\n  A \\<noteq> {}\n  x \\<notin> A\n  0 < n\n  (\\<Prod>xa\\<in>A.\n     fds_nth (f xa) (if xa = x then fst (fst z) else snd z xa)) =\n  (\\<Prod>x\\<in>A. fds_nth (f x) (snd z x))\n\ngoal (1 subgoal):\n 1. (\\<Prod>xa\\<in>insert x A.\n       fds_nth (f xa) ((case z of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n    (case z of\n     (z, d) \\<Rightarrow>\n       fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))", "by (simp add: case_prod_unfold)"], ["proof (state)\nthis:\n  (\\<Prod>xa\\<in>insert x A.\n     fds_nth (f xa) ((case z of (z, d) \\<Rightarrow> d(x := fst z)) xa)) =\n  (case z of\n   (z, d) \\<Rightarrow>\n     fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x)))\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> {d \\<in> extensional (insert x A).\n                prod d (insert x A) = n} \\<Longrightarrow>\n       (case ((b x, n div b x), b(x := undefined)) of\n        (z, d) \\<Rightarrow> d(x := fst z)) =\n       b", "qed auto"], ["proof (state)\nthis:\n  (\\<Sum>(z, d)\n         \\<in>(SIGMA x:{z. fst z * snd z = n}.\n                  {d \\<in> extensional A. prod d A = snd x}).\n     fds_nth (f x) (fst z) * (\\<Prod>x\\<in>A. fds_nth (f x) (d x))) =\n  (\\<Sum>d | d \\<in> extensional (insert x A) \\<and>\n             prod d (insert x A) = n.\n     \\<Prod>x\\<in>insert x A. fds_nth (f x) (d x))\n\ngoal (1 subgoal):\n 1. \\<And>x F n.\n       \\<lbrakk>finite F; F \\<noteq> {}; x \\<notin> F;\n        \\<And>n.\n           0 < n \\<Longrightarrow>\n           fds_nth (prod f F) n =\n           (\\<Sum>d | d \\<in> extensional F \\<and> prod d F = n.\n              \\<Prod>x\\<in>F. fds_nth (f x) (d x));\n        0 < n\\<rbrakk>\n       \\<Longrightarrow> fds_nth (prod f (insert x F)) n =\n                         (\\<Sum>d | d \\<in> extensional (insert x F) \\<and>\n                                    prod d (insert x F) = n.\n                            \\<Prod>x\\<in>insert x F. fds_nth (f x) (d x))", "finally"], ["proof (chain)\npicking this:\n  fds_nth (prod f (insert x A)) n =\n  (\\<Sum>d | d \\<in> extensional (insert x A) \\<and>\n             prod d (insert x A) = n.\n     \\<Prod>x\\<in>insert x A. fds_nth (f x) (d x))", "show ?case"], ["proof (prove)\nusing this:\n  fds_nth (prod f (insert x A)) n =\n  (\\<Sum>d | d \\<in> extensional (insert x A) \\<and>\n             prod d (insert x A) = n.\n     \\<Prod>x\\<in>insert x A. fds_nth (f x) (d x))\n\ngoal (1 subgoal):\n 1. fds_nth (prod f (insert x A)) n =\n    (\\<Sum>d | d \\<in> extensional (insert x A) \\<and>\n               prod d (insert x A) = n.\n       \\<Prod>x\\<in>insert x A. fds_nth (f x) (d x))", "."], ["proof (state)\nthis:\n  fds_nth (prod f (insert x A)) n =\n  (\\<Sum>d | d \\<in> extensional (insert x A) \\<and>\n             prod d (insert x A) = n.\n     \\<Prod>x\\<in>insert x A. fds_nth (f x) (d x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_nth_power_Suc_0 [simp]: \"fds_nth (f ^ n) (Suc 0) = fds_nth f (Suc 0) ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f ^ n) (Suc 0) = fds_nth f (Suc 0) ^ n", "by (induction n) simp_all"], ["", "lemma fds_nth_prod_Suc_0 [simp]: \"fds_nth (prod f A) (Suc 0) = (\\<Prod>x\\<in>A. fds_nth (f x) (Suc 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (prod f A) (Suc 0) = (\\<Prod>x\\<in>A. fds_nth (f x) (Suc 0))", "by (induction A rule: infinite_finite_induct) simp_all"], ["", "lemma fds_nth_power_eq_0:\n  assumes \"n < 2 ^ k\" \"fds_nth f 1 = 0\"\n  shows   \"fds_nth (f ^ k) n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f ^ k) n = (0::'a)", "using assms(1)"], ["proof (prove)\nusing this:\n  n < 2 ^ k\n\ngoal (1 subgoal):\n 1. fds_nth (f ^ k) n = (0::'a)", "proof (induction k arbitrary: n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n. n < 2 ^ 0 \\<Longrightarrow> fds_nth (f ^ 0) n = (0::'a)\n 2. \\<And>k n.\n       \\<lbrakk>\\<And>n.\n                   n < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) n = (0::'a);\n        n < 2 ^ Suc k\\<rbrakk>\n       \\<Longrightarrow> fds_nth (f ^ Suc k) n = (0::'a)", "case 0"], ["proof (state)\nthis:\n  n < 2 ^ 0\n\ngoal (2 subgoals):\n 1. \\<And>n. n < 2 ^ 0 \\<Longrightarrow> fds_nth (f ^ 0) n = (0::'a)\n 2. \\<And>k n.\n       \\<lbrakk>\\<And>n.\n                   n < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) n = (0::'a);\n        n < 2 ^ Suc k\\<rbrakk>\n       \\<Longrightarrow> fds_nth (f ^ Suc k) n = (0::'a)", "thus ?case"], ["proof (prove)\nusing this:\n  n < 2 ^ 0\n\ngoal (1 subgoal):\n 1. fds_nth (f ^ 0) n = (0::'a)", "by (simp add: one_fds_def)"], ["proof (state)\nthis:\n  fds_nth (f ^ 0) n = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<And>n.\n                   n < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) n = (0::'a);\n        n < 2 ^ Suc k\\<rbrakk>\n       \\<Longrightarrow> fds_nth (f ^ Suc k) n = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<And>n.\n                   n < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) n = (0::'a);\n        n < 2 ^ Suc k\\<rbrakk>\n       \\<Longrightarrow> fds_nth (f ^ Suc k) n = (0::'a)", "case (Suc k n)"], ["proof (state)\nthis:\n  ?n < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) ?n = (0::'a)\n  n < 2 ^ Suc k\n\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<And>n.\n                   n < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) n = (0::'a);\n        n < 2 ^ Suc k\\<rbrakk>\n       \\<Longrightarrow> fds_nth (f ^ Suc k) n = (0::'a)", "have \"fds_nth (f ^ Suc k) n = dirichlet_prod (fds_nth (f ^ k)) (fds_nth f) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f ^ Suc k) n = dirichlet_prod (fds_nth (f ^ k)) (fds_nth f) n", "by (subst power_Suc2) (simp add: fds_nth_mult dirichlet_prod_commutes)"], ["proof (state)\nthis:\n  fds_nth (f ^ Suc k) n = dirichlet_prod (fds_nth (f ^ k)) (fds_nth f) n\n\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<And>n.\n                   n < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) n = (0::'a);\n        n < 2 ^ Suc k\\<rbrakk>\n       \\<Longrightarrow> fds_nth (f ^ Suc k) n = (0::'a)", "also"], ["proof (state)\nthis:\n  fds_nth (f ^ Suc k) n = dirichlet_prod (fds_nth (f ^ k)) (fds_nth f) n\n\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<And>n.\n                   n < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) n = (0::'a);\n        n < 2 ^ Suc k\\<rbrakk>\n       \\<Longrightarrow> fds_nth (f ^ Suc k) n = (0::'a)", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (fds_nth (f ^ k)) (fds_nth f) n = (0::'a)", "unfolding dirichlet_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. fds_nth (f ^ k) d * fds_nth f (n div d)) = (0::'a)", "proof (intro sum.neutral ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {d. d dvd n} \\<Longrightarrow>\n       fds_nth (f ^ k) x * fds_nth f (n div x) = (0::'a)", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {d. d dvd n} \\<Longrightarrow>\n       fds_nth (f ^ k) x * fds_nth f (n div x) = (0::'a)", "assume d: \"d \\<in> {d. d dvd n}\""], ["proof (state)\nthis:\n  d \\<in> {d. d dvd n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {d. d dvd n} \\<Longrightarrow>\n       fds_nth (f ^ k) x * fds_nth f (n div x) = (0::'a)", "show \"fds_nth (f ^ k) d * fds_nth f (n div d) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "proof (cases \"d < 2 ^ k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)\n 2. \\<not> d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "case True"], ["proof (state)\nthis:\n  d < 2 ^ k\n\ngoal (2 subgoals):\n 1. d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)\n 2. \\<not> d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  d < 2 ^ k\n\ngoal (1 subgoal):\n 1. fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "using Suc.IH[of d]"], ["proof (prove)\nusing this:\n  d < 2 ^ k\n  d < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) d = (0::'a)\n\ngoal (1 subgoal):\n 1. fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "by simp"], ["proof (state)\nthis:\n  fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "case False"], ["proof (state)\nthis:\n  \\<not> d < 2 ^ k\n\ngoal (1 subgoal):\n 1. \\<not> d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "hence \"(n div d) * 2 ^ k \\<le> (n div d) * d\""], ["proof (prove)\nusing this:\n  \\<not> d < 2 ^ k\n\ngoal (1 subgoal):\n 1. n div d * 2 ^ k \\<le> n div d * d", "by (intro mult_left_mono) auto"], ["proof (state)\nthis:\n  n div d * 2 ^ k \\<le> n div d * d\n\ngoal (1 subgoal):\n 1. \\<not> d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "also"], ["proof (state)\nthis:\n  n div d * 2 ^ k \\<le> n div d * d\n\ngoal (1 subgoal):\n 1. \\<not> d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "from d"], ["proof (chain)\npicking this:\n  d \\<in> {d. d dvd n}", "have \"(n div d) * d = n\""], ["proof (prove)\nusing this:\n  d \\<in> {d. d dvd n}\n\ngoal (1 subgoal):\n 1. n div d * d = n", "by simp"], ["proof (state)\nthis:\n  n div d * d = n\n\ngoal (1 subgoal):\n 1. \\<not> d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "also"], ["proof (state)\nthis:\n  n div d * d = n\n\ngoal (1 subgoal):\n 1. \\<not> d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "from Suc"], ["proof (chain)\npicking this:\n  ?n < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) ?n = (0::'a)\n  n < 2 ^ Suc k", "have \"n < 2 * 2 ^ k\""], ["proof (prove)\nusing this:\n  ?n < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) ?n = (0::'a)\n  n < 2 ^ Suc k\n\ngoal (1 subgoal):\n 1. n < 2 * 2 ^ k", "by simp"], ["proof (state)\nthis:\n  n < 2 * 2 ^ k\n\ngoal (1 subgoal):\n 1. \\<not> d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  n div d * 2 ^ k < 2 * 2 ^ k", "have \"n div d \\<le> 1\""], ["proof (prove)\nusing this:\n  n div d * 2 ^ k < 2 * 2 ^ k\n\ngoal (1 subgoal):\n 1. n div d \\<le> 1", "by simp"], ["proof (state)\nthis:\n  n div d \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<not> d < 2 ^ k \\<Longrightarrow>\n    fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "with assms(2)"], ["proof (chain)\npicking this:\n  fds_nth f 1 = (0::'a)\n  n div d \\<le> 1", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_nth f 1 = (0::'a)\n  n div d \\<le> 1\n\ngoal (1 subgoal):\n 1. fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)", "by (cases \"n div d\") simp_all"], ["proof (state)\nthis:\n  fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_nth (f ^ k) d * fds_nth f (n div d) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dirichlet_prod (fds_nth (f ^ k)) (fds_nth f) n = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>k n.\n       \\<lbrakk>\\<And>n.\n                   n < 2 ^ k \\<Longrightarrow> fds_nth (f ^ k) n = (0::'a);\n        n < 2 ^ Suc k\\<rbrakk>\n       \\<Longrightarrow> fds_nth (f ^ Suc k) n = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  fds_nth (f ^ Suc k) n = (0::'a)", "show ?case"], ["proof (prove)\nusing this:\n  fds_nth (f ^ Suc k) n = (0::'a)\n\ngoal (1 subgoal):\n 1. fds_nth (f ^ Suc k) n = (0::'a)", "."], ["proof (state)\nthis:\n  fds_nth (f ^ Suc k) n = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Shifting the argument\\<close>"], ["", "class nat_power = semiring_1 +\n  fixes nat_power :: \"nat \\<Rightarrow> 'a \\<Rightarrow> 'a\"\n  assumes nat_power_0_left [simp]:  \"x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\"\n  assumes nat_power_0_right [simp]: \"n > 0 \\<Longrightarrow> nat_power n 0 = 1\"\n  assumes nat_power_1_left [simp]:  \"nat_power (Suc 0) x = 1\"\n  assumes nat_power_1_right [simp]: \"nat_power n 1 = of_nat n\"\n  assumes nat_power_add:            \"n > 0 \\<Longrightarrow> nat_power n (a + b) = nat_power n a * nat_power n b\"\n  assumes nat_power_mult_distrib:   \n    \"m > 0 \\<Longrightarrow> n > 0 \\<Longrightarrow> nat_power (m * n) a = nat_power m a * nat_power n a\"\n  assumes nat_power_power:\n    \"n > 0 \\<Longrightarrow> nat_power n (a * of_nat m) = nat_power n a ^ m\"\nbegin"], ["", "lemma nat_power_of_nat [simp]: \"m > 0 \\<Longrightarrow> nat_power m (of_nat n) = of_nat (m ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> nat_power m (of_nat n) = of_nat (m ^ n)", "by (induction n) (simp_all add: nat_power_add)"], ["", "lemma nat_power_power_left: \"m > 0 \\<Longrightarrow> nat_power (m ^ k) n = nat_power m n ^ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> nat_power (m ^ k) n = nat_power m n ^ k", "by (induction k) (simp_all add: nat_power_mult_distrib)"], ["", "end"], ["", "class nat_power_field = nat_power + field +\n  assumes nat_power_nonzero [simp]: \"n > 0 \\<Longrightarrow> nat_power n z \\<noteq> 0\"\nbegin"], ["", "lemma nat_power_diff: \"n > 0 \\<Longrightarrow> nat_power n (a - b) = nat_power n a / nat_power n b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    nat_power n (a - b) = nat_power n a / nat_power n b", "using nat_power_add[of n \"a - b\" b]"], ["proof (prove)\nusing this:\n  0 < n \\<Longrightarrow>\n  nat_power n (a - b + b) = nat_power n (a - b) * nat_power n b\n\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    nat_power n (a - b) = nat_power n a / nat_power n b", "by (simp add: divide_simps)"], ["", "end"], ["", "instantiation nat :: nat_power\nbegin"], ["", "definition [simp]: \"nat_power_nat a b = (a ^ b :: nat)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(nat, nat_power_class)", "by standard (simp_all add: power_add power_mult_distrib power_mult)"], ["", "end"], ["", "instantiation real :: nat_power_field\nbegin"], ["", "definition [simp]: \"nat_power_real a b = (real a powr b)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(real, nat_power_field_class)", "proof"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = real n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>m n a.\n       \\<lbrakk>0 < m; 0 < n\\<rbrakk>\n       \\<Longrightarrow> nat_power (m * n) a = nat_power m a * nat_power n a\n 7. \\<And>n a m.\n       0 < n \\<Longrightarrow> nat_power n (a * real m) = nat_power n a ^ m\n 8. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0", "fix n m :: nat and a :: real"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = real n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>m n a.\n       \\<lbrakk>0 < m; 0 < n\\<rbrakk>\n       \\<Longrightarrow> nat_power (m * n) a = nat_power m a * nat_power n a\n 7. \\<And>n a m.\n       0 < n \\<Longrightarrow> nat_power n (a * real m) = nat_power n a ^ m\n 8. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0", "assume \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (8 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = real n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>m n a.\n       \\<lbrakk>0 < m; 0 < n\\<rbrakk>\n       \\<Longrightarrow> nat_power (m * n) a = nat_power m a * nat_power n a\n 7. \\<And>n a m.\n       0 < n \\<Longrightarrow> nat_power n (a * real m) = nat_power n a ^ m\n 8. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0", "thus \"nat_power n (a * real m) = nat_power n a ^ m\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. nat_power n (a * real m) = nat_power n a ^ m", "by (simp add: powr_def exp_of_nat_mult [symmetric])"], ["proof (state)\nthis:\n  nat_power n (a * real m) = nat_power n a ^ m\n\ngoal (7 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = real n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>m n a.\n       \\<lbrakk>0 < m; 0 < n\\<rbrakk>\n       \\<Longrightarrow> nat_power (m * n) a = nat_power m a * nat_power n a\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0", "qed (simp_all add: powr_add powr_mult)"], ["", "end"], ["", "text \\<open>\n  The following operation corresponds to shifting the argument of a Dirichlet series, i.\\,e.\\ \n  subtracting a constant from it. In effect, this turns the series\n    \\[A(s) = \\sum_{n=1}^\\infty \\frac{a_n}{n^s}\\]\n  into the series\n    \\[A(s - c) = \\sum_{n=1}^\\infty \\frac{n^c \\cdot a_n}{n^s}\\ .\\]\n\\<close>"], ["", "definition fds_shift :: \"'a :: nat_power \\<Rightarrow> 'a fds \\<Rightarrow> 'a fds\" where\n  \"fds_shift c f = fds (\\<lambda>n. fds_nth f n * nat_power n c)\""], ["", "lemma fds_nth_shift [simp]: \"fds_nth (fds_shift c f) n = fds_nth f n * nat_power n c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_shift c f) n = fds_nth f n * nat_power n c", "by (simp add: fds_shift_def fds_nth_fds)"], ["", "lemma fds_shift_shift [simp]: \"fds_shift c (fds_shift c' f) = fds_shift (c' + c) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift c (fds_shift c' f) = fds_shift (c' + c) f", "by (rule fds_eqI) (simp add: nat_power_add mult_ac)"], ["", "lemma fds_shift_zero [simp]: \"fds_shift c 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift c 0 = 0", "by (rule fds_eqI) simp"], ["", "lemma fds_shift_1 [simp]: \"fds_shift a 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift a 1 = 1", "by (rule fds_eqI) (simp add: fds_shift_def one_fds_def)"], ["", "lemma fds_shift_const [simp]: \"fds_shift a (fds_const c) = fds_const c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift a (fds_const c) = fds_const c", "by (rule fds_eqI) (simp add: fds_shift_def fds_const_def)"], ["", "lemma fds_shift_add [simp]: \n  fixes f g :: \"'a :: {monoid_add, nat_power} fds\"\n  shows \"fds_shift c (f + g) = fds_shift c f + fds_shift c g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift c (f + g) = fds_shift c f + fds_shift c g", "by (rule fds_eqI) (simp add: algebra_simps)"], ["", "lemma fds_shift_minus [simp]: \n  fixes f g :: \"'a :: {comm_semiring_1_cancel, nat_power} fds\"\n  shows \"fds_shift c (f - g) = fds_shift c f - fds_shift c g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift c (f - g) = fds_shift c f - fds_shift c g", "by (rule fds_eqI) (simp add: algebra_simps)"], ["", "lemma fds_shift_uminus [simp]: \n  fixes f :: \"'a :: {ring, nat_power} fds\"\n  shows \"fds_shift c (-f) = -fds_shift c f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift c (- f) = - fds_shift c f", "by (rule fds_eqI) (simp add: algebra_simps)"], ["", "lemma fds_shift_mult [simp]:\n  fixes f g :: \"'a :: {comm_semiring, nat_power} fds\"\n  shows \"fds_shift c (f * g) = fds_shift c f * fds_shift c g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift c (f * g) = fds_shift c f * fds_shift c g", "by (rule fds_eqI) \n     (auto simp: algebra_simps fds_nth_mult dirichlet_prod_altdef2 \n        sum_distrib_left sum_distrib_right nat_power_mult_distrib intro!: sum.cong)"], ["", "lemma fds_shift_power [simp]:\n  fixes f :: \"'a :: {comm_semiring, nat_power} fds\"\n  shows \"fds_shift c (f ^ n) = fds_shift c f ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift c (f ^ n) = fds_shift c f ^ n", "by (induction n) simp_all"], ["", "lemma fds_shift_by_0 [simp]: \"fds_shift 0 f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift (0::'a) f = f", "by (simp add: fds_shift_def)"], ["", "lemma fds_shift_inverse [simp]: \n  \"fds_shift (a :: 'a :: {field, nat_power}) (inverse f) = inverse (fds_shift a f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift a (inverse f) = inverse (fds_shift a f)", "proof (cases \"fds_nth f 1 = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_nth f 1 = (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)\n 2. fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)", "case False"], ["proof (state)\nthis:\n  fds_nth f 1 \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. fds_nth f 1 = (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)\n 2. fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)", "have \"fds_shift a f * fds_shift a (inverse f) = fds_shift a (f * inverse f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift a f * fds_shift a (inverse f) = fds_shift a (f * inverse f)", "by simp"], ["proof (state)\nthis:\n  fds_shift a f * fds_shift a (inverse f) = fds_shift a (f * inverse f)\n\ngoal (2 subgoals):\n 1. fds_nth f 1 = (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)\n 2. fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)", "also"], ["proof (state)\nthis:\n  fds_shift a f * fds_shift a (inverse f) = fds_shift a (f * inverse f)\n\ngoal (2 subgoals):\n 1. fds_nth f 1 = (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)\n 2. fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)", "from False"], ["proof (chain)\npicking this:\n  fds_nth f 1 \\<noteq> (0::'a)", "have \"f * inverse f = 1\""], ["proof (prove)\nusing this:\n  fds_nth f 1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f * inverse f = 1", "by (intro fds_right_inverse)"], ["proof (state)\nthis:\n  f * inverse f = 1\n\ngoal (2 subgoals):\n 1. fds_nth f 1 = (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)\n 2. fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)", "finally"], ["proof (chain)\npicking this:\n  fds_shift a f * fds_shift a (inverse f) = fds_shift a 1", "have \"fds_shift a f * fds_shift a (inverse f) = 1\""], ["proof (prove)\nusing this:\n  fds_shift a f * fds_shift a (inverse f) = fds_shift a 1\n\ngoal (1 subgoal):\n 1. fds_shift a f * fds_shift a (inverse f) = 1", "by simp"], ["proof (state)\nthis:\n  fds_shift a f * fds_shift a (inverse f) = 1\n\ngoal (2 subgoals):\n 1. fds_nth f 1 = (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)\n 2. fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  fds_shift a f * fds_shift a (inverse f) = 1\n\ngoal (1 subgoal):\n 1. fds_shift a (inverse f) = inverse (fds_shift a f)", "by (rule fds_right_inverse_unique)"], ["proof (state)\nthis:\n  fds_shift a (inverse f) = inverse (fds_shift a f)\n\ngoal (1 subgoal):\n 1. fds_nth f 1 = (0::'a) \\<Longrightarrow>\n    fds_shift a (inverse f) = inverse (fds_shift a f)", "qed (auto simp: inverse_fds_nonunit)"], ["", "lemma fds_shift_divide [simp]: \n  \"fds_shift (a :: 'a :: {field, nat_power}) (f / g) = fds_shift a f / fds_shift a g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift a (f / g) = fds_shift a f / fds_shift a g", "by (simp add: divide_fds_def)"], ["", "lemma fds_shift_sum [simp]: \"fds_shift a (\\<Sum>x\\<in>A. f x) = (\\<Sum>x\\<in>A. fds_shift a (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift a (sum f A) = (\\<Sum>x\\<in>A. fds_shift a (f x))", "by (induction A rule: infinite_finite_induct) simp_all"], ["", "lemma fds_shift_prod [simp]: \"fds_shift a (\\<Prod>x\\<in>A. f x) = (\\<Prod>x\\<in>A. fds_shift a (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift a (prod f A) = (\\<Prod>x\\<in>A. fds_shift a (f x))", "by (induction A rule: infinite_finite_induct) simp_all"], ["", "subsection \\<open>Scaling the argument\\<close>"], ["", "text \\<open>\n  The following operation corresponds to scaling the argument of a Dirichlet series with \n  a natural number, i.\\,e.\\ turning the series\n    \\[A(s) = \\sum_{n=1}^\\infty \\frac{a_n}{n^s}\\]\n  into the series\n    \\[A(ks) = \\sum_{n=1}^\\infty \\frac{a_n}{\\left(n^k\\right)^2}\\ .\\]\n\\<close>"], ["", "definition fds_scale :: \"nat \\<Rightarrow> ('a :: zero) fds \\<Rightarrow> 'a fds\" where\n  \"fds_scale c f =\n     fds (\\<lambda>n. if n > 0 \\<and> is_nth_power c n then fds_nth f (nth_root_nat c n) else 0)\""], ["", "lemma fds_scale_0 [simp]: \"fds_scale 0 f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_scale 0 f = 0", "by (auto simp: fds_scale_def fds_eq_iff)"], ["", "lemma fds_scale_1 [simp]: \"fds_scale 1 f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_scale 1 f = f", "by (auto simp: fds_scale_def fds_eq_iff)"], ["", "lemma fds_nth_scale_power [simp]:\n  \"c > 0 \\<Longrightarrow> fds_nth (fds_scale c f) (n ^ c) = fds_nth f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c \\<Longrightarrow> fds_nth (fds_scale c f) (n ^ c) = fds_nth f n", "by (simp add: fds_scale_def fds_nth_fds)"], ["", "lemma fds_nth_scale_nonpower [simp]:\n  \"\\<not>is_nth_power c n \\<Longrightarrow>  fds_nth (fds_scale c f) n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c f) n = (0::'a)", "by (simp add: fds_scale_def fds_nth_fds)"], ["", "lemma fds_nth_scale:\n  \"fds_nth (fds_scale c f) n = \n     (if n > 0 \\<and> is_nth_power c n then fds_nth f (nth_root_nat c n) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c f) n =\n    (if 0 < n \\<and> is_nth_power c n then fds_nth f (nth_root_nat c n)\n     else (0::'a))", "by (cases \"c = 0\") (auto simp: is_nth_power_def)"], ["", "lemma fds_scale_const [simp]: \"c > 0 \\<Longrightarrow> fds_scale c (fds_const c') = fds_const c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c \\<Longrightarrow> fds_scale c (fds_const c') = fds_const c'", "by (rule fds_eqI) (auto simp: fds_nth_scale fds_nth_const elim!: is_nth_powerE)"], ["", "lemma fds_scale_zero [simp]: \"fds_scale c 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_scale c 0 = 0", "by (rule fds_eqI) (simp add: fds_nth_scale)"], ["", "lemma fds_scale_one [simp]: \"c > 0 \\<Longrightarrow> fds_scale c 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c \\<Longrightarrow> fds_scale c 1 = 1", "by (simp only: fds_const_one [symmetric] fds_scale_const)"], ["", "lemma fds_scale_of_nat [simp]: \"c > 0 \\<Longrightarrow> fds_scale c (of_nat n) = of_nat n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c \\<Longrightarrow> fds_scale c (of_nat n) = of_nat n", "by (simp only: fds_const_of_nat [symmetric] fds_scale_const)"], ["", "lemma fds_scale_of_int [simp]: \"c > 0 \\<Longrightarrow> fds_scale c (of_int n) = of_int n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c \\<Longrightarrow> fds_scale c (of_int n) = of_int n", "by (simp only: fds_const_of_int [symmetric] fds_scale_const)"], ["", "lemma fds_scale_numeral [simp]: \"c > 0 \\<Longrightarrow> fds_scale c (numeral n) = numeral n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < c \\<Longrightarrow> fds_scale c (numeral n) = numeral n", "using fds_scale_of_nat[of c \"numeral n\"]"], ["proof (prove)\nusing this:\n  0 < c \\<Longrightarrow>\n  fds_scale c (of_nat (numeral n)) = of_nat (numeral n)\n\ngoal (1 subgoal):\n 1. 0 < c \\<Longrightarrow> fds_scale c (numeral n) = numeral n", "by (simp del: fds_scale_of_nat)"], ["", "lemma fds_scale_scale: \"fds_scale c (fds_scale c' f) = fds_scale (c * c') f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_scale c (fds_scale c' f) = fds_scale (c * c') f", "proof (cases \"c = 0 \\<or> c' = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c = 0 \\<or> c' = 0 \\<Longrightarrow>\n    fds_scale c (fds_scale c' f) = fds_scale (c * c') f\n 2. \\<not> (c = 0 \\<or> c' = 0) \\<Longrightarrow>\n    fds_scale c (fds_scale c' f) = fds_scale (c * c') f", "case False"], ["proof (state)\nthis:\n  \\<not> (c = 0 \\<or> c' = 0)\n\ngoal (2 subgoals):\n 1. c = 0 \\<or> c' = 0 \\<Longrightarrow>\n    fds_scale c (fds_scale c' f) = fds_scale (c * c') f\n 2. \\<not> (c = 0 \\<or> c' = 0) \\<Longrightarrow>\n    fds_scale c (fds_scale c' f) = fds_scale (c * c') f", "hence cc': \"c > 0\" \"c' > 0\""], ["proof (prove)\nusing this:\n  \\<not> (c = 0 \\<or> c' = 0)\n\ngoal (1 subgoal):\n 1. 0 < c &&& 0 < c'", "by auto"], ["proof (state)\nthis:\n  0 < c\n  0 < c'\n\ngoal (2 subgoals):\n 1. c = 0 \\<or> c' = 0 \\<Longrightarrow>\n    fds_scale c (fds_scale c' f) = fds_scale (c * c') f\n 2. \\<not> (c = 0 \\<or> c' = 0) \\<Longrightarrow>\n    fds_scale c (fds_scale c' f) = fds_scale (c * c') f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_scale c (fds_scale c' f) = fds_scale (c * c') f", "proof (rule fds_eqI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_scale c (fds_scale c' f)) n =\n       fds_nth (fds_scale (c * c') f) n", "case (1 n)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_scale c (fds_scale c' f)) n =\n       fds_nth (fds_scale (c * c') f) n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "proof (cases \"is_nth_power (c * c') n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n\n 2. \\<not> is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "case False"], ["proof (state)\nthis:\n  \\<not> is_nth_power (c * c') n\n\ngoal (2 subgoals):\n 1. is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n\n 2. \\<not> is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "with cc' 1"], ["proof (chain)\npicking this:\n  0 < c\n  0 < c'\n  0 < n\n  \\<not> is_nth_power (c * c') n", "have \"fds_nth (fds_scale c (fds_scale c' f)) n = 0\""], ["proof (prove)\nusing this:\n  0 < c\n  0 < c'\n  0 < n\n  \\<not> is_nth_power (c * c') n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c (fds_scale c' f)) n = (0::'a)", "by (auto simp: fds_nth_scale is_nth_power_def power_mult [symmetric] mult.commute)"], ["proof (state)\nthis:\n  fds_nth (fds_scale c (fds_scale c' f)) n = (0::'a)\n\ngoal (2 subgoals):\n 1. is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n\n 2. \\<not> is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "with False cc'"], ["proof (chain)\npicking this:\n  \\<not> is_nth_power (c * c') n\n  0 < c\n  0 < c'\n  fds_nth (fds_scale c (fds_scale c' f)) n = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> is_nth_power (c * c') n\n  0 < c\n  0 < c'\n  fds_nth (fds_scale c (fds_scale c' f)) n = (0::'a)\n\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "by simp"], ["proof (state)\nthis:\n  fds_nth (fds_scale c (fds_scale c' f)) n =\n  fds_nth (fds_scale (c * c') f) n\n\ngoal (1 subgoal):\n 1. is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "case True"], ["proof (state)\nthis:\n  is_nth_power (c * c') n\n\ngoal (1 subgoal):\n 1. is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "from True"], ["proof (chain)\npicking this:\n  is_nth_power (c * c') n", "obtain n' where [simp]: \"n = n' ^ (c' * c)\""], ["proof (prove)\nusing this:\n  is_nth_power (c * c') n\n\ngoal (1 subgoal):\n 1. (\\<And>n'. n = n' ^ (c' * c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: is_nth_powerE simp: mult.commute)"], ["proof (state)\nthis:\n  n = n' ^ (c' * c)\n\ngoal (1 subgoal):\n 1. is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "with cc'"], ["proof (chain)\npicking this:\n  0 < c\n  0 < c'\n  n = n' ^ (c' * c)", "have \"fds_nth (fds_scale (c * c') f) n = fds_nth f n'\""], ["proof (prove)\nusing this:\n  0 < c\n  0 < c'\n  n = n' ^ (c' * c)\n\ngoal (1 subgoal):\n 1. fds_nth (fds_scale (c * c') f) n = fds_nth f n'", "by (simp add: mult.commute)"], ["proof (state)\nthis:\n  fds_nth (fds_scale (c * c') f) n = fds_nth f n'\n\ngoal (1 subgoal):\n 1. is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "also"], ["proof (state)\nthis:\n  fds_nth (fds_scale (c * c') f) n = fds_nth f n'\n\ngoal (1 subgoal):\n 1. is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "have \"\\<dots> = fds_nth (fds_scale c (fds_scale c' f)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f n' = fds_nth (fds_scale c (fds_scale c' f)) n", "using cc'"], ["proof (prove)\nusing this:\n  0 < c\n  0 < c'\n\ngoal (1 subgoal):\n 1. fds_nth f n' = fds_nth (fds_scale c (fds_scale c' f)) n", "by (simp add: power_mult)"], ["proof (state)\nthis:\n  fds_nth f n' = fds_nth (fds_scale c (fds_scale c' f)) n\n\ngoal (1 subgoal):\n 1. is_nth_power (c * c') n \\<Longrightarrow>\n    fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", "finally"], ["proof (chain)\npicking this:\n  fds_nth (fds_scale (c * c') f) n =\n  fds_nth (fds_scale c (fds_scale c' f)) n", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_nth (fds_scale (c * c') f) n =\n  fds_nth (fds_scale c (fds_scale c' f)) n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c (fds_scale c' f)) n =\n    fds_nth (fds_scale (c * c') f) n", ".."], ["proof (state)\nthis:\n  fds_nth (fds_scale c (fds_scale c' f)) n =\n  fds_nth (fds_scale (c * c') f) n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_nth (fds_scale c (fds_scale c' f)) n =\n  fds_nth (fds_scale (c * c') f) n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_scale c (fds_scale c' f) = fds_scale (c * c') f\n\ngoal (1 subgoal):\n 1. c = 0 \\<or> c' = 0 \\<Longrightarrow>\n    fds_scale c (fds_scale c' f) = fds_scale (c * c') f", "qed auto"], ["", "lemma fds_scale_add [simp]: \n  fixes f g :: \"'a :: monoid_add fds\"\n  shows \"fds_scale c (f + g) = fds_scale c f + fds_scale c g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_scale c (f + g) = fds_scale c f + fds_scale c g", "by (rule fds_eqI) (auto simp: fds_nth_scale)"], ["", "lemma fds_scale_minus [simp]: \n  fixes f g :: \"'a :: {cancel_comm_monoid_add} fds\"\n  shows \"fds_scale c (f - g) = fds_scale c f - fds_scale c g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_scale c (f - g) = fds_scale c f - fds_scale c g", "by (rule fds_eqI) (auto simp: fds_nth_scale)"], ["", "lemma fds_scale_uminus [simp]: \n  fixes f :: \"'a :: group_add fds\"\n  shows \"fds_scale c (-f) = -fds_scale c f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_scale c (- f) = - fds_scale c f", "by (rule fds_eqI) (auto simp: fds_nth_scale)"], ["", "lemma fds_scale_mult [simp]: \n  fixes f g :: \"'a :: semiring_0 fds\"\n  shows \"fds_scale c (f * g) = fds_scale c f * fds_scale c g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_scale c (f * g) = fds_scale c f * fds_scale c g", "proof (cases \"c > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < c \\<Longrightarrow>\n    fds_scale c (f * g) = fds_scale c f * fds_scale c g\n 2. \\<not> 0 < c \\<Longrightarrow>\n    fds_scale c (f * g) = fds_scale c f * fds_scale c g", "case True"], ["proof (state)\nthis:\n  0 < c\n\ngoal (2 subgoals):\n 1. 0 < c \\<Longrightarrow>\n    fds_scale c (f * g) = fds_scale c f * fds_scale c g\n 2. \\<not> 0 < c \\<Longrightarrow>\n    fds_scale c (f * g) = fds_scale c f * fds_scale c g", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_scale c (f * g) = fds_scale c f * fds_scale c g", "proof (rule fds_eqI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_scale c (f * g)) n =\n       fds_nth (fds_scale c f * fds_scale c g) n", "case (1 n)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_scale c (f * g)) n =\n       fds_nth (fds_scale c f * fds_scale c g) n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "proof (cases \"is_nth_power c n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n\n 2. \\<not> is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "case False"], ["proof (state)\nthis:\n  \\<not> is_nth_power c n\n\ngoal (2 subgoals):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n\n 2. \\<not> is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "have \"fds_nth (fds_scale c f * fds_scale c g) n = \n              (\\<Sum>(r, d) | r * d = n. fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c f * fds_scale c g) n =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n       fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d)", "by (simp add: fds_nth_mult dirichlet_prod_altdef2)"], ["proof (state)\nthis:\n  fds_nth (fds_scale c f * fds_scale c g) n =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n     fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d)\n\ngoal (2 subgoals):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n\n 2. \\<not> is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "also"], ["proof (state)\nthis:\n  fds_nth (fds_scale c f * fds_scale c g) n =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n     fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d)\n\ngoal (2 subgoals):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n\n 2. \\<not> is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "from False"], ["proof (chain)\npicking this:\n  \\<not> is_nth_power c n", "have \"\\<dots> = (\\<Sum>(r, d) | r * d = n. 0)\""], ["proof (prove)\nusing this:\n  \\<not> is_nth_power c n\n\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n       fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. (0::'a))", "by (intro sum.cong refl) (auto simp: fds_nth_scale dest: is_nth_power_mult)"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n     fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. (0::'a))\n\ngoal (2 subgoals):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n\n 2. \\<not> is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n     fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. (0::'a))\n\ngoal (2 subgoals):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n\n 2. \\<not> is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "from False"], ["proof (chain)\npicking this:\n  \\<not> is_nth_power c n", "have \"\\<dots> = fds_nth (fds_scale c (f * g)) n\""], ["proof (prove)\nusing this:\n  \\<not> is_nth_power c n\n\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. (0::'a)) =\n    fds_nth (fds_scale c (f * g)) n", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. (0::'a)) =\n  fds_nth (fds_scale c (f * g)) n\n\ngoal (2 subgoals):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n\n 2. \\<not> is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "finally"], ["proof (chain)\npicking this:\n  fds_nth (fds_scale c f * fds_scale c g) n =\n  fds_nth (fds_scale c (f * g)) n", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_nth (fds_scale c f * fds_scale c g) n =\n  fds_nth (fds_scale c (f * g)) n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", ".."], ["proof (state)\nthis:\n  fds_nth (fds_scale c (f * g)) n =\n  fds_nth (fds_scale c f * fds_scale c g) n\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "case True"], ["proof (state)\nthis:\n  is_nth_power c n\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "then"], ["proof (chain)\npicking this:\n  is_nth_power c n", "obtain n' where [simp]: \"n = n' ^ c\""], ["proof (prove)\nusing this:\n  is_nth_power c n\n\ngoal (1 subgoal):\n 1. (\\<And>n'. n = n' ^ c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (elim is_nth_powerE)"], ["proof (state)\nthis:\n  n = n' ^ c\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "define h where \"h = map_prod (nth_root_nat c) (nth_root_nat c)\""], ["proof (state)\nthis:\n  h = map_prod (nth_root_nat c) (nth_root_nat c)\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "define i where \"i = map_prod (\\<lambda>n::nat. n ^ c) (\\<lambda>n::nat. n ^ c)\""], ["proof (state)\nthis:\n  i = map_prod (\\<lambda>n. n ^ c) (\\<lambda>n. n ^ c)\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "define A where \"A = {(r, d). r * d = n}\""], ["proof (state)\nthis:\n  A = {(r, d). r * d = n}\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "define S where \"S = {rs\\<in>A. \\<not>is_nth_power c (fst rs) \\<or> \\<not>is_nth_power c (snd rs)}\""], ["proof (state)\nthis:\n  S =\n  {rs \\<in> A.\n   \\<not> is_nth_power c (fst rs) \\<or> \\<not> is_nth_power c (snd rs)}\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "have \"fds_nth (fds_scale c f * fds_scale c g) n = \n              (\\<Sum>(r, d) | r * d = n. fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c f * fds_scale c g) n =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n       fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d)", "by (simp add: fds_nth_mult dirichlet_prod_altdef2)"], ["proof (state)\nthis:\n  fds_nth (fds_scale c f * fds_scale c g) n =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n     fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d)\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "also"], ["proof (state)\nthis:\n  fds_nth (fds_scale c f * fds_scale c g) n =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n     fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d)\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "have \"\\<dots> = (\\<Sum>(r, d) | r * d = n'. fds_nth f r * fds_nth g d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n       fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n'}. fds_nth f r * fds_nth g d)", "proof (rule sym, intro sum.reindex_bij_witness_not_neutral[of \"{}\" S _ h i])"], ["proof (state)\ngoal (9 subgoals):\n 1. finite {}\n 2. finite S\n 3. \\<And>a. a \\<in> {(r, d). r * d = n'} - {} \\<Longrightarrow> h (i a) = a\n 4. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} - {} \\<Longrightarrow>\n       i a \\<in> {(r, d). r * d = n} - S\n 5. \\<And>b. b \\<in> {(r, d). r * d = n} - S \\<Longrightarrow> i (h b) = b\n 6. \\<And>b.\n       b \\<in> {(r, d). r * d = n} - S \\<Longrightarrow>\n       h b \\<in> {(r, d). r * d = n'} - {}\n 7. \\<And>a.\n       a \\<in> {} \\<Longrightarrow>\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d) = (0::'a)\n 8. \\<And>b.\n       b \\<in> S \\<Longrightarrow>\n       (case b of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (0::'a)\n 9. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} \\<Longrightarrow>\n       (case i a of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d)", "show \"finite S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S", "unfolding S_def A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {rs \\<in> {(r, d). r * d = n}.\n      \\<not> is_nth_power c (fst rs) \\<or> \\<not> is_nth_power c (snd rs)}", "by (rule finite_subset[OF _ finite_divisors_nat'[of n]]) (insert \\<open>n > 0\\<close>, auto)"], ["proof (state)\nthis:\n  finite S\n\ngoal (8 subgoals):\n 1. finite {}\n 2. \\<And>a. a \\<in> {(r, d). r * d = n'} - {} \\<Longrightarrow> h (i a) = a\n 3. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} - {} \\<Longrightarrow>\n       i a \\<in> {(r, d). r * d = n} - S\n 4. \\<And>b. b \\<in> {(r, d). r * d = n} - S \\<Longrightarrow> i (h b) = b\n 5. \\<And>b.\n       b \\<in> {(r, d). r * d = n} - S \\<Longrightarrow>\n       h b \\<in> {(r, d). r * d = n'} - {}\n 6. \\<And>a.\n       a \\<in> {} \\<Longrightarrow>\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d) = (0::'a)\n 7. \\<And>b.\n       b \\<in> S \\<Longrightarrow>\n       (case b of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (0::'a)\n 8. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} \\<Longrightarrow>\n       (case i a of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d)", "show \"i (h rd) = rd\" if \"rd \\<in> {(r, d). r * d = n} - S\" for rd"], ["proof (prove)\ngoal (1 subgoal):\n 1. i (h rd) = rd", "using \\<open>c > 0\\<close> that"], ["proof (prove)\nusing this:\n  0 < c\n  rd \\<in> {(r, d). r * d = n} - S\n\ngoal (1 subgoal):\n 1. i (h rd) = rd", "by (auto elim!: is_nth_powerE simp: S_def i_def h_def A_def)"], ["proof (state)\nthis:\n  ?rd \\<in> {(r, d). r * d = n} - S \\<Longrightarrow> i (h ?rd) = ?rd\n\ngoal (7 subgoals):\n 1. finite {}\n 2. \\<And>a. a \\<in> {(r, d). r * d = n'} - {} \\<Longrightarrow> h (i a) = a\n 3. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} - {} \\<Longrightarrow>\n       i a \\<in> {(r, d). r * d = n} - S\n 4. \\<And>b.\n       b \\<in> {(r, d). r * d = n} - S \\<Longrightarrow>\n       h b \\<in> {(r, d). r * d = n'} - {}\n 5. \\<And>a.\n       a \\<in> {} \\<Longrightarrow>\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d) = (0::'a)\n 6. \\<And>b.\n       b \\<in> S \\<Longrightarrow>\n       (case b of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (0::'a)\n 7. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} \\<Longrightarrow>\n       (case i a of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d)", "show \"h rd \\<in> {(r,d). r * d = n'} - {}\" if \"rd \\<in> {(r, d). r * d = n} - S\" for rd"], ["proof (prove)\ngoal (1 subgoal):\n 1. h rd \\<in> {(r, d). r * d = n'} - {}", "using \\<open>c > 0\\<close> that"], ["proof (prove)\nusing this:\n  0 < c\n  rd \\<in> {(r, d). r * d = n} - S\n\ngoal (1 subgoal):\n 1. h rd \\<in> {(r, d). r * d = n'} - {}", "by (auto elim!: is_nth_powerE \n            simp: S_def i_def h_def A_def power_mult_distrib [symmetric] power_eq_iff_eq_base)"], ["proof (state)\nthis:\n  ?rd \\<in> {(r, d). r * d = n} - S \\<Longrightarrow>\n  h ?rd \\<in> {(r, d). r * d = n'} - {}\n\ngoal (6 subgoals):\n 1. finite {}\n 2. \\<And>a. a \\<in> {(r, d). r * d = n'} - {} \\<Longrightarrow> h (i a) = a\n 3. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} - {} \\<Longrightarrow>\n       i a \\<in> {(r, d). r * d = n} - S\n 4. \\<And>a.\n       a \\<in> {} \\<Longrightarrow>\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d) = (0::'a)\n 5. \\<And>b.\n       b \\<in> S \\<Longrightarrow>\n       (case b of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (0::'a)\n 6. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} \\<Longrightarrow>\n       (case i a of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d)", "show \"h (i rd) = rd\" if \"rd \\<in> {(r, d). r * d = n'} - {}\" for rd"], ["proof (prove)\ngoal (1 subgoal):\n 1. h (i rd) = rd", "using that \\<open>c > 0\\<close>"], ["proof (prove)\nusing this:\n  rd \\<in> {(r, d). r * d = n'} - {}\n  0 < c\n\ngoal (1 subgoal):\n 1. h (i rd) = rd", "by (auto simp: h_def i_def)"], ["proof (state)\nthis:\n  ?rd \\<in> {(r, d). r * d = n'} - {} \\<Longrightarrow> h (i ?rd) = ?rd\n\ngoal (5 subgoals):\n 1. finite {}\n 2. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} - {} \\<Longrightarrow>\n       i a \\<in> {(r, d). r * d = n} - S\n 3. \\<And>a.\n       a \\<in> {} \\<Longrightarrow>\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d) = (0::'a)\n 4. \\<And>b.\n       b \\<in> S \\<Longrightarrow>\n       (case b of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (0::'a)\n 5. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} \\<Longrightarrow>\n       (case i a of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d)", "show \"i rd \\<in> {(r, d). r * d = n} - S\" if \"rd \\<in> {(r,d). r * d = n'} - {}\" for rd"], ["proof (prove)\ngoal (1 subgoal):\n 1. i rd \\<in> {(r, d). r * d = n} - S", "using that \\<open>c > 0\\<close>"], ["proof (prove)\nusing this:\n  rd \\<in> {(r, d). r * d = n'} - {}\n  0 < c\n\ngoal (1 subgoal):\n 1. i rd \\<in> {(r, d). r * d = n} - S", "by (auto simp: i_def S_def power_mult_distrib [symmetric])"], ["proof (state)\nthis:\n  ?rd \\<in> {(r, d). r * d = n'} - {} \\<Longrightarrow>\n  i ?rd \\<in> {(r, d). r * d = n} - S\n\ngoal (4 subgoals):\n 1. finite {}\n 2. \\<And>a.\n       a \\<in> {} \\<Longrightarrow>\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d) = (0::'a)\n 3. \\<And>b.\n       b \\<in> S \\<Longrightarrow>\n       (case b of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (0::'a)\n 4. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} \\<Longrightarrow>\n       (case i a of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d)", "show \"(case rd of (r, d) \\<Rightarrow> fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) = 0\"\n          if \"rd \\<in> S\" for rd"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case rd of\n     (r, d) \\<Rightarrow>\n       fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n    (0::'a)", "using that"], ["proof (prove)\nusing this:\n  rd \\<in> S\n\ngoal (1 subgoal):\n 1. (case rd of\n     (r, d) \\<Rightarrow>\n       fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n    (0::'a)", "by (auto simp: S_def case_prod_unfold)"], ["proof (state)\nthis:\n  ?rd \\<in> S \\<Longrightarrow>\n  (case ?rd of\n   (r, d) \\<Rightarrow>\n     fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n  (0::'a)\n\ngoal (3 subgoals):\n 1. finite {}\n 2. \\<And>a.\n       a \\<in> {} \\<Longrightarrow>\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d) = (0::'a)\n 3. \\<And>a.\n       a \\<in> {(r, d). r * d = n'} \\<Longrightarrow>\n       (case i a of\n        (r, d) \\<Rightarrow>\n          fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n       (case a of (r, d) \\<Rightarrow> fds_nth f r * fds_nth g d)", "qed (insert \\<open>c > 0\\<close>, auto simp: case_prod_unfold i_def)"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n     fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n'}. fds_nth f r * fds_nth g d)\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n     fds_nth (fds_scale c f) r * fds_nth (fds_scale c g) d) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n'}. fds_nth f r * fds_nth g d)\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "have \"\\<dots> = fds_nth (f * g) n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n'}. fds_nth f r * fds_nth g d) =\n    fds_nth (f * g) n'", "by (simp add: fds_nth_mult dirichlet_prod_altdef2)"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n'}. fds_nth f r * fds_nth g d) =\n  fds_nth (f * g) n'\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n'}. fds_nth f r * fds_nth g d) =\n  fds_nth (f * g) n'\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "from \\<open>c > 0\\<close>"], ["proof (chain)\npicking this:\n  0 < c", "have \"\\<dots> = fds_nth (fds_scale c (f * g)) n\""], ["proof (prove)\nusing this:\n  0 < c\n\ngoal (1 subgoal):\n 1. fds_nth (f * g) n' = fds_nth (fds_scale c (f * g)) n", "by simp"], ["proof (state)\nthis:\n  fds_nth (f * g) n' = fds_nth (fds_scale c (f * g)) n\n\ngoal (1 subgoal):\n 1. is_nth_power c n \\<Longrightarrow>\n    fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", "finally"], ["proof (chain)\npicking this:\n  fds_nth (fds_scale c f * fds_scale c g) n =\n  fds_nth (fds_scale c (f * g)) n", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_nth (fds_scale c f * fds_scale c g) n =\n  fds_nth (fds_scale c (f * g)) n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c (f * g)) n =\n    fds_nth (fds_scale c f * fds_scale c g) n", ".."], ["proof (state)\nthis:\n  fds_nth (fds_scale c (f * g)) n =\n  fds_nth (fds_scale c f * fds_scale c g) n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_nth (fds_scale c (f * g)) n =\n  fds_nth (fds_scale c f * fds_scale c g) n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_scale c (f * g) = fds_scale c f * fds_scale c g\n\ngoal (1 subgoal):\n 1. \\<not> 0 < c \\<Longrightarrow>\n    fds_scale c (f * g) = fds_scale c f * fds_scale c g", "qed auto"], ["", "lemma fds_scale_shift: \n  \"fds_shift d (fds_scale c f) = fds_scale c (fds_shift (c * d) f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift d (fds_scale c f) = fds_scale c (fds_shift (c * d) f)", "proof (cases \"c > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < c \\<Longrightarrow>\n    fds_shift d (fds_scale c f) = fds_scale c (fds_shift (c * d) f)\n 2. \\<not> 0 < c \\<Longrightarrow>\n    fds_shift d (fds_scale c f) = fds_scale c (fds_shift (c * d) f)", "case True"], ["proof (state)\nthis:\n  0 < c\n\ngoal (2 subgoals):\n 1. 0 < c \\<Longrightarrow>\n    fds_shift d (fds_scale c f) = fds_scale c (fds_shift (c * d) f)\n 2. \\<not> 0 < c \\<Longrightarrow>\n    fds_shift d (fds_scale c f) = fds_scale c (fds_shift (c * d) f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  0 < c\n\ngoal (1 subgoal):\n 1. fds_shift d (fds_scale c f) = fds_scale c (fds_shift (c * d) f)", "by (intro fds_eqI) (auto simp: fds_nth_scale power_mult elim!: is_nth_powerE)"], ["proof (state)\nthis:\n  fds_shift d (fds_scale c f) = fds_scale c (fds_shift (c * d) f)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < c \\<Longrightarrow>\n    fds_shift d (fds_scale c f) = fds_scale c (fds_shift (c * d) f)", "qed auto"], ["", "lemma fds_ind_nth_power: \"k > 0 \\<Longrightarrow> fds_ind (is_nth_power k) = fds_scale k fds_zeta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> fds_ind (is_nth_power k) = fds_scale k fds_zeta", "by (rule fds_eqI) (auto simp: ind_def fds_nth_scale elim!: is_nth_powerE)"], ["", "subsection \\<open>Formal derivative\\<close>"], ["", "text \\<open>\n  The formal derivative of a series\n    \\[A(s) = \\sum_{n=1}^\\infty \\frac{a_n}{n^s}\\]\n  can easily be seen to be\n    \\[A'(s) = -\\sum_{n=1}^\\infty \\frac{\\ln n\\cdot a_n}{n^s}\\ .\\]\n\\<close>"], ["", "definition fds_deriv :: \"'a :: real_algebra fds \\<Rightarrow> 'a fds\" where\n  \"fds_deriv f = fds (\\<lambda>n. - ln (real n) *\\<^sub>R fds_nth f n)\""], ["", "lemma fds_nth_deriv: \"fds_nth (fds_deriv f) n = -ln (real n) *\\<^sub>R fds_nth f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_deriv f) n = - ln (real n) *\\<^sub>R fds_nth f n", "by (cases \"n = 0\") (simp_all add: fds_deriv_def)"], ["", "lemma fds_deriv_const [simp]: \"fds_deriv (fds_const c) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (fds_const c) = 0", "by (rule fds_eqI) (simp add: fds_nth_deriv fds_nth_const)"], ["", "lemma fds_deriv_0 [simp]: \"fds_deriv 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv 0 = 0", "by (rule fds_eqI) (simp add: fds_nth_deriv)"], ["", "lemma fds_deriv_1 [simp]: \"fds_deriv 1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv 1 = 0", "by (rule fds_eqI) (simp add: fds_nth_deriv fds_nth_one)"], ["", "lemma fds_deriv_of_nat [simp]: \"fds_deriv (of_nat n) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (of_nat n) = 0", "by (simp only: fds_const_of_nat [symmetric] fds_deriv_const)"], ["", "lemma fds_deriv_of_int [simp]: \"fds_deriv (of_int n) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (of_int n) = 0", "by (simp only: fds_const_of_int [symmetric] fds_deriv_const)"], ["", "lemma fds_deriv_of_real [simp]: \"fds_deriv (of_real n) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (of_real n) = 0", "by (simp only: fds_const_of_real [symmetric] fds_deriv_const)"], ["", "lemma fds_deriv_uminus [simp]: \"fds_deriv (-f) = -fds_deriv f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (- f) = - fds_deriv f", "by (rule fds_eqI) (simp add: fds_nth_deriv)"], ["", "lemma fds_deriv_add [simp]: \"fds_deriv (f + g) = fds_deriv f + fds_deriv g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (f + g) = fds_deriv f + fds_deriv g", "by (rule fds_eqI) (simp add: fds_nth_deriv algebra_simps)"], ["", "lemma fds_deriv_minus [simp]: \"fds_deriv (f - g) = fds_deriv f - fds_deriv g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (f - g) = fds_deriv f - fds_deriv g", "by (rule fds_eqI) (simp add: fds_nth_deriv algebra_simps)"], ["", "lemma fds_deriv_times [simp]: \n  \"fds_deriv (f * g) = fds_deriv f * g + f * fds_deriv g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (f * g) = fds_deriv f * g + f * fds_deriv g", "by (rule fds_eqI) \n     (auto simp add: fds_nth_deriv fds_nth_mult dirichlet_prod_altdef2 scaleR_right.sum \n        algebra_simps sum.distrib [symmetric] ln_mult intro!: sum.cong)"], ["", "lemma fds_deriv_inverse [simp]:\n  fixes f :: \"'a :: {real_algebra, field} fds\"\n  assumes \"fds_nth f (Suc 0) \\<noteq> 0\"\n  shows   \"fds_deriv (inverse f) = -fds_deriv f / f ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "have \"(0 :: 'a fds) = fds_deriv 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = fds_deriv 1", "by simp"], ["proof (state)\nthis:\n  0 = fds_deriv 1\n\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "also"], ["proof (state)\nthis:\n  0 = fds_deriv 1\n\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "from assms"], ["proof (chain)\npicking this:\n  fds_nth f (Suc 0) \\<noteq> (0::'a)", "have \"(1 :: 'a fds) = inverse f * f\""], ["proof (prove)\nusing this:\n  fds_nth f (Suc 0) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. 1 = inverse f * f", "by (simp add: fds_left_inverse)"], ["proof (state)\nthis:\n  1 = inverse f * f\n\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "also"], ["proof (state)\nthis:\n  1 = inverse f * f\n\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "have \"fds_deriv \\<dots> = fds_deriv (inverse f) * f + inverse f * fds_deriv f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (inverse f * f) =\n    fds_deriv (inverse f) * f + inverse f * fds_deriv f", "by simp"], ["proof (state)\nthis:\n  fds_deriv (inverse f * f) =\n  fds_deriv (inverse f) * f + inverse f * fds_deriv f\n\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "also"], ["proof (state)\nthis:\n  fds_deriv (inverse f * f) =\n  fds_deriv (inverse f) * f + inverse f * fds_deriv f\n\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "have \"\\<dots> * inverse f = fds_deriv (inverse f) * (f * inverse f) + \n                                inverse f ^ 2 * fds_deriv f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fds_deriv (inverse f) * f + inverse f * fds_deriv f) * inverse f =\n    fds_deriv (inverse f) * (f * inverse f) +\n    (inverse f)\\<^sup>2 * fds_deriv f", "by (simp add: algebra_simps power2_eq_square)"], ["proof (state)\nthis:\n  (fds_deriv (inverse f) * f + inverse f * fds_deriv f) * inverse f =\n  fds_deriv (inverse f) * (f * inverse f) +\n  (inverse f)\\<^sup>2 * fds_deriv f\n\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "also"], ["proof (state)\nthis:\n  (fds_deriv (inverse f) * f + inverse f * fds_deriv f) * inverse f =\n  fds_deriv (inverse f) * (f * inverse f) +\n  (inverse f)\\<^sup>2 * fds_deriv f\n\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "from assms"], ["proof (chain)\npicking this:\n  fds_nth f (Suc 0) \\<noteq> (0::'a)", "have \"f * inverse f = 1\""], ["proof (prove)\nusing this:\n  fds_nth f (Suc 0) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f * inverse f = 1", "by (simp add: fds_right_inverse)"], ["proof (state)\nthis:\n  f * inverse f = 1\n\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "finally"], ["proof (chain)\npicking this:\n  0 * inverse f =\n  fds_deriv (inverse f) * 1 + (inverse f)\\<^sup>2 * fds_deriv f", "show ?thesis"], ["proof (prove)\nusing this:\n  0 * inverse f =\n  fds_deriv (inverse f) * 1 + (inverse f)\\<^sup>2 * fds_deriv f\n\ngoal (1 subgoal):\n 1. fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2", "by (simp add: algebra_simps power2_eq_square divide_fds_def inverse_mult_fds add_eq_0_iff)"], ["proof (state)\nthis:\n  fds_deriv (inverse f) = - fds_deriv f / f\\<^sup>2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_deriv_shift [simp]: \"fds_deriv (fds_shift c f) = fds_shift c (fds_deriv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (fds_shift c f) = fds_shift c (fds_deriv f)", "by (rule fds_eqI) (simp add: fds_nth_deriv algebra_simps)"], ["", "lemma fds_deriv_scale: \"fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)", "proof (cases \"c > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < c \\<Longrightarrow>\n    fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)\n 2. \\<not> 0 < c \\<Longrightarrow>\n    fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)", "case True"], ["proof (state)\nthis:\n  0 < c\n\ngoal (2 subgoals):\n 1. 0 < c \\<Longrightarrow>\n    fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)\n 2. \\<not> 0 < c \\<Longrightarrow>\n    fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)", "have *: \"of_nat a * (b :: 'a) = real a *\\<^sub>R b\" for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat a * b = real a *\\<^sub>R b", "by (induction a) (simp_all add: algebra_simps)"], ["proof (state)\nthis:\n  of_nat ?a * ?b = real ?a *\\<^sub>R ?b\n\ngoal (2 subgoals):\n 1. 0 < c \\<Longrightarrow>\n    fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)\n 2. \\<not> 0 < c \\<Longrightarrow>\n    fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)", "from True"], ["proof (chain)\npicking this:\n  0 < c", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < c\n\ngoal (1 subgoal):\n 1. fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)", "by (intro fds_eqI)\n       (auto simp: fds_nth_deriv fds_nth_scale is_nth_powerE fds_const_of_nat [symmetric]\n                ln_realpow * simp del: fds_const_of_nat elim!: is_nth_powerE)"], ["proof (state)\nthis:\n  fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)\n\ngoal (1 subgoal):\n 1. \\<not> 0 < c \\<Longrightarrow>\n    fds_deriv (fds_scale c f) = of_nat c * fds_scale c (fds_deriv f)", "qed auto"], ["", "lemma fds_deriv_eq_imp_eq:\n  assumes \"fds_deriv f = fds_deriv g\" \"fds_nth f (Suc 0) = fds_nth g (Suc 0)\"\n  shows   \"f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g", "proof (rule fds_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. 0 < n \\<Longrightarrow> fds_nth f n = fds_nth g n", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. 0 < n \\<Longrightarrow> fds_nth f n = fds_nth g n", "assume n: \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n. 0 < n \\<Longrightarrow> fds_nth f n = fds_nth g n", "show \"fds_nth f n = fds_nth g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f n = fds_nth g n", "proof (cases \"n = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> fds_nth f n = fds_nth g n\n 2. n \\<noteq> 1 \\<Longrightarrow> fds_nth f n = fds_nth g n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 1\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> fds_nth f n = fds_nth g n\n 2. n \\<noteq> 1 \\<Longrightarrow> fds_nth f n = fds_nth g n", "with n"], ["proof (chain)\npicking this:\n  0 < n\n  n \\<noteq> 1", "have \"n > 1\""], ["proof (prove)\nusing this:\n  0 < n\n  n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 1 < n", "by auto"], ["proof (state)\nthis:\n  1 < n\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> fds_nth f n = fds_nth g n\n 2. n \\<noteq> 1 \\<Longrightarrow> fds_nth f n = fds_nth g n", "hence \"fds_nth f n = -fds_nth (fds_deriv f) n /\\<^sub>R ln n\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. fds_nth f n = - fds_nth (fds_deriv f) n /\\<^sub>R ln (real n)", "by (simp add: fds_deriv_def)"], ["proof (state)\nthis:\n  fds_nth f n = - fds_nth (fds_deriv f) n /\\<^sub>R ln (real n)\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> fds_nth f n = fds_nth g n\n 2. n \\<noteq> 1 \\<Longrightarrow> fds_nth f n = fds_nth g n", "also"], ["proof (state)\nthis:\n  fds_nth f n = - fds_nth (fds_deriv f) n /\\<^sub>R ln (real n)\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> fds_nth f n = fds_nth g n\n 2. n \\<noteq> 1 \\<Longrightarrow> fds_nth f n = fds_nth g n", "note assms(1)"], ["proof (state)\nthis:\n  fds_deriv f = fds_deriv g\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> fds_nth f n = fds_nth g n\n 2. n \\<noteq> 1 \\<Longrightarrow> fds_nth f n = fds_nth g n", "also"], ["proof (state)\nthis:\n  fds_deriv f = fds_deriv g\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> fds_nth f n = fds_nth g n\n 2. n \\<noteq> 1 \\<Longrightarrow> fds_nth f n = fds_nth g n", "from \\<open>n > 1\\<close>"], ["proof (chain)\npicking this:\n  1 < n", "have \"-fds_nth (fds_deriv g) n /\\<^sub>R ln n = fds_nth g n\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. - fds_nth (fds_deriv g) n /\\<^sub>R ln (real n) = fds_nth g n", "by (simp add: fds_deriv_def)"], ["proof (state)\nthis:\n  - fds_nth (fds_deriv g) n /\\<^sub>R ln (real n) = fds_nth g n\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> fds_nth f n = fds_nth g n\n 2. n \\<noteq> 1 \\<Longrightarrow> fds_nth f n = fds_nth g n", "finally"], ["proof (chain)\npicking this:\n  fds_nth f n = fds_nth g n", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_nth f n = fds_nth g n\n\ngoal (1 subgoal):\n 1. fds_nth f n = fds_nth g n", "."], ["proof (state)\nthis:\n  fds_nth f n = fds_nth g n\n\ngoal (1 subgoal):\n 1. n = 1 \\<Longrightarrow> fds_nth f n = fds_nth g n", "qed (auto simp: assms)"], ["proof (state)\nthis:\n  fds_nth f n = fds_nth g n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma completely_multiplicative_fds_deriv:\n  assumes \"completely_multiplicative_function f\"\n  shows   \"fds_deriv (fds f) = -fds (\\<lambda>n. f n * mangoldt n) * fds f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (fds f) = - fds (\\<lambda>n. f n * mangoldt n) * fds f", "proof (rule fds_eqI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "case (1 n)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "interpret completely_multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "have \"fds_nth (-fds (\\<lambda>n. f n * mangoldt n) * fds f) n = \n          -(\\<Sum>(r, d) | r * d = n. f r * mangoldt r * f d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n =\n    - (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * mangoldt r * f d)", "by (simp add: fds_nth_mult fds_nth_deriv dirichlet_prod_altdef2)"], ["proof (state)\nthis:\n  fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n =\n  - (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * mangoldt r * f d)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "also"], ["proof (state)\nthis:\n  fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n =\n  - (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * mangoldt r * f d)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "have \"(\\<Sum>(r, d) | r * d = n. f r * mangoldt r * f d) =\n               (\\<Sum>(r, d) | r * d = n. mangoldt r * f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * mangoldt r * f d) =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. mangoldt r * f n)", "using 1"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * mangoldt r * f d) =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. mangoldt r * f n)", "by (intro sum.mono_neutral_cong_right refl) \n               (auto simp: mangoldt_def mult mult_ac intro!: finite_divisors_nat' split: if_splits)"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * mangoldt r * f d) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. mangoldt r * f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * mangoldt r * f d) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. mangoldt r * f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "have \"\\<dots> = (\\<Sum>r | r dvd n. mangoldt r * f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. mangoldt r * f n) =\n    (\\<Sum>r | r dvd n. mangoldt r * f n)", "using 1"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. mangoldt r * f n) =\n    (\\<Sum>r | r dvd n. mangoldt r * f n)", "by (intro sum.reindex_bij_witness[of _ \"\\<lambda>r. (r, n div r)\" fst]) auto"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. mangoldt r * f n) =\n  (\\<Sum>r | r dvd n. mangoldt r * f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. mangoldt r * f n) =\n  (\\<Sum>r | r dvd n. mangoldt r * f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "have \"\\<dots> = (\\<Sum>r | r dvd n. mangoldt r) * f n\" (is \"_ = ?S * _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd n. mangoldt r * f n) =\n    (\\<Sum>r | r dvd n. mangoldt r) * f n", "by (subst sum_distrib_right [symmetric]) simp"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd n. mangoldt r * f n) =\n  (\\<Sum>r | r dvd n. mangoldt r) * f n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "also"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd n. mangoldt r * f n) =\n  (\\<Sum>r | r dvd n. mangoldt r) * f n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "have \"(\\<Sum>r | r dvd n. mangoldt r) = of_real (ln (real n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd n. mangoldt r) = of_real (ln (real n))", "using 1"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd n. mangoldt r) = of_real (ln (real n))", "by (intro mangoldt_sum) simp"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd n. mangoldt r) = of_real (ln (real n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "also"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd n. mangoldt r) = of_real (ln (real n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "have \"- (of_real (ln (real n)) * f n) = fds_nth (fds_deriv (fds f)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (of_real (ln (real n)) * f n) = fds_nth (fds_deriv (fds f)) n", "using 1"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. - (of_real (ln (real n)) * f n) = fds_nth (fds_deriv (fds f)) n", "by (simp add: fds_nth_deriv scaleR_conv_of_real)"], ["proof (state)\nthis:\n  - (of_real (ln (real n)) * f n) = fds_nth (fds_deriv (fds f)) n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_deriv (fds f)) n =\n       fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", "finally"], ["proof (chain)\npicking this:\n  fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n =\n  fds_nth (fds_deriv (fds f)) n", "show ?case"], ["proof (prove)\nusing this:\n  fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n =\n  fds_nth (fds_deriv (fds f)) n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_deriv (fds f)) n =\n    fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n", ".."], ["proof (state)\nthis:\n  fds_nth (fds_deriv (fds f)) n =\n  fds_nth (- fds (\\<lambda>n. f n * mangoldt n) * fds f) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma completely_multiplicative_fds_deriv':\n  \"completely_multiplicative_function (fds_nth f) \\<Longrightarrow>\n     fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function (fds_nth f) \\<Longrightarrow>\n    fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f", "using completely_multiplicative_fds_deriv[of \"fds_nth f\"]"], ["proof (prove)\nusing this:\n  completely_multiplicative_function (fds_nth f) \\<Longrightarrow>\n  fds_deriv (fds (fds_nth f)) =\n  - fds (\\<lambda>n. fds_nth f n * mangoldt n) * fds (fds_nth f)\n\ngoal (1 subgoal):\n 1. completely_multiplicative_function (fds_nth f) \\<Longrightarrow>\n    fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f", "by simp"], ["", "lemma fds_deriv_zeta: \n  \"fds_deriv fds_zeta = \n     -fds mangoldt * (fds_zeta :: 'a :: {comm_semiring_1,real_algebra_1} fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv fds_zeta = - fds mangoldt * fds_zeta", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_deriv fds_zeta = - fds mangoldt * fds_zeta", "have \"completely_multiplicative_function (\\<lambda>n. if n = 0 then 0 else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function\n     (\\<lambda>n. if n = 0 then 0::'b else (1::'b))", "by standard simp_all"], ["proof (state)\nthis:\n  completely_multiplicative_function\n   (\\<lambda>n. if n = 0 then 0::?'b1 else (1::?'b1))\n\ngoal (1 subgoal):\n 1. fds_deriv fds_zeta = - fds mangoldt * fds_zeta", "from completely_multiplicative_fds_deriv [OF this, folded fds_zeta_altdef]"], ["proof (chain)\npicking this:\n  fds_deriv fds_zeta =\n  - fds (\\<lambda>n. (if n = 0 then 0::?'a else (1::?'a)) * mangoldt n) *\n  fds_zeta", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_deriv fds_zeta =\n  - fds (\\<lambda>n. (if n = 0 then 0::?'a else (1::?'a)) * mangoldt n) *\n  fds_zeta\n\ngoal (1 subgoal):\n 1. fds_deriv fds_zeta = - fds mangoldt * fds_zeta", "by simp"], ["proof (state)\nthis:\n  fds_deriv fds_zeta = - fds mangoldt * fds_zeta\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_mangoldt_times_zeta: \"fds mangoldt * fds_zeta = fds (\\<lambda>x. of_real (ln (real x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds mangoldt * fds_zeta = fds (\\<lambda>x. of_real (ln (real x)))", "by (rule fds_eqI) (simp add: fds_nth_mult dirichlet_prod_def mangoldt_sum)"], ["", "lemma fds_deriv_zeta': \"fds_deriv fds_zeta = \n    -fds (\\<lambda>x. of_real (ln (real x)):: 'a :: {comm_semiring_1,real_algebra_1})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv fds_zeta = - fds (\\<lambda>x. of_real (ln (real x)))", "by (simp add: fds_deriv_zeta fds_mangoldt_times_zeta)"], ["", "subsection \\<open>Formal integral\\<close>"], ["", "definition fds_integral :: \"'a \\<Rightarrow> 'a :: real_algebra fds \\<Rightarrow> 'a fds\" where\n  \"fds_integral c f = fds (\\<lambda>n. if n = 1 then c else - fds_nth f n /\\<^sub>R ln (real n))\""], ["", "lemma fds_integral_0 [simp]: \"fds_integral a 0 = fds_const a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_integral a 0 = fds_const a", "by (simp add: fds_integral_def fds_eq_iff)"], ["", "lemma fds_integral_add: \"fds_integral (a + b) (f + g) = fds_integral a f + fds_integral b g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_integral (a + b) (f + g) = fds_integral a f + fds_integral b g", "by (rule fds_eqI) (auto simp: fds_integral_def scaleR_diff_right)"], ["", "lemma fds_integral_diff: \"fds_integral (a - b) (f - g) = fds_integral a f - fds_integral b g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_integral (a - b) (f - g) = fds_integral a f - fds_integral b g", "by (rule fds_eqI) (auto simp: fds_integral_def scaleR_diff_right)"], ["", "lemma fds_integral_minus: \"fds_integral (-a) (-f) = -fds_integral a f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_integral (- a) (- f) = - fds_integral a f", "by (rule fds_eqI) (auto simp: fds_integral_def scaleR_diff_right)"], ["", "lemma fds_shift_integral: \"fds_shift b (fds_integral a f) = fds_integral a (fds_shift b f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift b (fds_integral a f) = fds_integral a (fds_shift b f)", "by (rule fds_eqI) (simp add: fds_integral_def fds_shift_def)"], ["", "lemma fds_deriv_fds_integral [simp]: \n    \"fds_nth f (Suc 0) = 0 \\<Longrightarrow> fds_deriv (fds_integral c f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f (Suc 0) = (0::'a) \\<Longrightarrow>\n    fds_deriv (fds_integral c f) = f", "by (simp add: fds_deriv_def fds_integral_def fds_eq_iff)"], ["", "lemma fds_integral_fds_deriv [simp]: \"fds_integral (fds_nth f 1) (fds_deriv f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_integral (fds_nth f 1) (fds_deriv f) = f", "by (simp add: fds_deriv_def fds_integral_def fds_eq_iff)"], ["", "subsection \\<open>Formal logarithm\\<close>"], ["", "definition fds_ln :: \"'a \\<Rightarrow> 'a :: {real_normed_field} fds \\<Rightarrow> 'a fds\" where\n  \"fds_ln l f = fds_integral l (fds_deriv f / f)\""], ["", "lemma fds_nth_Suc_0_fds_deriv [simp]: \"fds_nth (fds_deriv f) (Suc 0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_deriv f) (Suc 0) = (0::'a)", "by (simp add: fds_deriv_def)"], ["", "lemma fds_deriv_fds_ln [simp]: \"fds_deriv (fds_ln l f) = fds_deriv f / f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (fds_ln l f) = fds_deriv f / f", "unfolding fds_ln_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (fds_integral l (fds_deriv f / f)) = fds_deriv f / f", "by (subst fds_deriv_fds_integral) (simp_all add: divide_fds_def)"], ["", "lemma fds_nth_Suc_0_fds_ln [simp]: \"fds_nth (fds_ln l f) (Suc 0) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_ln l f) (Suc 0) = l", "by (simp add: fds_ln_def fds_integral_def)"], ["", "lemma fds_ln_const [simp]: \"fds_ln l (fds_const c) = fds_const l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln l (fds_const c) = fds_const l", "by (rule fds_eqI) (simp add: fds_ln_def fds_integral_def divide_fds_def)"], ["", "lemma fds_ln_0 [simp]: \"fds_ln l 0 = fds_const l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln l 0 = fds_const l", "by (rule fds_eqI) (simp add: fds_ln_def fds_integral_def divide_fds_def)"], ["", "lemma fds_ln_1 [simp]: \"fds_ln l 1 = fds_const l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln l 1 = fds_const l", "by (rule fds_eqI) (simp add: fds_ln_def fds_integral_def divide_fds_def)"], ["", "lemma fds_shift_ln [simp]: \"fds_shift a (fds_ln l f) = fds_ln l (fds_shift a f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_shift a (fds_ln l f) = fds_ln l (fds_shift a f)", "by (simp add: fds_ln_def fds_shift_integral)"], ["", "lemma fds_ln_mult:\n  assumes \"fds_nth f 1 \\<noteq> 0\" \"fds_nth g 1 \\<noteq> 0\" \"l' + l'' = l\"\n  shows   \"fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g", "have \"fds_ln l (f * g) = fds_integral (l' + l'') ((fds_deriv f * g + f * fds_deriv g) / (f * g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln l (f * g) =\n    fds_integral (l' + l'') ((fds_deriv f * g + f * fds_deriv g) / (f * g))", "by (simp add: fds_ln_def assms)"], ["proof (state)\nthis:\n  fds_ln l (f * g) =\n  fds_integral (l' + l'') ((fds_deriv f * g + f * fds_deriv g) / (f * g))\n\ngoal (1 subgoal):\n 1. fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g", "also"], ["proof (state)\nthis:\n  fds_ln l (f * g) =\n  fds_integral (l' + l'') ((fds_deriv f * g + f * fds_deriv g) / (f * g))\n\ngoal (1 subgoal):\n 1. fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g", "have \"(fds_deriv f * g + f * fds_deriv g) / (f * g) =\n               fds_deriv f / f * (g * inverse g) + fds_deriv g / g * (f * inverse f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fds_deriv f * g + f * fds_deriv g) / (f * g) =\n    fds_deriv f / f * (g * inverse g) + fds_deriv g / g * (f * inverse f)", "by (simp add: divide_fds_def algebra_simps inverse_mult_fds)"], ["proof (state)\nthis:\n  (fds_deriv f * g + f * fds_deriv g) / (f * g) =\n  fds_deriv f / f * (g * inverse g) + fds_deriv g / g * (f * inverse f)\n\ngoal (1 subgoal):\n 1. fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g", "also"], ["proof (state)\nthis:\n  (fds_deriv f * g + f * fds_deriv g) / (f * g) =\n  fds_deriv f / f * (g * inverse g) + fds_deriv g / g * (f * inverse f)\n\ngoal (1 subgoal):\n 1. fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g", "from assms"], ["proof (chain)\npicking this:\n  fds_nth f 1 \\<noteq> (0::'a)\n  fds_nth g 1 \\<noteq> (0::'a)\n  l' + l'' = l", "have \"f * inverse f = 1\""], ["proof (prove)\nusing this:\n  fds_nth f 1 \\<noteq> (0::'a)\n  fds_nth g 1 \\<noteq> (0::'a)\n  l' + l'' = l\n\ngoal (1 subgoal):\n 1. f * inverse f = 1", "by (intro fds_right_inverse) auto"], ["proof (state)\nthis:\n  f * inverse f = 1\n\ngoal (1 subgoal):\n 1. fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g", "also"], ["proof (state)\nthis:\n  f * inverse f = 1\n\ngoal (1 subgoal):\n 1. fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g", "from assms"], ["proof (chain)\npicking this:\n  fds_nth f 1 \\<noteq> (0::'a)\n  fds_nth g 1 \\<noteq> (0::'a)\n  l' + l'' = l", "have \"g * inverse g = 1\""], ["proof (prove)\nusing this:\n  fds_nth f 1 \\<noteq> (0::'a)\n  fds_nth g 1 \\<noteq> (0::'a)\n  l' + l'' = l\n\ngoal (1 subgoal):\n 1. g * inverse g = 1", "by (intro fds_right_inverse) auto"], ["proof (state)\nthis:\n  g * inverse g = 1\n\ngoal (1 subgoal):\n 1. fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g", "finally"], ["proof (chain)\npicking this:\n  fds_ln l (f * g) =\n  fds_integral (l' + l'') (fds_deriv f / f * 1 + fds_deriv g / g * 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_ln l (f * g) =\n  fds_integral (l' + l'') (fds_deriv f / f * 1 + fds_deriv g / g * 1)\n\ngoal (1 subgoal):\n 1. fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g", "by (simp add: fds_integral_add fds_ln_def)"], ["proof (state)\nthis:\n  fds_ln l (f * g) = fds_ln l' f + fds_ln l'' g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_ln_power:\n  assumes \"fds_nth f 1 \\<noteq> 0\" \"l = of_nat n * l'\"\n  shows   \"fds_ln l (f ^ n) = of_nat n * fds_ln l' f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln l (f ^ n) = of_nat n * fds_ln l' f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_ln l (f ^ n) = of_nat n * fds_ln l' f", "have \"fds_ln (of_nat n * l') (f ^ n) = of_nat n * fds_ln l' f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln (of_nat n * l') (f ^ n) = of_nat n * fds_ln l' f", "using assms(1)"], ["proof (prove)\nusing this:\n  fds_nth f 1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. fds_ln (of_nat n * l') (f ^ n) = of_nat n * fds_ln l' f", "by (induction n) (simp_all add: fds_ln_mult algebra_simps)"], ["proof (state)\nthis:\n  fds_ln (of_nat n * l') (f ^ n) = of_nat n * fds_ln l' f\n\ngoal (1 subgoal):\n 1. fds_ln l (f ^ n) = of_nat n * fds_ln l' f", "with assms"], ["proof (chain)\npicking this:\n  fds_nth f 1 \\<noteq> (0::'a)\n  l = of_nat n * l'\n  fds_ln (of_nat n * l') (f ^ n) = of_nat n * fds_ln l' f", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_nth f 1 \\<noteq> (0::'a)\n  l = of_nat n * l'\n  fds_ln (of_nat n * l') (f ^ n) = of_nat n * fds_ln l' f\n\ngoal (1 subgoal):\n 1. fds_ln l (f ^ n) = of_nat n * fds_ln l' f", "by simp"], ["proof (state)\nthis:\n  fds_ln l (f ^ n) = of_nat n * fds_ln l' f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_ln_prod:\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> fds_nth (f x) 1 \\<noteq> 0\" \"(\\<Sum>x\\<in>A. l' x) = l\"\n  shows   \"fds_ln l (\\<Prod>x\\<in>A. f x) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln l (prod f A) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_ln l (prod f A) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))", "have \"fds_ln (\\<Sum>x\\<in>A. l' x) (\\<Prod>x\\<in>A. f x) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln (sum l' A) (prod f A) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))", "using assms(1)"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> fds_nth (f ?x) 1 \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. fds_ln (sum l' A) (prod f A) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))", "by (induction A rule: infinite_finite_induct) (simp_all add: fds_ln_mult)"], ["proof (state)\nthis:\n  fds_ln (sum l' A) (prod f A) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))\n\ngoal (1 subgoal):\n 1. fds_ln l (prod f A) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))", "with assms"], ["proof (chain)\npicking this:\n  ?x \\<in> A \\<Longrightarrow> fds_nth (f ?x) 1 \\<noteq> (0::'b)\n  sum l' A = l\n  fds_ln (sum l' A) (prod f A) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> fds_nth (f ?x) 1 \\<noteq> (0::'b)\n  sum l' A = l\n  fds_ln (sum l' A) (prod f A) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))\n\ngoal (1 subgoal):\n 1. fds_ln l (prod f A) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))", "by simp"], ["proof (state)\nthis:\n  fds_ln l (prod f A) = (\\<Sum>x\\<in>A. fds_ln (l' x) (f x))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Formal exponential\\<close>"], ["", "definition fds_exp :: \"'a :: {real_normed_algebra_1,banach} fds \\<Rightarrow> 'a fds\" where\n  \"fds_exp f = (let f' = fds (\\<lambda>n. if n = 1 then 0 else fds_nth f n)\n                in  fds (\\<lambda>n. exp (fds_nth f 1) * (\\<Sum>k. fds_nth (f' ^ k) n /\\<^sub>R fact k)))\""], ["", "lemma fds_nth_exp_Suc_0 [simp]: \"fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1)", "have \"fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1) * (\\<Sum>k. 0 ^ k /\\<^sub>R fact k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) =\n    exp (fds_nth f 1) * (\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k)", "by (simp add: fds_exp_def)"], ["proof (state)\nthis:\n  fds_nth (fds_exp f) (Suc 0) =\n  exp (fds_nth f 1) * (\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1)", "also"], ["proof (state)\nthis:\n  fds_nth (fds_exp f) (Suc 0) =\n  exp (fds_nth f 1) * (\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1)", "have \"(\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k) = (\\<Sum>k. if k = 0 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k) =\n    (\\<Sum>k. if k = 0 then 1::'a else (0::'a))", "by (intro suminf_cong) (auto simp: power_0_left)"], ["proof (state)\nthis:\n  (\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k) =\n  (\\<Sum>k. if k = 0 then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k) =\n  (\\<Sum>k. if k = 0 then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1)", "have \"\\<dots> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k. if k = 0 then 1::'a else (0::'a)) = (1::'a)", "using sums_If_finite[of \"\\<lambda>k. k = 0\" \"\\<lambda>_. 1 :: 'a\"]"], ["proof (prove)\nusing this:\n  finite {r. r = 0} \\<Longrightarrow>\n  (\\<lambda>r. if r = 0 then 1::'a else (0::'a)) sums\n  (\\<Sum>r | r = 0. (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k. if k = 0 then 1::'a else (0::'a)) = (1::'a)", "by (simp add: sums_iff)"], ["proof (state)\nthis:\n  (\\<Sum>k. if k = 0 then 1::'a else (0::'a)) = (1::'a)\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1)", "finally"], ["proof (chain)\npicking this:\n  fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1) * (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1) * (1::'a)\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1)", "by simp"], ["proof (state)\nthis:\n  fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_exp_times_fds_nth_0:\n  \"fds_const (exp (fds_nth f (Suc 0))) * fds_exp (f - fds_const (fds_nth f (Suc 0))) = fds_exp f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (exp (fds_nth f (Suc 0))) *\n    fds_exp (f - fds_const (fds_nth f (Suc 0))) =\n    fds_exp f", "by (rule fds_eqI) (simp add: fds_exp_def fds_nth_fds' cong: if_cong)"], ["", "lemma fds_exp_const [simp]: \"fds_exp (fds_const c) = fds_const (exp c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "have \"fds_exp (fds_const c) = fds (\\<lambda>n. exp c * (\\<Sum>k. fds_nth (fds (\\<lambda>n. 0) ^ k) n /\\<^sub>R fact k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) =\n    fds (\\<lambda>n.\n            exp c *\n            (\\<Sum>k.\n                fds_nth (fds (\\<lambda>n. 0::'a) ^ k) n /\\<^sub>R fact k))", "by (simp add: fds_exp_def fds_nth_fds' one_fds_def cong: if_cong)"], ["proof (state)\nthis:\n  fds_exp (fds_const c) =\n  fds (\\<lambda>n.\n          exp c *\n          (\\<Sum>k.\n              fds_nth (fds (\\<lambda>n. 0::'a) ^ k) n /\\<^sub>R fact k))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "also"], ["proof (state)\nthis:\n  fds_exp (fds_const c) =\n  fds (\\<lambda>n.\n          exp c *\n          (\\<Sum>k.\n              fds_nth (fds (\\<lambda>n. 0::'a) ^ k) n /\\<^sub>R fact k))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "have \"fds (\\<lambda>_. 0 :: 'a) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds (\\<lambda>_. 0::'a) = 0", "by (simp add: fds_eq_iff)"], ["proof (state)\nthis:\n  fds (\\<lambda>_. 0::'a) = 0\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "also"], ["proof (state)\nthis:\n  fds (\\<lambda>_. 0::'a) = 0\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "have \"(\\<lambda>(k::nat) (n::nat). fds_nth (0 ^ k) n) = (\\<lambda>k n. if k = 0 \\<and> n = 1 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k. fds_nth (0 ^ k)) =\n    (\\<lambda>k n. if k = 0 \\<and> n = 1 then 1::'b else (0::'b))", "by (intro ext) (auto simp: one_fds_def fds_nth_fds' power_0_left)"], ["proof (state)\nthis:\n  (\\<lambda>k. fds_nth (0 ^ k)) =\n  (\\<lambda>k n. if k = 0 \\<and> n = 1 then 1::?'b1 else (0::?'b1))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "also"], ["proof (state)\nthis:\n  (\\<lambda>k. fds_nth (0 ^ k)) =\n  (\\<lambda>k n. if k = 0 \\<and> n = 1 then 1::?'b1 else (0::?'b1))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "have \"(\\<lambda>n::nat. \\<Sum>k. (if k = 0 \\<and> n = 1 then 1 else (0::'a)) /\\<^sub>R fact k) =\n               (\\<lambda>n. if n = 1 then (\\<Sum>k. (if k = 0 then 1 else 0) /\\<^sub>R fact k) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Sum>k.\n           (if k = 0 \\<and> n = 1 then 1::'a else (0::'a)) /\\<^sub>R\n           fact k) =\n    (\\<lambda>n.\n        if n = 1\n        then \\<Sum>k. (if k = 0 then 1::'a else (0::'a)) /\\<^sub>R fact k\n        else (0::'a))", "by (intro ext) auto"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Sum>k.\n         (if k = 0 \\<and> n = 1 then 1::'a else (0::'a)) /\\<^sub>R fact k) =\n  (\\<lambda>n.\n      if n = 1\n      then \\<Sum>k. (if k = 0 then 1::'a else (0::'a)) /\\<^sub>R fact k\n      else (0::'a))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "also"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Sum>k.\n         (if k = 0 \\<and> n = 1 then 1::'a else (0::'a)) /\\<^sub>R fact k) =\n  (\\<lambda>n.\n      if n = 1\n      then \\<Sum>k. (if k = 0 then 1::'a else (0::'a)) /\\<^sub>R fact k\n      else (0::'a))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "have \"\\<dots> = (\\<lambda>n::nat. if n = 1 then (\\<Sum>k\\<in>{0}. (if k = (0::nat) then 1 else 0)) else 0 :: 'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        if n = 1\n        then \\<Sum>k. (if k = 0 then 1::'a else (0::'a)) /\\<^sub>R fact k\n        else (0::'a)) =\n    (\\<lambda>n.\n        if n = 1 then \\<Sum>k\\<in>{0}. if k = 0 then 1::'a else (0::'a)\n        else (0::'a))", "by (subst suminf_finite[of \"{0}\"]) auto"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      if n = 1\n      then \\<Sum>k. (if k = 0 then 1::'a else (0::'a)) /\\<^sub>R fact k\n      else (0::'a)) =\n  (\\<lambda>n.\n      if n = 1 then \\<Sum>k\\<in>{0}. if k = 0 then 1::'a else (0::'a)\n      else (0::'a))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "also"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      if n = 1\n      then \\<Sum>k. (if k = 0 then 1::'a else (0::'a)) /\\<^sub>R fact k\n      else (0::'a)) =\n  (\\<lambda>n.\n      if n = 1 then \\<Sum>k\\<in>{0}. if k = 0 then 1::'a else (0::'a)\n      else (0::'a))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "have \"fds (\\<lambda>n. exp c * \\<dots> n) = fds_const (exp c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds (\\<lambda>n.\n            exp c *\n            (if n = 1 then \\<Sum>k\\<in>{0}. if k = 0 then 1::'a else (0::'a)\n             else (0::'a))) =\n    fds_const (exp c)", "by (simp add: fds_const_def fds_eq_iff fds_nth_fds' cong: if_cong)"], ["proof (state)\nthis:\n  fds (\\<lambda>n.\n          exp c *\n          (if n = 1 then \\<Sum>k\\<in>{0}. if k = 0 then 1::'a else (0::'a)\n           else (0::'a))) =\n  fds_const (exp c)\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "finally"], ["proof (chain)\npicking this:\n  fds_exp (fds_const c) = fds_const (exp c)", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_exp (fds_const c) = fds_const (exp c)\n\ngoal (1 subgoal):\n 1. fds_exp (fds_const c) = fds_const (exp c)", "."], ["proof (state)\nthis:\n  fds_exp (fds_const c) = fds_const (exp c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_exp_numeral [simp]: \"fds_exp (numeral n) = fds_const (exp (numeral n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp (numeral n) = fds_const (exp (numeral n))", "using fds_exp_const[of \"numeral n :: 'a\"]"], ["proof (prove)\nusing this:\n  fds_exp (fds_const (numeral n)) = fds_const (exp (numeral n))\n\ngoal (1 subgoal):\n 1. fds_exp (numeral n) = fds_const (exp (numeral n))", "by (simp del: fds_exp_const add: numeral_fds)"], ["", "lemma fds_exp_0 [simp]: \"fds_exp 0 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp 0 = 1", "using fds_exp_const[of 0]"], ["proof (prove)\nusing this:\n  fds_exp (fds_const (0::?'b1)) = fds_const (exp (0::?'b1))\n\ngoal (1 subgoal):\n 1. fds_exp 0 = 1", "by (simp del: fds_exp_const)"], ["", "lemma fds_exp_1 [simp]: \"fds_exp 1 = fds_const (exp 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp 1 = fds_const (exp (1::'a))", "using fds_exp_const[of 1]"], ["proof (prove)\nusing this:\n  fds_exp (fds_const (1::?'b1)) = fds_const (exp (1::?'b1))\n\ngoal (1 subgoal):\n 1. fds_exp 1 = fds_const (exp (1::'a))", "by (simp del: fds_exp_const)"], ["", "lemma fds_nth_Suc_0_exp [simp]: \"fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f (Suc 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f (Suc 0))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f (Suc 0))", "have \"(\\<Sum>k. 0 ^ k /\\<^sub>R fact k) = (\\<Sum>k\\<in>{0}. 0 ^ k /\\<^sub>R fact k :: 'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k) =\n    (\\<Sum>k\\<in>{0}. (0::'a) ^ k /\\<^sub>R fact k)", "by (intro suminf_finite) (auto simp: power_0_left)"], ["proof (state)\nthis:\n  (\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k) =\n  (\\<Sum>k\\<in>{0}. (0::'a) ^ k /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f (Suc 0))", "also"], ["proof (state)\nthis:\n  (\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k) =\n  (\\<Sum>k\\<in>{0}. (0::'a) ^ k /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f (Suc 0))", "have \"\\<dots> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>{0}. (0::'a) ^ k /\\<^sub>R fact k) = (1::'a)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>{0}. (0::'a) ^ k /\\<^sub>R fact k) = (1::'a)\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f (Suc 0))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k) = (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>k. (0::'a) ^ k /\\<^sub>R fact k) = (1::'a)\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f (Suc 0))", "by (simp add: fds_exp_def)"], ["proof (state)\nthis:\n  fds_nth (fds_exp f) (Suc 0) = exp (fds_nth f (Suc 0))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Subseries\\<close>"], ["", "definition fds_subseries :: \"(nat \\<Rightarrow> bool) \\<Rightarrow> ('a :: semiring_1) fds \\<Rightarrow> 'a fds\" where\n  \"fds_subseries P f = fds (\\<lambda>n. if P n then fds_nth f n else 0)\""], ["", "lemma fds_nth_subseries:\n  \"fds_nth (fds_subseries P f) n = (if P n then fds_nth f n else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_subseries P f) n = (if P n then fds_nth f n else (0::'a))", "by (simp add: fds_subseries_def fds_nth_fds')"], ["", "lemma fds_subseries_0 [simp]: \"fds_subseries P 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_subseries P 0 = 0", "by (simp add: fds_subseries_def fds_eq_iff)"], ["", "lemma fds_subseries_1 [simp]: \"P 1 \\<Longrightarrow> fds_subseries P 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P 1 \\<Longrightarrow> fds_subseries P 1 = 1", "by (simp add: fds_subseries_def fds_eq_iff one_fds_def)"], ["", "lemma fds_subseries_const [simp]: \"P 1 \\<Longrightarrow> fds_subseries P (fds_const c) = fds_const c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P 1 \\<Longrightarrow> fds_subseries P (fds_const c) = fds_const c", "by (simp add: fds_subseries_def fds_eq_iff fds_const_def)"], ["", "lemma fds_subseries_add [simp]: \"fds_subseries P (f + g) = fds_subseries P f + fds_subseries P g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_subseries P (f + g) = fds_subseries P f + fds_subseries P g", "by (simp add: fds_subseries_def fds_eq_iff plus_fds_def)"], ["", "lemma fds_subseries_diff [simp]:\n  \"fds_subseries P (f - g :: 'a :: ring_1 fds) = fds_subseries P f - fds_subseries P g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_subseries P (f - g) = fds_subseries P f - fds_subseries P g", "by (simp add: fds_subseries_def fds_eq_iff minus_fds_def)"], ["", "lemma fds_subseries_minus [simp]:\n  \"fds_subseries P (-f :: 'a :: ring_1 fds) = - fds_subseries P f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_subseries P (- f) = - fds_subseries P f", "by (simp add: fds_subseries_def fds_eq_iff minus_fds_def)"], ["", "lemma fds_subseries_sum [simp]: \"fds_subseries P (\\<Sum>x\\<in>A. f x) = (\\<Sum>x\\<in>A. fds_subseries P (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_subseries P (sum f A) = (\\<Sum>x\\<in>A. fds_subseries P (f x))", "by (induction A rule: infinite_finite_induct) simp_all"], ["", "lemma fds_subseries_shift [simp]:\n  \"fds_subseries P (fds_shift c f) = fds_shift c (fds_subseries P f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_subseries P (fds_shift c f) = fds_shift c (fds_subseries P f)", "by (simp add: fds_subseries_def fds_eq_iff)"], ["", "lemma fds_subseries_deriv [simp]:\n  \"fds_subseries P (fds_deriv f) = fds_deriv (fds_subseries P f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_subseries P (fds_deriv f) = fds_deriv (fds_subseries P f)", "by (simp add: fds_subseries_def fds_deriv_def fds_eq_iff)"], ["", "lemma fds_subseries_integral [simp]:\n  \"P 1 \\<or> c = 0 \\<Longrightarrow> fds_subseries P (fds_integral c f) = fds_integral c (fds_subseries P f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P 1 \\<or> c = (0::'a) \\<Longrightarrow>\n    fds_subseries P (fds_integral c f) = fds_integral c (fds_subseries P f)", "by (auto simp: fds_subseries_def fds_integral_def fds_eq_iff)"], ["", "abbreviation fds_primepow_subseries :: \"nat \\<Rightarrow> ('a :: semiring_1) fds \\<Rightarrow> 'a fds\" where\n  \"fds_primepow_subseries p f \\<equiv> fds_subseries (\\<lambda>n. prime_factors n \\<subseteq> {p}) f\""], ["", "lemma fds_primepow_subseries_mult [simp]:\n  fixes p :: nat\n  defines \"P \\<equiv> (\\<lambda>n. prime_factors n \\<subseteq> {p})\"\n  shows   \"fds_subseries P (f * g) = fds_subseries P f * fds_subseries P g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_subseries P (f * g) = fds_subseries P f * fds_subseries P g", "proof (rule fds_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_subseries P (f * g)) n =\n       fds_nth (fds_subseries P f * fds_subseries P g) n", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_subseries P (f * g)) n =\n       fds_nth (fds_subseries P f * fds_subseries P g) n", "consider \"n = 0\" | \"P n\" \"n > 0\" | \"\\<not>P n\" \"n > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0 \\<Longrightarrow> thesis;\n     \\<lbrakk>P n; 0 < n\\<rbrakk> \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk> \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis;\n   \\<lbrakk>P n; 0 < n\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_subseries P (f * g)) n =\n       fds_nth (fds_subseries P f * fds_subseries P g) n", "thus \"fds_nth (fds_subseries P (f * g)) n = fds_nth (fds_subseries P f * fds_subseries P g) n\""], ["proof (prove)\nusing this:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis;\n   \\<lbrakk>P n; 0 < n\\<rbrakk> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk> \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n\n 3. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "case 2"], ["proof (state)\nthis:\n  P n\n  0 < n\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n\n 3. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "have P: \"P d\" if \"d dvd n\" for d"], ["proof (prove)\ngoal (1 subgoal):\n 1. P d", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P d", "have \"prime_factors d \\<subseteq> prime_factors n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors d \\<subseteq> prime_factors n", "using that 2"], ["proof (prove)\nusing this:\n  d dvd n\n  P n\n  0 < n\n\ngoal (1 subgoal):\n 1. prime_factors d \\<subseteq> prime_factors n", "by (intro dvd_prime_factors) auto"], ["proof (state)\nthis:\n  prime_factors d \\<subseteq> prime_factors n\n\ngoal (1 subgoal):\n 1. P d", "also"], ["proof (state)\nthis:\n  prime_factors d \\<subseteq> prime_factors n\n\ngoal (1 subgoal):\n 1. P d", "have \"\\<dots> \\<subseteq> {p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors n \\<subseteq> {p}", "using 2"], ["proof (prove)\nusing this:\n  P n\n  0 < n\n\ngoal (1 subgoal):\n 1. prime_factors n \\<subseteq> {p}", "by (simp add: P_def)"], ["proof (state)\nthis:\n  prime_factors n \\<subseteq> {p}\n\ngoal (1 subgoal):\n 1. P d", "finally"], ["proof (chain)\npicking this:\n  prime_factors d \\<subseteq> {p}", "show ?thesis"], ["proof (prove)\nusing this:\n  prime_factors d \\<subseteq> {p}\n\ngoal (1 subgoal):\n 1. P d", "by (simp add: P_def)"], ["proof (state)\nthis:\n  P d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?d dvd n \\<Longrightarrow> P ?d\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n\n 3. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "have P': \"P a\" \"P b\" if \"n = a * b\" for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. P a &&& P b", "using P[of a] P[of b] that"], ["proof (prove)\nusing this:\n  a dvd n \\<Longrightarrow> P a\n  b dvd n \\<Longrightarrow> P b\n  n = a * b\n\ngoal (1 subgoal):\n 1. P a &&& P b", "by auto"], ["proof (state)\nthis:\n  n = ?a * ?b \\<Longrightarrow> P ?a\n  n = ?a * ?b \\<Longrightarrow> P ?b\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n\n 3. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "have \"fds_nth (fds_subseries P (f * g)) n = dirichlet_prod (fds_nth f) (fds_nth g) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_subseries P (f * g)) n =\n    dirichlet_prod (fds_nth f) (fds_nth g) n", "using 2"], ["proof (prove)\nusing this:\n  P n\n  0 < n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_subseries P (f * g)) n =\n    dirichlet_prod (fds_nth f) (fds_nth g) n", "by (simp add: fds_subseries_def fds_nth_fds' fds_nth_mult)"], ["proof (state)\nthis:\n  fds_nth (fds_subseries P (f * g)) n =\n  dirichlet_prod (fds_nth f) (fds_nth g) n\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n\n 3. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "also"], ["proof (state)\nthis:\n  fds_nth (fds_subseries P (f * g)) n =\n  dirichlet_prod (fds_nth f) (fds_nth g) n\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n\n 3. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "have \"\\<dots> = dirichlet_prod (fds_nth (fds_subseries P f)) (fds_nth (fds_subseries P g)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (fds_nth f) (fds_nth g) n =\n    dirichlet_prod (fds_nth (fds_subseries P f))\n     (fds_nth (fds_subseries P g)) n", "unfolding dirichlet_prod_altdef2"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. fds_nth f r * fds_nth g d) =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n       fds_nth (fds_subseries P f) r * fds_nth (fds_subseries P g) d)", "using 2"], ["proof (prove)\nusing this:\n  P n\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. fds_nth f r * fds_nth g d) =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n       fds_nth (fds_subseries P f) r * fds_nth (fds_subseries P g) d)", "by (intro sum.cong refl) (auto simp: fds_subseries_def fds_nth_fds' dest: P')"], ["proof (state)\nthis:\n  dirichlet_prod (fds_nth f) (fds_nth g) n =\n  dirichlet_prod (fds_nth (fds_subseries P f)) (fds_nth (fds_subseries P g))\n   n\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n\n 3. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "finally"], ["proof (chain)\npicking this:\n  fds_nth (fds_subseries P (f * g)) n =\n  dirichlet_prod (fds_nth (fds_subseries P f)) (fds_nth (fds_subseries P g))\n   n", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_nth (fds_subseries P (f * g)) n =\n  dirichlet_prod (fds_nth (fds_subseries P f)) (fds_nth (fds_subseries P g))\n   n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n", "by (simp add: fds_nth_mult)"], ["proof (state)\nthis:\n  fds_nth (fds_subseries P (f * g)) n =\n  fds_nth (fds_subseries P f * fds_subseries P g) n\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "case 3"], ["proof (state)\nthis:\n  \\<not> P n\n  0 < n\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "have \"\\<not>(P a \\<and> P b)\" if \"n = a * b\" for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (P a \\<and> P b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (P a \\<and> P b)", "have \"prime_factors n = prime_factors (a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors n = prime_factors (a * b)", "by (simp add: that)"], ["proof (state)\nthis:\n  prime_factors n = prime_factors (a * b)\n\ngoal (1 subgoal):\n 1. \\<not> (P a \\<and> P b)", "also"], ["proof (state)\nthis:\n  prime_factors n = prime_factors (a * b)\n\ngoal (1 subgoal):\n 1. \\<not> (P a \\<and> P b)", "have \"\\<dots> = prime_factors a \\<union> prime_factors b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors (a * b) = prime_factors a \\<union> prime_factors b", "using 3 that"], ["proof (prove)\nusing this:\n  \\<not> P n\n  0 < n\n  n = a * b\n\ngoal (1 subgoal):\n 1. prime_factors (a * b) = prime_factors a \\<union> prime_factors b", "by (intro prime_factors_product) auto"], ["proof (state)\nthis:\n  prime_factors (a * b) = prime_factors a \\<union> prime_factors b\n\ngoal (1 subgoal):\n 1. \\<not> (P a \\<and> P b)", "finally"], ["proof (chain)\npicking this:\n  prime_factors n = prime_factors a \\<union> prime_factors b", "show ?thesis"], ["proof (prove)\nusing this:\n  prime_factors n = prime_factors a \\<union> prime_factors b\n\ngoal (1 subgoal):\n 1. \\<not> (P a \\<and> P b)", "using 3"], ["proof (prove)\nusing this:\n  prime_factors n = prime_factors a \\<union> prime_factors b\n  \\<not> P n\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<not> (P a \\<and> P b)", "by (auto simp: P_def)"], ["proof (state)\nthis:\n  \\<not> (P a \\<and> P b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n = ?a * ?b \\<Longrightarrow> \\<not> (P ?a \\<and> P ?b)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "hence \"dirichlet_prod (fds_nth (fds_subseries P f)) (fds_nth (fds_subseries P g)) n = 0\""], ["proof (prove)\nusing this:\n  n = ?a * ?b \\<Longrightarrow> \\<not> (P ?a \\<and> P ?b)\n\ngoal (1 subgoal):\n 1. dirichlet_prod (fds_nth (fds_subseries P f))\n     (fds_nth (fds_subseries P g)) n =\n    (0::'a)", "unfolding dirichlet_prod_altdef2"], ["proof (prove)\nusing this:\n  n = ?a * ?b \\<Longrightarrow> \\<not> (P ?a \\<and> P ?b)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}.\n       fds_nth (fds_subseries P f) r * fds_nth (fds_subseries P g) d) =\n    (0::'a)", "by (intro sum.neutral) (auto simp: fds_subseries_def fds_nth_fds')"], ["proof (state)\nthis:\n  dirichlet_prod (fds_nth (fds_subseries P f)) (fds_nth (fds_subseries P g))\n   n =\n  (0::'a)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "also"], ["proof (state)\nthis:\n  dirichlet_prod (fds_nth (fds_subseries P f)) (fds_nth (fds_subseries P g))\n   n =\n  (0::'a)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "have \"\\<dots> = fds_nth (fds_subseries P (f * g)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) = fds_nth (fds_subseries P (f * g)) n", "using 3"], ["proof (prove)\nusing this:\n  \\<not> P n\n  0 < n\n\ngoal (1 subgoal):\n 1. (0::'a) = fds_nth (fds_subseries P (f * g)) n", "by (simp add: fds_subseries_def)"], ["proof (state)\nthis:\n  (0::'a) = fds_nth (fds_subseries P (f * g)) n\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n\n 2. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> fds_nth (fds_subseries P (f * g)) n =\n                      fds_nth (fds_subseries P f * fds_subseries P g) n", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod (fds_nth (fds_subseries P f)) (fds_nth (fds_subseries P g))\n   n =\n  fds_nth (fds_subseries P (f * g)) n", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod (fds_nth (fds_subseries P f)) (fds_nth (fds_subseries P g))\n   n =\n  fds_nth (fds_subseries P (f * g)) n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n", "by (simp add: fds_nth_mult)"], ["proof (state)\nthis:\n  fds_nth (fds_subseries P (f * g)) n =\n  fds_nth (fds_subseries P f * fds_subseries P g) n\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    fds_nth (fds_subseries P (f * g)) n =\n    fds_nth (fds_subseries P f * fds_subseries P g) n", "qed auto"], ["proof (state)\nthis:\n  fds_nth (fds_subseries P (f * g)) n =\n  fds_nth (fds_subseries P f * fds_subseries P g) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_primepow_subseries_power [simp]: \n  \"fds_primepow_subseries p (f ^ n) = fds_primepow_subseries p f ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_primepow_subseries p (f ^ n) = fds_primepow_subseries p f ^ n", "by (induction n)  simp_all"], ["", "lemma fds_primepow_subseries_prod [simp]: \n  \"fds_primepow_subseries p (\\<Prod>x\\<in>A. f x) = (\\<Prod>x\\<in>A. fds_primepow_subseries p (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_primepow_subseries p (prod f A) =\n    (\\<Prod>x\\<in>A. fds_primepow_subseries p (f x))", "by (induction A rule: infinite_finite_induct) simp_all"], ["", "lemma completely_multiplicative_function_only_pows:\n  assumes \"completely_multiplicative_function (fds_nth f)\"\n  shows   \"completely_multiplicative_function (fds_nth (fds_primepow_subseries p f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function\n     (fds_nth (fds_primepow_subseries p f))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. completely_multiplicative_function\n     (fds_nth (fds_primepow_subseries p f))", "interpret completely_multiplicative_function \"fds_nth f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function (fds_nth f)", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. completely_multiplicative_function\n     (fds_nth (fds_primepow_subseries p f))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function\n     (fds_nth (fds_primepow_subseries p f))", "by standard (auto simp: fds_nth_subseries prime_factors_product mult)"], ["proof (state)\nthis:\n  completely_multiplicative_function (fds_nth (fds_primepow_subseries p f))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Truncation\\<close>"], ["", "definition fds_truncate :: \"nat \\<Rightarrow> 'a ::{zero} fds \\<Rightarrow> 'a fds\" where\n  \"fds_truncate m f = fds (\\<lambda>n. if n \\<le> m then fds_nth f n else 0)\""], ["", "lemma fds_nth_truncate: \"fds_nth (fds_truncate m f) n = (if n \\<le> m then fds_nth f n else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_truncate m f) n =\n    (if n \\<le> m then fds_nth f n else (0::'a))", "by (simp add: fds_truncate_def fds_nth_fds')"], ["", "lemma fds_truncate_0 [simp]: \"fds_truncate 0 f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate 0 f = 0", "by (simp add: fds_eq_iff fds_nth_truncate)"], ["", "lemma fds_truncate_zero [simp]: \"fds_truncate m 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m 0 = 0", "by (simp add: fds_truncate_def fds_eq_iff)"], ["", "lemma fds_truncate_one [simp]: \"m > 0 \\<Longrightarrow> fds_truncate m 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> fds_truncate m 1 = 1", "by (simp add: fds_truncate_def fds_eq_iff)"], ["", "lemma fds_truncate_const [simp]: \"m > 0 \\<Longrightarrow> fds_truncate m (fds_const c) = fds_const c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<Longrightarrow> fds_truncate m (fds_const c) = fds_const c", "by (simp add: fds_truncate_def fds_eq_iff)"], ["", "lemma fds_truncate_truncate [simp]: \"fds_truncate m (fds_truncate n f) = fds_truncate (min m n) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate n f) = fds_truncate (min m n) f", "by (rule fds_eqI) (simp add: fds_nth_truncate)"], ["", "lemma fds_truncate_truncate' [simp]: \"fds_truncate m (fds_truncate m f) = fds_truncate m f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f) = fds_truncate m f", "by (rule fds_eqI) (simp add: fds_nth_truncate)"], ["", "lemma fds_truncate_shift [simp]: \"fds_truncate m (fds_shift a f) = fds_shift a (fds_truncate m f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_shift a f) = fds_shift a (fds_truncate m f)", "by (simp add: fds_eq_iff fds_nth_truncate)"], ["", "lemma fds_truncate_add_strong: \n  \"fds_truncate m (f + g :: 'a :: monoid_add fds) = fds_truncate m f + fds_truncate m g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (f + g) = fds_truncate m f + fds_truncate m g", "by (auto simp: fds_eq_iff fds_nth_truncate)"], ["", "lemma fds_truncate_add:\n  \"fds_truncate m (fds_truncate m f + fds_truncate m g :: 'a :: monoid_add fds) = \n     fds_truncate m (f + g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f + fds_truncate m g) =\n    fds_truncate m (f + g)", "by (auto simp: fds_eq_iff fds_nth_truncate)"], ["", "lemma fds_truncate_mult:\n  \"fds_truncate m (fds_truncate m f * fds_truncate m g) = fds_truncate m (f * g)\" (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f * fds_truncate m g) =\n    fds_truncate m (f * g)", "proof (intro fds_eqI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n       fds_nth (fds_truncate m (f * g)) n", "case (1 n)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n       fds_nth (fds_truncate m (f * g)) n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n", "proof (cases \"n \\<le> m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n\n 2. \\<not> n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n", "case True"], ["proof (state)\nthis:\n  n \\<le> m\n\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n\n 2. \\<not> n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n", "hence \"fds_nth ?B n = dirichlet_prod (fds_nth f) (fds_nth g) n\""], ["proof (prove)\nusing this:\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. fds_nth (fds_truncate m (f * g)) n =\n    dirichlet_prod (fds_nth f) (fds_nth g) n", "by (simp add: fds_nth_truncate fds_nth_mult)"], ["proof (state)\nthis:\n  fds_nth (fds_truncate m (f * g)) n =\n  dirichlet_prod (fds_nth f) (fds_nth g) n\n\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n\n 2. \\<not> n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n", "also"], ["proof (state)\nthis:\n  fds_nth (fds_truncate m (f * g)) n =\n  dirichlet_prod (fds_nth f) (fds_nth g) n\n\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n\n 2. \\<not> n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n", "have \"\\<dots> = dirichlet_prod (fds_nth (fds_truncate m f)) (fds_nth (fds_truncate m g)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (fds_nth f) (fds_nth g) n =\n    dirichlet_prod (fds_nth (fds_truncate m f)) (fds_nth (fds_truncate m g))\n     n", "unfolding dirichlet_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. fds_nth f d * fds_nth g (n div d)) =\n    (\\<Sum>d | d dvd n.\n       fds_nth (fds_truncate m f) d * fds_nth (fds_truncate m g) (n div d))", "proof (intro sum.cong refl, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {d. d dvd n} \\<Longrightarrow>\n       fds_nth f x * fds_nth g (n div x) =\n       fds_nth (fds_truncate m f) x * fds_nth (fds_truncate m g) (n div x)", "case (1 d)"], ["proof (state)\nthis:\n  d \\<in> {d. d dvd n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {d. d dvd n} \\<Longrightarrow>\n       fds_nth f x * fds_nth g (n div x) =\n       fds_nth (fds_truncate m f) x * fds_nth (fds_truncate m g) (n div x)", "with \\<open>n > 0\\<close>"], ["proof (chain)\npicking this:\n  0 < n\n  d \\<in> {d. d dvd n}", "have \"d \\<le> m\" \"n div d \\<le> m\""], ["proof (prove)\nusing this:\n  0 < n\n  d \\<in> {d. d dvd n}\n\ngoal (1 subgoal):\n 1. d \\<le> m &&& n div d \\<le> m", "by (auto dest: dvd_imp_le intro: order.trans[OF _ True])"], ["proof (state)\nthis:\n  d \\<le> m\n  n div d \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {d. d dvd n} \\<Longrightarrow>\n       fds_nth f x * fds_nth g (n div x) =\n       fds_nth (fds_truncate m f) x * fds_nth (fds_truncate m g) (n div x)", "thus ?case"], ["proof (prove)\nusing this:\n  d \\<le> m\n  n div d \\<le> m\n\ngoal (1 subgoal):\n 1. fds_nth f d * fds_nth g (n div d) =\n    fds_nth (fds_truncate m f) d * fds_nth (fds_truncate m g) (n div d)", "by (auto simp add: fds_nth_truncate)"], ["proof (state)\nthis:\n  fds_nth f d * fds_nth g (n div d) =\n  fds_nth (fds_truncate m f) d * fds_nth (fds_truncate m g) (n div d)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dirichlet_prod (fds_nth f) (fds_nth g) n =\n  dirichlet_prod (fds_nth (fds_truncate m f)) (fds_nth (fds_truncate m g)) n\n\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n\n 2. \\<not> n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n", "also"], ["proof (state)\nthis:\n  dirichlet_prod (fds_nth f) (fds_nth g) n =\n  dirichlet_prod (fds_nth (fds_truncate m f)) (fds_nth (fds_truncate m g)) n\n\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n\n 2. \\<not> n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n", "have \"\\<dots> = fds_nth ?A n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (fds_nth (fds_truncate m f)) (fds_nth (fds_truncate m g))\n     n =\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n", "using True"], ["proof (prove)\nusing this:\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. dirichlet_prod (fds_nth (fds_truncate m f)) (fds_nth (fds_truncate m g))\n     n =\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n", "by (simp add: fds_nth_truncate fds_nth_mult)"], ["proof (state)\nthis:\n  dirichlet_prod (fds_nth (fds_truncate m f)) (fds_nth (fds_truncate m g))\n   n =\n  fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n\n\ngoal (2 subgoals):\n 1. n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n\n 2. \\<not> n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n", "finally"], ["proof (chain)\npicking this:\n  fds_nth (fds_truncate m (f * g)) n =\n  fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_nth (fds_truncate m (f * g)) n =\n  fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n", ".."], ["proof (state)\nthis:\n  fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n  fds_nth (fds_truncate m (f * g)) n\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> m \\<Longrightarrow>\n    fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n    fds_nth (fds_truncate m (f * g)) n", "qed (auto simp: fds_nth_truncate)"], ["proof (state)\nthis:\n  fds_nth (fds_truncate m (fds_truncate m f * fds_truncate m g)) n =\n  fds_nth (fds_truncate m (f * g)) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_truncate_deriv: \"fds_truncate m (fds_deriv f) = fds_deriv (fds_truncate m f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_deriv f) = fds_deriv (fds_truncate m f)", "by (simp add: fds_eq_iff fds_nth_truncate fds_deriv_def)"], ["", "lemma fds_truncate_integral: \n  \"m > 0 \\<or> c = 0 \\<Longrightarrow> fds_truncate m (fds_integral c f) = fds_integral c (fds_truncate m f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m \\<or> c = (0::'a) \\<Longrightarrow>\n    fds_truncate m (fds_integral c f) = fds_integral c (fds_truncate m f)", "by (auto simp: fds_eq_iff fds_nth_truncate fds_integral_def)"], ["", "lemma fds_truncate_power: \"fds_truncate m (fds_truncate m f ^ n) = fds_truncate m (f ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f ^ n) = fds_truncate m (f ^ n)", "proof (cases \"m = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m = 0 \\<Longrightarrow>\n    fds_truncate m (fds_truncate m f ^ n) = fds_truncate m (f ^ n)\n 2. m \\<noteq> 0 \\<Longrightarrow>\n    fds_truncate m (fds_truncate m f ^ n) = fds_truncate m (f ^ n)", "case False"], ["proof (state)\nthis:\n  m \\<noteq> 0\n\ngoal (2 subgoals):\n 1. m = 0 \\<Longrightarrow>\n    fds_truncate m (fds_truncate m f ^ n) = fds_truncate m (f ^ n)\n 2. m \\<noteq> 0 \\<Longrightarrow>\n    fds_truncate m (fds_truncate m f ^ n) = fds_truncate m (f ^ n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f ^ n) = fds_truncate m (f ^ n)", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_truncate m (fds_truncate m f ^ 0) = fds_truncate m (f ^ 0)\n 2. \\<And>n.\n       fds_truncate m (fds_truncate m f ^ n) =\n       fds_truncate m (f ^ n) \\<Longrightarrow>\n       fds_truncate m (fds_truncate m f ^ Suc n) =\n       fds_truncate m (f ^ Suc n)", "case (Suc n)"], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f ^ n) = fds_truncate m (f ^ n)\n\ngoal (2 subgoals):\n 1. fds_truncate m (fds_truncate m f ^ 0) = fds_truncate m (f ^ 0)\n 2. \\<And>n.\n       fds_truncate m (fds_truncate m f ^ n) =\n       fds_truncate m (f ^ n) \\<Longrightarrow>\n       fds_truncate m (fds_truncate m f ^ Suc n) =\n       fds_truncate m (f ^ Suc n)", "have \"fds_truncate m (fds_truncate m f ^ Suc n) =\n            fds_truncate m (fds_truncate m f * fds_truncate m f ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f ^ Suc n) =\n    fds_truncate m (fds_truncate m f * fds_truncate m f ^ n)", "by simp"], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f ^ Suc n) =\n  fds_truncate m (fds_truncate m f * fds_truncate m f ^ n)\n\ngoal (2 subgoals):\n 1. fds_truncate m (fds_truncate m f ^ 0) = fds_truncate m (f ^ 0)\n 2. \\<And>n.\n       fds_truncate m (fds_truncate m f ^ n) =\n       fds_truncate m (f ^ n) \\<Longrightarrow>\n       fds_truncate m (fds_truncate m f ^ Suc n) =\n       fds_truncate m (f ^ Suc n)", "also"], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f ^ Suc n) =\n  fds_truncate m (fds_truncate m f * fds_truncate m f ^ n)\n\ngoal (2 subgoals):\n 1. fds_truncate m (fds_truncate m f ^ 0) = fds_truncate m (f ^ 0)\n 2. \\<And>n.\n       fds_truncate m (fds_truncate m f ^ n) =\n       fds_truncate m (f ^ n) \\<Longrightarrow>\n       fds_truncate m (fds_truncate m f ^ Suc n) =\n       fds_truncate m (f ^ Suc n)", "have \"\\<dots> = fds_truncate m (fds_truncate m f * fds_truncate m (f ^ n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f * fds_truncate m f ^ n) =\n    fds_truncate m (fds_truncate m f * fds_truncate m (f ^ n))", "by (subst fds_truncate_mult [symmetric]) (simp add: Suc)"], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f * fds_truncate m f ^ n) =\n  fds_truncate m (fds_truncate m f * fds_truncate m (f ^ n))\n\ngoal (2 subgoals):\n 1. fds_truncate m (fds_truncate m f ^ 0) = fds_truncate m (f ^ 0)\n 2. \\<And>n.\n       fds_truncate m (fds_truncate m f ^ n) =\n       fds_truncate m (f ^ n) \\<Longrightarrow>\n       fds_truncate m (fds_truncate m f ^ Suc n) =\n       fds_truncate m (f ^ Suc n)", "also"], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f * fds_truncate m f ^ n) =\n  fds_truncate m (fds_truncate m f * fds_truncate m (f ^ n))\n\ngoal (2 subgoals):\n 1. fds_truncate m (fds_truncate m f ^ 0) = fds_truncate m (f ^ 0)\n 2. \\<And>n.\n       fds_truncate m (fds_truncate m f ^ n) =\n       fds_truncate m (f ^ n) \\<Longrightarrow>\n       fds_truncate m (fds_truncate m f ^ Suc n) =\n       fds_truncate m (f ^ Suc n)", "have \"\\<dots> = fds_truncate m (f ^ Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f * fds_truncate m (f ^ n)) =\n    fds_truncate m (f ^ Suc n)", "by (simp add: fds_truncate_mult)"], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f * fds_truncate m (f ^ n)) =\n  fds_truncate m (f ^ Suc n)\n\ngoal (2 subgoals):\n 1. fds_truncate m (fds_truncate m f ^ 0) = fds_truncate m (f ^ 0)\n 2. \\<And>n.\n       fds_truncate m (fds_truncate m f ^ n) =\n       fds_truncate m (f ^ n) \\<Longrightarrow>\n       fds_truncate m (fds_truncate m f ^ Suc n) =\n       fds_truncate m (f ^ Suc n)", "finally"], ["proof (chain)\npicking this:\n  fds_truncate m (fds_truncate m f ^ Suc n) = fds_truncate m (f ^ Suc n)", "show ?case"], ["proof (prove)\nusing this:\n  fds_truncate m (fds_truncate m f ^ Suc n) = fds_truncate m (f ^ Suc n)\n\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f ^ Suc n) = fds_truncate m (f ^ Suc n)", "."], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f ^ Suc n) = fds_truncate m (f ^ Suc n)\n\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f ^ 0) = fds_truncate m (f ^ 0)", "qed (simp_all add: fds_truncate_mult)"], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f ^ n) = fds_truncate m (f ^ n)\n\ngoal (1 subgoal):\n 1. m = 0 \\<Longrightarrow>\n    fds_truncate m (fds_truncate m f ^ n) = fds_truncate m (f ^ n)", "qed simp_all"], ["", "lemma dirichlet_inverse_cong_simp:\n  assumes \"\\<And>m. m > 0 \\<Longrightarrow> m \\<le> n \\<Longrightarrow> f m = f' m\" \"i = i'\" \"n = n'\"\n  shows   \"dirichlet_inverse f i n = dirichlet_inverse f' i' n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i' n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i' n'", "have \"dirichlet_inverse f i n = dirichlet_inverse f' i n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i n", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < ?m; ?m \\<le> n\\<rbrakk> \\<Longrightarrow> f ?m = f' ?m\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i n", "proof (induction n rule: dirichlet_inverse_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> Suc 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           \\<lbrakk>k < n;\n            \\<And>m.\n               \\<lbrakk>0 < m; m \\<le> k\\<rbrakk>\n               \\<Longrightarrow> f m = f' m\\<rbrakk>\n           \\<Longrightarrow> dirichlet_inverse f i k =\n                             dirichlet_inverse f' i k;\n        \\<And>m.\n           \\<lbrakk>0 < m; m \\<le> n\\<rbrakk>\n           \\<Longrightarrow> f m = f' m\\<rbrakk>\n       \\<Longrightarrow> dirichlet_inverse f i n = dirichlet_inverse f' i n", "case (gt1 n)"], ["proof (state)\nthis:\n  1 < n\n  \\<lbrakk>?k < n;\n   \\<And>m.\n      \\<lbrakk>0 < m; m \\<le> ?k\\<rbrakk>\n      \\<Longrightarrow> f m = f' m\\<rbrakk>\n  \\<Longrightarrow> dirichlet_inverse f i ?k = dirichlet_inverse f' i ?k\n  \\<lbrakk>0 < ?m; ?m \\<le> n\\<rbrakk> \\<Longrightarrow> f ?m = f' ?m\n\ngoal (3 subgoals):\n 1. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> Suc 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           \\<lbrakk>k < n;\n            \\<And>m.\n               \\<lbrakk>0 < m; m \\<le> k\\<rbrakk>\n               \\<Longrightarrow> f m = f' m\\<rbrakk>\n           \\<Longrightarrow> dirichlet_inverse f i k =\n                             dirichlet_inverse f' i k;\n        \\<And>m.\n           \\<lbrakk>0 < m; m \\<le> n\\<rbrakk>\n           \\<Longrightarrow> f m = f' m\\<rbrakk>\n       \\<Longrightarrow> dirichlet_inverse f i n = dirichlet_inverse f' i n", "have *: \"dirichlet_inverse f i k = dirichlet_inverse f' i k\" if \"k dvd n \\<and> k < n\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i k = dirichlet_inverse f' i k", "using that"], ["proof (prove)\nusing this:\n  k dvd n \\<and> k < n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i k = dirichlet_inverse f' i k", "by (intro gt1) auto"], ["proof (state)\nthis:\n  ?k dvd n \\<and> ?k < n \\<Longrightarrow>\n  dirichlet_inverse f i ?k = dirichlet_inverse f' i ?k\n\ngoal (3 subgoals):\n 1. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> Suc 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           \\<lbrakk>k < n;\n            \\<And>m.\n               \\<lbrakk>0 < m; m \\<le> k\\<rbrakk>\n               \\<Longrightarrow> f m = f' m\\<rbrakk>\n           \\<Longrightarrow> dirichlet_inverse f i k =\n                             dirichlet_inverse f' i k;\n        \\<And>m.\n           \\<lbrakk>0 < m; m \\<le> n\\<rbrakk>\n           \\<Longrightarrow> f m = f' m\\<rbrakk>\n       \\<Longrightarrow> dirichlet_inverse f i n = dirichlet_inverse f' i n", "have *: \"(\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d) =\n               (\\<Sum>d | d dvd n \\<and> d < n. f' (n div d) * dirichlet_inverse f' i d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> d < n.\n       f (n div d) * dirichlet_inverse f i d) =\n    (\\<Sum>d | d dvd n \\<and> d < n.\n       f' (n div d) * dirichlet_inverse f' i d)", "by (intro sum.cong refl) (subst gt1.prems, auto elim: dvdE simp: *)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d) =\n  (\\<Sum>d | d dvd n \\<and> d < n. f' (n div d) * dirichlet_inverse f' i d)\n\ngoal (3 subgoals):\n 1. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> Suc 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           \\<lbrakk>k < n;\n            \\<And>m.\n               \\<lbrakk>0 < m; m \\<le> k\\<rbrakk>\n               \\<Longrightarrow> f m = f' m\\<rbrakk>\n           \\<Longrightarrow> dirichlet_inverse f i k =\n                             dirichlet_inverse f' i k;\n        \\<And>m.\n           \\<lbrakk>0 < m; m \\<le> n\\<rbrakk>\n           \\<Longrightarrow> f m = f' m\\<rbrakk>\n       \\<Longrightarrow> dirichlet_inverse f i n = dirichlet_inverse f' i n", "consider \"n = 0\" | \"n = 1\" | \"n > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0 \\<Longrightarrow> thesis; n = 1 \\<Longrightarrow> thesis;\n     1 < n \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (3 subgoals):\n 1. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> Suc 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           \\<lbrakk>k < n;\n            \\<And>m.\n               \\<lbrakk>0 < m; m \\<le> k\\<rbrakk>\n               \\<Longrightarrow> f m = f' m\\<rbrakk>\n           \\<Longrightarrow> dirichlet_inverse f i k =\n                             dirichlet_inverse f' i k;\n        \\<And>m.\n           \\<lbrakk>0 < m; m \\<le> n\\<rbrakk>\n           \\<Longrightarrow> f m = f' m\\<rbrakk>\n       \\<Longrightarrow> dirichlet_inverse f i n = dirichlet_inverse f' i n", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i n", "by cases (insert *, simp_all add: dirichlet_inverse_gt_1 * cong: sum.cong)"], ["proof (state)\nthis:\n  dirichlet_inverse f i n = dirichlet_inverse f' i n\n\ngoal (2 subgoals):\n 1. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>m.\n        \\<lbrakk>0 < m; m \\<le> Suc 0\\<rbrakk>\n        \\<Longrightarrow> f m = f' m) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)", "qed auto"], ["proof (state)\nthis:\n  dirichlet_inverse f i n = dirichlet_inverse f' i n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i' n'", "with assms(2,3)"], ["proof (chain)\npicking this:\n  i = i'\n  n = n'\n  dirichlet_inverse f i n = dirichlet_inverse f' i n", "show ?thesis"], ["proof (prove)\nusing this:\n  i = i'\n  n = n'\n  dirichlet_inverse f i n = dirichlet_inverse f' i n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i' n'", "by simp"], ["proof (state)\nthis:\n  dirichlet_inverse f i n = dirichlet_inverse f' i' n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_truncate_cong: \n  \"(\\<And>n. m > 0 \\<Longrightarrow> n > 0 \\<Longrightarrow> n \\<le> m \\<Longrightarrow> fds_nth f n = fds_nth f' n) \\<Longrightarrow>\n   fds_truncate m f = fds_truncate m f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n        \\<Longrightarrow> fds_nth f n = fds_nth f' n) \\<Longrightarrow>\n    fds_truncate m f = fds_truncate m f'", "by (rule fds_eqI) (simp add: fds_nth_truncate)"], ["", "lemma fds_truncate_inverse:\n  \"fds_truncate m (inverse (fds_truncate m (f :: 'a :: field fds))) = fds_truncate m (inverse f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (inverse (fds_truncate m f)) = fds_truncate m (inverse f)", "proof (rule fds_truncate_cong, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (inverse (fds_truncate m f)) n =\n                         fds_nth (inverse f) n", "case (1 n)"], ["proof (state)\nthis:\n  0 < m\n  0 < n\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (inverse (fds_truncate m f)) n =\n                         fds_nth (inverse f) n", "have *: \"dirichlet_inverse (\\<lambda>n. if n \\<le> m then fds_nth f n else 0) (inverse (fds_nth f 1)) n =\n             dirichlet_inverse (fds_nth f) (inverse (fds_nth f 1)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse\n     (\\<lambda>n. if n \\<le> m then fds_nth f n else (0::'a))\n     (inverse (fds_nth f 1)) n =\n    dirichlet_inverse (fds_nth f) (inverse (fds_nth f 1)) n", "using 1"], ["proof (prove)\nusing this:\n  0 < m\n  0 < n\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. dirichlet_inverse\n     (\\<lambda>n. if n \\<le> m then fds_nth f n else (0::'a))\n     (inverse (fds_nth f 1)) n =\n    dirichlet_inverse (fds_nth f) (inverse (fds_nth f 1)) n", "by (intro dirichlet_inverse_cong_simp) auto"], ["proof (state)\nthis:\n  dirichlet_inverse (\\<lambda>n. if n \\<le> m then fds_nth f n else (0::'a))\n   (inverse (fds_nth f 1)) n =\n  dirichlet_inverse (fds_nth f) (inverse (fds_nth f 1)) n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (inverse (fds_truncate m f)) n =\n                         fds_nth (inverse f) n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (inverse (fds_truncate m f)) n = fds_nth (inverse f) n", "proof (cases \"fds_nth f 1 = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_nth f 1 = (0::'a) \\<Longrightarrow>\n    fds_nth (inverse (fds_truncate m f)) n = fds_nth (inverse f) n\n 2. fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow>\n    fds_nth (inverse (fds_truncate m f)) n = fds_nth (inverse f) n", "case True"], ["proof (state)\nthis:\n  fds_nth f 1 = (0::'a)\n\ngoal (2 subgoals):\n 1. fds_nth f 1 = (0::'a) \\<Longrightarrow>\n    fds_nth (inverse (fds_truncate m f)) n = fds_nth (inverse f) n\n 2. fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow>\n    fds_nth (inverse (fds_truncate m f)) n = fds_nth (inverse f) n", "thus ?thesis"], ["proof (prove)\nusing this:\n  fds_nth f 1 = (0::'a)\n\ngoal (1 subgoal):\n 1. fds_nth (inverse (fds_truncate m f)) n = fds_nth (inverse f) n", "by (auto simp: inverse_fds_nonunit fds_nth_truncate)"], ["proof (state)\nthis:\n  fds_nth (inverse (fds_truncate m f)) n = fds_nth (inverse f) n\n\ngoal (1 subgoal):\n 1. fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow>\n    fds_nth (inverse (fds_truncate m f)) n = fds_nth (inverse f) n", "qed (insert * 1, auto simp: inverse_fds_def fds_nth_fds' fds_nth_truncate Suc_le_eq)"], ["proof (state)\nthis:\n  fds_nth (inverse (fds_truncate m f)) n = fds_nth (inverse f) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_truncate_divide: \n  fixes f g :: \"'a :: field fds\"\n  shows \"fds_truncate m (fds_truncate m f / fds_truncate m g) = fds_truncate m (f / g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f / fds_truncate m g) =\n    fds_truncate m (f / g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f / fds_truncate m g) =\n    fds_truncate m (f / g)", "have \"fds_truncate m (f / g) = fds_truncate m (fds_truncate m (fds_truncate m f) * \n          fds_truncate m (inverse (fds_truncate m g)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (f / g) =\n    fds_truncate m\n     (fds_truncate m (fds_truncate m f) *\n      fds_truncate m (inverse (fds_truncate m g)))", "by (simp add: fds_truncate_inverse fds_truncate_mult divide_fds_def)"], ["proof (state)\nthis:\n  fds_truncate m (f / g) =\n  fds_truncate m\n   (fds_truncate m (fds_truncate m f) *\n    fds_truncate m (inverse (fds_truncate m g)))\n\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f / fds_truncate m g) =\n    fds_truncate m (f / g)", "also"], ["proof (state)\nthis:\n  fds_truncate m (f / g) =\n  fds_truncate m\n   (fds_truncate m (fds_truncate m f) *\n    fds_truncate m (inverse (fds_truncate m g)))\n\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f / fds_truncate m g) =\n    fds_truncate m (f / g)", "have \"\\<dots> = fds_truncate m (fds_truncate m f * inverse (fds_truncate m g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m\n     (fds_truncate m (fds_truncate m f) *\n      fds_truncate m (inverse (fds_truncate m g))) =\n    fds_truncate m (fds_truncate m f * inverse (fds_truncate m g))", "by (rule fds_truncate_mult)"], ["proof (state)\nthis:\n  fds_truncate m\n   (fds_truncate m (fds_truncate m f) *\n    fds_truncate m (inverse (fds_truncate m g))) =\n  fds_truncate m (fds_truncate m f * inverse (fds_truncate m g))\n\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f / fds_truncate m g) =\n    fds_truncate m (f / g)", "also"], ["proof (state)\nthis:\n  fds_truncate m\n   (fds_truncate m (fds_truncate m f) *\n    fds_truncate m (inverse (fds_truncate m g))) =\n  fds_truncate m (fds_truncate m f * inverse (fds_truncate m g))\n\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f / fds_truncate m g) =\n    fds_truncate m (f / g)", "have \"\\<dots> = fds_truncate m (fds_truncate m f / fds_truncate m g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f * inverse (fds_truncate m g)) =\n    fds_truncate m (fds_truncate m f / fds_truncate m g)", "by (simp add: divide_fds_def)"], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f * inverse (fds_truncate m g)) =\n  fds_truncate m (fds_truncate m f / fds_truncate m g)\n\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f / fds_truncate m g) =\n    fds_truncate m (f / g)", "finally"], ["proof (chain)\npicking this:\n  fds_truncate m (f / g) =\n  fds_truncate m (fds_truncate m f / fds_truncate m g)", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_truncate m (f / g) =\n  fds_truncate m (fds_truncate m f / fds_truncate m g)\n\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f / fds_truncate m g) =\n    fds_truncate m (f / g)", ".."], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f / fds_truncate m g) =\n  fds_truncate m (f / g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_truncate_ln:\n  fixes f :: \"'a :: real_normed_field fds\"\n  shows \"fds_truncate m (fds_ln l (fds_truncate m f)) = fds_truncate m (fds_ln l f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_ln l (fds_truncate m f)) =\n    fds_truncate m (fds_ln l f)", "by (cases \"m = 0\")\n     (simp_all add: fds_ln_def fds_truncate_integral fds_truncate_deriv [symmetric] \n                    fds_truncate_divide)"], ["", "lemma fds_truncate_exp:\n  shows \"fds_truncate m (fds_exp (fds_truncate m f)) = fds_truncate m (fds_exp f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_exp (fds_truncate m f)) = fds_truncate m (fds_exp f)", "proof (rule fds_truncate_cong, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (fds_exp (fds_truncate m f)) n =\n                         fds_nth (fds_exp f) n", "case (1 n)"], ["proof (state)\nthis:\n  0 < m\n  0 < n\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (fds_exp (fds_truncate m f)) n =\n                         fds_nth (fds_exp f) n", "define a where \"a = exp (fds_nth f (Suc 0))\""], ["proof (state)\nthis:\n  a = exp (fds_nth f (Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (fds_exp (fds_truncate m f)) n =\n                         fds_nth (fds_exp f) n", "define f' where \"f' = fds (\\<lambda>n. if n = Suc 0 then 0 else fds_nth f n)\""], ["proof (state)\nthis:\n  f' = fds (\\<lambda>n. if n = Suc 0 then 0::'a else fds_nth f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (fds_exp (fds_truncate m f)) n =\n                         fds_nth (fds_exp f) n", "have truncate_f': \"fds_truncate m f' = fds (\\<lambda>n. if n = Suc 0 then 0 else fds_nth (fds_truncate m f) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m f' =\n    fds (\\<lambda>n.\n            if n = Suc 0 then 0::'a else fds_nth (fds_truncate m f) n)", "by (simp add: f'_def fds_eq_iff fds_nth_truncate)"], ["proof (state)\nthis:\n  fds_truncate m f' =\n  fds (\\<lambda>n.\n          if n = Suc 0 then 0::'a else fds_nth (fds_truncate m f) n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (fds_exp (fds_truncate m f)) n =\n                         fds_nth (fds_exp f) n", "have \"fds_nth (fds_exp (fds_truncate m f)) n = \n          a * (\\<Sum>k. fds_nth (fds_truncate m f' ^ k) n /\\<^sub>R fact k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_exp (fds_truncate m f)) n =\n    a * (\\<Sum>k. fds_nth (fds_truncate m f' ^ k) n /\\<^sub>R fact k)", "using 1"], ["proof (prove)\nusing this:\n  0 < m\n  0 < n\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp (fds_truncate m f)) n =\n    a * (\\<Sum>k. fds_nth (fds_truncate m f' ^ k) n /\\<^sub>R fact k)", "by (simp add: fds_exp_def fds_nth_fds' a_def [symmetric] f'_def [symmetric] \n                  fds_nth_truncate truncate_f' [symmetric])"], ["proof (state)\nthis:\n  fds_nth (fds_exp (fds_truncate m f)) n =\n  a * (\\<Sum>k. fds_nth (fds_truncate m f' ^ k) n /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (fds_exp (fds_truncate m f)) n =\n                         fds_nth (fds_exp f) n", "also"], ["proof (state)\nthis:\n  fds_nth (fds_exp (fds_truncate m f)) n =\n  a * (\\<Sum>k. fds_nth (fds_truncate m f' ^ k) n /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (fds_exp (fds_truncate m f)) n =\n                         fds_nth (fds_exp f) n", "have \"(\\<lambda>k. fds_nth (fds_truncate m f' ^ k) n) = (\\<lambda>k. fds_nth (f' ^ k) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k. fds_nth (fds_truncate m f' ^ k) n) =\n    (\\<lambda>k. fds_nth (f' ^ k) n)", "proof (rule ext, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k. fds_nth (fds_truncate m f' ^ k) n = fds_nth (f' ^ k) n", "case (1 k)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>k. fds_nth (fds_truncate m f' ^ k) n = fds_nth (f' ^ k) n", "have \"fds_nth (fds_truncate m f' ^ k) n = fds_nth (fds_truncate m (fds_truncate m f' ^ k)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_truncate m f' ^ k) n =\n    fds_nth (fds_truncate m (fds_truncate m f' ^ k)) n", "using \\<open>n \\<le> m\\<close>"], ["proof (prove)\nusing this:\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. fds_nth (fds_truncate m f' ^ k) n =\n    fds_nth (fds_truncate m (fds_truncate m f' ^ k)) n", "by (simp add: fds_nth_truncate)"], ["proof (state)\nthis:\n  fds_nth (fds_truncate m f' ^ k) n =\n  fds_nth (fds_truncate m (fds_truncate m f' ^ k)) n\n\ngoal (1 subgoal):\n 1. \\<And>k. fds_nth (fds_truncate m f' ^ k) n = fds_nth (f' ^ k) n", "also"], ["proof (state)\nthis:\n  fds_nth (fds_truncate m f' ^ k) n =\n  fds_nth (fds_truncate m (fds_truncate m f' ^ k)) n\n\ngoal (1 subgoal):\n 1. \\<And>k. fds_nth (fds_truncate m f' ^ k) n = fds_nth (f' ^ k) n", "have \"fds_truncate m (fds_truncate m f' ^ k) = fds_truncate m (f' ^ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_truncate m f' ^ k) = fds_truncate m (f' ^ k)", "by (simp add: fds_truncate_power)"], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f' ^ k) = fds_truncate m (f' ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>k. fds_nth (fds_truncate m f' ^ k) n = fds_nth (f' ^ k) n", "also"], ["proof (state)\nthis:\n  fds_truncate m (fds_truncate m f' ^ k) = fds_truncate m (f' ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>k. fds_nth (fds_truncate m f' ^ k) n = fds_nth (f' ^ k) n", "have \"fds_nth \\<dots> n = fds_nth (f' ^ k) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_truncate m (f' ^ k)) n = fds_nth (f' ^ k) n", "using \\<open>n \\<le> m\\<close>"], ["proof (prove)\nusing this:\n  n \\<le> m\n\ngoal (1 subgoal):\n 1. fds_nth (fds_truncate m (f' ^ k)) n = fds_nth (f' ^ k) n", "by (simp add: fds_nth_truncate)"], ["proof (state)\nthis:\n  fds_nth (fds_truncate m (f' ^ k)) n = fds_nth (f' ^ k) n\n\ngoal (1 subgoal):\n 1. \\<And>k. fds_nth (fds_truncate m f' ^ k) n = fds_nth (f' ^ k) n", "finally"], ["proof (chain)\npicking this:\n  fds_nth (fds_truncate m f' ^ k) n = fds_nth (f' ^ k) n", "show ?case"], ["proof (prove)\nusing this:\n  fds_nth (fds_truncate m f' ^ k) n = fds_nth (f' ^ k) n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_truncate m f' ^ k) n = fds_nth (f' ^ k) n", "."], ["proof (state)\nthis:\n  fds_nth (fds_truncate m f' ^ k) n = fds_nth (f' ^ k) n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>k. fds_nth (fds_truncate m f' ^ k) n) =\n  (\\<lambda>k. fds_nth (f' ^ k) n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (fds_exp (fds_truncate m f)) n =\n                         fds_nth (fds_exp f) n", "also"], ["proof (state)\nthis:\n  (\\<lambda>k. fds_nth (fds_truncate m f' ^ k) n) =\n  (\\<lambda>k. fds_nth (f' ^ k) n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (fds_exp (fds_truncate m f)) n =\n                         fds_nth (fds_exp f) n", "have \"a * (\\<Sum>k. \\<dots> k /\\<^sub>R fact k) = fds_nth (fds_exp f) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * (\\<Sum>k. fds_nth (f' ^ k) n /\\<^sub>R fact k) =\n    fds_nth (fds_exp f) n", "by (simp add: fds_exp_def fds_nth_fds' a_def f'_def)"], ["proof (state)\nthis:\n  a * (\\<Sum>k. fds_nth (f' ^ k) n /\\<^sub>R fact k) = fds_nth (fds_exp f) n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < m; 0 < n; n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> fds_nth (fds_exp (fds_truncate m f)) n =\n                         fds_nth (fds_exp f) n", "finally"], ["proof (chain)\npicking this:\n  fds_nth (fds_exp (fds_truncate m f)) n = fds_nth (fds_exp f) n", "show ?case"], ["proof (prove)\nusing this:\n  fds_nth (fds_exp (fds_truncate m f)) n = fds_nth (fds_exp f) n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp (fds_truncate m f)) n = fds_nth (fds_exp f) n", "."], ["proof (state)\nthis:\n  fds_nth (fds_exp (fds_truncate m f)) n = fds_nth (fds_exp f) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_eqI_truncate:\n  assumes \"\\<And>m. m > 0 \\<Longrightarrow> fds_truncate m f = fds_truncate m g\"\n  shows   \"f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g", "proof (rule fds_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. 0 < n \\<Longrightarrow> fds_nth f n = fds_nth g n", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. 0 < n \\<Longrightarrow> fds_nth f n = fds_nth g n", "assume \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n. 0 < n \\<Longrightarrow> fds_nth f n = fds_nth g n", "have \"fds_nth f n = fds_nth (fds_truncate n f) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f n = fds_nth (fds_truncate n f) n", "by (simp add: fds_nth_truncate)"], ["proof (state)\nthis:\n  fds_nth f n = fds_nth (fds_truncate n f) n\n\ngoal (1 subgoal):\n 1. \\<And>n. 0 < n \\<Longrightarrow> fds_nth f n = fds_nth g n", "also"], ["proof (state)\nthis:\n  fds_nth f n = fds_nth (fds_truncate n f) n\n\ngoal (1 subgoal):\n 1. \\<And>n. 0 < n \\<Longrightarrow> fds_nth f n = fds_nth g n", "note assms[OF \\<open>n > 0\\<close>]"], ["proof (state)\nthis:\n  fds_truncate n f = fds_truncate n g\n\ngoal (1 subgoal):\n 1. \\<And>n. 0 < n \\<Longrightarrow> fds_nth f n = fds_nth g n", "also"], ["proof (state)\nthis:\n  fds_truncate n f = fds_truncate n g\n\ngoal (1 subgoal):\n 1. \\<And>n. 0 < n \\<Longrightarrow> fds_nth f n = fds_nth g n", "have \"fds_nth (fds_truncate n g) n = fds_nth g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_truncate n g) n = fds_nth g n", "by (simp add: fds_nth_truncate)"], ["proof (state)\nthis:\n  fds_nth (fds_truncate n g) n = fds_nth g n\n\ngoal (1 subgoal):\n 1. \\<And>n. 0 < n \\<Longrightarrow> fds_nth f n = fds_nth g n", "finally"], ["proof (chain)\npicking this:\n  fds_nth f n = fds_nth g n", "show \"fds_nth f n = fds_nth g n\""], ["proof (prove)\nusing this:\n  fds_nth f n = fds_nth g n\n\ngoal (1 subgoal):\n 1. fds_nth f n = fds_nth g n", "."], ["proof (state)\nthis:\n  fds_nth f n = fds_nth g n\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Normed series\\<close>"], ["", "definition fds_norm :: \"'a :: {real_normed_div_algebra} fds \\<Rightarrow> real fds\"\n  where \"fds_norm f = fds (\\<lambda>n. of_real (norm (fds_nth f n)))\""], ["", "lemma fds_nth_norm [simp]: \"fds_nth (fds_norm f) n = norm (fds_nth f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_norm f) n = norm (fds_nth f n)", "by (simp add: fds_norm_def fds_nth_fds')"], ["", "lemma fds_norm_1 [simp]: \"fds_norm 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_norm 1 = 1", "by (simp add: fds_eq_iff one_fds_def)"], ["", "lemma fds_nth_norm_mult_le:\n  shows \"norm (fds_nth (f * g) n) \\<le> fds_nth (fds_norm f * fds_norm g) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (fds_nth (f * g) n) \\<le> fds_nth (fds_norm f * fds_norm g) n", "by (auto simp add: fds_nth_mult dirichlet_prod_def norm_mult intro!: sum_norm_le)"], ["", "lemma fds_nth_norm_mult_nonneg [simp]: \"fds_nth (fds_norm f * fds_norm g) n \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> fds_nth (fds_norm f * fds_norm g) n", "by (auto simp: fds_nth_mult dirichlet_prod_def intro!: sum_nonneg)"], ["", "subsection \\<open>Lifting a real series to a real algebra\\<close>"], ["", "definition fds_of_real :: \"real fds \\<Rightarrow> 'a :: {real_normed_algebra_1} fds\" where\n  \"fds_of_real f = fds (\\<lambda>n. of_real (fds_nth f n))\""], ["", "lemma fds_nth_of_real [simp]: \"fds_nth (fds_of_real f) n = of_real (fds_nth f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_of_real f) n = of_real (fds_nth f n)", "by (simp add: fds_of_real_def fds_nth_fds')"], ["", "lemma fds_of_real_0 [simp]: \"fds_of_real 0 = 0\"\n  and fds_of_real_1 [simp]: \"fds_of_real 1 = 1\"\n  and fds_of_real_const [simp]: \"fds_of_real (fds_const c) = fds_const (of_real c)\"\n  and fds_of_real_minus [simp]: \"fds_of_real (-f) = -fds_of_real f\"\n  and fds_of_real_add [simp]: \"fds_of_real (f + g) = fds_of_real f + fds_of_real g\"\n  and fds_of_real_mult [simp]: \"fds_of_real (f * g) = fds_of_real f * fds_of_real g\"\n  and fds_of_real_deriv [simp]: \"fds_of_real (fds_deriv f) = fds_deriv (fds_of_real f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fds_of_real 0 = 0 &&&\n     fds_of_real 1 = 1 &&&\n     fds_of_real (fds_const c) = fds_const (of_real c)) &&&\n    (fds_of_real (- f) = - fds_of_real f &&&\n     fds_of_real (f + g) = fds_of_real f + fds_of_real g) &&&\n    fds_of_real (f * g) = fds_of_real f * fds_of_real g &&&\n    fds_of_real (fds_deriv f) = fds_deriv (fds_of_real f)", "by (simp_all add: fds_eq_iff one_fds_def fds_const_def fds_nth_mult \n                    dirichlet_prod_def fds_deriv_def scaleR_conv_of_real)"], ["", "lemma fds_of_real_higher_deriv [simp]: \n  \"(fds_deriv ^^ n) (fds_of_real f) = fds_of_real ((fds_deriv ^^ n) f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fds_deriv ^^ n) (fds_of_real f) = fds_of_real ((fds_deriv ^^ n) f)", "by (induction n) simp_all"], ["", "subsection \\<open>Convergence and connection to concrete functions\\<close>"], ["", "text \\<open>\n  The following definitions establish a connection of a formal Dirichlet series to \n  the concrete analytic function that it corresponds to. This correspondence is usually \n  partial in the sense that a series may not converge everywhere.\n\\<close>"], ["", "definition eval_fds :: \"('a :: {nat_power, real_normed_field, banach}) fds \\<Rightarrow> 'a \\<Rightarrow> 'a\" where\n  \"eval_fds f s = (\\<Sum>n. fds_nth f n / nat_power n s)\""], ["", "lemma eval_fds_eqI:\n  assumes \"(\\<lambda>n. fds_nth f (Suc n) / nat_power (Suc n) s) sums L\"\n  shows   \"eval_fds f s = L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds f s = L", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds f s = L", "from assms"], ["proof (chain)\npicking this:\n  (\\<lambda>n. fds_nth f (Suc n) / nat_power (Suc n) s) sums L", "have \"(\\<lambda>n. fds_nth f n / nat_power n s) sums L\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. fds_nth f (Suc n) / nat_power (Suc n) s) sums L\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth f n / nat_power n s) sums L", "by (subst (asm) sums_Suc_iff) auto"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth f n / nat_power n s) sums L\n\ngoal (1 subgoal):\n 1. eval_fds f s = L", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>n. fds_nth f n / nat_power n s) sums L\n\ngoal (1 subgoal):\n 1. eval_fds f s = L", "by (simp add: eval_fds_def sums_iff)"], ["proof (state)\nthis:\n  eval_fds f s = L\n\ngoal:\nNo subgoals!", "qed"], ["", "definition fds_converges :: \n    \"('a :: {nat_power, real_normed_field, banach}) fds \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n  \"fds_converges f s \\<longleftrightarrow> summable (\\<lambda>n. fds_nth f n / nat_power n s)\""], ["", "lemma fds_converges_iff: \n  \"fds_converges f s \\<longleftrightarrow> (\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges f s =\n    (\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s", "by (simp add: fds_converges_def sums_iff eval_fds_def)"], ["", "definition fds_abs_converges :: \n    \"('a :: {nat_power, real_normed_field, banach}) fds \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n  \"fds_abs_converges f s \\<longleftrightarrow> summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))\""], ["", "lemma fds_abs_converges_imp_converges [dest, intro]: \n  \"fds_abs_converges f s \\<Longrightarrow> fds_converges f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges f s \\<Longrightarrow> fds_converges f s", "unfolding fds_abs_converges_def fds_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n. norm (fds_nth f n / nat_power n s)) \\<Longrightarrow>\n    summable (\\<lambda>n. fds_nth f n / nat_power n s)", "by (rule summable_norm_cancel)"], ["", "lemma fds_converges_altdef: \n  \"fds_converges f s \\<longleftrightarrow> (\\<lambda>n. fds_nth f (Suc n) / nat_power (Suc n) s) sums eval_fds f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges f s =\n    (\\<lambda>n. fds_nth f (Suc n) / nat_power (Suc n) s) sums eval_fds f s", "unfolding fds_converges_def summable_sums_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth f n / nat_power n s) sums\n    (\\<Sum>n. fds_nth f n / nat_power n s) =\n    (\\<lambda>n. fds_nth f (Suc n) / nat_power (Suc n) s) sums eval_fds f s", "by (subst sums_Suc_iff) (simp_all add: eval_fds_def)"], ["", "lemma fds_const_abs_converges [simp]: \"fds_abs_converges (fds_const c) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_const c) s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_const c) s", "have \"summable (\\<lambda>n. norm (fds_nth (fds_const c) n / nat_power n s)) \\<longleftrightarrow> \n          summable (\\<lambda>n. if n = 1 then norm c else (0 :: real))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth (fds_const c) n / nat_power n s)) =\n    summable (\\<lambda>n. if n = 1 then norm c else 0)", "by (intro summable_cong) simp"], ["proof (state)\nthis:\n  summable (\\<lambda>n. norm (fds_nth (fds_const c) n / nat_power n s)) =\n  summable (\\<lambda>n. if n = 1 then norm c else 0)\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_const c) s", "also"], ["proof (state)\nthis:\n  summable (\\<lambda>n. norm (fds_nth (fds_const c) n / nat_power n s)) =\n  summable (\\<lambda>n. if n = 1 then norm c else 0)\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_const c) s", "have \\<dots>"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. if n = 1 then norm c else 0)", "by simp"], ["proof (state)\nthis:\n  summable (\\<lambda>n. if n = 1 then norm c else 0)\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_const c) s", "finally"], ["proof (chain)\npicking this:\n  summable (\\<lambda>n. norm (fds_nth (fds_const c) n / nat_power n s))", "show ?thesis"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (fds_nth (fds_const c) n / nat_power n s))\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_const c) s", "by (simp add: fds_abs_converges_def)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_const c) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_const_converges [simp]: \"fds_converges (fds_const c) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (fds_const c) s", "by (rule fds_abs_converges_imp_converges) simp"], ["", "lemma eval_fds_const [simp]: \"eval_fds (fds_const c) = (\\<lambda>_. c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_const c) = (\\<lambda>_. c)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>uu_. eval_fds (fds_const c) uu_ = c", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>uu_. eval_fds (fds_const c) uu_ = c", "have \"eval_fds (fds_const c) s = (\\<Sum>n. if n = 1 then c else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_const c) s = (\\<Sum>n. if n = 1 then c else (0::'a))", "unfolding eval_fds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n. fds_nth (fds_const c) n / nat_power n s) =\n    (\\<Sum>n. if n = 1 then c else (0::'a))", "by (intro suminf_cong) simp"], ["proof (state)\nthis:\n  eval_fds (fds_const c) s = (\\<Sum>n. if n = 1 then c else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>uu_. eval_fds (fds_const c) uu_ = c", "also"], ["proof (state)\nthis:\n  eval_fds (fds_const c) s = (\\<Sum>n. if n = 1 then c else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>uu_. eval_fds (fds_const c) uu_ = c", "have \"\\<dots> = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n. if n = 1 then c else (0::'a)) = c", "using sums_single[of 1 \"\\<lambda>_. c\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>r. if r = 1 then c else (0::'a)) sums c\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. if n = 1 then c else (0::'a)) = c", "by (simp add: sums_iff)"], ["proof (state)\nthis:\n  (\\<Sum>n. if n = 1 then c else (0::'a)) = c\n\ngoal (1 subgoal):\n 1. \\<And>uu_. eval_fds (fds_const c) uu_ = c", "finally"], ["proof (chain)\npicking this:\n  eval_fds (fds_const c) s = c", "show \"eval_fds (fds_const c) s = c\""], ["proof (prove)\nusing this:\n  eval_fds (fds_const c) s = c\n\ngoal (1 subgoal):\n 1. eval_fds (fds_const c) s = c", "."], ["proof (state)\nthis:\n  eval_fds (fds_const c) s = c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_zero_abs_converges [simp]: \"fds_abs_converges 0 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges 0 s", "by (simp add: fds_abs_converges_def)"], ["", "lemma fds_zero_converges [simp]: \"fds_converges 0 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges 0 s", "by (simp add: fds_converges_def)"], ["", "lemma eval_fds_zero [simp]: \"eval_fds 0 = (\\<lambda>_. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds 0 = (\\<lambda>_. 0::'a)", "by (simp only: fds_const_zero [symmetric] eval_fds_const)"], ["", "lemma fds_one_abs_converges [simp]: \"fds_abs_converges 1 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges 1 s", "by (simp only: fds_const_one [symmetric] fds_const_abs_converges)"], ["", "lemma fds_one_converges [simp]: \"fds_converges 1 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges 1 s", "by (simp only: fds_const_one [symmetric] fds_const_converges)"], ["", "lemma fds_converges_truncate [simp]: \"fds_converges (fds_truncate n f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (fds_truncate n f) s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_converges (fds_truncate n f) s", "have \"summable (\\<lambda>k. fds_nth (fds_truncate n f) k / nat_power k s) \\<longleftrightarrow> summable (\\<lambda>_. 0 :: 'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>k. fds_nth (fds_truncate n f) k / nat_power k s) =\n    summable (\\<lambda>_. 0::'a)", "by (intro summable_cong[OF eventually_mono[OF eventually_gt_at_top[of n]]]) \n       (auto simp: fds_nth_truncate)"], ["proof (state)\nthis:\n  summable (\\<lambda>k. fds_nth (fds_truncate n f) k / nat_power k s) =\n  summable (\\<lambda>_. 0::'a)\n\ngoal (1 subgoal):\n 1. fds_converges (fds_truncate n f) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  summable (\\<lambda>k. fds_nth (fds_truncate n f) k / nat_power k s) =\n  summable (\\<lambda>_. 0::'a)\n\ngoal (1 subgoal):\n 1. fds_converges (fds_truncate n f) s", "by (simp add: fds_converges_def)"], ["proof (state)\nthis:\n  fds_converges (fds_truncate n f) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_abs_converges_truncate [simp]: \"fds_abs_converges (fds_truncate n f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_truncate n f) s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_truncate n f) s", "have \"summable (\\<lambda>k. norm (fds_nth (fds_truncate n f) k / nat_power k s)) \\<longleftrightarrow> summable (\\<lambda>_. 0 :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>k. norm (fds_nth (fds_truncate n f) k / nat_power k s)) =\n    summable (\\<lambda>_. 0)", "by (intro summable_cong[OF eventually_mono[OF eventually_gt_at_top[of n]]]) \n       (auto simp: fds_nth_truncate)"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>k. norm (fds_nth (fds_truncate n f) k / nat_power k s)) =\n  summable (\\<lambda>_. 0)\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_truncate n f) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  summable\n   (\\<lambda>k. norm (fds_nth (fds_truncate n f) k / nat_power k s)) =\n  summable (\\<lambda>_. 0)\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_truncate n f) s", "by (simp add: fds_abs_converges_def)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_truncate n f) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_abs_converges_subseries [simp, intro]:\n  assumes \"fds_abs_converges f s\"\n  shows   \"fds_abs_converges (fds_subseries P f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_subseries P f) s", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n. norm (fds_nth (fds_subseries P f) n / nat_power n s))", "proof (rule summable_comparison_test_ev)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_subseries P f) n / nat_power n s))\n       \\<le> ?g n\n 2. summable ?g", "show \"summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))", "using assms"], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))", "unfolding fds_abs_converges_def"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))", "."], ["proof (state)\nthis:\n  summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_subseries P f) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s)", "qed (auto simp: fds_nth_subseries)"], ["", "lemma eval_fds_one [simp]: \"eval_fds 1 = (\\<lambda>_. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds 1 = (\\<lambda>_. 1::'a)", "by (simp only: fds_const_one [symmetric] eval_fds_const)"], ["", "lemma eval_fds_truncate: \"eval_fds (fds_truncate n f) s = (\\<Sum>k=1..n. fds_nth f k / nat_power k s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_truncate n f) s =\n    (\\<Sum>k = 1..n. fds_nth f k / nat_power k s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (fds_truncate n f) s =\n    (\\<Sum>k = 1..n. fds_nth f k / nat_power k s)", "have \"eval_fds (fds_truncate n f) s = (\\<Sum>k=1..n. fds_nth (fds_truncate n f) k / nat_power k s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_truncate n f) s =\n    (\\<Sum>k = 1..n. fds_nth (fds_truncate n f) k / nat_power k s)", "unfolding eval_fds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>na. fds_nth (fds_truncate n f) na / nat_power na s) =\n    (\\<Sum>k = 1..n. fds_nth (fds_truncate n f) k / nat_power k s)", "by (intro suminf_finite) (auto simp: fds_nth_truncate Suc_le_eq)"], ["proof (state)\nthis:\n  eval_fds (fds_truncate n f) s =\n  (\\<Sum>k = 1..n. fds_nth (fds_truncate n f) k / nat_power k s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_truncate n f) s =\n    (\\<Sum>k = 1..n. fds_nth f k / nat_power k s)", "also"], ["proof (state)\nthis:\n  eval_fds (fds_truncate n f) s =\n  (\\<Sum>k = 1..n. fds_nth (fds_truncate n f) k / nat_power k s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_truncate n f) s =\n    (\\<Sum>k = 1..n. fds_nth f k / nat_power k s)", "have \"\\<dots> = (\\<Sum>k=1..n. fds_nth f k / nat_power k s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 1..n. fds_nth (fds_truncate n f) k / nat_power k s) =\n    (\\<Sum>k = 1..n. fds_nth f k / nat_power k s)", "by (intro sum.cong) (auto simp: fds_nth_truncate)"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..n. fds_nth (fds_truncate n f) k / nat_power k s) =\n  (\\<Sum>k = 1..n. fds_nth f k / nat_power k s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_truncate n f) s =\n    (\\<Sum>k = 1..n. fds_nth f k / nat_power k s)", "finally"], ["proof (chain)\npicking this:\n  eval_fds (fds_truncate n f) s =\n  (\\<Sum>k = 1..n. fds_nth f k / nat_power k s)", "show ?thesis"], ["proof (prove)\nusing this:\n  eval_fds (fds_truncate n f) s =\n  (\\<Sum>k = 1..n. fds_nth f k / nat_power k s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_truncate n f) s =\n    (\\<Sum>k = 1..n. fds_nth f k / nat_power k s)", "."], ["proof (state)\nthis:\n  eval_fds (fds_truncate n f) s =\n  (\\<Sum>k = 1..n. fds_nth f k / nat_power k s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_converges_add: \n  assumes \"fds_converges f s\" \"fds_converges g s\"\n  shows   \"fds_converges (f + g) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (f + g) s", "using summable_add[OF assms[unfolded fds_converges_def]]"], ["proof (prove)\nusing this:\n  summable\n   (\\<lambda>n. fds_nth f n / nat_power n s + fds_nth g n / nat_power n s)\n\ngoal (1 subgoal):\n 1. fds_converges (f + g) s", "by (simp add: fds_converges_def add_divide_distrib)"], ["", "lemma fds_abs_converges_add: \n  assumes \"fds_abs_converges f s\" \"fds_abs_converges g s\"\n  shows   \"fds_abs_converges (f + g) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (f + g) s", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth (f + g) n / nat_power n s))", "proof (rule summable_comparison_test, intro exI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (f + g) n / nat_power n s)) \\<le> ?g n\n 2. summable ?g", "let ?A = \"(\\<lambda>n. norm (fds_nth f n / nat_power n s) + norm (fds_nth g n / nat_power n s))\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (f + g) n / nat_power n s)) \\<le> ?g n\n 2. summable ?g", "from summable_add[OF assms[unfolded fds_abs_converges_def]]"], ["proof (chain)\npicking this:\n  summable\n   (\\<lambda>n.\n       norm (fds_nth f n / nat_power n s) +\n       norm (fds_nth g n / nat_power n s))", "show \"summable ?A\""], ["proof (prove)\nusing this:\n  summable\n   (\\<lambda>n.\n       norm (fds_nth f n / nat_power n s) +\n       norm (fds_nth g n / nat_power n s))\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         norm (fds_nth f n / nat_power n s) +\n         norm (fds_nth g n / nat_power n s))", "."], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n.\n       norm (fds_nth f n / nat_power n s) +\n       norm (fds_nth g n / nat_power n s))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (f + g) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s) +\n             norm (fds_nth g n / nat_power n s)", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (f + g) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s) +\n             norm (fds_nth g n / nat_power n s)", "show \"norm (norm (fds_nth (f + g) n / nat_power n s)) \\<le> ?A n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (norm (fds_nth (f + g) n / nat_power n s))\n    \\<le> norm (fds_nth f n / nat_power n s) +\n          norm (fds_nth g n / nat_power n s)", "by (simp add: norm_triangle_ineq add_divide_distrib)"], ["proof (state)\nthis:\n  norm (norm (fds_nth (f + g) n / nat_power n s))\n  \\<le> norm (fds_nth f n / nat_power n s) +\n        norm (fds_nth g n / nat_power n s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_add: \n  assumes \"fds_converges f s\" \"fds_converges g s\"\n  shows   \"eval_fds (f + g) s = eval_fds f s + eval_fds g s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (f + g) s = eval_fds f s + eval_fds g s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (f + g) s = eval_fds f s + eval_fds g s", "from assms"], ["proof (chain)\npicking this:\n  fds_converges f s\n  fds_converges g s", "have \"(\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s\"\n                  \"(\\<lambda>n. fds_nth g n / nat_power n s) sums eval_fds g s\""], ["proof (prove)\nusing this:\n  fds_converges f s\n  fds_converges g s\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s &&&\n    (\\<lambda>n. fds_nth g n / nat_power n s) sums eval_fds g s", "by (simp_all add: fds_converges_def sums_iff eval_fds_def)"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s\n  (\\<lambda>n. fds_nth g n / nat_power n s) sums eval_fds g s\n\ngoal (1 subgoal):\n 1. eval_fds (f + g) s = eval_fds f s + eval_fds g s", "from sums_add[OF this]"], ["proof (chain)\npicking this:\n  (\\<lambda>n.\n      fds_nth f n / nat_power n s + fds_nth g n / nat_power n s) sums\n  (eval_fds f s + eval_fds g s)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      fds_nth f n / nat_power n s + fds_nth g n / nat_power n s) sums\n  (eval_fds f s + eval_fds g s)\n\ngoal (1 subgoal):\n 1. eval_fds (f + g) s = eval_fds f s + eval_fds g s", "by (simp add: eval_fds_def sums_iff add_divide_distrib)"], ["proof (state)\nthis:\n  eval_fds (f + g) s = eval_fds f s + eval_fds g s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_converges_uminus: \n  assumes \"fds_converges f s\"\n  shows   \"fds_converges (-f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (- f) s", "using summable_minus[OF assms[unfolded fds_converges_def]]"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. - (fds_nth f n / nat_power n s))\n\ngoal (1 subgoal):\n 1. fds_converges (- f) s", "by (simp add: fds_converges_def add_divide_distrib)"], ["", "lemma The_cong: \"The P = The Q\" if \"\\<And>x. P x \\<longleftrightarrow> Q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. The P = The Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. The P = The Q", "from that"], ["proof (chain)\npicking this:\n  P ?x = Q ?x", "have \"P = Q\""], ["proof (prove)\nusing this:\n  P ?x = Q ?x\n\ngoal (1 subgoal):\n 1. P = Q", "by auto"], ["proof (state)\nthis:\n  P = Q\n\ngoal (1 subgoal):\n 1. The P = The Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  P = Q\n\ngoal (1 subgoal):\n 1. The P = The Q", "by simp"], ["proof (state)\nthis:\n  The P = The Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_abs_converges_uminus: \n  assumes \"fds_abs_converges f s\"\n  shows   \"fds_abs_converges (-f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (- f) s", "using assms"], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. fds_abs_converges (- f) s", "by (simp add: fds_abs_converges_def)"], ["", "lemma eval_fds_uminus: \"fds_converges f s \\<Longrightarrow> eval_fds (-f) s = -eval_fds f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges f s \\<Longrightarrow> eval_fds (- f) s = - eval_fds f s", "by (simp add: fds_converges_def eval_fds_def suminf_minus)"], ["", "lemma fds_converges_diff: \n  assumes \"fds_converges f s\" \"fds_converges g s\"\n  shows   \"fds_converges (f - g) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (f - g) s", "using summable_diff[OF assms[unfolded fds_converges_def]]"], ["proof (prove)\nusing this:\n  summable\n   (\\<lambda>n. fds_nth f n / nat_power n s - fds_nth g n / nat_power n s)\n\ngoal (1 subgoal):\n 1. fds_converges (f - g) s", "by (simp add: fds_converges_def diff_divide_distrib)"], ["", "lemma fds_abs_converges_diff: \n  assumes \"fds_abs_converges f s\" \"fds_abs_converges g s\"\n  shows   \"fds_abs_converges (f - g) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (f - g) s", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth (f - g) n / nat_power n s))", "proof (rule summable_comparison_test, intro exI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (f - g) n / nat_power n s)) \\<le> ?g n\n 2. summable ?g", "let ?A = \"(\\<lambda>n. norm (fds_nth f n / nat_power n s) + norm (fds_nth g n / nat_power n s))\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (f - g) n / nat_power n s)) \\<le> ?g n\n 2. summable ?g", "from summable_add[OF assms[unfolded fds_abs_converges_def]]"], ["proof (chain)\npicking this:\n  summable\n   (\\<lambda>n.\n       norm (fds_nth f n / nat_power n s) +\n       norm (fds_nth g n / nat_power n s))", "show \"summable ?A\""], ["proof (prove)\nusing this:\n  summable\n   (\\<lambda>n.\n       norm (fds_nth f n / nat_power n s) +\n       norm (fds_nth g n / nat_power n s))\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         norm (fds_nth f n / nat_power n s) +\n         norm (fds_nth g n / nat_power n s))", "."], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n.\n       norm (fds_nth f n / nat_power n s) +\n       norm (fds_nth g n / nat_power n s))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (f - g) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s) +\n             norm (fds_nth g n / nat_power n s)", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (f - g) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s) +\n             norm (fds_nth g n / nat_power n s)", "show \"norm (norm (fds_nth (f - g) n / nat_power n s)) \\<le> ?A n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (norm (fds_nth (f - g) n / nat_power n s))\n    \\<le> norm (fds_nth f n / nat_power n s) +\n          norm (fds_nth g n / nat_power n s)", "by (simp add: norm_triangle_ineq4 diff_divide_distrib)"], ["proof (state)\nthis:\n  norm (norm (fds_nth (f - g) n / nat_power n s))\n  \\<le> norm (fds_nth f n / nat_power n s) +\n        norm (fds_nth g n / nat_power n s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_diff: \n  assumes \"fds_converges f s\" \"fds_converges g s\"\n  shows   \"eval_fds (f - g) s = eval_fds f s - eval_fds g s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (f - g) s = eval_fds f s - eval_fds g s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (f - g) s = eval_fds f s - eval_fds g s", "from assms"], ["proof (chain)\npicking this:\n  fds_converges f s\n  fds_converges g s", "have \"(\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s\"\n                  \"(\\<lambda>n. fds_nth g n / nat_power n s) sums eval_fds g s\""], ["proof (prove)\nusing this:\n  fds_converges f s\n  fds_converges g s\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s &&&\n    (\\<lambda>n. fds_nth g n / nat_power n s) sums eval_fds g s", "by (simp_all add: fds_converges_def sums_iff eval_fds_def)"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s\n  (\\<lambda>n. fds_nth g n / nat_power n s) sums eval_fds g s\n\ngoal (1 subgoal):\n 1. eval_fds (f - g) s = eval_fds f s - eval_fds g s", "from sums_diff[OF this]"], ["proof (chain)\npicking this:\n  (\\<lambda>n.\n      fds_nth f n / nat_power n s - fds_nth g n / nat_power n s) sums\n  (eval_fds f s - eval_fds g s)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      fds_nth f n / nat_power n s - fds_nth g n / nat_power n s) sums\n  (eval_fds f s - eval_fds g s)\n\ngoal (1 subgoal):\n 1. eval_fds (f - g) s = eval_fds f s - eval_fds g s", "by (simp add: eval_fds_def sums_iff diff_divide_distrib)"], ["proof (state)\nthis:\n  eval_fds (f - g) s = eval_fds f s - eval_fds g s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_at_nat: \"eval_fds f (of_nat k) = (\\<Sum>n. fds_nth f n / of_nat n ^ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds f (of_nat k) = (\\<Sum>n. fds_nth f n / of_nat n ^ k)", "unfolding eval_fds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n. fds_nth f n / nat_power n (of_nat k)) =\n    (\\<Sum>n. fds_nth f n / of_nat n ^ k)", "proof (intro suminf_cong, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       fds_nth f n / nat_power n (of_nat k) = fds_nth f n / of_nat n ^ k", "case (1 n)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>n.\n       fds_nth f n / nat_power n (of_nat k) = fds_nth f n / of_nat n ^ k", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f n / nat_power n (of_nat k) = fds_nth f n / of_nat n ^ k", "by (cases \"n = 0\") simp_all"], ["proof (state)\nthis:\n  fds_nth f n / nat_power n (of_nat k) = fds_nth f n / of_nat n ^ k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_at_numeral: \"eval_fds f (numeral k) = (\\<Sum>n. fds_nth f n / of_nat n ^ numeral k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds f (numeral k) = (\\<Sum>n. fds_nth f n / of_nat n ^ numeral k)", "using eval_fds_at_nat[of f \"numeral k\"]"], ["proof (prove)\nusing this:\n  eval_fds f (of_nat (numeral k)) =\n  (\\<Sum>n. fds_nth f n / of_nat n ^ numeral k)\n\ngoal (1 subgoal):\n 1. eval_fds f (numeral k) = (\\<Sum>n. fds_nth f n / of_nat n ^ numeral k)", "by simp"], ["", "lemma eval_fds_at_1: \"eval_fds f 1 = (\\<Sum>n. fds_nth f n / of_nat n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds f (1::'a) = (\\<Sum>n. fds_nth f n / of_nat n)", "using eval_fds_at_nat[of f 1]"], ["proof (prove)\nusing this:\n  eval_fds f (of_nat 1) = (\\<Sum>n. fds_nth f n / of_nat n ^ 1)\n\ngoal (1 subgoal):\n 1. eval_fds f (1::'a) = (\\<Sum>n. fds_nth f n / of_nat n)", "by simp"], ["", "lemma eval_fds_at_0: \"eval_fds f 0 = (\\<Sum>n. fds_nth f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds f (0::'a) = (\\<Sum>n. fds_nth f n)", "using eval_fds_at_nat[of f 0]"], ["proof (prove)\nusing this:\n  eval_fds f (of_nat 0) = (\\<Sum>n. fds_nth f n / of_nat n ^ 0)\n\ngoal (1 subgoal):\n 1. eval_fds f (0::'a) = (\\<Sum>n. fds_nth f n)", "by simp"], ["", "lemma suminf_fds_zeta_aux: \n  \"f 0 = 0 \\<Longrightarrow> (\\<Sum>n. fds_nth fds_zeta n / f n) = (\\<Sum>n. 1 / f n :: 'a :: real_normed_field)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 = (0::'a) \\<Longrightarrow>\n    (\\<Sum>n. fds_nth fds_zeta n / f n) = (\\<Sum>n. (1::'a) / f n)", "by (intro suminf_cong) (auto simp: fds_nth_zeta)"], ["", "lemma fds_converges_shift [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  shows \"fds_converges (fds_shift c f) z \\<longleftrightarrow> fds_converges f (z - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (fds_shift c f) z = fds_converges f (z - c)", "unfolding fds_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. fds_nth (fds_shift c f) n / nat_power n z) =\n    summable (\\<lambda>n. fds_nth f n / nat_power n (z - c))", "by (intro summable_cong) \n     (auto intro: eventually_mono [OF eventually_gt_at_top[of \"0::nat\"]] simp: nat_power_diff)"], ["", "lemma fds_abs_converges_shift [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  shows \"fds_abs_converges (fds_shift c f) z \\<longleftrightarrow> fds_abs_converges f (z - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_shift c f) z = fds_abs_converges f (z - c)", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n. norm (fds_nth (fds_shift c f) n / nat_power n z)) =\n    summable (\\<lambda>n. norm (fds_nth f n / nat_power n (z - c)))", "by (intro summable_cong) \n     (auto intro: eventually_mono [OF eventually_gt_at_top[of \"0::nat\"]] simp: nat_power_diff)"], ["", "lemma fds_eval_shift [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  shows \"eval_fds (fds_shift c f) z = eval_fds f (z - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_shift c f) z = eval_fds f (z - c)", "unfolding eval_fds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n. fds_nth (fds_shift c f) n / nat_power n z) =\n    (\\<Sum>n. fds_nth f n / nat_power n (z - c))", "proof (rule suminf_cong, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       fds_nth (fds_shift c f) n / nat_power n z =\n       fds_nth f n / nat_power n (z - c)", "case (1 n)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>n.\n       fds_nth (fds_shift c f) n / nat_power n z =\n       fds_nth f n / nat_power n (z - c)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_shift c f) n / nat_power n z =\n    fds_nth f n / nat_power n (z - c)", "by (cases \"n = 0\") (simp_all add: nat_power_diff)"], ["proof (state)\nthis:\n  fds_nth (fds_shift c f) n / nat_power n z =\n  fds_nth f n / nat_power n (z - c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_converges_scale [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  assumes c: \"c > 0\"\n  shows   \"fds_converges (fds_scale c f) z \\<longleftrightarrow> fds_converges f (of_nat c * z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (fds_scale c f) z = fds_converges f (of_nat c * z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_converges (fds_scale c f) z = fds_converges f (of_nat c * z)", "have \"fds_converges (fds_scale c f) z \\<longleftrightarrow> \n          summable (\\<lambda>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)\" \n    (is \"_ = summable ?g\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (fds_scale c f) z =\n    summable\n     (\\<lambda>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)", "unfolding fds_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. fds_nth (fds_scale c f) n / nat_power n z) =\n    summable\n     (\\<lambda>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)", "by (rule summable_mono_reindex [symmetric])\n       (insert c, auto simp: fds_nth_scale is_nth_power_def strict_mono_def power_strict_mono)"], ["proof (state)\nthis:\n  fds_converges (fds_scale c f) z =\n  summable\n   (\\<lambda>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)\n\ngoal (1 subgoal):\n 1. fds_converges (fds_scale c f) z = fds_converges f (of_nat c * z)", "also"], ["proof (state)\nthis:\n  fds_converges (fds_scale c f) z =\n  summable\n   (\\<lambda>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)\n\ngoal (1 subgoal):\n 1. fds_converges (fds_scale c f) z = fds_converges f (of_nat c * z)", "have \"?g = (\\<lambda>n. fds_nth f n / nat_power n (of_nat c * z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z) =\n    (\\<lambda>n. fds_nth f n / nat_power n (of_nat c * z))", "proof (intro ext, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z =\n       fds_nth f n / nat_power n (of_nat c * z)", "case (1 n)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>n.\n       fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z =\n       fds_nth f n / nat_power n (of_nat c * z)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z =\n    fds_nth f n / nat_power n (of_nat c * z)", "using c"], ["proof (prove)\nusing this:\n  0 < c\n\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z =\n    fds_nth f n / nat_power n (of_nat c * z)", "by (cases \"n = 0\") (simp_all add: nat_power_power_left nat_power_power [symmetric] mult_ac)"], ["proof (state)\nthis:\n  fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z =\n  fds_nth f n / nat_power n (of_nat c * z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z) =\n  (\\<lambda>n. fds_nth f n / nat_power n (of_nat c * z))\n\ngoal (1 subgoal):\n 1. fds_converges (fds_scale c f) z = fds_converges f (of_nat c * z)", "finally"], ["proof (chain)\npicking this:\n  fds_converges (fds_scale c f) z =\n  summable (\\<lambda>n. fds_nth f n / nat_power n (of_nat c * z))", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_converges (fds_scale c f) z =\n  summable (\\<lambda>n. fds_nth f n / nat_power n (of_nat c * z))\n\ngoal (1 subgoal):\n 1. fds_converges (fds_scale c f) z = fds_converges f (of_nat c * z)", "by (simp add: fds_converges_def)"], ["proof (state)\nthis:\n  fds_converges (fds_scale c f) z = fds_converges f (of_nat c * z)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_abs_converges_scale [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  assumes c: \"c > 0\"\n  shows   \"fds_abs_converges (fds_scale c f) z \\<longleftrightarrow> fds_abs_converges f (of_nat c * z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_scale c f) z = fds_abs_converges f (of_nat c * z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_scale c f) z = fds_abs_converges f (of_nat c * z)", "have \"fds_abs_converges (fds_scale c f) z \\<longleftrightarrow> \n          summable (\\<lambda>n. norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z))\" \n    (is \"_ = summable ?g\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_scale c f) z =\n    summable\n     (\\<lambda>n.\n         norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z))", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n. norm (fds_nth (fds_scale c f) n / nat_power n z)) =\n    summable\n     (\\<lambda>n.\n         norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z))", "by (rule summable_mono_reindex [symmetric])\n       (insert c, auto simp: fds_nth_scale is_nth_power_def strict_mono_def power_strict_mono)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_scale c f) z =\n  summable\n   (\\<lambda>n.\n       norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z))\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_scale c f) z = fds_abs_converges f (of_nat c * z)", "also"], ["proof (state)\nthis:\n  fds_abs_converges (fds_scale c f) z =\n  summable\n   (\\<lambda>n.\n       norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z))\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_scale c f) z = fds_abs_converges f (of_nat c * z)", "have \"?g = (\\<lambda>n. norm (fds_nth f n / nat_power n (of_nat c * z)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)) =\n    (\\<lambda>n. norm (fds_nth f n / nat_power n (of_nat c * z)))", "proof (intro ext, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z) =\n       norm (fds_nth f n / nat_power n (of_nat c * z))", "case (1 n)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>n.\n       norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z) =\n       norm (fds_nth f n / nat_power n (of_nat c * z))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z) =\n    norm (fds_nth f n / nat_power n (of_nat c * z))", "using c"], ["proof (prove)\nusing this:\n  0 < c\n\ngoal (1 subgoal):\n 1. norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z) =\n    norm (fds_nth f n / nat_power n (of_nat c * z))", "by (cases \"n = 0\") (simp_all add: nat_power_power_left nat_power_power [symmetric] mult_ac)"], ["proof (state)\nthis:\n  norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z) =\n  norm (fds_nth f n / nat_power n (of_nat c * z))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      norm (fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)) =\n  (\\<lambda>n. norm (fds_nth f n / nat_power n (of_nat c * z)))\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_scale c f) z = fds_abs_converges f (of_nat c * z)", "finally"], ["proof (chain)\npicking this:\n  fds_abs_converges (fds_scale c f) z =\n  summable (\\<lambda>n. norm (fds_nth f n / nat_power n (of_nat c * z)))", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_scale c f) z =\n  summable (\\<lambda>n. norm (fds_nth f n / nat_power n (of_nat c * z)))\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_scale c f) z = fds_abs_converges f (of_nat c * z)", "by (simp add: fds_abs_converges_def)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_scale c f) z = fds_abs_converges f (of_nat c * z)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_scale [simp]:\n  fixes z :: \"'a :: {banach, nat_power_field, real_normed_field}\"\n  assumes c: \"c > 0\"\n  shows   \"eval_fds (fds_scale c f) z = eval_fds f (of_nat c * z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_scale c f) z = eval_fds f (of_nat c * z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (fds_scale c f) z = eval_fds f (of_nat c * z)", "have \"eval_fds (fds_scale c f) z = \n          (\\<Sum>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_scale c f) z =\n    (\\<Sum>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)", "unfolding eval_fds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n. fds_nth (fds_scale c f) n / nat_power n z) =\n    (\\<Sum>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)", "by (rule suminf_mono_reindex [symmetric])\n       (insert c, auto simp: fds_nth_scale is_nth_power_def strict_mono_def power_strict_mono)"], ["proof (state)\nthis:\n  eval_fds (fds_scale c f) z =\n  (\\<Sum>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_scale c f) z = eval_fds f (of_nat c * z)", "also"], ["proof (state)\nthis:\n  eval_fds (fds_scale c f) z =\n  (\\<Sum>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_scale c f) z = eval_fds f (of_nat c * z)", "have \"\\<dots> = (\\<Sum>n. fds_nth f n / nat_power n (of_nat c * z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z) =\n    (\\<Sum>n. fds_nth f n / nat_power n (of_nat c * z))", "proof (intro suminf_cong, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z =\n       fds_nth f n / nat_power n (of_nat c * z)", "case (1 n)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>n.\n       fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z =\n       fds_nth f n / nat_power n (of_nat c * z)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z =\n    fds_nth f n / nat_power n (of_nat c * z)", "using c"], ["proof (prove)\nusing this:\n  0 < c\n\ngoal (1 subgoal):\n 1. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z =\n    fds_nth f n / nat_power n (of_nat c * z)", "by (cases \"n = 0\") (simp_all add: nat_power_power_left nat_power_power [symmetric] mult_ac)"], ["proof (state)\nthis:\n  fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z =\n  fds_nth f n / nat_power n (of_nat c * z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>n. fds_nth (fds_scale c f) (n ^ c) / nat_power (n ^ c) z) =\n  (\\<Sum>n. fds_nth f n / nat_power n (of_nat c * z))\n\ngoal (1 subgoal):\n 1. eval_fds (fds_scale c f) z = eval_fds f (of_nat c * z)", "finally"], ["proof (chain)\npicking this:\n  eval_fds (fds_scale c f) z =\n  (\\<Sum>n. fds_nth f n / nat_power n (of_nat c * z))", "show ?thesis"], ["proof (prove)\nusing this:\n  eval_fds (fds_scale c f) z =\n  (\\<Sum>n. fds_nth f n / nat_power n (of_nat c * z))\n\ngoal (1 subgoal):\n 1. eval_fds (fds_scale c f) z = eval_fds f (of_nat c * z)", "by (simp add: eval_fds_def)"], ["proof (state)\nthis:\n  eval_fds (fds_scale c f) z = eval_fds f (of_nat c * z)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_abs_converges_integral:\n  assumes \"fds_abs_converges f s\"\n  shows   \"fds_abs_converges (fds_integral c f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_integral c f) s", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n. norm (fds_nth (fds_integral c f) n / nat_power n s))", "proof (rule summable_comparison_test_ev)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_integral c f) n / nat_power n s)) \\<le> ?g n\n 2. summable ?g", "show \"summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))", "using assms"], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))", "by (simp add: fds_abs_converges_def)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_integral c f) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s)", "show \"eventually (\\<lambda>n. norm (norm (fds_nth (fds_integral c f) n / nat_power n s))\n                           \\<le> norm (fds_nth f n / nat_power n s)) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_integral c f) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s)", "using eventually_gt_at_top[of 3]"], ["proof (prove)\nusing this:\n  eventually ((<) (3::?'b1)) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_integral c f) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       3 < n \\<Longrightarrow>\n       norm (norm (fds_nth (fds_integral c f) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s)", "case (elim n)"], ["proof (state)\nthis:\n  3 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       3 < n \\<Longrightarrow>\n       norm (norm (fds_nth (fds_integral c f) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s)", "hence \"ln n \\<ge> ln (exp 1)\""], ["proof (prove)\nusing this:\n  3 < n\n\ngoal (1 subgoal):\n 1. ln (exp 1) \\<le> ln (real n)", "using exp_le"], ["proof (prove)\nusing this:\n  3 < n\n  exp 1 \\<le> 3\n\ngoal (1 subgoal):\n 1. ln (exp 1) \\<le> ln (real n)", "by (subst ln_le_cancel_iff) auto"], ["proof (state)\nthis:\n  ln (exp 1) \\<le> ln (real n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       3 < n \\<Longrightarrow>\n       norm (norm (fds_nth (fds_integral c f) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s)", "hence \"norm (fds_nth f n) * 1 \\<le> norm (fds_nth f n) * ln (real n)\""], ["proof (prove)\nusing this:\n  ln (exp 1) \\<le> ln (real n)\n\ngoal (1 subgoal):\n 1. norm (fds_nth f n) * 1 \\<le> norm (fds_nth f n) * ln (real n)", "by (intro mult_left_mono) auto"], ["proof (state)\nthis:\n  norm (fds_nth f n) * 1 \\<le> norm (fds_nth f n) * ln (real n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       3 < n \\<Longrightarrow>\n       norm (norm (fds_nth (fds_integral c f) n / nat_power n s))\n       \\<le> norm (fds_nth f n / nat_power n s)", "with elim"], ["proof (chain)\npicking this:\n  3 < n\n  norm (fds_nth f n) * 1 \\<le> norm (fds_nth f n) * ln (real n)", "show ?case"], ["proof (prove)\nusing this:\n  3 < n\n  norm (fds_nth f n) * 1 \\<le> norm (fds_nth f n) * ln (real n)\n\ngoal (1 subgoal):\n 1. norm (norm (fds_nth (fds_integral c f) n / nat_power n s))\n    \\<le> norm (fds_nth f n / nat_power n s)", "by (simp_all add: fds_integral_def norm_divide divide_simps)"], ["proof (state)\nthis:\n  norm (norm (fds_nth (fds_integral c f) n / nat_power n s))\n  \\<le> norm (fds_nth f n / nat_power n s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     norm (norm (fds_nth (fds_integral c f) n / nat_power n s))\n     \\<le> norm (fds_nth f n / nat_power n s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_abs_converges_ln: \n  assumes \"fds_abs_converges (fds_deriv f / f) s\"\n  shows   \"fds_abs_converges (fds_ln l f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_ln l f) s", "using assms"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_deriv f / f) s\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_ln l f) s", "unfolding fds_ln_def"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_deriv f / f) s\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_integral l (fds_deriv f / f)) s", "by (intro fds_abs_converges_integral)"], ["", "end"]]}