{"file_name": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series/Euler_Products.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series", "problem_names": ["lemma prime_factors_power_subset:\n  \"prime_factors (x ^ n) \\<subseteq> prime_factors x\"", "lemma prime_power_product_in_Pi:\n  \"(\\<lambda>g. \\<Prod>p\\<in>{p. p \\<le> (n::nat) \\<and> prime p}. p ^ g p)\n    \\<in> ({p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV) \\<rightarrow>\n       {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}}\"", "lemma inj_prime_power: \"inj_on (\\<lambda>x. fst x ^ snd x :: nat) ({a. prime a} \\<times> {0<..})\"", "lemma bij_betw_prime_powers:\n  \"bij_betw (\\<lambda>g. \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ g p) ({p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV)\n     {m. 0 < m \\<and> prime_factors m \\<subseteq> {..(n::nat)}}\"", "lemma\n  fixes f :: \"nat \\<Rightarrow> 'a :: {real_normed_field,banach,second_countable_topology}\"\n  assumes summable: \"summable (\\<lambda>n. norm (f n))\"\n  assumes \"multiplicative_function f\"\n  shows   abs_convergent_euler_product:\n            \"abs_convergent_prod (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else 1)\"\n    and   euler_product_LIMSEQ:\n            \"(\\<lambda>n. (\\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else 1)) \\<longlonglongrightarrow> (\\<Sum>n. f n)\"", "lemma\n  fixes f :: \"nat \\<Rightarrow> 'a :: {real_normed_field,banach,second_countable_topology}\"\n  assumes summable: \"summable (\\<lambda>n. norm (f n))\"\n  assumes \"completely_multiplicative_function f\"\n  shows   abs_convergent_euler_product':\n            \"abs_convergent_prod (\\<lambda>p. if prime p then inverse (1 - f p) else 1)\"\n    and   completely_multiplicative_summable_norm: \n            \"\\<And>p. prime p \\<Longrightarrow> norm (f p) < 1\"\n    and   euler_product_LIMSEQ':\n            \"(\\<lambda>n. (\\<Prod>p\\<le>n. if prime p then inverse (1 - f p) else 1)) \\<longlonglongrightarrow> (\\<Sum>n. f n)\""], "translations": [["", "lemma prime_factors_power_subset:\n  \"prime_factors (x ^ n) \\<subseteq> prime_factors x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors (x ^ n) \\<subseteq> prime_factors x", "by (cases \"n = 0\") (auto simp: prime_factors_power)"], ["", "lemma prime_power_product_in_Pi:\n  \"(\\<lambda>g. \\<Prod>p\\<in>{p. p \\<le> (n::nat) \\<and> prime p}. p ^ g p)\n    \\<in> ({p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV) \\<rightarrow>\n       {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>g. \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ g p)\n    \\<in> ({p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n           UNIV) \\<rightarrow>\n          {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}}", "proof (safe, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       0 < (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n 2. \\<And>x xa.\n       \\<lbrakk>x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                        UNIV;\n        xa \\<in># prime_factorization\n                   (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                      p ^ x p)\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "case (2 f p)"], ["proof (state)\nthis:\n  f \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV\n  p \\<in># prime_factorization\n            (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       0 < (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n 2. \\<And>x xa.\n       \\<lbrakk>x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                        UNIV;\n        xa \\<in># prime_factorization\n                   (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                      p ^ x p)\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "have \"prime_factors (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p) = \n          (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. prime_factors (p ^ f p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p) =\n    (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. prime_factors (p ^ f p))", "by (subst prime_factors_prod) auto"], ["proof (state)\nthis:\n  prime_factors (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p) =\n  (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. prime_factors (p ^ f p))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       0 < (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n 2. \\<And>x xa.\n       \\<lbrakk>x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                        UNIV;\n        xa \\<in># prime_factorization\n                   (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                      p ^ x p)\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "also"], ["proof (state)\nthis:\n  prime_factors (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p) =\n  (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. prime_factors (p ^ f p))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       0 < (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n 2. \\<And>x xa.\n       \\<lbrakk>x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                        UNIV;\n        xa \\<in># prime_factorization\n                   (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                      p ^ x p)\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "have \"\\<dots> \\<subseteq> (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. prime_factors p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. prime_factors (p ^ f p))\n    \\<subseteq> \\<Union> (prime_factors ` {p. p \\<le> n \\<and> prime p})", "using prime_factors_power_subset"], ["proof (prove)\nusing this:\n  prime_factors (?x ^ ?n) \\<subseteq> prime_factors ?x\n\ngoal (1 subgoal):\n 1. (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. prime_factors (p ^ f p))\n    \\<subseteq> \\<Union> (prime_factors ` {p. p \\<le> n \\<and> prime p})", "by blast"], ["proof (state)\nthis:\n  (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. prime_factors (p ^ f p))\n  \\<subseteq> \\<Union> (prime_factors ` {p. p \\<le> n \\<and> prime p})\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       0 < (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n 2. \\<And>x xa.\n       \\<lbrakk>x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                        UNIV;\n        xa \\<in># prime_factorization\n                   (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                      p ^ x p)\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "also"], ["proof (state)\nthis:\n  (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. prime_factors (p ^ f p))\n  \\<subseteq> \\<Union> (prime_factors ` {p. p \\<le> n \\<and> prime p})\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       0 < (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n 2. \\<And>x xa.\n       \\<lbrakk>x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                        UNIV;\n        xa \\<in># prime_factorization\n                   (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                      p ^ x p)\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "have \"\\<dots> \\<subseteq> (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. {p})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (prime_factors ` {p. p \\<le> n \\<and> prime p})\n    \\<subseteq> (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. {p})", "by (auto simp: prime_factors_dvd prime_gt_0_nat dest!: dvd_imp_le)"], ["proof (state)\nthis:\n  \\<Union> (prime_factors ` {p. p \\<le> n \\<and> prime p})\n  \\<subseteq> (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. {p})\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       0 < (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n 2. \\<And>x xa.\n       \\<lbrakk>x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                        UNIV;\n        xa \\<in># prime_factorization\n                   (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                      p ^ x p)\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "also"], ["proof (state)\nthis:\n  \\<Union> (prime_factors ` {p. p \\<le> n \\<and> prime p})\n  \\<subseteq> (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. {p})\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       0 < (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n 2. \\<And>x xa.\n       \\<lbrakk>x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                        UNIV;\n        xa \\<in># prime_factorization\n                   (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                      p ^ x p)\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "have \"\\<dots> \\<subseteq> {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. {p}) \\<subseteq> {..n}", "by auto"], ["proof (state)\nthis:\n  (\\<Union>p\\<in>{p. p \\<le> n \\<and> prime p}. {p}) \\<subseteq> {..n}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       0 < (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n 2. \\<And>x xa.\n       \\<lbrakk>x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                        UNIV;\n        xa \\<in># prime_factorization\n                   (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                      p ^ x p)\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "finally"], ["proof (chain)\npicking this:\n  prime_factors (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n  \\<subseteq> {..n}", "show ?case"], ["proof (prove)\nusing this:\n  prime_factors (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n  \\<subseteq> {..n}\n\ngoal (1 subgoal):\n 1. p \\<le> n", "using 2"], ["proof (prove)\nusing this:\n  prime_factors (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n  \\<subseteq> {..n}\n  f \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV\n  p \\<in># prime_factorization\n            (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n\ngoal (1 subgoal):\n 1. p \\<le> n", "by auto"], ["proof (state)\nthis:\n  p \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       0 < (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)", "qed (auto simp: prime_gt_0_nat)"], ["", "lemma inj_prime_power: \"inj_on (\\<lambda>x. fst x ^ snd x :: nat) ({a. prime a} \\<times> {0<..})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. fst x ^ snd x) ({a. prime a} \\<times> {0<..})", "proof (intro inj_onI, clarify, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>fst (a, b) ^ snd (a, b) = fst (aa, ba) ^ snd (aa, ba);\n        0 < b; prime a; 0 < ba; prime aa\\<rbrakk>\n       \\<Longrightarrow> a = aa \\<and> b = ba", "case (1 p m q n)"], ["proof (state)\nthis:\n  fst (p, m) ^ snd (p, m) = fst (q, n) ^ snd (q, n)\n  0 < m\n  prime p\n  0 < n\n  prime q\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>fst (a, b) ^ snd (a, b) = fst (aa, ba) ^ snd (aa, ba);\n        0 < b; prime a; 0 < ba; prime aa\\<rbrakk>\n       \\<Longrightarrow> a = aa \\<and> b = ba", "with prime_power_eq_imp_eq[of p q m n] and 1"], ["proof (chain)\npicking this:\n  \\<lbrakk>prime p; prime q; 0 < m; p ^ m = q ^ n\\<rbrakk>\n  \\<Longrightarrow> p = q\n  fst (p, m) ^ snd (p, m) = fst (q, n) ^ snd (q, n)\n  0 < m\n  prime p\n  0 < n\n  prime q\n  fst (p, m) ^ snd (p, m) = fst (q, n) ^ snd (q, n)\n  0 < m\n  prime p\n  0 < n\n  prime q", "have \"p = q\""], ["proof (prove)\nusing this:\n  \\<lbrakk>prime p; prime q; 0 < m; p ^ m = q ^ n\\<rbrakk>\n  \\<Longrightarrow> p = q\n  fst (p, m) ^ snd (p, m) = fst (q, n) ^ snd (q, n)\n  0 < m\n  prime p\n  0 < n\n  prime q\n  fst (p, m) ^ snd (p, m) = fst (q, n) ^ snd (q, n)\n  0 < m\n  prime p\n  0 < n\n  prime q\n\ngoal (1 subgoal):\n 1. p = q", "by auto"], ["proof (state)\nthis:\n  p = q\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>fst (a, b) ^ snd (a, b) = fst (aa, ba) ^ snd (aa, ba);\n        0 < b; prime a; 0 < ba; prime aa\\<rbrakk>\n       \\<Longrightarrow> a = aa \\<and> b = ba", "moreover"], ["proof (state)\nthis:\n  p = q\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>fst (a, b) ^ snd (a, b) = fst (aa, ba) ^ snd (aa, ba);\n        0 < b; prime a; 0 < ba; prime aa\\<rbrakk>\n       \\<Longrightarrow> a = aa \\<and> b = ba", "from this"], ["proof (chain)\npicking this:\n  p = q", "have \"m = n\""], ["proof (prove)\nusing this:\n  p = q\n\ngoal (1 subgoal):\n 1. m = n", "using prime_gt_1_nat 1"], ["proof (prove)\nusing this:\n  p = q\n  prime ?p \\<Longrightarrow> 1 < ?p\n  fst (p, m) ^ snd (p, m) = fst (q, n) ^ snd (q, n)\n  0 < m\n  prime p\n  0 < n\n  prime q\n\ngoal (1 subgoal):\n 1. m = n", "by auto"], ["proof (state)\nthis:\n  m = n\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>fst (a, b) ^ snd (a, b) = fst (aa, ba) ^ snd (aa, ba);\n        0 < b; prime a; 0 < ba; prime aa\\<rbrakk>\n       \\<Longrightarrow> a = aa \\<and> b = ba", "ultimately"], ["proof (chain)\npicking this:\n  p = q\n  m = n", "show ?case"], ["proof (prove)\nusing this:\n  p = q\n  m = n\n\ngoal (1 subgoal):\n 1. p = q \\<and> m = n", "by simp"], ["proof (state)\nthis:\n  p = q \\<and> m = n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_betw_prime_powers:\n  \"bij_betw (\\<lambda>g. \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ g p) ({p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV)\n     {m. 0 < m \\<and> prime_factors m \\<subseteq> {..(n::nat)}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw\n     (\\<lambda>g. \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ g p)\n     ({p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV)\n     {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}}", "proof (rule bij_betwI[of _ _ _ \"(\\<lambda>m p. if p \\<le> n \\<and> prime p then multiplicity p m else undefined)\"], \n         goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<lambda>g. \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ g p)\n    \\<in> ({p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n           UNIV) \\<rightarrow>\n          {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}}\n 2. (\\<lambda>m p.\n        if p \\<le> n \\<and> prime p then multiplicity p m else undefined)\n    \\<in> {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}} \\<rightarrow>\n          {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV\n 3. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       (\\<lambda>p.\n           if p \\<le> n \\<and> prime p\n           then multiplicity p\n                 (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n           else undefined) =\n       x\n 4. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. (\\<lambda>g. \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ g p)\n    \\<in> ({p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n           UNIV) \\<rightarrow>\n          {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}}\n 2. (\\<lambda>m p.\n        if p \\<le> n \\<and> prime p then multiplicity p m else undefined)\n    \\<in> {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}} \\<rightarrow>\n          {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV\n 3. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       (\\<lambda>p.\n           if p \\<le> n \\<and> prime p\n           then multiplicity p\n                 (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n           else undefined) =\n       x\n 4. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>g. \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ g p)\n    \\<in> ({p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n           UNIV) \\<rightarrow>\n          {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}}", "by (rule prime_power_product_in_Pi)"], ["proof (state)\nthis:\n  (\\<lambda>g. \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ g p)\n  \\<in> ({p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n         UNIV) \\<rightarrow>\n        {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}}\n\ngoal (3 subgoals):\n 1. (\\<lambda>m p.\n        if p \\<le> n \\<and> prime p then multiplicity p m else undefined)\n    \\<in> {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}} \\<rightarrow>\n          {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV\n 2. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       (\\<lambda>p.\n           if p \\<le> n \\<and> prime p\n           then multiplicity p\n                 (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n           else undefined) =\n       x\n 3. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>m p.\n        if p \\<le> n \\<and> prime p then multiplicity p m else undefined)\n    \\<in> {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}} \\<rightarrow>\n          {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV\n 2. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       (\\<lambda>p.\n           if p \\<le> n \\<and> prime p\n           then multiplicity p\n                 (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n           else undefined) =\n       x\n 3. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. (\\<lambda>m p.\n        if p \\<le> n \\<and> prime p then multiplicity p m else undefined)\n    \\<in> {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}} \\<rightarrow>\n          {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV\n 2. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       (\\<lambda>p.\n           if p \\<le> n \\<and> prime p\n           then multiplicity p\n                 (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n           else undefined) =\n       x\n 3. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>m p.\n        if p \\<le> n \\<and> prime p then multiplicity p m else undefined)\n    \\<in> {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}} \\<rightarrow>\n          {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  (\\<lambda>m p.\n      if p \\<le> n \\<and> prime p then multiplicity p m else undefined)\n  \\<in> {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}} \\<rightarrow>\n        {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       (\\<lambda>p.\n           if p \\<le> n \\<and> prime p\n           then multiplicity p\n                 (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n           else undefined) =\n       x\n 2. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       (\\<lambda>p.\n           if p \\<le> n \\<and> prime p\n           then multiplicity p\n                 (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n           else undefined) =\n       x\n 2. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "case (3 f)"], ["proof (state)\nthis:\n  f \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n               UNIV \\<Longrightarrow>\n       (\\<lambda>p.\n           if p \\<le> n \\<and> prime p\n           then multiplicity p\n                 (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ x p)\n           else undefined) =\n       x\n 2. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p.\n        if p \\<le> n \\<and> prime p\n        then multiplicity p\n              (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n        else undefined) =\n    f", "proof (rule ext, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (if p \\<le> n \\<and> prime p\n        then multiplicity p\n              (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n        else undefined) =\n       f p", "case (1 q)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>p.\n       (if p \\<le> n \\<and> prime p\n        then multiplicity p\n              (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n        else undefined) =\n       f p", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q", "proof (cases \"q \\<le> n \\<and> prime q\")"], ["proof (state)\ngoal (2 subgoals):\n 1. q \\<le> n \\<and> prime q \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q\n 2. \\<not> (q \\<le> n \\<and> prime q) \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q", "case True"], ["proof (state)\nthis:\n  q \\<le> n \\<and> prime q\n\ngoal (2 subgoals):\n 1. q \\<le> n \\<and> prime q \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q\n 2. \\<not> (q \\<le> n \\<and> prime q) \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q", "hence \"multiplicity q (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p) = \n               (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. multiplicity q (x ^ f x))\""], ["proof (prove)\nusing this:\n  q \\<le> n \\<and> prime q\n\ngoal (1 subgoal):\n 1. multiplicity q (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p) =\n    (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. multiplicity q (x ^ f x))", "by (subst prime_elem_multiplicity_prod_distrib) auto"], ["proof (state)\nthis:\n  multiplicity q (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p) =\n  (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. multiplicity q (x ^ f x))\n\ngoal (2 subgoals):\n 1. q \\<le> n \\<and> prime q \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q\n 2. \\<not> (q \\<le> n \\<and> prime q) \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q", "also"], ["proof (state)\nthis:\n  multiplicity q (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p) =\n  (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. multiplicity q (x ^ f x))\n\ngoal (2 subgoals):\n 1. q \\<le> n \\<and> prime q \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q\n 2. \\<not> (q \\<le> n \\<and> prime q) \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q", "have \"\\<dots> = (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. if x = q then f q else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. multiplicity q (x ^ f x)) =\n    (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. if x = q then f q else 0)", "using True"], ["proof (prove)\nusing this:\n  q \\<le> n \\<and> prime q\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. multiplicity q (x ^ f x)) =\n    (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. if x = q then f q else 0)", "by (intro sum.cong refl) (auto simp: multiplicity_distinct_prime_power)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. multiplicity q (x ^ f x)) =\n  (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. if x = q then f q else 0)\n\ngoal (2 subgoals):\n 1. q \\<le> n \\<and> prime q \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q\n 2. \\<not> (q \\<le> n \\<and> prime q) \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. multiplicity q (x ^ f x)) =\n  (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. if x = q then f q else 0)\n\ngoal (2 subgoals):\n 1. q \\<le> n \\<and> prime q \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q\n 2. \\<not> (q \\<le> n \\<and> prime q) \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q", "have \"\\<dots> = f q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. if x = q then f q else 0) =\n    f q", "using True"], ["proof (prove)\nusing this:\n  q \\<le> n \\<and> prime q\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. if x = q then f q else 0) =\n    f q", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{p. p \\<le> n \\<and> prime p}. if x = q then f q else 0) =\n  f q\n\ngoal (2 subgoals):\n 1. q \\<le> n \\<and> prime q \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q\n 2. \\<not> (q \\<le> n \\<and> prime q) \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q", "finally"], ["proof (chain)\npicking this:\n  multiplicity q (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p) = f q", "show ?thesis"], ["proof (prove)\nusing this:\n  multiplicity q (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p) = f q\n\ngoal (1 subgoal):\n 1. (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q", "using True"], ["proof (prove)\nusing this:\n  multiplicity q (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p) = f q\n  q \\<le> n \\<and> prime q\n\ngoal (1 subgoal):\n 1. (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q", "by simp"], ["proof (state)\nthis:\n  (if q \\<le> n \\<and> prime q\n   then multiplicity q (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n   else undefined) =\n  f q\n\ngoal (1 subgoal):\n 1. \\<not> (q \\<le> n \\<and> prime q) \\<Longrightarrow>\n    (if q \\<le> n \\<and> prime q\n     then multiplicity q\n           (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n     else undefined) =\n    f q", "qed (insert 3, force+)"], ["proof (state)\nthis:\n  (if q \\<le> n \\<and> prime q\n   then multiplicity q (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n   else undefined) =\n  f q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>p.\n      if p \\<le> n \\<and> prime p\n      then multiplicity p\n            (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. p ^ f p)\n      else undefined) =\n  f\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "case (4 m)"], ["proof (state)\nthis:\n  m \\<in> {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}}\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "have \"(\\<Prod>p | p \\<le> n \\<and> prime p. p ^ (if p \\<le> n \\<and> prime p then multiplicity p m else undefined)) =\n          (\\<Prod>p\\<in>prime_factors m. p ^ multiplicity p m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n       p ^\n       (if p \\<le> n \\<and> prime p then multiplicity p m else undefined)) =\n    (\\<Prod>p\\<in>prime_factors m. p ^ multiplicity p m)", "proof (rule prod.mono_neutral_cong)"], ["proof (state)\ngoal (5 subgoals):\n 1. finite (prime_factors m)\n 2. finite {p. p \\<le> n \\<and> prime p}\n 3. \\<And>i.\n       i \\<in> prime_factors m -\n               {p. p \\<le> n \\<and> prime p} \\<Longrightarrow>\n       i ^ multiplicity i m = 1\n 4. \\<And>i.\n       i \\<in> {p. p \\<le> n \\<and> prime p} -\n               prime_factors m \\<Longrightarrow>\n       i ^\n       (if i \\<le> n \\<and> prime i then multiplicity i m else undefined) =\n       1\n 5. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<inter>\n               prime_factors m \\<Longrightarrow>\n       x ^\n       (if x \\<le> n \\<and> prime x then multiplicity x m else undefined) =\n       x ^ multiplicity x m", "show \"finite (prime_factors m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (prime_factors m)", "by simp"], ["proof (state)\nthis:\n  finite (prime_factors m)\n\ngoal (4 subgoals):\n 1. finite {p. p \\<le> n \\<and> prime p}\n 2. \\<And>i.\n       i \\<in> prime_factors m -\n               {p. p \\<le> n \\<and> prime p} \\<Longrightarrow>\n       i ^ multiplicity i m = 1\n 3. \\<And>i.\n       i \\<in> {p. p \\<le> n \\<and> prime p} -\n               prime_factors m \\<Longrightarrow>\n       i ^\n       (if i \\<le> n \\<and> prime i then multiplicity i m else undefined) =\n       1\n 4. \\<And>x.\n       x \\<in> {p. p \\<le> n \\<and> prime p} \\<inter>\n               prime_factors m \\<Longrightarrow>\n       x ^\n       (if x \\<le> n \\<and> prime x then multiplicity x m else undefined) =\n       x ^ multiplicity x m", "qed (insert 4, auto simp: prime_factors_multiplicity)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n     p ^\n     (if p \\<le> n \\<and> prime p then multiplicity p m else undefined)) =\n  (\\<Prod>p\\<in>prime_factors m. p ^ multiplicity p m)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n     p ^\n     (if p \\<le> n \\<and> prime p then multiplicity p m else undefined)) =\n  (\\<Prod>p\\<in>prime_factors m. p ^ multiplicity p m)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "from 4"], ["proof (chain)\npicking this:\n  m \\<in> {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}}", "have \"\\<dots> = m\""], ["proof (prove)\nusing this:\n  m \\<in> {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}}\n\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors m. p ^ multiplicity p m) = m", "by (intro prime_factorization_nat [symmetric]) auto"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors m. p ^ multiplicity p m) = m\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> {m. 0 < m \\<and>\n                   prime_factors m \\<subseteq> {..n}} \\<Longrightarrow>\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n          p ^\n          (if p \\<le> n \\<and> prime p then multiplicity p y\n           else undefined)) =\n       y", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n     p ^\n     (if p \\<le> n \\<and> prime p then multiplicity p m else undefined)) =\n  m", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n     p ^\n     (if p \\<le> n \\<and> prime p then multiplicity p m else undefined)) =\n  m\n\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n       p ^\n       (if p \\<le> n \\<and> prime p then multiplicity p m else undefined)) =\n    m", "."], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n     p ^\n     (if p \\<le> n \\<and> prime p then multiplicity p m else undefined)) =\n  m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  fixes f :: \"nat \\<Rightarrow> 'a :: {real_normed_field,banach,second_countable_topology}\"\n  assumes summable: \"summable (\\<lambda>n. norm (f n))\"\n  assumes \"multiplicative_function f\"\n  shows   abs_convergent_euler_product:\n            \"abs_convergent_prod (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else 1)\"\n    and   euler_product_LIMSEQ:\n            \"(\\<lambda>n. (\\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else 1)) \\<longlonglongrightarrow> (\\<Sum>n. f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a)) &&&\n    (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "interpret f: multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by fact"], ["proof (state)\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "define N where \"N = (\\<Sum>n. norm (f n))\""], ["proof (state)\nthis:\n  N = (\\<Sum>n. norm (f n))\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "have summable': \"f abs_summable_on A\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. f abs_summable_on A", "by (rule abs_summable_on_subset[of _ UNIV])\n       (insert summable, auto simp: abs_summable_on_nat_iff')"], ["proof (state)\nthis:\n  f abs_summable_on ?A\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "have summable'': \"(\\<lambda>x. f (p ^ x)) abs_summable_on A\" if \"prime p\" for A p"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. f (p ^ x)) abs_summable_on A", "proof (subst abs_summable_on_reindex_iff[of _ _ f])"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on ((^) p) A\n 2. f abs_summable_on (^) p ` A", "from \\<open>prime p\\<close>"], ["proof (chain)\npicking this:\n  prime p", "have \"p > 1\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 1 < p", "by (rule prime_gt_1_nat)"], ["proof (state)\nthis:\n  1 < p\n\ngoal (2 subgoals):\n 1. inj_on ((^) p) A\n 2. f abs_summable_on (^) p ` A", "thus \"inj_on (\\<lambda>i. p ^ i) A\""], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. inj_on ((^) p) A", "by (auto simp: inj_on_def)"], ["proof (state)\nthis:\n  inj_on ((^) p) A\n\ngoal (1 subgoal):\n 1. f abs_summable_on (^) p ` A", "qed (intro summable')"], ["proof (state)\nthis:\n  prime ?p \\<Longrightarrow> (\\<lambda>x. f (?p ^ x)) abs_summable_on ?A\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "have \"(\\<lambda>n. norm ((\\<Sum>m. f m) - (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)))) \\<longlonglongrightarrow> 0\"\n          (is \"filterlim ?h _ _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        norm\n         ((\\<Sum>m. f m) -\n          (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i))))\n    \\<longlonglongrightarrow> 0", "proof (rule tendsto_sandwich)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       ?f n\n       \\<le> norm\n              ((\\<Sum>m. f m) -\n               (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                  \\<Sum>i. f (p ^ i)))\n 2. \\<forall>\\<^sub>F n in sequentially.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> ?h n\n 3. ?f \\<longlonglongrightarrow> 0\n 4. ?h \\<longlonglongrightarrow> 0", "show \"eventually (\\<lambda>n. ?h n \\<le> N - (\\<Sum>m\\<le>n. norm (f m))) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>n. norm (f m))", "proof (intro always_eventually allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "interpret product_sigma_finite \"\\<lambda>_::nat. count_space (UNIV :: nat set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. product_sigma_finite (\\<lambda>_. count_space UNIV)", "by (intro product_sigma_finite.intro sigma_finite_measure_count_space)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"(\\<Prod>p | p \\<le> n \\<and> prime p. \\<Sum>i. f (p ^ i)) =\n              (\\<Prod>p | p \\<le> n \\<and> prime p. \\<Sum>\\<^sub>a i\\<in>UNIV. f (p ^ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)) =\n    (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>\\<^sub>ai. f (p ^ i))", "by (intro prod.cong refl infsetsum_nat' [symmetric] summable'') auto"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)) =\n  (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>\\<^sub>ai. f (p ^ i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)) =\n  (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>\\<^sub>ai. f (p ^ i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"\\<dots> = (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV.\n                         \\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. f (x ^ g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n       \\<Sum>\\<^sub>ai. f (p ^ i)) =\n    (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                         UNIV.\n       \\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. f (x ^ g x))", "by (subst infsetsum_prod_PiE [symmetric])\n           (auto simp: prime_gt_Suc_0_nat summable'')"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>\\<^sub>ai. f (p ^ i)) =\n  (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                       UNIV.\n     \\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. f (x ^ g x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>\\<^sub>ai. f (p ^ i)) =\n  (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                       UNIV.\n     \\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. f (x ^ g x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"\\<dots> = (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E UNIV.\n                         f (\\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. x ^ g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                         UNIV.\n       \\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. f (x ^ g x)) =\n    (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                         UNIV.\n       f (\\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. x ^ g x))", "by (subst f.prod_coprime) (auto simp add: primes_coprime)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                       UNIV.\n     \\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. f (x ^ g x)) =\n  (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                       UNIV.\n     f (\\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. x ^ g x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                       UNIV.\n     \\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. f (x ^ g x)) =\n  (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                       UNIV.\n     f (\\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. x ^ g x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"\\<dots> = (\\<Sum>\\<^sub>am | m > 0 \\<and> prime_factors m \\<subseteq> {..n}. f m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                         UNIV.\n       f (\\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. x ^ g x)) =\n    (\\<Sum>\\<^sub>am | 0 < m \\<and> prime_factors m \\<subseteq> {..n}. f m)", "by (intro infsetsum_reindex_bij_betw bij_betw_prime_powers)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                       UNIV.\n     f (\\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. x ^ g x)) =\n  (\\<Sum>\\<^sub>am | 0 < m \\<and> prime_factors m \\<subseteq> {..n}. f m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ag\\<in>{p. p \\<le> n \\<and> prime p} \\<rightarrow>\\<^sub>E\n                       UNIV.\n     f (\\<Prod>x\\<in>{p. p \\<le> n \\<and> prime p}. x ^ g x)) =\n  (\\<Sum>\\<^sub>am | 0 < m \\<and> prime_factors m \\<subseteq> {..n}. f m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"(\\<Sum>\\<^sub>am\\<in>UNIV. f m) - \\<dots> = (\\<Sum>\\<^sub>am\\<in>UNIV - {m. m > 0 \\<and> prime_factors m \\<subseteq> {..n}}. f m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infsetsum f UNIV -\n    (\\<Sum>\\<^sub>am | 0 < m \\<and> prime_factors m \\<subseteq> {..n}.\n       f m) =\n    infsetsum f (UNIV - {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}})", "by (intro infsetsum_Diff [symmetric] summable') auto"], ["proof (state)\nthis:\n  infsetsum f UNIV -\n  (\\<Sum>\\<^sub>am | 0 < m \\<and> prime_factors m \\<subseteq> {..n}. f m) =\n  infsetsum f (UNIV - {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  infsetsum f UNIV -\n  (\\<Sum>\\<^sub>am | 0 < m \\<and> prime_factors m \\<subseteq> {..n}. f m) =\n  infsetsum f (UNIV - {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"(\\<Sum>\\<^sub>am\\<in>UNIV. f m) = (\\<Sum>m. f m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infsetsum f UNIV = (\\<Sum>m. f m)", "by (intro infsetsum_nat' summable')"], ["proof (state)\nthis:\n  infsetsum f UNIV = (\\<Sum>m. f m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  infsetsum f UNIV = (\\<Sum>m. f m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"UNIV - {m. m > 0 \\<and> prime_factors m \\<subseteq> {..n}} = \n                   insert 0 {m. \\<not>prime_factors m \\<subseteq> {..n}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV - {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}} =\n    insert 0 {m. \\<not> prime_factors m \\<subseteq> {..n}}", "by auto"], ["proof (state)\nthis:\n  UNIV - {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}} =\n  insert 0 {m. \\<not> prime_factors m \\<subseteq> {..n}}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  UNIV - {m. 0 < m \\<and> prime_factors m \\<subseteq> {..n}} =\n  insert 0 {m. \\<not> prime_factors m \\<subseteq> {..n}}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"(\\<Sum>\\<^sub>am\\<in>\\<dots>. f m) = (\\<Sum>\\<^sub>am | \\<not>prime_factors m \\<subseteq> {..n}. f m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infsetsum f (insert 0 {m. \\<not> prime_factors m \\<subseteq> {..n}}) =\n    (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}. f m)", "by (intro infsetsum_cong_neutral) auto"], ["proof (state)\nthis:\n  infsetsum f (insert 0 {m. \\<not> prime_factors m \\<subseteq> {..n}}) =\n  (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}. f m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  infsetsum f (insert 0 {m. \\<not> prime_factors m \\<subseteq> {..n}}) =\n  (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}. f m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"norm \\<dots> \\<le> (\\<Sum>\\<^sub>am | \\<not>prime_factors m \\<subseteq> {..n}. norm (f m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}. f m)\n    \\<le> (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}.\n             norm (f m))", "by (rule norm_infsetsum_bound)"], ["proof (state)\nthis:\n  norm (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}. f m)\n  \\<le> (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}.\n           norm (f m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  norm (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}. f m)\n  \\<le> (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}.\n           norm (f m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"\\<dots> \\<le> (\\<Sum>\\<^sub>am\\<in>{n<..}. norm (f m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}. norm (f m))\n    \\<le> (\\<Sum>\\<^sub>am\\<in>{n<..}. norm (f m))", "proof (intro infsetsum_mono_neutral_left summable' abs_summable_on_normI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> {m. \\<not> prime_factors m\n                          \\<subseteq> {..n}} \\<Longrightarrow>\n       norm (f x) \\<le> norm (f x)\n 2. {m. \\<not> prime_factors m \\<subseteq> {..n}} \\<subseteq> {n<..}\n 3. \\<And>x.\n       x \\<in> {n<..} -\n               {m. \\<not> prime_factors m\n                          \\<subseteq> {..n}} \\<Longrightarrow>\n       0 \\<le> norm (f x)", "show \"{m. \\<not> prime_factors m \\<subseteq> {..n}} \\<subseteq> {n<..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m. \\<not> prime_factors m \\<subseteq> {..n}} \\<subseteq> {n<..}", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<not> n < x; xa \\<in># prime_factorization x\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "fix m k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<not> n < x; xa \\<in># prime_factorization x\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "assume \"\\<not>m > n\" and \"k \\<in> prime_factors m\""], ["proof (state)\nthis:\n  \\<not> n < m\n  k \\<in># prime_factorization m\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<not> n < x; xa \\<in># prime_factorization x\\<rbrakk>\n       \\<Longrightarrow> xa \\<le> n", "thus \"k \\<le> n\""], ["proof (prove)\nusing this:\n  \\<not> n < m\n  k \\<in># prime_factorization m\n\ngoal (1 subgoal):\n 1. k \\<le> n", "by (cases \"m = 0\") (auto simp: prime_factors_dvd dest: dvd_imp_le)"], ["proof (state)\nthis:\n  k \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {m. \\<not> prime_factors m \\<subseteq> {..n}} \\<subseteq> {n<..}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {m. \\<not> prime_factors m\n                          \\<subseteq> {..n}} \\<Longrightarrow>\n       norm (f x) \\<le> norm (f x)\n 2. \\<And>x.\n       x \\<in> {n<..} -\n               {m. \\<not> prime_factors m\n                          \\<subseteq> {..n}} \\<Longrightarrow>\n       0 \\<le> norm (f x)", "qed auto"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}. norm (f m))\n  \\<le> (\\<Sum>\\<^sub>am\\<in>{n<..}. norm (f m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>am | \\<not> prime_factors m \\<subseteq> {..n}. norm (f m))\n  \\<le> (\\<Sum>\\<^sub>am\\<in>{n<..}. norm (f m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"{n<..} = UNIV - {..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {n<..} = UNIV - {..n}", "by auto"], ["proof (state)\nthis:\n  {n<..} = UNIV - {..n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  {n<..} = UNIV - {..n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"(\\<Sum>\\<^sub>am\\<in>\\<dots>. norm (f m)) = (\\<Sum>\\<^sub>am\\<in>UNIV. norm (f m)) - (\\<Sum>\\<^sub>am\\<in>{..n}. norm (f m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>am\\<in>UNIV - {..n}. norm (f m)) =\n    (\\<Sum>\\<^sub>am. norm (f m)) - (\\<Sum>\\<^sub>am\\<in>{..n}. norm (f m))", "using summable"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (f n))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>am\\<in>UNIV - {..n}. norm (f m)) =\n    (\\<Sum>\\<^sub>am. norm (f m)) - (\\<Sum>\\<^sub>am\\<in>{..n}. norm (f m))", "by (intro infsetsum_Diff) (auto simp: abs_summable_on_nat_iff')"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>am\\<in>UNIV - {..n}. norm (f m)) =\n  (\\<Sum>\\<^sub>am. norm (f m)) - (\\<Sum>\\<^sub>am\\<in>{..n}. norm (f m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>am\\<in>UNIV - {..n}. norm (f m)) =\n  (\\<Sum>\\<^sub>am. norm (f m)) - (\\<Sum>\\<^sub>am\\<in>{..n}. norm (f m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"(\\<Sum>\\<^sub>am\\<in>UNIV. norm (f m)) = N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>am. norm (f m)) = N", "unfolding N_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>am. norm (f m)) = (\\<Sum>n. norm (f n))", "using summable"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (f n))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>am. norm (f m)) = (\\<Sum>n. norm (f n))", "by (intro infsetsum_nat') (auto simp: abs_summable_on_nat_iff')"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>am. norm (f m)) = N\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>am. norm (f m)) = N\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "have \"(\\<Sum>\\<^sub>am\\<in>{..n}. norm (f m)) = (\\<Sum>m\\<le>n. norm (f m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>am\\<in>{..n}. norm (f m)) = (\\<Sum>m\\<le>n. norm (f m))", "by (simp add: suminf_finite)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>am\\<in>{..n}. norm (f m)) = (\\<Sum>m\\<le>n. norm (f m))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       norm\n        ((\\<Sum>m. f m) -\n         (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n       \\<le> N - (\\<Sum>m\\<le>x. norm (f m))", "finally"], ["proof (chain)\npicking this:\n  norm\n   ((\\<Sum>m. f m) -\n    (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n  \\<le> N - (\\<Sum>m\\<le>n. norm (f m))", "show \"?h n \\<le> N - (\\<Sum>m\\<le>n. norm (f m))\""], ["proof (prove)\nusing this:\n  norm\n   ((\\<Sum>m. f m) -\n    (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n  \\<le> N - (\\<Sum>m\\<le>n. norm (f m))\n\ngoal (1 subgoal):\n 1. norm\n     ((\\<Sum>m. f m) -\n      (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n    \\<le> N - (\\<Sum>m\\<le>n. norm (f m))", "."], ["proof (state)\nthis:\n  norm\n   ((\\<Sum>m. f m) -\n    (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n  \\<le> N - (\\<Sum>m\\<le>n. norm (f m))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     norm\n      ((\\<Sum>m. f m) -\n       (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n     \\<le> N - (\\<Sum>m\\<le>n. norm (f m))\n\ngoal (3 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       ?f n\n       \\<le> norm\n              ((\\<Sum>m. f m) -\n               (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                  \\<Sum>i. f (p ^ i)))\n 2. ?f \\<longlonglongrightarrow> 0\n 3. (\\<lambda>n. N - (\\<Sum>m\\<le>n. norm (f m)))\n    \\<longlonglongrightarrow> 0", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       ?f n\n       \\<le> norm\n              ((\\<Sum>m. f m) -\n               (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                  \\<Sum>i. f (p ^ i)))\n 2. ?f \\<longlonglongrightarrow> 0\n 3. (\\<lambda>n. N - (\\<Sum>m\\<le>n. norm (f m)))\n    \\<longlonglongrightarrow> 0", "show \"eventually (\\<lambda>n. ?h n \\<ge> 0) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       0 \\<le> norm\n                ((\\<Sum>m. f m) -\n                 (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                    \\<Sum>i. f (p ^ i)))", "by simp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     0 \\<le> norm\n              ((\\<Sum>m. f m) -\n               (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}.\n                  \\<Sum>i. f (p ^ i)))\n\ngoal (2 subgoals):\n 1. (\\<lambda>n. 0) \\<longlonglongrightarrow> 0\n 2. (\\<lambda>n. N - (\\<Sum>m\\<le>n. norm (f m)))\n    \\<longlonglongrightarrow> 0", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>n. 0) \\<longlonglongrightarrow> 0\n 2. (\\<lambda>n. N - (\\<Sum>m\\<le>n. norm (f m)))\n    \\<longlonglongrightarrow> 0", "show \"(\\<lambda>n. N - (\\<Sum>m\\<le>n. norm (f m))) \\<longlonglongrightarrow> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. N - (\\<Sum>m\\<le>n. norm (f m)))\n    \\<longlonglongrightarrow> 0", "unfolding N_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. (\\<Sum>n. norm (f n)) - (\\<Sum>m\\<le>n. norm (f m)))\n    \\<longlonglongrightarrow> 0", "by (rule tendsto_eq_intros refl summable_LIMSEQ' summable)+ simp_all"], ["proof (state)\nthis:\n  (\\<lambda>n. N - (\\<Sum>m\\<le>n. norm (f m))) \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. 0) \\<longlonglongrightarrow> 0", "qed simp_all"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      norm\n       ((\\<Sum>m. f m) -\n        (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i))))\n  \\<longlonglongrightarrow> 0\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "hence \"(\\<lambda>n. (\\<Sum>m. f m) - (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i))) \\<longlonglongrightarrow> 0\""], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      norm\n       ((\\<Sum>m. f m) -\n        (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i))))\n  \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (\\<Sum>m. f m) -\n        (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n    \\<longlonglongrightarrow> (0::'a)", "by (simp add: tendsto_norm_zero_iff)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      (\\<Sum>m. f m) -\n      (\\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)))\n  \\<longlonglongrightarrow> (0::'a)\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "from tendsto_diff[OF tendsto_const[of \"\\<Sum>m. f m\"] this]"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (\\<Sum>m. f m) -\n      ((\\<Sum>m. f m) -\n       (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i))))\n  \\<longlonglongrightarrow> (\\<Sum>m. f m) - (0::'a)", "have \"(\\<lambda>n. \\<Prod>p | p \\<le> n \\<and> prime p. \\<Sum>i. f (p ^ i)) \\<longlonglongrightarrow> (\\<Sum>m. f m)\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (\\<Sum>m. f m) -\n      ((\\<Sum>m. f m) -\n       (\\<Prod>p\\<in>{p. p \\<le> x \\<and> prime p}. \\<Sum>i. f (p ^ i))))\n  \\<longlonglongrightarrow> (\\<Sum>m. f m) - (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i))\n    \\<longlonglongrightarrow> (\\<Sum>m. f m)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i))\n  \\<longlonglongrightarrow> (\\<Sum>m. f m)\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "also"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i))\n  \\<longlonglongrightarrow> (\\<Sum>m. f m)\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "have \"(\\<lambda>n. \\<Prod>p | p \\<le> n \\<and> prime p. \\<Sum>i. f (p ^ i)) = \n                 (\\<lambda>n. \\<Prod>p\\<le>n. if prime p then (\\<Sum>i. f (p ^ i)) else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)) =\n    (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>i. f (p ^ i) else (1::'a))", "by (intro ext prod.mono_neutral_cong_left) auto"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<in>{p. p \\<le> n \\<and> prime p}. \\<Sum>i. f (p ^ i)) =\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n. if prime p then \\<Sum>i. f (p ^ i) else (1::'a))\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n. if prime p then \\<Sum>i. f (p ^ i) else (1::'a))\n  \\<longlonglongrightarrow> (\\<Sum>m. f m)", "show \"\\<dots> \\<longlonglongrightarrow> (\\<Sum>m. f m)\""], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n. if prime p then \\<Sum>i. f (p ^ i) else (1::'a))\n  \\<longlonglongrightarrow> (\\<Sum>m. f m)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>i. f (p ^ i) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>m. f m)", "."], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n. if prime p then \\<Sum>i. f (p ^ i) else (1::'a))\n  \\<longlonglongrightarrow> (\\<Sum>m. f m)\n\ngoal (1 subgoal):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))", "show \"abs_convergent_prod (\\<lambda>p. if prime p then (\\<Sum>i. f (p ^ i)) else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then \\<Sum>i. f (p ^ i) else (1::'a))", "proof (rule summable_imp_abs_convergent_prod)"], ["proof (state)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>i.\n         norm\n          ((if prime i then \\<Sum>ia. f (i ^ ia) else (1::'a)) - (1::'a)))", "have \"(\\<lambda>(p,i). f (p ^ i)) abs_summable_on {p. prime p} \\<times> {0<..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(p, i). f (p ^ i)) abs_summable_on\n    {p. prime p} \\<times> {0<..}", "unfolding case_prod_unfold"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p. f (fst p ^ snd p)) abs_summable_on\n    {p. prime p} \\<times> {0<..}", "by (subst abs_summable_on_reindex_iff[OF inj_prime_power]) fact"], ["proof (state)\nthis:\n  (\\<lambda>(p, i). f (p ^ i)) abs_summable_on {p. prime p} \\<times> {0<..}\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>i.\n         norm\n          ((if prime i then \\<Sum>ia. f (i ^ ia) else (1::'a)) - (1::'a)))", "hence \"(\\<lambda>p. \\<Sum>\\<^sub>ai\\<in>{0<..}. f (p ^ i)) abs_summable_on {p. prime p}\""], ["proof (prove)\nusing this:\n  (\\<lambda>(p, i). f (p ^ i)) abs_summable_on {p. prime p} \\<times> {0<..}\n\ngoal (1 subgoal):\n 1. (\\<lambda>p. \\<Sum>\\<^sub>ai\\<in>{0<..}. f (p ^ i)) abs_summable_on\n    {p. prime p}", "by (rule abs_summable_on_Sigma_project1') simp_all"], ["proof (state)\nthis:\n  (\\<lambda>p. \\<Sum>\\<^sub>ai\\<in>{0<..}. f (p ^ i)) abs_summable_on\n  {p. prime p}\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>i.\n         norm\n          ((if prime i then \\<Sum>ia. f (i ^ ia) else (1::'a)) - (1::'a)))", "also"], ["proof (state)\nthis:\n  (\\<lambda>p. \\<Sum>\\<^sub>ai\\<in>{0<..}. f (p ^ i)) abs_summable_on\n  {p. prime p}\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>i.\n         norm\n          ((if prime i then \\<Sum>ia. f (i ^ ia) else (1::'a)) - (1::'a)))", "have \"?this \\<longleftrightarrow> (\\<lambda>p. (\\<Sum>i. f (p ^ i)) - 1) abs_summable_on {p. prime p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>p. \\<Sum>\\<^sub>ai\\<in>{0<..}. f (p ^ i)) abs_summable_on\n     {p. prime p}) =\n    ((\\<lambda>p. (\\<Sum>i. f (p ^ i)) - (1::'a)) abs_summable_on\n     {p. prime p})", "proof (intro abs_summable_on_cong refl)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p. prime p} \\<Longrightarrow>\n       (\\<Sum>\\<^sub>ai\\<in>{0<..}. f (x ^ i)) =\n       (\\<Sum>i. f (x ^ i)) - (1::'a)", "fix p :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p. prime p} \\<Longrightarrow>\n       (\\<Sum>\\<^sub>ai\\<in>{0<..}. f (x ^ i)) =\n       (\\<Sum>i. f (x ^ i)) - (1::'a)", "assume p: \"p \\<in> {p. prime p}\""], ["proof (state)\nthis:\n  p \\<in> {p. prime p}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p. prime p} \\<Longrightarrow>\n       (\\<Sum>\\<^sub>ai\\<in>{0<..}. f (x ^ i)) =\n       (\\<Sum>i. f (x ^ i)) - (1::'a)", "have \"{0<..} = UNIV - {0::nat}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0<..} = UNIV - {0}", "by auto"], ["proof (state)\nthis:\n  {0<..} = UNIV - {0}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p. prime p} \\<Longrightarrow>\n       (\\<Sum>\\<^sub>ai\\<in>{0<..}. f (x ^ i)) =\n       (\\<Sum>i. f (x ^ i)) - (1::'a)", "also"], ["proof (state)\nthis:\n  {0<..} = UNIV - {0}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p. prime p} \\<Longrightarrow>\n       (\\<Sum>\\<^sub>ai\\<in>{0<..}. f (x ^ i)) =\n       (\\<Sum>i. f (x ^ i)) - (1::'a)", "have \"(\\<Sum>\\<^sub>ai\\<in>\\<dots>. f (p ^ i)) = (\\<Sum>i. f (p ^ i)) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ai\\<in>UNIV - {0}. f (p ^ i)) =\n    (\\<Sum>i. f (p ^ i)) - (1::'a)", "using p"], ["proof (prove)\nusing this:\n  p \\<in> {p. prime p}\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ai\\<in>UNIV - {0}. f (p ^ i)) =\n    (\\<Sum>i. f (p ^ i)) - (1::'a)", "by (subst infsetsum_Diff) (simp_all add: infsetsum_nat' summable'')"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ai\\<in>UNIV - {0}. f (p ^ i)) =\n  (\\<Sum>i. f (p ^ i)) - (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {p. prime p} \\<Longrightarrow>\n       (\\<Sum>\\<^sub>ai\\<in>{0<..}. f (x ^ i)) =\n       (\\<Sum>i. f (x ^ i)) - (1::'a)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sub>ai\\<in>{0<..}. f (p ^ i)) = (\\<Sum>i. f (p ^ i)) - (1::'a)", "show \"(\\<Sum>\\<^sub>ai\\<in>{0<..}. f (p ^ i)) = (\\<Sum>i. f (p ^ i)) - 1\""], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sub>ai\\<in>{0<..}. f (p ^ i)) = (\\<Sum>i. f (p ^ i)) - (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ai\\<in>{0<..}. f (p ^ i)) = (\\<Sum>i. f (p ^ i)) - (1::'a)", "."], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ai\\<in>{0<..}. f (p ^ i)) = (\\<Sum>i. f (p ^ i)) - (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<lambda>p. \\<Sum>\\<^sub>ai\\<in>{0<..}. f (p ^ i)) abs_summable_on\n   {p. prime p}) =\n  ((\\<lambda>p. (\\<Sum>i. f (p ^ i)) - (1::'a)) abs_summable_on\n   {p. prime p})\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>i.\n         norm\n          ((if prime i then \\<Sum>ia. f (i ^ ia) else (1::'a)) - (1::'a)))", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>p. (\\<Sum>i. f (p ^ i)) - (1::'a)) abs_summable_on {p. prime p}", "have \"summable (\\<lambda>p. if prime p then norm ((\\<Sum>i. f (p ^ i)) - 1) else 0)\"\n      (is \"summable ?T\")"], ["proof (prove)\nusing this:\n  (\\<lambda>p. (\\<Sum>i. f (p ^ i)) - (1::'a)) abs_summable_on {p. prime p}\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>p.\n         if prime p then norm ((\\<Sum>i. f (p ^ i)) - (1::'a)) else 0)", "by (simp add: abs_summable_on_nat_iff)"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>p.\n       if prime p then norm ((\\<Sum>i. f (p ^ i)) - (1::'a)) else 0)\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>i.\n         norm\n          ((if prime i then \\<Sum>ia. f (i ^ ia) else (1::'a)) - (1::'a)))", "also"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>p.\n       if prime p then norm ((\\<Sum>i. f (p ^ i)) - (1::'a)) else 0)\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>i.\n         norm\n          ((if prime i then \\<Sum>ia. f (i ^ ia) else (1::'a)) - (1::'a)))", "have \"?T = (\\<lambda>p. norm ((if prime p then \\<Sum>i. f (p ^ i) else 1) - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p.\n        if prime p then norm ((\\<Sum>i. f (p ^ i)) - (1::'a)) else 0) =\n    (\\<lambda>p.\n        norm ((if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) - (1::'a)))", "by (rule ext) (simp add: if_splits)"], ["proof (state)\nthis:\n  (\\<lambda>p.\n      if prime p then norm ((\\<Sum>i. f (p ^ i)) - (1::'a)) else 0) =\n  (\\<lambda>p.\n      norm ((if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) - (1::'a)))\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>i.\n         norm\n          ((if prime i then \\<Sum>ia. f (i ^ ia) else (1::'a)) - (1::'a)))", "finally"], ["proof (chain)\npicking this:\n  summable\n   (\\<lambda>p.\n       norm ((if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) - (1::'a)))", "show \"summable \\<dots>\""], ["proof (prove)\nusing this:\n  summable\n   (\\<lambda>p.\n       norm ((if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) - (1::'a)))\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>p.\n         norm ((if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) - (1::'a)))", "."], ["proof (state)\nthis:\n  summable\n   (\\<lambda>p.\n       norm ((if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) - (1::'a)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  abs_convergent_prod\n   (\\<lambda>p. if prime p then \\<Sum>i. f (p ^ i) else (1::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  fixes f :: \"nat \\<Rightarrow> 'a :: {real_normed_field,banach,second_countable_topology}\"\n  assumes summable: \"summable (\\<lambda>n. norm (f n))\"\n  assumes \"completely_multiplicative_function f\"\n  shows   abs_convergent_euler_product':\n            \"abs_convergent_prod (\\<lambda>p. if prime p then inverse (1 - f p) else 1)\"\n    and   completely_multiplicative_summable_norm: \n            \"\\<And>p. prime p \\<Longrightarrow> norm (f p) < 1\"\n    and   euler_product_LIMSEQ':\n            \"(\\<lambda>n. (\\<Prod>p\\<le>n. if prime p then inverse (1 - f p) else 1)) \\<longlonglongrightarrow> (\\<Sum>n. f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a)) &&&\n    (\\<And>p. prime p \\<Longrightarrow> norm (f p) < 1) &&&\n    (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<And>p. prime p \\<Longrightarrow> norm (f p) < 1\n 3. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "interpret f: completely_multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f", "by fact"], ["proof (state)\ngoal (3 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<And>p. prime p \\<Longrightarrow> norm (f p) < 1\n 3. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "{"], ["proof (state)\ngoal (3 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<And>p. prime p \\<Longrightarrow> norm (f p) < 1\n 3. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "fix p :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<And>p. prime p \\<Longrightarrow> norm (f p) < 1\n 3. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "assume \"prime p\""], ["proof (state)\nthis:\n  prime p\n\ngoal (3 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<And>p. prime p \\<Longrightarrow> norm (f p) < 1\n 3. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "hence \"inj (\\<lambda>i. p ^ i)\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. inj ((^) p)", "by (auto simp: inj_on_def dest: prime_gt_1_nat)"], ["proof (state)\nthis:\n  inj ((^) p)\n\ngoal (3 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<And>p. prime p \\<Longrightarrow> norm (f p) < 1\n 3. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "from summable_reindex[OF summable this]"], ["proof (chain)\npicking this:\n  (\\<And>x. 0 \\<le> norm (f x)) \\<Longrightarrow>\n  summable ((\\<lambda>n. norm (f n)) \\<circ> (^) p)", "have *: \"summable (\\<lambda>i. norm (f (p ^ i)))\""], ["proof (prove)\nusing this:\n  (\\<And>x. 0 \\<le> norm (f x)) \\<Longrightarrow>\n  summable ((\\<lambda>n. norm (f n)) \\<circ> (^) p)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>i. norm (f (p ^ i)))", "by (auto simp: o_def)"], ["proof (state)\nthis:\n  summable (\\<lambda>i. norm (f (p ^ i)))\n\ngoal (3 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<And>p. prime p \\<Longrightarrow> norm (f p) < 1\n 3. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "also"], ["proof (state)\nthis:\n  summable (\\<lambda>i. norm (f (p ^ i)))\n\ngoal (3 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<And>p. prime p \\<Longrightarrow> norm (f p) < 1\n 3. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "have \"(\\<lambda>i. norm (f (p ^ i))) = (\\<lambda>i. norm (f p) ^ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i. norm (f (p ^ i))) = (^) (norm (f p))", "by (simp add: f.power norm_power)"], ["proof (state)\nthis:\n  (\\<lambda>i. norm (f (p ^ i))) = (^) (norm (f p))\n\ngoal (3 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<And>p. prime p \\<Longrightarrow> norm (f p) < 1\n 3. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "finally"], ["proof (chain)\npicking this:\n  summable ((^) (norm (f p)))", "show \"norm (f p) < 1\""], ["proof (prove)\nusing this:\n  summable ((^) (norm (f p)))\n\ngoal (1 subgoal):\n 1. norm (f p) < 1", "by (subst (asm) summable_geometric_iff) simp_all"], ["proof (state)\nthis:\n  norm (f p) < 1\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "note * and this"], ["proof (state)\nthis:\n  summable (\\<lambda>i. norm (f (p ^ i)))\n  norm (f p) < 1\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "}"], ["proof (state)\nthis:\n  prime ?p2 \\<Longrightarrow> summable (\\<lambda>i. norm (f (?p2 ^ i)))\n  prime ?p2 \\<Longrightarrow> norm (f ?p2) < 1\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "note summable' = this"], ["proof (state)\nthis:\n  prime ?p2 \\<Longrightarrow> summable (\\<lambda>i. norm (f (?p2 ^ i)))\n  prime ?p2 \\<Longrightarrow> norm (f ?p2) < 1\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "have eq: \"(\\<lambda>p. if prime p then (\\<Sum>i. f (p ^ i)) else 1) = \n              (\\<lambda>p. if prime p then inverse (1 - f p) else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p. if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n    (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))", "proof (rule ext, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n       (if prime p then inverse ((1::'a) - f p) else (1::'a))", "case (1 p)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>p.\n       (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n       (if prime p then inverse ((1::'a) - f p) else (1::'a))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n    (if prime p then inverse ((1::'a) - f p) else (1::'a))", "proof (cases \"prime p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. prime p \\<Longrightarrow>\n    (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n    (if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<not> prime p \\<Longrightarrow>\n    (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n    (if prime p then inverse ((1::'a) - f p) else (1::'a))", "case True"], ["proof (state)\nthis:\n  prime p\n\ngoal (2 subgoals):\n 1. prime p \\<Longrightarrow>\n    (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n    (if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<not> prime p \\<Longrightarrow>\n    (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n    (if prime p then inverse ((1::'a) - f p) else (1::'a))", "hence \"norm (f p) < 1\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. norm (f p) < 1", "by (rule summable')"], ["proof (state)\nthis:\n  norm (f p) < 1\n\ngoal (2 subgoals):\n 1. prime p \\<Longrightarrow>\n    (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n    (if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. \\<not> prime p \\<Longrightarrow>\n    (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n    (if prime p then inverse ((1::'a) - f p) else (1::'a))", "from suminf_geometric[OF this] and True"], ["proof (chain)\npicking this:\n  (\\<Sum>n. f p ^ n) = (1::'a) / ((1::'a) - f p)\n  prime p", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>n. f p ^ n) = (1::'a) / ((1::'a) - f p)\n  prime p\n\ngoal (1 subgoal):\n 1. (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n    (if prime p then inverse ((1::'a) - f p) else (1::'a))", "by (simp add: field_simps f.power)"], ["proof (state)\nthis:\n  (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n  (if prime p then inverse ((1::'a) - f p) else (1::'a))\n\ngoal (1 subgoal):\n 1. \\<not> prime p \\<Longrightarrow>\n    (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n    (if prime p then inverse ((1::'a) - f p) else (1::'a))", "qed simp_all"], ["proof (state)\nthis:\n  (if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n  (if prime p then inverse ((1::'a) - f p) else (1::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>p. if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n  (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "hence eq': \"(\\<lambda>n. \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else 1) =\n                (\\<lambda>n. \\<Prod>p\\<le>n. if prime p then inverse (1 - f p) else 1)\""], ["proof (prove)\nusing this:\n  (\\<lambda>p. if prime p then \\<Sum>i. f (p ^ i) else (1::'a)) =\n  (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a)) =\n    (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))", "by (auto simp: fun_eq_iff)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a)) =\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n. if prime p then inverse ((1::'a) - f p) else (1::'a))\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "have f: \"multiplicative_function f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", ".."], ["proof (state)\nthis:\n  multiplicative_function f\n\ngoal (2 subgoals):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n 2. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "from abs_convergent_euler_product[OF assms(1) f] and euler_product_LIMSEQ[OF assms(1) f]"], ["proof (chain)\npicking this:\n  abs_convergent_prod\n   (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n  \\<longlonglongrightarrow> (\\<Sum>n. f n)", "show \"abs_convergent_prod (\\<lambda>p. if prime p then inverse (1 - f p) else 1)\"\n       and \"(\\<lambda>n. \\<Prod>p\\<le>n. if prime p then inverse (1 - f p) else 1) \\<longlonglongrightarrow> (\\<Sum>n. f n)\""], ["proof (prove)\nusing this:\n  abs_convergent_prod\n   (\\<lambda>p. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n. if prime p then \\<Sum>n. f (p ^ n) else (1::'a))\n  \\<longlonglongrightarrow> (\\<Sum>n. f n)\n\ngoal (1 subgoal):\n 1. abs_convergent_prod\n     (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a)) &&&\n    (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - f p) else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. f n)", "by (simp_all only: eq eq')"], ["proof (state)\nthis:\n  abs_convergent_prod\n   (\\<lambda>p. if prime p then inverse ((1::'a) - f p) else (1::'a))\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n. if prime p then inverse ((1::'a) - f p) else (1::'a))\n  \\<longlonglongrightarrow> (\\<Sum>n. f n)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}