{"file_name": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series/Moebius_Mu.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series", "problem_names": ["lemma abs_moebius_mu_le: \"abs (moebius_mu n :: 'a :: {linordered_idom}) \\<le> 1\"", "lemma moebius_commute: \"x * moebius_mu n = moebius_mu n * x\"", "lemma dirichlet_prod_moebius_commute: \n  \"dirichlet_prod f moebius_mu = dirichlet_prod moebius_mu f\"", "lemma fds_moebius_commute: \"x * fds moebius_mu = fds moebius_mu * x\"", "lemma of_int_moebius_mu [simp]: \"of_int (moebius_mu n) = moebius_mu n\"", "lemma minus_1_power_ring_neq_zero [simp]: \"(- 1 :: 'a :: ring_1) ^ n \\<noteq> 0\"", "lemma moebius_mu_0 [simp]: \"moebius_mu 0 = 0\"", "lemma fds_nth_fds_moebius_mu [simp]: \"fds_nth (fds moebius_mu) = moebius_mu\"", "lemma prime_factors_Suc_0 [simp]: \"prime_factors (Suc 0) = {}\"", "lemma moebius_mu_Suc_0 [simp]: \"moebius_mu (Suc 0) = 1\"", "lemma moebius_mu_1 [simp]: \"moebius_mu 1 = 1\"", "lemma moebius_mu_eq_zero_iff: \"moebius_mu n = 0 \\<longleftrightarrow> \\<not>squarefree n\"", "lemma moebius_mu_not_squarefree [simp]: \"\\<not>squarefree n \\<Longrightarrow> moebius_mu n = 0\"", "lemma moebius_mu_power:\n  assumes \"a > 1\" \"n > 1\"\n  shows   \"moebius_mu (a ^ n) = 0\"", "lemma moebius_mu_power':\n  \"moebius_mu (a ^ n) = (if a = 1 \\<or> n = 0 then 1 else if n = 1 then moebius_mu a else 0)\"", "lemma moebius_mu_squarefree_eq: \n  \"squarefree n \\<Longrightarrow> moebius_mu n = (-1) ^ card (prime_factors n)\"", "lemma moebius_mu_squarefree_eq': \n  assumes \"squarefree n\"\n  shows   \"moebius_mu n = (-1) ^ size (prime_factorization n)\"", "lemma sum_moebius_mu_divisors:\n  assumes \"n > 1\"\n  shows   \"(\\<Sum>d | d dvd n. moebius_mu d) = (0 :: 'a :: comm_ring_1)\"", "lemma sum_moebius_mu_divisors':\n  \"(\\<Sum>d | d dvd n. moebius_mu d) = (if n = 1 then 1 else 0)\"", "lemma fds_zeta_times_moebius_mu: \"fds_zeta * fds moebius_mu = 1\"", "lemma fds_moebius_inverse_zeta:\n  \"fds moebius_mu = inverse (fds_zeta :: 'a :: field fds)\"", "lemma moebius_mu_formula_real: \"(moebius_mu n :: real) = dirichlet_inverse (\\<lambda>_. 1) 1 n\"", "lemma moebius_mu_formula_int: \"moebius_mu n = dirichlet_inverse (\\<lambda>_. 1 :: int) 1 n\"", "lemma moebius_mu_formula: \"moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n\"", "lemma moebius_mu_2 [simp]: \"moebius_mu 2 = -1\"\n  and moebius_mu_3 [simp]: \"moebius_mu 3 = -1\"", "lemma moebius_mu_code [code]:\n  \"moebius_mu n = of_int (dirichlet_inverse (\\<lambda>_. 1 :: int) 1 n)\"", "lemma fds_moebius_inversion: \"f = fds moebius_mu * g \\<longleftrightarrow> g = f * fds_zeta\"", "lemma moebius_inversion:\n  assumes \"\\<And>n. n > 0 \\<Longrightarrow> g n = (\\<Sum>d | d dvd n. f d)\" \"n > 0\"\n  shows   \"f n = dirichlet_prod moebius_mu g n\"", "lemma fds_mangoldt: \"fds mangoldt = fds moebius_mu * fds (\\<lambda>n. of_real (ln (real n)))\"", "lemma sum_divisors_moebius_mu_times_multiplicative:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {comm_ring_1}\"\n  assumes \"multiplicative_function f\" \"n > 0\"\n  shows   \"(\\<Sum>d | d dvd n. moebius_mu d * f d) = (\\<Prod>p\\<in>prime_factors n. 1 - f p)\"", "lemma completely_multiplicative_iff_inverse_moebius_mu:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {comm_ring_1, ring_no_zero_divisors}\"\n  assumes \"multiplicative_function f\"\n  defines \"g \\<equiv> dirichlet_inverse f 1\"\n  shows   \"completely_multiplicative_function f \\<longleftrightarrow>\n             (\\<forall>n. g n = moebius_mu n * f n)\"", "lemma completely_multiplicative_fds_inverse:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"completely_multiplicative_function f\"\n  shows   \"inverse (fds f) = fds (\\<lambda>n. moebius_mu n * f n)\"", "lemma completely_multiplicative_fds_inverse':\n  fixes f :: \"'a :: field fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\"\n  shows   \"inverse f = fds (\\<lambda>n. moebius_mu n * fds_nth f n)\"", "lemma selberg_aux:\n  \"(\\<chi> n. of_real ((ln n)\\<^sup>2)) * fds moebius_mu =\n     (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt :: 'a :: {comm_ring_1,real_algebra_1} fds)\"", "lemma selberg_aux':\n  \"mangoldt n * of_real (ln n) + (mangoldt \\<star> mangoldt) n =\n     ((moebius_mu \\<star> (\\<lambda>b. of_real (ln b) ^ 2)) n\n         :: 'a :: {comm_ring_1,real_algebra_1})\" if \"n > 0\""], "translations": [["", "lemma abs_moebius_mu_le: \"abs (moebius_mu n :: 'a :: {linordered_idom}) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>moebius_mu n\\<bar> \\<le> (1::'a)", "by (auto simp add: moebius_mu_def)"], ["", "lemma moebius_commute: \"x * moebius_mu n = moebius_mu n * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * moebius_mu n = moebius_mu n * x", "by (cases \"even (card (prime_factors n))\") (auto simp: moebius_mu_def)"], ["", "lemma dirichlet_prod_moebius_commute: \n  \"dirichlet_prod f moebius_mu = dirichlet_prod moebius_mu f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f moebius_mu = dirichlet_prod moebius_mu f", "by (subst dirichlet_prod_def, subst dirichlet_prod_altdef1) (simp add: moebius_commute)"], ["", "lemma fds_moebius_commute: \"x * fds moebius_mu = fds moebius_mu * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * fds moebius_mu = fds moebius_mu * x", "by (simp add: fds_eq_iff fds_nth_mult dirichlet_prod_moebius_commute)"], ["", "lemma of_int_moebius_mu [simp]: \"of_int (moebius_mu n) = moebius_mu n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int (moebius_mu n) = moebius_mu n", "by (simp add: moebius_mu_def)"], ["", "lemma minus_1_power_ring_neq_zero [simp]: \"(- 1 :: 'a :: ring_1) ^ n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- (1::'a)) ^ n \\<noteq> (0::'a)", "by (cases \"even n\") simp_all"], ["", "lemma moebius_mu_0 [simp]: \"moebius_mu 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu 0 = (0::'a)", "by (simp add: moebius_mu_def)"], ["", "lemma fds_nth_fds_moebius_mu [simp]: \"fds_nth (fds moebius_mu) = moebius_mu\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds moebius_mu) = moebius_mu", "by (simp add: fun_eq_iff fds_nth_fds)"], ["", "lemma prime_factors_Suc_0 [simp]: \"prime_factors (Suc 0) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime_factors (Suc 0) = {}", "by (subst prime_factors_dvd) auto"], ["", "lemma moebius_mu_Suc_0 [simp]: \"moebius_mu (Suc 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu (Suc 0) = (1::'a)", "by (simp add: moebius_mu_def)"], ["", "lemma moebius_mu_1 [simp]: \"moebius_mu 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu 1 = (1::'a)", "by (simp add: moebius_mu_def)"], ["", "lemma moebius_mu_eq_zero_iff: \"moebius_mu n = 0 \\<longleftrightarrow> \\<not>squarefree n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (moebius_mu n = (0::'a)) = (\\<not> squarefree n)", "by (simp add: moebius_mu_def)"], ["", "lemma moebius_mu_not_squarefree [simp]: \"\\<not>squarefree n \\<Longrightarrow> moebius_mu n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> squarefree n \\<Longrightarrow> moebius_mu n = (0::'a)", "by (simp add: moebius_mu_def)"], ["", "lemma moebius_mu_power:\n  assumes \"a > 1\" \"n > 1\"\n  shows   \"moebius_mu (a ^ n) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu (a ^ n) = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. moebius_mu (a ^ n) = (0::'a)", "from assms"], ["proof (chain)\npicking this:\n  1 < a\n  1 < n", "have \"a ^ 2 dvd a ^ n\""], ["proof (prove)\nusing this:\n  1 < a\n  1 < n\n\ngoal (1 subgoal):\n 1. a\\<^sup>2 dvd a ^ n", "by (simp add: le_imp_power_dvd)"], ["proof (state)\nthis:\n  a\\<^sup>2 dvd a ^ n\n\ngoal (1 subgoal):\n 1. moebius_mu (a ^ n) = (0::'a)", "with moebius_mu_eq_zero_iff[of \"a ^ n\"] and \\<open>a > 1\\<close>"], ["proof (chain)\npicking this:\n  (moebius_mu (a ^ n) = (0::?'a)) = (\\<not> squarefree (a ^ n))\n  1 < a\n  a\\<^sup>2 dvd a ^ n", "show ?thesis"], ["proof (prove)\nusing this:\n  (moebius_mu (a ^ n) = (0::?'a)) = (\\<not> squarefree (a ^ n))\n  1 < a\n  a\\<^sup>2 dvd a ^ n\n\ngoal (1 subgoal):\n 1. moebius_mu (a ^ n) = (0::'a)", "by (auto simp: squarefree_def)"], ["proof (state)\nthis:\n  moebius_mu (a ^ n) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma moebius_mu_power':\n  \"moebius_mu (a ^ n) = (if a = 1 \\<or> n = 0 then 1 else if n = 1 then moebius_mu a else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu (a ^ n) =\n    (if a = 1 \\<or> n = 0 then 1::'a\n     else if n = 1 then moebius_mu a else (0::'a))", "by (cases \"a = 0\") (auto simp: power_0_left moebius_mu_power)"], ["", "lemma moebius_mu_squarefree_eq: \n  \"squarefree n \\<Longrightarrow> moebius_mu n = (-1) ^ card (prime_factors n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. squarefree n \\<Longrightarrow>\n    moebius_mu n = (- (1::'a)) ^ card (prime_factors n)", "by (simp add: moebius_mu_def split: if_splits)"], ["", "lemma moebius_mu_squarefree_eq': \n  assumes \"squarefree n\"\n  shows   \"moebius_mu n = (-1) ^ size (prime_factorization n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu n = (- (1::'a)) ^ size (prime_factorization n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. moebius_mu n = (- (1::'a)) ^ size (prime_factorization n)", "let ?P = \"prime_factorization n\""], ["proof (state)\ngoal (1 subgoal):\n 1. moebius_mu n = (- (1::'a)) ^ size (prime_factorization n)", "from assms"], ["proof (chain)\npicking this:\n  squarefree n", "have [simp]: \"n > 0\""], ["proof (prove)\nusing this:\n  squarefree n\n\ngoal (1 subgoal):\n 1. 0 < n", "by (auto intro!: Nat.gr0I)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. moebius_mu n = (- (1::'a)) ^ size (prime_factorization n)", "have \"size ?P = sum (count ?P) (set_mset ?P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (prime_factorization n) =\n    sum (count (prime_factorization n)) (prime_factors n)", "by (rule size_multiset_overloaded_eq)"], ["proof (state)\nthis:\n  size (prime_factorization n) =\n  sum (count (prime_factorization n)) (prime_factors n)\n\ngoal (1 subgoal):\n 1. moebius_mu n = (- (1::'a)) ^ size (prime_factorization n)", "also"], ["proof (state)\nthis:\n  size (prime_factorization n) =\n  sum (count (prime_factorization n)) (prime_factors n)\n\ngoal (1 subgoal):\n 1. moebius_mu n = (- (1::'a)) ^ size (prime_factorization n)", "from assms"], ["proof (chain)\npicking this:\n  squarefree n", "have \"\\<dots> = sum (\\<lambda>_. 1) (set_mset ?P)\""], ["proof (prove)\nusing this:\n  squarefree n\n\ngoal (1 subgoal):\n 1. sum (count (prime_factorization n)) (prime_factors n) =\n    (\\<Sum>_\\<in>prime_factors n. 1)", "by (intro sum.cong refl, subst count_prime_factorization_prime)\n       (auto simp: moebius_mu_eq_zero_iff squarefree_factorial_semiring')"], ["proof (state)\nthis:\n  sum (count (prime_factorization n)) (prime_factors n) =\n  (\\<Sum>_\\<in>prime_factors n. 1)\n\ngoal (1 subgoal):\n 1. moebius_mu n = (- (1::'a)) ^ size (prime_factorization n)", "also"], ["proof (state)\nthis:\n  sum (count (prime_factorization n)) (prime_factors n) =\n  (\\<Sum>_\\<in>prime_factors n. 1)\n\ngoal (1 subgoal):\n 1. moebius_mu n = (- (1::'a)) ^ size (prime_factorization n)", "have \"\\<dots> = card (set_mset ?P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>_\\<in>prime_factors n. 1) = card (prime_factors n)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>_\\<in>prime_factors n. 1) = card (prime_factors n)\n\ngoal (1 subgoal):\n 1. moebius_mu n = (- (1::'a)) ^ size (prime_factorization n)", "finally"], ["proof (chain)\npicking this:\n  size (prime_factorization n) = card (prime_factors n)", "show ?thesis"], ["proof (prove)\nusing this:\n  size (prime_factorization n) = card (prime_factors n)\n\ngoal (1 subgoal):\n 1. moebius_mu n = (- (1::'a)) ^ size (prime_factorization n)", "by (simp add: moebius_mu_squarefree_eq[OF assms])"], ["proof (state)\nthis:\n  moebius_mu n = (- (1::'a)) ^ size (prime_factorization n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_moebius_mu_divisors:\n  assumes \"n > 1\"\n  shows   \"(\\<Sum>d | d dvd n. moebius_mu d) = (0 :: 'a :: comm_ring_1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "have \"(\\<Sum>d | d dvd n. moebius_mu d :: int) = \n          (\\<Sum>d \\<in> Prod ` {P. P \\<subseteq> prime_factors n}. moebius_mu d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) =\n    sum moebius_mu (Prod ` {P. P \\<subseteq> prime_factors n})", "proof (rule sum.mono_neutral_right; safe?)"], ["proof (state)\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "fix A"], ["proof (state)\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "assume A: \"A \\<subseteq> prime_factors n\""], ["proof (state)\nthis:\n  A \\<subseteq> prime_factors n\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "from A"], ["proof (chain)\npicking this:\n  A \\<subseteq> prime_factors n", "have [simp]: \"finite A\""], ["proof (prove)\nusing this:\n  A \\<subseteq> prime_factors n\n\ngoal (1 subgoal):\n 1. finite A", "by (rule finite_subset) auto"], ["proof (state)\nthis:\n  finite A\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "from A"], ["proof (chain)\npicking this:\n  A \\<subseteq> prime_factors n", "have A': \"x > 0\" \"prime x\" if \"x \\<in> A\" for x"], ["proof (prove)\nusing this:\n  A \\<subseteq> prime_factors n\n\ngoal (1 subgoal):\n 1. 0 < x &&& prime x", "using that"], ["proof (prove)\nusing this:\n  A \\<subseteq> prime_factors n\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. 0 < x &&& prime x", "by (auto simp: prime_factors_multiplicity prime_gt_0_nat)"], ["proof (state)\nthis:\n  ?x \\<in> A \\<Longrightarrow> 0 < ?x\n  ?x \\<in> A \\<Longrightarrow> prime ?x\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "from A'"], ["proof (chain)\npicking this:\n  ?x \\<in> A \\<Longrightarrow> 0 < ?x\n  ?x \\<in> A \\<Longrightarrow> prime ?x", "have A_nz: \"\\<Prod>A \\<noteq> 0\""], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> 0 < ?x\n  ?x \\<in> A \\<Longrightarrow> prime ?x\n\ngoal (1 subgoal):\n 1. \\<Prod>A \\<noteq> 0", "by (intro notI) auto"], ["proof (state)\nthis:\n  \\<Prod>A \\<noteq> 0\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "from A'"], ["proof (chain)\npicking this:\n  ?x \\<in> A \\<Longrightarrow> 0 < ?x\n  ?x \\<in> A \\<Longrightarrow> prime ?x", "have \"prime_factorization (\\<Prod>A) = sum prime_factorization A\""], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> 0 < ?x\n  ?x \\<in> A \\<Longrightarrow> prime ?x\n\ngoal (1 subgoal):\n 1. prime_factorization (\\<Prod>A) = sum prime_factorization A", "by (subst prime_factorization_prod) (auto dest: finite_subset)"], ["proof (state)\nthis:\n  prime_factorization (\\<Prod>A) = sum prime_factorization A\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "also"], ["proof (state)\nthis:\n  prime_factorization (\\<Prod>A) = sum prime_factorization A\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "from A'"], ["proof (chain)\npicking this:\n  ?x \\<in> A \\<Longrightarrow> 0 < ?x\n  ?x \\<in> A \\<Longrightarrow> prime ?x", "have \"\\<dots> = sum (\\<lambda>x. {#x#}) A\""], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> 0 < ?x\n  ?x \\<in> A \\<Longrightarrow> prime ?x\n\ngoal (1 subgoal):\n 1. sum prime_factorization A = (\\<Sum>x\\<in>A. {#x#})", "by (intro sum.cong refl) (auto simp: prime_factorization_prime)"], ["proof (state)\nthis:\n  sum prime_factorization A = (\\<Sum>x\\<in>A. {#x#})\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "also"], ["proof (state)\nthis:\n  sum prime_factorization A = (\\<Sum>x\\<in>A. {#x#})\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "have \"\\<dots> = mset_set A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>A. {#x#}) = mset_set A", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>A. {#x#}) = mset_set A\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>A. {#x#}) = mset_set A\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "from A"], ["proof (chain)\npicking this:\n  A \\<subseteq> prime_factors n", "have \"\\<dots> \\<subseteq># mset_set (prime_factors n)\""], ["proof (prove)\nusing this:\n  A \\<subseteq> prime_factors n\n\ngoal (1 subgoal):\n 1. mset_set A \\<subseteq># mset_set (prime_factors n)", "by (rule subset_imp_msubset_mset_set) simp_all"], ["proof (state)\nthis:\n  mset_set A \\<subseteq># mset_set (prime_factors n)\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "also"], ["proof (state)\nthis:\n  mset_set A \\<subseteq># mset_set (prime_factors n)\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "have \"\\<dots> \\<subseteq># prime_factorization n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset_set (prime_factors n) \\<subseteq># prime_factorization n", "by (rule mset_set_set_mset_msubset)"], ["proof (state)\nthis:\n  mset_set (prime_factors n) \\<subseteq># prime_factorization n\n\ngoal (3 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>x A.\n       A \\<subseteq> prime_factors n \\<Longrightarrow> \\<Prod>A dvd n\n 3. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "finally"], ["proof (chain)\npicking this:\n  prime_factorization (\\<Prod>A) \\<subseteq># prime_factorization n", "show \"\\<Prod>A dvd n\""], ["proof (prove)\nusing this:\n  prime_factorization (\\<Prod>A) \\<subseteq># prime_factorization n\n\ngoal (1 subgoal):\n 1. \\<Prod>A dvd n", "using A_nz"], ["proof (prove)\nusing this:\n  prime_factorization (\\<Prod>A) \\<subseteq># prime_factorization n\n  \\<Prod>A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<Prod>A dvd n", "by (intro prime_factorization_subset_imp_dvd) auto"], ["proof (state)\nthis:\n  \\<Prod>A dvd n\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "assume x: \"x \\<notin> Prod ` {P. P \\<subseteq> prime_factors n}\" \"x dvd n\""], ["proof (state)\nthis:\n  x \\<notin> Prod ` {P. P \\<subseteq> prime_factors n}\n  x dvd n\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "from x assms"], ["proof (chain)\npicking this:\n  x \\<notin> Prod ` {P. P \\<subseteq> prime_factors n}\n  x dvd n\n  1 < n", "have [simp]: \"x > 0\""], ["proof (prove)\nusing this:\n  x \\<notin> Prod ` {P. P \\<subseteq> prime_factors n}\n  x dvd n\n  1 < n\n\ngoal (1 subgoal):\n 1. 0 < x", "by (auto intro!: Nat.gr0I)"], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "{"], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "assume nz: \"moebius_mu x \\<noteq> 0\""], ["proof (state)\nthis:\n  moebius_mu x \\<noteq> (0::'b)\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "have \"(\\<Prod>(set_mset (prime_factorization x))) = (\\<Prod>p\\<in>prime_factors x. p ^ multiplicity p x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Prod>(prime_factors x) =\n    (\\<Prod>p\\<in>prime_factors x. p ^ multiplicity p x)", "using nz"], ["proof (prove)\nusing this:\n  moebius_mu x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<Prod>(prime_factors x) =\n    (\\<Prod>p\\<in>prime_factors x. p ^ multiplicity p x)", "by (intro prod.cong refl)\n                    (auto simp: moebius_mu_eq_zero_iff squarefree_factorial_semiring')"], ["proof (state)\nthis:\n  \\<Prod>(prime_factors x) =\n  (\\<Prod>p\\<in>prime_factors x. p ^ multiplicity p x)\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "also"], ["proof (state)\nthis:\n  \\<Prod>(prime_factors x) =\n  (\\<Prod>p\\<in>prime_factors x. p ^ multiplicity p x)\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "have \"\\<dots> = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors x. p ^ multiplicity p x) = x", "by (intro Primes.prime_factorization_nat [symmetric]) auto"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors x. p ^ multiplicity p x) = x\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "finally"], ["proof (chain)\npicking this:\n  \\<Prod>(prime_factors x) = x", "have \"x = \\<Prod>(prime_factors x)\" \"prime_factors x \\<subseteq> prime_factors n\""], ["proof (prove)\nusing this:\n  \\<Prod>(prime_factors x) = x\n\ngoal (1 subgoal):\n 1. x = \\<Prod>(prime_factors x) &&&\n    prime_factors x \\<subseteq> prime_factors n", "using dvd_prime_factors[of n x] assms \\<open>x dvd n\\<close>"], ["proof (prove)\nusing this:\n  \\<Prod>(prime_factors x) = x\n  \\<lbrakk>n \\<noteq> 0; x dvd n\\<rbrakk>\n  \\<Longrightarrow> prime_factors x \\<subseteq> prime_factors n\n  1 < n\n  x dvd n\n\ngoal (1 subgoal):\n 1. x = \\<Prod>(prime_factors x) &&&\n    prime_factors x \\<subseteq> prime_factors n", "by auto"], ["proof (state)\nthis:\n  x = \\<Prod>(prime_factors x)\n  prime_factors x \\<subseteq> prime_factors n\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "hence \"x \\<in> Prod ` {P. P \\<subseteq> prime_factors n}\""], ["proof (prove)\nusing this:\n  x = \\<Prod>(prime_factors x)\n  prime_factors x \\<subseteq> prime_factors n\n\ngoal (1 subgoal):\n 1. x \\<in> Prod ` {P. P \\<subseteq> prime_factors n}", "by blast"], ["proof (state)\nthis:\n  x \\<in> Prod ` {P. P \\<subseteq> prime_factors n}\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "with x(1)"], ["proof (chain)\npicking this:\n  x \\<notin> Prod ` {P. P \\<subseteq> prime_factors n}\n  x \\<in> Prod ` {P. P \\<subseteq> prime_factors n}", "have False"], ["proof (prove)\nusing this:\n  x \\<notin> Prod ` {P. P \\<subseteq> prime_factors n}\n  x \\<in> Prod ` {P. P \\<subseteq> prime_factors n}\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "}"], ["proof (state)\nthis:\n  moebius_mu x \\<noteq> (0::?'b) \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. finite {d. d dvd n}\n 2. \\<And>i.\n       \\<lbrakk>i \\<notin> Prod ` {P. P \\<subseteq> prime_factors n};\n        i dvd n\\<rbrakk>\n       \\<Longrightarrow> moebius_mu i = 0", "thus \"moebius_mu x = 0\""], ["proof (prove)\nusing this:\n  moebius_mu x \\<noteq> (0::?'b) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. moebius_mu x = (0::'b)", "by blast"], ["proof (state)\nthis:\n  moebius_mu x = (0::?'b1)\n\ngoal (1 subgoal):\n 1. finite {d. d dvd n}", "qed (insert assms, auto)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. moebius_mu d) =\n  sum moebius_mu (Prod ` {P. P \\<subseteq> prime_factors n})\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. moebius_mu d) =\n  sum moebius_mu (Prod ` {P. P \\<subseteq> prime_factors n})\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "have \"\\<dots> = (\\<Sum>P | P \\<subseteq> prime_factors n. moebius_mu (\\<Prod>P))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum moebius_mu (Prod ` {P. P \\<subseteq> prime_factors n}) =\n    (\\<Sum>P | P \\<subseteq> prime_factors n. moebius_mu (\\<Prod>P))", "by (subst sum.reindex) (auto intro!: inj_on_Prod_primes dest: finite_subset)"], ["proof (state)\nthis:\n  sum moebius_mu (Prod ` {P. P \\<subseteq> prime_factors n}) =\n  (\\<Sum>P | P \\<subseteq> prime_factors n. moebius_mu (\\<Prod>P))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "also"], ["proof (state)\nthis:\n  sum moebius_mu (Prod ` {P. P \\<subseteq> prime_factors n}) =\n  (\\<Sum>P | P \\<subseteq> prime_factors n. moebius_mu (\\<Prod>P))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "have \"\\<dots> = (\\<Sum>P | P \\<subseteq> prime_factors n. (-1) ^ card P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>P | P \\<subseteq> prime_factors n. moebius_mu (\\<Prod>P)) =\n    (\\<Sum>P | P \\<subseteq> prime_factors n. (- 1) ^ card P)", "proof (intro sum.cong refl)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. P \\<subseteq> prime_factors n} \\<Longrightarrow>\n       moebius_mu (\\<Prod>x) = (- 1) ^ card x", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. P \\<subseteq> prime_factors n} \\<Longrightarrow>\n       moebius_mu (\\<Prod>x) = (- 1) ^ card x", "assume P: \"P \\<in> {P. P \\<subseteq> prime_factors n}\""], ["proof (state)\nthis:\n  P \\<in> {P. P \\<subseteq> prime_factors n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. P \\<subseteq> prime_factors n} \\<Longrightarrow>\n       moebius_mu (\\<Prod>x) = (- 1) ^ card x", "hence [simp]: \"finite P\""], ["proof (prove)\nusing this:\n  P \\<in> {P. P \\<subseteq> prime_factors n}\n\ngoal (1 subgoal):\n 1. finite P", "by (auto dest: finite_subset)"], ["proof (state)\nthis:\n  finite P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. P \\<subseteq> prime_factors n} \\<Longrightarrow>\n       moebius_mu (\\<Prod>x) = (- 1) ^ card x", "from P"], ["proof (chain)\npicking this:\n  P \\<in> {P. P \\<subseteq> prime_factors n}", "have prime: \"prime p\" if \"p \\<in> P\" for p"], ["proof (prove)\nusing this:\n  P \\<in> {P. P \\<subseteq> prime_factors n}\n\ngoal (1 subgoal):\n 1. prime p", "using that"], ["proof (prove)\nusing this:\n  P \\<in> {P. P \\<subseteq> prime_factors n}\n  p \\<in> P\n\ngoal (1 subgoal):\n 1. prime p", "by (auto simp: prime_factors_dvd)"], ["proof (state)\nthis:\n  ?p \\<in> P \\<Longrightarrow> prime ?p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. P \\<subseteq> prime_factors n} \\<Longrightarrow>\n       moebius_mu (\\<Prod>x) = (- 1) ^ card x", "hence \"squarefree (\\<Prod>P)\""], ["proof (prove)\nusing this:\n  ?p \\<in> P \\<Longrightarrow> prime ?p\n\ngoal (1 subgoal):\n 1. squarefree (\\<Prod>P)", "by (intro squarefree_prod_coprime prime_imp_coprime squarefree_prime)\n         (auto simp: primes_dvd_imp_eq)"], ["proof (state)\nthis:\n  squarefree (\\<Prod>P)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. P \\<subseteq> prime_factors n} \\<Longrightarrow>\n       moebius_mu (\\<Prod>x) = (- 1) ^ card x", "hence \"moebius_mu (\\<Prod>P) = (-1) ^ card (prime_factors (\\<Prod>P))\""], ["proof (prove)\nusing this:\n  squarefree (\\<Prod>P)\n\ngoal (1 subgoal):\n 1. moebius_mu (\\<Prod>P) = (- (1::'b)) ^ card (prime_factors (\\<Prod>P))", "by (rule moebius_mu_squarefree_eq)"], ["proof (state)\nthis:\n  moebius_mu (\\<Prod>P) = (- (1::?'b1)) ^ card (prime_factors (\\<Prod>P))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. P \\<subseteq> prime_factors n} \\<Longrightarrow>\n       moebius_mu (\\<Prod>x) = (- 1) ^ card x", "also"], ["proof (state)\nthis:\n  moebius_mu (\\<Prod>P) = (- (1::?'b1)) ^ card (prime_factors (\\<Prod>P))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. P \\<subseteq> prime_factors n} \\<Longrightarrow>\n       moebius_mu (\\<Prod>x) = (- 1) ^ card x", "from P"], ["proof (chain)\npicking this:\n  P \\<in> {P. P \\<subseteq> prime_factors n}", "have \"prime_factors (\\<Prod>P) = P\""], ["proof (prove)\nusing this:\n  P \\<in> {P. P \\<subseteq> prime_factors n}\n\ngoal (1 subgoal):\n 1. prime_factors (\\<Prod>P) = P", "by (subst prime_factors_prod) (auto simp: prime_factorization_prime prime)"], ["proof (state)\nthis:\n  prime_factors (\\<Prod>P) = P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {P. P \\<subseteq> prime_factors n} \\<Longrightarrow>\n       moebius_mu (\\<Prod>x) = (- 1) ^ card x", "finally"], ["proof (chain)\npicking this:\n  moebius_mu (\\<Prod>P) = (- (1::?'b2)) ^ card P", "show  \"moebius_mu (\\<Prod>P) = (-1) ^ card P\""], ["proof (prove)\nusing this:\n  moebius_mu (\\<Prod>P) = (- (1::?'b2)) ^ card P\n\ngoal (1 subgoal):\n 1. moebius_mu (\\<Prod>P) = (- (1::'b)) ^ card P", "."], ["proof (state)\nthis:\n  moebius_mu (\\<Prod>P) = (- (1::?'b2)) ^ card P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>P | P \\<subseteq> prime_factors n. moebius_mu (\\<Prod>P)) =\n  (\\<Sum>P | P \\<subseteq> prime_factors n. (- 1) ^ card P)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>P | P \\<subseteq> prime_factors n. moebius_mu (\\<Prod>P)) =\n  (\\<Sum>P | P \\<subseteq> prime_factors n. (- 1) ^ card P)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "have \"{P. P \\<subseteq> prime_factors n} = \n               {P. P \\<subseteq> prime_factors n \\<and> even (card P)} \\<union> {P. P \\<subseteq> prime_factors n \\<and> odd (card P)}\"\n    (is \"_ = ?A \\<union> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {P. P \\<subseteq> prime_factors n} =\n    {P. P \\<subseteq> prime_factors n \\<and> even (card P)} \\<union>\n    {P. P \\<subseteq> prime_factors n \\<and> odd (card P)}", "by blast"], ["proof (state)\nthis:\n  {P. P \\<subseteq> prime_factors n} =\n  {P. P \\<subseteq> prime_factors n \\<and> even (card P)} \\<union>\n  {P. P \\<subseteq> prime_factors n \\<and> odd (card P)}\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "also"], ["proof (state)\nthis:\n  {P. P \\<subseteq> prime_factors n} =\n  {P. P \\<subseteq> prime_factors n \\<and> even (card P)} \\<union>\n  {P. P \\<subseteq> prime_factors n \\<and> odd (card P)}\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "have \"(\\<Sum>P \\<in> \\<dots>. (-1) ^ card P) = (\\<Sum>P \\<in> ?A. (-1) ^ card P) + (\\<Sum>P \\<in> ?B. (-1) ^ card P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>P\\<in>{P. P \\<subseteq> prime_factors n \\<and>\n                     even (card P)} \\<union>\n                 {P. P \\<subseteq> prime_factors n \\<and> odd (card P)}.\n       (- (1::'b)) ^ card P) =\n    (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P).\n       (- (1::'b)) ^ card P) +\n    (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P).\n       (- (1::'b)) ^ card P)", "by (intro sum.union_disjoint) auto"], ["proof (state)\nthis:\n  (\\<Sum>P\\<in>{P. P \\<subseteq> prime_factors n \\<and>\n                   even (card P)} \\<union>\n               {P. P \\<subseteq> prime_factors n \\<and> odd (card P)}.\n     (- (1::?'b1)) ^ card P) =\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P).\n     (- (1::?'b1)) ^ card P) +\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P).\n     (- (1::?'b1)) ^ card P)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>P\\<in>{P. P \\<subseteq> prime_factors n \\<and>\n                   even (card P)} \\<union>\n               {P. P \\<subseteq> prime_factors n \\<and> odd (card P)}.\n     (- (1::?'b1)) ^ card P) =\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P).\n     (- (1::?'b1)) ^ card P) +\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P).\n     (- (1::?'b1)) ^ card P)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "have \"(\\<Sum>P \\<in> ?A. (-1) ^ card P :: int) = (\\<Sum>P \\<in> ?A. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P).\n       (- 1) ^ card P) =\n    (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P). 1)", "by (intro sum.cong refl) auto"], ["proof (state)\nthis:\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P).\n     (- 1) ^ card P) =\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P). 1)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P).\n     (- 1) ^ card P) =\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P). 1)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "have \"\\<dots> = int (card ?A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P). 1) =\n    int (card {P. P \\<subseteq> prime_factors n \\<and> even (card P)})", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P). 1) =\n  int (card {P. P \\<subseteq> prime_factors n \\<and> even (card P)})\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> even (card P). 1) =\n  int (card {P. P \\<subseteq> prime_factors n \\<and> even (card P)})\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "have \"(\\<Sum>P \\<in> ?B. (-1) ^ card P :: int) = (\\<Sum>P \\<in> ?B. -1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P).\n       (- 1) ^ card P) =\n    (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P). - 1)", "by (intro sum.cong refl) auto"], ["proof (state)\nthis:\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P).\n     (- 1) ^ card P) =\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P). - 1)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P).\n     (- 1) ^ card P) =\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P). - 1)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "have \"\\<dots> = -int (card ?B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P). - 1) =\n    - int (card {P. P \\<subseteq> prime_factors n \\<and> odd (card P)})", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P). - 1) =\n  - int (card {P. P \\<subseteq> prime_factors n \\<and> odd (card P)})\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>P | P \\<subseteq> prime_factors n \\<and> odd (card P). - 1) =\n  - int (card {P. P \\<subseteq> prime_factors n \\<and> odd (card P)})\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "have \"card ?B = card ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {P. P \\<subseteq> prime_factors n \\<and> odd (card P)} =\n    card {P. P \\<subseteq> prime_factors n \\<and> even (card P)}", "by (rule card_even_odd_subset [symmetric]) \n       (insert assms, auto simp: prime_factorization_empty_iff)"], ["proof (state)\nthis:\n  card {P. P \\<subseteq> prime_factors n \\<and> odd (card P)} =\n  card {P. P \\<subseteq> prime_factors n \\<and> even (card P)}\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "also"], ["proof (state)\nthis:\n  card {P. P \\<subseteq> prime_factors n \\<and> odd (card P)} =\n  card {P. P \\<subseteq> prime_factors n \\<and> even (card P)}\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "have \"int (card ?A) + (- int (card ?A)) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (card {P. P \\<subseteq> prime_factors n \\<and> even (card P)}) +\n    - int (card {P. P \\<subseteq> prime_factors n \\<and> even (card P)}) =\n    0", "by simp"], ["proof (state)\nthis:\n  int (card {P. P \\<subseteq> prime_factors n \\<and> even (card P)}) +\n  - int (card {P. P \\<subseteq> prime_factors n \\<and> even (card P)}) =\n  0\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>d | d dvd n. moebius_mu d) = 0", "have \"(\\<Sum>d | d dvd n. of_int (moebius_mu d) :: 'a) = 0\""], ["proof (prove)\nusing this:\n  (\\<Sum>d | d dvd n. moebius_mu d) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. of_int (moebius_mu d)) = (0::'a)", "unfolding of_int_sum [symmetric]"], ["proof (prove)\nusing this:\n  (\\<Sum>d | d dvd n. moebius_mu d) = 0\n\ngoal (1 subgoal):\n 1. of_int (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "by (simp only: of_int_0)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. of_int (moebius_mu d)) = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>d | d dvd n. of_int (moebius_mu d)) = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. moebius_mu d) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_moebius_mu_divisors':\n  \"(\\<Sum>d | d dvd n. moebius_mu d) = (if n = 1 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (if n = 1 then 1::'a else (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (if n = 1 then 1::'a else (0::'a))", "have \"n = 0 \\<or> n = 1 \\<or> n > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = 0 \\<or> n = 1 \\<or> 1 < n", "by force"], ["proof (state)\nthis:\n  n = 0 \\<or> n = 1 \\<or> 1 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (if n = 1 then 1::'a else (0::'a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0 \\<or> n = 1 \\<or> 1 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (if n = 1 then 1::'a else (0::'a))", "using sum_moebius_mu_divisors[of n]"], ["proof (prove)\nusing this:\n  n = 0 \\<or> n = 1 \\<or> 1 < n\n  1 < n \\<Longrightarrow> (\\<Sum>d | d dvd n. moebius_mu d) = (0::?'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = (if n = 1 then 1::'a else (0::'a))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. moebius_mu d) = (if n = 1 then 1::'a else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_zeta_times_moebius_mu: \"fds_zeta * fds moebius_mu = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_zeta * fds moebius_mu = 1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_zeta * fds moebius_mu) n = fds_nth 1 n", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_zeta * fds moebius_mu) n = fds_nth 1 n", "assume n: \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_zeta * fds moebius_mu) n = fds_nth 1 n", "from n"], ["proof (chain)\npicking this:\n  0 < n", "have \"fds_nth (fds_zeta * fds moebius_mu :: 'a fds) n = (\\<Sum>d | d dvd n. moebius_mu d)\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_zeta * fds moebius_mu) n =\n    (\\<Sum>d | d dvd n. moebius_mu d)", "unfolding fds_nth_mult dirichlet_prod_altdef1"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n.\n       fds_nth fds_zeta (n div d) * fds_nth (fds moebius_mu) d) =\n    (\\<Sum>d | d dvd n. moebius_mu d)", "by (intro sum.cong refl) (auto simp: fds_nth_fds elim: dvdE)"], ["proof (state)\nthis:\n  fds_nth (fds_zeta * fds moebius_mu) n = (\\<Sum>d | d dvd n. moebius_mu d)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_zeta * fds moebius_mu) n = fds_nth 1 n", "also"], ["proof (state)\nthis:\n  fds_nth (fds_zeta * fds moebius_mu) n = (\\<Sum>d | d dvd n. moebius_mu d)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_zeta * fds moebius_mu) n = fds_nth 1 n", "have \"\\<dots> = fds_nth 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d) = fds_nth 1 n", "by (simp add: sum_moebius_mu_divisors')"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. moebius_mu d) = fds_nth 1 n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_zeta * fds moebius_mu) n = fds_nth 1 n", "finally"], ["proof (chain)\npicking this:\n  fds_nth (fds_zeta * fds moebius_mu) n = fds_nth 1 n", "show \"fds_nth (fds_zeta * fds moebius_mu :: 'a fds) n = fds_nth 1 n\""], ["proof (prove)\nusing this:\n  fds_nth (fds_zeta * fds moebius_mu) n = fds_nth 1 n\n\ngoal (1 subgoal):\n 1. fds_nth (fds_zeta * fds moebius_mu) n = fds_nth 1 n", "."], ["proof (state)\nthis:\n  fds_nth (fds_zeta * fds moebius_mu) n = fds_nth 1 n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_moebius_inverse_zeta:\n  \"fds moebius_mu = inverse (fds_zeta :: 'a :: field fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds moebius_mu = inverse fds_zeta", "by (rule fds_right_inverse_unique) (simp add: fds_zeta_times_moebius_mu)"], ["", "lemma moebius_mu_formula_real: \"(moebius_mu n :: real) = dirichlet_inverse (\\<lambda>_. 1) 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "have \"moebius_mu n = (fds_nth (fds moebius_mu) n :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu n = fds_nth (fds moebius_mu) n", "by simp"], ["proof (state)\nthis:\n  moebius_mu n = fds_nth (fds moebius_mu) n\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "also"], ["proof (state)\nthis:\n  moebius_mu n = fds_nth (fds moebius_mu) n\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "have \"fds moebius_mu = (inverse fds_zeta :: real fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds moebius_mu = inverse fds_zeta", "by (fact fds_moebius_inverse_zeta)"], ["proof (state)\nthis:\n  fds moebius_mu = inverse fds_zeta\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "also"], ["proof (state)\nthis:\n  fds moebius_mu = inverse fds_zeta\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "have \"fds_nth \\<dots> n = dirichlet_inverse (fds_nth fds_zeta) 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (inverse fds_zeta) n = dirichlet_inverse (fds_nth fds_zeta) 1 n", "unfolding fds_nth_inverse"], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse (fds_nth fds_zeta) (inverse (fds_nth fds_zeta 1)) n =\n    dirichlet_inverse (fds_nth fds_zeta) 1 n", "by simp"], ["proof (state)\nthis:\n  fds_nth (inverse fds_zeta) n = dirichlet_inverse (fds_nth fds_zeta) 1 n\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "also"], ["proof (state)\nthis:\n  fds_nth (inverse fds_zeta) n = dirichlet_inverse (fds_nth fds_zeta) 1 n\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "have \"\\<dots> = dirichlet_inverse (\\<lambda>_. 1) 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse (fds_nth fds_zeta) 1 n =\n    dirichlet_inverse (\\<lambda>_. 1) 1 n", "by (rule dirichlet_inverse_cong) simp_all"], ["proof (state)\nthis:\n  dirichlet_inverse (fds_nth fds_zeta) 1 n =\n  dirichlet_inverse (\\<lambda>_. 1) 1 n\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "finally"], ["proof (chain)\npicking this:\n  moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "show ?thesis"], ["proof (prove)\nusing this:\n  moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "."], ["proof (state)\nthis:\n  moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma moebius_mu_formula_int: \"moebius_mu n = dirichlet_inverse (\\<lambda>_. 1 :: int) 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "have \"real_of_int (moebius_mu n) = moebius_mu n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real_of_int (moebius_mu n) = moebius_mu n", "by simp"], ["proof (state)\nthis:\n  real_of_int (moebius_mu n) = moebius_mu n\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "also"], ["proof (state)\nthis:\n  real_of_int (moebius_mu n) = moebius_mu n\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "have \"\\<dots> = dirichlet_inverse (\\<lambda>_. 1) 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "by (fact moebius_mu_formula_real)"], ["proof (state)\nthis:\n  moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "also"], ["proof (state)\nthis:\n  moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "have \"\\<dots> = real_of_int (dirichlet_inverse (\\<lambda>_. 1) 1 n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse (\\<lambda>_. 1) 1 n =\n    real_of_int (dirichlet_inverse (\\<lambda>_. 1) 1 n)", "by (induction n rule: dirichlet_inverse_induct) (simp_all add: dirichlet_inverse_gt_1)"], ["proof (state)\nthis:\n  dirichlet_inverse (\\<lambda>_. 1) 1 n =\n  real_of_int (dirichlet_inverse (\\<lambda>_. 1) 1 n)\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "finally"], ["proof (chain)\npicking this:\n  real_of_int (moebius_mu n) =\n  real_of_int (dirichlet_inverse (\\<lambda>_. 1) 1 n)", "show ?thesis"], ["proof (prove)\nusing this:\n  real_of_int (moebius_mu n) =\n  real_of_int (dirichlet_inverse (\\<lambda>_. 1) 1 n)\n\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n", "by (subst (asm) of_int_eq_iff)"], ["proof (state)\nthis:\n  moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma moebius_mu_formula: \"moebius_mu n = dirichlet_inverse (\\<lambda>_. 1) 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu n = dirichlet_inverse (\\<lambda>_. 1::'a) (1::'a) n", "by (subst of_int_moebius_mu [symmetric], subst moebius_mu_formula_int)\n     (simp add: of_int_dirichlet_inverse)"], ["", "interpretation moebius_mu: multiplicative_function moebius_mu"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function moebius_mu", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicative_function moebius_mu", "have \"multiplicative_function (dirichlet_inverse (\\<lambda>n. if n = 0 then 0 else 1 :: 'a) 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function\n     (dirichlet_inverse (\\<lambda>n. if n = 0 then 0::'a else (1::'a))\n       (1::'a))", "by (rule multiplicative_dirichlet_inverse, standard) simp_all"], ["proof (state)\nthis:\n  multiplicative_function\n   (dirichlet_inverse (\\<lambda>n. if n = 0 then 0::'a else (1::'a))\n     (1::'a))\n\ngoal (1 subgoal):\n 1. multiplicative_function moebius_mu", "also"], ["proof (state)\nthis:\n  multiplicative_function\n   (dirichlet_inverse (\\<lambda>n. if n = 0 then 0::'a else (1::'a))\n     (1::'a))\n\ngoal (1 subgoal):\n 1. multiplicative_function moebius_mu", "have \"dirichlet_inverse (\\<lambda>n. if n = 0 then 0 else 1 :: 'a) 1 = moebius_mu\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse (\\<lambda>n. if n = 0 then 0::'a else (1::'a))\n     (1::'a) =\n    moebius_mu", "by (auto simp: fun_eq_iff moebius_mu_formula)"], ["proof (state)\nthis:\n  dirichlet_inverse (\\<lambda>n. if n = 0 then 0::'a else (1::'a)) (1::'a) =\n  moebius_mu\n\ngoal (1 subgoal):\n 1. multiplicative_function moebius_mu", "finally"], ["proof (chain)\npicking this:\n  multiplicative_function moebius_mu", "show \"multiplicative_function (moebius_mu :: nat \\<Rightarrow> 'a)\""], ["proof (prove)\nusing this:\n  multiplicative_function moebius_mu\n\ngoal (1 subgoal):\n 1. multiplicative_function moebius_mu", "."], ["proof (state)\nthis:\n  multiplicative_function moebius_mu\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation moebius_mu: \n  multiplicative_function' moebius_mu \"\\<lambda>p k. if k = 1 then -1 else 0\" \"\\<lambda>_. -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function' moebius_mu\n     (\\<lambda>p k. if k = 1 then - (1::'a) else (0::'a))\n     (\\<lambda>_. - (1::'a))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> moebius_mu (p ^ k) =\n                         (if k = 1 then - (1::'a) else (0::'a))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       (if 1 = 1 then - (1::'a) else (0::'a)) = - (1::'a)", "fix p k :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> moebius_mu (p ^ k) =\n                         (if k = 1 then - (1::'a) else (0::'a))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       (if 1 = 1 then - (1::'a) else (0::'a)) = - (1::'a)", "assume \"prime p\" \"k > 0\""], ["proof (state)\nthis:\n  prime p\n  0 < k\n\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> moebius_mu (p ^ k) =\n                         (if k = 1 then - (1::'a) else (0::'a))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       (if 1 = 1 then - (1::'a) else (0::'a)) = - (1::'a)", "moreover"], ["proof (state)\nthis:\n  prime p\n  0 < k\n\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> moebius_mu (p ^ k) =\n                         (if k = 1 then - (1::'a) else (0::'a))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       (if 1 = 1 then - (1::'a) else (0::'a)) = - (1::'a)", "from this"], ["proof (chain)\npicking this:\n  prime p\n  0 < k", "have \"moebius_mu p = -1\""], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. moebius_mu p = - (1::'b)", "by (simp add: moebius_mu_def prime_factorization_prime squarefree_prime)"], ["proof (state)\nthis:\n  moebius_mu p = - (1::?'b1)\n\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> moebius_mu (p ^ k) =\n                         (if k = 1 then - (1::'a) else (0::'a))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       (if 1 = 1 then - (1::'a) else (0::'a)) = - (1::'a)", "ultimately"], ["proof (chain)\npicking this:\n  prime p\n  0 < k\n  moebius_mu p = - (1::?'b1)", "show \"moebius_mu (p ^ k) = (if k = 1 then - 1 else 0)\""], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n  moebius_mu p = - (1::?'b1)\n\ngoal (1 subgoal):\n 1. moebius_mu (p ^ k) = (if k = 1 then - (1::'b) else (0::'b))", "by (auto simp: moebius_mu_power')"], ["proof (state)\nthis:\n  moebius_mu (p ^ k) = (if k = 1 then - (1::?'b2) else (0::?'b2))\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       prime p \\<Longrightarrow>\n       (if 1 = 1 then - (1::'a) else (0::'a)) = - (1::'a)", "qed auto"], ["", "lemma moebius_mu_2 [simp]: \"moebius_mu 2 = -1\"\n  and moebius_mu_3 [simp]: \"moebius_mu 3 = -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu 2 = - (1::'a) &&& moebius_mu 3 = - (1::'b)", "by (rule moebius_mu.prime; simp)+"], ["", "lemma moebius_mu_code [code]:\n  \"moebius_mu n = of_int (dirichlet_inverse (\\<lambda>_. 1 :: int) 1 n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. moebius_mu n = of_int (dirichlet_inverse (\\<lambda>_. 1) 1 n)", "by (subst moebius_mu_formula_int [symmetric]) simp"], ["", "lemma fds_moebius_inversion: \"f = fds moebius_mu * g \\<longleftrightarrow> g = f * fds_zeta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = fds moebius_mu * g) = (g = f * fds_zeta)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. f = fds moebius_mu * g \\<Longrightarrow> g = f * fds_zeta\n 2. g = f * fds_zeta \\<Longrightarrow> f = fds moebius_mu * g", "assume \"g = f * fds_zeta\""], ["proof (state)\nthis:\n  g = f * fds_zeta\n\ngoal (2 subgoals):\n 1. f = fds moebius_mu * g \\<Longrightarrow> g = f * fds_zeta\n 2. g = f * fds_zeta \\<Longrightarrow> f = fds moebius_mu * g", "hence \"g * fds moebius_mu = f * (fds_zeta * fds moebius_mu)\""], ["proof (prove)\nusing this:\n  g = f * fds_zeta\n\ngoal (1 subgoal):\n 1. g * fds moebius_mu = f * (fds_zeta * fds moebius_mu)", "by (simp add: mult_ac)"], ["proof (state)\nthis:\n  g * fds moebius_mu = f * (fds_zeta * fds moebius_mu)\n\ngoal (2 subgoals):\n 1. f = fds moebius_mu * g \\<Longrightarrow> g = f * fds_zeta\n 2. g = f * fds_zeta \\<Longrightarrow> f = fds moebius_mu * g", "also"], ["proof (state)\nthis:\n  g * fds moebius_mu = f * (fds_zeta * fds moebius_mu)\n\ngoal (2 subgoals):\n 1. f = fds moebius_mu * g \\<Longrightarrow> g = f * fds_zeta\n 2. g = f * fds_zeta \\<Longrightarrow> f = fds moebius_mu * g", "have \"\\<dots> = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * (fds_zeta * fds moebius_mu) = f", "by (simp add: fds_zeta_times_moebius_mu)"], ["proof (state)\nthis:\n  f * (fds_zeta * fds moebius_mu) = f\n\ngoal (2 subgoals):\n 1. f = fds moebius_mu * g \\<Longrightarrow> g = f * fds_zeta\n 2. g = f * fds_zeta \\<Longrightarrow> f = fds moebius_mu * g", "finally"], ["proof (chain)\npicking this:\n  g * fds moebius_mu = f", "show \"f = fds moebius_mu * g\""], ["proof (prove)\nusing this:\n  g * fds moebius_mu = f\n\ngoal (1 subgoal):\n 1. f = fds moebius_mu * g", "by (simp add: mult_ac)"], ["proof (state)\nthis:\n  f = fds moebius_mu * g\n\ngoal (1 subgoal):\n 1. f = fds moebius_mu * g \\<Longrightarrow> g = f * fds_zeta", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f = fds moebius_mu * g \\<Longrightarrow> g = f * fds_zeta", "assume \"f = fds moebius_mu * g\""], ["proof (state)\nthis:\n  f = fds moebius_mu * g\n\ngoal (1 subgoal):\n 1. f = fds moebius_mu * g \\<Longrightarrow> g = f * fds_zeta", "hence \"fds_zeta * f = fds_zeta * fds moebius_mu * g\""], ["proof (prove)\nusing this:\n  f = fds moebius_mu * g\n\ngoal (1 subgoal):\n 1. fds_zeta * f = fds_zeta * fds moebius_mu * g", "by (simp add: mult_ac)"], ["proof (state)\nthis:\n  fds_zeta * f = fds_zeta * fds moebius_mu * g\n\ngoal (1 subgoal):\n 1. f = fds moebius_mu * g \\<Longrightarrow> g = f * fds_zeta", "also"], ["proof (state)\nthis:\n  fds_zeta * f = fds_zeta * fds moebius_mu * g\n\ngoal (1 subgoal):\n 1. f = fds moebius_mu * g \\<Longrightarrow> g = f * fds_zeta", "have \"\\<dots> = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_zeta * fds moebius_mu * g = g", "by (simp add: fds_zeta_times_moebius_mu)"], ["proof (state)\nthis:\n  fds_zeta * fds moebius_mu * g = g\n\ngoal (1 subgoal):\n 1. f = fds moebius_mu * g \\<Longrightarrow> g = f * fds_zeta", "finally"], ["proof (chain)\npicking this:\n  fds_zeta * f = g", "show \"g = f * fds_zeta\""], ["proof (prove)\nusing this:\n  fds_zeta * f = g\n\ngoal (1 subgoal):\n 1. g = f * fds_zeta", "by (simp add: mult_ac)"], ["proof (state)\nthis:\n  g = f * fds_zeta\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma moebius_inversion:\n  assumes \"\\<And>n. n > 0 \\<Longrightarrow> g n = (\\<Sum>d | d dvd n. f d)\" \"n > 0\"\n  shows   \"f n = dirichlet_prod moebius_mu g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n = dirichlet_prod moebius_mu g n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f n = dirichlet_prod moebius_mu g n", "from assms"], ["proof (chain)\npicking this:\n  0 < ?n \\<Longrightarrow> g ?n = (\\<Sum>d | d dvd ?n. f d)\n  0 < n", "have \"fds g = fds f * fds_zeta\""], ["proof (prove)\nusing this:\n  0 < ?n \\<Longrightarrow> g ?n = (\\<Sum>d | d dvd ?n. f d)\n  0 < n\n\ngoal (1 subgoal):\n 1. fds g = fds f * fds_zeta", "by (intro fds_eqI) (simp add: fds_nth_mult dirichlet_prod_def)"], ["proof (state)\nthis:\n  fds g = fds f * fds_zeta\n\ngoal (1 subgoal):\n 1. f n = dirichlet_prod moebius_mu g n", "thus ?thesis"], ["proof (prove)\nusing this:\n  fds g = fds f * fds_zeta\n\ngoal (1 subgoal):\n 1. f n = dirichlet_prod moebius_mu g n", "using assms"], ["proof (prove)\nusing this:\n  fds g = fds f * fds_zeta\n  0 < ?n \\<Longrightarrow> g ?n = (\\<Sum>d | d dvd ?n. f d)\n  0 < n\n\ngoal (1 subgoal):\n 1. f n = dirichlet_prod moebius_mu g n", "by (subst (asm) fds_moebius_inversion [symmetric]) (simp add: fds_eq_iff fds_nth_mult)"], ["proof (state)\nthis:\n  f n = dirichlet_prod moebius_mu g n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_mangoldt: \"fds mangoldt = fds moebius_mu * fds (\\<lambda>n. of_real (ln (real n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds mangoldt = fds moebius_mu * fds (\\<lambda>n. of_real (ln (real n)))", "by (subst fds_moebius_inversion) (rule fds_mangoldt_times_zeta [symmetric])"], ["", "(* 2.18 *)"], ["", "lemma sum_divisors_moebius_mu_times_multiplicative:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {comm_ring_1}\"\n  assumes \"multiplicative_function f\" \"n > 0\"\n  shows   \"(\\<Sum>d | d dvd n. moebius_mu d * f d) = (\\<Prod>p\\<in>prime_factors n. 1 - f p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "define g where \"g = (\\<lambda>n. \\<Sum>d | d dvd n. moebius_mu d * f d)\""], ["proof (state)\nthis:\n  g = (\\<lambda>n. \\<Sum>d | d dvd n. moebius_mu d * f d)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "define g' where \"g' = dirichlet_prod (\\<lambda>n. moebius_mu n * f n) (\\<lambda>n. if n = 0 then 0 else 1)\""], ["proof (state)\nthis:\n  g' =\n  dirichlet_prod (\\<lambda>n. moebius_mu n * f n)\n   (\\<lambda>n. if n = 0 then 0::'a else (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "interpret f: multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "have \"multiplicative_function (\\<lambda>n. if n = 0 then 0 else 1 :: 'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. if n = 0 then 0::'a else (1::'a))", "by standard auto"], ["proof (state)\nthis:\n  multiplicative_function (\\<lambda>n. if n = 0 then 0::'a else (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "interpret multiplicative_function g'"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function g'", "unfolding g'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function\n     (dirichlet_prod (\\<lambda>n. moebius_mu n * f n)\n       (\\<lambda>n. if n = 0 then 0::'a else (1::'a)))", "by (intro multiplicative_dirichlet_prod multiplicative_function_mult\n              moebius_mu.multiplicative_function_axioms assms) fact+"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "have g'_primepow: \"g' (p ^ k) = 1 - f p\" if \"prime p\" \"k > 0\" for p k"], ["proof (prove)\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "have \"g' (p ^ k) = (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' (p ^ k) = (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i))", "using that"], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i))", "by (simp add: g'_def dirichlet_prod_prime_power)"], ["proof (state)\nthis:\n  g' (p ^ k) = (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i))\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "also"], ["proof (state)\nthis:\n  g' (p ^ k) = (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i))\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "have \"\\<dots> = (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i)) =\n    (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i))", "using that"], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i)) =\n    (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i))", "by (intro sum.mono_neutral_right) (auto simp: moebius_mu_power')"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i)) =\n  (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i))\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>k. moebius_mu (p ^ i) * f (p ^ i)) =\n  (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i))\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "have \"\\<dots> = 1 - f p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i)) = (1::'a) - f p", "using that"], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i)) = (1::'a) - f p", "by (simp add: moebius_mu.prime)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i)) = (1::'a) - f p\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "finally"], ["proof (chain)\npicking this:\n  g' (p ^ k) = (1::'a) - f p", "show ?thesis"], ["proof (prove)\nusing this:\n  g' (p ^ k) = (1::'a) - f p\n\ngoal (1 subgoal):\n 1. g' (p ^ k) = (1::'a) - f p", "."], ["proof (state)\nthis:\n  g' (p ^ k) = (1::'a) - f p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>prime ?p; 0 < ?k\\<rbrakk>\n  \\<Longrightarrow> g' (?p ^ ?k) = (1::'a) - f ?p\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "have \"g' n = g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' n = g n", "by (simp add: g_def g'_def dirichlet_prod_def)"], ["proof (state)\nthis:\n  g' n = g n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "also"], ["proof (state)\nthis:\n  g' n = g n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "from assms"], ["proof (chain)\npicking this:\n  multiplicative_function f\n  0 < n", "have \"g' n = (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n))\""], ["proof (prove)\nusing this:\n  multiplicative_function f\n  0 < n\n\ngoal (1 subgoal):\n 1. g' n = (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n))", "by (intro prod_prime_factors) auto"], ["proof (state)\nthis:\n  g' n = (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "also"], ["proof (state)\nthis:\n  g' n = (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "have \"\\<dots> = (\\<Prod>p\\<in>prime_factors n. 1 - f p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n)) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "by (intro prod.cong) (auto simp: g'_primepow prime_factors_multiplicity)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors n. g' (p ^ multiplicity p n)) =\n  (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p) = g n", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p) = g n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n    (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)", "by (simp add: g_def)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. moebius_mu d * f d) =\n  (\\<Prod>p\\<in>prime_factors n. (1::'a) - f p)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Theorem 2.17 *)"], ["", "lemma completely_multiplicative_iff_inverse_moebius_mu:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {comm_ring_1, ring_no_zero_divisors}\"\n  assumes \"multiplicative_function f\"\n  defines \"g \\<equiv> dirichlet_inverse f 1\"\n  shows   \"completely_multiplicative_function f \\<longleftrightarrow>\n             (\\<forall>n. g n = moebius_mu n * f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f =\n    (\\<forall>n. g n = moebius_mu n * f n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f =\n    (\\<forall>n. g n = moebius_mu n * f n)", "interpret multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f =\n    (\\<forall>n. g n = moebius_mu n * f n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f =\n    (\\<forall>n. g n = moebius_mu n * f n)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       completely_multiplicative_function f \\<Longrightarrow>\n       g n = moebius_mu n * f n\n 2. \\<forall>n. g n = moebius_mu n * f n \\<Longrightarrow>\n    completely_multiplicative_function f", "assume \"completely_multiplicative_function f\""], ["proof (state)\nthis:\n  completely_multiplicative_function f\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       completely_multiplicative_function f \\<Longrightarrow>\n       g n = moebius_mu n * f n\n 2. \\<forall>n. g n = moebius_mu n * f n \\<Longrightarrow>\n    completely_multiplicative_function f", "then"], ["proof (chain)\npicking this:\n  completely_multiplicative_function f", "interpret completely_multiplicative_function f"], ["proof (prove)\nusing this:\n  completely_multiplicative_function f\n\ngoal (1 subgoal):\n 1. completely_multiplicative_function f", "."], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       completely_multiplicative_function f \\<Longrightarrow>\n       g n = moebius_mu n * f n\n 2. \\<forall>n. g n = moebius_mu n * f n \\<Longrightarrow>\n    completely_multiplicative_function f", "have [simp]: \"fds f \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds f \\<noteq> 0", "by (auto simp: fds_eq_iff)"], ["proof (state)\nthis:\n  fds f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       completely_multiplicative_function f \\<Longrightarrow>\n       g n = moebius_mu n * f n\n 2. \\<forall>n. g n = moebius_mu n * f n \\<Longrightarrow>\n    completely_multiplicative_function f", "have \"fds (\\<lambda>n. moebius_mu n * f n) * fds f = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds (\\<lambda>n. moebius_mu n * f n) * fds f = 1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "have \"fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n              (\\<Sum>(r, d) | r * d = n. moebius_mu r * f (r * d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d))", "by (simp add: fds_eq_iff fds_nth_mult fds_nth_fds dirichlet_prod_altdef2 mult mult.assoc)"], ["proof (state)\nthis:\n  fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "also"], ["proof (state)\nthis:\n  fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "have \"\\<dots> = (\\<Sum>(r, d) | r * d = n. moebius_mu r * f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d)) =\n    (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n)", "by (intro sum.cong) auto"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d)) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f (r * d)) =\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "have \"\\<dots> = dirichlet_prod moebius_mu (\\<lambda>_. 1) n * f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n) =\n    dirichlet_prod moebius_mu (\\<lambda>_. 1::'a) n * f n", "by (simp add: dirichlet_prod_altdef2 sum_distrib_right case_prod_unfold mult)"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n) =\n  dirichlet_prod moebius_mu (\\<lambda>_. 1::'a) n * f n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. moebius_mu r * f n) =\n  dirichlet_prod moebius_mu (\\<lambda>_. 1::'a) n * f n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "have \"dirichlet_prod moebius_mu (\\<lambda>_. 1) n = fds_nth (fds moebius_mu * fds_zeta) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod moebius_mu (\\<lambda>_. 1::'b) n =\n    fds_nth (fds moebius_mu * fds_zeta) n", "by (simp add: fds_nth_mult)"], ["proof (state)\nthis:\n  dirichlet_prod moebius_mu (\\<lambda>_. 1::?'b1) n =\n  fds_nth (fds moebius_mu * fds_zeta) n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "also"], ["proof (state)\nthis:\n  dirichlet_prod moebius_mu (\\<lambda>_. 1::?'b1) n =\n  fds_nth (fds moebius_mu * fds_zeta) n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "have \"fds moebius_mu * fds_zeta = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds moebius_mu * fds_zeta = 1", "by (simp add: mult_ac fds_zeta_times_moebius_mu)"], ["proof (state)\nthis:\n  fds moebius_mu * fds_zeta = 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "also"], ["proof (state)\nthis:\n  fds moebius_mu * fds_zeta = 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "have \"fds_nth 1 n * f n = fds_nth 1 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth 1 n * f n = fds_nth 1 n", "by (auto simp: fds_eq_iff fds_nth_one)"], ["proof (state)\nthis:\n  fds_nth 1 n * f n = fds_nth 1 n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n =\n       fds_nth 1 n", "finally"], ["proof (chain)\npicking this:\n  fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n = fds_nth 1 n", "show \"fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n = fds_nth 1 n\""], ["proof (prove)\nusing this:\n  fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n = fds_nth 1 n\n\ngoal (1 subgoal):\n 1. fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n = fds_nth 1 n", "."], ["proof (state)\nthis:\n  fds_nth (fds (\\<lambda>n. moebius_mu n * f n) * fds f) n = fds_nth 1 n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds (\\<lambda>n. moebius_mu n * f n) * fds f = 1\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       completely_multiplicative_function f \\<Longrightarrow>\n       g n = moebius_mu n * f n\n 2. \\<forall>n. g n = moebius_mu n * f n \\<Longrightarrow>\n    completely_multiplicative_function f", "also"], ["proof (state)\nthis:\n  fds (\\<lambda>n. moebius_mu n * f n) * fds f = 1\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       completely_multiplicative_function f \\<Longrightarrow>\n       g n = moebius_mu n * f n\n 2. \\<forall>n. g n = moebius_mu n * f n \\<Longrightarrow>\n    completely_multiplicative_function f", "have \"1 = fds g * fds f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = fds g * fds f", "by (auto simp: fds_eq_iff g_def fds_nth_mult dirichlet_prod_inverse')"], ["proof (state)\nthis:\n  1 = fds g * fds f\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       completely_multiplicative_function f \\<Longrightarrow>\n       g n = moebius_mu n * f n\n 2. \\<forall>n. g n = moebius_mu n * f n \\<Longrightarrow>\n    completely_multiplicative_function f", "finally"], ["proof (chain)\npicking this:\n  fds (\\<lambda>n. moebius_mu n * f n) * fds f = fds g * fds f", "have \"fds g = fds (\\<lambda>n. moebius_mu n * f n)\""], ["proof (prove)\nusing this:\n  fds (\\<lambda>n. moebius_mu n * f n) * fds f = fds g * fds f\n\ngoal (1 subgoal):\n 1. fds g = fds (\\<lambda>n. moebius_mu n * f n)", "by (subst (asm) mult_cancel_right) auto"], ["proof (state)\nthis:\n  fds g = fds (\\<lambda>n. moebius_mu n * f n)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       completely_multiplicative_function f \\<Longrightarrow>\n       g n = moebius_mu n * f n\n 2. \\<forall>n. g n = moebius_mu n * f n \\<Longrightarrow>\n    completely_multiplicative_function f", "thus \"g n = moebius_mu n * f n\" for n"], ["proof (prove)\nusing this:\n  fds g = fds (\\<lambda>n. moebius_mu n * f n)\n\ngoal (1 subgoal):\n 1. g n = moebius_mu n * f n", "by (cases \"n = 0\") (auto simp: fds_eq_iff g_def)"], ["proof (state)\nthis:\n  g ?n = moebius_mu ?n * f ?n\n\ngoal (1 subgoal):\n 1. \\<forall>n. g n = moebius_mu n * f n \\<Longrightarrow>\n    completely_multiplicative_function f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n. g n = moebius_mu n * f n \\<Longrightarrow>\n    completely_multiplicative_function f", "assume g: \"\\<forall>n. g n = moebius_mu n * f n\""], ["proof (state)\nthis:\n  \\<forall>n. g n = moebius_mu n * f n\n\ngoal (1 subgoal):\n 1. \\<forall>n. g n = moebius_mu n * f n \\<Longrightarrow>\n    completely_multiplicative_function f", "show \"completely_multiplicative_function f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f", "proof (rule completely_multiplicativeI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> f (p ^ k) = f p ^ k", "fix p k :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> f (p ^ k) = f p ^ k", "assume pk: \"prime p\" \"k > 0\""], ["proof (state)\nthis:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> f (p ^ k) = f p ^ k", "show \"f (p ^ k) = f p ^ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (p ^ k) = f p ^ k", "proof (induction k)"], ["proof (state)\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "case (Suc k)"], ["proof (state)\nthis:\n  f (p ^ k) = f p ^ k\n\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "have eq: \"dirichlet_prod g f n = 0\" if \"n \\<noteq> 1\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod g f n = (0::'a)", "unfolding g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_inverse f (1::'a)) f n = (0::'a)", "using dirichlet_prod_inverse'[of f 1] that"], ["proof (prove)\nusing this:\n  f 1 * (1::'a) = (1::'a) \\<Longrightarrow>\n  dirichlet_prod (dirichlet_inverse f (1::'a)) f =\n  (\\<lambda>n. if n = 1 then 1::'a else (0::'a))\n  n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_inverse f (1::'a)) f n = (0::'a)", "by auto"], ["proof (state)\nthis:\n  ?n \\<noteq> 1 \\<Longrightarrow> dirichlet_prod g f ?n = (0::'a)\n\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "have \"dirichlet_prod g f (p ^ Suc k) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod g f (p ^ Suc k) = (0::'a)", "using pk"], ["proof (prove)\nusing this:\n  prime p\n  0 < k__\n\ngoal (1 subgoal):\n 1. dirichlet_prod g f (p ^ Suc k) = (0::'a)", "by (intro eq) auto"], ["proof (state)\nthis:\n  dirichlet_prod g f (p ^ Suc k) = (0::'a)\n\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "also"], ["proof (state)\nthis:\n  dirichlet_prod g f (p ^ Suc k) = (0::'a)\n\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "have \"dirichlet_prod g f (p ^ Suc k) = (\\<Sum>i\\<le>Suc k. g (p ^ i) * f (p ^ (Suc k - i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod g f (p ^ Suc k) =\n    (\\<Sum>i\\<le>Suc k. g (p ^ i) * f (p ^ (Suc k - i)))", "by (intro dirichlet_prod_prime_power) fact+"], ["proof (state)\nthis:\n  dirichlet_prod g f (p ^ Suc k) =\n  (\\<Sum>i\\<le>Suc k. g (p ^ i) * f (p ^ (Suc k - i)))\n\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "also"], ["proof (state)\nthis:\n  dirichlet_prod g f (p ^ Suc k) =\n  (\\<Sum>i\\<le>Suc k. g (p ^ i) * f (p ^ (Suc k - i)))\n\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "have \"\\<dots> = (\\<Sum>i\\<le>Suc k. moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>Suc k. g (p ^ i) * f (p ^ (Suc k - i))) =\n    (\\<Sum>i\\<le>Suc k.\n        moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i)))", "by (intro sum.cong refl, subst g) auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>Suc k. g (p ^ i) * f (p ^ (Suc k - i))) =\n  (\\<Sum>i\\<le>Suc k. moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i)))\n\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>Suc k. g (p ^ i) * f (p ^ (Suc k - i))) =\n  (\\<Sum>i\\<le>Suc k. moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i)))\n\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "have \"\\<dots> = (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>Suc k.\n        moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i))) =\n    (\\<Sum>i\\<in>{0, 1}.\n       moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i)))", "using pk"], ["proof (prove)\nusing this:\n  prime p\n  0 < k__\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>Suc k.\n        moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i))) =\n    (\\<Sum>i\\<in>{0, 1}.\n       moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i)))", "by (intro sum.mono_neutral_right) (auto simp: moebius_mu_power')"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>Suc k.\n      moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i))) =\n  (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i)))\n\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>Suc k.\n      moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i))) =\n  (\\<Sum>i\\<in>{0, 1}. moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i)))\n\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "have \"\\<dots> = f (p ^ Suc k) - f p ^ Suc k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0, 1}.\n       moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i))) =\n    f (p ^ Suc k) - f p ^ Suc k", "using pk Suc.IH"], ["proof (prove)\nusing this:\n  prime p\n  0 < k__\n  f (p ^ k) = f p ^ k\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0, 1}.\n       moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i))) =\n    f (p ^ Suc k) - f p ^ Suc k", "by (auto simp: moebius_mu.prime)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>{0, 1}.\n     moebius_mu (p ^ i) * f (p ^ i) * f (p ^ (Suc k - i))) =\n  f (p ^ Suc k) - f p ^ Suc k\n\ngoal (2 subgoals):\n 1. f (p ^ 0) = f p ^ 0\n 2. \\<And>k.\n       f (p ^ k) = f p ^ k \\<Longrightarrow> f (p ^ Suc k) = f p ^ Suc k", "finally"], ["proof (chain)\npicking this:\n  f (p ^ Suc k) - f p ^ Suc k = (0::'a)", "show \"f (p ^ Suc k) = f p ^ Suc k\""], ["proof (prove)\nusing this:\n  f (p ^ Suc k) - f p ^ Suc k = (0::'a)\n\ngoal (1 subgoal):\n 1. f (p ^ Suc k) = f p ^ Suc k", "by simp"], ["proof (state)\nthis:\n  f (p ^ Suc k) = f p ^ Suc k\n\ngoal (1 subgoal):\n 1. f (p ^ 0) = f p ^ 0", "qed auto"], ["proof (state)\nthis:\n  f (p ^ k) = f p ^ k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  completely_multiplicative_function f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  completely_multiplicative_function f =\n  (\\<forall>n. g n = moebius_mu n * f n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma completely_multiplicative_fds_inverse:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"completely_multiplicative_function f\"\n  shows   \"inverse (fds f) = fds (\\<lambda>n. moebius_mu n * f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (fds f) = fds (\\<lambda>n. moebius_mu n * f n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse (fds f) = fds (\\<lambda>n. moebius_mu n * f n)", "interpret completely_multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse (fds f) = fds (\\<lambda>n. moebius_mu n * f n)", "from assms"], ["proof (chain)\npicking this:\n  completely_multiplicative_function f", "show ?thesis"], ["proof (prove)\nusing this:\n  completely_multiplicative_function f\n\ngoal (1 subgoal):\n 1. inverse (fds f) = fds (\\<lambda>n. moebius_mu n * f n)", "by (subst (asm) completely_multiplicative_iff_inverse_moebius_mu)\n       (auto simp: inverse_fds_def multiplicative_function_axioms)"], ["proof (state)\nthis:\n  inverse (fds f) = fds (\\<lambda>n. moebius_mu n * f n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma completely_multiplicative_fds_inverse':\n  fixes f :: \"'a :: field fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\"\n  shows   \"inverse f = fds (\\<lambda>n. moebius_mu n * fds_nth f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse f = fds (\\<lambda>n. moebius_mu n * fds_nth f n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inverse f = fds (\\<lambda>n. moebius_mu n * fds_nth f n)", "have \"f = fds (fds_nth f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = fds (fds_nth f)", "by simp"], ["proof (state)\nthis:\n  f = fds (fds_nth f)\n\ngoal (1 subgoal):\n 1. inverse f = fds (\\<lambda>n. moebius_mu n * fds_nth f n)", "also"], ["proof (state)\nthis:\n  f = fds (fds_nth f)\n\ngoal (1 subgoal):\n 1. inverse f = fds (\\<lambda>n. moebius_mu n * fds_nth f n)", "have \"inverse (fds (fds_nth f)) = fds (\\<lambda>n. moebius_mu n * fds_nth f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (fds (fds_nth f)) = fds (\\<lambda>n. moebius_mu n * fds_nth f n)", "by (intro completely_multiplicative_fds_inverse assms)"], ["proof (state)\nthis:\n  inverse (fds (fds_nth f)) = fds (\\<lambda>n. moebius_mu n * fds_nth f n)\n\ngoal (1 subgoal):\n 1. inverse f = fds (\\<lambda>n. moebius_mu n * fds_nth f n)", "finally"], ["proof (chain)\npicking this:\n  inverse f = fds (\\<lambda>n. moebius_mu n * fds_nth f n)", "show ?thesis"], ["proof (prove)\nusing this:\n  inverse f = fds (\\<lambda>n. moebius_mu n * fds_nth f n)\n\ngoal (1 subgoal):\n 1. inverse f = fds (\\<lambda>n. moebius_mu n * fds_nth f n)", "by simp"], ["proof (state)\nthis:\n  inverse f = fds (\\<lambda>n. moebius_mu n * fds_nth f n)\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  includes fds_syntax\nbegin"], ["", "lemma selberg_aux:\n  \"(\\<chi> n. of_real ((ln n)\\<^sup>2)) * fds moebius_mu =\n     (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt :: 'a :: {comm_ring_1,real_algebra_1} fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu =\n    (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu =\n    (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)", "have \"(\\<chi> n. of_real (ln (real n) ^ 2)) = fds_deriv (fds_deriv fds_zeta :: 'a fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>n. of_real ((ln (real n))\\<^sup>2)) =\n    fds_deriv (fds_deriv fds_zeta)", "by (rule fds_eqI) (simp add: fds_nth_fds fds_nth_deriv power2_eq_square scaleR_conv_of_real)"], ["proof (state)\nthis:\n  (\\<chi>n. of_real ((ln (real n))\\<^sup>2)) =\n  fds_deriv (fds_deriv fds_zeta)\n\ngoal (1 subgoal):\n 1. (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu =\n    (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)", "also"], ["proof (state)\nthis:\n  (\\<chi>n. of_real ((ln (real n))\\<^sup>2)) =\n  fds_deriv (fds_deriv fds_zeta)\n\ngoal (1 subgoal):\n 1. (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu =\n    (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)", "have \"\\<dots> = (fds mangoldt ^ 2 - fds_deriv (fds mangoldt)) * fds_zeta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (fds_deriv fds_zeta) =\n    ((fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)) * fds_zeta", "by (simp add: fds_deriv_zeta algebra_simps power2_eq_square)"], ["proof (state)\nthis:\n  fds_deriv (fds_deriv fds_zeta) =\n  ((fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)) * fds_zeta\n\ngoal (1 subgoal):\n 1. (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu =\n    (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)", "also"], ["proof (state)\nthis:\n  fds_deriv (fds_deriv fds_zeta) =\n  ((fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)) * fds_zeta\n\ngoal (1 subgoal):\n 1. (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu =\n    (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)", "have \"\\<dots> * fds moebius_mu = ((fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)) * \n                                      (fds_zeta * fds moebius_mu)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)) * fds_zeta *\n    fds moebius_mu =\n    ((fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)) *\n    (fds_zeta * fds moebius_mu)", "by (simp add: mult_ac)"], ["proof (state)\nthis:\n  ((fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)) * fds_zeta *\n  fds moebius_mu =\n  ((fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)) *\n  (fds_zeta * fds moebius_mu)\n\ngoal (1 subgoal):\n 1. (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu =\n    (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)", "also"], ["proof (state)\nthis:\n  ((fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)) * fds_zeta *\n  fds moebius_mu =\n  ((fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)) *\n  (fds_zeta * fds moebius_mu)\n\ngoal (1 subgoal):\n 1. (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu =\n    (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)", "have \"fds_zeta * fds moebius_mu = (1 :: 'a fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_zeta * fds moebius_mu = 1", "by (fact fds_zeta_times_moebius_mu)"], ["proof (state)\nthis:\n  fds_zeta * fds moebius_mu = 1\n\ngoal (1 subgoal):\n 1. (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu =\n    (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)", "finally"], ["proof (chain)\npicking this:\n  (\\<chi>n. of_real ((ln (real n))\\<^sup>2)) * (\\<chi>a. moebius_mu a) =\n  ((\\<chi>a. mangoldt a)\\<^sup>2 - fds_deriv (\\<chi>a. mangoldt a)) * 1", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<chi>n. of_real ((ln (real n))\\<^sup>2)) * (\\<chi>a. moebius_mu a) =\n  ((\\<chi>a. mangoldt a)\\<^sup>2 - fds_deriv (\\<chi>a. mangoldt a)) * 1\n\ngoal (1 subgoal):\n 1. (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu =\n    (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)", "by simp"], ["proof (state)\nthis:\n  (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu =\n  (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma selberg_aux':\n  \"mangoldt n * of_real (ln n) + (mangoldt \\<star> mangoldt) n =\n     ((moebius_mu \\<star> (\\<lambda>b. of_real (ln b) ^ 2)) n\n         :: 'a :: {comm_ring_1,real_algebra_1})\" if \"n > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mangoldt n * of_real (ln (real n)) + (mangoldt \\<star> mangoldt) n =\n    (moebius_mu \\<star> (\\<lambda>b. (of_real (ln (real b)))\\<^sup>2)) n", "using selberg_aux [symmetric] that"], ["proof (prove)\nusing this:\n  (fds mangoldt)\\<^sup>2 - fds_deriv (fds mangoldt) =\n  (\\<chi>x. of_real ((ln (real x))\\<^sup>2)) * fds moebius_mu\n  0 < n\n\ngoal (1 subgoal):\n 1. mangoldt n * of_real (ln (real n)) + (mangoldt \\<star> mangoldt) n =\n    (moebius_mu \\<star> (\\<lambda>b. (of_real (ln (real b)))\\<^sup>2)) n", "by (auto simp add: fds_eq_iff fds_nth_mult power2_eq_square fds_nth_deriv\n        dirichlet_prod_commutes algebra_simps scaleR_conv_of_real)"], ["", "end"], ["", "end"]]}