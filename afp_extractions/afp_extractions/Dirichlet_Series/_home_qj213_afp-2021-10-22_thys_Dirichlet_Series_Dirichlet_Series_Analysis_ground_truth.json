{"file_name": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series/Dirichlet_Series_Analysis.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series", "problem_names": ["lemma frequently_eventually_frequently:\n  \"frequently P F \\<Longrightarrow> eventually Q F \\<Longrightarrow> frequently (\\<lambda>x. P x \\<and> Q x) F\"", "lemma frequently_going_toI:\n  assumes \"filterlim (\\<lambda>n. f (g n)) F G\"\n  assumes \"eventually (\\<lambda>n. P (g n)) G\"\n  assumes \"eventually (\\<lambda>n. g n \\<in> A) G\"\n  assumes \"G \\<noteq> bot\"\n  shows   \"frequently P (f going_to F within A)\"", "lemma frequently_filtercomapI:\n  assumes \"filterlim (\\<lambda>n. f (g n)) F G\"\n  assumes \"eventually (\\<lambda>n. P (g n)) G\"\n  assumes \"G \\<noteq> bot\"\n  shows   \"frequently P (filtercomap f F)\"", "lemma frequently_going_to_at_topE:\n  fixes f :: \"'a \\<Rightarrow> real\"\n  assumes \"frequently P (f going_to at_top)\"\n  obtains g where \"\\<And>n. P (g n)\" and \"filterlim (\\<lambda>n. f (g n)) at_top sequentially\"", "lemma frequently_going_to_at_top_iff:\n  \"frequently P (f going_to (at_top :: real filter)) \\<longleftrightarrow>\n     (\\<exists>g. \\<forall>n. P (g n) \\<and> filterlim (\\<lambda>n. f (g n)) at_top sequentially)\"", "lemma surj_bullet_1: \"surj (\\<lambda>s::'a::{real_normed_algebra_1, real_inner}. s \\<bullet> 1)\"", "lemma bullet_1_going_to_at_top_neq_bot [simp]:\n  \"((\\<lambda>s::'a::{real_normed_algebra_1, real_inner}. s \\<bullet> 1) going_to at_top) \\<noteq> bot\"", "lemma fds_abs_converges_altdef:\n  \"fds_abs_converges f s \\<longleftrightarrow> (\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on {1..}\"", "lemma fds_abs_converges_altdef':\n  \"fds_abs_converges f s \\<longleftrightarrow> (\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on UNIV\"", "lemma eval_fds_altdef:\n  assumes \"fds_abs_converges f s\"\n  shows   \"eval_fds f s = (\\<Sum>\\<^sub>an. fds_nth f n / nat_power n s)\"", "lemma multiplicative_function_divide_nat_power:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {nat_power, field}\"\n  assumes \"multiplicative_function f\"\n  shows   \"multiplicative_function (\\<lambda>n. f n / nat_power n s)\"", "lemma completely_multiplicative_function_divide_nat_power:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {nat_power, field}\"\n  assumes \"completely_multiplicative_function f\"\n  shows   \"completely_multiplicative_function (\\<lambda>n. f n / nat_power n s)\"", "lemma real_power_diff: \"d > 0 \\<Longrightarrow> real_power d (a - b) = real_power d a / real_power d b\"", "lemma real_power_1_right [simp]: \"d > 0 \\<Longrightarrow> real_power d 1 = of_real d\"", "lemma has_vector_derivative_real_power [derivative_intros]:\n  \"x > 0 \\<Longrightarrow> ((\\<lambda>y. real_power y c) has_vector_derivative c * real_power x (c - 1)) (at x within A)\"", "lemma has_field_derivative_nat_power [derivative_intros]:\n  \"n > 0 \\<Longrightarrow> ((\\<lambda>y. nat_power n y) has_field_derivative ln (real n) *\\<^sub>R nat_power n x)\n     (at (x :: 'a :: nat_power_normed_field) within A)\"", "lemma continuous_on_real_power [continuous_intros]: \n  \"A \\<subseteq> {0<..} \\<Longrightarrow> continuous_on A (\\<lambda>x. real_power x s)\"", "lemma nat_power_of_real [simp]:\n  \"nat_power n (of_real x :: 'a :: nat_power_normed_field) = of_real (real n powr x)\"", "lemma fds_abs_converges_of_real [simp]: \n  \"fds_abs_converges (fds_of_real f) \n     (of_real s :: 'a :: {nat_power_normed_field,banach}) \\<longleftrightarrow> fds_abs_converges f s\"", "lemma eval_fds_of_real [simp]:\n  assumes \"fds_converges f s\"\n  shows   \"eval_fds (fds_of_real f) (of_real s :: 'a :: {nat_power_normed_field,banach}) = \n             of_real (eval_fds f s)\"", "lemma fds_abs_summable_zeta_iff [simp]:\n  fixes s :: \"'a :: {banach, nat_power_normed_field}\"\n  shows \"fds_abs_converges fds_zeta s \\<longleftrightarrow> s \\<bullet> 1 > (1 :: real)\"", "lemma fds_abs_summable_zeta: \n  \"(s :: 'a :: {banach, nat_power_normed_field}) \\<bullet> 1 > 1 \\<Longrightarrow> fds_abs_converges fds_zeta s\"", "lemma fds_abs_converges_moebius_mu:\n  fixes s :: \"'a :: {banach,nat_power_normed_field}\"\n  assumes \"s \\<bullet> 1 > 1\"\n  shows   \"fds_abs_converges (fds moebius_mu) s\"", "lemma conv_abscissa_mono:\n  assumes \"\\<And>s. fds_converges g s \\<Longrightarrow> fds_converges f s\"\n  shows   \"conv_abscissa f \\<le> conv_abscissa g\"", "lemma abs_conv_abscissa_mono:\n  assumes \"\\<And>s. fds_abs_converges g s \\<Longrightarrow> fds_abs_converges f s\"\n  shows   \"abs_conv_abscissa f \\<le> abs_conv_abscissa g\"", "lemma fds_abs_converges_Re_le:\n  fixes f :: \"'a fds\"\n  assumes \"fds_abs_converges f z\" \"z \\<bullet> 1 \\<le> z' \\<bullet> 1\"\n  shows   \"fds_abs_converges f z'\"", "lemma fds_abs_converges:\n  assumes \"s \\<bullet> 1 > abs_conv_abscissa (f :: 'a fds)\"\n  shows   \"fds_abs_converges f s\"", "lemma fds_abs_diverges:\n  assumes \"s \\<bullet> 1 < abs_conv_abscissa (f :: 'a fds)\"\n  shows   \"\\<not>fds_abs_converges f s\"", "lemma uniformly_Cauchy_eval_fds_aux:\n  fixes s0 :: \"'a :: dirichlet_series\"\n  assumes bounded: \"Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\"\n  assumes B: \"compact B\" \"\\<And>z. z \\<in> B \\<Longrightarrow> z \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows   \"uniformly_Cauchy_on B (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\"", "lemma uniformly_convergent_eval_fds_aux:\n  assumes \"Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k (s0 :: 'a))\"\n  assumes B: \"compact B\" \"\\<And>z. z \\<in> B \\<Longrightarrow> z \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows   \"uniformly_convergent_on B (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\"", "lemma uniformly_convergent_eval_fds_aux':\n  assumes conv: \"fds_converges f (s0 :: 'a)\"\n  assumes B: \"compact B\" \"\\<And>z. z \\<in> B \\<Longrightarrow> z \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows   \"uniformly_convergent_on B (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\"", "lemma bounded_partial_sums_imp_fps_converges:\n  fixes s0 :: \"'a :: dirichlet_series\"\n  assumes \"Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\" and \"s \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows   \"fds_converges f s\"", "theorem fds_converges_Re_le:\n  assumes \"fds_converges f (s0 :: 'a)\" \"s \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows   \"fds_converges f s\"", "lemma fds_converges:\n  assumes \"s \\<bullet> 1 > conv_abscissa (f :: 'a fds)\"\n  shows   \"fds_converges f s\"", "lemma fds_diverges:\n  assumes \"s \\<bullet> 1 < conv_abscissa (f :: 'a fds)\"\n  shows   \"\\<not>fds_converges f s\"", "theorem fds_converges_imp_abs_converges:\n  assumes \"fds_converges (f :: 'a fds) s\" \"s' \\<bullet> 1 > s \\<bullet> 1 + 1\"\n  shows   \"fds_abs_converges f s'\"", "lemma conv_le_abs_conv_abscissa: \"conv_abscissa f \\<le> abs_conv_abscissa f\"", "lemma conv_abscissa_PInf_iff: \"conv_abscissa f = \\<infinity> \\<longleftrightarrow> (\\<forall>s. \\<not>fds_converges f s)\"", "lemma conv_abscissa_PInfI [intro]: \"(\\<And>s. \\<not>fds_converges f s) \\<Longrightarrow> conv_abscissa f = \\<infinity>\"", "lemma conv_abscissa_MInf_iff: \"conv_abscissa (f :: 'a fds) = -\\<infinity> \\<longleftrightarrow> (\\<forall>s. fds_converges f s)\"", "lemma conv_abscissa_MInfI [intro]: \"(\\<And>s. fds_converges (f::'a fds) s) \\<Longrightarrow> conv_abscissa f = -\\<infinity>\"", "lemma abs_conv_abscissa_PInf_iff: \"abs_conv_abscissa f = \\<infinity> \\<longleftrightarrow> (\\<forall>s. \\<not>fds_abs_converges f s)\"", "lemma abs_conv_abscissa_PInfI [intro]: \"(\\<And>s. \\<not>fds_converges f s) \\<Longrightarrow> abs_conv_abscissa f = \\<infinity>\"", "lemma abs_conv_abscissa_MInf_iff: \n  \"abs_conv_abscissa (f :: 'a fds) = -\\<infinity> \\<longleftrightarrow> (\\<forall>s. fds_abs_converges f s)\"", "lemma abs_conv_abscissa_MInfI [intro]: \n  \"(\\<And>s. fds_abs_converges (f::'a fds) s) \\<Longrightarrow> abs_conv_abscissa f = -\\<infinity>\"", "lemma conv_abscissa_geI:\n  assumes \"\\<And>c'. ereal c' < c \\<Longrightarrow> \\<exists>s. s \\<bullet> 1 = c' \\<and> \\<not>fds_converges f s\"\n  shows   \"conv_abscissa (f :: 'a fds) \\<ge> c\"", "lemma conv_abscissa_leI:\n  assumes \"\\<And>c'. ereal c' > c \\<Longrightarrow> \\<exists>s. s \\<bullet> 1 = c' \\<and> fds_converges f s\"\n  shows   \"conv_abscissa (f :: 'a fds) \\<le> c\"", "lemma abs_conv_abscissa_geI:\n  assumes \"\\<And>c'. ereal c' < c \\<Longrightarrow> \\<exists>s. s \\<bullet> 1 = c' \\<and> \\<not>fds_abs_converges f s\"\n  shows   \"abs_conv_abscissa (f :: 'a fds) \\<ge> c\"", "lemma abs_conv_abscissa_leI:\n  assumes \"\\<And>c'. ereal c' > c \\<Longrightarrow> \\<exists>s. s \\<bullet> 1 = c' \\<and> fds_abs_converges f s\"\n  shows   \"abs_conv_abscissa (f :: 'a fds) \\<le> c\"", "lemma conv_abscissa_leI_weak:\n  assumes \"\\<And>x. ereal x > d \\<Longrightarrow> fds_converges f (of_real x)\"\n  shows   \"conv_abscissa (f :: 'a fds) \\<le> d\"", "lemma abs_conv_abscissa_leI_weak:\n  assumes \"\\<And>x. ereal x > d \\<Longrightarrow> fds_abs_converges f (of_real x)\"\n  shows   \"abs_conv_abscissa (f :: 'a fds) \\<le> d\"", "lemma conv_abscissa_truncate [simp]: \n  \"conv_abscissa (fds_truncate m (f :: 'a fds)) = -\\<infinity>\"", "lemma abs_conv_abscissa_truncate [simp]: \n  \"abs_conv_abscissa (fds_truncate m (f :: 'a fds)) = -\\<infinity>\"", "theorem abs_conv_le_conv_abscissa_plus_1: \"abs_conv_abscissa (f :: 'a fds) \\<le> conv_abscissa f + 1\"", "lemma uniformly_convergent_eval_fds:\n  assumes B: \"compact B\" \"\\<And>z. z \\<in> B \\<Longrightarrow> z \\<bullet> 1 > conv_abscissa (f :: 'a fds)\"\n  shows   \"uniformly_convergent_on B (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\"", "lemma fds_converges_deriv_aux:\n  assumes conv: \"fds_converges f (s0 :: 'a)\" and gt: \"s \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows \"fds_converges (fds_deriv f) s\"", "theorem\n  assumes \"s \\<bullet> 1 > conv_abscissa (f :: 'a fds)\"\n  shows   fds_converges_deriv: \"fds_converges (fds_deriv f) s\"\n    and   has_field_derivative_eval_fds [derivative_intros]:\n            \"(eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s within A)\"", "lemmas has_field_derivative_eval_fds' [derivative_intros] = \n  DERIV_chain2[OF has_field_derivative_eval_fds]", "lemma continuous_eval_fds [continuous_intros]:\n  assumes \"s \\<bullet> 1 > conv_abscissa f\"\n  shows   \"continuous (at s within A) (eval_fds (f :: 'a :: dirichlet_series fds))\"", "lemma continuous_eval_fds' [continuous_intros]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"continuous (at s within A) g\" \"g s \\<bullet> 1 > conv_abscissa f\"\n  shows   \"continuous (at s within A) (\\<lambda>x. eval_fds f (g x))\"", "lemma continuous_on_eval_fds [continuous_intros]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"A \\<subseteq> {s. s \\<bullet> 1 > conv_abscissa f}\"\n  shows   \"continuous_on A (eval_fds f)\"", "lemma continuous_on_eval_fds' [continuous_intros]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"continuous_on A g\" \"g ` A \\<subseteq> {s. s \\<bullet> 1 > conv_abscissa f}\"\n  shows   \"continuous_on A (\\<lambda>x. eval_fds f (g x))\"", "lemma conv_abscissa_deriv_le:\n  fixes f :: \"'a fds\"\n  shows \"conv_abscissa (fds_deriv f) \\<le> conv_abscissa f\"", "lemma abs_conv_abscissa_integral:\n  fixes f :: \"'a fds\"\n  shows \"abs_conv_abscissa (fds_integral a f) = abs_conv_abscissa f\"", "lemma abs_conv_abscissa_ln: \n  \"abs_conv_abscissa (fds_ln l (f :: 'a :: dirichlet_series fds)) = \n     abs_conv_abscissa (fds_deriv f / f)\"", "lemma abs_conv_abscissa_deriv:\n  fixes f :: \"'a fds\"\n  shows \"abs_conv_abscissa (fds_deriv f) = abs_conv_abscissa f\"", "lemma abs_conv_abscissa_higher_deriv:\n  \"abs_conv_abscissa ((fds_deriv ^^ n) f) = abs_conv_abscissa (f :: 'a :: dirichlet_series fds)\"", "lemma conv_abscissa_higher_deriv_le:\n  \"conv_abscissa ((fds_deriv ^^ n) f) \\<le> conv_abscissa (f :: 'a :: dirichlet_series fds)\"", "lemma abs_conv_abscissa_restrict:\n  \"abs_conv_abscissa (fds_subseries P f) \\<le> abs_conv_abscissa f\"", "lemma eval_fds_deriv:\n  fixes f :: \"'a fds\"\n  assumes \"s \\<bullet> 1 > conv_abscissa f\"\n  shows   \"eval_fds (fds_deriv f) s = deriv (eval_fds f) s\"", "lemma eval_fds_higher_deriv:\n  assumes \"(s :: 'a :: dirichlet_series) \\<bullet> 1 > conv_abscissa f\"\n  shows   \"eval_fds ((fds_deriv ^^ n) f) s = (deriv ^^ n) (eval_fds f) s\"", "lemma \n  fixes f g :: \"nat \\<Rightarrow> 'a :: {banach, real_normed_field, second_countable_topology, nat_power}\"\n  fixes s :: 'a\n  assumes [simp]: \"f 0 = 0\" \"g 0 = 0\"\n  assumes summable: \"summable (\\<lambda>n. norm (f n / nat_power n s))\"\n                    \"summable (\\<lambda>n. norm (g n / nat_power n s))\"\n  shows   summable_dirichlet_prod: \"summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\"\n    and   suminf_dirichlet_prod:\n            \"(\\<Sum>n. dirichlet_prod f g n / nat_power n s) = \n               (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)\"", "lemma \n  fixes f g :: \"nat \\<Rightarrow> real\"\n  fixes s :: real\n  assumes \"f 0 = 0\" \"g 0 = 0\"\n  assumes summable: \"summable (\\<lambda>n. norm (f n / real n powr s))\"\n                    \"summable (\\<lambda>n. norm (g n / real n powr s))\"\n  shows   summable_dirichlet_prod_real: \"summable (\\<lambda>n. norm (dirichlet_prod f g n / real n powr s))\"\n    and   suminf_dirichlet_prod_real:\n            \"(\\<Sum>n. dirichlet_prod f g n / real n powr s) = \n               (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / real n powr s)\"", "lemma fds_abs_converges_mult: \n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  assumes \"fds_abs_converges f s\" \"fds_abs_converges g s\"\n  shows   \"fds_abs_converges (f * g) s\"", "lemma fds_abs_converges_power: \n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  shows \"fds_abs_converges f s \\<Longrightarrow> fds_abs_converges (f ^ n) s\"", "lemma fds_abs_converges_prod: \n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  shows \"(\\<And>x. x \\<in> A \\<Longrightarrow> fds_abs_converges (f x) s) \\<Longrightarrow> fds_abs_converges (prod f A) s\"", "lemma abs_conv_abscissa_mult_le:\n  \"abs_conv_abscissa (f * g :: 'a :: dirichlet_series fds) \\<le> \n      max (abs_conv_abscissa f) (abs_conv_abscissa g)\"", "lemma abs_conv_abscissa_mult_leI:\n  \"abs_conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow>\n   abs_conv_abscissa g \\<le> d \\<Longrightarrow> abs_conv_abscissa (f * g) \\<le> d\"", "lemma abs_conv_abscissa_shift [simp]:\n  \"abs_conv_abscissa (fds_shift c f) = abs_conv_abscissa (f :: 'a :: dirichlet_series fds) + c \\<bullet> 1\"", "lemma eval_fds_mult:\n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  assumes \"fds_abs_converges f s\" \"fds_abs_converges g s\"\n  shows   \"eval_fds (f * g) s = eval_fds f s * eval_fds g s\"", "lemma eval_fds_power:\n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  assumes \"fds_abs_converges f s\"\n  shows \"eval_fds (f ^ n) s = eval_fds f s ^ n\"", "lemma eval_fds_prod:\n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  assumes \"(\\<And>x. x \\<in> A \\<Longrightarrow> fds_abs_converges (f x) s)\"\n  shows \"eval_fds (prod f A) s = (\\<Prod>x\\<in>A. eval_fds (f x) s)\"", "lemma eval_fds_inverse:\n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  assumes \"fds_abs_converges f s\" \"fds_abs_converges (inverse f) s\" \"fds_nth f 1 \\<noteq> 0\"\n  shows   \"eval_fds (inverse f) s = inverse (eval_fds f s)\"", "lemma eval_fds_integral_has_field_derivative:\n  fixes s :: \"'a :: dirichlet_series\"\n  assumes \"ereal (s \\<bullet> 1) > abs_conv_abscissa f\"\n  assumes \"fds_nth f 1 = 0\"\n  shows   \"(eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)\"", "lemma holomorphic_fds_eval [holomorphic_intros]:\n  \"A \\<subseteq> {z. Re z > conv_abscissa f} \\<Longrightarrow> eval_fds f holomorphic_on A\"", "lemma analytic_fds_eval [holomorphic_intros]:\n  assumes \"A \\<subseteq> {z. Re z > conv_abscissa f}\"\n  shows   \"eval_fds f analytic_on A\"", "lemma conv_abscissa_0 [simp]: \n  \"conv_abscissa (0 :: 'a :: dirichlet_series fds) = -\\<infinity>\"", "lemma abs_conv_abscissa_0 [simp]: \n  \"abs_conv_abscissa (0 :: 'a :: dirichlet_series fds) = -\\<infinity>\"", "lemma conv_abscissa_1 [simp]: \n  \"conv_abscissa (1 :: 'a :: dirichlet_series fds) = -\\<infinity>\"", "lemma abs_conv_abscissa_1 [simp]: \n  \"abs_conv_abscissa (1 :: 'a :: dirichlet_series fds) = -\\<infinity>\"", "lemma conv_abscissa_const [simp]: \n  \"conv_abscissa (fds_const (c :: 'a :: dirichlet_series)) = -\\<infinity>\"", "lemma abs_conv_abscissa_const [simp]: \n  \"abs_conv_abscissa (fds_const (c :: 'a :: dirichlet_series)) = -\\<infinity>\"", "lemma conv_abscissa_numeral [simp]: \n  \"conv_abscissa (numeral n :: 'a :: dirichlet_series fds) = -\\<infinity>\"", "lemma abs_conv_abscissa_numeral [simp]: \n  \"abs_conv_abscissa (numeral n :: 'a :: dirichlet_series fds) = -\\<infinity>\"", "lemma abs_conv_abscissa_power_le:\n  \"abs_conv_abscissa (f ^ n :: 'a :: dirichlet_series fds) \\<le> abs_conv_abscissa f\"", "lemma abs_conv_abscissa_power_leI:\n  \"abs_conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow> abs_conv_abscissa (f ^ n) \\<le> d\"", "lemma abs_conv_abscissa_prod_le:\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> abs_conv_abscissa (f x :: 'a :: dirichlet_series fds) \\<le> d\"\n  shows   \"abs_conv_abscissa (prod f A) \\<le> d\"", "lemma conv_abscissa_add_le:\n  \"conv_abscissa (f + g :: 'a :: dirichlet_series fds) \\<le> max (conv_abscissa f) (conv_abscissa g)\"", "lemma conv_abscissa_add_leI:\n  \"conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow> conv_abscissa g \\<le> d \\<Longrightarrow> \n     conv_abscissa (f + g) \\<le> d\"", "lemma conv_abscissa_sum_leI:\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> conv_abscissa (f x :: 'a :: dirichlet_series fds) \\<le> d\"\n  shows   \"conv_abscissa (sum f A) \\<le> d\"", "lemma abs_conv_abscissa_add_le:\n  \"abs_conv_abscissa (f + g :: 'a :: dirichlet_series fds) \\<le> max (abs_conv_abscissa f) (abs_conv_abscissa g)\"", "lemma abs_conv_abscissa_add_leI:\n  \"abs_conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow> abs_conv_abscissa g \\<le> d \\<Longrightarrow> \n     abs_conv_abscissa (f + g) \\<le> d\"", "lemma abs_conv_abscissa_sum_leI:\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> abs_conv_abscissa (f x :: 'a :: dirichlet_series fds) \\<le> d\"\n  shows   \"abs_conv_abscissa (sum f A) \\<le> d\"", "lemma fds_converges_cmult_left [intro]:\n  assumes \"fds_converges f s\"\n  shows   \"fds_converges (fds_const c * f) s\"", "lemma fds_converges_cmult_right [intro]:\n  assumes \"fds_converges f s\"\n  shows   \"fds_converges (f * fds_const c) s\"", "lemma conv_abscissa_cmult_left [simp]:\n  fixes c :: \"'a :: dirichlet_series\" assumes \"c \\<noteq> 0\"\n  shows \"conv_abscissa (fds_const c * f) = conv_abscissa f\"", "lemma conv_abscissa_cmult_right [simp]:\n  fixes c :: \"'a :: dirichlet_series\" assumes \"c \\<noteq> 0\"\n  shows \"conv_abscissa (f * fds_const c) = conv_abscissa f\"", "lemma abs_conv_abscissa_cmult: \n  fixes c :: \"'a :: dirichlet_series\" assumes \"c \\<noteq> 0\"\n  shows \"abs_conv_abscissa (fds_const c * f) = abs_conv_abscissa f\"", "lemma conv_abscissa_minus [simp]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows \"conv_abscissa (-f) = conv_abscissa f\"", "lemma abs_conv_abscissa_minus [simp]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows \"abs_conv_abscissa (-f) = abs_conv_abscissa f\"", "lemma conv_abscissa_diff_le:\n  \"conv_abscissa (f - g :: 'a :: dirichlet_series fds) \\<le> max (conv_abscissa f) (conv_abscissa g)\"", "lemma conv_abscissa_diff_leI:\n  \"conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow> conv_abscissa g \\<le> d \\<Longrightarrow> \n     conv_abscissa (f - g) \\<le> d\"", "lemma abs_conv_abscissa_diff_le:\n  \"abs_conv_abscissa (f - g :: 'a :: dirichlet_series fds) \\<le>\n     max (abs_conv_abscissa f) (abs_conv_abscissa g)\"", "lemma abs_conv_abscissa_diff_leI:\n  \"abs_conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow> abs_conv_abscissa g \\<le> d \\<Longrightarrow> \n     abs_conv_abscissa (f - g) \\<le> d\"", "lemmas eval_fds_integral_has_field_derivative' [derivative_intros] = \n  DERIV_chain'[OF _ eval_fds_integral_has_field_derivative]", "lemma abs_conv_abscissa_completely_multiplicative_log_deriv:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" \"fds_nth f 1 \\<noteq> 0\"\n  shows   \"abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f\"", "lemma norm_dirichlet_series_cutoff_le:\n  assumes \"fds_abs_converges f (s0 :: 'a)\" \"N > 0\" \"s \\<bullet> 1 \\<ge> c\" \"c \\<ge> s0 \\<bullet> 1\"\n  shows   \"summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\"\n          \"summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\"\n    and   \"norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s) \\<le> \n             (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) / nat_power N (s \\<bullet> 1 - c)\"", "lemma eval_fds_zeroD_aux:\n  fixes h :: \"'a fds\"\n  assumes conv: \"fds_abs_converges h (s0 :: 'a)\"\n  assumes freq: \"frequently (\\<lambda>s. eval_fds h s = 0) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\"\n  shows   \"h = 0\"", "lemma eval_fds_zeroD:\n  fixes h :: \"'a fds\"\n  assumes conv: \"conv_abscissa h < \\<infinity>\"\n  assumes freq: \"frequently (\\<lambda>s. eval_fds h s = 0) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\"\n  shows   \"h = 0\"", "lemma eval_fds_eqD:\n  fixes f g :: \"'a fds\"\n  assumes conv: \"conv_abscissa f < \\<infinity>\" \"conv_abscissa g < \\<infinity>\"\n  assumes eq:   \"frequently (\\<lambda>s. eval_fds f s = eval_fds g s) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\"\n  shows   \"f = g\"", "lemma eval_fds_at_top_tail_bound:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes c: \"ereal c > abs_conv_abscissa f\"\n  defines \"B \\<equiv> (\\<Sum>n. norm (fds_nth f (n+2)) / real (n+2) powr c) * 2 powr c\"\n  assumes s: \"s \\<bullet> 1 \\<ge> c\"\n  shows   \"norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> 1)\"", "lemma tendsto_eval_fds_Re_at_top:\n  assumes \"conv_abscissa (f :: 'a :: dirichlet_series fds) \\<noteq> \\<infinity>\"\n  assumes lim: \"filterlim (\\<lambda>x. S x \\<bullet> 1) at_top F\"\n  shows   \"((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F\"", "lemma tendsto_eval_fds_Re_at_top':\n  assumes \"conv_abscissa (f :: complex fds) \\<noteq> \\<infinity>\"\n  shows   \"uniform_limit UNIV (\\<lambda>\\<sigma> t. eval_fds f (of_real \\<sigma> + of_real t * \\<i>)\n                       ) (\\<lambda>_ .fds_nth f 1) at_top\"", "lemma tendsto_eval_fds_Re_going_to_at_top:\n  assumes \"conv_abscissa (f :: 'a :: dirichlet_series fds) \\<noteq> \\<infinity>\"\n  shows   \"((\\<lambda>s. eval_fds f s) \\<longlongrightarrow> fds_nth f 1) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\"", "lemma tendsto_eval_fds_Re_going_to_at_top':\n  assumes \"conv_abscissa (f :: complex fds) \\<noteq> \\<infinity>\"\n  shows   \"((\\<lambda>s. eval_fds f s) \\<longlongrightarrow> fds_nth f 1) (Re going_to at_top)\"", "theorem fds_nonzero_halfplane_exists:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"conv_abscissa f < \\<infinity>\" \"f \\<noteq> 0\"\n  shows   \"eventually (\\<lambda>s. fds_converges f s \\<and> eval_fds f s \\<noteq> 0) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\"", "lemma fds_converges_norm_iff [simp]: \n  fixes s :: \"'a :: {nat_power_normed_field,banach}\"\n  shows \"fds_converges (fds_norm f) (s \\<bullet> 1) \\<longleftrightarrow> fds_abs_converges f s\"", "lemma fds_abs_converges_norm_iff [simp]: \n  fixes s :: \"'a :: {nat_power_normed_field,banach}\"\n  shows \"fds_abs_converges (fds_norm f) (s \\<bullet> 1) \\<longleftrightarrow> fds_abs_converges f s\"", "lemma fds_converges_norm_iff': \n  fixes f :: \"'a :: {nat_power_normed_field,banach} fds\"\n  shows \"fds_converges (fds_norm f) s \\<longleftrightarrow> fds_abs_converges f (of_real s)\"", "lemma fds_abs_converges_norm_iff': \n  fixes f :: \"'a :: {nat_power_normed_field,banach} fds\"\n  shows \"fds_abs_converges (fds_norm f) s \\<longleftrightarrow> fds_abs_converges f (of_real s)\"", "lemma abs_conv_abscissa_norm [simp]: \n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows \"abs_conv_abscissa (fds_norm f) = abs_conv_abscissa f\"", "lemma conv_abscissa_norm [simp]: \n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows \"conv_abscissa (fds_norm f) = abs_conv_abscissa f\"", "lemma \n  fixes f g :: \"'a :: dirichlet_series fds\"\n  assumes \"fds_abs_converges (fds_norm f) s\" \"fds_abs_converges (fds_norm g) s\"\n  shows   fds_abs_converges_norm_mult: \"fds_abs_converges (fds_norm (f * g)) s\"\n  and     eval_fds_norm_mult_le: \n            \"eval_fds (fds_norm (f * g)) s \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s\"", "lemma eval_fds_norm_nonneg:\n  assumes \"fds_abs_converges (fds_norm f) s\"\n  shows   \"eval_fds (fds_norm f) s \\<ge> 0\"", "lemma\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"fds_abs_converges (fds_norm f) s\"\n  shows   fds_abs_converges_norm_power: \"fds_abs_converges (fds_norm (f ^ n)) s\"\n  and     eval_fds_norm_power_le: \n            \"eval_fds (fds_norm (f ^ n)) s \\<le> eval_fds (fds_norm f) s ^ n\"", "lemma eventually_gt_ereal_at_top: \"c \\<noteq> \\<infinity> \\<Longrightarrow> eventually (\\<lambda>x. ereal x > c) at_top\"", "lemma eval_fds_log_deriv:\n  fixes s :: \"'a :: dirichlet_series\"\n  assumes \"fds_nth f 1 \\<noteq> 0\" \"s \\<bullet> 1 > abs_conv_abscissa f\" \n           \"s \\<bullet> 1 > abs_conv_abscissa (fds_deriv f / f)\"\n  assumes \"eval_fds f s \\<noteq> 0\"\n  shows   \"eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s\"", "lemma eval_fds_ln:\n  fixes s0 :: ereal\n  assumes nz: \"\\<And>s. Re s > s0 \\<Longrightarrow> eval_fds f s \\<noteq> 0\" \"fds_nth f 1 \\<noteq> 0\"\n  assumes l: \"exp l = fds_nth f 1\" \"((g \\<circ> of_real) \\<longlongrightarrow> l) at_top\"\n  assumes g: \"\\<And>s. Re s > s0 \\<Longrightarrow> exp (g s) = eval_fds f s\"\n  assumes holo_g: \"g holomorphic_on {s. Re s > s0}\"\n  assumes \"ereal (Re s) > s0\"\n  assumes \"s0 \\<ge> abs_conv_abscissa f\" and \"s0 \\<ge> abs_conv_abscissa (fds_deriv f / f)\"\n  shows   \"eval_fds (fds_ln l f) s = g s\"", "lemma eval_fds_ln':\n  fixes s0 :: ereal\n  assumes \"ereal (Re s) > s0\"\n  assumes \"s0 \\<ge> abs_conv_abscissa f\" and \"s0 \\<ge> abs_conv_abscissa (fds_deriv f / f)\"\n      and nz: \"\\<And>s. Re s > s0 \\<Longrightarrow> eval_fds f s \\<noteq> 0\" \"fds_nth f 1 \\<noteq> 0\"\n  assumes l: \"exp l = fds_nth f 1\"\n  shows   \"exp (eval_fds (fds_ln l f) s) = eval_fds f s\"", "lemma fds_ln_completely_multiplicative:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\"\n  assumes \"fds_nth f 1 \\<noteq> 0\"\n  shows   \"fds_ln l f = fds (\\<lambda>n. if n = 1 then l else fds_nth f n * mangoldt n /\\<^sub>R ln n)\"", "lemma eval_fds_ln_completely_multiplicative_strong:\n  fixes s :: \"'a :: dirichlet_series\" and l :: 'a and f :: \"'a fds\" and g :: \"nat \\<Rightarrow> 'a\"\n  defines \"h \\<equiv> fds (\\<lambda>n. fds_nth (fds_ln l f) n * g n)\"\n  assumes \"fds_abs_converges h s\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" and \"fds_nth f 1 \\<noteq> 0\"\n  shows  \"(\\<lambda>(p,k). (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) / of_nat (Suc k))\n            abs_summable_on ({p. prime p} \\<times> UNIV)\" (is ?th1)\n    and  \"eval_fds h s = l * g 1 + (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p}\\<times>UNIV.\n            (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) / of_nat (Suc k))\" (is ?th2)", "lemma eval_fds_ln_completely_multiplicative:\n  fixes s :: \"'a :: dirichlet_series\" and l :: 'a and f :: \"'a fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" and \"fds_nth f 1 \\<noteq> 0\"\n  assumes \"s \\<bullet> 1 > abs_conv_abscissa (fds_deriv f / f)\"\n  shows  \"(\\<lambda>(p,k). (fds_nth f p / nat_power p s) ^ Suc k / of_nat (Suc k))\n            abs_summable_on ({p. prime p} \\<times> UNIV)\" (is ?th1)\n    and  \"eval_fds (fds_ln l f) s =\n                  l + (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p}\\<times>UNIV.\n                        (fds_nth f p / nat_power p s) ^ Suc k / of_nat (Suc k))\" (is ?th2)", "lemma summable_fds_exp_aux:\n  assumes \"fds_nth f' 1 = (0 :: 'a :: real_normed_algebra_1)\"\n  shows   \"summable (\\<lambda>k. fds_nth (f' ^ k) n /\\<^sub>R fact k)\"", "lemma\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"fds_abs_converges f s\"\n  shows   fds_abs_converges_exp: \"fds_abs_converges (fds_exp f) s\"\n  and     eval_fds_exp: \"eval_fds (fds_exp f) s = exp (eval_fds f s)\"", "lemma fds_exp_add:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows   \"fds_exp (f + g) = fds_exp f * fds_exp g\"", "lemma fds_exp_minus:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows   \"fds_exp (-f) = inverse (fds_exp f)\"", "lemma abs_conv_abscissa_exp: \n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows \"abs_conv_abscissa (fds_exp f) \\<le> abs_conv_abscissa f\"", "lemma fds_deriv_exp [simp]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows   \"fds_deriv (fds_exp f) = fds_exp f * fds_deriv f\"", "lemma fds_exp_ln_strong:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"fds_nth f (Suc 0) \\<noteq> 0\"\n  shows   \"fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f\"", "lemma fds_exp_ln [simp]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"exp l = fds_nth f (Suc 0)\"\n  shows   \"fds_exp (fds_ln l f) = f\"", "lemma fds_ln_exp [simp]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"l = fds_nth f (Suc 0)\"\n  shows   \"fds_ln l (fds_exp f) = f\"", "lemma fds_euler_product_LIMSEQ:\n  fixes f :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology} fds\"\n  assumes \"multiplicative_function (fds_nth f)\" and \"fds_abs_converges f s\"\n  shows   \"(\\<lambda>n. \\<Prod>p\\<le>n. if prime p then \\<Sum>i. fds_nth f (p ^ i) / nat_power (p ^ i) s else 1) \\<longlonglongrightarrow> \n             eval_fds f s\"", "lemma fds_euler_product_LIMSEQ':\n  fixes f :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology} fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" and \"fds_abs_converges f s\"\n  shows   \"(\\<lambda>n. \\<Prod>p\\<le>n. if prime p then inverse (1 - fds_nth f p / nat_power p s) else 1) \\<longlonglongrightarrow> \n             eval_fds f s\"", "lemma fds_abs_convergent_euler_product:\n  fixes f :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology} fds\"\n  assumes \"multiplicative_function (fds_nth f)\" and \"fds_abs_converges f s\"\n  shows   \"abs_convergent_prod \n             (\\<lambda>p. if prime p then \\<Sum>i. fds_nth f (p ^ i) / nat_power (p ^ i) s else 1)\"", "lemma fds_abs_convergent_euler_product':\n  fixes f :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology} fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" and \"fds_abs_converges f s\"\n  shows   \"abs_convergent_prod \n             (\\<lambda>p. if prime p then inverse (1 - fds_nth f p / nat_power p s) else 1)\"", "lemma fds_abs_convergent_zero_iff:\n  fixes f :: \"'a :: {nat_power_field, real_normed_field, banach, second_countable_topology} fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\"\n  assumes \"fds_abs_converges f s\"\n  shows   \"eval_fds f s = 0 \\<longleftrightarrow> (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)\"", "lemma \n  fixes s :: \"'a :: {nat_power_normed_field,banach,euclidean_space}\"\n  assumes \"s \\<bullet> 1 > 1\"\n  shows   euler_product_fds_zeta: \n            \"(\\<lambda>n. \\<Prod>p\\<le>n. if prime p then inverse (1 - 1 / nat_power p s) else 1)\n                \\<longlonglongrightarrow> eval_fds fds_zeta s\" (is ?th1)\n  and     eval_fds_zeta_nonzero: \"eval_fds fds_zeta s \\<noteq> 0\"", "lemma fds_primepow_subseries_euler_product_cm:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" \"prime p\"\n  assumes \"s \\<bullet> 1 > abs_conv_abscissa f\"\n  shows   \"eval_fds (fds_primepow_subseries p f) s = 1 / (1 - fds_nth f p / nat_power p s)\"", "lemma nonneg_Reals_sum: \"(\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0) \\<Longrightarrow> sum f A \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\"", "lemma nonneg_coeffs: \"fds_nth f n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\"", "lemma nonneg_dirichlet_series_0 [simp,intro]: \"nonneg_dirichlet_series 0\"", "lemma nonneg_dirichlet_series_1 [simp,intro]: \"nonneg_dirichlet_series 1\"", "lemma nonneg_dirichlet_series_const [simp,intro]: \n  \"c \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0 \\<Longrightarrow> nonneg_dirichlet_series (fds_const c)\"", "lemma nonneg_dirichlet_series_add [intro]:\n  assumes \"nonneg_dirichlet_series f\" \"nonneg_dirichlet_series g\"\n  shows   \"nonneg_dirichlet_series (f + g)\"", "lemma nonneg_dirichlet_series_mult [intro]:\n  assumes \"nonneg_dirichlet_series f\" \"nonneg_dirichlet_series g\"\n  shows   \"nonneg_dirichlet_series (f * g)\"", "lemma nonneg_dirichlet_series_power [intro]:\n  assumes \"nonneg_dirichlet_series f\"\n  shows   \"nonneg_dirichlet_series (f ^ n)\"", "lemma nonneg_exp [intro]: \"nonneg_dirichlet_series (fds_exp f)\"", "lemma nonneg_dirichlet_series_lnD: \n  assumes \"nonneg_dirichlet_series (fds_ln l f)\" \"exp l = fds_nth f (Suc 0)\"\n  shows   \"nonneg_dirichlet_series f\"", "lemma fds_of_real_norm: \"fds_of_real (fds_norm f) = f\"", "lemma pringsheim_landau_aux:\n  fixes c :: real and f :: \"complex fds\"\n  assumes \"nonneg_dirichlet_series f\"\n  assumes abscissa: \"c \\<ge> abs_conv_abscissa f\"\n  assumes g: \"\\<And>s. s \\<in> A \\<Longrightarrow> Re s > c \\<Longrightarrow> g s = eval_fds f s\"\n  assumes \"g holomorphic_on A\" \"open A\" \"c \\<in> A\"\n  shows   \"\\<exists>x. x < c \\<and> fds_abs_converges f (of_real x)\"", "theorem pringsheim_landau:\n  fixes c :: real and f :: \"complex fds\"\n  assumes \"nonneg_dirichlet_series f\"\n  assumes abscissa: \"abs_conv_abscissa f = c\"\n  assumes g: \"\\<And>s. s \\<in> A \\<Longrightarrow> Re s > c \\<Longrightarrow> g s = eval_fds f s\"\n  assumes \"g holomorphic_on A\" \"open A\" \"c \\<in> A\"\n  shows   False", "lemma fds_abs_summable_zeta_real_iff [simp]:\n  \"fds_abs_converges fds_zeta s \\<longleftrightarrow> s > (1 :: real)\"", "lemma fds_abs_summable_zeta_real: \"s > (1 :: real) \\<Longrightarrow> fds_abs_converges fds_zeta s\"", "lemma fds_abs_converges_moebius_mu_real: \n  assumes \"s > (1 :: real)\"\n  shows   \"fds_abs_converges (fds moebius_mu) s\"", "lemma inverse_squares_sums': \"(\\<lambda>n. 1 / real n ^ 2) sums (pi ^ 2 / 6)\"", "lemma norm_summable_moebius_over_square: \n  \"summable (\\<lambda>n. norm (moebius_mu n / real n ^ 2))\"", "lemma summable_moebius_over_square:\n  \"summable (\\<lambda>n. moebius_mu n / real n ^ 2)\"", "lemma moebius_over_square_sums: \"(\\<lambda>n. moebius_mu n / n\\<^sup>2) sums (6 / pi\\<^sup>2)\""], "translations": [["", "lemma frequently_eventually_frequently:\n  \"frequently P F \\<Longrightarrow> eventually Q F \\<Longrightarrow> frequently (\\<lambda>x. P x \\<and> Q x) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>frequently P F; eventually Q F\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<^sub>F x in F. P x \\<and> Q x", "by (erule frequently_rev_mp, erule eventually_mono) auto"], ["", "text \\<open>\n  The following illustrates a concept we will need later on: A property holds for\n  \\<open>f\\<close> going to \\<open>F\\<close> if we can find e.\\,g.\\ a sequence that tends to \\<open>F\\<close> and whose elements\n  eventually satisfy \\<open>P\\<close>.\n\\<close>"], ["", "lemma frequently_going_toI:\n  assumes \"filterlim (\\<lambda>n. f (g n)) F G\"\n  assumes \"eventually (\\<lambda>n. P (g n)) G\"\n  assumes \"eventually (\\<lambda>n. g n \\<in> A) G\"\n  assumes \"G \\<noteq> bot\"\n  shows   \"frequently P (f going_to F within A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frequently P (f going_to F within A)", "unfolding frequently_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>\\<^sub>F x in f going_to F within A. \\<not> P x)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in f going_to F within A.\n       \\<not> P x \\<Longrightarrow>\n    False", "assume \"eventually (\\<lambda>x. \\<not>P x) (f going_to F within A)\""], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in f going_to F within A. \\<not> P x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in f going_to F within A.\n       \\<not> P x \\<Longrightarrow>\n    False", "hence \"eventually (\\<lambda>x. \\<not>P x) (inf (filtercomap f F) (principal A))\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in f going_to F within A. \\<not> P x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in inf (filtercomap f F) (principal A). \\<not> P x", "by (simp add: going_to_within_def)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in inf (filtercomap f F) (principal A). \\<not> P x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in f going_to F within A.\n       \\<not> P x \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in inf (filtercomap f F) (principal A). \\<not> P x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in f going_to F within A.\n       \\<not> P x \\<Longrightarrow>\n    False", "have \"filterlim (\\<lambda>n. g n) (inf (filtercomap f F) (principal A)) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filterlim g (inf (filtercomap f F) (principal A)) G", "using assms"], ["proof (prove)\nusing this:\n  LIM n G. f (g n) :> F\n  \\<forall>\\<^sub>F n in G. P (g n)\n  \\<forall>\\<^sub>F n in G. g n \\<in> A\n  G \\<noteq> bot\n\ngoal (1 subgoal):\n 1. filterlim g (inf (filtercomap f F) (principal A)) G", "unfolding filterlim_inf filterlim_principal"], ["proof (prove)\nusing this:\n  LIM n G. f (g n) :> F\n  \\<forall>\\<^sub>F n in G. P (g n)\n  \\<forall>\\<^sub>F n in G. g n \\<in> A\n  G \\<noteq> bot\n\ngoal (1 subgoal):\n 1. filterlim g (filtercomap f F) G \\<and>\n    (\\<forall>\\<^sub>F x in G. g x \\<in> A)", "by (auto simp add: filterlim_iff_le_filtercomap filtercomap_filtercomap)"], ["proof (state)\nthis:\n  filterlim g (inf (filtercomap f F) (principal A)) G\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in f going_to F within A.\n       \\<not> P x \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in inf (filtercomap f F) (principal A). \\<not> P x\n  filterlim g (inf (filtercomap f F) (principal A)) G", "have \"eventually (\\<lambda>n. \\<not>P (g n)) G\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in inf (filtercomap f F) (principal A). \\<not> P x\n  filterlim g (inf (filtercomap f F) (principal A)) G\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in G. \\<not> P (g n)", "by (rule eventually_compose_filterlim)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in G. \\<not> P (g n)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in f going_to F within A.\n       \\<not> P x \\<Longrightarrow>\n    False", "with assms(2)"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F n in G. P (g n)\n  \\<forall>\\<^sub>F n in G. \\<not> P (g n)", "have \"eventually (\\<lambda>_. False) G\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in G. P (g n)\n  \\<forall>\\<^sub>F n in G. \\<not> P (g n)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F _ in G. False", "by eventually_elim auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F _ in G. False\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in f going_to F within A.\n       \\<not> P x \\<Longrightarrow>\n    False", "with assms(4)"], ["proof (chain)\npicking this:\n  G \\<noteq> bot\n  \\<forall>\\<^sub>F _ in G. False", "show False"], ["proof (prove)\nusing this:\n  G \\<noteq> bot\n  \\<forall>\\<^sub>F _ in G. False\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma frequently_filtercomapI:\n  assumes \"filterlim (\\<lambda>n. f (g n)) F G\"\n  assumes \"eventually (\\<lambda>n. P (g n)) G\"\n  assumes \"G \\<noteq> bot\"\n  shows   \"frequently P (filtercomap f F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frequently P (filtercomap f F)", "using frequently_going_toI[of f g F G P UNIV] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>LIM n G. f (g n) :> F; \\<forall>\\<^sub>F n in G. P (g n);\n   \\<forall>\\<^sub>F n in G. g n \\<in> UNIV; G \\<noteq> bot\\<rbrakk>\n  \\<Longrightarrow> frequently P (f going_to F)\n  LIM n G. f (g n) :> F\n  \\<forall>\\<^sub>F n in G. P (g n)\n  G \\<noteq> bot\n\ngoal (1 subgoal):\n 1. frequently P (filtercomap f F)", "by (simp add: going_to_def)"], ["", "lemma frequently_going_to_at_topE:\n  fixes f :: \"'a \\<Rightarrow> real\"\n  assumes \"frequently P (f going_to at_top)\"\n  obtains g where \"\\<And>n. P (g n)\" and \"filterlim (\\<lambda>n. f (g n)) at_top sequentially\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>\\<And>n. P (g n);\n         LIM n sequentially. f (g n) :> at_top\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>\\<And>n. P (g n);\n         LIM n sequentially. f (g n) :> at_top\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  frequently P (f going_to at_top)", "have \"\\<forall>k. \\<exists>x. f x \\<ge> real k \\<and> P x\""], ["proof (prove)\nusing this:\n  frequently P (f going_to at_top)\n\ngoal (1 subgoal):\n 1. \\<forall>k. \\<exists>x. real k \\<le> f x \\<and> P x", "by (auto simp: frequently_def eventually_going_to_at_top_linorder)"], ["proof (state)\nthis:\n  \\<forall>k. \\<exists>x. real k \\<le> f x \\<and> P x\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>\\<And>n. P (g n);\n         LIM n sequentially. f (g n) :> at_top\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"\\<exists>g. \\<forall>k. f (g k) \\<ge> real k \\<and> P (g k)\""], ["proof (prove)\nusing this:\n  \\<forall>k. \\<exists>x. real k \\<le> f x \\<and> P x\n\ngoal (1 subgoal):\n 1. \\<exists>g. \\<forall>k. real k \\<le> f (g k) \\<and> P (g k)", "by metis"], ["proof (state)\nthis:\n  \\<exists>g. \\<forall>k. real k \\<le> f (g k) \\<and> P (g k)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>\\<And>n. P (g n);\n         LIM n sequentially. f (g n) :> at_top\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>g. \\<forall>k. real k \\<le> f (g k) \\<and> P (g k)", "obtain g where g: \"\\<And>k. f (g k) \\<ge> real k\" \"\\<And>k. P (g k)\""], ["proof (prove)\nusing this:\n  \\<exists>g. \\<forall>k. real k \\<le> f (g k) \\<and> P (g k)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>\\<And>k. real k \\<le> f (g k); \\<And>k. P (g k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  real ?k \\<le> f (g ?k)\n  P (g ?k)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>\\<And>n. P (g n);\n         LIM n sequentially. f (g n) :> at_top\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"filterlim (\\<lambda>n. f (g n)) at_top sequentially\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LIM n sequentially. f (g n) :> at_top", "by (rule filterlim_at_top_mono[OF filterlim_real_sequentially]) (use g in auto)"], ["proof (state)\nthis:\n  LIM n sequentially. f (g n) :> at_top\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>\\<And>n. P (g n);\n         LIM n sequentially. f (g n) :> at_top\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from g(2) and this"], ["proof (chain)\npicking this:\n  P (g ?k)\n  LIM n sequentially. f (g n) :> at_top", "show ?thesis"], ["proof (prove)\nusing this:\n  P (g ?k)\n  LIM n sequentially. f (g n) :> at_top\n\ngoal (1 subgoal):\n 1. thesis", "using that[of g]"], ["proof (prove)\nusing this:\n  P (g ?k)\n  LIM n sequentially. f (g n) :> at_top\n  \\<lbrakk>\\<And>n. P (g n); LIM n sequentially. f (g n) :> at_top\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Apostol often uses statements like `$P(s_k)$ for all $k$ in an infinite sequence\n  $s_k$ such that $\\mathfrak{R}(s_k)\\longrightarrow\\infty$ as $k\\to\\infty$'.\n\n  Instead, we write @{prop \"frequently P (Re going_to at_top)\"}. This lemma shows that\n  our statement is equivalent to his.\n\\<close>"], ["", "lemma frequently_going_to_at_top_iff:\n  \"frequently P (f going_to (at_top :: real filter)) \\<longleftrightarrow>\n     (\\<exists>g. \\<forall>n. P (g n) \\<and> filterlim (\\<lambda>n. f (g n)) at_top sequentially)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frequently P (f going_to at_top) =\n    (\\<exists>g.\n        \\<forall>n. P (g n) \\<and> (LIM n sequentially. f (g n) :> at_top))", "by (auto intro: frequently_going_toI elim!: frequently_going_to_at_topE)"], ["", "(* END TODO *)"], ["", "lemma surj_bullet_1: \"surj (\\<lambda>s::'a::{real_normed_algebra_1, real_inner}. s \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. surj (\\<lambda>s. s \\<bullet> (1::'a))", "proof (rule surjI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. ?f x \\<bullet> (1::'a) = x", "fix x :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. ?f x \\<bullet> (1::'a) = x", "show \"(x *\\<^sub>R 1) \\<bullet> (1 :: 'a) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x *\\<^sub>R (1::'a) \\<bullet> (1::'a) = x", "by (simp add: dot_square_norm)"], ["proof (state)\nthis:\n  x *\\<^sub>R (1::'a) \\<bullet> (1::'a) = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bullet_1_going_to_at_top_neq_bot [simp]:\n  \"((\\<lambda>s::'a::{real_normed_algebra_1, real_inner}. s \\<bullet> 1) going_to at_top) \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top \\<noteq> bot", "unfolding going_to_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. filtercomap (\\<lambda>s. s \\<bullet> (1::'a)) at_top \\<noteq> bot", "by (rule filtercomap_neq_bot_surj[OF _ surj_bullet_1]) auto"], ["", "lemma fds_abs_converges_altdef:\n  \"fds_abs_converges f s \\<longleftrightarrow> (\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on {1..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges f s =\n    ((\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on {1..})", "by (auto simp add: fds_abs_converges_def abs_summable_on_nat_iff\n           intro!: summable_cong eventually_mono[OF eventually_gt_at_top[of 0]])"], ["", "lemma fds_abs_converges_altdef':\n  \"fds_abs_converges f s \\<longleftrightarrow> (\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges f s =\n    ((\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on UNIV)", "by (subst fds_abs_converges_altdef, rule abs_summable_on_cong_neutral) (auto simp: Suc_le_eq)"], ["", "lemma eval_fds_altdef:\n  assumes \"fds_abs_converges f s\"\n  shows   \"eval_fds f s = (\\<Sum>\\<^sub>an. fds_nth f n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds f s = (\\<Sum>\\<^sub>an. fds_nth f n / nat_power n s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds f s = (\\<Sum>\\<^sub>an. fds_nth f n / nat_power n s)", "have \"fds_abs_converges f s \\<longleftrightarrow> (\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges f s =\n    ((\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on UNIV)", "unfolding fds_abs_converges_altdef"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on {1..}) =\n    ((\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on UNIV)", "by (intro abs_summable_on_cong_neutral) (auto simp: Suc_le_eq)"], ["proof (state)\nthis:\n  fds_abs_converges f s =\n  ((\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on UNIV)\n\ngoal (1 subgoal):\n 1. eval_fds f s = (\\<Sum>\\<^sub>an. fds_nth f n / nat_power n s)", "with assms"], ["proof (chain)\npicking this:\n  fds_abs_converges f s\n  fds_abs_converges f s =\n  ((\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on UNIV)", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n  fds_abs_converges f s =\n  ((\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on UNIV)\n\ngoal (1 subgoal):\n 1. eval_fds f s = (\\<Sum>\\<^sub>an. fds_nth f n / nat_power n s)", "unfolding eval_fds_def fds_abs_converges_altdef"], ["proof (prove)\nusing this:\n  (\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on {1..}\n  ((\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on {1..}) =\n  ((\\<lambda>n. fds_nth f n / nat_power n s) abs_summable_on UNIV)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. fds_nth f n / nat_power n s) =\n    (\\<Sum>\\<^sub>an. fds_nth f n / nat_power n s)", "by (intro infsetsum_nat' [symmetric]) simp_all"], ["proof (state)\nthis:\n  eval_fds f s = (\\<Sum>\\<^sub>an. fds_nth f n / nat_power n s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multiplicative_function_divide_nat_power:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {nat_power, field}\"\n  assumes \"multiplicative_function f\"\n  shows   \"multiplicative_function (\\<lambda>n. f n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. f n / nat_power n s)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 / nat_power 0 s = (0::'a)\n 2. f 1 / nat_power 1 s = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) / nat_power (a * b) s =\n                         f a / nat_power a s * (f b / nat_power b s)", "interpret f: multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by fact"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 / nat_power 0 s = (0::'a)\n 2. f 1 / nat_power 1 s = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) / nat_power (a * b) s =\n                         f a / nat_power a s * (f b / nat_power b s)", "show \"f 0 / nat_power 0 s = 0\" \"f 1 / nat_power 1 s = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 / nat_power 0 s = (0::'a) &&& f 1 / nat_power 1 s = (1::'a)", "by simp_all"], ["proof (state)\nthis:\n  f 0 / nat_power 0 s = (0::'a)\n  f 1 / nat_power 1 s = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) / nat_power (a * b) s =\n                         f a / nat_power a s * (f b / nat_power b s)", "fix a b :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) / nat_power (a * b) s =\n                         f a / nat_power a s * (f b / nat_power b s)", "assume \"a > 1\" \"b > 1\" \"coprime a b\""], ["proof (state)\nthis:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) / nat_power (a * b) s =\n                         f a / nat_power a s * (f b / nat_power b s)", "thus \"f (a * b) / nat_power (a * b) s = f a / nat_power a s * (f b / nat_power b s)\""], ["proof (prove)\nusing this:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. f (a * b) / nat_power (a * b) s =\n    f a / nat_power a s * (f b / nat_power b s)", "by (simp_all add: f.mult_coprime nat_power_mult_distrib)"], ["proof (state)\nthis:\n  f (a * b) / nat_power (a * b) s =\n  f a / nat_power a s * (f b / nat_power b s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma completely_multiplicative_function_divide_nat_power:\n  fixes f :: \"nat \\<Rightarrow> 'a :: {nat_power, field}\"\n  assumes \"completely_multiplicative_function f\"\n  shows   \"completely_multiplicative_function (\\<lambda>n. f n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function (\\<lambda>n. f n / nat_power n s)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 / nat_power 0 s = (0::'a)\n 2. f (Suc 0) / nat_power (Suc 0) s = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) / nat_power (a * b) s =\n                         f a / nat_power a s * (f b / nat_power b s)", "interpret f: completely_multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f", "by fact"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 / nat_power 0 s = (0::'a)\n 2. f (Suc 0) / nat_power (Suc 0) s = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) / nat_power (a * b) s =\n                         f a / nat_power a s * (f b / nat_power b s)", "show \"f 0 / nat_power 0 s = 0\" \"f (Suc 0) / nat_power (Suc 0) s = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 / nat_power 0 s = (0::'a) &&&\n    f (Suc 0) / nat_power (Suc 0) s = (1::'a)", "by simp_all"], ["proof (state)\nthis:\n  f 0 / nat_power 0 s = (0::'a)\n  f (Suc 0) / nat_power (Suc 0) s = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) / nat_power (a * b) s =\n                         f a / nat_power a s * (f b / nat_power b s)", "fix a b :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) / nat_power (a * b) s =\n                         f a / nat_power a s * (f b / nat_power b s)", "assume \"a > 1\" \"b > 1\""], ["proof (state)\nthis:\n  1 < a\n  1 < b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) / nat_power (a * b) s =\n                         f a / nat_power a s * (f b / nat_power b s)", "thus \"f (a * b) / nat_power (a * b) s = f a / nat_power a s * (f b / nat_power b s)\""], ["proof (prove)\nusing this:\n  1 < a\n  1 < b\n\ngoal (1 subgoal):\n 1. f (a * b) / nat_power (a * b) s =\n    f a / nat_power a s * (f b / nat_power b s)", "by (simp_all add: f.mult nat_power_mult_distrib)"], ["proof (state)\nthis:\n  f (a * b) / nat_power (a * b) s =\n  f a / nat_power a s * (f b / nat_power b s)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Convergence and absolute convergence\\<close>"], ["", "class nat_power_normed_field = nat_power_field + real_normed_field + real_inner + real_algebra_1 +\n  fixes real_power :: \"real \\<Rightarrow> 'a \\<Rightarrow> 'a\"\n  assumes real_power_nat_power: \"n > 0 \\<Longrightarrow> real_power (real n) c = nat_power n c\"\n  assumes real_power_1_right_aux: \"d > 0 \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\"\n  assumes real_power_add: \"d > 0 \\<Longrightarrow> real_power d (a + b) = real_power d a * real_power d b\"\n  assumes real_power_nonzero [simp]: \"d > 0 \\<Longrightarrow> real_power d a \\<noteq> 0\"\n  assumes norm_real_power: \"x > 0 \\<Longrightarrow> norm (real_power x c) = x powr (c \\<bullet> 1)\"\n  assumes nat_power_of_real_aux: \"nat_power n (x *\\<^sub>R 1) = ((real n powr x) *\\<^sub>R 1)\"\n  assumes has_field_derivative_nat_power_aux:\n            \"\\<And>x::'a. n > 0 \\<Longrightarrow> LIM y inf_class.inf\n              (Inf (principal ` {S. open S \\<and> x \\<in> S})) (principal (UNIV - {x})).\n                (nat_power n y - nat_power n x - ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n                norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\"\n  assumes has_vector_derivative_real_power_aux:\n            \"x > 0 \\<Longrightarrow> filterlim (\\<lambda>y. (real_power y c - real_power x (c :: 'a) -\n               (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n               norm (y - x)) (INF S\\<in>{S. open S \\<and> 0 \\<in> S}. principal S) (at x)\"\n  assumes norm_nat_power: \"n > 0 \\<Longrightarrow> norm (nat_power n y) = real n powr (y \\<bullet> 1)\"\nbegin"], ["", "lemma real_power_diff: \"d > 0 \\<Longrightarrow> real_power d (a - b) = real_power d a / real_power d b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow>\n    real_power d (a - b) = real_power d a / real_power d b", "using real_power_add[of d b \"a - b\"]"], ["proof (prove)\nusing this:\n  0 < d \\<Longrightarrow>\n  real_power d (b + (a - b)) = real_power d b * real_power d (a - b)\n\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow>\n    real_power d (a - b) = real_power d a / real_power d b", "by (simp add: field_simps)"], ["", "end"], ["", "lemma real_power_1_right [simp]: \"d > 0 \\<Longrightarrow> real_power d 1 = of_real d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow> real_power d (1::'a) = of_real d", "using real_power_1_right_aux[of d]"], ["proof (prove)\nusing this:\n  0 < d \\<Longrightarrow> real_power d (1::?'a) = d *\\<^sub>R (1::?'a)\n\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow> real_power d (1::'a) = of_real d", "by (simp add: scaleR_conv_of_real)"], ["", "lemma has_vector_derivative_real_power [derivative_intros]:\n  \"x > 0 \\<Longrightarrow> ((\\<lambda>y. real_power y c) has_vector_derivative c * real_power x (c - 1)) (at x within A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow>\n    ((\\<lambda>y. real_power y c) has_vector_derivative\n     c * real_power x (c - (1::'a)))\n     (at x within A)", "by (rule has_vector_derivative_at_within)\n     (insert has_vector_derivative_real_power_aux[of x c],\n      simp add: has_vector_derivative_def has_derivative_def\n                nhds_def bounded_linear_scaleR_left)"], ["", "lemma has_field_derivative_nat_power [derivative_intros]:\n  \"n > 0 \\<Longrightarrow> ((\\<lambda>y. nat_power n y) has_field_derivative ln (real n) *\\<^sub>R nat_power n x)\n     (at (x :: 'a :: nat_power_normed_field) within A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    (nat_power n has_field_derivative ln (real n) *\\<^sub>R nat_power n x)\n     (at x within A)", "by (rule has_field_derivative_at_within)\n     (insert has_field_derivative_nat_power_aux[of n x],\n      simp only: has_field_derivative_def has_derivative_def netlimit_at,\n      simp add: nhds_def at_within_def bounded_linear_mult_right)"], ["", "lemma continuous_on_real_power [continuous_intros]: \n  \"A \\<subseteq> {0<..} \\<Longrightarrow> continuous_on A (\\<lambda>x. real_power x s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> {0<..} \\<Longrightarrow>\n    continuous_on A (\\<lambda>x. real_power x s)", "by (rule continuous_on_vector_derivative has_vector_derivative_real_power)+ auto"], ["", "instantiation real :: nat_power_normed_field\nbegin"], ["", "definition real_power_real :: \"real \\<Rightarrow> real \\<Rightarrow> real\" where\n  [simp]: \"real_power_real = (powr)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(real, nat_power_normed_field_class)", "proof (standard, goal_cases)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 2. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 3. \\<And>d a b.\n       0 < d \\<Longrightarrow>\n       real_power d (a + b) = real_power d a * real_power d b\n 4. \\<And>d a. 0 < d \\<Longrightarrow> real_power d a \\<noteq> 0\n 5. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       norm (real_power x c) = x powr (c \\<bullet> 1)\n 6. \\<And>n x. nat_power n (x *\\<^sub>R 1) = real n powr x *\\<^sub>R 1\n 7. \\<And>n x.\n       0 < n \\<Longrightarrow>\n       LIM y inf (Inf (principal ` {S. open S \\<and> x \\<in> S}))\n              (principal (UNIV - {x})).\n          (nat_power n y - nat_power n x -\n           ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n          norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n 8. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       LIM y at x.\n          (real_power y c - real_power x c -\n           (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n          norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n 9. \\<And>n y.\n       0 < n \\<Longrightarrow>\n       norm (nat_power n y) = real n powr (y \\<bullet> 1)", "case (7 n x)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (9 subgoals):\n 1. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 2. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 3. \\<And>d a b.\n       0 < d \\<Longrightarrow>\n       real_power d (a + b) = real_power d a * real_power d b\n 4. \\<And>d a. 0 < d \\<Longrightarrow> real_power d a \\<noteq> 0\n 5. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       norm (real_power x c) = x powr (c \\<bullet> 1)\n 6. \\<And>n x. nat_power n (x *\\<^sub>R 1) = real n powr x *\\<^sub>R 1\n 7. \\<And>n x.\n       0 < n \\<Longrightarrow>\n       LIM y inf (Inf (principal ` {S. open S \\<and> x \\<in> S}))\n              (principal (UNIV - {x})).\n          (nat_power n y - nat_power n x -\n           ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n          norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n 8. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       LIM y at x.\n          (real_power y c - real_power x c -\n           (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n          norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n 9. \\<And>n y.\n       0 < n \\<Longrightarrow>\n       norm (nat_power n y) = real n powr (y \\<bullet> 1)", "hence \"((\\<lambda>x. nat_power n x) has_field_derivative ln (real n) *\\<^sub>R nat_power n x) (at x)\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (nat_power n has_real_derivative ln (real n) *\\<^sub>R nat_power n x)\n     (at x)", "by (auto intro!: derivative_eq_intros simp: powr_def)"], ["proof (state)\nthis:\n  (nat_power n has_real_derivative ln (real n) *\\<^sub>R nat_power n x)\n   (at x)\n\ngoal (9 subgoals):\n 1. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 2. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 3. \\<And>d a b.\n       0 < d \\<Longrightarrow>\n       real_power d (a + b) = real_power d a * real_power d b\n 4. \\<And>d a. 0 < d \\<Longrightarrow> real_power d a \\<noteq> 0\n 5. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       norm (real_power x c) = x powr (c \\<bullet> 1)\n 6. \\<And>n x. nat_power n (x *\\<^sub>R 1) = real n powr x *\\<^sub>R 1\n 7. \\<And>n x.\n       0 < n \\<Longrightarrow>\n       LIM y inf (Inf (principal ` {S. open S \\<and> x \\<in> S}))\n              (principal (UNIV - {x})).\n          (nat_power n y - nat_power n x -\n           ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n          norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n 8. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       LIM y at x.\n          (real_power y c - real_power x c -\n           (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n          norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n 9. \\<And>n y.\n       0 < n \\<Longrightarrow>\n       norm (nat_power n y) = real n powr (y \\<bullet> 1)", "thus ?case"], ["proof (prove)\nusing this:\n  (nat_power n has_real_derivative ln (real n) *\\<^sub>R nat_power n x)\n   (at x)\n\ngoal (1 subgoal):\n 1. LIM y inf (Inf (principal ` {S. open S \\<and> x \\<in> S}))\n           (principal (UNIV - {x})).\n       (nat_power n y - nat_power n x -\n        ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n       norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})", "unfolding has_field_derivative_def netlimit_at has_derivative_def"], ["proof (prove)\nusing this:\n  bounded_linear ((*) (ln (real n) *\\<^sub>R nat_power n x)) \\<and>\n  (\\<lambda>y.\n      (nat_power n y - nat_power n x -\n       ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n      norm (y - x))\n  \\<midarrow>x\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. LIM y inf (Inf (principal ` {S. open S \\<and> x \\<in> S}))\n           (principal (UNIV - {x})).\n       (nat_power n y - nat_power n x -\n        ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n       norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})", "by (simp add: nhds_def at_within_def)"], ["proof (state)\nthis:\n  LIM y inf (Inf (principal ` {S. open S \\<and> x \\<in> S}))\n         (principal (UNIV - {x})).\n     (nat_power n y - nat_power n x -\n      ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n     norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n\ngoal (8 subgoals):\n 1. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 2. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 3. \\<And>d a b.\n       0 < d \\<Longrightarrow>\n       real_power d (a + b) = real_power d a * real_power d b\n 4. \\<And>d a. 0 < d \\<Longrightarrow> real_power d a \\<noteq> 0\n 5. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       norm (real_power x c) = x powr (c \\<bullet> 1)\n 6. \\<And>n x. nat_power n (x *\\<^sub>R 1) = real n powr x *\\<^sub>R 1\n 7. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       LIM y at x.\n          (real_power y c - real_power x c -\n           (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n          norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n 8. \\<And>n y.\n       0 < n \\<Longrightarrow>\n       norm (nat_power n y) = real n powr (y \\<bullet> 1)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 2. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 3. \\<And>d a b.\n       0 < d \\<Longrightarrow>\n       real_power d (a + b) = real_power d a * real_power d b\n 4. \\<And>d a. 0 < d \\<Longrightarrow> real_power d a \\<noteq> 0\n 5. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       norm (real_power x c) = x powr (c \\<bullet> 1)\n 6. \\<And>n x. nat_power n (x *\\<^sub>R 1) = real n powr x *\\<^sub>R 1\n 7. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       LIM y at x.\n          (real_power y c - real_power x c -\n           (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n          norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n 8. \\<And>n y.\n       0 < n \\<Longrightarrow>\n       norm (nat_power n y) = real n powr (y \\<bullet> 1)", "case (8 x c)"], ["proof (state)\nthis:\n  0 < x\n\ngoal (8 subgoals):\n 1. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 2. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 3. \\<And>d a b.\n       0 < d \\<Longrightarrow>\n       real_power d (a + b) = real_power d a * real_power d b\n 4. \\<And>d a. 0 < d \\<Longrightarrow> real_power d a \\<noteq> 0\n 5. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       norm (real_power x c) = x powr (c \\<bullet> 1)\n 6. \\<And>n x. nat_power n (x *\\<^sub>R 1) = real n powr x *\\<^sub>R 1\n 7. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       LIM y at x.\n          (real_power y c - real_power x c -\n           (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n          norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n 8. \\<And>n y.\n       0 < n \\<Longrightarrow>\n       norm (nat_power n y) = real n powr (y \\<bullet> 1)", "hence \"((\\<lambda>y. real_power y c) has_vector_derivative c * real_power x (c - 1)) (at x)\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>y. real_power y c) has_vector_derivative\n     c * real_power x (c - 1))\n     (at x)", "by (auto intro!: derivative_eq_intros\n             simp: has_field_derivative_iff_has_vector_derivative [symmetric])"], ["proof (state)\nthis:\n  ((\\<lambda>y. real_power y c) has_vector_derivative\n   c * real_power x (c - 1))\n   (at x)\n\ngoal (8 subgoals):\n 1. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 2. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 3. \\<And>d a b.\n       0 < d \\<Longrightarrow>\n       real_power d (a + b) = real_power d a * real_power d b\n 4. \\<And>d a. 0 < d \\<Longrightarrow> real_power d a \\<noteq> 0\n 5. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       norm (real_power x c) = x powr (c \\<bullet> 1)\n 6. \\<And>n x. nat_power n (x *\\<^sub>R 1) = real n powr x *\\<^sub>R 1\n 7. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       LIM y at x.\n          (real_power y c - real_power x c -\n           (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n          norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n 8. \\<And>n y.\n       0 < n \\<Longrightarrow>\n       norm (nat_power n y) = real n powr (y \\<bullet> 1)", "thus ?case"], ["proof (prove)\nusing this:\n  ((\\<lambda>y. real_power y c) has_vector_derivative\n   c * real_power x (c - 1))\n   (at x)\n\ngoal (1 subgoal):\n 1. LIM y at x.\n       (real_power y c - real_power x c -\n        (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n       norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})", "by (simp add: has_vector_derivative_def has_derivative_def nhds_def)"], ["proof (state)\nthis:\n  LIM y at x.\n     (real_power y c - real_power x c -\n      (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n     norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n\ngoal (7 subgoals):\n 1. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 2. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 3. \\<And>d a b.\n       0 < d \\<Longrightarrow>\n       real_power d (a + b) = real_power d a * real_power d b\n 4. \\<And>d a. 0 < d \\<Longrightarrow> real_power d a \\<noteq> 0\n 5. \\<And>x c.\n       0 < x \\<Longrightarrow>\n       norm (real_power x c) = x powr (c \\<bullet> 1)\n 6. \\<And>n x. nat_power n (x *\\<^sub>R 1) = real n powr x *\\<^sub>R 1\n 7. \\<And>n y.\n       0 < n \\<Longrightarrow>\n       norm (nat_power n y) = real n powr (y \\<bullet> 1)", "qed (simp_all add: powr_add)"], ["", "end"], ["", "instantiation complex :: nat_power_normed_field\nbegin"], ["", "definition nat_power_complex :: \"nat \\<Rightarrow> complex \\<Rightarrow> complex\" where\n   [simp]: \"nat_power_complex n z = of_nat n powr z\""], ["", "definition real_power_complex :: \"real \\<Rightarrow> complex \\<Rightarrow> complex\" where\n  [simp]: \"real_power_complex = (\\<lambda>x y. of_real x powr y)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(complex, nat_power_normed_field_class)", "proof"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>m n a.\n       \\<lbrakk>0 < m; 0 < n\\<rbrakk>\n       \\<Longrightarrow> nat_power (m * n) a = nat_power m a * nat_power n a\n 7. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 8. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 9. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 10. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\nA total of 17 subgoals...", "fix m n :: nat and z :: complex"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>m n a.\n       \\<lbrakk>0 < m; 0 < n\\<rbrakk>\n       \\<Longrightarrow> nat_power (m * n) a = nat_power m a * nat_power n a\n 7. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 8. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 9. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 10. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\nA total of 17 subgoals...", "assume \"m > 0\" \"n > 0\""], ["proof (state)\nthis:\n  0 < m\n  0 < n\n\ngoal (17 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>m n a.\n       \\<lbrakk>0 < m; 0 < n\\<rbrakk>\n       \\<Longrightarrow> nat_power (m * n) a = nat_power m a * nat_power n a\n 7. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 8. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 9. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 10. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\nA total of 17 subgoals...", "thus \"nat_power (m * n) z = nat_power m z * nat_power n z\""], ["proof (prove)\nusing this:\n  0 < m\n  0 < n\n\ngoal (1 subgoal):\n 1. nat_power (m * n) z = nat_power m z * nat_power n z", "unfolding nat_power_complex_def of_nat_mult"], ["proof (prove)\nusing this:\n  0 < m\n  0 < n\n\ngoal (1 subgoal):\n 1. (of_nat m * of_nat n) powr z = of_nat m powr z * of_nat n powr z", "by (subst powr_times_real) simp_all"], ["proof (state)\nthis:\n  nat_power (m * n) z = nat_power m z * nat_power n z\n\ngoal (16 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 16 subgoals...", "fix n :: nat and z :: complex"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 16 subgoals...", "assume \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (16 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 16 subgoals...", "show \"norm (nat_power n z) = real n powr (z \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmod (nat_power n z) = real n powr (z \\<bullet> 1)", "unfolding nat_power_complex_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cmod (of_nat n powr z) = real n powr (z \\<bullet> 1)", "using norm_powr_real_powr[of \"of_nat n\" z]"], ["proof (prove)\nusing this:\n  \\<lbrakk>of_nat n \\<in> \\<real>; 0 \\<le> Re (of_nat n)\\<rbrakk>\n  \\<Longrightarrow> cmod (of_nat n powr z) = Re (of_nat n) powr Re z\n\ngoal (1 subgoal):\n 1. cmod (of_nat n powr z) = real n powr (z \\<bullet> 1)", "by simp"], ["proof (state)\nthis:\n  cmod (nat_power n z) = real n powr (z \\<bullet> 1)\n\ngoal (15 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 15 subgoals...", "fix n :: nat and x :: complex"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 15 subgoals...", "assume n: \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (15 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 15 subgoals...", "hence \"((\\<lambda>x. nat_power n x) has_field_derivative ln (real n) *\\<^sub>R nat_power n x) (at x)\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (nat_power n has_field_derivative ln (real n) *\\<^sub>R nat_power n x)\n     (at x)", "by (auto intro!: derivative_eq_intros simp: powr_def scaleR_conv_of_real mult_ac)"], ["proof (state)\nthis:\n  (nat_power n has_field_derivative ln (real n) *\\<^sub>R nat_power n x)\n   (at x)\n\ngoal (15 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 15 subgoals...", "thus \"LIM y inf_class.inf (Inf (principal ` {S. open S \\<and> x \\<in> S})) (principal (UNIV - {x})).\n           (nat_power n y - nat_power n x - ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n           cmod (y - x) :> (Inf (principal ` {S. open S \\<and> 0 \\<in> S}))\""], ["proof (prove)\nusing this:\n  (nat_power n has_field_derivative ln (real n) *\\<^sub>R nat_power n x)\n   (at x)\n\ngoal (1 subgoal):\n 1. LIM y inf (Inf (principal ` {S. open S \\<and> x \\<in> S}))\n           (principal (UNIV - {x})).\n       (nat_power n y - nat_power n x -\n        ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n       cmod (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})", "unfolding has_field_derivative_def netlimit_at has_derivative_def"], ["proof (prove)\nusing this:\n  bounded_linear ((*) (ln (real n) *\\<^sub>R nat_power n x)) \\<and>\n  (\\<lambda>y.\n      (nat_power n y - nat_power n x -\n       ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n      cmod (y - x))\n  \\<midarrow>x\\<rightarrow> 0\n\ngoal (1 subgoal):\n 1. LIM y inf (Inf (principal ` {S. open S \\<and> x \\<in> S}))\n           (principal (UNIV - {x})).\n       (nat_power n y - nat_power n x -\n        ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n       cmod (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})", "by (simp add: nhds_def at_within_def)"], ["proof (state)\nthis:\n  LIM y inf (Inf (principal ` {S. open S \\<and> x \\<in> S}))\n         (principal (UNIV - {x})).\n     (nat_power n y - nat_power n x -\n      ln (real n) *\\<^sub>R nat_power n x * (y - x)) /\\<^sub>R\n     cmod (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n\ngoal (14 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 14 subgoals...", "fix x :: real and c :: complex"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 14 subgoals...", "assume \"x > 0\""], ["proof (state)\nthis:\n  0 < x\n\ngoal (14 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 14 subgoals...", "hence \"((\\<lambda>y. real_power y c) has_vector_derivative c * real_power x (c - 1)) (at x)\""], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>y. real_power y c) has_vector_derivative\n     c * real_power x (c - 1))\n     (at x)", "by (auto intro!: derivative_eq_intros has_vector_derivative_real_field)"], ["proof (state)\nthis:\n  ((\\<lambda>y. real_power y c) has_vector_derivative\n   c * real_power x (c - 1))\n   (at x)\n\ngoal (14 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 14 subgoals...", "thus \"LIM y at x. (real_power y c - real_power x c - (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n           norm (y - x) :> INF S\\<in>{S. open S \\<and> 0 \\<in> S}. principal S\""], ["proof (prove)\nusing this:\n  ((\\<lambda>y. real_power y c) has_vector_derivative\n   c * real_power x (c - 1))\n   (at x)\n\ngoal (1 subgoal):\n 1. LIM y at x.\n       (real_power y c - real_power x c -\n        (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n       norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})", "by (simp add: has_vector_derivative_def has_derivative_def nhds_def)"], ["proof (state)\nthis:\n  LIM y at x.\n     (real_power y c - real_power x c -\n      (y - x) *\\<^sub>R (c * real_power x (c - 1))) /\\<^sub>R\n     norm (y - x) :> Inf (principal ` {S. open S \\<and> 0 \\<in> S})\n\ngoal (13 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 13 subgoals...", "fix n :: nat and x :: real"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 13 subgoals...", "show \"nat_power n (x *\\<^sub>R 1 :: complex) = (real n powr x) *\\<^sub>R 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_power n (x *\\<^sub>R 1) = real n powr x *\\<^sub>R 1", "by (simp add: powr_Reals_eq scaleR_conv_of_real)"], ["proof (state)\nthis:\n  nat_power n (x *\\<^sub>R 1) = real n powr x *\\<^sub>R 1\n\ngoal (12 subgoals):\n 1. \\<And>x. x \\<noteq> 0 \\<Longrightarrow> nat_power 0 x = 0\n 2. \\<And>n. 0 < n \\<Longrightarrow> nat_power n 0 = 1\n 3. \\<And>x. nat_power (Suc 0) x = 1\n 4. \\<And>n. nat_power n 1 = of_nat n\n 5. \\<And>n a b.\n       0 < n \\<Longrightarrow>\n       nat_power n (a + b) = nat_power n a * nat_power n b\n 6. \\<And>n a m.\n       0 < n \\<Longrightarrow>\n       nat_power n (a * of_nat m) = nat_power n a ^ m\n 7. \\<And>n z. 0 < n \\<Longrightarrow> nat_power n z \\<noteq> 0\n 8. \\<And>n c. 0 < n \\<Longrightarrow> real_power (real n) c = nat_power n c\n 9. \\<And>d. 0 < d \\<Longrightarrow> real_power d 1 = d *\\<^sub>R 1\n 10. \\<And>d a b.\n        0 < d \\<Longrightarrow>\n        real_power d (a + b) = real_power d a * real_power d b\nA total of 12 subgoals...", "qed (auto simp: powr_def exp_add exp_of_nat_mult [symmetric] algebra_simps scaleR_conv_of_real\n          simp del: Ln_of_nat)"], ["", "end"], ["", "lemma nat_power_of_real [simp]:\n  \"nat_power n (of_real x :: 'a :: nat_power_normed_field) = of_real (real n powr x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_power n (of_real x) = of_real (real n powr x)", "using nat_power_of_real_aux[of n x]"], ["proof (prove)\nusing this:\n  nat_power n (x *\\<^sub>R (1::?'a)) = real n powr x *\\<^sub>R (1::?'a)\n\ngoal (1 subgoal):\n 1. nat_power n (of_real x) = of_real (real n powr x)", "by (simp add: scaleR_conv_of_real)"], ["", "lemma fds_abs_converges_of_real [simp]: \n  \"fds_abs_converges (fds_of_real f) \n     (of_real s :: 'a :: {nat_power_normed_field,banach}) \\<longleftrightarrow> fds_abs_converges f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_of_real f) (of_real s) = fds_abs_converges f s", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         norm (fds_nth (fds_of_real f) n / nat_power n (of_real s))) =\n    summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))", "by (subst (1 2) summable_Suc_iff [symmetric]) (simp add: norm_divide norm_nat_power)"], ["", "lemma eval_fds_of_real [simp]:\n  assumes \"fds_converges f s\"\n  shows   \"eval_fds (fds_of_real f) (of_real s :: 'a :: {nat_power_normed_field,banach}) = \n             of_real (eval_fds f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_of_real f) (of_real s) = of_real (eval_fds f s)", "using assms"], ["proof (prove)\nusing this:\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_of_real f) (of_real s) = of_real (eval_fds f s)", "unfolding eval_fds_def"], ["proof (prove)\nusing this:\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. fds_nth (fds_of_real f) n / nat_power n (of_real s)) =\n    of_real (\\<Sum>n. fds_nth f n / nat_power n s)", "by (auto simp: fds_converges_def suminf_of_real)"], ["", "lemma fds_abs_summable_zeta_iff [simp]:\n  fixes s :: \"'a :: {banach, nat_power_normed_field}\"\n  shows \"fds_abs_converges fds_zeta s \\<longleftrightarrow> s \\<bullet> 1 > (1 :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s \\<bullet> (1::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s \\<bullet> (1::'a))", "have \"fds_abs_converges fds_zeta s \\<longleftrightarrow> summable (\\<lambda>n. real n powr -(s \\<bullet> 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s =\n    summable (\\<lambda>n. real n powr - (s \\<bullet> (1::'a)))", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth fds_zeta n / nat_power n s)) =\n    summable (\\<lambda>n. real n powr - (s \\<bullet> (1::'a)))", "by (intro summable_cong always_eventually)\n       (auto simp: norm_divide fds_nth_zeta powr_minus norm_nat_power divide_simps)"], ["proof (state)\nthis:\n  fds_abs_converges fds_zeta s =\n  summable (\\<lambda>n. real n powr - (s \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s \\<bullet> (1::'a))", "also"], ["proof (state)\nthis:\n  fds_abs_converges fds_zeta s =\n  summable (\\<lambda>n. real n powr - (s \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s \\<bullet> (1::'a))", "have \"\\<dots> \\<longleftrightarrow> s \\<bullet> 1 > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. real n powr - (s \\<bullet> (1::'a))) =\n    (1 < s \\<bullet> (1::'a))", "by (simp add: summable_real_powr_iff)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. real n powr - (s \\<bullet> (1::'a))) =\n  (1 < s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s \\<bullet> (1::'a))", "finally"], ["proof (chain)\npicking this:\n  fds_abs_converges fds_zeta s = (1 < s \\<bullet> (1::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_abs_converges fds_zeta s = (1 < s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s \\<bullet> (1::'a))", "."], ["proof (state)\nthis:\n  fds_abs_converges fds_zeta s = (1 < s \\<bullet> (1::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_abs_summable_zeta: \n  \"(s :: 'a :: {banach, nat_power_normed_field}) \\<bullet> 1 > 1 \\<Longrightarrow> fds_abs_converges fds_zeta s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < s \\<bullet> (1::'a) \\<Longrightarrow> fds_abs_converges fds_zeta s", "by simp"], ["", "lemma fds_abs_converges_moebius_mu:\n  fixes s :: \"'a :: {banach,nat_power_normed_field}\"\n  assumes \"s \\<bullet> 1 > 1\"\n  shows   \"fds_abs_converges (fds moebius_mu) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds moebius_mu) s", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth (fds moebius_mu) n / nat_power n s))", "proof (rule summable_comparison_test, intro exI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (fds moebius_mu) n / nat_power n s)) \\<le> ?g n\n 2. summable ?g", "fix n :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (fds moebius_mu) n / nat_power n s)) \\<le> ?g n\n 2. summable ?g", "show \"norm (norm (fds_nth (fds moebius_mu) n / nat_power n s)) \\<le> real n powr (-s \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (norm (fds_nth (fds moebius_mu) n / nat_power n s))\n    \\<le> real n powr (- s \\<bullet> (1::'a))", "by (auto simp: powr_minus divide_simps abs_moebius_mu_le norm_nat_power norm_divide\n                   moebius_mu_def norm_power)"], ["proof (state)\nthis:\n  norm (norm (fds_nth (fds moebius_mu) n / nat_power n s))\n  \\<le> real n powr (- s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. real n powr (- s \\<bullet> (1::'a)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. real n powr (- s \\<bullet> (1::'a)))", "from assms"], ["proof (chain)\npicking this:\n  1 < s \\<bullet> (1::'a)", "show \"summable (\\<lambda>n. real n powr (-s \\<bullet> 1))\""], ["proof (prove)\nusing this:\n  1 < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. real n powr (- s \\<bullet> (1::'a)))", "by (simp add: summable_real_powr_iff)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. real n powr (- s \\<bullet> (1::'a)))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition conv_abscissa\n    :: \"'a :: {nat_power,banach,real_normed_field, real_inner} fds \\<Rightarrow> ereal\" where\n  \"conv_abscissa f = (INF s\\<in>{s. fds_converges f s}. ereal (s \\<bullet> 1))\""], ["", "definition abs_conv_abscissa\n    :: \"'a :: {nat_power,banach,real_normed_field, real_inner} fds \\<Rightarrow> ereal\" where\n  \"abs_conv_abscissa f = (INF s\\<in>{s. fds_abs_converges f s}. ereal (s \\<bullet> 1))\""], ["", "lemma conv_abscissa_mono:\n  assumes \"\\<And>s. fds_converges g s \\<Longrightarrow> fds_converges f s\"\n  shows   \"conv_abscissa f \\<le> conv_abscissa g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> conv_abscissa g", "unfolding conv_abscissa_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF s\\<in>Collect (fds_converges f). ereal (s \\<bullet> (1::'a)))\n    \\<le> (INF s\\<in>Collect (fds_converges g). ereal (s \\<bullet> (1::'a)))", "by (rule INF_mono) (use assms in auto)"], ["", "lemma abs_conv_abscissa_mono:\n  assumes \"\\<And>s. fds_abs_converges g s \\<Longrightarrow> fds_abs_converges f s\"\n  shows   \"abs_conv_abscissa f \\<le> abs_conv_abscissa g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> abs_conv_abscissa g", "unfolding abs_conv_abscissa_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF s\\<in>Collect (fds_abs_converges f). ereal (s \\<bullet> (1::'a)))\n    \\<le> (INF s\\<in>Collect (fds_abs_converges g).\n              ereal (s \\<bullet> (1::'a)))", "by (rule INF_mono) (use assms in auto)"], ["", "class dirichlet_series = euclidean_space + real_normed_field + nat_power_normed_field +\n  assumes one_in_Basis: \"1 \\<in> Basis\""], ["", "instance real :: dirichlet_series"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(real, dirichlet_series_class)", "by standard simp_all"], ["", "instance complex :: dirichlet_series"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(complex, dirichlet_series_class)", "by standard (simp_all add: Basis_complex_def)"], ["", "context\n  assumes \"SORT_CONSTRAINT('a :: dirichlet_series)\"\nbegin"], ["", "lemma fds_abs_converges_Re_le:\n  fixes f :: \"'a fds\"\n  assumes \"fds_abs_converges f z\" \"z \\<bullet> 1 \\<le> z' \\<bullet> 1\"\n  shows   \"fds_abs_converges f z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges f z'", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n z'))", "proof (rule summable_comparison_test, intro exI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth f n / nat_power n z')) \\<le> ?g n\n 2. summable ?g", "fix n :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth f n / nat_power n z')) \\<le> ?g n\n 2. summable ?g", "assume n: \"n \\<ge> 1\""], ["proof (state)\nthis:\n  1 \\<le> n\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth f n / nat_power n z')) \\<le> ?g n\n 2. summable ?g", "thus \"norm (norm (fds_nth f n / nat_power n z')) \\<le> norm (fds_nth f n / nat_power n z)\""], ["proof (prove)\nusing this:\n  1 \\<le> n\n\ngoal (1 subgoal):\n 1. norm (norm (fds_nth f n / nat_power n z'))\n    \\<le> norm (fds_nth f n / nat_power n z)", "using assms(2)"], ["proof (prove)\nusing this:\n  1 \\<le> n\n  z \\<bullet> (1::'a) \\<le> z' \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. norm (norm (fds_nth f n / nat_power n z'))\n    \\<le> norm (fds_nth f n / nat_power n z)", "by (simp add: norm_divide norm_nat_power divide_simps powr_mono mult_left_mono)"], ["proof (state)\nthis:\n  norm (norm (fds_nth f n / nat_power n z'))\n  \\<le> norm (fds_nth f n / nat_power n z)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n z))", "qed (insert assms(1), simp add: fds_abs_converges_def)"], ["", "lemma fds_abs_converges:\n  assumes \"s \\<bullet> 1 > abs_conv_abscissa (f :: 'a fds)\"\n  shows   \"fds_abs_converges f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges f s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_abs_converges f s", "from assms"], ["proof (chain)\npicking this:\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a))", "obtain s0 where \"fds_abs_converges f s0\" \"s0 \\<bullet> 1 < s \\<bullet> 1\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>s0.\n        \\<lbrakk>fds_abs_converges f s0;\n         s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: INF_less_iff abs_conv_abscissa_def)"], ["proof (state)\nthis:\n  fds_abs_converges f s0\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. fds_abs_converges f s", "with fds_abs_converges_Re_le[OF this(1), of s] this(2)"], ["proof (chain)\npicking this:\n  s0 \\<bullet> (1::'a) \\<le> s \\<bullet> (1::'a) \\<Longrightarrow>\n  fds_abs_converges f s\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n  fds_abs_converges f s0\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  s0 \\<bullet> (1::'a) \\<le> s \\<bullet> (1::'a) \\<Longrightarrow>\n  fds_abs_converges f s\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n  fds_abs_converges f s0\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. fds_abs_converges f s", "by simp"], ["proof (state)\nthis:\n  fds_abs_converges f s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_abs_diverges:\n  assumes \"s \\<bullet> 1 < abs_conv_abscissa (f :: 'a fds)\"\n  shows   \"\\<not>fds_abs_converges f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> fds_abs_converges f s", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_abs_converges f s \\<Longrightarrow> False", "assume \"fds_abs_converges f s\""], ["proof (state)\nthis:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. fds_abs_converges f s \\<Longrightarrow> False", "hence \"abs_conv_abscissa f \\<le> s \\<bullet> 1\""], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> ereal (s \\<bullet> (1::'a))", "unfolding abs_conv_abscissa_def"], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. (INF s\\<in>Collect (fds_abs_converges f). ereal (s \\<bullet> (1::'a)))\n    \\<le> ereal (s \\<bullet> (1::'a))", "by (intro INF_lower) auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. fds_abs_converges f s \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  ereal (s \\<bullet> (1::'a)) < abs_conv_abscissa f\n  abs_conv_abscissa f \\<le> ereal (s \\<bullet> (1::'a))", "show False"], ["proof (prove)\nusing this:\n  ereal (s \\<bullet> (1::'a)) < abs_conv_abscissa f\n  abs_conv_abscissa f \\<le> ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma uniformly_Cauchy_eval_fds_aux:\n  fixes s0 :: \"'a :: dirichlet_series\"\n  assumes bounded: \"Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\"\n  assumes B: \"compact B\" \"\\<And>z. z \\<in> B \\<Longrightarrow> z \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows   \"uniformly_Cauchy_on B (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniformly_Cauchy_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "proof (cases \"B = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. B = {} \\<Longrightarrow>\n    uniformly_Cauchy_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n 2. B \\<noteq> {} \\<Longrightarrow>\n    uniformly_Cauchy_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "case False"], ["proof (state)\nthis:\n  B \\<noteq> {}\n\ngoal (2 subgoals):\n 1. B = {} \\<Longrightarrow>\n    uniformly_Cauchy_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n 2. B \\<noteq> {} \\<Longrightarrow>\n    uniformly_Cauchy_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. uniformly_Cauchy_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "proof (rule uniformly_Cauchy_onI', goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "case (1 \\<epsilon>)"], ["proof (state)\nthis:\n  0 < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "define \\<sigma> where \"\\<sigma> = Inf ((\\<lambda>s. s \\<bullet> 1) ` B)\""], ["proof (state)\nthis:\n  \\<sigma> = (INF s\\<in>B. s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "have \\<sigma>_le: \"s \\<bullet> 1 \\<ge> \\<sigma>\" if \"s \\<in> B\" for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<le> s \\<bullet> (1::'a)", "unfolding \\<sigma>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF s\\<in>B. s \\<bullet> (1::'a)) \\<le> s \\<bullet> (1::'a)", "using that"], ["proof (prove)\nusing this:\n  s \\<in> B\n\ngoal (1 subgoal):\n 1. (INF s\\<in>B. s \\<bullet> (1::'a)) \\<le> s \\<bullet> (1::'a)", "by (intro cInf_lower bounded_inner_imp_bdd_below compact_imp_bounded B) auto"], ["proof (state)\nthis:\n  ?s \\<in> B \\<Longrightarrow> \\<sigma> \\<le> ?s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "have \"\\<sigma> \\<in> ((\\<lambda>s. s \\<bullet> 1) ` B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B", "unfolding \\<sigma>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF s\\<in>B. s \\<bullet> (1::'a))\n    \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B", "using B \\<open>B \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  compact B\n  ?z \\<in> B \\<Longrightarrow> s0 \\<bullet> (1::'a) < ?z \\<bullet> (1::'a)\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (INF s\\<in>B. s \\<bullet> (1::'a))\n    \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B", "by (intro closed_contains_Inf bounded_inner_imp_bdd_below compact_imp_bounded B \n            compact_imp_closed compact_continuous_image continuous_intros) auto"], ["proof (state)\nthis:\n  \\<sigma> \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "with B(2)"], ["proof (chain)\npicking this:\n  ?z \\<in> B \\<Longrightarrow> s0 \\<bullet> (1::'a) < ?z \\<bullet> (1::'a)\n  \\<sigma> \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B", "have \\<sigma>_gt: \"\\<sigma> > s0 \\<bullet> 1\""], ["proof (prove)\nusing this:\n  ?z \\<in> B \\<Longrightarrow> s0 \\<bullet> (1::'a) < ?z \\<bullet> (1::'a)\n  \\<sigma> \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B\n\ngoal (1 subgoal):\n 1. s0 \\<bullet> (1::'a) < \\<sigma>", "by auto"], ["proof (state)\nthis:\n  s0 \\<bullet> (1::'a) < \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "define \\<delta> where \"\\<delta> = \\<sigma> - s0 \\<bullet> 1\""], ["proof (state)\nthis:\n  \\<delta> = \\<sigma> - s0 \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "have \"bounded B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded B", "by (rule compact_imp_bounded) fact"], ["proof (state)\nthis:\n  bounded B\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "then"], ["proof (chain)\npicking this:\n  bounded B", "obtain norm_B_aux where norm_B_aux: \"\\<And>s. s \\<in> B \\<Longrightarrow> norm s \\<le> norm_B_aux\""], ["proof (prove)\nusing this:\n  bounded B\n\ngoal (1 subgoal):\n 1. (\\<And>norm_B_aux.\n        (\\<And>s.\n            s \\<in> B \\<Longrightarrow>\n            norm s \\<le> norm_B_aux) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: bounded_iff)"], ["proof (state)\nthis:\n  ?s \\<in> B \\<Longrightarrow> norm ?s \\<le> norm_B_aux\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "define norm_B where \"norm_B = norm_B_aux + norm s0\""], ["proof (state)\nthis:\n  norm_B = norm_B_aux + norm s0\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "from norm_B_aux"], ["proof (chain)\npicking this:\n  ?s \\<in> B \\<Longrightarrow> norm ?s \\<le> norm_B_aux", "have norm_B: \"norm (s - s0) \\<le> norm_B\" if \"s \\<in> B\" for s"], ["proof (prove)\nusing this:\n  ?s \\<in> B \\<Longrightarrow> norm ?s \\<le> norm_B_aux\n\ngoal (1 subgoal):\n 1. norm (s - s0) \\<le> norm_B", "using norm_triangle_ineq4[of s s0] norm_B_aux[OF that]"], ["proof (prove)\nusing this:\n  ?s \\<in> B \\<Longrightarrow> norm ?s \\<le> norm_B_aux\n  norm (s - s0) \\<le> norm s + norm s0\n  norm s \\<le> norm_B_aux\n\ngoal (1 subgoal):\n 1. norm (s - s0) \\<le> norm_B", "by (simp add: norm_B_def)"], ["proof (state)\nthis:\n  ?s \\<in> B \\<Longrightarrow> norm (?s - s0) \\<le> norm_B\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "then"], ["proof (chain)\npicking this:\n  ?s \\<in> B \\<Longrightarrow> norm (?s - s0) \\<le> norm_B", "have \"0 \\<le> norm_B\""], ["proof (prove)\nusing this:\n  ?s \\<in> B \\<Longrightarrow> norm (?s - s0) \\<le> norm_B\n\ngoal (1 subgoal):\n 1. 0 \\<le> norm_B", "by (meson \\<open>\\<sigma> \\<in> (\\<lambda>s. s \\<bullet> 1) ` B\\<close> imageE norm_ge_zero order.trans)"], ["proof (state)\nthis:\n  0 \\<le> norm_B\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "define A where \"A = sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0)\""], ["proof (state)\nthis:\n  A = sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "from bounded"], ["proof (chain)\npicking this:\n  Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)", "obtain C_aux where C_aux: \"\\<And>n. norm (\\<Sum>k\\<le>n. fds_nth f k / nat_power k s0) \\<le> C_aux\""], ["proof (prove)\nusing this:\n  Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. (\\<And>C_aux.\n        (\\<And>n.\n            norm (\\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\n            \\<le> C_aux) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: Bseq_def)"], ["proof (state)\nthis:\n  norm (\\<Sum>k\\<le>?n. fds_nth f k / nat_power k s0) \\<le> C_aux\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "define C where \"C = max C_aux 1\""], ["proof (state)\nthis:\n  C = max C_aux 1\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "have C_pos: \"C > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < C", "by (simp add: C_def)"], ["proof (state)\nthis:\n  0 < C\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "have C: \"norm (A x) \\<le> C\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "have \"A x = (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x =\n    (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)", "unfolding A_def sum_upto_altdef"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>{0<..nat \\<lfloor>x\\<rfloor>}.\n       fds_nth f k / nat_power k s0) =\n    (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)", "by (intro sum.mono_neutral_left) auto"], ["proof (state)\nthis:\n  A x = (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "also"], ["proof (state)\nthis:\n  A x = (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "have \"norm \\<dots> \\<le> C_aux\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\n    \\<le> C_aux", "by (rule C_aux)"], ["proof (state)\nthis:\n  norm (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\n  \\<le> C_aux\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "also"], ["proof (state)\nthis:\n  norm (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\n  \\<le> C_aux\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "have \"\\<dots> \\<le> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C_aux \\<le> C", "by (simp add: C_def)"], ["proof (state)\nthis:\n  C_aux \\<le> C\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "finally"], ["proof (chain)\npicking this:\n  norm (A x) \\<le> C", "show ?thesis"], ["proof (prove)\nusing this:\n  norm (A x) \\<le> C\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "."], ["proof (state)\nthis:\n  norm (A x) \\<le> C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  norm (A ?x) \\<le> C\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "have \"(\\<lambda>m. 2 * C * (1 + norm_B / \\<delta>) * real m powr (-\\<delta>)) \\<longlonglongrightarrow> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>m. 2 * C * (1 + norm_B / \\<delta>) * real m powr - \\<delta>)\n    \\<longlonglongrightarrow> 0", "unfolding \\<delta>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>m.\n        2 * C * (1 + norm_B / (\\<sigma> - s0 \\<bullet> (1::'a))) *\n        real m powr - (\\<sigma> - s0 \\<bullet> (1::'a)))\n    \\<longlonglongrightarrow> 0", "using \\<sigma>_gt"], ["proof (prove)\nusing this:\n  s0 \\<bullet> (1::'a) < \\<sigma>\n\ngoal (1 subgoal):\n 1. (\\<lambda>m.\n        2 * C * (1 + norm_B / (\\<sigma> - s0 \\<bullet> (1::'a))) *\n        real m powr - (\\<sigma> - s0 \\<bullet> (1::'a)))\n    \\<longlonglongrightarrow> 0", "by (intro tendsto_mult_right_zero tendsto_neg_powr filterlim_real_sequentially) simp_all"], ["proof (state)\nthis:\n  (\\<lambda>m. 2 * C * (1 + norm_B / \\<delta>) * real m powr - \\<delta>)\n  \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "from order_tendstoD(2)[OF this \\<open>\\<epsilon> > 0\\<close>]"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in sequentially.\n     2 * C * (1 + norm_B / \\<delta>) * real x powr - \\<delta> < \\<epsilon>", "obtain M where\n      M: \"\\<And>m. m \\<ge> M \\<Longrightarrow> 2 * C * (1 + norm_B / \\<delta>) * real m powr - \\<delta> < \\<epsilon>\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in sequentially.\n     2 * C * (1 + norm_B / \\<delta>) * real x powr - \\<delta> < \\<epsilon>\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        (\\<And>m.\n            M \\<le> m \\<Longrightarrow>\n            2 * C * (1 + norm_B / \\<delta>) * real m powr - \\<delta>\n            < \\<epsilon>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: eventually_at_top_linorder)"], ["proof (state)\nthis:\n  M \\<le> ?m \\<Longrightarrow>\n  2 * C * (1 + norm_B / \\<delta>) * real ?m powr - \\<delta> < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>x\\<in>B.\n             \\<forall>m\\<ge>M.\n                \\<forall>n>m.\n                   dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                    (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                   < e", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>M.\n       \\<forall>x\\<in>B.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                 (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                < \\<epsilon>", "proof (intro exI[of _ \"max M 1\"] ballI allI impI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "case (1 s m n)"], ["proof (state)\nthis:\n  s \\<in> B\n  max M 1 \\<le> m\n  m < n\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "from 1"], ["proof (chain)\npicking this:\n  s \\<in> B\n  max M 1 \\<le> m\n  m < n", "have s: \"s \\<bullet> 1 > s0 \\<bullet> 1\""], ["proof (prove)\nusing this:\n  s \\<in> B\n  max M 1 \\<le> m\n  m < n\n\ngoal (1 subgoal):\n 1. s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)", "using B(2)[of s]"], ["proof (prove)\nusing this:\n  s \\<in> B\n  max M 1 \\<le> m\n  m < n\n  s \\<in> B \\<Longrightarrow> s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)", "by simp"], ["proof (state)\nthis:\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have mn: \"m \\<ge> M\" \"m < n\" \"m > 0\" \"n > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M \\<le> m &&& m < n) &&& 0 < m &&& 0 < n", "using 1"], ["proof (prove)\nusing this:\n  s \\<in> B\n  max M 1 \\<le> m\n  m < n\n\ngoal (1 subgoal):\n 1. (M \\<le> m &&& m < n) &&& 0 < m &&& 0 < n", "by (simp_all add: )"], ["proof (state)\nthis:\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s) (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s) =\n              dist (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s) (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s)\n     (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s) =\n    dist (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s)\n     (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s)", "by (simp add: dist_commute)"], ["proof (state)\nthis:\n  dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s)\n   (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s) =\n  dist (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s)\n   (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s)\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s)\n   (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s) =\n  dist (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s)\n   (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s)\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "from 1"], ["proof (chain)\npicking this:\n  s \\<in> B\n  max M 1 \\<le> m\n  m < n", "have \"\\<dots> = norm (\\<Sum>k\\<in>{..n}-{..m}. fds_nth f k / nat_power k s)\""], ["proof (prove)\nusing this:\n  s \\<in> B\n  max M 1 \\<le> m\n  m < n\n\ngoal (1 subgoal):\n 1. dist (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s)\n     (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s) =\n    norm (\\<Sum>k\\<in>{..n} - {..m}. fds_nth f k / nat_power k s)", "by (subst Groups_Big.sum_diff) (simp_all add: dist_norm)"], ["proof (state)\nthis:\n  dist (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s)\n   (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s) =\n  norm (\\<Sum>k\\<in>{..n} - {..m}. fds_nth f k / nat_power k s)\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  dist (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s)\n   (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s) =\n  norm (\\<Sum>k\\<in>{..n} - {..m}. fds_nth f k / nat_power k s)\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "from 1"], ["proof (chain)\npicking this:\n  s \\<in> B\n  max M 1 \\<le> m\n  m < n", "have \"{..n} - {..m} = real -` {real m<..real n}\""], ["proof (prove)\nusing this:\n  s \\<in> B\n  max M 1 \\<le> m\n  m < n\n\ngoal (1 subgoal):\n 1. {..n} - {..m} = real -` {real m<..real n}", "by auto"], ["proof (state)\nthis:\n  {..n} - {..m} = real -` {real m<..real n}\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  {..n} - {..m} = real -` {real m<..real n}\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"(\\<Sum>k\\<in>\\<dots>. fds_nth f k / nat_power k s) = \n                   (\\<Sum>k\\<in>\\<dots>. fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s))\"\n        (is \"_ = ?S\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>real -` {real m<..real n}. fds_nth f k / nat_power k s) =\n    (\\<Sum>k\\<in>real -` {real m<..real n}.\n       fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s))", "by (intro sum.cong refl) (simp_all add: nat_power_diff real_power_nat_power)"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>real -` {real m<..real n}. fds_nth f k / nat_power k s) =\n  (\\<Sum>k\\<in>real -` {real m<..real n}.\n     fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>real -` {real m<..real n}. fds_nth f k / nat_power k s) =\n  (\\<Sum>k\\<in>real -` {real m<..real n}.\n     fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have *: \"((\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - 1))) has_integral\n                    (A (real n) * real_power n (s0 - s) - A (real m) * real_power m (s0 - s) - ?S))\n                    {real m..real n}\" (is \"(?h has_integral _) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))) has_integral\n     A (real n) * real_power (real n) (s0 - s) -\n     A (real m) * real_power (real m) (s0 - s) -\n     (\\<Sum>k\\<in>real -` {real m<..real n}.\n        fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)))\n     {real m..real n}", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) t *\n         ((s0 - s) * real_power t (s0 - s - (1::'a)))) has_integral\n     sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) (real n) *\n     real_power (real n) (s0 - s) -\n     sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) (real m) *\n     real_power (real m) (s0 - s) -\n     (\\<Sum>k\\<in>real -` {real m<..real n}.\n        fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)))\n     {real m..real n}", "using mn"], ["proof (prove)\nusing this:\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) t *\n         ((s0 - s) * real_power t (s0 - s - (1::'a)))) has_integral\n     sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) (real n) *\n     real_power (real n) (s0 - s) -\n     sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) (real m) *\n     real_power (real m) (s0 - s) -\n     (\\<Sum>k\\<in>real -` {real m<..real n}.\n        fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)))\n     {real m..real n}", "by (intro partial_summation_strong[of \"{}\"]) \n           (auto intro!: derivative_eq_intros continuous_intros)"], ["proof (state)\nthis:\n  ((\\<lambda>t.\n       A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))) has_integral\n   A (real n) * real_power (real n) (s0 - s) -\n   A (real m) * real_power (real m) (s0 - s) -\n   (\\<Sum>k\\<in>real -` {real m<..real n}.\n      fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)))\n   {real m..real n}\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "hence \"?S = A (real n) * nat_power n (s0 - s) - A (real m) * nat_power m (s0 - s) -\n                    integral {real m..real n} ?h\""], ["proof (prove)\nusing this:\n  ((\\<lambda>t.\n       A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))) has_integral\n   A (real n) * real_power (real n) (s0 - s) -\n   A (real m) * real_power (real m) (s0 - s) -\n   (\\<Sum>k\\<in>real -` {real m<..real n}.\n      fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)))\n   {real m..real n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>real -` {real m<..real n}.\n       fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)) =\n    A (real n) * nat_power n (s0 - s) - A (real m) * nat_power m (s0 - s) -\n    integral {real m..real n}\n     (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a))))", "using mn"], ["proof (prove)\nusing this:\n  ((\\<lambda>t.\n       A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))) has_integral\n   A (real n) * real_power (real n) (s0 - s) -\n   A (real m) * real_power (real m) (s0 - s) -\n   (\\<Sum>k\\<in>real -` {real m<..real n}.\n      fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)))\n   {real m..real n}\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>real -` {real m<..real n}.\n       fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)) =\n    A (real n) * nat_power n (s0 - s) - A (real m) * nat_power m (s0 - s) -\n    integral {real m..real n}\n     (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a))))", "by (simp add: has_integral_iff real_power_nat_power)"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>real -` {real m<..real n}.\n     fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)) =\n  A (real n) * nat_power n (s0 - s) - A (real m) * nat_power m (s0 - s) -\n  integral {real m..real n}\n   (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a))))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>real -` {real m<..real n}.\n     fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)) =\n  A (real n) * nat_power n (s0 - s) - A (real m) * nat_power m (s0 - s) -\n  integral {real m..real n}\n   (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a))))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"norm \\<dots> \\<le> norm (A (real n) * nat_power n (s0 - s)) +\n                    norm (A (real m) * nat_power m (s0 - s)) + norm (integral {real m..real n} ?h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm\n     (A (real n) * nat_power n (s0 - s) -\n      A (real m) * nat_power m (s0 - s) -\n      integral {real m..real n}\n       (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n    \\<le> norm (A (real n) * nat_power n (s0 - s)) +\n          norm (A (real m) * nat_power m (s0 - s)) +\n          norm\n           (integral {real m..real n}\n             (\\<lambda>t.\n                 A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))", "by (intro order.trans[OF norm_triangle_ineq4] add_right_mono order.refl)"], ["proof (state)\nthis:\n  norm\n   (A (real n) * nat_power n (s0 - s) - A (real m) * nat_power m (s0 - s) -\n    integral {real m..real n}\n     (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n  \\<le> norm (A (real n) * nat_power n (s0 - s)) +\n        norm (A (real m) * nat_power m (s0 - s)) +\n        norm\n         (integral {real m..real n}\n           (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  norm\n   (A (real n) * nat_power n (s0 - s) - A (real m) * nat_power m (s0 - s) -\n    integral {real m..real n}\n     (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n  \\<le> norm (A (real n) * nat_power n (s0 - s)) +\n        norm (A (real m) * nat_power m (s0 - s)) +\n        norm\n         (integral {real m..real n}\n           (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"norm (A (real n) * nat_power n (s0 - s)) \\<le> C * nat_power m ((s0 - s) \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (A (real n) * nat_power n (s0 - s))\n    \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a))", "using mn \\<open>s \\<in> B\\<close> C_pos s"], ["proof (prove)\nusing this:\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n  s \\<in> B\n  0 < C\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. norm (A (real n) * nat_power n (s0 - s))\n    \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a))", "by (auto simp: norm_mult norm_nat_power algebra_simps intro!: mult_mono C powr_mono2')"], ["proof (state)\nthis:\n  norm (A (real n) * nat_power n (s0 - s))\n  \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  norm (A (real n) * nat_power n (s0 - s))\n  \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"norm (A (real m) * nat_power m (s0 - s)) \\<le> C * nat_power m ((s0 - s) \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (A (real m) * nat_power m (s0 - s))\n    \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a))", "using mn"], ["proof (prove)\nusing this:\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n\ngoal (1 subgoal):\n 1. norm (A (real m) * nat_power m (s0 - s))\n    \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a))", "by (auto simp: norm_mult norm_nat_power intro!: mult_mono C)"], ["proof (state)\nthis:\n  norm (A (real m) * nat_power m (s0 - s))\n  \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  norm (A (real m) * nat_power m (s0 - s))\n  \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"norm (integral {real m..real n} ?h) \\<le> \n                   integral {real m..real n} (\\<lambda>t. C * (norm (s0 - s) * t powr ((s0 - s) \\<bullet> 1 - 1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm\n     (integral {real m..real n}\n       (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n    \\<le> integral {real m..real n}\n           (\\<lambda>t.\n               C *\n               (norm (s0 - s) * t powr ((s0 - s) \\<bullet> (1::'a) - 1)))", "proof (intro integral_norm_bound_integral ballI, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>t.\n        A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))) integrable_on\n    {real m..real n}\n 2. (\\<lambda>t.\n        C *\n        (norm (s0 - s) *\n         t powr ((s0 - s) \\<bullet> (1::'a) - 1))) integrable_on\n    {real m..real n}\n 3. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * ((s0 - s) * real_power x (s0 - s - (1::'a))))\n       \\<le> C * (norm (s0 - s) * x powr ((s0 - s) \\<bullet> (1::'a) - 1))", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. (\\<lambda>t.\n        A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))) integrable_on\n    {real m..real n}\n 2. (\\<lambda>t.\n        C *\n        (norm (s0 - s) *\n         t powr ((s0 - s) \\<bullet> (1::'a) - 1))) integrable_on\n    {real m..real n}\n 3. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * ((s0 - s) * real_power x (s0 - s - (1::'a))))\n       \\<le> C * (norm (s0 - s) * x powr ((s0 - s) \\<bullet> (1::'a) - 1))", "with *"], ["proof (chain)\npicking this:\n  ((\\<lambda>t.\n       A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))) has_integral\n   A (real n) * real_power (real n) (s0 - s) -\n   A (real m) * real_power (real m) (s0 - s) -\n   (\\<Sum>k\\<in>real -` {real m<..real n}.\n      fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)))\n   {real m..real n}", "show ?case"], ["proof (prove)\nusing this:\n  ((\\<lambda>t.\n       A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))) has_integral\n   A (real n) * real_power (real n) (s0 - s) -\n   A (real m) * real_power (real m) (s0 - s) -\n   (\\<Sum>k\\<in>real -` {real m<..real n}.\n      fds_nth f k / nat_power k s0 * real_power (real k) (s0 - s)))\n   {real m..real n}\n\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))) integrable_on\n    {real m..real n}", "by (simp add: has_integral_iff)"], ["proof (state)\nthis:\n  (\\<lambda>t.\n      A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))) integrable_on\n  {real m..real n}\n\ngoal (2 subgoals):\n 1. (\\<lambda>t.\n        C *\n        (norm (s0 - s) *\n         t powr ((s0 - s) \\<bullet> (1::'a) - 1))) integrable_on\n    {real m..real n}\n 2. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * ((s0 - s) * real_power x (s0 - s - (1::'a))))\n       \\<le> C * (norm (s0 - s) * x powr ((s0 - s) \\<bullet> (1::'a) - 1))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>t.\n        C *\n        (norm (s0 - s) *\n         t powr ((s0 - s) \\<bullet> (1::'a) - 1))) integrable_on\n    {real m..real n}\n 2. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * ((s0 - s) * real_power x (s0 - s - (1::'a))))\n       \\<le> C * (norm (s0 - s) * x powr ((s0 - s) \\<bullet> (1::'a) - 1))", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (\\<lambda>t.\n        C *\n        (norm (s0 - s) *\n         t powr ((s0 - s) \\<bullet> (1::'a) - 1))) integrable_on\n    {real m..real n}\n 2. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * ((s0 - s) * real_power x (s0 - s - (1::'a))))\n       \\<le> C * (norm (s0 - s) * x powr ((s0 - s) \\<bullet> (1::'a) - 1))", "from mn"], ["proof (chain)\npicking this:\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n", "show ?case"], ["proof (prove)\nusing this:\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        C *\n        (norm (s0 - s) *\n         t powr ((s0 - s) \\<bullet> (1::'a) - 1))) integrable_on\n    {real m..real n}", "by (auto intro!: integrable_continuous_real continuous_intros)"], ["proof (state)\nthis:\n  (\\<lambda>t.\n      C *\n      (norm (s0 - s) *\n       t powr ((s0 - s) \\<bullet> (1::'a) - 1))) integrable_on\n  {real m..real n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * ((s0 - s) * real_power x (s0 - s - (1::'a))))\n       \\<le> C * (norm (s0 - s) * x powr ((s0 - s) \\<bullet> (1::'a) - 1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * ((s0 - s) * real_power x (s0 - s - (1::'a))))\n       \\<le> C * (norm (s0 - s) * x powr ((s0 - s) \\<bullet> (1::'a) - 1))", "case (3 t)"], ["proof (state)\nthis:\n  t \\<in> {real m..real n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * ((s0 - s) * real_power x (s0 - s - (1::'a))))\n       \\<le> C * (norm (s0 - s) * x powr ((s0 - s) \\<bullet> (1::'a) - 1))", "thus ?case"], ["proof (prove)\nusing this:\n  t \\<in> {real m..real n}\n\ngoal (1 subgoal):\n 1. norm (A t * ((s0 - s) * real_power t (s0 - s - (1::'a))))\n    \\<le> C * (norm (s0 - s) * t powr ((s0 - s) \\<bullet> (1::'a) - 1))", "unfolding norm_mult"], ["proof (prove)\nusing this:\n  t \\<in> {real m..real n}\n\ngoal (1 subgoal):\n 1. norm (A t) * (norm (s0 - s) * norm (real_power t (s0 - s - (1::'a))))\n    \\<le> C * (norm (s0 - s) * t powr ((s0 - s) \\<bullet> (1::'a) - 1))", "using C_pos mn"], ["proof (prove)\nusing this:\n  t \\<in> {real m..real n}\n  0 < C\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n\ngoal (1 subgoal):\n 1. norm (A t) * (norm (s0 - s) * norm (real_power t (s0 - s - (1::'a))))\n    \\<le> C * (norm (s0 - s) * t powr ((s0 - s) \\<bullet> (1::'a) - 1))", "by (intro mult_mono C) (auto simp: norm_real_power dot_square_norm algebra_simps)"], ["proof (state)\nthis:\n  norm (A t * ((s0 - s) * real_power t (s0 - s - (1::'a))))\n  \\<le> C * (norm (s0 - s) * t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  norm\n   (integral {real m..real n}\n     (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n  \\<le> integral {real m..real n}\n         (\\<lambda>t.\n             C * (norm (s0 - s) * t powr ((s0 - s) \\<bullet> (1::'a) - 1)))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  norm\n   (integral {real m..real n}\n     (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n  \\<le> integral {real m..real n}\n         (\\<lambda>t.\n             C * (norm (s0 - s) * t powr ((s0 - s) \\<bullet> (1::'a) - 1)))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"\\<dots> = C * norm (s0 - s) * integral {real m..real n} (\\<lambda>t. t powr ((s0 - s) \\<bullet> 1 - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral {real m..real n}\n     (\\<lambda>t.\n         C * (norm (s0 - s) * t powr ((s0 - s) \\<bullet> (1::'a) - 1))) =\n    C * norm (s0 - s) *\n    integral {real m..real n}\n     (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))", "by (simp add: algebra_simps dot_square_norm)"], ["proof (state)\nthis:\n  integral {real m..real n}\n   (\\<lambda>t.\n       C * (norm (s0 - s) * t powr ((s0 - s) \\<bullet> (1::'a) - 1))) =\n  C * norm (s0 - s) *\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  integral {real m..real n}\n   (\\<lambda>t.\n       C * (norm (s0 - s) * t powr ((s0 - s) \\<bullet> (1::'a) - 1))) =\n  C * norm (s0 - s) *\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "{"], ["proof (state)\nthis:\n  integral {real m..real n}\n   (\\<lambda>t.\n       C * (norm (s0 - s) * t powr ((s0 - s) \\<bullet> (1::'a) - 1))) =\n  C * norm (s0 - s) *\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"((\\<lambda>t. t powr ((s0 - s) \\<bullet> 1 - 1)) has_integral \n                     (real n powr ((s0 - s) \\<bullet> 1) / ((s0 - s) \\<bullet> 1) - \n                      real m powr ((s0 - s) \\<bullet> 1) / ((s0 - s) \\<bullet> 1))) {m..n}\" \n          (is \"(?l has_integral ?I) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1)) has_integral\n     real n powr ((s0 - s) \\<bullet> (1::'a)) /\n     ((s0 - s) \\<bullet> (1::'a)) -\n     real m powr ((s0 - s) \\<bullet> (1::'a)) /\n     ((s0 - s) \\<bullet> (1::'a)))\n     {real m..real n}", "using mn s"], ["proof (prove)\nusing this:\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1)) has_integral\n     real n powr ((s0 - s) \\<bullet> (1::'a)) /\n     ((s0 - s) \\<bullet> (1::'a)) -\n     real m powr ((s0 - s) \\<bullet> (1::'a)) /\n     ((s0 - s) \\<bullet> (1::'a)))\n     {real m..real n}", "by (intro fundamental_theorem_of_calculus)\n             (auto intro!: derivative_eq_intros \n                   simp: has_field_derivative_iff_has_vector_derivative [symmetric] inner_diff_left)"], ["proof (state)\nthis:\n  ((\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1)) has_integral\n   real n powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a)) -\n   real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a)))\n   {real m..real n}\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "hence \"integral {real m..real n} ?l = ?I\""], ["proof (prove)\nusing this:\n  ((\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1)) has_integral\n   real n powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a)) -\n   real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a)))\n   {real m..real n}\n\ngoal (1 subgoal):\n 1. integral {real m..real n}\n     (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1)) =\n    real n powr ((s0 - s) \\<bullet> (1::'a)) /\n    ((s0 - s) \\<bullet> (1::'a)) -\n    real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a))", "by (simp add: has_integral_iff)"], ["proof (state)\nthis:\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1)) =\n  real n powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a)) -\n  real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1)) =\n  real n powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a)) -\n  real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"\\<dots> \\<le> -(real m powr ((s0 - s) \\<bullet> 1) / ((s0 - s) \\<bullet> 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real n powr ((s0 - s) \\<bullet> (1::'a)) /\n    ((s0 - s) \\<bullet> (1::'a)) -\n    real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a))\n    \\<le> - (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n             ((s0 - s) \\<bullet> (1::'a)))", "using s mn"], ["proof (prove)\nusing this:\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n\ngoal (1 subgoal):\n 1. real n powr ((s0 - s) \\<bullet> (1::'a)) /\n    ((s0 - s) \\<bullet> (1::'a)) -\n    real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a))\n    \\<le> - (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n             ((s0 - s) \\<bullet> (1::'a)))", "by (simp add: divide_simps inner_diff_left)"], ["proof (state)\nthis:\n  real n powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a)) -\n  real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a))\n  \\<le> - (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n           ((s0 - s) \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  real n powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a)) -\n  real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s0 - s) \\<bullet> (1::'a))\n  \\<le> - (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n           ((s0 - s) \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"\\<dots> = 1 * (real m powr ((s0 - s) \\<bullet> 1) / ((s - s0) \\<bullet> 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n       ((s0 - s) \\<bullet> (1::'a))) =\n    1 *\n    (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n     ((s - s0) \\<bullet> (1::'a)))", "using s"], ["proof (prove)\nusing this:\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. - (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n       ((s0 - s) \\<bullet> (1::'a))) =\n    1 *\n    (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n     ((s - s0) \\<bullet> (1::'a)))", "by (simp add: field_simps inner_diff_left)"], ["proof (state)\nthis:\n  - (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n     ((s0 - s) \\<bullet> (1::'a))) =\n  1 *\n  (real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s - s0) \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  - (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n     ((s0 - s) \\<bullet> (1::'a))) =\n  1 *\n  (real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s - s0) \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"\\<dots> \\<le> 2 * (real m powr ((s0 - s) \\<bullet> 1) / ((s - s0) \\<bullet> 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 *\n    (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n     ((s - s0) \\<bullet> (1::'a)))\n    \\<le> 2 *\n          (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n           ((s - s0) \\<bullet> (1::'a)))", "using mn s"], ["proof (prove)\nusing this:\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. 1 *\n    (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n     ((s - s0) \\<bullet> (1::'a)))\n    \\<le> 2 *\n          (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n           ((s - s0) \\<bullet> (1::'a)))", "by (intro mult_right_mono divide_nonneg_pos) (simp_all add: inner_diff_left)"], ["proof (state)\nthis:\n  1 *\n  (real m powr ((s0 - s) \\<bullet> (1::'a)) / ((s - s0) \\<bullet> (1::'a)))\n  \\<le> 2 *\n        (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n         ((s - s0) \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "finally"], ["proof (chain)\npicking this:\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n  \\<le> 2 *\n        (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n         ((s - s0) \\<bullet> (1::'a)))", "have \"integral {m..n} ?l \\<le> \\<dots>\""], ["proof (prove)\nusing this:\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n  \\<le> 2 *\n        (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n         ((s - s0) \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. integral {real m..real n}\n     (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n    \\<le> 2 *\n          (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n           ((s - s0) \\<bullet> (1::'a)))", "."], ["proof (state)\nthis:\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n  \\<le> 2 *\n        (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n         ((s - s0) \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "}"], ["proof (state)\nthis:\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n  \\<le> 2 *\n        (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n         ((s - s0) \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "hence \"C * norm (s0 - s) * integral {real m..real n} (\\<lambda>t. t powr ((s0 - s) \\<bullet> 1 - 1)) \\<le>\n               C * norm (s0 - s) * (2 * (real m powr ((s0 - s) \\<bullet> 1) / ((s - s0) \\<bullet> 1)))\""], ["proof (prove)\nusing this:\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n  \\<le> 2 *\n        (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n         ((s - s0) \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. C * norm (s0 - s) *\n    integral {real m..real n}\n     (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n    \\<le> C * norm (s0 - s) *\n          (2 *\n           (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n            ((s - s0) \\<bullet> (1::'a))))", "using C_pos mn"], ["proof (prove)\nusing this:\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n  \\<le> 2 *\n        (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n         ((s - s0) \\<bullet> (1::'a)))\n  0 < C\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n\ngoal (1 subgoal):\n 1. C * norm (s0 - s) *\n    integral {real m..real n}\n     (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n    \\<le> C * norm (s0 - s) *\n          (2 *\n           (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n            ((s - s0) \\<bullet> (1::'a))))", "by (intro mult_mono mult_nonneg_nonneg integral_nonneg\n              integrable_continuous_real continuous_intros) auto"], ["proof (state)\nthis:\n  C * norm (s0 - s) *\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n  \\<le> C * norm (s0 - s) *\n        (2 *\n         (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n          ((s - s0) \\<bullet> (1::'a))))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  C * norm (s0 - s) *\n  integral {real m..real n}\n   (\\<lambda>t. t powr ((s0 - s) \\<bullet> (1::'a) - 1))\n  \\<le> C * norm (s0 - s) *\n        (2 *\n         (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n          ((s - s0) \\<bullet> (1::'a))))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"C * nat_power m ((s0 - s) \\<bullet> 1) + C * nat_power m ((s0 - s) \\<bullet> 1) + \\<dots> =\n                   2 * C * nat_power m ((s0 - s) \\<bullet> 1) * (1 + norm (s - s0) / ((s - s0) \\<bullet> 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n    C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n    C * norm (s0 - s) *\n    (2 *\n     (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n      ((s - s0) \\<bullet> (1::'a)))) =\n    2 * C * nat_power m ((s0 - s) \\<bullet> (1::'a)) *\n    (1 + norm (s - s0) / ((s - s0) \\<bullet> (1::'a)))", "by (simp add: algebra_simps norm_minus_commute)"], ["proof (state)\nthis:\n  C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n  C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n  C * norm (s0 - s) *\n  (2 *\n   (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n    ((s - s0) \\<bullet> (1::'a)))) =\n  2 * C * nat_power m ((s0 - s) \\<bullet> (1::'a)) *\n  (1 + norm (s - s0) / ((s - s0) \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n  C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n  C * norm (s0 - s) *\n  (2 *\n   (real m powr ((s0 - s) \\<bullet> (1::'a)) /\n    ((s - s0) \\<bullet> (1::'a)))) =\n  2 * C * nat_power m ((s0 - s) \\<bullet> (1::'a)) *\n  (1 + norm (s - s0) / ((s - s0) \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"\\<dots> \\<le> 2 * C * nat_power m (-\\<delta>) * (1 + norm_B / \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * C * nat_power m ((s0 - s) \\<bullet> (1::'a)) *\n    (1 + norm (s - s0) / ((s - s0) \\<bullet> (1::'a)))\n    \\<le> 2 * C * nat_power m (- \\<delta>) * (1 + norm_B / \\<delta>)", "using C_pos s mn \\<sigma>_le[of s] \\<open>s \\<in> B\\<close> \\<sigma>_gt \\<open>0 \\<le> norm_B\\<close>"], ["proof (prove)\nusing this:\n  0 < C\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n  s \\<in> B \\<Longrightarrow> \\<sigma> \\<le> s \\<bullet> (1::'a)\n  s \\<in> B\n  s0 \\<bullet> (1::'a) < \\<sigma>\n  0 \\<le> norm_B\n\ngoal (1 subgoal):\n 1. 2 * C * nat_power m ((s0 - s) \\<bullet> (1::'a)) *\n    (1 + norm (s - s0) / ((s - s0) \\<bullet> (1::'a)))\n    \\<le> 2 * C * nat_power m (- \\<delta>) * (1 + norm_B / \\<delta>)", "unfolding nat_power_real_def \\<delta>_def"], ["proof (prove)\nusing this:\n  0 < C\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n  M \\<le> m\n  m < n\n  0 < m\n  0 < n\n  s \\<in> B \\<Longrightarrow> \\<sigma> \\<le> s \\<bullet> (1::'a)\n  s \\<in> B\n  s0 \\<bullet> (1::'a) < \\<sigma>\n  0 \\<le> norm_B\n\ngoal (1 subgoal):\n 1. 2 * C * real m powr ((s0 - s) \\<bullet> (1::'a)) *\n    (1 + norm (s - s0) / ((s - s0) \\<bullet> (1::'a)))\n    \\<le> 2 * C * real m powr - (\\<sigma> - s0 \\<bullet> (1::'a)) *\n          (1 + norm_B / (\\<sigma> - s0 \\<bullet> (1::'a)))", "by (intro mult_mono powr_mono frac_le add_mono norm_B; simp add: inner_diff_left)"], ["proof (state)\nthis:\n  2 * C * nat_power m ((s0 - s) \\<bullet> (1::'a)) *\n  (1 + norm (s - s0) / ((s - s0) \\<bullet> (1::'a)))\n  \\<le> 2 * C * nat_power m (- \\<delta>) * (1 + norm_B / \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  2 * C * nat_power m ((s0 - s) \\<bullet> (1::'a)) *\n  (1 + norm (s - s0) / ((s - s0) \\<bullet> (1::'a)))\n  \\<le> 2 * C * nat_power m (- \\<delta>) * (1 + norm_B / \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "have \"\\<dots> = 2 * C * (1 + norm_B / \\<delta>) * real m powr (-\\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * C * nat_power m (- \\<delta>) * (1 + norm_B / \\<delta>) =\n    2 * C * (1 + norm_B / \\<delta>) * real m powr - \\<delta>", "by simp"], ["proof (state)\nthis:\n  2 * C * nat_power m (- \\<delta>) * (1 + norm_B / \\<delta>) =\n  2 * C * (1 + norm_B / \\<delta>) * real m powr - \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  2 * C * nat_power m (- \\<delta>) * (1 + norm_B / \\<delta>) =\n  2 * C * (1 + norm_B / \\<delta>) * real m powr - \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "from \\<open>m \\<ge> M\\<close>"], ["proof (chain)\npicking this:\n  M \\<le> m", "have \"\\<dots> < \\<epsilon>\""], ["proof (prove)\nusing this:\n  M \\<le> m\n\ngoal (1 subgoal):\n 1. 2 * C * (1 + norm_B / \\<delta>) * real m powr - \\<delta> < \\<epsilon>", "by (rule M)"], ["proof (state)\nthis:\n  2 * C * (1 + norm_B / \\<delta>) * real m powr - \\<delta> < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<And>x m n.\n       \\<lbrakk>x \\<in> B; max M 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n                          (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n                         < \\<epsilon>", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y.\n              x \\<le> y \\<Longrightarrow>\n              x + norm (A (real m) * nat_power m (s0 - s)) +\n              norm\n               (integral {real m..real n}\n                 (\\<lambda>t.\n                     A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n              \\<le> y + norm (A (real m) * nat_power m (s0 - s)) +\n                    norm\n                     (integral {real m..real n}\n                       (\\<lambda>t.\n                           A t *\n                           ((s0 - s) * real_power t (s0 - s - (1::'a)))));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * nat_power m ((s0 - s) \\<bullet> (1::'a)) + x +\n      norm\n       (integral {real m..real n}\n         (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n      \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a)) + y +\n            norm\n             (integral {real m..real n}\n               (\\<lambda>t.\n                   A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n      C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n      x\n      \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n            C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n            y;\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n      C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n      x\n      \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n            C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n            y\\<rbrakk>\n  \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s)\n                     (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s)\n                    < \\<epsilon>", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x \\<le> y \\<Longrightarrow>\n              x + norm (A (real m) * nat_power m (s0 - s)) +\n              norm\n               (integral {real m..real n}\n                 (\\<lambda>t.\n                     A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n              \\<le> y + norm (A (real m) * nat_power m (s0 - s)) +\n                    norm\n                     (integral {real m..real n}\n                       (\\<lambda>t.\n                           A t *\n                           ((s0 - s) * real_power t (s0 - s - (1::'a)))));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * nat_power m ((s0 - s) \\<bullet> (1::'a)) + x +\n      norm\n       (integral {real m..real n}\n         (\\<lambda>t. A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))))\n      \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a)) + y +\n            norm\n             (integral {real m..real n}\n               (\\<lambda>t.\n                   A t * ((s0 - s) * real_power t (s0 - s - (1::'a)))));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n      C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n      x\n      \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n            C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n            y;\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n      C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n      x\n      \\<le> C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n            C * nat_power m ((s0 - s) \\<bullet> (1::'a)) +\n            y\\<rbrakk>\n  \\<Longrightarrow> dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s)\n                     (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s)\n                    < \\<epsilon>\n\ngoal (1 subgoal):\n 1. dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s)\n     (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s)\n    < \\<epsilon>", "by - simp_all"], ["proof (state)\nthis:\n  dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n s)\n   (\\<Sum>n\\<le>n. fds_nth f n / nat_power n s)\n  < \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>M.\n     \\<forall>x\\<in>B.\n        \\<forall>m\\<ge>M.\n           \\<forall>n>m.\n              dist (\\<Sum>n\\<le>m. fds_nth f n / nat_power n x)\n               (\\<Sum>n\\<le>n. fds_nth f n / nat_power n x)\n              < \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  uniformly_Cauchy_on B\n   (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n\ngoal (1 subgoal):\n 1. B = {} \\<Longrightarrow>\n    uniformly_Cauchy_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "qed (auto simp: uniformly_Cauchy_on_def)"], ["", "lemma uniformly_convergent_eval_fds_aux:\n  assumes \"Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k (s0 :: 'a))\"\n  assumes B: \"compact B\" \"\\<And>z. z \\<in> B \\<Longrightarrow> z \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows   \"uniformly_convergent_on B (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "by (rule Cauchy_uniformly_convergent uniformly_Cauchy_eval_fds_aux assms)+"], ["", "lemma uniformly_convergent_eval_fds_aux':\n  assumes conv: \"fds_converges f (s0 :: 'a)\"\n  assumes B: \"compact B\" \"\\<And>z. z \\<in> B \\<Longrightarrow> z \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows   \"uniformly_convergent_on B (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "proof (rule uniformly_convergent_eval_fds_aux)"], ["proof (state)\ngoal (3 subgoals):\n 1. Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k ?s0.0)\n 2. compact B\n 3. \\<And>z.\n       z \\<in> B \\<Longrightarrow>\n       ?s0.0 \\<bullet> (1::'a) < z \\<bullet> (1::'a)", "from conv"], ["proof (chain)\npicking this:\n  fds_converges f s0", "have \"convergent (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\""], ["proof (prove)\nusing this:\n  fds_converges f s0\n\ngoal (1 subgoal):\n 1. convergent (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)", "by (simp add: fds_converges_def summable_iff_convergent')"], ["proof (state)\nthis:\n  convergent (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\n\ngoal (3 subgoals):\n 1. Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k ?s0.0)\n 2. compact B\n 3. \\<And>z.\n       z \\<in> B \\<Longrightarrow>\n       ?s0.0 \\<bullet> (1::'a) < z \\<bullet> (1::'a)", "thus \"Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\""], ["proof (prove)\nusing this:\n  convergent (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)", "by (rule convergent_imp_Bseq)"], ["proof (state)\nthis:\n  Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\n\ngoal (2 subgoals):\n 1. compact B\n 2. \\<And>z.\n       z \\<in> B \\<Longrightarrow>\n       s0 \\<bullet> (1::'a) < z \\<bullet> (1::'a)", "qed (insert assms, auto)"], ["", "lemma bounded_partial_sums_imp_fps_converges:\n  fixes s0 :: \"'a :: dirichlet_series\"\n  assumes \"Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\" and \"s \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows   \"fds_converges f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges f s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_converges f s", "have \"uniformly_convergent_on {s} (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniformly_convergent_on {s}\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "using assms(2)"], ["proof (prove)\nusing this:\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. uniformly_convergent_on {s}\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "by (intro uniformly_convergent_eval_fds_aux[OF assms(1)]) auto"], ["proof (state)\nthis:\n  uniformly_convergent_on {s}\n   (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n\ngoal (1 subgoal):\n 1. fds_converges f s", "thus ?thesis"], ["proof (prove)\nusing this:\n  uniformly_convergent_on {s}\n   (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n\ngoal (1 subgoal):\n 1. fds_converges f s", "by (auto simp: fds_converges_def summable_iff_convergent'\n             dest: uniformly_convergent_imp_convergent)"], ["proof (state)\nthis:\n  fds_converges f s\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem fds_converges_Re_le:\n  assumes \"fds_converges f (s0 :: 'a)\" \"s \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows   \"fds_converges f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges f s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_converges f s", "have \"uniformly_convergent_on {s} (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniformly_convergent_on {s}\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "by (rule uniformly_convergent_eval_fds_aux' assms)+ (insert assms(2), auto)"], ["proof (state)\nthis:\n  uniformly_convergent_on {s}\n   (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n\ngoal (1 subgoal):\n 1. fds_converges f s", "then"], ["proof (chain)\npicking this:\n  uniformly_convergent_on {s}\n   (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "obtain l where \"uniform_limit {s} (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z) l at_top\""], ["proof (prove)\nusing this:\n  uniformly_convergent_on {s}\n   (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        uniform_limit {s}\n         (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z) l\n         sequentially \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: uniformly_convergent_on_def)"], ["proof (state)\nthis:\n  uniform_limit {s}\n   (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z) l sequentially\n\ngoal (1 subgoal):\n 1. fds_converges f s", "from tendsto_uniform_limitI[OF this, of s]"], ["proof (chain)\npicking this:\n  s \\<in> {s} \\<Longrightarrow>\n  (\\<lambda>y. \\<Sum>n\\<le>y. fds_nth f n / nat_power n s)\n  \\<longlonglongrightarrow> l s", "have \"(\\<lambda>n. fds_nth f n / nat_power n s) sums l s\""], ["proof (prove)\nusing this:\n  s \\<in> {s} \\<Longrightarrow>\n  (\\<lambda>y. \\<Sum>n\\<le>y. fds_nth f n / nat_power n s)\n  \\<longlonglongrightarrow> l s\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth f n / nat_power n s) sums l s", "unfolding sums_def'"], ["proof (prove)\nusing this:\n  s \\<in> {s} \\<Longrightarrow>\n  (\\<lambda>y. \\<Sum>n\\<le>y. fds_nth f n / nat_power n s)\n  \\<longlonglongrightarrow> l s\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. \\<Sum>n = 0..n. fds_nth f n / nat_power n s)\n    \\<longlonglongrightarrow> l s", "by (simp add: atLeast0AtMost)"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth f n / nat_power n s) sums l s\n\ngoal (1 subgoal):\n 1. fds_converges f s", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>n. fds_nth f n / nat_power n s) sums l s\n\ngoal (1 subgoal):\n 1. fds_converges f s", "by (simp add: fds_converges_def sums_iff)"], ["proof (state)\nthis:\n  fds_converges f s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_converges:\n  assumes \"s \\<bullet> 1 > conv_abscissa (f :: 'a fds)\"\n  shows   \"fds_converges f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges f s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_converges f s", "from assms"], ["proof (chain)\npicking this:\n  conv_abscissa f < ereal (s \\<bullet> (1::'a))", "obtain s0 where \"fds_converges f s0\" \"s0 \\<bullet> 1 < s \\<bullet> 1\""], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>s0.\n        \\<lbrakk>fds_converges f s0;\n         s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: INF_less_iff conv_abscissa_def)"], ["proof (state)\nthis:\n  fds_converges f s0\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. fds_converges f s", "with fds_converges_Re_le[OF this(1), of s] this(2)"], ["proof (chain)\npicking this:\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a) \\<Longrightarrow>\n  fds_converges f s\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n  fds_converges f s0\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a) \\<Longrightarrow>\n  fds_converges f s\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n  fds_converges f s0\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. fds_converges f s", "by simp"], ["proof (state)\nthis:\n  fds_converges f s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_diverges:\n  assumes \"s \\<bullet> 1 < conv_abscissa (f :: 'a fds)\"\n  shows   \"\\<not>fds_converges f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> fds_converges f s", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_converges f s \\<Longrightarrow> False", "assume \"fds_converges f s\""], ["proof (state)\nthis:\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. fds_converges f s \\<Longrightarrow> False", "hence \"conv_abscissa f \\<le> s \\<bullet> 1\""], ["proof (prove)\nusing this:\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> ereal (s \\<bullet> (1::'a))", "unfolding conv_abscissa_def"], ["proof (prove)\nusing this:\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. (INF s\\<in>Collect (fds_converges f). ereal (s \\<bullet> (1::'a)))\n    \\<le> ereal (s \\<bullet> (1::'a))", "by (intro INF_lower) auto"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. fds_converges f s \\<Longrightarrow> False", "with assms"], ["proof (chain)\npicking this:\n  ereal (s \\<bullet> (1::'a)) < conv_abscissa f\n  conv_abscissa f \\<le> ereal (s \\<bullet> (1::'a))", "show False"], ["proof (prove)\nusing this:\n  ereal (s \\<bullet> (1::'a)) < conv_abscissa f\n  conv_abscissa f \\<le> ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem fds_converges_imp_abs_converges:\n  assumes \"fds_converges (f :: 'a fds) s\" \"s' \\<bullet> 1 > s \\<bullet> 1 + 1\"\n  shows   \"fds_abs_converges f s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges f s'", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n s'))", "proof (rule summable_comparison_test_ev)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n s')) \\<le> ?g n\n 2. summable ?g", "from assms(2)"], ["proof (chain)\npicking this:\n  s \\<bullet> (1::'a) + 1 < s' \\<bullet> (1::'a)", "show \"summable (\\<lambda>n. real n powr ((s - s') \\<bullet> 1))\""], ["proof (prove)\nusing this:\n  s \\<bullet> (1::'a) + 1 < s' \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. real n powr ((s - s') \\<bullet> (1::'a)))", "by (subst summable_real_powr_iff) (simp_all add: inner_diff_left)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. real n powr ((s - s') \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n s'))\n       \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n s'))\n       \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "from assms(1)"], ["proof (chain)\npicking this:\n  fds_converges f s", "have \"(\\<lambda>n. fds_nth f n / nat_power n s) \\<longlonglongrightarrow> 0\""], ["proof (prove)\nusing this:\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth f n / nat_power n s)\n    \\<longlonglongrightarrow> (0::'a)", "unfolding fds_converges_def"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. fds_nth f n / nat_power n s)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth f n / nat_power n s)\n    \\<longlonglongrightarrow> (0::'a)", "by (rule summable_LIMSEQ_zero)"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth f n / nat_power n s)\n  \\<longlonglongrightarrow> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n s'))\n       \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "from tendsto_norm[OF this]"], ["proof (chain)\npicking this:\n  (\\<lambda>x. norm (fds_nth f x / nat_power x s))\n  \\<longlonglongrightarrow> norm (0::'a)", "have \"(\\<lambda>n. norm (fds_nth f n / nat_power n s)) \\<longlonglongrightarrow> 0\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. norm (fds_nth f x / nat_power x s))\n  \\<longlonglongrightarrow> norm (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. norm (fds_nth f n / nat_power n s))\n    \\<longlonglongrightarrow> 0", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>n. norm (fds_nth f n / nat_power n s))\n  \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n s'))\n       \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "hence \"eventually (\\<lambda>n. norm (fds_nth f n / nat_power n s) < 1) at_top\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. norm (fds_nth f n / nat_power n s))\n  \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (fds_nth f n / nat_power n s) < 1", "by (rule order_tendstoD) simp_all"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     norm (fds_nth f n / nat_power n s) < 1\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n s'))\n       \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "thus \"eventually (\\<lambda>n. norm (norm (fds_nth f n / nat_power n s')) \\<le> \n          real n powr ((s - s') \\<bullet> 1)) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially.\n     norm (fds_nth f n / nat_power n s) < 1\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n s'))\n       \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       norm (fds_nth f n / nat_power n s) < 1 \\<Longrightarrow>\n       norm (norm (fds_nth f n / nat_power n s'))\n       \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "case (elim n)"], ["proof (state)\nthis:\n  norm (fds_nth f n / nat_power n s) < 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       norm (fds_nth f n / nat_power n s) < 1 \\<Longrightarrow>\n       norm (norm (fds_nth f n / nat_power n s'))\n       \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "thus ?case"], ["proof (prove)\nusing this:\n  norm (fds_nth f n / nat_power n s) < 1\n\ngoal (1 subgoal):\n 1. norm (norm (fds_nth f n / nat_power n s'))\n    \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n = 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n 2. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n = 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n 2. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "have \"norm (fds_nth f n / nat_power n s') =\n              norm (fds_nth f n) / real n powr (s' \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (fds_nth f n / nat_power n s') =\n    norm (fds_nth f n) / real n powr (s' \\<bullet> (1::'a))", "using False"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. norm (fds_nth f n / nat_power n s') =\n    norm (fds_nth f n) / real n powr (s' \\<bullet> (1::'a))", "by (simp add: norm_divide norm_nat_power)"], ["proof (state)\nthis:\n  norm (fds_nth f n / nat_power n s') =\n  norm (fds_nth f n) / real n powr (s' \\<bullet> (1::'a))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n = 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n 2. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "also"], ["proof (state)\nthis:\n  norm (fds_nth f n / nat_power n s') =\n  norm (fds_nth f n) / real n powr (s' \\<bullet> (1::'a))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n = 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n 2. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "have \"\\<dots> = norm (fds_nth f n / nat_power n s) / real n powr ((s' - s) \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (fds_nth f n) / real n powr (s' \\<bullet> (1::'a)) =\n    norm (fds_nth f n / nat_power n s) /\n    real n powr ((s' - s) \\<bullet> (1::'a))", "using False"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. norm (fds_nth f n) / real n powr (s' \\<bullet> (1::'a)) =\n    norm (fds_nth f n / nat_power n s) /\n    real n powr ((s' - s) \\<bullet> (1::'a))", "by (simp add: norm_divide norm_nat_power inner_diff_left powr_diff)"], ["proof (state)\nthis:\n  norm (fds_nth f n) / real n powr (s' \\<bullet> (1::'a)) =\n  norm (fds_nth f n / nat_power n s) /\n  real n powr ((s' - s) \\<bullet> (1::'a))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n = 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n 2. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "also"], ["proof (state)\nthis:\n  norm (fds_nth f n) / real n powr (s' \\<bullet> (1::'a)) =\n  norm (fds_nth f n / nat_power n s) /\n  real n powr ((s' - s) \\<bullet> (1::'a))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n = 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n 2. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "have \"\\<dots> \\<le> 1 / real n powr ((s' - s) \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (fds_nth f n / nat_power n s) /\n    real n powr ((s' - s) \\<bullet> (1::'a))\n    \\<le> 1 / real n powr ((s' - s) \\<bullet> (1::'a))", "using elim"], ["proof (prove)\nusing this:\n  norm (fds_nth f n / nat_power n s) < 1\n\ngoal (1 subgoal):\n 1. norm (fds_nth f n / nat_power n s) /\n    real n powr ((s' - s) \\<bullet> (1::'a))\n    \\<le> 1 / real n powr ((s' - s) \\<bullet> (1::'a))", "by (intro divide_right_mono elim) simp_all"], ["proof (state)\nthis:\n  norm (fds_nth f n / nat_power n s) /\n  real n powr ((s' - s) \\<bullet> (1::'a))\n  \\<le> 1 / real n powr ((s' - s) \\<bullet> (1::'a))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n = 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n 2. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "also"], ["proof (state)\nthis:\n  norm (fds_nth f n / nat_power n s) /\n  real n powr ((s' - s) \\<bullet> (1::'a))\n  \\<le> 1 / real n powr ((s' - s) \\<bullet> (1::'a))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n = 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n 2. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "have \"\\<dots> = real n powr ((s - s') \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 / real n powr ((s' - s) \\<bullet> (1::'a)) =\n    real n powr ((s - s') \\<bullet> (1::'a))", "using False"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 1 / real n powr ((s' - s) \\<bullet> (1::'a)) =\n    real n powr ((s - s') \\<bullet> (1::'a))", "by (simp add: field_simps inner_diff_left powr_diff)"], ["proof (state)\nthis:\n  1 / real n powr ((s' - s) \\<bullet> (1::'a)) =\n  real n powr ((s - s') \\<bullet> (1::'a))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n = 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n 2. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "finally"], ["proof (chain)\npicking this:\n  norm (fds_nth f n / nat_power n s')\n  \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  norm (fds_nth f n / nat_power n s')\n  \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. norm (norm (fds_nth f n / nat_power n s'))\n    \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "by simp"], ["proof (state)\nthis:\n  norm (norm (fds_nth f n / nat_power n s'))\n  \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>norm (fds_nth f n / nat_power n s) < 1; n = 0\\<rbrakk>\n    \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n s'))\n                      \\<le> real n powr ((s - s') \\<bullet> (1::'a))", "qed simp_all"], ["proof (state)\nthis:\n  norm (norm (fds_nth f n / nat_power n s'))\n  \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     norm (norm (fds_nth f n / nat_power n s'))\n     \\<le> real n powr ((s - s') \\<bullet> (1::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conv_le_abs_conv_abscissa: \"conv_abscissa f \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> abs_conv_abscissa f", "unfolding conv_abscissa_def abs_conv_abscissa_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF s\\<in>Collect (fds_converges f). ereal (s \\<bullet> (1::'b)))\n    \\<le> (INF s\\<in>Collect (fds_abs_converges f).\n              ereal (s \\<bullet> (1::'b)))", "by (intro INF_superset_mono) auto"], ["", "lemma conv_abscissa_PInf_iff: \"conv_abscissa f = \\<infinity> \\<longleftrightarrow> (\\<forall>s. \\<not>fds_converges f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (conv_abscissa f = \\<infinity>) = (\\<forall>s. \\<not> fds_converges f s)", "unfolding conv_abscissa_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((INF s\\<in>Collect (fds_converges f). ereal (s \\<bullet> (1::'b))) =\n     \\<infinity>) =\n    (\\<forall>s. \\<not> fds_converges f s)", "by (subst Inf_eq_PInfty) auto"], ["", "lemma conv_abscissa_PInfI [intro]: \"(\\<And>s. \\<not>fds_converges f s) \\<Longrightarrow> conv_abscissa f = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. \\<not> fds_converges f s) \\<Longrightarrow>\n    conv_abscissa f = \\<infinity>", "by (subst conv_abscissa_PInf_iff) auto"], ["", "lemma conv_abscissa_MInf_iff: \"conv_abscissa (f :: 'a fds) = -\\<infinity> \\<longleftrightarrow> (\\<forall>s. fds_converges f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (conv_abscissa f = - \\<infinity>) = (\\<forall>s. fds_converges f s)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       conv_abscissa f = - \\<infinity> \\<Longrightarrow> fds_converges f s\n 2. \\<forall>s. fds_converges f s \\<Longrightarrow>\n    conv_abscissa f = - \\<infinity>", "assume *: \"\\<forall>s. fds_converges f s\""], ["proof (state)\nthis:\n  \\<forall>s. fds_converges f s\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       conv_abscissa f = - \\<infinity> \\<Longrightarrow> fds_converges f s\n 2. \\<forall>s. fds_converges f s \\<Longrightarrow>\n    conv_abscissa f = - \\<infinity>", "have \"conv_abscissa f \\<le> B\" for B :: real"], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> ereal B", "using spec[OF *, of \"of_real B\"] fds_diverges[of \"of_real B\" f]"], ["proof (prove)\nusing this:\n  fds_converges f (of_real B)\n  ereal (of_real B \\<bullet> (1::'a)) < conv_abscissa f \\<Longrightarrow>\n  \\<not> fds_converges f (of_real B)\n\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> ereal B", "by (cases \"conv_abscissa f \\<le> B\") simp_all"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> ereal ?B\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       conv_abscissa f = - \\<infinity> \\<Longrightarrow> fds_converges f s\n 2. \\<forall>s. fds_converges f s \\<Longrightarrow>\n    conv_abscissa f = - \\<infinity>", "thus \"conv_abscissa f = -\\<infinity>\""], ["proof (prove)\nusing this:\n  conv_abscissa f \\<le> ereal ?B\n\ngoal (1 subgoal):\n 1. conv_abscissa f = - \\<infinity>", "by (rule ereal_bot)"], ["proof (state)\nthis:\n  conv_abscissa f = - \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       conv_abscissa f = - \\<infinity> \\<Longrightarrow> fds_converges f s", "qed (auto intro: fds_converges)"], ["", "lemma conv_abscissa_MInfI [intro]: \"(\\<And>s. fds_converges (f::'a fds) s) \\<Longrightarrow> conv_abscissa f = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. fds_converges f s) \\<Longrightarrow>\n    conv_abscissa f = - \\<infinity>", "by (subst conv_abscissa_MInf_iff) auto"], ["", "lemma abs_conv_abscissa_PInf_iff: \"abs_conv_abscissa f = \\<infinity> \\<longleftrightarrow> (\\<forall>s. \\<not>fds_abs_converges f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (abs_conv_abscissa f = \\<infinity>) =\n    (\\<forall>s. \\<not> fds_abs_converges f s)", "unfolding abs_conv_abscissa_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((INF s\\<in>Collect (fds_abs_converges f).\n         ereal (s \\<bullet> (1::'b))) =\n     \\<infinity>) =\n    (\\<forall>s. \\<not> fds_abs_converges f s)", "by (subst Inf_eq_PInfty) auto"], ["", "lemma abs_conv_abscissa_PInfI [intro]: \"(\\<And>s. \\<not>fds_converges f s) \\<Longrightarrow> abs_conv_abscissa f = \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. \\<not> fds_converges f s) \\<Longrightarrow>\n    abs_conv_abscissa f = \\<infinity>", "by (subst abs_conv_abscissa_PInf_iff) auto"], ["", "lemma abs_conv_abscissa_MInf_iff: \n  \"abs_conv_abscissa (f :: 'a fds) = -\\<infinity> \\<longleftrightarrow> (\\<forall>s. fds_abs_converges f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (abs_conv_abscissa f = - \\<infinity>) =\n    (\\<forall>s. fds_abs_converges f s)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       abs_conv_abscissa f = - \\<infinity> \\<Longrightarrow>\n       fds_abs_converges f s\n 2. \\<forall>s. fds_abs_converges f s \\<Longrightarrow>\n    abs_conv_abscissa f = - \\<infinity>", "assume *: \"\\<forall>s. fds_abs_converges f s\""], ["proof (state)\nthis:\n  \\<forall>s. fds_abs_converges f s\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       abs_conv_abscissa f = - \\<infinity> \\<Longrightarrow>\n       fds_abs_converges f s\n 2. \\<forall>s. fds_abs_converges f s \\<Longrightarrow>\n    abs_conv_abscissa f = - \\<infinity>", "have \"abs_conv_abscissa f \\<le> B\" for B :: real"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> ereal B", "using spec[OF *, of \"of_real B\"] fds_abs_diverges[of \"of_real B\" f]"], ["proof (prove)\nusing this:\n  fds_abs_converges f (of_real B)\n  ereal (of_real B \\<bullet> (1::'a))\n  < abs_conv_abscissa f \\<Longrightarrow>\n  \\<not> fds_abs_converges f (of_real B)\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> ereal B", "by (cases \"abs_conv_abscissa f \\<le> B\") simp_all"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> ereal ?B\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       abs_conv_abscissa f = - \\<infinity> \\<Longrightarrow>\n       fds_abs_converges f s\n 2. \\<forall>s. fds_abs_converges f s \\<Longrightarrow>\n    abs_conv_abscissa f = - \\<infinity>", "thus \"abs_conv_abscissa f = -\\<infinity>\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa f \\<le> ereal ?B\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f = - \\<infinity>", "by (rule ereal_bot)"], ["proof (state)\nthis:\n  abs_conv_abscissa f = - \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       abs_conv_abscissa f = - \\<infinity> \\<Longrightarrow>\n       fds_abs_converges f s", "qed (auto intro: fds_abs_converges)"], ["", "lemma abs_conv_abscissa_MInfI [intro]: \n  \"(\\<And>s. fds_abs_converges (f::'a fds) s) \\<Longrightarrow> abs_conv_abscissa f = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. fds_abs_converges f s) \\<Longrightarrow>\n    abs_conv_abscissa f = - \\<infinity>", "by (subst abs_conv_abscissa_MInf_iff) auto"], ["", "lemma conv_abscissa_geI:\n  assumes \"\\<And>c'. ereal c' < c \\<Longrightarrow> \\<exists>s. s \\<bullet> 1 = c' \\<and> \\<not>fds_converges f s\"\n  shows   \"conv_abscissa (f :: 'a fds) \\<ge> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<le> conv_abscissa f", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> c \\<le> conv_abscissa f \\<Longrightarrow> False", "assume \"\\<not>conv_abscissa f \\<ge> c\""], ["proof (state)\nthis:\n  \\<not> c \\<le> conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<not> c \\<le> conv_abscissa f \\<Longrightarrow> False", "hence \"c > conv_abscissa f\""], ["proof (prove)\nusing this:\n  \\<not> c \\<le> conv_abscissa f\n\ngoal (1 subgoal):\n 1. conv_abscissa f < c", "by simp"], ["proof (state)\nthis:\n  conv_abscissa f < c\n\ngoal (1 subgoal):\n 1. \\<not> c \\<le> conv_abscissa f \\<Longrightarrow> False", "from ereal_dense2[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>z. conv_abscissa f < ereal z \\<and> ereal z < c", "obtain c' where \"c > ereal c'\" \"c' > conv_abscissa f\""], ["proof (prove)\nusing this:\n  \\<exists>z. conv_abscissa f < ereal z \\<and> ereal z < c\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>ereal c' < c; conv_abscissa f < ereal c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ereal c' < c\n  conv_abscissa f < ereal c'\n\ngoal (1 subgoal):\n 1. \\<not> c \\<le> conv_abscissa f \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  ereal c' < c\n  conv_abscissa f < ereal c'\n\ngoal (1 subgoal):\n 1. \\<not> c \\<le> conv_abscissa f \\<Longrightarrow> False", "from assms[OF this(1)]"], ["proof (chain)\npicking this:\n  \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> \\<not> fds_converges f s", "obtain s where \"s \\<bullet> 1 = c'\" \"\\<not>fds_converges f s\""], ["proof (prove)\nusing this:\n  \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> \\<not> fds_converges f s\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<bullet> (1::'a) = c'; \\<not> fds_converges f s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<bullet> (1::'a) = c'\n  \\<not> fds_converges f s\n\ngoal (1 subgoal):\n 1. \\<not> c \\<le> conv_abscissa f \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  ereal c' < c\n  conv_abscissa f < ereal c'\n  s \\<bullet> (1::'a) = c'\n  \\<not> fds_converges f s", "show False"], ["proof (prove)\nusing this:\n  ereal c' < c\n  conv_abscissa f < ereal c'\n  s \\<bullet> (1::'a) = c'\n  \\<not> fds_converges f s\n\ngoal (1 subgoal):\n 1. False", "using fds_converges[of f s]"], ["proof (prove)\nusing this:\n  ereal c' < c\n  conv_abscissa f < ereal c'\n  s \\<bullet> (1::'a) = c'\n  \\<not> fds_converges f s\n  conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conv_abscissa_leI:\n  assumes \"\\<And>c'. ereal c' > c \\<Longrightarrow> \\<exists>s. s \\<bullet> 1 = c' \\<and> fds_converges f s\"\n  shows   \"conv_abscissa (f :: 'a fds) \\<le> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> c", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> conv_abscissa f \\<le> c \\<Longrightarrow> False", "assume \"\\<not>conv_abscissa f \\<le> c\""], ["proof (state)\nthis:\n  \\<not> conv_abscissa f \\<le> c\n\ngoal (1 subgoal):\n 1. \\<not> conv_abscissa f \\<le> c \\<Longrightarrow> False", "hence \"c < conv_abscissa f\""], ["proof (prove)\nusing this:\n  \\<not> conv_abscissa f \\<le> c\n\ngoal (1 subgoal):\n 1. c < conv_abscissa f", "by simp"], ["proof (state)\nthis:\n  c < conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<not> conv_abscissa f \\<le> c \\<Longrightarrow> False", "from ereal_dense2[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>z. c < ereal z \\<and> ereal z < conv_abscissa f", "obtain c' where \"c < ereal c'\" \"c' < conv_abscissa f\""], ["proof (prove)\nusing this:\n  \\<exists>z. c < ereal z \\<and> ereal z < conv_abscissa f\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>c < ereal c'; ereal c' < conv_abscissa f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c < ereal c'\n  ereal c' < conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<not> conv_abscissa f \\<le> c \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  c < ereal c'\n  ereal c' < conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<not> conv_abscissa f \\<le> c \\<Longrightarrow> False", "from assms[OF this(1)]"], ["proof (chain)\npicking this:\n  \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_converges f s", "obtain s where \"s \\<bullet> 1 = c'\" \"fds_converges f s\""], ["proof (prove)\nusing this:\n  \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_converges f s\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<bullet> (1::'a) = c'; fds_converges f s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<bullet> (1::'a) = c'\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. \\<not> conv_abscissa f \\<le> c \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  c < ereal c'\n  ereal c' < conv_abscissa f\n  s \\<bullet> (1::'a) = c'\n  fds_converges f s", "show False"], ["proof (prove)\nusing this:\n  c < ereal c'\n  ereal c' < conv_abscissa f\n  s \\<bullet> (1::'a) = c'\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. False", "using fds_diverges[of s f]"], ["proof (prove)\nusing this:\n  c < ereal c'\n  ereal c' < conv_abscissa f\n  s \\<bullet> (1::'a) = c'\n  fds_converges f s\n  ereal (s \\<bullet> (1::'a)) < conv_abscissa f \\<Longrightarrow>\n  \\<not> fds_converges f s\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abs_conv_abscissa_geI:\n  assumes \"\\<And>c'. ereal c' < c \\<Longrightarrow> \\<exists>s. s \\<bullet> 1 = c' \\<and> \\<not>fds_abs_converges f s\"\n  shows   \"abs_conv_abscissa (f :: 'a fds) \\<ge> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<le> abs_conv_abscissa f", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> c \\<le> abs_conv_abscissa f \\<Longrightarrow> False", "assume \"\\<not>abs_conv_abscissa f \\<ge> c\""], ["proof (state)\nthis:\n  \\<not> c \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<not> c \\<le> abs_conv_abscissa f \\<Longrightarrow> False", "hence \"c > abs_conv_abscissa f\""], ["proof (prove)\nusing this:\n  \\<not> c \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f < c", "by simp"], ["proof (state)\nthis:\n  abs_conv_abscissa f < c\n\ngoal (1 subgoal):\n 1. \\<not> c \\<le> abs_conv_abscissa f \\<Longrightarrow> False", "from ereal_dense2[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>z. abs_conv_abscissa f < ereal z \\<and> ereal z < c", "obtain c' where \"c > ereal c'\" \"c' > abs_conv_abscissa f\""], ["proof (prove)\nusing this:\n  \\<exists>z. abs_conv_abscissa f < ereal z \\<and> ereal z < c\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>ereal c' < c; abs_conv_abscissa f < ereal c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ereal c' < c\n  abs_conv_abscissa f < ereal c'\n\ngoal (1 subgoal):\n 1. \\<not> c \\<le> abs_conv_abscissa f \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  ereal c' < c\n  abs_conv_abscissa f < ereal c'\n\ngoal (1 subgoal):\n 1. \\<not> c \\<le> abs_conv_abscissa f \\<Longrightarrow> False", "from assms[OF this(1)]"], ["proof (chain)\npicking this:\n  \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> \\<not> fds_abs_converges f s", "obtain s where \"s \\<bullet> 1 = c'\" \"\\<not>fds_abs_converges f s\""], ["proof (prove)\nusing this:\n  \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> \\<not> fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<bullet> (1::'a) = c';\n         \\<not> fds_abs_converges f s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<bullet> (1::'a) = c'\n  \\<not> fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. \\<not> c \\<le> abs_conv_abscissa f \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  ereal c' < c\n  abs_conv_abscissa f < ereal c'\n  s \\<bullet> (1::'a) = c'\n  \\<not> fds_abs_converges f s", "show False"], ["proof (prove)\nusing this:\n  ereal c' < c\n  abs_conv_abscissa f < ereal c'\n  s \\<bullet> (1::'a) = c'\n  \\<not> fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. False", "using fds_abs_converges[of f s]"], ["proof (prove)\nusing this:\n  ereal c' < c\n  abs_conv_abscissa f < ereal c'\n  s \\<bullet> (1::'a) = c'\n  \\<not> fds_abs_converges f s\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abs_conv_abscissa_leI:\n  assumes \"\\<And>c'. ereal c' > c \\<Longrightarrow> \\<exists>s. s \\<bullet> 1 = c' \\<and> fds_abs_converges f s\"\n  shows   \"abs_conv_abscissa (f :: 'a fds) \\<le> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> c", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> abs_conv_abscissa f \\<le> c \\<Longrightarrow> False", "assume \"\\<not>abs_conv_abscissa f \\<le> c\""], ["proof (state)\nthis:\n  \\<not> abs_conv_abscissa f \\<le> c\n\ngoal (1 subgoal):\n 1. \\<not> abs_conv_abscissa f \\<le> c \\<Longrightarrow> False", "hence \"c < abs_conv_abscissa f\""], ["proof (prove)\nusing this:\n  \\<not> abs_conv_abscissa f \\<le> c\n\ngoal (1 subgoal):\n 1. c < abs_conv_abscissa f", "by simp"], ["proof (state)\nthis:\n  c < abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<not> abs_conv_abscissa f \\<le> c \\<Longrightarrow> False", "from ereal_dense2[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>z. c < ereal z \\<and> ereal z < abs_conv_abscissa f", "obtain c' where \"c < ereal c'\" \"c' < abs_conv_abscissa f\""], ["proof (prove)\nusing this:\n  \\<exists>z. c < ereal z \\<and> ereal z < abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        \\<lbrakk>c < ereal c'; ereal c' < abs_conv_abscissa f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  c < ereal c'\n  ereal c' < abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<not> abs_conv_abscissa f \\<le> c \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  c < ereal c'\n  ereal c' < abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<not> abs_conv_abscissa f \\<le> c \\<Longrightarrow> False", "from assms[OF this(1)]"], ["proof (chain)\npicking this:\n  \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "obtain s where \"s \\<bullet> 1 = c'\" \"fds_abs_converges f s\""], ["proof (prove)\nusing this:\n  \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<bullet> (1::'a) = c'; fds_abs_converges f s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<bullet> (1::'a) = c'\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. \\<not> abs_conv_abscissa f \\<le> c \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  c < ereal c'\n  ereal c' < abs_conv_abscissa f\n  s \\<bullet> (1::'a) = c'\n  fds_abs_converges f s", "show False"], ["proof (prove)\nusing this:\n  c < ereal c'\n  ereal c' < abs_conv_abscissa f\n  s \\<bullet> (1::'a) = c'\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. False", "using fds_abs_diverges[of s f]"], ["proof (prove)\nusing this:\n  c < ereal c'\n  ereal c' < abs_conv_abscissa f\n  s \\<bullet> (1::'a) = c'\n  fds_abs_converges f s\n  ereal (s \\<bullet> (1::'a)) < abs_conv_abscissa f \\<Longrightarrow>\n  \\<not> fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conv_abscissa_leI_weak:\n  assumes \"\\<And>x. ereal x > d \\<Longrightarrow> fds_converges f (of_real x)\"\n  shows   \"conv_abscissa (f :: 'a fds) \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> d", "proof (rule conv_abscissa_leI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       d < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_converges f s", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       d < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_converges f s", "assume \"d < ereal x\""], ["proof (state)\nthis:\n  d < ereal x\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       d < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_converges f s", "from assms[OF this]"], ["proof (chain)\npicking this:\n  fds_converges f (of_real x)", "show \"\\<exists>s. s \\<bullet> 1 = x \\<and> fds_converges f s\""], ["proof (prove)\nusing this:\n  fds_converges f (of_real x)\n\ngoal (1 subgoal):\n 1. \\<exists>s. s \\<bullet> (1::'a) = x \\<and> fds_converges f s", "by (intro exI[of _ \"of_real x\"]) auto"], ["proof (state)\nthis:\n  \\<exists>s. s \\<bullet> (1::'a) = x \\<and> fds_converges f s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abs_conv_abscissa_leI_weak:\n  assumes \"\\<And>x. ereal x > d \\<Longrightarrow> fds_abs_converges f (of_real x)\"\n  shows   \"abs_conv_abscissa (f :: 'a fds) \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> d", "proof (rule abs_conv_abscissa_leI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       d < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       d < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "assume \"d < ereal x\""], ["proof (state)\nthis:\n  d < ereal x\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       d < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "from assms[OF this]"], ["proof (chain)\npicking this:\n  fds_abs_converges f (of_real x)", "show \"\\<exists>s. s \\<bullet> 1 = x \\<and> fds_abs_converges f s\""], ["proof (prove)\nusing this:\n  fds_abs_converges f (of_real x)\n\ngoal (1 subgoal):\n 1. \\<exists>s. s \\<bullet> (1::'a) = x \\<and> fds_abs_converges f s", "by (intro exI[of _ \"of_real x\"]) auto"], ["proof (state)\nthis:\n  \\<exists>s. s \\<bullet> (1::'a) = x \\<and> fds_abs_converges f s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conv_abscissa_truncate [simp]: \n  \"conv_abscissa (fds_truncate m (f :: 'a fds)) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (fds_truncate m f) = - \\<infinity>", "by (auto simp: conv_abscissa_MInf_iff)"], ["", "lemma abs_conv_abscissa_truncate [simp]: \n  \"abs_conv_abscissa (fds_truncate m (f :: 'a fds)) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_truncate m f) = - \\<infinity>", "by (auto simp: abs_conv_abscissa_MInf_iff)"], ["", "theorem abs_conv_le_conv_abscissa_plus_1: \"abs_conv_abscissa (f :: 'a fds) \\<le> conv_abscissa f + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> conv_abscissa f + 1", "proof (rule abs_conv_abscissa_leI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       conv_abscissa f + 1 < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "fix c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       conv_abscissa f + 1 < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "assume less: \"conv_abscissa f + 1 < ereal c\""], ["proof (state)\nthis:\n  conv_abscissa f + 1 < ereal c\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       conv_abscissa f + 1 < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "define c' where \"c' = (if conv_abscissa f = -\\<infinity> then c - 2\n                     else (c - 1 + real_of_ereal (conv_abscissa f)) / 2)\""], ["proof (state)\nthis:\n  c' =\n  (if conv_abscissa f = - \\<infinity> then c - 2\n   else (c - 1 + real_of_ereal (conv_abscissa f)) / 2)\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       conv_abscissa f + 1 < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "from less"], ["proof (chain)\npicking this:\n  conv_abscissa f + 1 < ereal c", "have c': \"conv_abscissa f < ereal c' \\<and> c' < c - 1\""], ["proof (prove)\nusing this:\n  conv_abscissa f + 1 < ereal c\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal c' \\<and> c' < c - 1", "by (cases \"conv_abscissa f\") (simp_all add: c'_def field_simps)"], ["proof (state)\nthis:\n  conv_abscissa f < ereal c' \\<and> c' < c - 1\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       conv_abscissa f + 1 < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "from c'"], ["proof (chain)\npicking this:\n  conv_abscissa f < ereal c' \\<and> c' < c - 1", "have \"fds_converges f (of_real c')\""], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal c' \\<and> c' < c - 1\n\ngoal (1 subgoal):\n 1. fds_converges f (of_real c')", "by (intro fds_converges) (simp_all add: inner_diff_left dot_square_norm)"], ["proof (state)\nthis:\n  fds_converges f (of_real c')\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       conv_abscissa f + 1 < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "hence \"fds_abs_converges f (of_real c)\""], ["proof (prove)\nusing this:\n  fds_converges f (of_real c')\n\ngoal (1 subgoal):\n 1. fds_abs_converges f (of_real c)", "by (rule fds_converges_imp_abs_converges) (insert c', simp_all)"], ["proof (state)\nthis:\n  fds_abs_converges f (of_real c)\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       conv_abscissa f + 1 < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "thus \"\\<exists>s. s \\<bullet> 1 = c \\<and> fds_abs_converges f s\""], ["proof (prove)\nusing this:\n  fds_abs_converges f (of_real c)\n\ngoal (1 subgoal):\n 1. \\<exists>s. s \\<bullet> (1::'a) = c \\<and> fds_abs_converges f s", "by (intro exI[of _ \"of_real c\"]) auto"], ["proof (state)\nthis:\n  \\<exists>s. s \\<bullet> (1::'a) = c \\<and> fds_abs_converges f s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma uniformly_convergent_eval_fds:\n  assumes B: \"compact B\" \"\\<And>z. z \\<in> B \\<Longrightarrow> z \\<bullet> 1 > conv_abscissa (f :: 'a fds)\"\n  shows   \"uniformly_convergent_on B (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "proof (cases \"B = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. B = {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n 2. B \\<noteq> {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "case False"], ["proof (state)\nthis:\n  B \\<noteq> {}\n\ngoal (2 subgoals):\n 1. B = {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n 2. B \\<noteq> {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "define \\<sigma> where \"\\<sigma> = Inf ((\\<lambda>s. s \\<bullet> 1) ` B)\""], ["proof (state)\nthis:\n  \\<sigma> = (INF s\\<in>B. s \\<bullet> (1::'a))\n\ngoal (2 subgoals):\n 1. B = {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n 2. B \\<noteq> {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "have \\<sigma>_le: \"s \\<bullet> 1 \\<ge> \\<sigma>\" if \"s \\<in> B\" for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<le> s \\<bullet> (1::'a)", "unfolding \\<sigma>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF s\\<in>B. s \\<bullet> (1::'a)) \\<le> s \\<bullet> (1::'a)", "using that"], ["proof (prove)\nusing this:\n  s \\<in> B\n\ngoal (1 subgoal):\n 1. (INF s\\<in>B. s \\<bullet> (1::'a)) \\<le> s \\<bullet> (1::'a)", "by (intro cInf_lower bounded_inner_imp_bdd_below compact_imp_bounded B) auto"], ["proof (state)\nthis:\n  ?s \\<in> B \\<Longrightarrow> \\<sigma> \\<le> ?s \\<bullet> (1::'a)\n\ngoal (2 subgoals):\n 1. B = {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n 2. B \\<noteq> {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "have \"\\<sigma> \\<in> ((\\<lambda>s. s \\<bullet> 1) ` B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B", "unfolding \\<sigma>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF s\\<in>B. s \\<bullet> (1::'a))\n    \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B", "using B \\<open>B \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  compact B\n  ?z \\<in> B \\<Longrightarrow>\n  conv_abscissa f < ereal (?z \\<bullet> (1::'a))\n  B \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (INF s\\<in>B. s \\<bullet> (1::'a))\n    \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B", "by (intro closed_contains_Inf bounded_inner_imp_bdd_below compact_imp_bounded B \n          compact_imp_closed compact_continuous_image continuous_intros) auto"], ["proof (state)\nthis:\n  \\<sigma> \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B\n\ngoal (2 subgoals):\n 1. B = {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n 2. B \\<noteq> {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "with B(2)"], ["proof (chain)\npicking this:\n  ?z \\<in> B \\<Longrightarrow>\n  conv_abscissa f < ereal (?z \\<bullet> (1::'a))\n  \\<sigma> \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B", "have \\<sigma>_gt: \"\\<sigma> > conv_abscissa f\""], ["proof (prove)\nusing this:\n  ?z \\<in> B \\<Longrightarrow>\n  conv_abscissa f < ereal (?z \\<bullet> (1::'a))\n  \\<sigma> \\<in> (\\<lambda>s. s \\<bullet> (1::'a)) ` B\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal \\<sigma>", "by auto"], ["proof (state)\nthis:\n  conv_abscissa f < ereal \\<sigma>\n\ngoal (2 subgoals):\n 1. B = {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n 2. B \\<noteq> {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "define s where \"s = (if conv_abscissa f = -\\<infinity> then \\<sigma> - 1 else \n                         (\\<sigma> + real_of_ereal (conv_abscissa f)) / 2)\""], ["proof (state)\nthis:\n  s =\n  (if conv_abscissa f = - \\<infinity> then \\<sigma> - 1\n   else (\\<sigma> + real_of_ereal (conv_abscissa f)) / 2)\n\ngoal (2 subgoals):\n 1. B = {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n 2. B \\<noteq> {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "from \\<sigma>_gt"], ["proof (chain)\npicking this:\n  conv_abscissa f < ereal \\<sigma>", "have s: \"conv_abscissa f < s \\<and> s < \\<sigma>\""], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal \\<sigma>\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal s \\<and> s < \\<sigma>", "by (cases \"conv_abscissa f\") (auto simp: s_def)"], ["proof (state)\nthis:\n  conv_abscissa f < ereal s \\<and> s < \\<sigma>\n\ngoal (2 subgoals):\n 1. B = {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n 2. B \\<noteq> {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "using s \\<open>compact B\\<close>"], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal s \\<and> s < \\<sigma>\n  compact B\n\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "by (intro uniformly_convergent_eval_fds_aux'[of f \"of_real s\"] fds_converges)\n       (auto dest: \\<sigma>_le)"], ["proof (state)\nthis:\n  uniformly_convergent_on B\n   (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n\ngoal (1 subgoal):\n 1. B = {} \\<Longrightarrow>\n    uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "qed auto"], ["", "corollary uniformly_convergent_eval_fds':\n  assumes B: \"compact B\" \"\\<And>z. z \\<in> B \\<Longrightarrow> z \\<bullet> 1 > conv_abscissa (f :: 'a fds)\"\n  shows   \"uniformly_convergent_on B (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z)", "from uniformly_convergent_eval_fds[OF assms]"], ["proof (chain)\npicking this:\n  (\\<And>z. z \\<in> B \\<Longrightarrow> z \\<in> B) \\<Longrightarrow>\n  uniformly_convergent_on B\n   (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)", "obtain l where\n    \"uniform_limit B (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z) l at_top\""], ["proof (prove)\nusing this:\n  (\\<And>z. z \\<in> B \\<Longrightarrow> z \\<in> B) \\<Longrightarrow>\n  uniformly_convergent_on B\n   (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        uniform_limit B\n         (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z) l\n         sequentially \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: uniformly_convergent_on_def)"], ["proof (state)\nthis:\n  uniform_limit B (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n   l sequentially\n\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z)", "also"], ["proof (state)\nthis:\n  uniform_limit B (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z)\n   l sequentially\n\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z)", "have \"(\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z) = \n                (\\<lambda>N z. \\<Sum>n<Suc N. fds_nth f n / nat_power n z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z) =\n    (\\<lambda>N z. \\<Sum>n<Suc N. fds_nth f n / nat_power n z)", "by (simp only: lessThan_Suc_atMost)"], ["proof (state)\nthis:\n  (\\<lambda>N z. \\<Sum>n\\<le>N. fds_nth f n / nat_power n z) =\n  (\\<lambda>N z. \\<Sum>n<Suc N. fds_nth f n / nat_power n z)\n\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z)", "finally"], ["proof (chain)\npicking this:\n  uniform_limit B (\\<lambda>N z. \\<Sum>n<Suc N. fds_nth f n / nat_power n z)\n   l sequentially", "have \"uniform_limit B (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z) l at_top\""], ["proof (prove)\nusing this:\n  uniform_limit B (\\<lambda>N z. \\<Sum>n<Suc N. fds_nth f n / nat_power n z)\n   l sequentially\n\ngoal (1 subgoal):\n 1. uniform_limit B (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z) l\n     sequentially", "unfolding uniform_limit_iff"], ["proof (prove)\nusing this:\n  \\<forall>e>0.\n     \\<forall>\\<^sub>F n in sequentially.\n        \\<forall>x\\<in>B.\n           dist (\\<Sum>n<Suc n. fds_nth f n / nat_power n x) (l x) < e\n\ngoal (1 subgoal):\n 1. \\<forall>e>0.\n       \\<forall>\\<^sub>F n in sequentially.\n          \\<forall>x\\<in>B.\n             dist (\\<Sum>n<n. fds_nth f n / nat_power n x) (l x) < e", "by (subst (asm) eventually_sequentially_Suc)"], ["proof (state)\nthis:\n  uniform_limit B (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z) l\n   sequentially\n\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z)", "thus ?thesis"], ["proof (prove)\nusing this:\n  uniform_limit B (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z) l\n   sequentially\n\ngoal (1 subgoal):\n 1. uniformly_convergent_on B\n     (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z)", "by (auto simp: uniformly_convergent_on_def)"], ["proof (state)\nthis:\n  uniformly_convergent_on B\n   (\\<lambda>N z. \\<Sum>n<N. fds_nth f n / nat_power n z)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Derivative of a Dirichlet series\\<close>"], ["", "lemma fds_converges_deriv_aux:\n  assumes conv: \"fds_converges f (s0 :: 'a)\" and gt: \"s \\<bullet> 1 > s0 \\<bullet> 1\"\n  shows \"fds_converges (fds_deriv f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (fds_deriv f) s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_converges (fds_deriv f) s", "have \"Cauchy (\\<lambda>n. \\<Sum>k\\<le>n. (-ln (real k) *\\<^sub>R fds_nth f k) / nat_power k s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Cauchy\n     (\\<lambda>n.\n         \\<Sum>k\\<le>n. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)", "proof (rule CauchyI', goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "case (1 \\<epsilon>)"], ["proof (state)\nthis:\n  0 < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "define \\<delta> where \"\\<delta> = s \\<bullet> 1 - s0 \\<bullet> 1\""], ["proof (state)\nthis:\n  \\<delta> = s \\<bullet> (1::'a) - s0 \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "define \\<delta>' where \"\\<delta>' = \\<delta> / 2\""], ["proof (state)\nthis:\n  \\<delta>' = \\<delta> / 2\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "from gt"], ["proof (chain)\npicking this:\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)", "have \\<delta>_pos: \"\\<delta> > 0\""], ["proof (prove)\nusing this:\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. 0 < \\<delta>", "by (simp add: \\<delta>_def)"], ["proof (state)\nthis:\n  0 < \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "define A where \"A = sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0)\""], ["proof (state)\nthis:\n  A = sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "from conv"], ["proof (chain)\npicking this:\n  fds_converges f s0", "have \"convergent (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\""], ["proof (prove)\nusing this:\n  fds_converges f s0\n\ngoal (1 subgoal):\n 1. convergent (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)", "by (simp add: fds_converges_def summable_iff_convergent')"], ["proof (state)\nthis:\n  convergent (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "hence \"Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\""], ["proof (prove)\nusing this:\n  convergent (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)", "by (rule convergent_imp_Bseq)"], ["proof (state)\nthis:\n  Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "then"], ["proof (chain)\npicking this:\n  Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)", "obtain C_aux where C_aux: \"\\<And>n. norm (\\<Sum>k\\<le>n. fds_nth f k / nat_power k s0) \\<le> C_aux\""], ["proof (prove)\nusing this:\n  Bseq (\\<lambda>n. \\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. (\\<And>C_aux.\n        (\\<And>n.\n            norm (\\<Sum>k\\<le>n. fds_nth f k / nat_power k s0)\n            \\<le> C_aux) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: Bseq_def)"], ["proof (state)\nthis:\n  norm (\\<Sum>k\\<le>?n. fds_nth f k / nat_power k s0) \\<le> C_aux\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "define C where \"C = max C_aux 1\""], ["proof (state)\nthis:\n  C = max C_aux 1\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "have C_pos: \"C > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < C", "by (simp add: C_def)"], ["proof (state)\nthis:\n  0 < C\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "have C: \"norm (A x) \\<le> C\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "have \"A x = (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A x =\n    (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)", "unfolding A_def sum_upto_altdef"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>{0<..nat \\<lfloor>x\\<rfloor>}.\n       fds_nth f k / nat_power k s0) =\n    (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)", "by (intro sum.mono_neutral_left) auto"], ["proof (state)\nthis:\n  A x = (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "also"], ["proof (state)\nthis:\n  A x = (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "have \"norm \\<dots> \\<le> C_aux\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\n    \\<le> C_aux", "by (rule C_aux)"], ["proof (state)\nthis:\n  norm (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\n  \\<le> C_aux\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "also"], ["proof (state)\nthis:\n  norm (\\<Sum>k\\<le>nat \\<lfloor>x\\<rfloor>. fds_nth f k / nat_power k s0)\n  \\<le> C_aux\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "have \"\\<dots> \\<le> C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C_aux \\<le> C", "by (simp add: C_def)"], ["proof (state)\nthis:\n  C_aux \\<le> C\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "finally"], ["proof (chain)\npicking this:\n  norm (A x) \\<le> C", "show ?thesis"], ["proof (prove)\nusing this:\n  norm (A x) \\<le> C\n\ngoal (1 subgoal):\n 1. norm (A x) \\<le> C", "."], ["proof (state)\nthis:\n  norm (A x) \\<le> C\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  norm (A ?x) \\<le> C\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "define C' where \"C' = 2 * C + C * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) / \\<delta>\""], ["proof (state)\nthis:\n  C' = 2 * C + C * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) / \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "have \"(\\<lambda>m. C' * real m powr (-\\<delta>')) \\<longlonglongrightarrow> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>m. C' * real m powr - \\<delta>') \\<longlonglongrightarrow> 0", "unfolding \\<delta>'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>m. C' * real m powr - (\\<delta> / 2))\n    \\<longlonglongrightarrow> 0", "using gt \\<delta>_pos"], ["proof (prove)\nusing this:\n  s0 \\<bullet> (1::'a) < s \\<bullet> (1::'a)\n  0 < \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<lambda>m. C' * real m powr - (\\<delta> / 2))\n    \\<longlonglongrightarrow> 0", "by (intro tendsto_mult_right_zero tendsto_neg_powr filterlim_real_sequentially) simp_all"], ["proof (state)\nthis:\n  (\\<lambda>m. C' * real m powr - \\<delta>') \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "from order_tendstoD(2)[OF this \\<open>\\<epsilon> > 0\\<close>]"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in sequentially.\n     C' * real x powr - \\<delta>' < \\<epsilon>", "obtain M1 where\n      M1: \"\\<And>m. m \\<ge> M1 \\<Longrightarrow> C' * real m powr - \\<delta>' < \\<epsilon>\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in sequentially.\n     C' * real x powr - \\<delta>' < \\<epsilon>\n\ngoal (1 subgoal):\n 1. (\\<And>M1.\n        (\\<And>m.\n            M1 \\<le> m \\<Longrightarrow>\n            C' * real m powr - \\<delta>' < \\<epsilon>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: eventually_at_top_linorder)"], ["proof (state)\nthis:\n  M1 \\<le> ?m \\<Longrightarrow> C' * real ?m powr - \\<delta>' < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "have \"((\\<lambda>x. ln (real x) / real x powr \\<delta>') \\<longlongrightarrow> 0) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. ln (real x) / real x powr \\<delta>')\n    \\<longlonglongrightarrow> 0", "using \\<delta>_pos"], ["proof (prove)\nusing this:\n  0 < \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. ln (real x) / real x powr \\<delta>')\n    \\<longlonglongrightarrow> 0", "by (intro lim_ln_over_power) (simp_all add: \\<delta>'_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. ln (real x) / real x powr \\<delta>')\n  \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "from order_tendstoD(2)[OF this zero_less_one] eventually_gt_at_top[of \"1::nat\"]"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in sequentially.\n     ln (real x) / real x powr \\<delta>' < 1\n  eventually ((<) 1) sequentially", "have \"eventually (\\<lambda>n. ln (real n) \\<le> n powr \\<delta>') at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in sequentially.\n     ln (real x) / real x powr \\<delta>' < 1\n  eventually ((<) 1) sequentially\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       ln (real n) \\<le> real n powr \\<delta>'", "by eventually_elim simp_all"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     ln (real n) \\<le> real n powr \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F n in sequentially.\n     ln (real n) \\<le> real n powr \\<delta>'", "obtain M2 where M2: \"\\<And>n. n \\<ge> M2 \\<Longrightarrow> ln (real n) \\<le> n powr \\<delta>'\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially.\n     ln (real n) \\<le> real n powr \\<delta>'\n\ngoal (1 subgoal):\n 1. (\\<And>M2.\n        (\\<And>n.\n            M2 \\<le> n \\<Longrightarrow>\n            ln (real n) \\<le> real n powr \\<delta>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: eventually_at_top_linorder)"], ["proof (state)\nthis:\n  M2 \\<le> ?n \\<Longrightarrow> ln (real ?n) \\<le> real ?n powr \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "let ?f' = \"\\<lambda>k. -ln (real k) *\\<^sub>R fds_nth f k\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<exists>M.\n          \\<forall>m\\<ge>M.\n             \\<forall>n>m.\n                dist\n                 (\\<Sum>k\\<le>m.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                 (\\<Sum>k\\<le>n.\n                     - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n                < e", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>M.\n       \\<forall>m\\<ge>M.\n          \\<forall>n>m.\n             dist\n              (\\<Sum>k\\<le>m.\n                  - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n              (\\<Sum>k\\<le>n.\n                  - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n             < \\<epsilon>", "proof (intro exI[of _ \"max (max M1 M2) 1\"] allI impI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "case (1 m n)"], ["proof (state)\nthis:\n  max (max M1 M2) 1 \\<le> m\n  m < n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "hence mn: \"m \\<ge> M1\" \"m \\<ge> M2\" \"m > 0\" \"m < n\""], ["proof (prove)\nusing this:\n  max (max M1 M2) 1 \\<le> m\n  m < n\n\ngoal (1 subgoal):\n 1. (M1 \\<le> m &&& M2 \\<le> m) &&& 0 < m &&& m < n", "by simp_all"], ["proof (state)\nthis:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "define g :: \"real \\<Rightarrow> 'a\" where \"g = (\\<lambda>t. real_power t (s0 - s) * of_real (ln t))\""], ["proof (state)\nthis:\n  g = (\\<lambda>t. real_power t (s0 - s) * of_real (ln t))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "define g' :: \"real \\<Rightarrow> 'a\"            \n        where \"g' = (\\<lambda>t. real_power t (s0 - s - 1) * ((s0 - s) * of_real (ln t) + 1))\""], ["proof (state)\nthis:\n  g' =\n  (\\<lambda>t.\n      real_power t (s0 - s - (1::'a)) *\n      ((s0 - s) * of_real (ln t) + (1::'a)))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "define norm_g' :: \"real \\<Rightarrow> real\"\n        where \"norm_g' = (\\<lambda>t. t powr (-\\<delta> - 1) * (norm (s0 - s) * ln t + 1))\""], ["proof (state)\nthis:\n  norm_g' =\n  (\\<lambda>t. t powr (- \\<delta> - 1) * (norm (s0 - s) * ln t + 1))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "define norm_g :: \"real \\<Rightarrow> real\"\n        where \"norm_g = (\\<lambda>t. -(t powr -\\<delta>) * (norm (s0 - s) * (\\<delta> * ln t + 1) + \\<delta>) / \\<delta>^2)\""], ["proof (state)\nthis:\n  norm_g =\n  (\\<lambda>t.\n      - (t powr - \\<delta>) *\n      (norm (s0 - s) * (\\<delta> * ln t + 1) + \\<delta>) /\n      \\<delta>\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have g_g': \"(g has_vector_derivative g' t) (at t)\" if \"t \\<in> {real m..real n}\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. (g has_vector_derivative g' t) (at t)", "using mn that"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n  t \\<in> {real m..real n}\n\ngoal (1 subgoal):\n 1. (g has_vector_derivative g' t) (at t)", "by (auto simp: g_def g'_def real_power_diff field_simps real_power_add \n                               intro!: derivative_eq_intros)"], ["proof (state)\nthis:\n  ?t \\<in> {real m..real n} \\<Longrightarrow>\n  (g has_vector_derivative g' ?t) (at ?t)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have [continuous_intros]: \"continuous_on {real m..real n} g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on {real m..real n} g", "using mn"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. continuous_on {real m..real n} g", "by (auto simp: g_def intro!: continuous_intros)"], ["proof (state)\nthis:\n  continuous_on {real m..real n} g\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "let ?S = \"\\<Sum>k\\<in>real -` {real m<..real n}. fds_nth f k / nat_power k s0 * g k\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"dist (\\<Sum>k\\<le>m. ?f' k / nat_power k s) (\\<Sum>k\\<le>n. ?f' k / nat_power k s) =\n              norm (\\<Sum>k\\<in>{..n} - {..m}. fds_nth f k / nat_power k s * of_real (ln (real k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist\n     (\\<Sum>k\\<le>m. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n     (\\<Sum>k\\<le>n. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s) =\n    norm\n     (\\<Sum>k\\<in>{..n} - {..m}.\n        fds_nth f k / nat_power k s * of_real (ln (real k)))", "using mn"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. dist\n     (\\<Sum>k\\<le>m. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n     (\\<Sum>k\\<le>n. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s) =\n    norm\n     (\\<Sum>k\\<in>{..n} - {..m}.\n        fds_nth f k / nat_power k s * of_real (ln (real k)))", "by (subst sum_diff) \n           (simp_all add: dist_norm norm_minus_commute sum_negf scaleR_conv_of_real mult_ac)"], ["proof (state)\nthis:\n  dist (\\<Sum>k\\<le>m. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n   (\\<Sum>k\\<le>n. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s) =\n  norm\n   (\\<Sum>k\\<in>{..n} - {..m}.\n      fds_nth f k / nat_power k s * of_real (ln (real k)))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  dist (\\<Sum>k\\<le>m. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n   (\\<Sum>k\\<le>n. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s) =\n  norm\n   (\\<Sum>k\\<in>{..n} - {..m}.\n      fds_nth f k / nat_power k s * of_real (ln (real k)))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"{..n} - {..m} = real -` {real m<..real n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..n} - {..m} = real -` {real m<..real n}", "by auto"], ["proof (state)\nthis:\n  {..n} - {..m} = real -` {real m<..real n}\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  {..n} - {..m} = real -` {real m<..real n}\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"(\\<Sum>k\\<in>\\<dots>. fds_nth f k / nat_power k s * of_real (ln (real k))) = \n        (\\<Sum>k\\<in>\\<dots>. fds_nth f k / nat_power k s0 * g k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>real -` {real m<..real n}.\n       fds_nth f k / nat_power k s * of_real (ln (real k))) =\n    (\\<Sum>k\\<in>real -` {real m<..real n}.\n       fds_nth f k / nat_power k s0 * g (real k))", "using mn"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>real -` {real m<..real n}.\n       fds_nth f k / nat_power k s * of_real (ln (real k))) =\n    (\\<Sum>k\\<in>real -` {real m<..real n}.\n       fds_nth f k / nat_power k s0 * g (real k))", "unfolding g_def"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>real -` {real m<..real n}.\n       fds_nth f k / nat_power k s * of_real (ln (real k))) =\n    (\\<Sum>k\\<in>real -` {real m<..real n}.\n       fds_nth f k / nat_power k s0 *\n       (real_power (real k) (s0 - s) * of_real (ln (real k))))", "by (intro sum.cong refl) (auto simp: real_power_nat_power field_simps nat_power_diff)"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>real -` {real m<..real n}.\n     fds_nth f k / nat_power k s * of_real (ln (real k))) =\n  (\\<Sum>k\\<in>real -` {real m<..real n}.\n     fds_nth f k / nat_power k s0 * g (real k))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>real -` {real m<..real n}.\n     fds_nth f k / nat_power k s * of_real (ln (real k))) =\n  (\\<Sum>k\\<in>real -` {real m<..real n}.\n     fds_nth f k / nat_power k s0 * g (real k))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have *: \"((\\<lambda>t. A t * g' t) has_integral\n                    (A (real n) * g n - A (real m) * g m - ?S))\n                    {real m..real n}\" (is \"(?h has_integral _) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t. A t * g' t) has_integral\n     A (real n) * g (real n) - A (real m) * g (real m) -\n     (\\<Sum>k\\<in>real -` {real m<..real n}.\n        fds_nth f k / nat_power k s0 * g (real k)))\n     {real m..real n}", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) t *\n         g' t) has_integral\n     sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) (real n) *\n     g (real n) -\n     sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) (real m) *\n     g (real m) -\n     (\\<Sum>k\\<in>real -` {real m<..real n}.\n        fds_nth f k / nat_power k s0 * g (real k)))\n     {real m..real n}", "using mn"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) t *\n         g' t) has_integral\n     sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) (real n) *\n     g (real n) -\n     sum_upto (\\<lambda>k. fds_nth f k / nat_power k s0) (real m) *\n     g (real m) -\n     (\\<Sum>k\\<in>real -` {real m<..real n}.\n        fds_nth f k / nat_power k s0 * g (real k)))\n     {real m..real n}", "by (intro partial_summation_strong[of \"{}\"])\n           (auto intro!: g_g' simp: field_simps continuous_intros)"], ["proof (state)\nthis:\n  ((\\<lambda>t. A t * g' t) has_integral\n   A (real n) * g (real n) - A (real m) * g (real m) -\n   (\\<Sum>k\\<in>real -` {real m<..real n}.\n      fds_nth f k / nat_power k s0 * g (real k)))\n   {real m..real n}\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "hence \"?S = A (real n) * g n - A (real m) * g m - integral {real m..real n} ?h\""], ["proof (prove)\nusing this:\n  ((\\<lambda>t. A t * g' t) has_integral\n   A (real n) * g (real n) - A (real m) * g (real m) -\n   (\\<Sum>k\\<in>real -` {real m<..real n}.\n      fds_nth f k / nat_power k s0 * g (real k)))\n   {real m..real n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>real -` {real m<..real n}.\n       fds_nth f k / nat_power k s0 * g (real k)) =\n    A (real n) * g (real n) - A (real m) * g (real m) -\n    integral {real m..real n} (\\<lambda>t. A t * g' t)", "using mn"], ["proof (prove)\nusing this:\n  ((\\<lambda>t. A t * g' t) has_integral\n   A (real n) * g (real n) - A (real m) * g (real m) -\n   (\\<Sum>k\\<in>real -` {real m<..real n}.\n      fds_nth f k / nat_power k s0 * g (real k)))\n   {real m..real n}\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>real -` {real m<..real n}.\n       fds_nth f k / nat_power k s0 * g (real k)) =\n    A (real n) * g (real n) - A (real m) * g (real m) -\n    integral {real m..real n} (\\<lambda>t. A t * g' t)", "by (simp add: has_integral_iff field_simps)"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>real -` {real m<..real n}.\n     fds_nth f k / nat_power k s0 * g (real k)) =\n  A (real n) * g (real n) - A (real m) * g (real m) -\n  integral {real m..real n} (\\<lambda>t. A t * g' t)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>real -` {real m<..real n}.\n     fds_nth f k / nat_power k s0 * g (real k)) =\n  A (real n) * g (real n) - A (real m) * g (real m) -\n  integral {real m..real n} (\\<lambda>t. A t * g' t)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"norm \\<dots> \\<le> norm (A (real n) * g n) + norm (A (real m) * g m) + \n                             norm (integral {real m..real n} ?h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm\n     (A (real n) * g (real n) - A (real m) * g (real m) -\n      integral {real m..real n} (\\<lambda>t. A t * g' t))\n    \\<le> norm (A (real n) * g (real n)) + norm (A (real m) * g (real m)) +\n          norm (integral {real m..real n} (\\<lambda>t. A t * g' t))", "by (intro order.trans[OF norm_triangle_ineq4] add_right_mono order.refl)"], ["proof (state)\nthis:\n  norm\n   (A (real n) * g (real n) - A (real m) * g (real m) -\n    integral {real m..real n} (\\<lambda>t. A t * g' t))\n  \\<le> norm (A (real n) * g (real n)) + norm (A (real m) * g (real m)) +\n        norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  norm\n   (A (real n) * g (real n) - A (real m) * g (real m) -\n    integral {real m..real n} (\\<lambda>t. A t * g' t))\n  \\<le> norm (A (real n) * g (real n)) + norm (A (real m) * g (real m)) +\n        norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"norm (A (real n) * g n) \\<le> C * norm (g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (A (real n) * g (real n)) \\<le> C * norm (g (real n))", "unfolding norm_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (A (real n)) * norm (g (real n)) \\<le> C * norm (g (real n))", "using mn C_pos"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n  0 < C\n\ngoal (1 subgoal):\n 1. norm (A (real n)) * norm (g (real n)) \\<le> C * norm (g (real n))", "by (intro mult_mono C) auto"], ["proof (state)\nthis:\n  norm (A (real n) * g (real n)) \\<le> C * norm (g (real n))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  norm (A (real n) * g (real n)) \\<le> C * norm (g (real n))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"norm (g n) \\<le> n powr -\\<delta> * n powr \\<delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (g (real n)) \\<le> real n powr - \\<delta> * real n powr \\<delta>'", "using mn M2[of n]"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n  M2 \\<le> n \\<Longrightarrow> ln (real n) \\<le> real n powr \\<delta>'\n\ngoal (1 subgoal):\n 1. norm (g (real n)) \\<le> real n powr - \\<delta> * real n powr \\<delta>'", "by (simp add: g_def norm_real_power norm_mult \\<delta>_def inner_diff_left)"], ["proof (state)\nthis:\n  norm (g (real n)) \\<le> real n powr - \\<delta> * real n powr \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  norm (g (real n)) \\<le> real n powr - \\<delta> * real n powr \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"\\<dots> = n powr -\\<delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real n powr - \\<delta> * real n powr \\<delta>' = real n powr - \\<delta>'", "using mn"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. real n powr - \\<delta> * real n powr \\<delta>' = real n powr - \\<delta>'", "by (simp add: \\<delta>'_def powr_minus field_simps powr_add [symmetric])"], ["proof (state)\nthis:\n  real n powr - \\<delta> * real n powr \\<delta>' = real n powr - \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  real n powr - \\<delta> * real n powr \\<delta>' = real n powr - \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"norm (A (real m) * g m) \\<le> C * norm (g m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (A (real m) * g (real m)) \\<le> C * norm (g (real m))", "unfolding norm_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (A (real m)) * norm (g (real m)) \\<le> C * norm (g (real m))", "using mn C_pos"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n  0 < C\n\ngoal (1 subgoal):\n 1. norm (A (real m)) * norm (g (real m)) \\<le> C * norm (g (real m))", "by (intro mult_mono C) auto"], ["proof (state)\nthis:\n  norm (A (real m) * g (real m)) \\<le> C * norm (g (real m))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  norm (A (real m) * g (real m)) \\<le> C * norm (g (real m))\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"norm (g m) \\<le> m powr -\\<delta> * m powr \\<delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (g (real m)) \\<le> real m powr - \\<delta> * real m powr \\<delta>'", "using mn M2[of m]"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n  M2 \\<le> m \\<Longrightarrow> ln (real m) \\<le> real m powr \\<delta>'\n\ngoal (1 subgoal):\n 1. norm (g (real m)) \\<le> real m powr - \\<delta> * real m powr \\<delta>'", "by (simp add: g_def norm_real_power norm_mult \\<delta>_def inner_diff_left)"], ["proof (state)\nthis:\n  norm (g (real m)) \\<le> real m powr - \\<delta> * real m powr \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  norm (g (real m)) \\<le> real m powr - \\<delta> * real m powr \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"\\<dots> = m powr -\\<delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real m powr - \\<delta> * real m powr \\<delta>' = real m powr - \\<delta>'", "using mn"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. real m powr - \\<delta> * real m powr \\<delta>' = real m powr - \\<delta>'", "by (simp add: \\<delta>'_def powr_minus field_simps powr_add [symmetric])"], ["proof (state)\nthis:\n  real m powr - \\<delta> * real m powr \\<delta>' = real m powr - \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  real m powr - \\<delta> * real m powr \\<delta>' = real m powr - \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"C * real n powr - \\<delta>' \\<le> C * real m powr - \\<delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C * real n powr - \\<delta>' \\<le> C * real m powr - \\<delta>'", "using \\<delta>_pos mn C_pos"], ["proof (prove)\nusing this:\n  0 < \\<delta>\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n  0 < C\n\ngoal (1 subgoal):\n 1. C * real n powr - \\<delta>' \\<le> C * real m powr - \\<delta>'", "by (intro mult_left_mono powr_mono2') (simp_all add: \\<delta>'_def)"], ["proof (state)\nthis:\n  C * real n powr - \\<delta>' \\<le> C * real m powr - \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  C * real n powr - \\<delta>' \\<le> C * real m powr - \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"\\<dots> + \\<dots> = 2 * \\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C * real m powr - \\<delta>' + C * real m powr - \\<delta>' =\n    2 * (C * real m powr - \\<delta>')", "by simp"], ["proof (state)\nthis:\n  C * real m powr - \\<delta>' + C * real m powr - \\<delta>' =\n  2 * (C * real m powr - \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  C * real m powr - \\<delta>' + C * real m powr - \\<delta>' =\n  2 * (C * real m powr - \\<delta>')\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"norm (integral {m..n} ?h) \\<le> integral {m..n} (\\<lambda>t. C * norm_g' t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n    \\<le> integral {real m..real n} (\\<lambda>t. C * norm_g' t)", "proof (intro integral_norm_bound_integral ballI, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>t. A t * g' t) integrable_on {real m..real n}\n 2. (\\<lambda>t. C * norm_g' t) integrable_on {real m..real n}\n 3. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * g' x) \\<le> C * norm_g' x", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. (\\<lambda>t. A t * g' t) integrable_on {real m..real n}\n 2. (\\<lambda>t. C * norm_g' t) integrable_on {real m..real n}\n 3. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * g' x) \\<le> C * norm_g' x", "with *"], ["proof (chain)\npicking this:\n  ((\\<lambda>t. A t * g' t) has_integral\n   A (real n) * g (real n) - A (real m) * g (real m) -\n   (\\<Sum>k\\<in>real -` {real m<..real n}.\n      fds_nth f k / nat_power k s0 * g (real k)))\n   {real m..real n}", "show ?case"], ["proof (prove)\nusing this:\n  ((\\<lambda>t. A t * g' t) has_integral\n   A (real n) * g (real n) - A (real m) * g (real m) -\n   (\\<Sum>k\\<in>real -` {real m<..real n}.\n      fds_nth f k / nat_power k s0 * g (real k)))\n   {real m..real n}\n\ngoal (1 subgoal):\n 1. (\\<lambda>t. A t * g' t) integrable_on {real m..real n}", "by (simp add: has_integral_iff)"], ["proof (state)\nthis:\n  (\\<lambda>t. A t * g' t) integrable_on {real m..real n}\n\ngoal (2 subgoals):\n 1. (\\<lambda>t. C * norm_g' t) integrable_on {real m..real n}\n 2. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * g' x) \\<le> C * norm_g' x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>t. C * norm_g' t) integrable_on {real m..real n}\n 2. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * g' x) \\<le> C * norm_g' x", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (\\<lambda>t. C * norm_g' t) integrable_on {real m..real n}\n 2. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * g' x) \\<le> C * norm_g' x", "from mn"], ["proof (chain)\npicking this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n", "show ?case"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. (\\<lambda>t. C * norm_g' t) integrable_on {real m..real n}", "by (auto intro!: integrable_continuous_real continuous_intros simp: norm_g'_def)"], ["proof (state)\nthis:\n  (\\<lambda>t. C * norm_g' t) integrable_on {real m..real n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * g' x) \\<le> C * norm_g' x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * g' x) \\<le> C * norm_g' x", "case (3 t)"], ["proof (state)\nthis:\n  t \\<in> {real m..real n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * g' x) \\<le> C * norm_g' x", "have \"norm (g' t) \\<le> norm_g' t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (g' t) \\<le> norm_g' t", "unfolding g'_def norm_g'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm\n     (real_power t (s0 - s - (1::'a)) *\n      ((s0 - s) * of_real (ln t) + (1::'a)))\n    \\<le> t powr (- \\<delta> - 1) * (norm (s0 - s) * ln t + 1)", "using 3 mn"], ["proof (prove)\nusing this:\n  t \\<in> {real m..real n}\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. norm\n     (real_power t (s0 - s - (1::'a)) *\n      ((s0 - s) * of_real (ln t) + (1::'a)))\n    \\<le> t powr (- \\<delta> - 1) * (norm (s0 - s) * ln t + 1)", "unfolding norm_mult"], ["proof (prove)\nusing this:\n  t \\<in> {real m..real n}\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. norm (real_power t (s0 - s - (1::'a))) *\n    norm ((s0 - s) * of_real (ln t) + (1::'a))\n    \\<le> t powr (- \\<delta> - 1) * (norm (s0 - s) * ln t + 1)", "by (intro mult_mono order.trans[OF norm_triangle_ineq])\n             (auto simp: norm_real_power inner_diff_left dot_square_norm norm_mult \\<delta>_def\n                   intro!: mult_left_mono)"], ["proof (state)\nthis:\n  norm (g' t) \\<le> norm_g' t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {real m..real n} \\<Longrightarrow>\n       norm (A x * g' x) \\<le> C * norm_g' x", "thus ?case"], ["proof (prove)\nusing this:\n  norm (g' t) \\<le> norm_g' t\n\ngoal (1 subgoal):\n 1. norm (A t * g' t) \\<le> C * norm_g' t", "unfolding norm_mult"], ["proof (prove)\nusing this:\n  norm (g' t) \\<le> norm_g' t\n\ngoal (1 subgoal):\n 1. norm (A t) * norm (g' t) \\<le> C * norm_g' t", "using C_pos mn"], ["proof (prove)\nusing this:\n  norm (g' t) \\<le> norm_g' t\n  0 < C\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. norm (A t) * norm (g' t) \\<le> C * norm_g' t", "by (intro mult_mono C) simp_all"], ["proof (state)\nthis:\n  norm (A t * g' t) \\<le> C * norm_g' t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n  \\<le> integral {real m..real n} (\\<lambda>t. C * norm_g' t)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n  \\<le> integral {real m..real n} (\\<lambda>t. C * norm_g' t)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"\\<dots> = C * integral {m..n} norm_g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral {real m..real n} (\\<lambda>t. C * norm_g' t) =\n    C * integral {real m..real n} norm_g'", "unfolding norm_g'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral {real m..real n}\n     (\\<lambda>t.\n         C * (t powr (- \\<delta> - 1) * (norm (s0 - s) * ln t + 1))) =\n    C *\n    integral {real m..real n}\n     (\\<lambda>t. t powr (- \\<delta> - 1) * (norm (s0 - s) * ln t + 1))", "by (simp add: norm_g'_def \\<delta>_def inner_diff_left)"], ["proof (state)\nthis:\n  integral {real m..real n} (\\<lambda>t. C * norm_g' t) =\n  C * integral {real m..real n} norm_g'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  integral {real m..real n} (\\<lambda>t. C * norm_g' t) =\n  C * integral {real m..real n} norm_g'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "{"], ["proof (state)\nthis:\n  integral {real m..real n} (\\<lambda>t. C * norm_g' t) =\n  C * integral {real m..real n} norm_g'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"(norm_g' has_integral (norm_g n - norm_g m)) {m..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (norm_g' has_integral norm_g (real n) - norm_g (real m))\n     {real m..real n}", "unfolding norm_g'_def norm_g_def power2_eq_square"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         t powr (- \\<delta> - 1) * (norm (s0 - s) * ln t + 1)) has_integral\n     - (real n powr - \\<delta>) *\n     (norm (s0 - s) * (\\<delta> * ln (real n) + 1) + \\<delta>) /\n     (\\<delta> * \\<delta>) -\n     - (real m powr - \\<delta>) *\n     (norm (s0 - s) * (\\<delta> * ln (real m) + 1) + \\<delta>) /\n     (\\<delta> * \\<delta>))\n     {real m..real n}", "using mn \\<delta>_pos"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n  0 < \\<delta>\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         t powr (- \\<delta> - 1) * (norm (s0 - s) * ln t + 1)) has_integral\n     - (real n powr - \\<delta>) *\n     (norm (s0 - s) * (\\<delta> * ln (real n) + 1) + \\<delta>) /\n     (\\<delta> * \\<delta>) -\n     - (real m powr - \\<delta>) *\n     (norm (s0 - s) * (\\<delta> * ln (real m) + 1) + \\<delta>) /\n     (\\<delta> * \\<delta>))\n     {real m..real n}", "by (intro fundamental_theorem_of_calculus)\n             (auto simp: has_field_derivative_iff_has_vector_derivative [symmetric] \n                 field_simps powr_diff intro!: derivative_eq_intros)"], ["proof (state)\nthis:\n  (norm_g' has_integral norm_g (real n) - norm_g (real m)) {real m..real n}\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "hence \"integral {m..n} norm_g' = norm_g n - norm_g m\""], ["proof (prove)\nusing this:\n  (norm_g' has_integral norm_g (real n) - norm_g (real m)) {real m..real n}\n\ngoal (1 subgoal):\n 1. integral {real m..real n} norm_g' = norm_g (real n) - norm_g (real m)", "by (simp add: has_integral_iff)"], ["proof (state)\nthis:\n  integral {real m..real n} norm_g' = norm_g (real n) - norm_g (real m)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  integral {real m..real n} norm_g' = norm_g (real n) - norm_g (real m)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"norm_g n \\<le> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm_g (real n) \\<le> 0", "unfolding norm_g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. - (real n powr - \\<delta>) *\n    (norm (s0 - s) * (\\<delta> * ln (real n) + 1) + \\<delta>) /\n    \\<delta>\\<^sup>2\n    \\<le> 0", "using \\<delta>_pos mn"], ["proof (prove)\nusing this:\n  0 < \\<delta>\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. - (real n powr - \\<delta>) *\n    (norm (s0 - s) * (\\<delta> * ln (real n) + 1) + \\<delta>) /\n    \\<delta>\\<^sup>2\n    \\<le> 0", "by (intro divide_nonpos_pos mult_nonpos_nonneg add_nonneg_nonneg mult_nonneg_nonneg)\n             simp_all"], ["proof (state)\nthis:\n  norm_g (real n) \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "hence \"norm_g n - norm_g m \\<le> -norm_g m\""], ["proof (prove)\nusing this:\n  norm_g (real n) \\<le> 0\n\ngoal (1 subgoal):\n 1. norm_g (real n) - norm_g (real m) \\<le> - norm_g (real m)", "by simp"], ["proof (state)\nthis:\n  norm_g (real n) - norm_g (real m) \\<le> - norm_g (real m)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  norm_g (real n) - norm_g (real m) \\<le> - norm_g (real m)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"\\<dots> = real m powr -\\<delta> * ln (real m) * (norm (s0 - s)) / \\<delta> +\n                        real m powr -\\<delta> * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - norm_g (real m) =\n    real m powr - \\<delta> * ln (real m) * norm (s0 - s) / \\<delta> +\n    real m powr - \\<delta> * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)", "using \\<delta>_pos"], ["proof (prove)\nusing this:\n  0 < \\<delta>\n\ngoal (1 subgoal):\n 1. - norm_g (real m) =\n    real m powr - \\<delta> * ln (real m) * norm (s0 - s) / \\<delta> +\n    real m powr - \\<delta> * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)", "by (simp add: field_simps norm_g_def power2_eq_square)"], ["proof (state)\nthis:\n  - norm_g (real m) =\n  real m powr - \\<delta> * ln (real m) * norm (s0 - s) / \\<delta> +\n  real m powr - \\<delta> * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  - norm_g (real m) =\n  real m powr - \\<delta> * ln (real m) * norm (s0 - s) / \\<delta> +\n  real m powr - \\<delta> * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "{"], ["proof (state)\nthis:\n  - norm_g (real m) =\n  real m powr - \\<delta> * ln (real m) * norm (s0 - s) / \\<delta> +\n  real m powr - \\<delta> * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"ln (real m) \\<le> real m powr \\<delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ln (real m) \\<le> real m powr \\<delta>'", "using M2[of m] mn"], ["proof (prove)\nusing this:\n  M2 \\<le> m \\<Longrightarrow> ln (real m) \\<le> real m powr \\<delta>'\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. ln (real m) \\<le> real m powr \\<delta>'", "by simp"], ["proof (state)\nthis:\n  ln (real m) \\<le> real m powr \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  ln (real m) \\<le> real m powr \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"real m powr -\\<delta> * \\<dots> = real m powr -\\<delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real m powr - \\<delta> * real m powr \\<delta>' = real m powr - \\<delta>'", "by (simp add: powr_add [symmetric] \\<delta>'_def)"], ["proof (state)\nthis:\n  real m powr - \\<delta> * real m powr \\<delta>' = real m powr - \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real m powr - \\<delta> * x\n      \\<le> real m powr - \\<delta> * y) \\<Longrightarrow>\n  real m powr - \\<delta> * ln (real m) \\<le> real m powr - \\<delta>'", "have \"real m powr -\\<delta> * ln (real m) * (norm (s0 - s)) / \\<delta> \\<le>\n                          \\<dots> * (norm (s0 - s)) / \\<delta>\""], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real m powr - \\<delta> * x\n      \\<le> real m powr - \\<delta> * y) \\<Longrightarrow>\n  real m powr - \\<delta> * ln (real m) \\<le> real m powr - \\<delta>'\n\ngoal (1 subgoal):\n 1. real m powr - \\<delta> * ln (real m) * norm (s0 - s) / \\<delta>\n    \\<le> real m powr - \\<delta>' * norm (s0 - s) / \\<delta>", "using \\<delta>_pos"], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real m powr - \\<delta> * x\n      \\<le> real m powr - \\<delta> * y) \\<Longrightarrow>\n  real m powr - \\<delta> * ln (real m) \\<le> real m powr - \\<delta>'\n  0 < \\<delta>\n\ngoal (1 subgoal):\n 1. real m powr - \\<delta> * ln (real m) * norm (s0 - s) / \\<delta>\n    \\<le> real m powr - \\<delta>' * norm (s0 - s) / \\<delta>", "by (intro divide_right_mono mult_right_mono) (simp_all add: mult_left_mono)"], ["proof (state)\nthis:\n  real m powr - \\<delta> * ln (real m) * norm (s0 - s) / \\<delta>\n  \\<le> real m powr - \\<delta>' * norm (s0 - s) / \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "}"], ["proof (state)\nthis:\n  real m powr - \\<delta> * ln (real m) * norm (s0 - s) / \\<delta>\n  \\<le> real m powr - \\<delta>' * norm (s0 - s) / \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  real m powr - \\<delta> * ln (real m) * norm (s0 - s) / \\<delta>\n  \\<le> real m powr - \\<delta>' * norm (s0 - s) / \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"real m powr -\\<delta> * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>) \\<le>\n                     real m powr -\\<delta>' * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real m powr - \\<delta> * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\n    \\<le> real m powr - \\<delta>' *\n          ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)", "using mn \\<delta>_pos"], ["proof (prove)\nusing this:\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n  0 < \\<delta>\n\ngoal (1 subgoal):\n 1. real m powr - \\<delta> * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\n    \\<le> real m powr - \\<delta>' *\n          ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)", "by (intro mult_right_mono powr_mono) (simp_all add: \\<delta>'_def)"], ["proof (state)\nthis:\n  real m powr - \\<delta> * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\n  \\<le> real m powr - \\<delta>' *\n        ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  real m powr - \\<delta> * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\n  \\<le> real m powr - \\<delta>' *\n        ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"real m powr - \\<delta>' * norm (s0 - s) / \\<delta> + \\<dots> =\n                     real m powr -\\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) / \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real m powr - \\<delta>' * norm (s0 - s) / \\<delta> +\n    real m powr - \\<delta>' * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>) =\n    real m powr - \\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n    \\<delta>", "using \\<delta>_pos"], ["proof (prove)\nusing this:\n  0 < \\<delta>\n\ngoal (1 subgoal):\n 1. real m powr - \\<delta>' * norm (s0 - s) / \\<delta> +\n    real m powr - \\<delta>' * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>) =\n    real m powr - \\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n    \\<delta>", "by (simp add: field_simps power2_eq_square)"], ["proof (state)\nthis:\n  real m powr - \\<delta>' * norm (s0 - s) / \\<delta> +\n  real m powr - \\<delta>' * ((norm (s0 - s) / \\<delta> + 1) / \\<delta>) =\n  real m powr - \\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n  \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y.\n              x \\<le> y \\<Longrightarrow>\n              x +\n              real m powr - \\<delta> *\n              ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\n              \\<le> y +\n                    real m powr - \\<delta> *\n                    ((norm (s0 - s) / \\<delta> + 1) / \\<delta>);\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real m powr - \\<delta>' * norm (s0 - s) / \\<delta> + x\n      \\<le> real m powr - \\<delta>' * norm (s0 - s) / \\<delta> + y\\<rbrakk>\n  \\<Longrightarrow> integral {real m..real n} norm_g'\n                    \\<le> real m powr - \\<delta>' *\n                          (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n                          \\<delta>", "have \"integral {real m..real n} norm_g' \\<le>\n                        real m powr - \\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) / \\<delta>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x \\<le> y \\<Longrightarrow>\n              x +\n              real m powr - \\<delta> *\n              ((norm (s0 - s) / \\<delta> + 1) / \\<delta>)\n              \\<le> y +\n                    real m powr - \\<delta> *\n                    ((norm (s0 - s) / \\<delta> + 1) / \\<delta>);\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real m powr - \\<delta>' * norm (s0 - s) / \\<delta> + x\n      \\<le> real m powr - \\<delta>' * norm (s0 - s) / \\<delta> + y\\<rbrakk>\n  \\<Longrightarrow> integral {real m..real n} norm_g'\n                    \\<le> real m powr - \\<delta>' *\n                          (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n                          \\<delta>\n\ngoal (1 subgoal):\n 1. integral {real m..real n} norm_g'\n    \\<le> real m powr - \\<delta>' *\n          (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n          \\<delta>", "by - simp_all"], ["proof (state)\nthis:\n  integral {real m..real n} norm_g'\n  \\<le> real m powr - \\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n        \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "}"], ["proof (state)\nthis:\n  integral {real m..real n} norm_g'\n  \\<le> real m powr - \\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n        \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  integral {real m..real n} norm_g'\n  \\<le> real m powr - \\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n        \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"2 * (C * m powr - \\<delta>') + C * (m powr - \\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) / \\<delta>) =\n                   C' * m powr -\\<delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * (C * real m powr - \\<delta>') +\n    C *\n    (real m powr - \\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n     \\<delta>) =\n    C' * real m powr - \\<delta>'", "by (simp add: algebra_simps C'_def)"], ["proof (state)\nthis:\n  2 * (C * real m powr - \\<delta>') +\n  C *\n  (real m powr - \\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n   \\<delta>) =\n  C' * real m powr - \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "also"], ["proof (state)\nthis:\n  2 * (C * real m powr - \\<delta>') +\n  C *\n  (real m powr - \\<delta>' * (norm (s0 - s) * (1 + 1 / \\<delta>) + 1) /\n   \\<delta>) =\n  C' * real m powr - \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "have \"\\<dots> < \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C' * real m powr - \\<delta>' < \\<epsilon>", "using M1[of m] mn"], ["proof (prove)\nusing this:\n  M1 \\<le> m \\<Longrightarrow> C' * real m powr - \\<delta>' < \\<epsilon>\n  M1 \\<le> m\n  M2 \\<le> m\n  0 < m\n  m < n\n\ngoal (1 subgoal):\n 1. C' * real m powr - \\<delta>' < \\<epsilon>", "by simp"], ["proof (state)\nthis:\n  C' * real m powr - \\<delta>' < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>max (max M1 M2) 1 \\<le> m; m < n\\<rbrakk>\n       \\<Longrightarrow> dist\n                          (\\<Sum>k\\<le>m.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                          (\\<Sum>k\\<le>n.\n                              - ln (real k) *\\<^sub>R fds_nth f k /\n                              nat_power k s)\n                         < \\<epsilon>", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x y.\n              x \\<le> y \\<Longrightarrow>\n              x + norm (A (real m) * g (real m)) +\n              norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n              \\<le> y + norm (A (real m) * g (real m)) +\n                    norm\n                     (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * x + norm (A (real m) * g (real m)) +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> C * y + norm (A (real m) * g (real m)) +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * real n powr - \\<delta>' + x +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> C * real n powr - \\<delta>' + y +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * real n powr - \\<delta>' + C * x +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> C * real n powr - \\<delta>' + C * y +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x + C * real m powr - \\<delta>' +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> y + C * real m powr - \\<delta>' +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      2 * (C * real m powr - \\<delta>') + x\n      \\<le> 2 * (C * real m powr - \\<delta>') + y;\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      2 * (C * real m powr - \\<delta>') + C * x\n      \\<le> 2 * (C * real m powr - \\<delta>') + C * y\\<rbrakk>\n  \\<Longrightarrow> dist\n                     (\\<Sum>k\\<le>m.\n                         - ln (real k) *\\<^sub>R fds_nth f k /\n                         nat_power k s)\n                     (\\<Sum>k\\<le>n.\n                         - ln (real k) *\\<^sub>R fds_nth f k /\n                         nat_power k s)\n                    < \\<epsilon>", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x \\<le> y \\<Longrightarrow>\n              x + norm (A (real m) * g (real m)) +\n              norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n              \\<le> y + norm (A (real m) * g (real m)) +\n                    norm\n                     (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * x + norm (A (real m) * g (real m)) +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> C * y + norm (A (real m) * g (real m)) +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * real n powr - \\<delta>' + x +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> C * real n powr - \\<delta>' + y +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * real n powr - \\<delta>' + C * x +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> C * real n powr - \\<delta>' + C * y +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x + C * real m powr - \\<delta>' +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> y + C * real m powr - \\<delta>' +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      2 * (C * real m powr - \\<delta>') + x\n      \\<le> 2 * (C * real m powr - \\<delta>') + y;\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      2 * (C * real m powr - \\<delta>') + C * x\n      \\<le> 2 * (C * real m powr - \\<delta>') + C * y\\<rbrakk>\n  \\<Longrightarrow> dist\n                     (\\<Sum>k\\<le>m.\n                         - ln (real k) *\\<^sub>R fds_nth f k /\n                         nat_power k s)\n                     (\\<Sum>k\\<le>n.\n                         - ln (real k) *\\<^sub>R fds_nth f k /\n                         nat_power k s)\n                    < \\<epsilon>\n\ngoal (1 subgoal):\n 1. dist\n     (\\<Sum>k\\<le>m. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n     (\\<Sum>k\\<le>n. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n    < \\<epsilon>", "using C_pos"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x y.\n              x \\<le> y \\<Longrightarrow>\n              x + norm (A (real m) * g (real m)) +\n              norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n              \\<le> y + norm (A (real m) * g (real m)) +\n                    norm\n                     (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * x + norm (A (real m) * g (real m)) +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> C * y + norm (A (real m) * g (real m)) +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * real n powr - \\<delta>' + x +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> C * real n powr - \\<delta>' + y +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      C * real n powr - \\<delta>' + C * x +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> C * real n powr - \\<delta>' + C * y +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x + C * real m powr - \\<delta>' +\n      norm (integral {real m..real n} (\\<lambda>t. A t * g' t))\n      \\<le> y + C * real m powr - \\<delta>' +\n            norm (integral {real m..real n} (\\<lambda>t. A t * g' t));\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      2 * (C * real m powr - \\<delta>') + x\n      \\<le> 2 * (C * real m powr - \\<delta>') + y;\n   \\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      2 * (C * real m powr - \\<delta>') + C * x\n      \\<le> 2 * (C * real m powr - \\<delta>') + C * y\\<rbrakk>\n  \\<Longrightarrow> dist\n                     (\\<Sum>k\\<le>m.\n                         - ln (real k) *\\<^sub>R fds_nth f k /\n                         nat_power k s)\n                     (\\<Sum>k\\<le>n.\n                         - ln (real k) *\\<^sub>R fds_nth f k /\n                         nat_power k s)\n                    < \\<epsilon>\n  0 < C\n\ngoal (1 subgoal):\n 1. dist\n     (\\<Sum>k\\<le>m. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n     (\\<Sum>k\\<le>n. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n    < \\<epsilon>", "by - simp_all"], ["proof (state)\nthis:\n  dist (\\<Sum>k\\<le>m. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n   (\\<Sum>k\\<le>n. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n  < \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>M.\n     \\<forall>m\\<ge>M.\n        \\<forall>n>m.\n           dist\n            (\\<Sum>k\\<le>m.\n                - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n            (\\<Sum>k\\<le>n.\n                - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n           < \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Cauchy\n   (\\<lambda>n.\n       \\<Sum>k\\<le>n. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n\ngoal (1 subgoal):\n 1. fds_converges (fds_deriv f) s", "from Cauchy_convergent[OF this]"], ["proof (chain)\npicking this:\n  convergent\n   (\\<lambda>n.\n       \\<Sum>k\\<le>n. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)", "show ?thesis"], ["proof (prove)\nusing this:\n  convergent\n   (\\<lambda>n.\n       \\<Sum>k\\<le>n. - ln (real k) *\\<^sub>R fds_nth f k / nat_power k s)\n\ngoal (1 subgoal):\n 1. fds_converges (fds_deriv f) s", "by (simp add: summable_iff_convergent' fds_converges_def fds_nth_deriv)"], ["proof (state)\nthis:\n  fds_converges (fds_deriv f) s\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem\n  assumes \"s \\<bullet> 1 > conv_abscissa (f :: 'a fds)\"\n  shows   fds_converges_deriv: \"fds_converges (fds_deriv f) s\"\n    and   has_field_derivative_eval_fds [derivative_intros]:\n            \"(eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s within A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (fds_deriv f) s &&&\n    (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_converges (fds_deriv f) s\n 2. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "define s1 :: real where\n    \"s1 = (if conv_abscissa f = -\\<infinity> then s \\<bullet> 1 - 2 else\n             (s \\<bullet> 1 * 1 / 3 + real_of_ereal (conv_abscissa f) * 2 / 3))\""], ["proof (state)\nthis:\n  s1 =\n  (if conv_abscissa f = - \\<infinity> then s \\<bullet> (1::'a) - 2\n   else s \\<bullet> (1::'a) * 1 / 3 +\n        real_of_ereal (conv_abscissa f) * 2 / 3)\n\ngoal (2 subgoals):\n 1. fds_converges (fds_deriv f) s\n 2. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "define s2 :: real where\n    \"s2 = (if conv_abscissa f = -\\<infinity> then s \\<bullet> 1 - 1 else\n             (s \\<bullet> 1 * 2 / 3 + real_of_ereal (conv_abscissa f) * 1 / 3))\""], ["proof (state)\nthis:\n  s2 =\n  (if conv_abscissa f = - \\<infinity> then s \\<bullet> (1::'a) - 1\n   else s \\<bullet> (1::'a) * 2 / 3 +\n        real_of_ereal (conv_abscissa f) * 1 / 3)\n\ngoal (2 subgoals):\n 1. fds_converges (fds_deriv f) s\n 2. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "from assms"], ["proof (chain)\npicking this:\n  conv_abscissa f < ereal (s \\<bullet> (1::'a))", "have s: \"conv_abscissa f < s1 \\<and> s1 < s2 \\<and> s2 < s \\<bullet> 1\""], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal s1 \\<and>\n    s1 < s2 \\<and> s2 < s \\<bullet> (1::'a)", "by (cases \"conv_abscissa f\") (auto simp: s1_def s2_def field_simps)"], ["proof (state)\nthis:\n  conv_abscissa f < ereal s1 \\<and> s1 < s2 \\<and> s2 < s \\<bullet> (1::'a)\n\ngoal (2 subgoals):\n 1. fds_converges (fds_deriv f) s\n 2. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "from s"], ["proof (chain)\npicking this:\n  conv_abscissa f < ereal s1 \\<and> s1 < s2 \\<and> s2 < s \\<bullet> (1::'a)", "have *: \"fds_converges f (of_real s1)\""], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal s1 \\<and> s1 < s2 \\<and> s2 < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. fds_converges f (of_real s1)", "by (intro fds_converges) simp_all"], ["proof (state)\nthis:\n  fds_converges f (of_real s1)\n\ngoal (2 subgoals):\n 1. fds_converges (fds_deriv f) s\n 2. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "thus conv': \"fds_converges (fds_deriv f) s\""], ["proof (prove)\nusing this:\n  fds_converges f (of_real s1)\n\ngoal (1 subgoal):\n 1. fds_converges (fds_deriv f) s", "by (rule fds_converges_deriv_aux) (insert s, simp_all)"], ["proof (state)\nthis:\n  fds_converges (fds_deriv f) s\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "from *"], ["proof (chain)\npicking this:\n  fds_converges f (of_real s1)", "have conv: \"fds_converges (fds_deriv f) (of_real s2)\""], ["proof (prove)\nusing this:\n  fds_converges f (of_real s1)\n\ngoal (1 subgoal):\n 1. fds_converges (fds_deriv f) (of_real s2)", "by (rule fds_converges_deriv_aux) (insert s, simp_all)"], ["proof (state)\nthis:\n  fds_converges (fds_deriv f) (of_real s2)\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "define \\<delta> :: real where \"\\<delta> = (s \\<bullet> 1 - s2) / 2\""], ["proof (state)\nthis:\n  \\<delta> = (s \\<bullet> (1::'a) - s2) / 2\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "from s"], ["proof (chain)\npicking this:\n  conv_abscissa f < ereal s1 \\<and> s1 < s2 \\<and> s2 < s \\<bullet> (1::'a)", "have \\<delta>_pos: \"\\<delta> > 0\""], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal s1 \\<and> s1 < s2 \\<and> s2 < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. 0 < \\<delta>", "by (simp add: \\<delta>_def)"], ["proof (state)\nthis:\n  0 < \\<delta>\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "have \"uniformly_convergent_on (cball s \\<delta>) \n          (\\<lambda>n s. \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniformly_convergent_on (cball s \\<delta>)\n     (\\<lambda>n s. \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s)", "proof (intro uniformly_convergent_eval_fds_aux'[OF conv])"], ["proof (state)\ngoal (2 subgoals):\n 1. compact (cball s \\<delta>)\n 2. \\<And>sa.\n       sa \\<in> cball s \\<delta> \\<Longrightarrow>\n       of_real s2 \\<bullet> (1::'a) < sa \\<bullet> (1::'a)", "fix s'' :: 'a"], ["proof (state)\ngoal (2 subgoals):\n 1. compact (cball s \\<delta>)\n 2. \\<And>sa.\n       sa \\<in> cball s \\<delta> \\<Longrightarrow>\n       of_real s2 \\<bullet> (1::'a) < sa \\<bullet> (1::'a)", "assume s'': \"s'' \\<in> cball s \\<delta>\""], ["proof (state)\nthis:\n  s'' \\<in> cball s \\<delta>\n\ngoal (2 subgoals):\n 1. compact (cball s \\<delta>)\n 2. \\<And>sa.\n       sa \\<in> cball s \\<delta> \\<Longrightarrow>\n       of_real s2 \\<bullet> (1::'a) < sa \\<bullet> (1::'a)", "have \"dist (s \\<bullet> 1) (s'' \\<bullet> 1) \\<le> dist s s''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist (s \\<bullet> (1::'a)) (s'' \\<bullet> (1::'a)) \\<le> dist s s''", "by (intro Euclidean_dist_upper) (simp_all add: one_in_Basis)"], ["proof (state)\nthis:\n  dist (s \\<bullet> (1::'a)) (s'' \\<bullet> (1::'a)) \\<le> dist s s''\n\ngoal (2 subgoals):\n 1. compact (cball s \\<delta>)\n 2. \\<And>sa.\n       sa \\<in> cball s \\<delta> \\<Longrightarrow>\n       of_real s2 \\<bullet> (1::'a) < sa \\<bullet> (1::'a)", "also"], ["proof (state)\nthis:\n  dist (s \\<bullet> (1::'a)) (s'' \\<bullet> (1::'a)) \\<le> dist s s''\n\ngoal (2 subgoals):\n 1. compact (cball s \\<delta>)\n 2. \\<And>sa.\n       sa \\<in> cball s \\<delta> \\<Longrightarrow>\n       of_real s2 \\<bullet> (1::'a) < sa \\<bullet> (1::'a)", "from s''"], ["proof (chain)\npicking this:\n  s'' \\<in> cball s \\<delta>", "have \"\\<dots> \\<le> \\<delta>\""], ["proof (prove)\nusing this:\n  s'' \\<in> cball s \\<delta>\n\ngoal (1 subgoal):\n 1. dist s s'' \\<le> \\<delta>", "by simp"], ["proof (state)\nthis:\n  dist s s'' \\<le> \\<delta>\n\ngoal (2 subgoals):\n 1. compact (cball s \\<delta>)\n 2. \\<And>sa.\n       sa \\<in> cball s \\<delta> \\<Longrightarrow>\n       of_real s2 \\<bullet> (1::'a) < sa \\<bullet> (1::'a)", "finally"], ["proof (chain)\npicking this:\n  dist (s \\<bullet> (1::'a)) (s'' \\<bullet> (1::'a)) \\<le> \\<delta>", "show \"s'' \\<bullet> 1 > (of_real s2 :: 'a) \\<bullet> 1\""], ["proof (prove)\nusing this:\n  dist (s \\<bullet> (1::'a)) (s'' \\<bullet> (1::'a)) \\<le> \\<delta>\n\ngoal (1 subgoal):\n 1. of_real s2 \\<bullet> (1::'a) < s'' \\<bullet> (1::'a)", "using s"], ["proof (prove)\nusing this:\n  dist (s \\<bullet> (1::'a)) (s'' \\<bullet> (1::'a)) \\<le> \\<delta>\n  conv_abscissa f < ereal s1 \\<and> s1 < s2 \\<and> s2 < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. of_real s2 \\<bullet> (1::'a) < s'' \\<bullet> (1::'a)", "by (auto simp: \\<delta>_def dist_real_def abs_if split: if_splits)"], ["proof (state)\nthis:\n  of_real s2 \\<bullet> (1::'a) < s'' \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. compact (cball s \\<delta>)", "qed (insert \\<delta>_pos, auto)"], ["proof (state)\nthis:\n  uniformly_convergent_on (cball s \\<delta>)\n   (\\<lambda>n s. \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s)\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "then"], ["proof (chain)\npicking this:\n  uniformly_convergent_on (cball s \\<delta>)\n   (\\<lambda>n s. \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s)", "obtain l where \n     \"uniform_limit (cball s \\<delta>) (\\<lambda>n s. \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s) l at_top\""], ["proof (prove)\nusing this:\n  uniformly_convergent_on (cball s \\<delta>)\n   (\\<lambda>n s. \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        uniform_limit (cball s \\<delta>)\n         (\\<lambda>n s.\n             \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s)\n         l sequentially \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: uniformly_convergent_on_def)"], ["proof (state)\nthis:\n  uniform_limit (cball s \\<delta>)\n   (\\<lambda>n s. \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s) l\n   sequentially\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "also"], ["proof (state)\nthis:\n  uniform_limit (cball s \\<delta>)\n   (\\<lambda>n s. \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s) l\n   sequentially\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "have \"(\\<lambda>n s. \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s) =\n               (\\<lambda>n s. \\<Sum>k<Suc n. fds_nth (fds_deriv f) k / nat_power k s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n s. \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s) =\n    (\\<lambda>n s. \\<Sum>k<Suc n. fds_nth (fds_deriv f) k / nat_power k s)", "by (simp only: lessThan_Suc_atMost)"], ["proof (state)\nthis:\n  (\\<lambda>n s. \\<Sum>k\\<le>n. fds_nth (fds_deriv f) k / nat_power k s) =\n  (\\<lambda>n s. \\<Sum>k<Suc n. fds_nth (fds_deriv f) k / nat_power k s)\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "finally"], ["proof (chain)\npicking this:\n  uniform_limit (cball s \\<delta>)\n   (\\<lambda>n s. \\<Sum>k<Suc n. fds_nth (fds_deriv f) k / nat_power k s) l\n   sequentially", "have \"uniform_limit (cball s \\<delta>) (\\<lambda>n s. \\<Sum>k<n. fds_nth (fds_deriv f) k / nat_power k s) \n                  l at_top\""], ["proof (prove)\nusing this:\n  uniform_limit (cball s \\<delta>)\n   (\\<lambda>n s. \\<Sum>k<Suc n. fds_nth (fds_deriv f) k / nat_power k s) l\n   sequentially\n\ngoal (1 subgoal):\n 1. uniform_limit (cball s \\<delta>)\n     (\\<lambda>n s. \\<Sum>k<n. fds_nth (fds_deriv f) k / nat_power k s) l\n     sequentially", "unfolding uniform_limit_iff"], ["proof (prove)\nusing this:\n  \\<forall>e>0.\n     \\<forall>\\<^sub>F n in sequentially.\n        \\<forall>x\\<in>cball s \\<delta>.\n           dist (\\<Sum>k<Suc n. fds_nth (fds_deriv f) k / nat_power k x)\n            (l x)\n           < e\n\ngoal (1 subgoal):\n 1. \\<forall>e>0.\n       \\<forall>\\<^sub>F n in sequentially.\n          \\<forall>x\\<in>cball s \\<delta>.\n             dist (\\<Sum>k<n. fds_nth (fds_deriv f) k / nat_power k x) (l x)\n             < e", "by (subst (asm) eventually_sequentially_Suc)"], ["proof (state)\nthis:\n  uniform_limit (cball s \\<delta>)\n   (\\<lambda>n s. \\<Sum>k<n. fds_nth (fds_deriv f) k / nat_power k s) l\n   sequentially\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "hence *: \"uniformly_convergent_on (cball s \\<delta>) \n              (\\<lambda>n s. \\<Sum>k<n. fds_nth (fds_deriv f) k / nat_power k s)\""], ["proof (prove)\nusing this:\n  uniform_limit (cball s \\<delta>)\n   (\\<lambda>n s. \\<Sum>k<n. fds_nth (fds_deriv f) k / nat_power k s) l\n   sequentially\n\ngoal (1 subgoal):\n 1. uniformly_convergent_on (cball s \\<delta>)\n     (\\<lambda>n s. \\<Sum>k<n. fds_nth (fds_deriv f) k / nat_power k s)", "unfolding uniformly_convergent_on_def"], ["proof (prove)\nusing this:\n  uniform_limit (cball s \\<delta>)\n   (\\<lambda>n s. \\<Sum>k<n. fds_nth (fds_deriv f) k / nat_power k s) l\n   sequentially\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       uniform_limit (cball s \\<delta>)\n        (\\<lambda>n s. \\<Sum>k<n. fds_nth (fds_deriv f) k / nat_power k s) l\n        sequentially", "by blast"], ["proof (state)\nthis:\n  uniformly_convergent_on (cball s \\<delta>)\n   (\\<lambda>n s. \\<Sum>k<n. fds_nth (fds_deriv f) k / nat_power k s)\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "have \"(eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s)", "unfolding eval_fds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>s. \\<Sum>n. fds_nth f n / nat_power n s) has_field_derivative\n     (\\<Sum>n. fds_nth (fds_deriv f) n / nat_power n s))\n     (at s)", "proof (rule has_field_derivative_series'(2)[OF _ _ *])"], ["proof (state)\ngoal (5 subgoals):\n 1. convex (cball s \\<delta>)\n 2. \\<And>n sa.\n       sa \\<in> cball s \\<delta> \\<Longrightarrow>\n       ((\\<lambda>x. fds_nth f n / nat_power n x) has_field_derivative\n        fds_nth (fds_deriv f) n / nat_power n sa)\n        (at sa within cball s \\<delta>)\n 3. ?x0.0 \\<in> cball s \\<delta>\n 4. summable (\\<lambda>n. fds_nth f n / nat_power n ?x0.0)\n 5. s \\<in> interior (cball s \\<delta>)", "show \"s \\<in> cball s \\<delta>\" \"s \\<in> interior (cball s \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> cball s \\<delta> &&& s \\<in> interior (cball s \\<delta>)", "using s"], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal s1 \\<and> s1 < s2 \\<and> s2 < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. s \\<in> cball s \\<delta> &&& s \\<in> interior (cball s \\<delta>)", "by (simp_all add: \\<delta>_def)"], ["proof (state)\nthis:\n  s \\<in> cball s \\<delta>\n  s \\<in> interior (cball s \\<delta>)\n\ngoal (3 subgoals):\n 1. convex (cball s \\<delta>)\n 2. \\<And>n sa.\n       sa \\<in> cball s \\<delta> \\<Longrightarrow>\n       ((\\<lambda>x. fds_nth f n / nat_power n x) has_field_derivative\n        fds_nth (fds_deriv f) n / nat_power n sa)\n        (at sa within cball s \\<delta>)\n 3. summable (\\<lambda>n. fds_nth f n / nat_power n s)", "show \"summable (\\<lambda>n. fds_nth f n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. fds_nth f n / nat_power n s)", "using assms fds_converges[of f s]"], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal (s \\<bullet> (1::'a))\n  conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. fds_nth f n / nat_power n s)", "by (simp add: fds_converges_def)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. fds_nth f n / nat_power n s)\n\ngoal (2 subgoals):\n 1. convex (cball s \\<delta>)\n 2. \\<And>n sa.\n       sa \\<in> cball s \\<delta> \\<Longrightarrow>\n       ((\\<lambda>x. fds_nth f n / nat_power n x) has_field_derivative\n        fds_nth (fds_deriv f) n / nat_power n sa)\n        (at sa within cball s \\<delta>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. convex (cball s \\<delta>)\n 2. \\<And>n sa.\n       sa \\<in> cball s \\<delta> \\<Longrightarrow>\n       ((\\<lambda>x. fds_nth f n / nat_power n x) has_field_derivative\n        fds_nth (fds_deriv f) n / nat_power n sa)\n        (at sa within cball s \\<delta>)", "fix s' :: 'a and n :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. convex (cball s \\<delta>)\n 2. \\<And>n sa.\n       sa \\<in> cball s \\<delta> \\<Longrightarrow>\n       ((\\<lambda>x. fds_nth f n / nat_power n x) has_field_derivative\n        fds_nth (fds_deriv f) n / nat_power n sa)\n        (at sa within cball s \\<delta>)", "show \"((\\<lambda>s. fds_nth f n / nat_power n s) has_field_derivative\n            fds_nth (fds_deriv f) n / nat_power n s') (at s' within cball s \\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>s. fds_nth f n / nat_power n s) has_field_derivative\n     fds_nth (fds_deriv f) n / nat_power n s')\n     (at s' within cball s \\<delta>)", "by (cases \"n = 0\") \n         (simp, auto intro!: derivative_eq_intros simp: fds_nth_deriv field_simps)"], ["proof (state)\nthis:\n  ((\\<lambda>s. fds_nth f n / nat_power n s) has_field_derivative\n   fds_nth (fds_deriv f) n / nat_power n s')\n   (at s' within cball s \\<delta>)\n\ngoal (1 subgoal):\n 1. convex (cball s \\<delta>)", "qed (auto simp: fds_nth_deriv intro!: derivative_eq_intros)"], ["proof (state)\nthis:\n  (eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s)\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "thus \"(eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s within A)\""], ["proof (prove)\nusing this:\n  (eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s)\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s)\n     (at s within A)", "by (rule has_field_derivative_at_within)"], ["proof (state)\nthis:\n  (eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s within A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas has_field_derivative_eval_fds' [derivative_intros] = \n  DERIV_chain2[OF has_field_derivative_eval_fds]"], ["", "lemma continuous_eval_fds [continuous_intros]:\n  assumes \"s \\<bullet> 1 > conv_abscissa f\"\n  shows   \"continuous (at s within A) (eval_fds (f :: 'a :: dirichlet_series fds))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous (at s within A) (eval_fds f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous (at s within A) (eval_fds f)", "have \"isCont (eval_fds f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isCont (eval_fds f) s", "by (rule has_field_derivative_eval_fds DERIV_isCont assms)+"], ["proof (state)\nthis:\n  isCont (eval_fds f) s\n\ngoal (1 subgoal):\n 1. continuous (at s within A) (eval_fds f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  isCont (eval_fds f) s\n\ngoal (1 subgoal):\n 1. continuous (at s within A) (eval_fds f)", "by (rule continuous_within_subset) auto"], ["proof (state)\nthis:\n  continuous (at s within A) (eval_fds f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma continuous_eval_fds' [continuous_intros]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"continuous (at s within A) g\" \"g s \\<bullet> 1 > conv_abscissa f\"\n  shows   \"continuous (at s within A) (\\<lambda>x. eval_fds f (g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous (at s within A) (\\<lambda>x. eval_fds f (g x))", "by (rule continuous_within_compose3[OF _ assms(1)] continuous_intros assms)+"], ["", "lemma continuous_on_eval_fds [continuous_intros]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"A \\<subseteq> {s. s \\<bullet> 1 > conv_abscissa f}\"\n  shows   \"continuous_on A (eval_fds f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on A (eval_fds f)", "by (rule DERIV_continuous_on derivative_intros)+ (insert assms, auto)"], ["", "lemma continuous_on_eval_fds' [continuous_intros]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"continuous_on A g\" \"g ` A \\<subseteq> {s. s \\<bullet> 1 > conv_abscissa f}\"\n  shows   \"continuous_on A (\\<lambda>x. eval_fds f (g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on A (\\<lambda>x. eval_fds f (g x))", "by (rule continuous_on_compose2[OF continuous_on_eval_fds assms(1)])\n     (insert assms, auto simp: image_iff)"], ["", "lemma conv_abscissa_deriv_le:\n  fixes f :: \"'a fds\"\n  shows \"conv_abscissa (fds_deriv f) \\<le> conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (fds_deriv f) \\<le> conv_abscissa f", "proof (rule conv_abscissa_leI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       conv_abscissa f < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and> fds_converges (fds_deriv f) s", "fix c' :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       conv_abscissa f < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and> fds_converges (fds_deriv f) s", "assume \"ereal c' > conv_abscissa f\""], ["proof (state)\nthis:\n  conv_abscissa f < ereal c'\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       conv_abscissa f < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and> fds_converges (fds_deriv f) s", "thus \"\\<exists>s. s \\<bullet> 1 = c' \\<and> fds_converges (fds_deriv f) s\""], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal c'\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       s \\<bullet> (1::'a) = c' \\<and> fds_converges (fds_deriv f) s", "by (intro exI[of _ \"of_real c'\"]) (auto simp: fds_converges_deriv)"], ["proof (state)\nthis:\n  \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_converges (fds_deriv f) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abs_conv_abscissa_integral:\n  fixes f :: \"'a fds\"\n  shows \"abs_conv_abscissa (fds_integral a f) = abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_integral a f) = abs_conv_abscissa f", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. abs_conv_abscissa (fds_integral a f) \\<le> abs_conv_abscissa f\n 2. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)", "show \"abs_conv_abscissa (fds_integral a f) \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_integral a f) \\<le> abs_conv_abscissa f", "proof (rule abs_conv_abscissa_leI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa f < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and>\n          fds_abs_converges (fds_integral a f) s", "case (1 c)"], ["proof (state)\nthis:\n  abs_conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa f < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and>\n          fds_abs_converges (fds_integral a f) s", "have \"fds_abs_converges (fds_integral a f) (of_real c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_integral a f) (of_real c)", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))", "proof (rule summable_comparison_test_ev)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n       \\<le> ?g n\n 2. summable ?g", "from 1"], ["proof (chain)\npicking this:\n  abs_conv_abscissa f < ereal c", "have \"fds_abs_converges f (of_real c)\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. fds_abs_converges f (of_real c)", "by (intro fds_abs_converges) auto"], ["proof (state)\nthis:\n  fds_abs_converges f (of_real c)\n\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n       \\<le> ?g n\n 2. summable ?g", "thus \"summable (\\<lambda>n. norm (fds_nth f n / nat_power n (of_real c)))\""], ["proof (prove)\nusing this:\n  fds_abs_converges f (of_real c)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n (of_real c)))", "by (simp add: fds_abs_converges_def)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. norm (fds_nth f n / nat_power n (of_real c)))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n       \\<le> norm (fds_nth f n / nat_power n (of_real c))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n       \\<le> norm (fds_nth f n / nat_power n (of_real c))", "show \"\\<forall>\\<^sub>F n in sequentially. norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c))) \\<le> \n              norm (fds_nth f n / nat_power n (of_real c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n       \\<le> norm (fds_nth f n / nat_power n (of_real c))", "using eventually_gt_at_top[of 3]"], ["proof (prove)\nusing this:\n  eventually ((<) (3::?'b1)) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n       \\<le> norm (fds_nth f n / nat_power n (of_real c))", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       3 < n \\<Longrightarrow>\n       norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n       \\<le> norm (fds_nth f n / nat_power n (of_real c))", "case (elim n)"], ["proof (state)\nthis:\n  3 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       3 < n \\<Longrightarrow>\n       norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n       \\<le> norm (fds_nth f n / nat_power n (of_real c))", "from elim and exp_le"], ["proof (chain)\npicking this:\n  3 < n\n  exp 1 \\<le> 3", "have \"ln (exp 1) \\<le> ln (real n)\""], ["proof (prove)\nusing this:\n  3 < n\n  exp 1 \\<le> 3\n\ngoal (1 subgoal):\n 1. ln (exp 1) \\<le> ln (real n)", "by (subst ln_le_cancel_iff) auto"], ["proof (state)\nthis:\n  ln (exp 1) \\<le> ln (real n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       3 < n \\<Longrightarrow>\n       norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n       \\<le> norm (fds_nth f n / nat_power n (of_real c))", "hence \"1 * norm (fds_nth f n) \\<le> ln (real n) * norm (fds_nth f n)\""], ["proof (prove)\nusing this:\n  ln (exp 1) \\<le> ln (real n)\n\ngoal (1 subgoal):\n 1. 1 * norm (fds_nth f n) \\<le> ln (real n) * norm (fds_nth f n)", "by (intro mult_right_mono) auto"], ["proof (state)\nthis:\n  1 * norm (fds_nth f n) \\<le> ln (real n) * norm (fds_nth f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       3 < n \\<Longrightarrow>\n       norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n       \\<le> norm (fds_nth f n / nat_power n (of_real c))", "with elim"], ["proof (chain)\npicking this:\n  3 < n\n  1 * norm (fds_nth f n) \\<le> ln (real n) * norm (fds_nth f n)", "show ?case"], ["proof (prove)\nusing this:\n  3 < n\n  1 * norm (fds_nth f n) \\<le> ln (real n) * norm (fds_nth f n)\n\ngoal (1 subgoal):\n 1. norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n    \\<le> norm (fds_nth f n / nat_power n (of_real c))", "by (simp add: norm_divide norm_nat_power fds_integral_def field_simps)"], ["proof (state)\nthis:\n  norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n  \\<le> norm (fds_nth f n / nat_power n (of_real c))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     norm (norm (fds_nth (fds_integral a f) n / nat_power n (of_real c)))\n     \\<le> norm (fds_nth f n / nat_power n (of_real c))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_abs_converges (fds_integral a f) (of_real c)\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa f < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and>\n          fds_abs_converges (fds_integral a f) s", "thus ?case"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_integral a f) (of_real c)\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       s \\<bullet> (1::'a) = c \\<and> fds_abs_converges (fds_integral a f) s", "by (intro exI[of _ \"of_real c\"]) auto"], ["proof (state)\nthis:\n  \\<exists>s.\n     s \\<bullet> (1::'a) = c \\<and> fds_abs_converges (fds_integral a f) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_integral a f) \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)", "show \"abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)\" (is \"_ \\<le> ?s0\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)", "proof (cases \"abs_conv_abscissa (fds_integral a f) = \\<infinity>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. abs_conv_abscissa (fds_integral a f) = \\<infinity> \\<Longrightarrow>\n    abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)\n 2. abs_conv_abscissa (fds_integral a f) \\<noteq>\n    \\<infinity> \\<Longrightarrow>\n    abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)", "case False"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_integral a f) \\<noteq> \\<infinity>\n\ngoal (2 subgoals):\n 1. abs_conv_abscissa (fds_integral a f) = \\<infinity> \\<Longrightarrow>\n    abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)\n 2. abs_conv_abscissa (fds_integral a f) \\<noteq>\n    \\<infinity> \\<Longrightarrow>\n    abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)", "proof (rule abs_conv_abscissa_leI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa (fds_integral a f) < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "fix c :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa (fds_integral a f) < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "define \\<epsilon> where \"\\<epsilon> = (if ?s0 = -\\<infinity> then 1 else (c - real_of_ereal ?s0) / 2)\""], ["proof (state)\nthis:\n  \\<epsilon> =\n  (if abs_conv_abscissa (fds_integral a f) = - \\<infinity> then 1\n   else (c - real_of_ereal (abs_conv_abscissa (fds_integral a f))) / 2)\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa (fds_integral a f) < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "assume \"ereal c > ?s0\""], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_integral a f) < ereal c\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa (fds_integral a f) < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "with False"], ["proof (chain)\npicking this:\n  abs_conv_abscissa (fds_integral a f) \\<noteq> \\<infinity>\n  abs_conv_abscissa (fds_integral a f) < ereal c", "have \\<epsilon>: \"\\<epsilon> > 0\" \"c - \\<epsilon> > ?s0\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa (fds_integral a f) \\<noteq> \\<infinity>\n  abs_conv_abscissa (fds_integral a f) < ereal c\n\ngoal (1 subgoal):\n 1. 0 < \\<epsilon> &&&\n    abs_conv_abscissa (fds_integral a f) < ereal (c - \\<epsilon>)", "by (cases ?s0; force simp: \\<epsilon>_def field_simps)+"], ["proof (state)\nthis:\n  0 < \\<epsilon>\n  abs_conv_abscissa (fds_integral a f) < ereal (c - \\<epsilon>)\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa (fds_integral a f) < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "have \"fds_abs_converges f (of_real c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges f (of_real c)", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n (of_real c)))", "proof (rule summable_comparison_test_ev)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n (of_real c))) \\<le> ?g n\n 2. summable ?g", "from \\<epsilon>"], ["proof (chain)\npicking this:\n  0 < \\<epsilon>\n  abs_conv_abscissa (fds_integral a f) < ereal (c - \\<epsilon>)", "have \"fds_abs_converges (fds_integral a f) (of_real (c - \\<epsilon>))\""], ["proof (prove)\nusing this:\n  0 < \\<epsilon>\n  abs_conv_abscissa (fds_integral a f) < ereal (c - \\<epsilon>)\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_integral a f) (of_real (c - \\<epsilon>))", "by (intro fds_abs_converges) (auto simp: algebra_simps)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_integral a f) (of_real (c - \\<epsilon>))\n\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n (of_real c))) \\<le> ?g n\n 2. summable ?g", "thus \"summable (\\<lambda>n. norm (fds_nth (fds_integral a f) n / nat_power n (of_real (c - \\<epsilon>))))\""], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_integral a f) (of_real (c - \\<epsilon>))\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         norm\n          (fds_nth (fds_integral a f) n /\n           nat_power n (of_real (c - \\<epsilon>))))", "by (simp add: fds_abs_converges_def)"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n.\n       norm\n        (fds_nth (fds_integral a f) n /\n         nat_power n (of_real (c - \\<epsilon>))))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n (of_real c)))\n       \\<le> norm\n              (fds_nth (fds_integral a f) n /\n               nat_power n (of_real (c - \\<epsilon>)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n (of_real c)))\n       \\<le> norm\n              (fds_nth (fds_integral a f) n /\n               nat_power n (of_real (c - \\<epsilon>)))", "have \"\\<forall>\\<^sub>F n in at_top. ln (real n) / real n powr \\<epsilon> < 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       ln (real n) / real n powr \\<epsilon> < 1", "by (rule order_tendstoD lim_ln_over_power \\<open>\\<epsilon> > 0\\<close> zero_less_one)+"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     ln (real n) / real n powr \\<epsilon> < 1\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n (of_real c)))\n       \\<le> norm\n              (fds_nth (fds_integral a f) n /\n               nat_power n (of_real (c - \\<epsilon>)))", "thus \"\\<forall>\\<^sub>F n in sequentially. norm (norm (fds_nth f n / nat_power n (of_real c)))\n                \\<le> norm (fds_nth (fds_integral a f) n / nat_power n (of_real (c - \\<epsilon>)))\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially.\n     ln (real n) / real n powr \\<epsilon> < 1\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n (of_real c)))\n       \\<le> norm\n              (fds_nth (fds_integral a f) n /\n               nat_power n (of_real (c - \\<epsilon>)))", "using eventually_gt_at_top[of 1]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially.\n     ln (real n) / real n powr \\<epsilon> < 1\n  eventually ((<) (1::?'b1)) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth f n / nat_power n (of_real c)))\n       \\<le> norm\n              (fds_nth (fds_integral a f) n /\n               nat_power n (of_real (c - \\<epsilon>)))", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>ln (real n) / real n powr \\<epsilon> < 1; 1 < n\\<rbrakk>\n       \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n (of_real c)))\n                         \\<le> norm\n                                (fds_nth (fds_integral a f) n /\n                                 nat_power n (of_real (c - \\<epsilon>)))", "case (elim n)"], ["proof (state)\nthis:\n  ln (real n) / real n powr \\<epsilon> < 1\n  1 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>ln (real n) / real n powr \\<epsilon> < 1; 1 < n\\<rbrakk>\n       \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n (of_real c)))\n                         \\<le> norm\n                                (fds_nth (fds_integral a f) n /\n                                 nat_power n (of_real (c - \\<epsilon>)))", "hence \"ln (real n) * norm (fds_nth f n) \\<le> real n powr \\<epsilon> * norm (fds_nth f n)\""], ["proof (prove)\nusing this:\n  ln (real n) / real n powr \\<epsilon> < 1\n  1 < n\n\ngoal (1 subgoal):\n 1. ln (real n) * norm (fds_nth f n)\n    \\<le> real n powr \\<epsilon> * norm (fds_nth f n)", "by (intro mult_right_mono) auto"], ["proof (state)\nthis:\n  ln (real n) * norm (fds_nth f n)\n  \\<le> real n powr \\<epsilon> * norm (fds_nth f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>ln (real n) / real n powr \\<epsilon> < 1; 1 < n\\<rbrakk>\n       \\<Longrightarrow> norm (norm (fds_nth f n / nat_power n (of_real c)))\n                         \\<le> norm\n                                (fds_nth (fds_integral a f) n /\n                                 nat_power n (of_real (c - \\<epsilon>)))", "with elim"], ["proof (chain)\npicking this:\n  ln (real n) / real n powr \\<epsilon> < 1\n  1 < n\n  ln (real n) * norm (fds_nth f n)\n  \\<le> real n powr \\<epsilon> * norm (fds_nth f n)", "show ?case"], ["proof (prove)\nusing this:\n  ln (real n) / real n powr \\<epsilon> < 1\n  1 < n\n  ln (real n) * norm (fds_nth f n)\n  \\<le> real n powr \\<epsilon> * norm (fds_nth f n)\n\ngoal (1 subgoal):\n 1. norm (norm (fds_nth f n / nat_power n (of_real c)))\n    \\<le> norm\n           (fds_nth (fds_integral a f) n /\n            nat_power n (of_real (c - \\<epsilon>)))", "by (simp add: norm_divide norm_nat_power field_simps \n                          powr_diff inner_diff_left fds_integral_def)"], ["proof (state)\nthis:\n  norm (norm (fds_nth f n / nat_power n (of_real c)))\n  \\<le> norm\n         (fds_nth (fds_integral a f) n /\n          nat_power n (of_real (c - \\<epsilon>)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     norm (norm (fds_nth f n / nat_power n (of_real c)))\n     \\<le> norm\n            (fds_nth (fds_integral a f) n /\n             nat_power n (of_real (c - \\<epsilon>)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_abs_converges f (of_real c)\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa (fds_integral a f) < ereal c' \\<Longrightarrow>\n       \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges f s", "thus \"\\<exists>s. s \\<bullet> 1 = c \\<and> fds_abs_converges f s\""], ["proof (prove)\nusing this:\n  fds_abs_converges f (of_real c)\n\ngoal (1 subgoal):\n 1. \\<exists>s. s \\<bullet> (1::'a) = c \\<and> fds_abs_converges f s", "by (intro exI[of _ \"of_real c\"]) auto"], ["proof (state)\nthis:\n  \\<exists>s. s \\<bullet> (1::'a) = c \\<and> fds_abs_converges f s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_integral a f) = \\<infinity> \\<Longrightarrow>\n    abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)", "qed auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_integral a f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abs_conv_abscissa_ln: \n  \"abs_conv_abscissa (fds_ln l (f :: 'a :: dirichlet_series fds)) = \n     abs_conv_abscissa (fds_deriv f / f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_ln l f) = abs_conv_abscissa (fds_deriv f / f)", "by (simp add: fds_ln_def abs_conv_abscissa_integral)"], ["", "lemma abs_conv_abscissa_deriv:\n  fixes f :: \"'a fds\"\n  shows \"abs_conv_abscissa (fds_deriv f) = abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f) = abs_conv_abscissa f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f) = abs_conv_abscissa f", "have \"abs_conv_abscissa (fds_deriv f) = \n          abs_conv_abscissa (fds_integral (fds_nth f 1) (fds_deriv f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f) =\n    abs_conv_abscissa (fds_integral (fds_nth f 1) (fds_deriv f))", "by (rule abs_conv_abscissa_integral [symmetric])"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_deriv f) =\n  abs_conv_abscissa (fds_integral (fds_nth f 1) (fds_deriv f))\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f) = abs_conv_abscissa f", "also"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_deriv f) =\n  abs_conv_abscissa (fds_integral (fds_nth f 1) (fds_deriv f))\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f) = abs_conv_abscissa f", "have \"fds_integral (fds_nth f 1) (fds_deriv f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_integral (fds_nth f 1) (fds_deriv f) = f", "by (rule fds_integral_fds_deriv)"], ["proof (state)\nthis:\n  fds_integral (fds_nth f 1) (fds_deriv f) = f\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f) = abs_conv_abscissa f", "finally"], ["proof (chain)\npicking this:\n  abs_conv_abscissa (fds_deriv f) = abs_conv_abscissa f", "show ?thesis"], ["proof (prove)\nusing this:\n  abs_conv_abscissa (fds_deriv f) = abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f) = abs_conv_abscissa f", "."], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_deriv f) = abs_conv_abscissa f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abs_conv_abscissa_higher_deriv:\n  \"abs_conv_abscissa ((fds_deriv ^^ n) f) = abs_conv_abscissa (f :: 'a :: dirichlet_series fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa ((fds_deriv ^^ n) f) = abs_conv_abscissa f", "by (induction n) (simp_all add: abs_conv_abscissa_deriv)"], ["", "lemma conv_abscissa_higher_deriv_le:\n  \"conv_abscissa ((fds_deriv ^^ n) f) \\<le> conv_abscissa (f :: 'a :: dirichlet_series fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa ((fds_deriv ^^ n) f) \\<le> conv_abscissa f", "by (induction n) (auto intro: order.trans[OF conv_abscissa_deriv_le])"], ["", "lemma abs_conv_abscissa_restrict:\n  \"abs_conv_abscissa (fds_subseries P f) \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_subseries P f) \\<le> abs_conv_abscissa f", "by (rule abs_conv_abscissa_mono) auto"], ["", "lemma eval_fds_deriv:\n  fixes f :: \"'a fds\"\n  assumes \"s \\<bullet> 1 > conv_abscissa f\"\n  shows   \"eval_fds (fds_deriv f) s = deriv (eval_fds f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f) s = deriv (eval_fds f) s", "by (intro DERIV_imp_deriv [symmetric] derivative_intros assms)"], ["", "lemma eval_fds_higher_deriv:\n  assumes \"(s :: 'a :: dirichlet_series) \\<bullet> 1 > conv_abscissa f\"\n  shows   \"eval_fds ((fds_deriv ^^ n) f) s = (deriv ^^ n) (eval_fds f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds ((fds_deriv ^^ n) f) s = (deriv ^^ n) (eval_fds f) s", "using assms"], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. eval_fds ((fds_deriv ^^ n) f) s = (deriv ^^ n) (eval_fds f) s", "proof (induction n arbitrary: f s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f s.\n       conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n       eval_fds ((fds_deriv ^^ 0) f) s = (deriv ^^ 0) (eval_fds f) s\n 2. \\<And>n f s.\n       \\<lbrakk>\\<And>f s.\n                   conv_abscissa f\n                   < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n                   eval_fds ((fds_deriv ^^ n) f) s =\n                   (deriv ^^ n) (eval_fds f) s;\n        conv_abscissa f < ereal (s \\<bullet> (1::'a))\\<rbrakk>\n       \\<Longrightarrow> eval_fds ((fds_deriv ^^ Suc n) f) s =\n                         (deriv ^^ Suc n) (eval_fds f) s", "case (Suc n f s)"], ["proof (state)\nthis:\n  conv_abscissa ?f < ereal (?s \\<bullet> (1::'a)) \\<Longrightarrow>\n  eval_fds ((fds_deriv ^^ n) ?f) ?s = (deriv ^^ n) (eval_fds ?f) ?s\n  conv_abscissa f < ereal (s \\<bullet> (1::'a))\n\ngoal (2 subgoals):\n 1. \\<And>f s.\n       conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n       eval_fds ((fds_deriv ^^ 0) f) s = (deriv ^^ 0) (eval_fds f) s\n 2. \\<And>n f s.\n       \\<lbrakk>\\<And>f s.\n                   conv_abscissa f\n                   < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n                   eval_fds ((fds_deriv ^^ n) f) s =\n                   (deriv ^^ n) (eval_fds f) s;\n        conv_abscissa f < ereal (s \\<bullet> (1::'a))\\<rbrakk>\n       \\<Longrightarrow> eval_fds ((fds_deriv ^^ Suc n) f) s =\n                         (deriv ^^ Suc n) (eval_fds f) s", "have ev: \"eventually (\\<lambda>s. s \\<in> {s. s \\<bullet> 1 > conv_abscissa f}) (nhds s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in nhds s.\n       s \\<in> {s. conv_abscissa f < ereal (s \\<bullet> (1::'a))}", "using Suc.prems open_halfspace_gt[of _ \"1::'a\"]"], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal (s \\<bullet> (1::'a))\n  open {x. ?b < (1::'a) \\<bullet> x}\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in nhds s.\n       s \\<in> {s. conv_abscissa f < ereal (s \\<bullet> (1::'a))}", "by (intro eventually_nhds_in_open, cases \"conv_abscissa f\")\n       (auto simp: open_halfspace_gt inner_commute)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F s in nhds s.\n     s \\<in> {s. conv_abscissa f < ereal (s \\<bullet> (1::'a))}\n\ngoal (2 subgoals):\n 1. \\<And>f s.\n       conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n       eval_fds ((fds_deriv ^^ 0) f) s = (deriv ^^ 0) (eval_fds f) s\n 2. \\<And>n f s.\n       \\<lbrakk>\\<And>f s.\n                   conv_abscissa f\n                   < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n                   eval_fds ((fds_deriv ^^ n) f) s =\n                   (deriv ^^ n) (eval_fds f) s;\n        conv_abscissa f < ereal (s \\<bullet> (1::'a))\\<rbrakk>\n       \\<Longrightarrow> eval_fds ((fds_deriv ^^ Suc n) f) s =\n                         (deriv ^^ Suc n) (eval_fds f) s", "have \"eval_fds ((fds_deriv ^^ Suc n) f) s = eval_fds ((fds_deriv ^^ n) (fds_deriv f)) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds ((fds_deriv ^^ Suc n) f) s =\n    eval_fds ((fds_deriv ^^ n) (fds_deriv f)) s", "by (subst funpow_Suc_right) simp"], ["proof (state)\nthis:\n  eval_fds ((fds_deriv ^^ Suc n) f) s =\n  eval_fds ((fds_deriv ^^ n) (fds_deriv f)) s\n\ngoal (2 subgoals):\n 1. \\<And>f s.\n       conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n       eval_fds ((fds_deriv ^^ 0) f) s = (deriv ^^ 0) (eval_fds f) s\n 2. \\<And>n f s.\n       \\<lbrakk>\\<And>f s.\n                   conv_abscissa f\n                   < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n                   eval_fds ((fds_deriv ^^ n) f) s =\n                   (deriv ^^ n) (eval_fds f) s;\n        conv_abscissa f < ereal (s \\<bullet> (1::'a))\\<rbrakk>\n       \\<Longrightarrow> eval_fds ((fds_deriv ^^ Suc n) f) s =\n                         (deriv ^^ Suc n) (eval_fds f) s", "also"], ["proof (state)\nthis:\n  eval_fds ((fds_deriv ^^ Suc n) f) s =\n  eval_fds ((fds_deriv ^^ n) (fds_deriv f)) s\n\ngoal (2 subgoals):\n 1. \\<And>f s.\n       conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n       eval_fds ((fds_deriv ^^ 0) f) s = (deriv ^^ 0) (eval_fds f) s\n 2. \\<And>n f s.\n       \\<lbrakk>\\<And>f s.\n                   conv_abscissa f\n                   < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n                   eval_fds ((fds_deriv ^^ n) f) s =\n                   (deriv ^^ n) (eval_fds f) s;\n        conv_abscissa f < ereal (s \\<bullet> (1::'a))\\<rbrakk>\n       \\<Longrightarrow> eval_fds ((fds_deriv ^^ Suc n) f) s =\n                         (deriv ^^ Suc n) (eval_fds f) s", "have \"\\<dots> = (deriv ^^ n) (eval_fds (fds_deriv f)) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds ((fds_deriv ^^ n) (fds_deriv f)) s =\n    (deriv ^^ n) (eval_fds (fds_deriv f)) s", "by (intro Suc.IH le_less_trans[OF conv_abscissa_deriv_le] Suc.prems)"], ["proof (state)\nthis:\n  eval_fds ((fds_deriv ^^ n) (fds_deriv f)) s =\n  (deriv ^^ n) (eval_fds (fds_deriv f)) s\n\ngoal (2 subgoals):\n 1. \\<And>f s.\n       conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n       eval_fds ((fds_deriv ^^ 0) f) s = (deriv ^^ 0) (eval_fds f) s\n 2. \\<And>n f s.\n       \\<lbrakk>\\<And>f s.\n                   conv_abscissa f\n                   < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n                   eval_fds ((fds_deriv ^^ n) f) s =\n                   (deriv ^^ n) (eval_fds f) s;\n        conv_abscissa f < ereal (s \\<bullet> (1::'a))\\<rbrakk>\n       \\<Longrightarrow> eval_fds ((fds_deriv ^^ Suc n) f) s =\n                         (deriv ^^ Suc n) (eval_fds f) s", "also"], ["proof (state)\nthis:\n  eval_fds ((fds_deriv ^^ n) (fds_deriv f)) s =\n  (deriv ^^ n) (eval_fds (fds_deriv f)) s\n\ngoal (2 subgoals):\n 1. \\<And>f s.\n       conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n       eval_fds ((fds_deriv ^^ 0) f) s = (deriv ^^ 0) (eval_fds f) s\n 2. \\<And>n f s.\n       \\<lbrakk>\\<And>f s.\n                   conv_abscissa f\n                   < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n                   eval_fds ((fds_deriv ^^ n) f) s =\n                   (deriv ^^ n) (eval_fds f) s;\n        conv_abscissa f < ereal (s \\<bullet> (1::'a))\\<rbrakk>\n       \\<Longrightarrow> eval_fds ((fds_deriv ^^ Suc n) f) s =\n                         (deriv ^^ Suc n) (eval_fds f) s", "have \"\\<dots> = (deriv ^^ n) (deriv (eval_fds f)) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (deriv ^^ n) (eval_fds (fds_deriv f)) s =\n    (deriv ^^ n) (deriv (eval_fds f)) s", "by (intro higher_deriv_cong_ev refl eventually_mono[OF ev] eval_fds_deriv) auto"], ["proof (state)\nthis:\n  (deriv ^^ n) (eval_fds (fds_deriv f)) s =\n  (deriv ^^ n) (deriv (eval_fds f)) s\n\ngoal (2 subgoals):\n 1. \\<And>f s.\n       conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n       eval_fds ((fds_deriv ^^ 0) f) s = (deriv ^^ 0) (eval_fds f) s\n 2. \\<And>n f s.\n       \\<lbrakk>\\<And>f s.\n                   conv_abscissa f\n                   < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n                   eval_fds ((fds_deriv ^^ n) f) s =\n                   (deriv ^^ n) (eval_fds f) s;\n        conv_abscissa f < ereal (s \\<bullet> (1::'a))\\<rbrakk>\n       \\<Longrightarrow> eval_fds ((fds_deriv ^^ Suc n) f) s =\n                         (deriv ^^ Suc n) (eval_fds f) s", "also"], ["proof (state)\nthis:\n  (deriv ^^ n) (eval_fds (fds_deriv f)) s =\n  (deriv ^^ n) (deriv (eval_fds f)) s\n\ngoal (2 subgoals):\n 1. \\<And>f s.\n       conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n       eval_fds ((fds_deriv ^^ 0) f) s = (deriv ^^ 0) (eval_fds f) s\n 2. \\<And>n f s.\n       \\<lbrakk>\\<And>f s.\n                   conv_abscissa f\n                   < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n                   eval_fds ((fds_deriv ^^ n) f) s =\n                   (deriv ^^ n) (eval_fds f) s;\n        conv_abscissa f < ereal (s \\<bullet> (1::'a))\\<rbrakk>\n       \\<Longrightarrow> eval_fds ((fds_deriv ^^ Suc n) f) s =\n                         (deriv ^^ Suc n) (eval_fds f) s", "have \"\\<dots> = (deriv ^^ Suc n) (eval_fds f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (deriv ^^ n) (deriv (eval_fds f)) s = (deriv ^^ Suc n) (eval_fds f) s", "by (subst funpow_Suc_right) simp"], ["proof (state)\nthis:\n  (deriv ^^ n) (deriv (eval_fds f)) s = (deriv ^^ Suc n) (eval_fds f) s\n\ngoal (2 subgoals):\n 1. \\<And>f s.\n       conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n       eval_fds ((fds_deriv ^^ 0) f) s = (deriv ^^ 0) (eval_fds f) s\n 2. \\<And>n f s.\n       \\<lbrakk>\\<And>f s.\n                   conv_abscissa f\n                   < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n                   eval_fds ((fds_deriv ^^ n) f) s =\n                   (deriv ^^ n) (eval_fds f) s;\n        conv_abscissa f < ereal (s \\<bullet> (1::'a))\\<rbrakk>\n       \\<Longrightarrow> eval_fds ((fds_deriv ^^ Suc n) f) s =\n                         (deriv ^^ Suc n) (eval_fds f) s", "finally"], ["proof (chain)\npicking this:\n  eval_fds ((fds_deriv ^^ Suc n) f) s = (deriv ^^ Suc n) (eval_fds f) s", "show ?case"], ["proof (prove)\nusing this:\n  eval_fds ((fds_deriv ^^ Suc n) f) s = (deriv ^^ Suc n) (eval_fds f) s\n\ngoal (1 subgoal):\n 1. eval_fds ((fds_deriv ^^ Suc n) f) s = (deriv ^^ Suc n) (eval_fds f) s", "."], ["proof (state)\nthis:\n  eval_fds ((fds_deriv ^^ Suc n) f) s = (deriv ^^ Suc n) (eval_fds f) s\n\ngoal (1 subgoal):\n 1. \\<And>f s.\n       conv_abscissa f < ereal (s \\<bullet> (1::'a)) \\<Longrightarrow>\n       eval_fds ((fds_deriv ^^ 0) f) s = (deriv ^^ 0) (eval_fds f) s", "qed auto"], ["", "end"], ["", "subsection \\<open>Multiplication of two series\\<close>"], ["", "lemma \n  fixes f g :: \"nat \\<Rightarrow> 'a :: {banach, real_normed_field, second_countable_topology, nat_power}\"\n  fixes s :: 'a\n  assumes [simp]: \"f 0 = 0\" \"g 0 = 0\"\n  assumes summable: \"summable (\\<lambda>n. norm (f n / nat_power n s))\"\n                    \"summable (\\<lambda>n. norm (g n / nat_power n s))\"\n  shows   summable_dirichlet_prod: \"summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\"\n    and   suminf_dirichlet_prod:\n            \"(\\<Sum>n. dirichlet_prod f g n / nat_power n s) = \n               (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s)) &&&\n    (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have summable': \"(\\<lambda>n. f n / nat_power n s) abs_summable_on A\"\n                  \"(\\<lambda>n. g n / nat_power n s) abs_summable_on A\" for A"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. f n / nat_power n s) abs_summable_on A &&&\n    (\\<lambda>n. g n / nat_power n s) abs_summable_on A", "by ((rule abs_summable_on_subset[OF _ subset_UNIV], insert summable, \n        simp add: abs_summable_on_nat_iff'); fail)+"], ["proof (state)\nthis:\n  (\\<lambda>n. f n / nat_power n s) abs_summable_on ?A\n  (\\<lambda>n. g n / nat_power n s) abs_summable_on ?A\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have f_g: \"f a / nat_power a s * (g b / nat_power b s) =\n              f a * g b / nat_power (a * b) s\" for a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. f a / nat_power a s * (g b / nat_power b s) =\n    f a * g b / nat_power (a * b) s", "by (cases \"a * b = 0\") (auto simp: nat_power_mult_distrib)"], ["proof (state)\nthis:\n  f ?a / nat_power ?a s * (g ?b / nat_power ?b s) =\n  f ?a * g ?b / nat_power (?a * ?b) s\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have eq: \"(\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}. f m * g n / nat_power x s) =\n              dirichlet_prod f g x / nat_power x s\" for x :: nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s", "proof (cases \"x > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < x \\<Longrightarrow>\n    (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s\n 2. \\<not> 0 < x \\<Longrightarrow>\n    (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s", "case False"], ["proof (state)\nthis:\n  \\<not> 0 < x\n\ngoal (2 subgoals):\n 1. 0 < x \\<Longrightarrow>\n    (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s\n 2. \\<not> 0 < x \\<Longrightarrow>\n    (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s", "hence \"(\\<Sum>\\<^sub>a(m,n) | m * n = x. f m * g n / nat_power x s) = (\\<Sum>\\<^sub>a(m,n) | m * n = x. 0)\""], ["proof (prove)\nusing this:\n  \\<not> 0 < x\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}. (0::'a))", "by (intro infsetsum_cong) auto"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n     f m * g n / nat_power x s) =\n  (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}. (0::'a))\n\ngoal (2 subgoals):\n 1. 0 < x \\<Longrightarrow>\n    (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s\n 2. \\<not> 0 < x \\<Longrightarrow>\n    (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s", "with False"], ["proof (chain)\npicking this:\n  \\<not> 0 < x\n  (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n     f m * g n / nat_power x s) =\n  (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}. (0::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> 0 < x\n  (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n     f m * g n / nat_power x s) =\n  (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}. (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n     f m * g n / nat_power x s) =\n  dirichlet_prod f g x / nat_power x s\n\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow>\n    (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow>\n    (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s", "case True"], ["proof (state)\nthis:\n  0 < x\n\ngoal (1 subgoal):\n 1. 0 < x \\<Longrightarrow>\n    (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s", "from finite_divisors_nat'[OF this]"], ["proof (chain)\npicking this:\n  finite {(a, b). a * b = x}", "show ?thesis"], ["proof (prove)\nusing this:\n  finite {(a, b). a * b = x}\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n       f m * g n / nat_power x s) =\n    dirichlet_prod f g x / nat_power x s", "by (simp add: dirichlet_prod_altdef2 case_prod_unfold sum_divide_distrib)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = x}.\n     f m * g n / nat_power x s) =\n  dirichlet_prod f g x / nat_power x s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(m, n)\\<in>{(m, n). m * n = ?x}.\n     f m * g n / nat_power ?x s) =\n  dirichlet_prod f g ?x / nat_power ?x s\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have \"(\\<lambda>(m,n). (f m / nat_power m s) * (g n / nat_power n s)) abs_summable_on UNIV \\<times> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(m, n).\n        f m / nat_power m s * (g n / nat_power n s)) abs_summable_on\n    UNIV \\<times> UNIV", "using summable'"], ["proof (prove)\nusing this:\n  (\\<lambda>n. f n / nat_power n s) abs_summable_on ?A\n  (\\<lambda>n. g n / nat_power n s) abs_summable_on ?A\n\ngoal (1 subgoal):\n 1. (\\<lambda>(m, n).\n        f m / nat_power m s * (g n / nat_power n s)) abs_summable_on\n    UNIV \\<times> UNIV", "by (intro abs_summable_on_product) auto"], ["proof (state)\nthis:\n  (\\<lambda>(m, n).\n      f m / nat_power m s * (g n / nat_power n s)) abs_summable_on\n  UNIV \\<times> UNIV\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "also"], ["proof (state)\nthis:\n  (\\<lambda>(m, n).\n      f m / nat_power m s * (g n / nat_power n s)) abs_summable_on\n  UNIV \\<times> UNIV\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have \"?this \\<longleftrightarrow> (\\<lambda>(m,n). f m * g n / nat_power (m*n) s) abs_summable_on UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>(m, n).\n         f m / nat_power m s * (g n / nat_power n s)) abs_summable_on\n     UNIV \\<times> UNIV) =\n    ((\\<lambda>(m, n). f m * g n / nat_power (m * n) s) abs_summable_on\n     UNIV)", "using f_g"], ["proof (prove)\nusing this:\n  f ?a / nat_power ?a s * (g ?b / nat_power ?b s) =\n  f ?a * g ?b / nat_power (?a * ?b) s\n\ngoal (1 subgoal):\n 1. ((\\<lambda>(m, n).\n         f m / nat_power m s * (g n / nat_power n s)) abs_summable_on\n     UNIV \\<times> UNIV) =\n    ((\\<lambda>(m, n). f m * g n / nat_power (m * n) s) abs_summable_on\n     UNIV)", "by (intro abs_summable_on_cong) auto"], ["proof (state)\nthis:\n  ((\\<lambda>(m, n).\n       f m / nat_power m s * (g n / nat_power n s)) abs_summable_on\n   UNIV \\<times> UNIV) =\n  ((\\<lambda>(m, n). f m * g n / nat_power (m * n) s) abs_summable_on UNIV)\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "also"], ["proof (state)\nthis:\n  ((\\<lambda>(m, n).\n       f m / nat_power m s * (g n / nat_power n s)) abs_summable_on\n   UNIV \\<times> UNIV) =\n  ((\\<lambda>(m, n). f m * g n / nat_power (m * n) s) abs_summable_on UNIV)\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have \"\\<dots> \\<longleftrightarrow> (\\<lambda>(x,(m,n)). f m * g n / nat_power (m*n) s) abs_summable_on \n                           (SIGMA x:UNIV. {(m,n). m * n = x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>(m, n). f m * g n / nat_power (m * n) s) abs_summable_on\n     UNIV) =\n    ((\\<lambda>(x, m, n). f m * g n / nat_power (m * n) s) abs_summable_on\n     (SIGMA x:UNIV. {(m, n). m * n = x}))", "unfolding case_prod_unfold"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>p.\n         f (fst p) * g (snd p) /\n         nat_power (fst p * snd p) s) abs_summable_on\n     UNIV) =\n    ((\\<lambda>p.\n         f (fst (snd p)) * g (snd (snd p)) /\n         nat_power (fst (snd p) * snd (snd p)) s) abs_summable_on\n     (SIGMA x:UNIV. {p. fst p * snd p = x}))", "by (rule abs_summable_on_reindex_bij_betw [symmetric]) \n       (auto simp: bij_betw_def inj_on_def image_iff)"], ["proof (state)\nthis:\n  ((\\<lambda>(m, n). f m * g n / nat_power (m * n) s) abs_summable_on\n   UNIV) =\n  ((\\<lambda>(x, m, n). f m * g n / nat_power (m * n) s) abs_summable_on\n   (SIGMA x:UNIV. {(m, n). m * n = x}))\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "also"], ["proof (state)\nthis:\n  ((\\<lambda>(m, n). f m * g n / nat_power (m * n) s) abs_summable_on\n   UNIV) =\n  ((\\<lambda>(x, m, n). f m * g n / nat_power (m * n) s) abs_summable_on\n   (SIGMA x:UNIV. {(m, n). m * n = x}))\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have \"\\<dots> \\<longleftrightarrow> (\\<lambda>(x,(m,n)). f m * g n / nat_power x s) abs_summable_on \n                           (SIGMA x:UNIV. {(m,n). m * n = x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>(x, m, n). f m * g n / nat_power (m * n) s) abs_summable_on\n     (SIGMA x:UNIV. {(m, n). m * n = x})) =\n    ((\\<lambda>(x, m, n). f m * g n / nat_power x s) abs_summable_on\n     (SIGMA x:UNIV. {(m, n). m * n = x}))", "by (intro abs_summable_on_cong) auto"], ["proof (state)\nthis:\n  ((\\<lambda>(x, m, n). f m * g n / nat_power (m * n) s) abs_summable_on\n   (SIGMA x:UNIV. {(m, n). m * n = x})) =\n  ((\\<lambda>(x, m, n). f m * g n / nat_power x s) abs_summable_on\n   (SIGMA x:UNIV. {(m, n). m * n = x}))\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>(x, m, n). f m * g n / nat_power x s) abs_summable_on\n  (SIGMA x:UNIV. {(m, n). m * n = x})", "have summable'': \\<dots>"], ["proof (prove)\nusing this:\n  (\\<lambda>(x, m, n). f m * g n / nat_power x s) abs_summable_on\n  (SIGMA x:UNIV. {(m, n). m * n = x})\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, m, n). f m * g n / nat_power x s) abs_summable_on\n    (SIGMA x:UNIV. {(m, n). m * n = x})", "."], ["proof (state)\nthis:\n  (\\<lambda>(x, m, n). f m * g n / nat_power x s) abs_summable_on\n  (SIGMA x:UNIV. {(m, n). m * n = x})\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n 2. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "from abs_summable_on_Sigma_project1'[OF this]"], ["proof (chain)\npicking this:\n  \\<lbrakk>countable UNIV;\n   \\<And>x.\n      x \\<in> UNIV \\<Longrightarrow> countable {(m, n). m * n = x}\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        \\<Sum>\\<^sub>ay\\<in>{(m, n). m * n = x}.\n                          case y of\n                          (m, n) \\<Rightarrow>\n                            f m * g n / nat_power x s) abs_summable_on\n                    UNIV", "show summable''': \"summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>countable UNIV;\n   \\<And>x.\n      x \\<in> UNIV \\<Longrightarrow> countable {(m, n). m * n = x}\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x.\n                        \\<Sum>\\<^sub>ay\\<in>{(m, n). m * n = x}.\n                          case y of\n                          (m, n) \\<Rightarrow>\n                            f m * g n / nat_power x s) abs_summable_on\n                    UNIV\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))", "by (simp add: eq abs_summable_on_nat_iff')"], ["proof (state)\nthis:\n  summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have \"(\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s) =\n          (\\<Sum>\\<^sub>an. f n / nat_power n s) * (\\<Sum>\\<^sub>an. g n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s) =\n    (\\<Sum>\\<^sub>an. f n / nat_power n s) *\n    (\\<Sum>\\<^sub>an. g n / nat_power n s)", "using summable'"], ["proof (prove)\nusing this:\n  (\\<lambda>n. f n / nat_power n s) abs_summable_on ?A\n  (\\<lambda>n. g n / nat_power n s) abs_summable_on ?A\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s) =\n    (\\<Sum>\\<^sub>an. f n / nat_power n s) *\n    (\\<Sum>\\<^sub>an. g n / nat_power n s)", "by (simp add: infsetsum_nat')"], ["proof (state)\nthis:\n  (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s) =\n  (\\<Sum>\\<^sub>an. f n / nat_power n s) *\n  (\\<Sum>\\<^sub>an. g n / nat_power n s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s) =\n  (\\<Sum>\\<^sub>an. f n / nat_power n s) *\n  (\\<Sum>\\<^sub>an. g n / nat_power n s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have \"\\<dots> = (\\<Sum>\\<^sub>a(m,n). (f m / nat_power m s) * (g n / nat_power n s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an. f n / nat_power n s) *\n    (\\<Sum>\\<^sub>an. g n / nat_power n s) =\n    (\\<Sum>\\<^sub>a(m, n). f m / nat_power m s * (g n / nat_power n s))", "using summable'"], ["proof (prove)\nusing this:\n  (\\<lambda>n. f n / nat_power n s) abs_summable_on ?A\n  (\\<lambda>n. g n / nat_power n s) abs_summable_on ?A\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an. f n / nat_power n s) *\n    (\\<Sum>\\<^sub>an. g n / nat_power n s) =\n    (\\<Sum>\\<^sub>a(m, n). f m / nat_power m s * (g n / nat_power n s))", "by (subst infsetsum_product [symmetric]) simp_all"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an. f n / nat_power n s) *\n  (\\<Sum>\\<^sub>an. g n / nat_power n s) =\n  (\\<Sum>\\<^sub>a(m, n). f m / nat_power m s * (g n / nat_power n s))\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an. f n / nat_power n s) *\n  (\\<Sum>\\<^sub>an. g n / nat_power n s) =\n  (\\<Sum>\\<^sub>a(m, n). f m / nat_power m s * (g n / nat_power n s))\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have \"\\<dots> = (\\<Sum>\\<^sub>a(m,n). f m * g n / nat_power (m * n) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(m, n). f m / nat_power m s * (g n / nat_power n s)) =\n    (\\<Sum>\\<^sub>a(m, n). f m * g n / nat_power (m * n) s)", "using f_g"], ["proof (prove)\nusing this:\n  f ?a / nat_power ?a s * (g ?b / nat_power ?b s) =\n  f ?a * g ?b / nat_power (?a * ?b) s\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(m, n). f m / nat_power m s * (g n / nat_power n s)) =\n    (\\<Sum>\\<^sub>a(m, n). f m * g n / nat_power (m * n) s)", "by (intro infsetsum_cong refl) auto"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(m, n). f m / nat_power m s * (g n / nat_power n s)) =\n  (\\<Sum>\\<^sub>a(m, n). f m * g n / nat_power (m * n) s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(m, n). f m / nat_power m s * (g n / nat_power n s)) =\n  (\\<Sum>\\<^sub>a(m, n). f m * g n / nat_power (m * n) s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have \"\\<dots> = (\\<Sum>\\<^sub>a(x,(m,n))\\<in>(SIGMA x:UNIV. {(m,n). m * n = x}). \n                      f m * g n / nat_power (m * n) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(m, n). f m * g n / nat_power (m * n) s) =\n    (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n       f m * g n / nat_power (m * n) s)", "unfolding case_prod_unfold"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ap. f (fst p) * g (snd p) / nat_power (fst p * snd p) s) =\n    (\\<Sum>\\<^sub>ap\\<in>(SIGMA x:UNIV. {p. fst p * snd p = x}).\n       f (fst (snd p)) * g (snd (snd p)) /\n       nat_power (fst (snd p) * snd (snd p)) s)", "by (rule infsetsum_reindex_bij_betw [symmetric]) (auto simp: bij_betw_def inj_on_def image_iff)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(m, n). f m * g n / nat_power (m * n) s) =\n  (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n     f m * g n / nat_power (m * n) s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(m, n). f m * g n / nat_power (m * n) s) =\n  (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n     f m * g n / nat_power (m * n) s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have \"\\<dots> = (\\<Sum>\\<^sub>a(x,(m,n))\\<in>(SIGMA x:UNIV. {(m,n). m * n = x}). \n                      f m * g n / nat_power x s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n       f m * g n / nat_power (m * n) s) =\n    (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n       f m * g n / nat_power x s)", "by (intro infsetsum_cong refl) (auto simp: case_prod_unfold)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n     f m * g n / nat_power (m * n) s) =\n  (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n     f m * g n / nat_power x s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n     f m * g n / nat_power (m * n) s) =\n  (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n     f m * g n / nat_power x s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have \"\\<dots> = (\\<Sum>\\<^sub>ax. dirichlet_prod f g x / nat_power x s)\"\n    (is \"_ = infsetsum ?T _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n       f m * g n / nat_power x s) =\n    (\\<Sum>\\<^sub>ax. dirichlet_prod f g x / nat_power x s)", "using summable''"], ["proof (prove)\nusing this:\n  (\\<lambda>(x, m, n). f m * g n / nat_power x s) abs_summable_on\n  (SIGMA x:UNIV. {(m, n). m * n = x})\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n       f m * g n / nat_power x s) =\n    (\\<Sum>\\<^sub>ax. dirichlet_prod f g x / nat_power x s)", "by (subst infsetsum_Sigma) (auto simp: eq)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n     f m * g n / nat_power x s) =\n  (\\<Sum>\\<^sub>ax. dirichlet_prod f g x / nat_power x s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(x, m, n)\\<in>(SIGMA x:UNIV. {(m, n). m * n = x}).\n     f m * g n / nat_power x s) =\n  (\\<Sum>\\<^sub>ax. dirichlet_prod f g x / nat_power x s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "have \"\\<dots> = (\\<Sum>x. dirichlet_prod f g x / nat_power x s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ax. dirichlet_prod f g x / nat_power x s) =\n    (\\<Sum>x. dirichlet_prod f g x / nat_power x s)", "using summable'''"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (dirichlet_prod f g n / nat_power n s))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ax. dirichlet_prod f g x / nat_power x s) =\n    (\\<Sum>x. dirichlet_prod f g x / nat_power x s)", "by (intro infsetsum_nat') (simp_all add: abs_summable_on_nat_iff')"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ax. dirichlet_prod f g x / nat_power x s) =\n  (\\<Sum>x. dirichlet_prod f g x / nat_power x s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s) =\n  (\\<Sum>x. dirichlet_prod f g x / nat_power x s)", "show \"\\<dots> = (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)\""], ["proof (prove)\nusing this:\n  (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s) =\n  (\\<Sum>x. dirichlet_prod f g x / nat_power x s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x. dirichlet_prod f g x / nat_power x s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)", ".."], ["proof (state)\nthis:\n  (\\<Sum>x. dirichlet_prod f g x / nat_power x s) =\n  (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / nat_power n s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \n  fixes f g :: \"nat \\<Rightarrow> real\"\n  fixes s :: real\n  assumes \"f 0 = 0\" \"g 0 = 0\"\n  assumes summable: \"summable (\\<lambda>n. norm (f n / real n powr s))\"\n                    \"summable (\\<lambda>n. norm (g n / real n powr s))\"\n  shows   summable_dirichlet_prod_real: \"summable (\\<lambda>n. norm (dirichlet_prod f g n / real n powr s))\"\n    and   suminf_dirichlet_prod_real:\n            \"(\\<Sum>n. dirichlet_prod f g n / real n powr s) = \n               (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / real n powr s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / real n powr s)) &&&\n    (\\<Sum>n. dirichlet_prod f g n / real n powr s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / real n powr s)", "using summable_dirichlet_prod[of f g s] suminf_dirichlet_prod[of f g s] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>f 0 = 0; g 0 = 0;\n   summable (\\<lambda>n. norm (f n / nat_power n s));\n   summable (\\<lambda>n. norm (g n / nat_power n s))\\<rbrakk>\n  \\<Longrightarrow> summable\n                     (\\<lambda>n.\n                         norm (dirichlet_prod f g n / nat_power n s))\n  \\<lbrakk>f 0 = 0; g 0 = 0;\n   summable (\\<lambda>n. norm (f n / nat_power n s));\n   summable (\\<lambda>n. norm (g n / nat_power n s))\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>n. dirichlet_prod f g n / nat_power n s) =\n                    (\\<Sum>n. f n / nat_power n s) *\n                    (\\<Sum>n. g n / nat_power n s)\n  f 0 = 0\n  g 0 = 0\n  summable (\\<lambda>n. norm (f n / real n powr s))\n  summable (\\<lambda>n. norm (g n / real n powr s))\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (dirichlet_prod f g n / real n powr s)) &&&\n    (\\<Sum>n. dirichlet_prod f g n / real n powr s) =\n    (\\<Sum>n. f n / nat_power n s) * (\\<Sum>n. g n / real n powr s)", "by simp_all"], ["", "lemma fds_abs_converges_mult: \n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  assumes \"fds_abs_converges f s\" \"fds_abs_converges g s\"\n  shows   \"fds_abs_converges (f * g) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (f * g) s", "using summable_dirichlet_prod[OF _ _ assms[unfolded fds_abs_converges_def]]"], ["proof (prove)\nusing this:\n  \\<lbrakk>fds_nth f 0 = (0::'a); fds_nth g 0 = (0::'a)\\<rbrakk>\n  \\<Longrightarrow> summable\n                     (\\<lambda>n.\n                         norm\n                          (dirichlet_prod (fds_nth f) (fds_nth g) n /\n                           nat_power n s))\n\ngoal (1 subgoal):\n 1. fds_abs_converges (f * g) s", "by (simp add: fds_abs_converges_def fds_nth_mult)"], ["", "lemma fds_abs_converges_power: \n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  shows \"fds_abs_converges f s \\<Longrightarrow> fds_abs_converges (f ^ n) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges f s \\<Longrightarrow> fds_abs_converges (f ^ n) s", "by (induction n) (auto intro!: fds_abs_converges_mult)"], ["", "lemma fds_abs_converges_prod: \n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  shows \"(\\<And>x. x \\<in> A \\<Longrightarrow> fds_abs_converges (f x) s) \\<Longrightarrow> fds_abs_converges (prod f A) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> A \\<Longrightarrow>\n        fds_abs_converges (f x) s) \\<Longrightarrow>\n    fds_abs_converges (prod f A) s", "by (induction A rule: infinite_finite_induct) (auto intro!: fds_abs_converges_mult)"], ["", "lemma abs_conv_abscissa_mult_le:\n  \"abs_conv_abscissa (f * g :: 'a :: dirichlet_series fds) \\<le> \n      max (abs_conv_abscissa f) (abs_conv_abscissa g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (f * g)\n    \\<le> max (abs_conv_abscissa f) (abs_conv_abscissa g)", "proof (rule abs_conv_abscissa_leI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       max (abs_conv_abscissa f) (abs_conv_abscissa g)\n       < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges (f * g) s", "case (1 c')"], ["proof (state)\nthis:\n  max (abs_conv_abscissa f) (abs_conv_abscissa g) < ereal c'\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       max (abs_conv_abscissa f) (abs_conv_abscissa g)\n       < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges (f * g) s", "thus ?case"], ["proof (prove)\nusing this:\n  max (abs_conv_abscissa f) (abs_conv_abscissa g) < ereal c'\n\ngoal (1 subgoal):\n 1. \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges (f * g) s", "by (auto intro!: exI[of _ \"of_real c'\"] fds_abs_converges_mult intro: fds_abs_converges)"], ["proof (state)\nthis:\n  \\<exists>s. s \\<bullet> (1::'a) = c' \\<and> fds_abs_converges (f * g) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abs_conv_abscissa_mult_leI:\n  \"abs_conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow>\n   abs_conv_abscissa g \\<le> d \\<Longrightarrow> abs_conv_abscissa (f * g) \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abs_conv_abscissa f \\<le> d;\n     abs_conv_abscissa g \\<le> d\\<rbrakk>\n    \\<Longrightarrow> abs_conv_abscissa (f * g) \\<le> d", "using abs_conv_abscissa_mult_le[of f g]"], ["proof (prove)\nusing this:\n  abs_conv_abscissa (f * g)\n  \\<le> max (abs_conv_abscissa f) (abs_conv_abscissa g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abs_conv_abscissa f \\<le> d;\n     abs_conv_abscissa g \\<le> d\\<rbrakk>\n    \\<Longrightarrow> abs_conv_abscissa (f * g) \\<le> d", "by (auto simp add: le_max_iff_disj)"], ["", "lemma abs_conv_abscissa_shift [simp]:\n  \"abs_conv_abscissa (fds_shift c f) = abs_conv_abscissa (f :: 'a :: dirichlet_series fds) + c \\<bullet> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_shift c f) =\n    abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_shift c f) =\n    abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))", "have \"abs_conv_abscissa (fds_shift c f) \\<le> abs_conv_abscissa f + c \\<bullet> 1\" for c :: 'a and f"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_shift c f)\n    \\<le> abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))", "proof (rule abs_conv_abscissa_leI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))\n       < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and>\n          fds_abs_converges (fds_shift c f) s", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))\n       < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and>\n          fds_abs_converges (fds_shift c f) s", "assume \"abs_conv_abscissa f + c \\<bullet> 1 < ereal d\""], ["proof (state)\nthis:\n  abs_conv_abscissa f + ereal (c \\<bullet> (1::'a)) < ereal d\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))\n       < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and>\n          fds_abs_converges (fds_shift c f) s", "hence \"abs_conv_abscissa f < ereal (d - c \\<bullet> 1)\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa f + ereal (c \\<bullet> (1::'a)) < ereal d\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f < ereal (d - c \\<bullet> (1::'a))", "by (cases \"abs_conv_abscissa f\") auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f < ereal (d - c \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))\n       < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and>\n          fds_abs_converges (fds_shift c f) s", "hence \"fds_abs_converges (fds_shift c f) (of_real d)\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa f < ereal (d - c \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_shift c f) (of_real d)", "by (auto intro!: fds_abs_converges_shift fds_abs_converges simp: algebra_simps)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_shift c f) (of_real d)\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))\n       < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and>\n          fds_abs_converges (fds_shift c f) s", "thus \"\\<exists>s. s \\<bullet> 1 = d \\<and> fds_abs_converges (fds_shift c f) s\""], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_shift c f) (of_real d)\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       s \\<bullet> (1::'a) = d \\<and> fds_abs_converges (fds_shift c f) s", "by (auto intro!: exI[of _ \"of_real d\"])"], ["proof (state)\nthis:\n  \\<exists>s.\n     s \\<bullet> (1::'a) = d \\<and> fds_abs_converges (fds_shift c f) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_shift ?c ?f)\n  \\<le> abs_conv_abscissa ?f + ereal (?c \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_shift c f) =\n    abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))", "note * = this[of c f] this[of \"-c\" \"fds_shift c f\"]"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_shift c f)\n  \\<le> abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))\n  abs_conv_abscissa (fds_shift (- c) (fds_shift c f))\n  \\<le> abs_conv_abscissa (fds_shift c f) + ereal (- c \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_shift c f) =\n    abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_shift c f) =\n    abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))", "by (cases \"abs_conv_abscissa (fds_shift c f)\"; cases \"abs_conv_abscissa f\")\n                  (insert *, auto intro!: antisym)"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_shift c f) =\n  abs_conv_abscissa f + ereal (c \\<bullet> (1::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_mult:\n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  assumes \"fds_abs_converges f s\" \"fds_abs_converges g s\"\n  shows   \"eval_fds (f * g) s = eval_fds f s * eval_fds g s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (f * g) s = eval_fds f s * eval_fds g s", "using suminf_dirichlet_prod[OF _ _ assms[unfolded fds_abs_converges_def]]"], ["proof (prove)\nusing this:\n  \\<lbrakk>fds_nth f 0 = (0::'a); fds_nth g 0 = (0::'a)\\<rbrakk>\n  \\<Longrightarrow> (\\<Sum>n.\n                        dirichlet_prod (fds_nth f) (fds_nth g) n /\n                        nat_power n s) =\n                    (\\<Sum>n. fds_nth f n / nat_power n s) *\n                    (\\<Sum>n. fds_nth g n / nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds (f * g) s = eval_fds f s * eval_fds g s", "by (simp_all add: eval_fds_def fds_nth_mult)"], ["", "lemma eval_fds_power:\n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  assumes \"fds_abs_converges f s\"\n  shows \"eval_fds (f ^ n) s = eval_fds f s ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (f ^ n) s = eval_fds f s ^ n", "using assms"], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. eval_fds (f ^ n) s = eval_fds f s ^ n", "by (induction n) (simp_all add: eval_fds_mult fds_abs_converges_power)"], ["", "lemma eval_fds_prod:\n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  assumes \"(\\<And>x. x \\<in> A \\<Longrightarrow> fds_abs_converges (f x) s)\"\n  shows \"eval_fds (prod f A) s = (\\<Prod>x\\<in>A. eval_fds (f x) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (prod f A) s = (\\<Prod>x\\<in>A. eval_fds (f x) s)", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> fds_abs_converges (f ?x) s\n\ngoal (1 subgoal):\n 1. eval_fds (prod f A) s = (\\<Prod>x\\<in>A. eval_fds (f x) s)", "by (induction A rule: infinite_finite_induct) (auto simp: eval_fds_mult fds_abs_converges_prod)"], ["", "lemma eval_fds_inverse:\n  fixes s :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology}\"\n  assumes \"fds_abs_converges f s\" \"fds_abs_converges (inverse f) s\" \"fds_nth f 1 \\<noteq> 0\"\n  shows   \"eval_fds (inverse f) s = inverse (eval_fds f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (inverse f) s = inverse (eval_fds f s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (inverse f) s = inverse (eval_fds f s)", "have \"eval_fds (inverse f * f) s = eval_fds (inverse f) s * eval_fds f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (inverse f * f) s = eval_fds (inverse f) s * eval_fds f s", "by (intro eval_fds_mult assms)"], ["proof (state)\nthis:\n  eval_fds (inverse f * f) s = eval_fds (inverse f) s * eval_fds f s\n\ngoal (1 subgoal):\n 1. eval_fds (inverse f) s = inverse (eval_fds f s)", "also"], ["proof (state)\nthis:\n  eval_fds (inverse f * f) s = eval_fds (inverse f) s * eval_fds f s\n\ngoal (1 subgoal):\n 1. eval_fds (inverse f) s = inverse (eval_fds f s)", "have \"inverse f * f = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse f * f = 1", "by (intro fds_left_inverse assms)"], ["proof (state)\nthis:\n  inverse f * f = 1\n\ngoal (1 subgoal):\n 1. eval_fds (inverse f) s = inverse (eval_fds f s)", "also"], ["proof (state)\nthis:\n  inverse f * f = 1\n\ngoal (1 subgoal):\n 1. eval_fds (inverse f) s = inverse (eval_fds f s)", "have \"eval_fds 1 s = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds 1 s = (1::'a)", "by simp"], ["proof (state)\nthis:\n  eval_fds 1 s = (1::'a)\n\ngoal (1 subgoal):\n 1. eval_fds (inverse f) s = inverse (eval_fds f s)", "finally"], ["proof (chain)\npicking this:\n  (1::'a) = eval_fds (inverse f) s * eval_fds f s", "show ?thesis"], ["proof (prove)\nusing this:\n  (1::'a) = eval_fds (inverse f) s * eval_fds f s\n\ngoal (1 subgoal):\n 1. eval_fds (inverse f) s = inverse (eval_fds f s)", "by (auto simp: divide_simps)"], ["proof (state)\nthis:\n  eval_fds (inverse f) s = inverse (eval_fds f s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_integral_has_field_derivative:\n  fixes s :: \"'a :: dirichlet_series\"\n  assumes \"ereal (s \\<bullet> 1) > abs_conv_abscissa f\"\n  assumes \"fds_nth f 1 = 0\"\n  shows   \"(eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)", "have \"conv_abscissa (fds_integral c f) \\<le> abs_conv_abscissa (fds_integral c f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (fds_integral c f)\n    \\<le> abs_conv_abscissa (fds_integral c f)", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa (fds_integral c f)\n  \\<le> abs_conv_abscissa (fds_integral c f)\n\ngoal (1 subgoal):\n 1. (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)", "also"], ["proof (state)\nthis:\n  conv_abscissa (fds_integral c f)\n  \\<le> abs_conv_abscissa (fds_integral c f)\n\ngoal (1 subgoal):\n 1. (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)", "from assms"], ["proof (chain)\npicking this:\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a))\n  fds_nth f 1 = (0::'a)", "have \"\\<dots> < ereal (s \\<bullet> 1)\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a))\n  fds_nth f 1 = (0::'a)\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_integral c f) < ereal (s \\<bullet> (1::'a))", "by (simp add: abs_conv_abscissa_integral)"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_integral c f) < ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)", "finally"], ["proof (chain)\npicking this:\n  conv_abscissa (fds_integral c f) < ereal (s \\<bullet> (1::'a))", "have \"(eval_fds (fds_integral c f) has_field_derivative \n                  eval_fds (fds_deriv (fds_integral c f)) s) (at s)\""], ["proof (prove)\nusing this:\n  conv_abscissa (fds_integral c f) < ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. (eval_fds (fds_integral c f) has_field_derivative\n     eval_fds (fds_deriv (fds_integral c f)) s)\n     (at s)", "by (intro derivative_eq_intros) auto"], ["proof (state)\nthis:\n  (eval_fds (fds_integral c f) has_field_derivative\n   eval_fds (fds_deriv (fds_integral c f)) s)\n   (at s)\n\ngoal (1 subgoal):\n 1. (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)", "also"], ["proof (state)\nthis:\n  (eval_fds (fds_integral c f) has_field_derivative\n   eval_fds (fds_deriv (fds_integral c f)) s)\n   (at s)\n\ngoal (1 subgoal):\n 1. (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)", "from assms"], ["proof (chain)\npicking this:\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a))\n  fds_nth f 1 = (0::'a)", "have \"fds_deriv (fds_integral c f) = f\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a))\n  fds_nth f 1 = (0::'a)\n\ngoal (1 subgoal):\n 1. fds_deriv (fds_integral c f) = f", "by simp"], ["proof (state)\nthis:\n  fds_deriv (fds_integral c f) = f\n\ngoal (1 subgoal):\n 1. (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)", "finally"], ["proof (chain)\npicking this:\n  (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)", "show ?thesis"], ["proof (prove)\nusing this:\n  (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)\n\ngoal (1 subgoal):\n 1. (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)", "."], ["proof (state)\nthis:\n  (eval_fds (fds_integral c f) has_field_derivative eval_fds f s) (at s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma holomorphic_fds_eval [holomorphic_intros]:\n  \"A \\<subseteq> {z. Re z > conv_abscissa f} \\<Longrightarrow> eval_fds f holomorphic_on A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> {z. conv_abscissa f < ereal (Re z)} \\<Longrightarrow>\n    eval_fds f holomorphic_on A", "unfolding holomorphic_on_def field_differentiable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> {z. conv_abscissa f < ereal (Re z)} \\<Longrightarrow>\n    \\<forall>x\\<in>A.\n       \\<exists>f'. (eval_fds f has_field_derivative f') (at x within A)", "by (rule ballI exI derivative_intros)+ auto"], ["", "lemma analytic_fds_eval [holomorphic_intros]:\n  assumes \"A \\<subseteq> {z. Re z > conv_abscissa f}\"\n  shows   \"eval_fds f analytic_on A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds f analytic_on A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds f analytic_on A", "have \"eval_fds f analytic_on {z. Re z > conv_abscissa f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds f analytic_on {z. conv_abscissa f < ereal (Re z)}", "proof (subst analytic_on_open)"], ["proof (state)\ngoal (2 subgoals):\n 1. open {z. conv_abscissa f < ereal (Re z)}\n 2. eval_fds f holomorphic_on {z. conv_abscissa f < ereal (Re z)}", "show \"open {z. Re z > conv_abscissa f}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open {z. conv_abscissa f < ereal (Re z)}", "by (cases \"conv_abscissa f\") (simp_all add: open_halfspace_Re_gt)"], ["proof (state)\nthis:\n  open {z. conv_abscissa f < ereal (Re z)}\n\ngoal (1 subgoal):\n 1. eval_fds f holomorphic_on {z. conv_abscissa f < ereal (Re z)}", "qed (intro holomorphic_intros, simp_all)"], ["proof (state)\nthis:\n  eval_fds f analytic_on {z. conv_abscissa f < ereal (Re z)}\n\ngoal (1 subgoal):\n 1. eval_fds f analytic_on A", "from analytic_on_subset[OF this assms]"], ["proof (chain)\npicking this:\n  eval_fds f analytic_on A", "show ?thesis"], ["proof (prove)\nusing this:\n  eval_fds f analytic_on A\n\ngoal (1 subgoal):\n 1. eval_fds f analytic_on A", "."], ["proof (state)\nthis:\n  eval_fds f analytic_on A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conv_abscissa_0 [simp]: \n  \"conv_abscissa (0 :: 'a :: dirichlet_series fds) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa 0 = - \\<infinity>", "by (auto simp: conv_abscissa_MInf_iff)"], ["", "lemma abs_conv_abscissa_0 [simp]: \n  \"abs_conv_abscissa (0 :: 'a :: dirichlet_series fds) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa 0 = - \\<infinity>", "by (auto simp: abs_conv_abscissa_MInf_iff)"], ["", "lemma conv_abscissa_1 [simp]: \n  \"conv_abscissa (1 :: 'a :: dirichlet_series fds) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa 1 = - \\<infinity>", "by (auto simp: conv_abscissa_MInf_iff)"], ["", "lemma abs_conv_abscissa_1 [simp]: \n  \"abs_conv_abscissa (1 :: 'a :: dirichlet_series fds) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa 1 = - \\<infinity>", "by (auto simp: abs_conv_abscissa_MInf_iff)"], ["", "lemma conv_abscissa_const [simp]: \n  \"conv_abscissa (fds_const (c :: 'a :: dirichlet_series)) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (fds_const c) = - \\<infinity>", "by (auto simp: conv_abscissa_MInf_iff)"], ["", "lemma abs_conv_abscissa_const [simp]: \n  \"abs_conv_abscissa (fds_const (c :: 'a :: dirichlet_series)) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_const c) = - \\<infinity>", "by (auto simp: abs_conv_abscissa_MInf_iff)"], ["", "lemma conv_abscissa_numeral [simp]: \n  \"conv_abscissa (numeral n :: 'a :: dirichlet_series fds) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (numeral n) = - \\<infinity>", "by (auto simp: numeral_fds)"], ["", "lemma abs_conv_abscissa_numeral [simp]: \n  \"abs_conv_abscissa (numeral n :: 'a :: dirichlet_series fds) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (numeral n) = - \\<infinity>", "by (auto simp: numeral_fds)"], ["", "lemma abs_conv_abscissa_power_le:\n  \"abs_conv_abscissa (f ^ n :: 'a :: dirichlet_series fds) \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (f ^ n) \\<le> abs_conv_abscissa f", "by (induction n) (auto intro!: order.trans[OF abs_conv_abscissa_mult_le])"], ["", "lemma abs_conv_abscissa_power_leI:\n  \"abs_conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow> abs_conv_abscissa (f ^ n) \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> d \\<Longrightarrow>\n    abs_conv_abscissa (f ^ n) \\<le> d", "by (rule order.trans[OF abs_conv_abscissa_power_le])"], ["", "lemma abs_conv_abscissa_prod_le:\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> abs_conv_abscissa (f x :: 'a :: dirichlet_series fds) \\<le> d\"\n  shows   \"abs_conv_abscissa (prod f A) \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (prod f A) \\<le> d", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> abs_conv_abscissa (f ?x) \\<le> d\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (prod f A) \\<le> d", "by (induction A rule: infinite_finite_induct) (auto intro!: abs_conv_abscissa_mult_leI)"], ["", "lemma conv_abscissa_add_le:\n  \"conv_abscissa (f + g :: 'a :: dirichlet_series fds) \\<le> max (conv_abscissa f) (conv_abscissa g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (f + g) \\<le> max (conv_abscissa f) (conv_abscissa g)", "by (rule conv_abscissa_leI_weak) (auto intro!: fds_converges_add intro: fds_converges)"], ["", "lemma conv_abscissa_add_leI:\n  \"conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow> conv_abscissa g \\<le> d \\<Longrightarrow> \n     conv_abscissa (f + g) \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>conv_abscissa f \\<le> d; conv_abscissa g \\<le> d\\<rbrakk>\n    \\<Longrightarrow> conv_abscissa (f + g) \\<le> d", "using conv_abscissa_add_le[of f g]"], ["proof (prove)\nusing this:\n  conv_abscissa (f + g) \\<le> max (conv_abscissa f) (conv_abscissa g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>conv_abscissa f \\<le> d; conv_abscissa g \\<le> d\\<rbrakk>\n    \\<Longrightarrow> conv_abscissa (f + g) \\<le> d", "by (auto simp: le_max_iff_disj)"], ["", "lemma conv_abscissa_sum_leI:\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> conv_abscissa (f x :: 'a :: dirichlet_series fds) \\<le> d\"\n  shows   \"conv_abscissa (sum f A) \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (sum f A) \\<le> d", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> conv_abscissa (f ?x) \\<le> d\n\ngoal (1 subgoal):\n 1. conv_abscissa (sum f A) \\<le> d", "by (induction A rule: infinite_finite_induct) (auto intro!: conv_abscissa_add_leI)"], ["", "lemma abs_conv_abscissa_add_le:\n  \"abs_conv_abscissa (f + g :: 'a :: dirichlet_series fds) \\<le> max (abs_conv_abscissa f) (abs_conv_abscissa g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (f + g)\n    \\<le> max (abs_conv_abscissa f) (abs_conv_abscissa g)", "by (rule abs_conv_abscissa_leI_weak) (auto intro!: fds_abs_converges_add intro: fds_abs_converges)"], ["", "lemma abs_conv_abscissa_add_leI:\n  \"abs_conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow> abs_conv_abscissa g \\<le> d \\<Longrightarrow> \n     abs_conv_abscissa (f + g) \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abs_conv_abscissa f \\<le> d;\n     abs_conv_abscissa g \\<le> d\\<rbrakk>\n    \\<Longrightarrow> abs_conv_abscissa (f + g) \\<le> d", "using abs_conv_abscissa_add_le[of f g]"], ["proof (prove)\nusing this:\n  abs_conv_abscissa (f + g)\n  \\<le> max (abs_conv_abscissa f) (abs_conv_abscissa g)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abs_conv_abscissa f \\<le> d;\n     abs_conv_abscissa g \\<le> d\\<rbrakk>\n    \\<Longrightarrow> abs_conv_abscissa (f + g) \\<le> d", "by (auto simp: le_max_iff_disj)"], ["", "lemma abs_conv_abscissa_sum_leI:\n  assumes \"\\<And>x. x \\<in> A \\<Longrightarrow> abs_conv_abscissa (f x :: 'a :: dirichlet_series fds) \\<le> d\"\n  shows   \"abs_conv_abscissa (sum f A) \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (sum f A) \\<le> d", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow> abs_conv_abscissa (f ?x) \\<le> d\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (sum f A) \\<le> d", "by (induction A rule: infinite_finite_induct) (auto intro!: abs_conv_abscissa_add_leI)"], ["", "lemma fds_converges_cmult_left [intro]:\n  assumes \"fds_converges f s\"\n  shows   \"fds_converges (fds_const c * f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (fds_const c * f) s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_converges (fds_const c * f) s", "from assms"], ["proof (chain)\npicking this:\n  fds_converges f s", "have \"summable (\\<lambda>n. c * (fds_nth f n / nat_power n s))\""], ["proof (prove)\nusing this:\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. c * (fds_nth f n / nat_power n s))", "by (intro summable_mult) (auto simp: fds_converges_def)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. c * (fds_nth f n / nat_power n s))\n\ngoal (1 subgoal):\n 1. fds_converges (fds_const c * f) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. c * (fds_nth f n / nat_power n s))\n\ngoal (1 subgoal):\n 1. fds_converges (fds_const c * f) s", "by (simp add: fds_converges_def mult_ac)"], ["proof (state)\nthis:\n  fds_converges (fds_const c * f) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_converges_cmult_right [intro]:\n  assumes \"fds_converges f s\"\n  shows   \"fds_converges (f * fds_const c) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (f * fds_const c) s", "using fds_converges_cmult_left[OF assms]"], ["proof (prove)\nusing this:\n  fds_converges (fds_const ?c * f) s\n\ngoal (1 subgoal):\n 1. fds_converges (f * fds_const c) s", "by (simp add: mult_ac)"], ["", "lemma conv_abscissa_cmult_left [simp]:\n  fixes c :: \"'a :: dirichlet_series\" assumes \"c \\<noteq> 0\"\n  shows \"conv_abscissa (fds_const c * f) = conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (fds_const c * f) = conv_abscissa f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. conv_abscissa (fds_const c * f) = conv_abscissa f", "have \"fds_converges (fds_const c * f) s \\<longleftrightarrow> fds_converges f s\" for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (fds_const c * f) s = fds_converges f s", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_converges (fds_const c * f) s \\<Longrightarrow> fds_converges f s\n 2. fds_converges f s \\<Longrightarrow> fds_converges (fds_const c * f) s", "assume \"fds_converges (fds_const c * f) s\""], ["proof (state)\nthis:\n  fds_converges (fds_const c * f) s\n\ngoal (2 subgoals):\n 1. fds_converges (fds_const c * f) s \\<Longrightarrow> fds_converges f s\n 2. fds_converges f s \\<Longrightarrow> fds_converges (fds_const c * f) s", "hence \"fds_converges (fds_const (inverse c) * (fds_const c * f)) s\""], ["proof (prove)\nusing this:\n  fds_converges (fds_const c * f) s\n\ngoal (1 subgoal):\n 1. fds_converges (fds_const (inverse c) * (fds_const c * f)) s", "by (rule fds_converges_cmult_left)"], ["proof (state)\nthis:\n  fds_converges (fds_const (inverse c) * (fds_const c * f)) s\n\ngoal (2 subgoals):\n 1. fds_converges (fds_const c * f) s \\<Longrightarrow> fds_converges f s\n 2. fds_converges f s \\<Longrightarrow> fds_converges (fds_const c * f) s", "also"], ["proof (state)\nthis:\n  fds_converges (fds_const (inverse c) * (fds_const c * f)) s\n\ngoal (2 subgoals):\n 1. fds_converges (fds_const c * f) s \\<Longrightarrow> fds_converges f s\n 2. fds_converges f s \\<Longrightarrow> fds_converges (fds_const c * f) s", "have \"fds_const (inverse c) * (fds_const c * f) = fds_const (inverse c * c) * f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (inverse c) * (fds_const c * f) =\n    fds_const (inverse c * c) * f", "by simp"], ["proof (state)\nthis:\n  fds_const (inverse c) * (fds_const c * f) = fds_const (inverse c * c) * f\n\ngoal (2 subgoals):\n 1. fds_converges (fds_const c * f) s \\<Longrightarrow> fds_converges f s\n 2. fds_converges f s \\<Longrightarrow> fds_converges (fds_const c * f) s", "also"], ["proof (state)\nthis:\n  fds_const (inverse c) * (fds_const c * f) = fds_const (inverse c * c) * f\n\ngoal (2 subgoals):\n 1. fds_converges (fds_const c * f) s \\<Longrightarrow> fds_converges f s\n 2. fds_converges f s \\<Longrightarrow> fds_converges (fds_const c * f) s", "have \"inverse c * c = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse c * c = (1::'a)", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. inverse c * c = (1::'a)", "by simp"], ["proof (state)\nthis:\n  inverse c * c = (1::'a)\n\ngoal (2 subgoals):\n 1. fds_converges (fds_const c * f) s \\<Longrightarrow> fds_converges f s\n 2. fds_converges f s \\<Longrightarrow> fds_converges (fds_const c * f) s", "finally"], ["proof (chain)\npicking this:\n  fds_converges (fds_const (1::'a) * f) s", "show \"fds_converges f s\""], ["proof (prove)\nusing this:\n  fds_converges (fds_const (1::'a) * f) s\n\ngoal (1 subgoal):\n 1. fds_converges f s", "by simp"], ["proof (state)\nthis:\n  fds_converges f s\n\ngoal (1 subgoal):\n 1. fds_converges f s \\<Longrightarrow> fds_converges (fds_const c * f) s", "qed auto"], ["proof (state)\nthis:\n  fds_converges (fds_const c * f) ?s = fds_converges f ?s\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_const c * f) = conv_abscissa f", "thus ?thesis"], ["proof (prove)\nusing this:\n  fds_converges (fds_const c * f) ?s = fds_converges f ?s\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_const c * f) = conv_abscissa f", "by (simp add: conv_abscissa_def)"], ["proof (state)\nthis:\n  conv_abscissa (fds_const c * f) = conv_abscissa f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conv_abscissa_cmult_right [simp]:\n  fixes c :: \"'a :: dirichlet_series\" assumes \"c \\<noteq> 0\"\n  shows \"conv_abscissa (f * fds_const c) = conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (f * fds_const c) = conv_abscissa f", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. conv_abscissa (f * fds_const c) = conv_abscissa f", "by (subst mult.commute) auto"], ["", "lemma abs_conv_abscissa_cmult: \n  fixes c :: \"'a :: dirichlet_series\" assumes \"c \\<noteq> 0\"\n  shows \"abs_conv_abscissa (fds_const c * f) = abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_const c * f) = abs_conv_abscissa f", "proof (intro antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. abs_conv_abscissa (fds_const c * f) \\<le> abs_conv_abscissa f\n 2. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_const c * f)", "have \"abs_conv_abscissa (fds_const (inverse c) * (fds_const c * f)) \\<le> \n          abs_conv_abscissa (fds_const c * f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_const (inverse c) * (fds_const c * f))\n    \\<le> abs_conv_abscissa (fds_const c * f)", "using abs_conv_abscissa_mult_le[of \"fds_const (inverse c)\" \"fds_const c * f\"]"], ["proof (prove)\nusing this:\n  abs_conv_abscissa (fds_const (inverse c) * (fds_const c * f))\n  \\<le> max (abs_conv_abscissa (fds_const (inverse c)))\n         (abs_conv_abscissa (fds_const c * f))\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_const (inverse c) * (fds_const c * f))\n    \\<le> abs_conv_abscissa (fds_const c * f)", "by (auto simp: max_def)"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_const (inverse c) * (fds_const c * f))\n  \\<le> abs_conv_abscissa (fds_const c * f)\n\ngoal (2 subgoals):\n 1. abs_conv_abscissa (fds_const c * f) \\<le> abs_conv_abscissa f\n 2. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_const c * f)", "also"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_const (inverse c) * (fds_const c * f))\n  \\<le> abs_conv_abscissa (fds_const c * f)\n\ngoal (2 subgoals):\n 1. abs_conv_abscissa (fds_const c * f) \\<le> abs_conv_abscissa f\n 2. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_const c * f)", "have \"fds_const (inverse c) * (fds_const c * f) = fds_const (inverse c * c) * f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (inverse c) * (fds_const c * f) =\n    fds_const (inverse c * c) * f", "by (simp add: mult_ac)"], ["proof (state)\nthis:\n  fds_const (inverse c) * (fds_const c * f) = fds_const (inverse c * c) * f\n\ngoal (2 subgoals):\n 1. abs_conv_abscissa (fds_const c * f) \\<le> abs_conv_abscissa f\n 2. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_const c * f)", "also"], ["proof (state)\nthis:\n  fds_const (inverse c) * (fds_const c * f) = fds_const (inverse c * c) * f\n\ngoal (2 subgoals):\n 1. abs_conv_abscissa (fds_const c * f) \\<le> abs_conv_abscissa f\n 2. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_const c * f)", "have \"inverse c * c = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse c * c = (1::'a)", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. inverse c * c = (1::'a)", "by simp"], ["proof (state)\nthis:\n  inverse c * c = (1::'a)\n\ngoal (2 subgoals):\n 1. abs_conv_abscissa (fds_const c * f) \\<le> abs_conv_abscissa f\n 2. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_const c * f)", "finally"], ["proof (chain)\npicking this:\n  abs_conv_abscissa (fds_const (1::'a) * f)\n  \\<le> abs_conv_abscissa (fds_const c * f)", "show \"abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_const c * f)\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa (fds_const (1::'a) * f)\n  \\<le> abs_conv_abscissa (fds_const c * f)\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_const c * f)", "by simp"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_const c * f)\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_const c * f) \\<le> abs_conv_abscissa f", "qed (insert abs_conv_abscissa_mult_le[of \"fds_const c\" f], auto simp: max_def)"], ["", "lemma conv_abscissa_minus [simp]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows \"conv_abscissa (-f) = conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (- f) = conv_abscissa f", "using conv_abscissa_cmult_left[of \"-1\" f]"], ["proof (prove)\nusing this:\n  - (1::'a) \\<noteq> (0::'a) \\<Longrightarrow>\n  conv_abscissa (fds_const (- (1::'a)) * f) = conv_abscissa f\n\ngoal (1 subgoal):\n 1. conv_abscissa (- f) = conv_abscissa f", "by simp"], ["", "lemma abs_conv_abscissa_minus [simp]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows \"abs_conv_abscissa (-f) = abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (- f) = abs_conv_abscissa f", "using abs_conv_abscissa_cmult[of \"-1\" f]"], ["proof (prove)\nusing this:\n  - (1::'a) \\<noteq> (0::'a) \\<Longrightarrow>\n  abs_conv_abscissa (fds_const (- (1::'a)) * f) = abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (- f) = abs_conv_abscissa f", "by simp"], ["", "lemma conv_abscissa_diff_le:\n  \"conv_abscissa (f - g :: 'a :: dirichlet_series fds) \\<le> max (conv_abscissa f) (conv_abscissa g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (f - g) \\<le> max (conv_abscissa f) (conv_abscissa g)", "using conv_abscissa_add_le[of f \"-g\"]"], ["proof (prove)\nusing this:\n  conv_abscissa (f + - g) \\<le> max (conv_abscissa f) (conv_abscissa (- g))\n\ngoal (1 subgoal):\n 1. conv_abscissa (f - g) \\<le> max (conv_abscissa f) (conv_abscissa g)", "by simp"], ["", "lemma conv_abscissa_diff_leI:\n  \"conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow> conv_abscissa g \\<le> d \\<Longrightarrow> \n     conv_abscissa (f - g) \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>conv_abscissa f \\<le> d; conv_abscissa g \\<le> d\\<rbrakk>\n    \\<Longrightarrow> conv_abscissa (f - g) \\<le> d", "using conv_abscissa_add_le[of f \"-g\"]"], ["proof (prove)\nusing this:\n  conv_abscissa (f + - g) \\<le> max (conv_abscissa f) (conv_abscissa (- g))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>conv_abscissa f \\<le> d; conv_abscissa g \\<le> d\\<rbrakk>\n    \\<Longrightarrow> conv_abscissa (f - g) \\<le> d", "by (auto simp: le_max_iff_disj)"], ["", "lemma abs_conv_abscissa_diff_le:\n  \"abs_conv_abscissa (f - g :: 'a :: dirichlet_series fds) \\<le>\n     max (abs_conv_abscissa f) (abs_conv_abscissa g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (f - g)\n    \\<le> max (abs_conv_abscissa f) (abs_conv_abscissa g)", "using abs_conv_abscissa_add_le[of f \"-g\"]"], ["proof (prove)\nusing this:\n  abs_conv_abscissa (f + - g)\n  \\<le> max (abs_conv_abscissa f) (abs_conv_abscissa (- g))\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (f - g)\n    \\<le> max (abs_conv_abscissa f) (abs_conv_abscissa g)", "by simp"], ["", "lemma abs_conv_abscissa_diff_leI:\n  \"abs_conv_abscissa (f :: 'a :: dirichlet_series fds) \\<le> d \\<Longrightarrow> abs_conv_abscissa g \\<le> d \\<Longrightarrow> \n     abs_conv_abscissa (f - g) \\<le> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>abs_conv_abscissa f \\<le> d;\n     abs_conv_abscissa g \\<le> d\\<rbrakk>\n    \\<Longrightarrow> abs_conv_abscissa (f - g) \\<le> d", "using abs_conv_abscissa_add_le[of f \"-g\"]"], ["proof (prove)\nusing this:\n  abs_conv_abscissa (f + - g)\n  \\<le> max (abs_conv_abscissa f) (abs_conv_abscissa (- g))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>abs_conv_abscissa f \\<le> d;\n     abs_conv_abscissa g \\<le> d\\<rbrakk>\n    \\<Longrightarrow> abs_conv_abscissa (f - g) \\<le> d", "by (auto simp: le_max_iff_disj)"], ["", "lemmas eval_fds_integral_has_field_derivative' [derivative_intros] = \n  DERIV_chain'[OF _ eval_fds_integral_has_field_derivative]"], ["", "lemma abs_conv_abscissa_completely_multiplicative_log_deriv:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" \"fds_nth f 1 \\<noteq> 0\"\n  shows   \"abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "have \"fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f", "using assms"], ["proof (prove)\nusing this:\n  completely_multiplicative_function (fds_nth f)\n  fds_nth f 1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f", "by (subst completely_multiplicative_fds_deriv') simp_all"], ["proof (state)\nthis:\n  fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "also"], ["proof (state)\nthis:\n  fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "have \"\\<dots> / f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * (f * inverse f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f / f =\n    - fds (\\<lambda>n. fds_nth f n * mangoldt n) * (f * inverse f)", "by (simp add: divide_fds_def)"], ["proof (state)\nthis:\n  - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f / f =\n  - fds (\\<lambda>n. fds_nth f n * mangoldt n) * (f * inverse f)\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "also"], ["proof (state)\nthis:\n  - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f / f =\n  - fds (\\<lambda>n. fds_nth f n * mangoldt n) * (f * inverse f)\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "have \"f * inverse f = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * inverse f = 1", "using assms"], ["proof (prove)\nusing this:\n  completely_multiplicative_function (fds_nth f)\n  fds_nth f 1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f * inverse f = 1", "by (intro fds_right_inverse)"], ["proof (state)\nthis:\n  f * inverse f = 1\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "finally"], ["proof (chain)\npicking this:\n  fds_deriv f / f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * 1", "have \"fds_deriv f / f = - fds (\\<lambda>n. fds_nth f n * mangoldt n)\""], ["proof (prove)\nusing this:\n  fds_deriv f / f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * 1\n\ngoal (1 subgoal):\n 1. fds_deriv f / f = - fds (\\<lambda>n. fds_nth f n * mangoldt n)", "by simp"], ["proof (state)\nthis:\n  fds_deriv f / f = - fds (\\<lambda>n. fds_nth f n * mangoldt n)\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "also"], ["proof (state)\nthis:\n  fds_deriv f / f = - fds (\\<lambda>n. fds_nth f n * mangoldt n)\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "have \"abs_conv_abscissa \\<dots> = \n               abs_conv_abscissa (fds (\\<lambda>n. fds_nth f n * mangoldt n))\" \n    (is \"_ = abs_conv_abscissa ?f\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (- fds (\\<lambda>n. fds_nth f n * mangoldt n)) =\n    abs_conv_abscissa (fds (\\<lambda>n. fds_nth f n * mangoldt n))", "by (rule abs_conv_abscissa_minus)"], ["proof (state)\nthis:\n  abs_conv_abscissa (- fds (\\<lambda>n. fds_nth f n * mangoldt n)) =\n  abs_conv_abscissa (fds (\\<lambda>n. fds_nth f n * mangoldt n))\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "also"], ["proof (state)\nthis:\n  abs_conv_abscissa (- fds (\\<lambda>n. fds_nth f n * mangoldt n)) =\n  abs_conv_abscissa (fds (\\<lambda>n. fds_nth f n * mangoldt n))\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "have \"\\<dots> \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds (\\<lambda>n. fds_nth f n * mangoldt n))\n    \\<le> abs_conv_abscissa f", "proof (rule abs_conv_abscissa_leI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa f < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and>\n          fds_abs_converges (fds (\\<lambda>n. fds_nth f n * mangoldt n)) s", "case (1 c)"], ["proof (state)\nthis:\n  abs_conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa f < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and>\n          fds_abs_converges (fds (\\<lambda>n. fds_nth f n * mangoldt n)) s", "have \"fds_abs_converges ?f (of_real c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds (\\<lambda>n. fds_nth f n * mangoldt n))\n     (of_real c)", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))", "proof (rule summable_comparison_test_ev)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm\n        (norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))\n       \\<le> ?g n\n 2. summable ?g", "from 1"], ["proof (chain)\npicking this:\n  abs_conv_abscissa f < ereal c", "have \"fds_abs_converges (fds_deriv f) (of_real c)\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_deriv f) (of_real c)", "by (intro fds_abs_converges) (auto simp: abs_conv_abscissa_deriv)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_deriv f) (of_real c)\n\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm\n        (norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))\n       \\<le> ?g n\n 2. summable ?g", "thus \"summable (\\<lambda>n. \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) / norm (nat_power n (of_real c :: 'a)))\""], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_deriv f) (of_real c)\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n         norm (nat_power n (of_real c)))", "by (simp add: fds_abs_converges_def fds_deriv_def fds_nth_fds' \n                      scaleR_conv_of_real powr_minus norm_mult norm_divide norm_nat_power)"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n.\n       \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n       norm (nat_power n (of_real c)))\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm\n        (norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))\n       \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n             norm (nat_power n (of_real c))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm\n        (norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))\n       \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n             norm (nat_power n (of_real c))", "show \"\\<forall>\\<^sub>F n in sequentially.\n              norm (norm (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n                 nat_power n (of_real c)))\n              \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) / norm (nat_power n (of_real c) :: 'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm\n        (norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))\n       \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n             norm (nat_power n (of_real c))", "using eventually_gt_at_top[of 0]"], ["proof (prove)\nusing this:\n  eventually ((<) (0::?'b1)) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm\n        (norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))\n       \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n             norm (nat_power n (of_real c))", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       norm\n        (norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))\n       \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n             norm (nat_power n (of_real c))", "case (elim n)"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       norm\n        (norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))\n       \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n             norm (nat_power n (of_real c))", "have \"norm (norm (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n                  nat_power n (of_real c))) =\n                norm (fds_nth f n) * mangoldt n / real n powr c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm\n     (norm\n       (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n        nat_power n (of_real c))) =\n    norm (fds_nth f n) * mangoldt n / real n powr c", "using elim"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. norm\n     (norm\n       (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n        nat_power n (of_real c))) =\n    norm (fds_nth f n) * mangoldt n / real n powr c", "by (simp add: fds_nth_fds' norm_mult norm_divide \n                                   norm_nat_power abs_mult mangoldt_nonneg)"], ["proof (state)\nthis:\n  norm\n   (norm\n     (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n      nat_power n (of_real c))) =\n  norm (fds_nth f n) * mangoldt n / real n powr c\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       norm\n        (norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))\n       \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n             norm (nat_power n (of_real c))", "also"], ["proof (state)\nthis:\n  norm\n   (norm\n     (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n      nat_power n (of_real c))) =\n  norm (fds_nth f n) * mangoldt n / real n powr c\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       norm\n        (norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))\n       \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n             norm (nat_power n (of_real c))", "have \"\\<dots> \\<le> norm (fds_nth f n) * ln n / real n powr c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (fds_nth f n) * mangoldt n / real n powr c\n    \\<le> norm (fds_nth f n) * ln (real n) / real n powr c", "using elim"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. norm (fds_nth f n) * mangoldt n / real n powr c\n    \\<le> norm (fds_nth f n) * ln (real n) / real n powr c", "by (intro mult_left_mono divide_right_mono mangoldt_le)\n             (simp_all add: mangoldt_def)"], ["proof (state)\nthis:\n  norm (fds_nth f n) * mangoldt n / real n powr c\n  \\<le> norm (fds_nth f n) * ln (real n) / real n powr c\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       norm\n        (norm\n          (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n           nat_power n (of_real c)))\n       \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n             norm (nat_power n (of_real c))", "finally"], ["proof (chain)\npicking this:\n  norm\n   (norm\n     (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n      nat_power n (of_real c)))\n  \\<le> norm (fds_nth f n) * ln (real n) / real n powr c", "show ?case"], ["proof (prove)\nusing this:\n  norm\n   (norm\n     (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n      nat_power n (of_real c)))\n  \\<le> norm (fds_nth f n) * ln (real n) / real n powr c\n\ngoal (1 subgoal):\n 1. norm\n     (norm\n       (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n        nat_power n (of_real c)))\n    \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n          norm (nat_power n (of_real c))", "using elim"], ["proof (prove)\nusing this:\n  norm\n   (norm\n     (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n      nat_power n (of_real c)))\n  \\<le> norm (fds_nth f n) * ln (real n) / real n powr c\n  0 < n\n\ngoal (1 subgoal):\n 1. norm\n     (norm\n       (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n        nat_power n (of_real c)))\n    \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n          norm (nat_power n (of_real c))", "by (simp add: norm_nat_power algebra_simps)"], ["proof (state)\nthis:\n  norm\n   (norm\n     (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n      nat_power n (of_real c)))\n  \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n        norm (nat_power n (of_real c))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     norm\n      (norm\n        (fds_nth (fds (\\<lambda>n. fds_nth f n * mangoldt n)) n /\n         nat_power n (of_real c)))\n     \\<le> \\<bar>ln (real n)\\<bar> * norm (fds_nth f n) /\n           norm (nat_power n (of_real c))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_abs_converges (fds (\\<lambda>n. fds_nth f n * mangoldt n)) (of_real c)\n\ngoal (1 subgoal):\n 1. \\<And>c'.\n       abs_conv_abscissa f < ereal c' \\<Longrightarrow>\n       \\<exists>s.\n          s \\<bullet> (1::'a) = c' \\<and>\n          fds_abs_converges (fds (\\<lambda>n. fds_nth f n * mangoldt n)) s", "thus ?case"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds (\\<lambda>n. fds_nth f n * mangoldt n)) (of_real c)\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       s \\<bullet> (1::'a) = c \\<and>\n       fds_abs_converges (fds (\\<lambda>n. fds_nth f n * mangoldt n)) s", "by (intro exI[of _ \"of_real c\"]) auto"], ["proof (state)\nthis:\n  \\<exists>s.\n     s \\<bullet> (1::'a) = c \\<and>\n     fds_abs_converges (fds (\\<lambda>n. fds_nth f n * mangoldt n)) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds (\\<lambda>n. fds_nth f n * mangoldt n))\n  \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "finally"], ["proof (chain)\npicking this:\n  abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "show ?thesis"], ["proof (prove)\nusing this:\n  abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f", "."], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_deriv f / f) \\<le> abs_conv_abscissa f\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Uniqueness\\<close>"], ["", "context\n  assumes \"SORT_CONSTRAINT ('a :: dirichlet_series)\"\nbegin"], ["", "lemma norm_dirichlet_series_cutoff_le:\n  assumes \"fds_abs_converges f (s0 :: 'a)\" \"N > 0\" \"s \\<bullet> 1 \\<ge> c\" \"c \\<ge> s0 \\<bullet> 1\"\n  shows   \"summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\"\n          \"summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\"\n    and   \"norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s) \\<le> \n             (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) / nat_power N (s \\<bullet> 1 - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s) &&&\n     summable\n      (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)) &&&\n    norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\n 2. summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\n 3. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "from assms"], ["proof (chain)\npicking this:\n  fds_abs_converges f s0\n  0 < N\n  c \\<le> s \\<bullet> (1::'a)\n  s0 \\<bullet> (1::'a) \\<le> c", "have \"fds_abs_converges f (of_real c)\""], ["proof (prove)\nusing this:\n  fds_abs_converges f s0\n  0 < N\n  c \\<le> s \\<bullet> (1::'a)\n  s0 \\<bullet> (1::'a) \\<le> c\n\ngoal (1 subgoal):\n 1. fds_abs_converges f (of_real c)", "using fds_abs_converges_Re_le[of f s0 \"of_real c\"]"], ["proof (prove)\nusing this:\n  fds_abs_converges f s0\n  0 < N\n  c \\<le> s \\<bullet> (1::'a)\n  s0 \\<bullet> (1::'a) \\<le> c\n  \\<lbrakk>fds_abs_converges f s0;\n   s0 \\<bullet> (1::'a) \\<le> of_real c \\<bullet> (1::'a)\\<rbrakk>\n  \\<Longrightarrow> fds_abs_converges f (of_real c)\n\ngoal (1 subgoal):\n 1. fds_abs_converges f (of_real c)", "by auto"], ["proof (state)\nthis:\n  fds_abs_converges f (of_real c)\n\ngoal (3 subgoals):\n 1. summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\n 2. summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\n 3. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "hence \"summable (\\<lambda>n. norm (fds_nth f (n + N) / nat_power (n + N) (of_real c)))\""], ["proof (prove)\nusing this:\n  fds_abs_converges f (of_real c)\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n. norm (fds_nth f (n + N) / nat_power (n + N) (of_real c)))", "unfolding fds_abs_converges_def"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (fds_nth f n / nat_power n (of_real c)))\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n. norm (fds_nth f (n + N) / nat_power (n + N) (of_real c)))", "by (rule summable_ignore_initial_segment)"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n. norm (fds_nth f (n + N) / nat_power (n + N) (of_real c)))\n\ngoal (3 subgoals):\n 1. summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\n 2. summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\n 3. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "also"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n. norm (fds_nth f (n + N) / nat_power (n + N) (of_real c)))\n\ngoal (3 subgoals):\n 1. summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\n 2. summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\n 3. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "have \"?this \\<longleftrightarrow> summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         norm (fds_nth f (n + N) / nat_power (n + N) (of_real c))) =\n    summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)", "by (intro summable_cong eventually_mono[OF eventually_gt_at_top[of \"0::nat\"]]) \n       (auto simp: norm_divide norm_nat_power)"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n. norm (fds_nth f (n + N) / nat_power (n + N) (of_real c))) =\n  summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\n\ngoal (3 subgoals):\n 1. summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\n 2. summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\n 3. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "finally"], ["proof (chain)\npicking this:\n  summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)", "show *: \"summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\""], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)", "."], ["proof (state)\nthis:\n  summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\n 2. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "from assms"], ["proof (chain)\npicking this:\n  fds_abs_converges f s0\n  0 < N\n  c \\<le> s \\<bullet> (1::'a)\n  s0 \\<bullet> (1::'a) \\<le> c", "have \"fds_abs_converges f s\""], ["proof (prove)\nusing this:\n  fds_abs_converges f s0\n  0 < N\n  c \\<le> s \\<bullet> (1::'a)\n  s0 \\<bullet> (1::'a) \\<le> c\n\ngoal (1 subgoal):\n 1. fds_abs_converges f s", "using fds_abs_converges_Re_le[of f s0 s]"], ["proof (prove)\nusing this:\n  fds_abs_converges f s0\n  0 < N\n  c \\<le> s \\<bullet> (1::'a)\n  s0 \\<bullet> (1::'a) \\<le> c\n  \\<lbrakk>fds_abs_converges f s0;\n   s0 \\<bullet> (1::'a) \\<le> s \\<bullet> (1::'a)\\<rbrakk>\n  \\<Longrightarrow> fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. fds_abs_converges f s", "by auto"], ["proof (state)\nthis:\n  fds_abs_converges f s\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\n 2. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "hence **: \"summable (\\<lambda>n. norm (fds_nth f (n + N) / nat_power (n + N) s))\""], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f (n + N) / nat_power (n + N) s))", "unfolding fds_abs_converges_def"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f (n + N) / nat_power (n + N) s))", "by (rule summable_ignore_initial_segment)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. norm (fds_nth f (n + N) / nat_power (n + N) s))\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\n 2. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "thus \"summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\""], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (fds_nth f (n + N) / nat_power (n + N) s))\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)", "by (rule summable_norm_cancel)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. fds_nth f (n + N) / nat_power (n + N) s)\n\ngoal (1 subgoal):\n 1. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "have \"norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n          \\<le> (\\<Sum>n. norm (fds_nth f (n + N) / nat_power (n + N) s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N) / nat_power (n + N) s))", "by (intro summable_norm **)"], ["proof (state)\nthis:\n  norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n  \\<le> (\\<Sum>n. norm (fds_nth f (n + N) / nat_power (n + N) s))\n\ngoal (1 subgoal):\n 1. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "also"], ["proof (state)\nthis:\n  norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n  \\<le> (\\<Sum>n. norm (fds_nth f (n + N) / nat_power (n + N) s))\n\ngoal (1 subgoal):\n 1. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "have \"\\<dots> \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c / nat_power N (s \\<bullet> 1 - c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n. norm (fds_nth f (n + N) / nat_power (n + N) s))\n    \\<le> (\\<Sum>n.\n              norm (fds_nth f (n + N)) / nat_power (n + N) c /\n              nat_power N (s \\<bullet> (1::'a) - c))", "proof (intro suminf_le * ** summable_divide allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       norm (fds_nth f (n + N) / nat_power (n + N) s)\n       \\<le> norm (fds_nth f (n + N)) / nat_power (n + N) c /\n             nat_power N (s \\<bullet> (1::'a) - c)", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       norm (fds_nth f (n + N) / nat_power (n + N) s)\n       \\<le> norm (fds_nth f (n + N)) / nat_power (n + N) c /\n             nat_power N (s \\<bullet> (1::'a) - c)", "have \"real N powr (s \\<bullet> 1 - c) \\<le> real (n + N) powr (s \\<bullet> 1 - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real N powr (s \\<bullet> (1::'a) - c)\n    \\<le> real (n + N) powr (s \\<bullet> (1::'a) - c)", "using assms"], ["proof (prove)\nusing this:\n  fds_abs_converges f s0\n  0 < N\n  c \\<le> s \\<bullet> (1::'a)\n  s0 \\<bullet> (1::'a) \\<le> c\n\ngoal (1 subgoal):\n 1. real N powr (s \\<bullet> (1::'a) - c)\n    \\<le> real (n + N) powr (s \\<bullet> (1::'a) - c)", "by (intro powr_mono2) simp_all"], ["proof (state)\nthis:\n  real N powr (s \\<bullet> (1::'a) - c)\n  \\<le> real (n + N) powr (s \\<bullet> (1::'a) - c)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       norm (fds_nth f (n + N) / nat_power (n + N) s)\n       \\<le> norm (fds_nth f (n + N)) / nat_power (n + N) c /\n             nat_power N (s \\<bullet> (1::'a) - c)", "also"], ["proof (state)\nthis:\n  real N powr (s \\<bullet> (1::'a) - c)\n  \\<le> real (n + N) powr (s \\<bullet> (1::'a) - c)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       norm (fds_nth f (n + N) / nat_power (n + N) s)\n       \\<le> norm (fds_nth f (n + N)) / nat_power (n + N) c /\n             nat_power N (s \\<bullet> (1::'a) - c)", "have \"real (n + N) powr c * \\<dots> = real (n + N) powr (s \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (n + N) powr c * real (n + N) powr (s \\<bullet> (1::'a) - c) =\n    real (n + N) powr (s \\<bullet> (1::'a))", "by (simp add: powr_diff)"], ["proof (state)\nthis:\n  real (n + N) powr c * real (n + N) powr (s \\<bullet> (1::'a) - c) =\n  real (n + N) powr (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       norm (fds_nth f (n + N) / nat_power (n + N) s)\n       \\<le> norm (fds_nth f (n + N)) / nat_power (n + N) c /\n             nat_power N (s \\<bullet> (1::'a) - c)", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real (n + N) powr c * x\n      \\<le> real (n + N) powr c * y) \\<Longrightarrow>\n  real (n + N) powr c * real N powr (s \\<bullet> (1::'a) - c)\n  \\<le> real (n + N) powr (s \\<bullet> (1::'a))", "have \"norm (fds_nth f (n + N)) / real (n + N) powr (s \\<bullet> 1) \\<le>\n                    norm (fds_nth f (n + N)) / (real (n + N) powr c * real N powr (s \\<bullet> 1 - c))\""], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real (n + N) powr c * x\n      \\<le> real (n + N) powr c * y) \\<Longrightarrow>\n  real (n + N) powr c * real N powr (s \\<bullet> (1::'a) - c)\n  \\<le> real (n + N) powr (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. norm (fds_nth f (n + N)) / real (n + N) powr (s \\<bullet> (1::'a))\n    \\<le> norm (fds_nth f (n + N)) /\n          (real (n + N) powr c * real N powr (s \\<bullet> (1::'a) - c))", "using \\<open>N > 0\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real (n + N) powr c * x\n      \\<le> real (n + N) powr c * y) \\<Longrightarrow>\n  real (n + N) powr c * real N powr (s \\<bullet> (1::'a) - c)\n  \\<le> real (n + N) powr (s \\<bullet> (1::'a))\n  0 < N\n\ngoal (1 subgoal):\n 1. norm (fds_nth f (n + N)) / real (n + N) powr (s \\<bullet> (1::'a))\n    \\<le> norm (fds_nth f (n + N)) /\n          (real (n + N) powr c * real N powr (s \\<bullet> (1::'a) - c))", "by (intro divide_left_mono) (simp_all add: mult_left_mono)"], ["proof (state)\nthis:\n  norm (fds_nth f (n + N)) / real (n + N) powr (s \\<bullet> (1::'a))\n  \\<le> norm (fds_nth f (n + N)) /\n        (real (n + N) powr c * real N powr (s \\<bullet> (1::'a) - c))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       norm (fds_nth f (n + N) / nat_power (n + N) s)\n       \\<le> norm (fds_nth f (n + N)) / nat_power (n + N) c /\n             nat_power N (s \\<bullet> (1::'a) - c)", "thus \"norm (fds_nth f (n + N) / nat_power (n + N) s) \\<le> \n            norm (fds_nth f (n + N)) / nat_power (n + N) c / nat_power N (s \\<bullet> 1 - c)\""], ["proof (prove)\nusing this:\n  norm (fds_nth f (n + N)) / real (n + N) powr (s \\<bullet> (1::'a))\n  \\<le> norm (fds_nth f (n + N)) /\n        (real (n + N) powr c * real N powr (s \\<bullet> (1::'a) - c))\n\ngoal (1 subgoal):\n 1. norm (fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> norm (fds_nth f (n + N)) / nat_power (n + N) c /\n          nat_power N (s \\<bullet> (1::'a) - c)", "using \\<open>N > 0\\<close>"], ["proof (prove)\nusing this:\n  norm (fds_nth f (n + N)) / real (n + N) powr (s \\<bullet> (1::'a))\n  \\<le> norm (fds_nth f (n + N)) /\n        (real (n + N) powr c * real N powr (s \\<bullet> (1::'a) - c))\n  0 < N\n\ngoal (1 subgoal):\n 1. norm (fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> norm (fds_nth f (n + N)) / nat_power (n + N) c /\n          nat_power N (s \\<bullet> (1::'a) - c)", "by (simp add: norm_divide norm_nat_power )"], ["proof (state)\nthis:\n  norm (fds_nth f (n + N) / nat_power (n + N) s)\n  \\<le> norm (fds_nth f (n + N)) / nat_power (n + N) c /\n        nat_power N (s \\<bullet> (1::'a) - c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>n. norm (fds_nth f (n + N) / nat_power (n + N) s))\n  \\<le> (\\<Sum>n.\n            norm (fds_nth f (n + N)) / nat_power (n + N) c /\n            nat_power N (s \\<bullet> (1::'a) - c))\n\ngoal (1 subgoal):\n 1. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "also"], ["proof (state)\nthis:\n  (\\<Sum>n. norm (fds_nth f (n + N) / nat_power (n + N) s))\n  \\<le> (\\<Sum>n.\n            norm (fds_nth f (n + N)) / nat_power (n + N) c /\n            nat_power N (s \\<bullet> (1::'a) - c))\n\ngoal (1 subgoal):\n 1. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "have \"\\<dots> = (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) / nat_power N (s \\<bullet> 1 - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n.\n        norm (fds_nth f (n + N)) / nat_power (n + N) c /\n        nat_power N (s \\<bullet> (1::'a) - c)) =\n    (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n    nat_power N (s \\<bullet> (1::'a) - c)", "using *"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (fds_nth f (n + N)) / nat_power (n + N) c)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n.\n        norm (fds_nth f (n + N)) / nat_power (n + N) c /\n        nat_power N (s \\<bullet> (1::'a) - c)) =\n    (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n    nat_power N (s \\<bullet> (1::'a) - c)", "by (rule suminf_divide)"], ["proof (state)\nthis:\n  (\\<Sum>n.\n      norm (fds_nth f (n + N)) / nat_power (n + N) c /\n      nat_power N (s \\<bullet> (1::'a) - c)) =\n  (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n  nat_power N (s \\<bullet> (1::'a) - c)\n\ngoal (1 subgoal):\n 1. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "finally"], ["proof (chain)\npicking this:\n  norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n  \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n        nat_power N (s \\<bullet> (1::'a) - c)", "show \"norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s) \\<le> \\<dots>\""], ["proof (prove)\nusing this:\n  norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n  \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n        nat_power N (s \\<bullet> (1::'a) - c)\n\ngoal (1 subgoal):\n 1. norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n          nat_power N (s \\<bullet> (1::'a) - c)", "."], ["proof (state)\nthis:\n  norm (\\<Sum>n. fds_nth f (n + N) / nat_power (n + N) s)\n  \\<le> (\\<Sum>n. norm (fds_nth f (n + N)) / nat_power (n + N) c) /\n        nat_power N (s \\<bullet> (1::'a) - c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_zeroD_aux:\n  fixes h :: \"'a fds\"\n  assumes conv: \"fds_abs_converges h (s0 :: 'a)\"\n  assumes freq: \"frequently (\\<lambda>s. eval_fds h s = 0) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\"\n  shows   \"h = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = 0", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "assume \"h \\<noteq> 0\""], ["proof (state)\nthis:\n  h \\<noteq> 0\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "hence ex: \"\\<exists>n>0. fds_nth h n \\<noteq> 0\""], ["proof (prove)\nusing this:\n  h \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>n>0. fds_nth h n \\<noteq> (0::'a)", "by (auto simp: fds_eq_iff)"], ["proof (state)\nthis:\n  \\<exists>n>0. fds_nth h n \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "define N :: nat where \"N = (LEAST n. n > 0 \\<and> fds_nth h n \\<noteq> 0)\""], ["proof (state)\nthis:\n  N = (LEAST n. 0 < n \\<and> fds_nth h n \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "have N: \"N > 0\" \"fds_nth h N \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < N &&& fds_nth h N \\<noteq> (0::'a)", "using LeastI_ex[OF ex, folded N_def]"], ["proof (prove)\nusing this:\n  0 < N \\<and> fds_nth h N \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. 0 < N &&& fds_nth h N \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  0 < N\n  fds_nth h N \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "have less_N: \"fds_nth h n = 0\" if \"n < N\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth h n = (0::'a)", "using Least_le[of \"\\<lambda>n. n > 0 \\<and> fds_nth h n \\<noteq> 0\" n, folded N_def] that"], ["proof (prove)\nusing this:\n  0 < n \\<and> fds_nth h n \\<noteq> (0::'a) \\<Longrightarrow> N \\<le> n\n  n < N\n\ngoal (1 subgoal):\n 1. fds_nth h n = (0::'a)", "by (cases \"n = 0\") (auto simp: not_less)"], ["proof (state)\nthis:\n  ?n < N \\<Longrightarrow> fds_nth h ?n = (0::'a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "define c where \"c = s0 \\<bullet> 1\""], ["proof (state)\nthis:\n  c = s0 \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "define remainder where \"remainder = (\\<lambda>s. (\\<Sum>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s))\""], ["proof (state)\nthis:\n  remainder =\n  (\\<lambda>s. \\<Sum>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s)\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "define A where \"A = (\\<Sum>n. norm (fds_nth h (n + Suc N)) / nat_power (n + Suc N) c) *\n                         nat_power (Suc N) c\""], ["proof (state)\nthis:\n  A =\n  (\\<Sum>n. norm (fds_nth h (n + Suc N)) / nat_power (n + Suc N) c) *\n  nat_power (Suc N) c\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "have eq: \"fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s\"\n    if \"s \\<bullet> 1 \\<ge> c\" for s :: 'a"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s", "from conv and that"], ["proof (chain)\npicking this:\n  fds_abs_converges h s0\n  c \\<le> s \\<bullet> (1::'a)", "have conv': \"fds_abs_converges h s\""], ["proof (prove)\nusing this:\n  fds_abs_converges h s0\n  c \\<le> s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. fds_abs_converges h s", "unfolding c_def"], ["proof (prove)\nusing this:\n  fds_abs_converges h s0\n  s0 \\<bullet> (1::'a) \\<le> s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. fds_abs_converges h s", "by (rule fds_abs_converges_Re_le)"], ["proof (state)\nthis:\n  fds_abs_converges h s\n\ngoal (1 subgoal):\n 1. fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s", "hence conv'': \"fds_converges h s\""], ["proof (prove)\nusing this:\n  fds_abs_converges h s\n\ngoal (1 subgoal):\n 1. fds_converges h s", "by blast"], ["proof (state)\nthis:\n  fds_converges h s\n\ngoal (1 subgoal):\n 1. fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s", "from conv''"], ["proof (chain)\npicking this:\n  fds_converges h s", "have \"(\\<lambda>n. fds_nth h n / nat_power n s) sums eval_fds h s\""], ["proof (prove)\nusing this:\n  fds_converges h s\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth h n / nat_power n s) sums eval_fds h s", "by (simp add: fds_converges_iff)"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth h n / nat_power n s) sums eval_fds h s\n\ngoal (1 subgoal):\n 1. fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s", "hence \"(\\<lambda>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s) sums \n             (eval_fds h s - (\\<Sum>n<Suc N. fds_nth h n / nat_power n s))\""], ["proof (prove)\nusing this:\n  (\\<lambda>n. fds_nth h n / nat_power n s) sums eval_fds h s\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s) sums\n    (eval_fds h s - (\\<Sum>n<Suc N. fds_nth h n / nat_power n s))", "by (rule sums_split_initial_segment)"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s) sums\n  (eval_fds h s - (\\<Sum>n<Suc N. fds_nth h n / nat_power n s))\n\ngoal (1 subgoal):\n 1. fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s", "also"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s) sums\n  (eval_fds h s - (\\<Sum>n<Suc N. fds_nth h n / nat_power n s))\n\ngoal (1 subgoal):\n 1. fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s", "have \"(\\<Sum>n<Suc N. fds_nth h n / nat_power n s) = \n                 (\\<Sum>n<Suc N. if n = N then fds_nth h N / nat_power N s else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n<Suc N. fds_nth h n / nat_power n s) =\n    (\\<Sum>n<Suc N. if n = N then fds_nth h N / nat_power N s else (0::'a))", "by (intro sum.cong refl) (auto simp: less_N)"], ["proof (state)\nthis:\n  (\\<Sum>n<Suc N. fds_nth h n / nat_power n s) =\n  (\\<Sum>n<Suc N. if n = N then fds_nth h N / nat_power N s else (0::'a))\n\ngoal (1 subgoal):\n 1. fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s", "also"], ["proof (state)\nthis:\n  (\\<Sum>n<Suc N. fds_nth h n / nat_power n s) =\n  (\\<Sum>n<Suc N. if n = N then fds_nth h N / nat_power N s else (0::'a))\n\ngoal (1 subgoal):\n 1. fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s", "have \"\\<dots> = fds_nth h N / nat_power N s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n<Suc N.\n        if n = N then fds_nth h N / nat_power N s else (0::'a)) =\n    fds_nth h N / nat_power N s", "by (subst sum.delta) auto"], ["proof (state)\nthis:\n  (\\<Sum>n<Suc N. if n = N then fds_nth h N / nat_power N s else (0::'a)) =\n  fds_nth h N / nat_power N s\n\ngoal (1 subgoal):\n 1. fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s) sums\n  (eval_fds h s - fds_nth h N / nat_power N s)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s) sums\n  (eval_fds h s - fds_nth h N / nat_power N s)\n\ngoal (1 subgoal):\n 1. fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s", "unfolding remainder_def"], ["proof (prove)\nusing this:\n  (\\<lambda>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s) sums\n  (eval_fds h s - fds_nth h N / nat_power N s)\n\ngoal (1 subgoal):\n 1. fds_nth h N =\n    nat_power N s * eval_fds h s -\n    nat_power N s *\n    (\\<Sum>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s)", "using \\<open>N > 0\\<close>"], ["proof (prove)\nusing this:\n  (\\<lambda>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s) sums\n  (eval_fds h s - fds_nth h N / nat_power N s)\n  0 < N\n\ngoal (1 subgoal):\n 1. fds_nth h N =\n    nat_power N s * eval_fds h s -\n    nat_power N s *\n    (\\<Sum>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s)", "by (auto simp: sums_iff field_simps)"], ["proof (state)\nthis:\n  fds_nth h N = nat_power N s * eval_fds h s - nat_power N s * remainder s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c \\<le> ?s \\<bullet> (1::'a) \\<Longrightarrow>\n  fds_nth h N =\n  nat_power N ?s * eval_fds h ?s - nat_power N ?s * remainder ?s\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "have remainder_bound: \"norm (remainder s) \\<le> A / real (Suc N) powr (s \\<bullet> 1)\"\n    if \"s \\<bullet> 1 \\<ge> c\" for s :: 'a"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (remainder s) \\<le> A / real (Suc N) powr (s \\<bullet> (1::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. norm (remainder s) \\<le> A / real (Suc N) powr (s \\<bullet> (1::'a))", "note * = norm_dirichlet_series_cutoff_le[of h s0 \"Suc N\" c s, folded remainder_def]"], ["proof (state)\nthis:\n  \\<lbrakk>fds_abs_converges h s0; 0 < Suc N; c \\<le> s \\<bullet> (1::'a);\n   s0 \\<bullet> (1::'a) \\<le> c\\<rbrakk>\n  \\<Longrightarrow> summable\n                     (\\<lambda>n.\n                         fds_nth h (n + Suc N) / nat_power (n + Suc N) s)\n  \\<lbrakk>fds_abs_converges h s0; 0 < Suc N; c \\<le> s \\<bullet> (1::'a);\n   s0 \\<bullet> (1::'a) \\<le> c\\<rbrakk>\n  \\<Longrightarrow> summable\n                     (\\<lambda>n.\n                         norm (fds_nth h (n + Suc N)) /\n                         nat_power (n + Suc N) c)\n  \\<lbrakk>fds_abs_converges h s0; 0 < Suc N; c \\<le> s \\<bullet> (1::'a);\n   s0 \\<bullet> (1::'a) \\<le> c\\<rbrakk>\n  \\<Longrightarrow> norm\n                     (\\<Sum>n.\n                         fds_nth h (n + Suc N) / nat_power (n + Suc N) s)\n                    \\<le> (\\<Sum>n.\n                              norm (fds_nth h (n + Suc N)) /\n                              nat_power (n + Suc N) c) /\n                          nat_power (Suc N) (s \\<bullet> (1::'a) - c)\n\ngoal (1 subgoal):\n 1. norm (remainder s) \\<le> A / real (Suc N) powr (s \\<bullet> (1::'a))", "have \"norm (remainder s) \\<le> (\\<Sum>n. norm (fds_nth h (n + Suc N)) /\n           nat_power (n + Suc N) c) / nat_power (Suc N) (s \\<bullet> 1 - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (remainder s)\n    \\<le> (\\<Sum>n.\n              norm (fds_nth h (n + Suc N)) / nat_power (n + Suc N) c) /\n          nat_power (Suc N) (s \\<bullet> (1::'a) - c)", "using that assms"], ["proof (prove)\nusing this:\n  c \\<le> s \\<bullet> (1::'a)\n  fds_abs_converges h s0\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds h s = (0::'a)\n\ngoal (1 subgoal):\n 1. norm (remainder s)\n    \\<le> (\\<Sum>n.\n              norm (fds_nth h (n + Suc N)) / nat_power (n + Suc N) c) /\n          nat_power (Suc N) (s \\<bullet> (1::'a) - c)", "unfolding remainder_def"], ["proof (prove)\nusing this:\n  c \\<le> s \\<bullet> (1::'a)\n  fds_abs_converges h s0\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds h s = (0::'a)\n\ngoal (1 subgoal):\n 1. norm (\\<Sum>n. fds_nth h (n + Suc N) / nat_power (n + Suc N) s)\n    \\<le> (\\<Sum>n.\n              norm (fds_nth h (n + Suc N)) / nat_power (n + Suc N) c) /\n          nat_power (Suc N) (s \\<bullet> (1::'a) - c)", "by (intro *) (simp_all add: c_def)"], ["proof (state)\nthis:\n  norm (remainder s)\n  \\<le> (\\<Sum>n. norm (fds_nth h (n + Suc N)) / nat_power (n + Suc N) c) /\n        nat_power (Suc N) (s \\<bullet> (1::'a) - c)\n\ngoal (1 subgoal):\n 1. norm (remainder s) \\<le> A / real (Suc N) powr (s \\<bullet> (1::'a))", "also"], ["proof (state)\nthis:\n  norm (remainder s)\n  \\<le> (\\<Sum>n. norm (fds_nth h (n + Suc N)) / nat_power (n + Suc N) c) /\n        nat_power (Suc N) (s \\<bullet> (1::'a) - c)\n\ngoal (1 subgoal):\n 1. norm (remainder s) \\<le> A / real (Suc N) powr (s \\<bullet> (1::'a))", "have \"\\<dots> = A / real (Suc N) powr (s \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n. norm (fds_nth h (n + Suc N)) / nat_power (n + Suc N) c) /\n    nat_power (Suc N) (s \\<bullet> (1::'a) - c) =\n    A / real (Suc N) powr (s \\<bullet> (1::'a))", "by (simp add: A_def powr_diff)"], ["proof (state)\nthis:\n  (\\<Sum>n. norm (fds_nth h (n + Suc N)) / nat_power (n + Suc N) c) /\n  nat_power (Suc N) (s \\<bullet> (1::'a) - c) =\n  A / real (Suc N) powr (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. norm (remainder s) \\<le> A / real (Suc N) powr (s \\<bullet> (1::'a))", "finally"], ["proof (chain)\npicking this:\n  norm (remainder s) \\<le> A / real (Suc N) powr (s \\<bullet> (1::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  norm (remainder s) \\<le> A / real (Suc N) powr (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. norm (remainder s) \\<le> A / real (Suc N) powr (s \\<bullet> (1::'a))", "."], ["proof (state)\nthis:\n  norm (remainder s) \\<le> A / real (Suc N) powr (s \\<bullet> (1::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c \\<le> ?s \\<bullet> (1::'a) \\<Longrightarrow>\n  norm (remainder ?s) \\<le> A / real (Suc N) powr (?s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "from freq"], ["proof (chain)\npicking this:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds h s = (0::'a)", "have \"\\<forall>c. \\<exists>s. s \\<bullet> 1 \\<ge> c \\<and> eval_fds h s = 0\""], ["proof (prove)\nusing this:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds h s = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>c.\n       \\<exists>s. c \\<le> s \\<bullet> (1::'a) \\<and> eval_fds h s = (0::'a)", "unfolding frequently_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>\\<^sub>F x in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                                 at_top.\n             eval_fds h x \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. \\<forall>c.\n       \\<exists>s. c \\<le> s \\<bullet> (1::'a) \\<and> eval_fds h s = (0::'a)", "by (auto simp: eventually_going_to_at_top_linorder)"], ["proof (state)\nthis:\n  \\<forall>c.\n     \\<exists>s. c \\<le> s \\<bullet> (1::'a) \\<and> eval_fds h s = (0::'a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "hence \"\\<forall>k. \\<exists>s. s \\<bullet> 1 \\<ge> real k \\<and> eval_fds h s = 0\""], ["proof (prove)\nusing this:\n  \\<forall>c.\n     \\<exists>s. c \\<le> s \\<bullet> (1::'a) \\<and> eval_fds h s = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>k.\n       \\<exists>s.\n          real k \\<le> s \\<bullet> (1::'a) \\<and> eval_fds h s = (0::'a)", "by blast"], ["proof (state)\nthis:\n  \\<forall>k.\n     \\<exists>s.\n        real k \\<le> s \\<bullet> (1::'a) \\<and> eval_fds h s = (0::'a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>k.\n     \\<exists>s.\n        real k \\<le> s \\<bullet> (1::'a) \\<and> eval_fds h s = (0::'a)", "obtain S where S: \"\\<And>k. S k \\<bullet> 1 \\<ge> real k \\<and> eval_fds h (S k) = 0\""], ["proof (prove)\nusing this:\n  \\<forall>k.\n     \\<exists>s.\n        real k \\<le> s \\<bullet> (1::'a) \\<and> eval_fds h s = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        (\\<And>k.\n            real k \\<le> S k \\<bullet> (1::'a) \\<and>\n            eval_fds h (S k) = (0::'a)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  real ?k \\<le> S ?k \\<bullet> (1::'a) \\<and> eval_fds h (S ?k) = (0::'a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "have S_limit: \"filterlim (\\<lambda>k. S k \\<bullet> 1) at_top sequentially\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LIM k sequentially. S k \\<bullet> (1::'a) :> at_top", "by (rule filterlim_at_top_mono[OF filterlim_real_sequentially]) (use S in auto)"], ["proof (state)\nthis:\n  LIM k sequentially. S k \\<bullet> (1::'a) :> at_top\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "have \"eventually (\\<lambda>k. real k \\<ge> c) sequentially\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F k in sequentially. c \\<le> real k", "by real_asymp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F k in sequentially. c \\<le> real k\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "hence \"eventually (\\<lambda>k. norm (fds_nth h N) \\<le> \n           (real N / real (Suc N)) powr (S k \\<bullet> 1) * A) sequentially\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F k in sequentially. c \\<le> real k\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F k in sequentially.\n       norm (fds_nth h N)\n       \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       c \\<le> real k \\<Longrightarrow>\n       norm (fds_nth h N)\n       \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A", "case (elim k)"], ["proof (state)\nthis:\n  c \\<le> real k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       c \\<le> real k \\<Longrightarrow>\n       norm (fds_nth h N)\n       \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A", "hence \"norm (fds_nth h N) = real N powr (S k \\<bullet> 1) *  norm (remainder (S k))\"\n      (is \"_ = _ * ?X\")"], ["proof (prove)\nusing this:\n  c \\<le> real k\n\ngoal (1 subgoal):\n 1. norm (fds_nth h N) =\n    real N powr (S k \\<bullet> (1::'a)) * norm (remainder (S k))", "using \\<open>N > 0\\<close> S[of k] eq[of \"S k\"]"], ["proof (prove)\nusing this:\n  c \\<le> real k\n  0 < N\n  real k \\<le> S k \\<bullet> (1::'a) \\<and> eval_fds h (S k) = (0::'a)\n  c \\<le> S k \\<bullet> (1::'a) \\<Longrightarrow>\n  fds_nth h N =\n  nat_power N (S k) * eval_fds h (S k) - nat_power N (S k) * remainder (S k)\n\ngoal (1 subgoal):\n 1. norm (fds_nth h N) =\n    real N powr (S k \\<bullet> (1::'a)) * norm (remainder (S k))", "by (auto simp: norm_mult norm_nat_power c_def)"], ["proof (state)\nthis:\n  norm (fds_nth h N) =\n  real N powr (S k \\<bullet> (1::'a)) * norm (remainder (S k))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       c \\<le> real k \\<Longrightarrow>\n       norm (fds_nth h N)\n       \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A", "also"], ["proof (state)\nthis:\n  norm (fds_nth h N) =\n  real N powr (S k \\<bullet> (1::'a)) * norm (remainder (S k))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       c \\<le> real k \\<Longrightarrow>\n       norm (fds_nth h N)\n       \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A", "have \"norm (remainder (S k)) \\<le> A / real (Suc N) powr (S k \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (remainder (S k))\n    \\<le> A / real (Suc N) powr (S k \\<bullet> (1::'a))", "using elim S[of k]"], ["proof (prove)\nusing this:\n  c \\<le> real k\n  real k \\<le> S k \\<bullet> (1::'a) \\<and> eval_fds h (S k) = (0::'a)\n\ngoal (1 subgoal):\n 1. norm (remainder (S k))\n    \\<le> A / real (Suc N) powr (S k \\<bullet> (1::'a))", "by (intro remainder_bound) (simp_all add: c_def)"], ["proof (state)\nthis:\n  norm (remainder (S k)) \\<le> A / real (Suc N) powr (S k \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       c \\<le> real k \\<Longrightarrow>\n       norm (fds_nth h N)\n       \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real N powr (S k \\<bullet> (1::'a)) * x\n      \\<le> real N powr (S k \\<bullet> (1::'a)) * y) \\<Longrightarrow>\n  norm (fds_nth h N)\n  \\<le> real N powr (S k \\<bullet> (1::'a)) *\n        (A / real (Suc N) powr (S k \\<bullet> (1::'a)))", "show ?case"], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real N powr (S k \\<bullet> (1::'a)) * x\n      \\<le> real N powr (S k \\<bullet> (1::'a)) * y) \\<Longrightarrow>\n  norm (fds_nth h N)\n  \\<le> real N powr (S k \\<bullet> (1::'a)) *\n        (A / real (Suc N) powr (S k \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. norm (fds_nth h N)\n    \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A", "using N"], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      real N powr (S k \\<bullet> (1::'a)) * x\n      \\<le> real N powr (S k \\<bullet> (1::'a)) * y) \\<Longrightarrow>\n  norm (fds_nth h N)\n  \\<le> real N powr (S k \\<bullet> (1::'a)) *\n        (A / real (Suc N) powr (S k \\<bullet> (1::'a)))\n  0 < N\n  fds_nth h N \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. norm (fds_nth h N)\n    \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A", "by (simp add: mult_left_mono powr_divide field_simps del: of_nat_Suc)"], ["proof (state)\nthis:\n  norm (fds_nth h N)\n  \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F k in sequentially.\n     norm (fds_nth h N)\n     \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F k in sequentially.\n     norm (fds_nth h N)\n     \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "have \"((\\<lambda>k. (real N / real (Suc N)) powr (S k \\<bullet> 1) * A) \\<longlongrightarrow> 0) sequentially\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k. (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A)\n    \\<longlonglongrightarrow> 0", "by (rule filterlim_compose[OF _ S_limit]) (use \\<open>N > 0\\<close> in real_asymp)"], ["proof (state)\nthis:\n  (\\<lambda>k. (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A)\n  \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F k in sequentially.\n     norm (fds_nth h N)\n     \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A\n  (\\<lambda>k. (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A)\n  \\<longlonglongrightarrow> 0", "have \"((\\<lambda>_. fds_nth h N) \\<longlongrightarrow> 0) sequentially\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F k in sequentially.\n     norm (fds_nth h N)\n     \\<le> (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A\n  (\\<lambda>k. (real N / real (Suc N)) powr (S k \\<bullet> (1::'a)) * A)\n  \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>_. fds_nth h N) \\<longlonglongrightarrow> (0::'a)", "by (rule Lim_null_comparison)"], ["proof (state)\nthis:\n  (\\<lambda>_. fds_nth h N) \\<longlonglongrightarrow> (0::'a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "hence \"fds_nth h N = 0\""], ["proof (prove)\nusing this:\n  (\\<lambda>_. fds_nth h N) \\<longlonglongrightarrow> (0::'a)\n\ngoal (1 subgoal):\n 1. fds_nth h N = (0::'a)", "by (simp add: tendsto_const_iff)"], ["proof (state)\nthis:\n  fds_nth h N = (0::'a)\n\ngoal (1 subgoal):\n 1. h \\<noteq> 0 \\<Longrightarrow> False", "with \\<open>fds_nth h N \\<noteq> 0\\<close>"], ["proof (chain)\npicking this:\n  fds_nth h N \\<noteq> (0::'a)\n  fds_nth h N = (0::'a)", "show False"], ["proof (prove)\nusing this:\n  fds_nth h N \\<noteq> (0::'a)\n  fds_nth h N = (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_zeroD:\n  fixes h :: \"'a fds\"\n  assumes conv: \"conv_abscissa h < \\<infinity>\"\n  assumes freq: \"frequently (\\<lambda>s. eval_fds h s = 0) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\"\n  shows   \"h = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. h = 0", "have [simp]: \"2 \\<bullet> (1 :: 'a) = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (2::'a) \\<bullet> (1::'a) = 2", "using of_real_inner_1[of 2]"], ["proof (prove)\nusing this:\n  of_real 2 \\<bullet> (1::?'a) = 2\n\ngoal (1 subgoal):\n 1. (2::'a) \\<bullet> (1::'a) = 2", "unfolding of_real_numeral"], ["proof (prove)\nusing this:\n  (2::?'a) \\<bullet> (1::?'a) = 2\n\ngoal (1 subgoal):\n 1. (2::'a) \\<bullet> (1::'a) = 2", "by simp"], ["proof (state)\nthis:\n  (2::'a) \\<bullet> (1::'a) = 2\n\ngoal (1 subgoal):\n 1. h = 0", "from conv"], ["proof (chain)\npicking this:\n  conv_abscissa h < \\<infinity>", "obtain s where \"fds_converges h s\""], ["proof (prove)\nusing this:\n  conv_abscissa h < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>s. fds_converges h s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  fds_converges h s\n\ngoal (1 subgoal):\n 1. h = 0", "hence \"fds_abs_converges h (s + 2)\""], ["proof (prove)\nusing this:\n  fds_converges h s\n\ngoal (1 subgoal):\n 1. fds_abs_converges h (s + (2::'a))", "by (rule fds_converges_imp_abs_converges) (auto simp: algebra_simps)"], ["proof (state)\nthis:\n  fds_abs_converges h (s + (2::'a))\n\ngoal (1 subgoal):\n 1. h = 0", "from this assms(2-)"], ["proof (chain)\npicking this:\n  fds_abs_converges h (s + (2::'a))\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds h s = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_abs_converges h (s + (2::'a))\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds h s = (0::'a)\n\ngoal (1 subgoal):\n 1. h = 0", "by (rule eval_fds_zeroD_aux)"], ["proof (state)\nthis:\n  h = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_eqD:\n  fixes f g :: \"'a fds\"\n  assumes conv: \"conv_abscissa f < \\<infinity>\" \"conv_abscissa g < \\<infinity>\"\n  assumes eq:   \"frequently (\\<lambda>s. eval_fds f s = eval_fds g s) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\"\n  shows   \"f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f = g", "have conv': \"conv_abscissa (f - g) < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (f - g) < \\<infinity>", "using assms"], ["proof (prove)\nusing this:\n  conv_abscissa f < \\<infinity>\n  conv_abscissa g < \\<infinity>\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds f s = eval_fds g s\n\ngoal (1 subgoal):\n 1. conv_abscissa (f - g) < \\<infinity>", "by (intro le_less_trans[OF conv_abscissa_diff_le]) (auto simp: max_def)"], ["proof (state)\nthis:\n  conv_abscissa (f - g) < \\<infinity>\n\ngoal (1 subgoal):\n 1. f = g", "have \"max (conv_abscissa f) (conv_abscissa g) < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max (conv_abscissa f) (conv_abscissa g) < \\<infinity>", "using conv"], ["proof (prove)\nusing this:\n  conv_abscissa f < \\<infinity>\n  conv_abscissa g < \\<infinity>\n\ngoal (1 subgoal):\n 1. max (conv_abscissa f) (conv_abscissa g) < \\<infinity>", "by (auto simp: max_def)"], ["proof (state)\nthis:\n  max (conv_abscissa f) (conv_abscissa g) < \\<infinity>\n\ngoal (1 subgoal):\n 1. f = g", "from ereal_dense2[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>z.\n     max (conv_abscissa f) (conv_abscissa g) < ereal z \\<and>\n     ereal z < \\<infinity>", "obtain c where c: \"max (conv_abscissa f) (conv_abscissa g) < ereal c\""], ["proof (prove)\nusing this:\n  \\<exists>z.\n     max (conv_abscissa f) (conv_abscissa g) < ereal z \\<and>\n     ereal z < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        max (conv_abscissa f) (conv_abscissa g) < ereal c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  max (conv_abscissa f) (conv_abscissa g) < ereal c\n\ngoal (1 subgoal):\n 1. f = g", "(* TODO: something like \"frequently_elim\" would be great here *)"], ["proof (state)\nthis:\n  max (conv_abscissa f) (conv_abscissa g) < ereal c\n\ngoal (1 subgoal):\n 1. f = g", "have \"frequently (\\<lambda>s. eval_fds f s = eval_fds g s \\<and> s \\<bullet> 1 \\<ge> c) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds f s = eval_fds g s \\<and> c \\<le> s \\<bullet> (1::'a)", "using eq"], ["proof (prove)\nusing this:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds f s = eval_fds g s\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds f s = eval_fds g s \\<and> c \\<le> s \\<bullet> (1::'a)", "by (rule frequently_eventually_frequently) auto"], ["proof (state)\nthis:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds f s = eval_fds g s \\<and> c \\<le> s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. f = g", "hence *: \"frequently (\\<lambda>s. eval_fds (f - g) s = 0) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds f s = eval_fds g s \\<and> c \\<le> s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (f - g) s = (0::'a)", "proof (rule frequently_mono [rotated], safe, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<exists>\\<^sub>F s in (\\<lambda>s.\n     s \\<bullet> (1::'a)) going_to\n at_top.\n                   eval_fds f s = eval_fds g s \\<and>\n                   c \\<le> s \\<bullet> (1::'a);\n        eval_fds f x = eval_fds g x; c \\<le> x \\<bullet> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> eval_fds (f - g) x = (0::'a)", "case (1 s)"], ["proof (state)\nthis:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds f s = eval_fds g s \\<and> c \\<le> s \\<bullet> (1::'a)\n  eval_fds f s = eval_fds g s\n  c \\<le> s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<exists>\\<^sub>F s in (\\<lambda>s.\n     s \\<bullet> (1::'a)) going_to\n at_top.\n                   eval_fds f s = eval_fds g s \\<and>\n                   c \\<le> s \\<bullet> (1::'a);\n        eval_fds f x = eval_fds g x; c \\<le> x \\<bullet> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> eval_fds (f - g) x = (0::'a)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds f s = eval_fds g s \\<and> c \\<le> s \\<bullet> (1::'a)\n  eval_fds f s = eval_fds g s\n  c \\<le> s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. eval_fds (f - g) s = (0::'a)", "using c"], ["proof (prove)\nusing this:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds f s = eval_fds g s \\<and> c \\<le> s \\<bullet> (1::'a)\n  eval_fds f s = eval_fds g s\n  c \\<le> s \\<bullet> (1::'a)\n  max (conv_abscissa f) (conv_abscissa g) < ereal c\n\ngoal (1 subgoal):\n 1. eval_fds (f - g) s = (0::'a)", "by (subst eval_fds_diff) (auto intro!: fds_converges intro: less_le_trans)"], ["proof (state)\nthis:\n  eval_fds (f - g) s = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds (f - g) s = (0::'a)\n\ngoal (1 subgoal):\n 1. f = g", "have \"f - g = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f - g = 0", "by (rule eval_fds_zeroD fds_abs_converges_diff assms * conv')+"], ["proof (state)\nthis:\n  f - g = 0\n\ngoal (1 subgoal):\n 1. f = g", "thus ?thesis"], ["proof (prove)\nusing this:\n  f - g = 0\n\ngoal (1 subgoal):\n 1. f = g", "by simp"], ["proof (state)\nthis:\n  f = g\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Limit at infinity\\<close>"], ["", "lemma eval_fds_at_top_tail_bound:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes c: \"ereal c > abs_conv_abscissa f\"\n  defines \"B \\<equiv> (\\<Sum>n. norm (fds_nth f (n+2)) / real (n+2) powr c) * 2 powr c\"\n  assumes s: \"s \\<bullet> 1 \\<ge> c\"\n  shows   \"norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "from c"], ["proof (chain)\npicking this:\n  abs_conv_abscissa f < ereal c", "have \"fds_abs_converges f (of_real c)\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. fds_abs_converges f (of_real c)", "by (intro fds_abs_converges) simp_all"], ["proof (state)\nthis:\n  fds_abs_converges f (of_real c)\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "also"], ["proof (state)\nthis:\n  fds_abs_converges f (of_real c)\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "have \"?this \\<longleftrightarrow> summable (\\<lambda>n. norm (fds_nth f n) / real n powr c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges f (of_real c) =\n    summable (\\<lambda>n. norm (fds_nth f n) / real n powr c)", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n (of_real c))) =\n    summable (\\<lambda>n. norm (fds_nth f n) / real n powr c)", "by (intro summable_cong eventually_mono[OF eventually_gt_at_top[of \"0::nat\"]]) \n       (auto simp: norm_divide norm_nat_power norm_powr_real_powr)"], ["proof (state)\nthis:\n  fds_abs_converges f (of_real c) =\n  summable (\\<lambda>n. norm (fds_nth f n) / real n powr c)\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "finally"], ["proof (chain)\npicking this:\n  summable (\\<lambda>n. norm (fds_nth f n) / real n powr c)", "have summable_c: \\<dots>"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (fds_nth f n) / real n powr c)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n) / real n powr c)", "."], ["proof (state)\nthis:\n  summable (\\<lambda>n. norm (fds_nth f n) / real n powr c)\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "note c"], ["proof (state)\nthis:\n  abs_conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "also"], ["proof (state)\nthis:\n  abs_conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "from s"], ["proof (chain)\npicking this:\n  c \\<le> s \\<bullet> (1::'a)", "have \"ereal c \\<le> ereal (s \\<bullet> 1)\""], ["proof (prove)\nusing this:\n  c \\<le> s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. ereal c \\<le> ereal (s \\<bullet> (1::'a))", "by simp"], ["proof (state)\nthis:\n  ereal c \\<le> ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "finally"], ["proof (chain)\npicking this:\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a))", "have \"fds_abs_converges f s\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. fds_abs_converges f s", "by (intro fds_abs_converges) auto"], ["proof (state)\nthis:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "hence summable: \"summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))\""], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))", "by (simp add: fds_abs_converges_def)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "from summable_norm_cancel[OF this]"], ["proof (chain)\npicking this:\n  summable (\\<lambda>n. fds_nth f n / nat_power n s)", "have \"(\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s\""], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. fds_nth f n / nat_power n s)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s", "by (simp add: eval_fds_def sums_iff)"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth f n / nat_power n s) sums eval_fds f s\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "from sums_split_initial_segment[OF this, of \"Suc (Suc 0)\"]"], ["proof (chain)\npicking this:\n  (\\<lambda>i.\n      fds_nth f (i + Suc (Suc 0)) / nat_power (i + Suc (Suc 0)) s) sums\n  (eval_fds f s - (\\<Sum>i<Suc (Suc 0). fds_nth f i / nat_power i s))", "have \"norm (eval_fds f s - fds_nth f 1) = norm (\\<Sum>n. fds_nth f (n+2) / nat_power (n+2) s)\""], ["proof (prove)\nusing this:\n  (\\<lambda>i.\n      fds_nth f (i + Suc (Suc 0)) / nat_power (i + Suc (Suc 0)) s) sums\n  (eval_fds f s - (\\<Sum>i<Suc (Suc 0). fds_nth f i / nat_power i s))\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) =\n    norm (\\<Sum>n. fds_nth f (n + 2) / nat_power (n + 2) s)", "by (auto simp: sums_iff)"], ["proof (state)\nthis:\n  norm (eval_fds f s - fds_nth f 1) =\n  norm (\\<Sum>n. fds_nth f (n + 2) / nat_power (n + 2) s)\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "also"], ["proof (state)\nthis:\n  norm (eval_fds f s - fds_nth f 1) =\n  norm (\\<Sum>n. fds_nth f (n + 2) / nat_power (n + 2) s)\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "have \"\\<dots> \\<le> (\\<Sum>n. norm (fds_nth f (n+2) / nat_power (n+2) s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (\\<Sum>n. fds_nth f (n + 2) / nat_power (n + 2) s)\n    \\<le> (\\<Sum>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))", "by (intro summable_norm summable_ignore_initial_segment summable)"], ["proof (state)\nthis:\n  norm (\\<Sum>n. fds_nth f (n + 2) / nat_power (n + 2) s)\n  \\<le> (\\<Sum>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "also"], ["proof (state)\nthis:\n  norm (\\<Sum>n. fds_nth f (n + 2) / nat_power (n + 2) s)\n  \\<le> (\\<Sum>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "have \"\\<dots> \\<le> (\\<Sum>n. norm (fds_nth f (n+2)) / real (n+2) powr c / 2 powr (s \\<bullet> 1 - c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))\n    \\<le> (\\<Sum>n.\n              norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n              2 powr (s \\<bullet> (1::'a) - c))", "proof (intro suminf_le allI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n.\n       norm (fds_nth f (n + 2) / nat_power (n + 2) s)\n       \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n             2 powr (s \\<bullet> (1::'a) - c)\n 2. summable (\\<lambda>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))\n 3. summable\n     (\\<lambda>n.\n         norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n         2 powr (s \\<bullet> (1::'a) - c))", "fix n :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n.\n       norm (fds_nth f (n + 2) / nat_power (n + 2) s)\n       \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n             2 powr (s \\<bullet> (1::'a) - c)\n 2. summable (\\<lambda>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))\n 3. summable\n     (\\<lambda>n.\n         norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n         2 powr (s \\<bullet> (1::'a) - c))", "have \"norm (fds_nth f (n + 2) / nat_power (n + 2) s) =\n            norm (fds_nth f (n + 2)) / real (n+2) powr c / real (n+2) powr (s \\<bullet> 1 - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (fds_nth f (n + 2) / nat_power (n + 2) s) =\n    norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n    real (n + 2) powr (s \\<bullet> (1::'a) - c)", "by (simp add: field_simps powr_diff norm_divide norm_nat_power)"], ["proof (state)\nthis:\n  norm (fds_nth f (n + 2) / nat_power (n + 2) s) =\n  norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n  real (n + 2) powr (s \\<bullet> (1::'a) - c)\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       norm (fds_nth f (n + 2) / nat_power (n + 2) s)\n       \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n             2 powr (s \\<bullet> (1::'a) - c)\n 2. summable (\\<lambda>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))\n 3. summable\n     (\\<lambda>n.\n         norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n         2 powr (s \\<bullet> (1::'a) - c))", "also"], ["proof (state)\nthis:\n  norm (fds_nth f (n + 2) / nat_power (n + 2) s) =\n  norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n  real (n + 2) powr (s \\<bullet> (1::'a) - c)\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       norm (fds_nth f (n + 2) / nat_power (n + 2) s)\n       \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n             2 powr (s \\<bullet> (1::'a) - c)\n 2. summable (\\<lambda>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))\n 3. summable\n     (\\<lambda>n.\n         norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n         2 powr (s \\<bullet> (1::'a) - c))", "have \"\\<dots> \\<le> norm (fds_nth f (n + 2)) / real (n+2) powr c / 2 powr (s \\<bullet> 1 - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n    real (n + 2) powr (s \\<bullet> (1::'a) - c)\n    \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n          2 powr (s \\<bullet> (1::'a) - c)", "using s"], ["proof (prove)\nusing this:\n  c \\<le> s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n    real (n + 2) powr (s \\<bullet> (1::'a) - c)\n    \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n          2 powr (s \\<bullet> (1::'a) - c)", "by (intro divide_left_mono divide_nonneg_pos powr_mono2 mult_pos_pos) simp_all"], ["proof (state)\nthis:\n  norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n  real (n + 2) powr (s \\<bullet> (1::'a) - c)\n  \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n        2 powr (s \\<bullet> (1::'a) - c)\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       norm (fds_nth f (n + 2) / nat_power (n + 2) s)\n       \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n             2 powr (s \\<bullet> (1::'a) - c)\n 2. summable (\\<lambda>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))\n 3. summable\n     (\\<lambda>n.\n         norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n         2 powr (s \\<bullet> (1::'a) - c))", "finally"], ["proof (chain)\npicking this:\n  norm (fds_nth f (n + 2) / nat_power (n + 2) s)\n  \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n        2 powr (s \\<bullet> (1::'a) - c)", "show \"norm (fds_nth f (n + 2) / nat_power (n + 2) s) \\<le> \\<dots>\""], ["proof (prove)\nusing this:\n  norm (fds_nth f (n + 2) / nat_power (n + 2) s)\n  \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n        2 powr (s \\<bullet> (1::'a) - c)\n\ngoal (1 subgoal):\n 1. norm (fds_nth f (n + 2) / nat_power (n + 2) s)\n    \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n          2 powr (s \\<bullet> (1::'a) - c)", "."], ["proof (state)\nthis:\n  norm (fds_nth f (n + 2) / nat_power (n + 2) s)\n  \\<le> norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n        2 powr (s \\<bullet> (1::'a) - c)\n\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))\n 2. summable\n     (\\<lambda>n.\n         norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n         2 powr (s \\<bullet> (1::'a) - c))", "qed (intro summable_ignore_initial_segment summable summable_divide summable_c)+"], ["proof (state)\nthis:\n  (\\<Sum>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))\n  \\<le> (\\<Sum>n.\n            norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n            2 powr (s \\<bullet> (1::'a) - c))\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "also"], ["proof (state)\nthis:\n  (\\<Sum>n. norm (fds_nth f (n + 2) / nat_power (n + 2) s))\n  \\<le> (\\<Sum>n.\n            norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n            2 powr (s \\<bullet> (1::'a) - c))\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "have \"\\<dots> = (\\<Sum>n. norm (fds_nth f (n+2)) / real (n+2) powr c) / 2 powr (s \\<bullet> 1 - c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n.\n        norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n        2 powr (s \\<bullet> (1::'a) - c)) =\n    (\\<Sum>n. norm (fds_nth f (n + 2)) / real (n + 2) powr c) /\n    2 powr (s \\<bullet> (1::'a) - c)", "by (intro suminf_divide summable_ignore_initial_segment summable_c)"], ["proof (state)\nthis:\n  (\\<Sum>n.\n      norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n      2 powr (s \\<bullet> (1::'a) - c)) =\n  (\\<Sum>n. norm (fds_nth f (n + 2)) / real (n + 2) powr c) /\n  2 powr (s \\<bullet> (1::'a) - c)\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "also"], ["proof (state)\nthis:\n  (\\<Sum>n.\n      norm (fds_nth f (n + 2)) / real (n + 2) powr c /\n      2 powr (s \\<bullet> (1::'a) - c)) =\n  (\\<Sum>n. norm (fds_nth f (n + 2)) / real (n + 2) powr c) /\n  2 powr (s \\<bullet> (1::'a) - c)\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "have \"\\<dots> = B / 2 powr (s \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n. norm (fds_nth f (n + 2)) / real (n + 2) powr c) /\n    2 powr (s \\<bullet> (1::'a) - c) =\n    B / 2 powr (s \\<bullet> (1::'a))", "by (simp add: B_def powr_diff)"], ["proof (state)\nthis:\n  (\\<Sum>n. norm (fds_nth f (n + 2)) / real (n + 2) powr c) /\n  2 powr (s \\<bullet> (1::'a) - c) =\n  B / 2 powr (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "finally"], ["proof (chain)\npicking this:\n  norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "."], ["proof (state)\nthis:\n  norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tendsto_eval_fds_Re_at_top:\n  assumes \"conv_abscissa (f :: 'a :: dirichlet_series fds) \\<noteq> \\<infinity>\"\n  assumes lim: \"filterlim (\\<lambda>x. S x \\<bullet> 1) at_top F\"\n  shows   \"((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "from assms(1)"], ["proof (chain)\npicking this:\n  conv_abscissa f \\<noteq> \\<infinity>", "have \"abs_conv_abscissa f < \\<infinity>\""], ["proof (prove)\nusing this:\n  conv_abscissa f \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f < \\<infinity>", "using abs_conv_le_conv_abscissa_plus_1[of f]"], ["proof (prove)\nusing this:\n  conv_abscissa f \\<noteq> \\<infinity>\n  abs_conv_abscissa f \\<le> conv_abscissa f + 1\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f < \\<infinity>", "by auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f < \\<infinity>\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "from ereal_dense2[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>z. abs_conv_abscissa f < ereal z \\<and> ereal z < \\<infinity>", "obtain c where c: \"abs_conv_abscissa f < ereal c\""], ["proof (prove)\nusing this:\n  \\<exists>z. abs_conv_abscissa f < ereal z \\<and> ereal z < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        abs_conv_abscissa f < ereal c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "define B where \"B = (\\<Sum>n. norm (fds_nth f (n+2)) / real (n+2) powr c) * 2 powr c\""], ["proof (state)\nthis:\n  B = (\\<Sum>n. norm (fds_nth f (n + 2)) / real (n + 2) powr c) * 2 powr c\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "have *: \"norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> 1)\" if s: \"s \\<bullet> 1 \\<ge> c\" for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "using eval_fds_at_top_tail_bound[of f c s] that c"], ["proof (prove)\nusing this:\n  \\<lbrakk>abs_conv_abscissa f < ereal c;\n   c \\<le> s \\<bullet> (1::'a)\\<rbrakk>\n  \\<Longrightarrow> norm (eval_fds f s - fds_nth f 1)\n                    \\<le> (\\<Sum>n.\n                              norm (fds_nth f (n + 2)) /\n                              real (n + 2) powr c) *\n                          2 powr c /\n                          2 powr (s \\<bullet> (1::'a))\n  c \\<le> s \\<bullet> (1::'a)\n  abs_conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. norm (eval_fds f s - fds_nth f 1) \\<le> B / 2 powr (s \\<bullet> (1::'a))", "by (simp add: B_def)"], ["proof (state)\nthis:\n  c \\<le> ?s \\<bullet> (1::'a) \\<Longrightarrow>\n  norm (eval_fds f ?s - fds_nth f 1) \\<le> B / 2 powr (?s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "moreover"], ["proof (state)\nthis:\n  c \\<le> ?s \\<bullet> (1::'a) \\<Longrightarrow>\n  norm (eval_fds f ?s - fds_nth f 1) \\<le> B / 2 powr (?s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "from lim"], ["proof (chain)\npicking this:\n  LIM x F. S x \\<bullet> (1::'a) :> at_top", "have \"eventually (\\<lambda>x. S x \\<bullet> 1 \\<ge> c) F\""], ["proof (prove)\nusing this:\n  LIM x F. S x \\<bullet> (1::'a) :> at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c \\<le> S x \\<bullet> (1::'a)", "by (auto simp: filterlim_at_top)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. c \\<le> S x \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "ultimately"], ["proof (chain)\npicking this:\n  c \\<le> ?s \\<bullet> (1::'a) \\<Longrightarrow>\n  norm (eval_fds f ?s - fds_nth f 1) \\<le> B / 2 powr (?s \\<bullet> (1::'a))\n  \\<forall>\\<^sub>F x in F. c \\<le> S x \\<bullet> (1::'a)", "have \"eventually (\\<lambda>x. norm (eval_fds f (S x) - fds_nth f 1) \\<le> \n                      B / 2 powr (S x \\<bullet> 1)) F\""], ["proof (prove)\nusing this:\n  c \\<le> ?s \\<bullet> (1::'a) \\<Longrightarrow>\n  norm (eval_fds f ?s - fds_nth f 1) \\<le> B / 2 powr (?s \\<bullet> (1::'a))\n  \\<forall>\\<^sub>F x in F. c \\<le> S x \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F.\n       norm (eval_fds f (S x) - fds_nth f 1)\n       \\<le> B / 2 powr (S x \\<bullet> (1::'a))", "by (auto elim!: eventually_mono)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F.\n     norm (eval_fds f (S x) - fds_nth f 1)\n     \\<le> B / 2 powr (S x \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F.\n     norm (eval_fds f (S x) - fds_nth f 1)\n     \\<le> B / 2 powr (S x \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "have \"((\\<lambda>x. B / 2 powr (S x \\<bullet> 1)) \\<longlongrightarrow> 0) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. B / 2 powr (S x \\<bullet> (1::'a))) \\<longlongrightarrow>\n     0)\n     F", "using filterlim_tendsto_pos_mult_at_top[OF tendsto_const[of \"ln 2\"] _ lim]"], ["proof (prove)\nusing this:\n  0 < ln 2 \\<Longrightarrow>\n  LIM x F. ln 2 * (S x \\<bullet> (1::'a)) :> at_top\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. B / 2 powr (S x \\<bullet> (1::'a))) \\<longlongrightarrow>\n     0)\n     F", "by (intro real_tendsto_divide_at_top[OF tendsto_const])\n       (auto simp: powr_def mult_ac intro!: filterlim_compose[OF exp_at_top])"], ["proof (state)\nthis:\n  ((\\<lambda>x. B / 2 powr (S x \\<bullet> (1::'a))) \\<longlongrightarrow> 0)\n   F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F.\n     norm (eval_fds f (S x) - fds_nth f 1)\n     \\<le> B / 2 powr (S x \\<bullet> (1::'a))\n  ((\\<lambda>x. B / 2 powr (S x \\<bullet> (1::'a))) \\<longlongrightarrow> 0)\n   F", "have \"((\\<lambda>x. eval_fds f (S x) - fds_nth f 1) \\<longlongrightarrow> 0) F\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F.\n     norm (eval_fds f (S x) - fds_nth f 1)\n     \\<le> B / 2 powr (S x \\<bullet> (1::'a))\n  ((\\<lambda>x. B / 2 powr (S x \\<bullet> (1::'a))) \\<longlongrightarrow> 0)\n   F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x) - fds_nth f 1) \\<longlongrightarrow>\n     (0::'a))\n     F", "by (rule Lim_null_comparison)"], ["proof (state)\nthis:\n  ((\\<lambda>x. eval_fds f (S x) - fds_nth f 1) \\<longlongrightarrow>\n   (0::'a))\n   F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "thus ?thesis"], ["proof (prove)\nusing this:\n  ((\\<lambda>x. eval_fds f (S x) - fds_nth f 1) \\<longlongrightarrow>\n   (0::'a))\n   F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F", "by (subst (asm) Lim_null [symmetric])"], ["proof (state)\nthis:\n  ((\\<lambda>x. eval_fds f (S x)) \\<longlongrightarrow> fds_nth f 1) F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tendsto_eval_fds_Re_at_top':\n  assumes \"conv_abscissa (f :: complex fds) \\<noteq> \\<infinity>\"\n  shows   \"uniform_limit UNIV (\\<lambda>\\<sigma> t. eval_fds f (of_real \\<sigma> + of_real t * \\<i>)\n                       ) (\\<lambda>_ .fds_nth f 1) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_limit UNIV\n     (\\<lambda>\\<sigma> t.\n         eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n     (\\<lambda>_. fds_nth f 1) at_top", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uniform_limit UNIV\n     (\\<lambda>\\<sigma> t.\n         eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n     (\\<lambda>_. fds_nth f 1) at_top", "from assms(1)"], ["proof (chain)\npicking this:\n  conv_abscissa f \\<noteq> \\<infinity>", "have \"abs_conv_abscissa f < \\<infinity>\""], ["proof (prove)\nusing this:\n  conv_abscissa f \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f < \\<infinity>", "using abs_conv_le_conv_abscissa_plus_1[of f]"], ["proof (prove)\nusing this:\n  conv_abscissa f \\<noteq> \\<infinity>\n  abs_conv_abscissa f \\<le> conv_abscissa f + 1\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f < \\<infinity>", "by auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f < \\<infinity>\n\ngoal (1 subgoal):\n 1. uniform_limit UNIV\n     (\\<lambda>\\<sigma> t.\n         eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n     (\\<lambda>_. fds_nth f 1) at_top", "from ereal_dense2[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>z. abs_conv_abscissa f < ereal z \\<and> ereal z < \\<infinity>", "obtain c where c: \"abs_conv_abscissa f < ereal c\""], ["proof (prove)\nusing this:\n  \\<exists>z. abs_conv_abscissa f < ereal z \\<and> ereal z < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        abs_conv_abscissa f < ereal c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. uniform_limit UNIV\n     (\\<lambda>\\<sigma> t.\n         eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n     (\\<lambda>_. fds_nth f 1) at_top", "define B where \"B \\<equiv> (\\<Sum>n. norm (fds_nth f (n+2)) / real (n+2) powr c) * 2 powr c\""], ["proof (state)\nthis:\n  B \\<equiv>\n  (\\<Sum>n. cmod (fds_nth f (n + 2)) / real (n + 2) powr c) * 2 powr c\n\ngoal (1 subgoal):\n 1. uniform_limit UNIV\n     (\\<lambda>\\<sigma> t.\n         eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n     (\\<lambda>_. fds_nth f 1) at_top", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_limit UNIV\n     (\\<lambda>\\<sigma> t.\n         eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n     (\\<lambda>_. fds_nth f 1) at_top", "unfolding uniform_limit_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e>0.\n       \\<forall>\\<^sub>F n in at_top.\n          \\<forall>x\\<in>UNIV.\n             dist\n              (eval_fds f (complex_of_real n + complex_of_real x * \\<i>))\n              (fds_nth f 1)\n             < e", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<forall>\\<^sub>F n in at_top.\n          \\<forall>x\\<in>UNIV.\n             dist\n              (eval_fds f (complex_of_real n + complex_of_real x * \\<i>))\n              (fds_nth f 1)\n             < e", "fix \\<epsilon> :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<forall>\\<^sub>F n in at_top.\n          \\<forall>x\\<in>UNIV.\n             dist\n              (eval_fds f (complex_of_real n + complex_of_real x * \\<i>))\n              (fds_nth f 1)\n             < e", "assume \"\\<epsilon> > 0\""], ["proof (state)\nthis:\n  0 < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<forall>\\<^sub>F n in at_top.\n          \\<forall>x\\<in>UNIV.\n             dist\n              (eval_fds f (complex_of_real n + complex_of_real x * \\<i>))\n              (fds_nth f 1)\n             < e", "hence \"eventually (\\<lambda>\\<sigma>. B / 2 powr \\<sigma> < \\<epsilon>) at_top\""], ["proof (prove)\nusing this:\n  0 < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F \\<sigma> in at_top. B / 2 powr \\<sigma> < \\<epsilon>", "by real_asymp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F \\<sigma> in at_top. B / 2 powr \\<sigma> < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       0 < e \\<Longrightarrow>\n       \\<forall>\\<^sub>F n in at_top.\n          \\<forall>x\\<in>UNIV.\n             dist\n              (eval_fds f (complex_of_real n + complex_of_real x * \\<i>))\n              (fds_nth f 1)\n             < e", "thus \"eventually (\\<lambda>\\<sigma>. \\<forall>t\\<in>UNIV.\n            dist (eval_fds f (of_real \\<sigma> + of_real t * \\<i>)) (fds_nth f 1) < \\<epsilon>) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F \\<sigma> in at_top. B / 2 powr \\<sigma> < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F \\<sigma> in at_top.\n       \\<forall>t\\<in>UNIV.\n          dist\n           (eval_fds f\n             (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n           (fds_nth f 1)\n          < \\<epsilon>", "using eventually_ge_at_top[of c]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F \\<sigma> in at_top. B / 2 powr \\<sigma> < \\<epsilon>\n  eventually ((\\<le>) c) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F \\<sigma> in at_top.\n       \\<forall>t\\<in>UNIV.\n          dist\n           (eval_fds f\n             (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n           (fds_nth f 1)\n          < \\<epsilon>", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>B / 2 powr \\<sigma> < \\<epsilon>; c \\<le> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t\\<in>UNIV.\n                            dist\n                             (eval_fds f\n                               (complex_of_real \\<sigma> +\n                                complex_of_real t * \\<i>))\n                             (fds_nth f 1)\n                            < \\<epsilon>", "case (elim \\<sigma>)"], ["proof (state)\nthis:\n  B / 2 powr \\<sigma> < \\<epsilon>\n  c \\<le> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>B / 2 powr \\<sigma> < \\<epsilon>; c \\<le> \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t\\<in>UNIV.\n                            dist\n                             (eval_fds f\n                               (complex_of_real \\<sigma> +\n                                complex_of_real t * \\<i>))\n                             (fds_nth f 1)\n                            < \\<epsilon>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>UNIV.\n       dist\n        (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n        (fds_nth f 1)\n       < \\<epsilon>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> UNIV \\<Longrightarrow>\n       dist\n        (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n        (fds_nth f 1)\n       < \\<epsilon>", "fix t :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> UNIV \\<Longrightarrow>\n       dist\n        (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n        (fds_nth f 1)\n       < \\<epsilon>", "have \"dist (eval_fds f (of_real \\<sigma> + of_real t * \\<i>)) (fds_nth f 1) \\<le> B / 2 powr \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n     (fds_nth f 1)\n    \\<le> B / 2 powr \\<sigma>", "using eval_fds_at_top_tail_bound[of f c \"of_real \\<sigma> + of_real t * \\<i>\"] elim c"], ["proof (prove)\nusing this:\n  \\<lbrakk>abs_conv_abscissa f < ereal c;\n   c \\<le> (complex_of_real \\<sigma> + complex_of_real t * \\<i>) \\<bullet>\n           1\\<rbrakk>\n  \\<Longrightarrow> cmod\n                     (eval_fds f\n                       (complex_of_real \\<sigma> +\n                        complex_of_real t * \\<i>) -\n                      fds_nth f 1)\n                    \\<le> (\\<Sum>n.\n                              cmod (fds_nth f (n + 2)) /\n                              real (n + 2) powr c) *\n                          2 powr c /\n                          2 powr\n                          ((complex_of_real \\<sigma> +\n                            complex_of_real t * \\<i>) \\<bullet>\n                           1)\n  B / 2 powr \\<sigma> < \\<epsilon>\n  c \\<le> \\<sigma>\n  abs_conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. dist (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n     (fds_nth f 1)\n    \\<le> B / 2 powr \\<sigma>", "by (simp add: dist_norm B_def)"], ["proof (state)\nthis:\n  dist (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n   (fds_nth f 1)\n  \\<le> B / 2 powr \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> UNIV \\<Longrightarrow>\n       dist\n        (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n        (fds_nth f 1)\n       < \\<epsilon>", "also"], ["proof (state)\nthis:\n  dist (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n   (fds_nth f 1)\n  \\<le> B / 2 powr \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> UNIV \\<Longrightarrow>\n       dist\n        (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n        (fds_nth f 1)\n       < \\<epsilon>", "have \"\\<dots> < \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B / 2 powr \\<sigma> < \\<epsilon>", "by fact"], ["proof (state)\nthis:\n  B / 2 powr \\<sigma> < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> UNIV \\<Longrightarrow>\n       dist\n        (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n        (fds_nth f 1)\n       < \\<epsilon>", "finally"], ["proof (chain)\npicking this:\n  dist (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n   (fds_nth f 1)\n  < \\<epsilon>", "show \"dist (eval_fds f (of_real \\<sigma> + of_real t * \\<i>)) (fds_nth f 1) < \\<epsilon>\""], ["proof (prove)\nusing this:\n  dist (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n   (fds_nth f 1)\n  < \\<epsilon>\n\ngoal (1 subgoal):\n 1. dist (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n     (fds_nth f 1)\n    < \\<epsilon>", "."], ["proof (state)\nthis:\n  dist (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n   (fds_nth f 1)\n  < \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t\\<in>UNIV.\n     dist (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n      (fds_nth f 1)\n     < \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F \\<sigma> in at_top.\n     \\<forall>t\\<in>UNIV.\n        dist\n         (eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n         (fds_nth f 1)\n        < \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  uniform_limit UNIV\n   (\\<lambda>\\<sigma> t.\n       eval_fds f (complex_of_real \\<sigma> + complex_of_real t * \\<i>))\n   (\\<lambda>_. fds_nth f 1) at_top\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tendsto_eval_fds_Re_going_to_at_top:\n  assumes \"conv_abscissa (f :: 'a :: dirichlet_series fds) \\<noteq> \\<infinity>\"\n  shows   \"((\\<lambda>s. eval_fds f s) \\<longlongrightarrow> fds_nth f 1) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_fds f \\<longlongrightarrow> fds_nth f 1)\n     ((\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top)", "using assms"], ["proof (prove)\nusing this:\n  conv_abscissa f \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. (eval_fds f \\<longlongrightarrow> fds_nth f 1)\n     ((\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top)", "by (rule tendsto_eval_fds_Re_at_top) auto"], ["", "lemma tendsto_eval_fds_Re_going_to_at_top':\n  assumes \"conv_abscissa (f :: complex fds) \\<noteq> \\<infinity>\"\n  shows   \"((\\<lambda>s. eval_fds f s) \\<longlongrightarrow> fds_nth f 1) (Re going_to at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_fds f \\<longlongrightarrow> fds_nth f 1) (Re going_to at_top)", "using assms"], ["proof (prove)\nusing this:\n  conv_abscissa f \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. (eval_fds f \\<longlongrightarrow> fds_nth f 1) (Re going_to at_top)", "by (rule tendsto_eval_fds_Re_at_top) auto"], ["", "text \\<open>\n  Any Dirichlet series that is not identically zero and does not diverge everywhere\n  has a half-plane in which it converges and is non-zero.\n\\<close>"], ["", "theorem fds_nonzero_halfplane_exists:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"conv_abscissa f < \\<infinity>\" \"f \\<noteq> 0\"\n  shows   \"eventually (\\<lambda>s. fds_converges f s \\<and> eval_fds f s \\<noteq> 0) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       fds_converges f s \\<and> eval_fds f s \\<noteq> (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       fds_converges f s \\<and> eval_fds f s \\<noteq> (0::'a)", "from ereal_dense2[OF assms(1)]"], ["proof (chain)\npicking this:\n  \\<exists>z. conv_abscissa f < ereal z \\<and> ereal z < \\<infinity>", "obtain c where c: \"conv_abscissa f < ereal c\""], ["proof (prove)\nusing this:\n  \\<exists>z. conv_abscissa f < ereal z \\<and> ereal z < \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        conv_abscissa f < ereal c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  conv_abscissa f < ereal c\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       fds_converges f s \\<and> eval_fds f s \\<noteq> (0::'a)", "have \"eventually (\\<lambda>s::'a. s \\<bullet> 1 > c) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       c < s \\<bullet> (1::'a)", "using eventually_gt_at_top[of c]"], ["proof (prove)\nusing this:\n  eventually ((<) c) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       c < s \\<bullet> (1::'a)", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     c < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       fds_converges f s \\<and> eval_fds f s \\<noteq> (0::'a)", "hence \"eventually (\\<lambda>s. fds_converges f s) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     c < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. eventually (fds_converges f)\n     ((\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top)", "by eventually_elim (use c in \\<open>auto intro!: fds_converges simp: less_le_trans\\<close>)"], ["proof (state)\nthis:\n  eventually (fds_converges f)\n   ((\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       fds_converges f s \\<and> eval_fds f s \\<noteq> (0::'a)", "moreover"], ["proof (state)\nthis:\n  eventually (fds_converges f)\n   ((\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       fds_converges f s \\<and> eval_fds f s \\<noteq> (0::'a)", "have \"eventually (\\<lambda>s. eval_fds f s \\<noteq> 0) ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds f s \\<noteq> (0::'a)", "using eval_fds_zeroD[OF assms(1)] assms(2)"], ["proof (prove)\nusing this:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds f s = (0::'a) \\<Longrightarrow>\n  f = 0\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds f s \\<noteq> (0::'a)", "by (auto simp: frequently_def)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds f s \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       fds_converges f s \\<and> eval_fds f s \\<noteq> (0::'a)", "ultimately"], ["proof (chain)\npicking this:\n  eventually (fds_converges f)\n   ((\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top)\n  \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds f s \\<noteq> (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  eventually (fds_converges f)\n   ((\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top)\n  \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds f s \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       fds_converges f s \\<and> eval_fds f s \\<noteq> (0::'a)", "by (rule eventually_conj)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     fds_converges f s \\<and> eval_fds f s \\<noteq> (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Normed series\\<close>"], ["", "lemma fds_converges_norm_iff [simp]: \n  fixes s :: \"'a :: {nat_power_normed_field,banach}\"\n  shows \"fds_converges (fds_norm f) (s \\<bullet> 1) \\<longleftrightarrow> fds_abs_converges f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (fds_norm f) (s \\<bullet> (1::'a)) = fds_abs_converges f s", "unfolding fds_converges_def fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         fds_nth (fds_norm f) n / nat_power n (s \\<bullet> (1::'a))) =\n    summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))", "by (rule summable_cong [OF eventually_mono[OF eventually_gt_at_top[of 0]]])\n     (simp add: fds_abs_converges_def fds_norm_def fds_nth_fds' norm_divide norm_nat_power)"], ["", "lemma fds_abs_converges_norm_iff [simp]: \n  fixes s :: \"'a :: {nat_power_normed_field,banach}\"\n  shows \"fds_abs_converges (fds_norm f) (s \\<bullet> 1) \\<longleftrightarrow> fds_abs_converges f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_norm f) (s \\<bullet> (1::'a)) =\n    fds_abs_converges f s", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         norm\n          (fds_nth (fds_norm f) n / nat_power n (s \\<bullet> (1::'a)))) =\n    summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))", "by (rule summable_cong [OF eventually_mono[OF eventually_gt_at_top[of 0]]])\n     (simp add: fds_abs_converges_def fds_norm_def fds_nth_fds' norm_divide norm_nat_power)"], ["", "lemma fds_converges_norm_iff': \n  fixes f :: \"'a :: {nat_power_normed_field,banach} fds\"\n  shows \"fds_converges (fds_norm f) s \\<longleftrightarrow> fds_abs_converges f (of_real s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_converges (fds_norm f) s = fds_abs_converges f (of_real s)", "unfolding fds_converges_def fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. fds_nth (fds_norm f) n / nat_power n s) =\n    summable (\\<lambda>n. norm (fds_nth f n / nat_power n (of_real s)))", "by (rule summable_cong [OF eventually_mono[OF eventually_gt_at_top[of 0]]])\n     (simp add: fds_abs_converges_def fds_norm_def fds_nth_fds' norm_divide norm_nat_power)"], ["", "lemma fds_abs_converges_norm_iff': \n  fixes f :: \"'a :: {nat_power_normed_field,banach} fds\"\n  shows \"fds_abs_converges (fds_norm f) s \\<longleftrightarrow> fds_abs_converges f (of_real s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_norm f) s = fds_abs_converges f (of_real s)", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth (fds_norm f) n / nat_power n s)) =\n    summable (\\<lambda>n. norm (fds_nth f n / nat_power n (of_real s)))", "by (rule summable_cong [OF eventually_mono[OF eventually_gt_at_top[of 0]]])\n     (simp add: fds_abs_converges_def fds_norm_def fds_nth_fds' norm_divide norm_nat_power)"], ["", "lemma abs_conv_abscissa_norm [simp]: \n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows \"abs_conv_abscissa (fds_norm f) = abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_norm f) = abs_conv_abscissa f", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. abs_conv_abscissa (fds_norm f) \\<le> abs_conv_abscissa f\n 2. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_norm f)", "show \"abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_norm f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_norm f)", "proof (rule abs_conv_abscissa_leI_weak)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       abs_conv_abscissa (fds_norm f) < ereal x \\<Longrightarrow>\n       fds_abs_converges f (of_real x)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       abs_conv_abscissa (fds_norm f) < ereal x \\<Longrightarrow>\n       fds_abs_converges f (of_real x)", "assume \"abs_conv_abscissa (fds_norm f) < ereal x\""], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_norm f) < ereal x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       abs_conv_abscissa (fds_norm f) < ereal x \\<Longrightarrow>\n       fds_abs_converges f (of_real x)", "hence \"fds_abs_converges (fds_norm f) (of_real x)\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa (fds_norm f) < ereal x\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_norm f) (of_real x)", "by (intro fds_abs_converges) auto"], ["proof (state)\nthis:\n  fds_abs_converges (fds_norm f) (of_real x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       abs_conv_abscissa (fds_norm f) < ereal x \\<Longrightarrow>\n       fds_abs_converges f (of_real x)", "thus \"fds_abs_converges f (of_real x)\""], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_norm f) (of_real x)\n\ngoal (1 subgoal):\n 1. fds_abs_converges f (of_real x)", "by (simp add: fds_abs_converges_norm_iff')"], ["proof (state)\nthis:\n  fds_abs_converges f (of_real x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> abs_conv_abscissa (fds_norm f)\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_norm f) \\<le> abs_conv_abscissa f", "qed (auto intro!: abs_conv_abscissa_leI_weak simp: fds_abs_converges_norm_iff' fds_abs_converges)"], ["", "lemma conv_abscissa_norm [simp]: \n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows \"conv_abscissa (fds_norm f) = abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (fds_norm f) = abs_conv_abscissa f", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. conv_abscissa (fds_norm f) \\<le> abs_conv_abscissa f\n 2. abs_conv_abscissa f \\<le> conv_abscissa (fds_norm f)", "show \"abs_conv_abscissa f \\<le> conv_abscissa (fds_norm f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> conv_abscissa (fds_norm f)", "proof (rule abs_conv_abscissa_leI_weak)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       conv_abscissa (fds_norm f) < ereal x \\<Longrightarrow>\n       fds_abs_converges f (of_real x)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       conv_abscissa (fds_norm f) < ereal x \\<Longrightarrow>\n       fds_abs_converges f (of_real x)", "assume \"conv_abscissa (fds_norm f) < ereal x\""], ["proof (state)\nthis:\n  conv_abscissa (fds_norm f) < ereal x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       conv_abscissa (fds_norm f) < ereal x \\<Longrightarrow>\n       fds_abs_converges f (of_real x)", "hence \"fds_converges (fds_norm f) (of_real x)\""], ["proof (prove)\nusing this:\n  conv_abscissa (fds_norm f) < ereal x\n\ngoal (1 subgoal):\n 1. fds_converges (fds_norm f) (of_real x)", "by (intro fds_converges) auto"], ["proof (state)\nthis:\n  fds_converges (fds_norm f) (of_real x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       conv_abscissa (fds_norm f) < ereal x \\<Longrightarrow>\n       fds_abs_converges f (of_real x)", "thus \"fds_abs_converges f (of_real x)\""], ["proof (prove)\nusing this:\n  fds_converges (fds_norm f) (of_real x)\n\ngoal (1 subgoal):\n 1. fds_abs_converges f (of_real x)", "by (simp add: fds_converges_norm_iff')"], ["proof (state)\nthis:\n  fds_abs_converges f (of_real x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> conv_abscissa (fds_norm f)\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_norm f) \\<le> abs_conv_abscissa f", "qed (auto intro!: conv_abscissa_leI_weak simp: fds_abs_converges)"], ["", "lemma \n  fixes f g :: \"'a :: dirichlet_series fds\"\n  assumes \"fds_abs_converges (fds_norm f) s\" \"fds_abs_converges (fds_norm g) s\"\n  shows   fds_abs_converges_norm_mult: \"fds_abs_converges (fds_norm (f * g)) s\"\n  and     eval_fds_norm_mult_le: \n            \"eval_fds (fds_norm (f * g)) s \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_norm (f * g)) s &&&\n    eval_fds (fds_norm (f * g)) s\n    \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_norm (f * g)) s\n 2. eval_fds (fds_norm (f * g)) s\n    \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s", "show conv: \"fds_abs_converges (fds_norm (f * g)) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_norm (f * g)) s", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n. norm (fds_nth (fds_norm (f * g)) n / nat_power n s))", "proof (rule summable_comparison_test_ev)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_norm (f * g)) n / nat_power n s)) \\<le> ?g n\n 2. summable ?g", "have \"fds_abs_converges (fds_norm f * fds_norm g) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_norm f * fds_norm g) s", "by (rule fds_abs_converges_mult assms)+"], ["proof (state)\nthis:\n  fds_abs_converges (fds_norm f * fds_norm g) s\n\ngoal (2 subgoals):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_norm (f * g)) n / nat_power n s)) \\<le> ?g n\n 2. summable ?g", "thus \"summable (\\<lambda>n. norm (fds_nth (fds_norm f * fds_norm g) n) / nat_power n s)\""], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_norm f * fds_norm g) s\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         norm (fds_nth (fds_norm f * fds_norm g) n) / nat_power n s)", "by (simp add: fds_abs_converges_def)"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n. norm (fds_nth (fds_norm f * fds_norm g) n) / nat_power n s)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       norm (norm (fds_nth (fds_norm (f * g)) n / nat_power n s))\n       \\<le> norm (fds_nth (fds_norm f * fds_norm g) n) / nat_power n s", "qed (auto intro!: always_eventually divide_right_mono order.trans[OF fds_nth_norm_mult_le] \n            simp: norm_divide)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_norm (f * g)) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f * g)) s\n    \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s", "have conv': \"fds_abs_converges (fds_norm f * fds_norm g) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_norm f * fds_norm g) s", "by (intro fds_abs_converges_mult assms)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_norm f * fds_norm g) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f * g)) s\n    \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s", "hence \"eval_fds (fds_norm (f * g)) s \\<le> eval_fds (fds_norm f * fds_norm g) s\""], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_norm f * fds_norm g) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f * g)) s \\<le> eval_fds (fds_norm f * fds_norm g) s", "using conv"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_norm f * fds_norm g) s\n  fds_abs_converges (fds_norm (f * g)) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f * g)) s \\<le> eval_fds (fds_norm f * fds_norm g) s", "unfolding eval_fds_def fds_abs_converges_def norm_divide"], ["proof (prove)\nusing this:\n  summable\n   (\\<lambda>n.\n       norm (fds_nth (fds_norm f * fds_norm g) n) / norm (nat_power n s))\n  summable\n   (\\<lambda>n. norm (fds_nth (fds_norm (f * g)) n) / norm (nat_power n s))\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. fds_nth (fds_norm (f * g)) n / nat_power n s)\n    \\<le> (\\<Sum>n. fds_nth (fds_norm f * fds_norm g) n / nat_power n s)", "by (intro suminf_le allI divide_right_mono) (simp_all add: norm_mult fds_nth_norm_mult_le)"], ["proof (state)\nthis:\n  eval_fds (fds_norm (f * g)) s \\<le> eval_fds (fds_norm f * fds_norm g) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f * g)) s\n    \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s", "also"], ["proof (state)\nthis:\n  eval_fds (fds_norm (f * g)) s \\<le> eval_fds (fds_norm f * fds_norm g) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f * g)) s\n    \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s", "have \"\\<dots> = eval_fds (fds_norm f) s * eval_fds (fds_norm g) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_norm f * fds_norm g) s =\n    eval_fds (fds_norm f) s * eval_fds (fds_norm g) s", "by (intro eval_fds_mult assms)"], ["proof (state)\nthis:\n  eval_fds (fds_norm f * fds_norm g) s =\n  eval_fds (fds_norm f) s * eval_fds (fds_norm g) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f * g)) s\n    \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s", "finally"], ["proof (chain)\npicking this:\n  eval_fds (fds_norm (f * g)) s\n  \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s", "show \"eval_fds (fds_norm (f * g)) s \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s\""], ["proof (prove)\nusing this:\n  eval_fds (fds_norm (f * g)) s\n  \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f * g)) s\n    \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s", "."], ["proof (state)\nthis:\n  eval_fds (fds_norm (f * g)) s\n  \\<le> eval_fds (fds_norm f) s * eval_fds (fds_norm g) s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_norm_nonneg:\n  assumes \"fds_abs_converges (fds_norm f) s\"\n  shows   \"eval_fds (fds_norm f) s \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> eval_fds (fds_norm f) s", "using assms"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_norm f) s\n\ngoal (1 subgoal):\n 1. 0 \\<le> eval_fds (fds_norm f) s", "unfolding eval_fds_def fds_abs_converges_def"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (fds_nth (fds_norm f) n / nat_power n s))\n\ngoal (1 subgoal):\n 1. 0 \\<le> (\\<Sum>n. fds_nth (fds_norm f) n / nat_power n s)", "by (intro suminf_nonneg) auto"], ["", "lemma\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"fds_abs_converges (fds_norm f) s\"\n  shows   fds_abs_converges_norm_power: \"fds_abs_converges (fds_norm (f ^ n)) s\"\n  and     eval_fds_norm_power_le: \n            \"eval_fds (fds_norm (f ^ n)) s \\<le> eval_fds (fds_norm f) s ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_norm (f ^ n)) s &&&\n    eval_fds (fds_norm (f ^ n)) s \\<le> eval_fds (fds_norm f) s ^ n", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_norm (f ^ n)) s\n 2. eval_fds (fds_norm (f ^ n)) s \\<le> eval_fds (fds_norm f) s ^ n", "show *: \"fds_abs_converges (fds_norm (f ^ n)) s\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_norm (f ^ n)) s", "by (induction n) (auto intro!: fds_abs_converges_norm_mult assms)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_norm (f ^ ?n)) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f ^ n)) s \\<le> eval_fds (fds_norm f) s ^ n", "show \"eval_fds (fds_norm (f ^ n)) s \\<le> eval_fds (fds_norm f) s ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f ^ n)) s \\<le> eval_fds (fds_norm f) s ^ n", "by (induction n) (auto intro!: order.trans[OF eval_fds_norm_mult_le] assms * \n                                   mult_left_mono eval_fds_norm_nonneg)"], ["proof (state)\nthis:\n  eval_fds (fds_norm (f ^ n)) s \\<le> eval_fds (fds_norm f) s ^ n\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Logarithms of Dirichlet series\\<close>"], ["", "(* TODO: Move ? *)"], ["", "lemma eventually_gt_ereal_at_top: \"c \\<noteq> \\<infinity> \\<Longrightarrow> eventually (\\<lambda>x. ereal x > c) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> \\<infinity> \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_top. c < ereal x", "by (cases c) auto"], ["", "lemma eval_fds_log_deriv:\n  fixes s :: \"'a :: dirichlet_series\"\n  assumes \"fds_nth f 1 \\<noteq> 0\" \"s \\<bullet> 1 > abs_conv_abscissa f\" \n           \"s \\<bullet> 1 > abs_conv_abscissa (fds_deriv f / f)\"\n  assumes \"eval_fds f s \\<noteq> 0\"\n  shows   \"eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s", "have \"eval_fds (fds_deriv f / f * f) s = eval_fds (fds_deriv f / f) s * eval_fds f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f * f) s =\n    eval_fds (fds_deriv f / f) s * eval_fds f s", "using assms"], ["proof (prove)\nusing this:\n  fds_nth f 1 \\<noteq> (0::'a)\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a))\n  abs_conv_abscissa (fds_deriv f / f) < ereal (s \\<bullet> (1::'a))\n  eval_fds f s \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f * f) s =\n    eval_fds (fds_deriv f / f) s * eval_fds f s", "by (intro eval_fds_mult fds_abs_converges) auto"], ["proof (state)\nthis:\n  eval_fds (fds_deriv f / f * f) s =\n  eval_fds (fds_deriv f / f) s * eval_fds f s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s", "also"], ["proof (state)\nthis:\n  eval_fds (fds_deriv f / f * f) s =\n  eval_fds (fds_deriv f / f) s * eval_fds f s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s", "have \"fds_deriv f / f * f = fds_deriv f * (f * inverse f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv f / f * f = fds_deriv f * (f * inverse f)", "by (simp add: divide_fds_def algebra_simps)"], ["proof (state)\nthis:\n  fds_deriv f / f * f = fds_deriv f * (f * inverse f)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s", "also"], ["proof (state)\nthis:\n  fds_deriv f / f * f = fds_deriv f * (f * inverse f)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s", "have \"f * inverse f = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * inverse f = 1", "using assms"], ["proof (prove)\nusing this:\n  fds_nth f 1 \\<noteq> (0::'a)\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a))\n  abs_conv_abscissa (fds_deriv f / f) < ereal (s \\<bullet> (1::'a))\n  eval_fds f s \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f * inverse f = 1", "by (intro fds_right_inverse)"], ["proof (state)\nthis:\n  f * inverse f = 1\n\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s", "finally"], ["proof (chain)\npicking this:\n  eval_fds (fds_deriv f * 1) s = eval_fds (fds_deriv f / f) s * eval_fds f s", "show ?thesis"], ["proof (prove)\nusing this:\n  eval_fds (fds_deriv f * 1) s = eval_fds (fds_deriv f / f) s * eval_fds f s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s", "using assms"], ["proof (prove)\nusing this:\n  eval_fds (fds_deriv f * 1) s = eval_fds (fds_deriv f / f) s * eval_fds f s\n  fds_nth f 1 \\<noteq> (0::'a)\n  abs_conv_abscissa f < ereal (s \\<bullet> (1::'a))\n  abs_conv_abscissa (fds_deriv f / f) < ereal (s \\<bullet> (1::'a))\n  eval_fds f s \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s", "by simp"], ["proof (state)\nthis:\n  eval_fds (fds_deriv f / f) s = eval_fds (fds_deriv f) s / eval_fds f s\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Given a sufficiently nice absolutely convergent Dirichlet series that converges\n  to some function $f(s)$ and a holomorphic branch of $\\ln f(s)$, we can construct \n  a Dirichlet series that absolutely converges to that logarithm.\n\\<close>"], ["", "lemma eval_fds_ln:\n  fixes s0 :: ereal\n  assumes nz: \"\\<And>s. Re s > s0 \\<Longrightarrow> eval_fds f s \\<noteq> 0\" \"fds_nth f 1 \\<noteq> 0\"\n  assumes l: \"exp l = fds_nth f 1\" \"((g \\<circ> of_real) \\<longlongrightarrow> l) at_top\"\n  assumes g: \"\\<And>s. Re s > s0 \\<Longrightarrow> exp (g s) = eval_fds f s\"\n  assumes holo_g: \"g holomorphic_on {s. Re s > s0}\"\n  assumes \"ereal (Re s) > s0\"\n  assumes \"s0 \\<ge> abs_conv_abscissa f\" and \"s0 \\<ge> abs_conv_abscissa (fds_deriv f / f)\"\n  shows   \"eval_fds (fds_ln l f) s = g s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "let ?s0 = \"abs_conv_abscissa f\" and ?s1 = \"abs_conv_abscissa (inverse f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "let ?h = \"\\<lambda>s. eval_fds (fds_ln l f) s - g s\""], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "let ?A = \"{s. Re s > s0}\""], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "have open_A: \"open ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open {s. s0 < ereal (Re s)}", "by (cases s0) (auto simp: open_halfspace_Re_gt)"], ["proof (state)\nthis:\n  open {s. s0 < ereal (Re s)}\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "have \"conv_abscissa f \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> abs_conv_abscissa f", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "moreover"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "from assms"], ["proof (chain)\npicking this:\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0", "have \"\\<dots> \\<noteq> \\<infinity>\""], ["proof (prove)\nusing this:\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<noteq> \\<infinity>", "by auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "ultimately"], ["proof (chain)\npicking this:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n  abs_conv_abscissa f \\<noteq> \\<infinity>", "have \"conv_abscissa f \\<noteq> \\<infinity>\""], ["proof (prove)\nusing this:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n  abs_conv_abscissa f \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. conv_abscissa f \\<noteq> \\<infinity>", "by auto"], ["proof (state)\nthis:\n  conv_abscissa f \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "have \"conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "also"], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "have \"\\<dots> \\<le> abs_conv_abscissa (fds_deriv f / f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)", "unfolding fds_ln_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_integral l (fds_deriv f / f))\n    \\<le> abs_conv_abscissa (fds_deriv f / f)", "by (simp add: abs_conv_abscissa_integral)"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "finally"], ["proof (chain)\npicking this:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)", "have \"conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>\""], ["proof (prove)\nusing this:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>", "using assms"], ["proof (prove)\nusing this:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>", "by (auto simp: max_def abs_conv_abscissa_deriv split: if_splits)"], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "have deriv_g [derivative_intros]:\n    \"(g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s) (at s within B)\"\n    if s: \"Re s > s0\" for s B"], ["proof (prove)\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "have \"conv_abscissa f \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> abs_conv_abscissa f", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "also"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "have \"\\<dots> \\<le> s0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> s0", "using assms"], ["proof (prove)\nusing this:\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> s0", "by simp"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> s0\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "also"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> s0\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "have \"\\<dots> < Re s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s0 < ereal (Re s)", "by fact"], ["proof (state)\nthis:\n  s0 < ereal (Re s)\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "finally"], ["proof (chain)\npicking this:\n  conv_abscissa f < ereal (Re s)", "have s': \"Re s > conv_abscissa f\""], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal (Re s)\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal (Re s)", "."], ["proof (state)\nthis:\n  conv_abscissa f < ereal (Re s)\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "have deriv_g: \"(g has_field_derivative deriv g s) (at s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (g has_field_derivative deriv g s) (at s)", "using holomorphic_derivI[OF holo_g open_A, of s] s"], ["proof (prove)\nusing this:\n  s \\<in> {s. s0 < ereal (Re s)} \\<Longrightarrow>\n  (g has_field_derivative deriv g s) (at s within ?T)\n  s0 < ereal (Re s)\n\ngoal (1 subgoal):\n 1. (g has_field_derivative deriv g s) (at s)", "by (auto simp: at_within_open[OF _ open_A])"], ["proof (state)\nthis:\n  (g has_field_derivative deriv g s) (at s)\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "have \"((\\<lambda>s. exp (g s)) has_field_derivative eval_fds f s * deriv g s) (at s)\" (is ?P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>s. exp (g s)) has_field_derivative eval_fds f s * deriv g s)\n     (at s)", "by (rule derivative_eq_intros deriv_g s)+ (insert s, simp_all add: g)"], ["proof (state)\nthis:\n  ((\\<lambda>s. exp (g s)) has_field_derivative eval_fds f s * deriv g s)\n   (at s)\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "also"], ["proof (state)\nthis:\n  ((\\<lambda>s. exp (g s)) has_field_derivative eval_fds f s * deriv g s)\n   (at s)\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "from s"], ["proof (chain)\npicking this:\n  s0 < ereal (Re s)", "have ev: \"eventually (\\<lambda>t. t \\<in> ?A) (nhds s)\""], ["proof (prove)\nusing this:\n  s0 < ereal (Re s)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F t in nhds s. t \\<in> {s. s0 < ereal (Re s)}", "by (intro eventually_nhds_in_open open_A) auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F t in nhds s. t \\<in> {s. s0 < ereal (Re s)}\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "have \"?P \\<longleftrightarrow> (eval_fds f has_field_derivative eval_fds f s * deriv g s) (at s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>s. exp (g s)) has_field_derivative eval_fds f s * deriv g s)\n     (at s) =\n    (eval_fds f has_field_derivative eval_fds f s * deriv g s) (at s)", "by (intro DERIV_cong_ev refl eventually_mono[OF ev]) (auto simp: g)"], ["proof (state)\nthis:\n  ((\\<lambda>s. exp (g s)) has_field_derivative eval_fds f s * deriv g s)\n   (at s) =\n  (eval_fds f has_field_derivative eval_fds f s * deriv g s) (at s)\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "finally"], ["proof (chain)\npicking this:\n  (eval_fds f has_field_derivative eval_fds f s * deriv g s) (at s)", "have \"(eval_fds f has_field_derivative eval_fds f s * deriv g s) (at s)\""], ["proof (prove)\nusing this:\n  (eval_fds f has_field_derivative eval_fds f s * deriv g s) (at s)\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds f s * deriv g s) (at s)", "."], ["proof (state)\nthis:\n  (eval_fds f has_field_derivative eval_fds f s * deriv g s) (at s)\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "moreover"], ["proof (state)\nthis:\n  (eval_fds f has_field_derivative eval_fds f s * deriv g s) (at s)\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "have \"(eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s)", "using s' assms"], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal (Re s)\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n\ngoal (1 subgoal):\n 1. (eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s)", "by (intro derivative_intros) auto"], ["proof (state)\nthis:\n  (eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s)\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "ultimately"], ["proof (chain)\npicking this:\n  (eval_fds f has_field_derivative eval_fds f s * deriv g s) (at s)\n  (eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s)", "have \"eval_fds f s * deriv g s = eval_fds (fds_deriv f) s\""], ["proof (prove)\nusing this:\n  (eval_fds f has_field_derivative eval_fds f s * deriv g s) (at s)\n  (eval_fds f has_field_derivative eval_fds (fds_deriv f) s) (at s)\n\ngoal (1 subgoal):\n 1. eval_fds f s * deriv g s = eval_fds (fds_deriv f) s", "by (rule DERIV_unique)"], ["proof (state)\nthis:\n  eval_fds f s * deriv g s = eval_fds (fds_deriv f) s\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "hence \"deriv g s = eval_fds (fds_deriv f) s / eval_fds f s\""], ["proof (prove)\nusing this:\n  eval_fds f s * deriv g s = eval_fds (fds_deriv f) s\n\ngoal (1 subgoal):\n 1. deriv g s = eval_fds (fds_deriv f) s / eval_fds f s", "using s nz"], ["proof (prove)\nusing this:\n  eval_fds f s * deriv g s = eval_fds (fds_deriv f) s\n  s0 < ereal (Re s)\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. deriv g s = eval_fds (fds_deriv f) s / eval_fds f s", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  deriv g s = eval_fds (fds_deriv f) s / eval_fds f s\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "with deriv_g"], ["proof (chain)\npicking this:\n  (g has_field_derivative deriv g s) (at s)\n  deriv g s = eval_fds (fds_deriv f) s / eval_fds f s", "show ?thesis"], ["proof (prove)\nusing this:\n  (g has_field_derivative deriv g s) (at s)\n  deriv g s = eval_fds (fds_deriv f) s / eval_fds f s\n\ngoal (1 subgoal):\n 1. (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n     (at s within B)", "by (auto intro: has_field_derivative_at_within)"], ["proof (state)\nthis:\n  (g has_field_derivative eval_fds (fds_deriv f) s / eval_fds f s)\n   (at s within B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s0 < ereal (Re ?s) \\<Longrightarrow>\n  (g has_field_derivative eval_fds (fds_deriv f) ?s / eval_fds f ?s)\n   (at ?s within ?B)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "have \"\\<exists>c. \\<forall>z\\<in>{z. Re z > s0}. ?h z = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       \\<forall>z\\<in>{z. s0 < ereal (Re z)}.\n          eval_fds (fds_ln l f) z - g z = c", "proof (rule has_field_derivative_zero_constant, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. convex {z. s0 < ereal (Re z)}\n 2. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. convex {z. s0 < ereal (Re z)}\n 2. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. convex {z. s0 < ereal (Re z)}", "using convex_halfspace_gt[of _ \"1::complex\"]"], ["proof (prove)\nusing this:\n  convex {x. ?b < 1 \\<bullet> x}\n\ngoal (1 subgoal):\n 1. convex {z. s0 < ereal (Re z)}", "by (cases s0) auto"], ["proof (state)\nthis:\n  convex {z. s0 < ereal (Re z)}\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "case (2 z)"], ["proof (state)\nthis:\n  z \\<in> {z. s0 < ereal (Re z)}\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "also"], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"\\<dots> \\<le> abs_conv_abscissa (fds_deriv f / f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)", "by (simp add: abs_conv_abscissa_ln)"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "also"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"\\<dots> < Re z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) < ereal (Re z)", "using 2 assms"], ["proof (prove)\nusing this:\n  z \\<in> {z. s0 < ereal (Re z)}\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) < ereal (Re z)", "by (auto simp: abs_conv_abscissa_deriv)"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_deriv f / f) < ereal (Re z)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "finally"], ["proof (chain)\npicking this:\n  conv_abscissa (fds_ln l f) < ereal (Re z)", "have s1: \"conv_abscissa (fds_ln l f) < ereal (Re z)\""], ["proof (prove)\nusing this:\n  conv_abscissa (fds_ln l f) < ereal (Re z)\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_ln l f) < ereal (Re z)", "."], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) < ereal (Re z)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"conv_abscissa f \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> abs_conv_abscissa f", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "also"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"\\<dots> < Re z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f < ereal (Re z)", "using 2 assms"], ["proof (prove)\nusing this:\n  z \\<in> {z. s0 < ereal (Re z)}\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f < ereal (Re z)", "by auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f < ereal (Re z)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "finally"], ["proof (chain)\npicking this:\n  conv_abscissa f < ereal (Re z)", "have s2: \"conv_abscissa f < ereal (Re z)\""], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal (Re z)\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal (Re z)", "."], ["proof (state)\nthis:\n  conv_abscissa f < ereal (Re z)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "from l"], ["proof (chain)\npicking this:\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top", "have \"fds_nth f 1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n\ngoal (1 subgoal):\n 1. fds_nth f 1 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  fds_nth f 1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "with 2 assms"], ["proof (chain)\npicking this:\n  z \\<in> {z. s0 < ereal (Re z)}\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  fds_nth f 1 \\<noteq> 0", "have *: \"eval_fds (fds_deriv f / f) z = eval_fds (fds_deriv f) z / (eval_fds f z)\""], ["proof (prove)\nusing this:\n  z \\<in> {z. s0 < ereal (Re z)}\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  fds_nth f 1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f) z = eval_fds (fds_deriv f) z / eval_fds f z", "by (auto simp: eval_fds_log_deriv)"], ["proof (state)\nthis:\n  eval_fds (fds_deriv f / f) z = eval_fds (fds_deriv f) z / eval_fds f z\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"eval_fds f z \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds f z \\<noteq> 0", "using 2 assms"], ["proof (prove)\nusing this:\n  z \\<in> {z. s0 < ereal (Re z)}\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n\ngoal (1 subgoal):\n 1. eval_fds f z \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  eval_fds f z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n        (at z within {z. s0 < ereal (Re z)})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n     (at z within {z. s0 < ereal (Re z)})", "using s1 s2 2 nz"], ["proof (prove)\nusing this:\n  conv_abscissa (fds_ln l f) < ereal (Re z)\n  conv_abscissa f < ereal (Re z)\n  z \\<in> {z. s0 < ereal (Re z)}\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n     (at z within {z. s0 < ereal (Re z)})", "by (auto intro!: derivative_eq_intros simp: * field_simps)"], ["proof (state)\nthis:\n  ((\\<lambda>x. eval_fds (fds_ln l f) x - g x) has_field_derivative 0)\n   (at z within {z. s0 < ereal (Re z)})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c.\n     \\<forall>z\\<in>{z. s0 < ereal (Re z)}.\n        eval_fds (fds_ln l f) z - g z = c\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "then"], ["proof (chain)\npicking this:\n  \\<exists>c.\n     \\<forall>z\\<in>{z. s0 < ereal (Re z)}.\n        eval_fds (fds_ln l f) z - g z = c", "obtain c where c: \"\\<And>z. Re z > s0 \\<Longrightarrow> ?h z = c\""], ["proof (prove)\nusing this:\n  \\<exists>c.\n     \\<forall>z\\<in>{z. s0 < ereal (Re z)}.\n        eval_fds (fds_ln l f) z - g z = c\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        (\\<And>z.\n            s0 < ereal (Re z) \\<Longrightarrow>\n            eval_fds (fds_ln l f) z - g z = c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s0 < ereal (Re ?z) \\<Longrightarrow> eval_fds (fds_ln l f) ?z - g ?z = c\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "have \"(at_top :: real filter) \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. at_top \\<noteq> bot", "by simp"], ["proof (state)\nthis:\n  at_top \\<noteq> bot\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "moreover"], ["proof (state)\nthis:\n  at_top \\<noteq> bot\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "from assms"], ["proof (chain)\npicking this:\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0", "have \"s0 \\<noteq> \\<infinity>\""], ["proof (prove)\nusing this:\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> exp (g ?s) = eval_fds f ?s\n  g holomorphic_on {s. s0 < ereal (Re s)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n\ngoal (1 subgoal):\n 1. s0 \\<noteq> \\<infinity>", "by auto"], ["proof (state)\nthis:\n  s0 \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "have \"eventually (\\<lambda>x. c = (?h \\<circ> of_real) x) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       c =\n       ((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ> complex_of_real)\n        x", "using eventually_gt_ereal_at_top[OF \\<open>s0 \\<noteq> \\<infinity>\\<close>]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top. s0 < ereal x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       c =\n       ((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ> complex_of_real)\n        x", "by eventually_elim (simp add: c)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     c =\n     ((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ> complex_of_real) x\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "hence \"((?h \\<circ> of_real) \\<longlongrightarrow> c) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top.\n     c =\n     ((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ> complex_of_real) x\n\ngoal (1 subgoal):\n 1. (((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ>\n      complex_of_real) \\<longlongrightarrow>\n     c)\n     at_top", "by (force intro: Lim_transform_eventually)"], ["proof (state)\nthis:\n  (((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   c)\n   at_top\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "moreover"], ["proof (state)\nthis:\n  (((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   c)\n   at_top\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "have \"((?h \\<circ> of_real) \\<longlongrightarrow> fds_nth (fds_ln l f) 1 - l) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ>\n      complex_of_real) \\<longlongrightarrow>\n     fds_nth (fds_ln l f) 1 - l)\n     at_top", "using \\<open>conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>\\<close> and l"], ["proof (prove)\nusing this:\n  conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n\ngoal (1 subgoal):\n 1. (((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ>\n      complex_of_real) \\<longlongrightarrow>\n     fds_nth (fds_ln l f) 1 - l)\n     at_top", "unfolding o_def"], ["proof (prove)\nusing this:\n  conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>\n  exp l = fds_nth f 1\n  ((\\<lambda>x. g (complex_of_real x)) \\<longlongrightarrow> l) at_top\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         eval_fds (fds_ln l f) (complex_of_real x) -\n         g (complex_of_real x)) \\<longlongrightarrow>\n     fds_nth (fds_ln l f) 1 - l)\n     at_top", "by (intro tendsto_intros tendsto_eval_fds_Re_at_top) (auto simp: filterlim_ident)"], ["proof (state)\nthis:\n  (((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   fds_nth (fds_ln l f) 1 - l)\n   at_top\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "ultimately"], ["proof (chain)\npicking this:\n  at_top \\<noteq> bot\n  (((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   c)\n   at_top\n  (((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   fds_nth (fds_ln l f) 1 - l)\n   at_top", "have \"c = fds_nth (fds_ln l f) 1 - l\""], ["proof (prove)\nusing this:\n  at_top \\<noteq> bot\n  (((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   c)\n   at_top\n  (((\\<lambda>s. eval_fds (fds_ln l f) s - g s) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   fds_nth (fds_ln l f) 1 - l)\n   at_top\n\ngoal (1 subgoal):\n 1. c = fds_nth (fds_ln l f) 1 - l", "by (rule tendsto_unique)"], ["proof (state)\nthis:\n  c = fds_nth (fds_ln l f) 1 - l\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "with c[OF \\<open>Re s > s0\\<close>] and l and nz"], ["proof (chain)\npicking this:\n  eval_fds (fds_ln l f) s - g s = c\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  c = fds_nth (fds_ln l f) 1 - l", "show ?thesis"], ["proof (prove)\nusing this:\n  eval_fds (fds_ln l f) s - g s = c\n  exp l = fds_nth f 1\n  ((g \\<circ> complex_of_real) \\<longlongrightarrow> l) at_top\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  c = fds_nth (fds_ln l f) 1 - l\n\ngoal (1 subgoal):\n 1. eval_fds (fds_ln l f) s = g s", "by (simp add: exp_minus field_simps)"], ["proof (state)\nthis:\n  eval_fds (fds_ln l f) s = g s\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Less explicitly: For a sufficiently nice absolutely convergent Dirichlet series converging\n  to a function $f(s)$, the formal logarithm absolutely converges to some logarithm of $f(s)$.\n\\<close>"], ["", "lemma eval_fds_ln':\n  fixes s0 :: ereal\n  assumes \"ereal (Re s) > s0\"\n  assumes \"s0 \\<ge> abs_conv_abscissa f\" and \"s0 \\<ge> abs_conv_abscissa (fds_deriv f / f)\"\n      and nz: \"\\<And>s. Re s > s0 \\<Longrightarrow> eval_fds f s \\<noteq> 0\" \"fds_nth f 1 \\<noteq> 0\"\n  assumes l: \"exp l = fds_nth f 1\"\n  shows   \"exp (eval_fds (fds_ln l f) s) = eval_fds f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "let ?s0 = \"abs_conv_abscissa f\" and ?s1 = \"abs_conv_abscissa (inverse f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "let ?h = \"\\<lambda>s. eval_fds f s * exp (-eval_fds (fds_ln l f) s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "have \"conv_abscissa f \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> abs_conv_abscissa f", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "moreover"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "from assms"], ["proof (chain)\npicking this:\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1", "have \"\\<dots> \\<noteq> \\<infinity>\""], ["proof (prove)\nusing this:\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<noteq> \\<infinity>", "by auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "ultimately"], ["proof (chain)\npicking this:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n  abs_conv_abscissa f \\<noteq> \\<infinity>", "have \"conv_abscissa f \\<noteq> \\<infinity>\""], ["proof (prove)\nusing this:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n  abs_conv_abscissa f \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. conv_abscissa f \\<noteq> \\<infinity>", "by auto"], ["proof (state)\nthis:\n  conv_abscissa f \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "have \"conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "also"], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "have \"\\<dots> \\<le> abs_conv_abscissa (fds_deriv f / f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)", "unfolding fds_ln_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_integral l (fds_deriv f / f))\n    \\<le> abs_conv_abscissa (fds_deriv f / f)", "by (simp add: abs_conv_abscissa_integral)"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "finally"], ["proof (chain)\npicking this:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)", "have \"conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>\""], ["proof (prove)\nusing this:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>", "using assms"], ["proof (prove)\nusing this:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>", "by (auto simp: max_def abs_conv_abscissa_deriv split: if_splits)"], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "have \"\\<exists>c. \\<forall>z\\<in>{z. Re z > s0}. ?h z = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       \\<forall>z\\<in>{z. s0 < ereal (Re z)}.\n          eval_fds f z * exp (- eval_fds (fds_ln l f) z) = c", "proof (rule has_field_derivative_zero_constant, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. convex {z. s0 < ereal (Re z)}\n 2. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. convex {z. s0 < ereal (Re z)}\n 2. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. convex {z. s0 < ereal (Re z)}", "using convex_halfspace_gt[of _ \"1::complex\"]"], ["proof (prove)\nusing this:\n  convex {x. ?b < 1 \\<bullet> x}\n\ngoal (1 subgoal):\n 1. convex {z. s0 < ereal (Re z)}", "by (cases s0) auto"], ["proof (state)\nthis:\n  convex {z. s0 < ereal (Re z)}\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "case (2 z)"], ["proof (state)\nthis:\n  z \\<in> {z. s0 < ereal (Re z)}\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "also"], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_ln l f)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"\\<dots> \\<le> abs_conv_abscissa (fds_deriv f / f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)", "unfolding fds_ln_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_integral l (fds_deriv f / f))\n    \\<le> abs_conv_abscissa (fds_deriv f / f)", "by (simp add: abs_conv_abscissa_integral)"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "also"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_ln l f) \\<le> abs_conv_abscissa (fds_deriv f / f)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"\\<dots> < Re z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) < ereal (Re z)", "using 2 assms"], ["proof (prove)\nusing this:\n  z \\<in> {z. s0 < ereal (Re z)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv f / f) < ereal (Re z)", "by (auto simp: abs_conv_abscissa_deriv)"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_deriv f / f) < ereal (Re z)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "finally"], ["proof (chain)\npicking this:\n  conv_abscissa (fds_ln l f) < ereal (Re z)", "have s1: \"conv_abscissa (fds_ln l f) < ereal (Re z)\""], ["proof (prove)\nusing this:\n  conv_abscissa (fds_ln l f) < ereal (Re z)\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_ln l f) < ereal (Re z)", "."], ["proof (state)\nthis:\n  conv_abscissa (fds_ln l f) < ereal (Re z)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"conv_abscissa f \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> abs_conv_abscissa f", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "also"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"\\<dots> < Re z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f < ereal (Re z)", "using 2 assms"], ["proof (prove)\nusing this:\n  z \\<in> {z. s0 < ereal (Re z)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f < ereal (Re z)", "by auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f < ereal (Re z)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "finally"], ["proof (chain)\npicking this:\n  conv_abscissa f < ereal (Re z)", "have s2: \"conv_abscissa f < ereal (Re z)\""], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal (Re z)\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal (Re z)", "."], ["proof (state)\nthis:\n  conv_abscissa f < ereal (Re z)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "from l"], ["proof (chain)\npicking this:\n  exp l = fds_nth f 1", "have \"fds_nth f 1 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  exp l = fds_nth f 1\n\ngoal (1 subgoal):\n 1. fds_nth f 1 \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  fds_nth f 1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "with 2 assms"], ["proof (chain)\npicking this:\n  z \\<in> {z. s0 < ereal (Re z)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  fds_nth f 1 \\<noteq> 0", "have *: \"eval_fds (fds_deriv f / f) z = eval_fds (fds_deriv f) z / (eval_fds f z)\""], ["proof (prove)\nusing this:\n  z \\<in> {z. s0 < ereal (Re z)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n  fds_nth f 1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv f / f) z = eval_fds (fds_deriv f) z / eval_fds f z", "by (subst eval_fds_log_deriv) auto"], ["proof (state)\nthis:\n  eval_fds (fds_deriv f / f) z = eval_fds (fds_deriv f) z / eval_fds f z\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "have \"eval_fds f z \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds f z \\<noteq> 0", "using 2 assms"], ["proof (prove)\nusing this:\n  z \\<in> {z. s0 < ereal (Re z)}\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n\ngoal (1 subgoal):\n 1. eval_fds f z \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  eval_fds f z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {z. s0 < ereal (Re z)} \\<Longrightarrow>\n       ((\\<lambda>x.\n            eval_fds f x *\n            exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n        0)\n        (at z within {z. s0 < ereal (Re z)})", "thus ?case"], ["proof (prove)\nusing this:\n  eval_fds f z \\<noteq> 0\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         eval_fds f x *\n         exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n     0)\n     (at z within {z. s0 < ereal (Re z)})", "using s1 s2"], ["proof (prove)\nusing this:\n  eval_fds f z \\<noteq> 0\n  conv_abscissa (fds_ln l f) < ereal (Re z)\n  conv_abscissa f < ereal (Re z)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         eval_fds f x *\n         exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n     0)\n     (at z within {z. s0 < ereal (Re z)})", "by (auto intro!: derivative_eq_intros simp: *)"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       eval_fds f x * exp (- eval_fds (fds_ln l f) x)) has_field_derivative\n   0)\n   (at z within {z. s0 < ereal (Re z)})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c.\n     \\<forall>z\\<in>{z. s0 < ereal (Re z)}.\n        eval_fds f z * exp (- eval_fds (fds_ln l f) z) = c\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "then"], ["proof (chain)\npicking this:\n  \\<exists>c.\n     \\<forall>z\\<in>{z. s0 < ereal (Re z)}.\n        eval_fds f z * exp (- eval_fds (fds_ln l f) z) = c", "obtain c where c: \"\\<And>z. Re z > s0 \\<Longrightarrow> ?h z = c\""], ["proof (prove)\nusing this:\n  \\<exists>c.\n     \\<forall>z\\<in>{z. s0 < ereal (Re z)}.\n        eval_fds f z * exp (- eval_fds (fds_ln l f) z) = c\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        (\\<And>z.\n            s0 < ereal (Re z) \\<Longrightarrow>\n            eval_fds f z * exp (- eval_fds (fds_ln l f) z) =\n            c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s0 < ereal (Re ?z) \\<Longrightarrow>\n  eval_fds f ?z * exp (- eval_fds (fds_ln l f) ?z) = c\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "have \"(at_top :: real filter) \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. at_top \\<noteq> bot", "by simp"], ["proof (state)\nthis:\n  at_top \\<noteq> bot\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "moreover"], ["proof (state)\nthis:\n  at_top \\<noteq> bot\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "from assms"], ["proof (chain)\npicking this:\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1", "have \"s0 \\<noteq> \\<infinity>\""], ["proof (prove)\nusing this:\n  s0 < ereal (Re s)\n  abs_conv_abscissa f \\<le> s0\n  abs_conv_abscissa (fds_deriv f / f) \\<le> s0\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  exp l = fds_nth f 1\n\ngoal (1 subgoal):\n 1. s0 \\<noteq> \\<infinity>", "by auto"], ["proof (state)\nthis:\n  s0 \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "have \"eventually (\\<lambda>x. c = (?h \\<circ> of_real) x) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       c =\n       ((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n        complex_of_real)\n        x", "using eventually_gt_ereal_at_top[OF \\<open>s0 \\<noteq> \\<infinity>\\<close>]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top. s0 < ereal x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in at_top.\n       c =\n       ((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n        complex_of_real)\n        x", "by eventually_elim (simp add: c)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in at_top.\n     c =\n     ((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n      complex_of_real)\n      x\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "hence \"((?h \\<circ> of_real) \\<longlongrightarrow> c) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in at_top.\n     c =\n     ((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n      complex_of_real)\n      x\n\ngoal (1 subgoal):\n 1. (((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n      complex_of_real) \\<longlongrightarrow>\n     c)\n     at_top", "by (force intro: Lim_transform_eventually)"], ["proof (state)\nthis:\n  (((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   c)\n   at_top\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "moreover"], ["proof (state)\nthis:\n  (((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   c)\n   at_top\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "have \"((?h \\<circ> of_real) \\<longlongrightarrow> fds_nth f 1 * exp (-fds_nth (fds_ln l f) 1)) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n      complex_of_real) \\<longlongrightarrow>\n     fds_nth f 1 * exp (- fds_nth (fds_ln l f) 1))\n     at_top", "unfolding o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         eval_fds f (complex_of_real x) *\n         exp (- eval_fds (fds_ln l f)\n                 (complex_of_real x))) \\<longlongrightarrow>\n     fds_nth f 1 * exp (- fds_nth (fds_ln l f) 1))\n     at_top", "using \\<open>conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>\\<close> and \\<open>conv_abscissa f \\<noteq> \\<infinity>\\<close>"], ["proof (prove)\nusing this:\n  conv_abscissa (fds_ln l f) \\<noteq> \\<infinity>\n  conv_abscissa f \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         eval_fds f (complex_of_real x) *\n         exp (- eval_fds (fds_ln l f)\n                 (complex_of_real x))) \\<longlongrightarrow>\n     fds_nth f 1 * exp (- fds_nth (fds_ln l f) 1))\n     at_top", "by (intro tendsto_intros tendsto_eval_fds_Re_at_top) (auto simp: filterlim_ident)"], ["proof (state)\nthis:\n  (((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   fds_nth f 1 * exp (- fds_nth (fds_ln l f) 1))\n   at_top\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "ultimately"], ["proof (chain)\npicking this:\n  at_top \\<noteq> bot\n  (((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   c)\n   at_top\n  (((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   fds_nth f 1 * exp (- fds_nth (fds_ln l f) 1))\n   at_top", "have \"c = fds_nth f 1 * exp (-fds_nth (fds_ln l f) 1)\""], ["proof (prove)\nusing this:\n  at_top \\<noteq> bot\n  (((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   c)\n   at_top\n  (((\\<lambda>s. eval_fds f s * exp (- eval_fds (fds_ln l f) s)) \\<circ>\n    complex_of_real) \\<longlongrightarrow>\n   fds_nth f 1 * exp (- fds_nth (fds_ln l f) 1))\n   at_top\n\ngoal (1 subgoal):\n 1. c = fds_nth f 1 * exp (- fds_nth (fds_ln l f) 1)", "by (rule tendsto_unique)"], ["proof (state)\nthis:\n  c = fds_nth f 1 * exp (- fds_nth (fds_ln l f) 1)\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "with c[OF \\<open>Re s > s0\\<close>] and l and nz"], ["proof (chain)\npicking this:\n  eval_fds f s * exp (- eval_fds (fds_ln l f) s) = c\n  exp l = fds_nth f 1\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  c = fds_nth f 1 * exp (- fds_nth (fds_ln l f) 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  eval_fds f s * exp (- eval_fds (fds_ln l f) s) = c\n  exp l = fds_nth f 1\n  s0 < ereal (Re ?s) \\<Longrightarrow> eval_fds f ?s \\<noteq> 0\n  fds_nth f 1 \\<noteq> 0\n  c = fds_nth f 1 * exp (- fds_nth (fds_ln l f) 1)\n\ngoal (1 subgoal):\n 1. exp (eval_fds (fds_ln l f) s) = eval_fds f s", "by (simp add: exp_minus field_simps)"], ["proof (state)\nthis:\n  exp (eval_fds (fds_ln l f) s) = eval_fds f s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_ln_completely_multiplicative:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\"\n  assumes \"fds_nth f 1 \\<noteq> 0\"\n  shows   \"fds_ln l f = fds (\\<lambda>n. if n = 1 then l else fds_nth f n * mangoldt n /\\<^sub>R ln n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "have \"fds_ln l f = fds_integral l (fds_deriv f / f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln l f = fds_integral l (fds_deriv f / f)", "by (simp add: fds_ln_def)"], ["proof (state)\nthis:\n  fds_ln l f = fds_integral l (fds_deriv f / f)\n\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "also"], ["proof (state)\nthis:\n  fds_ln l f = fds_integral l (fds_deriv f / f)\n\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "have \"fds_deriv f = -fds (\\<lambda>n. fds_nth f n * mangoldt n) * f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f", "by (intro completely_multiplicative_fds_deriv' assms)"], ["proof (state)\nthis:\n  fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f\n\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "also"], ["proof (state)\nthis:\n  fds_deriv f = - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f\n\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "have \"\\<dots> / f = -fds (\\<lambda>n. fds_nth f n * mangoldt n) * (f * inverse f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f / f =\n    - fds (\\<lambda>n. fds_nth f n * mangoldt n) * (f * inverse f)", "by (simp add: divide_fds_def)"], ["proof (state)\nthis:\n  - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f / f =\n  - fds (\\<lambda>n. fds_nth f n * mangoldt n) * (f * inverse f)\n\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "also"], ["proof (state)\nthis:\n  - fds (\\<lambda>n. fds_nth f n * mangoldt n) * f / f =\n  - fds (\\<lambda>n. fds_nth f n * mangoldt n) * (f * inverse f)\n\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "from assms"], ["proof (chain)\npicking this:\n  completely_multiplicative_function (fds_nth f)\n  fds_nth f 1 \\<noteq> (0::'a)", "have \"f * inverse f = 1\""], ["proof (prove)\nusing this:\n  completely_multiplicative_function (fds_nth f)\n  fds_nth f 1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f * inverse f = 1", "by (simp add: fds_right_inverse)"], ["proof (state)\nthis:\n  f * inverse f = 1\n\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "also"], ["proof (state)\nthis:\n  f * inverse f = 1\n\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "have \"fds_integral l (- fds (\\<lambda>n. fds_nth f n * mangoldt n) * 1) = \n               fds (\\<lambda>n. if n = 1 then l else fds_nth f n * mangoldt n /\\<^sub>R ln n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_integral l (- fds (\\<lambda>n. fds_nth f n * mangoldt n) * 1) =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "by (simp add: fds_integral_def cong: if_cong)"], ["proof (state)\nthis:\n  fds_integral l (- fds (\\<lambda>n. fds_nth f n * mangoldt n) * 1) =\n  fds (\\<lambda>n.\n          if n = 1 then l\n          else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))\n\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "finally"], ["proof (chain)\npicking this:\n  fds_ln l f =\n  fds (\\<lambda>n.\n          if n = 1 then l\n          else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_ln l f =\n  fds (\\<lambda>n.\n          if n = 1 then l\n          else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))\n\ngoal (1 subgoal):\n 1. fds_ln l f =\n    fds (\\<lambda>n.\n            if n = 1 then l\n            else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))", "."], ["proof (state)\nthis:\n  fds_ln l f =\n  fds (\\<lambda>n.\n          if n = 1 then l\n          else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_ln_completely_multiplicative_strong:\n  fixes s :: \"'a :: dirichlet_series\" and l :: 'a and f :: \"'a fds\" and g :: \"nat \\<Rightarrow> 'a\"\n  defines \"h \\<equiv> fds (\\<lambda>n. fds_nth (fds_ln l f) n * g n)\"\n  assumes \"fds_abs_converges h s\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" and \"fds_nth f 1 \\<noteq> 0\"\n  shows  \"(\\<lambda>(p,k). (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) / of_nat (Suc k))\n            abs_summable_on ({p. prime p} \\<times> UNIV)\" (is ?th1)\n    and  \"eval_fds h s = l * g 1 + (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p}\\<times>UNIV.\n            (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) / of_nat (Suc k))\" (is ?th2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV &&&\n    eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "let ?P = \"{p::nat. prime p}\""], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "interpret f: completely_multiplicative_function \"fds_nth f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function (fds_nth f)", "by fact"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "from assms"], ["proof (chain)\npicking this:\n  h \\<equiv> fds (\\<lambda>n. fds_nth (fds_ln l f) n * g n)\n  fds_abs_converges h s\n  completely_multiplicative_function (fds_nth f)\n  fds_nth f 1 \\<noteq> (0::'a)", "have *: \"(\\<lambda>n. fds_nth h n / nat_power n s) abs_summable_on UNIV\""], ["proof (prove)\nusing this:\n  h \\<equiv> fds (\\<lambda>n. fds_nth (fds_ln l f) n * g n)\n  fds_abs_converges h s\n  completely_multiplicative_function (fds_nth f)\n  fds_nth f 1 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. fds_nth h n / nat_power n s) abs_summable_on UNIV", "by (auto simp: abs_summable_on_nat_iff' fds_abs_converges_def)"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth h n / nat_power n s) abs_summable_on UNIV\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "have eq: \"h = fds (\\<lambda>n. if n = 1 then l * g 1 else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h =\n    fds (\\<lambda>n.\n            if n = 1 then l * g 1\n            else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n))", "using fds_ln_completely_multiplicative [OF assms(3), of l]"], ["proof (prove)\nusing this:\n  fds_nth f 1 \\<noteq> (0::'a) \\<Longrightarrow>\n  fds_ln l f =\n  fds (\\<lambda>n.\n          if n = 1 then l\n          else fds_nth f n * mangoldt n /\\<^sub>R ln (real n))\n\ngoal (1 subgoal):\n 1. h =\n    fds (\\<lambda>n.\n            if n = 1 then l * g 1\n            else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n))", "by (simp add: h_def fds_eq_iff)"], ["proof (state)\nthis:\n  h =\n  fds (\\<lambda>n.\n          if n = 1 then l * g 1\n          else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n))\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "note *"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth h n / nat_power n s) abs_summable_on UNIV\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "also"], ["proof (state)\nthis:\n  (\\<lambda>n. fds_nth h n / nat_power n s) abs_summable_on UNIV\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "have \"(\\<lambda>n. fds_nth h n / nat_power n s) abs_summable_on UNIV \\<longleftrightarrow>\n          (\\<lambda>x. if x = Suc 0 then l * g 1 else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n                nat_power x s) abs_summable_on {1} \\<union> Collect primepow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>n. fds_nth h n / nat_power n s) abs_summable_on UNIV) =\n    ((\\<lambda>x.\n         if x = Suc 0 then l * g 1\n         else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n              nat_power x s) abs_summable_on\n     {1} \\<union> Collect primepow)", "using eq"], ["proof (prove)\nusing this:\n  h =\n  fds (\\<lambda>n.\n          if n = 1 then l * g 1\n          else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>n. fds_nth h n / nat_power n s) abs_summable_on UNIV) =\n    ((\\<lambda>x.\n         if x = Suc 0 then l * g 1\n         else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n              nat_power x s) abs_summable_on\n     {1} \\<union> Collect primepow)", "by (intro abs_summable_on_cong_neutral) (auto simp: fds_nth_fds mangoldt_def)"], ["proof (state)\nthis:\n  ((\\<lambda>n. fds_nth h n / nat_power n s) abs_summable_on UNIV) =\n  ((\\<lambda>x.\n       if x = Suc 0 then l * g 1\n       else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n            nat_power x s) abs_summable_on\n   {1} \\<union> Collect primepow)\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      if x = Suc 0 then l * g 1\n      else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n           nat_power x s) abs_summable_on\n  {1} \\<union> Collect primepow", "have sum1: \"(\\<lambda>x. if x = Suc 0 then l * g 1 else \n                        fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) / nat_power x s)\n                      abs_summable_on Collect primepow\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      if x = Suc 0 then l * g 1\n      else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n           nat_power x s) abs_summable_on\n  {1} \\<union> Collect primepow\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if x = Suc 0 then l * g 1\n        else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n             nat_power x s) abs_summable_on\n    Collect primepow", "by (rule abs_summable_on_subset) auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      if x = Suc 0 then l * g 1\n      else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n           nat_power x s) abs_summable_on\n  Collect primepow\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "also"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      if x = Suc 0 then l * g 1\n      else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n           nat_power x s) abs_summable_on\n  Collect primepow\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "have \"?this \\<longleftrightarrow> (\\<lambda>x. fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) / nat_power x s) \n                         abs_summable_on Collect primepow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         if x = Suc 0 then l * g 1\n         else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n              nat_power x s) abs_summable_on\n     Collect primepow) =\n    ((\\<lambda>x.\n         fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n         nat_power x s) abs_summable_on\n     Collect primepow)", "by (intro abs_summable_on_cong) (insert primepow_gt_Suc_0, auto)"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       if x = Suc 0 then l * g 1\n       else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n            nat_power x s) abs_summable_on\n   Collect primepow) =\n  ((\\<lambda>x.\n       fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n       nat_power x s) abs_summable_on\n   Collect primepow)\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "also"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       if x = Suc 0 then l * g 1\n       else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n            nat_power x s) abs_summable_on\n   Collect primepow) =\n  ((\\<lambda>x.\n       fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n       nat_power x s) abs_summable_on\n   Collect primepow)\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "have \"\\<dots> \\<longleftrightarrow> (\\<lambda>(p,k). fds_nth f (p ^ Suc k) * g (p ^ Suc k) * mangoldt (p ^ Suc k)\n                 /\\<^sub>R ln (real (p ^ Suc k)) / nat_power (p ^ Suc k) s) abs_summable_on (?P \\<times> UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n         nat_power x s) abs_summable_on\n     Collect primepow) =\n    ((\\<lambda>(p, k).\n         fds_nth f (p ^ Suc k) * g (p ^ Suc k) *\n         mangoldt (p ^ Suc k) /\\<^sub>R\n         ln (real (p ^ Suc k)) /\n         nat_power (p ^ Suc k) s) abs_summable_on\n     {p. prime p} \\<times> UNIV)", "using bij_betw_primepows"], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>(p, k). p ^ Suc k) (Collect prime \\<times> UNIV)\n   (Collect primepow)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n         nat_power x s) abs_summable_on\n     Collect primepow) =\n    ((\\<lambda>(p, k).\n         fds_nth f (p ^ Suc k) * g (p ^ Suc k) *\n         mangoldt (p ^ Suc k) /\\<^sub>R\n         ln (real (p ^ Suc k)) /\n         nat_power (p ^ Suc k) s) abs_summable_on\n     {p. prime p} \\<times> UNIV)", "unfolding case_prod_unfold"], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>p. fst p ^ Suc (snd p)) (Collect prime \\<times> UNIV)\n   (Collect primepow)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n         nat_power x s) abs_summable_on\n     Collect primepow) =\n    ((\\<lambda>p.\n         fds_nth f (fst p ^ Suc (snd p)) * g (fst p ^ Suc (snd p)) *\n         mangoldt (fst p ^ Suc (snd p)) /\\<^sub>R\n         ln (real (fst p ^ Suc (snd p))) /\n         nat_power (fst p ^ Suc (snd p)) s) abs_summable_on\n     {p. prime p} \\<times> UNIV)", "by (intro abs_summable_on_reindex_bij_betw [symmetric])"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n       nat_power x s) abs_summable_on\n   Collect primepow) =\n  ((\\<lambda>(p, k).\n       fds_nth f (p ^ Suc k) * g (p ^ Suc k) *\n       mangoldt (p ^ Suc k) /\\<^sub>R\n       ln (real (p ^ Suc k)) /\n       nat_power (p ^ Suc k) s) abs_summable_on\n   {p. prime p} \\<times> UNIV)\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "also"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n       nat_power x s) abs_summable_on\n   Collect primepow) =\n  ((\\<lambda>(p, k).\n       fds_nth f (p ^ Suc k) * g (p ^ Suc k) *\n       mangoldt (p ^ Suc k) /\\<^sub>R\n       ln (real (p ^ Suc k)) /\n       nat_power (p ^ Suc k) s) abs_summable_on\n   {p. prime p} \\<times> UNIV)\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "have \"\\<dots> \\<longleftrightarrow> ?th1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>(p, k).\n         fds_nth f (p ^ Suc k) * g (p ^ Suc k) *\n         mangoldt (p ^ Suc k) /\\<^sub>R\n         ln (real (p ^ Suc k)) /\n         nat_power (p ^ Suc k) s) abs_summable_on\n     {p. prime p} \\<times> UNIV) =\n    ((\\<lambda>(p, k).\n         (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n         of_nat (Suc k)) abs_summable_on\n     {p. prime p} \\<times> UNIV)", "by (intro abs_summable_on_cong)\n       (auto simp: f.mult f.power mangoldt_def aprimedivisor_prime_power ln_realpow prime_gt_0_nat \n          nat_power_power_left divide_simps scaleR_conv_of_real simp del: power_Suc)"], ["proof (state)\nthis:\n  ((\\<lambda>(p, k).\n       fds_nth f (p ^ Suc k) * g (p ^ Suc k) *\n       mangoldt (p ^ Suc k) /\\<^sub>R\n       ln (real (p ^ Suc k)) /\n       nat_power (p ^ Suc k) s) abs_summable_on\n   {p. prime p} \\<times> UNIV) =\n  ((\\<lambda>(p, k).\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k)) abs_summable_on\n   {p. prime p} \\<times> UNIV)\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>(p, k).\n      (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n      of_nat (Suc k)) abs_summable_on\n  {p. prime p} \\<times> UNIV", "show ?th1"], ["proof (prove)\nusing this:\n  (\\<lambda>(p, k).\n      (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n      of_nat (Suc k)) abs_summable_on\n  {p. prime p} \\<times> UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV", "."], ["proof (state)\nthis:\n  (\\<lambda>(p, k).\n      (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n      of_nat (Suc k)) abs_summable_on\n  {p. prime p} \\<times> UNIV\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "have \"eval_fds h s = (\\<Sum>\\<^sub>an. fds_nth h n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds h s = (\\<Sum>\\<^sub>an. fds_nth h n / nat_power n s)", "using *"], ["proof (prove)\nusing this:\n  (\\<lambda>n. fds_nth h n / nat_power n s) abs_summable_on UNIV\n\ngoal (1 subgoal):\n 1. eval_fds h s = (\\<Sum>\\<^sub>an. fds_nth h n / nat_power n s)", "unfolding eval_fds_def"], ["proof (prove)\nusing this:\n  (\\<lambda>n. fds_nth h n / nat_power n s) abs_summable_on UNIV\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. fds_nth h n / nat_power n s) =\n    (\\<Sum>\\<^sub>an. fds_nth h n / nat_power n s)", "by (subst infsetsum_nat') auto"], ["proof (state)\nthis:\n  eval_fds h s = (\\<Sum>\\<^sub>an. fds_nth h n / nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "also"], ["proof (state)\nthis:\n  eval_fds h s = (\\<Sum>\\<^sub>an. fds_nth h n / nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "have \"\\<dots> = (\\<Sum>\\<^sub>an \\<in> {1} \\<union> {n. primepow n}.\n        if n = 1 then l * g 1 else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /  nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an. fds_nth h n / nat_power n s) =\n    (\\<Sum>\\<^sub>an\\<in>{1} \\<union> {n. primepow n}.\n       if n = 1 then l * g 1\n       else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n            nat_power n s)", "by (intro infsetsum_cong_neutral) (auto simp: eq fds_nth_fds mangoldt_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an. fds_nth h n / nat_power n s) =\n  (\\<Sum>\\<^sub>an\\<in>{1} \\<union> {n. primepow n}.\n     if n = 1 then l * g 1\n     else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n          nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an. fds_nth h n / nat_power n s) =\n  (\\<Sum>\\<^sub>an\\<in>{1} \\<union> {n. primepow n}.\n     if n = 1 then l * g 1\n     else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n          nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "have \"\\<dots> = l * g 1 + (\\<Sum>\\<^sub>an | primepow n.\n         if n = 1 then l * g 1 else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) / nat_power n s)\"\n    (is \"_ = _ + ?x\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1} \\<union> {n. primepow n}.\n       if n = 1 then l * g 1\n       else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n            nat_power n s) =\n    l * g 1 +\n    (\\<Sum>\\<^sub>an | primepow n.\n       if n = 1 then l * g 1\n       else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n            nat_power n s)", "using sum1 primepow_gt_Suc_0"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      if x = Suc 0 then l * g 1\n      else fds_nth f x * g x * mangoldt x /\\<^sub>R ln (real x) /\n           nat_power x s) abs_summable_on\n  Collect primepow\n  primepow ?n \\<Longrightarrow> Suc 0 < ?n\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1} \\<union> {n. primepow n}.\n       if n = 1 then l * g 1\n       else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n            nat_power n s) =\n    l * g 1 +\n    (\\<Sum>\\<^sub>an | primepow n.\n       if n = 1 then l * g 1\n       else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n            nat_power n s)", "by (subst infsetsum_Un_disjoint) auto"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1} \\<union> {n. primepow n}.\n     if n = 1 then l * g 1\n     else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n          nat_power n s) =\n  l * g 1 +\n  (\\<Sum>\\<^sub>an | primepow n.\n     if n = 1 then l * g 1\n     else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n          nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1} \\<union> {n. primepow n}.\n     if n = 1 then l * g 1\n     else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n          nat_power n s) =\n  l * g 1 +\n  (\\<Sum>\\<^sub>an | primepow n.\n     if n = 1 then l * g 1\n     else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n          nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "have \"?x =\n    (\\<Sum>\\<^sub>an\\<in>Collect primepow. fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) / nat_power n s)\"\n    (is \"_ = infsetsum ?f _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an | primepow n.\n       if n = 1 then l * g 1\n       else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n            nat_power n s) =\n    (\\<Sum>\\<^sub>an\\<in>Collect primepow.\n       fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) / nat_power n s)", "by (intro infsetsum_cong refl) (insert primepow_gt_Suc_0, auto)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an | primepow n.\n     if n = 1 then l * g 1\n     else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n          nat_power n s) =\n  (\\<Sum>\\<^sub>an\\<in>Collect primepow.\n     fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) / nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an | primepow n.\n     if n = 1 then l * g 1\n     else fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n          nat_power n s) =\n  (\\<Sum>\\<^sub>an\\<in>Collect primepow.\n     fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) / nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "have \"\\<dots> = (\\<Sum>\\<^sub>a(p,k)\\<in>(?P \\<times> UNIV). fds_nth f (p ^ Suc k) * g (p ^ Suc k) *\n                    mangoldt (p ^ Suc k) /\\<^sub>R ln (p ^ Suc k) / nat_power (p ^ Suc k) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>Collect primepow.\n       fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n       nat_power n s) =\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       fds_nth f (p ^ Suc k) * g (p ^ Suc k) *\n       mangoldt (p ^ Suc k) /\\<^sub>R\n       ln (real (p ^ Suc k)) /\n       nat_power (p ^ Suc k) s)", "using bij_betw_primepows"], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>(p, k). p ^ Suc k) (Collect prime \\<times> UNIV)\n   (Collect primepow)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>Collect primepow.\n       fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n       nat_power n s) =\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       fds_nth f (p ^ Suc k) * g (p ^ Suc k) *\n       mangoldt (p ^ Suc k) /\\<^sub>R\n       ln (real (p ^ Suc k)) /\n       nat_power (p ^ Suc k) s)", "unfolding case_prod_unfold"], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>p. fst p ^ Suc (snd p)) (Collect prime \\<times> UNIV)\n   (Collect primepow)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>Collect primepow.\n       fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) /\n       nat_power n s) =\n    (\\<Sum>\\<^sub>ap\\<in>{p. prime p} \\<times> UNIV.\n       fds_nth f (fst p ^ Suc (snd p)) * g (fst p ^ Suc (snd p)) *\n       mangoldt (fst p ^ Suc (snd p)) /\\<^sub>R\n       ln (real (fst p ^ Suc (snd p))) /\n       nat_power (fst p ^ Suc (snd p)) s)", "by (intro infsetsum_reindex_bij_betw [symmetric])"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>Collect primepow.\n     fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) / nat_power n s) =\n  (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n     fds_nth f (p ^ Suc k) * g (p ^ Suc k) * mangoldt (p ^ Suc k) /\\<^sub>R\n     ln (real (p ^ Suc k)) /\n     nat_power (p ^ Suc k) s)\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>Collect primepow.\n     fds_nth f n * g n * mangoldt n /\\<^sub>R ln (real n) / nat_power n s) =\n  (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n     fds_nth f (p ^ Suc k) * g (p ^ Suc k) * mangoldt (p ^ Suc k) /\\<^sub>R\n     ln (real (p ^ Suc k)) /\n     nat_power (p ^ Suc k) s)\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "have \"\\<dots> = (\\<Sum>\\<^sub>a(p,k)\\<in>(?P \\<times> UNIV). \n                     (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) / of_nat (Suc k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       fds_nth f (p ^ Suc k) * g (p ^ Suc k) *\n       mangoldt (p ^ Suc k) /\\<^sub>R\n       ln (real (p ^ Suc k)) /\n       nat_power (p ^ Suc k) s) =\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "by (intro infsetsum_cong)\n       (auto simp: f.mult f.power mangoldt_def aprimedivisor_prime_power ln_realpow prime_gt_0_nat \n          nat_power_power_left divide_simps scaleR_conv_of_real simp del: power_Suc)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n     fds_nth f (p ^ Suc k) * g (p ^ Suc k) * mangoldt (p ^ Suc k) /\\<^sub>R\n     ln (real (p ^ Suc k)) /\n     nat_power (p ^ Suc k) s) =\n  (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n     (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) / of_nat (Suc k))\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "finally"], ["proof (chain)\npicking this:\n  eval_fds h s =\n  l * g 1 +\n  (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n     (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) / of_nat (Suc k))", "show ?th2"], ["proof (prove)\nusing this:\n  eval_fds h s =\n  l * g 1 +\n  (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n     (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) / of_nat (Suc k))\n\ngoal (1 subgoal):\n 1. eval_fds h s =\n    l * g 1 +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) /\n       of_nat (Suc k))", "."], ["proof (state)\nthis:\n  eval_fds h s =\n  l * g 1 +\n  (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n     (fds_nth f p / nat_power p s) ^ Suc k * g (p ^ Suc k) / of_nat (Suc k))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eval_fds_ln_completely_multiplicative:\n  fixes s :: \"'a :: dirichlet_series\" and l :: 'a and f :: \"'a fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" and \"fds_nth f 1 \\<noteq> 0\"\n  assumes \"s \\<bullet> 1 > abs_conv_abscissa (fds_deriv f / f)\"\n  shows  \"(\\<lambda>(p,k). (fds_nth f p / nat_power p s) ^ Suc k / of_nat (Suc k))\n            abs_summable_on ({p. prime p} \\<times> UNIV)\" (is ?th1)\n    and  \"eval_fds (fds_ln l f) s =\n                  l + (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p}\\<times>UNIV.\n                        (fds_nth f p / nat_power p s) ^ Suc k / of_nat (Suc k))\" (is ?th2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV &&&\n    eval_fds (fds_ln l f) s =\n    l +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k / of_nat (Suc k))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds (fds_ln l f) s =\n    l +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k / of_nat (Suc k))", "from assms"], ["proof (chain)\npicking this:\n  completely_multiplicative_function (fds_nth f)\n  fds_nth f 1 \\<noteq> (0::'a)\n  abs_conv_abscissa (fds_deriv f / f) < ereal (s \\<bullet> (1::'a))", "have \"fds_abs_converges (fds_ln l f) s\""], ["proof (prove)\nusing this:\n  completely_multiplicative_function (fds_nth f)\n  fds_nth f 1 \\<noteq> (0::'a)\n  abs_conv_abscissa (fds_deriv f / f) < ereal (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_ln l f) s", "by (intro fds_abs_converges_ln) (auto intro!: fds_abs_converges_mult intro: fds_abs_converges)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_ln l f) s\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds (fds_ln l f) s =\n    l +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k / of_nat (Suc k))", "hence \"fds_abs_converges (fds (\\<lambda>n. fds_nth (fds_ln l f) n * 1)) s\""], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_ln l f) s\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds (\\<lambda>n. fds_nth (fds_ln l f) n * (1::'a))) s", "by simp"], ["proof (state)\nthis:\n  fds_abs_converges (fds (\\<lambda>n. fds_nth (fds_ln l f) n * (1::'a))) s\n\ngoal (2 subgoals):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV\n 2. eval_fds (fds_ln l f) s =\n    l +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k / of_nat (Suc k))", "from eval_fds_ln_completely_multiplicative_strong [OF this assms(1,2)]"], ["proof (chain)\npicking this:\n  (\\<lambda>(p, k).\n      (fds_nth f p / nat_power p s) ^ Suc k * (1::'a) /\n      of_nat (Suc k)) abs_summable_on\n  {p. prime p} \\<times> UNIV\n  eval_fds (fds (\\<lambda>n. fds_nth (fds_ln l f) n * (1::'a))) s =\n  l * (1::'a) +\n  (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n     (fds_nth f p / nat_power p s) ^ Suc k * (1::'a) / of_nat (Suc k))", "show ?th1 ?th2"], ["proof (prove)\nusing this:\n  (\\<lambda>(p, k).\n      (fds_nth f p / nat_power p s) ^ Suc k * (1::'a) /\n      of_nat (Suc k)) abs_summable_on\n  {p. prime p} \\<times> UNIV\n  eval_fds (fds (\\<lambda>n. fds_nth (fds_ln l f) n * (1::'a))) s =\n  l * (1::'a) +\n  (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n     (fds_nth f p / nat_power p s) ^ Suc k * (1::'a) / of_nat (Suc k))\n\ngoal (1 subgoal):\n 1. (\\<lambda>(p, k).\n        (fds_nth f p / nat_power p s) ^ Suc k /\n        of_nat (Suc k)) abs_summable_on\n    {p. prime p} \\<times> UNIV &&&\n    eval_fds (fds_ln l f) s =\n    l +\n    (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n       (fds_nth f p / nat_power p s) ^ Suc k / of_nat (Suc k))", "by simp_all"], ["proof (state)\nthis:\n  (\\<lambda>(p, k).\n      (fds_nth f p / nat_power p s) ^ Suc k /\n      of_nat (Suc k)) abs_summable_on\n  {p. prime p} \\<times> UNIV\n  eval_fds (fds_ln l f) s =\n  l +\n  (\\<Sum>\\<^sub>a(p, k)\\<in>{p. prime p} \\<times> UNIV.\n     (fds_nth f p / nat_power p s) ^ Suc k / of_nat (Suc k))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Exponential and logarithm\\<close>"], ["", "lemma summable_fds_exp_aux:\n  assumes \"fds_nth f' 1 = (0 :: 'a :: real_normed_algebra_1)\"\n  shows   \"summable (\\<lambda>k. fds_nth (f' ^ k) n /\\<^sub>R fact k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>k. fds_nth (f' ^ k) n /\\<^sub>R fact k)", "proof (rule summable_finite)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite ?N\n 2. \\<And>na.\n       na \\<notin> ?N \\<Longrightarrow>\n       fds_nth (f' ^ na) n /\\<^sub>R fact na = (0::'a)", "fix k"], ["proof (state)\ngoal (2 subgoals):\n 1. finite ?N\n 2. \\<And>na.\n       na \\<notin> ?N \\<Longrightarrow>\n       fds_nth (f' ^ na) n /\\<^sub>R fact na = (0::'a)", "assume \"k \\<notin> {..n}\""], ["proof (state)\nthis:\n  k \\<notin> {..n}\n\ngoal (2 subgoals):\n 1. finite ?N\n 2. \\<And>na.\n       na \\<notin> ?N \\<Longrightarrow>\n       fds_nth (f' ^ na) n /\\<^sub>R fact na = (0::'a)", "hence \"n < k\""], ["proof (prove)\nusing this:\n  k \\<notin> {..n}\n\ngoal (1 subgoal):\n 1. n < k", "by simp"], ["proof (state)\nthis:\n  n < k\n\ngoal (2 subgoals):\n 1. finite ?N\n 2. \\<And>na.\n       na \\<notin> ?N \\<Longrightarrow>\n       fds_nth (f' ^ na) n /\\<^sub>R fact na = (0::'a)", "also"], ["proof (state)\nthis:\n  n < k\n\ngoal (2 subgoals):\n 1. finite ?N\n 2. \\<And>na.\n       na \\<notin> ?N \\<Longrightarrow>\n       fds_nth (f' ^ na) n /\\<^sub>R fact na = (0::'a)", "have \"\\<dots> < 2 ^ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < 2 ^ k", "by (induction k) auto"], ["proof (state)\nthis:\n  k < 2 ^ k\n\ngoal (2 subgoals):\n 1. finite ?N\n 2. \\<And>na.\n       na \\<notin> ?N \\<Longrightarrow>\n       fds_nth (f' ^ na) n /\\<^sub>R fact na = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  n < 2 ^ k", "have \"fds_nth (f' ^ k) n = 0\""], ["proof (prove)\nusing this:\n  n < 2 ^ k\n\ngoal (1 subgoal):\n 1. fds_nth (f' ^ k) n = (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  n < 2 ^ k\n  fds_nth f' 1 = (0::'a)\n\ngoal (1 subgoal):\n 1. fds_nth (f' ^ k) n = (0::'a)", "by (intro fds_nth_power_eq_0) auto"], ["proof (state)\nthis:\n  fds_nth (f' ^ k) n = (0::'a)\n\ngoal (2 subgoals):\n 1. finite ?N\n 2. \\<And>na.\n       na \\<notin> ?N \\<Longrightarrow>\n       fds_nth (f' ^ na) n /\\<^sub>R fact na = (0::'a)", "thus \"fds_nth (f' ^ k) n /\\<^sub>R fact k = 0\""], ["proof (prove)\nusing this:\n  fds_nth (f' ^ k) n = (0::'a)\n\ngoal (1 subgoal):\n 1. fds_nth (f' ^ k) n /\\<^sub>R fact k = (0::'a)", "by simp"], ["proof (state)\nthis:\n  fds_nth (f' ^ k) n /\\<^sub>R fact k = (0::'a)\n\ngoal (1 subgoal):\n 1. finite {..n}", "qed auto"], ["", "lemma\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"fds_abs_converges f s\"\n  shows   fds_abs_converges_exp: \"fds_abs_converges (fds_exp f) s\"\n  and     eval_fds_exp: \"eval_fds (fds_exp f) s = exp (eval_fds f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_exp f) s &&&\n    eval_fds (fds_exp f) s = exp (eval_fds f s)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have conv: \"fds_abs_converges (fds_exp f) s\" and ev: \"eval_fds (fds_exp f) s = exp (eval_fds f s)\"\n    if \"fds_abs_converges f s\" and [simp]: \"fds_nth f (Suc 0) = 0\" for f"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_exp f) s &&&\n    eval_fds (fds_exp f) s = exp (eval_fds f s)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have [simp]: \"fds (\\<lambda>n. if n = Suc 0 then 0 else fds_nth f n) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds (\\<lambda>n. if n = Suc 0 then 0::'a else fds_nth f n) = f", "by (intro fds_eqI) simp_all"], ["proof (state)\nthis:\n  fds (\\<lambda>n. if n = Suc 0 then 0::'a else fds_nth f n) = f\n\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have  \"(\\<lambda>(k,n). fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on (UNIV \\<times> {1..})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(k, n).\n        fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n    UNIV \\<times> {1..}", "proof (subst abs_summable_on_Sigma_iff, safe, goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable {1..}\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<lambda>y.\n           fds_nth (f ^ x) y / fact x / nat_power y s) abs_summable_on\n       {1..}\n 4. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay\\<in>{1..}.\n          norm (fds_nth (f ^ x) y / fact x / nat_power y s)) abs_summable_on\n    UNIV", "case (3 k)"], ["proof (state)\nthis:\n  k \\<in> UNIV\n\ngoal (4 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable {1..}\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<lambda>y.\n           fds_nth (f ^ x) y / fact x / nat_power y s) abs_summable_on\n       {1..}\n 4. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay\\<in>{1..}.\n          norm (fds_nth (f ^ x) y / fact x / nat_power y s)) abs_summable_on\n    UNIV", "from that"], ["proof (chain)\npicking this:\n  fds_abs_converges f s\n  fds_nth f (Suc 0) = (0::'a)", "have \"fds_abs_converges (f ^ k) s\""], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n  fds_nth f (Suc 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. fds_abs_converges (f ^ k) s", "by (intro fds_abs_converges_power)"], ["proof (state)\nthis:\n  fds_abs_converges (f ^ k) s\n\ngoal (4 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable {1..}\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<lambda>y.\n           fds_nth (f ^ x) y / fact x / nat_power y s) abs_summable_on\n       {1..}\n 4. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay\\<in>{1..}.\n          norm (fds_nth (f ^ x) y / fact x / nat_power y s)) abs_summable_on\n    UNIV", "hence \"(\\<lambda>n. fds_nth (f ^ k) n / nat_power n s * inverse (fact k)) abs_summable_on {1..}\""], ["proof (prove)\nusing this:\n  fds_abs_converges (f ^ k) s\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        fds_nth (f ^ k) n / nat_power n s *\n        inverse (fact k)) abs_summable_on\n    {1..}", "unfolding fds_abs_converges_altdef"], ["proof (prove)\nusing this:\n  (\\<lambda>n. fds_nth (f ^ k) n / nat_power n s) abs_summable_on {1..}\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        fds_nth (f ^ k) n / nat_power n s *\n        inverse (fact k)) abs_summable_on\n    {1..}", "by (intro abs_summable_on_cmult_left)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      fds_nth (f ^ k) n / nat_power n s * inverse (fact k)) abs_summable_on\n  {1..}\n\ngoal (4 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable {1..}\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<lambda>y.\n           fds_nth (f ^ x) y / fact x / nat_power y s) abs_summable_on\n       {1..}\n 4. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay\\<in>{1..}.\n          norm (fds_nth (f ^ x) y / fact x / nat_power y s)) abs_summable_on\n    UNIV", "thus ?case"], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      fds_nth (f ^ k) n / nat_power n s * inverse (fact k)) abs_summable_on\n  {1..}\n\ngoal (1 subgoal):\n 1. (\\<lambda>y. fds_nth (f ^ k) y / fact k / nat_power y s) abs_summable_on\n    {1..}", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  (\\<lambda>y. fds_nth (f ^ k) y / fact k / nat_power y s) abs_summable_on\n  {1..}\n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable {1..}\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay\\<in>{1..}.\n          norm (fds_nth (f ^ x) y / fact x / nat_power y s)) abs_summable_on\n    UNIV", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable {1..}\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay\\<in>{1..}.\n          norm (fds_nth (f ^ x) y / fact x / nat_power y s)) abs_summable_on\n    UNIV", "case 4"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable {1..}\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay\\<in>{1..}.\n          norm (fds_nth (f ^ x) y / fact x / nat_power y s)) abs_summable_on\n    UNIV", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay\\<in>{1..}.\n          norm (fds_nth (f ^ x) y / fact x / nat_power y s)) abs_summable_on\n    UNIV", "unfolding abs_summable_on_nat_iff'"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ n) y / fact n / nat_power y s)))", "proof (rule summable_comparison_test_ev[OF always_eventually[OF allI]])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "fix k :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "from that"], ["proof (chain)\npicking this:\n  fds_abs_converges f s\n  fds_nth f (Suc 0) = (0::'a)", "have *: \"fds_abs_converges (fds_norm (f ^ k)) (s \\<bullet> 1)\""], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n  fds_nth f (Suc 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_norm (f ^ k)) (s \\<bullet> (1::'a))", "by (auto simp: fds_abs_converges_power)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_norm (f ^ k)) (s \\<bullet> (1::'a))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "have \"(\\<Sum>\\<^sub>an\\<in>{1..}. norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n                (\\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> 1) / fact k)\" \n          (is \"?S = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}.\n       norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n    (\\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a)) /\n       fact k)", "by (intro infsetsum_cong) (simp_all add: norm_divide norm_mult norm_nat_power)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a)) /\n     fact k)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a)) /\n     fact k)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "have \"\\<dots> = (\\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> 1)) /\\<^sub>R fact k\"\n          (is \"_ = ?S' /\\<^sub>R _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a)) /\n       fact k) =\n    (\\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (fds_norm (f ^ k)) n /\n       nat_power n (s \\<bullet> (1::'a))) /\\<^sub>R\n    fact k", "using *"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_norm (f ^ k)) (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a)) /\n       fact k) =\n    (\\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (fds_norm (f ^ k)) n /\n       nat_power n (s \\<bullet> (1::'a))) /\\<^sub>R\n    fact k", "unfolding fds_abs_converges_altdef"], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      fds_nth (fds_norm (f ^ k)) n /\n      nat_power n (s \\<bullet> (1::'a))) abs_summable_on\n  {1..}\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a)) /\n       fact k) =\n    (\\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (fds_norm (f ^ k)) n /\n       nat_power n (s \\<bullet> (1::'a))) /\\<^sub>R\n    fact k", "by (subst infsetsum_cdiv) (auto simp: abs_summable_on_nat_iff scaleR_conv_of_real divide_simps)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a)) /\n     fact k) =\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     fds_nth (fds_norm (f ^ k)) n /\n     nat_power n (s \\<bullet> (1::'a))) /\\<^sub>R\n  fact k\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a)) /\n     fact k) =\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     fds_nth (fds_norm (f ^ k)) n /\n     nat_power n (s \\<bullet> (1::'a))) /\\<^sub>R\n  fact k\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "have \"?S' = eval_fds (fds_norm (f ^ k)) (s \\<bullet> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a))) =\n    eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a))", "using *"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_norm (f ^ k)) (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a))) =\n    eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a))", "unfolding fds_abs_converges_altdef eval_fds_def"], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      fds_nth (fds_norm (f ^ k)) n /\n      nat_power n (s \\<bullet> (1::'a))) abs_summable_on\n  {1..}\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a))) =\n    (\\<Sum>n.\n        fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a)))", "by (subst infsetsum_nat) (auto intro!: suminf_cong)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     fds_nth (fds_norm (f ^ k)) n / nat_power n (s \\<bullet> (1::'a))) =\n  eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n  eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a)) /\\<^sub>R fact k", "have eq: \"?S = \\<dots> /\\<^sub>R fact k\""], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n  eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a)) /\\<^sub>R fact k\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}.\n       norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n    eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a)) /\\<^sub>R fact k", "."], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n  eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a)) /\\<^sub>R fact k\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "note eq"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n  eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a)) /\\<^sub>R fact k\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n  eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a)) /\\<^sub>R fact k\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "have \"?S \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> (\\<Sum>\\<^sub>an\\<in>{1..}.\n               norm (fds_nth (f ^ k) n / fact k / nat_power n s))", "by (intro infsetsum_nonneg) auto"], ["proof (state)\nthis:\n  0 \\<le> (\\<Sum>\\<^sub>an\\<in>{1..}.\n             norm (fds_nth (f ^ k) n / fact k / nat_power n s))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "hence \"?S = norm (norm ?S)\""], ["proof (prove)\nusing this:\n  0 \\<le> (\\<Sum>\\<^sub>an\\<in>{1..}.\n             norm (fds_nth (f ^ k) n / fact k / nat_power n s))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}.\n       norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n    norm\n     (norm\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          norm (fds_nth (f ^ k) n / fact k / nat_power n s)))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n  norm\n   (norm\n     (\\<Sum>\\<^sub>an\\<in>{1..}.\n        norm (fds_nth (f ^ k) n / fact k / nat_power n s)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     norm (fds_nth (f ^ k) n / fact k / nat_power n s)) =\n  norm\n   (norm\n     (\\<Sum>\\<^sub>an\\<in>{1..}.\n        norm (fds_nth (f ^ k) n / fact k / nat_power n s)))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "have \"eval_fds (fds_norm (f ^ k)) (s \\<bullet> 1) \\<le> eval_fds (fds_norm f) (s \\<bullet> 1) ^ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a))\n    \\<le> eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ k", "using that"], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n  fds_nth f (Suc 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a))\n    \\<le> eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ k", "by (intro eval_fds_norm_power_le) auto"], ["proof (state)\nthis:\n  eval_fds (fds_norm (f ^ k)) (s \\<bullet> (1::'a))\n  \\<le> eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ k\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       norm\n        (norm\n          (\\<Sum>\\<^sub>ay\\<in>{1..}.\n             norm (fds_nth (f ^ x) y / fact x / nat_power y s)))\n       \\<le> ?g x\n 2. summable ?g", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x /\\<^sub>R fact k \\<le> y /\\<^sub>R fact k) \\<Longrightarrow>\n  norm\n   (norm\n     (\\<Sum>\\<^sub>an\\<in>{1..}.\n        norm (fds_nth (f ^ k) n / fact k / nat_power n s)))\n  \\<le> eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ k /\\<^sub>R fact k", "show \"norm (norm (\\<Sum>\\<^sub>an\\<in>{1..}. norm (fds_nth (f ^ k) n / fact k / nat_power n s))) \\<le>\n                        eval_fds (fds_norm f) (s \\<bullet> 1) ^ k /\\<^sub>R fact k\""], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<le> y \\<Longrightarrow>\n      x /\\<^sub>R fact k \\<le> y /\\<^sub>R fact k) \\<Longrightarrow>\n  norm\n   (norm\n     (\\<Sum>\\<^sub>an\\<in>{1..}.\n        norm (fds_nth (f ^ k) n / fact k / nat_power n s)))\n  \\<le> eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ k /\\<^sub>R fact k\n\ngoal (1 subgoal):\n 1. norm\n     (norm\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          norm (fds_nth (f ^ k) n / fact k / nat_power n s)))\n    \\<le> eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ k /\\<^sub>R fact k", "by (simp add: divide_right_mono)"], ["proof (state)\nthis:\n  norm\n   (norm\n     (\\<Sum>\\<^sub>an\\<in>{1..}.\n        norm (fds_nth (f ^ k) n / fact k / nat_power n s)))\n  \\<le> eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ k /\\<^sub>R fact k\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>x.\n         eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ x /\\<^sub>R fact x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>x.\n         eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ x /\\<^sub>R fact x)", "from exp_converges[of \"eval_fds (fds_norm f) (s \\<bullet> 1)\"]"], ["proof (chain)\npicking this:\n  (\\<lambda>n.\n      eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ n /\\<^sub>R fact n) sums\n  exp (eval_fds (fds_norm f) (s \\<bullet> (1::'a)))", "show \"summable (\\<lambda>x. eval_fds (fds_norm f) (s \\<bullet> 1) ^ x /\\<^sub>R fact x)\""], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ n /\\<^sub>R fact n) sums\n  exp (eval_fds (fds_norm f) (s \\<bullet> (1::'a)))\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>x.\n         eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ x /\\<^sub>R fact x)", "by (simp add: sums_iff)"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>x.\n       eval_fds (fds_norm f) (s \\<bullet> (1::'a)) ^ x /\\<^sub>R fact x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      \\<Sum>\\<^sub>ay\\<in>{1..}.\n        norm (fds_nth (f ^ x) y / fact x / nat_power y s)) abs_summable_on\n  UNIV\n\ngoal (2 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable {1..}", "qed auto"], ["proof (state)\nthis:\n  (\\<lambda>(k, n).\n      fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n  UNIV \\<times> {1..}\n\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "hence summable:\n      \"(\\<lambda>(n,k). fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on {1..} \\<times> UNIV\""], ["proof (prove)\nusing this:\n  (\\<lambda>(k, n).\n      fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n  UNIV \\<times> {1..}\n\ngoal (1 subgoal):\n 1. (\\<lambda>(n, k).\n        fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n    {1..} \\<times> UNIV", "by (subst abs_summable_on_Times_swap) (simp add: case_prod_unfold)"], ["proof (state)\nthis:\n  (\\<lambda>(n, k).\n      fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n  {1..} \\<times> UNIV\n\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have summable': \"(\\<lambda>k. fds_nth (f ^ k) n / fact k) abs_summable_on UNIV\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k. fds_nth (f ^ k) n / fact k) abs_summable_on UNIV", "using abs_summable_on_cmult_left[of \"nat_power n s\",\n              OF abs_summable_on_Sigma_project2 [OF summable, of n]]"], ["proof (prove)\nusing this:\n  (nat_power n s \\<noteq> (0::'a) \\<Longrightarrow>\n   n \\<in> {1..}) \\<Longrightarrow>\n  (\\<lambda>x.\n      (case (n, x) of\n       (n, k) \\<Rightarrow> fds_nth (f ^ k) n / fact k / nat_power n s) *\n      nat_power n s) abs_summable_on\n  UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>k. fds_nth (f ^ k) n / fact k) abs_summable_on UNIV", "by (cases \"n = 0\") simp_all"], ["proof (state)\nthis:\n  (\\<lambda>k. fds_nth (f ^ k) ?n / fact k) abs_summable_on UNIV\n\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"(\\<lambda>n. \\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on {1..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Sum>\\<^sub>ak.\n          fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n    {1..}", "using summable"], ["proof (prove)\nusing this:\n  (\\<lambda>(n, k).\n      fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n  {1..} \\<times> UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Sum>\\<^sub>ak.\n          fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n    {1..}", "by (rule abs_summable_on_Sigma_project1') auto"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Sum>\\<^sub>ak.\n        fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n  {1..}\n\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Sum>\\<^sub>ak.\n        fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n  {1..}\n\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"?this \\<longleftrightarrow> (\\<lambda>n. (\\<Sum>k. fds_nth (f ^ k) n / fact k) * inverse (nat_power n s)) \n                           abs_summable_on {1..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>n.\n         \\<Sum>\\<^sub>ak.\n           fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n     {1..}) =\n    ((\\<lambda>n.\n         (\\<Sum>k. fds_nth (f ^ k) n / fact k) *\n         inverse (nat_power n s)) abs_summable_on\n     {1..})", "proof (intro abs_summable_on_cong refl, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..} \\<Longrightarrow>\n       (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) x / fact k / nat_power x s) =\n       (\\<Sum>k. fds_nth (f ^ k) x / fact k) * inverse (nat_power x s)", "case (1 n)"], ["proof (state)\nthis:\n  n \\<in> {1..}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..} \\<Longrightarrow>\n       (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) x / fact k / nat_power x s) =\n       (\\<Sum>k. fds_nth (f ^ k) x / fact k) * inverse (nat_power x s)", "hence \"(\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k / nat_power n s) =\n              (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k) * inverse (nat_power n s)\""], ["proof (prove)\nusing this:\n  n \\<in> {1..}\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k / nat_power n s) =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k) * inverse (nat_power n s)", "using summable'[of n]"], ["proof (prove)\nusing this:\n  n \\<in> {1..}\n  (\\<lambda>k. fds_nth (f ^ k) n / fact k) abs_summable_on UNIV\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k / nat_power n s) =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k) * inverse (nat_power n s)", "by (subst infsetsum_cmult_left [symmetric]) (auto simp: field_simps)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k / nat_power n s) =\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k) * inverse (nat_power n s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..} \\<Longrightarrow>\n       (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) x / fact k / nat_power x s) =\n       (\\<Sum>k. fds_nth (f ^ k) x / fact k) * inverse (nat_power x s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k / nat_power n s) =\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k) * inverse (nat_power n s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..} \\<Longrightarrow>\n       (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) x / fact k / nat_power x s) =\n       (\\<Sum>k. fds_nth (f ^ k) x / fact k) * inverse (nat_power x s)", "have \"(\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k) = (\\<Sum>k. fds_nth (f ^ k) n / fact k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k) =\n    (\\<Sum>k. fds_nth (f ^ k) n / fact k)", "using summable'[of n] 1"], ["proof (prove)\nusing this:\n  (\\<lambda>k. fds_nth (f ^ k) n / fact k) abs_summable_on UNIV\n  n \\<in> {1..}\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k) =\n    (\\<Sum>k. fds_nth (f ^ k) n / fact k)", "by (intro abs_summable_on_cong refl infsetsum_nat') auto"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k) =\n  (\\<Sum>k. fds_nth (f ^ k) n / fact k)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..} \\<Longrightarrow>\n       (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) x / fact k / nat_power x s) =\n       (\\<Sum>k. fds_nth (f ^ k) x / fact k) * inverse (nat_power x s)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k / nat_power n s) =\n  (\\<Sum>k. fds_nth (f ^ k) n / fact k) * inverse (nat_power n s)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k / nat_power n s) =\n  (\\<Sum>k. fds_nth (f ^ k) n / fact k) * inverse (nat_power n s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k / nat_power n s) =\n    (\\<Sum>k. fds_nth (f ^ k) n / fact k) * inverse (nat_power n s)", "."], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n / fact k / nat_power n s) =\n  (\\<Sum>k. fds_nth (f ^ k) n / fact k) * inverse (nat_power n s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<lambda>n.\n       \\<Sum>\\<^sub>ak.\n         fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n   {1..}) =\n  ((\\<lambda>n.\n       (\\<Sum>k. fds_nth (f ^ k) n / fact k) *\n       inverse (nat_power n s)) abs_summable_on\n   {1..})\n\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n.\n      (\\<Sum>k. fds_nth (f ^ k) n / fact k) *\n      inverse (nat_power n s)) abs_summable_on\n  {1..}", "show \"fds_abs_converges (fds_exp f) s\""], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      (\\<Sum>k. fds_nth (f ^ k) n / fact k) *\n      inverse (nat_power n s)) abs_summable_on\n  {1..}\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_exp f) s", "by (simp add: fds_exp_def fds_nth_fds' abs_summable_on_Sigma_iff scaleR_conv_of_real \n                    fds_abs_converges_altdef field_simps)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_exp f) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"eval_fds (fds_exp f) s = (\\<Sum>n. (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s =\n    (\\<Sum>n. (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s)", "by (simp add: fds_exp_def eval_fds_def fds_nth_fds')"], ["proof (state)\nthis:\n  eval_fds (fds_exp f) s =\n  (\\<Sum>n. (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  eval_fds (fds_exp f) s =\n  (\\<Sum>n. (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"\\<dots> = (\\<Sum>n. (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n.\n        (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s) =\n    (\\<Sum>n.\n        (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n        nat_power n s)", "proof (intro suminf_cong, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n       (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s", "case (1 n)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n       (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s", "have \"(\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) = (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k)", "using summable'[of n] False"], ["proof (prove)\nusing this:\n  (\\<lambda>k. fds_nth (f ^ k) n / fact k) abs_summable_on UNIV\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k)", "by (intro infsetsum_nat' [symmetric]) (auto simp: scaleR_conv_of_real field_simps)"], ["proof (state)\nthis:\n  (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) =\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) =\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n    (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s", "qed simp_all"], ["proof (state)\nthis:\n  (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s =\n  (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>n. (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s) =\n  (\\<Sum>n.\n      (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>n. (\\<Sum>k. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s) =\n  (\\<Sum>n.\n      (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"\\<dots> = (\\<Sum>\\<^sub>an. (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>n.\n        (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n        nat_power n s) =\n    (\\<Sum>\\<^sub>an.\n       (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n       nat_power n s)", "proof (intro infsetsum_nat' [symmetric], goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n        nat_power n s) abs_summable_on\n    UNIV", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n        nat_power n s) abs_summable_on\n    UNIV", "have *: \"UNIV - {Suc 0..} = {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV - {Suc 0..} = {0}", "by auto"], ["proof (state)\nthis:\n  UNIV - {Suc 0..} = {0}\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n        nat_power n s) abs_summable_on\n    UNIV", "have \"(\\<lambda>x. \\<Sum>\\<^sub>ay. fds_nth (f ^ y) x / fact y / nat_power x s) abs_summable_on {1..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          fds_nth (f ^ y) x / fact y / nat_power x s) abs_summable_on\n    {1..}", "by (intro abs_summable_on_Sigma_project1'[OF summable]) auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      \\<Sum>\\<^sub>ay.\n        fds_nth (f ^ y) x / fact y / nat_power x s) abs_summable_on\n  {1..}\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n        nat_power n s) abs_summable_on\n    UNIV", "also"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      \\<Sum>\\<^sub>ay.\n        fds_nth (f ^ y) x / fact y / nat_power x s) abs_summable_on\n  {1..}\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n        nat_power n s) abs_summable_on\n    UNIV", "have \"?this \\<longleftrightarrow> (\\<lambda>x. (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x / fact y) * inverse (nat_power x s)) \n                    abs_summable_on {1..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         \\<Sum>\\<^sub>ay.\n           fds_nth (f ^ y) x / fact y / nat_power x s) abs_summable_on\n     {1..}) =\n    ((\\<lambda>x.\n         (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x / fact y) *\n         inverse (nat_power x s)) abs_summable_on\n     {1..})", "using summable'"], ["proof (prove)\nusing this:\n  (\\<lambda>k. fds_nth (f ^ k) ?n / fact k) abs_summable_on UNIV\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         \\<Sum>\\<^sub>ay.\n           fds_nth (f ^ y) x / fact y / nat_power x s) abs_summable_on\n     {1..}) =\n    ((\\<lambda>x.\n         (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x / fact y) *\n         inverse (nat_power x s)) abs_summable_on\n     {1..})", "by (intro abs_summable_on_cong refl, subst infsetsum_cmult_left [symmetric])\n                           (auto simp: field_simps)"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       \\<Sum>\\<^sub>ay.\n         fds_nth (f ^ y) x / fact y / nat_power x s) abs_summable_on\n   {1..}) =\n  ((\\<lambda>x.\n       (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x / fact y) *\n       inverse (nat_power x s)) abs_summable_on\n   {1..})\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n        nat_power n s) abs_summable_on\n    UNIV", "also"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       \\<Sum>\\<^sub>ay.\n         fds_nth (f ^ y) x / fact y / nat_power x s) abs_summable_on\n   {1..}) =\n  ((\\<lambda>x.\n       (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x / fact y) *\n       inverse (nat_power x s)) abs_summable_on\n   {1..})\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n        nat_power n s) abs_summable_on\n    UNIV", "have \"\\<dots> \\<longleftrightarrow> (\\<lambda>x. (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x /\\<^sub>R fact y) / (nat_power x s)) \n                    abs_summable_on {1..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x / fact y) *\n         inverse (nat_power x s)) abs_summable_on\n     {1..}) =\n    ((\\<lambda>x.\n         (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x /\\<^sub>R fact y) /\n         nat_power x s) abs_summable_on\n     {1..})", "by (simp add: field_simps scaleR_conv_of_real)"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x / fact y) *\n       inverse (nat_power x s)) abs_summable_on\n   {1..}) =\n  ((\\<lambda>x.\n       (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x /\\<^sub>R fact y) /\n       nat_power x s) abs_summable_on\n   {1..})\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n        nat_power n s) abs_summable_on\n    UNIV", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x /\\<^sub>R fact y) /\n      nat_power x s) abs_summable_on\n  {1..}", "show ?case"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (\\<Sum>\\<^sub>ay. fds_nth (f ^ y) x /\\<^sub>R fact y) /\n      nat_power x s) abs_summable_on\n  {1..}\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n        nat_power n s) abs_summable_on\n    UNIV", "by (rule abs_summable_on_finite_diff) (use * in auto)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n      nat_power n s) abs_summable_on\n  UNIV\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>n.\n      (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n      nat_power n s) =\n  (\\<Sum>\\<^sub>an.\n     (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>n.\n      (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n      nat_power n s) =\n  (\\<Sum>\\<^sub>an.\n     (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) / nat_power n s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"\\<dots> = (\\<Sum>\\<^sub>an. (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an.\n       (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n       nat_power n s) =\n    (\\<Sum>\\<^sub>an.\n       \\<Sum>\\<^sub>ak.\n         fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s))", "using summable'"], ["proof (prove)\nusing this:\n  (\\<lambda>k. fds_nth (f ^ k) ?n / fact k) abs_summable_on UNIV\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an.\n       (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n       nat_power n s) =\n    (\\<Sum>\\<^sub>an.\n       \\<Sum>\\<^sub>ak.\n         fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s))", "by (subst infsetsum_cmult_left) (auto simp: field_simps scaleR_conv_of_real)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an.\n     (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n     nat_power n s) =\n  (\\<Sum>\\<^sub>an.\n     \\<Sum>\\<^sub>ak.\n       fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s))\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an.\n     (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k) /\n     nat_power n s) =\n  (\\<Sum>\\<^sub>an.\n     \\<Sum>\\<^sub>ak.\n       fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s))\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"\\<dots> = (\\<Sum>\\<^sub>an\\<in>{1..}. (\\<Sum>\\<^sub>ak. fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an.\n       \\<Sum>\\<^sub>ak.\n         fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s)) =\n    (\\<Sum>\\<^sub>an\\<in>{1..}.\n       \\<Sum>\\<^sub>ak.\n         fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s))", "by (intro infsetsum_cong_neutral) (auto simp: Suc_le_eq)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an.\n     \\<Sum>\\<^sub>ak.\n       fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s)) =\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     \\<Sum>\\<^sub>ak.\n       fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s))\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an.\n     \\<Sum>\\<^sub>ak.\n       fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s)) =\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     \\<Sum>\\<^sub>ak.\n       fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s))\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"\\<dots> = (\\<Sum>\\<^sub>ak. \\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (f ^ k) n / nat_power n s /\\<^sub>R fact k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}.\n       \\<Sum>\\<^sub>ak.\n         fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s)) =\n    (\\<Sum>\\<^sub>ak.\n       \\<Sum>\\<^sub>an\\<in>{1..}.\n         fds_nth (f ^ k) n / nat_power n s /\\<^sub>R fact k)", "using summable"], ["proof (prove)\nusing this:\n  (\\<lambda>(n, k).\n      fds_nth (f ^ k) n / fact k / nat_power n s) abs_summable_on\n  {1..} \\<times> UNIV\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}.\n       \\<Sum>\\<^sub>ak.\n         fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s)) =\n    (\\<Sum>\\<^sub>ak.\n       \\<Sum>\\<^sub>an\\<in>{1..}.\n         fds_nth (f ^ k) n / nat_power n s /\\<^sub>R fact k)", "by (subst infsetsum_swap) (auto simp: field_simps scaleR_conv_of_real case_prod_unfold)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     \\<Sum>\\<^sub>ak.\n       fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s)) =\n  (\\<Sum>\\<^sub>ak.\n     \\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (f ^ k) n / nat_power n s /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}.\n     \\<Sum>\\<^sub>ak.\n       fds_nth (f ^ k) n /\\<^sub>R fact k * inverse (nat_power n s)) =\n  (\\<Sum>\\<^sub>ak.\n     \\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (f ^ k) n / nat_power n s /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"\\<dots> = (\\<Sum>\\<^sub>ak. (\\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (f ^ k) n / nat_power n s) /\\<^sub>R fact k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak.\n       \\<Sum>\\<^sub>an\\<in>{1..}.\n         fds_nth (f ^ k) n / nat_power n s /\\<^sub>R fact k) =\n    (\\<Sum>\\<^sub>ak.\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          fds_nth (f ^ k) n / nat_power n s) /\\<^sub>R\n       fact k)", "by (subst infsetsum_scaleR_right) simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak.\n     \\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (f ^ k) n / nat_power n s /\\<^sub>R fact k) =\n  (\\<Sum>\\<^sub>ak.\n     (\\<Sum>\\<^sub>an\\<in>{1..}.\n        fds_nth (f ^ k) n / nat_power n s) /\\<^sub>R\n     fact k)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak.\n     \\<Sum>\\<^sub>an\\<in>{1..}.\n       fds_nth (f ^ k) n / nat_power n s /\\<^sub>R fact k) =\n  (\\<Sum>\\<^sub>ak.\n     (\\<Sum>\\<^sub>an\\<in>{1..}.\n        fds_nth (f ^ k) n / nat_power n s) /\\<^sub>R\n     fact k)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"\\<dots> = (\\<Sum>\\<^sub>ak. eval_fds f s ^ k /\\<^sub>R fact k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak.\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          fds_nth (f ^ k) n / nat_power n s) /\\<^sub>R\n       fact k) =\n    (\\<Sum>\\<^sub>ak. eval_fds f s ^ k /\\<^sub>R fact k)", "proof (intro infsetsum_cong refl, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          fds_nth (f ^ x) n / nat_power n s) /\\<^sub>R\n       fact x =\n       eval_fds f s ^ x /\\<^sub>R fact x", "case (1 k)"], ["proof (state)\nthis:\n  k \\<in> UNIV\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          fds_nth (f ^ x) n / nat_power n s) /\\<^sub>R\n       fact x =\n       eval_fds f s ^ x /\\<^sub>R fact x", "have *: \"fds_abs_converges (f ^ k) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (f ^ k) s", "by (intro fds_abs_converges_power that)"], ["proof (state)\nthis:\n  fds_abs_converges (f ^ k) s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          fds_nth (f ^ x) n / nat_power n s) /\\<^sub>R\n       fact x =\n       eval_fds f s ^ x /\\<^sub>R fact x", "have \"(\\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (f ^ k) n / nat_power n s) =\n              (\\<Sum>\\<^sub>an. fds_nth (f ^ k) n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (f ^ k) n / nat_power n s) =\n    (\\<Sum>\\<^sub>an. fds_nth (f ^ k) n / nat_power n s)", "by (intro infsetsum_cong_neutral) (auto simp: Suc_le_eq)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (f ^ k) n / nat_power n s) =\n  (\\<Sum>\\<^sub>an. fds_nth (f ^ k) n / nat_power n s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          fds_nth (f ^ x) n / nat_power n s) /\\<^sub>R\n       fact x =\n       eval_fds f s ^ x /\\<^sub>R fact x", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (f ^ k) n / nat_power n s) =\n  (\\<Sum>\\<^sub>an. fds_nth (f ^ k) n / nat_power n s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          fds_nth (f ^ x) n / nat_power n s) /\\<^sub>R\n       fact x =\n       eval_fds f s ^ x /\\<^sub>R fact x", "have \"\\<dots> = eval_fds (f ^ k) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an. fds_nth (f ^ k) n / nat_power n s) =\n    eval_fds (f ^ k) s", "using *"], ["proof (prove)\nusing this:\n  fds_abs_converges (f ^ k) s\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an. fds_nth (f ^ k) n / nat_power n s) =\n    eval_fds (f ^ k) s", "unfolding eval_fds_def"], ["proof (prove)\nusing this:\n  fds_abs_converges (f ^ k) s\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an. fds_nth (f ^ k) n / nat_power n s) =\n    (\\<Sum>n. fds_nth (f ^ k) n / nat_power n s)", "by (intro infsetsum_nat') (auto simp: fds_abs_converges_def abs_summable_on_nat_iff')"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an. fds_nth (f ^ k) n / nat_power n s) = eval_fds (f ^ k) s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          fds_nth (f ^ x) n / nat_power n s) /\\<^sub>R\n       fact x =\n       eval_fds f s ^ x /\\<^sub>R fact x", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an. fds_nth (f ^ k) n / nat_power n s) = eval_fds (f ^ k) s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          fds_nth (f ^ x) n / nat_power n s) /\\<^sub>R\n       fact x =\n       eval_fds f s ^ x /\\<^sub>R fact x", "from that"], ["proof (chain)\npicking this:\n  fds_abs_converges f s\n  fds_nth f (Suc 0) = (0::'a)", "have \"\\<dots> = eval_fds f s ^ k\""], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n  fds_nth f (Suc 0) = (0::'a)\n\ngoal (1 subgoal):\n 1. eval_fds (f ^ k) s = eval_fds f s ^ k", "by (simp add: eval_fds_power)"], ["proof (state)\nthis:\n  eval_fds (f ^ k) s = eval_fds f s ^ k\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an\\<in>{1..}.\n          fds_nth (f ^ x) n / nat_power n s) /\\<^sub>R\n       fact x =\n       eval_fds f s ^ x /\\<^sub>R fact x", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (f ^ k) n / nat_power n s) =\n  eval_fds f s ^ k", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (f ^ k) n / nat_power n s) =\n  eval_fds f s ^ k\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (f ^ k) n / nat_power n s) /\\<^sub>R\n    fact k =\n    eval_fds f s ^ k /\\<^sub>R fact k", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an\\<in>{1..}. fds_nth (f ^ k) n / nat_power n s) /\\<^sub>R\n  fact k =\n  eval_fds f s ^ k /\\<^sub>R fact k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak.\n     (\\<Sum>\\<^sub>an\\<in>{1..}.\n        fds_nth (f ^ k) n / nat_power n s) /\\<^sub>R\n     fact k) =\n  (\\<Sum>\\<^sub>ak. eval_fds f s ^ k /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak.\n     (\\<Sum>\\<^sub>an\\<in>{1..}.\n        fds_nth (f ^ k) n / nat_power n s) /\\<^sub>R\n     fact k) =\n  (\\<Sum>\\<^sub>ak. eval_fds f s ^ k /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"\\<dots> = (\\<Sum>k. eval_fds f s ^ k /\\<^sub>R fact k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak. eval_fds f s ^ k /\\<^sub>R fact k) =\n    (\\<Sum>k. eval_fds f s ^ k /\\<^sub>R fact k)", "using exp_converges[of \"norm (eval_fds f s)\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>n. norm (eval_fds f s) ^ n /\\<^sub>R fact n) sums\n  exp (norm (eval_fds f s))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak. eval_fds f s ^ k /\\<^sub>R fact k) =\n    (\\<Sum>k. eval_fds f s ^ k /\\<^sub>R fact k)", "by (intro infsetsum_nat') (auto simp: abs_summable_on_nat_iff' sums_iff field_simps norm_power)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak. eval_fds f s ^ k /\\<^sub>R fact k) =\n  (\\<Sum>k. eval_fds f s ^ k /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak. eval_fds f s ^ k /\\<^sub>R fact k) =\n  (\\<Sum>k. eval_fds f s ^ k /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"\\<dots> = exp (eval_fds f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k. eval_fds f s ^ k /\\<^sub>R fact k) = exp (eval_fds f s)", "by (simp add: exp_def)"], ["proof (state)\nthis:\n  (\\<Sum>k. eval_fds f s ^ k /\\<^sub>R fact k) = exp (eval_fds f s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "finally"], ["proof (chain)\npicking this:\n  eval_fds (fds_exp f) s = exp (eval_fds f s)", "show \"eval_fds (fds_exp f) s = exp (eval_fds f s)\""], ["proof (prove)\nusing this:\n  eval_fds (fds_exp f) s = exp (eval_fds f s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "."], ["proof (state)\nthis:\n  eval_fds (fds_exp f) s = exp (eval_fds f s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>fds_abs_converges ?f s; fds_nth ?f (Suc 0) = (0::'a)\\<rbrakk>\n  \\<Longrightarrow> fds_abs_converges (fds_exp ?f) s\n  \\<lbrakk>fds_abs_converges ?f s; fds_nth ?f (Suc 0) = (0::'a)\\<rbrakk>\n  \\<Longrightarrow> eval_fds (fds_exp ?f) s = exp (eval_fds ?f s)\n\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "define f' where \"f' = f - fds_const (fds_nth f 1)\""], ["proof (state)\nthis:\n  f' = f - fds_const (fds_nth f 1)\n\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have *: \"fds_abs_converges (fds_exp f') s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_exp f') s", "by (auto simp: f'_def intro!: fds_abs_converges_diff conv assms)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_exp f') s\n\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"fds_abs_converges (fds_const (exp (fds_nth f 1)) * fds_exp f') s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_const (exp (fds_nth f 1)) * fds_exp f') s", "unfolding f'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges\n     (fds_const (exp (fds_nth f 1)) * fds_exp (f - fds_const (fds_nth f 1)))\n     s", "by (intro fds_abs_converges_mult conv fds_abs_converges_diff assms) auto"], ["proof (state)\nthis:\n  fds_abs_converges (fds_const (exp (fds_nth f 1)) * fds_exp f') s\n\ngoal (2 subgoals):\n 1. fds_abs_converges (fds_exp f) s\n 2. eval_fds (fds_exp f) s = exp (eval_fds f s)", "thus \"fds_abs_converges (fds_exp f) s\""], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_const (exp (fds_nth f 1)) * fds_exp f') s\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_exp f) s", "unfolding f'_def"], ["proof (prove)\nusing this:\n  fds_abs_converges\n   (fds_const (exp (fds_nth f 1)) * fds_exp (f - fds_const (fds_nth f 1))) s\n\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_exp f) s", "by (simp add: fds_exp_times_fds_nth_0)"], ["proof (state)\nthis:\n  fds_abs_converges (fds_exp f) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"eval_fds (fds_exp f) s = eval_fds (fds_const (exp (fds_nth f 1)) * fds_exp f') s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s =\n    eval_fds (fds_const (exp (fds_nth f 1)) * fds_exp f') s", "by (simp add: f'_def fds_exp_times_fds_nth_0)"], ["proof (state)\nthis:\n  eval_fds (fds_exp f) s =\n  eval_fds (fds_const (exp (fds_nth f 1)) * fds_exp f') s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  eval_fds (fds_exp f) s =\n  eval_fds (fds_const (exp (fds_nth f 1)) * fds_exp f') s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"\\<dots> = exp (fds_nth f (Suc 0)) * eval_fds (fds_exp f') s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_const (exp (fds_nth f 1)) * fds_exp f') s =\n    exp (fds_nth f (Suc 0)) * eval_fds (fds_exp f') s", "using *"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_exp f') s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_const (exp (fds_nth f 1)) * fds_exp f') s =\n    exp (fds_nth f (Suc 0)) * eval_fds (fds_exp f') s", "using assms"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_exp f') s\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_const (exp (fds_nth f 1)) * fds_exp f') s =\n    exp (fds_nth f (Suc 0)) * eval_fds (fds_exp f') s", "by (subst eval_fds_mult) (simp_all)"], ["proof (state)\nthis:\n  eval_fds (fds_const (exp (fds_nth f 1)) * fds_exp f') s =\n  exp (fds_nth f (Suc 0)) * eval_fds (fds_exp f') s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "also"], ["proof (state)\nthis:\n  eval_fds (fds_const (exp (fds_nth f 1)) * fds_exp f') s =\n  exp (fds_nth f (Suc 0)) * eval_fds (fds_exp f') s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "have \"\\<dots> = exp (eval_fds f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. exp (fds_nth f (Suc 0)) * eval_fds (fds_exp f') s = exp (eval_fds f s)", "using ev[of f'] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>fds_abs_converges f' s; fds_nth f' (Suc 0) = (0::'a)\\<rbrakk>\n  \\<Longrightarrow> eval_fds (fds_exp f') s = exp (eval_fds f' s)\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. exp (fds_nth f (Suc 0)) * eval_fds (fds_exp f') s = exp (eval_fds f s)", "unfolding f'_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>fds_abs_converges (f - fds_const (fds_nth f 1)) s;\n   fds_nth (f - fds_const (fds_nth f 1)) (Suc 0) = (0::'a)\\<rbrakk>\n  \\<Longrightarrow> eval_fds (fds_exp (f - fds_const (fds_nth f 1))) s =\n                    exp (eval_fds (f - fds_const (fds_nth f 1)) s)\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. exp (fds_nth f (Suc 0)) *\n    eval_fds (fds_exp (f - fds_const (fds_nth f 1))) s =\n    exp (eval_fds f s)", "by (auto simp: fds_abs_converges_diff eval_fds_diff fds_abs_converges_imp_converges exp_diff)"], ["proof (state)\nthis:\n  exp (fds_nth f (Suc 0)) * eval_fds (fds_exp f') s = exp (eval_fds f s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "finally"], ["proof (chain)\npicking this:\n  eval_fds (fds_exp f) s = exp (eval_fds f s)", "show \"eval_fds (fds_exp f) s = exp (eval_fds f s)\""], ["proof (prove)\nusing this:\n  eval_fds (fds_exp f) s = exp (eval_fds f s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_exp f) s = exp (eval_fds f s)", "."], ["proof (state)\nthis:\n  eval_fds (fds_exp f) s = exp (eval_fds f s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_exp_add:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows   \"fds_exp (f + g) = fds_exp f * fds_exp g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp (f + g) = fds_exp f * fds_exp g", "proof (rule fds_eqI_truncate)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_exp (f + g)) =\n       fds_truncate m (fds_exp f * fds_exp g)", "fix m :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_exp (f + g)) =\n       fds_truncate m (fds_exp f * fds_exp g)", "assume m: \"m > 0\""], ["proof (state)\nthis:\n  0 < m\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_exp (f + g)) =\n       fds_truncate m (fds_exp f * fds_exp g)", "let ?T = \"fds_truncate m\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_exp (f + g)) =\n       fds_truncate m (fds_exp f * fds_exp g)", "have \"?T (fds_exp (f + g)) = ?T (fds_exp (?T f + ?T g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_exp (f + g)) =\n    fds_truncate m (fds_exp (fds_truncate m f + fds_truncate m g))", "by (simp add: fds_truncate_exp fds_truncate_add_strong [symmetric])"], ["proof (state)\nthis:\n  fds_truncate m (fds_exp (f + g)) =\n  fds_truncate m (fds_exp (fds_truncate m f + fds_truncate m g))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_exp (f + g)) =\n       fds_truncate m (fds_exp f * fds_exp g)", "also"], ["proof (state)\nthis:\n  fds_truncate m (fds_exp (f + g)) =\n  fds_truncate m (fds_exp (fds_truncate m f + fds_truncate m g))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_exp (f + g)) =\n       fds_truncate m (fds_exp f * fds_exp g)", "have \"fds_exp (?T f + ?T g) = fds_exp (?T f) * fds_exp (?T g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp (fds_truncate m f + fds_truncate m g) =\n    fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)", "proof (rule eval_fds_eqD)"], ["proof (state)\ngoal (3 subgoals):\n 1. conv_abscissa (fds_exp (fds_truncate m f + fds_truncate m g))\n    < \\<infinity>\n 2. conv_abscissa (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g))\n    < \\<infinity>\n 3. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_exp (fds_truncate m f + fds_truncate m g)) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) s", "have \"fds_abs_converges (fds_exp (?T f + ?T g)) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_exp (fds_truncate m f + fds_truncate m g))\n     (0::'a)", "by (intro fds_abs_converges_exp fds_abs_converges_add) auto"], ["proof (state)\nthis:\n  fds_abs_converges (fds_exp (fds_truncate m f + fds_truncate m g)) (0::'a)\n\ngoal (3 subgoals):\n 1. conv_abscissa (fds_exp (fds_truncate m f + fds_truncate m g))\n    < \\<infinity>\n 2. conv_abscissa (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g))\n    < \\<infinity>\n 3. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_exp (fds_truncate m f + fds_truncate m g)) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) s", "thus \"conv_abscissa (fds_exp (?T f + ?T g)) < \\<infinity>\""], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_exp (fds_truncate m f + fds_truncate m g)) (0::'a)\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_exp (fds_truncate m f + fds_truncate m g))\n    < \\<infinity>", "using conv_abscissa_PInf_iff"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_exp (fds_truncate m f + fds_truncate m g)) (0::'a)\n  (conv_abscissa ?f = \\<infinity>) = (\\<forall>s. \\<not> fds_converges ?f s)\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_exp (fds_truncate m f + fds_truncate m g))\n    < \\<infinity>", "by blast"], ["proof (state)\nthis:\n  conv_abscissa (fds_exp (fds_truncate m f + fds_truncate m g))\n  < \\<infinity>\n\ngoal (2 subgoals):\n 1. conv_abscissa (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g))\n    < \\<infinity>\n 2. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_exp (fds_truncate m f + fds_truncate m g)) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) s", "hence \"fds_abs_converges (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) 0\""], ["proof (prove)\nusing this:\n  conv_abscissa (fds_exp (fds_truncate m f + fds_truncate m g))\n  < \\<infinity>\n\ngoal (1 subgoal):\n 1. fds_abs_converges\n     (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) (0::'a)", "by (intro fds_abs_converges_mult fds_abs_converges_exp) auto"], ["proof (state)\nthis:\n  fds_abs_converges\n   (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) (0::'a)\n\ngoal (2 subgoals):\n 1. conv_abscissa (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g))\n    < \\<infinity>\n 2. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_exp (fds_truncate m f + fds_truncate m g)) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) s", "thus \"conv_abscissa (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) < \\<infinity>\""], ["proof (prove)\nusing this:\n  fds_abs_converges\n   (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) (0::'a)\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g))\n    < \\<infinity>", "using conv_abscissa_PInf_iff"], ["proof (prove)\nusing this:\n  fds_abs_converges\n   (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) (0::'a)\n  (conv_abscissa ?f = \\<infinity>) = (\\<forall>s. \\<not> fds_converges ?f s)\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g))\n    < \\<infinity>", "by blast"], ["proof (state)\nthis:\n  conv_abscissa (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g))\n  < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_exp (fds_truncate m f + fds_truncate m g)) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) s", "show \"frequently (\\<lambda>s. eval_fds (fds_exp (fds_truncate m f + fds_truncate m g)) s =\n                          eval_fds (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) s)\n            ((\\<lambda>s. s \\<bullet> 1) going_to at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_exp (fds_truncate m f + fds_truncate m g)) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) s", "by (auto simp: eval_fds_add eval_fds_mult eval_fds_exp fds_abs_converges_add \n                     fds_abs_converges_exp exp_add)"], ["proof (state)\nthis:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds (fds_exp (fds_truncate m f + fds_truncate m g)) s =\n     eval_fds (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_exp (fds_truncate m f + fds_truncate m g) =\n  fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_exp (f + g)) =\n       fds_truncate m (fds_exp f * fds_exp g)", "also"], ["proof (state)\nthis:\n  fds_exp (fds_truncate m f + fds_truncate m g) =\n  fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_exp (f + g)) =\n       fds_truncate m (fds_exp f * fds_exp g)", "have \"?T \\<dots> = ?T (fds_exp f * fds_exp g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m\n     (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) =\n    fds_truncate m (fds_exp f * fds_exp g)", "by (subst fds_truncate_mult [symmetric], subst (1 2) fds_truncate_exp)\n       (simp add: fds_truncate_mult)"], ["proof (state)\nthis:\n  fds_truncate m (fds_exp (fds_truncate m f) * fds_exp (fds_truncate m g)) =\n  fds_truncate m (fds_exp f * fds_exp g)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_exp (f + g)) =\n       fds_truncate m (fds_exp f * fds_exp g)", "finally"], ["proof (chain)\npicking this:\n  fds_truncate m (fds_exp (f + g)) = fds_truncate m (fds_exp f * fds_exp g)", "show \"?T (fds_exp (f + g)) = \\<dots>\""], ["proof (prove)\nusing this:\n  fds_truncate m (fds_exp (f + g)) = fds_truncate m (fds_exp f * fds_exp g)\n\ngoal (1 subgoal):\n 1. fds_truncate m (fds_exp (f + g)) =\n    fds_truncate m (fds_exp f * fds_exp g)", "."], ["proof (state)\nthis:\n  fds_truncate m (fds_exp (f + g)) = fds_truncate m (fds_exp f * fds_exp g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_exp_minus:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows   \"fds_exp (-f) = inverse (fds_exp f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp (- f) = inverse (fds_exp f)", "proof (rule fds_right_inverse_unique)"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_exp f * fds_exp (- f) = 1", "have \"fds_exp f * fds_exp (- f) = fds_exp (f + (-f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp f * fds_exp (- f) = fds_exp (f + - f)", "by (subst fds_exp_add) simp_all"], ["proof (state)\nthis:\n  fds_exp f * fds_exp (- f) = fds_exp (f + - f)\n\ngoal (1 subgoal):\n 1. fds_exp f * fds_exp (- f) = 1", "also"], ["proof (state)\nthis:\n  fds_exp f * fds_exp (- f) = fds_exp (f + - f)\n\ngoal (1 subgoal):\n 1. fds_exp f * fds_exp (- f) = 1", "have \"f + (-f) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f + - f = 0", "by simp"], ["proof (state)\nthis:\n  f + - f = 0\n\ngoal (1 subgoal):\n 1. fds_exp f * fds_exp (- f) = 1", "also"], ["proof (state)\nthis:\n  f + - f = 0\n\ngoal (1 subgoal):\n 1. fds_exp f * fds_exp (- f) = 1", "have \"fds_exp \\<dots> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp 0 = 1", "by simp"], ["proof (state)\nthis:\n  fds_exp 0 = 1\n\ngoal (1 subgoal):\n 1. fds_exp f * fds_exp (- f) = 1", "finally"], ["proof (chain)\npicking this:\n  fds_exp f * fds_exp (- f) = 1", "show \"fds_exp f * fds_exp (-f) = 1\""], ["proof (prove)\nusing this:\n  fds_exp f * fds_exp (- f) = 1\n\ngoal (1 subgoal):\n 1. fds_exp f * fds_exp (- f) = 1", "."], ["proof (state)\nthis:\n  fds_exp f * fds_exp (- f) = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abs_conv_abscissa_exp: \n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows \"abs_conv_abscissa (fds_exp f) \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_exp f) \\<le> abs_conv_abscissa f", "by (intro abs_conv_abscissa_mono fds_abs_converges_exp)"], ["", "lemma fds_deriv_exp [simp]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  shows   \"fds_deriv (fds_exp f) = fds_exp f * fds_deriv f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (fds_exp f) = fds_exp f * fds_deriv f", "proof (rule fds_eqI_truncate)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_deriv (fds_exp f)) =\n       fds_truncate m (fds_exp f * fds_deriv f)", "fix m :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_deriv (fds_exp f)) =\n       fds_truncate m (fds_exp f * fds_deriv f)", "assume m: \"m > 0\""], ["proof (state)\nthis:\n  0 < m\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_deriv (fds_exp f)) =\n       fds_truncate m (fds_exp f * fds_deriv f)", "let ?T = \"fds_truncate m\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_deriv (fds_exp f)) =\n       fds_truncate m (fds_exp f * fds_deriv f)", "have \"abs_conv_abscissa (fds_deriv (?T f)) = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa (fds_deriv (fds_truncate m f)) = - \\<infinity>", "by (simp add: abs_conv_abscissa_deriv)"], ["proof (state)\nthis:\n  abs_conv_abscissa (fds_deriv (fds_truncate m f)) = - \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_deriv (fds_exp f)) =\n       fds_truncate m (fds_exp f * fds_deriv f)", "have \"?T (fds_deriv (fds_exp f)) = ?T (fds_deriv (fds_exp (?T f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m (fds_deriv (fds_exp f)) =\n    fds_truncate m (fds_deriv (fds_exp (fds_truncate m f)))", "by (simp add: fds_truncate_deriv fds_truncate_exp)"], ["proof (state)\nthis:\n  fds_truncate m (fds_deriv (fds_exp f)) =\n  fds_truncate m (fds_deriv (fds_exp (fds_truncate m f)))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_deriv (fds_exp f)) =\n       fds_truncate m (fds_exp f * fds_deriv f)", "also"], ["proof (state)\nthis:\n  fds_truncate m (fds_deriv (fds_exp f)) =\n  fds_truncate m (fds_deriv (fds_exp (fds_truncate m f)))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_deriv (fds_exp f)) =\n       fds_truncate m (fds_exp f * fds_deriv f)", "have \"fds_deriv (fds_exp (?T f)) = fds_exp (?T f) * fds_deriv (?T f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (fds_exp (fds_truncate m f)) =\n    fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)", "proof (rule eval_fds_eqD)"], ["proof (state)\ngoal (3 subgoals):\n 1. conv_abscissa (fds_deriv (fds_exp (fds_truncate m f))) < \\<infinity>\n 2. conv_abscissa\n     (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n    < \\<infinity>\n 3. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        s", "note abscissa = conv_le_abs_conv_abscissa abs_conv_abscissa_exp"], ["proof (state)\nthis:\n  conv_abscissa ?f \\<le> abs_conv_abscissa ?f\n  abs_conv_abscissa (fds_exp ?f) \\<le> abs_conv_abscissa ?f\n\ngoal (3 subgoals):\n 1. conv_abscissa (fds_deriv (fds_exp (fds_truncate m f))) < \\<infinity>\n 2. conv_abscissa\n     (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n    < \\<infinity>\n 3. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        s", "note abscissa' = abscissa[THEN le_less_trans]"], ["proof (state)\nthis:\n  abs_conv_abscissa ?f1 < ?z \\<Longrightarrow> conv_abscissa ?f1 < ?z\n  abs_conv_abscissa ?f1 < ?z \\<Longrightarrow>\n  abs_conv_abscissa (fds_exp ?f1) < ?z\n\ngoal (3 subgoals):\n 1. conv_abscissa (fds_deriv (fds_exp (fds_truncate m f))) < \\<infinity>\n 2. conv_abscissa\n     (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n    < \\<infinity>\n 3. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        s", "have \"fds_abs_converges (fds_deriv (fds_exp (fds_truncate m f))) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds_deriv (fds_exp (fds_truncate m f))) (0::'a)", "by (intro fds_abs_converges )\n         (auto simp: abs_conv_abscissa_deriv intro: le_less_trans[OF abs_conv_abscissa_exp])"], ["proof (state)\nthis:\n  fds_abs_converges (fds_deriv (fds_exp (fds_truncate m f))) (0::'a)\n\ngoal (3 subgoals):\n 1. conv_abscissa (fds_deriv (fds_exp (fds_truncate m f))) < \\<infinity>\n 2. conv_abscissa\n     (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n    < \\<infinity>\n 3. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        s", "thus \"conv_abscissa (fds_deriv (fds_exp (fds_truncate m f))) < \\<infinity>\""], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_deriv (fds_exp (fds_truncate m f))) (0::'a)\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_deriv (fds_exp (fds_truncate m f))) < \\<infinity>", "using conv_abscissa_PInf_iff"], ["proof (prove)\nusing this:\n  fds_abs_converges (fds_deriv (fds_exp (fds_truncate m f))) (0::'a)\n  (conv_abscissa ?f = \\<infinity>) = (\\<forall>s. \\<not> fds_converges ?f s)\n\ngoal (1 subgoal):\n 1. conv_abscissa (fds_deriv (fds_exp (fds_truncate m f))) < \\<infinity>", "by blast"], ["proof (state)\nthis:\n  conv_abscissa (fds_deriv (fds_exp (fds_truncate m f))) < \\<infinity>\n\ngoal (2 subgoals):\n 1. conv_abscissa\n     (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n    < \\<infinity>\n 2. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        s", "have \"fds_abs_converges (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges\n     (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) (0::'a)", "by (intro fds_abs_converges_mult fds_abs_converges_exp)\n         (auto intro: fds_abs_converges simp add: fds_truncate_deriv [symmetric])"], ["proof (state)\nthis:\n  fds_abs_converges\n   (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) (0::'a)\n\ngoal (2 subgoals):\n 1. conv_abscissa\n     (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n    < \\<infinity>\n 2. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        s", "thus \"conv_abscissa (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) < \\<infinity>\""], ["proof (prove)\nusing this:\n  fds_abs_converges\n   (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) (0::'a)\n\ngoal (1 subgoal):\n 1. conv_abscissa\n     (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n    < \\<infinity>", "using conv_abscissa_PInf_iff"], ["proof (prove)\nusing this:\n  fds_abs_converges\n   (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) (0::'a)\n  (conv_abscissa ?f = \\<infinity>) = (\\<forall>s. \\<not> fds_converges ?f s)\n\ngoal (1 subgoal):\n 1. conv_abscissa\n     (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n    < \\<infinity>", "by blast"], ["proof (state)\nthis:\n  conv_abscissa (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n  < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        s", "show \"\\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> 1) going_to at_top.\n            eval_fds (fds_deriv (fds_exp (?T f))) s =\n            eval_fds (fds_exp (?T f) * fds_deriv (?T f)) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to\n                           at_top.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        s", "proof (intro always_eventually eventually_frequently allI, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top \\<noteq> bot\n 2. \\<And>x.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) x =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        x", "case (2 s)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top \\<noteq> bot\n 2. \\<And>x.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) x =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        x", "have \"eval_fds (fds_deriv (fds_exp (?T f))) s =\n              deriv (eval_fds (fds_exp (?T f))) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n    deriv (eval_fds (fds_exp (fds_truncate m f))) s", "by (auto simp: eval_fds_exp eval_fds_mult fds_abs_converges_mult fds_abs_converges_exp\n                  fds_abs_converges eval_fds_deriv abscissa')"], ["proof (state)\nthis:\n  eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n  deriv (eval_fds (fds_exp (fds_truncate m f))) s\n\ngoal (2 subgoals):\n 1. (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top \\<noteq> bot\n 2. \\<And>x.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) x =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        x", "also"], ["proof (state)\nthis:\n  eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n  deriv (eval_fds (fds_exp (fds_truncate m f))) s\n\ngoal (2 subgoals):\n 1. (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top \\<noteq> bot\n 2. \\<And>x.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) x =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        x", "have \"eval_fds (fds_exp (?T f)) = (\\<lambda>s. exp (eval_fds (?T f) s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_exp (fds_truncate m f)) =\n    (\\<lambda>s. exp (eval_fds (fds_truncate m f) s))", "by (intro ext eval_fds_exp) auto"], ["proof (state)\nthis:\n  eval_fds (fds_exp (fds_truncate m f)) =\n  (\\<lambda>s. exp (eval_fds (fds_truncate m f) s))\n\ngoal (2 subgoals):\n 1. (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top \\<noteq> bot\n 2. \\<And>x.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) x =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        x", "also"], ["proof (state)\nthis:\n  eval_fds (fds_exp (fds_truncate m f)) =\n  (\\<lambda>s. exp (eval_fds (fds_truncate m f) s))\n\ngoal (2 subgoals):\n 1. (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top \\<noteq> bot\n 2. \\<And>x.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) x =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        x", "have \"deriv \\<dots>  = (\\<lambda>s. exp (eval_fds (?T f) s) * deriv (eval_fds (?T f)) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deriv (\\<lambda>s. exp (eval_fds (fds_truncate m f) s)) =\n    (\\<lambda>s.\n        exp (eval_fds (fds_truncate m f) s) *\n        deriv (eval_fds (fds_truncate m f)) s)", "by (auto intro!: DERIV_imp_deriv derivative_eq_intros simp: eval_fds_deriv)"], ["proof (state)\nthis:\n  deriv (\\<lambda>s. exp (eval_fds (fds_truncate m f) s)) =\n  (\\<lambda>s.\n      exp (eval_fds (fds_truncate m f) s) *\n      deriv (eval_fds (fds_truncate m f)) s)\n\ngoal (2 subgoals):\n 1. (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top \\<noteq> bot\n 2. \\<And>x.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) x =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        x", "also"], ["proof (state)\nthis:\n  deriv (\\<lambda>s. exp (eval_fds (fds_truncate m f) s)) =\n  (\\<lambda>s.\n      exp (eval_fds (fds_truncate m f) s) *\n      deriv (eval_fds (fds_truncate m f)) s)\n\ngoal (2 subgoals):\n 1. (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top \\<noteq> bot\n 2. \\<And>x.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) x =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        x", "have \"\\<dots> = eval_fds (fds_exp (?T f) * fds_deriv (?T f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s.\n        exp (eval_fds (fds_truncate m f) s) *\n        deriv (eval_fds (fds_truncate m f)) s) =\n    eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))", "by (auto simp: eval_fds_exp eval_fds_mult fds_abs_converges_mult fds_abs_converges_exp\n                       fds_abs_converges eval_fds_deriv abs_conv_abscissa_deriv)"], ["proof (state)\nthis:\n  (\\<lambda>s.\n      exp (eval_fds (fds_truncate m f) s) *\n      deriv (eval_fds (fds_truncate m f)) s) =\n  eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n\ngoal (2 subgoals):\n 1. (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top \\<noteq> bot\n 2. \\<And>x.\n       eval_fds (fds_deriv (fds_exp (fds_truncate m f))) x =\n       eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f))\n        x", "finally"], ["proof (chain)\npicking this:\n  eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n  eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) s", "show ?case"], ["proof (prove)\nusing this:\n  eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n  eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n    eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) s", "."], ["proof (state)\nthis:\n  eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n  eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) s\n\ngoal (1 subgoal):\n 1. (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top \\<noteq> bot", "qed auto"], ["proof (state)\nthis:\n  \\<exists>\\<^sub>F s in (\\<lambda>s. s \\<bullet> (1::'a)) going_to at_top.\n     eval_fds (fds_deriv (fds_exp (fds_truncate m f))) s =\n     eval_fds (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_deriv (fds_exp (fds_truncate m f)) =\n  fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_deriv (fds_exp f)) =\n       fds_truncate m (fds_exp f * fds_deriv f)", "also"], ["proof (state)\nthis:\n  fds_deriv (fds_exp (fds_truncate m f)) =\n  fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_deriv (fds_exp f)) =\n       fds_truncate m (fds_exp f * fds_deriv f)", "have \"?T \\<dots> = ?T (fds_exp f * fds_deriv f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_truncate m\n     (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) =\n    fds_truncate m (fds_exp f * fds_deriv f)", "by (subst fds_truncate_mult [symmetric])\n       (simp add: fds_truncate_exp fds_truncate_deriv [symmetric], simp add: fds_truncate_mult)"], ["proof (state)\nthis:\n  fds_truncate m\n   (fds_exp (fds_truncate m f) * fds_deriv (fds_truncate m f)) =\n  fds_truncate m (fds_exp f * fds_deriv f)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < m \\<Longrightarrow>\n       fds_truncate m (fds_deriv (fds_exp f)) =\n       fds_truncate m (fds_exp f * fds_deriv f)", "finally"], ["proof (chain)\npicking this:\n  fds_truncate m (fds_deriv (fds_exp f)) =\n  fds_truncate m (fds_exp f * fds_deriv f)", "show \"?T (fds_deriv (fds_exp f)) = \\<dots>\""], ["proof (prove)\nusing this:\n  fds_truncate m (fds_deriv (fds_exp f)) =\n  fds_truncate m (fds_exp f * fds_deriv f)\n\ngoal (1 subgoal):\n 1. fds_truncate m (fds_deriv (fds_exp f)) =\n    fds_truncate m (fds_exp f * fds_deriv f)", "."], ["proof (state)\nthis:\n  fds_truncate m (fds_deriv (fds_exp f)) =\n  fds_truncate m (fds_exp f * fds_deriv f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_exp_ln_strong:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"fds_nth f (Suc 0) \\<noteq> 0\"\n  shows   \"fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f", "let ?c = \"exp l / fds_nth f (Suc 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f", "have \"f * fds_const ?c = f * (fds_exp (-fds_ln l f) * fds_exp (fds_ln l f)) * fds_const ?c\" \n    (is \"_ = _ * (?g * ?h) * _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. f * fds_const (exp l / fds_nth f (Suc 0)) =\n    f * (fds_exp (- fds_ln l f) * fds_exp (fds_ln l f)) *\n    fds_const (exp l / fds_nth f (Suc 0))", "by (subst fds_exp_add [symmetric]) simp"], ["proof (state)\nthis:\n  f * fds_const (exp l / fds_nth f (Suc 0)) =\n  f * (fds_exp (- fds_ln l f) * fds_exp (fds_ln l f)) *\n  fds_const (exp l / fds_nth f (Suc 0))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f", "also"], ["proof (state)\nthis:\n  f * fds_const (exp l / fds_nth f (Suc 0)) =\n  f * (fds_exp (- fds_ln l f) * fds_exp (fds_ln l f)) *\n  fds_const (exp l / fds_nth f (Suc 0))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f", "have \"\\<dots> = fds_const ?c * (f * ?g) * ?h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * (fds_exp (- fds_ln l f) * fds_exp (fds_ln l f)) *\n    fds_const (exp l / fds_nth f (Suc 0)) =\n    fds_const (exp l / fds_nth f (Suc 0)) * (f * fds_exp (- fds_ln l f)) *\n    fds_exp (fds_ln l f)", "by (simp add: mult_ac)"], ["proof (state)\nthis:\n  f * (fds_exp (- fds_ln l f) * fds_exp (fds_ln l f)) *\n  fds_const (exp l / fds_nth f (Suc 0)) =\n  fds_const (exp l / fds_nth f (Suc 0)) * (f * fds_exp (- fds_ln l f)) *\n  fds_exp (fds_ln l f)\n\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f", "also"], ["proof (state)\nthis:\n  f * (fds_exp (- fds_ln l f) * fds_exp (fds_ln l f)) *\n  fds_const (exp l / fds_nth f (Suc 0)) =\n  fds_const (exp l / fds_nth f (Suc 0)) * (f * fds_exp (- fds_ln l f)) *\n  fds_exp (fds_ln l f)\n\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f", "have \"f * ?g = fds_const (inverse ?c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * fds_exp (- fds_ln l f) =\n    fds_const (inverse (exp l / fds_nth f (Suc 0)))", "proof (rule fds_deriv_eq_imp_eq)"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_deriv (f * fds_exp (- fds_ln l f)) =\n    fds_deriv (fds_const (inverse (exp l / fds_nth f (Suc 0))))\n 2. fds_nth (f * fds_exp (- fds_ln l f)) (Suc 0) =\n    fds_nth (fds_const (inverse (exp l / fds_nth f (Suc 0)))) (Suc 0)", "have \"fds_deriv (f * fds_exp (-fds_ln l f)) = \n            fds_exp (- fds_ln l f) * fds_deriv f * (1 - f / f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (f * fds_exp (- fds_ln l f)) =\n    fds_exp (- fds_ln l f) * fds_deriv f * (1 - f / f)", "by (simp add: divide_fds_def algebra_simps)"], ["proof (state)\nthis:\n  fds_deriv (f * fds_exp (- fds_ln l f)) =\n  fds_exp (- fds_ln l f) * fds_deriv f * (1 - f / f)\n\ngoal (2 subgoals):\n 1. fds_deriv (f * fds_exp (- fds_ln l f)) =\n    fds_deriv (fds_const (inverse (exp l / fds_nth f (Suc 0))))\n 2. fds_nth (f * fds_exp (- fds_ln l f)) (Suc 0) =\n    fds_nth (fds_const (inverse (exp l / fds_nth f (Suc 0)))) (Suc 0)", "also"], ["proof (state)\nthis:\n  fds_deriv (f * fds_exp (- fds_ln l f)) =\n  fds_exp (- fds_ln l f) * fds_deriv f * (1 - f / f)\n\ngoal (2 subgoals):\n 1. fds_deriv (f * fds_exp (- fds_ln l f)) =\n    fds_deriv (fds_const (inverse (exp l / fds_nth f (Suc 0))))\n 2. fds_nth (f * fds_exp (- fds_ln l f)) (Suc 0) =\n    fds_nth (fds_const (inverse (exp l / fds_nth f (Suc 0)))) (Suc 0)", "from assms"], ["proof (chain)\npicking this:\n  fds_nth f (Suc 0) \\<noteq> (0::'a)", "have \"f / f = 1\""], ["proof (prove)\nusing this:\n  fds_nth f (Suc 0) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. f / f = 1", "by (simp add: divide_fds_def fds_right_inverse)"], ["proof (state)\nthis:\n  f / f = 1\n\ngoal (2 subgoals):\n 1. fds_deriv (f * fds_exp (- fds_ln l f)) =\n    fds_deriv (fds_const (inverse (exp l / fds_nth f (Suc 0))))\n 2. fds_nth (f * fds_exp (- fds_ln l f)) (Suc 0) =\n    fds_nth (fds_const (inverse (exp l / fds_nth f (Suc 0)))) (Suc 0)", "finally"], ["proof (chain)\npicking this:\n  fds_deriv (f * fds_exp (- fds_ln l f)) =\n  fds_exp (- fds_ln l f) * fds_deriv f * (1 - 1)", "show \"fds_deriv (f * fds_exp (-fds_ln l f)) = fds_deriv (fds_const (inverse ?c))\""], ["proof (prove)\nusing this:\n  fds_deriv (f * fds_exp (- fds_ln l f)) =\n  fds_exp (- fds_ln l f) * fds_deriv f * (1 - 1)\n\ngoal (1 subgoal):\n 1. fds_deriv (f * fds_exp (- fds_ln l f)) =\n    fds_deriv (fds_const (inverse (exp l / fds_nth f (Suc 0))))", "by simp"], ["proof (state)\nthis:\n  fds_deriv (f * fds_exp (- fds_ln l f)) =\n  fds_deriv (fds_const (inverse (exp l / fds_nth f (Suc 0))))\n\ngoal (1 subgoal):\n 1. fds_nth (f * fds_exp (- fds_ln l f)) (Suc 0) =\n    fds_nth (fds_const (inverse (exp l / fds_nth f (Suc 0)))) (Suc 0)", "qed (insert assms, auto simp: exp_minus field_simps)"], ["proof (state)\nthis:\n  f * fds_exp (- fds_ln l f) =\n  fds_const (inverse (exp l / fds_nth f (Suc 0)))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f", "also"], ["proof (state)\nthis:\n  f * fds_exp (- fds_ln l f) =\n  fds_const (inverse (exp l / fds_nth f (Suc 0)))\n\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f", "have \"fds_const ?c * fds_const (inverse ?c) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_const (exp l / fds_nth f (Suc 0)) *\n    fds_const (inverse (exp l / fds_nth f (Suc 0))) =\n    1", "using assms"], ["proof (prove)\nusing this:\n  fds_nth f (Suc 0) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. fds_const (exp l / fds_nth f (Suc 0)) *\n    fds_const (inverse (exp l / fds_nth f (Suc 0))) =\n    1", "by (subst fds_const_mult [symmetric]) (simp add: divide_simps)"], ["proof (state)\nthis:\n  fds_const (exp l / fds_nth f (Suc 0)) *\n  fds_const (inverse (exp l / fds_nth f (Suc 0))) =\n  1\n\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f", "finally"], ["proof (chain)\npicking this:\n  f * fds_const (exp l / fds_nth f (Suc 0)) = 1 * fds_exp (fds_ln l f)", "show ?thesis"], ["proof (prove)\nusing this:\n  f * fds_const (exp l / fds_nth f (Suc 0)) = 1 * fds_exp (fds_ln l f)\n\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f", "by (simp add: mult_ac)"], ["proof (state)\nthis:\n  fds_exp (fds_ln l f) = fds_const (exp l / fds_nth f (Suc 0)) * f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_exp_ln [simp]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"exp l = fds_nth f (Suc 0)\"\n  shows   \"fds_exp (fds_ln l f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = f", "using assms"], ["proof (prove)\nusing this:\n  exp l = fds_nth f (Suc 0)\n\ngoal (1 subgoal):\n 1. fds_exp (fds_ln l f) = f", "by (subst fds_exp_ln_strong) auto"], ["", "lemma fds_ln_exp [simp]:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"l = fds_nth f (Suc 0)\"\n  shows   \"fds_ln l (fds_exp f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_ln l (fds_exp f) = f", "proof (rule fds_deriv_eq_imp_eq)"], ["proof (state)\ngoal (2 subgoals):\n 1. fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f\n 2. fds_nth (fds_ln l (fds_exp f)) (Suc 0) = fds_nth f (Suc 0)", "have \"fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f * (fds_exp f / fds_exp f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f * (fds_exp f / fds_exp f)", "by (simp add: algebra_simps divide_fds_def)"], ["proof (state)\nthis:\n  fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f * (fds_exp f / fds_exp f)\n\ngoal (2 subgoals):\n 1. fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f\n 2. fds_nth (fds_ln l (fds_exp f)) (Suc 0) = fds_nth f (Suc 0)", "also"], ["proof (state)\nthis:\n  fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f * (fds_exp f / fds_exp f)\n\ngoal (2 subgoals):\n 1. fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f\n 2. fds_nth (fds_ln l (fds_exp f)) (Suc 0) = fds_nth f (Suc 0)", "have \"fds_exp f / fds_exp f = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_exp f / fds_exp f = 1", "by (simp add: divide_fds_def fds_right_inverse)"], ["proof (state)\nthis:\n  fds_exp f / fds_exp f = 1\n\ngoal (2 subgoals):\n 1. fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f\n 2. fds_nth (fds_ln l (fds_exp f)) (Suc 0) = fds_nth f (Suc 0)", "finally"], ["proof (chain)\npicking this:\n  fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f * 1", "show \"fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f\""], ["proof (prove)\nusing this:\n  fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f * 1\n\ngoal (1 subgoal):\n 1. fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f", "by simp"], ["proof (state)\nthis:\n  fds_deriv (fds_ln l (fds_exp f)) = fds_deriv f\n\ngoal (1 subgoal):\n 1. fds_nth (fds_ln l (fds_exp f)) (Suc 0) = fds_nth f (Suc 0)", "qed (insert assms, auto simp: field_simps)"], ["", "subsection \\<open>Euler products\\<close>"], ["", "lemma fds_euler_product_LIMSEQ:\n  fixes f :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology} fds\"\n  assumes \"multiplicative_function (fds_nth f)\" and \"fds_abs_converges f s\"\n  shows   \"(\\<lambda>n. \\<Prod>p\\<le>n. if prime p then \\<Sum>i. fds_nth f (p ^ i) / nat_power (p ^ i) s else 1) \\<longlonglongrightarrow> \n             eval_fds f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then \\<Sum>i. fds_nth f (p ^ i) / nat_power (p ^ i) s\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds f s", "unfolding eval_fds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then \\<Sum>i. fds_nth f (p ^ i) / nat_power (p ^ i) s\n           else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. fds_nth f n / nat_power n s)", "proof (rule euler_product_LIMSEQ)"], ["proof (state)\ngoal (2 subgoals):\n 1. summable (\\<lambda>i. norm (fds_nth f i / nat_power i s))\n 2. multiplicative_function (\\<lambda>n. fds_nth f n / nat_power n s)", "show \"multiplicative_function (\\<lambda>n. fds_nth f n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. fds_nth f n / nat_power n s)", "by (rule multiplicative_function_divide_nat_power) fact+"], ["proof (state)\nthis:\n  multiplicative_function (\\<lambda>n. fds_nth f n / nat_power n s)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>i. norm (fds_nth f i / nat_power i s))", "qed (insert assms, auto simp: fds_abs_converges_def)"], ["", "lemma fds_euler_product_LIMSEQ':\n  fixes f :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology} fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" and \"fds_abs_converges f s\"\n  shows   \"(\\<lambda>n. \\<Prod>p\\<le>n. if prime p then inverse (1 - fds_nth f p / nat_power p s) else 1) \\<longlonglongrightarrow> \n             eval_fds f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds f s", "unfolding eval_fds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> (\\<Sum>n. fds_nth f n / nat_power n s)", "proof (rule euler_product_LIMSEQ')"], ["proof (state)\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))\n 2. completely_multiplicative_function\n     (\\<lambda>p. fds_nth f p / nat_power p s)", "show \"completely_multiplicative_function (\\<lambda>n. fds_nth f n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function\n     (\\<lambda>n. fds_nth f n / nat_power n s)", "by (rule completely_multiplicative_function_divide_nat_power) fact+"], ["proof (state)\nthis:\n  completely_multiplicative_function\n   (\\<lambda>n. fds_nth f n / nat_power n s)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))", "qed (insert assms, auto simp: fds_abs_converges_def)"], ["", "lemma fds_abs_convergent_euler_product:\n  fixes f :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology} fds\"\n  assumes \"multiplicative_function (fds_nth f)\" and \"fds_abs_converges f s\"\n  shows   \"abs_convergent_prod \n             (\\<lambda>p. if prime p then \\<Sum>i. fds_nth f (p ^ i) / nat_power (p ^ i) s else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_convergent_prod\n     (\\<lambda>p.\n         if prime p then \\<Sum>i. fds_nth f (p ^ i) / nat_power (p ^ i) s\n         else (1::'a))", "unfolding eval_fds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_convergent_prod\n     (\\<lambda>p.\n         if prime p then \\<Sum>i. fds_nth f (p ^ i) / nat_power (p ^ i) s\n         else (1::'a))", "proof (rule abs_convergent_euler_product)"], ["proof (state)\ngoal (2 subgoals):\n 1. summable (\\<lambda>i. norm (fds_nth f i / nat_power i s))\n 2. multiplicative_function (\\<lambda>a. fds_nth f a / nat_power a s)", "show \"multiplicative_function (\\<lambda>n. fds_nth f n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. fds_nth f n / nat_power n s)", "by (rule multiplicative_function_divide_nat_power) fact+"], ["proof (state)\nthis:\n  multiplicative_function (\\<lambda>n. fds_nth f n / nat_power n s)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>i. norm (fds_nth f i / nat_power i s))", "qed (insert assms, auto simp: fds_abs_converges_def)"], ["", "lemma fds_abs_convergent_euler_product':\n  fixes f :: \"'a :: {nat_power, real_normed_field, banach, second_countable_topology} fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" and \"fds_abs_converges f s\"\n  shows   \"abs_convergent_prod \n             (\\<lambda>p. if prime p then inverse (1 - fds_nth f p / nat_power p s) else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_convergent_prod\n     (\\<lambda>p.\n         if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n         else (1::'a))", "unfolding eval_fds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_convergent_prod\n     (\\<lambda>p.\n         if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n         else (1::'a))", "proof (rule abs_convergent_euler_product')"], ["proof (state)\ngoal (2 subgoals):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))\n 2. completely_multiplicative_function\n     (\\<lambda>p. fds_nth f p / nat_power p s)", "show \"completely_multiplicative_function (\\<lambda>n. fds_nth f n / nat_power n s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function\n     (\\<lambda>n. fds_nth f n / nat_power n s)", "by (rule completely_multiplicative_function_divide_nat_power) fact+"], ["proof (state)\nthis:\n  completely_multiplicative_function\n   (\\<lambda>n. fds_nth f n / nat_power n s)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth f n / nat_power n s))", "qed (insert assms, auto simp: fds_abs_converges_def)"], ["", "lemma fds_abs_convergent_zero_iff:\n  fixes f :: \"'a :: {nat_power_field, real_normed_field, banach, second_countable_topology} fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\"\n  assumes \"fds_abs_converges f s\"\n  shows   \"eval_fds f s = 0 \\<longleftrightarrow> (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "let ?g = \"\\<lambda>p. if prime p then inverse (1 - fds_nth f p / nat_power p s) else 1\""], ["proof (state)\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "have lim: \"(\\<lambda>n. \\<Prod>p\\<le>n. ?g p) \\<longlonglongrightarrow> eval_fds f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds f s", "by (intro fds_euler_product_LIMSEQ' assms)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds f s\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "have conv: \"convergent_prod ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convergent_prod\n     (\\<lambda>p.\n         if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n         else (1::'a))", "by (intro abs_convergent_prod_imp_convergent_prod fds_abs_convergent_euler_product' assms)"], ["proof (state)\nthis:\n  convergent_prod\n   (\\<lambda>p.\n       if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n       else (1::'a))\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "{"], ["proof (state)\nthis:\n  convergent_prod\n   (\\<lambda>p.\n       if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n       else (1::'a))\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "assume \"eval_fds f s = 0\""], ["proof (state)\nthis:\n  eval_fds f s = (0::'a)\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "from convergent_prod_to_zero_iff[OF conv] and this and lim"], ["proof (chain)\npicking this:\n  (\\<lambda>n.\n      \\<Prod>i\\<le>n.\n         if prime i then inverse ((1::'a) - fds_nth f i / nat_power i s)\n         else (1::'a))\n  \\<longlonglongrightarrow> (0::'a) =\n  (\\<exists>i.\n      (if prime i then inverse ((1::'a) - fds_nth f i / nat_power i s)\n       else (1::'a)) =\n      (0::'a))\n  eval_fds f s = (0::'a)\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds f s", "have \"\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s\""], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      \\<Prod>i\\<le>n.\n         if prime i then inverse ((1::'a) - fds_nth f i / nat_power i s)\n         else (1::'a))\n  \\<longlonglongrightarrow> (0::'a) =\n  (\\<exists>i.\n      (if prime i then inverse ((1::'a) - fds_nth f i / nat_power i s)\n       else (1::'a)) =\n      (0::'a))\n  eval_fds f s = (0::'a)\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds f s\n\ngoal (1 subgoal):\n 1. \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "}"], ["proof (state)\nthis:\n  eval_fds f s = (0::'a) \\<Longrightarrow>\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "moreover"], ["proof (state)\nthis:\n  eval_fds f s = (0::'a) \\<Longrightarrow>\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "{"], ["proof (state)\nthis:\n  eval_fds f s = (0::'a) \\<Longrightarrow>\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "assume \"\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s\""], ["proof (state)\nthis:\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "then"], ["proof (chain)\npicking this:\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s", "obtain p where \"prime p\" \"fds_nth f p = nat_power p s\""], ["proof (prove)\nusing this:\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>prime p; fds_nth f p = nat_power p s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  prime p\n  fds_nth f p = nat_power p s\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "moreover"], ["proof (state)\nthis:\n  prime p\n  fds_nth f p = nat_power p s\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "from this"], ["proof (chain)\npicking this:\n  prime p\n  fds_nth f p = nat_power p s", "have \"nat_power p s \\<noteq> 0\""], ["proof (prove)\nusing this:\n  prime p\n  fds_nth f p = nat_power p s\n\ngoal (1 subgoal):\n 1. nat_power p s \\<noteq> (0::'a)", "by (intro nat_power_nonzero) (auto simp: prime_gt_0_nat)"], ["proof (state)\nthis:\n  nat_power p s \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "ultimately"], ["proof (chain)\npicking this:\n  prime p\n  fds_nth f p = nat_power p s\n  nat_power p s \\<noteq> (0::'a)", "have \"(\\<lambda>n. \\<Prod>p\\<le>n. ?g p) \\<longlonglongrightarrow> 0\""], ["proof (prove)\nusing this:\n  prime p\n  fds_nth f p = nat_power p s\n  nat_power p s \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> (0::'a)", "using convergent_prod_to_zero_iff[OF conv]"], ["proof (prove)\nusing this:\n  prime p\n  fds_nth f p = nat_power p s\n  nat_power p s \\<noteq> (0::'a)\n  (\\<lambda>n.\n      \\<Prod>i\\<le>n.\n         if prime i then inverse ((1::'a) - fds_nth f i / nat_power i s)\n         else (1::'a))\n  \\<longlonglongrightarrow> (0::'a) =\n  (\\<exists>i.\n      (if prime i then inverse ((1::'a) - fds_nth f i / nat_power i s)\n       else (1::'a)) =\n      (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> (0::'a)", "by (auto intro!: exI[of _ p] split: if_splits)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n         else (1::'a))\n  \\<longlonglongrightarrow> (0::'a)\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "from tendsto_unique[OF _ lim this]"], ["proof (chain)\npicking this:\n  sequentially \\<noteq> bot \\<Longrightarrow> eval_fds f s = (0::'a)", "have \"eval_fds f s = 0\""], ["proof (prove)\nusing this:\n  sequentially \\<noteq> bot \\<Longrightarrow> eval_fds f s = (0::'a)\n\ngoal (1 subgoal):\n 1. eval_fds f s = (0::'a)", "by simp"], ["proof (state)\nthis:\n  eval_fds f s = (0::'a)\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "}"], ["proof (state)\nthis:\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s \\<Longrightarrow>\n  eval_fds f s = (0::'a)\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "ultimately"], ["proof (chain)\npicking this:\n  eval_fds f s = (0::'a) \\<Longrightarrow>\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s \\<Longrightarrow>\n  eval_fds f s = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  eval_fds f s = (0::'a) \\<Longrightarrow>\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s\n  \\<exists>p. prime p \\<and> fds_nth f p = nat_power p s \\<Longrightarrow>\n  eval_fds f s = (0::'a)\n\ngoal (1 subgoal):\n 1. (eval_fds f s = (0::'a)) =\n    (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)", "by blast"], ["proof (state)\nthis:\n  (eval_fds f s = (0::'a)) =\n  (\\<exists>p. prime p \\<and> fds_nth f p = nat_power p s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \n  fixes s :: \"'a :: {nat_power_normed_field,banach,euclidean_space}\"\n  assumes \"s \\<bullet> 1 > 1\"\n  shows   euler_product_fds_zeta: \n            \"(\\<lambda>n. \\<Prod>p\\<le>n. if prime p then inverse (1 - 1 / nat_power p s) else 1)\n                \\<longlonglongrightarrow> eval_fds fds_zeta s\" (is ?th1)\n  and     eval_fds_zeta_nonzero: \"eval_fds fds_zeta s \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds fds_zeta s &&&\n    eval_fds fds_zeta s \\<noteq> (0::'a)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds fds_zeta s\n 2. eval_fds fds_zeta s \\<noteq> (0::'a)", "have *: \"completely_multiplicative_function (fds_nth fds_zeta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function (fds_nth fds_zeta)", "by standard auto"], ["proof (state)\nthis:\n  completely_multiplicative_function (fds_nth fds_zeta)\n\ngoal (2 subgoals):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds fds_zeta s\n 2. eval_fds fds_zeta s \\<noteq> (0::'a)", "have lim: \"(\\<lambda>n. \\<Prod>p\\<le>n. if prime p then inverse (1 - fds_nth fds_zeta p / nat_power p s) else 1) \n          \\<longlonglongrightarrow> eval_fds fds_zeta s\" (is \"filterlim ?g _ _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p\n           then inverse ((1::'a) - fds_nth fds_zeta p / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds fds_zeta s", "using assms"], ["proof (prove)\nusing this:\n  1 < s \\<bullet> (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p\n           then inverse ((1::'a) - fds_nth fds_zeta p / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds fds_zeta s", "by (intro fds_euler_product_LIMSEQ' * fds_abs_summable_zeta)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p\n         then inverse ((1::'a) - fds_nth fds_zeta p / nat_power p s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds fds_zeta s\n\ngoal (2 subgoals):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds fds_zeta s\n 2. eval_fds fds_zeta s \\<noteq> (0::'a)", "also"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p\n         then inverse ((1::'a) - fds_nth fds_zeta p / nat_power p s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds fds_zeta s\n\ngoal (2 subgoals):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds fds_zeta s\n 2. eval_fds fds_zeta s \\<noteq> (0::'a)", "have \"?g = (\\<lambda>n. \\<Prod>p\\<le>n. if prime p then inverse (1 - 1 / nat_power p s) else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p\n           then inverse ((1::'a) - fds_nth fds_zeta p / nat_power p s)\n           else (1::'a)) =\n    (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n           else (1::'a))", "by (intro ext prod.cong refl) (auto simp: fds_zeta_def fds_nth_fds)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p\n         then inverse ((1::'a) - fds_nth fds_zeta p / nat_power p s)\n         else (1::'a)) =\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n         else (1::'a))\n\ngoal (2 subgoals):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds fds_zeta s\n 2. eval_fds fds_zeta s \\<noteq> (0::'a)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds fds_zeta s", "show ?th1"], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds fds_zeta s\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>p\\<le>n.\n           if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds fds_zeta s", "."], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds fds_zeta s\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "{"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>p\\<le>n.\n         if prime p then inverse ((1::'a) - (1::'a) / nat_power p s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds fds_zeta s\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "fix p :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "assume \"prime p\""], ["proof (state)\nthis:\n  prime p\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "from this"], ["proof (chain)\npicking this:\n  prime p", "have \"p > 1\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 1 < p", "by (simp add: prime_gt_Suc_0_nat)"], ["proof (state)\nthis:\n  1 < p\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "hence \"norm (nat_power p s) = real p powr (s \\<bullet> 1)\""], ["proof (prove)\nusing this:\n  1 < p\n\ngoal (1 subgoal):\n 1. norm (nat_power p s) = real p powr (s \\<bullet> (1::'a))", "by (simp add: norm_nat_power)"], ["proof (state)\nthis:\n  norm (nat_power p s) = real p powr (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "also"], ["proof (state)\nthis:\n  norm (nat_power p s) = real p powr (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "have \"\\<dots> > real p powr 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real p powr 0 < real p powr (s \\<bullet> (1::'a))", "using assms and \\<open>p > 1\\<close>"], ["proof (prove)\nusing this:\n  1 < s \\<bullet> (1::'a)\n  1 < p\n\ngoal (1 subgoal):\n 1. real p powr 0 < real p powr (s \\<bullet> (1::'a))", "by (intro powr_less_mono) auto"], ["proof (state)\nthis:\n  real p powr 0 < real p powr (s \\<bullet> (1::'a))\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "finally"], ["proof (chain)\npicking this:\n  real p powr 0 < norm (nat_power p s)", "have \"nat_power p s \\<noteq> 1\""], ["proof (prove)\nusing this:\n  real p powr 0 < norm (nat_power p s)\n\ngoal (1 subgoal):\n 1. nat_power p s \\<noteq> (1::'a)", "using \\<open>p > 1\\<close>"], ["proof (prove)\nusing this:\n  real p powr 0 < norm (nat_power p s)\n  1 < p\n\ngoal (1 subgoal):\n 1. nat_power p s \\<noteq> (1::'a)", "by auto"], ["proof (state)\nthis:\n  nat_power p s \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "}"], ["proof (state)\nthis:\n  prime ?p3 \\<Longrightarrow> nat_power ?p3 s \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "hence **: \"\\<nexists>p. prime p \\<and> fds_nth fds_zeta p = nat_power p s\""], ["proof (prove)\nusing this:\n  prime ?p3 \\<Longrightarrow> nat_power ?p3 s \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<nexists>p. prime p \\<and> fds_nth fds_zeta p = nat_power p s", "by (auto simp: fds_zeta_def fds_nth_fds)"], ["proof (state)\nthis:\n  \\<nexists>p. prime p \\<and> fds_nth fds_zeta p = nat_power p s\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "show \"eval_fds fds_zeta s \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "using assms * **"], ["proof (prove)\nusing this:\n  1 < s \\<bullet> (1::'a)\n  completely_multiplicative_function (fds_nth fds_zeta)\n  \\<nexists>p. prime p \\<and> fds_nth fds_zeta p = nat_power p s\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta s \\<noteq> (0::'a)", "by (subst fds_abs_convergent_zero_iff) simp_all"], ["proof (state)\nthis:\n  eval_fds fds_zeta s \\<noteq> (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_primepow_subseries_euler_product_cm:\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes \"completely_multiplicative_function (fds_nth f)\" \"prime p\"\n  assumes \"s \\<bullet> 1 > abs_conv_abscissa f\"\n  shows   \"eval_fds (fds_primepow_subseries p f) s = 1 / (1 - fds_nth f p / nat_power p s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_primepow_subseries p f) s =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (fds_primepow_subseries p f) s =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "let ?f = \"(\\<lambda>n. \\<Prod>pa\\<le>n. if prime pa then inverse (1 - fds_nth (fds_primepow_subseries p f) pa /\n                 nat_power pa s) else 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. eval_fds (fds_primepow_subseries p f) s =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "have \"sequentially \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sequentially \\<noteq> bot", "by simp"], ["proof (state)\nthis:\n  sequentially \\<noteq> bot\n\ngoal (1 subgoal):\n 1. eval_fds (fds_primepow_subseries p f) s =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "moreover"], ["proof (state)\nthis:\n  sequentially \\<noteq> bot\n\ngoal (1 subgoal):\n 1. eval_fds (fds_primepow_subseries p f) s =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "have \"?f \\<longlonglongrightarrow> eval_fds (fds_primepow_subseries p f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>pa\\<le>n.\n           if prime pa\n           then inverse\n                 ((1::'a) -\n                  fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n           else (1::'a))\n    \\<longlonglongrightarrow> eval_fds (fds_primepow_subseries p f) s", "by (intro fds_euler_product_LIMSEQ' completely_multiplicative_function_only_pows assms\n          fds_abs_converges_subseries) (insert assms, auto intro!: fds_abs_converges)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>pa\\<le>n.\n         if prime pa\n         then inverse\n               ((1::'a) -\n                fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds (fds_primepow_subseries p f) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_primepow_subseries p f) s =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>pa\\<le>n.\n         if prime pa\n         then inverse\n               ((1::'a) -\n                fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds (fds_primepow_subseries p f) s\n\ngoal (1 subgoal):\n 1. eval_fds (fds_primepow_subseries p f) s =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "have \"eventually (\\<lambda>n. ?f n = 1 / (1 - fds_nth f p / nat_power p s)) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       (\\<Prod>pa\\<le>n.\n           if prime pa\n           then inverse\n                 ((1::'a) -\n                  fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n           else (1::'a)) =\n       (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "using eventually_ge_at_top[of p]"], ["proof (prove)\nusing this:\n  eventually ((\\<le>) p) sequentially\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       (\\<Prod>pa\\<le>n.\n           if prime pa\n           then inverse\n                 ((1::'a) -\n                  fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n           else (1::'a)) =\n       (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       p \\<le> n \\<Longrightarrow>\n       (\\<Prod>pa\\<le>n.\n           if prime pa\n           then inverse\n                 ((1::'a) -\n                  fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n           else (1::'a)) =\n       (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "case (elim n)"], ["proof (state)\nthis:\n  p \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p \\<le> n \\<Longrightarrow>\n       (\\<Prod>pa\\<le>n.\n           if prime pa\n           then inverse\n                 ((1::'a) -\n                  fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n           else (1::'a)) =\n       (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "have \"(\\<Prod>pa\\<le>n. if prime pa then inverse (1 - fds_nth (fds_primepow_subseries p f) pa /\n              nat_power pa s) else 1) = \n          (\\<Prod>q\\<le>n. if q = p then inverse (1 - fds_nth f p / nat_power p s) else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>pa\\<le>n.\n        if prime pa\n        then inverse\n              ((1::'a) -\n               fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n        else (1::'a)) =\n    (\\<Prod>q\\<le>n.\n        if q = p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n        else (1::'a))", "using \\<open>prime p\\<close>"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. (\\<Prod>pa\\<le>n.\n        if prime pa\n        then inverse\n              ((1::'a) -\n               fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n        else (1::'a)) =\n    (\\<Prod>q\\<le>n.\n        if q = p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n        else (1::'a))", "by (intro prod.cong) (auto simp: fds_nth_subseries prime_prime_factors)"], ["proof (state)\nthis:\n  (\\<Prod>pa\\<le>n.\n      if prime pa\n      then inverse\n            ((1::'a) -\n             fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n      else (1::'a)) =\n  (\\<Prod>q\\<le>n.\n      if q = p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n      else (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p \\<le> n \\<Longrightarrow>\n       (\\<Prod>pa\\<le>n.\n           if prime pa\n           then inverse\n                 ((1::'a) -\n                  fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n           else (1::'a)) =\n       (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "also"], ["proof (state)\nthis:\n  (\\<Prod>pa\\<le>n.\n      if prime pa\n      then inverse\n            ((1::'a) -\n             fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n      else (1::'a)) =\n  (\\<Prod>q\\<le>n.\n      if q = p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n      else (1::'a))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p \\<le> n \\<Longrightarrow>\n       (\\<Prod>pa\\<le>n.\n           if prime pa\n           then inverse\n                 ((1::'a) -\n                  fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n           else (1::'a)) =\n       (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "have \"\\<dots> = 1 / (1 - fds_nth f p / nat_power p s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>q\\<le>n.\n        if q = p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n        else (1::'a)) =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "using elim"], ["proof (prove)\nusing this:\n  p \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<Prod>q\\<le>n.\n        if q = p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n        else (1::'a)) =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "by (subst prod.delta) (auto simp: divide_simps)"], ["proof (state)\nthis:\n  (\\<Prod>q\\<le>n.\n      if q = p then inverse ((1::'a) - fds_nth f p / nat_power p s)\n      else (1::'a)) =\n  (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p \\<le> n \\<Longrightarrow>\n       (\\<Prod>pa\\<le>n.\n           if prime pa\n           then inverse\n                 ((1::'a) -\n                  fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n           else (1::'a)) =\n       (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>pa\\<le>n.\n      if prime pa\n      then inverse\n            ((1::'a) -\n             fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n      else (1::'a)) =\n  (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Prod>pa\\<le>n.\n      if prime pa\n      then inverse\n            ((1::'a) -\n             fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n      else (1::'a)) =\n  (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)\n\ngoal (1 subgoal):\n 1. (\\<Prod>pa\\<le>n.\n        if prime pa\n        then inverse\n              ((1::'a) -\n               fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n        else (1::'a)) =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "."], ["proof (state)\nthis:\n  (\\<Prod>pa\\<le>n.\n      if prime pa\n      then inverse\n            ((1::'a) -\n             fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n      else (1::'a)) =\n  (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     (\\<Prod>pa\\<le>n.\n         if prime pa\n         then inverse\n               ((1::'a) -\n                fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n         else (1::'a)) =\n     (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_primepow_subseries p f) s =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "hence \"?f \\<longlonglongrightarrow> 1 / (1 - fds_nth f p / nat_power p s)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially.\n     (\\<Prod>pa\\<le>n.\n         if prime pa\n         then inverse\n               ((1::'a) -\n                fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n         else (1::'a)) =\n     (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Prod>pa\\<le>n.\n           if prime pa\n           then inverse\n                 ((1::'a) -\n                  fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n           else (1::'a))\n    \\<longlonglongrightarrow> (1::'a) /\n                              ((1::'a) - fds_nth f p / nat_power p s)", "by (rule tendsto_eventually)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Prod>pa\\<le>n.\n         if prime pa\n         then inverse\n               ((1::'a) -\n                fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n         else (1::'a))\n  \\<longlonglongrightarrow> (1::'a) /\n                            ((1::'a) - fds_nth f p / nat_power p s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_primepow_subseries p f) s =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "ultimately"], ["proof (chain)\npicking this:\n  sequentially \\<noteq> bot\n  (\\<lambda>n.\n      \\<Prod>pa\\<le>n.\n         if prime pa\n         then inverse\n               ((1::'a) -\n                fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds (fds_primepow_subseries p f) s\n  (\\<lambda>n.\n      \\<Prod>pa\\<le>n.\n         if prime pa\n         then inverse\n               ((1::'a) -\n                fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n         else (1::'a))\n  \\<longlonglongrightarrow> (1::'a) /\n                            ((1::'a) - fds_nth f p / nat_power p s)", "show ?thesis"], ["proof (prove)\nusing this:\n  sequentially \\<noteq> bot\n  (\\<lambda>n.\n      \\<Prod>pa\\<le>n.\n         if prime pa\n         then inverse\n               ((1::'a) -\n                fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n         else (1::'a))\n  \\<longlonglongrightarrow> eval_fds (fds_primepow_subseries p f) s\n  (\\<lambda>n.\n      \\<Prod>pa\\<le>n.\n         if prime pa\n         then inverse\n               ((1::'a) -\n                fds_nth (fds_primepow_subseries p f) pa / nat_power pa s)\n         else (1::'a))\n  \\<longlonglongrightarrow> (1::'a) /\n                            ((1::'a) - fds_nth f p / nat_power p s)\n\ngoal (1 subgoal):\n 1. eval_fds (fds_primepow_subseries p f) s =\n    (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)", "by (rule tendsto_unique)"], ["proof (state)\nthis:\n  eval_fds (fds_primepow_subseries p f) s =\n  (1::'a) / ((1::'a) - fds_nth f p / nat_power p s)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Non-negative Dirichlet series\\<close>"], ["", "lemma nonneg_Reals_sum: \"(\\<And>x. x \\<in> A \\<Longrightarrow> f x \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0) \\<Longrightarrow> sum f A \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> A \\<Longrightarrow>\n        f x \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0) \\<Longrightarrow>\n    sum f A \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "by (induction A rule: infinite_finite_induct) auto"], ["", "locale nonneg_dirichlet_series =\n  fixes f :: \"'a :: dirichlet_series fds\"\n  assumes nonneg_coeffs_aux: \"n > 0 \\<Longrightarrow> fds_nth f n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\"\nbegin"], ["", "lemma nonneg_coeffs: \"fds_nth f n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth f n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "using nonneg_coeffs_aux[of n]"], ["proof (prove)\nusing this:\n  0 < n \\<Longrightarrow> fds_nth f n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal (1 subgoal):\n 1. fds_nth f n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "by (cases \"n = 0\") auto"], ["", "end"], ["", "lemma nonneg_dirichlet_series_0 [simp,intro]: \"nonneg_dirichlet_series 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series 0", "by standard (auto simp: zero_fds_def)"], ["", "lemma nonneg_dirichlet_series_1 [simp,intro]: \"nonneg_dirichlet_series 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series 1", "by standard (auto simp: one_fds_def)"], ["", "lemma nonneg_dirichlet_series_const [simp,intro]: \n  \"c \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0 \\<Longrightarrow> nonneg_dirichlet_series (fds_const c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0 \\<Longrightarrow>\n    nonneg_dirichlet_series (fds_const c)", "by standard (auto simp: fds_const_def)"], ["", "lemma nonneg_dirichlet_series_add [intro]:\n  assumes \"nonneg_dirichlet_series f\" \"nonneg_dirichlet_series g\"\n  shows   \"nonneg_dirichlet_series (f + g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f + g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f + g)", "interpret f: nonneg_dirichlet_series f"], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f + g)", "interpret g: nonneg_dirichlet_series g"], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series g", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f + g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f + g)", "by standard (auto intro!: nonneg_Reals_add_I f.nonneg_coeffs g.nonneg_coeffs)"], ["proof (state)\nthis:\n  nonneg_dirichlet_series (f + g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonneg_dirichlet_series_mult [intro]:\n  assumes \"nonneg_dirichlet_series f\" \"nonneg_dirichlet_series g\"\n  shows   \"nonneg_dirichlet_series (f * g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f * g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f * g)", "interpret f: nonneg_dirichlet_series f"], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f * g)", "interpret g: nonneg_dirichlet_series g"], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series g", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f * g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f * g)", "by standard (auto intro!: nonneg_Reals_sum nonneg_Reals_mult_I f.nonneg_coeffs g.nonneg_coeffs \n                      simp: fds_nth_mult dirichlet_prod_def)"], ["proof (state)\nthis:\n  nonneg_dirichlet_series (f * g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonneg_dirichlet_series_power [intro]:\n  assumes \"nonneg_dirichlet_series f\"\n  shows   \"nonneg_dirichlet_series (f ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f ^ n)", "using assms"], ["proof (prove)\nusing this:\n  nonneg_dirichlet_series f\n\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f ^ n)", "by (induction n) auto"], ["", "context nonneg_dirichlet_series\nbegin"], ["", "lemma nonneg_exp [intro]: \"nonneg_dirichlet_series (fds_exp f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (fds_exp f)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "assume \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "define c where \"c = exp (fds_nth f (Suc 0))\""], ["proof (state)\nthis:\n  c = exp (fds_nth f (Suc 0))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "define f' where \"f' = fds (\\<lambda>n. if n = Suc 0 then 0 else fds_nth f n)\""], ["proof (state)\nthis:\n  f' = fds (\\<lambda>n. if n = Suc 0 then 0::'a else fds_nth f n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "from nonneg_coeffs[of 1]"], ["proof (chain)\npicking this:\n  fds_nth f 1 \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "obtain c' where \"fds_nth f (Suc 0) = of_real c'\""], ["proof (prove)\nusing this:\n  fds_nth f 1 \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal (1 subgoal):\n 1. (\\<And>c'.\n        fds_nth f (Suc 0) = of_real c' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto elim!: nonneg_Reals_cases)"], ["proof (state)\nthis:\n  fds_nth f (Suc 0) = of_real c'\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "hence \"c = of_real (exp c')\""], ["proof (prove)\nusing this:\n  fds_nth f (Suc 0) = of_real c'\n\ngoal (1 subgoal):\n 1. c = of_real (exp c')", "by (simp add: c_def exp_of_real)"], ["proof (state)\nthis:\n  c = of_real (exp c')\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "hence c: \"c \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\""], ["proof (prove)\nusing this:\n  c = of_real (exp c')\n\ngoal (1 subgoal):\n 1. c \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "by simp"], ["proof (state)\nthis:\n  c \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "have less: \"n < 2 ^ k\" if \"n < k\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < 2 ^ k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n < 2 ^ k", "have \"n < k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k", "by fact"], ["proof (state)\nthis:\n  n < k\n\ngoal (1 subgoal):\n 1. n < 2 ^ k", "also"], ["proof (state)\nthis:\n  n < k\n\ngoal (1 subgoal):\n 1. n < 2 ^ k", "have \"\\<dots> < 2 ^ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < 2 ^ k", "by (induction k) auto"], ["proof (state)\nthis:\n  k < 2 ^ k\n\ngoal (1 subgoal):\n 1. n < 2 ^ k", "finally"], ["proof (chain)\npicking this:\n  n < 2 ^ k", "show ?thesis"], ["proof (prove)\nusing this:\n  n < 2 ^ k\n\ngoal (1 subgoal):\n 1. n < 2 ^ k", "."], ["proof (state)\nthis:\n  n < 2 ^ k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n < ?k \\<Longrightarrow> n < 2 ^ ?k\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "have nonneg_power: \"fds_nth (f' ^ k) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (f' ^ k) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_nth (f' ^ k) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "have \"nonneg_dirichlet_series f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series f'", "by standard (insert nonneg_coeffs, auto simp: f'_def)"], ["proof (state)\nthis:\n  nonneg_dirichlet_series f'\n\ngoal (1 subgoal):\n 1. fds_nth (f' ^ k) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "interpret nonneg_dirichlet_series \"f' ^ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (f' ^ k)", "by (intro nonneg_dirichlet_series_power) fact+"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_nth (f' ^ k) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "from nonneg_coeffs[of n]"], ["proof (chain)\npicking this:\n  fds_nth (f' ^ k) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_nth (f' ^ k) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal (1 subgoal):\n 1. fds_nth (f' ^ k) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "."], ["proof (state)\nthis:\n  fds_nth (f' ^ k) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fds_nth (f' ^ ?k) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "hence \"fds_nth (fds_exp f) n = c * (\\<Sum>k. fds_nth (f' ^ k) n /\\<^sub>R fact k)\""], ["proof (prove)\nusing this:\n  fds_nth (f' ^ ?k) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) n =\n    c * (\\<Sum>k. fds_nth (f' ^ k) n /\\<^sub>R fact k)", "by (simp add: fds_exp_def fds_nth_fds' f'_def c_def)"], ["proof (state)\nthis:\n  fds_nth (fds_exp f) n = c * (\\<Sum>k. fds_nth (f' ^ k) n /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "also"], ["proof (state)\nthis:\n  fds_nth (fds_exp f) n = c * (\\<Sum>k. fds_nth (f' ^ k) n /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "have \"(\\<Sum>k. fds_nth (f' ^ k) n /\\<^sub>R fact k) = (\\<Sum>k\\<le>n. fds_nth (f' ^ k) n /\\<^sub>R fact k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k. fds_nth (f' ^ k) n /\\<^sub>R fact k) =\n    (\\<Sum>k\\<le>n. fds_nth (f' ^ k) n /\\<^sub>R fact k)", "by (intro suminf_finite) (auto intro!: fds_nth_power_eq_0 less simp: f'_def not_le)"], ["proof (state)\nthis:\n  (\\<Sum>k. fds_nth (f' ^ k) n /\\<^sub>R fact k) =\n  (\\<Sum>k\\<le>n. fds_nth (f' ^ k) n /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "also"], ["proof (state)\nthis:\n  (\\<Sum>k. fds_nth (f' ^ k) n /\\<^sub>R fact k) =\n  (\\<Sum>k\\<le>n. fds_nth (f' ^ k) n /\\<^sub>R fact k)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "have \"c * \\<dots> \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c * (\\<Sum>k\\<le>n. fds_nth (f' ^ k) n /\\<^sub>R fact k)\n    \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "unfolding scaleR_conv_of_real"], ["proof (prove)\ngoal (1 subgoal):\n 1. c * (\\<Sum>k\\<le>n. of_real (inverse (fact k)) * fds_nth (f' ^ k) n)\n    \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "by (intro nonneg_Reals_mult_I nonneg_Reals_sum nonneg_power, unfold nonneg_Reals_of_real_iff )\n       (auto simp: c)"], ["proof (state)\nthis:\n  c * (\\<Sum>k\\<le>n. fds_nth (f' ^ k) n /\\<^sub>R fact k)\n  \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "finally"], ["proof (chain)\npicking this:\n  fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "show \"fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\""], ["proof (prove)\nusing this:\n  fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal (1 subgoal):\n 1. fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0", "."], ["proof (state)\nthis:\n  fds_nth (fds_exp f) n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma nonneg_dirichlet_series_lnD: \n  assumes \"nonneg_dirichlet_series (fds_ln l f)\" \"exp l = fds_nth f (Suc 0)\"\n  shows   \"nonneg_dirichlet_series f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series f", "from assms"], ["proof (chain)\npicking this:\n  nonneg_dirichlet_series (fds_ln l f)\n  exp l = fds_nth f (Suc 0)", "have \"nonneg_dirichlet_series (fds_exp (fds_ln l f))\""], ["proof (prove)\nusing this:\n  nonneg_dirichlet_series (fds_ln l f)\n  exp l = fds_nth f (Suc 0)\n\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series (fds_exp (fds_ln l f))", "by (intro nonneg_dirichlet_series.nonneg_exp)"], ["proof (state)\nthis:\n  nonneg_dirichlet_series (fds_exp (fds_ln l f))\n\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series f", "thus ?thesis"], ["proof (prove)\nusing this:\n  nonneg_dirichlet_series (fds_exp (fds_ln l f))\n\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series f", "using assms"], ["proof (prove)\nusing this:\n  nonneg_dirichlet_series (fds_exp (fds_ln l f))\n  nonneg_dirichlet_series (fds_ln l f)\n  exp l = fds_nth f (Suc 0)\n\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series f", "by simp"], ["proof (state)\nthis:\n  nonneg_dirichlet_series f\n\ngoal:\nNo subgoals!", "qed"], ["", "context nonneg_dirichlet_series\nbegin"], ["", "lemma fds_of_real_norm: \"fds_of_real (fds_norm f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_of_real (fds_norm f) = f", "proof (rule fds_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_of_real (fds_norm f)) n = fds_nth f n", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_of_real (fds_norm f)) n = fds_nth f n", "assume n: \"n > 0\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       fds_nth (fds_of_real (fds_norm f)) n = fds_nth f n", "show \"fds_nth (fds_of_real (fds_norm f)) n = fds_nth f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_of_real (fds_norm f)) n = fds_nth f n", "using nonneg_coeffs[of n]"], ["proof (prove)\nusing this:\n  fds_nth f n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal (1 subgoal):\n 1. fds_nth (fds_of_real (fds_norm f)) n = fds_nth f n", "by (auto elim!: nonneg_Reals_cases)"], ["proof (state)\nthis:\n  fds_nth (fds_of_real (fds_norm f)) n = fds_nth f n\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* TODO: Simplify proof *)"], ["", "lemma pringsheim_landau_aux:\n  fixes c :: real and f :: \"complex fds\"\n  assumes \"nonneg_dirichlet_series f\"\n  assumes abscissa: \"c \\<ge> abs_conv_abscissa f\"\n  assumes g: \"\\<And>s. s \\<in> A \\<Longrightarrow> Re s > c \\<Longrightarrow> g s = eval_fds f s\"\n  assumes \"g holomorphic_on A\" \"open A\" \"c \\<in> A\"\n  shows   \"\\<exists>x. x < c \\<and> fds_abs_converges f (of_real x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "interpret nonneg_dirichlet_series f"], ["proof (prove)\ngoal (1 subgoal):\n 1. nonneg_dirichlet_series f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "define a where \"a = 1 + c\""], ["proof (state)\nthis:\n  a = 1 + c\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "define g' where \"g' = (\\<lambda>s. if s \\<in> {s. Re s > c} then eval_fds f s else g s)\"\n\n  \\<comment> \\<open>We can find some $\\varepsilon > 0$ such that the Dirichlet series can be continued\n      analytically in a ball of radius $1 + \\varepsilon$ around $a$.\\<close>"], ["proof (state)\nthis:\n  g' = (\\<lambda>s. if s \\<in> {s. c < Re s} then eval_fds f s else g s)\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "from \\<open>open A\\<close> \\<open>c \\<in> A\\<close>"], ["proof (chain)\npicking this:\n  open A\n  complex_of_real c \\<in> A", "obtain \\<delta> where \\<delta>: \"\\<delta> > 0\" \"ball c \\<delta> \\<subseteq> A\""], ["proof (prove)\nusing this:\n  open A\n  complex_of_real c \\<in> A\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        \\<lbrakk>0 < \\<delta>;\n         ball (complex_of_real c) \\<delta> \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: open_contains_ball)"], ["proof (state)\nthis:\n  0 < \\<delta>\n  ball (complex_of_real c) \\<delta> \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "define \\<epsilon> where \"\\<epsilon> = sqrt (1 + \\<delta>^2) - 1\""], ["proof (state)\nthis:\n  \\<epsilon> = sqrt (1 + \\<delta>\\<^sup>2) - 1\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "from \\<delta>"], ["proof (chain)\npicking this:\n  0 < \\<delta>\n  ball (complex_of_real c) \\<delta> \\<subseteq> A", "have \\<epsilon>: \"\\<epsilon> > 0\""], ["proof (prove)\nusing this:\n  0 < \\<delta>\n  ball (complex_of_real c) \\<delta> \\<subseteq> A\n\ngoal (1 subgoal):\n 1. 0 < \\<epsilon>", "by (simp add: \\<epsilon>_def)"], ["proof (state)\nthis:\n  0 < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have ball_a_subset: \"ball a (1 + \\<epsilon>) \\<subseteq> {s. Re s > c} \\<union> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ball (complex_of_real a) (1 + \\<epsilon>)\n    \\<subseteq> {s. c < Re s} \\<union> A", "proof (intro subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ball (complex_of_real a) (1 + \\<epsilon>) \\<Longrightarrow>\n       x \\<in> {s. c < Re s} \\<union> A", "fix s :: complex"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ball (complex_of_real a) (1 + \\<epsilon>) \\<Longrightarrow>\n       x \\<in> {s. c < Re s} \\<union> A", "assume s: \"s \\<in> ball a (1 + \\<epsilon>)\""], ["proof (state)\nthis:\n  s \\<in> ball (complex_of_real a) (1 + \\<epsilon>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ball (complex_of_real a) (1 + \\<epsilon>) \\<Longrightarrow>\n       x \\<in> {s. c < Re s} \\<union> A", "define x y where \"x = Re s\" and \"y = Im s\""], ["proof (state)\nthis:\n  x = Re s\n  y = Im s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ball (complex_of_real a) (1 + \\<epsilon>) \\<Longrightarrow>\n       x \\<in> {s. c < Re s} \\<union> A", "have [simp]: \"s = x + \\<i> * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = complex_of_real x + \\<i> * complex_of_real y", "by (simp add: complex_eq_iff x_def y_def)"], ["proof (state)\nthis:\n  s = complex_of_real x + \\<i> * complex_of_real y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ball (complex_of_real a) (1 + \\<epsilon>) \\<Longrightarrow>\n       x \\<in> {s. c < Re s} \\<union> A", "show \"s \\<in> {s. Re s > c} \\<union> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {s. c < Re s} \\<union> A", "proof (cases \"Re s \\<le> c\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A\n 2. \\<not> Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A", "case True"], ["proof (state)\nthis:\n  Re s \\<le> c\n\ngoal (2 subgoals):\n 1. Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A\n 2. \\<not> Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A", "hence \"(c - x)\\<^sup>2 + y\\<^sup>2 \\<le> (1 + c - x)\\<^sup>2 + y\\<^sup>2 - 1\""], ["proof (prove)\nusing this:\n  Re s \\<le> c\n\ngoal (1 subgoal):\n 1. (c - x)\\<^sup>2 + y\\<^sup>2 \\<le> (1 + c - x)\\<^sup>2 + y\\<^sup>2 - 1", "by (simp add: power2_eq_square algebra_simps)"], ["proof (state)\nthis:\n  (c - x)\\<^sup>2 + y\\<^sup>2 \\<le> (1 + c - x)\\<^sup>2 + y\\<^sup>2 - 1\n\ngoal (2 subgoals):\n 1. Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A\n 2. \\<not> Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A", "also"], ["proof (state)\nthis:\n  (c - x)\\<^sup>2 + y\\<^sup>2 \\<le> (1 + c - x)\\<^sup>2 + y\\<^sup>2 - 1\n\ngoal (2 subgoals):\n 1. Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A\n 2. \\<not> Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A", "from s"], ["proof (chain)\npicking this:\n  s \\<in> ball (complex_of_real a) (1 + \\<epsilon>)", "have \"(1 + c - x)\\<^sup>2 + y\\<^sup>2 - 1 < \\<delta>\\<^sup>2\""], ["proof (prove)\nusing this:\n  s \\<in> ball (complex_of_real a) (1 + \\<epsilon>)\n\ngoal (1 subgoal):\n 1. (1 + c - x)\\<^sup>2 + y\\<^sup>2 - 1 < \\<delta>\\<^sup>2", "by (auto simp: dist_norm cmod_def a_def \\<epsilon>_def)"], ["proof (state)\nthis:\n  (1 + c - x)\\<^sup>2 + y\\<^sup>2 - 1 < \\<delta>\\<^sup>2\n\ngoal (2 subgoals):\n 1. Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A\n 2. \\<not> Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A", "finally"], ["proof (chain)\npicking this:\n  (c - x)\\<^sup>2 + y\\<^sup>2 < \\<delta>\\<^sup>2", "have \"sqrt ((c - x)\\<^sup>2 + y\\<^sup>2) < \\<delta>\""], ["proof (prove)\nusing this:\n  (c - x)\\<^sup>2 + y\\<^sup>2 < \\<delta>\\<^sup>2\n\ngoal (1 subgoal):\n 1. sqrt ((c - x)\\<^sup>2 + y\\<^sup>2) < \\<delta>", "using \\<delta>"], ["proof (prove)\nusing this:\n  (c - x)\\<^sup>2 + y\\<^sup>2 < \\<delta>\\<^sup>2\n  0 < \\<delta>\n  ball (complex_of_real c) \\<delta> \\<subseteq> A\n\ngoal (1 subgoal):\n 1. sqrt ((c - x)\\<^sup>2 + y\\<^sup>2) < \\<delta>", "by (intro real_less_lsqrt) auto"], ["proof (state)\nthis:\n  sqrt ((c - x)\\<^sup>2 + y\\<^sup>2) < \\<delta>\n\ngoal (2 subgoals):\n 1. Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A\n 2. \\<not> Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A", "hence \"s \\<in> ball c \\<delta>\""], ["proof (prove)\nusing this:\n  sqrt ((c - x)\\<^sup>2 + y\\<^sup>2) < \\<delta>\n\ngoal (1 subgoal):\n 1. s \\<in> ball (complex_of_real c) \\<delta>", "by (auto simp: dist_norm cmod_def)"], ["proof (state)\nthis:\n  s \\<in> ball (complex_of_real c) \\<delta>\n\ngoal (2 subgoals):\n 1. Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A\n 2. \\<not> Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A", "also"], ["proof (state)\nthis:\n  s \\<in> ball (complex_of_real c) \\<delta>\n\ngoal (2 subgoals):\n 1. Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A\n 2. \\<not> Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A", "have \"\\<dots> \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ball (complex_of_real c) \\<delta> \\<subseteq> A", "by fact"], ["proof (state)\nthis:\n  ball (complex_of_real c) \\<delta> \\<subseteq> A\n\ngoal (2 subgoals):\n 1. Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A\n 2. \\<not> Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A", "finally"], ["proof (chain)\npicking this:\n  s \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<in> A\n\ngoal (1 subgoal):\n 1. s \\<in> {s. c < Re s} \\<union> A", ".."], ["proof (state)\nthis:\n  s \\<in> {s. c < Re s} \\<union> A\n\ngoal (1 subgoal):\n 1. \\<not> Re s \\<le> c \\<Longrightarrow> s \\<in> {s. c < Re s} \\<union> A", "qed auto"], ["proof (state)\nthis:\n  s \\<in> {s. c < Re s} \\<union> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ball (complex_of_real a) (1 + \\<epsilon>)\n  \\<subseteq> {s. c < Re s} \\<union> A\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have holo: \"g' holomorphic_on ball a (1 + \\<epsilon>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' holomorphic_on ball (complex_of_real a) (1 + \\<epsilon>)", "unfolding g'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s.\n        if s \\<in> {s. c < Re s} then eval_fds f s else g s) holomorphic_on\n    ball (complex_of_real a) (1 + \\<epsilon>)", "proof (intro holomorphic_on_subset[OF _ ball_a_subset] holomorphic_on_If_Un)"], ["proof (state)\ngoal (5 subgoals):\n 1. eval_fds f holomorphic_on {s. c < Re s}\n 2. g holomorphic_on A\n 3. open {s. c < Re s}\n 4. open A\n 5. \\<And>s.\n       \\<lbrakk>s \\<in> {s. c < Re s}; s \\<in> A\\<rbrakk>\n       \\<Longrightarrow> eval_fds f s = g s", "have \"conv_abscissa f \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> abs_conv_abscissa f", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (5 subgoals):\n 1. eval_fds f holomorphic_on {s. c < Re s}\n 2. g holomorphic_on A\n 3. open {s. c < Re s}\n 4. open A\n 5. \\<And>s.\n       \\<lbrakk>s \\<in> {s. c < Re s}; s \\<in> A\\<rbrakk>\n       \\<Longrightarrow> eval_fds f s = g s", "also"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (5 subgoals):\n 1. eval_fds f holomorphic_on {s. c < Re s}\n 2. g holomorphic_on A\n 3. open {s. c < Re s}\n 4. open A\n 5. \\<And>s.\n       \\<lbrakk>s \\<in> {s. c < Re s}; s \\<in> A\\<rbrakk>\n       \\<Longrightarrow> eval_fds f s = g s", "have \"\\<dots> \\<le> ereal c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> ereal c", "by fact"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> ereal c\n\ngoal (5 subgoals):\n 1. eval_fds f holomorphic_on {s. c < Re s}\n 2. g holomorphic_on A\n 3. open {s. c < Re s}\n 4. open A\n 5. \\<And>s.\n       \\<lbrakk>s \\<in> {s. c < Re s}; s \\<in> A\\<rbrakk>\n       \\<Longrightarrow> eval_fds f s = g s", "finally"], ["proof (chain)\npicking this:\n  conv_abscissa f \\<le> ereal c", "have*:  \"conv_abscissa f \\<le> ereal c\""], ["proof (prove)\nusing this:\n  conv_abscissa f \\<le> ereal c\n\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> ereal c", "."], ["proof (state)\nthis:\n  conv_abscissa f \\<le> ereal c\n\ngoal (5 subgoals):\n 1. eval_fds f holomorphic_on {s. c < Re s}\n 2. g holomorphic_on A\n 3. open {s. c < Re s}\n 4. open A\n 5. \\<And>s.\n       \\<lbrakk>s \\<in> {s. c < Re s}; s \\<in> A\\<rbrakk>\n       \\<Longrightarrow> eval_fds f s = g s", "show \"eval_fds f holomorphic_on {s. c < Re s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds f holomorphic_on {s. c < Re s}", "by (intro holomorphic_intros) (auto intro: le_less_trans[OF *])"], ["proof (state)\nthis:\n  eval_fds f holomorphic_on {s. c < Re s}\n\ngoal (4 subgoals):\n 1. g holomorphic_on A\n 2. open {s. c < Re s}\n 3. open A\n 4. \\<And>s.\n       \\<lbrakk>s \\<in> {s. c < Re s}; s \\<in> A\\<rbrakk>\n       \\<Longrightarrow> eval_fds f s = g s", "qed (insert assms, auto intro!: holomorphic_intros open_halfspace_Re_gt)"], ["proof (state)\nthis:\n  g' holomorphic_on ball (complex_of_real a) (1 + \\<epsilon>)\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "define f' where \"f' = fds_norm f\""], ["proof (state)\nthis:\n  f' = fds_norm f\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have f_f': \"f = fds_of_real f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = fds_of_real f'", "by (simp add: f'_def fds_of_real_norm)"], ["proof (state)\nthis:\n  f = fds_of_real f'\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have f'_nonneg: \"fds_nth f' n \\<ge> 0\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> fds_nth f' n", "using nonneg_coeffs[of n]"], ["proof (prove)\nusing this:\n  fds_nth f n \\<in> \\<real>\\<^sub>\\<ge>\\<^sub>0\n\ngoal (1 subgoal):\n 1. 0 \\<le> fds_nth f' n", "by (auto elim!: nonneg_Reals_cases simp: f'_def)"], ["proof (state)\nthis:\n  0 \\<le> fds_nth f' ?n\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have deriv: \"(\\<lambda>n. (deriv ^^ n) g' a) = (\\<lambda>n. eval_fds ((fds_deriv ^^ n) f) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. (deriv ^^ n) g' (complex_of_real a)) =\n    (\\<lambda>n. eval_fds ((fds_deriv ^^ n) f) (complex_of_real a))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (deriv ^^ n) g' (complex_of_real a) =\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (deriv ^^ n) g' (complex_of_real a) =\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)", "have ev: \"eventually (\\<lambda>s. s \\<in> {s. Re s > c}) (nhds (complex_of_real a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F s in nhds (complex_of_real a). s \\<in> {s. c < Re s}", "by (intro eventually_nhds_in_open open_halfspace_Re_gt) (auto simp: a_def)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F s in nhds (complex_of_real a). s \\<in> {s. c < Re s}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (deriv ^^ n) g' (complex_of_real a) =\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)", "have \"(deriv ^^ n) g' a = (deriv ^^ n) (eval_fds f) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (deriv ^^ n) g' (complex_of_real a) =\n    (deriv ^^ n) (eval_fds f) (complex_of_real a)", "by (intro higher_deriv_cong_ev refl eventually_mono[OF ev]) (auto simp: g'_def)"], ["proof (state)\nthis:\n  (deriv ^^ n) g' (complex_of_real a) =\n  (deriv ^^ n) (eval_fds f) (complex_of_real a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (deriv ^^ n) g' (complex_of_real a) =\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)", "also"], ["proof (state)\nthis:\n  (deriv ^^ n) g' (complex_of_real a) =\n  (deriv ^^ n) (eval_fds f) (complex_of_real a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (deriv ^^ n) g' (complex_of_real a) =\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)", "have \"\\<dots> = eval_fds ((fds_deriv ^^ n) f) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (deriv ^^ n) (eval_fds f) (complex_of_real a) =\n    eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)", "proof (intro eval_fds_higher_deriv [symmetric])"], ["proof (state)\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal (complex_of_real a \\<bullet> 1)", "have \"conv_abscissa f \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> abs_conv_abscissa f", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal (complex_of_real a \\<bullet> 1)", "also"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal (complex_of_real a \\<bullet> 1)", "have \"\\<dots> \\<le> ereal c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> ereal c", "by (rule assms)"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> ereal c\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal (complex_of_real a \\<bullet> 1)", "also"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> ereal c\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal (complex_of_real a \\<bullet> 1)", "have \"\\<dots> < a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ereal c < ereal a", "by (simp add: a_def)"], ["proof (state)\nthis:\n  ereal c < ereal a\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal (complex_of_real a \\<bullet> 1)", "finally"], ["proof (chain)\npicking this:\n  conv_abscissa f < ereal a", "show \"conv_abscissa f < ereal (complex_of_real a \\<bullet> 1)\""], ["proof (prove)\nusing this:\n  conv_abscissa f < ereal a\n\ngoal (1 subgoal):\n 1. conv_abscissa f < ereal (complex_of_real a \\<bullet> 1)", "by simp"], ["proof (state)\nthis:\n  conv_abscissa f < ereal (complex_of_real a \\<bullet> 1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (deriv ^^ n) (eval_fds f) (complex_of_real a) =\n  eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (deriv ^^ n) g' (complex_of_real a) =\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)", "finally"], ["proof (chain)\npicking this:\n  (deriv ^^ n) g' (complex_of_real a) =\n  eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)", "show \"(deriv ^^ n) g' a = eval_fds ((fds_deriv ^^ n) f) a\""], ["proof (prove)\nusing this:\n  (deriv ^^ n) g' (complex_of_real a) =\n  eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)\n\ngoal (1 subgoal):\n 1. (deriv ^^ n) g' (complex_of_real a) =\n    eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)", "."], ["proof (state)\nthis:\n  (deriv ^^ n) g' (complex_of_real a) =\n  eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>n. (deriv ^^ n) g' (complex_of_real a)) =\n  (\\<lambda>n. eval_fds ((fds_deriv ^^ n) f) (complex_of_real a))\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have nth_deriv_conv: \"fds_abs_converges ((fds_deriv ^^ n) f) (of_real a)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges ((fds_deriv ^^ n) f) (complex_of_real a)", "by (intro fds_abs_converges)\n       (auto simp: abs_conv_abscissa_higher_deriv a_def intro!: le_less_trans[OF abscissa])"], ["proof (state)\nthis:\n  fds_abs_converges ((fds_deriv ^^ ?n) f) (complex_of_real a)\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have nth_deriv_eq: \"(fds_deriv ^^ n) f = fds (\\<lambda>k. (-1) ^ n * fds_nth f k * ln (real k) ^ n)\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fds_deriv ^^ n) f =\n    fds (\\<lambda>k.\n            (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (fds_deriv ^^ n) f =\n    fds (\\<lambda>k.\n            (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n))", "have \"fds_nth ((fds_deriv ^^ n) f) k = (-1) ^ n * fds_nth f k * ln (real k) ^ n\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth ((fds_deriv ^^ n) f) k =\n    (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n)", "by (induction n) (simp_all add: fds_deriv_def fds_eq_iff fds_nth_fds' scaleR_conv_of_real)"], ["proof (state)\nthis:\n  fds_nth ((fds_deriv ^^ n) f) ?k =\n  (- 1) ^ n * fds_nth f ?k * complex_of_real (ln (real ?k) ^ n)\n\ngoal (1 subgoal):\n 1. (fds_deriv ^^ n) f =\n    fds (\\<lambda>k.\n            (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n))", "thus ?thesis"], ["proof (prove)\nusing this:\n  fds_nth ((fds_deriv ^^ n) f) ?k =\n  (- 1) ^ n * fds_nth f ?k * complex_of_real (ln (real ?k) ^ n)\n\ngoal (1 subgoal):\n 1. (fds_deriv ^^ n) f =\n    fds (\\<lambda>k.\n            (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n))", "by (intro fds_eqI) simp_all"], ["proof (state)\nthis:\n  (fds_deriv ^^ n) f =\n  fds (\\<lambda>k.\n          (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (fds_deriv ^^ ?n) f =\n  fds (\\<lambda>k.\n          (- 1) ^ ?n * fds_nth f k * complex_of_real (ln (real k) ^ ?n))\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have deriv': \"(\\<lambda>n. eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)) =\n      (\\<lambda>n. (- 1) ^ n * complex_of_real (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)) =\n    (\\<lambda>n.\n        (- 1) ^ n *\n        complex_of_real\n         (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n       (- 1) ^ n *\n       complex_of_real\n        (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n       (- 1) ^ n *\n       complex_of_real\n        (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)", "have \"eval_fds ((fds_deriv ^^ n) f) (of_real a) = \n                 (\\<Sum>\\<^sub>ak. fds_nth ((fds_deriv ^^ n) f) k / of_nat k powr complex_of_real a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n    (\\<Sum>\\<^sub>ak.\n       fds_nth ((fds_deriv ^^ n) f) k / of_nat k powr complex_of_real a)", "using nth_deriv_conv"], ["proof (prove)\nusing this:\n  fds_abs_converges ((fds_deriv ^^ ?n) f) (complex_of_real a)\n\ngoal (1 subgoal):\n 1. eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n    (\\<Sum>\\<^sub>ak.\n       fds_nth ((fds_deriv ^^ n) f) k / of_nat k powr complex_of_real a)", "by (subst eval_fds_altdef) auto"], ["proof (state)\nthis:\n  eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n  (\\<Sum>\\<^sub>ak.\n     fds_nth ((fds_deriv ^^ n) f) k / of_nat k powr complex_of_real a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n       (- 1) ^ n *\n       complex_of_real\n        (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)", "hence \"eval_fds ((fds_deriv ^^ n) f) (of_real a) = \n                 (\\<Sum>\\<^sub>ak. (- 1) ^ n *\\<^sub>R (fds_nth f k * ln (real k) ^ n / k powr a))\""], ["proof (prove)\nusing this:\n  eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n  (\\<Sum>\\<^sub>ak.\n     fds_nth ((fds_deriv ^^ n) f) k / of_nat k powr complex_of_real a)\n\ngoal (1 subgoal):\n 1. eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n    (\\<Sum>\\<^sub>ak.\n       (- 1) ^ n *\\<^sub>R\n       (fds_nth f k * complex_of_real (ln (real k) ^ n) /\n        complex_of_real (real k powr a)))", "by (simp add: nth_deriv_eq fds_nth_fds' powr_Reals_eq scaleR_conv_of_real algebra_simps)"], ["proof (state)\nthis:\n  eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n  (\\<Sum>\\<^sub>ak.\n     (- 1) ^ n *\\<^sub>R\n     (fds_nth f k * complex_of_real (ln (real k) ^ n) /\n      complex_of_real (real k powr a)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n       (- 1) ^ n *\n       complex_of_real\n        (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)", "also"], ["proof (state)\nthis:\n  eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n  (\\<Sum>\\<^sub>ak.\n     (- 1) ^ n *\\<^sub>R\n     (fds_nth f k * complex_of_real (ln (real k) ^ n) /\n      complex_of_real (real k powr a)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n       (- 1) ^ n *\n       complex_of_real\n        (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)", "have \"\\<dots> = (- 1) ^ n * (\\<Sum>\\<^sub>ak. of_real (fds_nth f' k * ln (real k) ^ n / k powr a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak.\n       (- 1) ^ n *\\<^sub>R\n       (fds_nth f k * complex_of_real (ln (real k) ^ n) /\n        complex_of_real (real k powr a))) =\n    (- 1) ^ n *\n    (\\<Sum>\\<^sub>ak.\n       complex_of_real (fds_nth f' k * ln (real k) ^ n / real k powr a))", "by (subst infsetsum_scaleR_right) (simp_all add: scaleR_conv_of_real f_f')"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak.\n     (- 1) ^ n *\\<^sub>R\n     (fds_nth f k * complex_of_real (ln (real k) ^ n) /\n      complex_of_real (real k powr a))) =\n  (- 1) ^ n *\n  (\\<Sum>\\<^sub>ak.\n     complex_of_real (fds_nth f' k * ln (real k) ^ n / real k powr a))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n       (- 1) ^ n *\n       complex_of_real\n        (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak.\n     (- 1) ^ n *\\<^sub>R\n     (fds_nth f k * complex_of_real (ln (real k) ^ n) /\n      complex_of_real (real k powr a))) =\n  (- 1) ^ n *\n  (\\<Sum>\\<^sub>ak.\n     complex_of_real (fds_nth f' k * ln (real k) ^ n / real k powr a))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n       (- 1) ^ n *\n       complex_of_real\n        (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)", "have \"\\<dots> = (- 1) ^ n * of_real (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / k powr a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- 1) ^ n *\n    (\\<Sum>\\<^sub>ak.\n       complex_of_real (fds_nth f' k * ln (real k) ^ n / real k powr a)) =\n    (- 1) ^ n *\n    complex_of_real\n     (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)", "by (subst infsetsum_of_real) (rule refl)"], ["proof (state)\nthis:\n  (- 1) ^ n *\n  (\\<Sum>\\<^sub>ak.\n     complex_of_real (fds_nth f' k * ln (real k) ^ n / real k powr a)) =\n  (- 1) ^ n *\n  complex_of_real\n   (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n       (- 1) ^ n *\n       complex_of_real\n        (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)", "finally"], ["proof (chain)\npicking this:\n  eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n  (- 1) ^ n *\n  complex_of_real\n   (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)", "show \"eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n      (- 1) ^ n * complex_of_real (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)\""], ["proof (prove)\nusing this:\n  eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n  (- 1) ^ n *\n  complex_of_real\n   (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)\n\ngoal (1 subgoal):\n 1. eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n    (- 1) ^ n *\n    complex_of_real\n     (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)", "."], ["proof (state)\nthis:\n  eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) =\n  (- 1) ^ n *\n  complex_of_real\n   (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>n. eval_fds ((fds_deriv ^^ n) f) (complex_of_real a)) =\n  (\\<lambda>n.\n      (- 1) ^ n *\n      complex_of_real\n       (\\<Sum>\\<^sub>ak. fds_nth f' k * ln (real k) ^ n / real k powr a))\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "define s :: complex where \"s = c - \\<epsilon> / 2\""], ["proof (state)\nthis:\n  s = complex_of_real (c - \\<epsilon> / 2)\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have s: \"Re s < c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Re s < c", "using assms \\<delta>"], ["proof (prove)\nusing this:\n  nonneg_dirichlet_series f\n  abs_conv_abscissa f \\<le> ereal c\n  \\<lbrakk>?s \\<in> A; c < Re ?s\\<rbrakk>\n  \\<Longrightarrow> g ?s = eval_fds f ?s\n  g holomorphic_on A\n  open A\n  complex_of_real c \\<in> A\n  0 < \\<delta>\n  ball (complex_of_real c) \\<delta> \\<subseteq> A\n\ngoal (1 subgoal):\n 1. Re s < c", "by (simp_all add: s_def \\<epsilon>_def field_simps)"], ["proof (state)\nthis:\n  Re s < c\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have \"s \\<in> ball a (1 + \\<epsilon>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> ball (complex_of_real a) (1 + \\<epsilon>)", "using s"], ["proof (prove)\nusing this:\n  Re s < c\n\ngoal (1 subgoal):\n 1. s \\<in> ball (complex_of_real a) (1 + \\<epsilon>)", "by (simp add: a_def dist_norm cmod_def s_def)"], ["proof (state)\nthis:\n  s \\<in> ball (complex_of_real a) (1 + \\<epsilon>)\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "from holomorphic_power_series[OF holo this]"], ["proof (chain)\npicking this:\n  (\\<lambda>n.\n      (deriv ^^ n) g' (complex_of_real a) / fact n *\n      (s - complex_of_real a) ^ n) sums\n  g' s", "have sums: \"(\\<lambda>n. (deriv ^^ n) g' a / fact n * (s - a) ^ n) sums g' s\""], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      (deriv ^^ n) g' (complex_of_real a) / fact n *\n      (s - complex_of_real a) ^ n) sums\n  g' s\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (deriv ^^ n) g' (complex_of_real a) / fact n *\n        (s - complex_of_real a) ^ n) sums\n    g' s", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      (deriv ^^ n) g' (complex_of_real a) / fact n *\n      (s - complex_of_real a) ^ n) sums\n  g' s\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "also"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      (deriv ^^ n) g' (complex_of_real a) / fact n *\n      (s - complex_of_real a) ^ n) sums\n  g' s\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "note deriv"], ["proof (state)\nthis:\n  (\\<lambda>n. (deriv ^^ n) g' (complex_of_real a)) =\n  (\\<lambda>n. eval_fds ((fds_deriv ^^ n) f) (complex_of_real a))\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "also"], ["proof (state)\nthis:\n  (\\<lambda>n. (deriv ^^ n) g' (complex_of_real a)) =\n  (\\<lambda>n. eval_fds ((fds_deriv ^^ n) f) (complex_of_real a))\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have \"s - a = -of_real (1 + \\<epsilon> / 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s - complex_of_real a = - complex_of_real (1 + \\<epsilon> / 2)", "by (simp add: s_def a_def)"], ["proof (state)\nthis:\n  s - complex_of_real a = - complex_of_real (1 + \\<epsilon> / 2)\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "also"], ["proof (state)\nthis:\n  s - complex_of_real a = - complex_of_real (1 + \\<epsilon> / 2)\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have \"(\\<lambda>n. \\<dots> ^ n) = (\\<lambda>n. of_real ((-1) ^ n * (1 + \\<epsilon> / 2) ^ n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (^) (- complex_of_real (1 + \\<epsilon> / 2)) =\n    (\\<lambda>n. complex_of_real ((- 1) ^ n * (1 + \\<epsilon> / 2) ^ n))", "by (intro ext) (subst power_minus, auto)"], ["proof (state)\nthis:\n  (^) (- complex_of_real (1 + \\<epsilon> / 2)) =\n  (\\<lambda>n. complex_of_real ((- 1) ^ n * (1 + \\<epsilon> / 2) ^ n))\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "also"], ["proof (state)\nthis:\n  (^) (- complex_of_real (1 + \\<epsilon> / 2)) =\n  (\\<lambda>n. complex_of_real ((- 1) ^ n * (1 + \\<epsilon> / 2) ^ n))\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have \"(\\<lambda>n. eval_fds ((fds_deriv ^^ n) f) a / fact n * \\<dots> n) =\n               (\\<lambda>n. of_real ((-1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n * (1+\\<epsilon>/2) ^ n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) / fact n *\n        complex_of_real ((- 1) ^ n * (1 + \\<epsilon> / 2) ^ n)) =\n    (\\<lambda>n.\n        complex_of_real\n         ((- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n          (1 + \\<epsilon> / 2) ^ n))", "using nth_deriv_conv"], ["proof (prove)\nusing this:\n  fds_abs_converges ((fds_deriv ^^ ?n) f) (complex_of_real a)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) / fact n *\n        complex_of_real ((- 1) ^ n * (1 + \\<epsilon> / 2) ^ n)) =\n    (\\<lambda>n.\n        complex_of_real\n         ((- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n          (1 + \\<epsilon> / 2) ^ n))", "by (simp add: f_f' fds_abs_converges_imp_converges mult_ac)"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      eval_fds ((fds_deriv ^^ n) f) (complex_of_real a) / fact n *\n      complex_of_real ((- 1) ^ n * (1 + \\<epsilon> / 2) ^ n)) =\n  (\\<lambda>n.\n      complex_of_real\n       ((- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n        (1 + \\<epsilon> / 2) ^ n))\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>n.\n      complex_of_real\n       ((- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n        (1 + \\<epsilon> / 2) ^ n)) sums\n  g' s", "have \"summable \\<dots>\""], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      complex_of_real\n       ((- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n        (1 + \\<epsilon> / 2) ^ n)) sums\n  g' s\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         complex_of_real\n          ((- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n           (1 + \\<epsilon> / 2) ^ n))", "by (simp add: sums_iff)"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n.\n       complex_of_real\n        ((- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n         (1 + \\<epsilon> / 2) ^ n))\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "hence summable: \"summable (\\<lambda>n. (-1)^n * eval_fds ((fds_deriv ^^ n) f') a / fact n * (1+\\<epsilon>/2)^n)\""], ["proof (prove)\nusing this:\n  summable\n   (\\<lambda>n.\n       complex_of_real\n        ((- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n         (1 + \\<epsilon> / 2) ^ n))\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n         (1 + \\<epsilon> / 2) ^ n)", "by (subst (asm) summable_of_real_iff)"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n)\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have \"(\\<lambda>(n,k). (-1)^n * fds_nth f k * ln (real k) ^ n / (real k powr a) * ((s-a) ^ n / fact n))\n          abs_summable_on (UNIV \\<times> UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(n, k).\n        (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n        complex_of_real (real k powr a) *\n        ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n    UNIV \\<times> UNIV", "proof (subst abs_summable_on_Sigma_iff, safe, goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<lambda>y.\n           (- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n           complex_of_real (real y powr a) *\n           ((s - complex_of_real a) ^ x / fact x)) abs_summable_on\n       UNIV\n 4. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "case (3 n)"], ["proof (state)\nthis:\n  n \\<in> UNIV\n\ngoal (4 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<lambda>y.\n           (- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n           complex_of_real (real y powr a) *\n           ((s - complex_of_real a) ^ x / fact x)) abs_summable_on\n       UNIV\n 4. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "from nth_deriv_conv[of n]"], ["proof (chain)\npicking this:\n  fds_abs_converges ((fds_deriv ^^ n) f) (complex_of_real a)", "show ?case"], ["proof (prove)\nusing this:\n  fds_abs_converges ((fds_deriv ^^ n) f) (complex_of_real a)\n\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        (- 1) ^ n * fds_nth f y * complex_of_real (ln (real y) ^ n) /\n        complex_of_real (real y powr a) *\n        ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n    UNIV", "unfolding fds_abs_converges_altdef'"], ["proof (prove)\nusing this:\n  (\\<lambda>na.\n      fds_nth ((fds_deriv ^^ n) f) na /\n      nat_power na (complex_of_real a)) abs_summable_on\n  UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>y.\n        (- 1) ^ n * fds_nth f y * complex_of_real (ln (real y) ^ n) /\n        complex_of_real (real y powr a) *\n        ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n    UNIV", "by (intro abs_summable_on_cmult_left) (simp add: nth_deriv_eq fds_nth_fds' powr_Reals_eq)"], ["proof (state)\nthis:\n  (\\<lambda>y.\n      (- 1) ^ n * fds_nth f y * complex_of_real (ln (real y) ^ n) /\n      complex_of_real (real y powr a) *\n      ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n  UNIV\n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "case 4"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "have nth_deriv_f_f': \"(fds_deriv ^^ n) f = fds_of_real ((fds_deriv ^^ n) f')\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fds_deriv ^^ n) f = fds_of_real ((fds_deriv ^^ n) f')", "by (induction n) (auto simp: f'_def fds_of_real_norm)"], ["proof (state)\nthis:\n  (fds_deriv ^^ ?n) f = fds_of_real ((fds_deriv ^^ ?n) f')\n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "have norm_nth_deriv_f: \"norm (fds_nth ((fds_deriv ^^ n) f) k) = \n                                 (-1) ^ n * of_real (fds_nth ((fds_deriv ^^ n) f') k)\" for n k"], ["proof (prove)\ngoal (1 subgoal):\n 1. cmod (fds_nth ((fds_deriv ^^ n) f) k) =\n    (- 1) ^ n * of_real (fds_nth ((fds_deriv ^^ n) f') k)", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. cmod (fds_nth ((fds_deriv ^^ 0) f) k) =\n    (- 1) ^ 0 * of_real (fds_nth ((fds_deriv ^^ 0) f') k)\n 2. \\<And>n.\n       cmod (fds_nth ((fds_deriv ^^ n) f) k) =\n       (- 1) ^ n *\n       of_real (fds_nth ((fds_deriv ^^ n) f') k) \\<Longrightarrow>\n       cmod (fds_nth ((fds_deriv ^^ Suc n) f) k) =\n       (- 1) ^ Suc n * of_real (fds_nth ((fds_deriv ^^ Suc n) f') k)", "case (Suc n)"], ["proof (state)\nthis:\n  cmod (fds_nth ((fds_deriv ^^ n) f) k) =\n  (- 1) ^ n * of_real (fds_nth ((fds_deriv ^^ n) f') k)\n\ngoal (2 subgoals):\n 1. cmod (fds_nth ((fds_deriv ^^ 0) f) k) =\n    (- 1) ^ 0 * of_real (fds_nth ((fds_deriv ^^ 0) f') k)\n 2. \\<And>n.\n       cmod (fds_nth ((fds_deriv ^^ n) f) k) =\n       (- 1) ^ n *\n       of_real (fds_nth ((fds_deriv ^^ n) f') k) \\<Longrightarrow>\n       cmod (fds_nth ((fds_deriv ^^ Suc n) f) k) =\n       (- 1) ^ Suc n * of_real (fds_nth ((fds_deriv ^^ Suc n) f') k)", "thus ?case"], ["proof (prove)\nusing this:\n  cmod (fds_nth ((fds_deriv ^^ n) f) k) =\n  (- 1) ^ n * of_real (fds_nth ((fds_deriv ^^ n) f') k)\n\ngoal (1 subgoal):\n 1. cmod (fds_nth ((fds_deriv ^^ Suc n) f) k) =\n    (- 1) ^ Suc n * of_real (fds_nth ((fds_deriv ^^ Suc n) f') k)", "by (cases k) (auto simp: f_f' fds_nth_deriv scaleR_conv_of_real norm_mult)"], ["proof (state)\nthis:\n  cmod (fds_nth ((fds_deriv ^^ Suc n) f) k) =\n  (- 1) ^ Suc n * of_real (fds_nth ((fds_deriv ^^ Suc n) f') k)\n\ngoal (1 subgoal):\n 1. cmod (fds_nth ((fds_deriv ^^ 0) f) k) =\n    (- 1) ^ 0 * of_real (fds_nth ((fds_deriv ^^ 0) f') k)", "qed (auto simp: f'_nonneg f_f')"], ["proof (state)\nthis:\n  cmod (fds_nth ((fds_deriv ^^ ?n) f) ?k) =\n  (- 1) ^ ?n * of_real (fds_nth ((fds_deriv ^^ ?n) f') ?k)\n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "note summable"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n)\n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "also"], ["proof (state)\nthis:\n  summable\n   (\\<lambda>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n)\n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "have \"(\\<lambda>n. (-1)^n * eval_fds ((fds_deriv ^^ n) f') a / fact n * (1+\\<epsilon>/2)^n) =\n               (\\<lambda>n. \\<Sum>\\<^sub>ak. norm ((- 1) ^ n * fds_nth f k * ln (real k) ^ n /\n                    (real k powr a) * ((s - a) ^ n / fact n)))\" (is \"_ = ?h\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n        (1 + \\<epsilon> / 2) ^ n) =\n    (\\<lambda>n.\n        \\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "proof (rule ext, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "case (1 n)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "have \"(\\<Sum>\\<^sub>ak. norm ((- 1) ^ n * fds_nth f k * ln (real k) ^ n /\n                    (real k powr a) * ((s - a) ^ n / fact n))) =\n            (norm ((s - a) ^ n / fact n) * (-1) ^ n) *\\<^sub>R \n              (\\<Sum>\\<^sub>ak. (-1) ^ n * norm (fds_nth ((fds_deriv ^^ n) f) k / real k powr a))\" (is \"_ = _ *\\<^sub>R ?S\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak.\n       cmod\n        ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n         complex_of_real (real k powr a) *\n         ((s - complex_of_real a) ^ n / fact n))) =\n    (cmod ((s - complex_of_real a) ^ n / fact n) * (- 1) ^ n) *\\<^sub>R\n    (\\<Sum>\\<^sub>ak.\n       (- 1) ^ n *\n       cmod\n        (fds_nth ((fds_deriv ^^ n) f) k / complex_of_real (real k powr a)))", "by (subst infsetsum_scaleR_right [symmetric])\n           (auto simp: norm_mult norm_divide norm_power mult_ac nth_deriv_eq fds_nth_fds')"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak.\n     cmod\n      ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n       complex_of_real (real k powr a) *\n       ((s - complex_of_real a) ^ n / fact n))) =\n  (cmod ((s - complex_of_real a) ^ n / fact n) * (- 1) ^ n) *\\<^sub>R\n  (\\<Sum>\\<^sub>ak.\n     (- 1) ^ n *\n     cmod\n      (fds_nth ((fds_deriv ^^ n) f) k / complex_of_real (real k powr a)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak.\n     cmod\n      ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n       complex_of_real (real k powr a) *\n       ((s - complex_of_real a) ^ n / fact n))) =\n  (cmod ((s - complex_of_real a) ^ n / fact n) * (- 1) ^ n) *\\<^sub>R\n  (\\<Sum>\\<^sub>ak.\n     (- 1) ^ n *\n     cmod\n      (fds_nth ((fds_deriv ^^ n) f) k / complex_of_real (real k powr a)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "have \"?S = (\\<Sum>\\<^sub>ak. fds_nth ((fds_deriv ^^ n) f') k / real k powr a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak.\n       (- 1) ^ n *\n       cmod\n        (fds_nth ((fds_deriv ^^ n) f) k /\n         complex_of_real (real k powr a))) =\n    (\\<Sum>\\<^sub>ak. fds_nth ((fds_deriv ^^ n) f') k / real k powr a)", "by (intro infsetsum_cong) (auto simp: norm_mult norm_divide norm_power norm_nth_deriv_f)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak.\n     (- 1) ^ n *\n     cmod\n      (fds_nth ((fds_deriv ^^ n) f) k / complex_of_real (real k powr a))) =\n  (\\<Sum>\\<^sub>ak. fds_nth ((fds_deriv ^^ n) f') k / real k powr a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak.\n     (- 1) ^ n *\n     cmod\n      (fds_nth ((fds_deriv ^^ n) f) k / complex_of_real (real k powr a))) =\n  (\\<Sum>\\<^sub>ak. fds_nth ((fds_deriv ^^ n) f') k / real k powr a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "have \"\\<dots> = eval_fds ((fds_deriv ^^ n) f') a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak. fds_nth ((fds_deriv ^^ n) f') k / real k powr a) =\n    eval_fds ((fds_deriv ^^ n) f') a", "using nth_deriv_conv[of n]"], ["proof (prove)\nusing this:\n  fds_abs_converges ((fds_deriv ^^ n) f) (complex_of_real a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>ak. fds_nth ((fds_deriv ^^ n) f') k / real k powr a) =\n    eval_fds ((fds_deriv ^^ n) f') a", "by (subst eval_fds_altdef) (auto simp: f'_def nth_deriv_f_f')"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak. fds_nth ((fds_deriv ^^ n) f') k / real k powr a) =\n  eval_fds ((fds_deriv ^^ n) f') a\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>ak. fds_nth ((fds_deriv ^^ n) f') k / real k powr a) =\n  eval_fds ((fds_deriv ^^ n) f') a\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "have \"(norm ((s - a) ^ n / fact n) * (- 1) ^ n) *\\<^sub>R eval_fds ((fds_deriv ^^ n) f') a =\n                  (-1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n * norm (s - a) ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmod ((s - complex_of_real a) ^ n / fact n) * (- 1) ^ n) *\\<^sub>R\n    eval_fds ((fds_deriv ^^ n) f') a =\n    (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n    cmod (s - complex_of_real a) ^ n", "by (simp add: norm_divide norm_power)"], ["proof (state)\nthis:\n  (cmod ((s - complex_of_real a) ^ n / fact n) * (- 1) ^ n) *\\<^sub>R\n  eval_fds ((fds_deriv ^^ n) f') a =\n  (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n  cmod (s - complex_of_real a) ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "also"], ["proof (state)\nthis:\n  (cmod ((s - complex_of_real a) ^ n / fact n) * (- 1) ^ n) *\\<^sub>R\n  eval_fds ((fds_deriv ^^ n) f') a =\n  (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n  cmod (s - complex_of_real a) ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "have s_a: \"s - a = -of_real (1 + \\<epsilon> / 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s - complex_of_real a = - complex_of_real (1 + \\<epsilon> / 2)", "by (simp add: s_def a_def)"], ["proof (state)\nthis:\n  s - complex_of_real a = - complex_of_real (1 + \\<epsilon> / 2)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "have \"norm (s - a) = 1 + \\<epsilon> / 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmod (s - complex_of_real a) = 1 + \\<epsilon> / 2", "unfolding s_a norm_minus_cancel norm_of_real"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>1 + \\<epsilon> / 2\\<bar> = 1 + \\<epsilon> / 2", "using \\<epsilon>"], ["proof (prove)\nusing this:\n  0 < \\<epsilon>\n\ngoal (1 subgoal):\n 1. \\<bar>1 + \\<epsilon> / 2\\<bar> = 1 + \\<epsilon> / 2", "by simp"], ["proof (state)\nthis:\n  cmod (s - complex_of_real a) = 1 + \\<epsilon> / 2\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n       (1 + \\<epsilon> / 2) ^ n =\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n)))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sub>ak.\n     cmod\n      ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n       complex_of_real (real k powr a) *\n       ((s - complex_of_real a) ^ n / fact n))) =\n  (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n  (1 + \\<epsilon> / 2) ^ n", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sub>ak.\n     cmod\n      ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n       complex_of_real (real k powr a) *\n       ((s - complex_of_real a) ^ n / fact n))) =\n  (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n  (1 + \\<epsilon> / 2) ^ n\n\ngoal (1 subgoal):\n 1. (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n    (1 + \\<epsilon> / 2) ^ n =\n    (\\<Sum>\\<^sub>ak.\n       cmod\n        ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n         complex_of_real (real k powr a) *\n         ((s - complex_of_real a) ^ n / fact n)))", ".."], ["proof (state)\nthis:\n  (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n  (1 + \\<epsilon> / 2) ^ n =\n  (\\<Sum>\\<^sub>ak.\n     cmod\n      ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n       complex_of_real (real k powr a) *\n       ((s - complex_of_real a) ^ n / fact n)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n      (1 + \\<epsilon> / 2) ^ n) =\n  (\\<lambda>n.\n      \\<Sum>\\<^sub>ak.\n        cmod\n         ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n          complex_of_real (real k powr a) *\n          ((s - complex_of_real a) ^ n / fact n)))\n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "also"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      (- 1) ^ n * eval_fds ((fds_deriv ^^ n) f') a / fact n *\n      (1 + \\<epsilon> / 2) ^ n) =\n  (\\<lambda>n.\n      \\<Sum>\\<^sub>ak.\n        cmod\n         ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n          complex_of_real (real k powr a) *\n          ((s - complex_of_real a) ^ n / fact n)))\n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "have \"?h n \\<ge> 0\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> (\\<Sum>\\<^sub>ak.\n               cmod\n                ((- 1) ^ n * fds_nth f k *\n                 complex_of_real (ln (real k) ^ n) /\n                 complex_of_real (real k powr a) *\n                 ((s - complex_of_real a) ^ n / fact n)))", "by (intro infsetsum_nonneg) auto"], ["proof (state)\nthis:\n  0 \\<le> (\\<Sum>\\<^sub>ak.\n             cmod\n              ((- 1) ^ ?n * fds_nth f k *\n               complex_of_real (ln (real k) ^ ?n) /\n               complex_of_real (real k powr a) *\n               ((s - complex_of_real a) ^ ?n / fact ?n)))\n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "hence \"?h = (\\<lambda>n. norm (?h n))\""], ["proof (prove)\nusing this:\n  0 \\<le> (\\<Sum>\\<^sub>ak.\n             cmod\n              ((- 1) ^ ?n * fds_nth f k *\n               complex_of_real (ln (real k) ^ ?n) /\n               complex_of_real (real k powr a) *\n               ((s - complex_of_real a) ^ ?n / fact ?n)))\n\ngoal (1 subgoal):\n 1. (\\<lambda>n.\n        \\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n))) =\n    (\\<lambda>n.\n        norm\n         (\\<Sum>\\<^sub>ak.\n            cmod\n             ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n              complex_of_real (real k powr a) *\n              ((s - complex_of_real a) ^ n / fact n))))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>n.\n      \\<Sum>\\<^sub>ak.\n        cmod\n         ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n          complex_of_real (real k powr a) *\n          ((s - complex_of_real a) ^ n / fact n))) =\n  (\\<lambda>n.\n      norm\n       (\\<Sum>\\<^sub>ak.\n          cmod\n           ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n            complex_of_real (real k powr a) *\n            ((s - complex_of_real a) ^ n / fact n))))\n\ngoal (3 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV\n 3. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "finally"], ["proof (chain)\npicking this:\n  summable\n   (\\<lambda>n.\n       norm\n        (\\<Sum>\\<^sub>ak.\n           cmod\n            ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n             complex_of_real (real k powr a) *\n             ((s - complex_of_real a) ^ n / fact n))))", "show ?case"], ["proof (prove)\nusing this:\n  summable\n   (\\<lambda>n.\n       norm\n        (\\<Sum>\\<^sub>ak.\n           cmod\n            ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n             complex_of_real (real k powr a) *\n             ((s - complex_of_real a) ^ n / fact n))))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        \\<Sum>\\<^sub>ay.\n          cmod\n           ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n            complex_of_real (real y powr a) *\n            ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n    UNIV", "unfolding abs_summable_on_nat_iff'"], ["proof (prove)\nusing this:\n  summable\n   (\\<lambda>n.\n       norm\n        (\\<Sum>\\<^sub>ak.\n           cmod\n            ((- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n             complex_of_real (real k powr a) *\n             ((s - complex_of_real a) ^ n / fact n))))\n\ngoal (1 subgoal):\n 1. summable\n     (\\<lambda>n.\n         norm\n          (\\<Sum>\\<^sub>ay.\n             cmod\n              ((- 1) ^ n * fds_nth f y * complex_of_real (ln (real y) ^ n) /\n               complex_of_real (real y powr a) *\n               ((s - complex_of_real a) ^ n / fact n))))", "."], ["proof (state)\nthis:\n  (\\<lambda>x.\n      \\<Sum>\\<^sub>ay.\n        cmod\n         ((- 1) ^ x * fds_nth f y * complex_of_real (ln (real y) ^ x) /\n          complex_of_real (real y powr a) *\n          ((s - complex_of_real a) ^ x / fact x))) abs_summable_on\n  UNIV\n\ngoal (2 subgoals):\n 1. countable UNIV\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> countable UNIV", "qed auto"], ["proof (state)\nthis:\n  (\\<lambda>(n, k).\n      (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n      complex_of_real (real k powr a) *\n      ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n  UNIV \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "hence \"(\\<lambda>(k,n). (-1)^n * fds_nth f k * ln (real k) ^ n / (real k powr a) * ((s-a) ^ n / fact n))\n          abs_summable_on (UNIV \\<times> UNIV)\""], ["proof (prove)\nusing this:\n  (\\<lambda>(n, k).\n      (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n      complex_of_real (real k powr a) *\n      ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n  UNIV \\<times> UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>(k, n).\n        (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n        complex_of_real (real k powr a) *\n        ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n    UNIV \\<times> UNIV", "by (subst (asm) abs_summable_on_Times_swap) (simp add: case_prod_unfold)"], ["proof (state)\nthis:\n  (\\<lambda>(k, n).\n      (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n      complex_of_real (real k powr a) *\n      ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n  UNIV \\<times> UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "hence \"(\\<lambda>k. \\<Sum>\\<^sub>an. (- 1) ^ n * fds_nth f k * ln (real k) ^ n / (k powr a) *\n           ((s - a) ^ n / fact n)) abs_summable_on UNIV\" (is \"?h abs_summable_on _\")"], ["proof (prove)\nusing this:\n  (\\<lambda>(k, n).\n      (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n      complex_of_real (real k powr a) *\n      ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n  UNIV \\<times> UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>k.\n        \\<Sum>\\<^sub>an.\n          (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n          complex_of_real (real k powr a) *\n          ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n    UNIV", "by (rule abs_summable_on_Sigma_project1') auto"], ["proof (state)\nthis:\n  (\\<lambda>k.\n      \\<Sum>\\<^sub>an.\n        (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n        complex_of_real (real k powr a) *\n        ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n  UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "also"], ["proof (state)\nthis:\n  (\\<lambda>k.\n      \\<Sum>\\<^sub>an.\n        (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n        complex_of_real (real k powr a) *\n        ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n  UNIV\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "have \"?this \\<longleftrightarrow> (\\<lambda>k. fds_nth f k / nat_power k s) abs_summable_on UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>k.\n         \\<Sum>\\<^sub>an.\n           (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n           complex_of_real (real k powr a) *\n           ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n     UNIV) =\n    ((\\<lambda>k. fds_nth f k / nat_power k s) abs_summable_on UNIV)", "proof (intro abs_summable_on_cong refl, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an.\n          (- 1) ^ n * fds_nth f x * complex_of_real (ln (real x) ^ n) /\n          complex_of_real (real x powr a) *\n          ((s - complex_of_real a) ^ n / fact n)) =\n       fds_nth f x / nat_power x s", "case (1 k)"], ["proof (state)\nthis:\n  k \\<in> UNIV\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an.\n          (- 1) ^ n * fds_nth f x * complex_of_real (ln (real x) ^ n) /\n          complex_of_real (real x powr a) *\n          ((s - complex_of_real a) ^ n / fact n)) =\n       fds_nth f x / nat_power x s", "have \"?h k = (fds_nth f' k / k powr a) *\\<^sub>R (\\<Sum>\\<^sub>an. (-ln (real k) * (s - a)) ^ n / fact n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an.\n       (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n       complex_of_real (real k powr a) *\n       ((s - complex_of_real a) ^ n / fact n)) =\n    (fds_nth f' k / real k powr a) *\\<^sub>R\n    (\\<Sum>\\<^sub>an.\n       (complex_of_real (- ln (real k)) * (s - complex_of_real a)) ^ n /\n       fact n)", "by (subst infsetsum_scaleR_right [symmetric], rule infsetsum_cong) \n         (simp_all add: scaleR_conv_of_real f_f' power_minus' power_mult_distrib divide_simps)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an.\n     (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n     complex_of_real (real k powr a) *\n     ((s - complex_of_real a) ^ n / fact n)) =\n  (fds_nth f' k / real k powr a) *\\<^sub>R\n  (\\<Sum>\\<^sub>an.\n     (complex_of_real (- ln (real k)) * (s - complex_of_real a)) ^ n /\n     fact n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an.\n          (- 1) ^ n * fds_nth f x * complex_of_real (ln (real x) ^ n) /\n          complex_of_real (real x powr a) *\n          ((s - complex_of_real a) ^ n / fact n)) =\n       fds_nth f x / nat_power x s", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an.\n     (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n     complex_of_real (real k powr a) *\n     ((s - complex_of_real a) ^ n / fact n)) =\n  (fds_nth f' k / real k powr a) *\\<^sub>R\n  (\\<Sum>\\<^sub>an.\n     (complex_of_real (- ln (real k)) * (s - complex_of_real a)) ^ n /\n     fact n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an.\n          (- 1) ^ n * fds_nth f x * complex_of_real (ln (real x) ^ n) /\n          complex_of_real (real x powr a) *\n          ((s - complex_of_real a) ^ n / fact n)) =\n       fds_nth f x / nat_power x s", "have \"(\\<Sum>\\<^sub>an. (-ln (real k) * (s - a)) ^ n / fact n) = exp (-ln (real k) * (s - a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an.\n       (complex_of_real (- ln (real k)) * (s - complex_of_real a)) ^ n /\n       fact n) =\n    exp (complex_of_real (- ln (real k)) * (s - complex_of_real a))", "using exp_converges[of \"-ln k * (s - a)\"] exp_converges[of \"norm (-ln k * (s - a))\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>n.\n      (complex_of_real (- ln (real k)) * (s - complex_of_real a)) ^\n      n /\\<^sub>R\n      fact n) sums\n  exp (complex_of_real (- ln (real k)) * (s - complex_of_real a))\n  (\\<lambda>n.\n      cmod (complex_of_real (- ln (real k)) * (s - complex_of_real a)) ^\n      n /\\<^sub>R\n      fact n) sums\n  exp (cmod (complex_of_real (- ln (real k)) * (s - complex_of_real a)))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an.\n       (complex_of_real (- ln (real k)) * (s - complex_of_real a)) ^ n /\n       fact n) =\n    exp (complex_of_real (- ln (real k)) * (s - complex_of_real a))", "by (subst infsetsum_nat') (auto simp: abs_summable_on_nat_iff' sums_iff scaleR_conv_of_real\n                                            divide_simps norm_divide norm_mult norm_power)"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an.\n     (complex_of_real (- ln (real k)) * (s - complex_of_real a)) ^ n /\n     fact n) =\n  exp (complex_of_real (- ln (real k)) * (s - complex_of_real a))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an.\n          (- 1) ^ n * fds_nth f x * complex_of_real (ln (real x) ^ n) /\n          complex_of_real (real x powr a) *\n          ((s - complex_of_real a) ^ n / fact n)) =\n       fds_nth f x / nat_power x s", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an.\n     (complex_of_real (- ln (real k)) * (s - complex_of_real a)) ^ n /\n     fact n) =\n  exp (complex_of_real (- ln (real k)) * (s - complex_of_real a))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an.\n          (- 1) ^ n * fds_nth f x * complex_of_real (ln (real x) ^ n) /\n          complex_of_real (real x powr a) *\n          ((s - complex_of_real a) ^ n / fact n)) =\n       fds_nth f x / nat_power x s", "have \"(fds_nth f' k / k powr a) *\\<^sub>R \\<dots> = fds_nth f k / nat_power k s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fds_nth f' k / real k powr a) *\\<^sub>R\n    exp (complex_of_real (- ln (real k)) * (s - complex_of_real a)) =\n    fds_nth f k / nat_power k s", "by (auto simp: scaleR_conv_of_real f_f' powr_def exp_minus\n                     field_simps exp_of_real [symmetric] exp_diff)"], ["proof (state)\nthis:\n  (fds_nth f' k / real k powr a) *\\<^sub>R\n  exp (complex_of_real (- ln (real k)) * (s - complex_of_real a)) =\n  fds_nth f k / nat_power k s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (\\<Sum>\\<^sub>an.\n          (- 1) ^ n * fds_nth f x * complex_of_real (ln (real x) ^ n) /\n          complex_of_real (real x powr a) *\n          ((s - complex_of_real a) ^ n / fact n)) =\n       fds_nth f x / nat_power x s", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<^sub>an.\n     (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n     complex_of_real (real k powr a) *\n     ((s - complex_of_real a) ^ n / fact n)) =\n  fds_nth f k / nat_power k s", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<^sub>an.\n     (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n     complex_of_real (real k powr a) *\n     ((s - complex_of_real a) ^ n / fact n)) =\n  fds_nth f k / nat_power k s\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<^sub>an.\n       (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n       complex_of_real (real k powr a) *\n       ((s - complex_of_real a) ^ n / fact n)) =\n    fds_nth f k / nat_power k s", "."], ["proof (state)\nthis:\n  (\\<Sum>\\<^sub>an.\n     (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n     complex_of_real (real k powr a) *\n     ((s - complex_of_real a) ^ n / fact n)) =\n  fds_nth f k / nat_power k s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<lambda>k.\n       \\<Sum>\\<^sub>an.\n         (- 1) ^ n * fds_nth f k * complex_of_real (ln (real k) ^ n) /\n         complex_of_real (real k powr a) *\n         ((s - complex_of_real a) ^ n / fact n)) abs_summable_on\n   UNIV) =\n  ((\\<lambda>k. fds_nth f k / nat_power k s) abs_summable_on UNIV)\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>k. fds_nth f k / nat_power k s) abs_summable_on UNIV", "have \"fds_abs_converges f s\""], ["proof (prove)\nusing this:\n  (\\<lambda>k. fds_nth f k / nat_power k s) abs_summable_on UNIV\n\ngoal (1 subgoal):\n 1. fds_abs_converges f s", "by (simp add: fds_abs_converges_def abs_summable_on_nat_iff')"], ["proof (state)\nthis:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  fds_abs_converges f s\n\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "by (intro exI[of _ \"(c - \\<epsilon> / 2)\"]) (auto simp: s_def a_def \\<epsilon>)"], ["proof (state)\nthis:\n  \\<exists>x<c. fds_abs_converges f (complex_of_real x)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem pringsheim_landau:\n  fixes c :: real and f :: \"complex fds\"\n  assumes \"nonneg_dirichlet_series f\"\n  assumes abscissa: \"abs_conv_abscissa f = c\"\n  assumes g: \"\\<And>s. s \\<in> A \\<Longrightarrow> Re s > c \\<Longrightarrow> g s = eval_fds f s\"\n  assumes \"g holomorphic_on A\" \"open A\" \"c \\<in> A\"\n  shows   False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "have \"\\<exists>x<c. fds_abs_converges f (complex_of_real x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "by (rule pringsheim_landau_aux[where g = g and A = A]) (insert assms, auto)"], ["proof (state)\nthis:\n  \\<exists>x<c. fds_abs_converges f (complex_of_real x)\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<exists>x<c. fds_abs_converges f (complex_of_real x)", "obtain x where x: \"x < c\" \"fds_abs_converges f (complex_of_real x)\""], ["proof (prove)\nusing this:\n  \\<exists>x<c. fds_abs_converges f (complex_of_real x)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x < c; fds_abs_converges f (complex_of_real x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x < c\n  fds_abs_converges f (complex_of_real x)\n\ngoal (1 subgoal):\n 1. False", "hence \"abs_conv_abscissa f \\<le> complex_of_real x \\<bullet> 1\""], ["proof (prove)\nusing this:\n  x < c\n  fds_abs_converges f (complex_of_real x)\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<le> ereal (complex_of_real x \\<bullet> 1)", "unfolding abs_conv_abscissa_def"], ["proof (prove)\nusing this:\n  x < c\n  fds_abs_converges f (complex_of_real x)\n\ngoal (1 subgoal):\n 1. (INF s\\<in>Collect (fds_abs_converges f). ereal (s \\<bullet> 1))\n    \\<le> ereal (complex_of_real x \\<bullet> 1)", "by (intro Inf_lower) (auto simp: image_iff intro!: exI[of _ \"of_real x\"])"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> ereal (complex_of_real x \\<bullet> 1)\n\ngoal (1 subgoal):\n 1. False", "also"], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<le> ereal (complex_of_real x \\<bullet> 1)\n\ngoal (1 subgoal):\n 1. False", "have \"\\<dots> < abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ereal (complex_of_real x \\<bullet> 1) < abs_conv_abscissa f", "using assms x"], ["proof (prove)\nusing this:\n  nonneg_dirichlet_series f\n  abs_conv_abscissa f = ereal c\n  \\<lbrakk>?s \\<in> A; c < Re ?s\\<rbrakk>\n  \\<Longrightarrow> g ?s = eval_fds f ?s\n  g holomorphic_on A\n  open A\n  complex_of_real c \\<in> A\n  x < c\n  fds_abs_converges f (complex_of_real x)\n\ngoal (1 subgoal):\n 1. ereal (complex_of_real x \\<bullet> 1) < abs_conv_abscissa f", "by simp"], ["proof (state)\nthis:\n  ereal (complex_of_real x \\<bullet> 1) < abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. False", "finally"], ["proof (chain)\npicking this:\n  abs_conv_abscissa f < abs_conv_abscissa f", "show False"], ["proof (prove)\nusing this:\n  abs_conv_abscissa f < abs_conv_abscissa f\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary entire_continuation_imp_abs_conv_abscissa_MInfty:\n  assumes \"nonneg_dirichlet_series f\"\n  assumes c: \"c \\<ge> abs_conv_abscissa f\"\n  assumes g: \"\\<And>s. Re s > c \\<Longrightarrow> g s = eval_fds f s\"\n  assumes holo: \"g holomorphic_on UNIV\"\n  shows   \"abs_conv_abscissa f = -\\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f = - \\<infinity>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<noteq> - \\<infinity> \\<Longrightarrow> False", "assume \"abs_conv_abscissa f \\<noteq> -\\<infinity>\""], ["proof (state)\nthis:\n  abs_conv_abscissa f \\<noteq> - \\<infinity>\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<noteq> - \\<infinity> \\<Longrightarrow> False", "with c"], ["proof (chain)\npicking this:\n  abs_conv_abscissa f \\<le> ereal c\n  abs_conv_abscissa f \\<noteq> - \\<infinity>", "obtain a where abscissa [simp]: \"abs_conv_abscissa f = ereal a\""], ["proof (prove)\nusing this:\n  abs_conv_abscissa f \\<le> ereal c\n  abs_conv_abscissa f \\<noteq> - \\<infinity>\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        abs_conv_abscissa f = ereal a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases \"abs_conv_abscissa f\") auto"], ["proof (state)\nthis:\n  abs_conv_abscissa f = ereal a\n\ngoal (1 subgoal):\n 1. abs_conv_abscissa f \\<noteq> - \\<infinity> \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (rule pringsheim_landau[OF assms(1) abscissa _ holo])"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>s \\<in> UNIV; a < Re s\\<rbrakk>\n       \\<Longrightarrow> g s = eval_fds f s\n 2. open UNIV\n 3. complex_of_real a \\<in> UNIV", "fix s"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>s \\<in> UNIV; a < Re s\\<rbrakk>\n       \\<Longrightarrow> g s = eval_fds f s\n 2. open UNIV\n 3. complex_of_real a \\<in> UNIV", "assume s: \"Re s > a\""], ["proof (state)\nthis:\n  a < Re s\n\ngoal (3 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>s \\<in> UNIV; a < Re s\\<rbrakk>\n       \\<Longrightarrow> g s = eval_fds f s\n 2. open UNIV\n 3. complex_of_real a \\<in> UNIV", "show \"g s = eval_fds f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g s = eval_fds f s", "proof (rule sym, rule analytic_continuation_open[of _ _ _ g])"], ["proof (state)\ngoal (9 subgoals):\n 1. open ?s2\n 2. open ?s'2\n 3. ?s2 \\<noteq> {}\n 4. connected ?s'2\n 5. ?s2 \\<subseteq> ?s'2\n 6. eval_fds f holomorphic_on ?s'2\n 7. g holomorphic_on ?s'2\n 8. \\<And>z. z \\<in> ?s2 \\<Longrightarrow> eval_fds f z = g z\n 9. s \\<in> ?s'2", "show \"g holomorphic_on {s. Re s > a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g holomorphic_on {s. a < Re s}", "by (rule holomorphic_on_subset[OF holo]) auto"], ["proof (state)\nthis:\n  g holomorphic_on {s. a < Re s}\n\ngoal (8 subgoals):\n 1. open ?s2\n 2. open {s. a < Re s}\n 3. ?s2 \\<noteq> {}\n 4. connected {s. a < Re s}\n 5. ?s2 \\<subseteq> {s. a < Re s}\n 6. eval_fds f holomorphic_on {s. a < Re s}\n 7. \\<And>z. z \\<in> ?s2 \\<Longrightarrow> eval_fds f z = g z\n 8. s \\<in> {s. a < Re s}", "from assms"], ["proof (chain)\npicking this:\n  nonneg_dirichlet_series f\n  abs_conv_abscissa f \\<le> ereal c\n  c < Re ?s \\<Longrightarrow> g ?s = eval_fds f ?s\n  g holomorphic_on UNIV", "show \"{s. Re s > c} \\<subseteq> {s. Re s > a}\""], ["proof (prove)\nusing this:\n  nonneg_dirichlet_series f\n  abs_conv_abscissa f \\<le> ereal c\n  c < Re ?s \\<Longrightarrow> g ?s = eval_fds f ?s\n  g holomorphic_on UNIV\n\ngoal (1 subgoal):\n 1. {s. c < Re s} \\<subseteq> {s. a < Re s}", "by auto"], ["proof (state)\nthis:\n  {s. c < Re s} \\<subseteq> {s. a < Re s}\n\ngoal (7 subgoals):\n 1. open {s. c < Re s}\n 2. open {s. a < Re s}\n 3. {s. c < Re s} \\<noteq> {}\n 4. connected {s. a < Re s}\n 5. eval_fds f holomorphic_on {s. a < Re s}\n 6. \\<And>z. z \\<in> {s. c < Re s} \\<Longrightarrow> eval_fds f z = g z\n 7. s \\<in> {s. a < Re s}", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. open {s. c < Re s}\n 2. open {s. a < Re s}\n 3. {s. c < Re s} \\<noteq> {}\n 4. connected {s. a < Re s}\n 5. eval_fds f holomorphic_on {s. a < Re s}\n 6. \\<And>z. z \\<in> {s. c < Re s} \\<Longrightarrow> eval_fds f z = g z\n 7. s \\<in> {s. a < Re s}", "have \"conv_abscissa f \\<le> abs_conv_abscissa f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conv_abscissa f \\<le> abs_conv_abscissa f", "by (rule conv_le_abs_conv_abscissa)"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (7 subgoals):\n 1. open {s. c < Re s}\n 2. open {s. a < Re s}\n 3. {s. c < Re s} \\<noteq> {}\n 4. connected {s. a < Re s}\n 5. eval_fds f holomorphic_on {s. a < Re s}\n 6. \\<And>z. z \\<in> {s. c < Re s} \\<Longrightarrow> eval_fds f z = g z\n 7. s \\<in> {s. a < Re s}", "also"], ["proof (state)\nthis:\n  conv_abscissa f \\<le> abs_conv_abscissa f\n\ngoal (7 subgoals):\n 1. open {s. c < Re s}\n 2. open {s. a < Re s}\n 3. {s. c < Re s} \\<noteq> {}\n 4. connected {s. a < Re s}\n 5. eval_fds f holomorphic_on {s. a < Re s}\n 6. \\<And>z. z \\<in> {s. c < Re s} \\<Longrightarrow> eval_fds f z = g z\n 7. s \\<in> {s. a < Re s}", "have \"\\<dots> = ereal a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_conv_abscissa f = ereal a", "by simp"], ["proof (state)\nthis:\n  abs_conv_abscissa f = ereal a\n\ngoal (7 subgoals):\n 1. open {s. c < Re s}\n 2. open {s. a < Re s}\n 3. {s. c < Re s} \\<noteq> {}\n 4. connected {s. a < Re s}\n 5. eval_fds f holomorphic_on {s. a < Re s}\n 6. \\<And>z. z \\<in> {s. c < Re s} \\<Longrightarrow> eval_fds f z = g z\n 7. s \\<in> {s. a < Re s}", "finally"], ["proof (chain)\npicking this:\n  conv_abscissa f \\<le> ereal a", "show \"eval_fds f holomorphic_on {s. Re s > a}\""], ["proof (prove)\nusing this:\n  conv_abscissa f \\<le> ereal a\n\ngoal (1 subgoal):\n 1. eval_fds f holomorphic_on {s. a < Re s}", "by (intro holomorphic_intros) (auto intro: le_less_trans)"], ["proof (state)\nthis:\n  eval_fds f holomorphic_on {s. a < Re s}\n\ngoal (6 subgoals):\n 1. open {s. c < Re s}\n 2. open {s. a < Re s}\n 3. {s. c < Re s} \\<noteq> {}\n 4. connected {s. a < Re s}\n 5. \\<And>z. z \\<in> {s. c < Re s} \\<Longrightarrow> eval_fds f z = g z\n 6. s \\<in> {s. a < Re s}", "qed (insert assms s, auto intro!: exI[of _ \"of_real (c + 1)\"] \n           open_halfspace_Re_gt convex_connected convex_halfspace_Re_gt)"], ["proof (state)\nthis:\n  g s = eval_fds f s\n\ngoal (2 subgoals):\n 1. open UNIV\n 2. complex_of_real a \\<in> UNIV", "qed auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Convergence of the $\\zeta$ and M\\\"{o}bius $\\mu$ series\\<close>"], ["", "lemma fds_abs_summable_zeta_real_iff [simp]:\n  \"fds_abs_converges fds_zeta s \\<longleftrightarrow> s > (1 :: real)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s)", "have \"fds_abs_converges fds_zeta s \\<longleftrightarrow> summable (\\<lambda>n. real n powr -s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = summable (\\<lambda>n. real n powr - s)", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth fds_zeta n / nat_power n s)) =\n    summable (\\<lambda>n. real n powr - s)", "by (intro summable_cong always_eventually)\n       (auto simp: fds_nth_zeta powr_minus divide_simps)"], ["proof (state)\nthis:\n  fds_abs_converges fds_zeta s = summable (\\<lambda>n. real n powr - s)\n\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s)", "also"], ["proof (state)\nthis:\n  fds_abs_converges fds_zeta s = summable (\\<lambda>n. real n powr - s)\n\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s)", "have \"\\<dots> \\<longleftrightarrow> s > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. real n powr - s) = (1 < s)", "by (simp add: summable_real_powr_iff)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. real n powr - s) = (1 < s)\n\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s)", "finally"], ["proof (chain)\npicking this:\n  fds_abs_converges fds_zeta s = (1 < s)", "show ?thesis"], ["proof (prove)\nusing this:\n  fds_abs_converges fds_zeta s = (1 < s)\n\ngoal (1 subgoal):\n 1. fds_abs_converges fds_zeta s = (1 < s)", "."], ["proof (state)\nthis:\n  fds_abs_converges fds_zeta s = (1 < s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_abs_summable_zeta_real: \"s > (1 :: real) \\<Longrightarrow> fds_abs_converges fds_zeta s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < s \\<Longrightarrow> fds_abs_converges fds_zeta s", "by simp"], ["", "lemma fds_abs_converges_moebius_mu_real: \n  assumes \"s > (1 :: real)\"\n  shows   \"fds_abs_converges (fds moebius_mu) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_abs_converges (fds moebius_mu) s", "unfolding fds_abs_converges_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (fds_nth (fds moebius_mu) n / nat_power n s))", "proof (rule summable_comparison_test, intro exI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (fds moebius_mu) n / nat_power n s)) \\<le> ?g n\n 2. summable ?g", "fix n :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       ?N3 \\<le> n \\<Longrightarrow>\n       norm (norm (fds_nth (fds moebius_mu) n / nat_power n s)) \\<le> ?g n\n 2. summable ?g", "show \"norm (norm (fds_nth (fds moebius_mu) n / nat_power n s)) \\<le> n powr (-s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (norm (fds_nth (fds moebius_mu) n / nat_power n s))\n    \\<le> real n powr - s", "by (simp add: powr_minus divide_simps abs_moebius_mu_le)"], ["proof (state)\nthis:\n  norm (norm (fds_nth (fds moebius_mu) n / nat_power n s))\n  \\<le> real n powr - s\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. real n powr - s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. real n powr - s)", "from assms"], ["proof (chain)\npicking this:\n  1 < s", "show \"summable (\\<lambda>n. real n powr -s)\""], ["proof (prove)\nusing this:\n  1 < s\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. real n powr - s)", "by (simp add: summable_real_powr_iff)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. real n powr - s)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Application to the M\\\"{o}bius $\\mu$ function\\<close>"], ["", "lemma inverse_squares_sums': \"(\\<lambda>n. 1 / real n ^ 2) sums (pi ^ 2 / 6)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. 1 / (real n)\\<^sup>2) sums (pi\\<^sup>2 / 6)", "using inverse_squares_sums sums_Suc_iff[of \"\\<lambda>n. 1 / real n ^ 2\" \"pi^2 / 6\"]"], ["proof (prove)\nusing this:\n  (\\<lambda>n. 1 / real ((n + 1)\\<^sup>2)) sums (pi\\<^sup>2 / 6)\n  (\\<lambda>n. 1 / (real (Suc n))\\<^sup>2) sums (pi\\<^sup>2 / 6) =\n  (\\<lambda>n. 1 / (real n)\\<^sup>2) sums\n  (pi\\<^sup>2 / 6 + 1 / (real 0)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. 1 / (real n)\\<^sup>2) sums (pi\\<^sup>2 / 6)", "by simp"], ["", "lemma norm_summable_moebius_over_square: \n  \"summable (\\<lambda>n. norm (moebius_mu n / real n ^ 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. norm (moebius_mu n / (real n)\\<^sup>2))", "proof (subst summable_Suc_iff [symmetric], rule summable_comparison_test)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N.\n          norm (norm (moebius_mu (Suc n) / (real (Suc n))\\<^sup>2))\n          \\<le> ?g n\n 2. summable ?g", "show \"summable (\\<lambda>n. 1 / real (Suc n) ^ 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. 1 / (real (Suc n))\\<^sup>2)", "using inverse_squares_sums"], ["proof (prove)\nusing this:\n  (\\<lambda>n. 1 / real ((n + 1)\\<^sup>2)) sums (pi\\<^sup>2 / 6)\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. 1 / (real (Suc n))\\<^sup>2)", "by (simp add: sums_iff)"], ["proof (state)\nthis:\n  summable (\\<lambda>n. 1 / (real (Suc n))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N.\n          norm (norm (moebius_mu (Suc n) / (real (Suc n))\\<^sup>2))\n          \\<le> 1 / (real (Suc n))\\<^sup>2", "qed (auto simp del: of_nat_Suc simp: field_simps abs_moebius_mu_le)"], ["", "lemma summable_moebius_over_square:\n  \"summable (\\<lambda>n. moebius_mu n / real n ^ 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. moebius_mu n / (real n)\\<^sup>2)", "using norm_summable_moebius_over_square"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. norm (moebius_mu n / (real n)\\<^sup>2))\n\ngoal (1 subgoal):\n 1. summable (\\<lambda>n. moebius_mu n / (real n)\\<^sup>2)", "by (rule summable_norm_cancel)"], ["", "lemma moebius_over_square_sums: \"(\\<lambda>n. moebius_mu n / n\\<^sup>2) sums (6 / pi\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)", "have \"1 = eval_fds (1 :: real fds) 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = eval_fds 1 2", "by simp"], ["proof (state)\nthis:\n  1 = eval_fds 1 2\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)", "also"], ["proof (state)\nthis:\n  1 = eval_fds 1 2\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)", "have \"(1 :: real fds) = fds_zeta * fds moebius_mu\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = fds_zeta * fds moebius_mu", "by (rule fds_zeta_times_moebius_mu [symmetric])"], ["proof (state)\nthis:\n  1 = fds_zeta * fds moebius_mu\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)", "also"], ["proof (state)\nthis:\n  1 = fds_zeta * fds moebius_mu\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)", "have \"eval_fds \\<dots> 2 = eval_fds fds_zeta 2 * eval_fds (fds moebius_mu) 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds (fds_zeta * fds moebius_mu) 2 =\n    eval_fds fds_zeta 2 * eval_fds (fds moebius_mu) 2", "by (intro eval_fds_mult fds_abs_converges_moebius_mu_real) simp_all"], ["proof (state)\nthis:\n  eval_fds (fds_zeta * fds moebius_mu) 2 =\n  eval_fds fds_zeta 2 * eval_fds (fds moebius_mu) 2\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)", "also"], ["proof (state)\nthis:\n  eval_fds (fds_zeta * fds moebius_mu) 2 =\n  eval_fds fds_zeta 2 * eval_fds (fds moebius_mu) 2\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)", "have \"\\<dots> = pi ^ 2 / 6 * (\\<Sum>n. moebius_mu n / (real n)\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_fds fds_zeta 2 * eval_fds (fds moebius_mu) 2 =\n    pi\\<^sup>2 / 6 * (\\<Sum>n. moebius_mu n / (real n)\\<^sup>2)", "using inverse_squares_sums'"], ["proof (prove)\nusing this:\n  (\\<lambda>n. 1 / (real n)\\<^sup>2) sums (pi\\<^sup>2 / 6)\n\ngoal (1 subgoal):\n 1. eval_fds fds_zeta 2 * eval_fds (fds moebius_mu) 2 =\n    pi\\<^sup>2 / 6 * (\\<Sum>n. moebius_mu n / (real n)\\<^sup>2)", "by (simp add: eval_fds_at_numeral suminf_fds_zeta_aux sums_iff)"], ["proof (state)\nthis:\n  eval_fds fds_zeta 2 * eval_fds (fds moebius_mu) 2 =\n  pi\\<^sup>2 / 6 * (\\<Sum>n. moebius_mu n / (real n)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)", "finally"], ["proof (chain)\npicking this:\n  1 = pi\\<^sup>2 / 6 * (\\<Sum>n. moebius_mu n / (real n)\\<^sup>2)", "have \"(\\<Sum>n. moebius_mu n / (real n)\\<^sup>2) = 6 / pi ^ 2\""], ["proof (prove)\nusing this:\n  1 = pi\\<^sup>2 / 6 * (\\<Sum>n. moebius_mu n / (real n)\\<^sup>2)\n\ngoal (1 subgoal):\n 1. (\\<Sum>n. moebius_mu n / (real n)\\<^sup>2) = 6 / pi\\<^sup>2", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  (\\<Sum>n. moebius_mu n / (real n)\\<^sup>2) = 6 / pi\\<^sup>2\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)", "with summable_moebius_over_square"], ["proof (chain)\npicking this:\n  summable (\\<lambda>n. moebius_mu n / (real n)\\<^sup>2)\n  (\\<Sum>n. moebius_mu n / (real n)\\<^sup>2) = 6 / pi\\<^sup>2", "show ?thesis"], ["proof (prove)\nusing this:\n  summable (\\<lambda>n. moebius_mu n / (real n)\\<^sup>2)\n  (\\<Sum>n. moebius_mu n / (real n)\\<^sup>2) = 6 / pi\\<^sup>2\n\ngoal (1 subgoal):\n 1. (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)", "by (simp add: sums_iff)"], ["proof (state)\nthis:\n  (\\<lambda>n. moebius_mu n / real (n\\<^sup>2)) sums (6 / pi\\<^sup>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}