{"file_name": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series/Multiplicative_Function.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series", "problem_names": ["lemma Suc_0 [simp]: \"f (Suc 0) = 1\"", "lemma mult_coprime:\n  assumes \"coprime a b\"\n  shows   \"f (a * b) = f a * f b\"", "lemma prod_coprime:\n  assumes \"\\<And>x y. x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<noteq> y \\<Longrightarrow> coprime (g x) (g y)\"\n  shows   \"f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\"", "lemma prod_prime_factors:\n  assumes \"n > 0\"\n  shows   \"f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))\"", "lemma multiplicative_sum_divisors: \"multiplicative_function (\\<lambda>n. \\<Sum>d | d dvd n. f d)\"", "lemma prime: \"prime p \\<Longrightarrow> f p = f_prime p\"", "lemma prod_prime_factors':\n  assumes \"n > 0\"\n  shows   \"f n = (\\<Prod>p\\<in>prime_factors n. f_prime_power p (multiplicity p n))\"", "lemma efficient_code_aux:\n  assumes \"n > 0\" \"set ps = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\" \"distinct ps\"\n  shows   \"f n = (\\<Prod>(p,d) \\<leftarrow> ps. f_prime_power p (Suc d))\"", "lemma efficient_code:\n  assumes \"set (ps ()) = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\" \"distinct (ps ())\"\n  shows   \"f n = (if n = 0 then 0 else (\\<Prod>(p,d) \\<leftarrow> ps (). f_prime_power p (Suc d)))\"", "lemma mult: \"f (a * b) = f a * f b\"", "lemma prod: \"f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\"", "lemma power: \"f (n ^ m) = f n ^ m\"", "lemma prod_prime_factors': \"n > 0 \\<Longrightarrow> f n = (\\<Prod>p\\<in>prime_factors n. f p ^ multiplicity p n)\"", "lemma prod_prime_factors'': \"n > 0 \\<Longrightarrow> f n = (\\<Prod>p\\<in>prime_factors n. f_prime p ^ multiplicity p n)\"", "lemma efficient_code_aux:\n  assumes \"n > 0\" \"set ps = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\" \"distinct ps\"\n  shows   \"f n = (\\<Prod>(p,d) \\<leftarrow> ps. f_prime p ^ Suc d)\"", "lemma efficient_code:\n  assumes \"set (ps ()) = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\" \"distinct (ps ())\"\n  shows   \"f n = (if n = 0 then 0 else (\\<Prod>(p,d) \\<leftarrow> ps (). f_prime p ^ Suc d))\"", "lemma multiplicative_function_eqI:\n  assumes \"multiplicative_function f\" \"multiplicative_function g\"\n  assumes \"\\<And>p k. prime p \\<Longrightarrow> k > 0 \\<Longrightarrow> f (p ^ k) = g (p ^ k)\"\n  shows   \"f n = g n\"", "lemma multiplicative_function_of_natI:\n  \"multiplicative_function f \\<Longrightarrow> multiplicative_function (\\<lambda>n. of_nat (f n))\"", "lemma multiplicative_function_of_natD:\n  \"multiplicative_function (\\<lambda>n. of_nat (f n) :: 'a :: {ring_char_0, comm_semiring_1}) \\<Longrightarrow> \n     multiplicative_function f\"", "lemma multiplicative_function_mult:\n  assumes \"multiplicative_function f\"  \"multiplicative_function g\"\n  shows   \"multiplicative_function (\\<lambda>n. f n * g n)\"", "lemma multiplicative_function_inverse:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"multiplicative_function f\"\n  shows   \"multiplicative_function (\\<lambda>n. inverse (f n))\"", "lemma multiplicative_function_divide:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"multiplicative_function f\"  \"multiplicative_function g\"\n  shows   \"multiplicative_function (\\<lambda>n. f n / g n)\"", "lemma completely_multiplicative_function_mult:\n  assumes \"completely_multiplicative_function f\" \"completely_multiplicative_function g\"\n  shows   \"completely_multiplicative_function (\\<lambda>n. f n * g n)\"", "lemma completely_multiplicative_function_inverse:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"completely_multiplicative_function f\"\n  shows   \"completely_multiplicative_function (\\<lambda>n. inverse (f n))\"", "lemma completely_multiplicative_function_divide:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"completely_multiplicative_function f\"  \"completely_multiplicative_function g\"\n  shows   \"completely_multiplicative_function (\\<lambda>n. f n / g n)\"", "lemma (in multiplicative_function) completely_multiplicativeI:\n  assumes \"\\<And>p k. prime p \\<Longrightarrow> k > 0 \\<Longrightarrow> f (p ^ k) = f p ^ k\"\n  shows   \"completely_multiplicative_function f\"", "lemma ind_0 [simp]: \"ind P 0 = 0\"", "lemma ind_nonzero: \"n > 0 \\<Longrightarrow> ind P n = (if P n then 1 else 0)\"", "lemma ind_True [simp]: \"P n \\<Longrightarrow> n > 0 \\<Longrightarrow> ind P n = 1\"", "lemma ind_False [simp]: \"\\<not>P n \\<Longrightarrow> n > 0 \\<Longrightarrow> ind P n = 0\"", "lemma ind_eq_1_iff: \"ind P n = 1 \\<longleftrightarrow> n > 0 \\<and> P n\"", "lemma ind_eq_0_iff: \"ind P n = 0 \\<longleftrightarrow> n = 0 \\<or> \\<not>P n\"", "lemma multiplicative_function_ind [intro?]:\n  assumes \"P 1\" \"\\<And>a b. a > 1 \\<Longrightarrow> b > 1 \\<Longrightarrow> coprime a b \\<Longrightarrow> P (a * b) \\<longleftrightarrow> P a \\<and> P b\"\n  shows   \"multiplicative_function (ind P)\""], "translations": [["", "lemma Suc_0 [simp]: \"f (Suc 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (Suc 0) = (1::'a)", "using one"], ["proof (prove)\nusing this:\n  f 1 = (1::'a)\n\ngoal (1 subgoal):\n 1. f (Suc 0) = (1::'a)", "by (simp del: one)"], ["", "lemma mult_coprime:\n  assumes \"coprime a b\"\n  shows   \"f (a * b) = f a * f b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "consider \"n = 0\" | \"n = 1\" | \"n > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0 \\<Longrightarrow> thesis; n = 1 \\<Longrightarrow> thesis;\n     1 < n \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?n3 = 0 \\<Longrightarrow> ?thesis;\n   ?n3 = 1 \\<Longrightarrow> ?thesis;\n   1 < ?n3 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "note P = this"], ["proof (state)\nthis:\n  \\<lbrakk>?n3 = 0 \\<Longrightarrow> ?thesis;\n   ?n3 = 1 \\<Longrightarrow> ?thesis;\n   1 < ?n3 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "by (cases a rule: P; cases b rule: P) (simp_all add: mult_coprime_aux assms)"], ["proof (state)\nthis:\n  f (a * b) = f a * f b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prod_coprime:\n  assumes \"\\<And>x y. x \\<in> A \\<Longrightarrow> y \\<in> A \\<Longrightarrow> x \\<noteq> y \\<Longrightarrow> coprime (g x) (g y)\"\n  shows   \"f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (prod g A) = (\\<Prod>x\\<in>A. f (g x))", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> A; ?y \\<in> A; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> coprime (g ?x) (g ?y)\n\ngoal (1 subgoal):\n 1. f (prod g A) = (\\<Prod>x\\<in>A. f (g x))", "proof (induction rule: infinite_finite_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>infinite A;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g x) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n 2. (\\<And>x y.\n        \\<lbrakk>x \\<in> {}; y \\<in> {}; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n    f (prod g {}) = (\\<Prod>x\\<in>{}. f (g x))\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> F; x \\<noteq> y\\<rbrakk>\n            \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n        f (prod g F) = (\\<Prod>x\\<in>F. f (g x));\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> insert x F;\n            xa \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g xa) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g (insert x F)) =\n                         (\\<Prod>x\\<in>insert x F. f (g x))", "case (insert x A)"], ["proof (state)\nthis:\n  finite A\n  x \\<notin> A\n  (\\<And>x y.\n      \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n      \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n  f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n  \\<lbrakk>?x \\<in> insert x A; ?y \\<in> insert x A; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> coprime (g ?x) (g ?y)\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>infinite A;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g x) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n 2. (\\<And>x y.\n        \\<lbrakk>x \\<in> {}; y \\<in> {}; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n    f (prod g {}) = (\\<Prod>x\\<in>{}. f (g x))\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> F; x \\<noteq> y\\<rbrakk>\n            \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n        f (prod g F) = (\\<Prod>x\\<in>F. f (g x));\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> insert x F;\n            xa \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g xa) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g (insert x F)) =\n                         (\\<Prod>x\\<in>insert x F. f (g x))", "from insert"], ["proof (chain)\npicking this:\n  finite A\n  x \\<notin> A\n  (\\<And>x y.\n      \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n      \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n  f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n  \\<lbrakk>?x \\<in> insert x A; ?y \\<in> insert x A; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> coprime (g ?x) (g ?y)", "have \"f (prod g (insert x A)) = f (g x * prod g A)\""], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  (\\<And>x y.\n      \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n      \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n  f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n  \\<lbrakk>?x \\<in> insert x A; ?y \\<in> insert x A; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> coprime (g ?x) (g ?y)\n\ngoal (1 subgoal):\n 1. f (prod g (insert x A)) = f (g x * prod g A)", "by simp"], ["proof (state)\nthis:\n  f (prod g (insert x A)) = f (g x * prod g A)\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>infinite A;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g x) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n 2. (\\<And>x y.\n        \\<lbrakk>x \\<in> {}; y \\<in> {}; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n    f (prod g {}) = (\\<Prod>x\\<in>{}. f (g x))\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> F; x \\<noteq> y\\<rbrakk>\n            \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n        f (prod g F) = (\\<Prod>x\\<in>F. f (g x));\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> insert x F;\n            xa \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g xa) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g (insert x F)) =\n                         (\\<Prod>x\\<in>insert x F. f (g x))", "also"], ["proof (state)\nthis:\n  f (prod g (insert x A)) = f (g x * prod g A)\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>infinite A;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g x) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n 2. (\\<And>x y.\n        \\<lbrakk>x \\<in> {}; y \\<in> {}; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n    f (prod g {}) = (\\<Prod>x\\<in>{}. f (g x))\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> F; x \\<noteq> y\\<rbrakk>\n            \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n        f (prod g F) = (\\<Prod>x\\<in>F. f (g x));\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> insert x F;\n            xa \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g xa) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g (insert x F)) =\n                         (\\<Prod>x\\<in>insert x F. f (g x))", "have \"\\<dots> = f (g x) * f (prod g A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (g x * prod g A) = f (g x) * f (prod g A)", "using insert.prems insert.hyps"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> insert x A; ?y \\<in> insert x A; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> coprime (g ?x) (g ?y)\n  finite A\n  x \\<notin> A\n\ngoal (1 subgoal):\n 1. f (g x * prod g A) = f (g x) * f (prod g A)", "by (auto intro: mult_coprime prod_coprime_right)"], ["proof (state)\nthis:\n  f (g x * prod g A) = f (g x) * f (prod g A)\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>infinite A;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g x) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n 2. (\\<And>x y.\n        \\<lbrakk>x \\<in> {}; y \\<in> {}; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n    f (prod g {}) = (\\<Prod>x\\<in>{}. f (g x))\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> F; x \\<noteq> y\\<rbrakk>\n            \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n        f (prod g F) = (\\<Prod>x\\<in>F. f (g x));\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> insert x F;\n            xa \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g xa) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g (insert x F)) =\n                         (\\<Prod>x\\<in>insert x F. f (g x))", "also"], ["proof (state)\nthis:\n  f (g x * prod g A) = f (g x) * f (prod g A)\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>infinite A;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g x) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n 2. (\\<And>x y.\n        \\<lbrakk>x \\<in> {}; y \\<in> {}; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n    f (prod g {}) = (\\<Prod>x\\<in>{}. f (g x))\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> F; x \\<noteq> y\\<rbrakk>\n            \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n        f (prod g F) = (\\<Prod>x\\<in>F. f (g x));\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> insert x F;\n            xa \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g xa) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g (insert x F)) =\n                         (\\<Prod>x\\<in>insert x F. f (g x))", "have \"\\<dots> = (\\<Prod>x\\<in>insert x A. f (g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (g x) * f (prod g A) = (\\<Prod>x\\<in>insert x A. f (g x))", "using insert"], ["proof (prove)\nusing this:\n  finite A\n  x \\<notin> A\n  (\\<And>x y.\n      \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n      \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n  f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n  \\<lbrakk>?x \\<in> insert x A; ?y \\<in> insert x A; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> coprime (g ?x) (g ?y)\n\ngoal (1 subgoal):\n 1. f (g x) * f (prod g A) = (\\<Prod>x\\<in>insert x A. f (g x))", "by simp"], ["proof (state)\nthis:\n  f (g x) * f (prod g A) = (\\<Prod>x\\<in>insert x A. f (g x))\n\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>infinite A;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g x) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n 2. (\\<And>x y.\n        \\<lbrakk>x \\<in> {}; y \\<in> {}; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n    f (prod g {}) = (\\<Prod>x\\<in>{}. f (g x))\n 3. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (\\<And>x y.\n            \\<lbrakk>x \\<in> F; y \\<in> F; x \\<noteq> y\\<rbrakk>\n            \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n        f (prod g F) = (\\<Prod>x\\<in>F. f (g x));\n        \\<And>xa y.\n           \\<lbrakk>xa \\<in> insert x F; y \\<in> insert x F;\n            xa \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g xa) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g (insert x F)) =\n                         (\\<Prod>x\\<in>insert x F. f (g x))", "finally"], ["proof (chain)\npicking this:\n  f (prod g (insert x A)) = (\\<Prod>x\\<in>insert x A. f (g x))", "show ?case"], ["proof (prove)\nusing this:\n  f (prod g (insert x A)) = (\\<Prod>x\\<in>insert x A. f (g x))\n\ngoal (1 subgoal):\n 1. f (prod g (insert x A)) = (\\<Prod>x\\<in>insert x A. f (g x))", "."], ["proof (state)\nthis:\n  f (prod g (insert x A)) = (\\<Prod>x\\<in>insert x A. f (g x))\n\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>infinite A;\n        \\<And>x y.\n           \\<lbrakk>x \\<in> A; y \\<in> A; x \\<noteq> y\\<rbrakk>\n           \\<Longrightarrow> coprime (g x) (g y)\\<rbrakk>\n       \\<Longrightarrow> f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\n 2. (\\<And>x y.\n        \\<lbrakk>x \\<in> {}; y \\<in> {}; x \\<noteq> y\\<rbrakk>\n        \\<Longrightarrow> coprime (g x) (g y)) \\<Longrightarrow>\n    f (prod g {}) = (\\<Prod>x\\<in>{}. f (g x))", "qed auto"], ["", "lemma prod_prime_factors:\n  assumes \"n > 0\"\n  shows   \"f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))", "have \"n = (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n)", "using Primes.prime_factorization_nat assms"], ["proof (prove)\nusing this:\n  0 < ?n \\<Longrightarrow>\n  ?n = (\\<Prod>p\\<in>prime_factors ?n. p ^ multiplicity p ?n)\n  0 < n\n\ngoal (1 subgoal):\n 1. n = (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n)", "by blast"], ["proof (state)\nthis:\n  n = (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n)\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))", "also"], ["proof (state)\nthis:\n  n = (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n)\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))", "have \"f \\<dots> = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n) =\n    (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))", "by (rule prod_coprime) (auto simp add: in_prime_factors_imp_prime primes_coprime)"], ["proof (state)\nthis:\n  f (\\<Prod>p\\<in>prime_factors n. p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))", "finally"], ["proof (chain)\npicking this:\n  f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))", "show ?thesis"], ["proof (prove)\nusing this:\n  f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))", "."], ["proof (state)\nthis:\n  f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multiplicative_sum_divisors: \"multiplicative_function (\\<lambda>n. \\<Sum>d | d dvd n. f d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. \\<Sum>d | d dvd n. f d)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<Sum>d | d dvd 0. f d) = (0::'a)\n 2. (\\<Sum>d | is_unit d. f d) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd a * b. f d) =\n                         (\\<Sum>d | d dvd a. f d) * (\\<Sum>d | d dvd b. f d)", "fix a b :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<Sum>d | d dvd 0. f d) = (0::'a)\n 2. (\\<Sum>d | is_unit d. f d) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd a * b. f d) =\n                         (\\<Sum>d | d dvd a. f d) * (\\<Sum>d | d dvd b. f d)", "assume ab: \"a > 1\" \"b > 1\" \"coprime a b\""], ["proof (state)\nthis:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (3 subgoals):\n 1. (\\<Sum>d | d dvd 0. f d) = (0::'a)\n 2. (\\<Sum>d | is_unit d. f d) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd a * b. f d) =\n                         (\\<Sum>d | d dvd a. f d) * (\\<Sum>d | d dvd b. f d)", "hence \"(\\<Sum>d | d dvd a * b. f d) = (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f (r * s))\""], ["proof (prove)\nusing this:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd a * b. f d) =\n    (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f (r * s))", "by (intro sum_divisors_coprime_mult)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd a * b. f d) =\n  (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f (r * s))\n\ngoal (3 subgoals):\n 1. (\\<Sum>d | d dvd 0. f d) = (0::'a)\n 2. (\\<Sum>d | is_unit d. f d) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd a * b. f d) =\n                         (\\<Sum>d | d dvd a. f d) * (\\<Sum>d | d dvd b. f d)", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd a * b. f d) =\n  (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f (r * s))\n\ngoal (3 subgoals):\n 1. (\\<Sum>d | d dvd 0. f d) = (0::'a)\n 2. (\\<Sum>d | is_unit d. f d) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd a * b. f d) =\n                         (\\<Sum>d | d dvd a. f d) * (\\<Sum>d | d dvd b. f d)", "have \"\\<dots> = (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r * f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f (r * s)) =\n    (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r * f s)", "using ab(3)"], ["proof (prove)\nusing this:\n  coprime a b\n\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f (r * s)) =\n    (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r * f s)", "by (auto intro!: sum.cong intro: mult_coprime coprime_imp_coprime dvd_trans)"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f (r * s)) =\n  (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r * f s)\n\ngoal (3 subgoals):\n 1. (\\<Sum>d | d dvd 0. f d) = (0::'a)\n 2. (\\<Sum>d | is_unit d. f d) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd a * b. f d) =\n                         (\\<Sum>d | d dvd a. f d) * (\\<Sum>d | d dvd b. f d)", "also"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f (r * s)) =\n  (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r * f s)\n\ngoal (3 subgoals):\n 1. (\\<Sum>d | d dvd 0. f d) = (0::'a)\n 2. (\\<Sum>d | is_unit d. f d) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd a * b. f d) =\n                         (\\<Sum>d | d dvd a. f d) * (\\<Sum>d | d dvd b. f d)", "have \"\\<dots> = (\\<Sum>r | r dvd a. f r) * (\\<Sum>s | s dvd b. f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r * f s) =\n    (\\<Sum>r | r dvd a. f r) * (\\<Sum>s | s dvd b. f s)", "by (subst sum_distrib_right, subst sum_distrib_left) simp_all"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r * f s) =\n  (\\<Sum>r | r dvd a. f r) * (\\<Sum>s | s dvd b. f s)\n\ngoal (3 subgoals):\n 1. (\\<Sum>d | d dvd 0. f d) = (0::'a)\n 2. (\\<Sum>d | is_unit d. f d) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd a * b. f d) =\n                         (\\<Sum>d | d dvd a. f d) * (\\<Sum>d | d dvd b. f d)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>d | d dvd a * b. f d) =\n  (\\<Sum>r | r dvd a. f r) * (\\<Sum>s | s dvd b. f s)", "show \"(\\<Sum>d | d dvd a * b. f d) = (\\<Sum>r | r dvd a. f r) * (\\<Sum>s | s dvd b. f s)\""], ["proof (prove)\nusing this:\n  (\\<Sum>d | d dvd a * b. f d) =\n  (\\<Sum>r | r dvd a. f r) * (\\<Sum>s | s dvd b. f s)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd a * b. f d) =\n    (\\<Sum>r | r dvd a. f r) * (\\<Sum>s | s dvd b. f s)", "."], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd a * b. f d) =\n  (\\<Sum>r | r dvd a. f r) * (\\<Sum>s | s dvd b. f s)\n\ngoal (2 subgoals):\n 1. (\\<Sum>d | d dvd 0. f d) = (0::'a)\n 2. (\\<Sum>d | is_unit d. f d) = (1::'a)", "qed auto"], ["", "end"], ["", "locale multiplicative_function' = multiplicative_function f for f :: \"nat \\<Rightarrow> 'a :: comm_semiring_1\" +\n  fixes f_prime_power :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a\" and f_prime :: \"nat \\<Rightarrow> 'a\"\n  assumes prime_power: \"prime p \\<Longrightarrow> k > 0 \\<Longrightarrow> f (p ^ k) = f_prime_power p k\"\n  assumes prime_aux: \"prime p \\<Longrightarrow> f_prime_power p 1 = f_prime p\"\nbegin"], ["", "lemma prime: \"prime p \\<Longrightarrow> f p = f_prime p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> f p = f_prime p", "using prime_power[of p 1] prime_aux[of p]"], ["proof (prove)\nusing this:\n  \\<lbrakk>prime p; 0 < 1\\<rbrakk>\n  \\<Longrightarrow> f (p ^ 1) = f_prime_power p 1\n  prime p \\<Longrightarrow> f_prime_power p 1 = f_prime p\n\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> f p = f_prime p", "by simp"], ["", "lemma prod_prime_factors':\n  assumes \"n > 0\"\n  shows   \"f n = (\\<Prod>p\\<in>prime_factors n. f_prime_power p (multiplicity p n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n = (\\<Prod>p\\<in>prime_factors n. f_prime_power p (multiplicity p n))", "by (subst prod_prime_factors[OF assms(1)])\n     (intro prod.cong refl prime_power, auto simp: prime_factors_multiplicity)"], ["", "lemma efficient_code_aux:\n  assumes \"n > 0\" \"set ps = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\" \"distinct ps\"\n  shows   \"f n = (\\<Prod>(p,d) \\<leftarrow> ps. f_prime_power p (Suc d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d))", "from assms"], ["proof (chain)\npicking this:\n  0 < n\n  set ps = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\n  distinct ps", "have \n    \"(\\<Prod>(p,d) \\<leftarrow> ps. f_prime_power p (Suc d)) = \n       (\\<Prod>(p,d)\\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n. f_prime_power p (Suc d))\""], ["proof (prove)\nusing this:\n  0 < n\n  set ps = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\n  distinct ps\n\ngoal (1 subgoal):\n 1. (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d)) =\n    (\\<Prod>(p, d)\n            \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n       f_prime_power p (Suc d))", "by (subst prod.distinct_set_conv_list [symmetric]) simp_all"], ["proof (state)\nthis:\n  (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d)) =\n  (\\<Prod>(p, d)\n          \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n     f_prime_power p (Suc d))\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d))", "also"], ["proof (state)\nthis:\n  (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d)) =\n  (\\<Prod>(p, d)\n          \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n     f_prime_power p (Suc d))\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d))", "have \"\\<dots> = (\\<Prod>x\\<in>prime_factors n. f_prime_power x (multiplicity x n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>(p, d)\n            \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n       f_prime_power p (Suc d)) =\n    (\\<Prod>x\\<in>prime_factors n. f_prime_power x (multiplicity x n))", "by (subst prod.reindex) (auto simp: inj_on_def prime_factors_multiplicity intro!: prod.cong)"], ["proof (state)\nthis:\n  (\\<Prod>(p, d)\n          \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n     f_prime_power p (Suc d)) =\n  (\\<Prod>x\\<in>prime_factors n. f_prime_power x (multiplicity x n))\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d))", "also"], ["proof (state)\nthis:\n  (\\<Prod>(p, d)\n          \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n     f_prime_power p (Suc d)) =\n  (\\<Prod>x\\<in>prime_factors n. f_prime_power x (multiplicity x n))\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d))", "have \"\\<dots> = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>prime_factors n. f_prime_power x (multiplicity x n)) = f n", "by (rule prod_prime_factors' [symmetric]) fact+"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>prime_factors n. f_prime_power x (multiplicity x n)) = f n\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d))", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d)) = f n", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d)) = f n\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d))", ".."], ["proof (state)\nthis:\n  f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime_power p (Suc d))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma efficient_code:\n  assumes \"set (ps ()) = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\" \"distinct (ps ())\"\n  shows   \"f n = (if n = 0 then 0 else (\\<Prod>(p,d) \\<leftarrow> ps (). f_prime_power p (Suc d)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n =\n    (if n = 0 then 0::'a\n     else \\<Prod>(p, d)\\<leftarrow>ps (). f_prime_power p (Suc d))", "using efficient_code_aux[of n \"ps ()\"] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < n;\n   set (ps ()) = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n;\n   distinct (ps ())\\<rbrakk>\n  \\<Longrightarrow> f n =\n                    (\\<Prod>(p,\n                        d)\\<leftarrow>ps (). f_prime_power p (Suc d))\n  set (ps ()) = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\n  distinct (ps ())\n\ngoal (1 subgoal):\n 1. f n =\n    (if n = 0 then 0::'a\n     else \\<Prod>(p, d)\\<leftarrow>ps (). f_prime_power p (Suc d))", "by simp"], ["", "end"], ["", "locale completely_multiplicative_function =\n  fixes f :: \"nat \\<Rightarrow> 'a :: comm_semiring_1\"\n  assumes zero_aux: \"f 0 = 0\"\n  assumes one_aux:  \"f (Suc 0) = 1\"\n  assumes mult_aux: \"a > 1 \\<Longrightarrow> b > 1 \\<Longrightarrow> f (a * b) = f a * f b\"\nbegin"], ["", "lemma mult: \"f (a * b) = f a * f b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "consider \"n = 0\" | \"n = 1\" | \"n > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0 \\<Longrightarrow> thesis; n = 1 \\<Longrightarrow> thesis;\n     1 < n \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?n3 = 0 \\<Longrightarrow> ?thesis;\n   ?n3 = 1 \\<Longrightarrow> ?thesis;\n   1 < ?n3 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "note P = this"], ["proof (state)\nthis:\n  \\<lbrakk>?n3 = 0 \\<Longrightarrow> ?thesis;\n   ?n3 = 1 \\<Longrightarrow> ?thesis;\n   1 < ?n3 \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (a * b) = f a * f b", "by (cases a rule: P; cases b rule: P) (simp_all add: zero_aux one_aux mult_aux)"], ["proof (state)\nthis:\n  f (a * b) = f a * f b\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by standard (simp_all add: zero_aux one_aux mult)"], ["", "lemma prod: \"f (prod g A) = (\\<Prod>x\\<in>A. f (g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (prod g A) = (\\<Prod>x\\<in>A. f (g x))", "by (induction A rule: infinite_finite_induct) (simp_all add: mult)"], ["", "lemma power: \"f (n ^ m) = f n ^ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (n ^ m) = f n ^ m", "by (induction m) (simp_all add: mult)"], ["", "lemma prod_prime_factors': \"n > 0 \\<Longrightarrow> f n = (\\<Prod>p\\<in>prime_factors n. f p ^ multiplicity p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    f n = (\\<Prod>p\\<in>prime_factors n. f p ^ multiplicity p n)", "by (subst prime_factorization_nat) (simp_all add: prod power)"], ["", "end"], ["", "locale completely_multiplicative_function' =\n  completely_multiplicative_function f for f :: \"nat \\<Rightarrow> 'a :: comm_semiring_1\" +\n  fixes f_prime :: \"nat \\<Rightarrow> 'a\"\n  assumes f_prime: \"prime p \\<Longrightarrow> f p = f_prime p\"\nbegin"], ["", "lemma prod_prime_factors'': \"n > 0 \\<Longrightarrow> f n = (\\<Prod>p\\<in>prime_factors n. f_prime p ^ multiplicity p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow>\n    f n = (\\<Prod>p\\<in>prime_factors n. f_prime p ^ multiplicity p n)", "by (subst prod_prime_factors') (auto simp: f_prime prime_factors_multiplicity intro!: prod.cong)"], ["", "lemma efficient_code_aux:\n  assumes \"n > 0\" \"set ps = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\" \"distinct ps\"\n  shows   \"f n = (\\<Prod>(p,d) \\<leftarrow> ps. f_prime p ^ Suc d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d)", "from assms"], ["proof (chain)\npicking this:\n  0 < n\n  set ps = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\n  distinct ps", "have \n    \"(\\<Prod>(p,d) \\<leftarrow> ps. f_prime p ^ Suc d) = \n       (\\<Prod>(p,d)\\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n. f_prime p ^ Suc d)\""], ["proof (prove)\nusing this:\n  0 < n\n  set ps = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\n  distinct ps\n\ngoal (1 subgoal):\n 1. (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d) =\n    (\\<Prod>(p, d)\n            \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n       f_prime p ^ Suc d)", "by (subst prod.distinct_set_conv_list [symmetric]) simp_all"], ["proof (state)\nthis:\n  (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d) =\n  (\\<Prod>(p, d)\n          \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n     f_prime p ^ Suc d)\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d)", "also"], ["proof (state)\nthis:\n  (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d) =\n  (\\<Prod>(p, d)\n          \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n     f_prime p ^ Suc d)\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d)", "have \"\\<dots> = (\\<Prod>x\\<in>prime_factors n. f_prime x ^ multiplicity x n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>(p, d)\n            \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n       f_prime p ^ Suc d) =\n    (\\<Prod>x\\<in>prime_factors n. f_prime x ^ multiplicity x n)", "by (subst prod.reindex) (auto simp: inj_on_def prime_factors_multiplicity \n                                  simp del: power_Suc intro!: prod.cong)"], ["proof (state)\nthis:\n  (\\<Prod>(p, d)\n          \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n     f_prime p ^ Suc d) =\n  (\\<Prod>x\\<in>prime_factors n. f_prime x ^ multiplicity x n)\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d)", "also"], ["proof (state)\nthis:\n  (\\<Prod>(p, d)\n          \\<in>(\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n.\n     f_prime p ^ Suc d) =\n  (\\<Prod>x\\<in>prime_factors n. f_prime x ^ multiplicity x n)\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d)", "have \"\\<dots> = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>x\\<in>prime_factors n. f_prime x ^ multiplicity x n) = f n", "by (rule prod_prime_factors'' [symmetric]) fact+"], ["proof (state)\nthis:\n  (\\<Prod>x\\<in>prime_factors n. f_prime x ^ multiplicity x n) = f n\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d)", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d) = f n", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d) = f n\n\ngoal (1 subgoal):\n 1. f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d)", ".."], ["proof (state)\nthis:\n  f n = (\\<Prod>(p, d)\\<leftarrow>ps. f_prime p ^ Suc d)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma efficient_code:\n  assumes \"set (ps ()) = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\" \"distinct (ps ())\"\n  shows   \"f n = (if n = 0 then 0 else (\\<Prod>(p,d) \\<leftarrow> ps (). f_prime p ^ Suc d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n =\n    (if n = 0 then 0::'a\n     else \\<Prod>(p, d)\\<leftarrow>ps (). f_prime p ^ Suc d)", "using efficient_code_aux[of n \"ps ()\"] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < n;\n   set (ps ()) = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n;\n   distinct (ps ())\\<rbrakk>\n  \\<Longrightarrow> f n =\n                    (\\<Prod>(p, d)\\<leftarrow>ps (). f_prime p ^ Suc d)\n  set (ps ()) = (\\<lambda>p. (p, multiplicity p n - 1)) ` prime_factors n\n  distinct (ps ())\n\ngoal (1 subgoal):\n 1. f n =\n    (if n = 0 then 0::'a\n     else \\<Prod>(p, d)\\<leftarrow>ps (). f_prime p ^ Suc d)", "by simp"], ["", "end"], ["", "lemma multiplicative_function_eqI:\n  assumes \"multiplicative_function f\" \"multiplicative_function g\"\n  assumes \"\\<And>p k. prime p \\<Longrightarrow> k > 0 \\<Longrightarrow> f (p ^ k) = g (p ^ k)\"\n  shows   \"f n = g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f n = g n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f n = g n", "interpret f: multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. f n = g n", "interpret g: multiplicative_function g"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function g", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. f n = g n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. f n = g n", "proof (cases \"n > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < n \\<Longrightarrow> f n = g n\n 2. \\<not> 0 < n \\<Longrightarrow> f n = g n", "case True"], ["proof (state)\nthis:\n  0 < n\n\ngoal (2 subgoals):\n 1. 0 < n \\<Longrightarrow> f n = g n\n 2. \\<not> 0 < n \\<Longrightarrow> f n = g n", "thus ?thesis"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. f n = g n", "using f.prod_prime_factors[OF True] g.prod_prime_factors[OF True]"], ["proof (prove)\nusing this:\n  0 < n\n  f n = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))\n  g n = (\\<Prod>p\\<in>prime_factors n. g (p ^ multiplicity p n))\n\ngoal (1 subgoal):\n 1. f n = g n", "by (auto intro!: prod.cong assms simp: prime_factors_multiplicity)"], ["proof (state)\nthis:\n  f n = g n\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> f n = g n", "qed simp_all"], ["proof (state)\nthis:\n  f n = g n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multiplicative_function_of_natI:\n  \"multiplicative_function f \\<Longrightarrow> multiplicative_function (\\<lambda>n. of_nat (f n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f \\<Longrightarrow>\n    multiplicative_function (\\<lambda>n. of_nat (f n))", "unfolding multiplicative_function_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 = 0 \\<and>\n    f 1 = 1 \\<and>\n    (\\<forall>a b.\n        1 < a \\<longrightarrow>\n        1 < b \\<longrightarrow>\n        coprime a b \\<longrightarrow>\n        f (a * b) = f a * f b) \\<Longrightarrow>\n    of_nat (f 0) = (0::'a) \\<and>\n    of_nat (f 1) = (1::'a) \\<and>\n    (\\<forall>a b.\n        1 < a \\<longrightarrow>\n        1 < b \\<longrightarrow>\n        coprime a b \\<longrightarrow>\n        of_nat (f (a * b)) = of_nat (f a) * of_nat (f b))", "by auto"], ["", "lemma multiplicative_function_of_natD:\n  \"multiplicative_function (\\<lambda>n. of_nat (f n) :: 'a :: {ring_char_0, comm_semiring_1}) \\<Longrightarrow> \n     multiplicative_function f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. of_nat (f n)) \\<Longrightarrow>\n    multiplicative_function f", "unfolding multiplicative_function_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (f 0) = (0::'a) \\<and>\n    of_nat (f 1) = (1::'a) \\<and>\n    (\\<forall>a b.\n        1 < a \\<longrightarrow>\n        1 < b \\<longrightarrow>\n        coprime a b \\<longrightarrow>\n        of_nat (f (a * b)) = of_nat (f a) * of_nat (f b)) \\<Longrightarrow>\n    f 0 = 0 \\<and>\n    f 1 = 1 \\<and>\n    (\\<forall>a b.\n        1 < a \\<longrightarrow>\n        1 < b \\<longrightarrow>\n        coprime a b \\<longrightarrow> f (a * b) = f a * f b)", "by (auto simp: of_nat_mult [symmetric] of_nat_eq_1_iff simp del: of_nat_mult)"], ["", "lemma multiplicative_function_mult:\n  assumes \"multiplicative_function f\"  \"multiplicative_function g\"\n  shows   \"multiplicative_function (\\<lambda>n. f n * g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. f n * g n)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 * g 0 = (0::'a)\n 2. f 1 * g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "interpret f: multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by fact"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 * g 0 = (0::'a)\n 2. f 1 * g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "interpret g: multiplicative_function g"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function g", "by fact"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 * g 0 = (0::'a)\n 2. f 1 * g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "show \"f 0 * g 0 = 0\" \"f 1 * g 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 * g 0 = (0::'a) &&& f 1 * g 1 = (1::'a)", "by simp_all"], ["proof (state)\nthis:\n  f 0 * g 0 = (0::'a)\n  f 1 * g 1 = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "fix a b :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "assume \"a > 1\" \"b > 1\" \"coprime a b\""], ["proof (state)\nthis:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "thus \"f (a * b) * g (a * b) = (f a * g a) * (f b * g b)\""], ["proof (prove)\nusing this:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. f (a * b) * g (a * b) = f a * g a * (f b * g b)", "by (simp_all add: f.mult_coprime g.mult_coprime mult_ac)"], ["proof (state)\nthis:\n  f (a * b) * g (a * b) = f a * g a * (f b * g b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multiplicative_function_inverse:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"multiplicative_function f\"\n  shows   \"multiplicative_function (\\<lambda>n. inverse (f n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. inverse (f n))", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. inverse (f 0) = (0::'a)\n 2. inverse (f 1) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> inverse (f (a * b)) = inverse (f a) * inverse (f b)", "interpret f: multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by fact"], ["proof (state)\ngoal (3 subgoals):\n 1. inverse (f 0) = (0::'a)\n 2. inverse (f 1) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> inverse (f (a * b)) = inverse (f a) * inverse (f b)", "show \"inverse (f 0) = 0\" \"inverse (f 1) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (f 0) = (0::'a) &&& inverse (f 1) = (1::'a)", "by simp_all"], ["proof (state)\nthis:\n  inverse (f 0) = (0::'a)\n  inverse (f 1) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> inverse (f (a * b)) = inverse (f a) * inverse (f b)", "fix a b :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> inverse (f (a * b)) = inverse (f a) * inverse (f b)", "assume \"a > 1\" \"b > 1\" \"coprime a b\""], ["proof (state)\nthis:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> inverse (f (a * b)) = inverse (f a) * inverse (f b)", "thus \"inverse (f (a * b)) = inverse (f a) * inverse (f b)\""], ["proof (prove)\nusing this:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. inverse (f (a * b)) = inverse (f a) * inverse (f b)", "by (simp_all add: f.mult_coprime field_simps)"], ["proof (state)\nthis:\n  inverse (f (a * b)) = inverse (f a) * inverse (f b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multiplicative_function_divide:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"multiplicative_function f\"  \"multiplicative_function g\"\n  shows   \"multiplicative_function (\\<lambda>n. f n / g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. f n / g n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. f n / g n)", "have \"multiplicative_function (\\<lambda>n. f n * inverse (g n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. f n * inverse (g n))", "by (intro multiplicative_function_mult multiplicative_function_inverse assms)"], ["proof (state)\nthis:\n  multiplicative_function (\\<lambda>n. f n * inverse (g n))\n\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. f n / g n)", "also"], ["proof (state)\nthis:\n  multiplicative_function (\\<lambda>n. f n * inverse (g n))\n\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. f n / g n)", "have \"(\\<lambda>n. f n * inverse (g n)) = (\\<lambda>n. f n / g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. f n * inverse (g n)) = (\\<lambda>n. f n / g n)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  (\\<lambda>n. f n * inverse (g n)) = (\\<lambda>n. f n / g n)\n\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. f n / g n)", "finally"], ["proof (chain)\npicking this:\n  multiplicative_function (\\<lambda>n. f n / g n)", "show ?thesis"], ["proof (prove)\nusing this:\n  multiplicative_function (\\<lambda>n. f n / g n)\n\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. f n / g n)", "."], ["proof (state)\nthis:\n  multiplicative_function (\\<lambda>n. f n / g n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma completely_multiplicative_function_mult:\n  assumes \"completely_multiplicative_function f\" \"completely_multiplicative_function g\"\n  shows   \"completely_multiplicative_function (\\<lambda>n. f n * g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function (\\<lambda>n. f n * g n)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 * g 0 = (0::'a)\n 2. f (Suc 0) * g (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "interpret f: completely_multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f", "by fact"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 * g 0 = (0::'a)\n 2. f (Suc 0) * g (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "interpret g: completely_multiplicative_function g"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function g", "by fact"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 * g 0 = (0::'a)\n 2. f (Suc 0) * g (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "show \"f 0 * g 0 = 0\" \"f (Suc 0) * g (Suc 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 * g 0 = (0::'a) &&& f (Suc 0) * g (Suc 0) = (1::'a)", "by simp_all"], ["proof (state)\nthis:\n  f 0 * g 0 = (0::'a)\n  f (Suc 0) * g (Suc 0) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "fix a b :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "assume \"a > 1\" \"b > 1\""], ["proof (state)\nthis:\n  1 < a\n  1 < b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) * g (a * b) = f a * g a * (f b * g b)", "thus \"f (a * b) * g (a * b) = (f a * g a) * (f b * g b)\""], ["proof (prove)\nusing this:\n  1 < a\n  1 < b\n\ngoal (1 subgoal):\n 1. f (a * b) * g (a * b) = f a * g a * (f b * g b)", "by (simp_all add: f.mult g.mult mult_ac)"], ["proof (state)\nthis:\n  f (a * b) * g (a * b) = f a * g a * (f b * g b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma completely_multiplicative_function_inverse:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"completely_multiplicative_function f\"\n  shows   \"completely_multiplicative_function (\\<lambda>n. inverse (f n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function (\\<lambda>n. inverse (f n))", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. inverse (f 0) = (0::'a)\n 2. inverse (f (Suc 0)) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> inverse (f (a * b)) = inverse (f a) * inverse (f b)", "interpret f: completely_multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f", "by fact"], ["proof (state)\ngoal (3 subgoals):\n 1. inverse (f 0) = (0::'a)\n 2. inverse (f (Suc 0)) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> inverse (f (a * b)) = inverse (f a) * inverse (f b)", "show \"inverse (f 0) = 0\" \"inverse (f (Suc 0)) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (f 0) = (0::'a) &&& inverse (f (Suc 0)) = (1::'a)", "by simp_all"], ["proof (state)\nthis:\n  inverse (f 0) = (0::'a)\n  inverse (f (Suc 0)) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> inverse (f (a * b)) = inverse (f a) * inverse (f b)", "fix a b :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> inverse (f (a * b)) = inverse (f a) * inverse (f b)", "assume \"a > 1\" \"b > 1\""], ["proof (state)\nthis:\n  1 < a\n  1 < b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> inverse (f (a * b)) = inverse (f a) * inverse (f b)", "thus \"inverse (f (a * b)) = inverse (f a) * inverse (f b)\""], ["proof (prove)\nusing this:\n  1 < a\n  1 < b\n\ngoal (1 subgoal):\n 1. inverse (f (a * b)) = inverse (f a) * inverse (f b)", "by (simp_all add: f.mult field_simps)"], ["proof (state)\nthis:\n  inverse (f (a * b)) = inverse (f a) * inverse (f b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma completely_multiplicative_function_divide:\n  fixes f :: \"nat \\<Rightarrow> 'a :: field\"\n  assumes \"completely_multiplicative_function f\"  \"completely_multiplicative_function g\"\n  shows   \"completely_multiplicative_function (\\<lambda>n. f n / g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function (\\<lambda>n. f n / g n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. completely_multiplicative_function (\\<lambda>n. f n / g n)", "have \"completely_multiplicative_function (\\<lambda>n. f n * inverse (g n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function (\\<lambda>n. f n * inverse (g n))", "by (intro completely_multiplicative_function_mult \n              completely_multiplicative_function_inverse assms)"], ["proof (state)\nthis:\n  completely_multiplicative_function (\\<lambda>n. f n * inverse (g n))\n\ngoal (1 subgoal):\n 1. completely_multiplicative_function (\\<lambda>n. f n / g n)", "also"], ["proof (state)\nthis:\n  completely_multiplicative_function (\\<lambda>n. f n * inverse (g n))\n\ngoal (1 subgoal):\n 1. completely_multiplicative_function (\\<lambda>n. f n / g n)", "have \"(\\<lambda>n. f n * inverse (g n)) = (\\<lambda>n. f n / g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. f n * inverse (g n)) = (\\<lambda>n. f n / g n)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  (\\<lambda>n. f n * inverse (g n)) = (\\<lambda>n. f n / g n)\n\ngoal (1 subgoal):\n 1. completely_multiplicative_function (\\<lambda>n. f n / g n)", "finally"], ["proof (chain)\npicking this:\n  completely_multiplicative_function (\\<lambda>n. f n / g n)", "show ?thesis"], ["proof (prove)\nusing this:\n  completely_multiplicative_function (\\<lambda>n. f n / g n)\n\ngoal (1 subgoal):\n 1. completely_multiplicative_function (\\<lambda>n. f n / g n)", "."], ["proof (state)\nthis:\n  completely_multiplicative_function (\\<lambda>n. f n / g n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in multiplicative_function) completely_multiplicativeI:\n  assumes \"\\<And>p k. prime p \\<Longrightarrow> k > 0 \\<Longrightarrow> f (p ^ k) = f p ^ k\"\n  shows   \"completely_multiplicative_function f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function f", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "fix m n :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "assume mn: \"m > 1\" \"n > 1\""], ["proof (state)\nthis:\n  1 < m\n  1 < n\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "define P where \"P = prime_factors (m * n)\""], ["proof (state)\nthis:\n  P = prime_factors (m * n)\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "have \"f (m * n) = (\\<Prod>p\\<in>P. f (p ^ multiplicity p (m * n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (m * n) = (\\<Prod>p\\<in>P. f (p ^ multiplicity p (m * n)))", "using mn"], ["proof (prove)\nusing this:\n  1 < m\n  1 < n\n\ngoal (1 subgoal):\n 1. f (m * n) = (\\<Prod>p\\<in>P. f (p ^ multiplicity p (m * n)))", "by (subst prod_prime_factors) (auto simp: P_def)"], ["proof (state)\nthis:\n  f (m * n) = (\\<Prod>p\\<in>P. f (p ^ multiplicity p (m * n)))\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "also"], ["proof (state)\nthis:\n  f (m * n) = (\\<Prod>p\\<in>P. f (p ^ multiplicity p (m * n)))\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "have \"\\<dots> = (\\<Prod>p\\<in>P. f p ^ multiplicity p (m * n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>P. f (p ^ multiplicity p (m * n))) =\n    (\\<Prod>p\\<in>P. f p ^ multiplicity p (m * n))", "by (intro prod.cong) (auto simp: assms prime_factors_multiplicity P_def)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>P. f (p ^ multiplicity p (m * n))) =\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p (m * n))\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>P. f (p ^ multiplicity p (m * n))) =\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p (m * n))\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "have \"\\<dots> = (\\<Prod>p\\<in>P. f p ^ multiplicity p m * f p ^ multiplicity p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>P. f p ^ multiplicity p (m * n)) =\n    (\\<Prod>p\\<in>P. f p ^ multiplicity p m * f p ^ multiplicity p n)", "by (intro prod.cong refl, subst prime_elem_multiplicity_mult_distrib)\n       (use mn in \\<open>auto simp: P_def prime_factors_multiplicity power_add\\<close>)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p (m * n)) =\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p m * f p ^ multiplicity p n)\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p (m * n)) =\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p m * f p ^ multiplicity p n)\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "have \"\\<dots> = (\\<Prod>p\\<in>P. f p ^ multiplicity p m) * (\\<Prod>p\\<in>P. f p ^ multiplicity p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>P. f p ^ multiplicity p m * f p ^ multiplicity p n) =\n    (\\<Prod>p\\<in>P. f p ^ multiplicity p m) *\n    (\\<Prod>p\\<in>P. f p ^ multiplicity p n)", "by (rule prod.distrib)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p m * f p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p m) *\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p n)\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p m * f p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p m) *\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p n)\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "have \"(\\<Prod>p\\<in>P. f p ^ multiplicity p m) = (\\<Prod>p\\<in>prime_factors m. f p ^ multiplicity p m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>P. f p ^ multiplicity p m) =\n    (\\<Prod>p\\<in>prime_factors m. f p ^ multiplicity p m)", "unfolding P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors (m * n). f p ^ multiplicity p m) =\n    (\\<Prod>p\\<in>prime_factors m. f p ^ multiplicity p m)", "by (intro prod.mono_neutral_right dvd_prime_factors finite_set_mset)\n                       (use mn in \\<open>auto simp: prime_factors_multiplicity\\<close>)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p m) =\n  (\\<Prod>p\\<in>prime_factors m. f p ^ multiplicity p m)\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p m) =\n  (\\<Prod>p\\<in>prime_factors m. f p ^ multiplicity p m)\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "have \"\\<dots> = (\\<Prod>p\\<in>prime_factors m. f (p ^ multiplicity p m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors m. f p ^ multiplicity p m) =\n    (\\<Prod>p\\<in>prime_factors m. f (p ^ multiplicity p m))", "by (intro prod.cong) (auto simp: assms prime_factors_multiplicity)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors m. f p ^ multiplicity p m) =\n  (\\<Prod>p\\<in>prime_factors m. f (p ^ multiplicity p m))\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors m. f p ^ multiplicity p m) =\n  (\\<Prod>p\\<in>prime_factors m. f (p ^ multiplicity p m))\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "have \"\\<dots> = f m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors m. f (p ^ multiplicity p m)) = f m", "using mn"], ["proof (prove)\nusing this:\n  1 < m\n  1 < n\n\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors m. f (p ^ multiplicity p m)) = f m", "by (intro prod_prime_factors [symmetric]) auto"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors m. f (p ^ multiplicity p m)) = f m\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors m. f (p ^ multiplicity p m)) = f m\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "have \"(\\<Prod>p\\<in>P. f p ^ multiplicity p n) = (\\<Prod>p\\<in>prime_factors n. f p ^ multiplicity p n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>P. f p ^ multiplicity p n) =\n    (\\<Prod>p\\<in>prime_factors n. f p ^ multiplicity p n)", "unfolding P_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors (m * n). f p ^ multiplicity p n) =\n    (\\<Prod>p\\<in>prime_factors n. f p ^ multiplicity p n)", "by (intro prod.mono_neutral_right dvd_prime_factors finite_set_mset)\n                       (use mn in \\<open>auto simp: prime_factors_multiplicity\\<close>)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>prime_factors n. f p ^ multiplicity p n)\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>P. f p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>prime_factors n. f p ^ multiplicity p n)\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "have \"\\<dots> = (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors n. f p ^ multiplicity p n) =\n    (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))", "by (intro prod.cong) (auto simp: assms prime_factors_multiplicity)"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors n. f p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "also"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors n. f p ^ multiplicity p n) =\n  (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n))\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "have \"\\<dots> = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n)) = f n", "using mn"], ["proof (prove)\nusing this:\n  1 < m\n  1 < n\n\ngoal (1 subgoal):\n 1. (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n)) = f n", "by (intro prod_prime_factors [symmetric]) auto"], ["proof (state)\nthis:\n  (\\<Prod>p\\<in>prime_factors n. f (p ^ multiplicity p n)) = f n\n\ngoal (3 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b\\<rbrakk>\n       \\<Longrightarrow> f (a * b) = f a * f b", "finally"], ["proof (chain)\npicking this:\n  f (m * n) = f m * f n", "show \"f (m * n) = f m * f n\""], ["proof (prove)\nusing this:\n  f (m * n) = f m * f n\n\ngoal (1 subgoal):\n 1. f (m * n) = f m * f n", "."], ["proof (state)\nthis:\n  f (m * n) = f m * f n\n\ngoal (2 subgoals):\n 1. f 0 = (0::'a)\n 2. f (Suc 0) = (1::'a)", "qed auto"], ["", "subsection \\<open>Indicator function\\<close>"], ["", "definition ind :: \"(nat \\<Rightarrow> bool) \\<Rightarrow> nat \\<Rightarrow> 'a :: semiring_1\" where\n  \"ind P n = (if n > 0 \\<and> P n then 1 else 0)\""], ["", "lemma ind_0 [simp]: \"ind P 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ind P 0 = (0::'a)", "by (simp add: ind_def)"], ["", "lemma ind_nonzero: \"n > 0 \\<Longrightarrow> ind P n = (if P n then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> ind P n = (if P n then 1::'a else (0::'a))", "by (simp add: ind_def)"], ["", "lemma ind_True [simp]: \"P n \\<Longrightarrow> n > 0 \\<Longrightarrow> ind P n = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P n; 0 < n\\<rbrakk> \\<Longrightarrow> ind P n = (1::'a)", "by (simp add: ind_nonzero)"], ["", "lemma ind_False [simp]: \"\\<not>P n \\<Longrightarrow> n > 0 \\<Longrightarrow> ind P n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P n; 0 < n\\<rbrakk> \\<Longrightarrow> ind P n = (0::'a)", "by (simp add: ind_nonzero)"], ["", "lemma ind_eq_1_iff: \"ind P n = 1 \\<longleftrightarrow> n > 0 \\<and> P n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ind P n = (1::'a)) = (0 < n \\<and> P n)", "by (simp add: ind_def)"], ["", "lemma ind_eq_0_iff: \"ind P n = 0 \\<longleftrightarrow> n = 0 \\<or> \\<not>P n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ind P n = (0::'a)) = (n = 0 \\<or> \\<not> P n)", "by (simp add: ind_def)"], ["", "lemma multiplicative_function_ind [intro?]:\n  assumes \"P 1\" \"\\<And>a b. a > 1 \\<Longrightarrow> b > 1 \\<Longrightarrow> coprime a b \\<Longrightarrow> P (a * b) \\<longleftrightarrow> P a \\<and> P b\"\n  shows   \"multiplicative_function (ind P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (ind P)", "by standard (insert assms, auto simp: ind_nonzero)"], ["", "end"]]}