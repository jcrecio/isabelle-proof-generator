{"file_name": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series/Dirichlet_Product.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series", "problem_names": ["lemma sum_coprime_dvd_cong:\n  \"(\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r s) = (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. g r s)\"\n  if \"coprime a b\" \"\\<And>r s. coprime r s \\<Longrightarrow> r dvd a \\<Longrightarrow> s dvd b \\<Longrightarrow> f r s = g r s\"", "lemma sum_divisors_code:\n  assumes \"n > (0::nat)\"\n  shows   \"(\\<Sum>d | d dvd n. f d) = \n             fold_atLeastAtMost_nat (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n 0\"", "lemma dirichlet_prod_code [code]:\n  \"dirichlet_prod f g n = (if n = 0 then 0 else\n     fold_atLeastAtMost_nat (\\<lambda>d acc. if d dvd n then f d * g (n div d) + acc else acc) 1 n 0)\"", "lemma dirichlet_prod_0 [simp]: \"dirichlet_prod f g 0 = 0\"", "lemma dirichlet_prod_Suc_0 [simp]: \"dirichlet_prod f g (Suc 0) = f (Suc 0) * g (Suc 0)\"", "lemma dirichlet_prod_cong [cong]: \n  assumes \"(\\<And>n. n > 0 \\<Longrightarrow> f n = f' n)\" \"(\\<And>n. n > 0 \\<Longrightarrow> g n = g' n)\"\n  shows   \"dirichlet_prod f g = dirichlet_prod f' g'\"", "lemma dirichlet_prod_altdef1:\n  \"dirichlet_prod f g = (\\<lambda>n. \\<Sum>d | d dvd n. f (n div d) * g d)\"", "lemma dirichlet_prod_altdef2:\n  \"dirichlet_prod f g = (\\<lambda>n. \\<Sum>(r,d) | r * d = n. f r * g d)\"", "lemma dirichlet_prod_commutes:\n  \"dirichlet_prod (f :: nat \\<Rightarrow> 'a :: comm_semiring_0) g = dirichlet_prod g f\"", "lemma finite_divisors_nat': \"n > (0 :: nat) \\<Longrightarrow> finite {(a,b). a * b = n}\"", "lemma dirichlet_prod_assoc_aux1:\n  assumes \"n > 0\"\n  shows \"dirichlet_prod f (dirichlet_prod g h) n = \n           (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)\"", "lemma dirichlet_prod_assoc_aux2:\n  assumes \"n > 0\"\n  shows \"dirichlet_prod (dirichlet_prod f g) h n = \n           (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)\"", "lemma dirichlet_prod_assoc: \n  \"dirichlet_prod (dirichlet_prod f g) h = dirichlet_prod f (dirichlet_prod g h)\"", "lemma dirichlet_prod_const_right [simp]:\n  assumes \"n > 0\"\n  shows   \"dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else 0) n = f n * c\"", "lemma dirichlet_prod_const_left [simp]:\n  assumes \"n > 0\"\n  shows   \"dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else 0) g n = c * g n\"", "lemma dirichlet_inverse_induct [case_names 0 1 gt1]:\n  \"P 0 \\<Longrightarrow> P (Suc 0) \\<Longrightarrow> (\\<And>n. n > 1 \\<Longrightarrow> (\\<And>k. k < n \\<Longrightarrow> P k) \\<Longrightarrow> P n) \\<Longrightarrow> P n\"", "lemma dirichlet_inverse_0 [simp]: \"dirichlet_inverse f i 0 = 0\"", "lemma dirichlet_inverse_Suc_0 [simp]: \"dirichlet_inverse f i (Suc 0) = i\"", "lemma dirichlet_inverse_gt_1:\n  \"n > 1 \\<Longrightarrow> dirichlet_inverse f i n =\n     -i * (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d)\"", "lemma dirichlet_inverse_cong [cong]:\n  assumes \"\\<And>n. n > 0 \\<Longrightarrow> f n = f' n\" \"i = i'\" \"n = n'\"\n  shows   \"dirichlet_inverse f i n = dirichlet_inverse f' i' n'\"", "lemma dirichlet_inverse_gt_1':\n  assumes \"n > 1\"\n  shows   \"dirichlet_inverse f i n = \n             -i * dirichlet_prod (\\<lambda>n. if n = 1 then 0 else f n) (dirichlet_inverse f i) n\"", "lemma of_int_dirichlet_prod: \n  \"of_int (dirichlet_prod f g n) = dirichlet_prod (\\<lambda>n. of_int (f n)) (\\<lambda>n. of_int (g n)) n\"", "lemma of_int_dirichlet_inverse: \n  \"of_int (dirichlet_inverse f i n) = dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) n\"", "lemma dirichlet_inverse_code [code]:\n  \"dirichlet_inverse f i n = (if n = 0 then 0 else if n = 1 then i else\n     -i * fold_atLeastAtMost_nat (\\<lambda>d acc. if d dvd n then f (n div d) * \n     dirichlet_inverse f i d + acc else acc) 1 (n - 1) 0)\"", "lemma dirichlet_prod_inverse:\n  assumes \"f 1 * i = 1\"\n  shows   \"dirichlet_prod f (dirichlet_inverse f i) = (\\<lambda>n. if n = 1 then 1 else 0)\"", "lemma dirichlet_prod_inverse':\n  assumes \"f 1 * i = 1\"\n  shows   \"dirichlet_prod (dirichlet_inverse f i) f = (\\<lambda>n. if n = 1 then 1 else 0)\"", "lemma dirichlet_inverse_noninvertible:\n  assumes \"f (Suc 0) = (0 :: 'a :: {comm_ring_1})\" \"i = 0\"\n  shows   \"dirichlet_inverse f i n = 0\"", "lemma multiplicative_dirichlet_prod:\n  assumes \"multiplicative_function f\" \n  assumes \"multiplicative_function g\"\n  shows   \"multiplicative_function (dirichlet_prod f g)\"", "lemma multiplicative_dirichlet_prodD1:\n  fixes f g :: \"nat \\<Rightarrow> 'a :: comm_semiring_1_cancel\"\n  assumes \"multiplicative_function (dirichlet_prod f g)\"\n  assumes \"multiplicative_function f\"\n  assumes [simp]: \"g 0 = 0\"\n  shows   \"multiplicative_function g\"", "lemma multiplicative_dirichlet_prodD2:\n  fixes f g :: \"nat \\<Rightarrow> 'a :: comm_semiring_1_cancel\"\n  assumes \"multiplicative_function (dirichlet_prod f g)\"\n  assumes \"multiplicative_function g\"\n  assumes [simp]: \"f 0 = 0\"\n  shows   \"multiplicative_function f\"", "lemma multiplicative_dirichlet_inverse:\n  assumes \"multiplicative_function f\"\n  shows   \"multiplicative_function (dirichlet_inverse f 1)\"", "lemma dirichlet_prod_prime_power:\n  assumes \"prime p\"\n  shows   \"dirichlet_prod f g (p ^ k) = (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))\"", "lemma dirichlet_prod_prime:\n  assumes \"prime p\"\n  shows   \"dirichlet_prod f g p  = f 1 * g p + f p * g 1\""], "translations": [["", "lemma sum_coprime_dvd_cong:\n  \"(\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r s) = (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. g r s)\"\n  if \"coprime a b\" \"\\<And>r s. coprime r s \\<Longrightarrow> r dvd a \\<Longrightarrow> s dvd b \\<Longrightarrow> f r s = g r s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r s) =\n    (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. g r s)", "using refl"], ["proof (prove)\nusing this:\n  ?t = ?t\n\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r s) =\n    (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. g r s)", "proof (rule sum.cong, rule sum.cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> {r. r dvd a}; xa \\<in> {s. s dvd b}\\<rbrakk>\n       \\<Longrightarrow> f x xa = g x xa", "fix r s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> {r. r dvd a}; xa \\<in> {s. s dvd b}\\<rbrakk>\n       \\<Longrightarrow> f x xa = g x xa", "assume \"r \\<in> {r. r dvd a}\" and \"s \\<in> {s. s dvd b}\""], ["proof (state)\nthis:\n  r \\<in> {r. r dvd a}\n  s \\<in> {s. s dvd b}\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> {r. r dvd a}; xa \\<in> {s. s dvd b}\\<rbrakk>\n       \\<Longrightarrow> f x xa = g x xa", "then"], ["proof (chain)\npicking this:\n  r \\<in> {r. r dvd a}\n  s \\<in> {s. s dvd b}", "have \"r dvd a\" and \"s dvd b\""], ["proof (prove)\nusing this:\n  r \\<in> {r. r dvd a}\n  s \\<in> {s. s dvd b}\n\ngoal (1 subgoal):\n 1. r dvd a &&& s dvd b", "by simp_all"], ["proof (state)\nthis:\n  r dvd a\n  s dvd b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> {r. r dvd a}; xa \\<in> {s. s dvd b}\\<rbrakk>\n       \\<Longrightarrow> f x xa = g x xa", "moreover"], ["proof (state)\nthis:\n  r dvd a\n  s dvd b\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> {r. r dvd a}; xa \\<in> {s. s dvd b}\\<rbrakk>\n       \\<Longrightarrow> f x xa = g x xa", "from \\<open>coprime a b\\<close>"], ["proof (chain)\npicking this:\n  coprime a b", "have \"coprime r s\""], ["proof (prove)\nusing this:\n  coprime a b\n\ngoal (1 subgoal):\n 1. coprime r s", "using \\<open>r dvd a\\<close> \\<open>s dvd b\\<close>"], ["proof (prove)\nusing this:\n  coprime a b\n  r dvd a\n  s dvd b\n\ngoal (1 subgoal):\n 1. coprime r s", "by (auto intro: coprime_imp_coprime dvd_trans)"], ["proof (state)\nthis:\n  coprime r s\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> {r. r dvd a}; xa \\<in> {s. s dvd b}\\<rbrakk>\n       \\<Longrightarrow> f x xa = g x xa", "ultimately"], ["proof (chain)\npicking this:\n  r dvd a\n  s dvd b\n  coprime r s", "show \"f r s = g r s\""], ["proof (prove)\nusing this:\n  r dvd a\n  s dvd b\n  coprime r s\n\ngoal (1 subgoal):\n 1. f r s = g r s", "using that"], ["proof (prove)\nusing this:\n  r dvd a\n  s dvd b\n  coprime r s\n  coprime a b\n  \\<lbrakk>coprime ?r ?s; ?r dvd a; ?s dvd b\\<rbrakk>\n  \\<Longrightarrow> f ?r ?s = g ?r ?s\n\ngoal (1 subgoal):\n 1. f r s = g r s", "by simp"], ["proof (state)\nthis:\n  f r s = g r s\n\ngoal:\nNo subgoals!", "qed"], ["", "definition dirichlet_prod :: \"(nat \\<Rightarrow> 'a :: semiring_0) \\<Rightarrow> (nat \\<Rightarrow> 'a) \\<Rightarrow> nat \\<Rightarrow> 'a\" where\n  \"dirichlet_prod f g = (\\<lambda>n. \\<Sum>d | d dvd n. f d * g (n div d))\""], ["", "lemma sum_divisors_code:\n  assumes \"n > (0::nat)\"\n  shows   \"(\\<Sum>d | d dvd n. f d) = \n             fold_atLeastAtMost_nat (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d) =\n    fold_atLeastAtMost_nat\n     (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d) =\n    fold_atLeastAtMost_nat\n     (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a)", "have \"(\\<lambda>d acc. if d dvd n then f d + acc else acc) = (\\<lambda>d acc. (if d dvd n then f d else 0) + acc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>d acc. if d dvd n then f d + acc else acc) =\n    (\\<lambda>d. (+) (if d dvd n then f d else (0::'a)))", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  (\\<lambda>d acc. if d dvd n then f d + acc else acc) =\n  (\\<lambda>d. (+) (if d dvd n then f d else (0::'a)))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d) =\n    fold_atLeastAtMost_nat\n     (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a)", "hence \"fold_atLeastAtMost_nat (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n 0 =\n           fold_atLeastAtMost_nat (\\<lambda>d acc. (if d dvd n then f d else 0) + acc) 1 n 0\""], ["proof (prove)\nusing this:\n  (\\<lambda>d acc. if d dvd n then f d + acc else acc) =\n  (\\<lambda>d. (+) (if d dvd n then f d else (0::'a)))\n\ngoal (1 subgoal):\n 1. fold_atLeastAtMost_nat\n     (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a) =\n    fold_atLeastAtMost_nat\n     (\\<lambda>d. (+) (if d dvd n then f d else (0::'a))) 1 n (0::'a)", "by (simp only: )"], ["proof (state)\nthis:\n  fold_atLeastAtMost_nat\n   (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a) =\n  fold_atLeastAtMost_nat\n   (\\<lambda>d. (+) (if d dvd n then f d else (0::'a))) 1 n (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d) =\n    fold_atLeastAtMost_nat\n     (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a)", "also"], ["proof (state)\nthis:\n  fold_atLeastAtMost_nat\n   (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a) =\n  fold_atLeastAtMost_nat\n   (\\<lambda>d. (+) (if d dvd n then f d else (0::'a))) 1 n (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d) =\n    fold_atLeastAtMost_nat\n     (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a)", "have \"\\<dots> = (\\<Sum>d = 1..n. if d dvd n then f d else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_atLeastAtMost_nat\n     (\\<lambda>d. (+) (if d dvd n then f d else (0::'a))) 1 n (0::'a) =\n    (\\<Sum>d = 1..n. if d dvd n then f d else (0::'a))", "by (rule sum_atLeastAtMost_code [symmetric])"], ["proof (state)\nthis:\n  fold_atLeastAtMost_nat\n   (\\<lambda>d. (+) (if d dvd n then f d else (0::'a))) 1 n (0::'a) =\n  (\\<Sum>d = 1..n. if d dvd n then f d else (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d) =\n    fold_atLeastAtMost_nat\n     (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a)", "also"], ["proof (state)\nthis:\n  fold_atLeastAtMost_nat\n   (\\<lambda>d. (+) (if d dvd n then f d else (0::'a))) 1 n (0::'a) =\n  (\\<Sum>d = 1..n. if d dvd n then f d else (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d) =\n    fold_atLeastAtMost_nat\n     (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a)", "from assms"], ["proof (chain)\npicking this:\n  0 < n", "have \"\\<dots> = (\\<Sum>d | d dvd n. f d)\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d = 1..n. if d dvd n then f d else (0::'a)) =\n    (\\<Sum>d | d dvd n. f d)", "by (intro sum.mono_neutral_cong_right) (auto elim: dvdE dest: dvd_imp_le)"], ["proof (state)\nthis:\n  (\\<Sum>d = 1..n. if d dvd n then f d else (0::'a)) =\n  (\\<Sum>d | d dvd n. f d)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d) =\n    fold_atLeastAtMost_nat\n     (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a)", "finally"], ["proof (chain)\npicking this:\n  fold_atLeastAtMost_nat\n   (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a) =\n  (\\<Sum>d | d dvd n. f d)", "show ?thesis"], ["proof (prove)\nusing this:\n  fold_atLeastAtMost_nat\n   (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a) =\n  (\\<Sum>d | d dvd n. f d)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d) =\n    fold_atLeastAtMost_nat\n     (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a)", ".."], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. f d) =\n  fold_atLeastAtMost_nat\n   (\\<lambda>d acc. if d dvd n then f d + acc else acc) 1 n (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_code [code]:\n  \"dirichlet_prod f g n = (if n = 0 then 0 else\n     fold_atLeastAtMost_nat (\\<lambda>d acc. if d dvd n then f d * g (n div d) + acc else acc) 1 n 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g n =\n    (if n = 0 then 0::'a\n     else fold_atLeastAtMost_nat\n           (\\<lambda>d acc.\n               if d dvd n then f d * g (n div d) + acc else acc)\n           1 n (0::'a))", "unfolding dirichlet_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d * g (n div d)) =\n    (if n = 0 then 0::'a\n     else fold_atLeastAtMost_nat\n           (\\<lambda>d acc.\n               if d dvd n then f d * g (n div d) + acc else acc)\n           1 n (0::'a))", "by (simp add: sum_divisors_code)"], ["", "lemma dirichlet_prod_0 [simp]: \"dirichlet_prod f g 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g 0 = (0::'a)", "by (simp add: dirichlet_prod_def)"], ["", "lemma dirichlet_prod_Suc_0 [simp]: \"dirichlet_prod f g (Suc 0) = f (Suc 0) * g (Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g (Suc 0) = f (Suc 0) * g (Suc 0)", "by (simp add: dirichlet_prod_def)"], ["", "lemma dirichlet_prod_cong [cong]: \n  assumes \"(\\<And>n. n > 0 \\<Longrightarrow> f n = f' n)\" \"(\\<And>n. n > 0 \\<Longrightarrow> g n = g' n)\"\n  shows   \"dirichlet_prod f g = dirichlet_prod f' g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g = dirichlet_prod f' g'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. dirichlet_prod f g x = dirichlet_prod f' g' x", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. dirichlet_prod f g x = dirichlet_prod f' g' x", "show \"dirichlet_prod f g n = dirichlet_prod f' g' n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g n = dirichlet_prod f' g' n", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> dirichlet_prod f g n = dirichlet_prod f' g' n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = dirichlet_prod f' g' n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> dirichlet_prod f g n = dirichlet_prod f' g' n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = dirichlet_prod f' g' n", "with assms"], ["proof (chain)\npicking this:\n  0 < ?n \\<Longrightarrow> f ?n = f' ?n\n  0 < ?n \\<Longrightarrow> g ?n = g' ?n\n  n \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < ?n \\<Longrightarrow> f ?n = f' ?n\n  0 < ?n \\<Longrightarrow> g ?n = g' ?n\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g n = dirichlet_prod f' g' n", "unfolding dirichlet_prod_def"], ["proof (prove)\nusing this:\n  0 < ?n \\<Longrightarrow> f ?n = f' ?n\n  0 < ?n \\<Longrightarrow> g ?n = g' ?n\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d * g (n div d)) =\n    (\\<Sum>d | d dvd n. f' d * g' (n div d))", "by (intro ext sum.cong refl) (auto elim!: dvdE)"], ["proof (state)\nthis:\n  dirichlet_prod f g n = dirichlet_prod f' g' n\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> dirichlet_prod f g n = dirichlet_prod f' g' n", "qed simp_all"], ["proof (state)\nthis:\n  dirichlet_prod f g n = dirichlet_prod f' g' n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_altdef1:\n  \"dirichlet_prod f g = (\\<lambda>n. \\<Sum>d | d dvd n. f (n div d) * g d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g = (\\<lambda>n. \\<Sum>d | d dvd n. f (n div d) * g d)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)", "show \"dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)", "hence \"dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div (n div d)) * g (n div d))\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g n =\n    (\\<Sum>d | d dvd n. f (n div (n div d)) * g (n div d))", "unfolding dirichlet_prod_def"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d * g (n div d)) =\n    (\\<Sum>d | d dvd n. f (n div (n div d)) * g (n div d))", "by (intro sum.cong refl) (auto elim!: dvdE)"], ["proof (state)\nthis:\n  dirichlet_prod f g n =\n  (\\<Sum>d | d dvd n. f (n div (n div d)) * g (n div d))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)", "also"], ["proof (state)\nthis:\n  dirichlet_prod f g n =\n  (\\<Sum>d | d dvd n. f (n div (n div d)) * g (n div d))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)", "from False"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "have \"\\<dots> = (\\<Sum>d | d dvd n. f (n div d) * g d)\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f (n div (n div d)) * g (n div d)) =\n    (\\<Sum>d | d dvd n. f (n div d) * g d)", "by (intro sum.reindex_bij_witness[of _ \"(div) n\" \"(div) n\"]) (auto elim!: dvdE)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. f (n div (n div d)) * g (n div d)) =\n  (\\<Sum>d | d dvd n. f (n div d) * g d)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)", "."], ["proof (state)\nthis:\n  dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)", "qed simp"], ["proof (state)\nthis:\n  dirichlet_prod f g n = (\\<Sum>d | d dvd n. f (n div d) * g d)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_altdef2:\n  \"dirichlet_prod f g = (\\<lambda>n. \\<Sum>(r,d) | r * d = n. f r * g d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g =\n    (\\<lambda>n. \\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       dirichlet_prod f g n =\n       (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       dirichlet_prod f g n =\n       (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "show \"dirichlet_prod f g n = (\\<Sum>(r,d) | r * d = n. f r * g d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "have \"(\\<lambda>n::nat. (0, n)) ` UNIV \\<subseteq> {(r,d). r * d = 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range (Pair 0) \\<subseteq> {(r, d). r * d = 0}", "by auto"], ["proof (state)\nthis:\n  range (Pair 0) \\<subseteq> {(r, d). r * d = 0}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "moreover"], ["proof (state)\nthis:\n  range (Pair 0) \\<subseteq> {(r, d). r * d = 0}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "have \"\\<not>finite ((\\<lambda>n::nat. (0, n)) ` UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (range (Pair (0::'b)))", "by (subst finite_image_iff) (auto simp: inj_on_def)"], ["proof (state)\nthis:\n  infinite (range (Pair (0::?'b1)))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "ultimately"], ["proof (chain)\npicking this:\n  range (Pair 0) \\<subseteq> {(r, d). r * d = 0}\n  infinite (range (Pair (0::?'b1)))", "have \"infinite {(r,d). r * d = (0::nat)}\""], ["proof (prove)\nusing this:\n  range (Pair 0) \\<subseteq> {(r, d). r * d = 0}\n  infinite (range (Pair (0::?'b1)))\n\ngoal (1 subgoal):\n 1. infinite {(r, d). r * d = 0}", "by (blast dest: finite_subset)"], ["proof (state)\nthis:\n  infinite {(r, d). r * d = 0}\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "with True"], ["proof (chain)\npicking this:\n  n = 0\n  infinite {(r, d). r * d = 0}", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n  infinite {(r, d). r * d = 0}\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "by simp"], ["proof (state)\nthis:\n  dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "have \"(\\<Sum>d | d dvd n. f d * g (n div d)) = (\\<Sum>r | r dvd n. (\\<Sum>d | d = n div r. f r * g d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d * g (n div d)) =\n    (\\<Sum>r | r dvd n. \\<Sum>d | d = n div r. f r * g d)", "by (intro sum.cong refl) auto"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. f d * g (n div d)) =\n  (\\<Sum>r | r dvd n. \\<Sum>d | d = n div r. f r * g d)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. f d * g (n div d)) =\n  (\\<Sum>r | r dvd n. \\<Sum>d | d = n div r. f r * g d)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "from False"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "have \"\\<dots> = (\\<Sum>(r,d)\\<in>(SIGMA x:{r. r dvd n}. {d. d = n div x}). f r * g d)\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd n. \\<Sum>d | d = n div r. f r * g d) =\n    (\\<Sum>(r, d)\\<in>(SIGMA x:{r. r dvd n}. {d. d = n div x}). f r * g d)", "by (intro sum.Sigma) auto"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd n. \\<Sum>d | d = n div r. f r * g d) =\n  (\\<Sum>(r, d)\\<in>(SIGMA x:{r. r dvd n}. {d. d = n div x}). f r * g d)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "also"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd n. \\<Sum>d | d = n div r. f r * g d) =\n  (\\<Sum>(r, d)\\<in>(SIGMA x:{r. r dvd n}. {d. d = n div x}). f r * g d)\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "from False"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "have \"(SIGMA x:{r. r dvd n}. {d. d = n div x}) = {(r,d). r * d = n}\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (SIGMA x:{r. r dvd n}. {d. d = n div x}) = {(r, d). r * d = n}", "by auto"], ["proof (state)\nthis:\n  (SIGMA x:{r. r dvd n}. {d. d = n div x}) = {(r, d). r * d = n}\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>d | d dvd n. f d * g (n div d)) =\n  (\\<Sum>a\\<in>{(r, d). r * d = n}.\n     case a of (r, d) \\<Rightarrow> f r * g d)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>d | d dvd n. f d * g (n div d)) =\n  (\\<Sum>a\\<in>{(r, d). r * d = n}.\n     case a of (r, d) \\<Rightarrow> f r * g d)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)", "by (simp add: dirichlet_prod_def)"], ["proof (state)\nthis:\n  dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dirichlet_prod f g n = (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_commutes:\n  \"dirichlet_prod (f :: nat \\<Rightarrow> 'a :: comm_semiring_0) g = dirichlet_prod g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g = dirichlet_prod g f", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. dirichlet_prod f g x = dirichlet_prod g f x", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. dirichlet_prod f g x = dirichlet_prod g f x", "show \"dirichlet_prod f g n = dirichlet_prod g f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g n = dirichlet_prod g f n", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> dirichlet_prod f g n = dirichlet_prod g f n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = dirichlet_prod g f n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> dirichlet_prod f g n = dirichlet_prod g f n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = dirichlet_prod g f n", "have \"(\\<Sum>(r,d) | r * d = n. f r * g d) = (\\<Sum>(d,r) | r * d = n. f r * g d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d) =\n    (\\<Sum>(d, r)\\<in>{(d, r). r * d = n}. f r * g d)", "by (rule sum.reindex_bij_witness [of _ \"\\<lambda>(x,y). (y,x)\" \"\\<lambda>(x,y). (y,x)\"]) auto"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d) =\n  (\\<Sum>(d, r)\\<in>{(d, r). r * d = n}. f r * g d)\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> dirichlet_prod f g n = dirichlet_prod g f n\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    dirichlet_prod f g n = dirichlet_prod g f n", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>(r, d)\\<in>{(r, d). r * d = n}. f r * g d) =\n  (\\<Sum>(d, r)\\<in>{(d, r). r * d = n}. f r * g d)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g n = dirichlet_prod g f n", "by (simp add: dirichlet_prod_altdef2 mult.commute)"], ["proof (state)\nthis:\n  dirichlet_prod f g n = dirichlet_prod g f n\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> dirichlet_prod f g n = dirichlet_prod g f n", "qed (simp add: dirichlet_prod_def)"], ["proof (state)\nthis:\n  dirichlet_prod f g n = dirichlet_prod g f n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_divisors_nat': \"n > (0 :: nat) \\<Longrightarrow> finite {(a,b). a * b = n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> finite {(a, b). a * b = n}", "by (rule finite_subset[of _ \"{0<..n} \\<times> {0<..n}\"]) auto"], ["", "lemma dirichlet_prod_assoc_aux1:\n  assumes \"n > 0\"\n  shows \"dirichlet_prod f (dirichlet_prod g h) n = \n           (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_prod g h) n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_prod g h) n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "have \"dirichlet_prod f (dirichlet_prod g h) n = \n          (\\<Sum>x\\<in>{(a,b). a * b = n}. (\\<Sum>(c,d) | c * d = snd x. f (fst x) * g c * h d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_prod g h) n =\n    (\\<Sum>x\\<in>{(a, b). a * b = n}.\n       \\<Sum>(c, d)\\<in>{(c, d). c * d = snd x}. f (fst x) * g c * h d)", "by (auto intro!: sum.cong simp: dirichlet_prod_altdef2 sum_distrib_left mult.assoc)"], ["proof (state)\nthis:\n  dirichlet_prod f (dirichlet_prod g h) n =\n  (\\<Sum>x\\<in>{(a, b). a * b = n}.\n     \\<Sum>(c, d)\\<in>{(c, d). c * d = snd x}. f (fst x) * g c * h d)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_prod g h) n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "also"], ["proof (state)\nthis:\n  dirichlet_prod f (dirichlet_prod g h) n =\n  (\\<Sum>x\\<in>{(a, b). a * b = n}.\n     \\<Sum>(c, d)\\<in>{(c, d). c * d = snd x}. f (fst x) * g c * h d)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_prod g h) n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "from assms"], ["proof (chain)\npicking this:\n  0 < n", "have \"\\<dots> = (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = snd x}).\n                               case x of (x, c, d) \\<Rightarrow> f (fst x) * g c * h d)\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(a, b). a * b = n}.\n       \\<Sum>(c, d)\\<in>{(c, d). c * d = snd x}. f (fst x) * g c * h d) =\n    (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = snd x}).\n       case x of (x, c, d) \\<Rightarrow> f (fst x) * g c * h d)", "by (intro sum.Sigma finite_divisors_nat' ballI) auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{(a, b). a * b = n}.\n     \\<Sum>(c, d)\\<in>{(c, d). c * d = snd x}. f (fst x) * g c * h d) =\n  (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = snd x}).\n     case x of (x, c, d) \\<Rightarrow> f (fst x) * g c * h d)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_prod g h) n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{(a, b). a * b = n}.\n     \\<Sum>(c, d)\\<in>{(c, d). c * d = snd x}. f (fst x) * g c * h d) =\n  (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = snd x}).\n     case x of (x, c, d) \\<Rightarrow> f (fst x) * g c * h d)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_prod g h) n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "have \"\\<dots> = (\\<Sum>(a,b,c) | a * b * c = n. f a * g b * h c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = snd x}).\n       case x of (x, c, d) \\<Rightarrow> f (fst x) * g c * h d) =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "by (rule sum.reindex_bij_witness\n               [of _ \"\\<lambda>(a,b,c). ((a, b*c), (b,c))\" \"\\<lambda>((a,b),(c,d)). (a, c, d)\"])\n       (auto simp: mult_ac)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = snd x}).\n     case x of (x, c, d) \\<Rightarrow> f (fst x) * g c * h d) =\n  (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_prod g h) n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod f (dirichlet_prod g h) n =\n  (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod f (dirichlet_prod g h) n =\n  (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_prod g h) n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "."], ["proof (state)\nthis:\n  dirichlet_prod f (dirichlet_prod g h) n =\n  (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_assoc_aux2:\n  assumes \"n > 0\"\n  shows \"dirichlet_prod (dirichlet_prod f g) h n = \n           (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_prod f g) h n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_prod f g) h n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "have \"dirichlet_prod (dirichlet_prod f g) h n = \n          (\\<Sum>x\\<in>{(a,b). a * b = n}. (\\<Sum>(c,d) | c * d = fst x. f c * g d * h (snd x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_prod f g) h n =\n    (\\<Sum>x\\<in>{(a, b). a * b = n}.\n       \\<Sum>(c, d)\\<in>{(c, d). c * d = fst x}. f c * g d * h (snd x))", "by (auto intro!: sum.cong simp: dirichlet_prod_altdef2 sum_distrib_right mult.assoc)"], ["proof (state)\nthis:\n  dirichlet_prod (dirichlet_prod f g) h n =\n  (\\<Sum>x\\<in>{(a, b). a * b = n}.\n     \\<Sum>(c, d)\\<in>{(c, d). c * d = fst x}. f c * g d * h (snd x))\n\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_prod f g) h n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "also"], ["proof (state)\nthis:\n  dirichlet_prod (dirichlet_prod f g) h n =\n  (\\<Sum>x\\<in>{(a, b). a * b = n}.\n     \\<Sum>(c, d)\\<in>{(c, d). c * d = fst x}. f c * g d * h (snd x))\n\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_prod f g) h n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "from assms"], ["proof (chain)\npicking this:\n  0 < n", "have \"\\<dots> = (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = fst x}).\n                               case x of (x, c, d) \\<Rightarrow> f c * g d * h (snd x))\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(a, b). a * b = n}.\n       \\<Sum>(c, d)\\<in>{(c, d). c * d = fst x}. f c * g d * h (snd x)) =\n    (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = fst x}).\n       case x of (x, c, d) \\<Rightarrow> f c * g d * h (snd x))", "by (intro sum.Sigma finite_divisors_nat' ballI) auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{(a, b). a * b = n}.\n     \\<Sum>(c, d)\\<in>{(c, d). c * d = fst x}. f c * g d * h (snd x)) =\n  (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = fst x}).\n     case x of (x, c, d) \\<Rightarrow> f c * g d * h (snd x))\n\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_prod f g) h n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{(a, b). a * b = n}.\n     \\<Sum>(c, d)\\<in>{(c, d). c * d = fst x}. f c * g d * h (snd x)) =\n  (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = fst x}).\n     case x of (x, c, d) \\<Rightarrow> f c * g d * h (snd x))\n\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_prod f g) h n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "have \"\\<dots> = (\\<Sum>(a,b,c) | a * b * c = n. f a * g b * h c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = fst x}).\n       case x of (x, c, d) \\<Rightarrow> f c * g d * h (snd x)) =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "by (rule sum.reindex_bij_witness\n               [of _ \"\\<lambda>(a,b,c). ((a*b, c), (a,b))\" \"\\<lambda>((a,b),(c,d)). (c, d, b)\"])\n       (auto simp: mult_ac)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>(SIGMA x:{(a, b). a * b = n}. {(c, d). c * d = fst x}).\n     case x of (x, c, d) \\<Rightarrow> f c * g d * h (snd x)) =\n  (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)\n\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_prod f g) h n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod (dirichlet_prod f g) h n =\n  (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod (dirichlet_prod f g) h n =\n  (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)\n\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_prod f g) h n =\n    (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)", "."], ["proof (state)\nthis:\n  dirichlet_prod (dirichlet_prod f g) h n =\n  (\\<Sum>(a, b, c)\\<in>{(a, b, c). a * b * c = n}. f a * g b * h c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_assoc: \n  \"dirichlet_prod (dirichlet_prod f g) h = dirichlet_prod f (dirichlet_prod g h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_prod f g) h =\n    dirichlet_prod f (dirichlet_prod g h)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       dirichlet_prod (dirichlet_prod f g) h x =\n       dirichlet_prod f (dirichlet_prod g h) x", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       dirichlet_prod (dirichlet_prod f g) h x =\n       dirichlet_prod f (dirichlet_prod g h) x", "show \"dirichlet_prod (dirichlet_prod f g) h n = dirichlet_prod f (dirichlet_prod g h) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_prod f g) h n =\n    dirichlet_prod f (dirichlet_prod g h) n", "by (cases \"n = 0\") (simp_all add: dirichlet_prod_assoc_aux1 dirichlet_prod_assoc_aux2)"], ["proof (state)\nthis:\n  dirichlet_prod (dirichlet_prod f g) h n =\n  dirichlet_prod f (dirichlet_prod g h) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_const_right [simp]:\n  assumes \"n > 0\"\n  shows   \"dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else 0) n = f n * c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n    f n * c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n    f n * c", "have \"dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else 0) n = \n          (\\<Sum>d | d dvd n. (if d = n then f n * c else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n    (\\<Sum>d | d dvd n. if d = n then f n * c else (0::'a))", "unfolding dirichlet_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d * (if n div d = Suc 0 then c else (0::'a))) =\n    (\\<Sum>d | d dvd n. if d = n then f n * c else (0::'a))", "using assms"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. f d * (if n div d = Suc 0 then c else (0::'a))) =\n    (\\<Sum>d | d dvd n. if d = n then f n * c else (0::'a))", "by (intro sum.cong refl) (auto elim!: dvdE split: if_splits)"], ["proof (state)\nthis:\n  dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n  (\\<Sum>d | d dvd n. if d = n then f n * c else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n    f n * c", "also"], ["proof (state)\nthis:\n  dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n  (\\<Sum>d | d dvd n. if d = n then f n * c else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n    f n * c", "have \"\\<dots> = f n * c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. if d = n then f n * c else (0::'a)) = f n * c", "using assms"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. if d = n then f n * c else (0::'a)) = f n * c", "by (subst sum.delta) auto"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. if d = n then f n * c else (0::'a)) = f n * c\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n    f n * c", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n  f n * c", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n  f n * c\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n    f n * c", "."], ["proof (state)\nthis:\n  dirichlet_prod f (\\<lambda>n. if n = Suc 0 then c else (0::'a)) n =\n  f n * c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_const_left [simp]:\n  assumes \"n > 0\"\n  shows   \"dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else 0) g n = c * g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n    c * g n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n    c * g n", "have \"dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else 0) g n = \n          (\\<Sum>d | d dvd n. (if d = 1 then c * g n else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n    (\\<Sum>d | d dvd n. if d = 1 then c * g n else (0::'a))", "unfolding dirichlet_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. (if d = Suc 0 then c else (0::'a)) * g (n div d)) =\n    (\\<Sum>d | d dvd n. if d = 1 then c * g n else (0::'a))", "using assms"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. (if d = Suc 0 then c else (0::'a)) * g (n div d)) =\n    (\\<Sum>d | d dvd n. if d = 1 then c * g n else (0::'a))", "by (intro sum.cong refl) (auto elim!: dvdE split: if_splits)"], ["proof (state)\nthis:\n  dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n  (\\<Sum>d | d dvd n. if d = 1 then c * g n else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n    c * g n", "also"], ["proof (state)\nthis:\n  dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n  (\\<Sum>d | d dvd n. if d = 1 then c * g n else (0::'a))\n\ngoal (1 subgoal):\n 1. dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n    c * g n", "have \"\\<dots> = c * g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. if d = 1 then c * g n else (0::'a)) = c * g n", "using assms"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. if d = 1 then c * g n else (0::'a)) = c * g n", "by (subst sum.delta) auto"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. if d = 1 then c * g n else (0::'a)) = c * g n\n\ngoal (1 subgoal):\n 1. dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n    c * g n", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n  c * g n", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n  c * g n\n\ngoal (1 subgoal):\n 1. dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n    c * g n", "."], ["proof (state)\nthis:\n  dirichlet_prod (\\<lambda>n. if n = Suc 0 then c else (0::'a)) g n =\n  c * g n\n\ngoal:\nNo subgoals!", "qed"], ["", "fun dirichlet_inverse :: \"(nat \\<Rightarrow> 'a :: comm_ring_1) \\<Rightarrow> 'a \\<Rightarrow> nat \\<Rightarrow> 'a\" where\n  \"dirichlet_inverse f i n = \n     (if n = 0 then 0 else if n = 1 then i\n      else -i * (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d))\""], ["", "lemma dirichlet_inverse_induct [case_names 0 1 gt1]:\n  \"P 0 \\<Longrightarrow> P (Suc 0) \\<Longrightarrow> (\\<And>n. n > 1 \\<Longrightarrow> (\\<And>k. k < n \\<Longrightarrow> P k) \\<Longrightarrow> P n) \\<Longrightarrow> P n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P 0; P (Suc 0);\n     \\<And>n.\n        \\<lbrakk>1 < n; \\<And>k. k < n \\<Longrightarrow> P k\\<rbrakk>\n        \\<Longrightarrow> P n\\<rbrakk>\n    \\<Longrightarrow> P n", "by induction_schema (force, rule wf_measure [of id], simp)"], ["", "lemma dirichlet_inverse_0 [simp]: \"dirichlet_inverse f i 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i 0 = (0::'a)", "by simp"], ["", "lemma dirichlet_inverse_Suc_0 [simp]: \"dirichlet_inverse f i (Suc 0) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i (Suc 0) = i", "by simp"], ["", "declare dirichlet_inverse.simps [simp del]"], ["", "lemma dirichlet_inverse_gt_1:\n  \"n > 1 \\<Longrightarrow> dirichlet_inverse f i n =\n     -i * (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    - i *\n    (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d)", "by (simp add: dirichlet_inverse.simps)"], ["", "lemma dirichlet_inverse_cong [cong]:\n  assumes \"\\<And>n. n > 0 \\<Longrightarrow> f n = f' n\" \"i = i'\" \"n = n'\"\n  shows   \"dirichlet_inverse f i n = dirichlet_inverse f' i' n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i' n'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i' n'", "have \"dirichlet_inverse f i n = dirichlet_inverse f' i n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i n", "using assms(1)"], ["proof (prove)\nusing this:\n  0 < ?n \\<Longrightarrow> f ?n = f' ?n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i n", "proof (induction n rule: dirichlet_inverse_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           \\<lbrakk>k < n;\n            \\<And>n. 0 < n \\<Longrightarrow> f n = f' n\\<rbrakk>\n           \\<Longrightarrow> dirichlet_inverse f i k =\n                             dirichlet_inverse f' i k;\n        \\<And>n. 0 < n \\<Longrightarrow> f n = f' n\\<rbrakk>\n       \\<Longrightarrow> dirichlet_inverse f i n = dirichlet_inverse f' i n", "case (gt1 n)"], ["proof (state)\nthis:\n  1 < n\n  \\<lbrakk>?k < n; \\<And>n. 0 < n \\<Longrightarrow> f n = f' n\\<rbrakk>\n  \\<Longrightarrow> dirichlet_inverse f i ?k = dirichlet_inverse f' i ?k\n  0 < ?n \\<Longrightarrow> f ?n = f' ?n\n\ngoal (3 subgoals):\n 1. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           \\<lbrakk>k < n;\n            \\<And>n. 0 < n \\<Longrightarrow> f n = f' n\\<rbrakk>\n           \\<Longrightarrow> dirichlet_inverse f i k =\n                             dirichlet_inverse f' i k;\n        \\<And>n. 0 < n \\<Longrightarrow> f n = f' n\\<rbrakk>\n       \\<Longrightarrow> dirichlet_inverse f i n = dirichlet_inverse f' i n", "have *: \"dirichlet_inverse f i k = dirichlet_inverse f' i k\" if \"k dvd n \\<and> k < n\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i k = dirichlet_inverse f' i k", "using that"], ["proof (prove)\nusing this:\n  k dvd n \\<and> k < n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i k = dirichlet_inverse f' i k", "by (intro gt1) auto"], ["proof (state)\nthis:\n  ?k dvd n \\<and> ?k < n \\<Longrightarrow>\n  dirichlet_inverse f i ?k = dirichlet_inverse f' i ?k\n\ngoal (3 subgoals):\n 1. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           \\<lbrakk>k < n;\n            \\<And>n. 0 < n \\<Longrightarrow> f n = f' n\\<rbrakk>\n           \\<Longrightarrow> dirichlet_inverse f i k =\n                             dirichlet_inverse f' i k;\n        \\<And>n. 0 < n \\<Longrightarrow> f n = f' n\\<rbrakk>\n       \\<Longrightarrow> dirichlet_inverse f i n = dirichlet_inverse f' i n", "have *: \"(\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d) =\n               (\\<Sum>d | d dvd n \\<and> d < n. f' (n div d) * dirichlet_inverse f' i d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> d < n.\n       f (n div d) * dirichlet_inverse f i d) =\n    (\\<Sum>d | d dvd n \\<and> d < n.\n       f' (n div d) * dirichlet_inverse f' i d)", "by (intro sum.cong refl) (subst gt1.prems, auto elim: dvdE simp: *)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d) =\n  (\\<Sum>d | d dvd n \\<and> d < n. f' (n div d) * dirichlet_inverse f' i d)\n\ngoal (3 subgoals):\n 1. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           \\<lbrakk>k < n;\n            \\<And>n. 0 < n \\<Longrightarrow> f n = f' n\\<rbrakk>\n           \\<Longrightarrow> dirichlet_inverse f i k =\n                             dirichlet_inverse f' i k;\n        \\<And>n. 0 < n \\<Longrightarrow> f n = f' n\\<rbrakk>\n       \\<Longrightarrow> dirichlet_inverse f i n = dirichlet_inverse f' i n", "consider \"n = 0\" | \"n = 1\" | \"n > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0 \\<Longrightarrow> thesis; n = 1 \\<Longrightarrow> thesis;\n     1 < n \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (3 subgoals):\n 1. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           \\<lbrakk>k < n;\n            \\<And>n. 0 < n \\<Longrightarrow> f n = f' n\\<rbrakk>\n           \\<Longrightarrow> dirichlet_inverse f i k =\n                             dirichlet_inverse f' i k;\n        \\<And>n. 0 < n \\<Longrightarrow> f n = f' n\\<rbrakk>\n       \\<Longrightarrow> dirichlet_inverse f i n = dirichlet_inverse f' i n", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i n", "by cases (insert *, simp_all add: dirichlet_inverse_gt_1 * cong: sum.cong)"], ["proof (state)\nthis:\n  dirichlet_inverse f i n = dirichlet_inverse f' i n\n\ngoal (2 subgoals):\n 1. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i 0 = dirichlet_inverse f' i 0\n 2. (\\<And>n. 0 < n \\<Longrightarrow> f n = f' n) \\<Longrightarrow>\n    dirichlet_inverse f i (Suc 0) = dirichlet_inverse f' i (Suc 0)", "qed auto"], ["proof (state)\nthis:\n  dirichlet_inverse f i n = dirichlet_inverse f' i n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i' n'", "with assms(2,3)"], ["proof (chain)\npicking this:\n  i = i'\n  n = n'\n  dirichlet_inverse f i n = dirichlet_inverse f' i n", "show ?thesis"], ["proof (prove)\nusing this:\n  i = i'\n  n = n'\n  dirichlet_inverse f i n = dirichlet_inverse f' i n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = dirichlet_inverse f' i' n'", "by simp"], ["proof (state)\nthis:\n  dirichlet_inverse f i n = dirichlet_inverse f' i' n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_inverse_gt_1':\n  assumes \"n > 1\"\n  shows   \"dirichlet_inverse f i n = \n             -i * dirichlet_prod (\\<lambda>n. if n = 1 then 0 else f n) (dirichlet_inverse f i) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    - i *\n    dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n     (dirichlet_inverse f i) n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    - i *\n    dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n     (dirichlet_inverse f i) n", "have \"dirichlet_prod (\\<lambda>n. if n = 1 then 0 else f n) (dirichlet_inverse f i) n = \n          (\\<Sum>d | d dvd n. (if n div d = Suc 0 then 0 else f (n div d)) * dirichlet_inverse f i d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n     (dirichlet_inverse f i) n =\n    (\\<Sum>d | d dvd n.\n       (if n div d = Suc 0 then 0::'a else f (n div d)) *\n       dirichlet_inverse f i d)", "by (simp add: dirichlet_prod_altdef1)"], ["proof (state)\nthis:\n  dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n   (dirichlet_inverse f i) n =\n  (\\<Sum>d | d dvd n.\n     (if n div d = Suc 0 then 0::'a else f (n div d)) *\n     dirichlet_inverse f i d)\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    - i *\n    dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n     (dirichlet_inverse f i) n", "also"], ["proof (state)\nthis:\n  dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n   (dirichlet_inverse f i) n =\n  (\\<Sum>d | d dvd n.\n     (if n div d = Suc 0 then 0::'a else f (n div d)) *\n     dirichlet_inverse f i d)\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    - i *\n    dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n     (dirichlet_inverse f i) n", "from assms"], ["proof (chain)\npicking this:\n  1 < n", "have \"\\<dots> = (\\<Sum>d | d dvd n \\<and> d \\<noteq> n. f (n div d) * dirichlet_inverse f i d)\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n.\n       (if n div d = Suc 0 then 0::'a else f (n div d)) *\n       dirichlet_inverse f i d) =\n    (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n       f (n div d) * dirichlet_inverse f i d)", "by (intro sum.mono_neutral_cong_right) (auto elim: dvdE)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n.\n     (if n div d = Suc 0 then 0::'a else f (n div d)) *\n     dirichlet_inverse f i d) =\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d)\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    - i *\n    dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n     (dirichlet_inverse f i) n", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n.\n     (if n div d = Suc 0 then 0::'a else f (n div d)) *\n     dirichlet_inverse f i d) =\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d)\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    - i *\n    dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n     (dirichlet_inverse f i) n", "from assms"], ["proof (chain)\npicking this:\n  1 < n", "have \"{d. d dvd n \\<and> d \\<noteq> n} = {d. d dvd n \\<and> d < n}\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. {d. d dvd n \\<and> d \\<noteq> n} = {d. d dvd n \\<and> d < n}", "by (auto dest: dvd_imp_le)"], ["proof (state)\nthis:\n  {d. d dvd n \\<and> d \\<noteq> n} = {d. d dvd n \\<and> d < n}\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    - i *\n    dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n     (dirichlet_inverse f i) n", "also"], ["proof (state)\nthis:\n  {d. d dvd n \\<and> d \\<noteq> n} = {d. d dvd n \\<and> d < n}\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    - i *\n    dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n     (dirichlet_inverse f i) n", "from assms"], ["proof (chain)\npicking this:\n  1 < n", "have \"-i * (\\<Sum>d\\<in>\\<dots>. f (n div d) * dirichlet_inverse f i d) = \n                          dirichlet_inverse f i n\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. - i *\n    (\\<Sum>d | d dvd n \\<and> d < n.\n       f (n div d) * dirichlet_inverse f i d) =\n    dirichlet_inverse f i n", "by (simp add: dirichlet_inverse_gt_1)"], ["proof (state)\nthis:\n  - i *\n  (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d) =\n  dirichlet_inverse f i n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    - i *\n    dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n     (dirichlet_inverse f i) n", "finally"], ["proof (chain)\npicking this:\n  - i *\n  dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n   (dirichlet_inverse f i) n =\n  dirichlet_inverse f i n", "show ?thesis"], ["proof (prove)\nusing this:\n  - i *\n  dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n   (dirichlet_inverse f i) n =\n  dirichlet_inverse f i n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    - i *\n    dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n     (dirichlet_inverse f i) n", ".."], ["proof (state)\nthis:\n  dirichlet_inverse f i n =\n  - i *\n  dirichlet_prod (\\<lambda>n. if n = 1 then 0::'a else f n)\n   (dirichlet_inverse f i) n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma of_int_dirichlet_prod: \n  \"of_int (dirichlet_prod f g n) = dirichlet_prod (\\<lambda>n. of_int (f n)) (\\<lambda>n. of_int (g n)) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int (dirichlet_prod f g n) =\n    dirichlet_prod (\\<lambda>n. of_int (f n)) (\\<lambda>n. of_int (g n)) n", "by (simp add: dirichlet_prod_def)"], ["", "lemma of_int_dirichlet_inverse: \n  \"of_int (dirichlet_inverse f i n) = dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int (dirichlet_inverse f i n) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) n", "proof (induction n rule: dirichlet_inverse_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. of_int (dirichlet_inverse f i 0) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) 0\n 2. of_int (dirichlet_inverse f i (Suc 0)) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           k < n \\<Longrightarrow>\n           of_int (dirichlet_inverse f i k) =\n           dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i)\n            k\\<rbrakk>\n       \\<Longrightarrow> of_int (dirichlet_inverse f i n) =\n                         dirichlet_inverse (\\<lambda>n. of_int (f n))\n                          (of_int i) n", "case (gt1 n)"], ["proof (state)\nthis:\n  1 < n\n  ?k < n \\<Longrightarrow>\n  of_int (dirichlet_inverse f i ?k) =\n  dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) ?k\n\ngoal (3 subgoals):\n 1. of_int (dirichlet_inverse f i 0) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) 0\n 2. of_int (dirichlet_inverse f i (Suc 0)) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           k < n \\<Longrightarrow>\n           of_int (dirichlet_inverse f i k) =\n           dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i)\n            k\\<rbrakk>\n       \\<Longrightarrow> of_int (dirichlet_inverse f i n) =\n                         dirichlet_inverse (\\<lambda>n. of_int (f n))\n                          (of_int i) n", "from gt1"], ["proof (chain)\npicking this:\n  1 < n\n  ?k < n \\<Longrightarrow>\n  of_int (dirichlet_inverse f i ?k) =\n  dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) ?k", "have \"(of_int (dirichlet_inverse f i n) :: 'a) = \n    - (of_int i * (\\<Sum>d | d dvd n \\<and> d < n. of_int (f (n div d) * dirichlet_inverse f i d)))\" \n     (is \"_ = - (_ * ?A)\")"], ["proof (prove)\nusing this:\n  1 < n\n  ?k < n \\<Longrightarrow>\n  of_int (dirichlet_inverse f i ?k) =\n  dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) ?k\n\ngoal (1 subgoal):\n 1. of_int (dirichlet_inverse f i n) =\n    - (of_int i *\n       (\\<Sum>d | d dvd n \\<and> d < n.\n          of_int (f (n div d) * dirichlet_inverse f i d)))", "by (simp add: dirichlet_inverse_gt_1 of_int_dirichlet_prod)"], ["proof (state)\nthis:\n  of_int (dirichlet_inverse f i n) =\n  - (of_int i *\n     (\\<Sum>d | d dvd n \\<and> d < n.\n        of_int (f (n div d) * dirichlet_inverse f i d)))\n\ngoal (3 subgoals):\n 1. of_int (dirichlet_inverse f i 0) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) 0\n 2. of_int (dirichlet_inverse f i (Suc 0)) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           k < n \\<Longrightarrow>\n           of_int (dirichlet_inverse f i k) =\n           dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i)\n            k\\<rbrakk>\n       \\<Longrightarrow> of_int (dirichlet_inverse f i n) =\n                         dirichlet_inverse (\\<lambda>n. of_int (f n))\n                          (of_int i) n", "also"], ["proof (state)\nthis:\n  of_int (dirichlet_inverse f i n) =\n  - (of_int i *\n     (\\<Sum>d | d dvd n \\<and> d < n.\n        of_int (f (n div d) * dirichlet_inverse f i d)))\n\ngoal (3 subgoals):\n 1. of_int (dirichlet_inverse f i 0) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) 0\n 2. of_int (dirichlet_inverse f i (Suc 0)) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           k < n \\<Longrightarrow>\n           of_int (dirichlet_inverse f i k) =\n           dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i)\n            k\\<rbrakk>\n       \\<Longrightarrow> of_int (dirichlet_inverse f i n) =\n                         dirichlet_inverse (\\<lambda>n. of_int (f n))\n                          (of_int i) n", "have \"?A = (\\<Sum>d | d dvd n \\<and> d < n. of_int (f (n div d)) * \n                  dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n \\<and> d < n.\n       of_int (f (n div d) * dirichlet_inverse f i d)) =\n    (\\<Sum>d | d dvd n \\<and> d < n.\n       of_int (f (n div d)) *\n       dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) d)", "by (intro sum.cong refl) (auto simp: gt1)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n \\<and> d < n.\n     of_int (f (n div d) * dirichlet_inverse f i d)) =\n  (\\<Sum>d | d dvd n \\<and> d < n.\n     of_int (f (n div d)) *\n     dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) d)\n\ngoal (3 subgoals):\n 1. of_int (dirichlet_inverse f i 0) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) 0\n 2. of_int (dirichlet_inverse f i (Suc 0)) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           k < n \\<Longrightarrow>\n           of_int (dirichlet_inverse f i k) =\n           dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i)\n            k\\<rbrakk>\n       \\<Longrightarrow> of_int (dirichlet_inverse f i n) =\n                         dirichlet_inverse (\\<lambda>n. of_int (f n))\n                          (of_int i) n", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n \\<and> d < n.\n     of_int (f (n div d) * dirichlet_inverse f i d)) =\n  (\\<Sum>d | d dvd n \\<and> d < n.\n     of_int (f (n div d)) *\n     dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) d)\n\ngoal (3 subgoals):\n 1. of_int (dirichlet_inverse f i 0) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) 0\n 2. of_int (dirichlet_inverse f i (Suc 0)) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           k < n \\<Longrightarrow>\n           of_int (dirichlet_inverse f i k) =\n           dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i)\n            k\\<rbrakk>\n       \\<Longrightarrow> of_int (dirichlet_inverse f i n) =\n                         dirichlet_inverse (\\<lambda>n. of_int (f n))\n                          (of_int i) n", "have \"-(of_int i * \\<dots>) = dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (of_int i *\n       (\\<Sum>d | d dvd n \\<and> d < n.\n          of_int (f (n div d)) *\n          dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) d)) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) n", "using gt1.hyps"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. - (of_int i *\n       (\\<Sum>d | d dvd n \\<and> d < n.\n          of_int (f (n div d)) *\n          dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) d)) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) n", "by (simp add: dirichlet_inverse_gt_1)"], ["proof (state)\nthis:\n  - (of_int i *\n     (\\<Sum>d | d dvd n \\<and> d < n.\n        of_int (f (n div d)) *\n        dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) d)) =\n  dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) n\n\ngoal (3 subgoals):\n 1. of_int (dirichlet_inverse f i 0) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) 0\n 2. of_int (dirichlet_inverse f i (Suc 0)) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) (Suc 0)\n 3. \\<And>n.\n       \\<lbrakk>1 < n;\n        \\<And>k.\n           k < n \\<Longrightarrow>\n           of_int (dirichlet_inverse f i k) =\n           dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i)\n            k\\<rbrakk>\n       \\<Longrightarrow> of_int (dirichlet_inverse f i n) =\n                         dirichlet_inverse (\\<lambda>n. of_int (f n))\n                          (of_int i) n", "finally"], ["proof (chain)\npicking this:\n  of_int (dirichlet_inverse f i n) =\n  dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) n", "show ?case"], ["proof (prove)\nusing this:\n  of_int (dirichlet_inverse f i n) =\n  dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) n\n\ngoal (1 subgoal):\n 1. of_int (dirichlet_inverse f i n) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) n", "."], ["proof (state)\nthis:\n  of_int (dirichlet_inverse f i n) =\n  dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) n\n\ngoal (2 subgoals):\n 1. of_int (dirichlet_inverse f i 0) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) 0\n 2. of_int (dirichlet_inverse f i (Suc 0)) =\n    dirichlet_inverse (\\<lambda>n. of_int (f n)) (of_int i) (Suc 0)", "qed simp_all"], ["", "lemma dirichlet_inverse_code [code]:\n  \"dirichlet_inverse f i n = (if n = 0 then 0 else if n = 1 then i else\n     -i * fold_atLeastAtMost_nat (\\<lambda>d acc. if d dvd n then f (n div d) * \n     dirichlet_inverse f i d + acc else acc) 1 (n - 1) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "consider \"n = 0\" | \"n = 1\" | \"n > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0 \\<Longrightarrow> thesis; n = 1 \\<Longrightarrow> thesis;\n     1 < n \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "assume n: \"n > 1\""], ["proof (state)\nthis:\n  1 < n\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "have *: \"(\\<lambda>d acc. if d dvd n then f (n div d) * dirichlet_inverse f i d + acc else acc) =\n               (\\<lambda>d acc. (if d dvd n then f (n div d) * dirichlet_inverse f i d else 0) + acc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>d acc.\n        if d dvd n then f (n div d) * dirichlet_inverse f i d + acc\n        else acc) =\n    (\\<lambda>d.\n        (+) (if d dvd n then f (n div d) * dirichlet_inverse f i d\n             else (0::'a)))", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  (\\<lambda>d acc.\n      if d dvd n then f (n div d) * dirichlet_inverse f i d + acc\n      else acc) =\n  (\\<lambda>d.\n      (+) (if d dvd n then f (n div d) * dirichlet_inverse f i d\n           else (0::'a)))\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "have \"fold_atLeastAtMost_nat (\\<lambda>d acc. if d dvd n then f (n div d) * \n            dirichlet_inverse f i d + acc else acc) 1 (n - 1) 0 = \n            (\\<Sum>d = 1..n - 1. if d dvd n then f (n div d) * dirichlet_inverse f i d else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_atLeastAtMost_nat\n     (\\<lambda>d acc.\n         if d dvd n then f (n div d) * dirichlet_inverse f i d + acc\n         else acc)\n     1 (n - 1) (0::'a) =\n    (\\<Sum>d = 1..n - 1.\n        if d dvd n then f (n div d) * dirichlet_inverse f i d else (0::'a))", "by (subst *, subst sum_atLeastAtMost_code [symmetric]) simp"], ["proof (state)\nthis:\n  fold_atLeastAtMost_nat\n   (\\<lambda>d acc.\n       if d dvd n then f (n div d) * dirichlet_inverse f i d + acc else acc)\n   1 (n - 1) (0::'a) =\n  (\\<Sum>d = 1..n - 1.\n      if d dvd n then f (n div d) * dirichlet_inverse f i d else (0::'a))\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "also"], ["proof (state)\nthis:\n  fold_atLeastAtMost_nat\n   (\\<lambda>d acc.\n       if d dvd n then f (n div d) * dirichlet_inverse f i d + acc else acc)\n   1 (n - 1) (0::'a) =\n  (\\<Sum>d = 1..n - 1.\n      if d dvd n then f (n div d) * dirichlet_inverse f i d else (0::'a))\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "from n"], ["proof (chain)\npicking this:\n  1 < n", "have \"\\<dots> = (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d)\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d = 1..n - 1.\n        if d dvd n then f (n div d) * dirichlet_inverse f i d\n        else (0::'a)) =\n    (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d)", "by (intro sum.mono_neutral_cong_right; cases n)\n         (auto dest: dvd_imp_le elim: dvdE simp: Suc_le_eq intro!: Nat.gr0I)"], ["proof (state)\nthis:\n  (\\<Sum>d = 1..n - 1.\n      if d dvd n then f (n div d) * dirichlet_inverse f i d else (0::'a)) =\n  (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "also"], ["proof (state)\nthis:\n  (\\<Sum>d = 1..n - 1.\n      if d dvd n then f (n div d) * dirichlet_inverse f i d else (0::'a)) =\n  (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "from n"], ["proof (chain)\npicking this:\n  1 < n", "have \"-i * \\<dots> = dirichlet_inverse f i n\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. - i *\n    (\\<Sum>d | d dvd n \\<and> d < n.\n       f (n div d) * dirichlet_inverse f i d) =\n    dirichlet_inverse f i n", "by (simp add: dirichlet_inverse_gt_1)"], ["proof (state)\nthis:\n  - i *\n  (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d) =\n  dirichlet_inverse f i n\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "finally"], ["proof (chain)\npicking this:\n  - i *\n  fold_atLeastAtMost_nat\n   (\\<lambda>d acc.\n       if d dvd n then f (n div d) * dirichlet_inverse f i d + acc else acc)\n   1 (n - 1) (0::'a) =\n  dirichlet_inverse f i n", "show ?thesis"], ["proof (prove)\nusing this:\n  - i *\n  fold_atLeastAtMost_nat\n   (\\<lambda>d acc.\n       if d dvd n then f (n div d) * dirichlet_inverse f i d + acc else acc)\n   1 (n - 1) (0::'a) =\n  dirichlet_inverse f i n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "using n"], ["proof (prove)\nusing this:\n  - i *\n  fold_atLeastAtMost_nat\n   (\\<lambda>d acc.\n       if d dvd n then f (n div d) * dirichlet_inverse f i d + acc else acc)\n   1 (n - 1) (0::'a) =\n  dirichlet_inverse f i n\n  1 < n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "by simp"], ["proof (state)\nthis:\n  dirichlet_inverse f i n =\n  (if n = 0 then 0::'a\n   else if n = 1 then i\n        else - i *\n             fold_atLeastAtMost_nat\n              (\\<lambda>d acc.\n                  if d dvd n\n                  then f (n div d) * dirichlet_inverse f i d + acc else acc)\n              1 (n - 1) (0::'a))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_inverse f i n =\n    (if n = 0 then 0::'a\n     else if n = 1 then i\n          else - i *\n               fold_atLeastAtMost_nat\n                (\\<lambda>d acc.\n                    if d dvd n\n                    then f (n div d) * dirichlet_inverse f i d + acc\n                    else acc)\n                1 (n - 1) (0::'a))", "qed auto"], ["proof (state)\nthis:\n  dirichlet_inverse f i n =\n  (if n = 0 then 0::'a\n   else if n = 1 then i\n        else - i *\n             fold_atLeastAtMost_nat\n              (\\<lambda>d acc.\n                  if d dvd n\n                  then f (n div d) * dirichlet_inverse f i d + acc else acc)\n              1 (n - 1) (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_inverse:\n  assumes \"f 1 * i = 1\"\n  shows   \"dirichlet_prod f (dirichlet_inverse f i) = (\\<lambda>n. if n = 1 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_inverse f i) =\n    (\\<lambda>n. if n = 1 then 1::'a else (0::'a))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       dirichlet_prod f (dirichlet_inverse f i) n =\n       (if n = 1 then 1::'a else (0::'a))", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       dirichlet_prod f (dirichlet_inverse f i) n =\n       (if n = 1 then 1::'a else (0::'a))", "consider \"n = 0\" | \"n = 1\" | \"n > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = 0 \\<Longrightarrow> thesis; n = 1 \\<Longrightarrow> thesis;\n     1 < n \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       dirichlet_prod f (dirichlet_inverse f i) n =\n       (if n = 1 then 1::'a else (0::'a))", "thus \"dirichlet_prod f (dirichlet_inverse f i) n = (if n = 1 then 1 else 0)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>n = 0 \\<Longrightarrow> ?thesis; n = 1 \\<Longrightarrow> ?thesis;\n   1 < n \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "assume n: \"n > 1\""], ["proof (state)\nthis:\n  1 < n\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "have fin: \"finite {d. d dvd n \\<and> d \\<noteq> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {d. d dvd n \\<and> d \\<noteq> n}", "by (rule finite_subset[of _ \"{d. d dvd n}\"]) (insert n, auto)"], ["proof (state)\nthis:\n  finite {d. d dvd n \\<and> d \\<noteq> n}\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "have \"dirichlet_prod f (dirichlet_inverse f i) n = \n            (\\<Sum>d | d dvd n. f (n div d) * dirichlet_inverse f i d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_inverse f i) n =\n    (\\<Sum>d | d dvd n. f (n div d) * dirichlet_inverse f i d)", "by (simp add: dirichlet_prod_altdef1)"], ["proof (state)\nthis:\n  dirichlet_prod f (dirichlet_inverse f i) n =\n  (\\<Sum>d | d dvd n. f (n div d) * dirichlet_inverse f i d)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "also"], ["proof (state)\nthis:\n  dirichlet_prod f (dirichlet_inverse f i) n =\n  (\\<Sum>d | d dvd n. f (n div d) * dirichlet_inverse f i d)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "have \"{d. d dvd n} = insert n {d. d dvd n \\<and> d \\<noteq> n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {d. d dvd n} = insert n {d. d dvd n \\<and> d \\<noteq> n}", "by auto"], ["proof (state)\nthis:\n  {d. d dvd n} = insert n {d. d dvd n \\<and> d \\<noteq> n}\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "also"], ["proof (state)\nthis:\n  {d. d dvd n} = insert n {d. d dvd n \\<and> d \\<noteq> n}\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "have \"(\\<Sum>d\\<in>\\<dots>. f (n div d) * dirichlet_inverse f i d) = \n                 f 1 * dirichlet_inverse f i n + \n                 (\\<Sum>d | d dvd n \\<and> d \\<noteq> n. f (n div d) * dirichlet_inverse f i d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d\\<in>insert n {d. d dvd n \\<and> d \\<noteq> n}.\n       f (n div d) * dirichlet_inverse f i d) =\n    f 1 * dirichlet_inverse f i n +\n    (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n       f (n div d) * dirichlet_inverse f i d)", "using fin n"], ["proof (prove)\nusing this:\n  finite {d. d dvd n \\<and> d \\<noteq> n}\n  1 < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>d\\<in>insert n {d. d dvd n \\<and> d \\<noteq> n}.\n       f (n div d) * dirichlet_inverse f i d) =\n    f 1 * dirichlet_inverse f i n +\n    (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n       f (n div d) * dirichlet_inverse f i d)", "by (subst sum.insert) auto"], ["proof (state)\nthis:\n  (\\<Sum>d\\<in>insert n {d. d dvd n \\<and> d \\<noteq> n}.\n     f (n div d) * dirichlet_inverse f i d) =\n  f 1 * dirichlet_inverse f i n +\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "also"], ["proof (state)\nthis:\n  (\\<Sum>d\\<in>insert n {d. d dvd n \\<and> d \\<noteq> n}.\n     f (n div d) * dirichlet_inverse f i d) =\n  f 1 * dirichlet_inverse f i n +\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "from n"], ["proof (chain)\npicking this:\n  1 < n", "have \"dirichlet_inverse f i n = \n      - i * (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d)\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n =\n    - i *\n    (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d)", "by (subst dirichlet_inverse_gt_1) auto"], ["proof (state)\nthis:\n  dirichlet_inverse f i n =\n  - i *\n  (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "also"], ["proof (state)\nthis:\n  dirichlet_inverse f i n =\n  - i *\n  (\\<Sum>d | d dvd n \\<and> d < n. f (n div d) * dirichlet_inverse f i d)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "from n"], ["proof (chain)\npicking this:\n  1 < n", "have \"{d. d dvd n \\<and> d < n} = {d. d dvd n \\<and> d \\<noteq> n}\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. {d. d dvd n \\<and> d < n} = {d. d dvd n \\<and> d \\<noteq> n}", "by (auto dest: dvd_imp_le)"], ["proof (state)\nthis:\n  {d. d dvd n \\<and> d < n} = {d. d dvd n \\<and> d \\<noteq> n}\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "also"], ["proof (state)\nthis:\n  {d. d dvd n \\<and> d < n} = {d. d dvd n \\<and> d \\<noteq> n}\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "have \"f 1 * (- i * \n                   (\\<Sum>d | d dvd n \\<and> d \\<noteq> n. f (n div d) * dirichlet_inverse f i d)) =\n               -(f 1 * i) * \n                   (\\<Sum>d | d dvd n \\<and> d \\<noteq> n. f (n div d) * dirichlet_inverse f i d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 1 *\n    (- i *\n     (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n        f (n div d) * dirichlet_inverse f i d)) =\n    - (f 1 * i) *\n    (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n       f (n div d) * dirichlet_inverse f i d)", "by (simp add: mult.assoc)"], ["proof (state)\nthis:\n  f 1 *\n  (- i *\n   (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n      f (n div d) * dirichlet_inverse f i d)) =\n  - (f 1 * i) *\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "also"], ["proof (state)\nthis:\n  f 1 *\n  (- i *\n   (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n      f (n div d) * dirichlet_inverse f i d)) =\n  - (f 1 * i) *\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "have \"f 1 * i = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 1 * i = (1::'a)", "by fact"], ["proof (state)\nthis:\n  f 1 * i = (1::'a)\n\ngoal (3 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 3. 1 < n \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod f (dirichlet_inverse f i) n =\n  - (1::'a) *\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d) +\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d)", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod f (dirichlet_inverse f i) n =\n  - (1::'a) *\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d) +\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d)\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "using n"], ["proof (prove)\nusing this:\n  dirichlet_prod f (dirichlet_inverse f i) n =\n  - (1::'a) *\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d) +\n  (\\<Sum>d | d dvd n \\<and> d \\<noteq> n.\n     f (n div d) * dirichlet_inverse f i d)\n  1 < n\n\ngoal (1 subgoal):\n 1. dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "by simp"], ["proof (state)\nthis:\n  dirichlet_prod f (dirichlet_inverse f i) n =\n  (if n = 1 then 1::'a else (0::'a))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))\n 2. n = 1 \\<Longrightarrow>\n    dirichlet_prod f (dirichlet_inverse f i) n =\n    (if n = 1 then 1::'a else (0::'a))", "qed (insert assms, simp_all add: dirichlet_prod_def)"], ["proof (state)\nthis:\n  dirichlet_prod f (dirichlet_inverse f i) n =\n  (if n = 1 then 1::'a else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_inverse':\n  assumes \"f 1 * i = 1\"\n  shows   \"dirichlet_prod (dirichlet_inverse f i) f = (\\<lambda>n. if n = 1 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_inverse f i) f =\n    (\\<lambda>n. if n = 1 then 1::'a else (0::'a))", "using dirichlet_prod_inverse[of f] assms"], ["proof (prove)\nusing this:\n  f 1 * ?i = (1::'a) \\<Longrightarrow>\n  dirichlet_prod f (dirichlet_inverse f ?i) =\n  (\\<lambda>n. if n = 1 then 1::'a else (0::'a))\n  f 1 * i = (1::'a)\n\ngoal (1 subgoal):\n 1. dirichlet_prod (dirichlet_inverse f i) f =\n    (\\<lambda>n. if n = 1 then 1::'a else (0::'a))", "by (simp add: dirichlet_prod_commutes)"], ["", "lemma dirichlet_inverse_noninvertible:\n  assumes \"f (Suc 0) = (0 :: 'a :: {comm_ring_1})\" \"i = 0\"\n  shows   \"dirichlet_inverse f i n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  f (Suc 0) = (0::'a)\n  i = (0::'a)\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f i n = (0::'a)", "by (induction f i n rule: dirichlet_inverse.induct) (auto simp: dirichlet_inverse.simps)"], ["", "lemma multiplicative_dirichlet_prod:\n  assumes \"multiplicative_function f\" \n  assumes \"multiplicative_function g\"\n  shows   \"multiplicative_function (dirichlet_prod f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (dirichlet_prod f g)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicative_function (dirichlet_prod f g)", "interpret f: multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicative_function (dirichlet_prod f g)", "interpret g: multiplicative_function g"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function g", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicative_function (dirichlet_prod f g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (dirichlet_prod f g)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. dirichlet_prod f g 0 = (0::'a)\n 2. dirichlet_prod f g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (a * b) =\n                         dirichlet_prod f g a * dirichlet_prod f g b", "fix a b :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. dirichlet_prod f g 0 = (0::'a)\n 2. dirichlet_prod f g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (a * b) =\n                         dirichlet_prod f g a * dirichlet_prod f g b", "assume \"a > 1\" \"b > 1\" and coprime: \"coprime a b\""], ["proof (state)\nthis:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (3 subgoals):\n 1. dirichlet_prod f g 0 = (0::'a)\n 2. dirichlet_prod f g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (a * b) =\n                         dirichlet_prod f g a * dirichlet_prod f g b", "hence \"dirichlet_prod f g (a * b) = \n             (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f (r * s) * g (a * b div (r * s)))\""], ["proof (prove)\nusing this:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g (a * b) =\n    (\\<Sum>r | r dvd a.\n       \\<Sum>s | s dvd b. f (r * s) * g (a * b div (r * s)))", "by (simp add: dirichlet_prod_def sum_divisors_coprime_mult)"], ["proof (state)\nthis:\n  dirichlet_prod f g (a * b) =\n  (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f (r * s) * g (a * b div (r * s)))\n\ngoal (3 subgoals):\n 1. dirichlet_prod f g 0 = (0::'a)\n 2. dirichlet_prod f g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (a * b) =\n                         dirichlet_prod f g a * dirichlet_prod f g b", "also"], ["proof (state)\nthis:\n  dirichlet_prod f g (a * b) =\n  (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f (r * s) * g (a * b div (r * s)))\n\ngoal (3 subgoals):\n 1. dirichlet_prod f g 0 = (0::'a)\n 2. dirichlet_prod f g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (a * b) =\n                         dirichlet_prod f g a * dirichlet_prod f g b", "have \"\\<dots> = (\\<Sum>r | r dvd a. \\<Sum>s | s dvd b. f r * f s * g (a div r) * g (b div s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a.\n       \\<Sum>s | s dvd b. f (r * s) * g (a * b div (r * s))) =\n    (\\<Sum>r | r dvd a.\n       \\<Sum>s | s dvd b. f r * f s * g (a div r) * g (b div s))", "using \\<open>coprime a b\\<close>"], ["proof (prove)\nusing this:\n  coprime a b\n\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a.\n       \\<Sum>s | s dvd b. f (r * s) * g (a * b div (r * s))) =\n    (\\<Sum>r | r dvd a.\n       \\<Sum>s | s dvd b. f r * f s * g (a div r) * g (b div s))", "proof (rule sum_coprime_dvd_cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>coprime r s; r dvd a; s dvd b\\<rbrakk>\n       \\<Longrightarrow> f (r * s) * g (a * b div (r * s)) =\n                         f r * f s * g (a div r) * g (b div s)", "fix r s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>coprime r s; r dvd a; s dvd b\\<rbrakk>\n       \\<Longrightarrow> f (r * s) * g (a * b div (r * s)) =\n                         f r * f s * g (a div r) * g (b div s)", "assume \"coprime r s\" and \"r dvd a\" and \"s dvd b\""], ["proof (state)\nthis:\n  coprime r s\n  r dvd a\n  s dvd b\n\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>coprime r s; r dvd a; s dvd b\\<rbrakk>\n       \\<Longrightarrow> f (r * s) * g (a * b div (r * s)) =\n                         f r * f s * g (a div r) * g (b div s)", "with \\<open>a > 1\\<close> \\<open>b > 1\\<close>"], ["proof (chain)\npicking this:\n  1 < a\n  1 < b\n  coprime r s\n  r dvd a\n  s dvd b", "have \"r > 0\" \"s > 0\""], ["proof (prove)\nusing this:\n  1 < a\n  1 < b\n  coprime r s\n  r dvd a\n  s dvd b\n\ngoal (1 subgoal):\n 1. 0 < r &&& 0 < s", "by (auto intro: ccontr)"], ["proof (state)\nthis:\n  0 < r\n  0 < s\n\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>coprime r s; r dvd a; s dvd b\\<rbrakk>\n       \\<Longrightarrow> f (r * s) * g (a * b div (r * s)) =\n                         f r * f s * g (a div r) * g (b div s)", "from \\<open>coprime r s\\<close>"], ["proof (chain)\npicking this:\n  coprime r s", "have \"f (r * s) = f r * f s\""], ["proof (prove)\nusing this:\n  coprime r s\n\ngoal (1 subgoal):\n 1. f (r * s) = f r * f s", "by (rule f.mult_coprime)"], ["proof (state)\nthis:\n  f (r * s) = f r * f s\n\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>coprime r s; r dvd a; s dvd b\\<rbrakk>\n       \\<Longrightarrow> f (r * s) * g (a * b div (r * s)) =\n                         f r * f s * g (a div r) * g (b div s)", "moreover"], ["proof (state)\nthis:\n  f (r * s) = f r * f s\n\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>coprime r s; r dvd a; s dvd b\\<rbrakk>\n       \\<Longrightarrow> f (r * s) * g (a * b div (r * s)) =\n                         f r * f s * g (a div r) * g (b div s)", "from \\<open>coprime a b\\<close>"], ["proof (chain)\npicking this:\n  coprime a b", "have \\<open>coprime (a div r) (b div s)\\<close>"], ["proof (prove)\nusing this:\n  coprime a b\n\ngoal (1 subgoal):\n 1. coprime (a div r) (b div s)", "using \\<open>r > 0\\<close> \\<open>s > 0\\<close> \\<open>r dvd a\\<close> \\<open>s dvd b\\<close> dvd_div_iff_mult [of r a] dvd_div_iff_mult [of s b]"], ["proof (prove)\nusing this:\n  coprime a b\n  0 < r\n  0 < s\n  r dvd a\n  s dvd b\n  \\<lbrakk>r \\<noteq> 0; r dvd a\\<rbrakk>\n  \\<Longrightarrow> (?a dvd a div r) = (?a * r dvd a)\n  \\<lbrakk>s \\<noteq> 0; s dvd b\\<rbrakk>\n  \\<Longrightarrow> (?a dvd b div s) = (?a * s dvd b)\n\ngoal (1 subgoal):\n 1. coprime (a div r) (b div s)", "by (auto dest: coprime_imp_coprime dvd_mult_left)"], ["proof (state)\nthis:\n  coprime (a div r) (b div s)\n\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>coprime r s; r dvd a; s dvd b\\<rbrakk>\n       \\<Longrightarrow> f (r * s) * g (a * b div (r * s)) =\n                         f r * f s * g (a div r) * g (b div s)", "then"], ["proof (chain)\npicking this:\n  coprime (a div r) (b div s)", "have \"g (a div r * (b div s)) = g (a div r) * g (b div s)\""], ["proof (prove)\nusing this:\n  coprime (a div r) (b div s)\n\ngoal (1 subgoal):\n 1. g (a div r * (b div s)) = g (a div r) * g (b div s)", "by (rule g.mult_coprime)"], ["proof (state)\nthis:\n  g (a div r * (b div s)) = g (a div r) * g (b div s)\n\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>coprime r s; r dvd a; s dvd b\\<rbrakk>\n       \\<Longrightarrow> f (r * s) * g (a * b div (r * s)) =\n                         f r * f s * g (a div r) * g (b div s)", "ultimately"], ["proof (chain)\npicking this:\n  f (r * s) = f r * f s\n  g (a div r * (b div s)) = g (a div r) * g (b div s)", "show \"f (r * s) * g (a * b div (r * s)) = f r * f s * g (a div r) * g (b div s)\""], ["proof (prove)\nusing this:\n  f (r * s) = f r * f s\n  g (a div r * (b div s)) = g (a div r) * g (b div s)\n\ngoal (1 subgoal):\n 1. f (r * s) * g (a * b div (r * s)) =\n    f r * f s * g (a div r) * g (b div s)", "using \\<open>r dvd a\\<close> \\<open>s dvd b\\<close>"], ["proof (prove)\nusing this:\n  f (r * s) = f r * f s\n  g (a div r * (b div s)) = g (a div r) * g (b div s)\n  r dvd a\n  s dvd b\n\ngoal (1 subgoal):\n 1. f (r * s) * g (a * b div (r * s)) =\n    f r * f s * g (a div r) * g (b div s)", "by (simp add: div_mult_div_if_dvd ac_simps)"], ["proof (state)\nthis:\n  f (r * s) * g (a * b div (r * s)) = f r * f s * g (a div r) * g (b div s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a.\n     \\<Sum>s | s dvd b. f (r * s) * g (a * b div (r * s))) =\n  (\\<Sum>r | r dvd a.\n     \\<Sum>s | s dvd b. f r * f s * g (a div r) * g (b div s))\n\ngoal (3 subgoals):\n 1. dirichlet_prod f g 0 = (0::'a)\n 2. dirichlet_prod f g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (a * b) =\n                         dirichlet_prod f g a * dirichlet_prod f g b", "also"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a.\n     \\<Sum>s | s dvd b. f (r * s) * g (a * b div (r * s))) =\n  (\\<Sum>r | r dvd a.\n     \\<Sum>s | s dvd b. f r * f s * g (a div r) * g (b div s))\n\ngoal (3 subgoals):\n 1. dirichlet_prod f g 0 = (0::'a)\n 2. dirichlet_prod f g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (a * b) =\n                         dirichlet_prod f g a * dirichlet_prod f g b", "have \"\\<dots> = dirichlet_prod f g a * dirichlet_prod f g b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a.\n       \\<Sum>s | s dvd b. f r * f s * g (a div r) * g (b div s)) =\n    dirichlet_prod f g a * dirichlet_prod f g b", "unfolding dirichlet_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a.\n       \\<Sum>s | s dvd b. f r * f s * g (a div r) * g (b div s)) =\n    (\\<Sum>d | d dvd a. f d * g (a div d)) *\n    (\\<Sum>d | d dvd b. f d * g (b div d))", "by (simp add: sum_product mult_ac)"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a.\n     \\<Sum>s | s dvd b. f r * f s * g (a div r) * g (b div s)) =\n  dirichlet_prod f g a * dirichlet_prod f g b\n\ngoal (3 subgoals):\n 1. dirichlet_prod f g 0 = (0::'a)\n 2. dirichlet_prod f g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (a * b) =\n                         dirichlet_prod f g a * dirichlet_prod f g b", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod f g (a * b) = dirichlet_prod f g a * dirichlet_prod f g b", "show \"dirichlet_prod f g (a * b) = \\<dots>\""], ["proof (prove)\nusing this:\n  dirichlet_prod f g (a * b) = dirichlet_prod f g a * dirichlet_prod f g b\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g (a * b) = dirichlet_prod f g a * dirichlet_prod f g b", "."], ["proof (state)\nthis:\n  dirichlet_prod f g (a * b) = dirichlet_prod f g a * dirichlet_prod f g b\n\ngoal (2 subgoals):\n 1. dirichlet_prod f g 0 = (0::'a)\n 2. dirichlet_prod f g 1 = (1::'a)", "qed simp_all"], ["proof (state)\nthis:\n  multiplicative_function (dirichlet_prod f g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multiplicative_dirichlet_prodD1:\n  fixes f g :: \"nat \\<Rightarrow> 'a :: comm_semiring_1_cancel\"\n  assumes \"multiplicative_function (dirichlet_prod f g)\"\n  assumes \"multiplicative_function f\"\n  assumes [simp]: \"g 0 = 0\"\n  shows   \"multiplicative_function g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicative_function g", "interpret f: multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicative_function g", "interpret fg: multiplicative_function \"dirichlet_prod f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (dirichlet_prod f g)", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicative_function g", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function g", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. g 0 = (0::'a)\n 2. g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"dirichlet_prod f g (Suc 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g (Suc 0) = (1::'a)", "by (rule fg.Suc_0)"], ["proof (state)\nthis:\n  dirichlet_prod f g (Suc 0) = (1::'a)\n\ngoal (3 subgoals):\n 1. g 0 = (0::'a)\n 2. g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  dirichlet_prod f g (Suc 0) = (1::'a)\n\ngoal (3 subgoals):\n 1. g 0 = (0::'a)\n 2. g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"dirichlet_prod f g (Suc 0) = g 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g (Suc 0) = g 1", "by (subst dirichlet_prod_Suc_0) simp"], ["proof (state)\nthis:\n  dirichlet_prod f g (Suc 0) = g 1\n\ngoal (3 subgoals):\n 1. g 0 = (0::'a)\n 2. g 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "finally"], ["proof (chain)\npicking this:\n  g 1 = (1::'a)", "show \"g 1 = 1\""], ["proof (prove)\nusing this:\n  g 1 = (1::'a)\n\ngoal (1 subgoal):\n 1. g 1 = (1::'a)", "by simp"], ["proof (state)\nthis:\n  g 1 = (1::'a)\n\ngoal (2 subgoals):\n 1. g 0 = (0::'a)\n 2. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. g 0 = (0::'a)\n 2. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "fix a b :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. g 0 = (0::'a)\n 2. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "assume ab: \"a > 1\" \"b > 1\" \"coprime a b\""], ["proof (state)\nthis:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (2 subgoals):\n 1. g 0 = (0::'a)\n 2. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "hence \"a > 0\" \"b > 0\" \"coprime a b\""], ["proof (prove)\nusing this:\n  1 < a\n  1 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. 0 < a &&& 0 < b &&& coprime a b", "by simp_all"], ["proof (state)\nthis:\n  0 < a\n  0 < b\n  coprime a b\n\ngoal (2 subgoals):\n 1. g 0 = (0::'a)\n 2. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "thus \"g (a * b) = g a * g b\""], ["proof (prove)\nusing this:\n  0 < a\n  0 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. g (a * b) = g a * g b", "proof (induction \"a * b\" arbitrary: a b rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "case (less a b)"], ["proof (state)\nthis:\n  \\<lbrakk>?a * ?b < a * b; 0 < ?a; 0 < ?b; coprime ?a ?b\\<rbrakk>\n  \\<Longrightarrow> g (?a * ?b) = g ?a * g ?b\n  0 < a\n  0 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"dirichlet_prod f g (a * b) + g a * g b = \n              (\\<Sum>r | r dvd a * b. f r * g (a * b div r)) + g a * g b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g (a * b) + g a * g b =\n    (\\<Sum>r | r dvd a * b. f r * g (a * b div r)) + g a * g b", "by (simp add: dirichlet_prod_def)"], ["proof (state)\nthis:\n  dirichlet_prod f g (a * b) + g a * g b =\n  (\\<Sum>r | r dvd a * b. f r * g (a * b div r)) + g a * g b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  dirichlet_prod f g (a * b) + g a * g b =\n  (\\<Sum>r | r dvd a * b. f r * g (a * b div r)) + g a * g b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"{r. r dvd a * b} = insert 1 {r. r dvd a * b \\<and> r \\<noteq> 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {r. r dvd a * b} = insert 1 {r. r dvd a * b \\<and> r \\<noteq> 1}", "by auto"], ["proof (state)\nthis:\n  {r. r dvd a * b} = insert 1 {r. r dvd a * b \\<and> r \\<noteq> 1}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  {r. r dvd a * b} = insert 1 {r. r dvd a * b \\<and> r \\<noteq> 1}\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"(\\<Sum>r\\<in>\\<dots>. f r * g (a * b div r)) + g a * g b = \n                   g (a * b) + ((\\<Sum>r | r dvd a * b \\<and> r \\<noteq> 1. f r * g (a * b div r)) + g a * g b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r\\<in>insert 1 {r. r dvd a * b \\<and> r \\<noteq> 1}.\n       f r * g (a * b div r)) +\n    g a * g b =\n    g (a * b) +\n    ((\\<Sum>r | r dvd a * b \\<and> r \\<noteq> 1. f r * g (a * b div r)) +\n     g a * g b)", "using less.prems"], ["proof (prove)\nusing this:\n  0 < a\n  0 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. (\\<Sum>r\\<in>insert 1 {r. r dvd a * b \\<and> r \\<noteq> 1}.\n       f r * g (a * b div r)) +\n    g a * g b =\n    g (a * b) +\n    ((\\<Sum>r | r dvd a * b \\<and> r \\<noteq> 1. f r * g (a * b div r)) +\n     g a * g b)", "by (subst sum.insert) (auto intro!: finite_subset[OF _ finite_divisors_nat'] simp: add_ac)"], ["proof (state)\nthis:\n  (\\<Sum>r\\<in>insert 1 {r. r dvd a * b \\<and> r \\<noteq> 1}.\n     f r * g (a * b div r)) +\n  g a * g b =\n  g (a * b) +\n  ((\\<Sum>r | r dvd a * b \\<and> r \\<noteq> 1. f r * g (a * b div r)) +\n   g a * g b)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  (\\<Sum>r\\<in>insert 1 {r. r dvd a * b \\<and> r \\<noteq> 1}.\n     f r * g (a * b div r)) +\n  g a * g b =\n  g (a * b) +\n  ((\\<Sum>r | r dvd a * b \\<and> r \\<noteq> 1. f r * g (a * b div r)) +\n   g a * g b)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"(\\<Sum>r | r dvd a * b \\<and> r \\<noteq> 1. f r * g (a * b div r)) = \n                     (\\<Sum>r | r dvd a * b. if r = 1 then 0 else f r * g (a * b div r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a * b \\<and> r \\<noteq> 1. f r * g (a * b div r)) =\n    (\\<Sum>r | r dvd a * b. if r = 1 then 0::'a else f r * g (a * b div r))", "using less.prems"], ["proof (prove)\nusing this:\n  0 < a\n  0 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a * b \\<and> r \\<noteq> 1. f r * g (a * b div r)) =\n    (\\<Sum>r | r dvd a * b. if r = 1 then 0::'a else f r * g (a * b div r))", "by (intro sum.mono_neutral_cong_left) (auto intro: finite_divisors_nat')"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a * b \\<and> r \\<noteq> 1. f r * g (a * b div r)) =\n  (\\<Sum>r | r dvd a * b. if r = 1 then 0::'a else f r * g (a * b div r))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a * b \\<and> r \\<noteq> 1. f r * g (a * b div r)) =\n  (\\<Sum>r | r dvd a * b. if r = 1 then 0::'a else f r * g (a * b div r))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"\\<dots> = (\\<Sum>r | r dvd a. \\<Sum>d | d dvd b.\n                          if r * d = 1 then 0 else f (r * d) * g (a * b div (r * d)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a * b.\n       if r = 1 then 0::'a else f r * g (a * b div r)) =\n    (\\<Sum>r | r dvd a.\n       \\<Sum>d | d dvd b.\n         if r * d = 1 then 0::'a else f (r * d) * g (a * b div (r * d)))", "using \\<open>coprime a b\\<close>"], ["proof (prove)\nusing this:\n  coprime a b\n\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a * b.\n       if r = 1 then 0::'a else f r * g (a * b div r)) =\n    (\\<Sum>r | r dvd a.\n       \\<Sum>d | d dvd b.\n         if r * d = 1 then 0::'a else f (r * d) * g (a * b div (r * d)))", "by (rule sum_divisors_coprime_mult)"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a * b. if r = 1 then 0::'a else f r * g (a * b div r)) =\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f (r * d) * g (a * b div (r * d)))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a * b. if r = 1 then 0::'a else f r * g (a * b div r)) =\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f (r * d) * g (a * b div (r * d)))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"\\<dots> = (\\<Sum>r | r dvd a. \\<Sum>d | d dvd b.\n                          if r * d = 1 then 0 else f (r * d) * g ((a div r) * (b div d)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a.\n       \\<Sum>d | d dvd b.\n         if r * d = 1 then 0::'a else f (r * d) * g (a * b div (r * d))) =\n    (\\<Sum>r | r dvd a.\n       \\<Sum>d | d dvd b.\n         if r * d = 1 then 0::'a else f (r * d) * g (a div r * (b div d)))", "by (intro sum.cong refl) (auto elim!: dvdE)"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f (r * d) * g (a * b div (r * d))) =\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f (r * d) * g (a div r * (b div d)))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f (r * d) * g (a * b div (r * d))) =\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f (r * d) * g (a div r * (b div d)))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"\\<dots> = (\\<Sum>r | r dvd a. \\<Sum>d | d dvd b.\n                          if r * d = 1 then 0 else f r * f d * g (a div r) * g (b div d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a.\n       \\<Sum>d | d dvd b.\n         if r * d = 1 then 0::'a else f (r * d) * g (a div r * (b div d))) =\n    (\\<Sum>r | r dvd a.\n       \\<Sum>d | d dvd b.\n         if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d))", "using \\<open>coprime a b\\<close>"], ["proof (prove)\nusing this:\n  coprime a b\n\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a.\n       \\<Sum>d | d dvd b.\n         if r * d = 1 then 0::'a else f (r * d) * g (a div r * (b div d))) =\n    (\\<Sum>r | r dvd a.\n       \\<Sum>d | d dvd b.\n         if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d))", "proof (rule sum_coprime_dvd_cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r d.\n       \\<lbrakk>coprime r d; r dvd a; d dvd b\\<rbrakk>\n       \\<Longrightarrow> (if r * d = 1 then 0::'a\n                          else f (r * d) * g (a div r * (b div d))) =\n                         (if r * d = 1 then 0::'a\n                          else f r * f d * g (a div r) * g (b div d))", "fix r s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r d.\n       \\<lbrakk>coprime r d; r dvd a; d dvd b\\<rbrakk>\n       \\<Longrightarrow> (if r * d = 1 then 0::'a\n                          else f (r * d) * g (a div r * (b div d))) =\n                         (if r * d = 1 then 0::'a\n                          else f r * f d * g (a div r) * g (b div d))", "assume \"coprime r s\" and \"r dvd a\" and \"s dvd b\""], ["proof (state)\nthis:\n  coprime r s\n  r dvd a\n  s dvd b\n\ngoal (1 subgoal):\n 1. \\<And>r d.\n       \\<lbrakk>coprime r d; r dvd a; d dvd b\\<rbrakk>\n       \\<Longrightarrow> (if r * d = 1 then 0::'a\n                          else f (r * d) * g (a div r * (b div d))) =\n                         (if r * d = 1 then 0::'a\n                          else f r * f d * g (a div r) * g (b div d))", "with \\<open>a > 0\\<close> \\<open>b > 0\\<close>"], ["proof (chain)\npicking this:\n  0 < a\n  0 < b\n  coprime r s\n  r dvd a\n  s dvd b", "have \"r > 0\" \"s > 0\""], ["proof (prove)\nusing this:\n  0 < a\n  0 < b\n  coprime r s\n  r dvd a\n  s dvd b\n\ngoal (1 subgoal):\n 1. 0 < r &&& 0 < s", "by (auto intro: ccontr)"], ["proof (state)\nthis:\n  0 < r\n  0 < s\n\ngoal (1 subgoal):\n 1. \\<And>r d.\n       \\<lbrakk>coprime r d; r dvd a; d dvd b\\<rbrakk>\n       \\<Longrightarrow> (if r * d = 1 then 0::'a\n                          else f (r * d) * g (a div r * (b div d))) =\n                         (if r * d = 1 then 0::'a\n                          else f r * f d * g (a div r) * g (b div d))", "from \\<open>coprime r s\\<close>"], ["proof (chain)\npicking this:\n  coprime r s", "have f: \"f (r * s) = f r * f s\""], ["proof (prove)\nusing this:\n  coprime r s\n\ngoal (1 subgoal):\n 1. f (r * s) = f r * f s", "by (rule f.mult_coprime)"], ["proof (state)\nthis:\n  f (r * s) = f r * f s\n\ngoal (1 subgoal):\n 1. \\<And>r d.\n       \\<lbrakk>coprime r d; r dvd a; d dvd b\\<rbrakk>\n       \\<Longrightarrow> (if r * d = 1 then 0::'a\n                          else f (r * d) * g (a div r * (b div d))) =\n                         (if r * d = 1 then 0::'a\n                          else f r * f d * g (a div r) * g (b div d))", "show \"(if r * s = 1 then 0 else f (r * s) * g (a div r * (b div s))) =\n          (if r * s = 1 then 0 else f r * f s * g (a div r) * g (b div s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "proof (cases \"r * s = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r * s = 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))\n 2. r * s \\<noteq> 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "case True"], ["proof (state)\nthis:\n  r * s = 1\n\ngoal (2 subgoals):\n 1. r * s = 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))\n 2. r * s \\<noteq> 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "then"], ["proof (chain)\npicking this:\n  r * s = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  r * s = 1\n\ngoal (1 subgoal):\n 1. (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "by simp"], ["proof (state)\nthis:\n  (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n  (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))\n\ngoal (1 subgoal):\n 1. r * s \\<noteq> 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r * s \\<noteq> 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "case False"], ["proof (state)\nthis:\n  r * s \\<noteq> 1\n\ngoal (1 subgoal):\n 1. r * s \\<noteq> 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "with \\<open>r dvd a\\<close> \\<open>s dvd b\\<close> less.prems"], ["proof (chain)\npicking this:\n  r dvd a\n  s dvd b\n  0 < a\n  0 < b\n  coprime a b\n  r * s \\<noteq> 1", "have \"(a div r) * (b div s) \\<noteq> a * b\""], ["proof (prove)\nusing this:\n  r dvd a\n  s dvd b\n  0 < a\n  0 < b\n  coprime a b\n  r * s \\<noteq> 1\n\ngoal (1 subgoal):\n 1. a div r * (b div s) \\<noteq> a * b", "by (intro notI) (auto elim!: dvdE)"], ["proof (state)\nthis:\n  a div r * (b div s) \\<noteq> a * b\n\ngoal (1 subgoal):\n 1. r * s \\<noteq> 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "moreover"], ["proof (state)\nthis:\n  a div r * (b div s) \\<noteq> a * b\n\ngoal (1 subgoal):\n 1. r * s \\<noteq> 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "from \\<open>r dvd a\\<close> \\<open>s dvd b\\<close> less.prems"], ["proof (chain)\npicking this:\n  r dvd a\n  s dvd b\n  0 < a\n  0 < b\n  coprime a b", "have \"(a div r) * (b div s) \\<le> a * b\""], ["proof (prove)\nusing this:\n  r dvd a\n  s dvd b\n  0 < a\n  0 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. a div r * (b div s) \\<le> a * b", "by (intro dvd_imp_le mult_dvd_mono Nat.gr0I) (auto elim!: dvdE)"], ["proof (state)\nthis:\n  a div r * (b div s) \\<le> a * b\n\ngoal (1 subgoal):\n 1. r * s \\<noteq> 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "ultimately"], ["proof (chain)\npicking this:\n  a div r * (b div s) \\<noteq> a * b\n  a div r * (b div s) \\<le> a * b", "have \"(a div r) * (b div s) < a * b\""], ["proof (prove)\nusing this:\n  a div r * (b div s) \\<noteq> a * b\n  a div r * (b div s) \\<le> a * b\n\ngoal (1 subgoal):\n 1. a div r * (b div s) < a * b", "by arith"], ["proof (state)\nthis:\n  a div r * (b div s) < a * b\n\ngoal (1 subgoal):\n 1. r * s \\<noteq> 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "with \\<open>r dvd a\\<close> \\<open>s dvd b\\<close> less.prems"], ["proof (chain)\npicking this:\n  r dvd a\n  s dvd b\n  0 < a\n  0 < b\n  coprime a b\n  a div r * (b div s) < a * b", "have g: \"g ((a div r) * (b div s)) = g (a div r) * g (b div s)\""], ["proof (prove)\nusing this:\n  r dvd a\n  s dvd b\n  0 < a\n  0 < b\n  coprime a b\n  a div r * (b div s) < a * b\n\ngoal (1 subgoal):\n 1. g (a div r * (b div s)) = g (a div r) * g (b div s)", "by (auto intro: less coprime_divisors [OF _ _ \\<open>coprime a b\\<close>] elim!: dvdE)"], ["proof (state)\nthis:\n  g (a div r * (b div s)) = g (a div r) * g (b div s)\n\ngoal (1 subgoal):\n 1. r * s \\<noteq> 1 \\<Longrightarrow>\n    (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "from False"], ["proof (chain)\npicking this:\n  r * s \\<noteq> 1", "show ?thesis"], ["proof (prove)\nusing this:\n  r * s \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n    (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))", "by (auto simp: less f g ac_simps)"], ["proof (state)\nthis:\n  (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n  (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (if r * s = 1 then 0::'a else f (r * s) * g (a div r * (b div s))) =\n  (if r * s = 1 then 0::'a else f r * f s * g (a div r) * g (b div s))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f (r * d) * g (a div r * (b div d))) =\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f (r * d) * g (a div r * (b div d))) =\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"\\<dots> = (\\<Sum>(r,d)\\<in>{r. r dvd a}\\<times>{d. d dvd b}. \n                        if r * d = 1 then 0 else f r * f d * g (a div r) * g (b div d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>r | r dvd a.\n       \\<Sum>d | d dvd b.\n         if r * d = 1 then 0::'a\n         else f r * f d * g (a div r) * g (b div d)) =\n    (\\<Sum>(r, d)\\<in>{r. r dvd a} \\<times> {d. d dvd b}.\n       if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d))", "by (simp add: sum.cartesian_product)"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d)) =\n  (\\<Sum>(r, d)\\<in>{r. r dvd a} \\<times> {d. d dvd b}.\n     if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  (\\<Sum>r | r dvd a.\n     \\<Sum>d | d dvd b.\n       if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d)) =\n  (\\<Sum>(r, d)\\<in>{r. r dvd a} \\<times> {d. d dvd b}.\n     if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"\\<dots> = (\\<Sum>(r1,r2) \\<in> {r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1,1)}.\n                         (f r1 * f r2) * g (a div r1) * g (b div r2))\" (is \"_ = sum ?f ?A\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{r. r dvd a} \\<times> {d. d dvd b}.\n       if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d)) =\n    (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n       f r1 * f r2 * g (a div r1) * g (b div r2))", "using less.prems"], ["proof (prove)\nusing this:\n  0 < a\n  0 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. (\\<Sum>(r, d)\\<in>{r. r dvd a} \\<times> {d. d dvd b}.\n       if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d)) =\n    (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n       f r1 * f r2 * g (a div r1) * g (b div r2))", "by (intro sum.mono_neutral_cong_right) (auto split: if_splits)"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{r. r dvd a} \\<times> {d. d dvd b}.\n     if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d)) =\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n     f r1 * f r2 * g (a div r1) * g (b div r2))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r, d)\\<in>{r. r dvd a} \\<times> {d. d dvd b}.\n     if r * d = 1 then 0::'a else f r * f d * g (a div r) * g (b div d)) =\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n     f r1 * f r2 * g (a div r1) * g (b div r2))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"\\<dots> + g a * g b = ?f (1, 1) + sum ?f ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n       f r1 * f r2 * g (a div r1) * g (b div r2)) +\n    g a * g b =\n    (case (1, 1) of\n     (r1, r2) \\<Rightarrow> f r1 * f r2 * g (a div r1) * g (b div r2)) +\n    (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n       f r1 * f r2 * g (a div r1) * g (b div r2))", "by (simp add: add_ac)"], ["proof (state)\nthis:\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n     f r1 * f r2 * g (a div r1) * g (b div r2)) +\n  g a * g b =\n  (case (1, 1) of\n   (r1, r2) \\<Rightarrow> f r1 * f r2 * g (a div r1) * g (b div r2)) +\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n     f r1 * f r2 * g (a div r1) * g (b div r2))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n     f r1 * f r2 * g (a div r1) * g (b div r2)) +\n  g a * g b =\n  (case (1, 1) of\n   (r1, r2) \\<Rightarrow> f r1 * f r2 * g (a div r1) * g (b div r2)) +\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n     f r1 * f r2 * g (a div r1) * g (b div r2))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"\\<dots> = sum ?f ({r1. r1 dvd a} \\<times> {r2. r2 dvd b})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (1, 1) of\n     (r1, r2) \\<Rightarrow> f r1 * f r2 * g (a div r1) * g (b div r2)) +\n    (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n       f r1 * f r2 * g (a div r1) * g (b div r2)) =\n    (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b}.\n       f r1 * f r2 * g (a div r1) * g (b div r2))", "using less.prems"], ["proof (prove)\nusing this:\n  0 < a\n  0 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. (case (1, 1) of\n     (r1, r2) \\<Rightarrow> f r1 * f r2 * g (a div r1) * g (b div r2)) +\n    (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n       f r1 * f r2 * g (a div r1) * g (b div r2)) =\n    (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b}.\n       f r1 * f r2 * g (a div r1) * g (b div r2))", "by (intro sum.remove [symmetric]) auto"], ["proof (state)\nthis:\n  (case (1, 1) of\n   (r1, r2) \\<Rightarrow> f r1 * f r2 * g (a div r1) * g (b div r2)) +\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n     f r1 * f r2 * g (a div r1) * g (b div r2)) =\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b}.\n     f r1 * f r2 * g (a div r1) * g (b div r2))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  (case (1, 1) of\n   (r1, r2) \\<Rightarrow> f r1 * f r2 * g (a div r1) * g (b div r2)) +\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b} - {(1, 1)}.\n     f r1 * f r2 * g (a div r1) * g (b div r2)) =\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b}.\n     f r1 * f r2 * g (a div r1) * g (b div r2))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"\\<dots> = dirichlet_prod f g a * dirichlet_prod f g b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b}.\n       f r1 * f r2 * g (a div r1) * g (b div r2)) =\n    dirichlet_prod f g a * dirichlet_prod f g b", "by (simp add: sum.cartesian_product sum_product dirichlet_prod_def mult_ac)"], ["proof (state)\nthis:\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b}.\n     f r1 * f r2 * g (a div r1) * g (b div r2)) =\n  dirichlet_prod f g a * dirichlet_prod f g b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "also"], ["proof (state)\nthis:\n  (\\<Sum>(r1, r2)\\<in>{r1. r1 dvd a} \\<times> {r2. r2 dvd b}.\n     f r1 * f r2 * g (a div r1) * g (b div r2)) =\n  dirichlet_prod f g a * dirichlet_prod f g b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "have \"g (a * b) + dirichlet_prod f g a * dirichlet_prod f g b =\n                   dirichlet_prod f g (a * b) + g (a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g (a * b) + dirichlet_prod f g a * dirichlet_prod f g b =\n    dirichlet_prod f g (a * b) + g (a * b)", "using less.prems"], ["proof (prove)\nusing this:\n  0 < a\n  0 < b\n  coprime a b\n\ngoal (1 subgoal):\n 1. g (a * b) + dirichlet_prod f g a * dirichlet_prod f g b =\n    dirichlet_prod f g (a * b) + g (a * b)", "by (simp add: fg.mult_coprime add_ac)"], ["proof (state)\nthis:\n  g (a * b) + dirichlet_prod f g a * dirichlet_prod f g b =\n  dirichlet_prod f g (a * b) + g (a * b)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>aa * ba < a * b; 0 < aa; 0 < ba;\n                    coprime aa ba\\<rbrakk>\n                   \\<Longrightarrow> g (aa * ba) = g aa * g ba;\n        0 < a; 0 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> g (a * b) = g a * g b", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod f g (a * b) + g a * g b =\n  dirichlet_prod f g (a * b) + g (a * b)", "show ?case"], ["proof (prove)\nusing this:\n  dirichlet_prod f g (a * b) + g a * g b =\n  dirichlet_prod f g (a * b) + g (a * b)\n\ngoal (1 subgoal):\n 1. g (a * b) = g a * g b", "by simp"], ["proof (state)\nthis:\n  g (a * b) = g a * g b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  g (a * b) = g a * g b\n\ngoal (1 subgoal):\n 1. g 0 = (0::'a)", "qed simp_all"], ["proof (state)\nthis:\n  multiplicative_function g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multiplicative_dirichlet_prodD2:\n  fixes f g :: \"nat \\<Rightarrow> 'a :: comm_semiring_1_cancel\"\n  assumes \"multiplicative_function (dirichlet_prod f g)\"\n  assumes \"multiplicative_function g\"\n  assumes [simp]: \"f 0 = 0\"\n  shows   \"multiplicative_function f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. multiplicative_function f", "from assms(1)"], ["proof (chain)\npicking this:\n  multiplicative_function (dirichlet_prod f g)", "have \"multiplicative_function (dirichlet_prod g f)\""], ["proof (prove)\nusing this:\n  multiplicative_function (dirichlet_prod f g)\n\ngoal (1 subgoal):\n 1. multiplicative_function (dirichlet_prod g f)", "by (simp add: dirichlet_prod_commutes)"], ["proof (state)\nthis:\n  multiplicative_function (dirichlet_prod g f)\n\ngoal (1 subgoal):\n 1. multiplicative_function f", "from multiplicative_dirichlet_prodD1[OF this assms(2)]"], ["proof (chain)\npicking this:\n  f 0 = (0::'a) \\<Longrightarrow> multiplicative_function f", "show ?thesis"], ["proof (prove)\nusing this:\n  f 0 = (0::'a) \\<Longrightarrow> multiplicative_function f\n\ngoal (1 subgoal):\n 1. multiplicative_function f", "by simp"], ["proof (state)\nthis:\n  multiplicative_function f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma multiplicative_dirichlet_inverse:\n  assumes \"multiplicative_function f\"\n  shows   \"multiplicative_function (dirichlet_inverse f 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (dirichlet_inverse f (1::'a))", "proof (rule multiplicative_dirichlet_prodD1[OF _ assms])"], ["proof (state)\ngoal (2 subgoals):\n 1. multiplicative_function (dirichlet_prod f (dirichlet_inverse f (1::'a)))\n 2. dirichlet_inverse f (1::'a) 0 = (0::'a)", "interpret multiplicative_function f"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function f", "by fact"], ["proof (state)\ngoal (2 subgoals):\n 1. multiplicative_function (dirichlet_prod f (dirichlet_inverse f (1::'a)))\n 2. dirichlet_inverse f (1::'a) 0 = (0::'a)", "have \"multiplicative_function (\\<lambda>n. if n = 1 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (\\<lambda>n. if n = 1 then 1::'b else (0::'b))", "by standard simp_all"], ["proof (state)\nthis:\n  multiplicative_function (\\<lambda>n. if n = 1 then 1::?'b1 else (0::?'b1))\n\ngoal (2 subgoals):\n 1. multiplicative_function (dirichlet_prod f (dirichlet_inverse f (1::'a)))\n 2. dirichlet_inverse f (1::'a) 0 = (0::'a)", "thus \"multiplicative_function (dirichlet_prod f (dirichlet_inverse f 1))\""], ["proof (prove)\nusing this:\n  multiplicative_function (\\<lambda>n. if n = 1 then 1::?'b1 else (0::?'b1))\n\ngoal (1 subgoal):\n 1. multiplicative_function (dirichlet_prod f (dirichlet_inverse f (1::'a)))", "by (subst dirichlet_prod_inverse) simp_all"], ["proof (state)\nthis:\n  multiplicative_function (dirichlet_prod f (dirichlet_inverse f (1::'a)))\n\ngoal (1 subgoal):\n 1. dirichlet_inverse f (1::'a) 0 = (0::'a)", "qed simp_all"], ["", "lemma dirichlet_prod_prime_power:\n  assumes \"prime p\"\n  shows   \"dirichlet_prod f g (p ^ k) = (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g (p ^ k) =\n    (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dirichlet_prod f g (p ^ k) =\n    (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))", "have \"dirichlet_prod f g (p ^ k) = (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ k div p ^ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g (p ^ k) =\n    (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ k div p ^ i))", "unfolding dirichlet_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd p ^ k. f d * g (p ^ k div d)) =\n    (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ k div p ^ i))", "using assms"], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd p ^ k. f d * g (p ^ k div d)) =\n    (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ k div p ^ i))", "by (intro sum.reindex_bij_betw [symmetric] bij_betw_prime_power_divisors)"], ["proof (state)\nthis:\n  dirichlet_prod f g (p ^ k) =\n  (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ k div p ^ i))\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g (p ^ k) =\n    (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))", "also"], ["proof (state)\nthis:\n  dirichlet_prod f g (p ^ k) =\n  (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ k div p ^ i))\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g (p ^ k) =\n    (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))", "from assms"], ["proof (chain)\npicking this:\n  prime p", "have \"\\<dots> = (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ k div p ^ i)) =\n    (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))", "by (intro sum.cong refl) (auto simp: power_diff')"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ k div p ^ i)) =\n  (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g (p ^ k) =\n    (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod f g (p ^ k) = (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))", "show ?thesis"], ["proof (prove)\nusing this:\n  dirichlet_prod f g (p ^ k) = (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g (p ^ k) =\n    (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))", "."], ["proof (state)\nthis:\n  dirichlet_prod f g (p ^ k) = (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dirichlet_prod_prime:\n  assumes \"prime p\"\n  shows   \"dirichlet_prod f g p  = f 1 * g p + f p * g 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dirichlet_prod f g p = f 1 * g p + f p * g 1", "using dirichlet_prod_prime_power[of p f g 1] assms"], ["proof (prove)\nusing this:\n  prime p \\<Longrightarrow>\n  dirichlet_prod f g (p ^ 1) = (\\<Sum>i\\<le>1. f (p ^ i) * g (p ^ (1 - i)))\n  prime p\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g p = f 1 * g p + f p * g 1", "by simp"], ["", "locale multiplicative_dirichlet_prod = \n  f: multiplicative_function f + g: multiplicative_function g \n  for f g :: \"nat \\<Rightarrow> 'a :: comm_semiring_1\"\nbegin"], ["", "sublocale multiplicative_function \"dirichlet_prod f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (dirichlet_prod f g)", "by (intro multiplicative_dirichlet_prod \n        f.multiplicative_function_axioms g.multiplicative_function_axioms)"], ["", "end"], ["", "locale multiplicative_dirichlet_prod' = \n  f: multiplicative_function' f f_prime_power f_prime + \n  g: multiplicative_function' g g_prime_power g_prime\n  for f g :: \"nat \\<Rightarrow> 'a :: comm_semiring_1\" and f_prime_power g_prime_power f_prime g_prime\nbegin"], ["", "sublocale multiplicative_dirichlet_prod f g"], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_dirichlet_prod f g", ".."], ["", "sublocale multiplicative_function' \"dirichlet_prod f g\" \n  \"\\<lambda>p k. f_prime_power p k + g_prime_power p k + \n      (\\<Sum>i\\<in>{0<..<k}. f_prime_power p i * g_prime_power p (k - i))\" \n  \"\\<lambda>p. f_prime p + g_prime p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function' (dirichlet_prod f g)\n     (\\<lambda>p k.\n         f_prime_power p k + g_prime_power p k +\n         (\\<Sum>i\\<in>{0<..<k}.\n            f_prime_power p i * g_prime_power p (k - i)))\n     (\\<lambda>p. f_prime p + g_prime p)", "proof (standard, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (p ^ k) =\n                         f_prime_power p k + g_prime_power p k +\n                         (\\<Sum>i\\<in>{0<..<k}.\n                            f_prime_power p i * g_prime_power p (k - i))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "case (1 p k)"], ["proof (state)\nthis:\n  prime p\n  0 < k\n\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (p ^ k) =\n                         f_prime_power p k + g_prime_power p k +\n                         (\\<Sum>i\\<in>{0<..<k}.\n                            f_prime_power p i * g_prime_power p (k - i))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "hence \"dirichlet_prod f g (p ^ k) = (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))\""], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g (p ^ k) =\n    (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))", "by (intro dirichlet_prod_prime_power)"], ["proof (state)\nthis:\n  dirichlet_prod f g (p ^ k) = (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))\n\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (p ^ k) =\n                         f_prime_power p k + g_prime_power p k +\n                         (\\<Sum>i\\<in>{0<..<k}.\n                            f_prime_power p i * g_prime_power p (k - i))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "also"], ["proof (state)\nthis:\n  dirichlet_prod f g (p ^ k) = (\\<Sum>i\\<le>k. f (p ^ i) * g (p ^ (k - i)))\n\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (p ^ k) =\n                         f_prime_power p k + g_prime_power p k +\n                         (\\<Sum>i\\<in>{0<..<k}.\n                            f_prime_power p i * g_prime_power p (k - i))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "from 1"], ["proof (chain)\npicking this:\n  prime p\n  0 < k", "have \"{..k} = insert 0 (insert k {0<..<k})\""], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. {..k} = insert 0 (insert k {0<..<k})", "by auto"], ["proof (state)\nthis:\n  {..k} = insert 0 (insert k {0<..<k})\n\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (p ^ k) =\n                         f_prime_power p k + g_prime_power p k +\n                         (\\<Sum>i\\<in>{0<..<k}.\n                            f_prime_power p i * g_prime_power p (k - i))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "also"], ["proof (state)\nthis:\n  {..k} = insert 0 (insert k {0<..<k})\n\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (p ^ k) =\n                         f_prime_power p k + g_prime_power p k +\n                         (\\<Sum>i\\<in>{0<..<k}.\n                            f_prime_power p i * g_prime_power p (k - i))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "have \"(\\<Sum>i\\<in>\\<dots>. f (p ^ i) * g (p ^ (k - i))) = \n               f_prime_power p k + g_prime_power p k + \n               (\\<Sum>i\\<in>{0<..<k}. f (p ^ i) * g (p ^ (k - i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>insert 0 (insert k {0<..<k}).\n       f (p ^ i) * g (p ^ (k - i))) =\n    f_prime_power p k + g_prime_power p k +\n    (\\<Sum>i\\<in>{0<..<k}. f (p ^ i) * g (p ^ (k - i)))", "using 1"], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>insert 0 (insert k {0<..<k}).\n       f (p ^ i) * g (p ^ (k - i))) =\n    f_prime_power p k + g_prime_power p k +\n    (\\<Sum>i\\<in>{0<..<k}. f (p ^ i) * g (p ^ (k - i)))", "by (auto simp: f.prime_power g.prime_power add_ac)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>insert 0 (insert k {0<..<k}). f (p ^ i) * g (p ^ (k - i))) =\n  f_prime_power p k + g_prime_power p k +\n  (\\<Sum>i\\<in>{0<..<k}. f (p ^ i) * g (p ^ (k - i)))\n\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (p ^ k) =\n                         f_prime_power p k + g_prime_power p k +\n                         (\\<Sum>i\\<in>{0<..<k}.\n                            f_prime_power p i * g_prime_power p (k - i))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>insert 0 (insert k {0<..<k}). f (p ^ i) * g (p ^ (k - i))) =\n  f_prime_power p k + g_prime_power p k +\n  (\\<Sum>i\\<in>{0<..<k}. f (p ^ i) * g (p ^ (k - i)))\n\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (p ^ k) =\n                         f_prime_power p k + g_prime_power p k +\n                         (\\<Sum>i\\<in>{0<..<k}.\n                            f_prime_power p i * g_prime_power p (k - i))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "have \"(\\<Sum>i\\<in>{0<..<k}. f (p ^ i) * g (p ^ (k - i))) = \n               (\\<Sum>i\\<in>{0<..<k}. f_prime_power p i * g_prime_power p (k - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0<..<k}. f (p ^ i) * g (p ^ (k - i))) =\n    (\\<Sum>i\\<in>{0<..<k}. f_prime_power p i * g_prime_power p (k - i))", "using 1"], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>{0<..<k}. f (p ^ i) * g (p ^ (k - i))) =\n    (\\<Sum>i\\<in>{0<..<k}. f_prime_power p i * g_prime_power p (k - i))", "by (intro sum.cong) (auto simp: f.prime_power g.prime_power)"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>{0<..<k}. f (p ^ i) * g (p ^ (k - i))) =\n  (\\<Sum>i\\<in>{0<..<k}. f_prime_power p i * g_prime_power p (k - i))\n\ngoal (2 subgoals):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> dirichlet_prod f g (p ^ k) =\n                         f_prime_power p k + g_prime_power p k +\n                         (\\<Sum>i\\<in>{0<..<k}.\n                            f_prime_power p i * g_prime_power p (k - i))\n 2. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "finally"], ["proof (chain)\npicking this:\n  dirichlet_prod f g (p ^ k) =\n  f_prime_power p k + g_prime_power p k +\n  (\\<Sum>i\\<in>{0<..<k}. f_prime_power p i * g_prime_power p (k - i))", "show ?case"], ["proof (prove)\nusing this:\n  dirichlet_prod f g (p ^ k) =\n  f_prime_power p k + g_prime_power p k +\n  (\\<Sum>i\\<in>{0<..<k}. f_prime_power p i * g_prime_power p (k - i))\n\ngoal (1 subgoal):\n 1. dirichlet_prod f g (p ^ k) =\n    f_prime_power p k + g_prime_power p k +\n    (\\<Sum>i\\<in>{0<..<k}. f_prime_power p i * g_prime_power p (k - i))", "."], ["proof (state)\nthis:\n  dirichlet_prod f g (p ^ k) =\n  f_prime_power p k + g_prime_power p k +\n  (\\<Sum>i\\<in>{0<..<k}. f_prime_power p i * g_prime_power p (k - i))\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "case (2 p)"], ["proof (state)\nthis:\n  prime p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "have \"{0<..<Suc 0} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0<..<Suc 0} = {}", "by auto"], ["proof (state)\nthis:\n  {0<..<Suc 0} = {}\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       prime p \\<Longrightarrow>\n       f_prime_power p 1 + g_prime_power p 1 +\n       (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n       f_prime p + g_prime p", "with 2"], ["proof (chain)\npicking this:\n  prime p\n  {0<..<Suc 0} = {}", "show ?case"], ["proof (prove)\nusing this:\n  prime p\n  {0<..<Suc 0} = {}\n\ngoal (1 subgoal):\n 1. f_prime_power p 1 + g_prime_power p 1 +\n    (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n    f_prime p + g_prime p", "by (auto simp: f.prime_power [symmetric] g.prime_power [symmetric] f.prime g.prime add_ac)"], ["proof (state)\nthis:\n  f_prime_power p 1 + g_prime_power p 1 +\n  (\\<Sum>i\\<in>{0<..<1}. f_prime_power p i * g_prime_power p (1 - i)) =\n  f_prime p + g_prime p\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}