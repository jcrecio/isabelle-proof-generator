{"file_name": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series/Liouville_Lambda.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dirichlet_Series", "problem_names": ["lemma liouville_lambda_prime [simp]: \"prime p \\<Longrightarrow> liouville_lambda p = -1\"", "lemma liouville_lambda_prime_power [simp]: \"prime p \\<Longrightarrow> liouville_lambda (p ^ k) = (-1) ^ k\"", "lemma liouville_lambda_squarefree: \"squarefree n \\<Longrightarrow> liouville_lambda n = moebius_mu n\"", "lemma power_neg_one_If: \"(-1) ^ n = (if even n then 1 else -1 :: 'a :: ring_1)\"", "lemma liouville_lambda_power_even: \n  \"n > 0 \\<Longrightarrow> even m \\<Longrightarrow> liouville_lambda (n ^ m) = 1\"", "lemma liouville_lambda_power_odd: \n  \"odd m \\<Longrightarrow> liouville_lambda (n ^ m) = liouville_lambda n\"", "lemma liouville_lambda_power:\n  \"liouville_lambda (n ^ m) = \n     (if n = 0 \\<and> m > 0 then 0 else if even m then 1 else liouville_lambda n)\"", "lemma liouville_lambda_divisors_sum:\n  \"(\\<Sum>d | d dvd n. liouville_lambda d) = ind is_square n\"", "lemma fds_liouville_lambda_times_zeta: \"fds liouville_lambda * fds_zeta = fds_ind is_square\"", "lemma fds_liouville_lambda: \"fds liouville_lambda = fds_ind is_square * fds moebius_mu\"", "lemma liouville_lambda_altdef:\n  \"liouville_lambda n = (\\<Sum>d | d ^ 2 dvd n. moebius_mu (n div d ^ 2))\"", "lemma abs_moebius_mu: \"abs (moebius_mu n :: 'a :: linordered_idom) = ind squarefree n\""], "translations": [["", "lemma liouville_lambda_prime [simp]: \"prime p \\<Longrightarrow> liouville_lambda p = -1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> liouville_lambda p = - (1::'a)", "by (simp add: liouville_lambda_def prime_factorization_prime)"], ["", "lemma liouville_lambda_prime_power [simp]: \"prime p \\<Longrightarrow> liouville_lambda (p ^ k) = (-1) ^ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> liouville_lambda (p ^ k) = (- (1::'a)) ^ k", "by (simp add: liouville_lambda_def prime_factorization_prime_power)"], ["", "lemma liouville_lambda_squarefree: \"squarefree n \\<Longrightarrow> liouville_lambda n = moebius_mu n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. squarefree n \\<Longrightarrow> liouville_lambda n = moebius_mu n", "by (auto simp: liouville_lambda_def moebius_mu_squarefree_eq' intro!: Nat.gr0I)"], ["", "lemma power_neg_one_If: \"(-1) ^ n = (if even n then 1 else -1 :: 'a :: ring_1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- (1::'a)) ^ n = (if even n then 1::'a else - (1::'a))", "by (induction n) (simp_all split: if_splits)"], ["", "lemma liouville_lambda_power_even: \n  \"n > 0 \\<Longrightarrow> even m \\<Longrightarrow> liouville_lambda (n ^ m) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n; even m\\<rbrakk>\n    \\<Longrightarrow> liouville_lambda (n ^ m) = (1::'a)", "by (subst liouville_lambda.power) (auto elim!: evenE simp: liouville_lambda_def power_neg_one_If)"], ["", "lemma liouville_lambda_power_odd: \n  \"odd m \\<Longrightarrow> liouville_lambda (n ^ m) = liouville_lambda n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd m \\<Longrightarrow> liouville_lambda (n ^ m) = liouville_lambda n", "by (subst liouville_lambda.power) (auto elim!: oddE simp: liouville_lambda_def power_neg_one_If)"], ["", "lemma liouville_lambda_power:\n  \"liouville_lambda (n ^ m) = \n     (if n = 0 \\<and> m > 0 then 0 else if even m then 1 else liouville_lambda n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liouville_lambda (n ^ m) =\n    (if n = 0 \\<and> 0 < m then 0::'a\n     else if even m then 1::'a else liouville_lambda n)", "by (auto simp: liouville_lambda_power_even liouville_lambda_power_odd power_0_left)"], ["", "interpretation squarefree: multiplicative_function' \n  \"ind squarefree\" \"\\<lambda>p k. if k > 1 then 0 else 1\" \"\\<lambda>_. 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function' (ind squarefree)\n     (\\<lambda>p k. if 1 < k then 0::'a else (1::'a)) (\\<lambda>_. 1::'a)", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. ind squarefree 0 = (0::'a)\n 2. ind squarefree 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> ind squarefree (a * b) =\n                         ind squarefree a * ind squarefree b\n 4. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> ind squarefree (p ^ k) =\n                         (if 1 < k then 0::'a else (1::'a))\n 5. \\<And>p.\n       prime p \\<Longrightarrow>\n       (if 1 < 1 then 0::'a else (1::'a)) = (1::'a)", "fix p k :: nat"], ["proof (state)\ngoal (5 subgoals):\n 1. ind squarefree 0 = (0::'a)\n 2. ind squarefree 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> ind squarefree (a * b) =\n                         ind squarefree a * ind squarefree b\n 4. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> ind squarefree (p ^ k) =\n                         (if 1 < k then 0::'a else (1::'a))\n 5. \\<And>p.\n       prime p \\<Longrightarrow>\n       (if 1 < 1 then 0::'a else (1::'a)) = (1::'a)", "assume \"prime p\" \"k > 0\""], ["proof (state)\nthis:\n  prime p\n  0 < k\n\ngoal (5 subgoals):\n 1. ind squarefree 0 = (0::'a)\n 2. ind squarefree 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> ind squarefree (a * b) =\n                         ind squarefree a * ind squarefree b\n 4. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> ind squarefree (p ^ k) =\n                         (if 1 < k then 0::'a else (1::'a))\n 5. \\<And>p.\n       prime p \\<Longrightarrow>\n       (if 1 < 1 then 0::'a else (1::'a)) = (1::'a)", "thus \"ind squarefree (p ^ k) = (if 1 < k then 0 else 1 :: 'a)\""], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. ind squarefree (p ^ k) = (if 1 < k then 0::'a else (1::'a))", "by (cases \"k = 1\") (auto simp: squarefree_power_iff squarefree_prime ind_def)"], ["proof (state)\nthis:\n  ind squarefree (p ^ k) = (if 1 < k then 0::'a else (1::'a))\n\ngoal (4 subgoals):\n 1. ind squarefree 0 = (0::'a)\n 2. ind squarefree 1 = (1::'a)\n 3. \\<And>a b.\n       \\<lbrakk>1 < a; 1 < b; coprime a b\\<rbrakk>\n       \\<Longrightarrow> ind squarefree (a * b) =\n                         ind squarefree a * ind squarefree b\n 4. \\<And>p.\n       prime p \\<Longrightarrow>\n       (if 1 < 1 then 0::'a else (1::'a)) = (1::'a)", "qed (auto simp: squarefree_mult_coprime squarefree_power_iff ind_def dest: squarefree_multD \n          simp del: One_nat_def)"], ["", "interpretation is_nth_power: multiplicative_function \"ind (is_nth_power n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (ind (is_nth_power n))", "by standard (auto simp: is_nth_power_mult_coprime_nat_iff)"], ["", "interpretation is_nth_power: multiplicative_function' \n  \"ind (is_nth_power n)\" \"\\<lambda>p k. if n dvd k then 1 else 0\" \"\\<lambda>_. if n = 1 then 1 else 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function' (ind (is_nth_power n))\n     (\\<lambda>p k. if n dvd k then 1::'a else (0::'a))\n     (\\<lambda>_. if n = 1 then 1::'a else (0::'a))", "by standard (simp_all add: is_nth_power_prime_power_nat_iff ind_def)"], ["", "interpretation is_square: multiplicative_function \"ind is_square\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (ind is_square)", "by standard (auto simp: is_nth_power_mult_coprime_nat_iff)"], ["", "interpretation is_square: multiplicative_function' \n  \"ind is_square\" \"\\<lambda>p k. if even k then 1 else 0\" \"\\<lambda>_. 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function' (ind is_square)\n     (\\<lambda>p k. if even k then 1::'a else (0::'a)) (\\<lambda>_. 0::'a)", "by standard (simp_all add: is_nth_power_prime_power_nat_iff ind_def)"], ["", "lemma liouville_lambda_divisors_sum:\n  \"(\\<Sum>d | d dvd n. liouville_lambda d) = ind is_square n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. liouville_lambda d) = ind is_square n", "proof (rule multiplicative_function_eqI)"], ["proof (state)\ngoal (3 subgoals):\n 1. multiplicative_function\n     (\\<lambda>a. \\<Sum>d | d dvd a. liouville_lambda d)\n 2. multiplicative_function (ind is_square)\n 3. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "show \"multiplicative_function (\\<lambda>n. (\\<Sum>d | d dvd n. liouville_lambda d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function\n     (\\<lambda>n. \\<Sum>d | d dvd n. liouville_lambda d)", "by (rule liouville_lambda.multiplicative_sum_divisors)"], ["proof (state)\nthis:\n  multiplicative_function\n   (\\<lambda>n. \\<Sum>d | d dvd n. liouville_lambda d)\n\ngoal (2 subgoals):\n 1. multiplicative_function (ind is_square)\n 2. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "show \"multiplicative_function (ind is_square)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. multiplicative_function (ind is_square)", "by (rule is_nth_power.multiplicative_function_axioms)"], ["proof (state)\nthis:\n  multiplicative_function (ind is_square)\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "fix p k :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "assume pk: \"prime p\" \"k > 0\""], ["proof (state)\nthis:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "hence p_gt_1: \"p > 1\""], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. 1 < p", "by (simp add: prime_gt_Suc_0_nat)"], ["proof (state)\nthis:\n  1 < p\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "have \"(\\<Sum>d | d dvd p ^ k. liouville_lambda d) = (\\<Sum>d\\<in>(\\<lambda>i. p ^ i) ` {..k}. liouville_lambda d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n    sum liouville_lambda ((^) p ` {..k})", "using pk"], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n    sum liouville_lambda ((^) p ` {..k})", "by (intro sum.cong refl) (auto intro: le_imp_power_dvd simp: divides_primepow_nat)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n  sum liouville_lambda ((^) p ` {..k})\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n  sum liouville_lambda ((^) p ` {..k})\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "from pk and p_gt_1"], ["proof (chain)\npicking this:\n  prime p\n  0 < k\n  1 < p", "have \"\\<dots> = (\\<Sum>i\\<le>k. liouville_lambda (p ^ i))\""], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n  1 < p\n\ngoal (1 subgoal):\n 1. sum liouville_lambda ((^) p ` {..k}) =\n    (\\<Sum>i\\<le>k. liouville_lambda (p ^ i))", "by (subst sum.reindex) (auto simp: inj_on_def prime_gt_1_nat)"], ["proof (state)\nthis:\n  sum liouville_lambda ((^) p ` {..k}) =\n  (\\<Sum>i\\<le>k. liouville_lambda (p ^ i))\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "also"], ["proof (state)\nthis:\n  sum liouville_lambda ((^) p ` {..k}) =\n  (\\<Sum>i\\<le>k. liouville_lambda (p ^ i))\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "from pk"], ["proof (chain)\npicking this:\n  prime p\n  0 < k", "have \"\\<dots> = (\\<Sum>i\\<le>k. (-1) ^ i)\""], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<le>k. liouville_lambda (p ^ i)) = sum ((^) (- (1::'b))) {..k}", "by (intro sum.cong refl) simp"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>k. liouville_lambda (p ^ i)) = sum ((^) (- (1::?'b3))) {..k}\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i\\<le>k. liouville_lambda (p ^ i)) = sum ((^) (- (1::?'b3))) {..k}\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "have \"\\<dots> = (if even k then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum ((^) (- (1::'b))) {..k} = (if even k then 1::'b else (0::'b))", "by (induction k) auto"], ["proof (state)\nthis:\n  sum ((^) (- (1::?'b4))) {..k} = (if even k then 1::?'b4 else (0::?'b4))\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "also"], ["proof (state)\nthis:\n  sum ((^) (- (1::?'b4))) {..k} = (if even k then 1::?'b4 else (0::?'b4))\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "from pk"], ["proof (chain)\npicking this:\n  prime p\n  0 < k", "have \"\\<dots> = ind is_square (p ^ k)\""], ["proof (prove)\nusing this:\n  prime p\n  0 < k\n\ngoal (1 subgoal):\n 1. (if even k then 1::'b else (0::'b)) = ind is_square (p ^ k)", "by (simp add: is_square.prime_power)"], ["proof (state)\nthis:\n  (if even k then 1::?'b5 else (0::?'b5)) = ind is_square (p ^ k)\n\ngoal (1 subgoal):\n 1. \\<And>p k.\n       \\<lbrakk>prime p; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>d | d dvd p ^ k. liouville_lambda d) =\n                         ind is_square (p ^ k)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>d | d dvd p ^ k. liouville_lambda d) = ind is_square (p ^ k)", "show \"(\\<Sum>d | d dvd p ^ k. liouville_lambda d) = ind is_square (p ^ k)\""], ["proof (prove)\nusing this:\n  (\\<Sum>d | d dvd p ^ k. liouville_lambda d) = ind is_square (p ^ k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd p ^ k. liouville_lambda d) = ind is_square (p ^ k)", "."], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd p ^ k. liouville_lambda d) = ind is_square (p ^ k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fds_liouville_lambda_times_zeta: \"fds liouville_lambda * fds_zeta = fds_ind is_square\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds liouville_lambda * fds_zeta = fds_ind is_square", "by (rule fds_eqI) (simp add: liouville_lambda_divisors_sum fds_nth_mult dirichlet_prod_def)"], ["", "lemma fds_liouville_lambda: \"fds liouville_lambda = fds_ind is_square * fds moebius_mu\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds liouville_lambda = fds_ind is_square * fds moebius_mu", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fds liouville_lambda = fds_ind is_square * fds moebius_mu", "have \"fds liouville_lambda * fds_zeta * fds moebius_mu = fds_ind is_square * fds moebius_mu\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds liouville_lambda * fds_zeta * fds moebius_mu =\n    fds_ind is_square * fds moebius_mu", "by (simp add: fds_liouville_lambda_times_zeta)"], ["proof (state)\nthis:\n  fds liouville_lambda * fds_zeta * fds moebius_mu =\n  fds_ind is_square * fds moebius_mu\n\ngoal (1 subgoal):\n 1. fds liouville_lambda = fds_ind is_square * fds moebius_mu", "also"], ["proof (state)\nthis:\n  fds liouville_lambda * fds_zeta * fds moebius_mu =\n  fds_ind is_square * fds moebius_mu\n\ngoal (1 subgoal):\n 1. fds liouville_lambda = fds_ind is_square * fds moebius_mu", "have \"fds liouville_lambda * fds_zeta * fds moebius_mu = fds liouville_lambda\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds liouville_lambda * fds_zeta * fds moebius_mu = fds liouville_lambda", "by (simp only: mult.assoc fds_zeta_times_moebius_mu mult_1_right)"], ["proof (state)\nthis:\n  fds liouville_lambda * fds_zeta * fds moebius_mu = fds liouville_lambda\n\ngoal (1 subgoal):\n 1. fds liouville_lambda = fds_ind is_square * fds moebius_mu", "finally"], ["proof (chain)\npicking this:\n  fds liouville_lambda = fds_ind is_square * fds moebius_mu", "show ?thesis"], ["proof (prove)\nusing this:\n  fds liouville_lambda = fds_ind is_square * fds moebius_mu\n\ngoal (1 subgoal):\n 1. fds liouville_lambda = fds_ind is_square * fds moebius_mu", "."], ["proof (state)\nthis:\n  fds liouville_lambda = fds_ind is_square * fds moebius_mu\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma liouville_lambda_altdef:\n  \"liouville_lambda n = (\\<Sum>d | d ^ 2 dvd n. moebius_mu (n div d ^ 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "have \"liouville_lambda n = fds_nth (fds liouville_lambda) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liouville_lambda n = fds_nth (fds liouville_lambda) n", "by (simp add: fds_nth_fds)"], ["proof (state)\nthis:\n  liouville_lambda n = fds_nth (fds liouville_lambda) n\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "also"], ["proof (state)\nthis:\n  liouville_lambda n = fds_nth (fds liouville_lambda) n\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "have \"fds liouville_lambda = fds_ind is_square * (fds moebius_mu :: 'a fds)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds liouville_lambda = fds_ind is_square * fds moebius_mu", "by (rule fds_liouville_lambda)"], ["proof (state)\nthis:\n  fds liouville_lambda = fds_ind is_square * fds moebius_mu\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "also"], ["proof (state)\nthis:\n  fds liouville_lambda = fds_ind is_square * fds moebius_mu\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "have \"fds_nth \\<dots> n = (\\<Sum>d | d dvd n. ind is_square d * moebius_mu (n div d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fds_nth (fds_ind is_square * fds moebius_mu) n =\n    (\\<Sum>d | d dvd n. ind is_square d * moebius_mu (n div d))", "by (simp add: fds_nth_mult dirichlet_prod_def)"], ["proof (state)\nthis:\n  fds_nth (fds_ind is_square * fds moebius_mu) n =\n  (\\<Sum>d | d dvd n. ind is_square d * moebius_mu (n div d))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "also"], ["proof (state)\nthis:\n  fds_nth (fds_ind is_square * fds moebius_mu) n =\n  (\\<Sum>d | d dvd n. ind is_square d * moebius_mu (n div d))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "have \"\\<dots> = (\\<Sum>d \\<in> (\\<lambda>d. d^2) ` {d. d ^ 2 dvd n}. moebius_mu (n div d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. ind is_square d * moebius_mu (n div d)) =\n    (\\<Sum>d\\<in>power2 ` {d. d\\<^sup>2 dvd n}. moebius_mu (n div d))", "using False"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>d | d dvd n. ind is_square d * moebius_mu (n div d)) =\n    (\\<Sum>d\\<in>power2 ` {d. d\\<^sup>2 dvd n}. moebius_mu (n div d))", "by (intro sum.mono_neutral_cong_right) (auto simp: ind_def is_nth_power_def)"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. ind is_square d * moebius_mu (n div d)) =\n  (\\<Sum>d\\<in>power2 ` {d. d\\<^sup>2 dvd n}. moebius_mu (n div d))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "also"], ["proof (state)\nthis:\n  (\\<Sum>d | d dvd n. ind is_square d * moebius_mu (n div d)) =\n  (\\<Sum>d\\<in>power2 ` {d. d\\<^sup>2 dvd n}. moebius_mu (n div d))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "have \"\\<dots> = (\\<Sum>d | d ^ 2 dvd n. moebius_mu (n div d ^ 2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>d\\<in>power2 ` {d. d\\<^sup>2 dvd n}. moebius_mu (n div d)) =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "by (subst sum.reindex) (auto simp: inj_on_def dest: power2_eq_imp_eq)"], ["proof (state)\nthis:\n  (\\<Sum>d\\<in>power2 ` {d. d\\<^sup>2 dvd n}. moebius_mu (n div d)) =\n  (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "finally"], ["proof (chain)\npicking this:\n  liouville_lambda n =\n  (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  liouville_lambda n =\n  (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n\ngoal (1 subgoal):\n 1. liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "."], ["proof (state)\nthis:\n  liouville_lambda n =\n  (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow>\n    liouville_lambda n =\n    (\\<Sum>d | d\\<^sup>2 dvd n. moebius_mu (n div d\\<^sup>2))", "qed auto"], ["", "lemma abs_moebius_mu: \"abs (moebius_mu n :: 'a :: linordered_idom) = ind squarefree n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>moebius_mu n\\<bar> = ind squarefree n", "by (auto simp: ind_def moebius_mu_def)"], ["", "end"]]}