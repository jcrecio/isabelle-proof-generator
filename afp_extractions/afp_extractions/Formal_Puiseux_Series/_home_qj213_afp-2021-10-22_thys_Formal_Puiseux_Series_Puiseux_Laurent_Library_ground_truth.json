{"file_name": "/home/qj213/afp-2021-10-22/thys/Formal_Puiseux_Series/Puiseux_Laurent_Library.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Formal_Puiseux_Series", "problem_names": ["lemma filterlim_at_top_div_const_nat:\n  assumes \"c > 0\"\n  shows   \"filterlim (\\<lambda>x::nat. x div c) at_top at_top\"", "lemma fls_eq_iff: \"f = g \\<longleftrightarrow> (\\<forall>n. fls_nth f n = fls_nth g n)\"", "lemma fls_shift_eq_1_iff: \"fls_shift n f = 1 \\<longleftrightarrow> f = fls_shift (-n) 1\"", "lemma fps_to_fls_eq_iff [simp]: \"fps_to_fls f = fps_to_fls g \\<longleftrightarrow> f = g\"", "lemma fps_to_fls_eq_0_iff [simp]: \"fps_to_fls f = 0 \\<longleftrightarrow> f = 0\"", "lemma fps_to_fls_eq_1_iff [simp]: \"fps_to_fls f = 1 \\<longleftrightarrow> f = 1\"", "lemma fps_to_fls_power: \"fps_to_fls (f ^ n) = fps_to_fls f ^ n\"", "lemma fls_as_fps:\n  fixes f :: \"'a :: zero fls\" and n :: int\n  assumes n: \"n \\<ge> -fls_subdegree f\"\n  obtains f' where \"f = fls_shift n (fps_to_fls f')\"", "lemma fls_as_fps':\n  fixes f :: \"'a :: zero fls\" and n :: int\n  assumes n: \"n \\<ge> -fls_subdegree f\"\n  shows \"\\<exists>f'. f = fls_shift n (fps_to_fls f')\"", "lemma fls_compose_fps_fps [simp]:\n  \"fls_compose_fps (fps_to_fls f) g = fps_to_fls (fps_compose f g)\"", "lemma fls_const_transfer [transfer_rule]:\n  \"rel_fun (=) (pcr_fls (=))\n     (\\<lambda>c n. if n = 0 then c else 0) fls_const\"", "lemma fls_shift_transfer [transfer_rule]:\n  \"rel_fun (=) (rel_fun (pcr_fls (=)) (pcr_fls (=)))\n     (\\<lambda>n f k. f (k+n)) fls_shift\"", "lemma fls_nth_compose_power:\n  assumes \"d > 0\"\n  shows   \"fls_nth (fls_compose_power f d) n = (if int d dvd n then fls_nth f (n div int d) else 0)\"", "lemma fls_compose_power_0_left [simp]: \"fls_compose_power 0 d = 0\"", "lemma fls_compose_power_1_left [simp]: \"d > 0 \\<Longrightarrow> fls_compose_power 1 d = 1\"", "lemma fls_compose_power_const_left [simp]:\n  \"d > 0 \\<Longrightarrow> fls_compose_power (fls_const c) d = fls_const c\"", "lemma fls_compose_power_shift [simp]:\n  \"d > 0 \\<Longrightarrow> fls_compose_power (fls_shift n f) d = fls_shift (d * n) (fls_compose_power f d)\"", "lemma fls_compose_power_X_intpow [simp]:\n  \"d > 0 \\<Longrightarrow> fls_compose_power (fls_X_intpow n) d = fls_X_intpow (int d * n)\"", "lemma fls_compose_power_X [simp]:\n  \"d > 0 \\<Longrightarrow> fls_compose_power fls_X d = fls_X_intpow (int d)\"", "lemma fls_compose_power_X_inv [simp]:\n  \"d > 0 \\<Longrightarrow> fls_compose_power fls_X_inv d = fls_X_intpow (-int d)\"", "lemma fls_compose_power_0_right [simp]: \"fls_compose_power f 0 = 0\"", "lemma fls_compose_power_add [simp]:\n  \"fls_compose_power (f + g) d = fls_compose_power f d + fls_compose_power g d\"", "lemma fls_compose_power_diff [simp]:\n  \"fls_compose_power (f - g) d = fls_compose_power f d - fls_compose_power g d\"", "lemma fls_compose_power_uminus [simp]:\n  \"fls_compose_power (-f) d = -fls_compose_power f d\"", "lemma fps_nth_compose_X_power:\n  \"fps_nth (f oo (fps_X ^ d)) n = (if d dvd n then fps_nth f (n div d) else 0)\"", "lemma fls_compose_power_fps_to_fls:\n  assumes \"d > 0\"\n  shows   \"fls_compose_power (fps_to_fls f) d = fps_to_fls (fps_compose f (fps_X ^ d))\"", "lemma fls_compose_power_mult [simp]:\n  \"fls_compose_power (f * g :: 'a :: idom fls) d = fls_compose_power f d * fls_compose_power g d\"", "lemma fls_compose_power_power [simp]:\n  assumes \"d > 0 \\<or> n > 0\"\n  shows   \"fls_compose_power (f ^ n :: 'a :: idom fls) d = fls_compose_power f d ^ n\"", "lemma fls_nth_compose_power' [simp]:\n  \"d = 0 \\<or> \\<not>d dvd n \\<Longrightarrow> fls_nth (fls_compose_power f d) n = 0\"\n  \"d dvd n \\<Longrightarrow> d > 0 \\<Longrightarrow> fls_nth (fls_compose_power f d) n = fls_nth f (n div d)\""], "translations": [["", "lemma filterlim_at_top_div_const_nat:\n  assumes \"c > 0\"\n  shows   \"filterlim (\\<lambda>x::nat. x div c) at_top at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LIM x sequentially. x div c :> sequentially", "unfolding filterlim_at_top"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Z. \\<forall>\\<^sub>F x in sequentially. Z \\<le> x div c", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in sequentially. Z \\<le> x div c", "fix C :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in sequentially. Z \\<le> x div c", "have *: \"n div c \\<ge> C\" if \"n \\<ge> C * c\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<le> n div c", "using assms that"], ["proof (prove)\nusing this:\n  0 < c\n  C * c \\<le> n\n\ngoal (1 subgoal):\n 1. C \\<le> n div c", "by (metis div_le_mono div_mult_self_is_m)"], ["proof (state)\nthis:\n  C * c \\<le> ?n \\<Longrightarrow> C \\<le> ?n div c\n\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in sequentially. Z \\<le> x div c", "have \"eventually (\\<lambda>n. n \\<ge> C * c) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eventually ((\\<le>) (C * c)) sequentially", "by (rule eventually_ge_at_top)"], ["proof (state)\nthis:\n  eventually ((\\<le>) (C * c)) sequentially\n\ngoal (1 subgoal):\n 1. \\<And>Z. \\<forall>\\<^sub>F x in sequentially. Z \\<le> x div c", "thus \"eventually (\\<lambda>n. n div c \\<ge> C) at_top\""], ["proof (prove)\nusing this:\n  eventually ((\\<le>) (C * c)) sequentially\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially. C \\<le> n div c", "by eventually_elim (use * in auto)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially. C \\<le> n div c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fls_eq_iff: \"f = g \\<longleftrightarrow> (\\<forall>n. fls_nth f n = fls_nth g n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = g) = (\\<forall>n. fls_nth f n = fls_nth g n)", "by transfer auto"], ["", "lemma fls_shift_eq_1_iff: \"fls_shift n f = 1 \\<longleftrightarrow> f = fls_shift (-n) 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fls_shift n f = 1) = (f = fls_X_intpow n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (fls_shift n f = 1) = (f = fls_X_intpow n)", "have \"fls_shift n f = 1 \\<longleftrightarrow> fls_shift n f = fls_shift n (fls_shift (-n) 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fls_shift n f = 1) = (fls_shift n f = fls_shift n (fls_X_intpow n))", "by (simp del: fls_shift_eq_iff)"], ["proof (state)\nthis:\n  (fls_shift n f = 1) = (fls_shift n f = fls_shift n (fls_X_intpow n))\n\ngoal (1 subgoal):\n 1. (fls_shift n f = 1) = (f = fls_X_intpow n)", "also"], ["proof (state)\nthis:\n  (fls_shift n f = 1) = (fls_shift n f = fls_shift n (fls_X_intpow n))\n\ngoal (1 subgoal):\n 1. (fls_shift n f = 1) = (f = fls_X_intpow n)", "have \"\\<dots> \\<longleftrightarrow> f = fls_shift (-n) 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fls_shift n f = fls_shift n (fls_X_intpow n)) = (f = fls_X_intpow n)", "by (subst fls_shift_eq_iff) auto"], ["proof (state)\nthis:\n  (fls_shift n f = fls_shift n (fls_X_intpow n)) = (f = fls_X_intpow n)\n\ngoal (1 subgoal):\n 1. (fls_shift n f = 1) = (f = fls_X_intpow n)", "finally"], ["proof (chain)\npicking this:\n  (fls_shift n f = 1) = (f = fls_X_intpow n)", "show ?thesis"], ["proof (prove)\nusing this:\n  (fls_shift n f = 1) = (f = fls_X_intpow n)\n\ngoal (1 subgoal):\n 1. (fls_shift n f = 1) = (f = fls_X_intpow n)", "."], ["proof (state)\nthis:\n  (fls_shift n f = 1) = (f = fls_X_intpow n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fps_to_fls_eq_iff [simp]: \"fps_to_fls f = fps_to_fls g \\<longleftrightarrow> f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fps_to_fls f = fps_to_fls g) = (f = g)", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. fps_to_fls f = fps_to_fls g \\<Longrightarrow> f = g", "assume \"fps_to_fls f = fps_to_fls g\""], ["proof (state)\nthis:\n  fps_to_fls f = fps_to_fls g\n\ngoal (1 subgoal):\n 1. fps_to_fls f = fps_to_fls g \\<Longrightarrow> f = g", "hence *: \"n < 0 \\<or> f $ nat n = g $ nat n\" for n"], ["proof (prove)\nusing this:\n  fps_to_fls f = fps_to_fls g\n\ngoal (1 subgoal):\n 1. n < 0 \\<or> f $ nat n = g $ nat n", "by (force simp: fls_eq_iff split: if_splits)"], ["proof (state)\nthis:\n  ?n < 0 \\<or> f $ nat ?n = g $ nat ?n\n\ngoal (1 subgoal):\n 1. fps_to_fls f = fps_to_fls g \\<Longrightarrow> f = g", "have \"f $ n = g $ n\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. f $ n = g $ n", "using *[of \"int n\"]"], ["proof (prove)\nusing this:\n  int n < 0 \\<or> f $ nat (int n) = g $ nat (int n)\n\ngoal (1 subgoal):\n 1. f $ n = g $ n", "by auto"], ["proof (state)\nthis:\n  f $ ?n = g $ ?n\n\ngoal (1 subgoal):\n 1. fps_to_fls f = fps_to_fls g \\<Longrightarrow> f = g", "thus \"f = g\""], ["proof (prove)\nusing this:\n  f $ ?n = g $ ?n\n\ngoal (1 subgoal):\n 1. f = g", "by (auto simp: fps_eq_iff)"], ["proof (state)\nthis:\n  f = g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fps_to_fls_eq_0_iff [simp]: \"fps_to_fls f = 0 \\<longleftrightarrow> f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fps_to_fls f = 0) = (f = 0)", "using fps_to_fls_eq_iff[of f 0]"], ["proof (prove)\nusing this:\n  (fps_to_fls f = fps_to_fls 0) = (f = 0)\n\ngoal (1 subgoal):\n 1. (fps_to_fls f = 0) = (f = 0)", "by (simp del: fps_to_fls_eq_iff)"], ["", "lemma fps_to_fls_eq_1_iff [simp]: \"fps_to_fls f = 1 \\<longleftrightarrow> f = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fps_to_fls f = 1) = (f = 1)", "using fps_to_fls_eq_iff[of f 1]"], ["proof (prove)\nusing this:\n  (fps_to_fls f = fps_to_fls 1) = (f = 1)\n\ngoal (1 subgoal):\n 1. (fps_to_fls f = 1) = (f = 1)", "by (simp del: fps_to_fls_eq_iff)"], ["", "lemma fps_to_fls_power: \"fps_to_fls (f ^ n) = fps_to_fls f ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_to_fls (f ^ n) = fps_to_fls f ^ n", "by (induction n) (auto simp: fls_times_fps_to_fls)"], ["", "lemma fls_as_fps:\n  fixes f :: \"'a :: zero fls\" and n :: int\n  assumes n: \"n \\<ge> -fls_subdegree f\"\n  obtains f' where \"f = fls_shift n (fps_to_fls f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f = fls_shift n (fps_to_fls f') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f = fls_shift n (fps_to_fls f') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"fls_subdegree (fls_shift (- n) f) \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> fls_subdegree (fls_shift (- n) f)", "by (rule fls_shift_nonneg_subdegree) (use n in simp)"], ["proof (state)\nthis:\n  0 \\<le> fls_subdegree (fls_shift (- n) f)\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f = fls_shift n (fps_to_fls f') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "hence \"f = fls_shift n (fps_to_fls (fls_regpart (fls_shift (-n) f)))\""], ["proof (prove)\nusing this:\n  0 \\<le> fls_subdegree (fls_shift (- n) f)\n\ngoal (1 subgoal):\n 1. f = fls_shift n (fls_regpart_as_fls (fls_shift (- n) f))", "by (subst fls_regpart_to_fls_trivial) simp_all"], ["proof (state)\nthis:\n  f = fls_shift n (fls_regpart_as_fls (fls_shift (- n) f))\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f = fls_shift n (fps_to_fls f') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = fls_shift n (fls_regpart_as_fls (fls_shift (- n) f))\n\ngoal (1 subgoal):\n 1. thesis", "by (rule that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fls_as_fps':\n  fixes f :: \"'a :: zero fls\" and n :: int\n  assumes n: \"n \\<ge> -fls_subdegree f\"\n  shows \"\\<exists>f'. f = fls_shift n (fps_to_fls f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f'. f = fls_shift n (fps_to_fls f')", "using fls_as_fps[OF assms]"], ["proof (prove)\nusing this:\n  (\\<And>f'.\n      f = fls_shift n (fps_to_fls f') \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>f'. f = fls_shift n (fps_to_fls f')", "by metis"], ["", "definition fls_compose_fps :: \"'a :: field fls \\<Rightarrow> 'a fps \\<Rightarrow> 'a fls\" where\n  \"fls_compose_fps f g =\n     (if f = 0 then 0\n      else if fls_subdegree f \\<ge> 0 then fps_to_fls (fps_compose (fls_regpart f) g)\n      else fps_to_fls (fps_compose (fls_base_factor_to_fps f) g) /\n             fps_to_fls g ^ nat (-fls_subdegree f))\""], ["", "lemma fls_compose_fps_fps [simp]:\n  \"fls_compose_fps (fps_to_fls f) g = fps_to_fls (fps_compose f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_compose_fps (fps_to_fls f) g = fps_to_fls (f oo g)", "by (auto simp: fls_compose_fps_def fls_subdegree_fls_to_fps)"], ["", "lemma fls_const_transfer [transfer_rule]:\n  \"rel_fun (=) (pcr_fls (=))\n     (\\<lambda>c n. if n = 0 then c else 0) fls_const\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun (=) (pcr_fls (=)) (\\<lambda>c n. if n = 0 then c else (0::'a))\n     fls_const", "by (auto simp: fls_const_def rel_fun_def pcr_fls_def OO_def cr_fls_def)"], ["", "lemma fls_shift_transfer [transfer_rule]:\n  \"rel_fun (=) (rel_fun (pcr_fls (=)) (pcr_fls (=)))\n     (\\<lambda>n f k. f (k+n)) fls_shift\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun (=) (rel_fun (pcr_fls (=)) (pcr_fls (=)))\n     (\\<lambda>n f k. f (k + n)) fls_shift", "by (auto simp: fls_const_def rel_fun_def pcr_fls_def OO_def cr_fls_def)"], ["", "lift_definition fls_compose_power :: \"'a :: zero fls \\<Rightarrow> nat \\<Rightarrow> 'a fls\" is\n  \"\\<lambda>f d n. if d > 0 \\<and> int d dvd n then f (n div int d) else 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun nat.\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (- int n) = (0::'a) \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          (if 0 < nat \\<and> int nat dvd - int n\n           then fun (- int n div int nat) else (0::'a)) =\n          (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun nat.\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (- int n) = (0::'a) \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          (if 0 < nat \\<and> int nat dvd - int n\n           then fun (- int n div int nat) else (0::'a)) =\n          (0::'a)", "fix f :: \"int \\<Rightarrow> 'a\" and d :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun nat.\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (- int n) = (0::'a) \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          (if 0 < nat \\<and> int nat dvd - int n\n           then fun (- int n div int nat) else (0::'a)) =\n          (0::'a)", "assume *: \"eventually (\\<lambda>n. f (-int n) = 0) cofinite\""], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>fun nat.\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (- int n) = (0::'a) \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          (if 0 < nat \\<and> int nat dvd - int n\n           then fun (- int n div int nat) else (0::'a)) =\n          (0::'a)", "show \"eventually (\\<lambda>n. (if d > 0 \\<and> int d dvd -int n then f (-int n div int d) else 0) = 0) cofinite\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)", "proof (cases \"d = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)\n 2. d \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)", "case False"], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)\n 2. d \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)", "from *"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a)", "have \"eventually (\\<lambda>n. f (-int n) = 0) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially. f (- int n) = (0::'a)", "by (simp add: cofinite_eq_sequentially)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially. f (- int n) = (0::'a)\n\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)\n 2. d \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)", "hence \"eventually (\\<lambda>n. f (-int (n div d)) = 0) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially. f (- int n) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially. f (- int (n div d)) = (0::'a)", "by (rule eventually_compose_filterlim[OF _ filterlim_at_top_div_const_nat]) (use False in auto)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially. f (- int (n div d)) = (0::'a)\n\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)\n 2. d \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)", "hence \"eventually (\\<lambda>n. (if d > 0 \\<and> int d dvd -int n then f (-int n div int d) else 0) = 0) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially. f (- int (n div d)) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)", "by eventually_elim (auto simp: zdiv_int dvd_neg_div)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n      else (0::'a)) =\n     (0::'a)\n\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)\n 2. d \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially.\n     (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n      else (0::'a)) =\n     (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)", "by (simp add: cofinite_eq_sequentially)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>n.\n     (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n      else (0::'a)) =\n     (0::'a)\n\ngoal (1 subgoal):\n 1. d = 0 \\<Longrightarrow>\n    \\<forall>\\<^sub>\\<infinity>n.\n       (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n        else (0::'a)) =\n       (0::'a)", "qed auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>n.\n     (if 0 < d \\<and> int d dvd - int n then f (- int n div int d)\n      else (0::'a)) =\n     (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fls_nth_compose_power:\n  assumes \"d > 0\"\n  shows   \"fls_nth (fls_compose_power f d) n = (if int d dvd n then fls_nth f (n div int d) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_nth (fls_compose_power f d) n =\n    (if int d dvd n then fls_nth f (n div int d) else (0::'a))", "using assms"], ["proof (prove)\nusing this:\n  0 < d\n\ngoal (1 subgoal):\n 1. fls_nth (fls_compose_power f d) n =\n    (if int d dvd n then fls_nth f (n div int d) else (0::'a))", "by transfer auto"], ["", "lemma fls_compose_power_0_left [simp]: \"fls_compose_power 0 d = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_compose_power 0 d = 0", "by transfer auto"], ["", "lemma fls_compose_power_1_left [simp]: \"d > 0 \\<Longrightarrow> fls_compose_power 1 d = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow> fls_compose_power 1 d = 1", "by transfer (auto simp: fun_eq_iff)"], ["", "lemma fls_compose_power_const_left [simp]:\n  \"d > 0 \\<Longrightarrow> fls_compose_power (fls_const c) d = fls_const c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow> fls_compose_power (fls_const c) d = fls_const c", "by transfer (auto simp: fun_eq_iff)"], ["", "lemma fls_compose_power_shift [simp]:\n  \"d > 0 \\<Longrightarrow> fls_compose_power (fls_shift n f) d = fls_shift (d * n) (fls_compose_power f d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow>\n    fls_compose_power (fls_shift n f) d =\n    fls_shift (int d * n) (fls_compose_power f d)", "by transfer (auto simp: fun_eq_iff add_ac mult_ac)"], ["", "lemma fls_compose_power_X_intpow [simp]:\n  \"d > 0 \\<Longrightarrow> fls_compose_power (fls_X_intpow n) d = fls_X_intpow (int d * n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow>\n    fls_compose_power (fls_X_intpow n) d = fls_X_intpow (int d * n)", "by simp"], ["", "lemma fls_compose_power_X [simp]:\n  \"d > 0 \\<Longrightarrow> fls_compose_power fls_X d = fls_X_intpow (int d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow> fls_compose_power fls_X d = fls_X_intpow (int d)", "by transfer (auto simp: fun_eq_iff)"], ["", "lemma fls_compose_power_X_inv [simp]:\n  \"d > 0 \\<Longrightarrow> fls_compose_power fls_X_inv d = fls_X_intpow (-int d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d \\<Longrightarrow>\n    fls_compose_power fls_X_inv d = fls_X_intpow (- int d)", "by (simp add: fls_X_inv_conv_shift_1)"], ["", "lemma fls_compose_power_0_right [simp]: \"fls_compose_power f 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_compose_power f 0 = 0", "by transfer auto"], ["", "lemma fls_compose_power_add [simp]:\n  \"fls_compose_power (f + g) d = fls_compose_power f d + fls_compose_power g d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_compose_power (f + g) d =\n    fls_compose_power f d + fls_compose_power g d", "by transfer auto"], ["", "lemma fls_compose_power_diff [simp]:\n  \"fls_compose_power (f - g) d = fls_compose_power f d - fls_compose_power g d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_compose_power (f - g) d =\n    fls_compose_power f d - fls_compose_power g d", "by transfer auto"], ["", "lemma fls_compose_power_uminus [simp]:\n  \"fls_compose_power (-f) d = -fls_compose_power f d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_compose_power (- f) d = - fls_compose_power f d", "by transfer auto"], ["", "lemma fps_nth_compose_X_power:\n  \"fps_nth (f oo (fps_X ^ d)) n = (if d dvd n then fps_nth f (n div d) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f oo fps_X ^ d) $ n = (if d dvd n then f $ (n div d) else (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (f oo fps_X ^ d) $ n = (if d dvd n then f $ (n div d) else (0::'a))", "have \"fps_nth (f oo (fps_X ^ d)) n = (\\<Sum>i = 0..n. f $ i * (fps_X ^ (d * i)) $ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f oo fps_X ^ d) $ n = (\\<Sum>i = 0..n. f $ i * fps_X ^ (d * i) $ n)", "unfolding fps_compose_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_fps (\\<lambda>n. \\<Sum>i = 0..n. f $ i * (fps_X ^ d) ^ i $ n) $ n =\n    (\\<Sum>i = 0..n. f $ i * fps_X ^ (d * i) $ n)", "by (simp add: power_mult)"], ["proof (state)\nthis:\n  (f oo fps_X ^ d) $ n = (\\<Sum>i = 0..n. f $ i * fps_X ^ (d * i) $ n)\n\ngoal (1 subgoal):\n 1. (f oo fps_X ^ d) $ n = (if d dvd n then f $ (n div d) else (0::'a))", "also"], ["proof (state)\nthis:\n  (f oo fps_X ^ d) $ n = (\\<Sum>i = 0..n. f $ i * fps_X ^ (d * i) $ n)\n\ngoal (1 subgoal):\n 1. (f oo fps_X ^ d) $ n = (if d dvd n then f $ (n div d) else (0::'a))", "have \"\\<dots> = (\\<Sum>i\\<in>(if d dvd n then {n div d} else {}). f $ i * (fps_X ^ (d * i)) $ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..n. f $ i * fps_X ^ (d * i) $ n) =\n    (\\<Sum>i\\<in>(if d dvd n then {n div d} else {}).\n       f $ i * fps_X ^ (d * i) $ n)", "by (intro sum.mono_neutral_right) auto"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..n. f $ i * fps_X ^ (d * i) $ n) =\n  (\\<Sum>i\\<in>(if d dvd n then {n div d} else {}).\n     f $ i * fps_X ^ (d * i) $ n)\n\ngoal (1 subgoal):\n 1. (f oo fps_X ^ d) $ n = (if d dvd n then f $ (n div d) else (0::'a))", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..n. f $ i * fps_X ^ (d * i) $ n) =\n  (\\<Sum>i\\<in>(if d dvd n then {n div d} else {}).\n     f $ i * fps_X ^ (d * i) $ n)\n\ngoal (1 subgoal):\n 1. (f oo fps_X ^ d) $ n = (if d dvd n then f $ (n div d) else (0::'a))", "have \"\\<dots> = (if d dvd n then fps_nth f (n div d) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>(if d dvd n then {n div d} else {}).\n       f $ i * fps_X ^ (d * i) $ n) =\n    (if d dvd n then f $ (n div d) else (0::'a))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>i\\<in>(if d dvd n then {n div d} else {}).\n     f $ i * fps_X ^ (d * i) $ n) =\n  (if d dvd n then f $ (n div d) else (0::'a))\n\ngoal (1 subgoal):\n 1. (f oo fps_X ^ d) $ n = (if d dvd n then f $ (n div d) else (0::'a))", "finally"], ["proof (chain)\npicking this:\n  (f oo fps_X ^ d) $ n = (if d dvd n then f $ (n div d) else (0::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  (f oo fps_X ^ d) $ n = (if d dvd n then f $ (n div d) else (0::'a))\n\ngoal (1 subgoal):\n 1. (f oo fps_X ^ d) $ n = (if d dvd n then f $ (n div d) else (0::'a))", "."], ["proof (state)\nthis:\n  (f oo fps_X ^ d) $ n = (if d dvd n then f $ (n div d) else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fls_compose_power_fps_to_fls:\n  assumes \"d > 0\"\n  shows   \"fls_compose_power (fps_to_fls f) d = fps_to_fls (fps_compose f (fps_X ^ d))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_compose_power (fps_to_fls f) d = fps_to_fls (f oo fps_X ^ d)", "using assms"], ["proof (prove)\nusing this:\n  0 < d\n\ngoal (1 subgoal):\n 1. fls_compose_power (fps_to_fls f) d = fps_to_fls (f oo fps_X ^ d)", "by (intro fls_eqI) (auto simp: fls_nth_compose_power fps_nth_compose_X_power\n                                 pos_imp_zdiv_neg_iff div_neg_pos_less0 nat_div_distrib\n                           simp flip: int_dvd_int_iff)"], ["", "lemma fls_compose_power_mult [simp]:\n  \"fls_compose_power (f * g :: 'a :: idom fls) d = fls_compose_power f d * fls_compose_power g d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d", "proof (cases \"d > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d\n 2. \\<not> 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d", "case True"], ["proof (state)\nthis:\n  0 < d\n\ngoal (2 subgoals):\n 1. 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d\n 2. \\<not> 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d", "define n where \"n = nat (max 0 (max (- fls_subdegree f) (- fls_subdegree g)))\""], ["proof (state)\nthis:\n  n = nat (max 0 (max (- fls_subdegree f) (- fls_subdegree g)))\n\ngoal (2 subgoals):\n 1. 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d\n 2. \\<not> 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d", "have n_ge: \"-fls_subdegree f \\<le> int n\" \"-fls_subdegree g \\<le> int n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - fls_subdegree f \\<le> int n &&& - fls_subdegree g \\<le> int n", "unfolding n_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. - fls_subdegree f\n    \\<le> int (nat (max 0\n                     (max (- fls_subdegree f) (- fls_subdegree g)))) &&&\n    - fls_subdegree g\n    \\<le> int (nat (max 0 (max (- fls_subdegree f) (- fls_subdegree g))))", "by auto"], ["proof (state)\nthis:\n  - fls_subdegree f \\<le> int n\n  - fls_subdegree g \\<le> int n\n\ngoal (2 subgoals):\n 1. 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d\n 2. \\<not> 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d", "obtain f' where f': \"f = fls_shift n (fps_to_fls f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f = fls_shift (int n) (fps_to_fls f') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fls_as_fps[OF n_ge(1)]"], ["proof (prove)\nusing this:\n  (\\<And>f'.\n      f = fls_shift (int n) (fps_to_fls f') \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f = fls_shift (int n) (fps_to_fls f') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: n_def)"], ["proof (state)\nthis:\n  f = fls_shift (int n) (fps_to_fls f')\n\ngoal (2 subgoals):\n 1. 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d\n 2. \\<not> 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d", "obtain g' where g': \"g = fls_shift n (fps_to_fls g')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        g = fls_shift (int n) (fps_to_fls g') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fls_as_fps[OF n_ge(2)]"], ["proof (prove)\nusing this:\n  (\\<And>f'.\n      g = fls_shift (int n) (fps_to_fls f') \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        g = fls_shift (int n) (fps_to_fls g') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: n_def)"], ["proof (state)\nthis:\n  g = fls_shift (int n) (fps_to_fls g')\n\ngoal (2 subgoals):\n 1. 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d\n 2. \\<not> 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d", "using \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < d\n\ngoal (1 subgoal):\n 1. fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d", "by (simp add: f' g' fls_shifted_times_simps mult_ac fls_compose_power_fps_to_fls\n                  fps_compose_mult_distrib flip: fls_times_fps_to_fls)"], ["proof (state)\nthis:\n  fls_compose_power (f * g) d =\n  fls_compose_power f d * fls_compose_power g d\n\ngoal (1 subgoal):\n 1. \\<not> 0 < d \\<Longrightarrow>\n    fls_compose_power (f * g) d =\n    fls_compose_power f d * fls_compose_power g d", "qed auto"], ["", "lemma fls_compose_power_power [simp]:\n  assumes \"d > 0 \\<or> n > 0\"\n  shows   \"fls_compose_power (f ^ n :: 'a :: idom fls) d = fls_compose_power f d ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_compose_power (f ^ n) d = fls_compose_power f d ^ n", "proof (cases \"d > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < d \\<Longrightarrow>\n    fls_compose_power (f ^ n) d = fls_compose_power f d ^ n\n 2. \\<not> 0 < d \\<Longrightarrow>\n    fls_compose_power (f ^ n) d = fls_compose_power f d ^ n", "case True"], ["proof (state)\nthis:\n  0 < d\n\ngoal (2 subgoals):\n 1. 0 < d \\<Longrightarrow>\n    fls_compose_power (f ^ n) d = fls_compose_power f d ^ n\n 2. \\<not> 0 < d \\<Longrightarrow>\n    fls_compose_power (f ^ n) d = fls_compose_power f d ^ n", "thus ?thesis"], ["proof (prove)\nusing this:\n  0 < d\n\ngoal (1 subgoal):\n 1. fls_compose_power (f ^ n) d = fls_compose_power f d ^ n", "by (induction n) auto"], ["proof (state)\nthis:\n  fls_compose_power (f ^ n) d = fls_compose_power f d ^ n\n\ngoal (1 subgoal):\n 1. \\<not> 0 < d \\<Longrightarrow>\n    fls_compose_power (f ^ n) d = fls_compose_power f d ^ n", "qed (use assms in auto)"], ["", "lemma fls_nth_compose_power' [simp]:\n  \"d = 0 \\<or> \\<not>d dvd n \\<Longrightarrow> fls_nth (fls_compose_power f d) n = 0\"\n  \"d dvd n \\<Longrightarrow> d > 0 \\<Longrightarrow> fls_nth (fls_compose_power f d) n = fls_nth f (n div d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d = 0 \\<or> \\<not> d dvd n \\<Longrightarrow>\n     fls_nth (fls_compose_power f d) (int n) = (0::'a)) &&&\n    (\\<lbrakk>d dvd n; 0 < d\\<rbrakk>\n     \\<Longrightarrow> fls_nth (fls_compose_power f d) (int n) =\n                       fls_nth f (int (n div d)))", "by (transfer; force; fail)+"], ["", "end"]]}